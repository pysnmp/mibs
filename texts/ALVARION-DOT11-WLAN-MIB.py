#
# PySNMP MIB module ALVARION-DOT11-WLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alvarion/ALVARION-DOT11-WLAN-MIB
# Produced by pysmi-1.1.12 at Wed Dec  4 21:11:23 2024
# On host fv-az585-169 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, TimeTicks, ModuleIdentity, Counter32, iso, Integer32, MibIdentifier, Counter64, ObjectIdentity, Unsigned32, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "TimeTicks", "ModuleIdentity", "Counter32", "iso", "Integer32", "MibIdentifier", "Counter64", "ObjectIdentity", "Unsigned32", "Bits", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
alvarion = MibIdentifier((1, 3, 6, 1, 4, 1, 12394))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1))
breezeAccessVLMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 12394, 1, 1))
breezeAccessVLMib.setRevisions(('1907-08-14 11:46',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: breezeAccessVLMib.setRevisionsDescriptions(('Version 4.5',))
if mibBuilder.loadTexts: breezeAccessVLMib.setLastUpdated('0708141146Z')
if mibBuilder.loadTexts: breezeAccessVLMib.setOrganization('Alvarion Ltd.')
if mibBuilder.loadTexts: breezeAccessVLMib.setContactInfo('Alvarion Customer Service\n\t\t\t\t\t     Postal: Alvarion Ltd.\n\t\t\t\t\t     Barzel 21\n\t\t\t\t\t     Tel Aviv 69710 \n\t\t\t\t\t     ISRAEL\n\t\t                 E-mail: CS_Coordinator@alvarion.com')
if mibBuilder.loadTexts: breezeAccessVLMib.setDescription('BreezeAccess VL, BreezeACCESS 4900 and BreezeNET-B')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class DisplayString(OctetString):
    pass

alvarionOID = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4))
brzAccessVLOID = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1))
brzAccessVLAU = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 1))
brzAccessVLSU = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 2))
brzAccessVLAU_BS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 4)).setLabel("brzAccessVLAU-BS")
brzAccessVLAU_SA = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 5)).setLabel("brzAccessVLAU-SA")
brzAccessVLAUS_BS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 6)).setLabel("brzAccessVLAUS-BS")
brzAccessVLAUS_SA = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 7)).setLabel("brzAccessVLAUS-SA")
brzAccessAU_EZ = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 8)).setLabel("brzAccessAU-EZ")
brzAccessVLSU_6_1D = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 11)).setLabel("brzAccessVLSU-6-1D")
brzAccessVLSU_6_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 12)).setLabel("brzAccessVLSU-6-BD")
brzAccessVLSU_24_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 13)).setLabel("brzAccessVLSU-24-BD")
brzAccessVLSU_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 14)).setLabel("brzAccessVLSU-BD")
brzAccessVLSU_54_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 15)).setLabel("brzAccessVLSU-54-BD")
brzAccessVLSU_3_1D = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 16)).setLabel("brzAccessVLSU-3-1D")
brzAccessVLSU_3_4D = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 17)).setLabel("brzAccessVLSU-3-4D")
brzAccessVLSU_I = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 18)).setLabel("brzAccessVLSU-I")
brzNetB_BU_B14 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 21)).setLabel("brzNetB-BU-B14")
brzNetB_BU_B28 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 22)).setLabel("brzNetB-BU-B28")
brzNetB_BU_B100 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 23)).setLabel("brzNetB-BU-B100")
brzNetB_RB_B14 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 31)).setLabel("brzNetB-RB-B14")
brzNetB_RB_B28 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 32)).setLabel("brzNetB-RB-B28")
brzNetB_RB_B100 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 33)).setLabel("brzNetB-RB-B100")
brzAccess4900_AU_BS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 41)).setLabel("brzAccess4900-AU-BS")
brzAccess4900_AU_SA = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 42)).setLabel("brzAccess4900-AU-SA")
brzAccess4900_SU_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 51)).setLabel("brzAccess4900-SU-BD")
brzAccessVLProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3))
brzaccVLSysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1))
brzaccVLUnitHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitHwVersion.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUnitHwVersion.setDescription('Applicable to all units.  \n             Hardware platform version.')
brzaccVLRunningSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunningSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: brzaccVLRunningSoftwareVersion.setDescription('Applicable to all units.  \n             Running software version.')
brzaccVLRunningFrom = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mainVersion", 1), ("shadowVersion", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunningFrom.setStatus('current')
if mibBuilder.loadTexts: brzaccVLRunningFrom.setDescription('Applicable to all units.  \n             The memory (main or shadow) from which the current version is \n             running from.')
brzaccVLMainVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMainVersionNumber.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMainVersionNumber.setDescription('Applicable to all units.  \n             Main software version number.')
brzaccVLMainVersionFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMainVersionFileName.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMainVersionFileName.setDescription('Applicable to all units.  \n             Main software version file name.')
brzaccVLShadowVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLShadowVersionNumber.setStatus('current')
if mibBuilder.loadTexts: brzaccVLShadowVersionNumber.setDescription('Applicable to all units.  \n             Shadow software version number.')
brzaccVLShadowVersionFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLShadowVersionFileName.setStatus('current')
if mibBuilder.loadTexts: brzaccVLShadowVersionFileName.setDescription('Applicable to all units.  \n             Shadow software version file name.')
brzaccVLUnitMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitMacAddress.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUnitMacAddress.setDescription('Applicable to all units.  \n             Unit hardware MAC address.')
brzaccVLUnitType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("auBS", 1), ("auSA", 2), ("su-6-1D", 3), ("su-6-BD", 4), ("su-24-BD", 5), ("bu-B14", 6), ("bu-B28", 7), ("rb-B14", 8), ("rb-B28", 9), ("su-BD", 10), ("su-54-BD", 11), ("su-3-1D", 12), ("su-3-4D", 13), ("ausBS", 14), ("ausSA", 15), ("auBS4900", 16), ("auSA4900", 17), ("su4900", 18), ("bu-B100", 19), ("rb-B100", 20), ("su-I", 21), ("au-E", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitType.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUnitType.setDescription('Applicable to all units.  \n             auBS     (1) : AU-BS (modular access unit). \n             auSA     (2) : AU-SA (stand-alone access unit).\n             su-6-1D  (3) : SU-6-1D (subscriber unit supporting 6 Mbps)\n             su-6-BD  (4) : SU-6-BD (subscriber unit supporting 6 Mbps).\n             su-24-BD (5) : SU-24-BD (subscriber unit supporting 24 Mbps).\n\t\t\t bu-B14   (6) : BU-B14 (BreezeNET Base Unit supporting 14 Mbps).\n\t\t\t bu-B28   (7) : BU-B28 (BreezeNET Base Unit supporting 28 Mbps).\n\t\t\t rb-B14   (8) : RB-B14 (BreezeNET Remote Bridge supporting 14 Mbps).\n\t\t\t rb-B28   (9) : RB-B28 (BreezeNET Remote Bridge supporting 28 Mbps).\n\t\t\t su-BD   (10) : SU-BD (subscriber unit).\n\t\t\t su-54-BD(11) : SU-54-BD (subscriber unit supporting 54 Mbps).\n             su-3-1D (12) : SU-3-1D (subscriber unit supporting 3 Mbps).\n             su-3-4D (13) : SU-3-4D (subscriber unit supporting 3 Mbps).\n             ausBS   (14) : AUS-BS (modular access unit supporting maxim 8 or 25 \n                            (via licensing) subscribers and allowing association \n                            only with SU-3 or SU-6).\n             ausSA   (15) : AUS-SA (stand-alone access unit supporting maxim 8 or 25 \n                            (via licensing) subscribers and allowing association \n                            only with SU-3 or SU-6 ).\n             auBS4900(16) : AU-BS-4900 (BreezeAccess 4900 modular access unit)\n             auSA4900(17) : AU-SA-4900 (BreezeAccess 4900 stand alone access unit)\n             suBD4900(18) : SU-BD-4900 (BreezeAccess 4900 subscriber unit)\n             bu-B100 (19) : BU-B100 (BreezeNET Base Unit unlimited throughput)\n             rb-B100 (20) : BU-B100 (BreezeNET Remote Bridge unlimited throughput) \n             su-I    (21) : SU-I\n             au-E    (22) : AU-E')
brzaccVLAssociatedAU = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAssociatedAU.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAssociatedAU.setDescription('Applicable to SU/RB only.  \n             Associated AU/BU MAC address.')
brzaccVLNumOfAssociationsSinceLastReset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNumOfAssociationsSinceLastReset.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNumOfAssociationsSinceLastReset.setDescription('Applicable to all units.  \n             The number of associations since last reset, including \n             duplicate associations (re-associations).')
brzaccVLCurrentNumOfAssociations = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentNumOfAssociations.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCurrentNumOfAssociations.setDescription('Applicable to AU only.  \n             Not applicable to BreezeNET-B products.\n             The number of SUs currently associated with the AU.\n             BreezeNET-B products return 65535.')
brzaccVLUnitBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitBootVersion.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUnitBootVersion.setDescription('Applicable to all units.  \n             Boot version.')
brzaccVLRadioBand = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("band-5-8GHz", 1), ("band-5-4GHz", 2), ("band-4-9GHz", 3), ("band-5-2GHz", 4), ("band-2-4GHz", 5), ("band-5-3GHz", 6), ("band-4-9GHzJapan", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRadioBand.setStatus('current')
if mibBuilder.loadTexts: brzaccVLRadioBand.setDescription("Applicable to all units.  \n             The unit's radio band.")
brzaccVLCurrentEthernetPortState = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("halfDuplexAnd10Mbps", 1), ("fullDuplexAnd10Mbps", 2), ("halfDuplexAnd100Mbps", 3), ("fullDuplexAnd100Mbps", 4), ("linkDown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentEthernetPortState.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCurrentEthernetPortState.setDescription('Applicable to all units.  \n             The current Ethernet port state.')
brzaccVLTimeSinceLastReset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTimeSinceLastReset.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTimeSinceLastReset.setDescription('Applicable to all units.  \n             The elapsed time since last reset.')
brzaccVLCountryDependentParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18))
brzaccVLCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCountryCode.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCountryCode.setDescription('Applicable to all units.\n             The country code and country name or country group name \n             that is supported by the unit.')
brzaccVLCountryDependentParamsTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2), )
if mibBuilder.loadTexts: brzaccVLCountryDependentParamsTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCountryDependentParamsTable.setDescription('Applicable to all units. A table of country dependent parameters.')
brzaccVLCountryDependentParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLCountryDependentParameterTableIdx"))
if mibBuilder.loadTexts: brzaccVLCountryDependentParameterEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCountryDependentParameterEntry.setDescription('Applicable to all units. \n             An entry in the Country Dependent Parameters table.')
brzaccVLCountryDependentParameterTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCountryDependentParameterTableIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCountryDependentParameterTableIdx.setDescription('Applicable to all units. \n             The sub-band ID of the entry in the Country Dependent \n             Parameters table. Serves also as index for the table entry.')
brzaccVLCountryDependentParameterFrequencies = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCountryDependentParameterFrequencies.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCountryDependentParameterFrequencies.setDescription('Applicable to all units. \n             The frequencies included in the applicable sub-band entry.')
brzaccVLAllowedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAllowedBandwidth.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAllowedBandwidth.setDescription('Applicable to all units. \n             The bandwidth when using the applicable the sub-band.')
brzaccVLRegulationMaxTxPowerAtAntennaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRegulationMaxTxPowerAtAntennaPort.setStatus('current')
if mibBuilder.loadTexts: brzaccVLRegulationMaxTxPowerAtAntennaPort.setDescription('Applicable to all units. \n             The maximum allowed Tx power when using the applicable sub-band.\n             A RegulationMaxTxPowerAtAntennaPort of 255, means no limit')
brzaccVLRegulationMaxEIRP = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRegulationMaxEIRP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLRegulationMaxEIRP.setDescription('Applicable to all units.\n             The maximum Tx EIRP \n             when using the applicable sub-band.\n             A Regulation Max EIRP of 0, means no limit.')
brzaccVLMinModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMinModulationLevel.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMinModulationLevel.setDescription('Applicable to all units. \n             The minimum supported modulation level.')
brzaccVLMaxModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaxModulationLevel.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaxModulationLevel.setDescription('Applicable to all units. \n             The maximum supported modulation level.')
brzaccVLBurstModeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLBurstModeSupport.setStatus('current')
if mibBuilder.loadTexts: brzaccVLBurstModeSupport.setDescription('Applicable to all units. \n             The supported Burst Mode Option.')
brzaccVLMaximumBurstDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaximumBurstDuration.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaximumBurstDuration.setDescription('Applicable to all units. \n             Applicable only if Burst Mode Option is supported. \n             The maximum supported burst duration.')
brzaccVLDfsSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDfsSupport.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDfsSupport.setDescription('Applicable to AU/BU only. \n             The supported Dfs Option.')
brzaccVLMinimumHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("hwRevisionA", 1), ("hwRevisionB", 2), ("hwRevisionC", 3), ("hwRevisionD", 4), ("hwRevisionE", 5), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMinimumHwRevision.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMinimumHwRevision.setDescription('Applicable to all units. \n             The Minimum HW Revision needed to support the country code.')
brzaccVLAuthenticationEncryptionSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAuthenticationEncryptionSupport.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAuthenticationEncryptionSupport.setDescription('Applicable to all units.\n             The supported Authentication Encryption Option.')
brzaccVLDataEncryptionSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDataEncryptionSupport.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDataEncryptionSupport.setDescription('Applicable to all units.\n             The supported Data Encryption Option.')
brzaccVLAESEncryptionSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAESEncryptionSupport.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAESEncryptionSupport.setDescription('Applicable to all units.\n             The supported AES Encryption Option.')
brzaccVLAntennaGainChange = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAntennaGainChange.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAntennaGainChange.setDescription('Applicable to all units.  \n             Indicates whether the Antenna Gain parameter is changeable or fixed.')
brzaccVLAteTestResults = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("pass", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAteTestResults.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAteTestResults.setDescription('Applicable to all units.  \n            Results of ATE Test ')
brzaccVLSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSerialNumber.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSerialNumber.setDescription('Applicable to all units.  \n            Serial Number of the unit')
brzaccVLUnitControl = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2))
brzaccVLResetUnit = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancel", 1), ("resetSystemNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLResetUnit.setStatus('current')
if mibBuilder.loadTexts: brzaccVLResetUnit.setDescription('Applicable to all units.  \n             Resets the unit and applies new parameter values.')
brzaccVLSetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noDefaultSettingRequested", 0), ("completeFactory", 1), ("partialFactory", 2), ("completeOperator", 3), ("partialOperator", 4), ("cancelCurrentPendingRequest", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSetDefaults.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSetDefaults.setDescription('Applicable to all units.  \n             Sets unit configuration to Defaults values after the \n             next reset.    \n             noDefaultSettingRequested : Read-Only Option, no Default setting was Issued.\n             completeFactory : All parameters revert to Factory \n                               Defaults values.\n             partialFactory  : All parameters revert to Factory \n                               Defaults values, except the parameters \n                               required for maintaining wireless \n                               connectivity.    \n             completeOperator: All parameters revert to Operator \n                               Defaults values. \n             partialOperator : All parameters revert to Operator \n                               Defaults values, except the parameters \n                               required for maintaining wireless \n                               connectivity.\n             cancelCurrentPendingRequest : Default Setting request is cancelled.')
brzaccVLUnitName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUnitName.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUnitName.setDescription('Applicable to all units.  \n             The unit name. \n             A string of up to 32 printable ASCII characters.')
brzaccVLFlashMemoryControl = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("resetAndBootFromShadowVersion", 1), ("useRunningVersionAfterReset", 2), ("cancel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFlashMemoryControl.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFlashMemoryControl.setDescription('Applicable to all units.  \n             resetAndBootFromShadowVersion : Activates the backup \n                                             version.   \n             useRunningVersionAfterReset   : The currently active \n                                             version will become the main \n                                             version and will be activated \n                                             after next reset.')
brzaccVLTelnetLogoutTimer = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTelnetLogoutTimer.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTelnetLogoutTimer.setDescription('Applicable to all units.  \n             Time-out of management via Telnet program. \n             Automatic exit if the program is inactive for the \n             defined time.\n             Range: 1 to 999 (minutes).')
brzaccVLSaveCurrentConfigurationAsOperatorDefaults = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveAsDefaults", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSaveCurrentConfigurationAsOperatorDefaults.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSaveCurrentConfigurationAsOperatorDefaults.setDescription('Applicable to all units.  \n             Saves the current configuration as Operator Defaults.\n             Cannot be executed after requesting set defaults \n             and the unit was not reset.')
brzaccVLExitTelnet = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("exit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLExitTelnet.setStatus('current')
if mibBuilder.loadTexts: brzaccVLExitTelnet.setDescription('Applicable to all units.  \n             Exit the management via Telnet program.')
brzaccVLUnitPasswords = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8))
brzaccVLReadOnlyPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLReadOnlyPassword.setStatus('current')
if mibBuilder.loadTexts: brzaccVLReadOnlyPassword.setDescription('Applicable to all units. \n             The User (read only) password.\n             This is also the Read Community String.\n             Up to 8 printable ASCII characters.')
brzaccVLInstallerPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInstallerPassword.setStatus('current')
if mibBuilder.loadTexts: brzaccVLInstallerPassword.setDescription('Applicable to all units. \n             The Installer password.\n             Up to 8 printable ASCII characters.')
brzaccVLAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdminPassword.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdminPassword.setDescription('Applicable to all units. \n            The Administrator password. Accessible only with SNMP Write \n            Community String (administrator password). \n            Up to 8 printable ASCII characters.')
brzaccVLEthernetNegotiationMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("force10MbpsAndHalfDuplex", 1), ("force10MbpsAndFullDuplex", 2), ("force100MbpsAndHalfDuplex", 3), ("force100MbpsAndFullDuplex", 4), ("autoNegotiationMode", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthernetNegotiationMode.setStatus('current')
if mibBuilder.loadTexts: brzaccVLEthernetNegotiationMode.setDescription('Applicable to all units.  \n             The speed/duplex mode of the Ethernet port.')
brzaccVLFTPParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10))
brzaccVLFTPServerParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1))
brzaccVLFTPServerUserName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPServerUserName.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFTPServerUserName.setDescription('Applicable to all units. \n             The user name to be used for access to the FTP server. \n             Accessible only with SNMP Write Community String \n             (administrator password).')
brzaccVLFTPServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPServerPassword.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFTPServerPassword.setDescription('Applicable to all units. \n             The password to be used for access to the FTP server. \n             Accessible only with SNMP Write Community String \n             (administrator password).')
brzaccVLFTPClientIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPClientIPAddress.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFTPClientIPAddress.setDescription('Applicable to all units.\n             For SW version higher than 4.0 this is read-only. \n             The IP address of the FTP stack in the unit.')
brzaccVLFTPServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFTPServerIpAddress.setDescription('Applicable to all units.  \n             The IP address of the FTP server.')
brzaccVLFTPClientMask = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPClientMask.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFTPClientMask.setDescription('Applicable to all units.  \n             The Mask of the FTP stack in the unit.')
brzaccVLFTPGatewayIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPGatewayIpAddress.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFTPGatewayIpAddress.setDescription('Applicable to all units.  \n             The FTP Gateway address')
brzaccVLFTPSwDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2))
brzaccVLFTPSwFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPSwFileName.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFTPSwFileName.setDescription('Applicable to all units.  \n             The name of the SW file to be downloaded.')
brzaccVLFTPSwSourceDir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPSwSourceDir.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFTPSwSourceDir.setDescription('Applicable to all units.  \n             The source directory of the required file in the FTP server.\n             Up to 80 printable ASCII characters.\n             Use dot (.) To clear field')
brzaccVLFTPDownloadSwFile = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("downloadFile", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPDownloadSwFile.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFTPDownloadSwFile.setDescription('Applicable to all units.  \n             Execution  of the SW download operation')
brzaccVLConfigurationFileLoading = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3))
brzaccVLConfigurationFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLConfigurationFileName.setStatus('current')
if mibBuilder.loadTexts: brzaccVLConfigurationFileName.setDescription('Applicable to all units.  \n             The name of the configuration file to be downloaded/uploaded.')
brzaccVLOperatorDefaultsFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLOperatorDefaultsFileName.setStatus('current')
if mibBuilder.loadTexts: brzaccVLOperatorDefaultsFileName.setDescription('Applicable to all units.  \n             The name of the Operator Defaults file to be downloaded/uploaded')
brzaccVLFTPConfigurationFileSourceDir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPConfigurationFileSourceDir.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFTPConfigurationFileSourceDir.setDescription('Applicable to all units.  \n             The source directory of the required file in the FTP server.\n             Up to 80 printable ASCII characters.\n             Use dot (.) To clear field')
brzaccVLExecuteFTPConfigurationFileLoading = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("executeFTPGetConfigurationFile", 1), ("executeFTPPutConfigurationFile", 2), ("executeFTPGetOperatorDefaults", 3), ("executeFTPPutOperatorDefaults", 4), ("cancel", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLExecuteFTPConfigurationFileLoading.setStatus('current')
if mibBuilder.loadTexts: brzaccVLExecuteFTPConfigurationFileLoading.setDescription('Applicable to all units.  \n             Execution of the file download/upload operation.')
brzaccVLEventLogFileUploading = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4))
brzaccVLEventLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEventLogFileName.setStatus('current')
if mibBuilder.loadTexts: brzaccVLEventLogFileName.setDescription('Applicable to all units.  \n             The name of the Event Log file to be uploaded.')
brzaccVLEventLogDestinationDir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEventLogDestinationDir.setStatus('current')
if mibBuilder.loadTexts: brzaccVLEventLogDestinationDir.setDescription('Applicable to all units.  \n             The destination directory of the event log file.\n             Up to 80 printable ASCII characters.\n             Use dot (.) To clear field.')
brzaccVLUploadEventLogFile = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uploadFile", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUploadEventLogFile.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUploadEventLogFile.setDescription('Applicable to all units.  \n             Execution  of the event log upload operation.')
brzaccVLLoadingStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inProcess", 1), ("successful", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLLoadingStatus.setStatus('current')
if mibBuilder.loadTexts: brzaccVLLoadingStatus.setDescription('Applicable to all units.  \n             The status of the last loading operation.')
brzaccVLEventLogFileParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 12))
brzaccVLEventLogPolicy = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("message", 1), ("warning", 2), ("error", 3), ("fatal", 4), ("logNone", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEventLogPolicy.setStatus('current')
if mibBuilder.loadTexts: brzaccVLEventLogPolicy.setDescription('Applicable to all units.  \n              The lowest level event to be registered in the event log.')
brzaccVLEraseEventLog = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eraseEventLog", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEraseEventLog.setStatus('current')
if mibBuilder.loadTexts: brzaccVLEraseEventLog.setDescription('Applicable to all units.  \n              Erase the event log.')
brzaccVLSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSystemLocation.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSystemLocation.setDescription('Applicable to all units.  \n             The unit location.')
brzaccVLFeatureUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 14))
brzaccVLFeatureUpgradeManually = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFeatureUpgradeManually.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFeatureUpgradeManually.setDescription('Applicable to all units.  \n             Upgrade unit to support new feature. Enter your license number \n             (32 to 64 hex digits).')
brzaccVLChangeUnitType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bu", 1), ("rb", 2), ("cancel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLChangeUnitType.setStatus('current')
if mibBuilder.loadTexts: brzaccVLChangeUnitType.setDescription('Applicable RB/BU only.  \n             Change the unit type between BU and RB.')
brzaccLighteAPWorkingMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccLighteAPWorkingMode.setStatus('current')
if mibBuilder.loadTexts: brzaccLighteAPWorkingMode.setDescription('Applicable to AU only. \n         \tChange unit running mode: 0 - VL mode 1 - Mixed cell mode')
brzaccVLNwMngParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3))
brzaccVLAccessToNwMng = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("fromWirelessOnly", 1), ("fromEthernetOnly", 2), ("fromBothWirelessAndEthernet", 3), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAccessToNwMng.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAccessToNwMng.setDescription('Applicable to all units.  \n             The port to be used for remote management.')
brzaccVLNwMngFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("activateOnEthernetPort", 2), ("activateOnWirelessPort", 3), ("activateOnBothWirelessAndEthernet", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNwMngFilter.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNwMngFilter.setDescription('Applicable to all units.  \n             Disables or enable on one of the ports, or on both \n             ports, IP address based filtering of management messages \n             (e.g. SNMP , Telnet , TFTP , DHCP).')
mngIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3), )
if mibBuilder.loadTexts: mngIpFilterTable.setStatus('current')
if mibBuilder.loadTexts: mngIpFilterTable.setDescription('Applicable to all units.  \n             A Management IP Filter Table of up to 3 IP addresses \n             of devices that are authorized to access the unit \n             for management purposes.')
mngIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNwMngIpTableIdx"))
if mibBuilder.loadTexts: mngIpFilterEntry.setStatus('current')
if mibBuilder.loadTexts: mngIpFilterEntry.setDescription('Applicable to all units.  \n             A Management IP Filter Table entry.')
brzaccVLNwMngIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNwMngIpAddress.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNwMngIpAddress.setDescription('Applicable to all units.  \n             An IP address in the Management IP Filter Table.')
brzaccVLNwMngIpTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNwMngIpTableIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNwMngIpTableIdx.setDescription('Applicable to all units.  \n             A table index for an entry in the Management IP Filter \n             Table.')
brzaccVLDeleteOneNwIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteOneNwIpAddr.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDeleteOneNwIpAddr.setDescription('Applicable to all units.  \n             0 - cancel operation.\n             1..10 - Deletes a single selected entry from the Management IP \n             Filter Table.')
brzaccVLDeleteAllNwIpAddrs = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteAllNwIpAddrs.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDeleteAllNwIpAddrs.setDescription('Applicable to all units.  \n             Deletes all entries from the Management IP Filter Table.')
brzaccVLAccessToNwTrap = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAccessToNwTrap.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAccessToNwTrap.setDescription('Applicable to all units.  \n             Enables or disables sending of traps.')
mngTrapTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7), )
if mibBuilder.loadTexts: mngTrapTable.setStatus('current')
if mibBuilder.loadTexts: mngTrapTable.setDescription('Applicable to all units.  \n             A Management Trap Table of up to 10 IP addresses of \n             stations to send traps to.')
mngTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNwTrapTableIdx"))
if mibBuilder.loadTexts: mngTrapEntry.setStatus('current')
if mibBuilder.loadTexts: mngTrapEntry.setDescription('Applicable to all units.  \n             A Management Trap Table entry.')
brzaccVLNwMngTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNwMngTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNwMngTrapCommunity.setDescription('Applicable to all units.  \n             The trap community associated with the applicable \n             entry in the Management Trap Table.\n             Up to 14 printable case sensitive ASCII characters.')
brzaccVLNwMngTrapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNwMngTrapAddress.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNwMngTrapAddress.setDescription('Applicable to all units.  \n             An IP address in the Management Trap Table entry.')
brzaccVLNwTrapTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNwTrapTableIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNwTrapTableIdx.setDescription('Applicable to all units.  \n             Tables Index for an entry in the Management Trap Table.')
brzaccVLDeleteOneTrapAddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteOneTrapAddr.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDeleteOneTrapAddr.setDescription('Applicable to all units.  \n             0 - cancel operation.\n             1..10 - Deletes a single selected entry from the Management \n             Trap Table.')
brzaccVLDeleteAllTrapAddrs = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteAllTrapAddrs.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDeleteAllTrapAddrs.setDescription('Applicable to all units.  \n             Deletes all entries from the Management Trap Table.')
brzaccVLMngIpRangesTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10), )
if mibBuilder.loadTexts: brzaccVLMngIpRangesTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMngIpRangesTable.setDescription('Applicable to all units.  \n             Table of Management IP Address Ranges')
brzaccVLMngIpRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLMngIpRangeIdx"))
if mibBuilder.loadTexts: brzaccVLMngIpRangeEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMngIpRangeEntry.setDescription('Applicable to all units.  \n             A Management IP Address Ranges Table entry')
brzaccVLMngIpRangeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMngIpRangeIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMngIpRangeIdx.setDescription('Applicable to all units.  \n             Index of an entry in the Management IP Address Ranges Table')
brzaccVLMngIpRangeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rangeDefinedByStartEndAddr", 1), ("rangeDefinedByStartAddrMask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMngIpRangeFlag.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMngIpRangeFlag.setDescription('Applicable to all units.  \n             Defines the method of defining the range:\n             Using Start & End Address( rangeDefinedByStartEndAddr ),\n             or using Start Address and Mask ( rangeDefinedByStartAddrSubNetMask ).')
brzaccVLMngIpRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMngIpRangeStart.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMngIpRangeStart.setDescription('Applicable to all units.  \n             Start Address of the range')
brzaccVLMngIpRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMngIpRangeEnd.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMngIpRangeEnd.setDescription('Applicable to all units.  \n             End Address of the range. \n             Used only if brzaccVLMngIpRangeFlag is  rangeDefinedByStartEndAddr')
brzaccVLMngIpRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMngIpRangeMask.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMngIpRangeMask.setDescription('Applicable to all units.  \n             End Address of the range. \n             Used only if brzaccVLMngIpRangeFlag is  rangeDefinedByStartAddrMask')
brzaccVLDeleteOneNwIpRange = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteOneNwIpRange.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDeleteOneNwIpRange.setDescription('Applicable to all units.  \n             0 - cancel operation.\n             1..10 - Deletes a single selected entry from the Management IP \n             Ranges Table.')
brzaccVLDeleteAllNwIpRanges = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteAllNwIpRanges.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDeleteAllNwIpRanges.setDescription('Applicable to all units.  \n             Deletes all entries from the Management IP Ranges Table.')
brzaccVLApClientIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLApClientIpAddress.setStatus('current')
if mibBuilder.loadTexts: brzaccVLApClientIpAddress.setDescription('Applicable to SU/RB unit only.  \n             The IP Address of the WIFI WIMAX unit')
brzaccVLIpParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4))
brzaccVLUnitIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUnitIpAddress.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUnitIpAddress.setDescription('Applicable to all units.  \n             IP address of the unit.')
brzaccVLSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSubNetMask.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSubNetMask.setDescription('Applicable to all units.  \n             Subnet mask of the unit.')
brzaccVLDefaultGWAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDefaultGWAddress.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDefaultGWAddress.setDescription('Applicable to all units.  \n             Default gateway IP address of the unit.')
brzaccVLUseDhcp = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("dhcpOnly", 2), ("automatic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUseDhcp.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUseDhcp.setDescription('Applicable to all units.  \n             DHCP client mode of operation. \n             disabled : Use regular (manual) methods to configure IP \n                        parameters. \n             dHCP Only: Use DHCP server to configure IP parameters. \n             automatic: Use DHCP server to configure IP parameters. \n                        If a DHCP server is not available, use \n                        manually configured values.')
brzaccVLAccessToDHCP = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fromWirelessOnly", 1), ("fromEthernetOnly", 2), ("fromBothWirelessAndEthernet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAccessToDHCP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAccessToDHCP.setDescription('Applicable to all units.  \n             The port to be used for communicating with a DHCP server.')
brzaccVLRunTimeIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunTimeIPaddr.setStatus('current')
if mibBuilder.loadTexts: brzaccVLRunTimeIPaddr.setDescription('Applicable to all units.  \n             The run-time IP address. If DHCP is used the Run Time \n             IP Address is the address given to the unit by the \n             server. Otherwise it is the manually configured address.')
brzaccVLRunTimeSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunTimeSubNetMask.setStatus('current')
if mibBuilder.loadTexts: brzaccVLRunTimeSubNetMask.setDescription('Applicable to all units.  \n             The run-time Subnet Mask. If DHCP is used the Run Time \n             Subnet Mask is the mask given to the unit by the server. \n             Otherwise it is the manually configured mask.')
brzaccVLRunTimeDefaultIPGateway = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunTimeDefaultIPGateway.setStatus('current')
if mibBuilder.loadTexts: brzaccVLRunTimeDefaultIPGateway.setDescription('Applicable to all units.  \n             The run-time Gateway IP address. If DHCP is used the \n             Run Time Gateway IP Address is the address given to the \n             unit by the server. Otherwise it is the manually \n             configured address.')
brzaccVLBridgeParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5))
brzaccVLVLANSupport = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1))
brzaccVLVlanID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanID.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVlanID.setDescription('Applicable to SU/RB only.\n             VLAN ID for data frame tagging. \n             Applicable to Access Link only. \n             Range: 1 to 4094. 0 - not applicable.')
brzaccVLEthernetLinkType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("accessLink", 1), ("trunkLink", 2), ("hybridLink", 3), ("serviceProviderLink", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthernetLinkType.setStatus('current')
if mibBuilder.loadTexts: brzaccVLEthernetLinkType.setDescription('Applicable to all units.  \n             VLAN support mode (Link Type). \n             The Access Link option is not available for AU/BU.\n             Service Provider Link is not available for BU/RB.')
brzaccVLManagementVlanID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLManagementVlanID.setStatus('current')
if mibBuilder.loadTexts: brzaccVLManagementVlanID.setDescription('Applicable to all units.  \n             VLAN ID for management frame tagging.\n             Range: 1 to 4094, 65535 for No VLAN tagging.')
brzaccVLVLANForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4))
brzaccVLVlanForwardingSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanForwardingSupport.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVlanForwardingSupport.setDescription('Applicable to all units.  \n             Enables or disables the VLAN forwarding feature. \n             (applicable in Trunk and Service Provider links only).')
brzaccVLVlanForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2), )
if mibBuilder.loadTexts: brzaccVLVlanForwardingTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVlanForwardingTable.setDescription('Applicable to all units.  \n             A VLAN Forwarding Table of up to 20 VLAN IDs of devices \n             to which data frames are forwarded when VLAN Forwarding \n             is Enabled. (applicable in Trunk and Service Provider links only).')
brzaccVLVlanForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLVlanForwardingTableIdx"))
if mibBuilder.loadTexts: brzaccVLVlanForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVlanForwardingEntry.setDescription('Applicable to all units.  \n             A VLAN Forwarding Table entry. (applicable in Trunk and Service Provider \n             links only).')
brzaccVLVlanForwardingTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLVlanForwardingTableIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVlanForwardingTableIdx.setDescription('Applicable to all units.  \n             A read only table index for a VLAN entry in the VLAN \n             Forwarding Table.')
brzaccVLVlanIdForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanIdForwarding.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVlanIdForwarding.setDescription("Applicable to all units.  \n             The list of VLAN ID's in the VLAN ID Forwarding Table. \n             To Remove a VLAN ID - SET the corresponding entry to 0. \n             To Add a new VLAN ID SET an entry which is currently 0.\n             Range : 0 to 4094")
brzaccVLVlanRelaying = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5))
brzaccVLVlanRelayingSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanRelayingSupport.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVlanRelayingSupport.setDescription('Applicable to AU only. \n             Not applicable to BreezeNET-B products. \n             Enables or disables VLAN Relaying (applicable in \n             Trunk and Service Provider links only).')
brzaccVLVlanRelayingTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2), )
if mibBuilder.loadTexts: brzaccVLVlanRelayingTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVlanRelayingTable.setDescription('Applicable to AU only. \n\t\t\t Not applicable to BreezeNET-B products.\n             A VLAN Relaying Table of up to 20 VLAN IDs of devices \n             to which data frames are relayed when VLAN Relaying is \n             Enabled. (applicable in Trunk and Service Provider links only).')
brzaccVLVlanRelayingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLVlanRelayingTableIdx"))
if mibBuilder.loadTexts: brzaccVLVlanRelayingEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVlanRelayingEntry.setDescription('Applicable to AU only.\n             Not applicable to BreezeNET-B products. \n             A VLAN Relaying Table entry. (applicable in Trunk and Service \n             Provider links only).')
brzaccVLVlanRelayingTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLVlanRelayingTableIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVlanRelayingTableIdx.setDescription('Applicable to AU only. \n             Not applicable to BreezeNET-B products.\n             A table index for a VLAN entry in the VLAN \n             Relaying Table.')
brzaccVLVlanIdRelaying = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanIdRelaying.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVlanIdRelaying.setDescription("Applicable to AU only. \n             Not applicable to BreezeNET-B products.\n             The list of VLAN ID's in the VLAN ID Relaying Table. \n             To Remove a VLAN ID - SET the corresponding entry to 0. \n             To Add a new VLAN ID SET an entry which is currently 0.\n             Range: 0 to 4094 , 0 - remove entry.")
brzaccVLVLANTrafficPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6))
brzaccVLVlanDataPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanDataPriority.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVlanDataPriority.setDescription('Applicable to SU/RB only. \n             Priority tagging for data frames. Applicable to Access \n             Link only.\n             Range: 0 to 7.')
brzaccVLVlanManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanManagementPriority.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVlanManagementPriority.setDescription('Applicable to all units.  \n             Priority tagging for management frames. Applicable to \n             Access Link and Trunk Link only.\n             Range: 0 to 7.')
brzaccVLVlanPriorityThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanPriorityThreshold.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVlanPriorityThreshold.setDescription('Applicable to all units. Not applicable to units with SW \n             version 3.1 or higher. \n             Priority threshold for tagged frames received from \n             Ethernet port. Applicable to Hybrid Link and Trunk Link \n             only.\n             Valid values: 0-7.')
brzaccVLVLANQinQ = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 7))
brzaccVLQinQEthertype = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(33025, 36864), ValueRangeConstraint(37120, 37120), ValueRangeConstraint(37376, 37376), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLQinQEthertype.setStatus('current')
if mibBuilder.loadTexts: brzaccVLQinQEthertype.setDescription('Applicable to AU and SU. Not applicable to BreezeNET-B units. \n            The Ethernet type of the Service Provider Tag.\n            The range is  0x8101(33025) - 0x9000(36864), 0x9100(37120), 0x9200(37376).')
brzaccVLQinQProviderVlanID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLQinQProviderVlanID.setStatus('current')
if mibBuilder.loadTexts: brzaccVLQinQProviderVlanID.setDescription('Applicable to SU only.\n            VLAN ID of the Service Provider Tag.')
brzaccVLBridgeAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBridgeAgingTime.setStatus('current')
if mibBuilder.loadTexts: brzaccVLBridgeAgingTime.setDescription('Applicable to all units.  \n             Bridge aging time for devices on both the Ethernet and \n             wireless link sides. \n             Range: 20 to 2000 seconds.')
brzaccVLBroadcastRelaying = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("broadcastMulticastEnable", 2), ("broadcastEnable", 3), ("multicastEnable", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBroadcastRelaying.setStatus('current')
if mibBuilder.loadTexts: brzaccVLBroadcastRelaying.setDescription('Applicable to AU only. \n             Not applicable to BreezeNET-B products.\n             Enables/disables the relaying of broadcast messages to \n             the wireless link.')
brzaccVLUnicastRelaying = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUnicastRelaying.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUnicastRelaying.setDescription('Applicable to AU only. \n             Not applicable to BreezeNET-B products.\n             Enables/disables the relaying of unicast messages to \n             the wireless link.')
brzaccVLEthBroadcastFiltering = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("onEthernetOnly", 2), ("onWirelessOnly", 3), ("onBothWirelessAndEthernet", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthBroadcastFiltering.setStatus('current')
if mibBuilder.loadTexts: brzaccVLEthBroadcastFiltering.setDescription('Applicable to SU/RB only. \n             Enables/disables the filtering of Ethernet (layer2) \n             broadcasts.    \n             disable             : No filtering.    \n             onEthernetOnly      : Filters broadcasts received on the Ethernet port only.    \n             onWirelessOnly      : Filters broadcasts received on the Wlan port only.    \n             onBothWirelessAndEth: Filters broadcasts received on both ports.')
brzaccVLEthBroadcastingParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7))
brzaccVLDHCPBroadcastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDHCPBroadcastOverrideFilter.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDHCPBroadcastOverrideFilter.setDescription('Applicable to SU/RB only. \n             Enables or disables the broadcasting of DHCP messages, \n             overriding the general *brzaccVLEthBroadcastFiltering Ethernet \n             broadcast filtering option.')
brzaccVLPPPoEBroadcastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLPPPoEBroadcastOverrideFilter.setStatus('current')
if mibBuilder.loadTexts: brzaccVLPPPoEBroadcastOverrideFilter.setDescription('Applicable to SU/RB only. \n             Enables or disables the broadcasting of PPPoE messages, \n             overriding the general *brzaccVLEthBroadcastFiltering Ethernet \n             broadcast filtering option.')
brzaccVLARPBroadcastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLARPBroadcastOverrideFilter.setStatus('current')
if mibBuilder.loadTexts: brzaccVLARPBroadcastOverrideFilter.setDescription('Applicable to SU/RB only. \n             Enables or disables the broadcasting of ARP messages, \n             overriding the general *brzaccVLEthBroadcastFiltering Ethernet \n             broadcast filtering option.')
brzaccVLEthBroadcastMulticastLimiterOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("limitOnlyBroadcasts", 2), ("limitMulticastsExceptBroadcasts", 3), ("limitAllMulticasts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticastLimiterOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticastLimiterOption.setDescription('Applicable to all units.\n            Enable/disable the limiter for multicast and broadcast packets.')
brzaccVLEthBroadcastMulticastLimiterThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticastLimiterThreshold.setStatus('current')
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticastLimiterThreshold.setDescription('Applicable to all units.\n            The limit on the number of multicast and broadcast packets when the \n            Ethernet Broadcast/Multicast Limiter Option is enabled.\n            Range: 0 to 204800')
brzaccVLEthBroadcastMulticastLimiterSendTrapInterval = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticastLimiterSendTrapInterval.setStatus('current')
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticastLimiterSendTrapInterval.setDescription('Applicable to all units.\n            The minimum time between two successive traps that are sent indicating the \n            number of packets that were dropped by the Ethernet Broadcast/Multicast \n            Limiter since the last trap was sent.\n            Range: 1 to 60 minutes')
brzaccVLToSPriorityParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 8))
brzaccVLToSPrecedenceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLToSPrecedenceThreshold.setStatus('current')
if mibBuilder.loadTexts: brzaccVLToSPrecedenceThreshold.setDescription('Applicable to all units. Not applicable to units with SW version 3.1 or higher.\n             Priority threshold (based on the ToS) for frames received \n             from the Ethernet port.\n             Range: 0 to 7.')
brzaccVLRoamingOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLRoamingOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLRoamingOption.setDescription('Applicable to SU/RB only.\n             Disable/enable the roaming feature. When enabled, the SU/RB will start \n             scanning for an AU/BU after about one second of not receiving beacons or data \n             from current AU/BU. Once it found a new AU/BU, it will also send through \n             the wireless network a roaming SNAP on behalf of its clients informing \n             other devices in the network of their new location. When disabled, it \n             will wait for about seven seconds before starting scanning, and it will not \n             send a roaming SNAP.')
brzaccVLMacAddressDenyList = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10))
brzaccVLMacAddressDenyListTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1), )
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListTable.setDescription('Applicable to AU only. \n\t\t\t Not applicable to BreezeNET-B units.                                   \n             A list of up to 100 MAC Addresses of SUs.\n             If brzaccVLMacAddressDenyListAction is set to denyList, \n             these are SUs that are not allowed to transfer data \n             to the AU. \n             If brzaccVLMacAddressDenyListAction is set to allowList, \n             only these SUs are allowed to transfer data to the AU.')
brzaccVLMacAddressDenyListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLMacAddressDenyListTableIdx"))
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListEntry.setDescription('Applicable to AU only.\n\t\t\t Not applicable to BreezeNET-B units.                                   \n             An entry in the Mac Address Deny List Table.')
brzaccVLMacAddressDenyListTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListTableIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListTableIdx.setDescription('Applicable to AU only. \n\t\t\t Not applicable to BreezeNET-B units.                                   \n             A read only table index for a MAC Address entry \n             in the Mac Address Deny List Table. Range: 1 to 100.')
brzaccVLMacAddressDenyListId = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListId.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListId.setDescription('Applicable to AU only.\n\t\t\t Not applicable to BreezeNET-B units.                                   \n             The list of MAC Addresses in the Mac Address Deny\n             List Table. \n             To Remove a MAC Address - SET the corresponding entry \n             to 0. \n             To Add a new MAC Address - SET an entry which is \n             currently 0.')
brzaccVLMacAddressDenyListAdd = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListAdd.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListAdd.setDescription('Applicable to AU only. \n\t\t\t Not applicable to BreezeNET-B units.                                   \n             Add a MAC address to the MAC Address Deny List Table')
brzaccVLMacAddressDenyListRemove = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListRemove.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListRemove.setDescription('Applicable to AU only. \n\t\t\t Not applicable to BreezeNET-B units.                                   \n             Delete a MAC address from the MAC Address Deny List Table')
brzaccVLNumberOfMacAddressesInDenyList = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNumberOfMacAddressesInDenyList.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNumberOfMacAddressesInDenyList.setDescription('Applicable to AU only. \n\t\t\t Not applicable to BreezeNET-B units.                                   \n             Number of MAC addresses in the MAC Address Deny List Table.')
brzaccVLMacAddressDenyListAction = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("denyList", 1), ("allowedList", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListAction.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListAction.setDescription('Applicable to AU only.        \n            Define the action to be used by the Mac Address Deny List.\n            allowedList(2) means that the list becomes Allow list.')
brzAccVLPortsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 11))
brzaccVLEthernetPortControl = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthernetPortControl.setStatus('current')
if mibBuilder.loadTexts: brzaccVLEthernetPortControl.setDescription('Applicable to SU/RB only.\n             Enable/disable the Ethernet port. When disabled, only \n             data frames are blocked. Management frames are accepted.')
brzaccVLAirInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6))
brzaccVLESSIDParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1))
brzaccVLESSID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLESSID.setStatus('current')
if mibBuilder.loadTexts: brzaccVLESSID.setDescription('Applicable to all units. \n             The Extended Service Set ID (ESSID) used to prevent \n             the merging of collocated systems.\n             The ESSID is accessible only with the write community \n             string (administrator password).\n             Up to 31 printable case sensitive ASCII characters.')
brzaccVLOperatorESSIDOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLOperatorESSIDOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLOperatorESSIDOption.setDescription('Applicable to AU/BU only. \n             Enabling/disabling the use of the Operator ESSID.')
brzaccVLOperatorESSID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLOperatorESSID.setStatus('current')
if mibBuilder.loadTexts: brzaccVLOperatorESSID.setDescription('Applicable to AU/BU only.\n             A secondary ESSID to support easy installation of SUs as well as\n             the use of the Best AU/BU feature.\n             Accessible only with SNMP Write Community \n             Up to 31 printable case sensitive ASCII characters.')
brzaccVLRunTimeESSID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 31)).setFixedLength(31)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunTimeESSID.setStatus('current')
if mibBuilder.loadTexts: brzaccVLRunTimeESSID.setDescription('Applicable to SU/RB only. \n\t\t     The ESSID of the associated AU/BU.\n\t\t     Accessible only with SNMP Write Community.\n\t\t     Up to 31 printable ASCII characters, case sensitive.')
brzaccVLMaximumCellRadius = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaximumCellRadius.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaximumCellRadius.setDescription('Applicable to all units.  \n             For AU/BU: read-write. In units with SW version 2.0 and up -\n             applicable only when the Cell Distance Mode is set to Manual. \n             The highest distance from the AU/BU of any SU/RB served by it. \n             Affects the maximum time the units wait for a response message \n             and the slot size by taking into account the round trip propagation delay. \n             For SU/RB: read-only. The distance is learned from the AU/BU. \n             Range: For units below version 2.0 the range is 0 - 50000 Meters. \n             Otherwise - the range is 0 to 54 Kilometers.\n             0 means no compensation (minimum slot size, maximal delay timeout).')
brzaccVLAIFS = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneSlot", 1), ("twoSlots", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAIFS.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAIFS.setDescription('Applicable to AU and SU. Not applicable to BreezeNET-B products.\n             Not applicable if Wireless Link Prioritization is enabled.\n             Arbitration Inter-Frame Spacing (AIFS) value, in slots. \n             This is the number of time slots that define the DIFS. (DIFS=SIFS+AIFS). \n             A value of 1 should be used only in point-to-point applications to \n             allow one unit to have advantage over the other unit.')
brzaccVLWirelessTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLWirelessTrapThreshold.setStatus('current')
if mibBuilder.loadTexts: brzaccVLWirelessTrapThreshold.setDescription('Applicable to AU/BU only.\n\t     A wireless link quality threshold, expressed in % of retransmissions,\n\t     for sending the brzaccVLAUWirelessQualityTRAP.   \n\t     This trap indicate whether the quality has gone below or \n\t     above the specified threshold.\n\t     The Threshold Range: 1 to 100 (%  retransmissions).')
brzaccVLTransmitPowerTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5), )
if mibBuilder.loadTexts: brzaccVLTransmitPowerTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTransmitPowerTable.setDescription('Applicable to all units.\n             A table of transmit power parameters. ')
brzaccVLTransmitPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLTransmitPowerIdx"))
if mibBuilder.loadTexts: brzaccVLTransmitPowerEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTransmitPowerEntry.setDescription('Applicable to all units. \n             An entry in the Transmit Power Table.')
brzaccVLTransmitPowerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTransmitPowerIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTransmitPowerIdx.setDescription('Applicable to all units.\n             An index of an entry in the Transmit Power Table.')
brzaccVLApplicableModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("level1to5", 1), ("level6", 2), ("level7", 3), ("level8", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLApplicableModulationLevel.setStatus('current')
if mibBuilder.loadTexts: brzaccVLApplicableModulationLevel.setDescription('Applicable to all units.\n             The applicable modulation level for an entry in the Transmit Power Table.\n              Level 8 is not applicable to units with HW revision A.')
brzaccVLMaximumTxPowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaximumTxPowerRange.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaximumTxPowerRange.setDescription('Applicable to all units.\n             The allowed range for the brzaccVLTxPower parameter at the \n             applicable modulation level . Range: -10 to the maximum allowed \n             power level at the applicable modulation level , in dBm.')
brzaccVLTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTxPower.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTxPower.setDescription('Applicable to all units.\n             Read-only for units with SW version 4.0 and higher.\n\t\t\t In AU/BU: The transmit power in dBm defined for the applicable rate.\n\t\t\t In SU/RB: If ATPC is disabled, this is the transmit power in dBm \n\t\t\t defined for the applicable rate.\n\t\t\t If ATPC is enabled, it serves as the initial transmit power in dBm \n\t\t\t for the ATPC algorithm. \n\t\t\t In SU/RB: The range is -10 dBm to the power value defined by \n\t\t\t           brzaccVLMaximumTxPower for the applicable modulation level.\n\t\t\t In AU/BU: The range is -10 dBm to the power value defined by \n\t\t\t           brzaccVLMaximumTxPowerRange for the applicable modulation level.')
brzaccVLCurrentTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentTxPower.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCurrentTxPower.setDescription('Applicable to SU/RB.\n             The actual transmit power in dBm for the applicable rate.\n             Range: -17 to the maximum value defined by brzaccVLMaximumTxPowerRange \n             for the applicable modulation level.')
brzaccVLMaximumTransmitPowerTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6), )
if mibBuilder.loadTexts: brzaccVLMaximumTransmitPowerTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaximumTransmitPowerTable.setDescription('Applicable to SU/RB only.\n             A table of maximum transmit power parameters. ')
brzaccVLMaximumTransmitPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLMaximumTransmitPowerIdx"))
if mibBuilder.loadTexts: brzaccVLMaximumTransmitPowerEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaximumTransmitPowerEntry.setDescription('Applicable to SU/RB only. \n             An entry in the Maximum Transmit Power Table.')
brzaccVLMaximumTransmitPowerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaximumTransmitPowerIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaximumTransmitPowerIdx.setDescription('Applicable to SU/RB only.\n             An index of an entry in the Maximum Transmit Power Table.')
brzaccVLMaxTxApplicableModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("level1to5", 1), ("level6", 2), ("level7", 3), ("level8", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaxTxApplicableModulationLevel.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaxTxApplicableModulationLevel.setDescription('Applicable to SU/RB only.\n             The applicable modulation level for an entry in the Maximum \n              Transmit Power Table.\n              Level 8 is not applicable to units with HW revision A.')
brzaccVLDefinedMaximumTxPowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDefinedMaximumTxPowerRange.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDefinedMaximumTxPowerRange.setDescription('Applicable to SU/RB only.\n             The allowed range for the brzaccVLMaxTxPower parameter at the \n             applicable modulation level .\n             Range: -10 to the maximum allowed power level at the applicable \n             modulation level , in dBm.')
brzaccVLMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxTxPower.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaxTxPower.setDescription('Applicable to SU/RB only.\n            Read-only for units with SW version 4.0 and higher.\n\t\t\tThe maximum value that can be configured for the brzaccVLTxPower \n\t\t\tparameter. This is also the maximum power level that can be reached \n\t\t\tby the ATPC algorithm.\n\t\t\tThe range is -10 dBm to the maximum value defined by \n\t\t\tbrzaccVLDefinedMaximumTxPowerRange for the applicable modulation level.')
brzaccVLMaxNumOfAssociations = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxNumOfAssociations.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaxNumOfAssociations.setDescription('Applicable to AU only. \n             Not applicable to BreezeNET-B products.\n             Sets the upper limit for the number of SUs \n             that can be associated with the AU.\n             Range: For regular AUs (AU-BS, AU-SA) \n             the range is from 0 to 512 if encryption is disabled\n             the range id form 0 to 124 if encryption is enabled\n             For AUS-BS and AUS-SA with SW version 4.0 and higher \n             the range is between 0 to 8 or 25 (via licensing).\n             For AUS-BS and AUS-SA with SW version below 4.0 the range \n             is between 0 to 5.  \n             BreezeNET-B products return 65535.')
brzaccVLBestAu = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11))
brzaccVLBestAuSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBestAuSupport.setStatus('current')
if mibBuilder.loadTexts: brzaccVLBestAuSupport.setDescription('Applicable to SU/RB only. \n             Disable/enable the Best AU/BU selection mechanism.')
brzaccVLBestAuNoOfScanningAttempts = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBestAuNoOfScanningAttempts.setStatus('current')
if mibBuilder.loadTexts: brzaccVLBestAuNoOfScanningAttempts.setDescription('Applicable to SU/RB only. \n             The number of scanning attempts to collect information \n             for the Best AU/BU decision.\n             Range: 1 to 255.')
brzaccVLPreferredAuMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLPreferredAuMacAddress.setStatus('current')
if mibBuilder.loadTexts: brzaccVLPreferredAuMacAddress.setDescription('Applicable to SU/RB only.\n             The MAC address of the preferred AU/BU (overriding the \n             Best AU/BU selection process). \n             000000000000 means no preferred AU/BU.')
brzaccVLNeighborAuTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4), )
if mibBuilder.loadTexts: brzaccVLNeighborAuTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuTable.setDescription('Applicable to SU/RB only. \n             A table of data on neighboring AUs/BUs.')
brzaccVLNeighborAuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNeighborAuIdx"))
if mibBuilder.loadTexts: brzaccVLNeighborAuEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuEntry.setDescription('Applicable to SU/RB only. \n             An entry in the Neighbor AU/BU Table.')
brzaccVLNeighborAuIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuIdx.setDescription('Applicable to SU/RB only. \n             An index of an entry in the Neighbor AU/BU Table.')
brzaccVLNeighborAuMacAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuMacAdd.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuMacAdd.setDescription('Applicable to SU/RB only. \n             A MAC address of an AU/BU in the Neighbor AU/BU Table.')
brzaccVLNeighborAuESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuESSID.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuESSID.setDescription('Applicable to SU/RB only.  \n             The ESSID of an AU/BU in the Neighbor AU/BU Table.\n             Accessible only with SNMP Write Community.')
brzaccVLNeighborAuSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuSNR.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuSNR.setDescription('Applicable to SU/RB only. \n             The received signal quality (SNR) in dB of an AU/BU \n             in the Neighbor AU/BU Table.')
brzaccVLNeighborAuAssocLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("full", 1), ("notFull", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuAssocLoadStatus.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuAssocLoadStatus.setDescription('Applicable to SU/RB only. \n             Neighbor AU/BU association load status in the Neighbor \n             AU/BU Table.')
brzaccVLNeighborAuMark = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuMark.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuMark.setDescription('Applicable to SU/RB only.\n             Neighbor AU/BU mark in the Neighbor AU/BU Table.')
brzaccVLNeighborAuHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("hwRevisionA", 1), ("hwRevisionB", 2), ("hwRevisionC", 3), ("hwRevisionD", 4), ("hwRevisionE", 5), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuHwRevision.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuHwRevision.setDescription('Applicable to SU/RB only.\n             Neighbor AU/BU HW revision in the Neighbor AU/BU Table.')
brzaccVLNeighborAuCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuCountryCode.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuCountryCode.setDescription('Applicable to SU/RB only.\n             Neighbor AU/BU supported country code in the Neighbor \n             AU/BU Table.')
brzaccVLNeighborAuSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuSwVer.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuSwVer.setDescription('Applicable to SU/RB only.\n             Neighbor AU/BU SW version in the Neighbor \n             AU/BU Table.')
brzaccVLNeighborAuAtpcOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuAtpcOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuAtpcOption.setDescription('Applicable to SU/RB only.\n             Neighbor AU/BU ATPC option configuration in the Neighbor \n             AU/BU Table.')
brzaccVLNeighborAuAdapModOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuAdapModOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuAdapModOption.setDescription('Applicable to SU/RB only.\n             Neighbor AU/BU adaptive modulation option configuration \n             in the Neighbor AU/BU Table.')
brzaccVLNeighborAuBurstModeOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuBurstModeOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuBurstModeOption.setDescription('Applicable to SU/RB only.\n             Neighbor AU/BU burst mode option configuration \n             in the Neighbor AU/BU Table.')
brzaccVLNeighborAuDfsOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuDfsOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuDfsOption.setDescription('Applicable to SU/RB only.\n             Neighbor AU/BU DFS option configuration \n             in the Neighbor AU/BU Table.')
brzaccVLNeighborAuConcatenationOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuConcatenationOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuConcatenationOption.setDescription('Applicable to SU/RB only.\n             Neighbor AU/BU concatenation option configuration \n             in the Neighbor AU/BU Table.')
brzaccVLNeighborAuLearnCountryCodeBySU = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuLearnCountryCodeBySU.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuLearnCountryCodeBySU.setDescription('Applicable to SU only.\n             Starting with 4.0 is not applicable for BA4900 and BreezeNET B products.\n             Neighbor AU Learn Country Code by SU configuration \n             in the Neighbor AU Table.')
brzaccVLNeighborAuSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("wep", 1), ("aesOCB", 2), ("fips197", 3), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuSecurityMode.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuSecurityMode.setDescription('Applicable to SU/RB only.\n             Neighbor AU/BU security mode configuration \n             in the Neighbor AU/BU Table.')
brzaccVLNeighborAuAuthOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuAuthOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuAuthOption.setDescription('Applicable to SU/RB only.\n             Neighbor AU/BU authentication option configuration \n             in the Neighbor AU/BU Table.')
brzaccVLNeighborAuDataEncyptOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuDataEncyptOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuDataEncyptOption.setDescription('Applicable to SU/RB only.\n             Neighbor AU/BU data encryption option configuration \n             in the Neighbor AU/BU Table.')
brzaccVLNeighborAuPerSuDistanceLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuPerSuDistanceLearning.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNeighborAuPerSuDistanceLearning.setDescription('Applicable to SU only.\n             Neighbor AU per SU distance learning option configuration \n             in the Neighbor AU Table.')
brzaccVLFrequencyDefinition = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12))
brzaccVLSubBandLowerFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSubBandLowerFrequency.setStatus('obsolete')
if mibBuilder.loadTexts: brzaccVLSubBandLowerFrequency.setDescription('Applicable to SU only. \n\t\t     Not applicable to units with SW version 2.0 or higher. \n             The lowest frequency in the subset to be used for scanning.\n             For 5.8GHz products the range is 5740 to 5830 MHz using 10MHz resolution.\n             For 4.9GHz products the range is 4920 to 5080 MHz using 10MHz resolution.\n             For HW Revision C and above this leaf is not relevant - shall return 0.')
brzaccVLSubBandUpperFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSubBandUpperFrequency.setStatus('obsolete')
if mibBuilder.loadTexts: brzaccVLSubBandUpperFrequency.setDescription('Applicable to SU only. \n             Not applicable to units with SW version 2.0 or higher. \n             The highest frequency in the subset to be used for scanning.\n             For 5.8GHz products the range is 5740 to 5830 MHz using 10MHz resolution.\n             For 4.9GHz products the range is 4920 to 5080 MHz using 10MHz resolution.\n             For HW Revision C and above this leaf is not relevant - shall return 0.')
brzaccVLScanningStep = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("mhz-5", 1), ("mhz-10", 2), ("mhz-20", 3), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLScanningStep.setStatus('current')
if mibBuilder.loadTexts: brzaccVLScanningStep.setDescription('Applicable to all units - For flexible Sub-Bands only.\t\t\n             For units with version 2.0 and above this is a read-only parameter.\n             The scanning step to be used for generating the frequency subset.')
brzaccVLFrequencySubsetTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4), )
if mibBuilder.loadTexts: brzaccVLFrequencySubsetTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFrequencySubsetTable.setDescription('Applicable to SU/RB and to AU/BU.\n             Not applicable to SU/RB with SW version 4.0 and higher.\n\t\t\t The Frequency Subset Table that includes all frequencies from \n\t\t\t the selected Sub-band.')
brzaccVLFrequencySubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLFrequencySubsetTableIdx"))
if mibBuilder.loadTexts: brzaccVLFrequencySubsetEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFrequencySubsetEntry.setDescription('Applicable to SU/RB and to AU/BU.\n             Not applicable to SU/RB with SW version 4.0 and higher.\n             An entry in the Frequency Subset Table. ')
brzaccVLFrequencySubsetTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFrequencySubsetTableIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFrequencySubsetTableIdx.setDescription('Applicable to SU/RB and to AU/BU.\n             Not applicable to SU/RB with SW version 4.0 and higher.\n\t\t\t An index of an entry in the Frequency subset Table.')
brzaccVLFrequencySubsetFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFrequencySubsetFrequency.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFrequencySubsetFrequency.setDescription('Applicable to SU/RB and to AU/BU. \n             Not applicable to SU/RB with SW version 4.0 and higher.\n             Applicable to all units with HW revision B and lower \n             (for units with HW revision C and higher replaced by \n             brzaccVLFrequencySubsetFrequencyNew to support a \n             resolution of 0.5 MHz).  \n             The frequency in MHz of an entry in the Frequency Subset table.')
brzaccVLFrequencySubsetActive = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFrequencySubsetActive.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFrequencySubsetActive.setDescription('Applicable to SU/RB and to AU/BU.\n             Not applicable to SU/RB with SW version 4.0 and higher.\n\t\t\t The status of an entry in the Frequency subset Table.\n\t\t\t The frequency of an active entry will be included in the \n\t\t\t final list of frequencies to be used for scanning.')
brzaccVLFrequencySubsetFrequencyNew = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFrequencySubsetFrequencyNew.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFrequencySubsetFrequencyNew.setDescription('Applicable to all units. \n             Not applicable to SU/RB with SW version 4.0 and higher.\n             The frequency in MHz of an entry in the Frequency Subset table. \n             (Replaces brzaccVLFrequencySubsetFrequency to support a resolution \n             of 0.5 MHz for units with HW revision C and higher).')
brzaccVLSetSelectedFreqSubset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setSelectedFreqsSubset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSetSelectedFreqSubset.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSetSelectedFreqSubset.setDescription('Applicable to SU/RB and to AU/BU.\n             Not applicable to SU/RB with SW version 4.0 and higher.\n\t\t\t Apply the selected subset.\n\t\t\t After the next reset the new subset will be used.')
brzaccVLCurrentFrequencySubsetTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6), )
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetTable.setDescription('Applicable to SU/RB and to AU/BU.\n             Not applicable to SU/RB with SW version 4.0 and higher.\n\t\t\t The Current Frequency Subset table. In SU/RB it includes all \n\t\t\t frequencies that are currently used for scanning.\n\t\t\t In AU/BU it includes all frequencies that can be used by the \n\t\t\t DFS mechanism (if applicable)')
brzaccVLCurrentFrequencySubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLCurrentFrequencySubsetTableIdx"))
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetEntry.setDescription('Applicable to SU/RB and to AU/BU.\n             An entry in the Current Frequency Subset Table. ')
brzaccVLCurrentFrequencySubsetTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetTableIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetTableIdx.setDescription('Applicable to SU/RB and to AU/BU.\n\t\t\t An index of an entry in the Current Frequency subset Table.\n\t\t\t Not applicable to SU/RB with SW version 4.0 and higher.')
brzaccVLCurrentFrequencySubsetFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetFrequency.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetFrequency.setDescription('Applicable to all units. \n\t\t\t Not applicable to SU/RB with SW version 4.0 and higher.\n\t\t\t Applicable to all units with HW revision B and lower \n\t\t\t (for units with HW revision C and higher replaced by \n\t\t\t brzaccVLCurrentFrequencySubsetFrequencyNew to support \n\t\t\t a resolution of 0.5 MHz). \n\t\t\t The frequency in MHz of an entry in the Current Frequency Subset table.')
brzaccVLCurrentFrequencySubsetFrequencyNew = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetFrequencyNew.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetFrequencyNew.setDescription('Applicable to all units. Not applicable to SU/RB with SW version 4.0 and higher. \n             The frequency in MHz of an entry in the Current Frequency Subset table. \n             (Replaces brzaccVLCurrentFrequencySubsetFrequency to support a \n             resolution of 0.5 MHz for units with HW revision C and higher).')
brzaccVLCurrentAUOperatingFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentAUOperatingFrequency.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCurrentAUOperatingFrequency.setDescription('Applicable to AU/BU with HW revision B and lower \n\t\t     (for units with HW revision C and higher replaced by \n\t\t     brzaccVLCurrentUOperatingFrequencyNew to support a resolution \n\t\t     of 0.5 MHz). \n\t\t     The operating frequency in MHz. \n\t\t     For 5.8GHz products with SW version below 2.0 the range is \n\t\t     5740 to 5830 MHz using 10MHz resolution. \n\t\t     For units with SW version 2.0 and up the range is as defined \n\t\t     in the selected Sub Band.')
brzaccVLCurrentAUOperatingFrequencyNew = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentAUOperatingFrequencyNew.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCurrentAUOperatingFrequencyNew.setDescription('Applicable to AU/BU. The operating frequency in MHz. \n             (Replaces brzaccVLCurrentAUOperatingFrequency to support \n             a resolution of 0.5 MHz for units with HW revision C and higher). \n             For 5.8GHz products with SW version below 2.0 the range is \n             5740 to 5830 MHz using 10MHz resolution. \n             For units with SW version 2.0 and up the range is as defined \n             in the selected Sub Band.')
brzaccVLAUDefinedFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUDefinedFrequency.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAUDefinedFrequency.setDescription('Applicable to AU/BU with HW revision B and lower \n             (for units with HW revision C and higher replaced by \n             brzaccVLAUDefinedFrequencyNew to support a resolution of 0.5 MHz). \n             For 5.8GHz products with SW version below 2.0 this is the frequency \n             in MHz of the AU/BU after the next reset. \n             For units with SW version 2.0 and up this is the frequency in MHz \n             to use when the DFS Option is disabled. \n             For 5.8GHz products with SW version below 2.0 the range is \n             5740 to 5830 MHz using 10MHz resolution. \n             For units with SW version 2.0 and up the range is as defined \n             in the selected Sub Band.')
brzaccVLAUDefinedFrequencyNew = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUDefinedFrequencyNew.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAUDefinedFrequencyNew.setDescription('Applicable to AU/BU. \n             For 5.8GHz products with SW version below 2.0 this is the \n             frequency in MHz of the AU/BU after the next reset. \n             For units with SW version 2.0 and up this is the \n             frequency in MHz to use when the DFS Option is disabled. \n             (Replaces brzaccVLAUDefinedFrequency to support a resolution \n             of 0.5 MHz for units with HW revision C and higher). \n             For 5.8GHz products with SW version below 2.0 the range \n             is 5740 to 5830 MHz using 10MHz resolution. \n             For units with SW version 2.0 and up the range is as \n             defined in the selected Sub Band.')
brzaccVLCurrentSUOperatingFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentSUOperatingFrequency.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCurrentSUOperatingFrequency.setDescription('Applicable to SU/RB only.\n\t\t\t The frequency used currently by the unit.\n\t\t\t For 5.8GHz products with SW version below 2.0 the range is \n\t\t\t 5740 to 5830 MHz using 10MHz resolution.\n             For units with SW version 2.0 and up the range is as defined \n             in the selected Sub Band.')
brzaccVLSubBandSelect = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 10))
brzaccVLSelectSubBandIndex = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSelectSubBandIndex.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSelectSubBandIndex.setDescription('Applicable to all units with SW version below 4.0 \n            For units with SW version 4.0 and up it is applicable \n            only for AU/BU. For SU/RB it defines only the sub-band \n            for the Spectrum Analyzer.\n             The ID of the sub-band used by the unit.')
brzaccVLDFSParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11))
brzaccVLDFSOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSOption.setDescription('Applicable to AU/BU only.\n             Enabling/disabling the DFS Algorithm. \n             Not applicable if DFS Option is not supported by the current Sub Band.')
brzaccVLDFSChannelCheckTime = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSChannelCheckTime.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSChannelCheckTime.setDescription('Applicable to AU/BU only. \n             Defines the time the unit checks the channel for presence of \n             radar signals and does not transmit after power up or association \n             or after moving to a new channel due to detecting radar in the used \n             channel. Range: 1 to 3600 (seconds).')
brzaccVLDFSChannelAvoidancePeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSChannelAvoidancePeriod.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSChannelAvoidancePeriod.setDescription('Applicable to AU/BU only. \n             Defines the time after detecting radar signals in a channel of \n             avoiding using the channel or adjacent channels in \n             accordance with the bandwidth. Range: 1 to 60 (minutes).')
brzaccVLDFSSuWaitingOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSSuWaitingOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSSuWaitingOption.setDescription('Applicable to AU/BU only. \n            Defines whether the associated SUs should wait for this AU/BU \n            after it stopped transmitting due to radar detection, before \n            they starts scanning for other AUs/BUs.')
brzaccVLDFSClearRadarDetectedChannelsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("cancel", 1), ("clearRadarChannels", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSClearRadarDetectedChannelsAfterReset.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSClearRadarDetectedChannelsAfterReset.setDescription('Applicable to AU/BU only. \n             Clear Radar Detected and Adjacent to Radar channels after unit reset.\n             Returns the unit to operate in default frequency.')
brzaccVLDFSRadarDetectionChannelsTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7), )
if mibBuilder.loadTexts: brzaccVLDFSRadarDetectionChannelsTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSRadarDetectionChannelsTable.setDescription('Applicable to AU/BU only. \n             Applicable only when DFS option is on.\n             Displays the current channels defined in the sub-band and their radar \n             detection status.')
brzaccVLDFSRadarDetectionChannelsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLDFSChannelIdx"))
if mibBuilder.loadTexts: brzaccVLDFSRadarDetectionChannelsEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSRadarDetectionChannelsEntry.setDescription('Applicable to AU/BU only. \n\t         An entry in the brzaccVLDFSRadarDetectionChannelsTable.')
brzaccVLDFSChannelIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSChannelIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSChannelIdx.setDescription('Applicable to AU/BU only. Read-only. \n             The index of the entry in the \n             brzaccVLDFSRadarDetectionChannelsTable.')
brzaccVLDFSChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSChannelFrequency.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSChannelFrequency.setDescription('Applicable to AU/BU with HW revision B and lower \n\t\t\t (for units with HW revision C and higher replaced by \n\t\t\t brzaccVLDFSChannelFrequency New to support a resolution \n\t\t\t of 0.5 MHz). \n\t\t\t The frequency in MHz of a channel in the DFS Radar \n\t\t\t Detection Channels Table.')
brzaccVLDFSChannelRadarStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radarFree", 1), ("adjacentToRadar", 2), ("radarDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSChannelRadarStatus.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSChannelRadarStatus.setDescription('Applicable to AU/BU only.  \n             The radar detection status of a channel in \n             brzaccVLDFSRadarDetectionChannelTable.')
brzaccVLDFSChannelFrequencyNew = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSChannelFrequencyNew.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSChannelFrequencyNew.setDescription('Applicable to AU/BU. The frequency of a channel in the \n\t\t\t DFS Radar Detection Channels Table. \n\t\t\t (Replaces brzaccVLDFSChannelFrequency to support a \n\t\t\t resolution of 0.5 MHz for units with HW revision C and higher).')
brzaccVLDFSMinimumPulsesToDetect = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSMinimumPulsesToDetect.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSMinimumPulsesToDetect.setDescription('Applicable to AU/BU only. \n             Defines the minimum number of pulses to detect a radar. \n             Range: 1 - 100.')
brzaccVLDFSChannelReuseParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9))
brzaccVLDFSChannelReuseOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSChannelReuseOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSChannelReuseOption.setDescription('Applicable to AU/BU only.\n             Enabling/disabling the DFS Channel Reuse Algorithm. \n             Not applicable if DFS Option is not supported by the current Sub Band.')
brzaccVLDFSRadarActivityAssessmentPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSRadarActivityAssessmentPeriod.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSRadarActivityAssessmentPeriod.setDescription('Applicable to AU/BU only. \n             Range: 1 to 12 (Houres).')
brzaccVLDFSMaximumNumberOfDetectionsInAssessmentPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSMaximumNumberOfDetectionsInAssessmentPeriod.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSMaximumNumberOfDetectionsInAssessmentPeriod.setDescription('Applicable to AU/BU only. \n             Range: 1 to 10 (Times).')
brzaccVLCountryCodeLearningBySU = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCountryCodeLearningBySU.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCountryCodeLearningBySU.setDescription('Applicable to AU only. \n             Starting with 4.0 it is nor applicable for BA4900 and BreezeNET B.\n             Defines whether the SUs learn the country code of the AU.')
brzaccVLAutoSubBandSelect = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15))
brzaccVLAutoSubBandSelectedFreqSubset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setAllSelectedFreqsSubset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAutoSubBandSelectedFreqSubset.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAutoSubBandSelectedFreqSubset.setDescription('Applicable to SU/RB with SW version 4.0 and higher.        \n\t\t\t Apply the selected subset. After the next reset the new \n\t\t\t subset will be used for scanning.')
brzaccVLAutoSubBandFrequencySubsetTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2), )
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetTable.setDescription('Applicable to SU/RB with SW version 4.0 and higher. \n            The Frequency Subset Table that includes all available \n            sub-bands and all the frequencies in these sub-bands.')
brzaccVLAutoSubBandFrequencySubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLAutoSubBandFrequencySubsetBandIdx"), (0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLAutoSubBandFrequencySubsetFrequencyIdx"))
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetEntry.setDescription('Applicable to SU/RB with SW version 4.0 and higher.\n             An entry in the Frequency Subset Table. ')
brzaccVLAutoSubBandFrequencySubsetBandIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetBandIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetBandIdx.setDescription('Applicable to SU/RB with SW version 4.0 and higher.\n\t\t\t The index of the applicable Sub Band. \n\t\t\t This is the Sub Band ID of the relevant entry in \n\t\t\t the Country Dependent Parameters table.\n\t\t\t Serves also as an index of the entry in the \n\t\t\t Frequency subset Table.')
brzaccVLAutoSubBandFrequencySubsetFrequencyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetFrequencyIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetFrequencyIdx.setDescription('Applicable to SU/RB with SW version 4.0 and higher.\n\t\t\t The index of the applicable frequency in the \n\t\t\t applicable Sub Band.  \n\t\t\t Serves also as an index of the entry in the \n\t\t\t Frequency subset Table.')
brzaccVLAutoSubBandFrequencySubsetActive = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetActive.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetActive.setDescription('Applicable to SU/RB with SW version 4.0 and higher.\n\t\t\t The status of an entry in the Auto Sub Band Frequency subset Table.\n\t\t\t The frequency of an active entry will be included in the \n\t\t\t final list of frequencies to be used for scanning.')
brzaccVLAutoSubBandFrequencySubsetFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetFrequency.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetFrequency.setDescription('Applicable to SU/RB with SW version 4.0 and higher. \n             The frequency in MHz of the entry in the Auto Sub Band Frequency Subset table.')
brzaccVLATPC = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13))
brzaccVLAtpcOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAtpcOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAtpcOption.setDescription('Applicable all units.\n             Enabling/disabling the ATPC Algorithm.')
brzaccVLDeltaFromMinSNRLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeltaFromMinSNRLevel.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDeltaFromMinSNRLevel.setDescription('Applicable AU/BU only.\n\t\t\t The Minimum SNR Level plus the value of this parameter define the \n\t\t\t maximum desired level of the average SNR at the AU/BU. \n\t\t\t If the ATPC Option is enabled,\tthan if the received SNR is above \n\t\t\t the maximum desired level, the AU/BU will transmit Power-Down \n\t\t\t messages to the applicable SU/RB.\n             Range: 4 to 20 (dB).')
brzaccVLMinimumSNRLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMinimumSNRLevel.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMinimumSNRLevel.setDescription('Applicable AU/BU only.\n             Defines the minimum desired level of the average SNR at the AU/BU.\n             Below this level, if *AtpcOption is enabled, the AU/BU will transmit\n             ATPC Power-Up messages to the applicable SU/RB.\n             The *MinimumSNRLevel cannot be higher  than *MaximumSNRLevel.\n             Range: 4 to 60 (dB).')
brzaccVLMinimumIntervalBetweenATPCMessages = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMinimumIntervalBetweenATPCMessages.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMinimumIntervalBetweenATPCMessages.setDescription('Applicable AU/BU only.\n\t\t\t The minimum interval between two consecutive AU/BU to SU/RB messages.\n             Range: 1 to 3600 (Sec).')
brzaccVLPowerLevelSteps = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLPowerLevelSteps.setStatus('current')
if mibBuilder.loadTexts: brzaccVLPowerLevelSteps.setDescription('Applicable AU/BU only.\n\t\t\t The step in dB that the SU/RB will use when receiving an ATPC \n\t\t\t Power-Up/Power-Down message.\n             Range: 1 to 20  (dB).')
brzaccVLCellDistanceParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15))
brzaccVLCellDistanceMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCellDistanceMode.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCellDistanceMode.setDescription('Applicable AU/BU only. \n             The selected mode of deciding on Cell Distance.')
brzaccVLFairnessFactor = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFairnessFactor.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFairnessFactor.setDescription('Applicable AU/BU only.\n             Not applicable to BreezeNET-B products for SW version below 4.0.\n             The percentage of the maximum distance that is taken into \n             account in the time slot calculation. Range: 0 to 100 \n             (Percent). A value of 0 means the minimal slot size \n             (9 microseconds).\n             BreezeNET-B products with SW version below 4.0 return na.')
brzaccVLMeasuredCellDistance = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("below-2-Km", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMeasuredCellDistance.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMeasuredCellDistance.setDescription('Applicable AU/BU only.\n\t\t\t The Maximum Cell Distance as calculated by the AU/BU.\n             Range: 0 to 54 (Kilometers).')
brzaccVLUnitWithMaxDistance = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitWithMaxDistance.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUnitWithMaxDistance.setDescription('Applicable AU only.\n\t\t\t Not applicable to BreezeNET-B units.\n\t\t\t The MAC address of the unit with the maximum distance\n\t\t\t from the AU.')
brzaccVLPerSuDistanceLearning = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLPerSuDistanceLearning.setStatus('current')
if mibBuilder.loadTexts: brzaccVLPerSuDistanceLearning.setDescription('Aplicable to AU only. Applicable only if Cell Distance Mode is \n\t\t\tset to Automatic. When disabled, all SUs in the cell will use \n\t\t\tfor the ACK Timeout the computed distance of the farthest SU. \n\t\t\tWhen enabled, each SU will use its own computed distance')
brzaccVLScanningMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLScanningMode.setStatus('current')
if mibBuilder.loadTexts: brzaccVLScanningMode.setDescription('Applicable to SU/RB only. \n             The scanning mode. In cells where the DFS Option is enabled \n             Scanning Mode is forced to Passive.')
brzaccVLAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAntennaGain.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAntennaGain.setDescription("Applicable to all units. Read-write in units where \n             brzaccVLAntennaGainChange  is supported. \n             Read-only in units where brzaccVLAntennaGainChange is not supported. \n             The net gain (including cable attenuation for detached antennas) of \n             the antenna. \n             Range: 0  - to Maximum EIRP defined by country code + 10 (dBi). \n             A value of -2 (this value is configurable only in factory) \n             means don't care.\n             A value of -1 (this value is configurable only in factory) \n             means that the unit will not transmit until the actual value \n             is configured.")
brzaccVLSpectrumAnalysisParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18))
brzaccVLSpectrumAnalysisChannelScanPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisChannelScanPeriod.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisChannelScanPeriod.setDescription('Applicable to all units. \n             The period of staying on each channel for information gathering \n             when performing Spectrum analysis. \n             Range: 2-30 seconds.')
brzaccVLSpectrumAnalysisScanCycles = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisScanCycles.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisScanCycles.setDescription('Applicable to all units.  \n             The number of scanning cycles when performing Spectrum Analysis. \n             Range: 1-100.')
brzaccVLAutomaticChannelSelection = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAutomaticChannelSelection.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAutomaticChannelSelection.setDescription('Applicable to AU/BU only.  \n             Defines weather the AU/BU shall choose the most noise free channel\n             upon startup after spectrum analysis.')
brzaccVLSpectrumAnalysisActivation = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("activateNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisActivation.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisActivation.setDescription('Applicable to all units.  \n             Activates spectrum analysis, the unit is automatically reset upon \n             activation.')
brzaccVLSpectrumAnalysisStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("currentlyActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisStatus.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisStatus.setDescription('Applicable to all units.  \n             Defines weather the unit is currently under performing \n             a spectrum analysis process.')
brzaccVLResetSpectrumCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLResetSpectrumCounters.setStatus('current')
if mibBuilder.loadTexts: brzaccVLResetSpectrumCounters.setDescription('Applicable to all units.  \n             Resets the spectrum analysis counters.')
brzaccVLSpectrumAnalysisInformationTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7), )
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationTable.setDescription('Applicable to all units.  \n             The spectrum analysis information table.')
brzaccVLSpectrumAnalysisInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLSpectrumAnalysisInformationTableIdx"))
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationEntry.setDescription('Applicable to all units.  \n             The spectrum analysis information table entry.')
brzaccVLSpectrumAnalysisInformationTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationTableIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationTableIdx.setDescription('Applicable to all units.  \n             A read only table index for a Spectrum Analysis Information entry in the  \n             Spectrum Analysis Information Table.')
brzaccVLSpectrumAnalysisInformationChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationChannel.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationChannel.setDescription('Applicable to all units.  \n             The channels in the Spectrum Analysis Information Table.\n             If the unit is currently under spectrum analysis the channels would \n             be those on which the analysis is currently performed.\n             If the unit is in normal mode the channels would be the those on \n             which the last analysis was performed.')
brzaccVLSpectrumAnalysisInformationSignalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationSignalCount.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationSignalCount.setDescription('Applicable to all units.\n             The number of signals (excluding OFDM frames) detected in the channel. \n             If the unit is currently under spectrum analysis the count would \n             be of the analysis that is currently performed. \n             If the unit is in normal mode the count would be of the last \n             analysis performed.')
brzaccVLSpectrumAnalysisInformationSignalSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationSignalSNR.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationSignalSNR.setDescription('Applicable to all units.\n\t\t\t The approximate SNR of the signals (excluding OFDM frames)\n\t\t\t detected in the channel.\n\t\t\t If the unit is currently under spectrum analysis the SNR would\n\t\t\t be of the analysis that is currently performed.\n\t\t\t If the unit is in normal mode the SNR would be of the last\n\t\t\t analysis performed.')
brzaccVLSpectrumAnalysisInformationSignalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationSignalWidth.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationSignalWidth.setDescription('Applicable to all units. \n             The average width of the signals (excluding OFDM frames) \n             detected in the channel. \n             If the unit is currently under spectrum analysis the width would \n             be of the analysis that is currently performed. \n             If the unit is in normal mode the width would be of the last \n             analysis performed.')
brzaccVLSpectrumAnalysisInformationOFDMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationOFDMFrames.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationOFDMFrames.setDescription('Applicable to all units. \n             The number of OFDM frames detected in the channel. \n             If the unit is currently under spectrum analysis the count would \n             be of the analysis that is currently performed. \n             If the unit is in normal mode the count would be of the last \n             analysis performed.')
brzaccVLMaxNumOfAssociationsLimit = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaxNumOfAssociationsLimit.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaxNumOfAssociationsLimit.setDescription('Applicable to AU only. \n             Not applicable to BreezeNET-B products. \n             Shows the limit for the number of SUs that can be associated \n             with the AU. \n             For AU-BS, AU-SA if Data Encryption is enabled, the upper \n             limit is 124, otherwise it is 512. \n             For AUS-BS, AUS-SA with SW version 4.0 and higher the upper limit \n             is 8 or 25 (via licensing).\n             For AUS-BS, AUS-SA with SW version below 4.0 the upper limit is 5.\n             BreezeNET-B products return 65535.')
brzaccVLDisassociate = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 20))
brzaccVLDisassociateAllSUs = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("disassociateAllSUs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDisassociateAllSUs.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDisassociateAllSUs.setDescription('Applicable to AU only.  \n             The AU shall disassociate all its associated units.')
brzaccVLDisassociateSuByMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 20, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDisassociateSuByMacAddress.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDisassociateSuByMacAddress.setDescription('Applicable to AU only.  \n             The AU shall disassociate the SU with the configured MAC address.')
brzaccVLTxControl = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("ethernetStatusControl", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTxControl.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTxControl.setDescription('Applicable to AU/BU only.  \n             Tx Control of the AU/BU.\n             Starting with version 4.0 it is run-time.\n             For SW version below 4.0 the unit reset itself.\n             If set to ethernetStatusControl, the unit will not transmit \n             if the Ethernet link is down.\n             This parameter can be configured only via the ethernet port.')
brzaccVLLostBeaconsWatchdogThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(100, 1000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLLostBeaconsWatchdogThreshold.setStatus('current')
if mibBuilder.loadTexts: brzaccVLLostBeaconsWatchdogThreshold.setDescription('Applicable to AU/BU only.  \n            The number of unsuccessful consecutive transmissions beacons \n            before Internal refresh is performed. \n\t\t\t0 means that the lost beacons watchdog is not \n\t\t\tused and internal refresh is not performed.')
brzaccVLTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTransmitPower.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTransmitPower.setDescription('Applicable to all units with SW version 4.0 and higher.\n             The uniform transmit power for all modulation levels. For a specific\n             modulation level the effective transmit power (brzaccVLTxPower) is \n             the minimum between the uniform transmit power and the maximum \n             transmit power for that modulation level.')
brzaccVLMaximumTxPower = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaximumTxPower.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaximumTxPower.setDescription('Applicable to only SU/RB with SW version 4.0 and higher.\n            The Maximum Transmit Power for all modulation levels.\n            The Maximum Transmit Power for a specific modulation level is the \n            minimum between this parameter and the hardware limitation for \n            that modulation level')
brzaccVLCountryCodeParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25))
brzaccVLCountryCodeReApply = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("reapply", 1), ("cancel", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCountryCodeReApply.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCountryCodeReApply.setDescription('Applicable to all units.\n             Re-apply country code parameters.')
brzaccVLServiceParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7))
brzaccVLMirDownlink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMirDownlink.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMirDownlink.setDescription('Applicable to SU/RB only. \n         The Maximum Information Rate (MIR) from AU/BU to SU/RB.\n         MIR must be above brzaccVLCirDownlink value.\n         Range for set: 128 to 2,048 (Kbps) for SU-3 with SW version below 4.0,\n\t\t\t\t\t\t128 to 3,072 (Kbps) for SU-3 with SW version 4.0 and higher,\t\t\t\t\n                        128 to 3,968 (Kbps) for SU-6 with SW version less than 4.0,\n                        128 to 6,016 (Kbps) for SU-6 with SW version greater than 4.0,\n         \t            128 to 14,976 (Kbps) for SU-24, \n         \t            128 to 53,888 (Kbps) for SU-BD and SU-54,\n         \t            128 to 6,912  (Kbps) for RB-14, \n         \t            128 to 22,016 (Kbps) for RB-28,\n         \t            128 to 107,904 (Kbps) for RB-100.\n         \t            128 to 6,016 (Kbps) for SU-I.\n         The actual value (Get) will be the entered value rounded to the nearest \n         multiple of 128 (N*128).')
brzaccVLMirUplink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMirUplink.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMirUplink.setDescription('Applicable to SU/RB only. \n         The Maximum Information Rate (MIR) from SU/RB to AU/BU.\n         MIR must be above brzaccVLCirUplink value.\n         Range for set: 128 to 2,048 (Kbps) for SU-3,\n                        128 to 3,968  (Kbps) for SU-6 with SW version less than 4.0,\n                        128 to 4,096  (Kbps) for SU-6 with SW version greater than 4.0,\n         \t            128 to 14,976 (Kbps) for SU-24, \n         \t            128 to 53,888 (Kbps) for SU-BD and SU-54,\n         \t            128 to 6,912  (Kbps) for RB-14, \n         \t            128 to 22,016 (Kbps) for RB-28, \n         \t            128 to 107,904 (Kbps) for RB-100.\n         \t            128 to 2,048 (Kbps) for SU-I.\n\t\t The actual value (Get) will be the entered value rounded to the nearest \n\t\t multiple of 128 (N*128).')
brzaccVLCirDownlink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCirDownlink.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCirDownlink.setDescription('Applicable to SU only. \n         Not applicable to BreezeNET-B products. \n         The Committed Information Rate (CIR) from AU to SU.\n         CIR must be below brzaccVLMirDownlink value.\n         Range for Set: \n         0 to 2,048 (Kbps) for SU-3 with SW version below 4.0,\n\t\t 0 to 3,072 (Kbps) for SU-3 with SW version 4.0 and higher,\t\t\t\t\n         0 to 3,968 (Kbps) for SU-6 with SW version less than 4.0,\n         0 to 6,016 (Kbps) for SU-6 with SW version greater than 4.0\n         0 to 14,976 (Kbps) for SU-24, \n         0 to 45,056 (Kbps) for SU-BD and SU-54. \n         0 to 6,016 (Kbps) for SU-I.\n         The actual value (Get) will be the entered value rounded to the \n         nearest multiple of 128 (N*128).\n\t\t BreezeNET-B products will return 65535.')
brzaccVLCirUplink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCirUplink.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCirUplink.setDescription('Applicable to SU only. \n          Not applicable to BreezeNET-B products. \n          The Committed Information Rate (CIR) from SU to AU.\n          CIR must be below brzaccVLMirUplink value.\n          Range for Set: \n          0 to 2,048 (Kbps) for SU-3,\n          0 to 3,968  (Kbps) for SU-6 with SW version less than 4.0,\n          0 to 4,096  (Kbps) for SU-6 with SW version greater than 4.0,\n          0 to 14,976 (Kbps) for SU-24, \n          0 to 45,056 (Kbps) for SU-BD and SU-54. \n          0 to 2,048 (Kbps) for SU-I.\n          The actual value (Get) will be the entered value rounded to the nearest \n          multiple of 128 (N*128).\n          BreezeNET-B products will return 65535.')
brzaccVLMaxDelay = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxDelay.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaxDelay.setDescription('Applicable to SU only. \n         Not applicable to BreezeNET-B products.\n         The maximal time packets may be delayed by the \n         CIR\\MIR mechanism. Above the configured maximal period \n         the packets are discarded.\n         Range: 300 to 10000 milliseconds.\n         BreezeNET-B products return 65535.')
brzaccVLMaxBurstDuration = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxBurstDuration.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaxBurstDuration.setDescription('Applicable to AU and SU. \n         Not applicable to BreezeNET-B products.\n         The maximum time during which inactivity bonus time \n         can be accumulated for future burst transmissions.\n         Range: 0 to 2000 milliseconds.\n         BreezeNET-B products return 65535')
brzaccVLGracefulDegradationLimit = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLGracefulDegradationLimit.setStatus('current')
if mibBuilder.loadTexts: brzaccVLGracefulDegradationLimit.setDescription('Applicable to AU only. \n         Not applicable to BreezeNET-B products.\n         The maximum limit for activating the graceful \n         degradation algorithm.\n         Range: 0 to 70% rate of the CIR.\n         BreezeNET-B products return 255.')
brzaccVLMirOnlyOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMirOnlyOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMirOnlyOption.setDescription('Applicable to AU only. \n         Not applicable to BreezeNET-B products. \n         When brzaccMirOnly is enabled, it overrides the CIR/MIR \n         algorithm for determining actual information rate and \n         forces the algorithm to operate with MIR parameter \n         settings only. When enabled, the Graceful Degradation \n         algorithm is disabled.')
brzaccVLTrafficPrioritization = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10))
brzaccVLTrafficPriVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 1))
brzaccVLVLANPriorityThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVLANPriorityThreshold.setStatus('current')
if mibBuilder.loadTexts: brzaccVLVLANPriorityThreshold.setDescription("Applicable to all units. \n        If the VLAN Priority's value of the frame is less than or equal to this\n        threshold the frame will get LOW priority, otherwise the frame will get \n        HIGH priority.\n        Untagged frames will get LOW priority")
brzaccVLTrafficPriIPToS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2))
brzaccVLToSPrioritizationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("ipPrecedence", 2), ("dSCP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLToSPrioritizationOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLToSPrioritizationOption.setDescription('Applicable to all units. Disable/Enable IP ToS prioritization and \n\t\tchoose the interpretation of the IP ToS field from IP header.\n\t\tipPrecedence(2): The IP ToS field is defined by RFC791. In this \n                         case the prioritization will be done using the \n                         Precedence sub-field of IP ToS. This sub-field \n                         has 3 bits, so it can be between 0 and 7.\n\t\tdSCP(3):         The IP ToS field is defined by RFC2474. In this\n                         case the prioritization will be done using the \n                         DSCP sub-field. The size of the sub-field is 6 bits, \n                         so the range is 0 to 63.')
brzaccVLIPPrecedenceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLIPPrecedenceThreshold.setStatus('current')
if mibBuilder.loadTexts: brzaccVLIPPrecedenceThreshold.setDescription('Applicable to all units. The threshold of Precedence sub-field of IP ToS \n\t\tfield from IP Header (RFC791) to be used when the ToS Prioritization \n\t\tOption is set to IP Precedence.\n\t\tIf the Precedence sub-field of a frame is less than or equal to this \n\t\tthreshold the frame will have LOW priority, otherwise it will get HIGH \n\t\tpriority.')
brzaccVLIPDSCPThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLIPDSCPThreshold.setStatus('current')
if mibBuilder.loadTexts: brzaccVLIPDSCPThreshold.setDescription('Applicable to all units. The threshold of DSCP sub-field of IP ToS \n\t\tfield from IP Header (RFC2474) to be used when ToS Prioritization \n\t\tOption is set to DSCP.\n\t\tIf the DSCP sub-field of a frame is less than or equal to this \n\t\tthreshold the frame will have LOW priority, otherwise it will get \n\t\tHIGH priority.')
brzaccVLTrafficPriUdpTcpPortRange = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3))
brzaccVLUdpTcpPortRangePrioritizationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("udpOnly", 2), ("tcpOnly", 3), ("udpANDtcp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpTcpPortRangePrioritizationOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUdpTcpPortRangePrioritizationOption.setDescription('Applicable to all units. Disable/Enable Prioritization using UDP and/or\n        TCP Port Ranges. \n\t\tudpOnly(2)  : prioritization will be done only for UDP packets\n\t\ttcpOnly(3)  : prioritization will be done only for TCP packets\n\t\tudpANDtcp(4): prioritization will be done for UDP and TCP packets')
brzaccVLUdpPortRangeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2))
brzaccVLUdpPortPriRTPRTCP = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rtpANDrtcp", 1), ("rtpOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpPortPriRTPRTCP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUdpPortPriRTPRTCP.setDescription('Applicale to all units.\n        RTP/RTCP ports prioritization option for UDP packets. \n        rtpANDrtcp(1): the possible RTP and RTCP packet with destination port in the\n                       defined port ranges will get HIGH priority\n\t\trtpOnly(2): only possible RTP packet (packet with even destination port ) \n\t\t            with destination port in the defined port ranges will get HIGH \n\t\t            priority.')
brzaccVLUdpPortRangeNum = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeNum.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUdpPortRangeNum.setDescription('Applicable to all units. The number of entries in the UDP Port Range Table')
brzaccVLUdpPortRangeTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3), )
if mibBuilder.loadTexts: brzaccVLUdpPortRangeTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUdpPortRangeTable.setDescription('Applicable to all units. A table of UDP port ranges use for prioritization. \n\t\tThe user can define up to 64 ranges.\n        An entry is empty if start is 65535 and end is 0')
brzaccVLUdpPortRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLUdpPortRangeIdx"))
if mibBuilder.loadTexts: brzaccVLUdpPortRangeEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUdpPortRangeEntry.setDescription('Applicable to all units. A UDP Port Ranges Table entry.')
brzaccVLUdpPortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeStart.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUdpPortRangeStart.setDescription('Applicable to all units. Start port of an UDP Port Range')
brzaccVLUdpPortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeEnd.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUdpPortRangeEnd.setDescription('Applicable to all units. End port of an UDP Port Range')
brzaccVLUdpPortRangeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUdpPortRangeIdx.setDescription("Applicable to all units. UDP Port Range Entry's index ")
brzaccVLUdpPortRangeAdd = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeAdd.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUdpPortRangeAdd.setDescription('Applicable to all units. Add port range(s) to UDP Port Ranges Table. \n        Get operation will return the empty string. \n\t\tA range is defined <start>-<end> or <start> where <start> is the Start \n\t\tPort of the range and <end> is the End Port. If only <start> is \n\t\tspecified the range is <start>-<start>.\n        The value of  <start> and <end> are between 0..65535.\n        The user can add several ranges using a comma to separate between ranges. \n        Example: 10-256,99,987-900')
brzaccVLUdpPortRangeDelete = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeDelete.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUdpPortRangeDelete.setDescription('Applicable to all units. Delete port range(s) from UDP Port Ranges Table. \n        Get operation will return the empty string.\n        A range is defined <start>-<end> or <start> where <start> is the Start \n        Port of the range and <end> is the End Port. If only <start> is \n        specified the range is <start>-<start>.\n        The value of  <start> and <end> are between 0..65535.\n        The user can delete several ranges using a comma to separate between \n        ranges.\n        Example: 10-256,99,987-900')
brzaccVLUdpPortRangeDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeDeleteAll.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUdpPortRangeDeleteAll.setDescription('Applicable to all units. Delete all entries form UDP Port Ranges Table. \n\t\tGet operation will return 1')
brzaccVLTcpPortRangeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3))
brzaccVLTcpPortPriRTPRTCP = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rtpANDrtcp", 1), ("rtpOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTcpPortPriRTPRTCP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTcpPortPriRTPRTCP.setDescription('Applicable to all units. RTP/RTCP ports prioritization option for TCP packets. \n\t\trtpANDrtcp(1): the possible RTP and RTCP packet with destination port \n\t\tin the defined port ranges will get HIGH priority\n\t\trtpOnly(2): only possible RTP packet (packet with even destination port )')
brzaccVLTcpPortRangeNum = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeNum.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTcpPortRangeNum.setDescription('Applicable to all units. The number of entries in the TCP Port Range Table')
brzaccVLTcpPortRangeTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3), )
if mibBuilder.loadTexts: brzaccVLTcpPortRangeTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTcpPortRangeTable.setDescription('Table of TCP Port Ranges use for prioritization.\n        The user can define up to 64 ranges.\n        An entry is empty if start is 65535 and end is 0')
brzaccVLTcpPortRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLTcpPortRangeIdx"))
if mibBuilder.loadTexts: brzaccVLTcpPortRangeEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTcpPortRangeEntry.setDescription('Applicable to all units. A TCP Port Ranges Table entry.')
brzaccVLTcpPortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeStart.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTcpPortRangeStart.setDescription('Applicable to all units. Start port of a TCP Port Range')
brzaccVLTcpPortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeEnd.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTcpPortRangeEnd.setDescription('Applicable to all units. End port of a TCP Port Range')
brzaccVLTcpPortRangeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTcpPortRangeIdx.setDescription("Applicable to all units. TCP Port Range Entry's index")
brzaccVLTcpPortRangeAdd = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeAdd.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTcpPortRangeAdd.setDescription('Applicable to all units. Add port range(s) to TCP Port Ranges Table. \n        Get operation will return the empty string. \n\t\tA range is defined <start>-<end> or <start> where <start> is the Start \n\t\tPort of the range and <end> is the End Port. If only <start> is specified \n\t\tthe range is <start>-<start>.\n        The value of  <start> and <end> are between 0..65535.\n        The user can add several ranges using comma to separate between ranges.\n        Example: 10-256,99,987-900')
brzaccVLTcpPortRangeDelete = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeDelete.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTcpPortRangeDelete.setDescription('Applicable to all units. Delete port range(s) from TCP Port Ranges Table. \n\t\tGet operation will return the empty string.\n        A range is defined <start>-<end> or <start> where <start> is the Start \n        Port of the range and <end> is the End Port. If only <start> is specified \n        the range is <start>-<start>.\n        The value of  <start> and <end> are between 0..65535.\n        The user can delete several ranges using comma to separate between ranges.\n        Example: 10-256,99,987-900')
brzaccVLTcpPortRangeDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeDeleteAll.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTcpPortRangeDeleteAll.setDescription('Applicable to all units. Delete all entries form TCP Port Ranges Table\n        Get operation will return 1')
brzaccVLWirelessLinkPrioritization = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4))
brzaccVLWirelessLinkPrioritizationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLWirelessLinkPrioritizationOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLWirelessLinkPrioritizationOption.setDescription('Applicable only to AU with a license for the Wireless Link Prioritization feature and to BU-100. \n             Enable/disable the traffic prioritization over the \n             Wireless Link')
brzaccVLlowPriorityAIFS = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLlowPriorityAIFS.setStatus('current')
if mibBuilder.loadTexts: brzaccVLlowPriorityAIFS.setDescription('Applicable only to AU with a license for the Wireless Link Prioritization feature and to BU-100. \n            Applicable only if the Wireless Link Prioritization Option is enabled.\n            Define the AIFS (Arbitration Inter-frame Space) that will be used   \n            for transmitting Low Priority Traffic')
brzaccVLHWRetriesHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLHWRetriesHighPriority.setStatus('current')
if mibBuilder.loadTexts: brzaccVLHWRetriesHighPriority.setDescription('Applicable only to AU with a license for the Wireless Link Prioritization feature and to BU-100.\n            Applicable only if the Wireless Link Prioritization Option is enabled. \n            Defines the Maximum number of HW Retries for a unicast data packet \n            that has High Priority')
brzaccVLHWRetriesLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLHWRetriesLowPriority.setStatus('current')
if mibBuilder.loadTexts: brzaccVLHWRetriesLowPriority.setDescription('Applicable only to AU with a license for the Wireless Link Prioritization feature and to BU-100.\n            Applicable only if the Wireless Link Prioritization Option is enabled. \n            Defines the Maximum number of HW Retries for a unicast data packet \n            that has Low Priority')
brzaccVLAUBurstDurationHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUBurstDurationHighPriority.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAUBurstDurationHighPriority.setDescription('Applicable only to AU with a license for the Wireless Link Prioritization feature and to BU-100. \n            Applicable only if the Wireless Link Prioritization Option is enabled.\n             Defines the Maximum duration of burst that can be done by AU with \n             High Priority packets.\n             The time is given in 250 microseconds units')
brzaccVLAUBurstDurationLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUBurstDurationLowPriority.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAUBurstDurationLowPriority.setDescription('Applicable only to AU with a license for the Wireless Link Prioritization feature and to BU-100. \n            Applicable only if the Wireless Link Prioritization Option is enabled.\n             Defines the Maximum duration of burst that can be done by AU \n             with Low Priority packets.\n             The time is given in 250 microseconds units')
brzaccVLSUBurstDurationHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSUBurstDurationHighPriority.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSUBurstDurationHighPriority.setDescription('Applicable only to AU with a license for the Wireless Link Prioritization feature and to BU-100. \n            Applicable only if the Wireless Link Prioritization Option is enabled.\n            Defines the Maximum duration of burst that can be done by SU/RB \n            with High Priority packets.\n            The parameter is configurable in AU and the SUs/RB will learn it \n            form AU/BU.\n            The time is given in 250 microseconds units')
brzaccVLSUBurstDurationLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSUBurstDurationLowPriority.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSUBurstDurationLowPriority.setDescription('Applicable only to AU with a license for the Wireless Link Prioritization feature and to BU-100. \n            Applicable only if the Wireless Link Prioritization Option is enabled.\n            Defines the Maximum duration of burst that can be done by SU/RB \n            with High Priority packets.\n            The parameter is configurable in AU/BU and the SUs/RB will learn it \n            from AU/BU.\n            The time is given in 250 microseconds units')
brzaccVLDrap = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11))
brzaccVLDrapSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDrapSupport.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDrapSupport.setDescription('Applicable to AU. Not applicable to BreezeNET B products\n\t\tDisable/Enable the DRAP feature')
brzaccVLDrapUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 8200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDrapUdpPort.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDrapUdpPort.setDescription('Applicable to AU when DRAP support is enabled. \n\t\tNot applicable to BreezeNET B products. \n\t\tThe UDP port used for the DRAP server')
brzaccVLDrapMaxNumberOfVoiceCalls = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDrapMaxNumberOfVoiceCalls.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDrapMaxNumberOfVoiceCalls.setDescription('Applicable to AU when DRAP support is enabled. \n\t\tNot applicable to BreezeNET B products. \n\t\tThe maximum number of voice calls that can be supported by the AU')
brzaccVLDrapTTL = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDrapTTL.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDrapTTL.setDescription('Applicable to AU when DRAP support is enabled. \n\t\tNot applicable to BreezeNET B products. \n\t\tThe maximum time between two allocation requests')
brzaccVLDrapNoOfActiveVoiceCalls = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapNoOfActiveVoiceCalls.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDrapNoOfActiveVoiceCalls.setDescription('Applicable to AU when DRAP support is enabled. \n\t\tNot applicable to BreezeNET B products. \n\t\tThe current total number of  active voice calls.')
brzaccVLLowPriorityTrafficMinimumPercent = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLLowPriorityTrafficMinimumPercent.setStatus('current')
if mibBuilder.loadTexts: brzaccVLLowPriorityTrafficMinimumPercent.setDescription('The minimum percent of the traffic rate that is allocated to the low priority traffic')
brzaccVLSUPMirDownlink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSUPMirDownlink.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSUPMirDownlink.setDescription('Applicable to AU only. \n         The Maximum Information Rate (MIR) from AU to SUP.\n            Range for set: 128 to 12,032 (Kbps).\n         The actual value (Get) will be the entered value rounded to the nearest \n         multiple of 128 (N*128).')
brzaccVLMIRThresholdPercent = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMIRThresholdPercent.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMIRThresholdPercent.setDescription('Applicable to AU only. \n\t\tMIR Threshold Percent')
brzaccVLUserFilterParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8))
brzaccVLUserFilterOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("ipOnly", 2), ("userDefinedAddrOnly", 3), ("pPPoEOnly", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUserFilterOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUserFilterOption.setDescription('Applicable to SU/RB only. \n             Defines user-filtering options.\n             disable: No filtering.\n             iPOnly: Only IP protocol frames pass. \n             userDefinedAddrOnly: Only ip frames to/from user defined IP \n                                  addresses pass.\n             pPPoE Only: Only PPPoE frames pass.')
brzaccVLIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2), )
if mibBuilder.loadTexts: brzaccVLIpFilterTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLIpFilterTable.setDescription('Applicable to SU/RB only. \n             An IP Filter Table of up to 8 user defined addresses, \n             or address groups, to be used if the selected User \n             Filtering option is userDefinedAddrOnly.')
brzaccVLIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLIpFilterIdx"))
if mibBuilder.loadTexts: brzaccVLIpFilterEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLIpFilterEntry.setDescription('Applicable to SU/RB only. \n             An IP Filter Table entry.')
brzaccVLIpID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLIpID.setStatus('current')
if mibBuilder.loadTexts: brzaccVLIpID.setDescription('Applicable to SU/RB only. \n             An IP address of an IP Filter Table entry.')
brzaccVLMaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaskID.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaskID.setDescription('Applicable to SU/RB only. \n             An IP Mask of an IP Filter Table entry. Either a mask \n             or a range, but not both can be used to define an \n             address group. If the range is other than 0, than the mask is \n             ignored and only the range value is used to define the address group.')
brzaccVLIpFilterRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLIpFilterRange.setStatus('current')
if mibBuilder.loadTexts: brzaccVLIpFilterRange.setDescription('Applicable to SU/RB only. \n             An addresses range for the IP Filter Table entry. The \n             first address in the range is the IP address.\n             O means that the range is not used.  \n             Either a mask or a range, but not both can be used to \n             define an address group.\n\t\t\t If the range is other than 0, than the mask is ignored and \n\t\t\t only the range value is used to define the address group.\n             Range: 0 to 255.')
brzaccVLIpFilterIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLIpFilterIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLIpFilterIdx.setDescription('Applicable to SU/RB only. \n             A table index for the IP Filter Table entry.')
brzaccVLDeleteOneUserFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("deletefirstEntry", 1), ("deletesecondEntry", 2), ("deletethirdEntry", 3), ("deletefourthEntry", 4), ("deletefifthEntry", 5), ("deletesixthEntry", 6), ("deleteseventhEntry", 7), ("deleteeighthEntry", 8), ("cancelOperation", 9), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteOneUserFilter.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDeleteOneUserFilter.setDescription('Applicable to SU/RB only. \n             Deletes a single selected entry from the IP Filter \n             Table.')
brzaccVLDeleteAllUserFilters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteAllUserFilters.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDeleteAllUserFilters.setDescription('Applicable to SU/RB only. \n             Deletes all entries from the IP Filter Table.')
brzaccVLDHCPUnicastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDHCPUnicastOverrideFilter.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDHCPUnicastOverrideFilter.setDescription('Applicable to SU/RB only. \n             Enables or disables the unicast DHCP messages, \n             overriding the IP Filtering option.')
brzaccVLSecurityParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9))
brzaccVLAuthenticationAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAuthenticationAlgorithm.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAuthenticationAlgorithm.setDescription('Applicable to all units.\n            Enables/disables the authentication encryption option.\n            openSystem: Authentication messages are not encrypted.\n            sharedKey : Authentication messages are encrypted ')
brzaccVLSUDefaultKeyID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSUDefaultKeyID.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSUDefaultKeyID.setDescription('Applicable to SU/RB only.\n\t\t\t The key to be used for encryption of authentication messages \n\t\t\t and/or data.\n             Range: 1 to 4. ')
brzaccVLDataEncryptionOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDataEncryptionOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDataEncryptionOption.setDescription('Applicable to all units.\n             Enables/disables the data encryption option. ')
brzaccVLAUDefaultMulticastKeyID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUDefaultMulticastKeyID.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAUDefaultMulticastKeyID.setDescription('Applicable to AU/BU only.\n             The key to be used for encryption of multicasts and broadcasts.')
brzaccVLSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wep", 1), ("aesOCB", 2), ("fips197", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSecurityMode.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSecurityMode.setDescription('Applicable to all units. The fips197 option is applicable only to units with a license to\n             use FIPS 197 algorithm.\n             The encryption algorithm to be used for authentication messages \n             and/or data encryption.')
brzaccVLAuthenticationPromiscuousMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAuthenticationPromiscuousMode.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAuthenticationPromiscuousMode.setDescription('Applicable to AU/BU only.\n             Enables/disable the promiscuous mode allowing authentication of \n             and communication with all SUs/RB regardless of their security \n             parameters.')
brzaccVLKey1 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLKey1.setStatus('current')
if mibBuilder.loadTexts: brzaccVLKey1.setDescription('Applicable to all units.\n             Key number 1. Accessible only with SNMP Write Community String \n             (administrator password).\n             Valid values: 32 hexadecimal digits.')
brzaccVLKey2 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLKey2.setStatus('current')
if mibBuilder.loadTexts: brzaccVLKey2.setDescription('Applicable to all units.\n             Key number 2. Accessible only with SNMP Write Community String \n             (administrator password).\n             Valid values: 32 hexadecimal digits.')
brzaccVLKey3 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLKey3.setStatus('current')
if mibBuilder.loadTexts: brzaccVLKey3.setDescription('Applicable to all units.\n             Key number 3. Accessible only with SNMP Write Community String \n             (administrator password).\n             Valid values: 32 hexadecimal digits.')
brzaccVLKey4 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLKey4.setStatus('current')
if mibBuilder.loadTexts: brzaccVLKey4.setDescription('Applicable to all units.\n             Key number 4. Accessible only with SNMP Write Community String \n             (administrator password).\n             Valid values: 32 hexadecimal digits.')
brzaccVLSecurityModeSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSecurityModeSupport.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSecurityModeSupport.setDescription('Applicable to all units. Returns types of encryption that are supported.\n            0 - no encryption\n            1 - WEP\n            2 - AES OCB\n            3 - WEP and AES OCB\n            4 - FIPS-197\n            5 - FIPS-197 and WEP\n            6 - FIPS-197 and AES OCB\n            7 - FIPS-197, AES OCB and WEP')
brzaccVLPerformanceParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10))
brzaccVLRTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLRTSThreshold.setStatus('current')
if mibBuilder.loadTexts: brzaccVLRTSThreshold.setDescription('Applicable to SU and AU. \n             Not applicable to BreezeNET-B products. \n             The minimum frame size that requires an RTS/CTS handshake.            \n             Range: For units bearing SW version 3.0 and above: 20 to 3400 bytes,\n\t\t\t for previous SW versions 20 to 1600 bytes.\n             BreezeNET-B products return 65535.')
brzaccVLMinContentionWindow = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMinContentionWindow.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMinContentionWindow.setDescription('Applicable to SU and AU. \n             For units bearing SW version 4.0 and above applicable to \n             BreezeNET-B products, for previous SW versions not applicable \n             to BreezeNET-B products. \n             The initial value to be used by the contention window calculation \n             algorithm.\n             Value must be 0 or power of 2 minus 1 (7,15,31...).\n             Range: 0 to 1023, excluding 1 and 3.\n             BreezeNET-B products with SW version below 4.0 return 65535.')
brzaccVLMaxContentionWindow = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxContentionWindow.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaxContentionWindow.setDescription('Applicable to SU and AU. \n             For units bearing SW version 4.0 and above applicable to \n             BreezeNET-B products, for previous SW versions not applicable \n             to BreezeNET-B products. \n             The maximum value to be used by the contention window calculation \n             algorithm.\n             Value must be power of 2 minus 1 (7,15,31...)\n             Range: 7 to 1023.')
brzaccVLMaximumModulationLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaximumModulationLevel.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMaximumModulationLevel.setDescription('Applicable to all units.\n             If the Adaptive Modulation algorithm is enabled, it sets the \n             Maximum Modulation Level to be used.\n             If The Modulation algorithm is disabled, it sets the Fixed \n             Modulation Level to be used.\n\t\t\t The range is 1 to 8. 8 is not applicable for units with HW revision A.')
brzaccVLMulticastModulationLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMulticastModulationLevel.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMulticastModulationLevel.setDescription('Applicable to AU/BU only.\n             The modulation level for multicast and broadcast data frames.\n\t\t\t The range is 1 to 8.\n\t\t\t 8 is not applicable for units with HW revision A.')
brzaccVLAvgSNRMemoryFactor = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAvgSNRMemoryFactor.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAvgSNRMemoryFactor.setDescription('Applicable to all units.\n\t\t\t The weight of history in average SNR calculation.\n\t\t\t The higher is the value, the higher is the weight of history.\n             Range: -1 (Disregard History) to 32.')
brzaccVLHardwareRetries = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLHardwareRetries.setStatus('current')
if mibBuilder.loadTexts: brzaccVLHardwareRetries.setDescription('Applicable to all units.\n             Not applicable if Wireless Link Prioritization is enabled.\n             The maximum number of trials to transmit an unacknowledged \n             frame in each Hardware Retrial phase.\n             Range : 1 to 14.')
brzaccVLAdaptiveModulationParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9))
brzaccVLAdaptiveModulationAlgorithmOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdaptiveModulationAlgorithmOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdaptiveModulationAlgorithmOption.setDescription('Applicable to all units. \n             Enables/disables the adaptive modulation level decision mechanism.')
brzaccVLSoftwareRetrySupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSoftwareRetrySupport.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSoftwareRetrySupport.setDescription('Applicable to all units. \n             Read-only for units with version 2.0. \n             Not applicable for units with SW version 3.0 and higher. \n             The status of the Software Retry mechanism. \n             Enabled when the Adaptive Modulation algorithm is enabled and \n             the Burst Mode Option is disabled. Otherwise it is disabled.')
brzaccVLNumOfSoftwareRetries = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNumOfSoftwareRetries.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNumOfSoftwareRetries.setDescription('Applicable to all units. \n             Read-only for units with version 2.0. \n             Not applicable for units with SW version 3.0 and higher. \n             The maximum number of times to use the Software Retry mechanism \n             when it is enabled.')
brzaccVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages.setDescription('Applicable all units.\n\t\t\t The minimum interval between two consecutive AU/BU to SU/RB messages.\n             Range: 1 to 3600 (Sec).')
brzaccVLAdaptiveModulationDecisionThresholds = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("normal", 1), ("high", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdaptiveModulationDecisionThresholds.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdaptiveModulationDecisionThresholds.setDescription('Applicable to all units. \n             Defines the setting of thresholds for the rate decision algorithm. \n             high (2) should typically be used when the SNR is lower than 13dB.')
brzaccVLBurstMode = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 10))
brzaccVLBurstModeOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("blocked", 3), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBurstModeOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLBurstModeOption.setDescription('Applicable to all units.\n             Applicable only if Burst Mode Option is supported by country \n             specific parameters of the Sub Band.  \n             Not applicable if Wireless Link Prioritization is enabled.\n             Enables/disable burst mode operation.\n             In SU/RB with HW Revision B or lower blocked(3) value is returned\n             when Security Mode is Wep , Data Encryption Option\n\t\t\t is Enabled and Burst option is Enabled.\n\t\t\t In AU/BU with HW Revision B or lower blocked(3) value is returned\n\t\t\t when Dfs Option is Enabled and Burst mode is enabled.')
brzaccVLBurstInterval = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBurstInterval.setStatus('current')
if mibBuilder.loadTexts: brzaccVLBurstInterval.setDescription('Applicable to all units.\n             Not applicable if Wireless Link Prioritization is enabled.\n             Burst mode interval in milliseconds.\n             Range: 1 to the maximum value as defined in the country \n             specific parameters of the Sub Band (milliseconds).')
brzaccVLConcatenationParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11))
brzaccVLConcatenationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLConcatenationOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLConcatenationOption.setDescription('Applicable to all units. \n             Defines the Concatenation option.')
brzaccVLConcatenationMaximumNumberOfFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLConcatenationMaximumNumberOfFrames.setStatus('current')
if mibBuilder.loadTexts: brzaccVLConcatenationMaximumNumberOfFrames.setDescription('Applicable to all units with SW version 3.X . \n             Not applicable for version 4.0 and higher.\n             Defines the maximum numbers of frames that can be concatenated.\n             Range:2 to 8 (frames).')
brzaccVLConcatenationMaxFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLConcatenationMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: brzaccVLConcatenationMaxFrameSize.setDescription('Applicable to all units. \n\t\t\t Defines the maximum size of a concatenated frame.\n\t\t\t Range:\n\t\t\t 256 to 2200 (bytes) for BreezeNET-B products BU/RB14 BU/RB28, \n\t\t\t or for AU/SU with HW revision A or B.\n\t\t\t 256 to 4032 (bytes) for AU/SU with HW Revision \n\t\t\t C or higher and BreezeNET-B products BU/RB100.')
brzaccVLSiteSurvey = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11))
brzaccVLAverageReceiveSNR = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAverageReceiveSNR.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAverageReceiveSNR.setDescription('Applicable to SU/RB only. \n             The average Signal to Noise Ratio of received frames.')
brzaccVLTrafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2))
brzaccVLResetTrafficCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLResetTrafficCounters.setStatus('current')
if mibBuilder.loadTexts: brzaccVLResetTrafficCounters.setDescription('Applicable to all units.\n             Resets the traffic counters.')
brzaccVLEthCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 2))
brzaccVLWirelessLinkCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3))
brzaccVLWirelessLinkEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4))
brzaccVLPerModulationLevelCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5))
brzaccVLResetPerModulationLevelCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetCounters", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLResetPerModulationLevelCounters.setStatus('current')
if mibBuilder.loadTexts: brzaccVLResetPerModulationLevelCounters.setDescription('Applicable to all units.\n             Resets the per-Modulation Level counters .')
brzaccVLSUPerModulationLevelCountersTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2), )
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTable.setDescription('Applicable to SU/RB. \n             Per Rate Counters table.')
brzaccVLSUPerModulationLevelCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLSUPerModulationLevelCountersTableIdx"))
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersEntry.setDescription('Applicable to SU/RB. \n             An entry in the Per modulation  Counters table.')
brzaccVLSUPerModulationLevelCountersTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTableIdx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTableIdx.setDescription('Applicable to SU/RB.\n             An index of an entry in the Per modulation level Counters table.')
brzaccVLSUPerModulationLevelCountersApplicableModLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("modLevel-1", 1), ("modLevel-2", 2), ("modLevel-3", 3), ("modLevel-4", 4), ("modLevel-5", 5), ("modLevel-6", 6), ("modLevel-7", 7), ("modLevel-8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersApplicableModLevel.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersApplicableModLevel.setDescription('Applicable to SU/RB.\n             The applicable modulation level of the entry in the Per \n             modulation level Counters table.\n             Modulation Level 8 is not applicable for units with HW revision A.')
brzaccVLSUPerModulationLevelCountersTxSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTxSuccess.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTxSuccess.setDescription('Applicable to SU/RB.\n             The total number of successfully transmitted unicasts at the \n             applicable modulation level.')
brzaccVLSUPerModulationLevelCountersTxFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTxFailed.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTxFailed.setDescription('Applicable to SU/RB.\n             The total number of dropped frames at the applicable \n             Modulation Level.')
brzaccVLAverageModulationLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAverageModulationLevel.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAverageModulationLevel.setDescription('Applicable to SU/RB. \n\t         The average modulation level for successful transmission \n\t         (rounded to nearest integer) since last reset of the \n\t         Per Modulation Level counters. \n\t         Range: 1 to 8.')
brzaccVLTotalRxFramesViaEthernet = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxFramesViaEthernet.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalRxFramesViaEthernet.setDescription('Applicable to all units. \n             Total number of frames received via the Ethernet port.')
brzaccVLTxWirelessToEthernet = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTxWirelessToEthernet.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTxWirelessToEthernet.setDescription('Applicable to all units. \n             Total number of frames transmitted to the Ethernet port.')
brzaccVLTxFramesToWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1))
brzaccVLAUBeaconsToWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAUBeaconsToWireless.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAUBeaconsToWireless.setDescription('Applicable to AU/BU only.\n             The number of beacons transmitted to the wireless media.')
brzaccVLDataAndOtherMngFramesToWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDataAndOtherMngFramesToWireless.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDataAndOtherMngFramesToWireless.setDescription('Applicable to AU/BU only.\n             The number of data and management frames transmitted to the \n             wireless media. The count includes one count for each data \n             frame transmitted successfully (excluding retransmissions).')
brzaccVLTotalTxFramesToWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTxFramesToWireless.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalTxFramesToWireless.setDescription('Applicable to all units. \n             The number of frames transmitted to the wireless media.\n             The count includes one count for each data frame\n             that was transmitted successfully (excluding retransmissions),\n             and also the number of transmitted control and management frames, \n             including beacons.')
brzaccVLTotalTransmittedUnicasts = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTransmittedUnicasts.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalTransmittedUnicasts.setDescription('Applicable to AU/BU only.\t \n             The total number of unicast frames successfully transmitted \n             to the wireless media, excluding retransmissions.')
brzaccVLTotalTransmittedConcatenatedFramesDouble = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTransmittedConcatenatedFramesDouble.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalTransmittedConcatenatedFramesDouble.setDescription('Applicable to all products.\t \n             The total number of double concatenated frames successfully transmitted \n             to the wireless media, excluding retransmissions.')
brzaccVLTotalTransmittedConcatenatedFramesSingle = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTransmittedConcatenatedFramesSingle.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalTransmittedConcatenatedFramesSingle.setDescription('Applicable to all products.\t \n             The total number of double concatenated frames successfully transmitted \n             to the wireless media, excluding retransmissions.')
brzaccVLTotalTransmittedConcatenatedFramesMore = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTransmittedConcatenatedFramesMore.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalTransmittedConcatenatedFramesMore.setDescription('Applicable to all products.\t \n             The total number of concatenated frames with more then two frames successfully \n             transmitted to the wireless media, excluding retransmissions.')
brzaccVLTotalRxFramesFromWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxFramesFromWireless.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalRxFramesFromWireless.setDescription('Applicable to all units. \n             The total number of frames that were received\n             from the wireless media.\n             The count includes data and control and management\n             frames, including beacons received from the AU/BU.\n             The count does not include frames that were discarded\n             internally, bad frames and duplicate frames.')
brzaccVLTotalRetransmittedFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRetransmittedFrames.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalRetransmittedFrames.setDescription('Applicable to all units. \n             The total number of retransmissions of data frames \n             (counts all unsuccessful transmissions/retransmissions).')
brzaccVLFramesDropped = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesDropped.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFramesDropped.setDescription('Applicable to all units. \n             The number of dropped frames.\n             The frames that were retransmitted to the extent\n             of the maximum allowed number of retransmissions\n             without being acknowledged..')
brzaccVLDataFramesSubmittedToBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5))
brzaccVLFramesSubmittedViaHighQueue = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesSubmittedViaHighQueue.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFramesSubmittedViaHighQueue.setDescription('Applicable to all units. \n             Frames submitted to the internal bridge via the High priority queue. \n             for transmission to the wireless media.')
brzaccVLFramesSubmittedViaMidQueue = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesSubmittedViaMidQueue.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFramesSubmittedViaMidQueue.setDescription('Applicable to all units. \n             Frames submitted to the internal bridge via the Mid priority queue \n             for transmission to the wireless media.')
brzaccVLFramesSubmittedViaLowQueue = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesSubmittedViaLowQueue.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFramesSubmittedViaLowQueue.setDescription('Applicable to all units. \n             Frames submitted to the internal bridge via the Low priority queue \n             for transmission to the wireless media.')
brzaccVLTotalNoOfDataFramesSubmitted = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalNoOfDataFramesSubmitted.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalNoOfDataFramesSubmitted.setDescription('Applicable to all units. \n             The total number of data frames submitted to the internal bridge \n             for transmission to the wireless media.')
brzaccVLTotalRecievedDataFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRecievedDataFrames.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalRecievedDataFrames.setDescription('Applicable to all units. \n             The total number of data frames received from the\n             wireless media, including duplicate frames.')
brzaccVLRecievedBadFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRecievedBadFrames.setStatus('current')
if mibBuilder.loadTexts: brzaccVLRecievedBadFrames.setDescription('Applicable to all units. \n             The number of frames received from the wireless\n             media with errors (CRC errors).')
brzaccVLNoOfDuplicateFramesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNoOfDuplicateFramesDiscarded.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNoOfDuplicateFramesDiscarded.setDescription('Applicable to all units. \n             The number of frames discarded due to receiving multiple copies.')
brzaccVLNoOfInternallyDiscardedMirCir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNoOfInternallyDiscardedMirCir.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNoOfInternallyDiscardedMirCir.setDescription('Applicable to all units. \n            The number of data frames received from the Ethernet port that were \n            discarded by the MIR/CIR mechanism either to avoid exceeding the \n            maximum allowed information rate, or when the wireless link conditions \n            do not enable reaching the allowed rate.')
brzaccVLTotalRxConcatenatedFramesDouble = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxConcatenatedFramesDouble.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalRxConcatenatedFramesDouble.setDescription('Applicable to all units.\n            The total number of double concatenated frames received \n            from the wireless media, including duplicate frames.')
brzaccVLTotalRxConcatenatedFramesSingle = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxConcatenatedFramesSingle.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalRxConcatenatedFramesSingle.setDescription('Applicable to all units. \n             The total number of data fast frames single concatenated \n             frames received from the wireless media, including duplicate frames.')
brzaccVLTotalRxConcatenatedFramesMore = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxConcatenatedFramesMore.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalRxConcatenatedFramesMore.setDescription('Applicable to all units. \n             The total number of data fast frames concatenated with more then two \n             frames received from the wireless media, including duplicate frames.')
brzaccVLTxEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1))
brzaccVLDroppedFrameEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDroppedFrameEvents.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDroppedFrameEvents.setDescription('Applicable to all units. \n\t\t\t The number of frames that were dropped because they were retransmitted\n\t\t\t to the maximum allowed number of retransmissions without being \n\t\t\t acknowledged.')
brzaccVLFramesDelayedDueToSwRetry = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesDelayedDueToSwRetry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLFramesDelayedDueToSwRetry.setDescription('Applicable to all units. \n             Not applicable for units with SW Version 3.0 and higher.\n             The number of frames that were delayed because the SW retry \n             algorithm was activated on a previous frame designated for the \n             same recipient.')
brzaccVLUnderrunEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnderrunEvents.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUnderrunEvents.setDescription('Applicable to all units. \n             The number of frames whose transmission was aborted because the rate\n             of submitting frames for transmission exceeded the available \n             transmission capability.')
brzaccVLOthersTxEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLOthersTxEvents.setStatus('current')
if mibBuilder.loadTexts: brzaccVLOthersTxEvents.setDescription('Applicable to all units. \n             The number of Tx events due to problems other than those of \n             the other Tx Events counters.')
brzaccVLTotalTxEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTxEvents.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalTxEvents.setDescription('Applicable to all units. \n             The total number of Tx special events.')
brzaccVLRxEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2))
brzaccVLPhyErrors = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLPhyErrors.setStatus('current')
if mibBuilder.loadTexts: brzaccVLPhyErrors.setDescription('Applicable to all units, only when DFS is enabled. \n             The number of unidentified signals.')
brzaccVLCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCRCErrors.setStatus('current')
if mibBuilder.loadTexts: brzaccVLCRCErrors.setDescription('Applicable to all units. \n             The number of frames received from the wireless media containing \n             CRC errors.')
brzaccVLOverrunEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLOverrunEvents.setStatus('current')
if mibBuilder.loadTexts: brzaccVLOverrunEvents.setDescription('Applicable to all units. \n             The number of frames that were discarded because the receive \n             rate exceeded the processing capability or the capacity of the \n             Ethernet port.')
brzaccVLRxDecryptEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRxDecryptEvents.setStatus('current')
if mibBuilder.loadTexts: brzaccVLRxDecryptEvents.setDescription('Applicable to all units. \n             The number of frames that were not received properly due to a \n             problem in the data decryption mechanism.')
brzaccVLTotalRxEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxEvents.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTotalRxEvents.setDescription('Applicable to all units. \n             The total number of Rx special events.')
brzaccVLMacAddressDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5))
brzaccVLAUMacAddressDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1))
brzaccVLAUAdbResetAllModulationLevelCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUAdbResetAllModulationLevelCounters.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAUAdbResetAllModulationLevelCounters.setDescription('Applicable to AU/BU only. \n\t   To reset all the counters for all SUs/RB in the MAC Address Database.')
brzaccVLAUAdbTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2), )
if mibBuilder.loadTexts: brzaccVLAUAdbTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAUAdbTable.setDescription('Applicable to AU/BU only. \n       AU/BU MAC Address Database table.')
brzaccVLAUAdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLAdbIndex"))
if mibBuilder.loadTexts: brzaccVLAUAdbEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAUAdbEntry.setDescription('Applicable to AU/BU only. \n       An entry in the AU/BU MAC Address Database table.')
brzaccVLAdbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbIndex.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbIndex.setDescription('Applicable to AU/BU only. \n\t   The index of an entry in the AU/BU MAC Address Database table.')
brzaccVLAdbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbMacAddress.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbMacAddress.setDescription('Applicable to AU/BU only. \n\t   The MAC Address of an SU/RB entry in the MAC Address Database \n\t   table.')
brzaccVLAdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("associated", 1), ("authenticated", 2), ("notAuthenticated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbStatus.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbStatus.setDescription('Applicable to AU/BU only. \n\t   The status of the relevant SU/RB.')
brzaccVLAdbSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbSwVersion.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbSwVersion.setDescription('Applicable to AU/BU only. \n\t   The SW version of the relevant SU/RB.')
brzaccVLAdbSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbSNR.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbSNR.setDescription('Applicable to AU/BU only. \n\t   The average Signal to Noise Ratio in dB of frames received by \n\t   the AU/BU from the relevant SU/RB.')
brzaccVLAdbMaxModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("modLevel-1", 1), ("modLevel-2", 2), ("modLevel-3", 3), ("modLevel-4", 4), ("modLevel-5", 5), ("modLevel-6", 6), ("modLevel-7", 7), ("modLevel-8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbMaxModulationLevel.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbMaxModulationLevel.setDescription('Applicable to AU/BU only. \n\t   The value configured in the relevant SU/RB for the Maximum Modulation \n\t   Level parameter.\n\t   Modulation Level 8 is not applicable for units with HW revision A.')
brzaccVLAdbTxFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFramesTotal.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxFramesTotal.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of unicast  frames (excluding retransmissions) \n\t   that were successfully transmitted to the SU/RB over the wireless link.')
brzaccVLAdbDroppedFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbDroppedFramesTotal.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbDroppedFramesTotal.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of frames intended to the SU/RB that \n\t   were dropped because they were retransmitted to the extent \n\t   of the maximum allowed number of retransmissions without \n\t   being acknowledged.')
brzaccVLAdbTxSuccessModLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel1.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel1.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of unicast frames (excluding retransmissions) \n\t   that were successfully transmitted to the SU/RB over the wireless link \n\t   using modulation level 1.')
brzaccVLAdbTxSuccessModLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel2.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel2.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of unicast frames (excluding retransmissions) \n\t   that were successfully transmitted to the SU/RB over the wireless link \n\t   using modulation level 2.')
brzaccVLAdbTxSuccessModLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel3.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel3.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of unicast frames (excluding retransmissions) \n\t   that were successfully transmitted to the SU/BU over the wireless link \n\t   using modulation level 3.')
brzaccVLAdbTxSuccessModLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel4.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel4.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of unicast frames (excluding retransmissions) \n\t   that were successfully transmitted to the SU/RB over the wireless link \n\t   using modulation level 4.')
brzaccVLAdbTxSuccessModLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel5.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel5.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of unicast frames (excluding retransmissions) \n\t   that were successfully transmitted to the SU/RB over the wireless link \n\t   using modulation level 5.')
brzaccVLAdbTxSuccessModLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel6.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel6.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of unicast frames (excluding retransmissions) \n\t   that were successfully transmitted to the SU/BU over the wireless link \n\t   using modulation level 6.')
brzaccVLAdbTxSuccessModLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel7.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel7.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of unicast frames (excluding retransmissions) \n\t   that were successfully transmitted to the SU/RB over the wireless link \n\t   using modulation level 7.')
brzaccVLAdbTxSuccessModLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel8.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel8.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of unicast frames (excluding retransmissions) \n\t   that were successfully transmitted to the SU/RB over the wireless link \n\t   using modulation level 8.\n\t   Not applicable for units with HW revision A.')
brzaccVLAdbTxFailedModLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel1.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel1.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of failures to successfully\n\t   transmit unicast frames intended to the SU/RB using modulation level 1.')
brzaccVLAdbTxFailedModLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel2.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel2.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of failures to successfully\n\t   transmit unicast frames intended to the SU/RB using modulation level 2.')
brzaccVLAdbTxFailedModLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel3.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel3.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of failures to successfully\n\t   transmit unicast frames intended to the SU/RB using modulation level 3.')
brzaccVLAdbTxFailedModLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel4.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel4.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of failures to successfully\n\t   transmit unicast frames intended to the SU/RB using modulation level 4.')
brzaccVLAdbTxFailedModLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel5.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel5.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of failures to successfully\n\t   transmit unicast frames intended to the SU/RB using modulation level 5.')
brzaccVLAdbTxFailedModLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel6.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel6.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of failures to successfully\n\t   transmit unicast frames intended to the SU/RB using modulation level 6.')
brzaccVLAdbTxFailedModLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel7.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel7.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of failures to successfully\n\t   transmit unicast frames intended to the SU/RB using modulation level 7.')
brzaccVLAdbTxFailedModLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel8.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel8.setDescription('Applicable to AU/BU only. \n\t   Counts the total number of failures to successfully\n\t   transmit unicast frames intended to the SU/RB using modulation level 8.\n\t   Not applicable for units with HW revision A.')
brzaccVLAdbCirTx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCirTx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbCirTx.setDescription('Applicable to AU Only. \n    Not applicable to BreezeNET-B products. Read-only. \n    The value configured in the relevant SU for the CIR: \n    SU to AU parameter.')
brzaccVLAdbMirTx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbMirTx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbMirTx.setDescription('Applicable to AU/BU only. \n    The value configured in the relevant SU/RB for the MIR: \n    SU/RB to AU/BU parameter.')
brzaccVLAdbCirRx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCirRx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbCirRx.setDescription('Applicable to AU Only.\n    Not applicable to BreezeNET-B products.\n    The value configured in the relevant SU for the CIR: \n    AU to SU parameter.')
brzaccVLAdbMirRx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbMirRx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbMirRx.setDescription('Applicable to AU/BU only. \n    The value configured in the relevant SU/RB for the MIR: \n    AU/BU to SU/RB parameter.')
brzaccVLAdbCirMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCirMaxDelay.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbCirMaxDelay.setDescription('Applicable to AU Only. \n    Not applicable to BreezeNET-B products.\n    The value configured in the relevant SU for the CIR Maximum \n    Delay parameter.')
brzaccVLAdbDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("below-2-Km", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbDistance.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbDistance.setDescription('Applicable to AU/BU Only.  \n    The distance between the SU/RB and the AU/BU (In Kilometers).')
brzaccVLAdbHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("hwRevisionA", 1), ("hwRevisionB", 2), ("hwRevisionC", 3), ("hwRevisionD", 4), ("hwRevisionE", 5), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbHwRevision.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbHwRevision.setDescription('Applicable to AU/BU Only.  \n    The SU/RB HW Revision.')
brzaccVLAdbCpldVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCpldVer.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbCpldVer.setDescription('Applicable to AU/BU Only.  \n    The SU/RB CPLD Version.')
brzaccVLAdbCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCountryCode.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbCountryCode.setDescription('Applicable to AU/BU Only.  \n    The SU/RB supported country code.')
brzaccVLAdbBootVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbBootVer.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbBootVer.setDescription('Applicable to AU/BU Only.  \n    The SU/RB Boot Version.')
brzaccVLAdbAtpcOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbAtpcOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbAtpcOption.setDescription('Applicable to AU/BU Only.  \n    The SU/RB ATPC option configuration.')
brzaccVLAdbAdapModOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbAdapModOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbAdapModOption.setDescription('Applicable to AU/BU Only.  \n    The SU/RB adaptive modulation option configuration.')
brzaccVLAdbBurstModeOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbBurstModeOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbBurstModeOption.setDescription('Applicable to AU/BU Only.  \n    The SU/RB burst mode option configuration.')
brzaccVLAdbConcatenationOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbConcatenationOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbConcatenationOption.setDescription('Applicable to AU/BU Only.  \n    The SU/RB concatenation option configuration.')
brzaccVLAdbSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("wep", 1), ("aes", 2), ("fips197", 3), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbSecurityMode.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbSecurityMode.setDescription('Applicable to AU/BU Only.  \n    The SU/RB security mode configuration.')
brzaccVLAdbAuthOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbAuthOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbAuthOption.setDescription('Applicable to AU/BU Only.  \n    The SU/RB authentication algorithm configuration.')
brzaccVLAdbDataEncyptOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbDataEncyptOption.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbDataEncyptOption.setDescription('Applicable to AU/BU Only.  \n    The SU/RB data encryption option configuration.')
brzaccVLAdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbAge.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbAge.setDescription('Applicable to AU/BU only. \n\t   The time since any packet was received from the relevant SU/RB.')
brzaccVLAdbUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbUnitName.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAdbUnitName.setDescription('Applicable to AU/BU only. \n\t   The unit name of the relevant SU/RB.')
brzaccVLUpLinkQualityIndicator = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6))
brzaccVLMeasureUpLinkQualityIndicator = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMeasureUpLinkQualityIndicator.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMeasureUpLinkQualityIndicator.setDescription('Applicable to SU/RB. \n\t   Starts calculation of LQI. \n\t   The calculation will be for a period of 10 seconds.')
brzaccVLReadUpLinkQualityIndicator = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLReadUpLinkQualityIndicator.setStatus('current')
if mibBuilder.loadTexts: brzaccVLReadUpLinkQualityIndicator.setDescription('Applicable to SU/RB. \n\t   The results of the last LQI calculation. \n\t   Range: 1 to 8.')
brzaccVLUpLinkQualityIndicatorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullTest", 1), ("limitedTest", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUpLinkQualityIndicatorStatus.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUpLinkQualityIndicatorStatus.setDescription('Applicable to SU/RB Only. \n\t   Indicates the test conditions. \n\t   fullTest means that there are no limitations \n\t   on the range of available modulation levels, and that all modulation levels \n\t   from 1 to 8 can be used. \n\t   limitedTest indicates that the results may not indicate the true quality since \n\t   the available range is limited - by HW (HW Revision A), \n\t   or by the applicable parameters in the country code, \n\t   or by the configurable Maximum Modulation Level parameter.')
brzaccVLMacPinpoint = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7))
brzaccVLMacPinpointTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1), )
if mibBuilder.loadTexts: brzaccVLMacPinpointTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMacPinpointTable.setDescription('Applicable to AU/BU only.\n                      A table that contains information about wireless device\n                      used by a certain Ethernet station in order to\n                      connect to the wireless network')
brzaccVLMacPinpointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "mptEthernetStationMACAddress"))
if mibBuilder.loadTexts: brzaccVLMacPinpointEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLMacPinpointEntry.setDescription('Applicable to AU/BU only. An entry in the MAC Pinpoint Table.\n                      Each entry contains an Ethernet station MAC address and the MAC\n                      address of the wireless device used to connect it to the wireless \n                      network')
mptEthernetStationMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptEthernetStationMACAddress.setStatus('current')
if mibBuilder.loadTexts: mptEthernetStationMACAddress.setDescription('Applicable to AU/BU only.\n                      The MAC address of the Ethernet station. It is used as an \n                      index in the MAC Pinpoint Table.')
mptUnitMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptUnitMACAddress.setStatus('current')
if mibBuilder.loadTexts: mptUnitMACAddress.setDescription('Applicable to AU/BU only. The MAC address of the wireless \n                      device used by the station with the MAC Address from the \n                      index in order to access the wireless network.')
brzaccVLDrapGatewaysTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8), )
if mibBuilder.loadTexts: brzaccVLDrapGatewaysTable.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDrapGatewaysTable.setDescription('This table provides information about Gateways supporting DRAP that are\n\t\tregistered at the AU')
brzaccVLDrapGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLDrapGatewayIndex"))
if mibBuilder.loadTexts: brzaccVLDrapGatewayEntry.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDrapGatewayEntry.setDescription('A Drap Gateway Entry.')
brzaccVLDrapGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapGatewayIndex.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDrapGatewayIndex.setDescription("Gateway Entry's Index")
brzaccVLDrapGatewayIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapGatewayIP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDrapGatewayIP.setDescription('The IP address of the Gateway')
brzaccVLDrapGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 11, 255))).clone(namedValues=NamedValues(("vgDataVoice", 4), ("vgData1Voice1", 5), ("vgData4Voice2", 6), ("vgDataVoice2", 7), ("ngData4Wireless", 11), ("vgUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapGatewayType.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDrapGatewayType.setDescription('The Gateway type')
brzaccVLDrapGatewayNoOfActiveVoiceCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapGatewayNoOfActiveVoiceCalls.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDrapGatewayNoOfActiveVoiceCalls.setDescription('The current number of active voice calls handled by the Gateway')
brzaccVLTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14))
brzaccVLTrapSUMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapSUMacAddr.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTrapSUMacAddr.setDescription('Applicable to AU/BU only.\n     SU/RB MAC Address.')
brzaccVLTrapText = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapText.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTrapText.setDescription('Textual string for future use.')
brzaccVLTrapToggle = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapToggle.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTrapToggle.setDescription('Applicable to all units.\n     An On/Off toggle status.')
brzaccVLTrapParameterChanged = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("cirOrMir", 1), ("ipFilter", 2), ("vlan", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapParameterChanged.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTrapParameterChanged.setDescription('Applicable to all units.\n     A modification to one of the parameters related to CIR/MIR,  \n     IP Filtering or VLAN.')
brzaccVLTrapAccessRights = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notLoggedIn", 1), ("readOnly", 2), ("installer", 3), ("administrator", 4), ("factory", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapAccessRights.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTrapAccessRights.setDescription('Applicable to all units.\n     The access rights used for login.')
brzaccVLTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("telnetLogin", 3), ("telnetLogout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapLog.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTrapLog.setDescription('Applicable to all units.\n     Login or logout to the Monitor program via Telnet.')
brzaccVLTrapTelnetUserIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapTelnetUserIpAddress.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTrapTelnetUserIpAddress.setDescription('Applicable to all units.\n     The IP address of a Telnet user.')
brzaccVLTrapRTx = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapRTx.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTrapRTx.setDescription('Applicable to AU/BU only. \n     Retransmissions as a percentage of total transmissions.')
brzaccVLTrapFtpOrTftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("successful", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapFtpOrTftpStatus.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTrapFtpOrTftpStatus.setDescription('Applicable to all units.\n     The status of the last FTP/TFTP loading procedure.')
brzaccVLDFSMoveFreq = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSMoveFreq.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSMoveFreq.setDescription('Applicable to AU/BU with HW revision B and lower \n     (for units with HW revision C and higher replaced by \n     brzaccVLTrapDFSMoveFreq New to support a resolution of 0.5 MHz). \n     The new frequency in MHz after detecting radar on a previous channel.')
brzaccVLDFSMoveFreqNew = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSMoveFreqNew.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSMoveFreqNew.setDescription('Applicable to AU/BU. \n     The new frequency in MHz after detecting radar on a previous channel. \n     (Replaces brzaccVLDFSMoveFreq to support a resolution of 0.5 MHz for \n     units with HW revision C and higher).')
brzaccVLEthBroadcastThresholdExceeded = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLEthBroadcastThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: brzaccVLEthBroadcastThresholdExceeded.setDescription('Applicable to all units. \n    The number of packets that are dropped by the ethernet broadcast/multicast limiter.')
brzaccVLTrapSubscriberType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6, 14, 24, 28, 54, 100))).clone(namedValues=NamedValues(("unknownSubscriberType", 0), ("su-3", 3), ("su-6", 6), ("rb-14", 14), ("su-24", 24), ("rb-28", 28), ("su-54", 54), ("rb-100", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapSubscriberType.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTrapSubscriberType.setDescription('Applicable to AUS only.\n    The type of subscriber that was rejected by AUS')
brzaccVLTrapMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapMACAddress.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTrapMACAddress.setDescription('Applicable to BU/RB only.\n    The MAC address of the BNET B unit whose type has been changed')
brzaccVLNewUnitTypeTrap = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bu", 1), ("rb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewUnitTypeTrap.setStatus('current')
if mibBuilder.loadTexts: brzaccVLNewUnitTypeTrap.setDescription('Applicable to BU/RB only.\n    The new type of the BNET B unit.')
brzaccVLTrapSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapSWVersion.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTrapSWVersion.setDescription('The SW version of the SU that tries to associate \n    with a station that has Wireless Link Prioritization Enabled')
brzaccVLSUassociatedAUTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 2)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"))
if mibBuilder.loadTexts: brzaccVLSUassociatedAUTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSUassociatedAUTRAP.setDescription('An AU/BU trap indicating a new association with an SU/RB.')
brzaccVLAUdisassociatedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 3)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"))
if mibBuilder.loadTexts: brzaccVLAUdisassociatedTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAUdisassociatedTRAP.setDescription('An AU/BU trap indicating that an SU/RB has been disassociated \n         from the AU.\n         The AU/BU decides that an SU/RB has been disassociated from it and remove it\n         from the ADB after receiving from another AU/BU a SNAP frame with the SU/RB \n         MAC address.\n         The SNAP frame indicating a network topology change where the SU/RB has \n         associated with another AU/BU will be received if both AUs/BUs are \n         connected to the same Ethernet backbone.')
brzaccVLAUagingTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 4)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"))
if mibBuilder.loadTexts: brzaccVLAUagingTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAUagingTRAP.setDescription('An AU/BU trap indicating that the unit association was aged out\n\t     and removed from the Association database following its failure\n\t     to acknowledge a specified number of consecutive frames.')
brzaccVLSUassociatedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 6)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLAssociatedAU"))
if mibBuilder.loadTexts: brzaccVLSUassociatedTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLSUassociatedTRAP.setDescription('An SU/RB trap indicating association with an AU/BU. \n         In addition to the MAC address information of the AU/BU, the \n         trap also includes information on the average SNR of frames \n         received from the AU/BU.')
brzaccVLAUwirelessQualityTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 20)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapToggle"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapRTx"))
if mibBuilder.loadTexts: brzaccVLAUwirelessQualityTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAUwirelessQualityTRAP.setDescription('An AU/BU trap, indicating that the quality of the wireless \n         link (retransmissions rate) has changed and dropped below (Off) or increased  \n         above (On) a threshold , defined by the *brzaccVLWirelessTrapThreshold. \n         The threshold for AU/BU is a percentage of retransmissions.')
brzaccVLPowerUpFromReset = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 101)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLUnitMacAddress"))
if mibBuilder.loadTexts: brzaccVLPowerUpFromReset.setStatus('current')
if mibBuilder.loadTexts: brzaccVLPowerUpFromReset.setDescription('An AU/BU trap indicating power up after Reset.')
brzaccVLTelnetStatusTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 102)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapLog"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapAccessRights"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapTelnetUserIpAddress"))
if mibBuilder.loadTexts: brzaccVLTelnetStatusTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLTelnetStatusTRAP.setDescription('Applicable to all units.\n         A trap indicating that a log-in or log-out has been performed \n         via Telnet. Includes the log-in access \n         right and the IP address of the PC performing Telnet.')
brzaccVLParameterChangedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 103)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapParameterChanged"))
if mibBuilder.loadTexts: brzaccVLParameterChangedTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLParameterChangedTRAP.setDescription('Applicable to all units. A trap indicating a change in a CIR/MIR, IP Filter \n         or VLAN parameter.')
brzaccVLLoadingStatusTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 104)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapFtpOrTftpStatus"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLUnitMacAddress"))
if mibBuilder.loadTexts: brzaccVLLoadingStatusTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLLoadingStatusTRAP.setDescription('Applicable to all units.\n         A trap indicating that last FTP/TFTP loading process has been \n         finished successfully or failed. ')
brzaccVLPromiscuousModeTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 105)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapToggle"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLUnitMacAddress"))
if mibBuilder.loadTexts: brzaccVLPromiscuousModeTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLPromiscuousModeTRAP.setDescription('An AU/BU trap, indicating that the AU/BU In (On) Promiscuous Mode or \n         out (Off) Promiscuous Mode.')
brzaccVLDFSRadarDetecetedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 106))
if mibBuilder.loadTexts: brzaccVLDFSRadarDetecetedTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSRadarDetecetedTRAP.setDescription('DFS: Applicable to AU/BU only.\n         A trap indicating that a radar was detected. ')
brzaccVLDFSFrequcnyTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 107)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLDFSMoveFreq"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLDFSMoveFreqNew"))
if mibBuilder.loadTexts: brzaccVLDFSFrequcnyTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSFrequcnyTRAP.setDescription('Applicable to AU/BU only.\n         A trap indicating that the unit moved to a new frequency. ')
brzaccVLDFSNoFreeChannelsExistsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 108))
if mibBuilder.loadTexts: brzaccVLDFSNoFreeChannelsExistsTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLDFSNoFreeChannelsExistsTRAP.setDescription('Applicable to AU/BU only.\n         A trap indicating that a radar was detected and there is no \n         free channel. ')
brzaccVLEthBroadcastMulticatLimiterTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 109)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLEthBroadcastThresholdExceeded"))
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticatLimiterTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticatLimiterTRAP.setDescription('Applicable to all units. The trap is send if the \n\t\tethernet broadcast filter threshold is exceeded\n\t\tand it contains the number of dropped packets.')
brzaccVLAUSUnsupportedSubscriberTypeTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 110)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSubscriberType"))
if mibBuilder.loadTexts: brzaccVLAUSUnsupportedSubscriberTypeTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLAUSUnsupportedSubscriberTypeTRAP.setDescription('Applicable to AUS only.\n\t\tThis trap is generated when a subscriber with unsupported type tries to associate to AUS.\n\t\tThe AUS supports only SU-3 and SU-6.\n\t\tThe first variable of the trap is the subscriber MAC Address.\n\t\tThe second variable is the type of subscriber')
brzaccVLUnitTypeChangedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 111)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapMACAddress"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLNewUnitTypeTrap"))
if mibBuilder.loadTexts: brzaccVLUnitTypeChangedTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLUnitTypeChangedTRAP.setDescription('Applicable to BU/RB only.\n\t\tThis trap is generated when the user change the type of the BreezeNET B unit.\n\t\tThe RB can be converted in BU or vice versa.\n\t\tThe first variable of the trap is the unit MAC Address.\n\t\tThe second variable is the new type of the unit')
brzaccVLWLPrioritizationNotSupportedBySUTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 112)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSWVersion"))
if mibBuilder.loadTexts: brzaccVLWLPrioritizationNotSupportedBySUTRAP.setStatus('current')
if mibBuilder.loadTexts: brzaccVLWLPrioritizationNotSupportedBySUTRAP.setDescription('Applicable to AU/BU only.\n         This trap is generated when an SU/RB with a SW version below 4.0 \n         that does not support Wireless Link Prioritization is associated \n         with an AU/BU with thw Wireless Link Prioritization Option enabled. \n\t\t The first variable of the trap is the SU/RB MAC Address.\n\t\t The second variable is the SW version of the SU/RB')
mibBuilder.exportSymbols("ALVARION-DOT11-WLAN-MIB", brzaccVLVlanRelayingTableIdx=brzaccVLVlanRelayingTableIdx, brzaccVLUpLinkQualityIndicator=brzaccVLUpLinkQualityIndicator, brzaccVLToSPrioritizationOption=brzaccVLToSPrioritizationOption, brzaccVLMinimumSNRLevel=brzaccVLMinimumSNRLevel, brzaccVLCurrentNumOfAssociations=brzaccVLCurrentNumOfAssociations, brzaccVLAdbAdapModOption=brzaccVLAdbAdapModOption, brzaccVLDisassociate=brzaccVLDisassociate, brzaccVLTotalRetransmittedFrames=brzaccVLTotalRetransmittedFrames, brzaccVLNeighborAuAssocLoadStatus=brzaccVLNeighborAuAssocLoadStatus, brzaccVLFramesDropped=brzaccVLFramesDropped, brzaccVLAdbTxSuccessModLevel7=brzaccVLAdbTxSuccessModLevel7, brzaccVLNeighborAuAtpcOption=brzaccVLNeighborAuAtpcOption, brzaccVLDFSMaximumNumberOfDetectionsInAssessmentPeriod=brzaccVLDFSMaximumNumberOfDetectionsInAssessmentPeriod, brzaccVLMacAddressDenyListTableIdx=brzaccVLMacAddressDenyListTableIdx, brzaccVLTrapText=brzaccVLTrapText, brzaccVLAvgSNRMemoryFactor=brzaccVLAvgSNRMemoryFactor, brzaccVLDataFramesSubmittedToBridge=brzaccVLDataFramesSubmittedToBridge, brzaccVLAdbStatus=brzaccVLAdbStatus, brzaccVLShadowVersionFileName=brzaccVLShadowVersionFileName, brzaccVLQinQProviderVlanID=brzaccVLQinQProviderVlanID, brzaccVLAUdisassociatedTRAP=brzaccVLAUdisassociatedTRAP, brzaccVLAuthenticationEncryptionSupport=brzaccVLAuthenticationEncryptionSupport, brzaccVLFlashMemoryControl=brzaccVLFlashMemoryControl, brzaccVLMacPinpointEntry=brzaccVLMacPinpointEntry, brzaccVLRunTimeESSID=brzaccVLRunTimeESSID, brzaccVLToSPrecedenceThreshold=brzaccVLToSPrecedenceThreshold, brzaccVLMirUplink=brzaccVLMirUplink, brzaccVLDrapSupport=brzaccVLDrapSupport, brzaccVLTcpPortRangeEntry=brzaccVLTcpPortRangeEntry, brzaccVLRunningSoftwareVersion=brzaccVLRunningSoftwareVersion, brzaccVLAdbMirRx=brzaccVLAdbMirRx, brzaccVLTransmitPower=brzaccVLTransmitPower, brzNetB_RB_B28=brzNetB_RB_B28, brzAccess4900_AU_SA=brzAccess4900_AU_SA, brzaccVLAverageReceiveSNR=brzaccVLAverageReceiveSNR, brzaccVLReadUpLinkQualityIndicator=brzaccVLReadUpLinkQualityIndicator, brzaccVLDrapGatewaysTable=brzaccVLDrapGatewaysTable, brzaccVLMacAddressDenyListId=brzaccVLMacAddressDenyListId, brzaccVLResetSpectrumCounters=brzaccVLResetSpectrumCounters, brzaccVLPPPoEBroadcastOverrideFilter=brzaccVLPPPoEBroadcastOverrideFilter, brzaccVLESSID=brzaccVLESSID, brzaccVLTcpPortRangeEnd=brzaccVLTcpPortRangeEnd, brzaccVLAdbTxFailedModLevel6=brzaccVLAdbTxFailedModLevel6, brzaccVLBestAuSupport=brzaccVLBestAuSupport, brzaccVLAdbUnitName=brzaccVLAdbUnitName, brzaccVLTxControl=brzaccVLTxControl, brzaccVLMaximumBurstDuration=brzaccVLMaximumBurstDuration, brzaccVLTimeSinceLastReset=brzaccVLTimeSinceLastReset, brzaccVLTotalNoOfDataFramesSubmitted=brzaccVLTotalNoOfDataFramesSubmitted, brzaccVLDFSMoveFreq=brzaccVLDFSMoveFreq, brzaccVLDrap=brzaccVLDrap, brzaccVLEthBroadcastFiltering=brzaccVLEthBroadcastFiltering, brzaccVLSpectrumAnalysisChannelScanPeriod=brzaccVLSpectrumAnalysisChannelScanPeriod, brzaccVLNeighborAuLearnCountryCodeBySU=brzaccVLNeighborAuLearnCountryCodeBySU, brzaccVLDrapGatewayEntry=brzaccVLDrapGatewayEntry, brzaccVLApClientIpAddress=brzaccVLApClientIpAddress, brzaccVLVLANTrafficPriority=brzaccVLVLANTrafficPriority, brzaccVLAdbBurstModeOption=brzaccVLAdbBurstModeOption, brzaccVLConcatenationMaxFrameSize=brzaccVLConcatenationMaxFrameSize, brzaccVLAdbTxSuccessModLevel2=brzaccVLAdbTxSuccessModLevel2, brzaccVLUdpPortRangeIdx=brzaccVLUdpPortRangeIdx, brzaccVLVlanIdForwarding=brzaccVLVlanIdForwarding, brzaccVLDeleteOneTrapAddr=brzaccVLDeleteOneTrapAddr, brzaccVLPerformanceParams=brzaccVLPerformanceParams, brzaccVLDataAndOtherMngFramesToWireless=brzaccVLDataAndOtherMngFramesToWireless, brzaccVLIpFilterRange=brzaccVLIpFilterRange, brzaccVLAirInterface=brzaccVLAirInterface, brzaccVLAdbIndex=brzaccVLAdbIndex, brzaccVLFairnessFactor=brzaccVLFairnessFactor, brzaccVLOperatorESSID=brzaccVLOperatorESSID, brzaccVLCountryCodeLearningBySU=brzaccVLCountryCodeLearningBySU, brzaccVLUnitTypeChangedTRAP=brzaccVLUnitTypeChangedTRAP, brzaccVLCountryCode=brzaccVLCountryCode, brzaccVLSpectrumAnalysisInformationTableIdx=brzaccVLSpectrumAnalysisInformationTableIdx, brzaccVLUnitBootVersion=brzaccVLUnitBootVersion, brzaccVLAutoSubBandFrequencySubsetBandIdx=brzaccVLAutoSubBandFrequencySubsetBandIdx, brzaccVLSpectrumAnalysisScanCycles=brzaccVLSpectrumAnalysisScanCycles, brzaccVLUnicastRelaying=brzaccVLUnicastRelaying, brzaccVLSpectrumAnalysisStatus=brzaccVLSpectrumAnalysisStatus, brzaccVLMacAddressDenyListEntry=brzaccVLMacAddressDenyListEntry, brzaccVLDrapTTL=brzaccVLDrapTTL, brzaccVLAUBurstDurationLowPriority=brzaccVLAUBurstDurationLowPriority, brzaccVLTcpPortRangeAdd=brzaccVLTcpPortRangeAdd, brzaccVLFramesDelayedDueToSwRetry=brzaccVLFramesDelayedDueToSwRetry, brzaccVLAdbSwVersion=brzaccVLAdbSwVersion, brzaccVLAdbTxFailedModLevel7=brzaccVLAdbTxFailedModLevel7, brzaccVLMulticastModulationLevel=brzaccVLMulticastModulationLevel, brzaccVLDisassociateSuByMacAddress=brzaccVLDisassociateSuByMacAddress, brzaccVLCurrentFrequencySubsetTable=brzaccVLCurrentFrequencySubsetTable, brzAccessVLAU_SA=brzAccessVLAU_SA, brzaccVLSelectSubBandIndex=brzaccVLSelectSubBandIndex, brzaccVLAutoSubBandFrequencySubsetEntry=brzaccVLAutoSubBandFrequencySubsetEntry, brzaccVLPerSuDistanceLearning=brzaccVLPerSuDistanceLearning, brzaccVLConcatenationParameters=brzaccVLConcatenationParameters, brzaccVLNwMngFilter=brzaccVLNwMngFilter, brzaccVLTxWirelessToEthernet=brzaccVLTxWirelessToEthernet, brzaccVLSUPerModulationLevelCountersTxSuccess=brzaccVLSUPerModulationLevelCountersTxSuccess, brzaccVLUseDhcp=brzaccVLUseDhcp, brzaccVLTraps=brzaccVLTraps, brzaccVLAdbTxSuccessModLevel4=brzaccVLAdbTxSuccessModLevel4, brzNetB_BU_B28=brzNetB_BU_B28, brzaccVLAUagingTRAP=brzaccVLAUagingTRAP, brzaccVLAuthenticationPromiscuousMode=brzaccVLAuthenticationPromiscuousMode, brzaccVLMngIpRangeFlag=brzaccVLMngIpRangeFlag, brzaccVLDFSChannelReuseParameters=brzaccVLDFSChannelReuseParameters, brzaccVLFTPConfigurationFileSourceDir=brzaccVLFTPConfigurationFileSourceDir, brzaccVLSiteSurvey=brzaccVLSiteSurvey, brzNetB_RB_B14=brzNetB_RB_B14, brzaccVLBridgeParameters=brzaccVLBridgeParameters, brzaccVLVlanID=brzaccVLVlanID, brzaccVLApplicableModulationLevel=brzaccVLApplicableModulationLevel, brzaccVLNwMngIpTableIdx=brzaccVLNwMngIpTableIdx, brzaccVLNeighborAuAdapModOption=brzaccVLNeighborAuAdapModOption, brzaccVLTotalRxConcatenatedFramesSingle=brzaccVLTotalRxConcatenatedFramesSingle, brzaccVLTxFramesToWireless=brzaccVLTxFramesToWireless, brzaccVLAdbCirRx=brzaccVLAdbCirRx, brzaccVLEventLogDestinationDir=brzaccVLEventLogDestinationDir, brzaccVLUdpPortRangeStart=brzaccVLUdpPortRangeStart, brzaccVLCurrentEthernetPortState=brzaccVLCurrentEthernetPortState, brzaccVLSetDefaults=brzaccVLSetDefaults, brzaccVLDeltaFromMinSNRLevel=brzaccVLDeltaFromMinSNRLevel, brzaccVLAUDefinedFrequency=brzaccVLAUDefinedFrequency, brzaccVLDataEncryptionSupport=brzaccVLDataEncryptionSupport, brzaccVLMngIpRangeMask=brzaccVLMngIpRangeMask, brzaccVLTrapLog=brzaccVLTrapLog, brzaccVLAutoSubBandFrequencySubsetFrequencyIdx=brzaccVLAutoSubBandFrequencySubsetFrequencyIdx, brzaccVLDeleteAllNwIpAddrs=brzaccVLDeleteAllNwIpAddrs, brzAccessVLSU_6_1D=brzAccessVLSU_6_1D, brzaccVLAdbCirMaxDelay=brzaccVLAdbCirMaxDelay, brzaccVLEthBroadcastMulticatLimiterTRAP=brzaccVLEthBroadcastMulticatLimiterTRAP, brzaccVLIpFilterEntry=brzaccVLIpFilterEntry, brzaccVLAdbBootVer=brzaccVLAdbBootVer, brzaccVLARPBroadcastOverrideFilter=brzaccVLARPBroadcastOverrideFilter, brzaccVLHWRetriesHighPriority=brzaccVLHWRetriesHighPriority, brzaccVLAccessToDHCP=brzaccVLAccessToDHCP, brzaccVLFeatureUpgrade=brzaccVLFeatureUpgrade, brzaccVLESSIDParameters=brzaccVLESSIDParameters, brzaccVLVLANForwarding=brzaccVLVLANForwarding, brzaccVLMaxContentionWindow=brzaccVLMaxContentionWindow, brzaccVLAdbAtpcOption=brzaccVLAdbAtpcOption, brzaccVLNewUnitTypeTrap=brzaccVLNewUnitTypeTrap, brzaccVLFTPServerIpAddress=brzaccVLFTPServerIpAddress, brzaccVLKey4=brzaccVLKey4, brzaccVLCirDownlink=brzaccVLCirDownlink, brzaccVLNumOfSoftwareRetries=brzaccVLNumOfSoftwareRetries, brzaccVLMaxTxPower=brzaccVLMaxTxPower, brzaccVLMngIpRangesTable=brzaccVLMngIpRangesTable, brzaccVLCountryDependentParameterTableIdx=brzaccVLCountryDependentParameterTableIdx, brzaccVLTrapSWVersion=brzaccVLTrapSWVersion, brzaccVLEthBroadcastMulticastLimiterOption=brzaccVLEthBroadcastMulticastLimiterOption, brzaccVLUdpPortRangeEntry=brzaccVLUdpPortRangeEntry, brzaccVLUnitControl=brzaccVLUnitControl, brzaccVLFrequencySubsetActive=brzaccVLFrequencySubsetActive, brzaccVLCellDistanceParameters=brzaccVLCellDistanceParameters, brzaccVLTotalTransmittedConcatenatedFramesDouble=brzaccVLTotalTransmittedConcatenatedFramesDouble, brzaccVLNumberOfMacAddressesInDenyList=brzaccVLNumberOfMacAddressesInDenyList, brzaccVLSpectrumAnalysisInformationChannel=brzaccVLSpectrumAnalysisInformationChannel, brzaccVLRxEvents=brzaccVLRxEvents, brzaccVLBurstModeSupport=brzaccVLBurstModeSupport, brzaccVLDFSRadarActivityAssessmentPeriod=brzaccVLDFSRadarActivityAssessmentPeriod, brzaccVLSpectrumAnalysisInformationSignalWidth=brzaccVLSpectrumAnalysisInformationSignalWidth, brzaccVLCurrentFrequencySubsetEntry=brzaccVLCurrentFrequencySubsetEntry, brzaccVLAdbDroppedFramesTotal=brzaccVLAdbDroppedFramesTotal, brzaccVLTotalTxEvents=brzaccVLTotalTxEvents, brzaccVLSUPerModulationLevelCountersApplicableModLevel=brzaccVLSUPerModulationLevelCountersApplicableModLevel, brzaccVLRegulationMaxEIRP=brzaccVLRegulationMaxEIRP, brzNetB_BU_B14=brzNetB_BU_B14, brzaccVLAutoSubBandFrequencySubsetFrequency=brzaccVLAutoSubBandFrequencySubsetFrequency, brzaccVLDataEncryptionOption=brzaccVLDataEncryptionOption, brzaccVLSpectrumAnalysisInformationOFDMFrames=brzaccVLSpectrumAnalysisInformationOFDMFrames, brzaccVLVlanRelaying=brzaccVLVlanRelaying, brzaccVLVlanForwardingSupport=brzaccVLVlanForwardingSupport, brzaccVLEthBroadcastMulticastLimiterThreshold=brzaccVLEthBroadcastMulticastLimiterThreshold, brzaccVLPhyErrors=brzaccVLPhyErrors, brzaccVLExecuteFTPConfigurationFileLoading=brzaccVLExecuteFTPConfigurationFileLoading, brzAccessVLSU_3_1D=brzAccessVLSU_3_1D, brzaccVLDHCPBroadcastOverrideFilter=brzaccVLDHCPBroadcastOverrideFilter, brzaccVLPowerLevelSteps=brzaccVLPowerLevelSteps, brzaccVLTotalTransmittedUnicasts=brzaccVLTotalTransmittedUnicasts, brzaccVLAdbMirTx=brzaccVLAdbMirTx, brzaccVLMaximumTransmitPowerIdx=brzaccVLMaximumTransmitPowerIdx, brzaccVLAuthenticationAlgorithm=brzaccVLAuthenticationAlgorithm, brzaccVLTrapTelnetUserIpAddress=brzaccVLTrapTelnetUserIpAddress, brzaccVLNwMngIpAddress=brzaccVLNwMngIpAddress, brzaccVLEthCounters=brzaccVLEthCounters, brzaccVLUnitMacAddress=brzaccVLUnitMacAddress, brzaccVLConcatenationOption=brzaccVLConcatenationOption, brzaccVLSUassociatedAUTRAP=brzaccVLSUassociatedAUTRAP, brzaccVLAdbCirTx=brzaccVLAdbCirTx, brzaccVLTotalRxFramesViaEthernet=brzaccVLTotalRxFramesViaEthernet, brzaccVLMirDownlink=brzaccVLMirDownlink, brzaccVLOthersTxEvents=brzaccVLOthersTxEvents, brzaccVLPreferredAuMacAddress=brzaccVLPreferredAuMacAddress, brzaccVLNeighborAuSNR=brzaccVLNeighborAuSNR, brzaccVLDFSParameters=brzaccVLDFSParameters, brzaccVLTrapRTx=brzaccVLTrapRTx, brzaccVLDFSRadarDetectionChannelsTable=brzaccVLDFSRadarDetectionChannelsTable, brzaccVLSpectrumAnalysisInformationEntry=brzaccVLSpectrumAnalysisInformationEntry, brzaccVLSecurityMode=brzaccVLSecurityMode, brzaccVLMaximumTxPower=brzaccVLMaximumTxPower, brzaccVLAdaptiveModulationParams=brzaccVLAdaptiveModulationParams, brzaccVLMacAddressDatabase=brzaccVLMacAddressDatabase, brzaccVLNeighborAuDfsOption=brzaccVLNeighborAuDfsOption, brzaccVLConfigurationFileName=brzaccVLConfigurationFileName, brzaccVLDFSChannelIdx=brzaccVLDFSChannelIdx, brzaccVLNwMngParameters=brzaccVLNwMngParameters, brzaccVLDrapGatewayIP=brzaccVLDrapGatewayIP, brzaccVLDFSMoveFreqNew=brzaccVLDFSMoveFreqNew, brzaccVLEventLogFileName=brzaccVLEventLogFileName, brzaccVLLostBeaconsWatchdogThreshold=brzaccVLLostBeaconsWatchdogThreshold, brzaccVLSaveCurrentConfigurationAsOperatorDefaults=brzaccVLSaveCurrentConfigurationAsOperatorDefaults, brzaccVLWLPrioritizationNotSupportedBySUTRAP=brzaccVLWLPrioritizationNotSupportedBySUTRAP, brzaccVLAUAdbResetAllModulationLevelCounters=brzaccVLAUAdbResetAllModulationLevelCounters, brzaccVLAdbTxSuccessModLevel8=brzaccVLAdbTxSuccessModLevel8, brzaccVLDFSChannelFrequencyNew=brzaccVLDFSChannelFrequencyNew, brzaccVLTrapSUMacAddr=brzaccVLTrapSUMacAddr, brzAccessVLAUS_SA=brzAccessVLAUS_SA, brzaccVLSecurityParameters=brzaccVLSecurityParameters, brzaccVLFramesSubmittedViaLowQueue=brzaccVLFramesSubmittedViaLowQueue, brzaccVLRoamingOption=brzaccVLRoamingOption, brzaccVLToSPriorityParameters=brzaccVLToSPriorityParameters, alvarion=alvarion, brzAccessAU_EZ=brzAccessAU_EZ, brzaccVLFTPSwSourceDir=brzaccVLFTPSwSourceDir, brzaccVLNeighborAuDataEncyptOption=brzaccVLNeighborAuDataEncyptOption, brzaccVLTcpPortRangeConfig=brzaccVLTcpPortRangeConfig, brzaccVLSystemLocation=brzaccVLSystemLocation, brzaccVLDHCPUnicastOverrideFilter=brzaccVLDHCPUnicastOverrideFilter, products=products, brzaccVLNoOfDuplicateFramesDiscarded=brzaccVLNoOfDuplicateFramesDiscarded, brzaccVLAllowedBandwidth=brzaccVLAllowedBandwidth, brzaccVLBroadcastRelaying=brzaccVLBroadcastRelaying, brzaccVLEthernetLinkType=brzaccVLEthernetLinkType, brzaccVLIpFilterIdx=brzaccVLIpFilterIdx, brzaccVLDFSRadarDetecetedTRAP=brzaccVLDFSRadarDetecetedTRAP, brzaccVLCountryCodeParameters=brzaccVLCountryCodeParameters, brzaccVLSUDefaultKeyID=brzaccVLSUDefaultKeyID, brzaccVLDfsSupport=brzaccVLDfsSupport, brzaccVLTrafficPriIPToS=brzaccVLTrafficPriIPToS, brzaccVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages=brzaccVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages, brzaccVLVlanForwardingTableIdx=brzaccVLVlanForwardingTableIdx, brzaccVLTxPower=brzaccVLTxPower, brzaccVLCurrentAUOperatingFrequencyNew=brzaccVLCurrentAUOperatingFrequencyNew, brzaccVLDFSChannelFrequency=brzaccVLDFSChannelFrequency, brzaccVLUdpTcpPortRangePrioritizationOption=brzaccVLUdpTcpPortRangePrioritizationOption, brzaccVLAdbTxSuccessModLevel1=brzaccVLAdbTxSuccessModLevel1, brzaccVLSUBurstDurationLowPriority=brzaccVLSUBurstDurationLowPriority, brzaccVLTcpPortRangeStart=brzaccVLTcpPortRangeStart, brzaccVLNeighborAuIdx=brzaccVLNeighborAuIdx, brzAccess4900_SU_BD=brzAccess4900_SU_BD, brzaccVLVlanIdRelaying=brzaccVLVlanIdRelaying, brzaccVLPromiscuousModeTRAP=brzaccVLPromiscuousModeTRAP, brzaccVLTelnetStatusTRAP=brzaccVLTelnetStatusTRAP, brzaccVLDrapGatewayIndex=brzaccVLDrapGatewayIndex)
mibBuilder.exportSymbols("ALVARION-DOT11-WLAN-MIB", brzaccVLResetUnit=brzaccVLResetUnit, brzaccVLDFSChannelRadarStatus=brzaccVLDFSChannelRadarStatus, brzaccVLDFSNoFreeChannelsExistsTRAP=brzaccVLDFSNoFreeChannelsExistsTRAP, brzaccVLDFSRadarDetectionChannelsEntry=brzaccVLDFSRadarDetectionChannelsEntry, brzaccVLIpID=brzaccVLIpID, mngIpFilterTable=mngIpFilterTable, brzaccVLDrapGatewayType=brzaccVLDrapGatewayType, brzaccVLCurrentAUOperatingFrequency=brzaccVLCurrentAUOperatingFrequency, brzaccVLDrapMaxNumberOfVoiceCalls=brzaccVLDrapMaxNumberOfVoiceCalls, brzaccVLAdbTxFailedModLevel2=brzaccVLAdbTxFailedModLevel2, brzaccVLServiceParameters=brzaccVLServiceParameters, brzaccVLNeighborAuHwRevision=brzaccVLNeighborAuHwRevision, brzaccVLSubBandUpperFrequency=brzaccVLSubBandUpperFrequency, brzaccVLIpParams=brzaccVLIpParams, brzaccVLAdbTxFailedModLevel3=brzaccVLAdbTxFailedModLevel3, brzaccVLTrapSubscriberType=brzaccVLTrapSubscriberType, brzaccVLScanningMode=brzaccVLScanningMode, brzaccVLLowPriorityTrafficMinimumPercent=brzaccVLLowPriorityTrafficMinimumPercent, brzaccVLNeighborAuSwVer=brzaccVLNeighborAuSwVer, brzaccVLNeighborAuESSID=brzaccVLNeighborAuESSID, brzaccVLMaxDelay=brzaccVLMaxDelay, breezeAccessVLMib=breezeAccessVLMib, brzaccVLAdbTxSuccessModLevel6=brzaccVLAdbTxSuccessModLevel6, brzaccVLNumOfAssociationsSinceLastReset=brzaccVLNumOfAssociationsSinceLastReset, brzaccVLFrequencySubsetFrequencyNew=brzaccVLFrequencySubsetFrequencyNew, brzaccVLTcpPortRangeIdx=brzaccVLTcpPortRangeIdx, brzaccVLVlanRelayingTable=brzaccVLVlanRelayingTable, brzaccVLDefaultGWAddress=brzaccVLDefaultGWAddress, brzaccVLGracefulDegradationLimit=brzaccVLGracefulDegradationLimit, brzaccVLWirelessTrapThreshold=brzaccVLWirelessTrapThreshold, brzaccVLMirOnlyOption=brzaccVLMirOnlyOption, brzaccVLUdpPortRangeDeleteAll=brzaccVLUdpPortRangeDeleteAll, brzaccVLQinQEthertype=brzaccVLQinQEthertype, brzaccVLMinModulationLevel=brzaccVLMinModulationLevel, brzaccVLUnitName=brzaccVLUnitName, brzaccVLCurrentFrequencySubsetTableIdx=brzaccVLCurrentFrequencySubsetTableIdx, brzaccVLAdbCpldVer=brzaccVLAdbCpldVer, brzaccVLHardwareRetries=brzaccVLHardwareRetries, brzaccVLMinimumIntervalBetweenATPCMessages=brzaccVLMinimumIntervalBetweenATPCMessages, brzaccVLAdaptiveModulationAlgorithmOption=brzaccVLAdaptiveModulationAlgorithmOption, brzaccVLSpectrumAnalysisInformationSignalCount=brzaccVLSpectrumAnalysisInformationSignalCount, brzaccVLOperatorESSIDOption=brzaccVLOperatorESSIDOption, brzaccVLVlanDataPriority=brzaccVLVlanDataPriority, brzaccVLMacPinpoint=brzaccVLMacPinpoint, brzaccVLDeleteAllTrapAddrs=brzaccVLDeleteAllTrapAddrs, brzaccVLEthBroadcastMulticastLimiterSendTrapInterval=brzaccVLEthBroadcastMulticastLimiterSendTrapInterval, brzaccVLTcpPortRangeDelete=brzaccVLTcpPortRangeDelete, brzaccVLEthernetPortControl=brzaccVLEthernetPortControl, brzAccVLPortsControl=brzAccVLPortsControl, brzaccVLAdbSNR=brzaccVLAdbSNR, brzaccVLAdbDataEncyptOption=brzaccVLAdbDataEncyptOption, brzaccVLDFSMinimumPulsesToDetect=brzaccVLDFSMinimumPulsesToDetect, brzaccVLRadioBand=brzaccVLRadioBand, brzaccVLSUBurstDurationHighPriority=brzaccVLSUBurstDurationHighPriority, brzaccVLAdbMaxModulationLevel=brzaccVLAdbMaxModulationLevel, brzaccVLDisassociateAllSUs=brzaccVLDisassociateAllSUs, brzaccVLCountryDependentParameterFrequencies=brzaccVLCountryDependentParameterFrequencies, brzaccVLEthBroadcastThresholdExceeded=brzaccVLEthBroadcastThresholdExceeded, brzaccVLSpectrumAnalysisActivation=brzaccVLSpectrumAnalysisActivation, brzaccVLWirelessLinkEvents=brzaccVLWirelessLinkEvents, brzaccVLLoadingStatus=brzaccVLLoadingStatus, brzaccVLMaxNumOfAssociations=brzaccVLMaxNumOfAssociations, brzaccVLFTPServerUserName=brzaccVLFTPServerUserName, brzaccVLDFSChannelAvoidancePeriod=brzaccVLDFSChannelAvoidancePeriod, brzaccVLRunTimeIPaddr=brzaccVLRunTimeIPaddr, brzaccVLCountryDependentParameterEntry=brzaccVLCountryDependentParameterEntry, brzaccVLUpLinkQualityIndicatorStatus=brzaccVLUpLinkQualityIndicatorStatus, brzaccVLBurstModeOption=brzaccVLBurstModeOption, brzaccVLMacAddressDenyListAdd=brzaccVLMacAddressDenyListAdd, brzaccVLTelnetLogoutTimer=brzaccVLTelnetLogoutTimer, brzaccVLMaxNumOfAssociationsLimit=brzaccVLMaxNumOfAssociationsLimit, brzaccVLManagementVlanID=brzaccVLManagementVlanID, brzaccVLFTPServerParams=brzaccVLFTPServerParams, brzaccVLTotalRxConcatenatedFramesDouble=brzaccVLTotalRxConcatenatedFramesDouble, brzaccVLRunTimeDefaultIPGateway=brzaccVLRunTimeDefaultIPGateway, brzaccVLAdbAge=brzaccVLAdbAge, brzaccVLTrapToggle=brzaccVLTrapToggle, mngTrapEntry=mngTrapEntry, brzaccVLAUwirelessQualityTRAP=brzaccVLAUwirelessQualityTRAP, mptUnitMACAddress=mptUnitMACAddress, brzaccVLAUMacAddressDatabase=brzaccVLAUMacAddressDatabase, brzaccVLDrapUdpPort=brzaccVLDrapUdpPort, brzaccVLMacAddressDenyListRemove=brzaccVLMacAddressDenyListRemove, brzaccVLAutoSubBandFrequencySubsetTable=brzaccVLAutoSubBandFrequencySubsetTable, brzaccVLDFSClearRadarDetectedChannelsAfterReset=brzaccVLDFSClearRadarDetectedChannelsAfterReset, brzaccVLAdminPassword=brzaccVLAdminPassword, DisplayString=DisplayString, brzaccVLFTPGatewayIpAddress=brzaccVLFTPGatewayIpAddress, brzaccVLMacAddressDenyListTable=brzaccVLMacAddressDenyListTable, brzaccVLMacAddressDenyList=brzaccVLMacAddressDenyList, brzaccVLAUDefaultMulticastKeyID=brzaccVLAUDefaultMulticastKeyID, brzaccVLTransmitPowerEntry=brzaccVLTransmitPowerEntry, brzAccessVLSU_54_BD=brzAccessVLSU_54_BD, brzaccVLDFSChannelReuseOption=brzaccVLDFSChannelReuseOption, brzaccVLSerialNumber=brzaccVLSerialNumber, brzaccVLAUAdbTable=brzaccVLAUAdbTable, brzaccVLCurrentSUOperatingFrequency=brzaccVLCurrentSUOperatingFrequency, brzaccVLAutoSubBandSelect=brzaccVLAutoSubBandSelect, brzaccVLUserFilterParams=brzaccVLUserFilterParams, brzaccVLFTPSwDownload=brzaccVLFTPSwDownload, mptEthernetStationMACAddress=mptEthernetStationMACAddress, brzaccVLCurrentTxPower=brzaccVLCurrentTxPower, brzaccVLMaxBurstDuration=brzaccVLMaxBurstDuration, brzaccVLEventLogFileUploading=brzaccVLEventLogFileUploading, brzaccVLSpectrumAnalysisInformationSignalSNR=brzaccVLSpectrumAnalysisInformationSignalSNR, mngTrapTable=mngTrapTable, brzaccVLSubBandSelect=brzaccVLSubBandSelect, brzaccVLNeighborAuConcatenationOption=brzaccVLNeighborAuConcatenationOption, brzaccVLUdpPortRangeAdd=brzaccVLUdpPortRangeAdd, brzaccVLRunTimeSubNetMask=brzaccVLRunTimeSubNetMask, brzaccVLFTPClientMask=brzaccVLFTPClientMask, brzaccVLFTPDownloadSwFile=brzaccVLFTPDownloadSwFile, brzaccVLExitTelnet=brzaccVLExitTelnet, brzaccVLSpectrumAnalysisParameters=brzaccVLSpectrumAnalysisParameters, brzaccVLMngIpRangeEnd=brzaccVLMngIpRangeEnd, brzaccVLNeighborAuPerSuDistanceLearning=brzaccVLNeighborAuPerSuDistanceLearning, brzaccVLUdpPortRangeDelete=brzaccVLUdpPortRangeDelete, brzaccVLDeleteOneNwIpRange=brzaccVLDeleteOneNwIpRange, brzaccVLTcpPortRangeNum=brzaccVLTcpPortRangeNum, brzaccVLTotalTxFramesToWireless=brzaccVLTotalTxFramesToWireless, brzaccVLVlanForwardingEntry=brzaccVLVlanForwardingEntry, brzaccVLWirelessLinkCounters=brzaccVLWirelessLinkCounters, brzaccVLVlanRelayingSupport=brzaccVLVlanRelayingSupport, brzaccVLSUPMirDownlink=brzaccVLSUPMirDownlink, brzaccVLNeighborAuTable=brzaccVLNeighborAuTable, brzaccVLlowPriorityAIFS=brzaccVLlowPriorityAIFS, brzaccVLFTPClientIPAddress=brzaccVLFTPClientIPAddress, brzaccVLTrafficStatistics=brzaccVLTrafficStatistics, brzaccVLAdbTxFailedModLevel8=brzaccVLAdbTxFailedModLevel8, brzaccVLMainVersionFileName=brzaccVLMainVersionFileName, brzaccVLFTPSwFileName=brzaccVLFTPSwFileName, brzaccVLNeighborAuSecurityMode=brzaccVLNeighborAuSecurityMode, brzaccVLAdbMacAddress=brzaccVLAdbMacAddress, brzaccVLTrafficPrioritization=brzaccVLTrafficPrioritization, brzAccessVLAU=brzAccessVLAU, brzaccVLAdbDistance=brzaccVLAdbDistance, brzaccVLAssociatedAU=brzaccVLAssociatedAU, brzaccVLFrequencySubsetTableIdx=brzaccVLFrequencySubsetTableIdx, brzaccVLTrapMACAddress=brzaccVLTrapMACAddress, brzaccVLAdbTxFailedModLevel4=brzaccVLAdbTxFailedModLevel4, brzaccVLUnderrunEvents=brzaccVLUnderrunEvents, brzaccVLCountryDependentParameters=brzaccVLCountryDependentParameters, brzaccVLAUAdbEntry=brzaccVLAUAdbEntry, brzAccess4900_AU_BS=brzAccess4900_AU_BS, brzaccVLMaskID=brzaccVLMaskID, brzaccVLTransmitPowerIdx=brzaccVLTransmitPowerIdx, brzaccVLAUDefinedFrequencyNew=brzaccVLAUDefinedFrequencyNew, brzAccessVLProducts=brzAccessVLProducts, brzaccVLTcpPortRangeDeleteAll=brzaccVLTcpPortRangeDeleteAll, brzaccVLAdbHwRevision=brzaccVLAdbHwRevision, brzaccVLAdaptiveModulationDecisionThresholds=brzaccVLAdaptiveModulationDecisionThresholds, brzaccVLLoadingStatusTRAP=brzaccVLLoadingStatusTRAP, brzaccVLAdbTxFramesTotal=brzaccVLAdbTxFramesTotal, brzaccVLFrequencyDefinition=brzaccVLFrequencyDefinition, brzaccVLBestAuNoOfScanningAttempts=brzaccVLBestAuNoOfScanningAttempts, brzaccVLCountryCodeReApply=brzaccVLCountryCodeReApply, brzaccVLMaximumCellRadius=brzaccVLMaximumCellRadius, brzaccVLSUPerModulationLevelCountersEntry=brzaccVLSUPerModulationLevelCountersEntry, brzaccVLMeasureUpLinkQualityIndicator=brzaccVLMeasureUpLinkQualityIndicator, brzaccVLAdbCountryCode=brzaccVLAdbCountryCode, brzaccVLSysInfo=brzaccVLSysInfo, brzaccVLTxEvents=brzaccVLTxEvents, brzaccVLDeleteOneUserFilter=brzaccVLDeleteOneUserFilter, brzAccessVLSU_I=brzAccessVLSU_I, brzaccVLMainVersionNumber=brzaccVLMainVersionNumber, brzaccVLAntennaGain=brzaccVLAntennaGain, brzaccVLVlanForwardingTable=brzaccVLVlanForwardingTable, brzaccVLTcpPortPriRTPRTCP=brzaccVLTcpPortPriRTPRTCP, brzaccVLAutoSubBandSelectedFreqSubset=brzaccVLAutoSubBandSelectedFreqSubset, brzaccVLRecievedBadFrames=brzaccVLRecievedBadFrames, brzaccVLFTPParameters=brzaccVLFTPParameters, brzaccVLHWRetriesLowPriority=brzaccVLHWRetriesLowPriority, brzaccVLMaximumModulationLevel=brzaccVLMaximumModulationLevel, brzaccVLAutomaticChannelSelection=brzaccVLAutomaticChannelSelection, MacAddress=MacAddress, brzaccVLNwMngTrapAddress=brzaccVLNwMngTrapAddress, brzaccVLResetPerModulationLevelCounters=brzaccVLResetPerModulationLevelCounters, alvarionOID=alvarionOID, brzaccVLSubNetMask=brzaccVLSubNetMask, brzaccVLUploadEventLogFile=brzaccVLUploadEventLogFile, brzaccVLVLANPriorityThreshold=brzaccVLVLANPriorityThreshold, brzaccVLDefinedMaximumTxPowerRange=brzaccVLDefinedMaximumTxPowerRange, brzaccVLAUBeaconsToWireless=brzaccVLAUBeaconsToWireless, brzAccessVLAUS_BS=brzAccessVLAUS_BS, brzaccVLPerModulationLevelCounters=brzaccVLPerModulationLevelCounters, brzaccVLDeleteOneNwIpAddr=brzaccVLDeleteOneNwIpAddr, brzaccVLTrafficPriUdpTcpPortRange=brzaccVLTrafficPriUdpTcpPortRange, brzaccVLFrequencySubsetFrequency=brzaccVLFrequencySubsetFrequency, brzaccVLMaximumTransmitPowerEntry=brzaccVLMaximumTransmitPowerEntry, brzaccVLDeleteAllUserFilters=brzaccVLDeleteAllUserFilters, brzaccVLTrapAccessRights=brzaccVLTrapAccessRights, brzaccVLFTPServerPassword=brzaccVLFTPServerPassword, brzaccVLDrapGatewayNoOfActiveVoiceCalls=brzaccVLDrapGatewayNoOfActiveVoiceCalls, brzaccVLMacAddressDenyListAction=brzaccVLMacAddressDenyListAction, brzaccVLNeighborAuAuthOption=brzaccVLNeighborAuAuthOption, brzaccVLVlanPriorityThreshold=brzaccVLVlanPriorityThreshold, brzaccVLTrafficPriVLAN=brzaccVLTrafficPriVLAN, brzaccVLConcatenationMaximumNumberOfFrames=brzaccVLConcatenationMaximumNumberOfFrames, brzaccVLCurrentFrequencySubsetFrequencyNew=brzaccVLCurrentFrequencySubsetFrequencyNew, brzaccVLTotalTransmittedConcatenatedFramesSingle=brzaccVLTotalTransmittedConcatenatedFramesSingle, brzaccVLNwTrapTableIdx=brzaccVLNwTrapTableIdx, brzaccVLNeighborAuCountryCode=brzaccVLNeighborAuCountryCode, brzaccVLSUPerModulationLevelCountersTable=brzaccVLSUPerModulationLevelCountersTable, brzaccVLMaxModulationLevel=brzaccVLMaxModulationLevel, brzaccVLFrequencySubsetEntry=brzaccVLFrequencySubsetEntry, brzaccVLIPDSCPThreshold=brzaccVLIPDSCPThreshold, brzaccVLTcpPortRangeTable=brzaccVLTcpPortRangeTable, brzaccVLMngIpRangeStart=brzaccVLMngIpRangeStart, brzaccVLOverrunEvents=brzaccVLOverrunEvents, brzaccVLAdbTxFailedModLevel5=brzaccVLAdbTxFailedModLevel5, brzaccVLDFSFrequcnyTRAP=brzaccVLDFSFrequcnyTRAP, brzaccVLSecurityModeSupport=brzaccVLSecurityModeSupport, brzaccVLTotalRxConcatenatedFramesMore=brzaccVLTotalRxConcatenatedFramesMore, brzaccVLUnitHwVersion=brzaccVLUnitHwVersion, brzaccVLAntennaGainChange=brzaccVLAntennaGainChange, brzaccVLAUSUnsupportedSubscriberTypeTRAP=brzaccVLAUSUnsupportedSubscriberTypeTRAP, brzaccVLAccessToNwMng=brzaccVLAccessToNwMng, brzaccVLDrapNoOfActiveVoiceCalls=brzaccVLDrapNoOfActiveVoiceCalls, brzaccVLKey1=brzaccVLKey1, brzaccVLTransmitPowerTable=brzaccVLTransmitPowerTable, mngIpFilterEntry=mngIpFilterEntry, brzaccVLSetSelectedFreqSubset=brzaccVLSetSelectedFreqSubset, brzaccVLMIRThresholdPercent=brzaccVLMIRThresholdPercent, brzaccVLMaximumTxPowerRange=brzaccVLMaximumTxPowerRange, brzaccVLMaxTxApplicableModulationLevel=brzaccVLMaxTxApplicableModulationLevel, brzaccVLMeasuredCellDistance=brzaccVLMeasuredCellDistance, brzaccVLSUassociatedTRAP=brzaccVLSUassociatedTRAP, brzaccVLVlanManagementPriority=brzaccVLVlanManagementPriority, PYSNMP_MODULE_ID=breezeAccessVLMib, brzaccVLInstallerPassword=brzaccVLInstallerPassword, brzaccVLKey2=brzaccVLKey2, brzaccVLVlanRelayingEntry=brzaccVLVlanRelayingEntry, brzaccVLShadowVersionNumber=brzaccVLShadowVersionNumber, brzaccVLVLANQinQ=brzaccVLVLANQinQ, brzaccVLMinimumHwRevision=brzaccVLMinimumHwRevision, brzaccVLPowerUpFromReset=brzaccVLPowerUpFromReset, brzaccVLUnitWithMaxDistance=brzaccVLUnitWithMaxDistance, brzaccVLChangeUnitType=brzaccVLChangeUnitType, brzaccVLUnitPasswords=brzaccVLUnitPasswords, brzaccVLEventLogPolicy=brzaccVLEventLogPolicy, brzaccVLEventLogFileParams=brzaccVLEventLogFileParams, brzaccVLAdbAuthOption=brzaccVLAdbAuthOption, brzaccVLAUBurstDurationHighPriority=brzaccVLAUBurstDurationHighPriority, brzaccVLBurstInterval=brzaccVLBurstInterval, brzaccVLUdpPortRangeEnd=brzaccVLUdpPortRangeEnd, brzaccVLVLANSupport=brzaccVLVLANSupport, brzaccVLEthBroadcastingParameters=brzaccVLEthBroadcastingParameters, brzaccVLSpectrumAnalysisInformationTable=brzaccVLSpectrumAnalysisInformationTable, brzNetB_RB_B100=brzNetB_RB_B100, brzaccVLCRCErrors=brzaccVLCRCErrors, brzaccVLTotalRecievedDataFrames=brzaccVLTotalRecievedDataFrames, brzaccVLFrequencySubsetTable=brzaccVLFrequencySubsetTable, brzaccVLDroppedFrameEvents=brzaccVLDroppedFrameEvents, brzaccVLBridgeAgingTime=brzaccVLBridgeAgingTime)
mibBuilder.exportSymbols("ALVARION-DOT11-WLAN-MIB", brzaccVLMacPinpointTable=brzaccVLMacPinpointTable, brzaccVLUserFilterOption=brzaccVLUserFilterOption, brzaccVLRxDecryptEvents=brzaccVLRxDecryptEvents, brzaccVLAESEncryptionSupport=brzaccVLAESEncryptionSupport, brzaccVLUdpPortRangeConfig=brzaccVLUdpPortRangeConfig, brzaccVLAdbConcatenationOption=brzaccVLAdbConcatenationOption, brzaccVLReadOnlyPassword=brzaccVLReadOnlyPassword, brzaccVLFeatureUpgradeManually=brzaccVLFeatureUpgradeManually, brzaccVLTotalTransmittedConcatenatedFramesMore=brzaccVLTotalTransmittedConcatenatedFramesMore, brzaccVLUdpPortRangeTable=brzaccVLUdpPortRangeTable, brzaccVLBurstMode=brzaccVLBurstMode, brzaccVLOperatorDefaultsFileName=brzaccVLOperatorDefaultsFileName, brzaccVLNoOfInternallyDiscardedMirCir=brzaccVLNoOfInternallyDiscardedMirCir, brzaccVLSubBandLowerFrequency=brzaccVLSubBandLowerFrequency, brzaccVLNwMngTrapCommunity=brzaccVLNwMngTrapCommunity, brzaccVLSUPerModulationLevelCountersTxFailed=brzaccVLSUPerModulationLevelCountersTxFailed, brzaccVLNeighborAuMacAdd=brzaccVLNeighborAuMacAdd, brzaccVLIPPrecedenceThreshold=brzaccVLIPPrecedenceThreshold, brzaccVLDFSOption=brzaccVLDFSOption, brzAccessVLSU_6_BD=brzAccessVLSU_6_BD, brzAccessVLOID=brzAccessVLOID, brzaccVLUnitIpAddress=brzaccVLUnitIpAddress, brzaccVLATPC=brzaccVLATPC, brzaccVLAccessToNwTrap=brzaccVLAccessToNwTrap, brzaccVLCellDistanceMode=brzaccVLCellDistanceMode, brzaccVLConfigurationFileLoading=brzaccVLConfigurationFileLoading, brzaccVLRunningFrom=brzaccVLRunningFrom, brzaccVLAutoSubBandFrequencySubsetActive=brzaccVLAutoSubBandFrequencySubsetActive, brzaccVLUdpPortRangeNum=brzaccVLUdpPortRangeNum, brzaccVLCurrentFrequencySubsetFrequency=brzaccVLCurrentFrequencySubsetFrequency, brzaccVLScanningStep=brzaccVLScanningStep, brzaccVLWirelessLinkPrioritizationOption=brzaccVLWirelessLinkPrioritizationOption, brzaccVLTrapFtpOrTftpStatus=brzaccVLTrapFtpOrTftpStatus, brzaccVLCirUplink=brzaccVLCirUplink, brzaccVLNeighborAuMark=brzaccVLNeighborAuMark, brzaccVLSUPerModulationLevelCountersTableIdx=brzaccVLSUPerModulationLevelCountersTableIdx, brzaccVLRegulationMaxTxPowerAtAntennaPort=brzaccVLRegulationMaxTxPowerAtAntennaPort, brzaccVLAtpcOption=brzaccVLAtpcOption, brzaccVLAdbTxFailedModLevel1=brzaccVLAdbTxFailedModLevel1, brzaccVLResetTrafficCounters=brzaccVLResetTrafficCounters, brzaccVLCountryDependentParamsTable=brzaccVLCountryDependentParamsTable, brzaccVLFramesSubmittedViaHighQueue=brzaccVLFramesSubmittedViaHighQueue, brzaccVLNeighborAuEntry=brzaccVLNeighborAuEntry, brzaccVLDFSChannelCheckTime=brzaccVLDFSChannelCheckTime, brzAccessVLSU_24_BD=brzAccessVLSU_24_BD, brzaccVLEraseEventLog=brzaccVLEraseEventLog, brzAccessVLSU_3_4D=brzAccessVLSU_3_4D, brzNetB_BU_B100=brzNetB_BU_B100, brzaccVLAteTestResults=brzaccVLAteTestResults, brzaccVLIpFilterTable=brzaccVLIpFilterTable, brzaccVLAdbTxSuccessModLevel5=brzaccVLAdbTxSuccessModLevel5, brzAccessVLSU_BD=brzAccessVLSU_BD, brzaccVLDFSSuWaitingOption=brzaccVLDFSSuWaitingOption, brzAccessVLAU_BS=brzAccessVLAU_BS, brzaccVLSoftwareRetrySupport=brzaccVLSoftwareRetrySupport, brzaccLighteAPWorkingMode=brzaccLighteAPWorkingMode, brzAccessVLSU=brzAccessVLSU, brzaccVLMngIpRangeIdx=brzaccVLMngIpRangeIdx, brzaccVLFramesSubmittedViaMidQueue=brzaccVLFramesSubmittedViaMidQueue, brzaccVLRTSThreshold=brzaccVLRTSThreshold, brzaccVLEthernetNegotiationMode=brzaccVLEthernetNegotiationMode, brzaccVLUnitType=brzaccVLUnitType, brzaccVLNeighborAuBurstModeOption=brzaccVLNeighborAuBurstModeOption, brzaccVLAverageModulationLevel=brzaccVLAverageModulationLevel, brzaccVLMngIpRangeEntry=brzaccVLMngIpRangeEntry, brzaccVLMaximumTransmitPowerTable=brzaccVLMaximumTransmitPowerTable, brzaccVLTotalRxEvents=brzaccVLTotalRxEvents, brzaccVLTrapParameterChanged=brzaccVLTrapParameterChanged, brzaccVLKey3=brzaccVLKey3, brzaccVLParameterChangedTRAP=brzaccVLParameterChangedTRAP, brzaccVLBestAu=brzaccVLBestAu, brzaccVLAIFS=brzaccVLAIFS, brzaccVLMinContentionWindow=brzaccVLMinContentionWindow, brzaccVLWirelessLinkPrioritization=brzaccVLWirelessLinkPrioritization, brzaccVLTotalRxFramesFromWireless=brzaccVLTotalRxFramesFromWireless, brzaccVLUdpPortPriRTPRTCP=brzaccVLUdpPortPriRTPRTCP, brzaccVLAdbTxSuccessModLevel3=brzaccVLAdbTxSuccessModLevel3, brzaccVLAdbSecurityMode=brzaccVLAdbSecurityMode, brzaccVLDeleteAllNwIpRanges=brzaccVLDeleteAllNwIpRanges)
