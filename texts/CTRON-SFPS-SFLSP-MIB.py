#
# PySNMP MIB module CTRON-SFPS-SFLSP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFPS-SFLSP-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 12:34:48 2024
# On host fv-az658-333 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
vlanSflsp1stHop, vlanSflspInterfaces, vlanSflspIfMetric, vlanSflspTracePathInternal, vlanSflspLSPStats, vlanSflspGeneralVariables, vlanSflspNeighbors, vlanSflspTracePathAPI, vlanSflspLsdb, vlanSflspArea, vlanSflspLSDBFlood = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "vlanSflsp1stHop", "vlanSflspInterfaces", "vlanSflspIfMetric", "vlanSflspTracePathInternal", "vlanSflspLSPStats", "vlanSflspGeneralVariables", "vlanSflspNeighbors", "vlanSflspTracePathAPI", "vlanSflspLsdb", "vlanSflspArea", "vlanSflspLSDBFlood")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, ModuleIdentity, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, NotificationType, Integer32, iso, Counter64, ObjectIdentity, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "NotificationType", "Integer32", "iso", "Counter64", "ObjectIdentity", "TimeTicks", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

vlanSflspGeneralSwitchID = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspGeneralSwitchID.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralSwitchID.setDescription('A 10 byte octet string uniquely identifying the switch in the Switch Fabric.\n                 By convention, to ensure uniqueness the first six bytes should default\n                 to the base mac address and the last four bytes should default to zeroes.')
vlanSflspGeneralAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspGeneralAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralAdminStatus.setDescription("The administrative status of the SFLSP in the switch.  The value 'enabled' \n                 denotes that the SFLSP Process is active on at least one interface; 'disabled'\n                 disables it on all interfaces. ")
vlanSflspGeneralVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspGeneralVersion.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralVersion.setDescription('The current version number of the SFLSP protocol is 2 ')
vlanSflspGeneralAreaBRStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspGeneralAreaBRStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralAreaBRStatus.setDescription('A flag to note whether this switch is an area border switch ')
vlanSflspGeneralASBRStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspGeneralASBRStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralASBRStatus.setDescription('A flag to note whether this switch is an Autonomous System border switch. ')
vlanSflspGeneralTOSSupport = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspGeneralTOSSupport.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralTOSSupport.setDescription("The switch's support for type-of-service switching.  Currently, this\n                 is set to false, indicating no type-of-service switching.")
vlanSflspGeneralOrgNewLSAs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspGeneralOrgNewLSAs.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralOrgNewLSAs.setDescription('Number of new link-state advertisements that have been originated.\n                 This number is incremented each time the switch originates a new LSA.')
vlanSflspGeneralRcvNewLSAs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspGeneralRcvNewLSAs.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralRcvNewLSAs.setDescription('The number of link-state advertisements received determined to be new.\n                 instantiations.  This number does not include newer instantiations of\n                 self-originated link-state advertisements.')
vlanSflspGeneralMaxOnQueue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspGeneralMaxOnQueue.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralMaxOnQueue.setDescription('Maximum number of events on the queue')
vlanSflspGeneralCurOnQueue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspGeneralCurOnQueue.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralCurOnQueue.setDescription('Current number of events on the queue')
vlanSflspGeneralMaxTimeUs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspGeneralMaxTimeUs.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralMaxTimeUs.setDescription('Maximum length of time to process events on the queue')
vlanSflspGeneralCurTimeUs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspGeneralCurTimeUs.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralCurTimeUs.setDescription('Current length of time to process events on the queue')
vlanSflspGeneralMaxEvents = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspGeneralMaxEvents.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralMaxEvents.setDescription('Maximum number of events processed at once')
vlanSflspGeneralMaxTimeOccurred = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 14), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspGeneralMaxTimeOccurred.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralMaxTimeOccurred.setDescription('Maximum length of time occurred at this time')
vlanSflspGeneralMaxOnQOccurred = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 15), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspGeneralMaxOnQOccurred.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralMaxOnQOccurred.setDescription('Maximum number of events on the queue occurred at this time')
vlanSflspGeneralTotalSwLinks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspGeneralTotalSwLinks.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralTotalSwLinks.setDescription('Total number of switch links in our database')
vlanSflspGeneralLastChangeDet = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 17), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspGeneralLastChangeDet.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralLastChangeDet.setDescription('Timestamp of last run of spf due to change detected in topology ')
vlanSflspGeneralFloodMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspGeneralFloodMask.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralFloodMask.setDescription('')
vlanSflspGeneralLowestMac = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspGeneralLowestMac.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralLowestMac.setDescription('')
vlanSflspGeneralRootId = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspGeneralRootId.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralRootId.setDescription('')
vlanSflspGeneralFloodAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspGeneralFloodAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspGeneralFloodAdminStatus.setDescription('')
vlanSflspLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 2, 1), )
if mibBuilder.loadTexts: vlanSflspLsdbTable.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLsdbTable.setDescription("The SFLSP Process's Links State Database. ")
vlanSflspLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspLsdbAreaID"), (0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspLsdbType"), (0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspLsdbLSID"), (0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspLsdbSwitchID"))
if mibBuilder.loadTexts: vlanSflspLsdbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLsdbEntry.setDescription(' A single Link State Advertisement')
vlanSflspLsdbAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLsdbAreaID.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLsdbAreaID.setDescription('The 32-bit identifier of the Area from which the LSA was received. ')
vlanSflspLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch-link", 1), ("connection-link", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLsdbType.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLsdbType.setDescription('The type of the link state advertisement.  Each link state type has a \n                 seperate advertisement format. ')
vlanSflspLsdbLSID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLsdbLSID.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLsdbLSID.setDescription('The Link State ID is an LS Type Specific field containing either\n                 a switch ID or a switch port name; it identifies the piece of the\n                 routing domain that is being described by the advertisement. ')
vlanSflspLsdbSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLsdbSwitchID.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLsdbSwitchID.setDescription('A 10 byte octet string uniquely identifying the orignating switch in the Switch\n                 Fabric.  By convention, to ensure uniqueness the first six bytes should default\n                 to the base mac address and the last four bytes should default to zeroes.')
vlanSflspLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLsdbSequence.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLsdbSequence.setDescription('The sequence number field is a signed 32-bit integer.\n                 It is used to detect old and duplicate link state advertisements.\n                 The space of sequence numbers is linearly ordered.  The larger the \n                 sequence numbers the more recent the advertisement. ')
vlanSflspLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLsdbAge.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLsdbAge.setDescription('This field is the age of the link state advertisement in seconds .')
vlanSflspLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLsdbChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement,\n                 excepting the age field.  The age field is excepted so that an advertisement's\n                 age can be incremented without updating th checksum.  The checksum used is the \n                 same that is used for ISO connectionless datagrams;  it is commonly referred to\n                 as the Fletcher checksum. ")
vlanSflspLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLsdbAdvertisement.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header. ')
vlanSflspLsdbUsedInSPF = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLsdbUsedInSPF.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLsdbUsedInSPF.setDescription(' ')
vlanSflspInterfacesTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1), )
if mibBuilder.loadTexts: vlanSflspInterfacesTable.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesTable.setDescription('The SFLSP Interface Table describes the interfaces from the\n                 viewpoint of SFLSP. ')
vlanSflspInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1), ).setIndexNames((0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspInterfacesIFAddress"), (0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspInterfacesSwAddressLess"))
if mibBuilder.loadTexts: vlanSflspInterfacesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesEntry.setDescription('The SFLSP Interfaces Entry describes one interface from the \n                 viewpoint of SFLSP ')
vlanSflspInterfacesIFAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 1), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspInterfacesIFAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesIFAddress.setDescription('A 10 byte octet string uniquely identifying the port address.\n                 By convention, to ensure uniqueness the first six bytes should default\n                 to the base mac address and the last four bytes should default to the\n                 port number of the interface.')
vlanSflspInterfacesSwAddressLess = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspInterfacesSwAddressLess.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesSwAddressLess.setDescription('For the purpose of easing the instancing of addressed and\n                 addressless interfaces;  This variable takes the value 0 on\n                 interfaces with IP Addresses, and the corresponding value of\n                 ifIndex for interfaces having no IP Address. ')
vlanSflspInterfacesAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspInterfacesAreaID.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesAreaID.setDescription('A 32-bit integer uniquely identifying the area to which the\n                 interface connects.  Area ID 0.0.0.0 is used for the SFLSP backbone. ')
vlanSflspInterfacesIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("brodcast", 1), ("nbma", 2), ("point-to-point", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspInterfacesIfType.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesIfType.setDescription('The SFLSP interface type.  Currently all interfaces are handled as\n                 broadcast type. ')
vlanSflspInterfacesAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspInterfacesAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesAdminStatus.setDescription("The SFLSP interface's administrative status.  The value 'enabled'\n                 denotes that neighbor relationships may be formed on the interface, and the\n                 interface will be advertised as an internal route to some area.\n                 The value 'disabled' denotes that the interface is external to SFLSP. ")
vlanSflspInterfacesSwPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspInterfacesSwPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesSwPriority.setDescription('The priority of this interface.  Used in multi-access networks, this field\n                 is used in the designated switch election algorithm.  By default all switches\n                 are eligible with a priority of 1. ')
vlanSflspInterfacesTransDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspInterfacesTransDelay.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesTransDelay.setDescription('The estimated number of seconds it takes to transmit a link-state update packet \n                 over this interface. ')
vlanSflspInterfacesReTransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspInterfacesReTransInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesReTransInterval.setDescription('The number of seconds between link-state advertisement retransmissions, for\n                 adjacencies belonging to this interface.  This value is also used when re-\n                 transmitting database description and link-state request packets. ')
vlanSflspInterfacesHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspInterfacesHelloInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesHelloInterval.setDescription('The lenght of time, in seconds, between the Hello packets that the switch sends\n                 on the interface.  This value must be the same for all switches attached to a \n                 common network. ')
vlanSflspInterfacesDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspInterfacesDeadInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesDeadInterval.setDescription("The number of seconds that a switch's Hello packets have not been seen\n                 before it's neighbors declare the switch down.  This should be some multiple of the\n                 Hello interval.  This value must be the same for all switches attached to a common network. ")
vlanSflspInterfacesPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspInterfacesPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesPollInterval.setDescription('The larger time interval, in seconds, between the Hello packets sent to an\n                 inactive non-broadcast multi-access neighbor. ')
vlanSflspInterfacesState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("point-to-point", 4), ("dr", 5), ("bdr", 6), ("dr-other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspInterfacesState.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesState.setDescription('The SFLSP Interface State. ')
vlanSflspInterfacesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 13), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspInterfacesDS.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesDS.setDescription('An octet string uniquely identifying the designated switch in the Switch Fabric.\n                 By convention, to ensure uniqueness this should default to the base mac address.')
vlanSflspInterfacesBDS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 14), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspInterfacesBDS.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesBDS.setDescription('An octet string uniquely identifying the backup designated switch in the Switch Fabric.\n                 By convention, to ensure uniqueness this should default to the base mac address.')
vlanSflspInterfacesEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspInterfacesEvents.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesEvents.setDescription('The number of times this SFLSP interface has changed its\n                 state, or an error has occured. ')
vlanSflspInterfacesAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 3, 1, 1, 16), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspInterfacesAuthKey.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspInterfacesAuthKey.setDescription("THe Authentification Key.  If the Area's Authorization Type is\n                 simplePassword, and the key length is shorter than 8 octets, the agent will\n                 left adjust and zero fill to 8 octets. ")
vlanSflspIfMetricTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 4, 1), )
if mibBuilder.loadTexts: vlanSflspIfMetricTable.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspIfMetricTable.setDescription(' The TOS metrics for a non-virtual interface indentified by the \n                 interface index.')
vlanSflspIfMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 4, 1, 1), ).setIndexNames((0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspIfMetricIfAddress"), (0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspIfMetricIfTOSType"))
if mibBuilder.loadTexts: vlanSflspIfMetricEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspIfMetricEntry.setDescription(' A particular TOS metric for a non-virtual interface identified by\n                 the interface index.')
vlanSflspIfMetricIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 4, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspIfMetricIfAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspIfMetricIfAddress.setDescription('A 10 byte octet string uniquely identifying the port address.\n                 By convention, to ensure uniqueness the first six bytes should default\n                 to the base mac address and the last four bytes should default to the\n                 port number of the interface.')
vlanSflspIfMetricIfTOSType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspIfMetricIfTOSType.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspIfMetricIfTOSType.setDescription('The type of service metric being referenced.  On row creation, this can be \n                 derived from the instance..')
vlanSflspIfMetricIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspIfMetricIfMetric.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspIfMetricIfMetric.setDescription("The metric of using this type of service on this interface.  The default value of the\n                 TOS 0 Metric is 10^8 / ifSpeed.\n                 The value FFFF is distinguished to mean 'no route via this TOS'. ")
vlanSflspIfMetricIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspIfMetricIfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspIfMetricIfStatus.setDescription("This variable displays the validity or invalidity of the entry.\n                 Setting it to 'invalid' has the effect of rendering it inoperative.\n                 The internal effect (row removal) is implementation dependent ")
vlanSflspNeighborsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1), )
if mibBuilder.loadTexts: vlanSflspNeighborsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsTable.setDescription('A table of non-virtual neighbor information .')
vlanSflspNeighborsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1), ).setIndexNames((0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspNeighborsPortName"))
if mibBuilder.loadTexts: vlanSflspNeighborsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsEntry.setDescription('The information regarding a single neighbor. ')
vlanSflspNeighborsPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsPortName.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsPortName.setDescription("A 10 byte octet string uniquely identifying the neighbor's port address.\n                 By convention, to ensure uniqueness the first six bytes should default\n                 to the base mac address and the last four bytes should default to the\n                 port number of the neighbor's interface.")
vlanSflspNeighborsSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsSwitchID.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsSwitchID.setDescription('An octet string uniquely identifying the neighboring switch in the Switch Fabric.\n                 By convention, to ensure uniqueness this should default to the base mac address.')
vlanSflspNeighborsOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsOptions.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsOptions.setDescription("A bit Mask corresponding to the neighbor's options field.\n                 Bit 0, if set, indicates that the area accepts and operates\n                 on external information;  if zero, it is a stub area.\n                \n                 Bit 1, if set, indicates that the system will operate on Type \n                 of Service metrics other than TOS 0.  If zero, the neighbor\n                 will ignore all metrics except the TOS 0 metric .")
vlanSflspNeighborsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsPriority.setDescription(' The priority of this neighbor in the designated switch election\n                 algorithm.  The value 0 signifies that the neighbor is not eligible \n                 to become the designated switch on this particular network.')
vlanSflspNeighborsState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("two-way", 4), ("exchange", 5), ("exchange-start", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsState.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsState.setDescription(' The State of the relationship with this Neighbor.')
vlanSflspNeighborsEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsEvents.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsEvents.setDescription('The number of times this neighbor relationship has\n                 changed state, or an error has occurred. ')
vlanSflspNeighborsLSRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsLSRetransQLen.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsLSRetransQLen.setDescription(' The current length of the retransmission queue.')
vlanSflspNeighborsHELLOsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsHELLOsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsHELLOsRcvd.setDescription('The number of hello packets received from this neighbor')
vlanSflspNeighborsDBDsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsDBDsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsDBDsRcvd.setDescription('The number of database description packets received from this neighbor')
vlanSflspNeighborsLSUsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsLSUsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsLSUsRcvd.setDescription('The number of link state update packets received from this neighbor')
vlanSflspNeighborsLSRsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsLSRsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsLSRsRcvd.setDescription('The number of link state request packets received from this neighbor')
vlanSflspNeighborsLSACKsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsLSACKsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsLSACKsRcvd.setDescription('The number of link state acknowledgement packets received from this neighbor')
vlanSflspNeighborsHELLOsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsHELLOsSent.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsHELLOsSent.setDescription('The number of hello packets sent to this neighbor')
vlanSflspNeighborsDBDsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsDBDsSent.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsDBDsSent.setDescription('The number of database description packets sent to this neighbor')
vlanSflspNeighborsLSUsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsLSUsSent.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsLSUsSent.setDescription('The number of link state update packets sent to this neighbor')
vlanSflspNeighborsLSRsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsLSRsSent.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsLSRsSent.setDescription('The number of link state request packets sent to this neighbor')
vlanSflspNeighborsLSACKsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsLSACKsSent.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsLSACKsSent.setDescription('The number of link state acknowledgement packets sent to this neighbor')
vlanSflspNeighborsNBMAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsNBMAStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsNBMAStatus.setDescription(" The variable displays the validity or invalidity of the\n                  entry.  Setting it to 'invalid' has the effect of rendering\n                 it inoperative.  The internal effect (row removal) is implementation\n                 dependant.")
vlanSflspNeighborsFULLTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 5, 1, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspNeighborsFULLTimeSec.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspNeighborsFULLTimeSec.setDescription('Neighbor went to FULL state at this time ')
vlanSflspAreaTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 6, 1), )
if mibBuilder.loadTexts: vlanSflspAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspAreaTable.setDescription('Information describing the configured parameters and\n                 cumulative statistics of the switches attached areas.')
vlanSflspAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 6, 1, 1), ).setIndexNames((0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspAreaAreaID"))
if mibBuilder.loadTexts: vlanSflspAreaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspAreaEntry.setDescription('Information describing the configured parameters and\n                 cumulative statistics of one of the switches attached\n                 areas.')
vlanSflspAreaAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 6, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspAreaAreaID.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspAreaAreaID.setDescription('A 10 byte octet string uniquely identifying an area.')
vlanSflspAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspAreaAuthType.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspAreaAuthType.setDescription('The authentication type specified for an area.\n                 Additional authentication types may be assigned locally\n                 on a per Area basis.')
vlanSflspAreaSPFRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspAreaSPFRuns.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspAreaSPFRuns.setDescription("The number of times that the intra-area route table\n                 has been calculated using this area's link-state\n                 database.  This is typically done using Dijkstra's\n                 algorithm.")
vlanSflspAreaABRCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 6, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspAreaABRCount.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspAreaABRCount.setDescription('The total number of area border switches reachable\n                 within this area.  This is initially zero, and is\n                 calculated in each SPF Pass.')
vlanSflspAreaASBRCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 6, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspAreaASBRCount.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspAreaASBRCount.setDescription('The total number of Autonomous System border switches\n                 reachable within this area.  This is initially zero,\n                 and is calculated in each LSP Pass.')
vlanSflspAreaAreaLSACnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 6, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspAreaAreaLSACnt.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspAreaAreaLSACnt.setDescription("The total number of link-state advertisements in this\n                 area's link-state database, excluding AS External LSA's")
vlanSflspAreaAreaCheckSum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspAreaAreaCheckSum.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspAreaAreaCheckSum.setDescription("The 32-bit unsigned sum of the link-state\n                 advertisements' LS checksums contained in this area's\n                 link-state database.  This sum excludes external (LS\n                 type 5) link-state advertisements.  The sum can be used\n                 to determine if there has been a change in a switches\n                 link state database, and to compare the link-state\n                 database of two switches.")
vlanSflspAreaLastSpfRun = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 6, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspAreaLastSpfRun.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspAreaLastSpfRun.setDescription('Timestamp of last run of spf')
vlanSflsp1stHopTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 7, 1), )
if mibBuilder.loadTexts: vlanSflsp1stHopTable.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflsp1stHopTable.setDescription('This table contains the SecureFast path next-hop table.  It\n                 reports various information about the next switch port\n                 address on the path to a particular destination switch\n                 port address.')
vlanSflsp1stHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 7, 1, 1), ).setIndexNames((0, "CTRON-SFPS-SFLSP-MIB", "vlanSflsp1stHopDestSwitch"))
if mibBuilder.loadTexts: vlanSflsp1stHopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflsp1stHopEntry.setDescription('Each entry describes the next hop switch port addresses for\n                 each destination switch port address.')
vlanSflsp1stHopDestSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 7, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflsp1stHopDestSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflsp1stHopDestSwitch.setDescription('This is the index to the table, representing destination\n                 switch port addresses for each port address within\n                 the switch fabric.')
vlanSflsp1stHopPath11stHop = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 7, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflsp1stHopPath11stHop.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflsp1stHopPath11stHop.setDescription('The 1st hop of the 1st path to the destination switch')
vlanSflsp1stHopPath21stHop = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 7, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflsp1stHopPath21stHop.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflsp1stHopPath21stHop.setDescription('The 1st host of the 2nd path to the destination switch')
vlanSflsp1stHopPath31stHop = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 7, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflsp1stHopPath31stHop.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflsp1stHopPath31stHop.setDescription('The 1st hop of the 3rd path to the destination switch')
vlanSflspTracePathAPIDest = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspTracePathAPIDest.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathAPIDest.setDescription('This is the switch address for which a path list will be\n            requested in the sfTracePathTable.')
vlanSflspTracePathAPIID = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspTracePathAPIID.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathAPIID.setDescription('This is an ID to uniquely identify the path list request\n            in the sfTracePathTable.')
vlanSflspTracePathAPIType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspTracePathAPIType.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathAPIType.setDescription('The administrative control of the trace path request entry in\n            the sfTracePathTable.  It is used to create or delete a trace\n            path request entry.')
vlanSflspTracePathAPIAction = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("activate", 2), ("suspend", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspTracePathAPIAction.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathAPIAction.setDescription('The action to be performed by the trace path request entry\n            in the sfTracePathTable.')
vlanSflspTracePathTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 2, 1), )
if mibBuilder.loadTexts: vlanSflspTracePathTable.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathTable.setDescription('This table allows the determination of paths to known\n             destinations using the same internal methods used by the\n             switch to program these paths.  It is indexed by\n             destination switch address and a request identifier.\n             If successful, the resulting path, which consists of a\n             list of switch port addresses, is reported in the\n             sfTracePathReqHopTable.')
vlanSflspTracePathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspTracePathDest"), (0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspTracePathID"))
if mibBuilder.loadTexts: vlanSflspTracePathEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathEntry.setDescription('An SF Trace Path Table entry containing objects for a\n             particular destination switch.')
vlanSflspTracePathDest = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspTracePathDest.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathDest.setDescription('The switch address of the requested destination.')
vlanSflspTracePathID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspTracePathID.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathID.setDescription('A unique identifier for this path request.')
vlanSflspTracePathAction = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("activate", 2), ("suspend", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspTracePathAction.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathAction.setDescription('The action to be performed by this trace path entry.')
vlanSflspTracePathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("success", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspTracePathStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathStatus.setDescription('The results of a trace path request.  A result of success(4)\n             means the device has determined at least one path to the\n             destination.')
vlanSflspTracePathListTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 2, 2), )
if mibBuilder.loadTexts: vlanSflspTracePathListTable.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathListTable.setDescription('This table contains the SecureFast Trace Path List table.')
vlanSflspTracePathListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 2, 2, 1), ).setIndexNames((0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspTracePathListDest"), (0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspTracePathListID"), (0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspTracePathListPathNum"), (0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspTracePathListHopNum"))
if mibBuilder.loadTexts: vlanSflspTracePathListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathListEntry.setDescription('This table contains the switch port addresses of each hop\n             of each path traversed for a particular destination switch.\n             These paths correspond to trace path requests in the\n             sfTracePathReqTable.')
vlanSflspTracePathListDest = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 2, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspTracePathListDest.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathListDest.setDescription('The switch address of the destination for this trace path\n             entry, corresponding to a requested destination in the\n             sfTracePathReqTable.')
vlanSflspTracePathListID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspTracePathListID.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathListID.setDescription('A unique identifier corresponding to the identifier in a\n             trace path request in the sfTracePathReqTable.')
vlanSflspTracePathListPathNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspTracePathListPathNum.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathListPathNum.setDescription('The number of this path in the table of networks traversed.\n             This value represents a unique path id when there are multiple\n             paths to a single destination.')
vlanSflspTracePathListHopNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspTracePathListHopNum.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathListHopNum.setDescription('The hop number in this path.')
vlanSflspTracePathListHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 8, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspTracePathListHopAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspTracePathListHopAddr.setDescription('The switch port address of this hop on the path.')
vlanSflspLSDBFloodTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 20, 1), )
if mibBuilder.loadTexts: vlanSflspLSDBFloodTable.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSDBFloodTable.setDescription('')
vlanSflspLSDBFloodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 20, 1, 1), ).setIndexNames((0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspLSDBFloodAreaID"), (0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspLSDBFloodType"), (0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspLSDBFloodLSID"), (0, "CTRON-SFPS-SFLSP-MIB", "vlanSflspLSDBFloodAdvSwitchID"))
if mibBuilder.loadTexts: vlanSflspLSDBFloodEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSDBFloodEntry.setDescription('')
vlanSflspLSDBFloodAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSDBFloodAreaID.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSDBFloodAreaID.setDescription('')
vlanSflspLSDBFloodType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchLink", 1), ("connectionLink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSDBFloodType.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSDBFloodType.setDescription('')
vlanSflspLSDBFloodLSID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 20, 1, 1, 3), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSDBFloodLSID.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSDBFloodLSID.setDescription('')
vlanSflspLSDBFloodAdvSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 20, 1, 1, 4), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSDBFloodAdvSwitchID.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSDBFloodAdvSwitchID.setDescription('')
vlanSflspLSDBFloodSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 20, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSDBFloodSequence.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSDBFloodSequence.setDescription('')
vlanSflspLSDBFloodAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 20, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSDBFloodAge.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSDBFloodAge.setDescription('')
vlanSflspLSDBFloodChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 20, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSDBFloodChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSDBFloodChecksum.setDescription('')
vlanSflspLSDBFloodAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 20, 1, 1, 8), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSDBFloodAdvertisement.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSDBFloodAdvertisement.setDescription('')
vlanSflspLSDBFloodUsedInSPF = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 20, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSDBFloodUsedInSPF.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSDBFloodUsedInSPF.setDescription('')
vlanSflspLSDBFloodEverUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSDBFloodEverUsed.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSDBFloodEverUsed.setDescription('')
vlanSflspLSPStatsMaxOnQueue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSPStatsMaxOnQueue.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSPStatsMaxOnQueue.setDescription('')
vlanSflspLSPStatsCurOnQueue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 21, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSPStatsCurOnQueue.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSPStatsCurOnQueue.setDescription('')
vlanSflspLSPStatsMaxTimeUs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSPStatsMaxTimeUs.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSPStatsMaxTimeUs.setDescription('')
vlanSflspLSPStatsCurTimeUs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 21, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSPStatsCurTimeUs.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSPStatsCurTimeUs.setDescription('')
vlanSflspLSPStatsMaxTimeOccurred = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 21, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSPStatsMaxTimeOccurred.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSPStatsMaxTimeOccurred.setDescription('')
vlanSflspLSPStatsMaxOnQOccurred = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 21, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSPStatsMaxOnQOccurred.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSPStatsMaxOnQOccurred.setDescription('')
vlanSflspLSPStatsTotalSwLinks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 21, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSPStatsTotalSwLinks.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSPStatsTotalSwLinks.setDescription('')
vlanSflspLSPStatsLastChangeDet = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 21, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSPStatsLastChangeDet.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSPStatsLastChangeDet.setDescription('')
vlanSflspLSPStatsNumSPFRuns = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 21, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSflspLSPStatsNumSPFRuns.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSPStatsNumSPFRuns.setDescription('')
vlanSflspLSPStatsNumFULLNbrs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 21, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSPStatsNumFULLNbrs.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSPStatsNumFULLNbrs.setDescription('')
vlanSflspLSPStatsNumIntfs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 21, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSPStatsNumIntfs.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSPStatsNumIntfs.setDescription('')
vlanSflspLSPStatsNum1stHops = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 21, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSPStatsNum1stHops.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSPStatsNum1stHops.setDescription('')
vlanSflspLSPStatsNumUpdates = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 21, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSPStatsNumUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSPStatsNumUpdates.setDescription('')
vlanSflspLSPStatsLastUpdateRecvd = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 7, 21, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSflspLSPStatsLastUpdateRecvd.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSflspLSPStatsLastUpdateRecvd.setDescription('')
mibBuilder.exportSymbols("CTRON-SFPS-SFLSP-MIB", vlanSflspLsdbSwitchID=vlanSflspLsdbSwitchID, vlanSflspNeighborsTable=vlanSflspNeighborsTable, vlanSflsp1stHopPath11stHop=vlanSflsp1stHopPath11stHop, vlanSflspNeighborsEvents=vlanSflspNeighborsEvents, vlanSflspAreaLastSpfRun=vlanSflspAreaLastSpfRun, vlanSflspLSPStatsLastChangeDet=vlanSflspLSPStatsLastChangeDet, vlanSflspTracePathListID=vlanSflspTracePathListID, vlanSflspNeighborsNBMAStatus=vlanSflspNeighborsNBMAStatus, vlanSflspInterfacesDeadInterval=vlanSflspInterfacesDeadInterval, vlanSflspLSPStatsLastUpdateRecvd=vlanSflspLSPStatsLastUpdateRecvd, vlanSflspTracePathAction=vlanSflspTracePathAction, vlanSflspNeighborsOptions=vlanSflspNeighborsOptions, vlanSflspGeneralMaxTimeUs=vlanSflspGeneralMaxTimeUs, vlanSflspNeighborsPriority=vlanSflspNeighborsPriority, vlanSflspNeighborsSwitchID=vlanSflspNeighborsSwitchID, vlanSflspInterfacesIfType=vlanSflspInterfacesIfType, vlanSflspGeneralSwitchID=vlanSflspGeneralSwitchID, vlanSflspAreaABRCount=vlanSflspAreaABRCount, vlanSflspAreaASBRCount=vlanSflspAreaASBRCount, vlanSflsp1stHopEntry=vlanSflsp1stHopEntry, vlanSflspInterfacesSwAddressLess=vlanSflspInterfacesSwAddressLess, vlanSflspLsdbLSID=vlanSflspLsdbLSID, vlanSflspTracePathEntry=vlanSflspTracePathEntry, vlanSflspInterfacesDS=vlanSflspInterfacesDS, vlanSflspLSDBFloodAreaID=vlanSflspLSDBFloodAreaID, vlanSflspGeneralTOSSupport=vlanSflspGeneralTOSSupport, vlanSflspLSDBFloodSequence=vlanSflspLSDBFloodSequence, vlanSflspGeneralTotalSwLinks=vlanSflspGeneralTotalSwLinks, vlanSflspTracePathStatus=vlanSflspTracePathStatus, vlanSflspTracePathListEntry=vlanSflspTracePathListEntry, vlanSflspAreaEntry=vlanSflspAreaEntry, vlanSflsp1stHopTable=vlanSflsp1stHopTable, vlanSflspLSDBFloodLSID=vlanSflspLSDBFloodLSID, vlanSflspNeighborsPortName=vlanSflspNeighborsPortName, vlanSflspAreaTable=vlanSflspAreaTable, vlanSflspGeneralASBRStatus=vlanSflspGeneralASBRStatus, vlanSflspTracePathListHopNum=vlanSflspTracePathListHopNum, vlanSflspLSDBFloodAge=vlanSflspLSDBFloodAge, vlanSflspInterfacesBDS=vlanSflspInterfacesBDS, vlanSflspInterfacesTransDelay=vlanSflspInterfacesTransDelay, vlanSflspLsdbTable=vlanSflspLsdbTable, vlanSflspLsdbAge=vlanSflspLsdbAge, vlanSflspIfMetricIfTOSType=vlanSflspIfMetricIfTOSType, vlanSflspGeneralLastChangeDet=vlanSflspGeneralLastChangeDet, vlanSflspLSPStatsMaxTimeOccurred=vlanSflspLSPStatsMaxTimeOccurred, vlanSflspIfMetricIfMetric=vlanSflspIfMetricIfMetric, vlanSflspLsdbAdvertisement=vlanSflspLsdbAdvertisement, vlanSflspInterfacesEntry=vlanSflspInterfacesEntry, vlanSflspInterfacesAreaID=vlanSflspInterfacesAreaID, vlanSflspLsdbType=vlanSflspLsdbType, vlanSflspLSDBFloodType=vlanSflspLSDBFloodType, vlanSflspNeighborsHELLOsRcvd=vlanSflspNeighborsHELLOsRcvd, vlanSflspGeneralMaxOnQOccurred=vlanSflspGeneralMaxOnQOccurred, vlanSflspLSPStatsMaxOnQOccurred=vlanSflspLSPStatsMaxOnQOccurred, vlanSflspGeneralOrgNewLSAs=vlanSflspGeneralOrgNewLSAs, vlanSflspNeighborsFULLTimeSec=vlanSflspNeighborsFULLTimeSec, vlanSflspInterfacesAuthKey=vlanSflspInterfacesAuthKey, vlanSflspLSDBFloodEntry=vlanSflspLSDBFloodEntry, vlanSflspLSDBFloodTable=vlanSflspLSDBFloodTable, SfpsAddress=SfpsAddress, vlanSflspGeneralMaxEvents=vlanSflspGeneralMaxEvents, vlanSflspIfMetricIfAddress=vlanSflspIfMetricIfAddress, vlanSflspNeighborsLSACKsRcvd=vlanSflspNeighborsLSACKsRcvd, vlanSflspGeneralAreaBRStatus=vlanSflspGeneralAreaBRStatus, vlanSflspLsdbAreaID=vlanSflspLsdbAreaID, vlanSflspGeneralFloodMask=vlanSflspGeneralFloodMask, vlanSflspTracePathAPIType=vlanSflspTracePathAPIType, vlanSflspAreaSPFRuns=vlanSflspAreaSPFRuns, vlanSflspGeneralVersion=vlanSflspGeneralVersion, vlanSflsp1stHopDestSwitch=vlanSflsp1stHopDestSwitch, vlanSflspGeneralCurTimeUs=vlanSflspGeneralCurTimeUs, vlanSflspNeighborsLSACKsSent=vlanSflspNeighborsLSACKsSent, vlanSflspTracePathID=vlanSflspTracePathID, vlanSflspTracePathListTable=vlanSflspTracePathListTable, vlanSflspLSDBFloodUsedInSPF=vlanSflspLSDBFloodUsedInSPF, vlanSflspAreaAreaID=vlanSflspAreaAreaID, vlanSflspLSDBFloodEverUsed=vlanSflspLSDBFloodEverUsed, vlanSflspNeighborsState=vlanSflspNeighborsState, vlanSflspTracePathListHopAddr=vlanSflspTracePathListHopAddr, vlanSflspInterfacesEvents=vlanSflspInterfacesEvents, vlanSflspNeighborsDBDsRcvd=vlanSflspNeighborsDBDsRcvd, vlanSflspLSDBFloodAdvertisement=vlanSflspLSDBFloodAdvertisement, vlanSflspLSPStatsCurOnQueue=vlanSflspLSPStatsCurOnQueue, vlanSflspTracePathAPIID=vlanSflspTracePathAPIID, vlanSflspInterfacesIFAddress=vlanSflspInterfacesIFAddress, vlanSflspNeighborsLSRsSent=vlanSflspNeighborsLSRsSent, vlanSflspGeneralRcvNewLSAs=vlanSflspGeneralRcvNewLSAs, vlanSflspTracePathListPathNum=vlanSflspTracePathListPathNum, vlanSflspLSPStatsMaxTimeUs=vlanSflspLSPStatsMaxTimeUs, vlanSflspInterfacesHelloInterval=vlanSflspInterfacesHelloInterval, vlanSflspNeighborsHELLOsSent=vlanSflspNeighborsHELLOsSent, vlanSflspLSPStatsNumSPFRuns=vlanSflspLSPStatsNumSPFRuns, vlanSflspLsdbEntry=vlanSflspLsdbEntry, vlanSflspTracePathTable=vlanSflspTracePathTable, vlanSflspNeighborsLSUsSent=vlanSflspNeighborsLSUsSent, vlanSflspGeneralAdminStatus=vlanSflspGeneralAdminStatus, vlanSflspNeighborsLSUsRcvd=vlanSflspNeighborsLSUsRcvd, vlanSflspGeneralMaxTimeOccurred=vlanSflspGeneralMaxTimeOccurred, vlanSflspTracePathDest=vlanSflspTracePathDest, vlanSflspLSPStatsMaxOnQueue=vlanSflspLSPStatsMaxOnQueue, vlanSflsp1stHopPath31stHop=vlanSflsp1stHopPath31stHop, vlanSflspLSPStatsNumFULLNbrs=vlanSflspLSPStatsNumFULLNbrs, vlanSflspAreaAreaCheckSum=vlanSflspAreaAreaCheckSum, vlanSflspLSPStatsCurTimeUs=vlanSflspLSPStatsCurTimeUs, vlanSflspLSPStatsNumUpdates=vlanSflspLSPStatsNumUpdates, vlanSflspLSPStatsNumIntfs=vlanSflspLSPStatsNumIntfs, vlanSflspLsdbChecksum=vlanSflspLsdbChecksum, vlanSflspGeneralLowestMac=vlanSflspGeneralLowestMac, vlanSflspGeneralCurOnQueue=vlanSflspGeneralCurOnQueue, vlanSflspLsdbSequence=vlanSflspLsdbSequence, vlanSflspNeighborsLSRsRcvd=vlanSflspNeighborsLSRsRcvd, vlanSflspNeighborsEntry=vlanSflspNeighborsEntry, vlanSflspIfMetricEntry=vlanSflspIfMetricEntry, vlanSflspLsdbUsedInSPF=vlanSflspLsdbUsedInSPF, vlanSflspTracePathAPIAction=vlanSflspTracePathAPIAction, vlanSflspGeneralFloodAdminStatus=vlanSflspGeneralFloodAdminStatus, vlanSflspIfMetricTable=vlanSflspIfMetricTable, vlanSflspAreaAreaLSACnt=vlanSflspAreaAreaLSACnt, vlanSflspTracePathListDest=vlanSflspTracePathListDest, vlanSflspLSDBFloodAdvSwitchID=vlanSflspLSDBFloodAdvSwitchID, vlanSflspLSPStatsTotalSwLinks=vlanSflspLSPStatsTotalSwLinks, vlanSflspInterfacesSwPriority=vlanSflspInterfacesSwPriority, vlanSflspInterfacesAdminStatus=vlanSflspInterfacesAdminStatus, vlanSflspNeighborsLSRetransQLen=vlanSflspNeighborsLSRetransQLen, vlanSflspLSDBFloodChecksum=vlanSflspLSDBFloodChecksum, vlanSflspIfMetricIfStatus=vlanSflspIfMetricIfStatus, vlanSflspLSPStatsNum1stHops=vlanSflspLSPStatsNum1stHops, vlanSflspInterfacesReTransInterval=vlanSflspInterfacesReTransInterval, vlanSflspInterfacesPollInterval=vlanSflspInterfacesPollInterval, vlanSflsp1stHopPath21stHop=vlanSflsp1stHopPath21stHop, vlanSflspGeneralRootId=vlanSflspGeneralRootId, vlanSflspTracePathAPIDest=vlanSflspTracePathAPIDest, vlanSflspInterfacesState=vlanSflspInterfacesState, vlanSflspAreaAuthType=vlanSflspAreaAuthType, vlanSflspGeneralMaxOnQueue=vlanSflspGeneralMaxOnQueue, vlanSflspNeighborsDBDsSent=vlanSflspNeighborsDBDsSent, vlanSflspInterfacesTable=vlanSflspInterfacesTable)
