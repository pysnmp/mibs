#
# PySNMP MIB module NBS-SYSLOG-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/mrv/NBS-SYSLOG-SERVER-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 10:09:28 2024
# On host fv-az575-513 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
nbs, = mibBuilder.importSymbols("NBS-MIB", "nbs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter32, IpAddress, MibIdentifier, Gauge32, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Counter64, Bits, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "IpAddress", "MibIdentifier", "Gauge32", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Counter64", "Bits", "NotificationType", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nbsSyslogServerMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 206))
if mibBuilder.loadTexts: nbsSyslogServerMib.setLastUpdated('201209260000Z')
if mibBuilder.loadTexts: nbsSyslogServerMib.setOrganization('NBS')
if mibBuilder.loadTexts: nbsSyslogServerMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsSyslogServerMib.setDescription('MIB for representing NBS remote syslog servers')
nbsSyslogServerGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 206, 1))
if mibBuilder.loadTexts: nbsSyslogServerGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSyslogServerGrp.setDescription('Meta MIB')
nbsSyslogServerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 206, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSyslogServerTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSyslogServerTableSize.setDescription('The number of entries in nbsSyslogServerTable table.')
nbsSyslogServerTable = MibTable((1, 3, 6, 1, 4, 1, 629, 206, 1, 2), )
if mibBuilder.loadTexts: nbsSyslogServerTable.setStatus('current')
if mibBuilder.loadTexts: nbsSyslogServerTable.setDescription('Syslog messages will be sent to\n                 every active server in the table.')
nbsSyslogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 206, 1, 2, 1), ).setIndexNames((0, "NBS-SYSLOG-SERVER-MIB", "nbsSyslogServerIndex"))
if mibBuilder.loadTexts: nbsSyslogServerEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSyslogServerEntry.setDescription('A remote syslog server.')
nbsSyslogServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 206, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: nbsSyslogServerIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSyslogServerIndex.setDescription('The index of the entry/row in the syslog table.')
nbsSyslogServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 206, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2))).clone('invalid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSyslogServerStatus.setStatus('current')
if mibBuilder.loadTexts: nbsSyslogServerStatus.setDescription("This object is used to get/set the validity of the information\n           contained by nbsSyslogServerEntry row.\n\n           Setting this object to the value invalid(1) has the effect of\n           deleting the corresponding nbsSyslogServerTable entry.\n           Deleting an entry has the effect of initializing it to default\n           values : IpAddr = 0.0.0.0, Port = 0 etc.\n\n           Setting this object to the value active(2) entry has the effect of\n           creating a new row in the nbsSyslogServerTable object, if an\n           entry with the same nbsSyslogServerIpAddr does not exist. If\n           such an entry exists, then a 'badValue' error will be returned.\n\n           The GET operations will receive a value of active(2) for existing\n           entries. An invalid(1) value indicates an entry that was deleted by\n           a previous SET operation.")
nbsSyslogServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 206, 1, 2, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSyslogServerAddressType.setStatus('current')
if mibBuilder.loadTexts: nbsSyslogServerAddressType.setDescription('The address type of nbsSyslogServerAddress.\n                 Currently ipv4 and ipv6 are supported.')
nbsSyslogServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 206, 1, 2, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSyslogServerAddress.setStatus('current')
if mibBuilder.loadTexts: nbsSyslogServerAddress.setDescription('IP address of a remote server that should be sent syslog messages.')
nbsSyslogServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 206, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(514)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSyslogServerPort.setStatus('current')
if mibBuilder.loadTexts: nbsSyslogServerPort.setDescription('UDP port of the remote syslog server.\n           The default port is 514.')
nbsSyslogServerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 206, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("deprecated1", 1), ("emerg", 2), ("alert", 3), ("crit", 4), ("error", 5), ("warning", 6), ("notice", 7), ("info", 8), ("debug", 9))).clone('warning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSyslogServerLevel.setStatus('current')
if mibBuilder.loadTexts: nbsSyslogServerLevel.setDescription('Indicates the level of messages that are sent to this syslog server.')
mibBuilder.exportSymbols("NBS-SYSLOG-SERVER-MIB", nbsSyslogServerTableSize=nbsSyslogServerTableSize, PYSNMP_MODULE_ID=nbsSyslogServerMib, nbsSyslogServerAddress=nbsSyslogServerAddress, nbsSyslogServerTable=nbsSyslogServerTable, nbsSyslogServerEntry=nbsSyslogServerEntry, nbsSyslogServerAddressType=nbsSyslogServerAddressType, nbsSyslogServerMib=nbsSyslogServerMib, nbsSyslogServerLevel=nbsSyslogServerLevel, nbsSyslogServerStatus=nbsSyslogServerStatus, nbsSyslogServerGrp=nbsSyslogServerGrp, nbsSyslogServerIndex=nbsSyslogServerIndex, nbsSyslogServerPort=nbsSyslogServerPort)
