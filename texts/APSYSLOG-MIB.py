#
# PySNMP MIB module APSYSLOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/oracle/APSYSLOG-MIB
# Produced by pysmi-1.1.12 at Wed Jun 26 13:37:49 2024
# On host fv-az1984-994 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, MibIdentifier, ModuleIdentity, Unsigned32, Counter32, Integer32, iso, Bits, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Counter32", "Integer32", "iso", "Bits", "Counter64", "ObjectIdentity")
TimeStamp, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "TextualConvention", "DisplayString")
apSyslogModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 1))
apSyslogModule.setRevisions(('2012-07-16 00:00', '2013-09-13 00:00', '2014-06-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apSyslogModule.setRevisionsDescriptions(('Updated contact info', 'Updated description for apSyslogMessageGenerated\n\t    trap and apSyslogHistoryTable.', 'Updated Organization and Contact info.',))
if mibBuilder.loadTexts: apSyslogModule.setLastUpdated('201406260000Z')
if mibBuilder.loadTexts: apSyslogModule.setOrganization('Oracle Communications')
if mibBuilder.loadTexts: apSyslogModule.setContactInfo('           \tCustomer Service\n\t\t \tPostal:\t\tOracle Communications\n\t\t\t\t\t100 Crosby Drive \n\t\t\t\t\tBedford, MA 01730\n\t\t\t\t\tUS\n\t\t    \tTel:\t\t1-800-633-0738\n\t\t\tUrl:\t\twww.oracle.com\n\t\t \tE-mail:\t\tsupport@oracle.com')
if mibBuilder.loadTexts: apSyslogModule.setDescription(' The syslog MIB for Oracle Communications Acme Packet SBCs')
apSyslogMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1))
class SyslogLevel(TextualConvention, Integer32):
    description = 'The log-level of a syslog message.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("emergency", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("notice", 6), ("info", 7), ("trace", 8), ("debug", 9), ("detail", 10))

apSyslogBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 1))
apSyslogNotificationsSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 1, 1), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogNotificationsSent.setStatus('current')
if mibBuilder.loadTexts: apSyslogNotificationsSent.setDescription('The number of apSyslogMessageGenerated notifications that\n              \thave been sent. This number may include notifications \n\t\tthat were prevented from being transmitted due to \n\t\treasons such as resource limitations and/or \n\t\tnon-connectivity.  If one is receiving notifications,\n\t\tone can periodically poll this object to determine if\n\t\tany notifications were missed.  If so, a poll of the\n\t\tapSyslogHistoryTable might be appropriate.')
apSyslogNotificationsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogNotificationsEnabled.setStatus('current')
if mibBuilder.loadTexts: apSyslogNotificationsEnabled.setDescription('Indicates whether apSyslogMessageGenerated \n\t\tnotifications will or will not be sent when a syslog \n\t\tmessage is generated by the device. Disabling notifications\n\t\tdoes not prevent syslog messages from being added to the \n\t\tapSyslogHistoryTable.')
apSyslogMaxLevel = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 1, 3), SyslogLevel().clone('warning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogMaxLevel.setStatus('current')
if mibBuilder.loadTexts: apSyslogMaxLevel.setDescription('Indicates which syslog severity levels will be\n\t\tprocessed. Any syslog message with a Log-level value\n\t\tgreater than this value will be ignored by the agent.\n\t\tnote: severity numeric values increase as their\n\t\tseverity decreases, e.g. major(3) is more severe than\n\t\tdebug(8).')
apSyslogMsgIgnores = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 1, 4), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogMsgIgnores.setStatus('current')
if mibBuilder.loadTexts: apSyslogMsgIgnores.setDescription('The number of syslog messages which were ignored, means \n\t\tno need to send apSyslog apSyslogMessageGenerated \n\t\tnotification. A message will be ignored if it has a \n\t\tLog-Level value greater than apSyslogMaxSeverity.')
apSyslogMsgDrops = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 1, 5), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogMsgDrops.setStatus('current')
if mibBuilder.loadTexts: apSyslogMsgDrops.setDescription("The number of syslog messages which could not be\n\t\tprocessed due to lack of system resources.  Most\n\t\tlikely this will occur at the same time that syslog\n\t\tmessages are generated to indicate this lack of\n\t\tresources.  Increases in this object's value may serve\n\t\tas an indication that system resource levels should be\n\t\texamined via other mib objects.  A message that is\n\t\tdropped will not appear in the history table and\n\t\tno notification will be sent for this message.")
apSyslogHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2))
apSyslogHistTableMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(1)).setUnits('entries').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogHistTableMaxLength.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistTableMaxLength.setDescription('The upper limit on the number of entries that the\n\t\tapSyslogHistoryTable may contain. A value of 0 will\n\t\tprevent any history from being retained. When this\n\t\ttable is full, the oldest entry will be deleted and\n\t\ta new one will be created.')
apSyslogHistMsgsFlushed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 2), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogHistMsgsFlushed.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistMsgsFlushed.setDescription('The number of entries that have been removed from\n\t\tthe apSyslogHistoryTable in order to make room for new\n\t\tentries.  This object can be utilized to determine\n\t\twhether your polling frequency on the history table\n\t\tis fast enough and/or the size of your history table\n\t\tis large enough such that you are not missing\n\t\tmessages.')
apSyslogHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3), )
if mibBuilder.loadTexts: apSyslogHistoryTable.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistoryTable.setDescription("A table of alarm messages generated by this device.\n\t\tAll 'interesting' alarm messages (i.e. Log-Level <=\n\t\tapSyslogMaxLevel) are entered into this table.\n\n\t\tAn alarm is a special message that can be displayed \n\t\tin a SBC. It is accompanied by a log message and \n\t\ta syslog message. \n\n\t\tAlarm is often associated with an alarm specific SNMP \n\t\ttrap which is triggered when the alarm message is created.\n\n\t\tWhen an alarm is not associated with a particular trap,\n\t\tit can be configured in ACLI to trigger an\n\t\tapSyslogMessageGenerated trap.")
apSyslogHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3, 1), ).setIndexNames((0, "APSYSLOG-MIB", "apSyslogHistIndex"))
if mibBuilder.loadTexts: apSyslogHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistoryEntry.setDescription('An alarm message that was previously generated by this\n\t\tdevice.  Each entry is indexed by a message index.')
apSyslogHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogHistIndex.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistIndex.setDescription('A monotonically increasing integer for the sole\n\t\tpurpose of indexing messages.  When it reaches the\n\t\tmaximum value the agent wraps the value back to 1.')
apSyslogHistFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogHistFrom.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistFrom.setDescription("The process name and host of the sending client.\n\t\tFor example: 'anyclient@sr.acme.com'.")
apSyslogHistLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3, 1, 3), SyslogLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogHistLevel.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistLevel.setDescription('The Log-Level of the message.')
apSyslogHistType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogHistType.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistType.setDescription('A textual identification for the Log-Type, which \n \t       categorizes the log message.')
apSyslogHistContent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogHistContent.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistContent.setDescription('The text of the message.  If the text of the message\n\t\texceeds 255 bytes, the message will be truncated to\n\t\t255 bytes. ')
apSyslogHistTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogHistTimestamp.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistTimestamp.setDescription('The value of sysUpTime when this message was generated.')
apSyslogMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 2))
apSyslogMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 2, 0))
apSyslogMessageGenerated = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 1, 2, 0, 1)).setObjects(("APSYSLOG-MIB", "apSyslogHistFrom"), ("APSYSLOG-MIB", "apSyslogHistLevel"), ("APSYSLOG-MIB", "apSyslogHistType"), ("APSYSLOG-MIB", "apSyslogHistContent"), ("APSYSLOG-MIB", "apSyslogHistTimestamp"))
if mibBuilder.loadTexts: apSyslogMessageGenerated.setStatus('current')
if mibBuilder.loadTexts: apSyslogMessageGenerated.setDescription('When an alarm message is generated by the device an\n\t\tapSyslogMessageGenerated notification is sent if the alarm\n\t\tis not associated with a alarm specific notification.  \n\t\tThe sending of these notifications can be enabled/disabled\n\t\tvia the apSyslogNotificationsEnabled object.')
apSyslogMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 3))
apSyslogMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 3, 1))
apSyslogMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 3, 2))
apSyslogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 1, 3, 2, 1)).setObjects(("APSYSLOG-MIB", "apSyslogNotificationsSent"), ("APSYSLOG-MIB", "apSyslogNotificationsEnabled"), ("APSYSLOG-MIB", "apSyslogMaxLevel"), ("APSYSLOG-MIB", "apSyslogMsgIgnores"), ("APSYSLOG-MIB", "apSyslogMsgDrops"), ("APSYSLOG-MIB", "apSyslogHistTableMaxLength"), ("APSYSLOG-MIB", "apSyslogHistMsgsFlushed"), ("APSYSLOG-MIB", "apSyslogHistIndex"), ("APSYSLOG-MIB", "apSyslogHistFrom"), ("APSYSLOG-MIB", "apSyslogHistLevel"), ("APSYSLOG-MIB", "apSyslogHistType"), ("APSYSLOG-MIB", "apSyslogHistContent"), ("APSYSLOG-MIB", "apSyslogHistTimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSyslogGroup = apSyslogGroup.setStatus('current')
if mibBuilder.loadTexts: apSyslogGroup.setDescription('A collection of objects providing the syslog MIB capability.')
apSyslogNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 1, 3, 2, 2)).setObjects(("APSYSLOG-MIB", "apSyslogMessageGenerated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSyslogNotificationsGroup = apSyslogNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSyslogNotificationsGroup.setDescription('A collection of notifications describing license violation.')
mibBuilder.exportSymbols("APSYSLOG-MIB", apSyslogMessageGenerated=apSyslogMessageGenerated, apSyslogMIBNotificationPrefix=apSyslogMIBNotificationPrefix, apSyslogHistMsgsFlushed=apSyslogHistMsgsFlushed, apSyslogHistory=apSyslogHistory, apSyslogMIBGroups=apSyslogMIBGroups, apSyslogHistTimestamp=apSyslogHistTimestamp, apSyslogMIBConformance=apSyslogMIBConformance, apSyslogNotificationsEnabled=apSyslogNotificationsEnabled, apSyslogNotificationsGroup=apSyslogNotificationsGroup, SyslogLevel=SyslogLevel, apSyslogMsgDrops=apSyslogMsgDrops, apSyslogMIBObjects=apSyslogMIBObjects, apSyslogHistFrom=apSyslogHistFrom, apSyslogHistIndex=apSyslogHistIndex, apSyslogHistType=apSyslogHistType, apSyslogMIBCompliances=apSyslogMIBCompliances, apSyslogHistContent=apSyslogHistContent, apSyslogModule=apSyslogModule, apSyslogHistLevel=apSyslogHistLevel, apSyslogBasic=apSyslogBasic, apSyslogHistoryEntry=apSyslogHistoryEntry, apSyslogHistTableMaxLength=apSyslogHistTableMaxLength, PYSNMP_MODULE_ID=apSyslogModule, apSyslogMaxLevel=apSyslogMaxLevel, apSyslogMIBNotifications=apSyslogMIBNotifications, apSyslogMsgIgnores=apSyslogMsgIgnores, apSyslogNotificationsSent=apSyslogNotificationsSent, apSyslogGroup=apSyslogGroup, apSyslogHistoryTable=apSyslogHistoryTable)
