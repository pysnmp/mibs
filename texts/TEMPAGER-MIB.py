#
# PySNMP MIB module TEMPAGER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/avtech/TEMPAGER-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 11:37:28 2024
# On host fv-az842-370 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, enterprises, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, TimeTicks, Integer32, NotificationType, Gauge32, iso, IpAddress, Counter32, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "enterprises", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "TimeTicks", "Integer32", "NotificationType", "Gauge32", "iso", "IpAddress", "Counter32", "Unsigned32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
avtech = MibIdentifier((1, 3, 6, 1, 4, 1, 20916))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1))
tempager = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 1))
sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 1, 1))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 1, 2))
thresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 1, 3))
temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 1, 1, 1))
tempreading1c = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempreading1c.setStatus('mandatory')
if mibBuilder.loadTexts: tempreading1c.setDescription('Temperature Sensor 1 (Celsius)')
tempreading2c = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempreading2c.setStatus('mandatory')
if mibBuilder.loadTexts: tempreading2c.setDescription('Temperature Sensor 2 (Celsius)')
tempreading3c = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempreading3c.setStatus('mandatory')
if mibBuilder.loadTexts: tempreading3c.setDescription('Temperature Sensor 3 (Celsius)')
tempreading4c = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempreading4c.setStatus('mandatory')
if mibBuilder.loadTexts: tempreading4c.setDescription('Temperature Sensor 4 (Celsius)')
tempreading1f = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempreading1f.setStatus('mandatory')
if mibBuilder.loadTexts: tempreading1f.setDescription('Temperature Sensor 1 (Fahrenheit)')
tempreading2f = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempreading2f.setStatus('mandatory')
if mibBuilder.loadTexts: tempreading2f.setDescription('Temperature Sensor 2 (Fahrenheit)')
tempreading3f = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempreading3f.setStatus('mandatory')
if mibBuilder.loadTexts: tempreading3f.setDescription('Temperature Sensor 3 (Fahrenheit)')
tempreading4f = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempreading4f.setStatus('mandatory')
if mibBuilder.loadTexts: tempreading4f.setDescription('Temperature Sensor 4 (Fahrenheit)')
alarmtemp1 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmtemp1.setStatus('mandatory')
if mibBuilder.loadTexts: alarmtemp1.setDescription('Alarm for temperature 1\n\t\t\t0 = temperature OK\n\t\t\t1 = temperature too high\n\t\t\t2 = temperature too low')
alarmtemp2 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmtemp2.setStatus('mandatory')
if mibBuilder.loadTexts: alarmtemp2.setDescription('Alarm for temperature 2\n\t\t\t0 = temperature OK\n\t\t\t1 = temperature too high\n\t\t\t2 = temperature too low')
alarmtemp3 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmtemp3.setStatus('mandatory')
if mibBuilder.loadTexts: alarmtemp3.setDescription('Alarm for temperature 3\n\t\t\t0 = temperature OK\n\t\t\t1 = temperature too high\n\t\t\t2 = temperature too low')
alarmtemp4 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmtemp4.setStatus('mandatory')
if mibBuilder.loadTexts: alarmtemp4.setDescription('Alarm for temperature 4\n\t\t\t0 = temperature OK\n\t\t\t1 = temperature too high\n\t\t\t2 = temperature too low')
alarmmessage = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmmessage.setStatus('mandatory')
if mibBuilder.loadTexts: alarmmessage.setDescription('Message string to send with trap messages')
upperlimit1 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upperlimit1.setStatus('mandatory')
if mibBuilder.loadTexts: upperlimit1.setDescription('High temperature threshold for temperature sensor 1')
lowerlimit1 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowerlimit1.setStatus('mandatory')
if mibBuilder.loadTexts: lowerlimit1.setDescription('Low temperature threshold for temperature sensor 1')
upperlimit2 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upperlimit2.setStatus('mandatory')
if mibBuilder.loadTexts: upperlimit2.setDescription('High temperature threshold for temperature sensor 2')
lowerlimit2 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowerlimit2.setStatus('mandatory')
if mibBuilder.loadTexts: lowerlimit2.setDescription('Low temperature threshold for temperature sensor 2')
upperlimit3 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upperlimit3.setStatus('mandatory')
if mibBuilder.loadTexts: upperlimit3.setDescription('High temperature threshold for temperature sensor 3')
lowerlimit3 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowerlimit3.setStatus('mandatory')
if mibBuilder.loadTexts: lowerlimit3.setDescription('Low temperature threshold for temperature sensor 3')
upperlimit4 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upperlimit4.setStatus('mandatory')
if mibBuilder.loadTexts: upperlimit4.setDescription('High temperature threshold for temperature sensor 4')
lowerlimit4 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowerlimit4.setStatus('mandatory')
if mibBuilder.loadTexts: lowerlimit4.setDescription('Low temperature threshold for temperature sensor 4')
alarmstart1_t4 = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 1) + (0,1)).setLabel("alarmstart1-t4").setObjects(("TEMPAGER-MIB", "alarmmessage"), ("TEMPAGER-MIB", "tempreading1c"), ("TEMPAGER-MIB", "tempreading1f"))
if mibBuilder.loadTexts: alarmstart1_t4.setDescription('A alarmstart1 trap signifies that the current\n\t\t\ttemperature on sensor 1 is outside the \n\t\t\tdefined high or low threshold.')
tempager_snmp_trap = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 1) + (0,2)).setLabel("tempager-snmp-trap").setObjects(("TEMPAGER-MIB", "alarmmessage"), ("TEMPAGER-MIB", "tempreading1c"), ("TEMPAGER-MIB", "tempreading1f"), ("TEMPAGER-MIB", "tempreading2c"), ("TEMPAGER-MIB", "tempreading2f"), ("TEMPAGER-MIB", "tempreading3c"), ("TEMPAGER-MIB", "tempreading3f"), ("TEMPAGER-MIB", "tempreading4c"), ("TEMPAGER-MIB", "tempreading4f"))
if mibBuilder.loadTexts: tempager_snmp_trap.setDescription('A tempager-snmp-trap indicates that an alarm\n\t\t\tcondition has occurred on the sensor inidcated\n\t\t\tby the alarmmessage variable.')
alarmstart2_t4 = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 1) + (0,3)).setLabel("alarmstart2-t4").setObjects(("TEMPAGER-MIB", "alarmmessage"), ("TEMPAGER-MIB", "tempreading2c"), ("TEMPAGER-MIB", "tempreading2f"))
if mibBuilder.loadTexts: alarmstart2_t4.setDescription('A alarmstart2 trap signifies that the current\n\t\t\ttemperature on sensor 2 is outside the \n\t\t\tdefined high or low threshold.')
alarmclear2_t4 = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 1) + (0,4)).setLabel("alarmclear2-t4").setObjects(("TEMPAGER-MIB", "alarmmessage"), ("TEMPAGER-MIB", "tempreading2c"), ("TEMPAGER-MIB", "tempreading2f"))
if mibBuilder.loadTexts: alarmclear2_t4.setDescription('A alarmclear2 trap signifies that the current\n\t\t\ttemperature on sensor 2 has returned to a \n\t\t\tnormal condition and is within the defined \n\t\t\thigh or low threshold.')
alarmstart3_t4 = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 1) + (0,5)).setLabel("alarmstart3-t4").setObjects(("TEMPAGER-MIB", "alarmmessage"), ("TEMPAGER-MIB", "tempreading3c"), ("TEMPAGER-MIB", "tempreading3f"))
if mibBuilder.loadTexts: alarmstart3_t4.setDescription('A alarmstart3 trap signifies that the current\n\t\t\ttemperature on sensor 3 is outside the \n\t\t\tdefined high or low threshold.')
alarmclear3_t4 = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 1) + (0,6)).setLabel("alarmclear3-t4").setObjects(("TEMPAGER-MIB", "alarmmessage"), ("TEMPAGER-MIB", "tempreading3c"), ("TEMPAGER-MIB", "tempreading3f"))
if mibBuilder.loadTexts: alarmclear3_t4.setDescription('A alarmclear3 trap signifies that the current\n\t\t\ttemperature on sensor 3 has returned to a \n\t\t\tnormal condition and is within the defined \n\t\t\thigh or low threshold.')
alarmstart4_t4 = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 1) + (0,7)).setLabel("alarmstart4-t4").setObjects(("TEMPAGER-MIB", "alarmmessage"), ("TEMPAGER-MIB", "tempreading4c"), ("TEMPAGER-MIB", "tempreading4f"))
if mibBuilder.loadTexts: alarmstart4_t4.setDescription('A alarmstart4 trap signifies that the current\n\t\t\ttemperature on sensor 4 is outside the \n\t\t\tdefined high or low threshold.')
alarmclear4_t4 = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 1) + (0,8)).setLabel("alarmclear4-t4").setObjects(("TEMPAGER-MIB", "alarmmessage"), ("TEMPAGER-MIB", "tempreading4c"), ("TEMPAGER-MIB", "tempreading4f"))
if mibBuilder.loadTexts: alarmclear4_t4.setDescription('A alarmclear4 trap signifies that the current\n\t\t\ttemperature on sensor 4 has returned to a \n\t\t\tnormal condition and is within the defined \n\t\t\thigh or low threshold.')
mibBuilder.exportSymbols("TEMPAGER-MIB", upperlimit3=upperlimit3, thresholds=thresholds, tempreading1f=tempreading1f, upperlimit1=upperlimit1, alarmmessage=alarmmessage, alarmstart3_t4=alarmstart3_t4, lowerlimit2=lowerlimit2, alarmtemp4=alarmtemp4, tempager=tempager, tempreading3f=tempreading3f, alarmclear3_t4=alarmclear3_t4, tempreading4f=tempreading4f, products=products, alarmtemp3=alarmtemp3, alarmstart4_t4=alarmstart4_t4, alarmclear4_t4=alarmclear4_t4, alarmtemp1=alarmtemp1, tempreading2f=tempreading2f, alarmstart1_t4=alarmstart1_t4, sensors=sensors, tempager_snmp_trap=tempager_snmp_trap, lowerlimit1=lowerlimit1, avtech=avtech, traps=traps, temperature=temperature, lowerlimit3=lowerlimit3, tempreading4c=tempreading4c, tempreading2c=tempreading2c, lowerlimit4=lowerlimit4, alarmtemp2=alarmtemp2, tempreading3c=tempreading3c, tempreading1c=tempreading1c, upperlimit4=upperlimit4, alarmclear2_t4=alarmclear2_t4, upperlimit2=upperlimit2, alarmstart2_t4=alarmstart2_t4)
