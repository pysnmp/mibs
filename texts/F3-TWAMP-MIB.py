#
# PySNMP MIB module F3-TWAMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-TWAMP-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:17:50 2024
# On host fv-az1766-862 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
OperationalState, CmPmBinAction, PerfCounter64, VlanId, AdminState, IpVersion, VlanPriority, SecondaryState = mibBuilder.importSymbols("CM-COMMON-MIB", "OperationalState", "CmPmBinAction", "PerfCounter64", "VlanId", "AdminState", "IpVersion", "VlanPriority", "SecondaryState")
neIndex, = mibBuilder.importSymbols("CM-ENTITY-MIB", "neIndex")
IpMode, = mibBuilder.importSymbols("CM-IP-MIB", "IpMode")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, Integer32, NotificationType, Counter32, iso, Bits, TimeTicks, Counter64, ObjectIdentity, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "NotificationType", "Counter32", "iso", "Bits", "TimeTicks", "Counter64", "ObjectIdentity", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32")
DateAndTime, MacAddress, RowStatus, VariablePointer, TruthValue, DisplayString, TextualConvention, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "MacAddress", "RowStatus", "VariablePointer", "TruthValue", "DisplayString", "TextualConvention", "StorageType")
f3TwampMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33))
f3TwampMIB.setRevisions(('2019-12-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3TwampMIB.setRevisionsDescriptions(('\n         Notes from release 201912010000Z\n         (1) Added f3TwampControlClientSessionType,\n             f3TwampSessionSenderStopTimeType\n             \n         Notes from release 201402250000Z,\n         (1) First version: Only with Responder-side tables.',))
if mibBuilder.loadTexts: f3TwampMIB.setLastUpdated('201912010000Z')
if mibBuilder.loadTexts: f3TwampMIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: f3TwampMIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: f3TwampMIB.setDescription('This module defines the TWAMP MIB definitions \n             used by the F3 (FSP150CM/CC) product lines.\n             Copyright (C) ADVA.')
f3TwampConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1))
f3TwampCounterObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 2))
f3TwampActionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 3))
f3TwampConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4))
f3TwampNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 5))
class TwampControlClientStatus(TextualConvention, Integer32):
    description = 'TWAMP Control Client entity state machine status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("init", 1), ("twampControlDisabled", 2), ("twampControlEnabled", 3), ("waitForConnectionAck", 4))

class TwampServerStatus(TextualConvention, Integer32):
    description = 'TWAMP Server entity state machine status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("init", 1), ("twampControlDisabled", 2), ("twampControlEnabled", 3))

class TwampClientConnStatus(TextualConvention, Integer32):
    description = 'TWAMP Control Client Connection entity state machine status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("init", 1), ("waitingForServerGreeting", 2), ("waitingForServerStart", 3), ("requestSessions", 4), ("waitingForStartAck", 5), ("testInProgress", 6), ("waitingForTestCompletions", 7))

class TwampServerConnStatus(TextualConvention, Integer32):
    description = 'TWAMP Server Connection entity state machine status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("init", 1), ("waitingForSessions", 2), ("testInProgress", 3), ("waitingForSessionIntransitTimeouts", 4), ("end", 5))

class TwampSessionSenderStatus(TextualConvention, Integer32):
    description = 'TWAMP Session Sender entity state machine status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("init", 1), ("idle", 2), ("testInProgress", 3), ("waitingForTestCompletion", 4))

class TwampSessionReflectorStatus(TextualConvention, Integer32):
    description = 'TWAMP Session Reflector entity state machine status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("init", 1), ("testReady", 2), ("waitingForIntransitTimeout", 3), ("end", 4))

class TwampSessionStatus(TextualConvention, Integer32):
    description = 'TWAMP Reflector Session entity state machine status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("init", 1), ("testInProgress", 2), ("idle", 3))

class TwampPktSchedType(TextualConvention, Integer32):
    description = 'TWAMP Packet Scheduling involves multiple slots and each slot\n         can be fixed packet interval or exponential pseudo random packet\n         interval.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("fixed", 1), ("expPseudoRandom", 2))

class TwampTestPattern(TextualConvention, Integer32):
    description = 'TWAMP test packet payload pattern:\n            allZeros - TWAMP Test packet payload shall be all ZEROs'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("allZeros", 1))

class TwampPmIntervalType(TextualConvention, Integer32):
    description = 'TWAMP PM Interval Types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("curr", 1), ("rollover", 2))

class TwampHistoryIntervalType(TextualConvention, Integer32):
    description = 'TWAMP Performance Monitoring interval type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("interval1min", 1), ("interval5min", 2), ("interval10min", 3), ("interval15min", 4), ("interval60min", 5))

class TwampDistStatsType(TextualConvention, Integer32):
    description = 'Indicates the TWAMP Statistics Distribution Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("twoWayPd", 1), ("oneWayS2RPd", 2), ("oneWayR2SPd", 3), ("oneWayS2RPdv", 4), ("oneWayR2SPdv", 5))

class TwampStartTimeType(TextualConvention, Integer32):
    description = 'TWAMP Test Session start time type:\n            immediate - This indicates to start now\n            relative - This is the time relative to current time\n            fixed - This is the absolute wall clock start time'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("immediate", 1), ("relative", 2), ("fixed", 3))

class TwampServerAction(TextualConvention, Integer32):
    description = 'User action initiated on Twamp Server'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noAction", 1), ("addSessReflector", 2), ("rmvSessReflector", 3))

class TwampControlClientAction(TextualConvention, Integer32):
    description = 'User action initiated on Twamp Control Client'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("noAction", 1), ("addSessSender", 2), ("rmvSessSender", 3), ("startSessions", 4), ("stopSessions", 5))

class TwampSessionAction(TextualConvention, Integer32):
    description = 'User action initiated on Twamp Session'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("noAction", 1), ("clearSequenceNumber", 2))

class TwampSessionType(TextualConvention, Integer32):
    description = 'The Twamp session type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("onDemand", 1), ("proactive", 2))

class TwampStopTimeType(TextualConvention, Integer32):
    description = 'The Twamp session type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("testPacketCount", 1), ("forever", 2))

f3TwampIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 1), )
if mibBuilder.loadTexts: f3TwampIpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfaceTable.setDescription('A list of entries corresponding to TWAMP IP Interfaces\n             that are used for the TWAMP. These IP interfaces facilitate\n             generation and reception of TWAMP Control and Test packets.')
f3TwampIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 1, 1), ).setIndexNames((0, "F3-TWAMP-MIB", "f3TwampIpInterfaceName"))
if mibBuilder.loadTexts: f3TwampIpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfaceEntry.setDescription('A conceptual row in the f3TwampIpInterfaceTable.')
f3TwampIpInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: f3TwampIpInterfaceName.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfaceName.setDescription('Name of the TWAMP IP interface.')
f3TwampIpInterfacePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 1, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampIpInterfacePort.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfacePort.setDescription('This is the physical or logical port on which the TWAMP\n        IP Interface is associated with.')
f3TwampIpInterfaceIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 1, 1, 3), IpMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampIpInterfaceIpMode.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfaceIpMode.setDescription('This object is the ipmode of TWAMP IP Interface and indicates if\n        the interface is IPv4-only or IPv4-and-IPv6.\n        Currently it is read-only and will be set to IPv4 Only.')
f3TwampIpInterfaceIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampIpInterfaceIpv4Address.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfaceIpv4Address.setDescription('IPv4 Address of the TWAMP IP Interface.')
f3TwampIpInterfaceIpv4Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampIpInterfaceIpv4Mask.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfaceIpv4Mask.setDescription('IPv4 Mask of the TWAMP IP Interface.')
f3TwampIpInterfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(69, 9620)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampIpInterfaceMtu.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfaceMtu.setDescription('TWAMP IP Interface MTU.')
f3TwampIpInterfaceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 1, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampIpInterfaceStorageType.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfaceStorageType.setDescription('The type of storage configured for this entry.')
f3TwampIpInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampIpInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfaceRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n          active state unless all objects in the entry have an \n          appropriate value, as described\n          in the description clause for each writable object.\n\n          The values of f3TwampIpInterfaceRowStatus supported are\n          createAndGo(4) and destroy(6).  All mandatory attributes\n          must be specified in a single SNMP SET request with\n          f3TwampIpInterfaceRowStatus value as createAndGo(4).\n          Upon successful row creation, this object has a\n          value of active(1).\n          \n          The f3TwampIpInterfaceRowStatus object may be modified if\n          the associated instance of this object is equal to active(1).')
f3TwampIpInterfaceIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 1, 1, 9), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampIpInterfaceIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfaceIpv6Addr.setDescription('IPv6 Address of the TWAMP IP Interface.')
f3TwampIpInterfaceIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampIpInterfaceIpv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfaceIpv6PrefixLen.setDescription('IPv6 address prefix length of the TWAMP IP Interface.')
f3TwampIpInterfaceIpv6LinkLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 1, 1, 11), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampIpInterfaceIpv6LinkLocalAddr.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfaceIpv6LinkLocalAddr.setDescription('IPv6 link local address of the TWAMP IP Interface.')
f3TwampIpInterfaceIpv6LinkLocalAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampIpInterfaceIpv6LinkLocalAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfaceIpv6LinkLocalAddrPrefixLen.setDescription('IPv6 link local address prefix length of the TWAMP IP Interface.')
f3TwampServerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2), )
if mibBuilder.loadTexts: f3TwampServerTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerTable.setDescription('A list of entries corresponding to TWAMP Server entities.\n             This entity performs the functions of TWAMP Server when TWAMP\n             Control protocol is enabled as defined in RFC 5357. This entity\n             is created even when TWAMP Control is disabled as a container\n             for Session Reflectors.')
f3TwampServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampServerIndex"))
if mibBuilder.loadTexts: f3TwampServerEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerEntry.setDescription('A conceptual row in the f3TwampServerTable.')
f3TwampServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)))
if mibBuilder.loadTexts: f3TwampServerIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerIndex.setDescription('An integer index value used to uniquely identify\n             a TWAMP Server under the NE.')
f3TwampServerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2, 1, 2), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampServerAdminState.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerAdminState.setDescription('All the state related attributes are added to support this entity\n        being in outage state. But AdminState is always InService and is\n        not editable.')
f3TwampServerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampServerOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerOperationalState.setDescription('Operational state can take Normal or Outage. When the TWAMP entity\n        is operational then this is Normal. In some situations like a Card\n        is unplugged and TWAMP entity is not operational this attribute goes\n        to Outage state.')
f3TwampServerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampServerSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerSecondaryState.setDescription('Secondary state can be Active or SGEO. When Operational state is\n        Normal this is Active. When Operational State is Outage then this\n        is SGEO.')
f3TwampServerAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampServerAlias.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerAlias.setDescription('An alias associated with the TWAMP Server.')
f3TwampServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2, 1, 6), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampServerPort.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerPort.setDescription('This is the physical or logical port on which the Server and the\n        corresponding Session Reflectors are associated with.')
f3TwampServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2, 1, 7), TwampServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampServerStatus.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerStatus.setDescription('This indicates the current state of the Server state machine.')
f3TwampServerSessionIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2, 1, 8), Unsigned32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampServerSessionIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerSessionIdleTimeout.setDescription('When a TWAMP Test packet Is not received for this timeout period the\n        TWAMP Session will go to IDLE state where Aging timer is started. This\n        time is specified in seconds.')
f3TwampServerSessionAgingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2, 1, 9), Unsigned32().clone(900)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampServerSessionAgingTimeout.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerSessionAgingTimeout.setDescription('After a Session goes into IDLE state this timer with this timeout\n        is started and on expiry the Session will terminate. This\n        time is specified in seconds.')
f3TwampServerActionObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampServerActionObject.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerActionObject.setDescription('Object identfier used to specify the OID of a Session Reflector on which \n          f3TwampServerAction should occur. Applicable for addSessReflector \n          and rmvSessReflector actions.')
f3TwampServerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2, 1, 11), TwampServerAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampServerAction.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerAction.setDescription('User action performed on this Twamp Server instance.\n          For addSessReflector and rmvSessReflector actions \n          f3TwampServerActionObject has to be specified prior \n          to setting this object.')
f3TwampServerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2, 1, 12), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampServerStorageType.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerStorageType.setDescription('The type of storage configured for this entry.')
f3TwampServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n          active state unless all objects in the entry have an \n          appropriate value, as described\n          in the description clause for each writable object.\n\n          The values of f3TwampServerRowStatus supported are\n          createAndGo(4) and destroy(6).  All mandatory attributes\n          must be specified in a single SNMP SET request with\n          f3TwampServerRowStatus value as createAndGo(4).\n          Upon successful row creation, this object has a\n          value of active(1).\n          \n          The f3TwampServerRowStatus object may be modified if\n          the associated instance of this object is equal to active(1).')
f3TwampServerSessionReflectorTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 3), )
if mibBuilder.loadTexts: f3TwampServerSessionReflectorTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerSessionReflectorTable.setDescription('A list of entries corresponding to Session Reflector entities\n             associated with a TWAMP Server.')
f3TwampServerSessionReflectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampServerIndex"), (0, "F3-TWAMP-MIB", "f3TwampServerSessionReflectorIndex"))
if mibBuilder.loadTexts: f3TwampServerSessionReflectorEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerSessionReflectorEntry.setDescription('A conceptual row in the f3TwampServerSessionReflectorTable.')
f3TwampServerSessionReflectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)))
if mibBuilder.loadTexts: f3TwampServerSessionReflectorIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerSessionReflectorIndex.setDescription('A unique index identifying the Session Reflector that is added to the Server.\n        Note that this is not f3TwampSessionReflectorIndex.')
f3TwampServerSessionReflector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 3, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampServerSessionReflector.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerSessionReflector.setDescription('This is the pointer to the Session Reflector added to the Server.')
f3TwampSessionReflectorTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4), )
if mibBuilder.loadTexts: f3TwampSessionReflectorTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorTable.setDescription('A list of entries corresponding to TWAMP Session Reflector entities.\n        This entity performs the functions of TWAMP Session Reflector which\n        is to reflect TWAMP Test packets.')
f3TwampSessionReflectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionReflectorIndex"))
if mibBuilder.loadTexts: f3TwampSessionReflectorEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorEntry.setDescription('A conceptual row in the f3TwampSessionReflectorTable.')
f3TwampSessionReflectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)))
if mibBuilder.loadTexts: f3TwampSessionReflectorIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorIndex.setDescription('An integer index value used to uniquely identify\n             a TWAMP Session Reflector under the NE.')
f3TwampSessionReflectorAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4, 1, 2), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionReflectorAdminState.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorAdminState.setDescription('All the state related attributes are added to support this entity\n        being in outage state. But AdminState is always InService and is\n        not editable.')
f3TwampSessionReflectorOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionReflectorOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorOperationalState.setDescription('Operational state can take Normal or Outage. When the TWAMP entity\n        is operational then this is Normal. In some situations like a Card\n        is unplugged and TWAMP entity is not operational this attribute goes\n        to Outage state.')
f3TwampSessionReflectorSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionReflectorSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorSecondaryState.setDescription('Secondary state can be Active or SGEO. When Operational state is\n        Normal this is Active. When Operational State is Outage then this\n        is SGEO.')
f3TwampSessionReflectorAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionReflectorAlias.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorAlias.setDescription('An alias associated with the TWAMP Session Reflector.')
f3TwampSessionReflectorIpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionReflectorIpInterface.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorIpInterface.setDescription('This is the IP interface used by SessionReflector.\n        Session Reflector may use the same IP interface as any Control Client,\n        Server, Session Sender or Session Reflector in the system as long as\n        it has a unique UDP port.')
f3TwampSessionReflectorUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionReflectorUdpPort.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorUdpPort.setDescription('This is the UDP Port used by the Session Reflector for TWAMP Test.\n        The Combination of f3TwampSessionReflectorIpInterface and \n        f3TwampSessionReflectorUdpPort shall be unique amongst all\n        Session Senders and Session Reflectors on the system.')
f3TwampSessionReflectorUseSenderSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionReflectorUseSenderSeqNum.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorUseSenderSeqNum.setDescription('TWAMP Light suggests that if the Session Reflector does not have\n        the knowledge of the session state the Reflector has to copy the\n        received sequence number into the Sequence Number field of the\n        reflected TWAMP Test packet.\n        This option is used if the Session Reflector is associated\n        with a TwampServer which has f3TwampServerControlEnabled to true.\n        If this is set to FALSE, the Session Reflector shall use its\n        sequence number which is not reset until it rolls over.\n        But there is an option for user to clear the sequence number.')
f3TwampSessionReflectorUserCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionReflectorUserCreated.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorUserCreated.setDescription('When Session Reflector is created by the user this attribute will\n        be set to true. If the Session Reflector is created as a consequence\n        of Session request from the Control Client the Session Reflector is\n        created by Server and this attribute is set to false.')
f3TwampSessionReflectorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4, 1, 10), TwampSessionReflectorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionReflectorStatus.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorStatus.setDescription('This indicates the current state of the Session Reflector state\n        machine.')
f3TwampSessionReflectorAssocServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4, 1, 11), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionReflectorAssocServer.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorAssocServer.setDescription('This is the pointer to the associated TWAMP Server.')
f3TwampSessionReflectorStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4, 1, 12), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionReflectorStorageType.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorStorageType.setDescription('The type of storage configured for this entry.')
f3TwampSessionReflectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 4, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionReflectorRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n          active state unless all objects in the entry have an \n          appropriate value, as described\n          in the description clause for each writable object.\n\n          The values of f3TwampSessionReflectorRowStatus supported are\n          createAndGo(4) and destroy(6).  All mandatory attributes\n          must be specified in a single SNMP SET request with\n          f3TwampSessionReflectorRowStatus value as createAndGo(4).\n          Upon successful row creation, this object has a\n          value of active(1).\n          \n          The f3TwampSessionReflectorRowStatus object may be modified if\n          the associated instance of this object is equal to active(1).')
f3TwampSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5), )
if mibBuilder.loadTexts: f3TwampSessionTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionTable.setDescription('A list of entries corresponding to TWAMP Session entities.\n        This entity represents a TWAMP Test session between a remote\n        Session Sender and a local Session Reflector.')
f3TwampSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionReflectorIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionSsIpv4Address"), (0, "F3-TWAMP-MIB", "f3TwampSessionSsUdpPort"))
if mibBuilder.loadTexts: f3TwampSessionEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionEntry.setDescription('A conceptual row in the f3TwampSessionTable.')
f3TwampSessionSsIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: f3TwampSessionSsIpv4Address.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSsIpv4Address.setDescription('IPv4 Address of the remote Session Sender. This with the\n        f3TwampSessionUdpPort uniquely identifies a TWAMP test session\n        between a remote Session Sender and local Session Reflector.')
f3TwampSessionSsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3TwampSessionSsUdpPort.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSsUdpPort.setDescription('This is the UDP Port of the remote Session Sender. This with the\n        f3TwampSessionIpv4Address uniquely identifies a TWAMP test session\n        between a remote Session Sender and local Session Reflector.')
f3TwampSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1, 3), TwampSessionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionStatus.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionStatus.setDescription('This indicates the current state of the TWAMP Session state machine.')
f3TwampSessionVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionVlanEnabled.setDescription('This indicates if the received TWAMP test packets have a VLAN Tag.')
f3TwampSessionOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionOuterVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionOuterVlanEtherType.setDescription('This is the VLAN Tag Ethertype (TPID) of the outer VLAN tag\n            of the received TWAMP test packets.')
f3TwampSessionOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1, 6), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionOuterVlanId.setDescription('This is the outer VLAN ID of the received TWAMP test packets.')
f3TwampSessionOuterVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1, 7), VlanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionOuterVlanPriority.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionOuterVlanPriority.setDescription('This is the outer VLAN Priority of the received TWAMP test packets.')
f3TwampSessionInnerVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionInnerVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionInnerVlanEnabled.setDescription('This indicates if the received TWAMP test packets have an inner\n            VLAN tag.')
f3TwampSessionInnerVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionInnerVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionInnerVlanEtherType.setDescription('This is the VLAN Tag Ethertype (TPID) of the inner VLAN tag\n            of the received TWAMP test packets.')
f3TwampSessionInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1, 10), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionInnerVlanId.setDescription('This is the inner VLAN ID of the received TWAMP test packets.')
f3TwampSessionInnerVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1, 11), VlanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionInnerVlanPriority.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionInnerVlanPriority.setDescription('This is the inner VLAN Priority of the received TWAMP test packets.')
f3TwampSessionDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionDscpValue.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionDscpValue.setDescription('This is the DSCP value in the received TWAMP test packets.')
f3TwampSessionSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSequenceNumber.setDescription('This is the receive side sequence number that is set in the\n            reflected TWAMP Test packet. This is incremented for each\n            reflected TWAMP Test packet.')
f3TwampSessionAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 5, 1, 14), TwampSessionAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampSessionAction.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionAction.setDescription('This is the user action performed on this TWAMP Session instance.')
f3TwampControlClientTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 6), )
if mibBuilder.loadTexts: f3TwampControlClientTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientTable.setDescription('A list of entries corresponding to TWAMP Control Client entities.\n             This entity performs the functions of TWAMP Control Client when TWAMP\n             Control protocol is enabled as defined in RFC 5357. This entity\n             is created even when TWAMP Control is disabled as a container\n             for Session Senders.')
f3TwampControlClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampControlClientIndex"))
if mibBuilder.loadTexts: f3TwampControlClientEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientEntry.setDescription('A conceptual row in the f3TwampControlClientTable.')
f3TwampControlClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)))
if mibBuilder.loadTexts: f3TwampControlClientIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientIndex.setDescription('An integer index value used to uniquely identify\n             a TWAMP Control Client under the NE.')
f3TwampControlClientAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 6, 1, 2), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampControlClientAdminState.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientAdminState.setDescription('All the state related attributes are added to support this entity\n        being in outage state. But AdminState is always InService and is\n        not editable.')
f3TwampControlClientOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 6, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampControlClientOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientOperationalState.setDescription('Operational state can take Normal or Outage. When the TWAMP entity\n        is operational then this is Normal. In some situations like a Card\n        is unplugged and TWAMP entity is not operational this attribute goes\n        to Outage state.')
f3TwampControlClientSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 6, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampControlClientSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientSecondaryState.setDescription('Secondary state can be Active or SGEO. When Operational state is\n        Normal this is Active. When Operational State is Outage then this\n        is SGEO.')
f3TwampControlClientAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampControlClientAlias.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientAlias.setDescription('An alias associated with the TWAMP Control Client.')
f3TwampControlClientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 6, 1, 6), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampControlClientPort.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientPort.setDescription('This is the physical or logical port on which the Control Client and the\n        corresponding Session Senders are associated with.')
f3TwampControlClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 6, 1, 7), TwampControlClientStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampControlClientStatus.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientStatus.setDescription('This indicates the current state of the Control Client state machine.')
f3TwampControlClientActionObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 6, 1, 8), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampControlClientActionObject.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientActionObject.setDescription('Object identfier used to specify the OID of a Session Sender on which \n          f3TwampControlClientAction should occur. Applicable for addSessSender \n          and rmvSessSender actions.')
f3TwampControlClientAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 6, 1, 9), TwampControlClientAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampControlClientAction.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientAction.setDescription('User action performed on this Twamp Control Client instance.\n          For addSessSender and rmvSessSender actions \n          f3TwampControlClientActionObject has to be specified prior \n          to setting this object.')
f3TwampControlClientStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 6, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampControlClientStorageType.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientStorageType.setDescription('The type of storage configured for this entry.')
f3TwampControlClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 6, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampControlClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n          active state unless all objects in the entry have an \n          appropriate value, as described\n          in the description clause for each writable object.\n\n          The values of f3TwampControlClientRowStatus supported are\n          createAndGo(4) and destroy(6).  All mandatory attributes\n          must be specified in a single SNMP SET request with\n          f3TwampControlClientRowStatus value as createAndGo(4).\n          Upon successful row creation, this object has a\n          value of active(1).\n          \n          The f3TwampControlClientRowStatus object may be modified if\n          the associated instance of this object is equal to active(1).')
f3TwampControlClientSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 6, 1, 12), TwampSessionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampControlClientSessionType.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientSessionType.setDescription('It is the twamp session type.')
f3TwampControlClientSessionSenderTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 7), )
if mibBuilder.loadTexts: f3TwampControlClientSessionSenderTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientSessionSenderTable.setDescription('A list of entries corresponding to Session Sender entities\n             associated with a TWAMP Control Client.')
f3TwampControlClientSessionSenderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampControlClientIndex"), (0, "F3-TWAMP-MIB", "f3TwampControlClientSessionSenderIndex"))
if mibBuilder.loadTexts: f3TwampControlClientSessionSenderEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientSessionSenderEntry.setDescription('A conceptual row in the f3TwampControlClientSessionSenderTable.')
f3TwampControlClientSessionSenderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)))
if mibBuilder.loadTexts: f3TwampControlClientSessionSenderIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientSessionSenderIndex.setDescription('A unique index identifying the Session Sender that is added to the Control Client.\n        Note that this is not f3TwampSessionSenderIndex.')
f3TwampControlClientSessionSender = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 7, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampControlClientSessionSender.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientSessionSender.setDescription('This is the pointer to the Session Sender added to the Control Client.')
f3TwampSessionSenderTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8), )
if mibBuilder.loadTexts: f3TwampSessionSenderTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderTable.setDescription('A list of entries corresponding to TWAMP Session Sender entities.\n        This entity performs the functions of TWAMP Session Sender which\n        is to send TWAMP Test packets.')
f3TwampSessionSenderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionSenderIndex"))
if mibBuilder.loadTexts: f3TwampSessionSenderEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderEntry.setDescription('A conceptual row in the f3TwampSessionSenderTable.')
f3TwampSessionSenderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)))
if mibBuilder.loadTexts: f3TwampSessionSenderIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderIndex.setDescription('An integer index value used to uniquely identify\n             a TWAMP Session Sender under the NE.')
f3TwampSessionSenderAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 2), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionSenderAdminState.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderAdminState.setDescription('All the state related attributes are added to support this entity\n        being in outage state. But AdminState is always InService and is\n        not editable.')
f3TwampSessionSenderOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionSenderOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderOperationalState.setDescription('Operational state can take Normal or Outage. When the TWAMP entity\n        is operational then this is Normal. In some situations like a Card\n        is unplugged and TWAMP entity is not operational this attribute goes\n        to Outage state.')
f3TwampSessionSenderSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionSenderSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderSecondaryState.setDescription('Secondary state can be Active or SGEO. When Operational state is\n        Normal this is Active. When Operational State is Outage then this\n        is SGEO.')
f3TwampSessionSenderAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderAlias.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderAlias.setDescription('An alias associated with the TWAMP Session Sender.')
f3TwampSessionSenderIpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderIpInterface.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderIpInterface.setDescription('This is the IP interface used by Session Sender.\n        Session Sender may use the same IP interface as any Control Client,\n        Server, Session Sender or Session Sender in the system as long as\n        it has a unique UDP port.')
f3TwampSessionSenderUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderUdpPort.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderUdpPort.setDescription('This is the UDP Port used by the Session Sender for TWAMP Test.\n        The Combination of f3TwampSessionSenderIpInterface and \n        f3TwampSessionSenderUdpPort shall be unique amongst all \n        Session Senders and Session Reflectors on the system.')
f3TwampSessionSenderPktSchedTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600000)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderPktSchedTimeInterval.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderPktSchedTimeInterval.setDescription('This is the time interval between TWAMP-Test packets.')
f3TwampSessionSenderSrIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderSrIpv4Address.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderSrIpv4Address.setDescription('This is the IPv4 address of the Session Reflector.')
f3TwampSessionSenderSrUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderSrUdpPort.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderSrUdpPort.setDescription('This is the UDP Port recommended by the Session Sender\n       for the Session Reflector for TWAMP Test.')
f3TwampSessionSenderDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderDscpValue.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderDscpValue.setDescription('This is the TWAMP Test packet DSCP value to be used in the IP header.\n       This is read-create when the TWAMP Control is disabled. When TWAMP\n       Control is enabled this will be read-only and will have the same as\n       the DSCP value of the Control Client.')
f3TwampSessionSenderNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderNumPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderNumPkts.setDescription('This is the number TWAMP test packets to send for test session.')
f3TwampSessionSenderPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(79, 9242))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderPktSize.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderPktSize.setDescription('This is the size of the TWAMP test packet. For unauthenticated mode,\n       Minimum is the 18 (Eth Hdr) + 20 (IP Hdr) + 41 (TWAMP) Bytes.\n       The TWAMP test packet will be padded to the specified size.')
f3TwampSessionSenderTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 14), TwampTestPattern()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionSenderTestPattern.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderTestPattern.setDescription('This the pattern of the bytes in the padding of the TWAMP Test packet.')
f3TwampSessionSenderStartTimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 15), TwampStartTimeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderStartTimeType.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderStartTimeType.setDescription('This indicates the start time type which tells how to interpret\n       the start time attribute.\n       \n       If IMMEDIATE, f3TwampSessionSenderStartTime is not applicable\n       If RELATIVE, f3TwampSessionSenderStartTime is the relative to current time\n       If FIXED, f3TwampSessionSenderStartTime is the wall clock start time')
f3TwampSessionSenderStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 16), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(10, 10), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderStartDate.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderStartDate.setDescription('This is the date part of the Session Sender start time. When TWAMP Control\n       is enabled, the Date and Time are converted to the NTP timestamp format as\n       defined in RFC 1305 [REF13] to send in Request-TW-Session message. \n       The first 32 bits are the seconds since 0h Jan 1 1900 and the second 32 bits\n       is the fractional second and is the number of units of 200 picoseconds.\n       \n       If f3TwampSessionSenderStartTimeType is IMMEDIATE, this attribute is not applicable.\n       If f3TwampSessionSenderStartTimeType is RELATIVE, this attribute is not applicable.\n       If f3TwampSessionSenderStartTimeType is FIXED, this attribute is the date\n       when to start the test.')
f3TwampSessionSenderStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 17), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderStartTime.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderStartTime.setDescription('This is the time part of the Session Sender start time. When TWAMP Control\n       is enabled, the Date and Time are converted to the NTP timestamp format as\n       defined in RFC 1305 [REF13] to send in Request-TW-Session message. \n       The first 32 bits are the seconds since 0h Jan 1 1900 and the second 32 bits\n       is the fractional second and is the number of units of 200 picoseconds.\n       \n       If f3TwampSessionSenderStartTimeType is IMMEDIATE, this attribute is not applicable.\n       If f3TwampSessionSenderStartTimeType is RELATIVE, this attribute is not applicable.\n       If f3TwampSessionSenderStartTimeType is FIXED, this attribute is the time\n       when to start the test.')
f3TwampSessionSenderRespTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderRespTimeout.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderRespTimeout.setDescription('This is how much time the Session Sender will wait for the response to a\n       TWAMP Test packet. In effect the TWAMP Test is complete after Test\n       Duration + Response Timeout.')
f3TwampSessionSenderVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderVlanEnabled.setDescription('This indicates whether the TWAMP Test packets are tagged or not.')
f3TwampSessionSenderOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 20), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderOuterVlanId.setDescription('This specifies the outer VLAN ID. This is applicable if \n       f3TwampSessionSenderVlanEnabled is true.')
f3TwampSessionSenderOuterVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 21), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderOuterVlanPriority.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderOuterVlanPriority.setDescription('This specifies the outer VLAN priority. This is applicable if \n       f3TwampSessionSenderVlanEnabled is true.')
f3TwampSessionSenderOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderOuterVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderOuterVlanEtherType.setDescription('This specifies the outer VLAN tag Ethertype/TPID. This is applicable if \n       f3TwampSessionSenderVlanEnabled is true.')
f3TwampSessionSenderInnerVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderInnerVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderInnerVlanEnabled.setDescription('This indicates whether the TWAMP Test packets are double tagged or not.\n       This is applicable only if f3TwampSessionSenderVlanEnabled is true.')
f3TwampSessionSenderInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 24), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderInnerVlanId.setDescription('This specifies the inner VLAN ID. This is applicable if \n       f3TwampSessionSenderInnerVlanEnabled is true.')
f3TwampSessionSenderInnerVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 25), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderInnerVlanPriority.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderInnerVlanPriority.setDescription('This specifies the inner VLAN priority. This is applicable if \n       f3TwampSessionSenderInnerVlanEnabled is true.')
f3TwampSessionSenderInnerVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 26), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderInnerVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderInnerVlanEtherType.setDescription('This specifies the outer VLAN tag Ethertype/TPID. This is applicable if \n       f3TwampSessionSenderInnerVlanEnabled is true.')
f3TwampSessionSenderSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionSenderSeqNumber.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderSeqNumber.setDescription('This is the session sender sequence number that is set in the generated\n       TWAMP Test packet.')
f3TwampSessionSenderStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 28), TwampSessionSenderStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionSenderStatus.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderStatus.setDescription('This indicates the current state of the Session Sender state machine.')
f3TwampSessionSenderAssocControlClient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 29), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionSenderAssocControlClient.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderAssocControlClient.setDescription('This is the pointer to the associated TWAMP Control Client.')
f3TwampSessionSenderHistoryBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 30), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderHistoryBins.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderHistoryBins.setDescription('This object allows specification of number of history bins.\n       This is the total history data that will be maintained\n       for a Session Sender run, at any instance.')
f3TwampSessionSenderHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 31), TwampHistoryIntervalType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderHistoryInterval.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderHistoryInterval.setDescription('This object allows specification of the history interval\n       period.')
f3TwampSessionSenderDistHistoryBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 32), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderDistHistoryBins.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderDistHistoryBins.setDescription('This object allows specification of number of distribution\n       history bins. This is the total history distribution data that\n       will be maintained for a Session Sender run, at any instance.')
f3TwampSessionSenderDistHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 33), TwampHistoryIntervalType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderDistHistoryInterval.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderDistHistoryInterval.setDescription('This object allows specification of the history distribution\n       interval period.')
f3TwampSessionSenderStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 34), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderStorageType.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderStorageType.setDescription('The type of storage configured for this entry.')
f3TwampSessionSenderRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TwampSessionSenderRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n          active state unless all objects in the entry have an \n          appropriate value, as described\n          in the description clause for each writable object.\n\n          The values of f3TwampSessionSenderRowStatus supported are\n          createAndGo(4) and destroy(6).  All mandatory attributes\n          must be specified in a single SNMP SET request with\n          f3TwampSessionSenderRowStatus value as createAndGo(4).\n          Upon successful row creation, this object has a\n          value of active(1).\n          \n          The f3TwampSessionSenderRowStatus object may be modified if\n          the associated instance of this object is equal to active(1).')
f3TwampSessionSenderValidateErrorEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 36), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampSessionSenderValidateErrorEstimate.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderValidateErrorEstimate.setDescription('This control supports interoperability between devices that do not\n        support error-estimate and devices that support error-estimate.\n        When false, the device will not validate the error estimate value\n        for non-zero multiplier and ignore the error-estimate value.\n        This is the value to interoperate with the releases that did not\n        support the error-estimate. When true, we validate error-estimate.\n        If multiplier is zero, we will discard the TWAMP test packet or else\n        the error estimate is used to correct the timestamps.')
f3TwampSessionSenderIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 37), IpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampSessionSenderIpMode.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderIpMode.setDescription('This object means the ip mode for this entry.')
f3TwampSessionSenderIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 38), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampSessionSenderIpAddress.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderIpAddress.setDescription('This object means the ip for this entry.')
f3TwampSessionSenderSrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 39), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampSessionSenderSrIpAddress.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderSrIpAddress.setDescription('This is the IP address of the Session Reflector.')
f3TwampSessionSenderStopTimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 8, 1, 40), TwampStopTimeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampSessionSenderStopTimeType.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderStopTimeType.setDescription('This is the stop time for this entry .')
f3TwampStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9), )
if mibBuilder.loadTexts: f3TwampStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: f3TwampStatsTable.setDescription('A current statistics for a Session Sender.')
f3TwampStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionSenderIndex"), (0, "F3-TWAMP-MIB", "f3TwampStatsIndex"))
if mibBuilder.loadTexts: f3TwampStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsEntry.setDescription('A conceptual row in the f3TwampStatsTable.')
f3TwampStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 1), TwampPmIntervalType())
if mibBuilder.loadTexts: f3TwampStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            the Session Sender statistics entry. Possible values are current\n            or rollover.')
f3TwampStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsValid.setDescription('Indicates the validity of the bin.')
f3TwampStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 3), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsAction.setDescription('Allows the Manager to clear the bin.')
f3TwampStatsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsTime.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsTime.setDescription('This is the start time of the current bin.')
f3TwampStatsS2RPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsS2RPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsS2RPkts.setDescription('The total number of Transmitted Packets in the current interval.')
f3TwampStatsR2SPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsR2SPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsR2SPkts.setDescription('The total number of Received Packets in the current interval.')
f3TwampStatsS2RLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsS2RLostPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsS2RLostPkts.setDescription('The number of Lost Pkts from Session Sender to Session Reflector\n          in the current interval.')
f3TwampStatsR2SLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsR2SLostPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsR2SLostPkts.setDescription('The number of Lost Pkts from Session Reflector to Session Sender in\n          the current interval.')
f3TwampStatsS2RSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsS2RSyncErrs.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsS2RSyncErrs.setDescription('The number of (time) Synchronization Errors from Session Sender to\n          Session Reflector in the current interval.')
f3TwampStatsR2SSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsR2SSyncErrs.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsR2SSyncErrs.setDescription('The number of (time) Synchronization Errors from Session Reflector to\n          Session Sender in the current interval.')
f3TwampStatsOutOfSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsOutOfSeqErrs.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsOutOfSeqErrs.setDescription('The total number of out of sequence errors across all\n          packets received in the current interval. If (Received Seq Number)\n          is less than or equal to (Last Received Seq Number),\n          it is termed as out of sequence error.')
f3TwampStatsSeqGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSeqGaps.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSeqGaps.setDescription('The total number of sequence gaps across all\n          packets received in the current interval. If (Received Seq Number)\n          is greater than or equal to (Last Received Seq Number + 2))\n          it is termed as a sequence gap.')
f3TwampStatsMinTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMinTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMinTwoWayPD.setDescription("The minimum two-way delay(in microseconds) across all\n          packets received in the current interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampStatsMaxTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMaxTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMaxTwoWayPD.setDescription("The maximum two-way delay(in microseconds) across all\n          packets received in the current interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampStatsAvgTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsAvgTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsAvgTwoWayPD.setDescription("The average two-way delay(in microseconds) across all\n          packets received in the current interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampStatsSumTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumTwoWayPD.setDescription("The total sum of  two-way delay(in microseconds)\n          in the current interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampStatsSumOfSqTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOfSqTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOfSqTwoWayPD.setDescription('The sum of square of  two-way delays in the current interval.')
f3TwampStatsMinOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMinOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMinOneWayS2RPD.setDescription('The minimum one-way Session Sender to Session Reflector\n          delay(in microseconds) across all packets received in the\n          current interval.')
f3TwampStatsMaxOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayS2RPD.setDescription('The maximum one-way Session Sender to Session Reflector\n          delay(in microseconds) across all packets received in the\n          current interval.')
f3TwampStatsAvgOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayS2RPD.setDescription('The average one-way Session Sender to Session Reflector\n          delay(in microseconds) across all packets received in the\n          current interval.')
f3TwampStatsSumOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOneWayS2RPD.setDescription('The total sum of one-way delay from Sesssion Sender to\n          Session Reflector in the current interval.')
f3TwampStatsSumOfSqOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayS2RPD.setDescription('The sum of square of one-way delay from Session Sender to\n          Session Reflector in the current interval.')
f3TwampStatsMinOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMinOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMinOneWayR2SPD.setDescription('The minimum one-way Session Reflector to Session Sender\n          delay(in microseconds) across all packets received in the\n          current interval.')
f3TwampStatsMaxOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayR2SPD.setDescription('The maximum one-way Session Reflector to Session Sender\n          delay(in microseconds) across all packets received in the\n          current interval.')
f3TwampStatsAvgOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayR2SPD.setDescription('The average one-way Session Reflector to Session Sender\n          delay(in microseconds) across all packets received in the\n          current interval.')
f3TwampStatsSumOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOneWayR2SPD.setDescription('The total sum of one-way delay from Session Reflector to\n          Session Sender in the current interval.')
f3TwampStatsSumOfSqOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayR2SPD.setDescription('The sum of square of one-way delay from Session Reflector to\n          Session Sender in the current interval.')
f3TwampStatsMinOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMinOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMinOneWayS2RAbsPDV.setDescription('The minimum absolute one-way packet delay variation from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatsMaxOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayS2RAbsPDV.setDescription('The maximum absolute one-way packet delay variation from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatsAvgOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayS2RAbsPDV.setDescription('The average absolute one-way packet delay variation from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatsSumOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOneWayS2RAbsPDV.setDescription('The total sum of absolute one-way packet delay variations from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatsSumOfSqOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayS2RAbsPDV.setDescription('The sum of square of absolute one-way packet delay variations from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatsNumOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsNumOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsNumOneWayS2RAbsPDV.setDescription('The total number of absolute one-way packet delay variations from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatsMinOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMinOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMinOneWayR2SAbsPDV.setDescription('The minimum absolute one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsMaxOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayR2SAbsPDV.setDescription('The maximum absolute one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsAvgOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayR2SAbsPDV.setDescription('The average absolute one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsSumOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOneWayR2SAbsPDV.setDescription('The total sum of absolute one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsSumOfSqOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayR2SAbsPDV.setDescription('The sum of square of absolute one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsNumOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsNumOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsNumOneWayR2SAbsPDV.setDescription('The total number of absolute one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsMinOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMinOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMinOneWayS2RNegPDV.setDescription('The minimum negative one-way packet delay variation from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatsMaxOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayS2RNegPDV.setDescription('The maximum negative one-way packet delay variation from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatsAvgOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayS2RNegPDV.setDescription('The average negative one-way packet delay variation from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatsSumOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOneWayS2RNegPDV.setDescription('The total sum of negative one-way packet delay variations from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatsSumOfSqOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayS2RNegPDV.setDescription('The sum of square of negative one-way packet delay variations from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatsNumOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsNumOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsNumOneWayS2RNegPDV.setDescription('The total number of negative one-way packet delay variations from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatsMinOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMinOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMinOneWayR2SNegPDV.setDescription('The minimum negative one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsMaxOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayR2SNegPDV.setDescription('The maximum negative one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsAvgOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayR2SNegPDV.setDescription('The average negative one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsSumOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOneWayR2SNegPDV.setDescription('The total sum of negative one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsSumOfSqOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayR2SNegPDV.setDescription('The sum of square of negative one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsNumOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsNumOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsNumOneWayR2SNegPDV.setDescription('The total number of negative one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsMinOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMinOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMinOneWayS2RPosPDV.setDescription('The minimum positive one-way packet delay variation from\n          Session Sender to Session Reflector in the current interval.')
f3TwampStatsMaxOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayS2RPosPDV.setDescription('The maximum positive one-way packet delay variation from\n          Session Sender to Session Reflector in the current interval.')
f3TwampStatsAvgOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayS2RPosPDV.setDescription('The average positive one-way packet delay variation from\n          Session Sender to Session Reflector in the current interval.')
f3TwampStatsSumOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOneWayS2RPosPDV.setDescription('The total sum of  positive one-way packet delay variations from\n          Session Sender to Session Reflector in the current interval.')
f3TwampStatsSumOfSqOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 56), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayS2RPosPDV.setDescription('The sum of square of  positive one-way packet delay variations from\n          Session Sender to Session Reflector in the current interval.')
f3TwampStatsNumOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 57), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsNumOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsNumOneWayS2RPosPDV.setDescription('The total number of  positive one-way packet delay variations from\n          Session Sender to Session Reflector in the current interval.')
f3TwampStatsMinOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMinOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMinOneWayR2SPosPDV.setDescription('The minimum positive one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsMaxOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsMaxOneWayR2SPosPDV.setDescription('The maximum positive one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsAvgOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsAvgOneWayR2SPosPDV.setDescription('The average positive one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsSumOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 61), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOneWayR2SPosPDV.setDescription('The total sum of  positive one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsSumOfSqOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 62), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsSumOfSqOneWayR2SPosPDV.setDescription('The sum of square of  positive one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsNumOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsNumOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsNumOneWayR2SPosPDV.setDescription('The total number of  positive one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatsNumTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsNumTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsNumTwoWayPD.setDescription('The total number of two-way packet delay samples in the \n         current interval.')
f3TwampStatsNumOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsNumOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsNumOneWayS2RPD.setDescription('The total number of one-way packet delay samples from\n          Session Sender to Session Reflector in the current interval.')
f3TwampStatsNumOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 9, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsNumOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsNumOneWayR2SPD.setDescription('The total number of one-way packet delay samples from\n          Session Reflector to Session Sender in the current interval.')
f3TwampHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10), )
if mibBuilder.loadTexts: f3TwampHistoryTable.setStatus('deprecated')
if mibBuilder.loadTexts: f3TwampHistoryTable.setDescription('A history statistics for a Session Sender.')
f3TwampHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionSenderIndex"), (0, "F3-TWAMP-MIB", "f3TwampHistoryIndex"))
if mibBuilder.loadTexts: f3TwampHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryEntry.setDescription('A conceptual row in the f3TwampHistoryTable. ')
f3TwampHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: f3TwampHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n             the Session Sender statistics history entry.')
f3TwampHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryValid.setDescription('Indicates the validity of the bin.')
f3TwampHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 3), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3TwampHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryTime.setDescription('This is the start time of the history bin.')
f3TwampHistoryS2RPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryS2RPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryS2RPkts.setDescription('The total number of Transmitted Packets in the interval.')
f3TwampHistoryR2SPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryR2SPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryR2SPkts.setDescription('The total number of Received Packets in the interval.')
f3TwampHistoryS2RLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryS2RLostPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryS2RLostPkts.setDescription('The number of Lost Pkts from Session Sender to Session Reflector\n          in the interval.')
f3TwampHistoryR2SLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryR2SLostPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryR2SLostPkts.setDescription('The number of Lost Pkts from Session Reflector to Session Sender in\n          the interval.')
f3TwampHistoryS2RSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryS2RSyncErrs.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryS2RSyncErrs.setDescription('The number of (time) Synchronization Errors from Session Sender to\n          Session Reflector in the interval.')
f3TwampHistoryR2SSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryR2SSyncErrs.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryR2SSyncErrs.setDescription('The number of (time) Synchronization Errors from Session Reflector to\n          Session Sender in the interval.')
f3TwampHistoryOutOfSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryOutOfSeqErrs.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryOutOfSeqErrs.setDescription('The total number of out of sequence errors across all\n          packets received in the interval. If (Received Seq Number)\n          is less than or equal to (Last Received Seq Number),\n          it is termed as out of sequence error.')
f3TwampHistorySeqGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySeqGaps.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySeqGaps.setDescription('The total number of sequence gaps across all\n          packets received in the interval. If (Received Seq Number)\n          is greater than or equal to (Last Received Seq Number + 2))\n          it is termed as a sequence gap.')
f3TwampHistoryMinTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMinTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMinTwoWayPD.setDescription("The minimum two-way delay(in microseconds) across all\n          packets received in the interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampHistoryMaxTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMaxTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMaxTwoWayPD.setDescription("The maximum two-way delay(in microseconds) across all\n          packets received in the interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampHistoryAvgTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryAvgTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryAvgTwoWayPD.setDescription("The average two-way delay(in microseconds) across all\n          packets received in the interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampHistorySumTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumTwoWayPD.setDescription("The total sum of  two-way delay(in microseconds)\n          in the interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampHistorySumOfSqTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOfSqTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOfSqTwoWayPD.setDescription('The sum of square of  two-way delays in the interval.')
f3TwampHistoryMinOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayS2RPD.setDescription('The minimum one-way Session Sender to Session Reflector\n          delay(in microseconds) across all packets received in the\n          interval.')
f3TwampHistoryMaxOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayS2RPD.setDescription('The maximum one-way Session Sender to Session Reflector\n          delay(in microseconds) across all packets received in the\n          interval.')
f3TwampHistoryAvgOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayS2RPD.setDescription('The average one-way Session Sender to Session Reflector\n          delay(in microseconds) across all packets received in the\n          interval.')
f3TwampHistorySumOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOneWayS2RPD.setDescription('The total sum of one-way delay from Sesssion Sender to\n          Session Reflector in the interval.')
f3TwampHistorySumOfSqOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayS2RPD.setDescription('The sum of square of one-way delay from Session Sender to\n          Session Reflector in the interval.')
f3TwampHistoryMinOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayR2SPD.setDescription('The minimum one-way Session Reflector to Session Sender\n          delay(in microseconds) across all packets received in the\n          interval.')
f3TwampHistoryMaxOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayR2SPD.setDescription('The maximum one-way Session Reflector to Session Sender\n          delay(in microseconds) across all packets received in the\n          interval.')
f3TwampHistoryAvgOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayR2SPD.setDescription('The average one-way Session Reflector to Session Sender\n          delay(in microseconds) across all packets received in the\n          interval.')
f3TwampHistorySumOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOneWayR2SPD.setDescription('The total sum of one-way delay from Session Reflector to\n          Session Sender in the interval.')
f3TwampHistorySumOfSqOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayR2SPD.setDescription('The sum of square of one-way delay from Session Reflector to\n          Session Sender in the interval.')
f3TwampHistoryMinOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayS2RAbsPDV.setDescription('The minimum absolute one-way packet delay variation from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryMaxOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayS2RAbsPDV.setDescription('The maximum absolute one-way packet delay variation from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryAvgOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayS2RAbsPDV.setDescription('The average absolute one-way packet delay variation from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistorySumOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOneWayS2RAbsPDV.setDescription('The total sum of absolute one-way packet delay variations from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistorySumOfSqOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayS2RAbsPDV.setDescription('The sum of square of absolute one-way packet delay variations from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryNumOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayS2RAbsPDV.setDescription('The total number of absolute one-way packet delay variations from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryMinOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayR2SAbsPDV.setDescription('The minimum absolute one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryMaxOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayR2SAbsPDV.setDescription('The maximum absolute one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryAvgOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayR2SAbsPDV.setDescription('The average absolute one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistorySumOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOneWayR2SAbsPDV.setDescription('The total sum of absolute one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistorySumOfSqOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayR2SAbsPDV.setDescription('The sum of square of absolute one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryNumOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayR2SAbsPDV.setDescription('The total number of absolute one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryMinOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayS2RNegPDV.setDescription('The minimum negative one-way packet delay variation from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryMaxOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayS2RNegPDV.setDescription('The maximum negative one-way packet delay variation from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryAvgOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayS2RNegPDV.setDescription('The average negative one-way packet delay variation from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistorySumOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOneWayS2RNegPDV.setDescription('The total sum of negative one-way packet delay variations from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistorySumOfSqOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayS2RNegPDV.setDescription('The sum of square of negative one-way packet delay variations from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryNumOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayS2RNegPDV.setDescription('The total number of negative one-way packet delay variations from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryMinOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayR2SNegPDV.setDescription('The minimum negative one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryMaxOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayR2SNegPDV.setDescription('The maximum negative one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryAvgOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayR2SNegPDV.setDescription('The average negative one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistorySumOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOneWayR2SNegPDV.setDescription('The total sum of negative one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistorySumOfSqOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayR2SNegPDV.setDescription('The sum of square of negative one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryNumOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayR2SNegPDV.setDescription('The total number of negative one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryMinOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayS2RPosPDV.setDescription('The minimum positive one-way packet delay variation from\n          Session Sender to Session Reflector in the interval.')
f3TwampHistoryMaxOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayS2RPosPDV.setDescription('The maximum positive one-way packet delay variation from\n          Session Sender to Session Reflector in the interval.')
f3TwampHistoryAvgOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayS2RPosPDV.setDescription('The average positive one-way packet delay variation from\n          Session Sender to Session Reflector in the interval.')
f3TwampHistorySumOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOneWayS2RPosPDV.setDescription('The total sum of  positive one-way packet delay variations from\n          Session Sender to Session Reflector in the interval.')
f3TwampHistorySumOfSqOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 56), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayS2RPosPDV.setDescription('The sum of square of  positive one-way packet delay variations from\n          Session Sender to Session Reflector in the interval.')
f3TwampHistoryNumOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 57), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayS2RPosPDV.setDescription('The total number of  positive one-way packet delay variations from\n          Session Sender to Session Reflector in the interval.')
f3TwampHistoryMinOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMinOneWayR2SPosPDV.setDescription('The minimum positive one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryMaxOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryMaxOneWayR2SPosPDV.setDescription('The maximum positive one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryAvgOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryAvgOneWayR2SPosPDV.setDescription('The average positive one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistorySumOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 61), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOneWayR2SPosPDV.setDescription('The total sum of  positive one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistorySumOfSqOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 62), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistorySumOfSqOneWayR2SPosPDV.setDescription('The sum of square of  positive one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryNumOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayR2SPosPDV.setDescription('The total number of  positive one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryNumTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryNumTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryNumTwoWayPD.setDescription('The total number of two-way packet delay samples in the \n         current interval.')
f3TwampHistoryNumOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayS2RPD.setDescription('The total number of one-way packet delay samples from\n          Session Sender to Session Reflector in the current interval.')
f3TwampHistoryNumOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 10, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryNumOneWayR2SPD.setDescription('The total number of one-way packet delay samples from\n          Session Reflector to Session Sender in the current interval.')
f3TwampDistStatsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 11), )
if mibBuilder.loadTexts: f3TwampDistStatsConfigTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsConfigTable.setDescription('A list of entries that need to be configured\n             in order to obtain statistical distribution\n             of Session Sender collected data.')
f3TwampDistStatsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionSenderIndex"), (0, "F3-TWAMP-MIB", "f3TwampDistStatsConfigIndex"))
if mibBuilder.loadTexts: f3TwampDistStatsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsConfigEntry.setDescription('A row in the f3TwampDistStatsConfigTable.')
f3TwampDistStatsConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 11, 1, 1), TwampDistStatsType())
if mibBuilder.loadTexts: f3TwampDistStatsConfigIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsConfigIndex.setDescription('A unique index for each row. Indicates whether the statistical \n             distribution is for two-way packet delay (twoway-pd), one-way \n             Session Sender to Session Reflector packet delay (oneway-s2r-pd), \n             one-way Session Reflector to Session Sender packet delay (oneway-r2s-pd),\n             one-way Session Sender to Session Reflector packet delay variation \n             (oneway-s2r-pdv) or Session Reflector to Session Sender packet delay \n             variation (oneway-r2s-pdv).')
f3TwampDistStatsConfigMinVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 11, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampDistStatsConfigMinVal.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsConfigMinVal.setDescription('Minimum sample value in distribution.')
f3TwampDistStatsConfigMaxVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 11, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampDistStatsConfigMaxVal.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsConfigMaxVal.setDescription('Maximum sample value in distribution.')
f3TwampDistStatsConfigNumBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 11, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampDistStatsConfigNumBins.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsConfigNumBins.setDescription('Number of distribution bins.')
f3TwampDistStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 12), )
if mibBuilder.loadTexts: f3TwampDistStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsTable.setDescription('A list of entries that provide statistical distribution\n             of Session Sender collected data.')
f3TwampDistStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionSenderIndex"), (0, "F3-TWAMP-MIB", "f3TwampDistStatsConfigIndex"))
if mibBuilder.loadTexts: f3TwampDistStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsEntry.setDescription('A row in the f3TwampDistStatsTable.')
f3TwampDistStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 12, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsValid.setDescription('Indicates the validity of the bin.')
f3TwampDistStatsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 12, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistStatsTime.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsTime.setDescription('This is the start time of the current bin.')
f3TwampDistStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 12, 1, 3), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampDistStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsAction.setDescription('Allows the Manager to clear the bin.')
f3TwampDistStatsNumBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistStatsNumBins.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsNumBins.setDescription('Number of bins over which the statistical\n             data is distributed.')
f3TwampDistStatsLTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 12, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistStatsLTMin.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsLTMin.setDescription('Number of sample data points which are\n             less than the minimum value specified.')
f3TwampDistStatsGTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 12, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistStatsGTMax.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsGTMax.setDescription('Number of sample data points which are\n             greater than the maximum value specified.')
f3TwampDistStatsBinTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 13), )
if mibBuilder.loadTexts: f3TwampDistStatsBinTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsBinTable.setDescription('A list of entries that provide statistical distribution\n             of Session Sender collected data for specific BINs.')
f3TwampDistStatsBinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionSenderIndex"), (0, "F3-TWAMP-MIB", "f3TwampDistStatsConfigIndex"), (0, "F3-TWAMP-MIB", "f3TwampDistStatsBinIndex"))
if mibBuilder.loadTexts: f3TwampDistStatsBinEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsBinEntry.setDescription('A row in the f3TwampDistStatsBinTable.')
f3TwampDistStatsBinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: f3TwampDistStatsBinIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsBinIndex.setDescription('An index for each row that uniquely provides statistical\n             data for a range.')
f3TwampDistStatsBinLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistStatsBinLower.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsBinLower.setDescription('The lower limit of values collected in this bin.')
f3TwampDistStatsBinUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistStatsBinUpper.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsBinUpper.setDescription('The upper limit of values collected in this bin.')
f3TwampDistStatsBinNumSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 13, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistStatsBinNumSamples.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistStatsBinNumSamples.setDescription('Number of sample data points which fall between\n             the lower and upper limits.')
f3TwampDistHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 14), )
if mibBuilder.loadTexts: f3TwampDistHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryTable.setDescription('A list of entries that provide statistical distribution\n             history of Session Sender collected data.')
f3TwampDistHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionSenderIndex"), (0, "F3-TWAMP-MIB", "f3TwampDistStatsConfigIndex"), (0, "F3-TWAMP-MIB", "f3TwampDistHistoryIndex"))
if mibBuilder.loadTexts: f3TwampDistHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryEntry.setDescription('A row in the f3TwampDistHistoryTable.')
f3TwampDistHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: f3TwampDistHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryIndex.setDescription('An integer index value used to uniquely identify current \n            distribution statistics.')
f3TwampDistHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 14, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryValid.setDescription('Indicates the validity of the bin.')
f3TwampDistHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 14, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryTime.setDescription('This is the start time of the history bin.')
f3TwampDistHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 14, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampDistHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3TwampDistHistoryNumBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistHistoryNumBins.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryNumBins.setDescription('Number of bins over which the statistical\n             data is distributed.')
f3TwampDistHistoryLTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 14, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistHistoryLTMin.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryLTMin.setDescription('Number of sample data points which are\n             less than the minimum value specified.')
f3TwampDistHistoryGTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 14, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistHistoryGTMax.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryGTMax.setDescription('Number of sample data points which are\n             greater than the maximum value specified.')
f3TwampDistHistoryBinTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 15), )
if mibBuilder.loadTexts: f3TwampDistHistoryBinTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryBinTable.setDescription('A list of entries that provide statistical distribution\n             of Session Sender collected data for specific BINs.')
f3TwampDistHistoryBinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionSenderIndex"), (0, "F3-TWAMP-MIB", "f3TwampDistStatsConfigIndex"), (0, "F3-TWAMP-MIB", "f3TwampDistHistoryIndex"), (0, "F3-TWAMP-MIB", "f3TwampDistHistoryBinIndex"))
if mibBuilder.loadTexts: f3TwampDistHistoryBinEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryBinEntry.setDescription('A row in the f3TwampDistHistoryBinTable.')
f3TwampDistHistoryBinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: f3TwampDistHistoryBinIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryBinIndex.setDescription('An index for each row that uniquely provides statistical\n             data for a range.')
f3TwampDistHistoryBinLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistHistoryBinLower.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryBinLower.setDescription('The lower limit of values collected in this bin.')
f3TwampDistHistoryBinUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistHistoryBinUpper.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryBinUpper.setDescription('The upper limit of values collected in this bin.')
f3TwampDistHistoryBinNumSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 15, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampDistHistoryBinNumSamples.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistHistoryBinNumSamples.setDescription('Number of sample data points which fall between\n             the lower and upper limits.')
f3TwampStatsThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 16), )
if mibBuilder.loadTexts: f3TwampStatsThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsThresholdTable.setDescription('A table of entries that allow manageability of Session Sender\n             Thresholds.')
f3TwampStatsThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionSenderIndex"), (0, "F3-TWAMP-MIB", "f3TwampStatsThresholdIndex"))
if mibBuilder.loadTexts: f3TwampStatsThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsThresholdEntry.setDescription('A conceptual row in the f3TwampStatsThresholdTable.')
f3TwampStatsThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3TwampStatsThresholdTable.')
f3TwampStatsThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 16, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.  Objects of the f3TwampStatsTable are\n        monitored. Only variables that resolve to an ASN.1 primitive\n        type of INTEGER (INTEGER, Integer32, Counter32, PerfCounter64,\n        Gauge, or TimeTicks) may be sampled.')
f3TwampStatsThresholdAbsValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 16, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampStatsThresholdAbsValueLo.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsThresholdAbsValueLo.setDescription('Lower 32 bits of the absolute value of the threshold.')
f3TwampStatsThresholdAbsValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 16, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampStatsThresholdAbsValueHi.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsThresholdAbsValueHi.setDescription('Higher 32 bits of the absolute value of the threshold.')
f3TwampStatsThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 16, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatsThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatsThresholdMonValue.setDescription('Monitored value corresponding to f3TwampStatsThresholdVariable.')
f3TwampStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17), )
if mibBuilder.loadTexts: f3TwampStatisticTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticTable.setDescription('A current statistics for a Session Sender.')
f3TwampStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionSenderIndex"), (0, "F3-TWAMP-MIB", "f3TwampStatisticIndex"))
if mibBuilder.loadTexts: f3TwampStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticEntry.setDescription('A conceptual row in the f3TwampStatisticTable.')
f3TwampStatisticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 1), TwampPmIntervalType())
if mibBuilder.loadTexts: f3TwampStatisticIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            the Session Sender statistics entry. Possible values are current\n            or rollover.')
f3TwampStatisticValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticValid.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticValid.setDescription('Indicates the validity of the bin.')
f3TwampStatisticAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 3), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampStatisticAction.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticAction.setDescription('Allows the Manager to clear the bin.')
f3TwampStatisticTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticTime.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticTime.setDescription('This is the start time of the current bin.')
f3TwampStatisticS2RPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticS2RPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticS2RPkts.setDescription('The total number of Transmitted Packets in the current interval.')
f3TwampStatisticR2SPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticR2SPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticR2SPkts.setDescription('The total number of Received Packets in the current interval.')
f3TwampStatisticS2RLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticS2RLostPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticS2RLostPkts.setDescription('The number of Lost Pkts from Session Sender to Session Reflector\n          in the current interval.')
f3TwampStatisticR2SLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticR2SLostPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticR2SLostPkts.setDescription('The number of Lost Pkts from Session Reflector to Session Sender in\n          the current interval.')
f3TwampStatisticS2RSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticS2RSyncErrs.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticS2RSyncErrs.setDescription('The number of (time) Synchronization Errors from Session Sender to\n          Session Reflector in the current interval.')
f3TwampStatisticR2SSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticR2SSyncErrs.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticR2SSyncErrs.setDescription('The number of (time) Synchronization Errors from Session Reflector to\n          Session Sender in the current interval.')
f3TwampStatisticOutOfSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticOutOfSeqErrs.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticOutOfSeqErrs.setDescription('The total number of out of sequence errors across all\n          packets received in the current interval. If (Received Seq Number)\n          is less than or equal to (Last Received Seq Number),\n          it is termed as out of sequence error.')
f3TwampStatisticSeqGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSeqGaps.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSeqGaps.setDescription('The total number of sequence gaps across all\n          packets received in the current interval. If (Received Seq Number)\n          is greater than or equal to (Last Received Seq Number + 2))\n          it is termed as a sequence gap.')
f3TwampStatisticMinTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMinTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMinTwoWayPD.setDescription("The minimum two-way delay(in microseconds) across all\n          packets received in the current interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampStatisticMaxTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMaxTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMaxTwoWayPD.setDescription("The maximum two-way delay(in microseconds) across all\n          packets received in the current interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampStatisticAvgTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticAvgTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticAvgTwoWayPD.setDescription("The average two-way delay(in microseconds) across all\n          packets received in the current interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampStatisticSumTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumTwoWayPD.setDescription("The total sum of  two-way delay(in microseconds)\n          in the current interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampStatisticSumOfSqTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqTwoWayPD.setDescription('The sum of square of  two-way delays in the current interval.')
f3TwampStatisticMinOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayS2RPD.setDescription('The minimum one-way Session Sender to Session Reflector\n          delay(in microseconds) across all packets received in the\n          current interval.')
f3TwampStatisticMaxOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayS2RPD.setDescription('The maximum one-way Session Sender to Session Reflector\n          delay(in microseconds) across all packets received in the\n          current interval.')
f3TwampStatisticAvgOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayS2RPD.setDescription('The average one-way Session Sender to Session Reflector\n          delay(in microseconds) across all packets received in the\n          current interval.')
f3TwampStatisticSumOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayS2RPD.setDescription('The total sum of one-way delay from Sesssion Sender to\n          Session Reflector in the current interval.')
f3TwampStatisticSumOfSqOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayS2RPD.setDescription('The sum of square of one-way delay from Session Sender to\n          Session Reflector in the current interval.')
f3TwampStatisticMinOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayR2SPD.setDescription('The minimum one-way Session Reflector to Session Sender\n          delay(in microseconds) across all packets received in the\n          current interval.')
f3TwampStatisticMaxOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayR2SPD.setDescription('The maximum one-way Session Reflector to Session Sender\n          delay(in microseconds) across all packets received in the\n          current interval.')
f3TwampStatisticAvgOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayR2SPD.setDescription('The average one-way Session Reflector to Session Sender\n          delay(in microseconds) across all packets received in the\n          current interval.')
f3TwampStatisticSumOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayR2SPD.setDescription('The total sum of one-way delay from Session Reflector to\n          Session Sender in the current interval.')
f3TwampStatisticSumOfSqOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayR2SPD.setDescription('The sum of square of one-way delay from Session Reflector to\n          Session Sender in the current interval.')
f3TwampStatisticMinOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayS2RAbsPDV.setDescription('The minimum absolute one-way packet delay variation from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatisticMaxOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayS2RAbsPDV.setDescription('The maximum absolute one-way packet delay variation from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatisticAvgOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayS2RAbsPDV.setDescription('The average absolute one-way packet delay variation from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatisticSumOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayS2RAbsPDV.setDescription('The total sum of absolute one-way packet delay variations from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatisticSumOfSqOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayS2RAbsPDV.setDescription('The sum of square of absolute one-way packet delay variations from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatisticNumOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayS2RAbsPDV.setDescription('The total number of absolute one-way packet delay variations from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatisticMinOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 34), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayR2SAbsPDV.setDescription('The minimum absolute one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticMaxOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayR2SAbsPDV.setDescription('The maximum absolute one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticAvgOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayR2SAbsPDV.setDescription('The average absolute one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticSumOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayR2SAbsPDV.setDescription('The total sum of absolute one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticSumOfSqOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayR2SAbsPDV.setDescription('The sum of square of absolute one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticNumOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 39), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayR2SAbsPDV.setDescription('The total number of absolute one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticMinOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 40), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayS2RNegPDV.setDescription('The minimum negative one-way packet delay variation from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatisticMaxOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 41), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayS2RNegPDV.setDescription('The maximum negative one-way packet delay variation from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatisticAvgOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 42), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayS2RNegPDV.setDescription('The average negative one-way packet delay variation from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatisticSumOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 43), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayS2RNegPDV.setDescription('The total sum of negative one-way packet delay variations from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatisticSumOfSqOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 44), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayS2RNegPDV.setDescription('The sum of square of negative one-way packet delay variations from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatisticNumOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 45), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayS2RNegPDV.setDescription('The total number of negative one-way packet delay variations from\n          Sesson Sender to Session Reflector in the current interval.')
f3TwampStatisticMinOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 46), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayR2SNegPDV.setDescription('The minimum negative one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticMaxOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 47), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayR2SNegPDV.setDescription('The maximum negative one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticAvgOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 48), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayR2SNegPDV.setDescription('The average negative one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticSumOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 49), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayR2SNegPDV.setDescription('The total sum of negative one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticSumOfSqOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 50), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayR2SNegPDV.setDescription('The sum of square of negative one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticNumOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 51), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayR2SNegPDV.setDescription('The total number of negative one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticMinOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 52), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayS2RPosPDV.setDescription('The minimum positive one-way packet delay variation from\n          Session Sender to Session Reflector in the current interval.')
f3TwampStatisticMaxOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 53), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayS2RPosPDV.setDescription('The maximum positive one-way packet delay variation from\n          Session Sender to Session Reflector in the current interval.')
f3TwampStatisticAvgOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 54), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayS2RPosPDV.setDescription('The average positive one-way packet delay variation from\n          Session Sender to Session Reflector in the current interval.')
f3TwampStatisticSumOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 55), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayS2RPosPDV.setDescription('The total sum of  positive one-way packet delay variations from\n          Session Sender to Session Reflector in the current interval.')
f3TwampStatisticSumOfSqOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 56), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayS2RPosPDV.setDescription('The sum of square of  positive one-way packet delay variations from\n          Session Sender to Session Reflector in the current interval.')
f3TwampStatisticNumOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 57), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayS2RPosPDV.setDescription('The total number of  positive one-way packet delay variations from\n          Session Sender to Session Reflector in the current interval.')
f3TwampStatisticMinOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 58), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMinOneWayR2SPosPDV.setDescription('The minimum positive one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticMaxOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 59), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticMaxOneWayR2SPosPDV.setDescription('The maximum positive one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticAvgOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 60), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticAvgOneWayR2SPosPDV.setDescription('The average positive one-way packet delay variation from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticSumOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 61), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOneWayR2SPosPDV.setDescription('The total sum of  positive one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticSumOfSqOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 62), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticSumOfSqOneWayR2SPosPDV.setDescription('The sum of square of  positive one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticNumOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 63), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayR2SPosPDV.setDescription('The total number of  positive one-way packet delay variations from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticNumTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 64), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticNumTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticNumTwoWayPD.setDescription('The total number of two-way packet delay samples in the \n         current interval.')
f3TwampStatisticNumOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 65), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayS2RPD.setDescription('The total number of one-way packet delay samples from\n          Session Sender to Session Reflector in the current interval.')
f3TwampStatisticNumOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 66), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticNumOneWayR2SPD.setDescription('The total number of one-way packet delay samples from\n          Session Reflector to Session Sender in the current interval.')
f3TwampStatisticUdpChecksumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 17, 1, 67), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampStatisticUdpChecksumFailures.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticUdpChecksumFailures.setDescription('The total number of packets received with UDP checksum failures.')
f3TwampHistoryDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18), )
if mibBuilder.loadTexts: f3TwampHistoryDataTable.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataTable.setDescription('A HistoryData statistics for a Session Sender.')
f3TwampHistoryDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionSenderIndex"), (0, "F3-TWAMP-MIB", "f3TwampHistoryDataIndex"))
if mibBuilder.loadTexts: f3TwampHistoryDataEntry.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataEntry.setDescription('A conceptual row in the f3TwampHistoryDataTable. ')
f3TwampHistoryDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: f3TwampHistoryDataIndex.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataIndex.setDescription('An arbitrary integer index value used to uniquely identify\n             the Session Sender statistics HistoryData entry.')
f3TwampHistoryDataValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataValid.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataValid.setDescription('Indicates the validity of the bin.')
f3TwampHistoryDataAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 3), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampHistoryDataAction.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataAction.setDescription('Allows the Manager to clear the bin.')
f3TwampHistoryDataTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataTime.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataTime.setDescription('This is the start time of the HistoryData bin.')
f3TwampHistoryDataS2RPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataS2RPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataS2RPkts.setDescription('The total number of Transmitted Packets in the interval.')
f3TwampHistoryDataR2SPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataR2SPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataR2SPkts.setDescription('The total number of Received Packets in the interval.')
f3TwampHistoryDataS2RLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataS2RLostPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataS2RLostPkts.setDescription('The number of Lost Pkts from Session Sender to Session Reflector\n          in the interval.')
f3TwampHistoryDataR2SLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataR2SLostPkts.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataR2SLostPkts.setDescription('The number of Lost Pkts from Session Reflector to Session Sender in\n          the interval.')
f3TwampHistoryDataS2RSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataS2RSyncErrs.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataS2RSyncErrs.setDescription('The number of (time) Synchronization Errors from Session Sender to\n          Session Reflector in the interval.')
f3TwampHistoryDataR2SSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataR2SSyncErrs.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataR2SSyncErrs.setDescription('The number of (time) Synchronization Errors from Session Reflector to\n          Session Sender in the interval.')
f3TwampHistoryDataOutOfSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataOutOfSeqErrs.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataOutOfSeqErrs.setDescription('The total number of out of sequence errors across all\n          packets received in the interval. If (Received Seq Number)\n          is less than or equal to (Last Received Seq Number),\n          it is termed as out of sequence error.')
f3TwampHistoryDataSeqGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSeqGaps.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSeqGaps.setDescription('The total number of sequence gaps across all\n          packets received in the interval. If (Received Seq Number)\n          is greater than or equal to (Last Received Seq Number + 2))\n          it is termed as a sequence gap.')
f3TwampHistoryDataMinTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMinTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMinTwoWayPD.setDescription("The minimum two-way delay(in microseconds) across all\n          packets received in the interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampHistoryDataMaxTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMaxTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMaxTwoWayPD.setDescription("The maximum two-way delay(in microseconds) across all\n          packets received in the interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampHistoryDataAvgTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataAvgTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataAvgTwoWayPD.setDescription("The average two-way delay(in microseconds) across all\n          packets received in the interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampHistoryDataSumTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumTwoWayPD.setDescription("The total sum of  two-way delay(in microseconds)\n          in the interval.\n          The Session Reflector's processing time is excluded from the value.")
f3TwampHistoryDataSumOfSqTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqTwoWayPD.setDescription('The sum of square of  two-way delays in the interval.')
f3TwampHistoryDataMinOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayS2RPD.setDescription('The minimum one-way Session Sender to Session Reflector\n          delay(in microseconds) across all packets received in the\n          interval.')
f3TwampHistoryDataMaxOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayS2RPD.setDescription('The maximum one-way Session Sender to Session Reflector\n          delay(in microseconds) across all packets received in the\n          interval.')
f3TwampHistoryDataAvgOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayS2RPD.setDescription('The average one-way Session Sender to Session Reflector\n          delay(in microseconds) across all packets received in the\n          interval.')
f3TwampHistoryDataSumOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayS2RPD.setDescription('The total sum of one-way delay from Sesssion Sender to\n          Session Reflector in the interval.')
f3TwampHistoryDataSumOfSqOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayS2RPD.setDescription('The sum of square of one-way delay from Session Sender to\n          Session Reflector in the interval.')
f3TwampHistoryDataMinOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayR2SPD.setDescription('The minimum one-way Session Reflector to Session Sender\n          delay(in microseconds) across all packets received in the\n          interval.')
f3TwampHistoryDataMaxOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayR2SPD.setDescription('The maximum one-way Session Reflector to Session Sender\n          delay(in microseconds) across all packets received in the\n          interval.')
f3TwampHistoryDataAvgOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayR2SPD.setDescription('The average one-way Session Reflector to Session Sender\n          delay(in microseconds) across all packets received in the\n          interval.')
f3TwampHistoryDataSumOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayR2SPD.setDescription('The total sum of one-way delay from Session Reflector to\n          Session Sender in the interval.')
f3TwampHistoryDataSumOfSqOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayR2SPD.setDescription('The sum of square of one-way delay from Session Reflector to\n          Session Sender in the interval.')
f3TwampHistoryDataMinOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayS2RAbsPDV.setDescription('The minimum absolute one-way packet delay variation from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryDataMaxOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayS2RAbsPDV.setDescription('The maximum absolute one-way packet delay variation from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryDataAvgOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayS2RAbsPDV.setDescription('The average absolute one-way packet delay variation from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryDataSumOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayS2RAbsPDV.setDescription('The total sum of absolute one-way packet delay variations from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryDataSumOfSqOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayS2RAbsPDV.setDescription('The sum of square of absolute one-way packet delay variations from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryDataNumOneWayS2RAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayS2RAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayS2RAbsPDV.setDescription('The total number of absolute one-way packet delay variations from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryDataMinOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 34), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayR2SAbsPDV.setDescription('The minimum absolute one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataMaxOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayR2SAbsPDV.setDescription('The maximum absolute one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataAvgOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayR2SAbsPDV.setDescription('The average absolute one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataSumOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayR2SAbsPDV.setDescription('The total sum of absolute one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataSumOfSqOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayR2SAbsPDV.setDescription('The sum of square of absolute one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataNumOneWayR2SAbsPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 39), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayR2SAbsPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayR2SAbsPDV.setDescription('The total number of absolute one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataMinOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 40), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayS2RNegPDV.setDescription('The minimum negative one-way packet delay variation from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryDataMaxOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 41), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayS2RNegPDV.setDescription('The maximum negative one-way packet delay variation from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryDataAvgOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 42), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayS2RNegPDV.setDescription('The average negative one-way packet delay variation from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryDataSumOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 43), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayS2RNegPDV.setDescription('The total sum of negative one-way packet delay variations from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryDataSumOfSqOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 44), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayS2RNegPDV.setDescription('The sum of square of negative one-way packet delay variations from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryDataNumOneWayS2RNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 45), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayS2RNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayS2RNegPDV.setDescription('The total number of negative one-way packet delay variations from\n          Sesson Sender to Session Reflector in the interval.')
f3TwampHistoryDataMinOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 46), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayR2SNegPDV.setDescription('The minimum negative one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataMaxOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 47), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayR2SNegPDV.setDescription('The maximum negative one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataAvgOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 48), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayR2SNegPDV.setDescription('The average negative one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataSumOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 49), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayR2SNegPDV.setDescription('The total sum of negative one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataSumOfSqOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 50), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayR2SNegPDV.setDescription('The sum of square of negative one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataNumOneWayR2SNegPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 51), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayR2SNegPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayR2SNegPDV.setDescription('The total number of negative one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataMinOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 52), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayS2RPosPDV.setDescription('The minimum positive one-way packet delay variation from\n          Session Sender to Session Reflector in the interval.')
f3TwampHistoryDataMaxOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 53), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayS2RPosPDV.setDescription('The maximum positive one-way packet delay variation from\n          Session Sender to Session Reflector in the interval.')
f3TwampHistoryDataAvgOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 54), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayS2RPosPDV.setDescription('The average positive one-way packet delay variation from\n          Session Sender to Session Reflector in the interval.')
f3TwampHistoryDataSumOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 55), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayS2RPosPDV.setDescription('The total sum of  positive one-way packet delay variations from\n          Session Sender to Session Reflector in the interval.')
f3TwampHistoryDataSumOfSqOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 56), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayS2RPosPDV.setDescription('The sum of square of  positive one-way packet delay variations from\n          Session Sender to Session Reflector in the interval.')
f3TwampHistoryDataNumOneWayS2RPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 57), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayS2RPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayS2RPosPDV.setDescription('The total number of  positive one-way packet delay variations from\n          Session Sender to Session Reflector in the interval.')
f3TwampHistoryDataMinOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 58), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMinOneWayR2SPosPDV.setDescription('The minimum positive one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataMaxOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 59), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataMaxOneWayR2SPosPDV.setDescription('The maximum positive one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataAvgOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 60), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataAvgOneWayR2SPosPDV.setDescription('The average positive one-way packet delay variation from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataSumOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 61), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOneWayR2SPosPDV.setDescription('The total sum of  positive one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataSumOfSqOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 62), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataSumOfSqOneWayR2SPosPDV.setDescription('The sum of square of  positive one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataNumOneWayR2SPosPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 63), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayR2SPosPDV.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayR2SPosPDV.setDescription('The total number of  positive one-way packet delay variations from\n          Session Reflector to Session Sender in the interval.')
f3TwampHistoryDataNumTwoWayPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 64), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataNumTwoWayPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataNumTwoWayPD.setDescription('The total number of two-way packet delay samples in the \n         current interval.')
f3TwampHistoryDataNumOneWayS2RPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 65), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayS2RPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayS2RPD.setDescription('The total number of one-way packet delay samples from\n          Session Sender to Session Reflector in the current interval.')
f3TwampHistoryDataNumOneWayR2SPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 66), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayR2SPD.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataNumOneWayR2SPD.setDescription('The total number of one-way packet delay samples from\n          Session Reflector to Session Sender in the current interval.')
f3TwampHistoryDataUdpChecksumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 18, 1, 67), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampHistoryDataUdpChecksumFailures.setStatus('current')
if mibBuilder.loadTexts: f3TwampHistoryDataUdpChecksumFailures.setDescription('The total number of packets received with UDP checksum failures.')
f3TwampSessionV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19), )
if mibBuilder.loadTexts: f3TwampSessionV2Table.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2Table.setDescription('A list of entries corresponding to TWAMP Session entities.\n        This entity represents a TWAMP Test session between a remote\n        Session Sender and a local Session Reflector.')
f3TwampSessionV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionReflectorIndex"), (0, "F3-TWAMP-MIB", "f3TwampSessionV2SsIpAddress"), (0, "F3-TWAMP-MIB", "f3TwampSessionV2SsUdpPort"))
if mibBuilder.loadTexts: f3TwampSessionV2Entry.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2Entry.setDescription('A conceptual row in the f3TwampSessionV2Table.')
f3TwampSessionV2SsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1, 1), DisplayString())
if mibBuilder.loadTexts: f3TwampSessionV2SsIpAddress.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2SsIpAddress.setDescription('IPv4 Address of the remote Session Sender. This with the\n        f3TwampSessionV2UdpPort uniquely identifies a TWAMP test session\n        between a remote Session Sender and local Session Reflector.')
f3TwampSessionV2SsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3TwampSessionV2SsUdpPort.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2SsUdpPort.setDescription('This is the UDP Port of the remote Session Sender. This with the\n        f3TwampSessionV2IpAddress uniquely identifies a TWAMP test session\n        between a remote Session Sender and local Session Reflector.')
f3TwampSessionV2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1, 3), TwampSessionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionV2Status.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2Status.setDescription('This indicates the current state of the TWAMP Session state machine.')
f3TwampSessionV2VlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionV2VlanEnabled.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2VlanEnabled.setDescription('This indicates if the received TWAMP test packets have a VLAN Tag.')
f3TwampSessionV2OuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionV2OuterVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2OuterVlanEtherType.setDescription('This is the VLAN Tag Ethertype (TPID) of the outer VLAN tag\n            of the received TWAMP test packets.')
f3TwampSessionV2OuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1, 6), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionV2OuterVlanId.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2OuterVlanId.setDescription('This is the outer VLAN ID of the received TWAMP test packets.')
f3TwampSessionV2OuterVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1, 7), VlanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionV2OuterVlanPriority.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2OuterVlanPriority.setDescription('This is the outer VLAN Priority of the received TWAMP test packets.')
f3TwampSessionV2InnerVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionV2InnerVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2InnerVlanEnabled.setDescription('This indicates if the received TWAMP test packets have an inner\n            VLAN tag.')
f3TwampSessionV2InnerVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionV2InnerVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2InnerVlanEtherType.setDescription('This is the VLAN Tag Ethertype (TPID) of the inner VLAN tag\n            of the received TWAMP test packets.')
f3TwampSessionV2InnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1, 10), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionV2InnerVlanId.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2InnerVlanId.setDescription('This is the inner VLAN ID of the received TWAMP test packets.')
f3TwampSessionV2InnerVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1, 11), VlanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionV2InnerVlanPriority.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2InnerVlanPriority.setDescription('This is the inner VLAN Priority of the received TWAMP test packets.')
f3TwampSessionV2DscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionV2DscpValue.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2DscpValue.setDescription('This is the DSCP value in the received TWAMP test packets.')
f3TwampSessionV2SequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TwampSessionV2SequenceNumber.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2SequenceNumber.setDescription('This is the receive side sequence number that is set in the\n            reflected TWAMP Test packet. This is incremented for each\n            reflected TWAMP Test packet.')
f3TwampSessionV2Action = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 1, 19, 1, 14), TwampSessionAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TwampSessionV2Action.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2Action.setDescription('This is the user action performed on this TWAMP Session instance.')
twampSessionSenderThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 5, 1)).setObjects(("F3-TWAMP-MIB", "f3TwampStatsThresholdIndex"), ("F3-TWAMP-MIB", "f3TwampStatsThresholdVariable"), ("F3-TWAMP-MIB", "f3TwampStatsThresholdAbsValueLo"), ("F3-TWAMP-MIB", "f3TwampStatsThresholdAbsValueHi"), ("F3-TWAMP-MIB", "f3TwampStatsThresholdMonValue"))
if mibBuilder.loadTexts: twampSessionSenderThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: twampSessionSenderThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on Session Sender is crossed.')
f3TwampCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 1))
f3TwampGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 2))
f3TwampCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 1, 1)).setObjects(("F3-TWAMP-MIB", "f3TwampIpInterfaceGroup"), ("F3-TWAMP-MIB", "f3TwampServerGroup"), ("F3-TWAMP-MIB", "f3TwampServerSessionReflectorGroup"), ("F3-TWAMP-MIB", "f3TwampSessionReflectorGroup"), ("F3-TWAMP-MIB", "f3TwampSessionGroup"), ("F3-TWAMP-MIB", "f3TwampControlClientGroup"), ("F3-TWAMP-MIB", "f3TwampControlClientSessionSenderGroup"), ("F3-TWAMP-MIB", "f3TwampSessionSenderGroup"), ("F3-TWAMP-MIB", "f3TwampStatisticsGroup"), ("F3-TWAMP-MIB", "f3TwampDistributionStatisticsGroup"), ("F3-TWAMP-MIB", "f3TwampThresholdGroup"), ("F3-TWAMP-MIB", "f3TwampSessionV2Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TwampCompliance = f3TwampCompliance.setStatus('current')
if mibBuilder.loadTexts: f3TwampCompliance.setDescription('Describes the requirements for conformance to the F3-TWAMP-MIB compilance.')
f3TwampIpInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 2, 1)).setObjects(("F3-TWAMP-MIB", "f3TwampIpInterfacePort"), ("F3-TWAMP-MIB", "f3TwampIpInterfaceIpMode"), ("F3-TWAMP-MIB", "f3TwampIpInterfaceIpv4Address"), ("F3-TWAMP-MIB", "f3TwampIpInterfaceIpv4Mask"), ("F3-TWAMP-MIB", "f3TwampIpInterfaceMtu"), ("F3-TWAMP-MIB", "f3TwampIpInterfaceStorageType"), ("F3-TWAMP-MIB", "f3TwampIpInterfaceRowStatus"), ("F3-TWAMP-MIB", "f3TwampIpInterfaceIpv6Addr"), ("F3-TWAMP-MIB", "f3TwampIpInterfaceIpv6PrefixLen"), ("F3-TWAMP-MIB", "f3TwampIpInterfaceIpv6LinkLocalAddr"), ("F3-TWAMP-MIB", "f3TwampIpInterfaceIpv6LinkLocalAddrPrefixLen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TwampIpInterfaceGroup = f3TwampIpInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: f3TwampIpInterfaceGroup.setDescription('A collection of TWAMP IP Interface objects.')
f3TwampServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 2, 2)).setObjects(("F3-TWAMP-MIB", "f3TwampServerAdminState"), ("F3-TWAMP-MIB", "f3TwampServerOperationalState"), ("F3-TWAMP-MIB", "f3TwampServerSecondaryState"), ("F3-TWAMP-MIB", "f3TwampServerAlias"), ("F3-TWAMP-MIB", "f3TwampServerPort"), ("F3-TWAMP-MIB", "f3TwampServerStatus"), ("F3-TWAMP-MIB", "f3TwampServerSessionIdleTimeout"), ("F3-TWAMP-MIB", "f3TwampServerSessionAgingTimeout"), ("F3-TWAMP-MIB", "f3TwampServerActionObject"), ("F3-TWAMP-MIB", "f3TwampServerAction"), ("F3-TWAMP-MIB", "f3TwampServerStorageType"), ("F3-TWAMP-MIB", "f3TwampServerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TwampServerGroup = f3TwampServerGroup.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerGroup.setDescription('A collection of TWAMP Server objects.')
f3TwampServerSessionReflectorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 2, 3)).setObjects(("F3-TWAMP-MIB", "f3TwampServerSessionReflector"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TwampServerSessionReflectorGroup = f3TwampServerSessionReflectorGroup.setStatus('current')
if mibBuilder.loadTexts: f3TwampServerSessionReflectorGroup.setDescription('A collection of TWAMP Server Session Reflector List objects.')
f3TwampSessionReflectorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 2, 4)).setObjects(("F3-TWAMP-MIB", "f3TwampSessionReflectorAdminState"), ("F3-TWAMP-MIB", "f3TwampSessionReflectorOperationalState"), ("F3-TWAMP-MIB", "f3TwampSessionReflectorSecondaryState"), ("F3-TWAMP-MIB", "f3TwampSessionReflectorAlias"), ("F3-TWAMP-MIB", "f3TwampSessionReflectorIpInterface"), ("F3-TWAMP-MIB", "f3TwampSessionReflectorUdpPort"), ("F3-TWAMP-MIB", "f3TwampSessionReflectorUseSenderSeqNum"), ("F3-TWAMP-MIB", "f3TwampSessionReflectorUserCreated"), ("F3-TWAMP-MIB", "f3TwampSessionReflectorStatus"), ("F3-TWAMP-MIB", "f3TwampSessionReflectorAssocServer"), ("F3-TWAMP-MIB", "f3TwampSessionReflectorStorageType"), ("F3-TWAMP-MIB", "f3TwampSessionReflectorRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TwampSessionReflectorGroup = f3TwampSessionReflectorGroup.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionReflectorGroup.setDescription('A collection of TWAMP Session Reflector objects.')
f3TwampSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 2, 5)).setObjects(("F3-TWAMP-MIB", "f3TwampSessionStatus"), ("F3-TWAMP-MIB", "f3TwampSessionVlanEnabled"), ("F3-TWAMP-MIB", "f3TwampSessionOuterVlanEtherType"), ("F3-TWAMP-MIB", "f3TwampSessionOuterVlanId"), ("F3-TWAMP-MIB", "f3TwampSessionOuterVlanPriority"), ("F3-TWAMP-MIB", "f3TwampSessionInnerVlanEnabled"), ("F3-TWAMP-MIB", "f3TwampSessionInnerVlanEtherType"), ("F3-TWAMP-MIB", "f3TwampSessionInnerVlanId"), ("F3-TWAMP-MIB", "f3TwampSessionInnerVlanPriority"), ("F3-TWAMP-MIB", "f3TwampSessionDscpValue"), ("F3-TWAMP-MIB", "f3TwampSessionSequenceNumber"), ("F3-TWAMP-MIB", "f3TwampSessionAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TwampSessionGroup = f3TwampSessionGroup.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionGroup.setDescription('A collection of TWAMP Session objects.')
f3TwampControlClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 2, 6)).setObjects(("F3-TWAMP-MIB", "f3TwampControlClientAdminState"), ("F3-TWAMP-MIB", "f3TwampControlClientOperationalState"), ("F3-TWAMP-MIB", "f3TwampControlClientSecondaryState"), ("F3-TWAMP-MIB", "f3TwampControlClientAlias"), ("F3-TWAMP-MIB", "f3TwampControlClientPort"), ("F3-TWAMP-MIB", "f3TwampControlClientStatus"), ("F3-TWAMP-MIB", "f3TwampControlClientActionObject"), ("F3-TWAMP-MIB", "f3TwampControlClientAction"), ("F3-TWAMP-MIB", "f3TwampControlClientStorageType"), ("F3-TWAMP-MIB", "f3TwampControlClientRowStatus"), ("F3-TWAMP-MIB", "f3TwampControlClientSessionType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TwampControlClientGroup = f3TwampControlClientGroup.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientGroup.setDescription('A collection of TWAMP Control Client objects.')
f3TwampControlClientSessionSenderGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 2, 7)).setObjects(("F3-TWAMP-MIB", "f3TwampControlClientSessionSender"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TwampControlClientSessionSenderGroup = f3TwampControlClientSessionSenderGroup.setStatus('current')
if mibBuilder.loadTexts: f3TwampControlClientSessionSenderGroup.setDescription('A collection of TWAMP Control Client Session Sender List objects.')
f3TwampSessionSenderGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 2, 8)).setObjects(("F3-TWAMP-MIB", "f3TwampSessionSenderAdminState"), ("F3-TWAMP-MIB", "f3TwampSessionSenderOperationalState"), ("F3-TWAMP-MIB", "f3TwampSessionSenderSecondaryState"), ("F3-TWAMP-MIB", "f3TwampSessionSenderAlias"), ("F3-TWAMP-MIB", "f3TwampSessionSenderIpInterface"), ("F3-TWAMP-MIB", "f3TwampSessionSenderUdpPort"), ("F3-TWAMP-MIB", "f3TwampSessionSenderPktSchedTimeInterval"), ("F3-TWAMP-MIB", "f3TwampSessionSenderSrIpv4Address"), ("F3-TWAMP-MIB", "f3TwampSessionSenderSrUdpPort"), ("F3-TWAMP-MIB", "f3TwampSessionSenderDscpValue"), ("F3-TWAMP-MIB", "f3TwampSessionSenderNumPkts"), ("F3-TWAMP-MIB", "f3TwampSessionSenderPktSize"), ("F3-TWAMP-MIB", "f3TwampSessionSenderTestPattern"), ("F3-TWAMP-MIB", "f3TwampSessionSenderStartTimeType"), ("F3-TWAMP-MIB", "f3TwampSessionSenderStartDate"), ("F3-TWAMP-MIB", "f3TwampSessionSenderStartTime"), ("F3-TWAMP-MIB", "f3TwampSessionSenderRespTimeout"), ("F3-TWAMP-MIB", "f3TwampSessionSenderVlanEnabled"), ("F3-TWAMP-MIB", "f3TwampSessionSenderOuterVlanId"), ("F3-TWAMP-MIB", "f3TwampSessionSenderOuterVlanPriority"), ("F3-TWAMP-MIB", "f3TwampSessionSenderOuterVlanEtherType"), ("F3-TWAMP-MIB", "f3TwampSessionSenderInnerVlanEnabled"), ("F3-TWAMP-MIB", "f3TwampSessionSenderInnerVlanId"), ("F3-TWAMP-MIB", "f3TwampSessionSenderInnerVlanPriority"), ("F3-TWAMP-MIB", "f3TwampSessionSenderInnerVlanEtherType"), ("F3-TWAMP-MIB", "f3TwampSessionSenderSeqNumber"), ("F3-TWAMP-MIB", "f3TwampSessionSenderStatus"), ("F3-TWAMP-MIB", "f3TwampSessionSenderAssocControlClient"), ("F3-TWAMP-MIB", "f3TwampSessionSenderHistoryBins"), ("F3-TWAMP-MIB", "f3TwampSessionSenderHistoryInterval"), ("F3-TWAMP-MIB", "f3TwampSessionSenderDistHistoryBins"), ("F3-TWAMP-MIB", "f3TwampSessionSenderDistHistoryInterval"), ("F3-TWAMP-MIB", "f3TwampSessionSenderStorageType"), ("F3-TWAMP-MIB", "f3TwampSessionSenderRowStatus"), ("F3-TWAMP-MIB", "f3TwampSessionSenderValidateErrorEstimate"), ("F3-TWAMP-MIB", "f3TwampSessionSenderIpMode"), ("F3-TWAMP-MIB", "f3TwampSessionSenderIpAddress"), ("F3-TWAMP-MIB", "f3TwampSessionSenderSrIpAddress"), ("F3-TWAMP-MIB", "f3TwampSessionSenderStopTimeType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TwampSessionSenderGroup = f3TwampSessionSenderGroup.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionSenderGroup.setDescription('A collection of TWAMP Session Sender objects.')
f3TwampStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 2, 9))
for _f3TwampStatisticsGroup_obj in [[("F3-TWAMP-MIB", "f3TwampStatsValid"), ("F3-TWAMP-MIB", "f3TwampStatsAction"), ("F3-TWAMP-MIB", "f3TwampStatsTime"), ("F3-TWAMP-MIB", "f3TwampStatsS2RPkts"), ("F3-TWAMP-MIB", "f3TwampStatsR2SPkts"), ("F3-TWAMP-MIB", "f3TwampStatsS2RLostPkts"), ("F3-TWAMP-MIB", "f3TwampStatsR2SLostPkts"), ("F3-TWAMP-MIB", "f3TwampStatsS2RSyncErrs"), ("F3-TWAMP-MIB", "f3TwampStatsR2SSyncErrs"), ("F3-TWAMP-MIB", "f3TwampStatsOutOfSeqErrs"), ("F3-TWAMP-MIB", "f3TwampStatsSeqGaps"), ("F3-TWAMP-MIB", "f3TwampStatsMinTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampStatsMaxTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampStatsAvgTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampStatsSumTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampStatsSumOfSqTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampStatsMinOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampStatsMaxOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampStatsAvgOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampStatsSumOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampStatsSumOfSqOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampStatsMinOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampStatsMaxOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampStatsAvgOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampStatsSumOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampStatsSumOfSqOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampStatsMinOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatsMaxOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatsAvgOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatsSumOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatsSumOfSqOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatsNumOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatsMinOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatsMaxOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatsAvgOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatsSumOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatsSumOfSqOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatsNumOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatsMinOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatsMaxOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatsAvgOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatsSumOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatsSumOfSqOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatsNumOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatsMinOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatsMaxOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatsAvgOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatsSumOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatsSumOfSqOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatsNumOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatsMinOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatsMaxOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatsAvgOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatsSumOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatsSumOfSqOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatsNumOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatsMinOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatsMaxOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatsAvgOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatsSumOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatsSumOfSqOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatsNumOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatsNumTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampStatsNumOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampStatsNumOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampHistoryValid"), ("F3-TWAMP-MIB", "f3TwampHistoryAction"), ("F3-TWAMP-MIB", "f3TwampHistoryTime"), ("F3-TWAMP-MIB", "f3TwampHistoryS2RPkts"), ("F3-TWAMP-MIB", "f3TwampHistoryR2SPkts"), ("F3-TWAMP-MIB", "f3TwampHistoryS2RLostPkts"), ("F3-TWAMP-MIB", "f3TwampHistoryR2SLostPkts"), ("F3-TWAMP-MIB", "f3TwampHistoryS2RSyncErrs"), ("F3-TWAMP-MIB", "f3TwampHistoryR2SSyncErrs"), ("F3-TWAMP-MIB", "f3TwampHistoryOutOfSeqErrs"), ("F3-TWAMP-MIB", "f3TwampHistorySeqGaps"), ("F3-TWAMP-MIB", "f3TwampHistoryMinTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampHistoryMaxTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampHistoryAvgTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampHistorySumTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampHistorySumOfSqTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampHistoryMinOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampHistoryMaxOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampHistoryAvgOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampHistorySumOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampHistorySumOfSqOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampHistoryMinOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampHistoryMaxOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampHistoryAvgOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampHistorySumOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampHistorySumOfSqOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampHistoryMinOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryMaxOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryAvgOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistorySumOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistorySumOfSqOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryNumOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryMinOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryMaxOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryAvgOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistorySumOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistorySumOfSqOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryNumOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryMinOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryMaxOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryAvgOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistorySumOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistorySumOfSqOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryNumOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryMinOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryMaxOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryAvgOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistorySumOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistorySumOfSqOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryNumOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryMinOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryMaxOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryAvgOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistorySumOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistorySumOfSqOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryNumOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryMinOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryMaxOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryAvgOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistorySumOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistorySumOfSqOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryNumOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryNumTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampHistoryNumOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampHistoryNumOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampStatisticIndex"), ("F3-TWAMP-MIB", "f3TwampStatisticValid"), ("F3-TWAMP-MIB", "f3TwampStatisticAction"), ("F3-TWAMP-MIB", "f3TwampStatisticTime"), ("F3-TWAMP-MIB", "f3TwampStatisticS2RPkts"), ("F3-TWAMP-MIB", "f3TwampStatisticR2SPkts"), ("F3-TWAMP-MIB", "f3TwampStatisticS2RLostPkts"), ("F3-TWAMP-MIB", "f3TwampStatisticR2SLostPkts"), ("F3-TWAMP-MIB", "f3TwampStatisticS2RSyncErrs"), ("F3-TWAMP-MIB", "f3TwampStatisticR2SSyncErrs"), ("F3-TWAMP-MIB", "f3TwampStatisticOutOfSeqErrs"), ("F3-TWAMP-MIB", "f3TwampStatisticSeqGaps"), ("F3-TWAMP-MIB", "f3TwampStatisticMinTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampStatisticMaxTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampStatisticAvgTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampStatisticSumTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOfSqTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampStatisticMinOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampStatisticMaxOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampStatisticAvgOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOfSqOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampStatisticMinOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampStatisticMaxOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampStatisticAvgOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOfSqOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampStatisticMinOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticMaxOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticAvgOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOfSqOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticNumOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticMinOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticMaxOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticAvgOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOfSqOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticNumOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticMinOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticMaxOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticAvgOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOfSqOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticNumOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticMinOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticMaxOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticAvgOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOfSqOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticNumOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticMinOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticMaxOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticAvgOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOfSqOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticNumOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticMinOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticMaxOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticAvgOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticSumOfSqOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticNumOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampStatisticNumTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampStatisticNumOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampStatisticNumOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampStatisticUdpChecksumFailures"), ("F3-TWAMP-MIB", "f3TwampHistoryDataIndex"), ("F3-TWAMP-MIB", "f3TwampHistoryDataValid"), ("F3-TWAMP-MIB", "f3TwampHistoryDataAction"), ("F3-TWAMP-MIB", "f3TwampHistoryDataTime"), ("F3-TWAMP-MIB", "f3TwampHistoryDataS2RPkts"), ("F3-TWAMP-MIB", "f3TwampHistoryDataR2SPkts"), ("F3-TWAMP-MIB", "f3TwampHistoryDataS2RLostPkts"), ("F3-TWAMP-MIB", "f3TwampHistoryDataR2SLostPkts"), ("F3-TWAMP-MIB", "f3TwampHistoryDataS2RSyncErrs"), ("F3-TWAMP-MIB", "f3TwampHistoryDataR2SSyncErrs"), ("F3-TWAMP-MIB", "f3TwampHistoryDataOutOfSeqErrs"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSeqGaps"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMinTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMaxTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataAvgTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOfSqTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMinOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMaxOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataAvgOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOfSqOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMinOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMaxOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataAvgOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOfSqOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMinOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMaxOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataAvgOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOfSqOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataNumOneWayS2RAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMinOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMaxOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataAvgOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOfSqOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataNumOneWayR2SAbsPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMinOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMaxOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataAvgOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOfSqOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataNumOneWayS2RNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMinOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMaxOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataAvgOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOfSqOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataNumOneWayR2SNegPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMinOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMaxOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataAvgOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOfSqOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataNumOneWayS2RPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataMinOneWayR2SPosPDV")], [("F3-TWAMP-MIB", "f3TwampHistoryDataMaxOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataAvgOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataSumOfSqOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataNumOneWayR2SPosPDV"), ("F3-TWAMP-MIB", "f3TwampHistoryDataNumTwoWayPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataNumOneWayS2RPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataNumOneWayR2SPD"), ("F3-TWAMP-MIB", "f3TwampHistoryDataUdpChecksumFailures")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        f3TwampStatisticsGroup = f3TwampStatisticsGroup.setObjects(*_f3TwampStatisticsGroup_obj)
    else:
        f3TwampStatisticsGroup = f3TwampStatisticsGroup.setObjects(*_f3TwampStatisticsGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TwampStatisticsGroup = f3TwampStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: f3TwampStatisticsGroup.setDescription('A collection of TWAMP Statistics objects.')
f3TwampDistributionStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 2, 10)).setObjects(("F3-TWAMP-MIB", "f3TwampDistStatsConfigMinVal"), ("F3-TWAMP-MIB", "f3TwampDistStatsConfigMaxVal"), ("F3-TWAMP-MIB", "f3TwampDistStatsConfigNumBins"), ("F3-TWAMP-MIB", "f3TwampDistStatsValid"), ("F3-TWAMP-MIB", "f3TwampDistStatsTime"), ("F3-TWAMP-MIB", "f3TwampDistStatsAction"), ("F3-TWAMP-MIB", "f3TwampDistStatsNumBins"), ("F3-TWAMP-MIB", "f3TwampDistStatsLTMin"), ("F3-TWAMP-MIB", "f3TwampDistStatsGTMax"), ("F3-TWAMP-MIB", "f3TwampDistStatsBinLower"), ("F3-TWAMP-MIB", "f3TwampDistStatsBinUpper"), ("F3-TWAMP-MIB", "f3TwampDistStatsBinNumSamples"), ("F3-TWAMP-MIB", "f3TwampDistHistoryValid"), ("F3-TWAMP-MIB", "f3TwampDistHistoryTime"), ("F3-TWAMP-MIB", "f3TwampDistHistoryAction"), ("F3-TWAMP-MIB", "f3TwampDistHistoryNumBins"), ("F3-TWAMP-MIB", "f3TwampDistHistoryLTMin"), ("F3-TWAMP-MIB", "f3TwampDistHistoryGTMax"), ("F3-TWAMP-MIB", "f3TwampDistHistoryBinLower"), ("F3-TWAMP-MIB", "f3TwampDistHistoryBinUpper"), ("F3-TWAMP-MIB", "f3TwampDistHistoryBinNumSamples"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TwampDistributionStatisticsGroup = f3TwampDistributionStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: f3TwampDistributionStatisticsGroup.setDescription('A collection of TWAMP Distribution Statistics objects.')
f3TwampThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 2, 11)).setObjects(("F3-TWAMP-MIB", "f3TwampStatsThresholdVariable"), ("F3-TWAMP-MIB", "f3TwampStatsThresholdAbsValueLo"), ("F3-TWAMP-MIB", "f3TwampStatsThresholdAbsValueHi"), ("F3-TWAMP-MIB", "f3TwampStatsThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TwampThresholdGroup = f3TwampThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: f3TwampThresholdGroup.setDescription('A collection of TWAMP Threshold objects.')
f3TwampSessionV2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 33, 4, 2, 12)).setObjects(("F3-TWAMP-MIB", "f3TwampSessionV2Status"), ("F3-TWAMP-MIB", "f3TwampSessionV2VlanEnabled"), ("F3-TWAMP-MIB", "f3TwampSessionV2OuterVlanEtherType"), ("F3-TWAMP-MIB", "f3TwampSessionV2OuterVlanId"), ("F3-TWAMP-MIB", "f3TwampSessionV2OuterVlanPriority"), ("F3-TWAMP-MIB", "f3TwampSessionV2InnerVlanEnabled"), ("F3-TWAMP-MIB", "f3TwampSessionV2InnerVlanEtherType"), ("F3-TWAMP-MIB", "f3TwampSessionV2InnerVlanId"), ("F3-TWAMP-MIB", "f3TwampSessionV2InnerVlanPriority"), ("F3-TWAMP-MIB", "f3TwampSessionV2DscpValue"), ("F3-TWAMP-MIB", "f3TwampSessionV2SequenceNumber"), ("F3-TWAMP-MIB", "f3TwampSessionV2Action"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TwampSessionV2Group = f3TwampSessionV2Group.setStatus('current')
if mibBuilder.loadTexts: f3TwampSessionV2Group.setDescription('A collection of TWAMP Session V2 objects.')
mibBuilder.exportSymbols("F3-TWAMP-MIB", f3TwampDistHistoryTime=f3TwampDistHistoryTime, f3TwampSessionReflectorStorageType=f3TwampSessionReflectorStorageType, f3TwampHistoryMaxOneWayS2RNegPDV=f3TwampHistoryMaxOneWayS2RNegPDV, f3TwampHistoryDataSumOneWayS2RAbsPDV=f3TwampHistoryDataSumOneWayS2RAbsPDV, f3TwampSessionSenderAssocControlClient=f3TwampSessionSenderAssocControlClient, f3TwampSessionSenderDistHistoryInterval=f3TwampSessionSenderDistHistoryInterval, f3TwampSessionSenderInnerVlanEnabled=f3TwampSessionSenderInnerVlanEnabled, f3TwampStatsAvgOneWayR2SNegPDV=f3TwampStatsAvgOneWayR2SNegPDV, f3TwampActionObjects=f3TwampActionObjects, f3TwampStatsThresholdVariable=f3TwampStatsThresholdVariable, f3TwampHistorySumOneWayR2SNegPDV=f3TwampHistorySumOneWayR2SNegPDV, f3TwampHistoryDataNumOneWayS2RPD=f3TwampHistoryDataNumOneWayS2RPD, f3TwampSessionSenderEntry=f3TwampSessionSenderEntry, f3TwampHistoryAvgOneWayS2RPD=f3TwampHistoryAvgOneWayS2RPD, f3TwampSessionV2OuterVlanPriority=f3TwampSessionV2OuterVlanPriority, f3TwampStatisticNumOneWayR2SNegPDV=f3TwampStatisticNumOneWayR2SNegPDV, f3TwampIpInterfaceIpv4Mask=f3TwampIpInterfaceIpv4Mask, f3TwampStatsAvgOneWayS2RAbsPDV=f3TwampStatsAvgOneWayS2RAbsPDV, f3TwampIpInterfaceRowStatus=f3TwampIpInterfaceRowStatus, f3TwampStatisticSumOfSqOneWayR2SPD=f3TwampStatisticSumOfSqOneWayR2SPD, f3TwampStatisticMinOneWayS2RAbsPDV=f3TwampStatisticMinOneWayS2RAbsPDV, f3TwampStatisticMaxOneWayR2SNegPDV=f3TwampStatisticMaxOneWayR2SNegPDV, f3TwampGroups=f3TwampGroups, f3TwampDistHistoryGTMax=f3TwampDistHistoryGTMax, f3TwampStatisticSumOfSqOneWayR2SAbsPDV=f3TwampStatisticSumOfSqOneWayR2SAbsPDV, f3TwampStatisticUdpChecksumFailures=f3TwampStatisticUdpChecksumFailures, f3TwampSessionV2Action=f3TwampSessionV2Action, f3TwampStatisticNumOneWayS2RPD=f3TwampStatisticNumOneWayS2RPD, f3TwampServerActionObject=f3TwampServerActionObject, f3TwampStatsNumOneWayS2RPosPDV=f3TwampStatsNumOneWayS2RPosPDV, f3TwampSessionSenderOuterVlanEtherType=f3TwampSessionSenderOuterVlanEtherType, f3TwampDistHistoryAction=f3TwampDistHistoryAction, f3TwampStatsS2RSyncErrs=f3TwampStatsS2RSyncErrs, f3TwampHistoryDataAvgOneWayS2RAbsPDV=f3TwampHistoryDataAvgOneWayS2RAbsPDV, f3TwampSessionReflectorIpInterface=f3TwampSessionReflectorIpInterface, f3TwampStatisticAvgOneWayR2SPosPDV=f3TwampStatisticAvgOneWayR2SPosPDV, f3TwampStatisticR2SSyncErrs=f3TwampStatisticR2SSyncErrs, f3TwampHistoryDataMinOneWayR2SPosPDV=f3TwampHistoryDataMinOneWayR2SPosPDV, f3TwampHistoryDataAvgOneWayR2SAbsPDV=f3TwampHistoryDataAvgOneWayR2SAbsPDV, f3TwampHistoryDataMinOneWayS2RPD=f3TwampHistoryDataMinOneWayS2RPD, f3TwampServerAdminState=f3TwampServerAdminState, f3TwampHistorySumOfSqOneWayS2RAbsPDV=f3TwampHistorySumOfSqOneWayS2RAbsPDV, f3TwampStatsThresholdAbsValueLo=f3TwampStatsThresholdAbsValueLo, f3TwampStatsSumOneWayS2RPD=f3TwampStatsSumOneWayS2RPD, f3TwampHistoryR2SSyncErrs=f3TwampHistoryR2SSyncErrs, f3TwampSessionSenderTable=f3TwampSessionSenderTable, f3TwampStatisticMaxOneWayR2SPD=f3TwampStatisticMaxOneWayR2SPD, f3TwampHistoryTime=f3TwampHistoryTime, f3TwampHistoryS2RPkts=f3TwampHistoryS2RPkts, f3TwampServerAlias=f3TwampServerAlias, f3TwampStatsSumOfSqOneWayS2RPosPDV=f3TwampStatsSumOfSqOneWayS2RPosPDV, f3TwampStatsTime=f3TwampStatsTime, f3TwampStatsThresholdIndex=f3TwampStatsThresholdIndex, f3TwampHistoryDataMaxOneWayR2SPosPDV=f3TwampHistoryDataMaxOneWayR2SPosPDV, f3TwampHistoryNumOneWayR2SPosPDV=f3TwampHistoryNumOneWayR2SPosPDV, TwampControlClientAction=TwampControlClientAction, f3TwampSessionOuterVlanEtherType=f3TwampSessionOuterVlanEtherType, f3TwampStatisticValid=f3TwampStatisticValid, f3TwampIpInterfaceMtu=f3TwampIpInterfaceMtu, f3TwampControlClientSessionSenderIndex=f3TwampControlClientSessionSenderIndex, f3TwampStatsSumOneWayR2SAbsPDV=f3TwampStatsSumOneWayR2SAbsPDV, f3TwampHistoryDataS2RPkts=f3TwampHistoryDataS2RPkts, f3TwampStatisticMinOneWayR2SNegPDV=f3TwampStatisticMinOneWayR2SNegPDV, f3TwampHistoryDataTime=f3TwampHistoryDataTime, f3TwampStatsNumOneWayR2SNegPDV=f3TwampStatsNumOneWayR2SNegPDV, f3TwampHistorySumOneWayR2SPosPDV=f3TwampHistorySumOneWayR2SPosPDV, f3TwampStatsTable=f3TwampStatsTable, TwampSessionStatus=TwampSessionStatus, f3TwampStatisticSumOneWayR2SPosPDV=f3TwampStatisticSumOneWayR2SPosPDV, f3TwampStatisticNumOneWayS2RAbsPDV=f3TwampStatisticNumOneWayS2RAbsPDV, f3TwampDistHistoryIndex=f3TwampDistHistoryIndex, f3TwampHistoryMinOneWayS2RNegPDV=f3TwampHistoryMinOneWayS2RNegPDV, f3TwampStatisticSumOneWayR2SNegPDV=f3TwampStatisticSumOneWayR2SNegPDV, f3TwampStatsMaxOneWayS2RPosPDV=f3TwampStatsMaxOneWayS2RPosPDV, TwampServerAction=TwampServerAction, f3TwampDistStatsBinTable=f3TwampDistStatsBinTable, f3TwampSessionV2Group=f3TwampSessionV2Group, f3TwampControlClientAdminState=f3TwampControlClientAdminState, f3TwampSessionSenderSrIpAddress=f3TwampSessionSenderSrIpAddress, f3TwampHistoryDataMaxTwoWayPD=f3TwampHistoryDataMaxTwoWayPD, f3TwampSessionV2InnerVlanEtherType=f3TwampSessionV2InnerVlanEtherType, f3TwampStatisticSumOfSqOneWayR2SPosPDV=f3TwampStatisticSumOfSqOneWayR2SPosPDV, f3TwampHistoryAction=f3TwampHistoryAction, f3TwampServerIndex=f3TwampServerIndex, f3TwampSessionV2SsUdpPort=f3TwampSessionV2SsUdpPort, f3TwampHistoryDataS2RSyncErrs=f3TwampHistoryDataS2RSyncErrs, f3TwampControlClientOperationalState=f3TwampControlClientOperationalState, f3TwampControlClientSessionSenderTable=f3TwampControlClientSessionSenderTable, f3TwampStatisticMaxOneWayS2RAbsPDV=f3TwampStatisticMaxOneWayS2RAbsPDV, f3TwampHistorySumTwoWayPD=f3TwampHistorySumTwoWayPD, f3TwampHistoryDataAvgOneWayS2RPD=f3TwampHistoryDataAvgOneWayS2RPD, f3TwampDistStatsValid=f3TwampDistStatsValid, f3TwampStatisticAvgOneWayR2SPD=f3TwampStatisticAvgOneWayR2SPD, f3TwampHistoryMaxOneWayR2SPosPDV=f3TwampHistoryMaxOneWayR2SPosPDV, f3TwampHistoryAvgOneWayS2RAbsPDV=f3TwampHistoryAvgOneWayS2RAbsPDV, f3TwampControlClientEntry=f3TwampControlClientEntry, f3TwampHistoryDataNumOneWayS2RPosPDV=f3TwampHistoryDataNumOneWayS2RPosPDV, f3TwampHistoryDataTable=f3TwampHistoryDataTable, f3TwampIpInterfaceIpv6LinkLocalAddr=f3TwampIpInterfaceIpv6LinkLocalAddr, f3TwampHistoryDataIndex=f3TwampHistoryDataIndex, f3TwampStatisticMaxOneWayR2SPosPDV=f3TwampStatisticMaxOneWayR2SPosPDV, f3TwampServerSessionAgingTimeout=f3TwampServerSessionAgingTimeout, f3TwampSessionSenderPktSchedTimeInterval=f3TwampSessionSenderPktSchedTimeInterval, f3TwampStatsAction=f3TwampStatsAction, f3TwampHistoryAvgOneWayR2SPosPDV=f3TwampHistoryAvgOneWayR2SPosPDV, f3TwampStatisticSumOfSqOneWayS2RAbsPDV=f3TwampStatisticSumOfSqOneWayS2RAbsPDV, f3TwampStatsSumOfSqOneWayR2SNegPDV=f3TwampStatsSumOfSqOneWayR2SNegPDV, f3TwampServerSessionReflectorTable=f3TwampServerSessionReflectorTable, f3TwampHistoryDataNumOneWayR2SPosPDV=f3TwampHistoryDataNumOneWayR2SPosPDV, f3TwampHistorySumOfSqOneWayR2SAbsPDV=f3TwampHistorySumOfSqOneWayR2SAbsPDV, f3TwampHistoryDataSumOfSqOneWayS2RPD=f3TwampHistoryDataSumOfSqOneWayS2RPD, f3TwampHistoryDataR2SLostPkts=f3TwampHistoryDataR2SLostPkts, f3TwampHistoryDataMinOneWayS2RNegPDV=f3TwampHistoryDataMinOneWayS2RNegPDV, f3TwampDistStatsBinNumSamples=f3TwampDistStatsBinNumSamples, f3TwampStatsMinTwoWayPD=f3TwampStatsMinTwoWayPD, f3TwampStatsAvgOneWayR2SPosPDV=f3TwampStatsAvgOneWayR2SPosPDV, f3TwampSessionSenderStopTimeType=f3TwampSessionSenderStopTimeType, f3TwampSessionV2SsIpAddress=f3TwampSessionV2SsIpAddress, f3TwampSessionSsIpv4Address=f3TwampSessionSsIpv4Address, f3TwampStatisticS2RLostPkts=f3TwampStatisticS2RLostPkts, f3TwampSessionV2SequenceNumber=f3TwampSessionV2SequenceNumber, f3TwampHistoryDataAvgOneWayR2SNegPDV=f3TwampHistoryDataAvgOneWayR2SNegPDV, f3TwampStatisticsGroup=f3TwampStatisticsGroup, f3TwampSessionSenderOuterVlanId=f3TwampSessionSenderOuterVlanId, f3TwampHistoryMinOneWayR2SPosPDV=f3TwampHistoryMinOneWayR2SPosPDV, f3TwampHistoryS2RSyncErrs=f3TwampHistoryS2RSyncErrs, f3TwampStatisticSumOfSqOneWayR2SNegPDV=f3TwampStatisticSumOfSqOneWayR2SNegPDV, f3TwampStatsMaxOneWayR2SAbsPDV=f3TwampStatsMaxOneWayR2SAbsPDV, f3TwampStatisticMinOneWayS2RNegPDV=f3TwampStatisticMinOneWayS2RNegPDV, f3TwampStatisticAvgTwoWayPD=f3TwampStatisticAvgTwoWayPD, f3TwampSessionV2Status=f3TwampSessionV2Status, f3TwampHistoryDataMaxOneWayR2SNegPDV=f3TwampHistoryDataMaxOneWayR2SNegPDV, f3TwampMIB=f3TwampMIB, f3TwampStatisticAvgOneWayS2RPD=f3TwampStatisticAvgOneWayS2RPD, f3TwampStatisticAvgOneWayS2RAbsPDV=f3TwampStatisticAvgOneWayS2RAbsPDV, f3TwampStatsNumOneWayR2SPD=f3TwampStatsNumOneWayR2SPD, f3TwampStatisticTime=f3TwampStatisticTime, f3TwampStatisticSumOneWayS2RPosPDV=f3TwampStatisticSumOneWayS2RPosPDV, f3TwampHistoryDataMaxOneWayS2RPD=f3TwampHistoryDataMaxOneWayS2RPD, f3TwampHistoryEntry=f3TwampHistoryEntry, f3TwampStatisticNumOneWayR2SPosPDV=f3TwampStatisticNumOneWayR2SPosPDV, f3TwampSessionAction=f3TwampSessionAction, f3TwampSessionReflectorRowStatus=f3TwampSessionReflectorRowStatus, f3TwampStatsMinOneWayS2RAbsPDV=f3TwampStatsMinOneWayS2RAbsPDV, f3TwampStatsSumOneWayR2SNegPDV=f3TwampStatsSumOneWayR2SNegPDV, f3TwampStatsSumOfSqOneWayR2SAbsPDV=f3TwampStatsSumOfSqOneWayR2SAbsPDV, f3TwampHistoryAvgOneWayR2SNegPDV=f3TwampHistoryAvgOneWayR2SNegPDV, f3TwampServerTable=f3TwampServerTable, f3TwampSessionOuterVlanId=f3TwampSessionOuterVlanId, f3TwampHistoryAvgOneWayR2SPD=f3TwampHistoryAvgOneWayR2SPD, f3TwampDistHistoryValid=f3TwampDistHistoryValid, f3TwampHistoryDataAvgOneWayS2RPosPDV=f3TwampHistoryDataAvgOneWayS2RPosPDV, f3TwampDistStatsBinIndex=f3TwampDistStatsBinIndex, f3TwampStatsSumOneWayS2RAbsPDV=f3TwampStatsSumOneWayS2RAbsPDV, f3TwampStatsThresholdTable=f3TwampStatsThresholdTable, f3TwampSessionSenderStartTime=f3TwampSessionSenderStartTime, f3TwampHistorySumOfSqOneWayS2RNegPDV=f3TwampHistorySumOfSqOneWayS2RNegPDV, f3TwampStatisticS2RSyncErrs=f3TwampStatisticS2RSyncErrs, TwampServerStatus=TwampServerStatus, f3TwampSessionSsUdpPort=f3TwampSessionSsUdpPort, f3TwampSessionSenderVlanEnabled=f3TwampSessionSenderVlanEnabled, f3TwampHistoryMinOneWayS2RAbsPDV=f3TwampHistoryMinOneWayS2RAbsPDV, f3TwampStatisticMinOneWayS2RPosPDV=f3TwampStatisticMinOneWayS2RPosPDV, f3TwampControlClientSecondaryState=f3TwampControlClientSecondaryState, f3TwampStatsR2SPkts=f3TwampStatsR2SPkts, f3TwampServerSessionReflectorIndex=f3TwampServerSessionReflectorIndex, f3TwampHistoryDataSumOneWayR2SPD=f3TwampHistoryDataSumOneWayR2SPD, f3TwampStatisticNumOneWayR2SAbsPDV=f3TwampStatisticNumOneWayR2SAbsPDV, f3TwampStatisticAvgOneWayR2SAbsPDV=f3TwampStatisticAvgOneWayR2SAbsPDV, f3TwampSessionSenderRespTimeout=f3TwampSessionSenderRespTimeout, f3TwampIpInterfaceTable=f3TwampIpInterfaceTable, f3TwampStatisticR2SLostPkts=f3TwampStatisticR2SLostPkts, f3TwampStatsMinOneWayS2RPosPDV=f3TwampStatsMinOneWayS2RPosPDV, f3TwampStatsSumOfSqOneWayS2RNegPDV=f3TwampStatsSumOfSqOneWayS2RNegPDV, f3TwampStatisticMaxTwoWayPD=f3TwampStatisticMaxTwoWayPD, f3TwampSessionSenderGroup=f3TwampSessionSenderGroup, f3TwampStatisticSumOfSqTwoWayPD=f3TwampStatisticSumOfSqTwoWayPD, f3TwampStatisticMinOneWayR2SPosPDV=f3TwampStatisticMinOneWayR2SPosPDV, f3TwampServerRowStatus=f3TwampServerRowStatus, f3TwampStatsMinOneWayS2RPD=f3TwampStatsMinOneWayS2RPD, f3TwampDistStatsConfigIndex=f3TwampDistStatsConfigIndex, f3TwampDistHistoryLTMin=f3TwampDistHistoryLTMin, f3TwampDistStatsConfigEntry=f3TwampDistStatsConfigEntry, f3TwampStatsSumOneWayR2SPD=f3TwampStatsSumOneWayR2SPD, TwampSessionType=TwampSessionType, f3TwampHistoryDataNumOneWayS2RAbsPDV=f3TwampHistoryDataNumOneWayS2RAbsPDV, f3TwampSessionReflectorOperationalState=f3TwampSessionReflectorOperationalState, f3TwampStatsThresholdAbsValueHi=f3TwampStatsThresholdAbsValueHi, f3TwampStatisticSumOneWayR2SAbsPDV=f3TwampStatisticSumOneWayR2SAbsPDV, f3TwampSessionReflectorGroup=f3TwampSessionReflectorGroup, f3TwampControlClientIndex=f3TwampControlClientIndex, f3TwampHistorySumOneWayS2RNegPDV=f3TwampHistorySumOneWayS2RNegPDV, f3TwampControlClientAlias=f3TwampControlClientAlias, f3TwampStatsAvgOneWayR2SAbsPDV=f3TwampStatsAvgOneWayR2SAbsPDV, f3TwampHistoryAvgOneWayS2RPosPDV=f3TwampHistoryAvgOneWayS2RPosPDV, f3TwampIpInterfaceIpv6LinkLocalAddrPrefixLen=f3TwampIpInterfaceIpv6LinkLocalAddrPrefixLen, f3TwampStatisticEntry=f3TwampStatisticEntry, f3TwampStatisticSumOneWayS2RAbsPDV=f3TwampStatisticSumOneWayS2RAbsPDV, f3TwampHistoryDataSumOneWayS2RPosPDV=f3TwampHistoryDataSumOneWayS2RPosPDV, f3TwampSessionSenderSrIpv4Address=f3TwampSessionSenderSrIpv4Address, f3TwampStatsAvgTwoWayPD=f3TwampStatsAvgTwoWayPD, f3TwampHistoryDataSumOfSqOneWayR2SNegPDV=f3TwampHistoryDataSumOfSqOneWayR2SNegPDV, f3TwampStatsThresholdEntry=f3TwampStatsThresholdEntry, f3TwampHistoryAvgOneWayR2SAbsPDV=f3TwampHistoryAvgOneWayR2SAbsPDV, f3TwampHistoryNumOneWayS2RNegPDV=f3TwampHistoryNumOneWayS2RNegPDV, f3TwampHistorySumOfSqOneWayR2SPD=f3TwampHistorySumOfSqOneWayR2SPD, f3TwampDistHistoryBinLower=f3TwampDistHistoryBinLower, f3TwampStatsNumOneWayS2RNegPDV=f3TwampStatsNumOneWayS2RNegPDV, f3TwampDistStatsConfigNumBins=f3TwampDistStatsConfigNumBins, f3TwampControlClientSessionSenderEntry=f3TwampControlClientSessionSenderEntry, f3TwampStatsMaxOneWayS2RNegPDV=f3TwampStatsMaxOneWayS2RNegPDV, f3TwampStatsSumOfSqOneWayR2SPD=f3TwampStatsSumOfSqOneWayR2SPD, f3TwampSessionInnerVlanEtherType=f3TwampSessionInnerVlanEtherType, f3TwampHistoryMinOneWayR2SAbsPDV=f3TwampHistoryMinOneWayR2SAbsPDV, f3TwampSessionSenderAdminState=f3TwampSessionSenderAdminState, f3TwampControlClientRowStatus=f3TwampControlClientRowStatus, f3TwampStatisticAvgOneWayS2RPosPDV=f3TwampStatisticAvgOneWayS2RPosPDV, f3TwampHistoryAvgOneWayS2RNegPDV=f3TwampHistoryAvgOneWayS2RNegPDV, f3TwampSessionSenderIndex=f3TwampSessionSenderIndex, f3TwampStatisticR2SPkts=f3TwampStatisticR2SPkts, f3TwampHistoryR2SPkts=f3TwampHistoryR2SPkts, f3TwampSessionSenderStartDate=f3TwampSessionSenderStartDate, f3TwampStatsMinOneWayR2SAbsPDV=f3TwampStatsMinOneWayR2SAbsPDV, f3TwampControlClientSessionType=f3TwampControlClientSessionType, f3TwampHistoryDataSumOfSqOneWayS2RNegPDV=f3TwampHistoryDataSumOfSqOneWayS2RNegPDV, f3TwampHistoryDataSumOfSqOneWayS2RPosPDV=f3TwampHistoryDataSumOfSqOneWayS2RPosPDV, f3TwampSessionSenderInnerVlanId=f3TwampSessionSenderInnerVlanId, f3TwampHistoryDataAvgOneWayS2RNegPDV=f3TwampHistoryDataAvgOneWayS2RNegPDV, f3TwampHistoryDataMinOneWayS2RPosPDV=f3TwampHistoryDataMinOneWayS2RPosPDV, f3TwampStatsNumOneWayR2SAbsPDV=f3TwampStatsNumOneWayR2SAbsPDV, f3TwampDistHistoryBinUpper=f3TwampDistHistoryBinUpper, f3TwampHistorySumOneWayS2RAbsPDV=f3TwampHistorySumOneWayS2RAbsPDV, f3TwampDistHistoryBinTable=f3TwampDistHistoryBinTable, f3TwampStatisticNumOneWayS2RPosPDV=f3TwampStatisticNumOneWayS2RPosPDV, f3TwampHistoryDataAvgTwoWayPD=f3TwampHistoryDataAvgTwoWayPD, f3TwampHistorySumOneWayR2SPD=f3TwampHistorySumOneWayR2SPD, f3TwampIpInterfacePort=f3TwampIpInterfacePort, TwampPktSchedType=TwampPktSchedType, f3TwampControlClientAction=f3TwampControlClientAction, TwampTestPattern=TwampTestPattern, f3TwampHistoryNumTwoWayPD=f3TwampHistoryNumTwoWayPD, f3TwampSessionV2VlanEnabled=f3TwampSessionV2VlanEnabled, f3TwampSessionReflectorAdminState=f3TwampSessionReflectorAdminState, f3TwampDistStatsBinLower=f3TwampDistStatsBinLower, f3TwampServerSessionIdleTimeout=f3TwampServerSessionIdleTimeout, f3TwampHistoryDataMaxOneWayS2RNegPDV=f3TwampHistoryDataMaxOneWayS2RNegPDV, f3TwampHistoryAvgTwoWayPD=f3TwampHistoryAvgTwoWayPD, f3TwampHistoryDataMinOneWayR2SPD=f3TwampHistoryDataMinOneWayR2SPD, f3TwampStatsAvgOneWayR2SPD=f3TwampStatsAvgOneWayR2SPD, f3TwampDistHistoryEntry=f3TwampDistHistoryEntry, f3TwampStatisticNumTwoWayPD=f3TwampStatisticNumTwoWayPD, f3TwampHistoryNumOneWayS2RAbsPDV=f3TwampHistoryNumOneWayS2RAbsPDV, f3TwampHistoryMinOneWayS2RPD=f3TwampHistoryMinOneWayS2RPD, f3TwampDistStatsTime=f3TwampDistStatsTime)
mibBuilder.exportSymbols("F3-TWAMP-MIB", f3TwampStatsAvgOneWayS2RPosPDV=f3TwampStatsAvgOneWayS2RPosPDV, f3TwampStatsAvgOneWayS2RPD=f3TwampStatsAvgOneWayS2RPD, f3TwampSessionSenderInnerVlanPriority=f3TwampSessionSenderInnerVlanPriority, f3TwampHistoryDataAvgOneWayR2SPosPDV=f3TwampHistoryDataAvgOneWayR2SPosPDV, f3TwampServerPort=f3TwampServerPort, f3TwampServerGroup=f3TwampServerGroup, f3TwampSessionReflectorAlias=f3TwampSessionReflectorAlias, f3TwampSessionSenderDistHistoryBins=f3TwampSessionSenderDistHistoryBins, f3TwampStatisticMinOneWayS2RPD=f3TwampStatisticMinOneWayS2RPD, f3TwampSessionSenderHistoryBins=f3TwampSessionSenderHistoryBins, f3TwampStatisticMaxOneWayS2RNegPDV=f3TwampStatisticMaxOneWayS2RNegPDV, f3TwampHistoryDataNumOneWayR2SAbsPDV=f3TwampHistoryDataNumOneWayR2SAbsPDV, f3TwampHistoryDataSumOfSqOneWayR2SAbsPDV=f3TwampHistoryDataSumOfSqOneWayR2SAbsPDV, f3TwampHistoryDataSumOfSqOneWayR2SPosPDV=f3TwampHistoryDataSumOfSqOneWayR2SPosPDV, f3TwampSessionInnerVlanId=f3TwampSessionInnerVlanId, twampSessionSenderThresholdCrossingAlert=twampSessionSenderThresholdCrossingAlert, f3TwampSessionSenderIpAddress=f3TwampSessionSenderIpAddress, f3TwampHistorySumOfSqOneWayS2RPD=f3TwampHistorySumOfSqOneWayS2RPD, f3TwampSessionReflectorTable=f3TwampSessionReflectorTable, f3TwampStatsMaxOneWayS2RAbsPDV=f3TwampStatsMaxOneWayS2RAbsPDV, f3TwampStatisticMaxOneWayR2SAbsPDV=f3TwampStatisticMaxOneWayR2SAbsPDV, f3TwampSessionV2DscpValue=f3TwampSessionV2DscpValue, f3TwampHistoryMinOneWayR2SNegPDV=f3TwampHistoryMinOneWayR2SNegPDV, f3TwampHistoryDataSumOneWayR2SAbsPDV=f3TwampHistoryDataSumOneWayR2SAbsPDV, f3TwampHistoryNumOneWayR2SNegPDV=f3TwampHistoryNumOneWayR2SNegPDV, f3TwampControlClientSessionSenderGroup=f3TwampControlClientSessionSenderGroup, f3TwampSessionDscpValue=f3TwampSessionDscpValue, f3TwampStatisticSumOneWayR2SPD=f3TwampStatisticSumOneWayR2SPD, TwampSessionAction=TwampSessionAction, f3TwampStatisticAction=f3TwampStatisticAction, TwampDistStatsType=TwampDistStatsType, f3TwampIpInterfaceStorageType=f3TwampIpInterfaceStorageType, f3TwampSessionSenderHistoryInterval=f3TwampSessionSenderHistoryInterval, f3TwampStatisticSumOneWayS2RNegPDV=f3TwampStatisticSumOneWayS2RNegPDV, f3TwampHistoryDataNumTwoWayPD=f3TwampHistoryDataNumTwoWayPD, f3TwampHistoryDataSumOneWayS2RNegPDV=f3TwampHistoryDataSumOneWayS2RNegPDV, f3TwampHistoryValid=f3TwampHistoryValid, TwampClientConnStatus=TwampClientConnStatus, f3TwampSessionSenderValidateErrorEstimate=f3TwampSessionSenderValidateErrorEstimate, f3TwampStatsNumOneWayR2SPosPDV=f3TwampStatsNumOneWayR2SPosPDV, f3TwampHistoryMinTwoWayPD=f3TwampHistoryMinTwoWayPD, f3TwampDistStatsGTMax=f3TwampDistStatsGTMax, f3TwampSessionSenderAlias=f3TwampSessionSenderAlias, f3TwampSessionGroup=f3TwampSessionGroup, f3TwampHistoryDataAction=f3TwampHistoryDataAction, f3TwampDistHistoryBinIndex=f3TwampDistHistoryBinIndex, f3TwampHistoryDataNumOneWayS2RNegPDV=f3TwampHistoryDataNumOneWayS2RNegPDV, f3TwampDistHistoryBinNumSamples=f3TwampDistHistoryBinNumSamples, f3TwampSessionV2InnerVlanId=f3TwampSessionV2InnerVlanId, TwampStopTimeType=TwampStopTimeType, f3TwampConformance=f3TwampConformance, f3TwampControlClientSessionSender=f3TwampControlClientSessionSender, f3TwampHistoryOutOfSeqErrs=f3TwampHistoryOutOfSeqErrs, f3TwampIpInterfaceIpMode=f3TwampIpInterfaceIpMode, f3TwampSessionStatus=f3TwampSessionStatus, f3TwampHistoryDataR2SSyncErrs=f3TwampHistoryDataR2SSyncErrs, f3TwampIpInterfaceGroup=f3TwampIpInterfaceGroup, f3TwampHistorySumOfSqOneWayR2SNegPDV=f3TwampHistorySumOfSqOneWayR2SNegPDV, f3TwampHistoryDataSumOfSqTwoWayPD=f3TwampHistoryDataSumOfSqTwoWayPD, f3TwampCompliance=f3TwampCompliance, f3TwampHistoryDataNumOneWayR2SNegPDV=f3TwampHistoryDataNumOneWayR2SNegPDV, f3TwampHistorySumOfSqOneWayS2RPosPDV=f3TwampHistorySumOfSqOneWayS2RPosPDV, f3TwampDistStatsBinEntry=f3TwampDistStatsBinEntry, f3TwampHistoryDataOutOfSeqErrs=f3TwampHistoryDataOutOfSeqErrs, f3TwampStatsMinOneWayS2RNegPDV=f3TwampStatsMinOneWayS2RNegPDV, f3TwampStatsThresholdMonValue=f3TwampStatsThresholdMonValue, f3TwampControlClientPort=f3TwampControlClientPort, PYSNMP_MODULE_ID=f3TwampMIB, f3TwampServerSessionReflector=f3TwampServerSessionReflector, f3TwampSessionV2InnerVlanPriority=f3TwampSessionV2InnerVlanPriority, f3TwampIpInterfaceEntry=f3TwampIpInterfaceEntry, f3TwampServerOperationalState=f3TwampServerOperationalState, f3TwampIpInterfaceIpv6PrefixLen=f3TwampIpInterfaceIpv6PrefixLen, f3TwampNotifications=f3TwampNotifications, f3TwampSessionReflectorSecondaryState=f3TwampSessionReflectorSecondaryState, f3TwampStatisticAvgOneWayR2SNegPDV=f3TwampStatisticAvgOneWayR2SNegPDV, f3TwampHistoryTable=f3TwampHistoryTable, f3TwampStatsIndex=f3TwampStatsIndex, f3TwampHistorySumOfSqTwoWayPD=f3TwampHistorySumOfSqTwoWayPD, f3TwampHistoryDataMinOneWayR2SNegPDV=f3TwampHistoryDataMinOneWayR2SNegPDV, f3TwampStatisticSumOfSqOneWayS2RPosPDV=f3TwampStatisticSumOfSqOneWayS2RPosPDV, f3TwampServerSecondaryState=f3TwampServerSecondaryState, f3TwampStatsNumOneWayS2RAbsPDV=f3TwampStatsNumOneWayS2RAbsPDV, f3TwampHistoryDataMinOneWayS2RAbsPDV=f3TwampHistoryDataMinOneWayS2RAbsPDV, f3TwampStatisticS2RPkts=f3TwampStatisticS2RPkts, f3TwampHistoryDataSumOneWayR2SPosPDV=f3TwampHistoryDataSumOneWayR2SPosPDV, TwampStartTimeType=TwampStartTimeType, f3TwampHistorySumOneWayS2RPD=f3TwampHistorySumOneWayS2RPD, f3TwampDistStatsConfigTable=f3TwampDistStatsConfigTable, f3TwampStatisticNumOneWayR2SPD=f3TwampStatisticNumOneWayR2SPD, f3TwampCounterObjects=f3TwampCounterObjects, f3TwampThresholdGroup=f3TwampThresholdGroup, f3TwampSessionInnerVlanEnabled=f3TwampSessionInnerVlanEnabled, f3TwampDistStatsLTMin=f3TwampDistStatsLTMin, f3TwampStatsOutOfSeqErrs=f3TwampStatsOutOfSeqErrs, f3TwampServerEntry=f3TwampServerEntry, f3TwampDistStatsEntry=f3TwampDistStatsEntry, f3TwampStatsSumOfSqTwoWayPD=f3TwampStatsSumOfSqTwoWayPD, f3TwampSessionSenderNumPkts=f3TwampSessionSenderNumPkts, f3TwampSessionSenderSeqNumber=f3TwampSessionSenderSeqNumber, TwampHistoryIntervalType=TwampHistoryIntervalType, f3TwampStatisticNumOneWayS2RNegPDV=f3TwampStatisticNumOneWayS2RNegPDV, f3TwampServerStatus=f3TwampServerStatus, f3TwampHistoryNumOneWayS2RPD=f3TwampHistoryNumOneWayS2RPD, f3TwampControlClientTable=f3TwampControlClientTable, f3TwampConfigObjects=f3TwampConfigObjects, f3TwampStatisticSeqGaps=f3TwampStatisticSeqGaps, f3TwampHistoryIndex=f3TwampHistoryIndex, f3TwampControlClientStatus=f3TwampControlClientStatus, f3TwampControlClientStorageType=f3TwampControlClientStorageType, f3TwampHistorySumOfSqOneWayR2SPosPDV=f3TwampHistorySumOfSqOneWayR2SPosPDV, f3TwampServerSessionReflectorGroup=f3TwampServerSessionReflectorGroup, f3TwampSessionReflectorUseSenderSeqNum=f3TwampSessionReflectorUseSenderSeqNum, f3TwampStatsR2SSyncErrs=f3TwampStatsR2SSyncErrs, f3TwampIpInterfaceIpv6Addr=f3TwampIpInterfaceIpv6Addr, f3TwampStatsMaxOneWayR2SPD=f3TwampStatsMaxOneWayR2SPD, f3TwampHistorySeqGaps=f3TwampHistorySeqGaps, f3TwampDistStatsTable=f3TwampDistStatsTable, f3TwampSessionReflectorUserCreated=f3TwampSessionReflectorUserCreated, f3TwampHistoryDataMaxOneWayR2SPD=f3TwampHistoryDataMaxOneWayR2SPD, f3TwampHistoryMaxOneWayS2RAbsPDV=f3TwampHistoryMaxOneWayS2RAbsPDV, f3TwampHistoryDataSumOfSqOneWayR2SPD=f3TwampHistoryDataSumOfSqOneWayR2SPD, f3TwampSessionSenderSecondaryState=f3TwampSessionSenderSecondaryState, TwampSessionReflectorStatus=TwampSessionReflectorStatus, f3TwampHistoryDataSumOneWayR2SNegPDV=f3TwampHistoryDataSumOneWayR2SNegPDV, f3TwampStatsMinOneWayR2SPosPDV=f3TwampStatsMinOneWayR2SPosPDV, f3TwampHistoryDataSumTwoWayPD=f3TwampHistoryDataSumTwoWayPD, f3TwampHistoryMaxOneWayR2SAbsPDV=f3TwampHistoryMaxOneWayR2SAbsPDV, f3TwampStatisticIndex=f3TwampStatisticIndex, f3TwampHistoryMinOneWayS2RPosPDV=f3TwampHistoryMinOneWayS2RPosPDV, f3TwampSessionSenderTestPattern=f3TwampSessionSenderTestPattern, f3TwampHistoryMaxOneWayR2SNegPDV=f3TwampHistoryMaxOneWayR2SNegPDV, f3TwampStatsSumOfSqOneWayR2SPosPDV=f3TwampStatsSumOfSqOneWayR2SPosPDV, f3TwampStatisticSumOfSqOneWayS2RNegPDV=f3TwampStatisticSumOfSqOneWayS2RNegPDV, f3TwampDistStatsAction=f3TwampDistStatsAction, f3TwampSessionSenderUdpPort=f3TwampSessionSenderUdpPort, f3TwampHistoryDataSumOfSqOneWayS2RAbsPDV=f3TwampHistoryDataSumOfSqOneWayS2RAbsPDV, f3TwampHistorySumOneWayR2SAbsPDV=f3TwampHistorySumOneWayR2SAbsPDV, f3TwampStatsMaxOneWayR2SNegPDV=f3TwampStatsMaxOneWayR2SNegPDV, f3TwampSessionSequenceNumber=f3TwampSessionSequenceNumber, f3TwampSessionTable=f3TwampSessionTable, f3TwampStatsMaxOneWayR2SPosPDV=f3TwampStatsMaxOneWayR2SPosPDV, f3TwampStatsSumOfSqOneWayS2RAbsPDV=f3TwampStatsSumOfSqOneWayS2RAbsPDV, TwampServerConnStatus=TwampServerConnStatus, f3TwampHistoryDataAvgOneWayR2SPD=f3TwampHistoryDataAvgOneWayR2SPD, f3TwampStatsSumOneWayR2SPosPDV=f3TwampStatsSumOneWayR2SPosPDV, f3TwampHistoryDataUdpChecksumFailures=f3TwampHistoryDataUdpChecksumFailures, f3TwampStatsSumTwoWayPD=f3TwampStatsSumTwoWayPD, f3TwampSessionSenderIpInterface=f3TwampSessionSenderIpInterface, f3TwampHistoryDataEntry=f3TwampHistoryDataEntry, f3TwampSessionV2OuterVlanId=f3TwampSessionV2OuterVlanId, f3TwampSessionVlanEnabled=f3TwampSessionVlanEnabled, f3TwampHistoryDataValid=f3TwampHistoryDataValid, f3TwampStatsAvgOneWayS2RNegPDV=f3TwampStatsAvgOneWayS2RNegPDV, f3TwampStatisticTable=f3TwampStatisticTable, f3TwampStatisticMaxOneWayS2RPD=f3TwampStatisticMaxOneWayS2RPD, f3TwampStatsMinOneWayR2SNegPDV=f3TwampStatsMinOneWayR2SNegPDV, TwampSessionSenderStatus=TwampSessionSenderStatus, f3TwampSessionV2Entry=f3TwampSessionV2Entry, f3TwampHistorySumOneWayS2RPosPDV=f3TwampHistorySumOneWayS2RPosPDV, f3TwampStatsSumOneWayS2RPosPDV=f3TwampStatsSumOneWayS2RPosPDV, f3TwampSessionSenderSrUdpPort=f3TwampSessionSenderSrUdpPort, f3TwampHistoryNumOneWayS2RPosPDV=f3TwampHistoryNumOneWayS2RPosPDV, f3TwampHistoryR2SLostPkts=f3TwampHistoryR2SLostPkts, f3TwampStatsEntry=f3TwampStatsEntry, f3TwampSessionSenderOuterVlanPriority=f3TwampSessionSenderOuterVlanPriority, f3TwampSessionReflectorIndex=f3TwampSessionReflectorIndex, f3TwampServerStorageType=f3TwampServerStorageType, f3TwampStatsSumOfSqOneWayS2RPD=f3TwampStatsSumOfSqOneWayS2RPD, f3TwampHistoryMaxTwoWayPD=f3TwampHistoryMaxTwoWayPD, TwampPmIntervalType=TwampPmIntervalType, f3TwampStatisticSumTwoWayPD=f3TwampStatisticSumTwoWayPD, f3TwampSessionSenderPktSize=f3TwampSessionSenderPktSize, f3TwampSessionSenderIpMode=f3TwampSessionSenderIpMode, f3TwampHistoryDataSeqGaps=f3TwampHistoryDataSeqGaps, f3TwampStatsMaxTwoWayPD=f3TwampStatsMaxTwoWayPD, f3TwampStatsSumOneWayS2RNegPDV=f3TwampStatsSumOneWayS2RNegPDV, f3TwampSessionOuterVlanPriority=f3TwampSessionOuterVlanPriority, f3TwampSessionSenderInnerVlanEtherType=f3TwampSessionSenderInnerVlanEtherType, f3TwampStatisticMaxOneWayS2RPosPDV=f3TwampStatisticMaxOneWayS2RPosPDV, f3TwampHistoryMaxOneWayS2RPosPDV=f3TwampHistoryMaxOneWayS2RPosPDV, f3TwampHistoryDataS2RLostPkts=f3TwampHistoryDataS2RLostPkts, f3TwampHistoryDataMinOneWayR2SAbsPDV=f3TwampHistoryDataMinOneWayR2SAbsPDV, f3TwampDistStatsNumBins=f3TwampDistStatsNumBins, f3TwampStatsSeqGaps=f3TwampStatsSeqGaps, f3TwampSessionInnerVlanPriority=f3TwampSessionInnerVlanPriority, f3TwampServerSessionReflectorEntry=f3TwampServerSessionReflectorEntry, f3TwampSessionV2Table=f3TwampSessionV2Table, f3TwampStatsMaxOneWayS2RPD=f3TwampStatsMaxOneWayS2RPD, f3TwampSessionReflectorAssocServer=f3TwampSessionReflectorAssocServer, f3TwampStatisticMinOneWayR2SPD=f3TwampStatisticMinOneWayR2SPD, f3TwampSessionV2OuterVlanEtherType=f3TwampSessionV2OuterVlanEtherType, f3TwampSessionSenderRowStatus=f3TwampSessionSenderRowStatus, f3TwampSessionReflectorEntry=f3TwampSessionReflectorEntry, f3TwampIpInterfaceName=f3TwampIpInterfaceName, f3TwampStatisticMinTwoWayPD=f3TwampStatisticMinTwoWayPD, f3TwampHistoryDataMaxOneWayR2SAbsPDV=f3TwampHistoryDataMaxOneWayR2SAbsPDV, f3TwampSessionReflectorStatus=f3TwampSessionReflectorStatus, f3TwampHistoryMinOneWayR2SPD=f3TwampHistoryMinOneWayR2SPD, f3TwampHistoryNumOneWayR2SPD=f3TwampHistoryNumOneWayR2SPD, f3TwampStatisticOutOfSeqErrs=f3TwampStatisticOutOfSeqErrs, f3TwampHistoryDataNumOneWayR2SPD=f3TwampHistoryDataNumOneWayR2SPD, f3TwampDistHistoryNumBins=f3TwampDistHistoryNumBins, TwampControlClientStatus=TwampControlClientStatus, f3TwampServerAction=f3TwampServerAction, f3TwampStatsValid=f3TwampStatsValid, f3TwampDistStatsConfigMaxVal=f3TwampDistStatsConfigMaxVal, f3TwampStatisticSumOneWayS2RPD=f3TwampStatisticSumOneWayS2RPD, f3TwampSessionV2InnerVlanEnabled=f3TwampSessionV2InnerVlanEnabled, f3TwampSessionReflectorUdpPort=f3TwampSessionReflectorUdpPort, f3TwampCompliances=f3TwampCompliances, f3TwampDistStatsConfigMinVal=f3TwampDistStatsConfigMinVal, f3TwampSessionSenderStatus=f3TwampSessionSenderStatus, f3TwampStatsMinOneWayR2SPD=f3TwampStatsMinOneWayR2SPD, f3TwampControlClientActionObject=f3TwampControlClientActionObject, f3TwampIpInterfaceIpv4Address=f3TwampIpInterfaceIpv4Address, f3TwampDistributionStatisticsGroup=f3TwampDistributionStatisticsGroup, f3TwampHistoryDataMinTwoWayPD=f3TwampHistoryDataMinTwoWayPD, f3TwampControlClientGroup=f3TwampControlClientGroup, f3TwampDistHistoryBinEntry=f3TwampDistHistoryBinEntry, f3TwampHistoryDataSumOneWayS2RPD=f3TwampHistoryDataSumOneWayS2RPD, f3TwampSessionSenderOperationalState=f3TwampSessionSenderOperationalState, f3TwampSessionSenderStartTimeType=f3TwampSessionSenderStartTimeType, f3TwampStatsNumOneWayS2RPD=f3TwampStatsNumOneWayS2RPD, f3TwampHistoryMaxOneWayR2SPD=f3TwampHistoryMaxOneWayR2SPD, f3TwampStatsS2RLostPkts=f3TwampStatsS2RLostPkts, f3TwampStatsR2SLostPkts=f3TwampStatsR2SLostPkts, f3TwampHistoryDataMaxOneWayS2RPosPDV=f3TwampHistoryDataMaxOneWayS2RPosPDV, f3TwampSessionSenderStorageType=f3TwampSessionSenderStorageType, f3TwampHistoryS2RLostPkts=f3TwampHistoryS2RLostPkts, f3TwampStatisticSumOfSqOneWayS2RPD=f3TwampStatisticSumOfSqOneWayS2RPD, f3TwampHistoryDataR2SPkts=f3TwampHistoryDataR2SPkts, f3TwampStatsNumTwoWayPD=f3TwampStatsNumTwoWayPD, f3TwampSessionSenderDscpValue=f3TwampSessionSenderDscpValue, f3TwampHistoryDataMaxOneWayS2RAbsPDV=f3TwampHistoryDataMaxOneWayS2RAbsPDV, f3TwampHistoryMaxOneWayS2RPD=f3TwampHistoryMaxOneWayS2RPD, f3TwampStatisticMinOneWayR2SAbsPDV=f3TwampStatisticMinOneWayR2SAbsPDV, f3TwampDistStatsBinUpper=f3TwampDistStatsBinUpper, f3TwampSessionEntry=f3TwampSessionEntry, f3TwampDistHistoryTable=f3TwampDistHistoryTable, f3TwampStatsS2RPkts=f3TwampStatsS2RPkts, f3TwampHistoryNumOneWayR2SAbsPDV=f3TwampHistoryNumOneWayR2SAbsPDV, f3TwampStatisticAvgOneWayS2RNegPDV=f3TwampStatisticAvgOneWayS2RNegPDV)
