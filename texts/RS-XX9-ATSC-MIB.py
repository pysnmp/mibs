#
# PySNMP MIB module RS-XX9-ATSC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-ATSC-MIB
# Produced by pysmi-1.1.12 at Thu Nov 28 03:02:49 2024
# On host fv-az885-149 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
commonNotificationAlarmClass, = mibBuilder.importSymbols("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass")
rsXx9Atsc, rsXx9MibModule = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9Atsc", "rsXx9MibModule")
SwitchOnOff, NotificationState, NotificationPriority, IndexTransmitter, IndexAB, NotificationMask = mibBuilder.importSymbols("RS-XX9-TC-MIB", "SwitchOnOff", "NotificationState", "NotificationPriority", "IndexTransmitter", "IndexAB", "NotificationMask")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, Gauge32, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, ModuleIdentity, Unsigned32, NotificationType, Bits, ObjectIdentity, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "ModuleIdentity", "Unsigned32", "NotificationType", "Bits", "ObjectIdentity", "MibIdentifier", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rsXx9AtscMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 7))
rsXx9AtscMibModule.setRevisions(('2015-04-02 08:00', '2014-12-22 16:00', '2012-07-26 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsXx9AtscMibModule.setRevisionsDescriptions(('update enum range of atscConfigurationSfnSyncMode', 'updated description texts\n                ', 'Preliminary revision.',))
if mibBuilder.loadTexts: rsXx9AtscMibModule.setLastUpdated('201504020800Z')
if mibBuilder.loadTexts: rsXx9AtscMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
if mibBuilder.loadTexts: rsXx9AtscMibModule.setContactInfo('Rohde & Schwarz GmbH & Co. KG\n                Broadcasting Division\n                \n                Muehldorfstrasse 15\n                81671 Munich\n                Germany\n                \n                customersupport@rohde-schwarz.com')
if mibBuilder.loadTexts: rsXx9AtscMibModule.setDescription('This MIB defines ATSC specific objects\n                of XX9000 transmitting systems from Rohde & Schwarz.\n                \n                The following MIBs are related to this:\n                - RS-COMMON-MIB         - mandatory for this MIB\n                - RS-XX9-SMI-MIB        - mandatory for this MIB\n                - RS-XX9-TC-MIB         - mandatory for this MIB\n                - RS-XX9-COMMON-MIB     - mandatory for this MIB')
rsXx9AtscNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 0))
atscEncoderSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ATSC-MIB", "atscStatusNotificationPriority"), ("RS-XX9-ATSC-MIB", "atscStatusNotificationState"))
if mibBuilder.loadTexts: atscEncoderSummary.setStatus('current')
if mibBuilder.loadTexts: atscEncoderSummary.setDescription('Encoder summary state.\n                \n                Possible values:\n                off(2)\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: fault')
atscContentFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ATSC-MIB", "atscStatusNotificationPriority"), ("RS-XX9-ATSC-MIB", "atscStatusNotificationState"))
if mibBuilder.loadTexts: atscContentFail.setStatus('current')
if mibBuilder.loadTexts: atscContentFail.setDescription('No mobile data in data stream.\n                Available only if atscConfigurationMobileDtv is on(1).\n                \n                Possible values:\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
atscTest = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 0, 3)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ATSC-MIB", "atscStatusNotificationPriority"), ("RS-XX9-ATSC-MIB", "atscStatusNotificationState"))
if mibBuilder.loadTexts: atscTest.setStatus('current')
if mibBuilder.loadTexts: atscTest.setDescription('Possible values:\n                off(2)     - no test signal generation\n                warning(4) - test signal generation is activated\n                \n                Notification class: warning')
rsXx9AtscObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1))
atscStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 1))
atscStatusNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 1, 1), )
if mibBuilder.loadTexts: atscStatusNotificationTable.setStatus('current')
if mibBuilder.loadTexts: atscStatusNotificationTable.setDescription('The context information/configuration for the\n                ATSC status notifications.')
atscStatusNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-ATSC-MIB", "atscStatusNotificationTxIdx"), (0, "RS-XX9-ATSC-MIB", "atscStatusNotificationExcIdx"), (0, "RS-XX9-ATSC-MIB", "atscStatusNotificationIdx"))
if mibBuilder.loadTexts: atscStatusNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: atscStatusNotificationEntry.setDescription('An entry in the atscStatusNotificationTable.')
atscStatusNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 1, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: atscStatusNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: atscStatusNotificationTxIdx.setDescription('The transmitter index.')
atscStatusNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 1, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: atscStatusNotificationExcIdx.setStatus('current')
if mibBuilder.loadTexts: atscStatusNotificationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
atscStatusNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: atscStatusNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: atscStatusNotificationIdx.setDescription('The notification number as below rsXx9AtscNotifications.\n                This is a helper column and therefore not-accessible.')
atscStatusNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("atscEncoderSummary", 1), ("atscContentFail", 2), ("atscTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atscStatusNotificationName.setStatus('current')
if mibBuilder.loadTexts: atscStatusNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9AtscNotifications.')
atscStatusNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 1, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atscStatusNotificationMask.setStatus('current')
if mibBuilder.loadTexts: atscStatusNotificationMask.setDescription('See textual convention for details.')
atscStatusNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 1, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atscStatusNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: atscStatusNotificationPriority.setDescription('See textual convention for details.')
atscStatusNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 1, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atscStatusNotificationState.setStatus('current')
if mibBuilder.loadTexts: atscStatusNotificationState.setDescription('See textual convention for details.')
atscSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2))
atscConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2, 1), )
if mibBuilder.loadTexts: atscConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: atscConfigurationTable.setDescription('General ATSC configuration.')
atscConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2, 1, 1), ).setIndexNames((0, "RS-XX9-ATSC-MIB", "atscConfigurationTxIdx"), (0, "RS-XX9-ATSC-MIB", "atscConfigurationExcIdx"))
if mibBuilder.loadTexts: atscConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: atscConfigurationEntry.setDescription('An entry in the atscConfigurationTable.')
atscConfigurationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: atscConfigurationTxIdx.setStatus('current')
if mibBuilder.loadTexts: atscConfigurationTxIdx.setDescription('The transmitter index.')
atscConfigurationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: atscConfigurationExcIdx.setStatus('current')
if mibBuilder.loadTexts: atscConfigurationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
atscConfigurationMobileDtv = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2, 1, 1, 3), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atscConfigurationMobileDtv.setStatus('current')
if mibBuilder.loadTexts: atscConfigurationMobileDtv.setDescription('Switch coding for mobile DTV on or off.')
atscConfigurationMhePID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atscConfigurationMhePID.setStatus('current')
if mibBuilder.loadTexts: atscConfigurationMhePID.setDescription('Packet ID for mobile data stream.')
atscConfigurationMobileTxID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2, 1, 1, 5), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atscConfigurationMobileTxID.setStatus('current')
if mibBuilder.loadTexts: atscConfigurationMobileTxID.setDescription('Switch mobile transmitter ID on or off.')
atscConfigurationWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disabled", 1), ("db21", 2), ("db24", 3), ("db27", 4), ("db30", 5), ("db33", 6), ("db36", 7), ("db39", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atscConfigurationWatermark.setStatus('current')
if mibBuilder.loadTexts: atscConfigurationWatermark.setDescription('Level of watermark signal relative to wanted signal.')
atscConfigurationTxID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atscConfigurationTxID.setStatus('current')
if mibBuilder.loadTexts: atscConfigurationTxID.setDescription('Indicates the set transmitter address. The setting can be \n                changed here. The transmitter address allows a distinction \n                to be made between the individual transmitters in a \n                single-frequency network.\n                ')
atscConfigurationMarketID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 495))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atscConfigurationMarketID.setStatus('current')
if mibBuilder.loadTexts: atscConfigurationMarketID.setDescription('Market ID.\n                For grouping several transmitters in a single frequency network.\n                All transmitters of a group must have different transmitter IDs.')
atscConfigurationSfnSyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rsMobileTcp", 1), ("rsA53Tcp", 2), ("a110Tcp", 3), ("rsA53DummyBytes", 4), ("a110DummyBytes", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atscConfigurationSfnSyncMode.setStatus('current')
if mibBuilder.loadTexts: atscConfigurationSfnSyncMode.setDescription("Used to define the type of time synchronization. This switch is available \n                only after the appropriate software options have been enabled. \n                With the synchronization types 'R&S Mobile' and 'A/110', a distinction can \n                also be made as to whether the time of transmission is to be synchronized \n                primarily using data from the TCP information or using data from the dummy bytes.\n                \n                \n                rsMobileTcp(1) - For transmitting mobile content and when using a Rohde&Schwarz \n                                           AEM100 Emission Mux/SFN inserter. \n                rsA53Tcp(2) - When transmitting normal content and when using a Rohde&Schwarz \n                                      AEM100 Emission Mux/SFN inserter. \n                a110Tcp(3) - For standard-conforming SFN synchronization corresponding to \n                                    ATSC A/110B. It contains a compatible expansion to allow use of \n                                    Mobile DTV. \n                rsA53DummyBytes(4)\n                a110DummyBytes(5)\n                ")
atscTestTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2, 2), )
if mibBuilder.loadTexts: atscTestTable.setStatus('current')
if mibBuilder.loadTexts: atscTestTable.setDescription('Configures the test mode of the exciter.')
atscTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2, 2, 1), )
atscConfigurationEntry.registerAugmentions(("RS-XX9-ATSC-MIB", "atscTestEntry"))
atscTestEntry.setIndexNames(*atscConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: atscTestEntry.setStatus('current')
if mibBuilder.loadTexts: atscTestEntry.setDescription('An entry in the atscTestTable.')
atscTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("prbs", 2), ("singleCarrier", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atscTestMode.setStatus('current')
if mibBuilder.loadTexts: atscTestMode.setDescription('off(1)           - no test mode\n                singleCarrier(3) - produces an unmodulated carrier\n                                   on a selected output frequency')
rsXx9AtscConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 2))
rsXx9AtscCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 2, 1))
atscBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 2, 1, 1)).setObjects(("RS-XX9-ATSC-MIB", "atscObjBasic"), ("RS-XX9-ATSC-MIB", "atscNotifyBasic"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atscBasicCompliance = atscBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: atscBasicCompliance.setDescription('The compliance statement for XX9000 ATSC encoding.')
rsXx9AtscGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 2, 2))
atscObjBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 2, 2, 1)).setObjects(("RS-XX9-ATSC-MIB", "atscStatusNotificationName"), ("RS-XX9-ATSC-MIB", "atscStatusNotificationMask"), ("RS-XX9-ATSC-MIB", "atscStatusNotificationPriority"), ("RS-XX9-ATSC-MIB", "atscStatusNotificationState"), ("RS-XX9-ATSC-MIB", "atscConfigurationMobileDtv"), ("RS-XX9-ATSC-MIB", "atscConfigurationMhePID"), ("RS-XX9-ATSC-MIB", "atscConfigurationMobileTxID"), ("RS-XX9-ATSC-MIB", "atscConfigurationWatermark"), ("RS-XX9-ATSC-MIB", "atscConfigurationTxID"), ("RS-XX9-ATSC-MIB", "atscConfigurationMarketID"), ("RS-XX9-ATSC-MIB", "atscConfigurationSfnSyncMode"), ("RS-XX9-ATSC-MIB", "atscTestMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atscObjBasic = atscObjBasic.setStatus('current')
if mibBuilder.loadTexts: atscObjBasic.setDescription('General ATSC objects.')
atscNotifyBasic = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7, 2, 2, 2)).setObjects(("RS-XX9-ATSC-MIB", "atscTest"), ("RS-XX9-ATSC-MIB", "atscContentFail"), ("RS-XX9-ATSC-MIB", "atscEncoderSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atscNotifyBasic = atscNotifyBasic.setStatus('current')
if mibBuilder.loadTexts: atscNotifyBasic.setDescription('General ATSC notifications.')
mibBuilder.exportSymbols("RS-XX9-ATSC-MIB", atscStatusNotificationIdx=atscStatusNotificationIdx, rsXx9AtscObjects=rsXx9AtscObjects, atscConfigurationTable=atscConfigurationTable, atscTestEntry=atscTestEntry, rsXx9AtscCompliances=rsXx9AtscCompliances, atscTestMode=atscTestMode, atscStatusNotificationName=atscStatusNotificationName, PYSNMP_MODULE_ID=rsXx9AtscMibModule, atscConfigurationSfnSyncMode=atscConfigurationSfnSyncMode, atscContentFail=atscContentFail, rsXx9AtscNotifications=rsXx9AtscNotifications, atscConfigurationEntry=atscConfigurationEntry, atscObjBasic=atscObjBasic, atscSetup=atscSetup, atscStatusNotificationExcIdx=atscStatusNotificationExcIdx, atscStatusNotificationTable=atscStatusNotificationTable, atscStatusNotificationState=atscStatusNotificationState, atscTest=atscTest, atscStatusNotificationEntry=atscStatusNotificationEntry, atscStatusNotificationPriority=atscStatusNotificationPriority, atscConfigurationTxID=atscConfigurationTxID, atscBasicCompliance=atscBasicCompliance, rsXx9AtscGroups=rsXx9AtscGroups, atscStatusNotificationMask=atscStatusNotificationMask, atscConfigurationMhePID=atscConfigurationMhePID, atscStatusNotificationTxIdx=atscStatusNotificationTxIdx, atscConfigurationMobileTxID=atscConfigurationMobileTxID, atscStatus=atscStatus, atscEncoderSummary=atscEncoderSummary, atscConfigurationMobileDtv=atscConfigurationMobileDtv, atscConfigurationMarketID=atscConfigurationMarketID, atscConfigurationExcIdx=atscConfigurationExcIdx, atscTestTable=atscTestTable, rsXx9AtscMibModule=rsXx9AtscMibModule, atscConfigurationTxIdx=atscConfigurationTxIdx, atscConfigurationWatermark=atscConfigurationWatermark, rsXx9AtscConformance=rsXx9AtscConformance, atscNotifyBasic=atscNotifyBasic)
