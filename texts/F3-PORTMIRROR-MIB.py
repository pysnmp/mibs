#
# PySNMP MIB module F3-PORTMIRROR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-PORTMIRROR-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 07:45:51 2024
# On host fv-az837-21 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
PerfCounter64, VlanId, TrafficDirection = mibBuilder.importSymbols("CM-COMMON-MIB", "PerfCounter64", "VlanId", "TrafficDirection")
slotIndex, neIndex, shelfIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "slotIndex", "neIndex", "shelfIndex")
cmEthernetAccPortEntry, = mibBuilder.importSymbols("CM-FACILITY-MIB", "cmEthernetAccPortEntry")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, Unsigned32, Bits, TimeTicks, Gauge32, iso, ModuleIdentity, ObjectIdentity, NotificationType, Counter64, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "Unsigned32", "Bits", "TimeTicks", "Gauge32", "iso", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Counter64", "Integer32", "Counter32")
TruthValue, DisplayString, TextualConvention, StorageType, RowStatus, VariablePointer = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "StorageType", "RowStatus", "VariablePointer")
f3PortMirrorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29))
f3PortMirrorMIB.setRevisions(('2013-10-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3PortMirrorMIB.setRevisionsDescriptions(('\n         Notes from release 201410130000Z,\n         (1) Added table:\n             - f3MonitorPortStatsTable\n         Notes from release 201409300000Z,\n         (1) Removed tables:\n             - f3MirrorFilterProfileAddedEntriesTable,\n             - f3MonitorPortStatsTable\n         Notes from release 201407310000Z,\n         (1) New table:\n             - f3MirrorFilterProfileAddedEntriesTable.\n         Notes from release 201407210000Z,\n         (1) New textual conventions:\n             - MirroredFramesAction,\n             - PortMirrorStatsAction.\n         (2) New column in f3MonitorPortStatsTable:\n             - f3MonitorPortStatsAction.\n         (3) New tables:\n             - f3MirrorFilterProfileTable,\n             - f3MirrorFilterProfileEntryTable,\n             - f3MirrorFilterTable,\n             - f3MirrorSessionStatsTable.\n         Notes from release 201405190000Z,\n         (1) New column in f3MirrorSessionTable:\n             - f3MirrorSessionMirrRsrcPort.\n         Notes from release 201310210000Z,\n         (1) Added table: \n             - f3PortMirrorAccPortExtTable.\n         Notes from release 201310140000Z,\n         (1) MIB version ready for release FSP150CC 6.1.CC.',))
if mibBuilder.loadTexts: f3PortMirrorMIB.setLastUpdated('201309200000Z')
if mibBuilder.loadTexts: f3PortMirrorMIB.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: f3PortMirrorMIB.setContactInfo('        Marek Romaniuk\n                     ADVA Optical Networking, Inc.\n                Tel: +48 58 7716 414\n             E-mail: mromaniuk@advaoptical.com\n             Postal: ul. Slaska 35/37\n                     81-310 Gdynia, Poland')
if mibBuilder.loadTexts: f3PortMirrorMIB.setDescription('This module defines the Port Mirror MIB definitions \n             used by the F3 (FSP150CM/CC) product lines.  \n             Copyright (C) ADVA Optical Networking.')
class MirroredFramesAction(TextualConvention, Integer32):
    description = 'User action initiated on Mirror Filter Profile \n         and Mirror Filter Profile Entry.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("accept", 1), ("deny", 2))

class PortMirrorStatsAction(TextualConvention, Integer32):
    description = 'User action initiated on Mirror Session Stats.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("noAction", 1), ("clearStats", 2))

f3PortMirrorConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1))
f3PortMirrorStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 2))
f3PortMirrorConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 3))
f3PortMirrorFilterObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4))
f3MirrorSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 1), )
if mibBuilder.loadTexts: f3MirrorSessionTable.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionTable.setDescription('A list of entries corresponding to Mirror Session \n             instance for configuration purposes.')
f3MirrorSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PORTMIRROR-MIB", "f3MirrorSessionIndex"))
if mibBuilder.loadTexts: f3MirrorSessionEntry.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionEntry.setDescription('A conceptual row in the f3MirrorSessionTable.')
f3MirrorSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: f3MirrorSessionIndex.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionIndex.setDescription('An integer index value used to uniquely identify\n          this Port Mirror Session within Network Element.')
f3MirrorSessionSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 1, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorSessionSourcePort.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionSourcePort.setDescription('Pointer to a Port instance which represents \n          Monitored Port with the Mirror Session.\n          \n          The pointer must be set to cmEthernetAccPortIndex \n          or cmEthernetNetPortIndex instance.')
f3MirrorSessionMonitorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 1, 1, 3), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorSessionMonitorPort.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionMonitorPort.setDescription('Pointer to a Port instance which represents \n          Port where mirrored frames are transmitted. \n          \n          The pointer must be set to cmEthernetAccPortIndex \n          instance.')
f3MirrorSessionSourcePortDir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 1, 1, 4), TrafficDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorSessionSourcePortDir.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionSourcePortDir.setDescription('Indicates the SourcePort traffic flow direction \n          to be copied for transmit on the MonitorPort:\n          \n          1) INGRESS: frames received by the SourcePort \n                     are mirrored to the transmit direction of the \n                     MonitorPort.\n            \n          2) EGRESS: frames to be transmitted by the SourcePort \n                    are mirrored to the transmit direction of the \n                    MonitorPort.')
f3MirrorSessionTruncationCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3MirrorSessionTruncationCtrl.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionTruncationCtrl.setDescription('Indicates if frame is truncated to TruncationLength \n          before being transmitted on the Monitor Port:\n          \n          1) DISABLED: the frame is transmitted on the MonitorPort \n                      without length modification.\n          2) ENABLED: the frame is truncated to TruncationLength \n                     before being transmitted on the MonitorPort. \n                     FCS is relaculated based on the truncated length.')
f3MirrorSessionTruncationLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3MirrorSessionTruncationLength.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionTruncationLength.setDescription('Length of mirrored frame truncation when TruncationControl is ENABLED. \n          Possible values are 64 bytes to 1500 bytes.\n          \n          All mirrored frames transmitted on the MonitorPort will have a frame \n          length equal to the TruncationLength where frame length is from first \n          byte of the Destination MAC Address to last bye of the newly calculated FCS.')
f3MirrorSessionTimestampControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3MirrorSessionTimestampControl.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionTimestampControl.setDescription('Indicates if timestamp information is added \n          to a frame transmitted on the MonitorPort:\n          \n          1) DISABLED: no timestamp information is added \n                      to a frame transmitted on the MonitorPort.\n                      \n          2) ENABLED: a timestamp is added to the frame frame \n                     in the 10 bytes before the FCS:\n                     - For mirrored frames ingressing the SourcePort, \n                       the timestamp is the TOD when the frame was \n                       received on the SourcePort. \n                     - For mirrored frames egressing the SourcePort, \n                       the timestamp is the TOD when the frames \n                       was transmitted on the SourcePort.')
f3MirrorSessionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 1, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorSessionStorageType.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionStorageType.setDescription('The type of storage configured for this entry.')
f3MirrorSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorSessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n          active state unless all objects in the entry have an \n          appropriate value, as described\n          in the description clause for each writable object.\n\n          The values of f3MirrorSessionRowStatus supported are\n          createAndGo(4) and destroy(6).  All mandatory attributes\n          must be specified in a single SNMP SET request with\n          neRowStatus value as createAndGo(4).\n          Upon successful row creation, this object has a\n          value of active(1).\n          \n          The f3MirrorSessionRowStatus object may be modified if\n          the associated instance of this object is equal to active(1).')
f3MirrorSessionMirrRsrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 1, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorSessionMirrRsrcPort.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionMirrRsrcPort.setDescription('Pointer to a Port instance which represents \n          Mirror Resource Port. \n          \n          The pointer must be set to cmEthernetAccPortIndex \n          instance.')
f3MirrorSessionFilterProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 1, 1, 11), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorSessionFilterProfile.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionFilterProfile.setDescription('Pointer to a Mirror Filter Profile instance which represents \n          Mirror Session Filter Profile. \n          \n          The pointer must be set to f3MirrorFilterProfileName \n          instance.')
f3PortMirrorAccPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 2), )
if mibBuilder.loadTexts: f3PortMirrorAccPortExtTable.setStatus('current')
if mibBuilder.loadTexts: f3PortMirrorAccPortExtTable.setDescription('A list of entries corresponding to Ethernet Access Port \n            Facilities for Port Mirror configuration purposes.')
f3PortMirrorAccPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 2, 1), )
cmEthernetAccPortEntry.registerAugmentions(("F3-PORTMIRROR-MIB", "f3PortMirrorAccPortExtEntry"))
f3PortMirrorAccPortExtEntry.setIndexNames(*cmEthernetAccPortEntry.getIndexNames())
if mibBuilder.loadTexts: f3PortMirrorAccPortExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3PortMirrorAccPortExtEntry.setDescription('A conceptual row in the f3PortMirrorAccPortExtTable.')
f3PortMirrorAccPortExtMonitorEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PortMirrorAccPortExtMonitorEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PortMirrorAccPortExtMonitorEnabled.setDescription('This object allows to Enable/Disable Monitor Mode on Port.')
f3PortMirrorAccPortExtBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 15360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PortMirrorAccPortExtBufferSize.setStatus('current')
if mibBuilder.loadTexts: f3PortMirrorAccPortExtBufferSize.setDescription('Applicable when port is in Monitor Mode.')
f3PortMirrorAccPortExtMirrRsrcEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 1, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PortMirrorAccPortExtMirrRsrcEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PortMirrorAccPortExtMirrRsrcEnabled.setDescription('This object allows to Enable/Disable Mirror Resource on Port.')
f3MonitorPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 2, 1), )
if mibBuilder.loadTexts: f3MonitorPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3MonitorPortStatsTable.setDescription('A list of entries corresponding to the Access Port \n             related Monitor Port Statistics.')
f3MonitorPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 2, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-PORTMIRROR-MIB", "f3MonitorPortStatsIndex"))
if mibBuilder.loadTexts: f3MonitorPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3MonitorPortStatsEntry.setDescription('A conceptual row in the f3MonitorPortStatsTable.')
f3MonitorPortStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: f3MonitorPortStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3MonitorPortStatsIndex.setDescription('An integer index value used to uniquely identify\n          this Ethernet Access Port (Monitor Port) statistics')
f3MonitorPortStatsTailDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 2, 1, 1, 2), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MonitorPortStatsTailDropped.setStatus('current')
if mibBuilder.loadTexts: f3MonitorPortStatsTailDropped.setDescription('64-bit rollover count for taildrops')
f3MirrorSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 2, 2), )
if mibBuilder.loadTexts: f3MirrorSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionStatsTable.setDescription('A list of entries corresponding \n             to the Mirror Session Statistics.')
f3MirrorSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 2, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PORTMIRROR-MIB", "f3MirrorSessionStatsIndex"))
if mibBuilder.loadTexts: f3MirrorSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionStatsEntry.setDescription('A conceptual row in the f3MirrorSessionStatsTable.')
f3MirrorSessionStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: f3MirrorSessionStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionStatsIndex.setDescription('An integer index value used to uniquely identify\n          this Mirror Session statistics')
f3MirrorSessionStatsMirrFilterFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 2, 2, 1, 2), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MirrorSessionStatsMirrFilterFrameDiscard.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionStatsMirrFilterFrameDiscard.setDescription('The number of frames dropped due to \n          a filter having a DENY action.')
f3MirrorSessionStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 2, 2, 1, 3), PortMirrorStatsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3MirrorSessionStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionStatsAction.setDescription('User action performed on Monitor Port Stats.')
f3MirrorFilterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 1), )
if mibBuilder.loadTexts: f3MirrorFilterProfileTable.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileTable.setDescription('A list of entries corresponding \n             to Mirror Filter Profile instance \n             for configuration purposes.')
f3MirrorFilterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PORTMIRROR-MIB", "f3MirrorFilterProfileIndex"))
if mibBuilder.loadTexts: f3MirrorFilterProfileEntry.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileEntry.setDescription('A conceptual row in the f3MirrorFilterProfileTable.')
f3MirrorFilterProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: f3MirrorFilterProfileIndex.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileIndex.setDescription('An integer index value used to uniquely identify\n          this Mirror Filter Profile within Network Element.')
f3MirrorFilterProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterProfileName.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileName.setDescription('Mirror Filter Profile Name')
f3MirrorFilterProfileDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 1, 1, 3), MirroredFramesAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterProfileDefaultAction.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileDefaultAction.setDescription('Mirror Filter Profile Action for a mirrored frame\n          that does not match any filter entry for the profile')
f3MirrorFilterProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 1, 1, 4), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterProfileStorageType.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileStorageType.setDescription('The type of storage configured for this entry.')
f3MirrorFilterProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n          active state unless all objects in the entry have an \n          appropriate value, as described\n          in the description clause for each writable object.\n\n          The values of f3MirrorFilterProfileRowStatus supported are\n          createAndGo(4) and destroy(6).  All mandatory attributes\n          must be specified in a single SNMP SET request with\n          neRowStatus value as createAndGo(4).\n          Upon successful row creation, this object has a\n          value of active(1).\n          \n          The f3MirrorFilterProfileRowStatus object may be modified if\n          the associated instance of this object is equal to active(1).')
f3MirrorFilterProfileEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 2), )
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryTable.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryTable.setDescription('A list of entries corresponding \n             to Mirror Filter Profile Entry instance \n             for configuration purposes.')
f3MirrorFilterProfileEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PORTMIRROR-MIB", "f3MirrorFilterProfileIndex"), (0, "F3-PORTMIRROR-MIB", "f3MirrorFilterProfileEntryIndex"))
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryEntry.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryEntry.setDescription('A conceptual row in the f3MirrorFilterProfileEntryTable.')
f3MirrorFilterProfileEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryIndex.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryIndex.setDescription('An integer index value used to uniquely identify\n          this Mirror Filter Profile Entry \n          within Mirror Filter Profile.')
f3MirrorFilterProfileEntryFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 2, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryFilter.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryFilter.setDescription('Pointer to a Mirror Filter. The pointer must be set to f3MirrorFilterName.')
f3MirrorFilterProfileEntryPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryPriority.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryPriority.setDescription('Execution order for this Filter Entry within the Profile')
f3MirrorFilterProfileEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 2, 1, 4), MirroredFramesAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryAction.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryAction.setDescription('User action performed on this Mirror Filter Profile Entryinstance:\n          - ACCEPT: a Mirrored Frame that matches this filter entry \n                    is transmitted on the Monitor Port\n          - DENY: a Mirrored Frame that matches this filter entry \n                  is discarded and not transmitted on the Monitor Port')
f3MirrorFilterProfileEntryStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 2, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryStorageType.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryStorageType.setDescription('The type of storage configured for this entry.')
f3MirrorFilterProfileEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterProfileEntryRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n          active state unless all objects in the entry have an \n          appropriate value, as described\n          in the description clause for each writable object.\n\n          The values of f3MirrorFilterProfileEntryRowStatus supported are\n          createAndGo(4) and destroy(6).  All mandatory attributes\n          must be specified in a single SNMP SET request with\n          neRowStatus value as createAndGo(4).\n          Upon successful row creation, this object has a\n          value of active(1).\n          \n          The f3MirrorFilterProfileEntryRowStatus object may be modified if\n          the associated instance of this object is equal to active(1).')
f3MirrorFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3), )
if mibBuilder.loadTexts: f3MirrorFilterTable.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterTable.setDescription('A list of entries corresponding \n             to Mirror Filter instance \n             for configuration purposes.')
f3MirrorFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PORTMIRROR-MIB", "f3MirrorFilterIndex"))
if mibBuilder.loadTexts: f3MirrorFilterEntry.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterEntry.setDescription('A conceptual row in the f3MirrorFilterTable.')
f3MirrorFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: f3MirrorFilterIndex.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterIndex.setDescription('An integer index value used to uniquely identify\n          this Mirror Filter within Network Element.')
f3MirrorFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterName.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterName.setDescription('Mirror Filter Name')
f3MirrorFilterL2OuterVIDCtrlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterL2OuterVIDCtrlEnabled.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterL2OuterVIDCtrlEnabled.setDescription('Object used to determine if l2FilterOuterVIDLow/High \n          values will be applied as frame match criteria')
f3MirrorFilterL2OuterVIDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 4), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterL2OuterVIDLow.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterL2OuterVIDLow.setDescription('A Outer tag VID value to be applied as a frame match \n          criteria to the Outer Tag of the frame when \n          l2FilterOuterVIDControl is ENABLED.')
f3MirrorFilterL2OuterVIDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 5), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterL2OuterVIDHigh.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterL2OuterVIDHigh.setDescription('A Outer tag VID value to be applied as a frame match \n          criteria to the Outer Tag of the frame when \n          l2FilterOuterVIDControl is ENABLED.')
f3MirrorFilterL2OuterPrioCtrlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterL2OuterPrioCtrlEnabled.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterL2OuterPrioCtrlEnabled.setDescription('Object used to determine if l2FilterOuterPrioLow/High \n          values will be applied as frame match criteria')
f3MirrorFilterL2OuterPrioLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterL2OuterPrioLow.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterL2OuterPrioLow.setDescription('A Outer tag Prio value to be applied as a frame match \n          criteria to the Outer Tag of the frame when \n          l2FilterOuterPrioControl is ENABLED.')
f3MirrorFilterL2OuterPrioHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterL2OuterPrioHigh.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterL2OuterPrioHigh.setDescription('A Outer tag Prio value to be applied as a frame match \n          criteria to the Outer Tag of the frame when \n          l2FilterOuterPrioControl is ENABLED.')
f3MirrorFilterL3IPv4DstAddrCtrlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterL3IPv4DstAddrCtrlEnabled.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterL3IPv4DstAddrCtrlEnabled.setDescription('Object used to determine if l3FilterIPv4DstAddr/DstAddrMask \n          values will be applied as frame match criteria')
f3MirrorFilterL3IPv4DstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterL3IPv4DstAddr.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterL3IPv4DstAddr.setDescription('A IPv4 Address value to be applied as a frame match criteria \n          to the IPv4 Destination Address of the frame when \n          l3FilterIPv4DstAddrControl is ENABLED.')
f3MirrorFilterL3IPv4DstAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterL3IPv4DstAddrMask.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterL3IPv4DstAddrMask.setDescription('A IPv4 Address Mask value to be applied as a frame match criteria \n          to the IPv4 Destination Address of the frame when \n          l3FilterIPv4DstAddrControl is ENABLED.')
f3MirrorFilterL3IPv4SrcAddrCtrlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterL3IPv4SrcAddrCtrlEnabled.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterL3IPv4SrcAddrCtrlEnabled.setDescription('Object used to determine if l3FilterIPv4SrcAddr/SrcAddrMask \n          values will be applied as frame match criteria')
f3MirrorFilterL3IPv4SrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterL3IPv4SrcAddr.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterL3IPv4SrcAddr.setDescription('A IPv4 Address value to be applied as a frame match criteria \n          to the IPv4 Source Address of the frame when \n          l3FilterIPv4SrcAddrControl is ENABLED.')
f3MirrorFilterL3IPv4SrcAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterL3IPv4SrcAddrMask.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterL3IPv4SrcAddrMask.setDescription('A IPv4 Address Mask value to be applied as a frame match criteria \n          to the IPv4 Source Address of the frame when \n          l3FilterIPv4SrcAddrControl is ENABLED.')
f3MirrorFilterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 15), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterStorageType.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterStorageType.setDescription('The type of storage configured for this entry.')
f3MirrorFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 4, 3, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MirrorFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3MirrorFilterRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n          active state unless all objects in the entry have an \n          appropriate value, as described\n          in the description clause for each writable object.\n\n          The values of f3MirrorFilterRowStatus supported are\n          createAndGo(4) and destroy(6).  All mandatory attributes\n          must be specified in a single SNMP SET request with\n          neRowStatus value as createAndGo(4).\n          Upon successful row creation, this object has a\n          value of active(1).\n          \n          The f3MirrorFilterRowStatus object may be modified if\n          the associated instance of this object is equal to active(1).')
f3PortMirrorCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 3, 1))
f3PortMirrorGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 3, 2))
f3PortMirrorCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 3, 1, 1)).setObjects(("F3-PORTMIRROR-MIB", "f3MirrorSessionGroup"), ("F3-PORTMIRROR-MIB", "f3PortMirrorAccPortExtGroup"), ("F3-PORTMIRROR-MIB", "f3MonitorPortStatsGroup"), ("F3-PORTMIRROR-MIB", "f3PortMirrorFilterGroup"), ("F3-PORTMIRROR-MIB", "f3MirrorSessionStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PortMirrorCompliance = f3PortMirrorCompliance.setStatus('current')
if mibBuilder.loadTexts: f3PortMirrorCompliance.setDescription('Describes the requirements for conformance to the F3-PORTMIRROR-MIB compilance.')
f3MirrorSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 3, 2, 1)).setObjects(("F3-PORTMIRROR-MIB", "f3MirrorSessionIndex"), ("F3-PORTMIRROR-MIB", "f3MirrorSessionSourcePort"), ("F3-PORTMIRROR-MIB", "f3MirrorSessionMonitorPort"), ("F3-PORTMIRROR-MIB", "f3MirrorSessionSourcePortDir"), ("F3-PORTMIRROR-MIB", "f3MirrorSessionTruncationCtrl"), ("F3-PORTMIRROR-MIB", "f3MirrorSessionTruncationLength"), ("F3-PORTMIRROR-MIB", "f3MirrorSessionTimestampControl"), ("F3-PORTMIRROR-MIB", "f3MirrorSessionStorageType"), ("F3-PORTMIRROR-MIB", "f3MirrorSessionRowStatus"), ("F3-PORTMIRROR-MIB", "f3MirrorSessionMirrRsrcPort"), ("F3-PORTMIRROR-MIB", "f3MirrorSessionFilterProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3MirrorSessionGroup = f3MirrorSessionGroup.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionGroup.setDescription('A collection of objects used to manage the Port Mirror Session.')
f3PortMirrorAccPortExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 3, 2, 2)).setObjects(("F3-PORTMIRROR-MIB", "f3PortMirrorAccPortExtMonitorEnabled"), ("F3-PORTMIRROR-MIB", "f3PortMirrorAccPortExtBufferSize"), ("F3-PORTMIRROR-MIB", "f3PortMirrorAccPortExtMirrRsrcEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PortMirrorAccPortExtGroup = f3PortMirrorAccPortExtGroup.setStatus('current')
if mibBuilder.loadTexts: f3PortMirrorAccPortExtGroup.setDescription('A collection of objects used to manage the Access Port\n              attributes related with Port Mirror feature.')
f3MonitorPortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 3, 2, 3)).setObjects(("F3-PORTMIRROR-MIB", "f3MonitorPortStatsIndex"), ("F3-PORTMIRROR-MIB", "f3MonitorPortStatsTailDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3MonitorPortStatsGroup = f3MonitorPortStatsGroup.setStatus('current')
if mibBuilder.loadTexts: f3MonitorPortStatsGroup.setDescription('A collection of Monitor Port statistic objects.')
f3MirrorSessionStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 3, 2, 4)).setObjects(("F3-PORTMIRROR-MIB", "f3MirrorSessionStatsIndex"), ("F3-PORTMIRROR-MIB", "f3MirrorSessionStatsMirrFilterFrameDiscard"), ("F3-PORTMIRROR-MIB", "f3MirrorSessionStatsAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3MirrorSessionStatsGroup = f3MirrorSessionStatsGroup.setStatus('current')
if mibBuilder.loadTexts: f3MirrorSessionStatsGroup.setDescription('A collection of Mirror Session statistic objects.')
f3PortMirrorFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 29, 3, 2, 5)).setObjects(("F3-PORTMIRROR-MIB", "f3MirrorFilterProfileIndex"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterProfileName"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterProfileDefaultAction"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterProfileStorageType"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterProfileRowStatus"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterProfileEntryIndex"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterProfileEntryFilter"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterProfileEntryPriority"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterProfileEntryAction"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterProfileEntryStorageType"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterProfileEntryRowStatus"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterIndex"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterName"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterL2OuterVIDCtrlEnabled"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterL2OuterVIDLow"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterL2OuterVIDHigh"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterL2OuterPrioCtrlEnabled"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterL2OuterPrioLow"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterL2OuterPrioHigh"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterL3IPv4DstAddrCtrlEnabled"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterL3IPv4DstAddr"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterL3IPv4DstAddrMask"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterL3IPv4SrcAddrCtrlEnabled"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterL3IPv4SrcAddr"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterL3IPv4SrcAddrMask"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterStorageType"), ("F3-PORTMIRROR-MIB", "f3MirrorFilterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PortMirrorFilterGroup = f3PortMirrorFilterGroup.setStatus('current')
if mibBuilder.loadTexts: f3PortMirrorFilterGroup.setDescription('A collection of objects used to manage \n              the Port Mirror Session Filter functionality.')
mibBuilder.exportSymbols("F3-PORTMIRROR-MIB", PYSNMP_MODULE_ID=f3PortMirrorMIB, f3MirrorSessionIndex=f3MirrorSessionIndex, f3MirrorSessionMonitorPort=f3MirrorSessionMonitorPort, f3PortMirrorAccPortExtMirrRsrcEnabled=f3PortMirrorAccPortExtMirrRsrcEnabled, f3MirrorSessionStatsTable=f3MirrorSessionStatsTable, f3MirrorFilterL2OuterVIDLow=f3MirrorFilterL2OuterVIDLow, f3PortMirrorStatsObjects=f3PortMirrorStatsObjects, f3MirrorFilterIndex=f3MirrorFilterIndex, f3PortMirrorAccPortExtGroup=f3PortMirrorAccPortExtGroup, f3PortMirrorFilterObjects=f3PortMirrorFilterObjects, f3MirrorSessionFilterProfile=f3MirrorSessionFilterProfile, f3MirrorFilterL3IPv4DstAddrMask=f3MirrorFilterL3IPv4DstAddrMask, f3MirrorFilterL3IPv4SrcAddrMask=f3MirrorFilterL3IPv4SrcAddrMask, f3PortMirrorFilterGroup=f3PortMirrorFilterGroup, f3PortMirrorConfigObjects=f3PortMirrorConfigObjects, f3MirrorFilterRowStatus=f3MirrorFilterRowStatus, f3MirrorFilterName=f3MirrorFilterName, f3MirrorFilterL2OuterVIDHigh=f3MirrorFilterL2OuterVIDHigh, f3MirrorFilterL3IPv4SrcAddrCtrlEnabled=f3MirrorFilterL3IPv4SrcAddrCtrlEnabled, f3MirrorSessionEntry=f3MirrorSessionEntry, PortMirrorStatsAction=PortMirrorStatsAction, f3MirrorSessionStatsEntry=f3MirrorSessionStatsEntry, f3MirrorSessionMirrRsrcPort=f3MirrorSessionMirrRsrcPort, f3MirrorFilterProfileTable=f3MirrorFilterProfileTable, f3MirrorFilterL2OuterPrioCtrlEnabled=f3MirrorFilterL2OuterPrioCtrlEnabled, f3PortMirrorCompliances=f3PortMirrorCompliances, f3MirrorFilterProfileRowStatus=f3MirrorFilterProfileRowStatus, f3PortMirrorGroups=f3PortMirrorGroups, f3MonitorPortStatsEntry=f3MonitorPortStatsEntry, f3MirrorFilterProfileDefaultAction=f3MirrorFilterProfileDefaultAction, f3MirrorSessionStatsMirrFilterFrameDiscard=f3MirrorSessionStatsMirrFilterFrameDiscard, f3MirrorSessionStorageType=f3MirrorSessionStorageType, f3PortMirrorAccPortExtBufferSize=f3PortMirrorAccPortExtBufferSize, f3PortMirrorAccPortExtTable=f3PortMirrorAccPortExtTable, f3MirrorSessionStatsAction=f3MirrorSessionStatsAction, f3MirrorFilterL2OuterVIDCtrlEnabled=f3MirrorFilterL2OuterVIDCtrlEnabled, f3MirrorFilterProfileEntryAction=f3MirrorFilterProfileEntryAction, f3MirrorFilterProfileEntryRowStatus=f3MirrorFilterProfileEntryRowStatus, f3MonitorPortStatsTable=f3MonitorPortStatsTable, f3MonitorPortStatsTailDropped=f3MonitorPortStatsTailDropped, f3MirrorFilterStorageType=f3MirrorFilterStorageType, f3MirrorFilterProfileIndex=f3MirrorFilterProfileIndex, f3MirrorSessionStatsGroup=f3MirrorSessionStatsGroup, f3MirrorSessionSourcePortDir=f3MirrorSessionSourcePortDir, f3MirrorFilterProfileStorageType=f3MirrorFilterProfileStorageType, f3PortMirrorMIB=f3PortMirrorMIB, f3MirrorFilterTable=f3MirrorFilterTable, f3MirrorFilterL2OuterPrioLow=f3MirrorFilterL2OuterPrioLow, f3MirrorFilterProfileEntryTable=f3MirrorFilterProfileEntryTable, f3MirrorFilterProfileEntryStorageType=f3MirrorFilterProfileEntryStorageType, f3MirrorSessionTruncationCtrl=f3MirrorSessionTruncationCtrl, f3MirrorFilterEntry=f3MirrorFilterEntry, f3MirrorSessionRowStatus=f3MirrorSessionRowStatus, f3MirrorFilterL3IPv4DstAddr=f3MirrorFilterL3IPv4DstAddr, f3MirrorSessionSourcePort=f3MirrorSessionSourcePort, f3MirrorSessionTable=f3MirrorSessionTable, f3MirrorFilterL3IPv4DstAddrCtrlEnabled=f3MirrorFilterL3IPv4DstAddrCtrlEnabled, f3MirrorFilterProfileName=f3MirrorFilterProfileName, f3MirrorFilterProfileEntry=f3MirrorFilterProfileEntry, f3PortMirrorConformance=f3PortMirrorConformance, f3MirrorFilterProfileEntryEntry=f3MirrorFilterProfileEntryEntry, f3MirrorSessionStatsIndex=f3MirrorSessionStatsIndex, f3MirrorSessionTruncationLength=f3MirrorSessionTruncationLength, f3MirrorFilterProfileEntryPriority=f3MirrorFilterProfileEntryPriority, f3MirrorSessionTimestampControl=f3MirrorSessionTimestampControl, f3MonitorPortStatsGroup=f3MonitorPortStatsGroup, f3PortMirrorCompliance=f3PortMirrorCompliance, f3MirrorFilterProfileEntryFilter=f3MirrorFilterProfileEntryFilter, MirroredFramesAction=MirroredFramesAction, f3MirrorFilterL3IPv4SrcAddr=f3MirrorFilterL3IPv4SrcAddr, f3MonitorPortStatsIndex=f3MonitorPortStatsIndex, f3PortMirrorAccPortExtEntry=f3PortMirrorAccPortExtEntry, f3PortMirrorAccPortExtMonitorEnabled=f3PortMirrorAccPortExtMonitorEnabled, f3MirrorSessionGroup=f3MirrorSessionGroup, f3MirrorFilterProfileEntryIndex=f3MirrorFilterProfileEntryIndex, f3MirrorFilterL2OuterPrioHigh=f3MirrorFilterL2OuterPrioHigh)
