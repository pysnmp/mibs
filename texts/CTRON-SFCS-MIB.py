#
# PySNMP MIB module CTRON-SFCS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFCS-MIB
# Produced by pysmi-1.1.12 at Thu Sep 26 02:13:15 2024
# On host fv-az1144-917 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
atmVcCrossConnectLowVpi, atmVcCrossConnectHighIfIndex, atmVcCrossConnectHighVpi, atmVcCrossConnectIndex, atmVcCrossConnectLowIfIndex, atmVcCrossConnectHighVci, atmVcCrossConnectLowVci = mibBuilder.importSymbols("ATM-MIB", "atmVcCrossConnectLowVpi", "atmVcCrossConnectHighIfIndex", "atmVcCrossConnectHighVpi", "atmVcCrossConnectIndex", "atmVcCrossConnectLowIfIndex", "atmVcCrossConnectHighVci", "atmVcCrossConnectLowVci")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, enterprises, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Integer32, NotificationType, iso, Bits, Gauge32, ObjectIdentity, Counter64, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "enterprises", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Integer32", "NotificationType", "iso", "Bits", "Gauge32", "ObjectIdentity", "Counter64", "ModuleIdentity", "Counter32")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
cabletron = MibIdentifier((1, 3, 6, 1, 4, 1, 52))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4))
ctron = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1))
ctDataLink = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2))
ctSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11))
ctsfSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1))
ctSFCS = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1))
sfcsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1))
sfcsSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1))
sfcsSysStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2))
sfcsSysSystemCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 3))
sfcsSysBPCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 4))
sfcsEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2))
sfcsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1))
sfcsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2))
sfcsUPCEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3))
sfcsStatisticsEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4))
sfcsPacketDiscardEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5))
sfcsANIM = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3))
sfcsANIMConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1))
sfcsANIMStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 2))
sfcsANIMPic = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3))
sfcsInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4))
sfcsInterfaceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1))
sfcsInterfaceStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2))
sfcsQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5))
sfcsQueueConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1))
sfcsQueueStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2))
sfcsConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7))
sfcsConnectionConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1))
sfcsConnectionStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2))
sfcsConnectionError = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 3))
sfcsConnectionAPI = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 8))
sfcsCTM = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9))
sfcsCTMInterfaceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1))
sfcsCTMInterfaceStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2))
sfcsCTMQueueConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3))
sfcsCTMQueueStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4))
sfcsBWMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12))
sfcsBwNims = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1))
sfcsBwPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2))
sfcsBwPortPools = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3))
sfcsBuffPools = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4))
sfcsProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13))
sfcsProxyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1))
sfcsProxyTrans = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2))
sfcsProxyRead = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3))
sfcsSysConfigTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1))
sfcsSysConfigEnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1))
sfcsSysConfigAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigAdminStatus.setDescription('Sets the administrative state of the SFCS switching\n                 services for this virtual switch.  This controls the\n                 SFCS state at a chassis level.  Regardless of the\n                 per-interface state of each SFCS switching element\n                 and the state of active connections, writing the value\n                 disabled(2) will cause the entire switch to immediately\n                 shutdown.\n                                 enabled(1)    --  startup the SFCS\n                                 disabled(2)   --  shutdown the SFCS\n                                 other(3)      --  none of the following')
sfcsSysConfigOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigOperStatus.setDescription('Indicates the current operating condition of this switch.\n                        enabled(1)          --  running\n                        disabled(2)         --  not running\n                        other(3)            --  none of the following\n                        pending-disable(4)  --  shut-down in progress\n                        pending-enable(5)   --  start-up in progress\n                        invalid-config(6)   --  not running,invalid config')
sfcsSysConfigOperTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigOperTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigOperTime.setDescription('Indicates the amount of time (# of time ticks) that\n                 this switch system has been in its current operational\n                 state.')
sfcsSysConfigLastChange = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigLastChange.setDescription('Indicates the last time a change was made to the\n                 configuration entry for this switch.')
sfcsSysConfigSwitchCapacity = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigSwitchCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigSwitchCapacity.setDescription('Indicates the maximum front panel bandwidth based on current\n                 hardware configuration of the switch in Mbps')
sfcsSysConfigMaxCnxEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigMaxCnxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigMaxCnxEntries.setDescription('Indicates the maximum number of connections which\n                 can be established on this switch.')
sfcsSysConfigMaxStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigMaxStatEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigMaxStatEntries.setDescription('Indicates the maximum number of stats enabled VCs for this\n                 switch.')
sfcsSysConfigMaxUpcEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigMaxUpcEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigMaxUpcEntries.setDescription('Indicates the maximum number of UPC enabled VCs for this\n                 switch.')
sfcsSysConfigNumberANIMS = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigNumberANIMS.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigNumberANIMS.setDescription('Indicates the number of ATM Network Inteface Modules\n                 currently configured on this switch.')
sfcsSysConfigInterfaceCapability = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigInterfaceCapability.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigInterfaceCapability.setDescription('Indicates the total bandwidth capability(of the engine)\n                 for this switch expressed in Mbps.')
sfcsSysConfigTypeofSwitch = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sfcellswitch", 2), ("sfpacketswitch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigTypeofSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigTypeofSwitch.setDescription('Indicates what type of switch this is.\n                        other(1)\n                        sfcellswitch(2)\n                        sfpacketswitch(3)')
sfcsSysConfigPolicingSupport = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigPolicingSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigPolicingSupport.setDescription('Indicates whether or not this switch supports policing.\n                        supported(1)\n                        not supported(2)')
sfcsSysConfigPnniNsapPrefix = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigPnniNsapPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigPnniNsapPrefix.setDescription('This is the 13 byte NSAP prefix to use\n                 with address registration.')
sfcsSysConfigPnniNodeLevel = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigPnniNodeLevel.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigPnniNodeLevel.setDescription('This is the PNNI node level value. \n                 The range can be from 0 to 104.')
sfcsSysConfigPnniAddessingMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigPnniAddessingMode.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigPnniAddessingMode.setDescription('This is the PNNI addressing mode - that \n                 can range from 0 to 2.\n                 0 - Auto Mode using MAC\n                 1 - Auto Mode using board#\n                 2 - Manual ')
sfcsSysConfigPnniAddessingAdmnStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigPnniAddessingAdmnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigPnniAddessingAdmnStatus.setDescription('This is the PNNI addressing admn status.\n                 Down - 2. Up - 1.')
sfcsSysConfigFMVer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigFMVer.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigFMVer.setDescription('This is the Firmware Revision of the switch.')
sfcsSysConfigCTMSlotMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigCTMSlotMask.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigCTMSlotMask.setDescription('This is the slot mask for all ctm boards in the chassis.\n                 The least significant bit represents slot 1.')
sfcsSysConfigMaxfreecva = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigMaxfreecva.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigMaxfreecva.setDescription('This is the maximum number of CAC connection blocks that\n        CAC will allow on its free list. The default is 1024. If too low\n        CAC performance will degrade (thrashing control blocks), If too high,\n        memory exhaustion may occur. \n         ')
sfcsSysConfigUBR = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigUBR.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigUBR.setDescription('For the set operation: UBR_Cfg is set across all boards in the \n                 chassis (that are operational and manageable).\n                 For the get operation: UBR_Cfg setting is retrived from the \n                 current chassis manager only (one slot only).\n                 IF boards are introduced or re-introduced to the chassis their \n                 UBR value will be 0. In order to insure a required UBR_Cfg value \n                 the set operation should be proformed after slot insertions or \n                 re-insertions are completed to the chassis. ')
sfcsSysStatusTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1))
sfcsSysStatusEnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1, 1))
sfcsSysStatusTdmCellCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysStatusTdmCellCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysStatusTdmCellCount.setDescription('Indicates the total number of cells being transfered\n                 across the TDM for the entire switch.')
sfcsSysStatusTdmUtilization = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysStatusTdmUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysStatusTdmUtilization.setDescription('Indicates the total percentage TDM utilization for the switch.')
sfcsSysStatusCurrCnxEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysStatusCurrCnxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysStatusCurrCnxEntries.setDescription('Indicates the current number of connection entries for\n                 this switch.')
sfcsSysStatusCurrUPCEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysStatusCurrUPCEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysStatusCurrUPCEntries.setDescription('Indicates the current number of UPC entries for this\n                 switch.')
sfcsSysStatusCurrStatsEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysStatusCurrStatsEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysStatusCurrStatsEntries.setDescription('Indicates the current number of statistics entries for\n                 this switch.')
sfcsSysStatusAllocatedBw = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysStatusAllocatedBw.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysStatusAllocatedBw.setDescription('Indicates the current allocated bandwidth of the switch in\n                 bits per second.')
sfcsSysSystemCfgTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 3, 1))
sfcsSysSystemCfgEnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 3, 1, 1))
sfcsSysConfigAdminReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigAdminReset.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigAdminReset.setDescription('Resets this virtual switch. Writing a value of\n                 reset(2) will force a restart of the entire switch,\n                 without any graceful shutdown.  Any active\n                 connections or services will be interrupted.\n                        other(1)     --  none of the following\n                        reset(2)     --  force a reset')
sfcsSysConfigATOMPersistance = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigATOMPersistance.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigATOMPersistance.setDescription('This enables or disables ATOM mib persistance.\n                              enabled(1)\n                              disabled(2)')
sfcsSysConfigVcSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigVcSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigVcSize.setDescription('This entry is the size of VCs allocated for all\n                 VPs in the switch.')
sfcsSysConfigPowerUpDiags = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigPowerUpDiags.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysConfigPowerUpDiags.setDescription('This enables or disables power up diags.\n                              enabled(1)\n                              disabled(2)')
sfcsSysBPTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 4, 1))
sfcsSysBPEnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 4, 1, 1))
sfcsSysBPClkSelect = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysBPClkSelect.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsSysBPClkSelect.setDescription('This enables one of two backplane clocks from any slot.\n                 A valid entry is any number that correspond to a slot\n                 having a board supporting this mib. A write to this mib\n                 will fail if the board with the number selected is deriving \n                 its clock from the backplane. A value of 0 indicates that no \n                 board is driving the backplane.')
sfcsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: sfcsConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigTable.setDescription('This table contains the configuration and administrative\n                 information for each SFCS module.  Essentially, a\n                 separate SFCS instance exists for each switch module.\n                 If SFCS is not configured on a module, than an entry\n                 will not exist.')
sfcsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsConfigSlotIndex"))
if mibBuilder.loadTexts: sfcsConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigEntry.setDescription('Each entry specifies the SFCS configuration for the\n                 SFCS module.')
sfcsConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigSlotIndex.setDescription('The primary index to the SFCS switch table.  This\n                 identifies the chassis slot number for this switch\n                 module.')
sfcsConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigAdminStatus.setDescription('Sets the administrative state of the SFCS switching\n                 services for this SFCS module.  This controls the\n                 SFCS state at a module level.  Regardless of the\n                 per-interface state of each SFCS switching interface\n                 and the state of active connections, writing the value\n                 disabled(2) will cause the SFCS to immediately\n                 shutdown.  A gracefull shutdown will be attempted.\n                            enabled(1)     --  startup the SFCS\n                            disabled(2)    --  shutdown the SFCS\n                            other(3)       --  none of the following')
sfcsConfigAdminReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsConfigAdminReset.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigAdminReset.setDescription('Resets this SFCS module. Writing a value of\n                 reset(2) will force a soft restart of the SFCS\n                 without any graceful shutdown.  Any active\n                 connections or services will be interrupted.\n                        other(1)       --  none of the following\n                        reset(2)       --  force a reset')
sfcsConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigOperStatus.setDescription('Indicates the current operating condition of the SFCS\n                 module.\n                        enabled(1)           --  running\n                        disabled(2)          --  not running\n                        other(3)             --  none of the following\n                        pending-disable(4)   --  shut-down in progress\n                        pending-enable(5)    --  start-up in progress\n                        invalid-config(6)    --  not running,invalid config')
sfcsConfigOperTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigOperTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigOperTime.setDescription('Indicates the amount of time (# of time ticks) that this\n                 SFCS module has been in its current operational state.')
sfcsConfigLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigLastChange.setDescription('Indicates the last time a change was made to the\n                 configuration entry for this SFCS switch module.')
sfcsConfigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigVersion.setDescription('Indicates the current revision level of the SFCS MIB\n                 for this switch module expressed as an integer.')
sfcsConfigMibRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigMibRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigMibRev.setDescription('Indicates in textual format the current revision level\n                 of the Cabletron SFCS MIB for this switch module.')
sfcsConfigSwitchHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigSwitchHostPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigSwitchHostPort.setDescription('Indicates the switch port that is attached to the host.')
sfcsConfigHostCtrlATMAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigHostCtrlATMAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigHostCtrlATMAddr.setDescription('Indicates the ATM address of the host. (SAR)')
sfcsConfigSwitchCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigSwitchCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigSwitchCapacity.setDescription('Indicates the front panel bandwidth based on the hardware\n                 that is currently installed, in Mbps.\n                 (number of ports and the port type)')
sfcsConfigMaxCnxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigMaxCnxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigMaxCnxEntries.setDescription('Indicates the maximum number of connections which\n                 can be established on this switch module.')
sfcsConfigMaxStatEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigMaxStatEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigMaxStatEntries.setDescription('Indicates the maximum number of stats enabled VCs for this\n                 switch module.')
sfcsConfigMaxUpcEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigMaxUpcEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigMaxUpcEntries.setDescription('Indicates the maximum number of UPC enabled VCs for this\n                 switch module.')
sfcsConfigNumberANIMS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigNumberANIMS.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigNumberANIMS.setDescription('Indicates the number of ATM Network Inteface Modules\n                 currently configured on this switch module.')
sfcsConfigBwCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigBwCapability.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigBwCapability.setDescription('Indicates the total bandwidth capability for this \n                 switch engine expressed in Mbps.')
sfcsConfigMasterClock1Source = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("anim-one-clk", 1), ("anim-two-clk", 2), ("anim-three-clk", 3), ("anim-four-clk", 4), ("backplane-one", 5), ("backplane-two", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsConfigMasterClock1Source.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigMasterClock1Source.setDescription('Indicates the clocking source for MasterClock1 on each board.\n                 The write will fail if it is also currently the source of the \n                 backplane. The write will also fail if the board does not support\n                 backplane clocking.')
sfcsConfigMasterClock2Source = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("anim-one-clk", 1), ("anim-two-clk", 2), ("anim-three-clk", 3), ("anim-four-clk", 4), ("backplane-one", 5), ("backplane-two", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsConfigMasterClock2Source.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigMasterClock2Source.setDescription('Indicates the clocking source for MasterClock2 on each board.\n                 The write will fail if it is also currently the source of the \n                 backplane. The write will also fail if the board does not support\n                 backplane clocking.')
sfcsConfigMasterClock1Standby = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("anim-one-clk", 1), ("anim-two-clk", 2), ("anim-three-clk", 3), ("anim-four-clk", 4), ("backplane-one", 5), ("backplane-two", 6), ("none", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsConfigMasterClock1Standby.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigMasterClock1Standby.setDescription('Indicates the clocking stand-by for MasterClock1 on each board.\n                 The write will fail if it is also currently the source of the\n                 backplane. The write will also fail if the board does not support\n                 backplane clocking. If this value is none(7) and an interrupt on\n                 the primary interface for MasterClock1 is received. MasterClock1 \n                 will switch to that anims local clock.')
sfcsConfigMasterClock2Standby = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("anim-one-clk", 1), ("anim-two-clk", 2), ("anim-three-clk", 3), ("anim-four-clk", 4), ("backplane-one", 5), ("backplane-two", 6), ("none", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsConfigMasterClock2Standby.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsConfigMasterClock2Standby.setDescription('Indicates the clocking stand-by for MasterClock2 on each board.\n                 The write will fail if it is also currently the source of the\n                 backplane. The write will also fail if the board does not support\n                 backplane clocking. If this value is none(7) and an interrupt on\n                 the primary interface for MasterClock1 is received. MasterClock1 \n                 will switch to that anims local clock.')
sfcsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: sfcsStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatusTable.setDescription('This table contains the status information for each SFCS\n                 switch module.')
sfcsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsStatusSlotIndex"))
if mibBuilder.loadTexts: sfcsStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatusEntry.setDescription('Each entry contains the SFCS statistics for the SFCS\n                instance.')
sfcsStatusSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatusSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatusSlotIndex.setDescription('The primary index to the SFCS switch table.  This\n                 identifies the chassis slot number for this SFCS module.')
sfcsStatusTdmCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatusTdmCellCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatusTdmCellCount.setDescription('Indicates the total number of cells being transfered\n                 across the TDM for this switch module.')
sfcsStatusTdmUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatusTdmUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatusTdmUtilization.setDescription('Indicates the percentage TDM utilization for this switch\n                 module.')
sfcsStatusCurrCnxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatusCurrCnxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatusCurrCnxEntries.setDescription('Indicates the current number of connection entries for\n                 this switch module.')
sfcsStatusCurrUPCEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatusCurrUPCEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatusCurrUPCEntries.setDescription('Indicates the current number of UPC entries for this\n                 switch module.')
sfcsStatusCurrStatsEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatusCurrStatsEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatusCurrStatsEntries.setDescription('Indicates the current number of statistics entries for\n                 this switch module.')
sfcsStatusCurrCtmAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatusCurrCtmAgent.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatusCurrCtmAgent.setDescription('Indicates the current board number of\n                 the ctm agent for this switch module.')
sfcsUPCTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3, 1), )
if mibBuilder.loadTexts: sfcsUPCTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsUPCTable.setDescription('This table contains the Usage Parameter Control info\n                 for this SFCS module.')
sfcsUPCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsUPCSlotIndex"))
if mibBuilder.loadTexts: sfcsUPCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsUPCEntry.setDescription('Each entry contains the UPC data for the SFCS instance.')
sfcsUPCSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsUPCSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsUPCSlotIndex.setDescription('The primary index to the SFCS switch table.  This\n                 identifies the slot number for this SFCS module.')
sfcsUPCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsUPCAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsUPCAdminStatus.setDescription("Sets the administrative state of the SFCS module's\n                 UPC engine.\n                            enabled(1)\n                            disabled(2)\n                            other(3)")
sfcsUPCOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsUPCOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsUPCOperStatus.setDescription("Indicates the operational state of the SFCS module's\n                 UPC engine.")
sfcsUPCReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsUPCReset.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsUPCReset.setDescription('Resets the UPC engine for this SFCS module.\n                            other(1)\n                            reset(2)')
sfcsUPCOperTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsUPCOperTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsUPCOperTime.setDescription('Indicates the amount of time (# of time ticks) that\n                 the UPC engine has been active for this switch module.')
sfcsStatsEngineTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4, 1), )
if mibBuilder.loadTexts: sfcsStatsEngineTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatsEngineTable.setDescription('This table contains information for the Statistics engine\n                 for a particular switch module.')
sfcsStatsEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsStatsEngineSlotIndex"))
if mibBuilder.loadTexts: sfcsStatsEngineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatsEngineEntry.setDescription('Each entry contains the statistics engine data for the\n                 SFCS module.')
sfcsStatsEngineSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatsEngineSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatsEngineSlotIndex.setDescription('The primary index to the SFCS stats engine table.\n                 This identifies the chassis slot number for this SFCS\n                 module.')
sfcsStatsEngineAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsStatsEngineAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatsEngineAdminStatus.setDescription('Sets the administrative state of the SFCS switch\n                 statistics engine.  Writing a value of enabled(1) causes\n                 these counters to become active for this SFCS switch\n                 instance.  Writing a value of disabled(2) causes\n                 these counters to become inactive for this SFCS\n                 module.\n                            enabled(1)\n                            disabled(2)\n                            other(3)')
sfcsStatsEngineOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatsEngineOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatsEngineOperStatus.setDescription('Indicates the operational state of the SFCS switch\n                 statistics engine for this switch module.\n                            enabled(1)\n                            disabled(2)\n                            other(3)')
sfcsStatsEngineReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsStatsEngineReset.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatsEngineReset.setDescription('Resets the SFCS switch counters for this SFCS module.\n                 Writing a value of reset(2) resets the SFCS switch\n                 counters to 0 and causes sfcsStatsEngineOperTime\n                 to also be reset to 0.\n                            other(1)\n                            reset(2)')
sfcsStatsEngineOperTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatsEngineOperTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsStatsEngineOperTime.setDescription('Indicates the amount of time (# of time ticks) that\n                 the SFCS switch statistics have been active for this\n                 switch module.')
sfcsPacketDiscardEngineTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1), )
if mibBuilder.loadTexts: sfcsPacketDiscardEngineTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsPacketDiscardEngineTable.setDescription('This table contains information for the Packet Discard engine\n                 for a particular switch module.')
sfcsPacketDiscardEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsPacketDiscardEngineSlotIndex"))
if mibBuilder.loadTexts: sfcsPacketDiscardEngineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsPacketDiscardEngineEntry.setDescription('Each entry contains the packet discard engine data for the\n                 SFCS module.')
sfcsPacketDiscardEngineSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsPacketDiscardEngineSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsPacketDiscardEngineSlotIndex.setDescription('The primary index to the SFCS packet discard engine table.\n                 This identifies the chassis slot number for this SFCS\n                 module.')
sfcsPacketDiscardEngineAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsPacketDiscardEngineAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsPacketDiscardEngineAdminStatus.setDescription('Sets the administrative state of the SFCS switch\n                 packet discard engine.  Writing a value of enabled(1) causes\n                 these packet discard registers to become active for this SFCS switch\n                 instance.  Writing a value of disabled(2) causes\n                 these packet discard registers to become inactive for this SFCS\n                 module.\n                            enabled(1)\n                            disabled(2)\n                            other(3)')
sfcsPacketDiscardEngineOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsPacketDiscardEngineOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsPacketDiscardEngineOperStatus.setDescription('Indicates the operational state of the SFCS switch\n                 packet discard engine for this switch module.\n                            enabled(1)\n                            disabled(2)\n                            other(3)')
sfcsPacketDiscardEngineReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsPacketDiscardEngineReset.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsPacketDiscardEngineReset.setDescription('Resets the SFCS switch registers for this SFCS module.\n                 Writing a value of reset(2) resets the SFCS switch packet\n                 discard registers to 0 and causes sfcsPacketDiscardEngineOperTime\n                 to also be reset to 0.\n                            other(1)\n                            reset(2)')
sfcsPacketDiscardEngineEPDPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsPacketDiscardEngineEPDPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsPacketDiscardEngineEPDPercentage.setDescription('Sets the Early Packet Discard threshold percentage for every\n                 port, and every priority on a single blade.')
sfcsPacketDiscardEngineOperTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsPacketDiscardEngineOperTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsPacketDiscardEngineOperTime.setDescription('Indicates the amount of time (# of time ticks) that\n                 the SFCS switch packet discard engine has been active for this\n                 switch module.')
sfcsANIMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1), )
if mibBuilder.loadTexts: sfcsANIMConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMConfigTable.setDescription('This table contains the configuration information for\n                 each SFCS ANIM instance.')
sfcsANIMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsANIMConfigANIMIndex"))
if mibBuilder.loadTexts: sfcsANIMConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMConfigEntry.setDescription('Each entry contains the SFCS config info for the SFCS\n                instance.')
sfcsANIMConfigANIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMConfigANIMIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMConfigANIMIndex.setDescription("This index specifies which ANIM we are dealing\n                 with. This reference is in the same format as\n                 MIB II's InterfaceIndex.")
sfcsANIMConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsANIMConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMConfigAdminStatus.setDescription('Sets the administrative state of the SFCS switch\n                 ANIM.\n                            enabled(1)\n                            disabled(2)\n                            other(3)')
sfcsANIMConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMConfigOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMConfigOperStatus.setDescription('Indicates the operational state of the SFCS switch\n                 ANIM for this SFCS ANIM instance.\n                            enabled(1)\n                            disabled(2)\n                            other(3)')
sfcsANIMConfigANIMType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMConfigANIMType.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMConfigANIMType.setDescription('Indicates the type of physical interface for this\n                 ANIM. The types are described in ctron.oids')
sfcsANIMConfigNumInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMConfigNumInterfaces.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMConfigNumInterfaces.setDescription('Indicates the number of operational interfaces for\n                 this ANIM.')
sfcsANIMConfigLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMConfigLineRate.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMConfigLineRate.setDescription('Indicates the line rate per port for this ANIM in\n                 Mbps.')
sfcsANIMConfigToMB = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("local-anim-clock", 1), ("port-one-clock", 2), ("port-two-clock", 3), ("port-three-clock", 4), ("port-four-clock", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsANIMConfigToMB.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMConfigToMB.setDescription('This is the ANIM clock source to board.')
sfcsANIMConfigMBClockSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master-clk-one", 1), ("master-clk-two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsANIMConfigMBClockSelect.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMConfigMBClockSelect.setDescription('This indicates the ANIM clock source.')
sfcsANIMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: sfcsANIMStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMStatsTable.setDescription('This table contains the statistics information for\n                 each SFCS ANIM instance.')
sfcsANIMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsANIMStatsANIMIndex"))
if mibBuilder.loadTexts: sfcsANIMStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMStatsEntry.setDescription('Each entry contains the SFCS statistics for the SFCS\n                instance.')
sfcsANIMStatsANIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMStatsANIMIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMStatsANIMIndex.setDescription("The primary index which specifies which ANIM instance\n                 we are dealing with.  This index is formatted like\n                 MIB II's Interface Index.")
sfcsANIMStatsRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMStatsRxCells.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMStatsRxCells.setDescription("Indicates the number of cells received from this\n                 ANIM's interfaces.")
sfcsANIMStatsTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMStatsTxCells.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMStatsTxCells.setDescription("Indicates the number of cells transmitted from\n                 this ANIM's interfaces.")
sfcsANIMPicTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1), )
if mibBuilder.loadTexts: sfcsANIMPicTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicTable.setDescription('This table contains the PIC information for\n                 each SFCS ANIM instance.')
sfcsANIMPicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsANIMPicIndex"))
if mibBuilder.loadTexts: sfcsANIMPicEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicEntry.setDescription('Each entry contains the SFCS PIC info for the SFCS\n                instance.')
sfcsANIMPicSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicSlot.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicSlot.setDescription('Specific slot which the module that realizes this PIC\n                resides.  If the PIC is associated with the chassis\n                and not a specific module then this value will be 0.')
sfcsANIMPicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicIndex.setDescription('Uniquely identifies the instance of a PIC in a particular\n                 slot.')
sfcsANIMPicLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicLocation.setDescription('Defines location of the PIC chip.  This takes on any of\n                the encoding values defined below for backplane, module,\n                daughter board, brim.')
sfcsANIMPicStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("present", 2), ("notPresent", 3), ("checkSum", 4), ("error", 5), ("limited", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicStatus.setDescription('Provides the status of the specific PIC chip.  the values\n                are defined as follows:\n                        other(1) - firmware can not determine status\n                        present(2) - PIC seems to be functional\n                        notPresent(3) - PIC not found but expected\n                        checkSum(4) - A check sum error occured\n                        error(5) - An undefined error condition exists.\n                        limited(6) - A limited PIC implementation only\n                                type code information is present.')
sfcsANIMPicVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicVersion.setDescription('Reflects the version of the PIC implementation that this\n                PIC conforms to.  This has the format x.yy . If non-existent,\n                this object will be set to all blanks(ascii 32).')
sfcsANIMPicModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicModuleType.setDescription('Defines the standard module type value as defined in\n                ctron-oids.')
sfcsANIMPicMfgPN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgPN.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicMfgPN.setDescription('Describes the manufacturing level part number of the module\n                associated with this PIC.  This information is encoded as\n                follows:\n                        7 Characters    Part Number\n                        2 Characters    Rework Location.\n                If any field of this object is non-existent, it will be set\n                to all blanks(ascii 32).')
sfcsANIMPicMfgSN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgSN.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicMfgSN.setDescription('Describes the manufacturing level serial number of the module\n                associated with this PIC.  This information is encoded as\n                follows:\n                        3 bytes - Date code (year/week)\n                        4 bytes - Serial number\n                        2 bytes - Manufacture location\n                        3 bytes - Board level revision\n                If any field of this object is non-existent, it will be\n                set to all blanks(ascii 32).')
sfcsANIMPicMfgPartNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgPartNumb.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicMfgPartNumb.setDescription('This object presents the part number portion of the\n                ctPicMfgPN object.  This object contains the same information\n                however in a more human readable format.  If non-existent,\n                this object will be set to all blanks(ascii 32).')
sfcsANIMPicMfgSerialNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgSerialNumb.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicMfgSerialNumb.setDescription('This object presents the serial number portion of the\n                ctPicMfgSN object.  This object contains the same information\n                however in a more human readable format.  If non-existent,\n                this object will be set to all blanks(ascii 32).')
sfcsANIMPicMfgReworkLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgReworkLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicMfgReworkLocation.setDescription('The 2 character code that defines the location this\n                module was last reworked. This object contains the same\n                information as presented in ctPicMfgPN object however\n                in a more human readable format.  If non-existent, this\n                object will be set to all blanks(ascii 32).')
sfcsANIMPicMfgMfgLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgMfgLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicMfgMfgLocation.setDescription('The two character code that defines the location\n                this module was manufactured at. This object contains the same\n                information as presented in ctPicMfgSN object however\n                in a more human readable format.  If non-existent, this object\n                will be set to all blanks(ascii 32).')
sfcsANIMPicMfgDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgDateCode.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicMfgDateCode.setDescription('The 3 byte date code field when this module was last\n                reworked.  This is in year/week format. This object\n                contains the same information as presented in ctPicMfgSN\n                object however in a more human readable format.  If\n                non-existent, this object will be set to all blanks(ascii 32).')
sfcsANIMPicMfgRevisionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgRevisionCode.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicMfgRevisionCode.setDescription('The 3 character board level revision code field of this\n                module.  This object contains the same information as\n                presented in ctPicMfgSN object however in a more human\n                readable format.  If non-existent, this object will be set\n                to all blanks (ascii 32).')
sfcsANIMPicTLPN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLPN.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicTLPN.setDescription('Describes the top level part number of the module associated\n                with this PIC.  This information is encoded as follows:\n                        7 Characters    Part Number\n                        2 Characters    Rework Location.\n                If any field of this object is non-existent, it will be set\n                to all blanks(ascii 32).')
sfcsANIMPicTLSN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLSN.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicTLSN.setDescription('Describes the top level serial number of the module\n                associated with this PIC.  This information is encoded\n                as follows:\n                        3 bytes - Date code (year/week)\n                        4 bytes - Serial number\n                        2 bytes - Manufacture location\n                        3 bytes - Top level revision\n                If any field of this object is non-existent, it will be\n                set to all blanks(ascii 32).')
sfcsANIMPicTLPartNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLPartNumb.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicTLPartNumb.setDescription('This object presents the part number portion of the\n                ctPicTLPN object.  This object contains the same information\n                however in a more human readable format.  If non-existent,\n                this object will be set to all blanks(ascii 32).')
sfcsANIMPicTLSerialNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLSerialNumb.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicTLSerialNumb.setDescription('This object presents the serial number portion of the\n                ctPicTLSN object.  This object contains the same information\n                however in a more human readable format.  If non-existent,\n                this object will be set to all blanks(ascii 32).')
sfcsANIMPicTLReworkLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLReworkLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicTLReworkLocation.setDescription('The 2 character code that defines the location this\n                module was last reworked. This object contains the same\n                information as presented in ctPicTLPN object however\n                in a more human readable format.  If non-existent, this\n                object will be set to all blanks(ascii 32).')
sfcsANIMPicTLMfgLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLMfgLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicTLMfgLocation.setDescription('The two character code that defines the location\n                this module was manufactured at. This object contains the same\n                information as presented in ctPicTLSN object however\n                in a more human readable format.  If non-existent, this object\n                will be set to all blanks(ascii 32).')
sfcsANIMPicTLDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLDateCode.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicTLDateCode.setDescription('The 3 byte date code field when this module was last\n                reworked.  This is in year/week format. This object\n                contains the same information as presented in ctPicTLSN\n                object however in a more human readable format.  If\n                non-existent, this object will be set to all blanks(ascii 32).')
sfcsANIMPicTLRevisionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLRevisionCode.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicTLRevisionCode.setDescription('The 3 character top level revision code field of this module.\n                This object contains the same information as presented in\n                ctPicTLSN object however in a more human readable format.\n                If non-existent, this object will be set to all blanks\n                (ascii 32).')
sfcsANIMPicTLPcbRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLPcbRevision.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicTLPcbRevision.setDescription('Defines the Cabletron revision of the art work for this\n                module. If non-existent, this object will be set to all\n                blanks(ascii 32).')
sfcsANIMPicMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicMacAddr.setDescription('The base MAC address(ethernet format)assigned to the module.\n                If this field is not used then it should have a value of a\n                zero length string. If non-existent, this object will be set\n                to all blanks(ascii 32).')
sfcsANIMPicNumbRsvdAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicNumbRsvdAddrs.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicNumbRsvdAddrs.setDescription('The number of reserved MAC addresses starting at the\n                address as defined in ctPicMacAddr.  If no MAC addresses\n                are reserved this object should have a value of 0.')
sfcsANIMPicBoardLevelRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicBoardLevelRevision.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicBoardLevelRevision.setDescription('Defines the Cabletron board level revision level code for\n                this module.  If non-existent, this object will be set to\n                blanks (ascii 32).')
sfcsANIMPicModuleTypeString = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicModuleTypeString.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicModuleTypeString.setDescription('Describes the module associated with this PIC in a\n                human readable format.  If non-existent, this object\n                will be set to blanks (ascii 32).')
sfcsANIMPicDcDcConverterType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicDcDcConverterType.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicDcDcConverterType.setDescription('Describes the voltage of the installed DCDC Converter\n                input and output lines.\n                If the Module does not contain a DCDC Converter\n                this object will be set to blanks (ascii 32).')
sfcsANIMPicDcDcConverterInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicDcDcConverterInputPower.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicDcDcConverterInputPower.setDescription('Describes the maximum allowed input power\n                for the DCDC input line.\n                If the Module does not contain a DCDC Converter\n                this object will be set to blanks (ascii 32).')
sfcsANIMPicSmb1PromVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicSmb1PromVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsANIMPicSmb1PromVersion.setDescription('Describes the current version of the SMB1 prom.\n                If the Module does not contain an SMB1 prom\n                this object will be set to blanks (ascii 32).')
sfcsInterfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1), )
if mibBuilder.loadTexts: sfcsInterfaceConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceConfigTable.setDescription('This table contains the configuration information of each\n                 configured SFCS switch interface.  If SFCS is not configured\n                 on a port, than an entry will not exist.')
sfcsInterfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsInterfaceConfigInterfaceIndex"))
if mibBuilder.loadTexts: sfcsInterfaceConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceConfigEntry.setDescription('Each entry specifies the SFCS configuration for the SFCS\n                 switch interface for which the entry exists.')
sfcsInterfaceConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceConfigInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceConfigInterfaceIndex.setDescription('The index which specifies which interface we are\n                 dealing with.')
sfcsInterfaceConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("access-port", 2), ("network-port", 3), ("host-mgmt-port", 4), ("host-ctl-port", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceConfigType.setStatus('deprecated')
if mibBuilder.loadTexts: sfcsInterfaceConfigType.setDescription('Sets the type of interface access attribute for the SFCS\n                 interfaces.  Access ports allow single user or shared\n                 access and perform statisics and control; network ports\n                 are equivalent to trunk ports with no access control;\n                 host management port indicates the (virtual) port to which\n                 the (internal) management agent is attached; host control\n                 port indicates the port to redirect non-management packets.\n                            other(1)\n                            access-port(2)\n                            network-port(3)\n                            host-mgmt-port(4)\n                            host-ctl-port(5)')
sfcsInterfacePeakBufferUseage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfacePeakBufferUseage.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfacePeakBufferUseage.setDescription('An accumulated snap shot of the current peak queue depth\n                 for the configured buffer queues.  This information is \n                 obtained from a read/reset register.')
sfcsInterfaceConfigNumberOfQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceConfigNumberOfQueues.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceConfigNumberOfQueues.setDescription('Indicates the number of priority queues configured on this\n                 interface.')
sfcsInterfaceConfigSigStackID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceConfigSigStackID.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceConfigSigStackID.setDescription('Indicates the user signalling stack ID for this interface.')
sfcsInterfaceConfigClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local-anim-clock", 1), ("mother-board-master-clock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsInterfaceConfigClockingSource.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceConfigClockingSource.setDescription('The interface clocking source.')
sfcsInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1), )
if mibBuilder.loadTexts: sfcsInterfaceStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceStatsTable.setDescription('This table contains the cell counts for each\n                 SFCS switch interface.')
sfcsInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsInterfaceStatsInterfaceIndex"))
if mibBuilder.loadTexts: sfcsInterfaceStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceStatsEntry.setDescription('Specifies the SFCS cell counts for the SFCS\n                 interface for which this entry exists.')
sfcsInterfaceStatsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceStatsInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceStatsInterfaceIndex.setDescription('The index which specifies which interface we are\n                 dealing with.')
sfcsInterfaceStatsRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceStatsRxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceStatsRxErrors.setDescription('Indicates the number of receive path lookup\n                 invalid and out of range errors.')
sfcsInterfaceStatsVPILookupInvalidErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceStatsVPILookupInvalidErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceStatsVPILookupInvalidErrors.setDescription('Indicates the number of VPI lookup invalid and out of\n                 range errors.')
sfcsInterfaceStatsRxCnxLookupInvalidErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceStatsRxCnxLookupInvalidErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceStatsRxCnxLookupInvalidErrors.setDescription('Indicates the number of receive connection lookup\n                 invalid errors.')
sfcsInterfaceStatsRxCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceStatsRxCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceStatsRxCellCnt.setDescription('Indicates the number of receive cells on\n                 this interface.')
sfcsInterfaceStatsTxCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceStatsTxCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceStatsTxCellCnt.setDescription('Indicates the number of transmit cells\n                 on this interface.')
sfcsInterfaceStatsOverflowDropCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceStatsOverflowDropCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsInterfaceStatsOverflowDropCellCnt.setDescription('Indicates the number of cells that were\n                 dropped due to queue overflows.')
sfcsQueueConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1), )
if mibBuilder.loadTexts: sfcsQueueConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueConfigTable.setDescription('This table contains the configuration information for\n                 all queues on the SFCS.')
sfcsQueueConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsQueueConfigInterfaceIndex"), (0, "CTRON-SFCS-MIB", "sfcsQueueConfigQueueIndex"))
if mibBuilder.loadTexts: sfcsQueueConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueConfigEntry.setDescription('Each entry specifies the queue information for the\n                 SFCS switch for which the entry exists.')
sfcsQueueConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueConfigInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueConfigInterfaceIndex.setDescription('The index which specifies which interface we are\n                 dealing with.')
sfcsQueueConfigQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueConfigQueueIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueConfigQueueIndex.setDescription('The index which specifies which transmit queue we\n                 are dealing with.')
sfcsQueueConfigQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueConfigQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueConfigQueueSize.setDescription('Indicates the size of the transmit queue for this\n                 queue instance.')
sfcsQueueConfigQueueBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueConfigQueueBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueConfigQueueBandwidth.setDescription("Indicates the percentage of this interface's bandwidth\n                 utilized by this particular queue.")
sfcsQueueConfigClpDropThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsQueueConfigClpDropThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueConfigClpDropThreshold.setDescription("Indicates the queue level to start dropping CLP=1\n                 cells for this queue.  This level is expressed as\n                 the percentage of this queue's size.")
sfcsQueueConfigCongestionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsQueueConfigCongestionThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueConfigCongestionThreshold.setDescription("Indicates the level to consider this queue congested.\n                 This level is expressed as the percentage of this\n                 queue's size.")
sfcsQueueConfigEFCILowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsQueueConfigEFCILowThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueConfigEFCILowThreshold.setDescription("Indicates the lower threshold used for EFCI for\n                 this queue instance.  This level is expressed as\n                 the percentage of this queue's size.")
sfcsQueueConfigRMThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsQueueConfigRMThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueConfigRMThreshold.setDescription("Indicates the remote management queue threshold expressed\n                 as a percentage of the queue's size.  When this level is\n                 hit, a management message is sent to the sender notifying it\n                 to slow down.")
sfcsQueueConfigEPDThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsQueueConfigEPDThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueConfigEPDThreshold.setDescription("Indicates the Early Packet Discard threshold expressed\n                 as a percentage of the queue's size.  When this level is\n                 exceeded the Transmit ASIC starts to drop all cells entering\n                 this queue.")
sfcsQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1), )
if mibBuilder.loadTexts: sfcsQueueStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueStatsTable.setDescription('This table contains the statistics information for all\n                 queues on the SFCS.')
sfcsQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsQueueStatsInterfaceIndex"), (0, "CTRON-SFCS-MIB", "sfcsQueueStatsQueue"))
if mibBuilder.loadTexts: sfcsQueueStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueStatsEntry.setDescription('Each entry specifies the queue information for the\n                 SFCS switch for which the entry exists.')
sfcsQueueStatsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueStatsInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueStatsInterfaceIndex.setDescription('The index which specifies which interface we are\n                 dealing with.')
sfcsQueueStatsQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueStatsQueue.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueStatsQueue.setDescription('The index which specifies which queue we are\n                 dealing with.')
sfcsQueueStatsTxClpCellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueStatsTxClpCellsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueStatsTxClpCellsDiscarded.setDescription('Indicates the number of cells with CLP=1 that were\n                 discarded for this queue instance.')
sfcsQueueStatsTxCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueStatsTxCellsDropped.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueStatsTxCellsDropped.setDescription('Indicates the number of cells that overflowed the\n                 buffer for this queue instance.')
sfcsQueueStatsQueuePeakLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueStatsQueuePeakLevel.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueStatsQueuePeakLevel.setDescription('Indicates the peak level since last read for this\n                 queue instance.')
sfcsQueueStatsTxCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueStatsTxCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsQueueStatsTxCellCnt.setDescription('Indicates the transmit cell count on a per queue basis.\n                A value of zero indicates not available')
sfcsCnxCfgTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1), )
if mibBuilder.loadTexts: sfcsCnxCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgTable.setDescription('This table contains the connection configuration\n                 information.')
sfcsCnxCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsCnxCfgCrossConnectIndex"), (0, "CTRON-SFCS-MIB", "sfcsCnxCfgCrossConnectLowIfIndex"), (0, "CTRON-SFCS-MIB", "sfcsCnxCfgCrossConnectLowVpi"), (0, "CTRON-SFCS-MIB", "sfcsCnxCfgCrossConnectLowVci"), (0, "CTRON-SFCS-MIB", "sfcsCnxCfgCrossConnectHighIfIndex"), (0, "CTRON-SFCS-MIB", "sfcsCnxCfgCrossConnectHighVpi"), (0, "CTRON-SFCS-MIB", "sfcsCnxCfgCrossConnectHighVci"))
if mibBuilder.loadTexts: sfcsCnxCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgEntry.setDescription('Each entry specifies the connection configuration\n                 information for the SFCS switch connection instance.')
sfcsCnxCfgCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectIndex.setDescription('A unique value to identify this cross-connect.')
sfcsCnxCfgCrossConnectLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectLowIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectLowIfIndex.setDescription('The value of this object is equal to the low\n                 MIB II IfIndex value of the ATM interface port\n                 for this cross-connect.')
sfcsCnxCfgCrossConnectLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectLowVpi.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectLowVpi.setDescription('The value of this object is equal to the low VPI\n                 value at the ATM interface associated with the\n                 cross-connect that is identified by\n                 sfcsCnxCfgCrossConnectIndex.')
sfcsCnxCfgCrossConnectLowVci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectLowVci.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectLowVci.setDescription('The value of this object is equal to the low VCI\n                 value at the ATM interface associated with this\n                 cross-connect that is identified by\n                 sfcsCnxCfgCrossConnectIndex.')
sfcsCnxCfgCrossConnectHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectHighIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectHighIfIndex.setDescription('The value of this object is equal to the high\n                 MIB II IfIndex value of the ATM interface port\n                 for this cross-connect.')
sfcsCnxCfgCrossConnectHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectHighVpi.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectHighVpi.setDescription('The value of this object is equal to the high VPI\n                 value at the ATM interface associated with the\n                 cross-connect that is identified by\n                 sfcsCnxCfgCrossConnectIndex.')
sfcsCnxCfgCrossConnectHighVci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectHighVci.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectHighVci.setDescription('The value of this object is equal to the high VCI\n                 value at the ATM interface associated with this\n                 cross-connect that is identified by\n                 sfcsCnxCfgCrossConnectIndex.')
sfcsCnxCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("point-to-point-vpl", 1), ("point-to-mpoint-vpl", 2), ("mpoint-to-mpoint-vpl", 3), ("point-to-point-vcl", 4), ("point-to-mpoint-vcl", 5), ("mpoint-to-mpoint-vcl", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgType.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgType.setDescription('Indicates the connection type for this VC.\n                        point-to-point-vpl(1)\n                        point-to-mpoint-vpl(2)\n                        mpoint-to-mpoint-vpl(3)\n                        point-to-point-vcl(4)\n                        point-to-mpoint-vcl(5)\n                        mpoint-to-mpoint-vcl(6)')
sfcsCnxCfgTmType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("efci", 2), ("er", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgTmType.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgTmType.setDescription('Indicates the type of traffic management used on this VC.\n                        other   (1)\n                        efci    (2)\n                        er      (3)')
sfcsCnxCfgUPCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("l-h-upc-enabled", 1), ("l-h-tag-enabled", 2), ("l-h-upc-tag-enabled", 3), ("h-l-upc-enabled", 4), ("l-h-upc-and-h-l-upc-enabled", 5), ("l-h-Tag-and-h-l-upc-enabled", 6), ("l-h-upc-tag-and-h-l-upc-enabled", 7), ("h-l-tag-enabled", 8), ("l-h-upc-and-h-l-tag-enabled", 9), ("l-h-tag-and-h-l-tag-enabled", 10), ("l-h-upc-tag-and-h-l-tag-enabled", 11), ("h-l-upc-tag-enabled", 12), ("l-h-upc-and-h-l-upc-tag-enabled", 13), ("l-h-tag-and-h-l-upc-tag-enabled", 14), ("l-h-upc-tag-and-h-l-upc-tag-enabled", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgUPCEnable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgUPCEnable.setDescription('Indicates whether or not UPC policing is enabled on\n                 this VC. A VC can be bi-directional or uni-directional.\n                 Due to this, the UPC bit is a masking based on directionality.\n                 Where direction is in terms of high interface (H) and low\n                 interface (L). (Where not specified, assume disabled.)\n                        L to H UPC enabled(1)\n                        L to H Tagging enabled(2)\n                        L to H UPC/Tagging enabled(3)\n                        H to L UPC enabled(4)\n                        L to H UPC enabled & H to L UPC enabled(5)\n                        L to H Tagging enabled & H to L UPC enabled(6)\n                        L to H UPC/Tagging enabled & H to L UPC enabled(7)\n                        H to L Tagging enabled(8)\n                        L to H UPC enabled & H to L Tagging enabled(9)\n                        L to H Tagging enabled & H to L Tagging enabled(10)\n                        L to H UPC/Tagging enabled & H to L Tagging enabled(11)\n                        H to L UPC/Tagging enabled(12)\n                        L to H UPC enabled & H to L UPC/Tagging enabled(13)\n                        L to H Tagging enabled and H to L UPC/Tagging enabled(14)\n                        L to H UPC/Tagging enabled & H to L UPC/Tagging enabled(15)')
sfcsCnxCfgStatsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgStatsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgStatsEnable.setDescription('Indicates whether statistics will be kept on this VC.\n                        enabled(1)\n                        disabled(2)\n                        other(3)')
sfcsCnxCfgStatsTableCounterSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("thirtytwobittagcounter", 1), ("thirtytwobitdropcounter", 2), ("sixteenbiteachcounter", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgStatsTableCounterSizes.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgStatsTableCounterSizes.setDescription('Indicates the size of the drop counter for this VC.\n                        thirtytwobittagcounter  (1)\n                        thirtytwobitdropcounter (2)\n                        sixteenbiteachcounter   (3)')
sfcsCnxCfgOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("own", 2), ("dontown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgOwner.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxCfgOwner.setDescription('Indicates the owner of this cross connect.\n                        other(1)\n                        own(2)\n                        dontown(3)')
sfcsCnxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1), )
if mibBuilder.loadTexts: sfcsCnxStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsTable.setDescription('This table contains the connection configuration\n                 information.')
sfcsCnxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsCnxStatsCrossConnectIndex"), (0, "CTRON-SFCS-MIB", "sfcsCnxStatsCrossConnectLowIfIndex"), (0, "CTRON-SFCS-MIB", "sfcsCnxStatsCrossConnectLowVpi"), (0, "CTRON-SFCS-MIB", "sfcsCnxStatsCrossConnectLowVci"), (0, "CTRON-SFCS-MIB", "sfcsCnxStatsCrossConnectHighIfIndex"), (0, "CTRON-SFCS-MIB", "sfcsCnxStatsCrossConnectHighVpi"), (0, "CTRON-SFCS-MIB", "sfcsCnxStatsCrossConnectHighVci"))
if mibBuilder.loadTexts: sfcsCnxStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsEntry.setDescription('Each entry specifies the connection statistics\n                 information for the SFCS switch connection instance.')
sfcsCnxStatsCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectIndex.setDescription('A unique value to identify this cross-connect.')
sfcsCnxStatsCrossConnectLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectLowIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectLowIfIndex.setDescription('The value of this object is equal to the low\n                 MIB II IfIndex value of the ATM interface port\n                 for this cross-connect.')
sfcsCnxStatsCrossConnectLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectLowVpi.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectLowVpi.setDescription('The value of this object is equal to the low VPI\n                 value at the ATM interface associated with the\n                 cross-connect that is identified by\n                 sfcsCnxStatsCrossConnectIndex.')
sfcsCnxStatsCrossConnectLowVci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectLowVci.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectLowVci.setDescription('The value of this object is equal to the low VCI\n                 value at the ATM interface associated with this\n                 cross-connect that is identified by\n                 sfcsCnxStatsCrossConnectIndex.')
sfcsCnxStatsCrossConnectHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectHighIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectHighIfIndex.setDescription('The value of this object is equal to the high\n                 MIB II IfIndex value of the ATM interface port\n                 for this cross-connect.')
sfcsCnxStatsCrossConnectHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectHighVpi.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectHighVpi.setDescription('The value of this object is equal to the high VPI\n                 value at the ATM interface associated with the\n                 cross-connect that is identified by\n                 sfcsCnxStatsCrossConnectIndex.')
sfcsCnxStatsCrossConnectHighVci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectHighVci.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectHighVci.setDescription('The value of this object is equal to the high VCI\n                 value at the ATM interface associated with this\n                 cross-connect that is identified by\n                 sfcsCnxStatsCrossConnectIndex.')
sfcsCnxStatsLoToHiHTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsLoToHiHTxCells.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsLoToHiHTxCells.setDescription('Indicates the transmitted cell count for this connection.\n                 This entry specifies the count from the low port/vpi/vci\n                 to the high port/vpi/vci')
sfcsCnxStatsLoToHiDroppedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsLoToHiDroppedCells.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsLoToHiDroppedCells.setDescription('Indicates the dropped cell count for this connection\n                 instance. This entry specifies the count from the low\n                 port/vpi/vci to the high port/vpi/vci.')
sfcsCnxStatsLoToHiTaggedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsLoToHiTaggedCells.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsLoToHiTaggedCells.setDescription('Indicates the tagged cell count for this connection\n                 instance. This entry specifies the count from the low\n                 port/vpi/vci to the high port/vpi/vci.')
sfcsCnxStatsHiToLoHTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsHiToLoHTxCells.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsHiToLoHTxCells.setDescription('Indicates the transmitted cell count for this connection.\n                 This entry specifies the count from the high port/vpi/vci\n                 to the low port/vpi/vci')
sfcsCnxStatsHiToLoDroppedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsHiToLoDroppedCells.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsHiToLoDroppedCells.setDescription('Indicates the dropped cell count for this connection\n                 instance. This entry specifies the count from the high\n                 port/vpi/vci to the low port/vpi/vci.')
sfcsCnxStatsHiToLoTaggedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsHiToLoTaggedCells.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxStatsHiToLoTaggedCells.setDescription('Indicates the tagged cell count for this connection\n                 instance. This entry specifies the count from the high\n                 port/vpi/vci to the low port/vpi/vci.')
sfcsCnxErrorTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 3, 1), )
if mibBuilder.loadTexts: sfcsCnxErrorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxErrorTable.setDescription('This table contains the connection error information\n                 supplied by the atmAPI mib.')
sfcsCnxErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 3, 1, 1), ).setIndexNames((0, "ATM-MIB", "atmVcCrossConnectIndex"), (0, "ATM-MIB", "atmVcCrossConnectLowIfIndex"), (0, "ATM-MIB", "atmVcCrossConnectLowVpi"), (0, "ATM-MIB", "atmVcCrossConnectLowVci"), (0, "ATM-MIB", "atmVcCrossConnectHighIfIndex"), (0, "ATM-MIB", "atmVcCrossConnectHighVpi"), (0, "ATM-MIB", "atmVcCrossConnectHighVci"))
if mibBuilder.loadTexts: sfcsCnxErrorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxErrorEntry.setDescription('A list of VCC connection request failures. This table\n                 is indexed the same way as the atmVcCrossConnectTable\n                 in the AToM mib.')
sfcsCnxErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 3, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxErrorCode.setDescription('Specifies the error reason for failure of the\n                 connection setup.\n                \n                \n                01 fatal_error\n                02 moe_table_out_of_range\n                03 moe_mem_not_allocated\n                04 mem_fetch_double_reqst\n                05 lo_port_invalid\n                06 lo_port_locked\n                07 lo_vpi_invalid\n                08 lo_vci_invalid\n                09 hi_port_invalid\n                10 hi_port_locked\n                11 hi_vpi_invalid\n                12 hi_vci_invalid\n                13 trfc_desc_l2h_invalid\n                14 trfc_desc_h2l_invalid\n                15 ccid_invalid\n                16 ccid_not_assigned\n                17 atm_api_type_invalid\n                18 atm_api_verb_invalid\n                19 pt_to_pt_over_write_reqst\n                20 pt_reqst_over_mpt_conn\n                21 mask_table_full\n                22 duplicate_request\n                23 moe_table_out_of_memory\n                24 vpi0_non_term_reqst\n                25 hardware_out_of_heap\n                26 tx_conn_table_out_of_mem\n                27 tx_conn_table_time_out\n                28 ctm_communication_error\n                29 connection_table_out_of_sync\n                30 invalid_connection_entry\n                31 ctm_resource_alloc_error\n                32 front_panel_bandwidth_alloc_error\n                33 ccid_in_use')
sfcsCnxErrorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 3, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxErrorTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxErrorTimeStamp.setDescription('Indicates the value of the sysUpTime when this\n                 connection request failed. We will support this\n                 field only if the element management uses this\n                 table.')
sfcsCnxErrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("active", 3), ("delete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCnxErrorRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxErrorRowStatus.setDescription('The administrative control of this entry. The owner\n                 could delete this entry after reading it, to prevent\n                 this table from growing too big.\n                        other (1)\n                        inactive (2)\n                        active (3)\n                        delete (4)')
sfcsCnxAPIEntry = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxAPIEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCnxAPIEntry.setDescription('\n        The connection API leaf provides a method for contool for creating\n        PVCs. This always returns a value of 0.\n        ')
sfcsCTMInterfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1), )
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigTable.setDescription('This table contains the configuration information of each\n                 configured SHEMP interface.  If SFCS is not configured\n                 on a port, than an entry will not exist.')
sfcsCTMInterfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsCTMInterfaceConfigInterfaceIndex"))
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigEntry.setDescription('Each entry specifies the SFCS configuration for the SFCS\n                 switch interface for which the entry exists.')
sfcsCTMInterfaceConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigInterfaceIndex.setDescription('The index which specifies which interface we are\n                 dealing with.')
sfcsCTMInterfaceConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("access-port", 2), ("network-port", 3), ("host-mgmt-port", 4), ("host-ctl-port", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigType.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigType.setDescription('Sets the type of interface access attribute for the SFCS\n                 interfaces.  Access ports allow single user or shared\n                 access and perform statisics and control; network ports\n                 are equivalent to trunk ports with no access control;\n                 host management port indicates the (virtual) port to which\n                 the (internal) management agent is attached; host control\n                 port indicates the port to redirect non-management packets.\n                            other(1),\n                            access-port(2),\n                            network-port(3),\n                            host-mgmt-port(4),\n                            host-ctl-port(5)\n\n')
sfcsCTMInterfacePeakBufferUseage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfacePeakBufferUseage.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfacePeakBufferUseage.setDescription('Indicates the number of cells in transmit buffer memory.')
sfcsCTMInterfaceConfigNumberOfQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigNumberOfQueues.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigNumberOfQueues.setDescription('Indicates the number of priority queues configured on this\n                 interface.')
sfcsCTMInterfaceConfigSigStackID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigSigStackID.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigSigStackID.setDescription('Indicates the user signalling stack ID for this interface.')
sfcsCTMInterfaceConfigClocking = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("generated-transmit-clock", 1), ("channel-recovered-clock", 2), ("system-master-clock", 3), ("not-supported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigClocking.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigClocking.setDescription('The anim clocking source.\n                one - use the generated-transmit-clock\n                two - use the channel-recovered-clock\n                three - use the system-master-clock\n      four - option not supported by this interface')
sfcsCTMInterfaceConfigNextVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigNextVPI.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigNextVPI.setDescription('Indicates the next vpi for this interface.')
sfcsCTMInterfaceConfigNextVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigNextVCI.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigNextVCI.setDescription('Indicates the next vci for this interface.')
sfcsCTMInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1), )
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsTable.setDescription('This table contains the cell counts for each\n                 SFCS switch interface.')
sfcsCTMInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsCTMInterfaceStatsInterfaceIndex"))
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsEntry.setDescription('Specifies the SFCS cell counts for the SFCS\n                 interface for which this entry exists.')
sfcsCTMInterfaceStatsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsInterfaceIndex.setDescription('The index which specifies which interface we are\n                 dealing with.')
sfcsCTMInterfaceStatsRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsRxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsRxErrors.setDescription('Indicates the number of receive path lookup\n                 invalid and out of range errors.')
sfcsCTMInterfaceStatsVPILookupInvalidErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsVPILookupInvalidErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsVPILookupInvalidErrors.setDescription('Indicates the number of VPI lookup invalid and out of\n                 range errors.')
sfcsCTMInterfaceStatsRxCnxLookupInvalidErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsRxCnxLookupInvalidErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsRxCnxLookupInvalidErrors.setDescription('Indicates the number of receive connection lookup\n                 invalid errors.')
sfcsCTMInterfaceStatsRxCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsRxCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsRxCellCnt.setDescription('Indicates the number of receive cells on\n                 this interface.')
sfcsCTMInterfaceStatsTxCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsTxCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsTxCellCnt.setDescription('Indicates the number of transmit cells\n                 on this interface.')
sfcsCTMInterfaceStatsOverflowDropCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsOverflowDropCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsOverflowDropCellCnt.setDescription('Indicates the number of cells that were\n                 dropped due to queue overflows.')
sfcsCTMQueueConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1), )
if mibBuilder.loadTexts: sfcsCTMQueueConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueConfigTable.setDescription('This table contains the configuration information for\n                 all queues on the SFCS.')
sfcsCTMQueueConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsCTMQueueConfigInterfaceIndex"), (0, "CTRON-SFCS-MIB", "sfcsQueueConfigQueueIndex"))
if mibBuilder.loadTexts: sfcsCTMQueueConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueConfigEntry.setDescription('Each entry specifies the queue information for the\n                 SFCS switch for which the entry exists.')
sfcsCTMQueueConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueConfigInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueConfigInterfaceIndex.setDescription('The index which specifies which interface we are\n                 dealing with.')
sfcsCTMQueueConfigQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueConfigQueueIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueConfigQueueIndex.setDescription('The index which specifies which transmit queue we\n                 are dealing with.')
sfcsCTMQueueConfigQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCTMQueueConfigQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueConfigQueueSize.setDescription('Indicates the size of the transmit queue for this\n                 queue instance.')
sfcsCTMQueueConfigQueueBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCTMQueueConfigQueueBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueConfigQueueBandwidth.setDescription("Indicates the percentage of this interface's bandwidth\n                 utilized by this particular queue.")
sfcsCTMQueueConfigClpDropThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCTMQueueConfigClpDropThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueConfigClpDropThreshold.setDescription("Indicates the queue level to start dropping CLP=1\n                 cells for this queue.  This level is expressed as\n                 the percentage of this queue's size.")
sfcsCTMQueueConfigCongestionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCTMQueueConfigCongestionThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueConfigCongestionThreshold.setDescription("Indicates the level to consider this queue congested.\n                 This level is expressed as the percentage of this\n                 queue's size.")
sfcsCTMQueueConfigEFCILowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCTMQueueConfigEFCILowThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueConfigEFCILowThreshold.setDescription("Indicates the lower threshold used for EFCI for\n                 this queue instance.  This level is expressed as\n                 the percentage of this queue's size.")
sfcsCTMQueueConfigRMThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCTMQueueConfigRMThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueConfigRMThreshold.setDescription("Indicates the remote management queue threshold expressed\n                 as a percentage of the queue's size.  When this level is\n                 hit, a management message is sent to the sender notifying it\n                 to slow down.")
sfcsCTMQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1), )
if mibBuilder.loadTexts: sfcsCTMQueueStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueStatsTable.setDescription('This table contains the statistics information for all\n                 queues on the SFCS.')
sfcsCTMQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsCTMQueueStatsInterfaceIndex"), (0, "CTRON-SFCS-MIB", "sfcsQueueStatsQueue"))
if mibBuilder.loadTexts: sfcsCTMQueueStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueStatsEntry.setDescription('Each entry specifies the queue information for the\n                 SFCS switch for which the entry exists.')
sfcsCTMQueueStatsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueStatsInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueStatsInterfaceIndex.setDescription('The index which specifies which interface we are\n                 dealing with.')
sfcsCTMQueueStatsQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueStatsQueue.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueStatsQueue.setDescription('The index which specifies which queue we are\n                 dealing with.')
sfcsCTMQueueStatsTxClpCellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueStatsTxClpCellsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueStatsTxClpCellsDiscarded.setDescription('Indicates the number of cells with CLP=1 that were\n                 discarded for this queue instance.')
sfcsCTMQueueStatsTxCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueStatsTxCellsDropped.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueStatsTxCellsDropped.setDescription('Indicates the number of cells that overflowed the\n                 buffer for this queue instance.')
sfcsCTMQueueStatsQueuePeakLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueStatsQueuePeakLevel.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueStatsQueuePeakLevel.setDescription('Indicates the peak level since last read for this\n                 queue instance.')
sfcsCTMQueueStatsTxCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueStatsTxCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsCTMQueueStatsTxCellCnt.setDescription('Indicates the transmit cell count on a per queue basis.\n                A value of zero indicates not available')
sfcsBwNimsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1, 1), )
if mibBuilder.loadTexts: sfcsBwNimsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwNimsTable.setDescription('This table contains the Nim Oid and the Nim Administrative Status\n       reading functions.')
sfcsBwNimsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsBwNimsIndex"))
if mibBuilder.loadTexts: sfcsBwNimsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwNimsEntry.setDescription('Each entry contains a Nim Oid and the Nim Administrative Status.')
sfcsBwNimsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwNimsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwNimsIndex.setDescription("This index specifies which NIM we are dealing\n       with.  This reference is in the same format as MIB II's\n       Interface index.")
sfcsBwNimsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwNimsAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwNimsAdminStatus.setDescription('Indicates the administrative status of this Nim.\n                  10 - Active\n                  20 - Inactive ')
sfcsBWNimsBuffCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBWNimsBuffCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBWNimsBuffCount.setDescription('The number of transmit buffers for this NIM')
sfcsBWNimsPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBWNimsPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBWNimsPortCount.setDescription('The number of ports for this NIM')
sfcsBWNimsPrioCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBWNimsPrioCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBWNimsPrioCount.setDescription('The number of priority queues for this NIM')
sfcsBwPortsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1), )
if mibBuilder.loadTexts: sfcsBwPortsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortsTable.setDescription('This table contains the Port Oid, Port Administrative Status and\n       the forward/reverse physical bandwidth reading functions.')
sfcsBwPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsBwPortsIndex"))
if mibBuilder.loadTexts: sfcsBwPortsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortsEntry.setDescription('Each entry contains the Port Oid, Port Administrative Status and\n       the forward/reverse physical bandwidth.')
sfcsBwPortsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortsIndex.setDescription("This index specifies which Port we are dealing\n       with.  This reference is in the same format as MIB II's\n       Interface index.")
sfcsBwPortsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortsAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortsAdminStatus.setDescription('Indicates the administrative status of this Port.\n                  10 - Active\n                  20 - Inactive ')
sfcsBwPortsPhysBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortsPhysBwFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortsPhysBwFwd.setDescription('This is the forward physical bandwidth of the port in cells/sec.')
sfcsBwPortsPhysBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortsPhysBwRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortsPhysBwRev.setDescription('This is the reverse physical bandwidth of the port in cells/sec.')
sfcsBwPortsZone = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortsZone.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortsZone.setDescription('The range of the current bw operational point for this port. If a value has never been set the value will be -1.')
sfcsBwPortsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortsMetric.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortsMetric.setDescription('The current bw operational point for this port.  If a value has never been set the value will be -1.')
sfcsBwPortPoolLimitsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1), )
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsTable.setDescription('This table contains ')
sfcsBwPortPoolLimitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsBwPortPoolLimitsIndex"), (0, "CTRON-SFCS-MIB", "sfcsBwPortPoolLimitsPoolIndex"))
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsEntry.setDescription('Each entry contains ')
sfcsBwPortPoolLimitsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsIndex.setDescription("This index specifies which Port we are dealing\n       with.  This reference is in the same format as MIB II's\n       Interface index.")
sfcsBwPortPoolLimitsPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsPoolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsPoolIndex.setDescription("This index specifies which Pool within Port we are dealing\n       with.  This reference is in the same format as MIB II's\n       Interface index.")
sfcsBwPortPoolLimitsMaxAllocBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsMaxAllocBwFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsMaxAllocBwFwd.setDescription(" Upper Limit for BW to be allocated forward direction. It is defaulted to\n        the physical BW and is set by administrative action. Can't be set to\n        a value greater than physical BW")
sfcsBwPortPoolLimitsMaxAllocBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsMaxAllocBwRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsMaxAllocBwRev.setDescription(" Upper Limit for BW to be allocated reverse direction. It is defaulted to\n        the physical BW and is set by administrative action. Can't be set to\n        a value greater than physical BW")
sfcsBwPortPoolLimitsBwAllocStrat = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsBwAllocStrat.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsBwAllocStrat.setDescription('  Determines which of 3 sets of formulas will be used for computing\n         the amount of variable bandwidth to be allocated. \n         Conservative allocates the full amount of variable bandwidth,\n         Moderate allocates approximately half of the variable bandwidth,\n         Liberal supports very aggressive allocation and should only be\n         used with caution. Conservative is the default.')
sfcsBwPortPoolLimitsBwConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsBwConstant.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsBwConstant.setDescription(' A ratio used in formulas for computing the amount of variable \n        bandwidth to be allocated. Valid values are 1-255 which is the\n        numerator of a fraction whose fixed denominator is 256. Thus\n        the value 255 is really 255/256 the most conservative value;\n        the value 1 is really 1/256 the most liberal value; the value\n        128 is really 128/256 or 50%. The default is 50%.')
sfcsBwPortPoolLimitsCBRLimitFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsCBRLimitFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsCBRLimitFwd.setDescription(' A ratio used in allocating the allocatable bandwidth among the \n        various Service classes. This value is the amount of the overall\n        allocatable bw that can be allocated to CBR. The values are 1-255.\n        For a more detailed description of value useage see\n        sfcsBwPortPoolLimitsBwConstant. Total of all service classes for a\n        given direction should not exceed 256. (If it has never been set,\n        the value will be -1.)')
sfcsBwPortPoolLimitsCBRLimitRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsCBRLimitRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsCBRLimitRev.setDescription(' A ratio used in allocating the allocatable bandwidth among the \n        various Service classes. This value is the amount of the overall\n        allocatable bw that can be allocated to CBR. The values are 1-255.\n        For a more detailed description of value useage see\n        sfcsBwPortPoolLimitsBwConstant. Total of all service classes for a\n        given direction should not exceed 256. (If it has never been set,\n        the value will be -1.)')
sfcsBwPortPoolLimitsABRLimitFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsABRLimitFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsABRLimitFwd.setDescription(' A ratio used in allocating the allocatable bandwidth among the \n        various Service classes. This value is the amount of the overall\n        allocatable bw that can be allocated to ABR. The values are 1-255.\n        For a more detailed description of value useage see\n        sfcsBwPortPoolLimitsBwConstant. Total of all service classes for a\n        given direction should not exceed 256. (If it has never been set,\n        the value will be -1.)')
sfcsBwPortPoolLimitsABRLimitRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsABRLimitRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsABRLimitRev.setDescription(' A ratio used in allocating the allocatable bandwidth among the \n        various Service classes. This value is the amount of the overall\n        allocatable bw that can be allocated to ABR. The values are 1-255.\n        For a more detailed description of value useage see\n        sfcsBwPortPoolLimitsBwConstant. Total of all service classes for a\n        given direction should not exceed 256. (If it has never been set,\n        the value will be -1.)')
sfcsBwPortPoolLimitsVBRLimitFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsVBRLimitFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsVBRLimitFwd.setDescription(' A ratio used in allocating the allocatable bandwidth among the \n        various Service classes. This value is the amount of the overall\n        allocatable bw that can be allocated to VBR. The values are 1-255.\n        For a more detailed description of value useage see\n        sfcsBwPortPoolLimitsBwConstant. Total of all service classes for a\n        given direction should not exceed 256. (If it has never been set,\n        the value will be -1.)\n        WARNING - Setting this limit to an arbitrarily low value may \n        cause the switch to become inoperable as an SVC switch. PNNI\n        establishes VBR connections for switch to switch communications.\n        If an arbitrarily low limit is established, it may preclude\n        PNNI inter-switch operability.')
sfcsBwPortPoolLimitsVBRLimitRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsVBRLimitRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsVBRLimitRev.setDescription(' A ratio used in allocating the allocatable bandwidth among the \n        various Service classes. This value is the amount of the overall\n        allocatable bw that can be allocated to VBR. The values are 1-255.\n        For a more detailed description of value useage see\n        sfcsBwPortPoolLimitsBwConstant. Total of all service classes for a\n        given direction should not exceed 256. (If it has never been set,\n        the value will be -1.)\n        WARNING - Setting this limit to an arbitrarily low value may \n        cause the switch to become inoperable as an SVC switch. PNNI \n        establishes VBR connections for switch to switch communications.\n        If an arbitrarily low limit is established, it may preclude \n        PNNI inter-switch operability.')
sfcsBwPortPoolLimitsUBRLimitFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsUBRLimitFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsUBRLimitFwd.setDescription(' A ratio used in allocating the allocatable bandwidth among the \n        various Service classes. This value is the amount of the overall\n        allocatable bw that can be allocated to UBR. The values are 1-255.\n        For a more detailed description of value useage see\n        sfcsBwPortPoolLimitsBwConstant. Total of all service classes for a\n        given direction should not exceed 256. (If it has never been set,\n        the value will be -1.)\n        WARNING - Setting this limit to an arbitrarily low value may \n        cause the switch to become inoperable as an SVC switch. Many\n        internal management functions use UBR connections to establish\n        connections with neighboring switches for keep alive and \n        discovery functions.  \n        If an arbitrarily low limit is established, it may preclude \n        SVC inter-switch operability.')
sfcsBwPortPoolLimitsUBRLimitRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsUBRLimitRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsUBRLimitRev.setDescription(' A ratio used in allocating the allocatable bandwidth among the \n        various Service classes. This value is the amount of the overall\n        allocatable bw that can be allocated to UBR. The values are 1-255.\n        For a more detailed description of value useage see\n        sfcsBwPortPoolLimitsBwConstant. Total of all service classes for a\n        given direction should not exceed 256. (If it has never been set,\n        the value will be -1.)\n        WARNING - Setting this limit to an arbitrarily low value may \n        cause the switch to become inoperable as an SVC switch. Many \n        internal management functions use UBR connections to establish\n        connections with neighboring switches for keep alive and \n        discovery functions. \n        If an arbitrarily low limit is established, it may preclude \n        SVC inter-switch operability.')
sfcsBwPortPoolLimitsUBRConnLimitFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsUBRConnLimitFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsUBRConnLimitFwd.setDescription(' A Limit to the number of UBR connections which can be established\n        through this port. The limit applies to both user connections and\n        management connections. The default is no limit. (If it has never\n        been set, the value will be -1.)')
sfcsBwPortPoolLimitsUBRConnLimitRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsUBRConnLimitRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsUBRConnLimitRev.setDescription(' A Limit to the number of UBR connections which can be established\n        through this port. The limit applies to both user connections and\n        management connections. The default is no limit.  (If it has never\n        been set, the value will be -1.)')
sfcsBwPortPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2), )
if mibBuilder.loadTexts: sfcsBwPortPoolStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatTable.setDescription('This table contains ')
sfcsBwPortPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsBwPortPoolStatsIndex"), (0, "CTRON-SFCS-MIB", "sfcsBwPortPoolStatsPoolIndex"))
if mibBuilder.loadTexts: sfcsBwPortPoolStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatEntry.setDescription('Each entry contains ')
sfcsBwPortPoolStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatsIndex.setDescription("This index specifies which Port we are dealing\n       with.  This reference is in the same format as MIB II's\n       Interface index.")
sfcsBwPortPoolStatsPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatsPoolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatsPoolIndex.setDescription("This index specifies which Pool within Port we are dealing\n       with.  This reference is in the same format as MIB II's\n       Interface index.")
sfcsBwPortPoolStatConnCntFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatConnCntFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatConnCntFwd.setDescription(' The current total number of calls in the forward direction.')
sfcsBwPortPoolStatConnCntRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatConnCntRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatConnCntRev.setDescription(' The current total number of calls in the reverse direction.')
sfcsBwPortPoolStatAllocBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatAllocBwFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatAllocBwFwd.setDescription(' The current amount of allocated Bw in the forward direction.')
sfcsBwPortPoolStatAllocBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatAllocBwRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatAllocBwRev.setDescription(' The current amount of allocated Bw in the reverse direction.')
sfcsBwPortPoolStatAvailBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatAvailBwFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatAvailBwFwd.setDescription(' The current amount of available Bw in the forward direction.')
sfcsBwPortPoolStatAvailBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatAvailBwRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatAvailBwRev.setDescription(' The current amount of available Bw in the reverse direction.')
sfcsBwPortPoolStatPeakBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatPeakBwFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatPeakBwFwd.setDescription(' The peak amount of allocated Bw in the forward direction since the \n      port was initialized OR the switch was reset.')
sfcsBwPortPoolStatPeakBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatPeakBwRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatPeakBwRev.setDescription(' The peak amount of allocated Bw in the reverse direction since the \n      port was initialized OR the switch was reset.')
sfcsBwPortPoolStatRejConnFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatRejConnFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatRejConnFwd.setDescription(' The number of connections which were rejected because of \n      insufficient forward bandwidth since the port was initialized or\n      the switch was reset last.')
sfcsBwPortPoolStatRejConnRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatRejConnRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatRejConnRev.setDescription(' The number of connections which were rejected because of \n      insufficient reverse bandwidth since the port was initialized or\n      the switch was reset last.')
sfcsBwPortPoolStatPrevAdverMAXCRFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatPrevAdverMAXCRFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatPrevAdverMAXCRFwd.setDescription(' The amount of physical forward BW reported to PNNI in the latest\n      reporting period.')
sfcsBwPortPoolStatPrevAdverMAXCRRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatPrevAdverMAXCRRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatPrevAdverMAXCRRev.setDescription(' The amount of physical reverse BW reported to PNNI in the latest\n      reporting period.')
sfcsBwPortPoolStatPrevAdverAvailCRFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatPrevAdverAvailCRFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatPrevAdverAvailCRFwd.setDescription(' The amount of avail forward BW reported to PNNI in the latest\n      reporting period.')
sfcsBwPortPoolStatPrevAdverAvailCRRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatPrevAdverAvailCRRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatPrevAdverAvailCRRev.setDescription(' The amount of avail reverse BW reported to PNNI in the latest\n      reporting period.')
sfcsBwPortPoolStatCBRConnCntFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRConnCntFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRConnCntFwd.setDescription(' The number of currently established CBR connections for the forward\n      direction.')
sfcsBwPortPoolStatCBRConnCntRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRConnCntRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRConnCntRev.setDescription(' The number of currently established CBR connections for the reverse\n      direction.')
sfcsBwPortPoolStatCBRConnRejFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRConnRejFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRConnRejFwd.setDescription(' The number of CBR forward connections rejected since the port was \n      initialized or the switch was reset last.')
sfcsBwPortPoolStatCBRConnRejRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRConnRejRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRConnRejRev.setDescription(' The number of CBR reverse connections rejected since the port was\n      initialized or the switch was reset last.')
sfcsBwPortPoolStatCBRAllocBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRAllocBwFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRAllocBwFwd.setDescription(' The amount of forward allocated Bw that is CBR service class.')
sfcsBwPortPoolStatCBRAllocBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRAllocBwRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRAllocBwRev.setDescription(' The amount of reverse allocated Bw that is CBR service class.')
sfcsBwPortPoolStatCBRAggPCRFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRAggPCRFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRAggPCRFwd.setDescription(' The aggregated forward PCR for all established CBR connections.')
sfcsBwPortPoolStatCBRAggPCRRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRAggPCRRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRAggPCRRev.setDescription(' The aggregated reverse PCR for all established CBR connections.')
sfcsBwPortPoolStatCBRPrevAdverMAXCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRPrevAdverMAXCTD.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRPrevAdverMAXCTD.setDescription(' The maxCTD for the forward direction reported to PNNI for the last\n      update period for CBR service class.')
sfcsBwPortPoolStatCBRPrevAdverCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRPrevAdverCDV.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRPrevAdverCDV.setDescription(' The CDV for the forward direction reported to PNNI for the last\n      update period for CBR service class.')
sfcsBwPortPoolStatABRConnCntFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRConnCntFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRConnCntFwd.setDescription(' The number of currently established ABR connections for the forward\n      direction.')
sfcsBwPortPoolStatABRConnCntRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRConnCntRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRConnCntRev.setDescription(' The number of currently established ABR connections for the reverse\n      direction.')
sfcsBwPortPoolStatABRConnRejFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRConnRejFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRConnRejFwd.setDescription(' The number of ABR forward connections rejected since the port was\n      initialized or the switch was reset last.')
sfcsBwPortPoolStatABRConnRejRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRConnRejRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRConnRejRev.setDescription(' The number of ABR reverse connections rejected since the port was\n      initialized or the switch was reset last.')
sfcsBwPortPoolStatABRAllocBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRAllocBwFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRAllocBwFwd.setDescription(' The amount of forward allocated Bw that is ABR service class.')
sfcsBwPortPoolStatABRAllocBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRAllocBwRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRAllocBwRev.setDescription(' The amount of reverse allocated Bw that is ABR service class.')
sfcsBwPortPoolStatABRAggPCRFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRAggPCRFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRAggPCRFwd.setDescription(' The aggregated forward PCR for all established ABR connections.')
sfcsBwPortPoolStatABRAggPCRRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRAggPCRRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRAggPCRRev.setDescription(' The aggregated reverse PCR for all established ABR connections.')
sfcsBwPortPoolStatABRPrevAdverMAXCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRPrevAdverMAXCTD.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRPrevAdverMAXCTD.setDescription(' The maxCTD for the forward direction reported to PNNI for the last\n      update period for ABR service class.')
sfcsBwPortPoolStatABRPrevAdverCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRPrevAdverCDV.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRPrevAdverCDV.setDescription(' The CDV for the forward direction reported to PNNI for the last\n      update period for ABR service class.')
sfcsBwPortPoolStatVBRConnCntFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRConnCntFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRConnCntFwd.setDescription(' The number of currently established VBR connections for the forward\n      direction.')
sfcsBwPortPoolStatVBRConnCntRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRConnCntRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRConnCntRev.setDescription(' The number of currently established VBR connections for the reverse\n      direction.')
sfcsBwPortPoolStatVBRConnRejFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRConnRejFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRConnRejFwd.setDescription(' The number of VBR forward connections rejected since the port was\n      initialized or the switch was reset last.')
sfcsBwPortPoolStatVBRConnRejRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRConnRejRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRConnRejRev.setDescription(' The number of VBR reverse connections rejected since the port was\n      initialized or the switch was reset last.')
sfcsBwPortPoolStatVBRAllocBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRAllocBwFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRAllocBwFwd.setDescription(' The amount of forward allocated Bw that is VBR service class.')
sfcsBwPortPoolStatVBRAllocBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRAllocBwRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRAllocBwRev.setDescription(' The amount of reverse allocated Bw that is VBR service class.')
sfcsBwPortPoolStatVBRAggPCRFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRAggPCRFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRAggPCRFwd.setDescription(' The aggregated forward PCR for all established VBR connections.')
sfcsBwPortPoolStatVBRAggPCRRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRAggPCRRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRAggPCRRev.setDescription(' The aggregated reverse PCR for all established VBR connections.')
sfcsBwPortPoolStatVBRPrevAdverMAXCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRPrevAdverMAXCTD.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRPrevAdverMAXCTD.setDescription(' The maxCTD for the forward direction reported to PNNI for the last\n      update period for VBR service class.')
sfcsBwPortPoolStatVBRPrevAdverCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRPrevAdverCDV.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRPrevAdverCDV.setDescription(' The CDV for the forward direction reported to PNNI for the last\n      update period for VBR service class.')
sfcsBwPortPoolStatUBRConnCntFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRConnCntFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRConnCntFwd.setDescription(' The number of currently established UBR connections for the forward\n      direction.')
sfcsBwPortPoolStatUBRConnCntRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRConnCntRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRConnCntRev.setDescription(' The number of currently established UBR connections for the reverse\n      direction.')
sfcsBwPortPoolStatUBRConnRejFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRConnRejFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRConnRejFwd.setDescription(' The number of UBR forward connections rejected since the port was\n      initialized or the switch was reset last.')
sfcsBwPortPoolStatUBRConnRejRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRConnRejRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRConnRejRev.setDescription(' The number of UBR reverse connections rejected since the port was\n      initialized or the switch was reset last.')
sfcsBwPortPoolStatUBRAllocBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRAllocBwFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRAllocBwFwd.setDescription(' The amount of forward allocated Bw that is UBR service class.')
sfcsBwPortPoolStatUBRAllocBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRAllocBwRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRAllocBwRev.setDescription(' The amount of reverse allocated Bw that is UBR service class.')
sfcsBwPortPoolStatUBRAggPCRFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRAggPCRFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRAggPCRFwd.setDescription(' The aggregated forward PCR for all established UBR connections.')
sfcsBwPortPoolStatUBRAggPCRRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRAggPCRRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRAggPCRRev.setDescription(' The aggregated reverse PCR for all established UBR connections.')
sfcsBwPortPoolStatUBRPrevAdverMAXCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRPrevAdverMAXCTD.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRPrevAdverMAXCTD.setDescription(' The maxCTD for the forward direction reported to PNNI for the last\n      update period for UBR service class.')
sfcsBwPortPoolStatUBRPrevAdverCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRPrevAdverCDV.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRPrevAdverCDV.setDescription(' The CDV for the forward direction reported to PNNI for the last\n      update period for UBR service class.')
sfcsBwPortPoolTrapMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3), )
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtTable.setDescription('This table contains ')
sfcsBwPortPoolTrapMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsBwPortPoolTrapMgmtIndex"), (0, "CTRON-SFCS-MIB", "sfcsBwPortPoolTrapMgmtPoolIndex"))
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtEntry.setDescription('Each entry contains ')
sfcsBwPortPoolTrapMgmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtIndex.setDescription("This index specifies which Port we are dealing\n       with.  This reference is in the same format as MIB II's\n       Interface index.")
sfcsBwPortPoolTrapMgmtPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtPoolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtPoolIndex.setDescription("This index specifies which Pool within Port we are dealing\n       with.  This reference is in the same format as MIB II's\n       Interface index. (If it has never been set, the value will \n       be -1.)")
sfcsBwPortPoolTrapMgmtAllocBwTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtAllocBwTholdHiFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtAllocBwTholdHiFwd.setDescription('The upper threshold for the Alloc BW fwd trap. When an allocation\n       causes the currently allocated bw to exceed this value the trap \n       is generated. (If it has never been set, the value will \n       be -1.)')
sfcsBwPortPoolTrapMgmtAllocBwTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtAllocBwTholdHiRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtAllocBwTholdHiRev.setDescription(' The upper threshold for the Alloc BW rev trap. When an allocation\n      causes the currently allocated bw to exceed this value the trap \n      is generated. (If it has never been set, the value will\n      be -1.)')
sfcsBwPortPoolTrapMgmtAllocBwTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtAllocBwTholdLoFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtAllocBwTholdLoFwd.setDescription(' The lower threshold for the Alloc BW fwd trap. When an allocation\n      causes the currently allocated bw be below this value the trap \n      is generated. (If it has never been set, the value will\n      be -1.)')
sfcsBwPortPoolTrapMgmtAllocBwTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtAllocBwTholdLoRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtAllocBwTholdLoRev.setDescription(' The lower threshold for the Alloc BW rev trap. When an allocation\n      causes the currently allocated bw be below this value the trap \n      is generated. (If it has never been set, the value will\n      be -1.)')
sfcsBwPortPoolTrapMgmtPeakBwTholdFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtPeakBwTholdFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtPeakBwTholdFwd.setDescription('The upper threshold for the Peak BW fwd trap. When an allocation\n      causes the allocated BW to exceed this value the trap is generated.\n      (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtPeakBwTholdRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtPeakBwTholdRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtPeakBwTholdRev.setDescription('The upper threshold for the Peak BW rev trap. When an allocation\n      causes the allocated BW to exceed this value the trap is generated.\n      (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtHoldDownTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtHoldDownTime.setDescription(' The time between traps of the same type. If a trap of a particular\n      type is generated for a particular port, another of that type for that\n      port will not be generated until the hold down time has expired.\n      (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiFwd.setDescription(' The upper threshold for the CBR connection count Fwd trap. When an\n      allocation causes the CBR connection count to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiRev.setDescription(' The upper threshold for the CBR connection count Rev trap. When an\n      allocation causes the CBR connection count to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoFwd.setDescription(' The lower threshold for the CBR connection count Fwd trap. When an\n      allocation causes the CBR connection count to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoRev.setDescription(' The lower threshold for the CBR connection count Rev trap. When an\n      allocation causes the CBR connection count to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiFwd.setDescription(' The upper threshold for the CBR Allocated Bw Fwd trap. When an\n      allocation causes the CBR Allocated Bw to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiRev.setDescription(' The upper threshold for the CBR connection count Rev trap. When an\n      allocation causes the CBR connection count to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoFwd.setDescription(' The lower threshold for the CBR Allocated Bw Fwd trap. When an\n      allocation causes the CBR Allocated Bw to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoRev.setDescription(' The lower threshold for the CBR Allocated Bw Rev trap. When an\n      allocation causes the CBR Allocated Bw to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtABRConnCntTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRConnCntTholdHiFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRConnCntTholdHiFwd.setDescription(' The upper threshold for the ABR connection count Fwd trap. When an\n      allocation causes the ABR connection count to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtABRConnCntTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRConnCntTholdHiRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRConnCntTholdHiRev.setDescription(' The upper threshold for the ABR connection count Rev trap. When an\n      allocation causes the ABR connection count to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtABRConnCntTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRConnCntTholdLoFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRConnCntTholdLoFwd.setDescription(' The lower threshold for the ABR connection count Fwd trap. When an\n      allocation causes the ABR connection count to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtABRConnCntTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRConnCntTholdLoRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRConnCntTholdLoRev.setDescription(' The lower threshold for the ABR connection count Rev trap. When an\n      allocation causes the ABR connection count to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiFwd.setDescription(' The upper threshold for the ABR Allocated Bw Fwd trap. When an\n      allocation causes the ABR Allocated Bw to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiRev.setDescription(' The upper threshold for the ABR Allocated Bw Rev trap. When an\n      allocation causes the ABR Allocated Bw to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoFwd.setDescription(' The lower threshold for the ABR Allocated Bw Fwd trap. When an\n      allocation causes the ABR Allocated Bw to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoRev.setDescription(' The lower threshold for the ABR Allocated Bw Rev trap. When an\n      allocation causes the ABR Allocated Bw to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiFwd.setDescription(' The upper threshold for the VBR connection count Fwd trap. When an\n      allocation causes the VBR connection count to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiRev.setDescription(' The upper threshold for the VBR connection count Rev trap. When an\n      allocation causes the VBR connection count to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoFwd.setDescription(' The lower threshold for the VBR connection count Fwd trap. When an\n      allocation causes the VBR connection count to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoRev.setDescription(' The lower threshold for the VBR connection count Rev trap. When an\n      allocation causes the VBR connection count to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiFwd.setDescription(' The upper threshold for the VBR Allocated Bw Fwd trap. When an\n      allocation causes the VBR Allocated Bw to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiRev.setDescription(' The upper threshold for the VBR Allocated Bw Rev trap. When an\n      allocation causes the VBR Allocated Bw to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoFwd.setDescription(' The lower threshold for the VBR Allocated Bw Fwd trap. When an\n      allocation causes the VBR Allocated Bw to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoRev.setDescription(' The lower threshold for the VBR Allocated Bw Rev trap. When an\n      allocation causes the VBR Allocated Bw to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiFwd.setDescription(' The upper threshold for the UBR connection count Fwd trap. When an\n      allocation causes the UBR connection count to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiRev.setDescription(' The upper threshold for the UBR connection count Rev trap. When an\n      allocation causes the UBR connection count to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoFwd.setDescription(' The lower threshold for the UBR connection count Fwd trap. When an\n      allocation causes the UBR connection count to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoRev.setDescription(' The lower threshold for the UBR connection count Rev trap. When an\n      allocation causes the UBR connection count to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiFwd.setDescription(' The upper threshold for the UBR Allocated Bw Fwd trap. When an\n      allocation causes the UBR Allocated Bw to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiRev.setDescription(' The upper threshold for the UBR Allocated Bw Rev trap. When an\n      allocation causes the UBR Allocated Bw to exceed this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoFwd.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoFwd.setDescription(' The lower threshold for the UBR Allocated Bw Fwd trap. When an\n      allocation causes the UBR Allocated Bw to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoRev.setDescription(' The lower threshold for the UBR Allocated Bw Rev trap. When an\n      allocation causes the UBR Allocated Bw to fall below this value,\n      the trap is generated. (If it has never been set, the value will be -1.)')
sfcsBWPortPoolTrapMgmtBuffUpThold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBWPortPoolTrapMgmtBuffUpThold.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBWPortPoolTrapMgmtBuffUpThold.setDescription(' The upper threshold for buffer allocation trap .')
sfcsBWPortPoolTrapMgmtBuffLoThold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBWPortPoolTrapMgmtBuffLoThold.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBWPortPoolTrapMgmtBuffLoThold.setDescription(' The lower threshold for buffer allocation trap .')
sfcsBWPortPoolTrapMgmtConnRejThold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBWPortPoolTrapMgmtConnRejThold.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBWPortPoolTrapMgmtConnRejThold.setDescription(' The lower threshold for conn rejects trap .')
sfcsBuffPrioTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1), )
if mibBuilder.loadTexts: sfcsBuffPrioTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBuffPrioTable.setDescription('This table contains the rows of all the buffer pools.')
sfcsBuffPrioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsBuffPrioPortIndex"), (0, "CTRON-SFCS-MIB", "sfcsBuffPrioPriority"))
if mibBuilder.loadTexts: sfcsBuffPrioEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBuffPrioEntry.setDescription('Each entry contains the rows of all the buffer pools.')
sfcsBuffPrioPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBuffPrioPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBuffPrioPortIndex.setDescription("This index specifies which port we are dealing\n       with.  This reference is in the same format as MIB II's\n       Interface index.")
sfcsBuffPrioPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBuffPrioPriority.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBuffPrioPriority.setDescription('This index specifies which priority we are dealing\n       with.')
sfcsBuffPrioAssignCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBuffPrioAssignCtl.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBuffPrioAssignCtl.setDescription(' The status of how assignment is controlled. Static,Manual,Adaptive.  ')
sfcsBuffPrioMinCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBuffPrioMinCtl.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBuffPrioMinCtl.setDescription(' The minimum number of cells which can be assigned to this\n      port/prioity.')
sfcsBuffPrioAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBuffPrioAssigned.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBuffPrioAssigned.setDescription(' The number of cells which are currently assigned to this\n      port/priority.')
sfcsBuffPrioAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBuffPrioAllocated.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBuffPrioAllocated.setDescription(' The number of assigned cells which are currently allocated to\n      VCs for this port/priority.')
sfcsBuffPrioAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBuffPrioAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBuffPrioAvailable.setDescription(' The number of assigned cells which are free to be allocated.')
sfcsBuffPrioPeakAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBuffPrioPeakAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBuffPrioPeakAlloc.setDescription(' The peak number of cells which have been allocated to this\n      port/priority.')
sfcsBuffPrioConnRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBuffPrioConnRejs.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBuffPrioConnRejs.setDescription(' The number of connections rejected because of a lack of buffers.')
sfcsBuffPrioUpTholdTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBuffPrioUpTholdTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBuffPrioUpTholdTrap.setDescription(' The upper threshold of allocations to trigger an upper thold trap.')
sfcsBuffPrioLoTholdTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBuffPrioLoTholdTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBuffPrioLoTholdTrap.setDescription(' The lower threshold of allocations to trigger a lower thold trap.')
sfcsBuffPrioConnRejThold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBuffPrioConnRejThold.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsBuffPrioConnRejThold.setDescription(' The lower threshold of conn rejects trap  because of inadequate buffers.')
sfcsProxyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1), )
if mibBuilder.loadTexts: sfcsProxyConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigTable.setDescription('This table contains the config info and a port\n      reading function.')
sfcsProxyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsProxyConfigANIMIndex"))
if mibBuilder.loadTexts: sfcsProxyConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigEntry.setDescription('Each entry contains ANIM Proxy config info or a function.')
sfcsProxyConfigANIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigANIMIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigANIMIndex.setDescription("This index specifies which ANIM Proxy we are dealing\n      with.  This reference is in the same format as MIB II's\n      Interface index.")
sfcsProxyConfigNUMPORTS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigNUMPORTS.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigNUMPORTS.setDescription('Indicates the number of ports per Proxy which is always 4.')
sfcsProxyConfigTxMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigTxMemSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigTxMemSize.setDescription("Indicates the size of the port's Transmission memory in K.\n      The memory size is always 1K.")
sfcsProxyConfigRxMaxPduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigRxMaxPduSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigRxMaxPduSize.setDescription("Indicates the size of the port's Transmission memory in K.\n      The memory size is always 1K.")
sfcsProxyConfigBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigBandWidth.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigBandWidth.setDescription('Indicates the bandwidth for the port, which is ?????')
sfcsProxyConfigTransmitDone = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigTransmitDone.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigTransmitDone.setDescription('Checks if the Transmission has finished.')
sfcsProxyConfigReceiveFifoState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("not-full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigReceiveFifoState.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigReceiveFifoState.setDescription("Checks if the port's receive Fifo is full or not.")
sfcsProxyConfigPortTransmitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stop", 1), ("start-stay", 2), ("reread", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyConfigPortTransmitMode.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigPortTransmitMode.setDescription('Controls Transmission of cells in port Transmit memory.')
sfcsProxyConfigReceiveFifoReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfcsProxyConfigReceiveFifoReset.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigReceiveFifoReset.setDescription("Controls the receive buffer's memory. Reset clears memory.")
sfcsProxyConfigTxFifoReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 10), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfcsProxyConfigTxFifoReset.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigTxFifoReset.setDescription("Controls the port's transmit memory. Reset clears memory.")
sfcsProxyConfigReceiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("receiving", 1), ("not-receiving", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyConfigReceiveMode.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigReceiveMode.setDescription('Controls whether or not the port receives cells.')
sfcsProxyConfigCaptureMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("header", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyConfigCaptureMode.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigCaptureMode.setDescription('Controls how much of the cell is received.')
sfcsProxyConfigInitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfcsProxyConfigInitPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigInitPort.setDescription('Setting this returns the port to the initial setup.')
sfcsProxyConfigLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyConfigLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigLoad.setDescription('Transmit load for port.')
sfcsProxyConfigGumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigGumbo.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyConfigGumbo.setDescription('Unreadable octet string used for control information.')
sfcsProxyTransTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1), )
if mibBuilder.loadTexts: sfcsProxyTransTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransTable.setDescription('This table contains the arguments and the function for the\n      Transmit function.')
sfcsProxyTransEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsProxyTransANIMIndex"))
if mibBuilder.loadTexts: sfcsProxyTransEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransEntry.setDescription('The entries are the arguments for the Transmit function.')
sfcsProxyTransANIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyTransANIMIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransANIMIndex.setDescription("This index specifies which ANIM Port we are dealing\n      with.  This reference is in the same format as MIB II's\n      Interface Index.")
sfcsProxyTransEncodeNewPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfcsProxyTransEncodeNewPdu.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransEncodeNewPdu.setDescription("Setting this encodes a new PDU based on the current PDU parameters\n      into the port's transmit memory.")
sfcsProxyTransVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransVPI.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransVPI.setDescription('This is the VPI for the PDU.')
sfcsProxyTransVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransVCI.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransVCI.setDescription('This is the VCI for the PDU.')
sfcsProxyTransPTI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransPTI.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransPTI.setDescription('Payload Type Indicator: the value of the 3 bit Payload Type\n      field in the header.  The most signifigant bit indicates user or \n      control data, the next bit indicates congestion, and the\n      last bit indicates AAL encoding.')
sfcsProxyTransCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransCLP.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransCLP.setDescription('The cell loss priority: 1 or 0.')
sfcsProxyTransPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user-input", 1), ("sequential", 2), ("uniform", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransPayloadType.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransPayloadType.setDescription('The payload type for the cell.')
sfcsProxyTransPayloadLength = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransPayloadLength.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransPayloadLength.setDescription('The length of the payload in bytes.')
sfcsProxyTransPayloadData = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransPayloadData.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransPayloadData.setDescription('If the payload type is user input, this is the payload itself.')
sfcsProxyTransCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransCount.setDescription('Number of copies of the pdu to encode in port transmit memory.')
sfcsProxyTransPayloadAdaptionLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raw", 1), ("aal5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransPayloadAdaptionLayer.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransPayloadAdaptionLayer.setDescription('The format of the payload: either raw cells or AAL5.')
sfcsProxyTransMpxMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransMpxMethod.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransMpxMethod.setDescription('The format of the payload: either raw cells or AAL5.')
sfcsProxyTransControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("send-once", 1), ("repeat", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransControl.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransControl.setDescription("Controls how many times to send what's in the port's\n      transmit memory.")
sfcsProxyTransGumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyTransGumbo.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyTransGumbo.setDescription('Returns the vpi, vci, pti, clp, payload_type, payload_length, count,\n      PAL, mpx method, and control entires for this table in a string where\n      the entries are separated by semicolons.')
sfcsProxyReadTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1), )
if mibBuilder.loadTexts: sfcsProxyReadTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadTable.setDescription('This table contains information read from the cells in the receive fifo.')
sfcsProxyReadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsProxyReadANIMIndex"))
if mibBuilder.loadTexts: sfcsProxyReadEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadEntry.setDescription('The entries are the information about the cells or the PDU.')
sfcsProxyReadANIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadANIMIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadANIMIndex.setDescription('This index specifies which ANIM Port we are dealing\n      with.  This reference is in the same format as the MIB II\n      Interface Index.')
sfcsProxyReadMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reassemble-PDU", 1), ("cell-by-cell", 2), ("all-data", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyReadMode.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadMode.setDescription('How the receive fifo is read.')
sfcsProxyReadNewPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("get-next-pdu", 1), ("reread-from-beginning", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfcsProxyReadNewPdu.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadNewPdu.setDescription('Pops a new Pdu from the receive fifo to be examined and read.')
sfcsProxyReadGumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 4), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfcsProxyReadGumbo.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadGumbo.setDescription('Unreadable control information.')
sfcsProxyReadVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadVPI.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadVPI.setDescription('This is the VPI for the PDU.')
sfcsProxyReadVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadVCI.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadVCI.setDescription('This is the VCI for the PDU.')
sfcsProxyReadPTI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadPTI.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadPTI.setDescription('Payload Type Indicator: the value of the 3 bit Payload Type\n      field in the header.  The most signifigant bit indicates user or \n      control data, the next bit indicates congestion, and the\n      last bit indicates AAL encoding.')
sfcsProxyReadCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadCLP.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadCLP.setDescription('The cell loss priority: 1 or 0.')
sfcsProxyReadDataLength = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadDataLength.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadDataLength.setDescription('The length of the PDU in bytes.')
sfcsProxyReadData = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadData.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadData.setDescription('The actual data of the PDU.')
sfcsProxyReadPal = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raw", 1), ("aal5", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadPal.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadPal.setDescription('The format of the payload: either raw cells or AAL5.')
sfcsProxyReadInbyteslosts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInbyteslosts.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadInbyteslosts.setDescription('The number of bytes that were dropped while reading. Usually because\n   they occurred before the Start of Cell was discovered.')
sfcsProxyReadInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInCells.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadInCells.setDescription('The number of cells read since this port was last reset.')
sfcsProxyReadInError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInError.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadInError.setDescription("The number of pdu's that had to be dropped due to errors.")
sfcsProxyReadInCellReadError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInCellReadError.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadInCellReadError.setDescription('The number of cells that had to be dropped due to errors.')
sfcsProxyReadInHecError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInHecError.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadInHecError.setDescription('The number of cell headers that contained errors.')
sfcsProxyReadInTooBigError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInTooBigError.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadInTooBigError.setDescription("The number of pdu's that were too large to be received.")
sfcsProxyReadInCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInCRCError.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadInCRCError.setDescription("The number of pdu's that failed the CRC check.")
sfcsProxyReadInLengthMismatchError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInLengthMismatchError.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadInLengthMismatchError.setDescription('The length stored in the pdu did not match the actual\n   length of the pdu read in.')
sfcsProxyReadInTotalCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInTotalCells.setStatus('mandatory')
if mibBuilder.loadTexts: sfcsProxyReadInTotalCells.setDescription('Total number of cells read in by the snapshot.')
mibBuilder.exportSymbols("CTRON-SFCS-MIB", sfcsBwPortPoolStatCBRConnCntRev=sfcsBwPortPoolStatCBRConnCntRev, sfcsProxyConfigEntry=sfcsProxyConfigEntry, sfcsProxyTransPayloadType=sfcsProxyTransPayloadType, sfcsSysConfigAdminStatus=sfcsSysConfigAdminStatus, sfcsConnectionAPI=sfcsConnectionAPI, sfcsProxyReadInCRCError=sfcsProxyReadInCRCError, sfcsCnxCfgEntry=sfcsCnxCfgEntry, sfcsPacketDiscardEngineAdminStatus=sfcsPacketDiscardEngineAdminStatus, sfcsInterfaceStatsRxCnxLookupInvalidErrors=sfcsInterfaceStatsRxCnxLookupInvalidErrors, sfcsQueueStatsTxCellCnt=sfcsQueueStatsTxCellCnt, sfcsSysStatusTdmUtilization=sfcsSysStatusTdmUtilization, ctSFCS=ctSFCS, sfcsProxyTransCount=sfcsProxyTransCount, sfcsSysSystemCfg=sfcsSysSystemCfg, sfcsCTMInterfaceConfigTable=sfcsCTMInterfaceConfigTable, sfcsProxyReadPal=sfcsProxyReadPal, sfcsBwPortPoolLimitsTable=sfcsBwPortPoolLimitsTable, sfcsStatus=sfcsStatus, sfcsProxy=sfcsProxy, sfcsProxyConfigCaptureMode=sfcsProxyConfigCaptureMode, sfcsSysConfigPnniAddessingMode=sfcsSysConfigPnniAddessingMode, sfcsANIMPicTLPcbRevision=sfcsANIMPicTLPcbRevision, ctsfSwitch=ctsfSwitch, sfcsBwPortPoolStatsIndex=sfcsBwPortPoolStatsIndex, sfcsCTMQueueStatsQueuePeakLevel=sfcsCTMQueueStatsQueuePeakLevel, sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoRev=sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoRev, sfcsStatusCurrCnxEntries=sfcsStatusCurrCnxEntries, sfcsBuffPrioConnRejs=sfcsBuffPrioConnRejs, sfcsSysStatusAllocatedBw=sfcsSysStatusAllocatedBw, sfcsCnxErrorEntry=sfcsCnxErrorEntry, sfcsStatisticsEngine=sfcsStatisticsEngine, sfcsBwPortPoolStatABRConnCntRev=sfcsBwPortPoolStatABRConnCntRev, sfcsProxyReadEntry=sfcsProxyReadEntry, sfcsCnxCfgCrossConnectIndex=sfcsCnxCfgCrossConnectIndex, sfcsCTMInterfaceStatsTxCellCnt=sfcsCTMInterfaceStatsTxCellCnt, sfcsBwPortPoolStatABRConnCntFwd=sfcsBwPortPoolStatABRConnCntFwd, sfcsANIMConfigTable=sfcsANIMConfigTable, sfcsCnxCfgOwner=sfcsCnxCfgOwner, sfcsProxyConfigRxMaxPduSize=sfcsProxyConfigRxMaxPduSize, sfcsStatsEngineOperStatus=sfcsStatsEngineOperStatus, sfcsCnxStatsHiToLoTaggedCells=sfcsCnxStatsHiToLoTaggedCells, sfcsBwPortPoolStatTable=sfcsBwPortPoolStatTable, sfcsBwPortPoolStatABRAllocBwFwd=sfcsBwPortPoolStatABRAllocBwFwd, sfcsANIMPicMfgSerialNumb=sfcsANIMPicMfgSerialNumb, sfcsCTMInterfaceConfigInterfaceIndex=sfcsCTMInterfaceConfigInterfaceIndex, sfcsBwPortPoolStatPrevAdverMAXCRRev=sfcsBwPortPoolStatPrevAdverMAXCRRev, sfcsANIMPicTLDateCode=sfcsANIMPicTLDateCode, sfcsBwPortPoolTrapMgmtABRConnCntTholdLoRev=sfcsBwPortPoolTrapMgmtABRConnCntTholdLoRev, sfcsANIMPicSlot=sfcsANIMPicSlot, sfcsQueueConfig=sfcsQueueConfig, sfcsSysConfigFMVer=sfcsSysConfigFMVer, sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiRev=sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiRev, sfcsANIMPicMfgDateCode=sfcsANIMPicMfgDateCode, sfcsCTMQueueConfigEFCILowThreshold=sfcsCTMQueueConfigEFCILowThreshold, sfcsBwPortPoolLimitsUBRLimitRev=sfcsBwPortPoolLimitsUBRLimitRev, sfcsBWPortPoolTrapMgmtBuffUpThold=sfcsBWPortPoolTrapMgmtBuffUpThold, sfcsCnxStatsLoToHiDroppedCells=sfcsCnxStatsLoToHiDroppedCells, sfcsANIMStatsANIMIndex=sfcsANIMStatsANIMIndex, sfcsCTMInterfaceConfigType=sfcsCTMInterfaceConfigType, sfcsBwPortPoolStatCBRConnRejFwd=sfcsBwPortPoolStatCBRConnRejFwd, sfcsBwNimsTable=sfcsBwNimsTable, sfcsBwPortPoolLimitsPoolIndex=sfcsBwPortPoolLimitsPoolIndex, sfcsPacketDiscardEngineReset=sfcsPacketDiscardEngineReset, sfcsConfigSlotIndex=sfcsConfigSlotIndex, sfcsBwPortPoolTrapMgmtABRConnCntTholdHiFwd=sfcsBwPortPoolTrapMgmtABRConnCntTholdHiFwd, sfcsANIMPicTLMfgLocation=sfcsANIMPicTLMfgLocation, sfcsBwPortPoolTrapMgmtABRConnCntTholdHiRev=sfcsBwPortPoolTrapMgmtABRConnCntTholdHiRev, sfcsBwPortPoolStatRejConnRev=sfcsBwPortPoolStatRejConnRev, sfcsConfigNumberANIMS=sfcsConfigNumberANIMS, sfcsSysBPCfg=sfcsSysBPCfg, sfcsANIMPicLocation=sfcsANIMPicLocation, sfcsANIMConfig=sfcsANIMConfig, sfcsSysBPClkSelect=sfcsSysBPClkSelect, sfcsBwPortPoolTrapMgmtEntry=sfcsBwPortPoolTrapMgmtEntry, sfcsCnxStatsCrossConnectHighIfIndex=sfcsCnxStatsCrossConnectHighIfIndex, sfcsInterfaceConfigType=sfcsInterfaceConfigType, sfcsBwPortPoolTrapMgmtHoldDownTime=sfcsBwPortPoolTrapMgmtHoldDownTime, sfcsANIMPicStatus=sfcsANIMPicStatus, sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoFwd=sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoFwd, sfcsProxyTransVCI=sfcsProxyTransVCI, sfcsBwPortPoolStatVBRPrevAdverCDV=sfcsBwPortPoolStatVBRPrevAdverCDV, sfcsBWMgr=sfcsBWMgr, sfcsProxyReadGumbo=sfcsProxyReadGumbo, sfcsProxyReadCLP=sfcsProxyReadCLP, sfcsCnxStatsCrossConnectIndex=sfcsCnxStatsCrossConnectIndex, sfcsBwPortPoolStatPeakBwFwd=sfcsBwPortPoolStatPeakBwFwd, sfcsANIMPicTLSerialNumb=sfcsANIMPicTLSerialNumb, sfcsBwPortsAdminStatus=sfcsBwPortsAdminStatus, sfcsBwPortPoolStatUBRConnRejRev=sfcsBwPortPoolStatUBRConnRejRev, sfcsBwPortPoolLimitsUBRConnLimitRev=sfcsBwPortPoolLimitsUBRConnLimitRev, sfcsBwPortPoolStatCBRAllocBwFwd=sfcsBwPortPoolStatCBRAllocBwFwd, sfcsConfigOperStatus=sfcsConfigOperStatus, sfcsInterfaceConfigNumberOfQueues=sfcsInterfaceConfigNumberOfQueues, sfcsSysConfigInterfaceCapability=sfcsSysConfigInterfaceCapability, sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoRev=sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoRev, sfcsProxyTransPayloadData=sfcsProxyTransPayloadData, sfcsConfigAdminReset=sfcsConfigAdminReset, sfcsInterfaceConfigInterfaceIndex=sfcsInterfaceConfigInterfaceIndex, sfcsSysStatusCurrStatsEntries=sfcsSysStatusCurrStatsEntries, ctron=ctron, sfcsStatusCurrStatsEntries=sfcsStatusCurrStatsEntries, sfcsCnxCfgCrossConnectHighIfIndex=sfcsCnxCfgCrossConnectHighIfIndex, sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiRev=sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiRev, sfcsUPCSlotIndex=sfcsUPCSlotIndex, sfcsANIMConfigANIMIndex=sfcsANIMConfigANIMIndex, sfcsBwPortPoolStatABRConnRejFwd=sfcsBwPortPoolStatABRConnRejFwd, sfcsSysBPEnt=sfcsSysBPEnt, sfcsANIMStatsTxCells=sfcsANIMStatsTxCells, sfcsProxyConfigPortTransmitMode=sfcsProxyConfigPortTransmitMode, sfcsSysStatusCurrUPCEntries=sfcsSysStatusCurrUPCEntries, sfcsUPCOperStatus=sfcsUPCOperStatus, sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiFwd=sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiFwd, sfcsCTMQueueStatsEntry=sfcsCTMQueueStatsEntry, sfcsBwPortPoolStatVBRConnRejRev=sfcsBwPortPoolStatVBRConnRejRev, sfcsProxyTransANIMIndex=sfcsProxyTransANIMIndex, sfcsCnxCfgUPCEnable=sfcsCnxCfgUPCEnable, sfcsCnxStatsTable=sfcsCnxStatsTable, sfcsCTMInterfaceConfigNextVPI=sfcsCTMInterfaceConfigNextVPI, sfcsSysBPTable=sfcsSysBPTable, sfcsQueueConfigEntry=sfcsQueueConfigEntry, sfcsCTMQueueStatistics=sfcsCTMQueueStatistics, sfcsSysConfigMaxUpcEntries=sfcsSysConfigMaxUpcEntries, sfcsANIMPicTLReworkLocation=sfcsANIMPicTLReworkLocation, sfcsQueueConfigRMThreshold=sfcsQueueConfigRMThreshold, sfcsConfigMibRev=sfcsConfigMibRev, sfcsSysSystemCfgTable=sfcsSysSystemCfgTable, sfcsProxyReadANIMIndex=sfcsProxyReadANIMIndex, sfcsProxyReadTable=sfcsProxyReadTable, ctDataLink=ctDataLink, sfcsANIMPic=sfcsANIMPic, sfcsPacketDiscardEngineOperTime=sfcsPacketDiscardEngineOperTime, sfcsInterfacePeakBufferUseage=sfcsInterfacePeakBufferUseage, sfcsSysConfigAdminReset=sfcsSysConfigAdminReset, sfcsBuffPrioLoTholdTrap=sfcsBuffPrioLoTholdTrap, sfcsSysConfigMaxStatEntries=sfcsSysConfigMaxStatEntries, sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoRev=sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoRev, sfcsCnxCfgCrossConnectLowVci=sfcsCnxCfgCrossConnectLowVci, sfcsProxyTransPTI=sfcsProxyTransPTI, sfcsCTMQueueConfigInterfaceIndex=sfcsCTMQueueConfigInterfaceIndex, sfcsCTMQueueStatsQueue=sfcsCTMQueueStatsQueue, sfcsProxyTransEncodeNewPdu=sfcsProxyTransEncodeNewPdu, sfcsConfigBwCapability=sfcsConfigBwCapability, sfcsQueueStatistics=sfcsQueueStatistics, sfcsBwPortPoolStatAllocBwRev=sfcsBwPortPoolStatAllocBwRev, sfcsBwPortPoolTrapMgmtIndex=sfcsBwPortPoolTrapMgmtIndex, sfcsANIMPicSmb1PromVersion=sfcsANIMPicSmb1PromVersion, sfcsCnxStatsCrossConnectHighVci=sfcsCnxStatsCrossConnectHighVci, sfcsSysConfigEnt=sfcsSysConfigEnt, sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoFwd=sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoFwd, sfcsBuffPools=sfcsBuffPools, sfcsBwPortPoolStatsPoolIndex=sfcsBwPortPoolStatsPoolIndex, sfcsBwPortPoolLimitsMaxAllocBwRev=sfcsBwPortPoolLimitsMaxAllocBwRev, sfcsStatusTdmCellCount=sfcsStatusTdmCellCount, sfcsBwPortPoolStatAvailBwFwd=sfcsBwPortPoolStatAvailBwFwd, sfcsCnxErrorCode=sfcsCnxErrorCode, sfcsBwNimsEntry=sfcsBwNimsEntry, sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoFwd=sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoFwd, sfcsQueueConfigQueueIndex=sfcsQueueConfigQueueIndex, sfcsANIMStatsEntry=sfcsANIMStatsEntry, sfcsBwPortsMetric=sfcsBwPortsMetric, sfcsBwPortPoolLimitsVBRLimitFwd=sfcsBwPortPoolLimitsVBRLimitFwd, sfcsStatsEngineEntry=sfcsStatsEngineEntry, sfcsBuffPrioAllocated=sfcsBuffPrioAllocated, sfcsUPCAdminStatus=sfcsUPCAdminStatus, sfcsCnxErrorTimeStamp=sfcsCnxErrorTimeStamp, sfcsStatsEngineReset=sfcsStatsEngineReset, sfcsEngine=sfcsEngine, sfcsSysConfigOperTime=sfcsSysConfigOperTime, sfcsProxyTransVPI=sfcsProxyTransVPI, sfcsANIMPicMfgRevisionCode=sfcsANIMPicMfgRevisionCode, sfcsConfigEntry=sfcsConfigEntry, sfcsANIMStatsRxCells=sfcsANIMStatsRxCells, sfcsProxyConfigTable=sfcsProxyConfigTable, sfcsANIMConfigNumInterfaces=sfcsANIMConfigNumInterfaces, sfcsStatsEngineAdminStatus=sfcsStatsEngineAdminStatus, sfcsBwPortPoolStatABRAggPCRFwd=sfcsBwPortPoolStatABRAggPCRFwd, sfcsBuffPrioConnRejThold=sfcsBuffPrioConnRejThold, sfcsBwPortsPhysBwFwd=sfcsBwPortsPhysBwFwd, sfcsANIMPicMfgSN=sfcsANIMPicMfgSN, sfcsQueueStatsTxCellsDropped=sfcsQueueStatsTxCellsDropped, sfcsConfigMasterClock2Source=sfcsConfigMasterClock2Source, sfcsBuffPrioAssignCtl=sfcsBuffPrioAssignCtl, ctSwitch=ctSwitch, sfcsCnxCfgTable=sfcsCnxCfgTable, sfcsBwPortPoolLimitsCBRLimitFwd=sfcsBwPortPoolLimitsCBRLimitFwd, sfcsCTMInterfaceStatsRxErrors=sfcsCTMInterfaceStatsRxErrors, sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoFwd=sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoFwd, sfcsQueueConfigQueueSize=sfcsQueueConfigQueueSize, sfcsBwPortPoolTrapMgmtAllocBwTholdLoFwd=sfcsBwPortPoolTrapMgmtAllocBwTholdLoFwd, sfcsProxyReadDataLength=sfcsProxyReadDataLength, sfcsProxyReadInCells=sfcsProxyReadInCells, sfcsQueueStatsEntry=sfcsQueueStatsEntry, sfcsProxyConfigReceiveMode=sfcsProxyConfigReceiveMode, sfcsCnxAPIEntry=sfcsCnxAPIEntry, sfcsANIMPicMfgPN=sfcsANIMPicMfgPN, sfcsQueueStatsQueue=sfcsQueueStatsQueue, sfcsCTM=sfcsCTM, sfcsBwPortPoolLimitsUBRConnLimitFwd=sfcsBwPortPoolLimitsUBRConnLimitFwd, sfcsBwPortPoolStatCBRAggPCRRev=sfcsBwPortPoolStatCBRAggPCRRev, sfcsBuffPrioPriority=sfcsBuffPrioPriority, sfcsQueue=sfcsQueue, sfcsBwPortPoolStatUBRAllocBwFwd=sfcsBwPortPoolStatUBRAllocBwFwd, sfcsBwPortPoolStatUBRAggPCRFwd=sfcsBwPortPoolStatUBRAggPCRFwd, sfcsProxyConfigBandWidth=sfcsProxyConfigBandWidth, sfcsProxyTrans=sfcsProxyTrans, sfcsANIMPicTLPartNumb=sfcsANIMPicTLPartNumb, sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiRev=sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiRev, sfcsANIMPicIndex=sfcsANIMPicIndex, sfcsCTMQueueConfigQueueSize=sfcsCTMQueueConfigQueueSize, sfcsConfigMasterClock2Standby=sfcsConfigMasterClock2Standby, sfcsBwPortPoolTrapMgmtAllocBwTholdLoRev=sfcsBwPortPoolTrapMgmtAllocBwTholdLoRev, sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiFwd=sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiFwd, sfcsCTMQueueStatsInterfaceIndex=sfcsCTMQueueStatsInterfaceIndex, sfcsCTMQueueConfigQueueIndex=sfcsCTMQueueConfigQueueIndex, sfcsInterfaceStatsEntry=sfcsInterfaceStatsEntry, sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiFwd=sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiFwd, sfcsCTMQueueConfigEntry=sfcsCTMQueueConfigEntry, sfcsCnxErrorTable=sfcsCnxErrorTable, sfcsBuffPrioPortIndex=sfcsBuffPrioPortIndex, sfcsANIMPicDcDcConverterInputPower=sfcsANIMPicDcDcConverterInputPower, sfcsCnxCfgTmType=sfcsCnxCfgTmType, sfcsProxyTransTable=sfcsProxyTransTable, sfcsCTMQueueStatsTable=sfcsCTMQueueStatsTable, sfcsANIMConfigEntry=sfcsANIMConfigEntry, sfcsANIMPicMfgPartNumb=sfcsANIMPicMfgPartNumb, sfcsProxyTransEntry=sfcsProxyTransEntry, sfcsProxyReadInTooBigError=sfcsProxyReadInTooBigError, sfcsANIMConfigMBClockSelect=sfcsANIMConfigMBClockSelect, sfcsBwPortPoolStatConnCntRev=sfcsBwPortPoolStatConnCntRev, sfcsBwPortPoolStatPrevAdverAvailCRRev=sfcsBwPortPoolStatPrevAdverAvailCRRev, sfcsProxyReadInError=sfcsProxyReadInError, sfcsSysSystemCfgEnt=sfcsSysSystemCfgEnt, sfcsPacketDiscardEngineSlotIndex=sfcsPacketDiscardEngineSlotIndex, sfcsCTMInterfacePeakBufferUseage=sfcsCTMInterfacePeakBufferUseage, sfcsProxyConfigReceiveFifoReset=sfcsProxyConfigReceiveFifoReset, sfcsANIMConfigToMB=sfcsANIMConfigToMB, sfcsANIMPicEntry=sfcsANIMPicEntry, sfcsConfigMaxUpcEntries=sfcsConfigMaxUpcEntries, sfcsCTMQueueStatsTxCellsDropped=sfcsCTMQueueStatsTxCellsDropped, sfcsConnectionStatistics=sfcsConnectionStatistics, sfcsProxyReadMode=sfcsProxyReadMode, sfcsBwPortPoolStatVBRConnCntRev=sfcsBwPortPoolStatVBRConnCntRev, sfcsCTMQueueConfigCongestionThreshold=sfcsCTMQueueConfigCongestionThreshold, sfcsUPCEngine=sfcsUPCEngine, sfcsANIM=sfcsANIM, sfcsSysConfigPowerUpDiags=sfcsSysConfigPowerUpDiags, sfcsProxyReadInCellReadError=sfcsProxyReadInCellReadError, sfcsBwPortPoolStatCBRPrevAdverCDV=sfcsBwPortPoolStatCBRPrevAdverCDV, sfcsBwPortPoolTrapMgmtABRConnCntTholdLoFwd=sfcsBwPortPoolTrapMgmtABRConnCntTholdLoFwd, sfcsANIMPicModuleType=sfcsANIMPicModuleType, sfcsBuffPrioAvailable=sfcsBuffPrioAvailable, sfcsQueueConfigInterfaceIndex=sfcsQueueConfigInterfaceIndex, sfcsBwPortPoolStatVBRAggPCRRev=sfcsBwPortPoolStatVBRAggPCRRev, sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoRev=sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoRev)
mibBuilder.exportSymbols("CTRON-SFCS-MIB", sfcsSysConfigLastChange=sfcsSysConfigLastChange, sfcsConfig=sfcsConfig, sfcsBwNimsIndex=sfcsBwNimsIndex, sfcsStatusSlotIndex=sfcsStatusSlotIndex, sfcsCTMInterfaceStatsEntry=sfcsCTMInterfaceStatsEntry, sfcsProxyReadVPI=sfcsProxyReadVPI, sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoRev=sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoRev, sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoFwd=sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoFwd, sfcsBwPortPoolStatAllocBwFwd=sfcsBwPortPoolStatAllocBwFwd, sfcsConfigSwitchCapacity=sfcsConfigSwitchCapacity, sfcsBwPortPoolLimitsVBRLimitRev=sfcsBwPortPoolLimitsVBRLimitRev, sfcsANIMPicTLRevisionCode=sfcsANIMPicTLRevisionCode, sfcsBwPortsTable=sfcsBwPortsTable, sfcsProxyTransGumbo=sfcsProxyTransGumbo, sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoRev=sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoRev, sfcsPacketDiscardEngineTable=sfcsPacketDiscardEngineTable, sfcsProxyConfigReceiveFifoState=sfcsProxyConfigReceiveFifoState, sfcsConfigSwitchHostPort=sfcsConfigSwitchHostPort, sfcsBuffPrioAssigned=sfcsBuffPrioAssigned, sfcsCTMInterfaceStatistics=sfcsCTMInterfaceStatistics, sfcsANIMPicMfgMfgLocation=sfcsANIMPicMfgMfgLocation, sfcsInterfaceStatsOverflowDropCellCnt=sfcsInterfaceStatsOverflowDropCellCnt, sfcsBwNimsAdminStatus=sfcsBwNimsAdminStatus, sfcsConfigHostCtrlATMAddr=sfcsConfigHostCtrlATMAddr, sfcsANIMConfigAdminStatus=sfcsANIMConfigAdminStatus, sfcsBwNims=sfcsBwNims, sfcsQueueConfigTable=sfcsQueueConfigTable, sfcsBWNimsPortCount=sfcsBWNimsPortCount, sfcsQueueConfigClpDropThreshold=sfcsQueueConfigClpDropThreshold, sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiFwd=sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiFwd, sfcsBwPortPoolLimitsUBRLimitFwd=sfcsBwPortPoolLimitsUBRLimitFwd, sfcsConnectionConfig=sfcsConnectionConfig, sfcsBwPortPoolStatVBRAggPCRFwd=sfcsBwPortPoolStatVBRAggPCRFwd, sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiFwd=sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiFwd, sfcsPacketDiscardEngine=sfcsPacketDiscardEngine, sfcsProxyTransMpxMethod=sfcsProxyTransMpxMethod, sfcsCTMQueueConfigTable=sfcsCTMQueueConfigTable, sfcsCTMQueueStatsTxCellCnt=sfcsCTMQueueStatsTxCellCnt, sfcsBwPortPoolStatEntry=sfcsBwPortPoolStatEntry, sfcsSysConfigVcSize=sfcsSysConfigVcSize, sfcsProxyConfigTxMemSize=sfcsProxyConfigTxMemSize, sfcsSysStatusTable=sfcsSysStatusTable, sfcsCnxStatsHiToLoHTxCells=sfcsCnxStatsHiToLoHTxCells, sfcsBwPortPoolStatAvailBwRev=sfcsBwPortPoolStatAvailBwRev, sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiRev=sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiRev, sfcsCTMInterfaceStatsOverflowDropCellCnt=sfcsCTMInterfaceStatsOverflowDropCellCnt, sfcsBuffPrioTable=sfcsBuffPrioTable, sfcsConnection=sfcsConnection, sfcsProxyReadPTI=sfcsProxyReadPTI, sfcsProxyReadInbyteslosts=sfcsProxyReadInbyteslosts, cabletron=cabletron, sfcsANIMPicBoardLevelRevision=sfcsANIMPicBoardLevelRevision, sfcsSysConfigTypeofSwitch=sfcsSysConfigTypeofSwitch, sfcsBwPortPoolLimitsEntry=sfcsBwPortPoolLimitsEntry, sfcsANIMConfigOperStatus=sfcsANIMConfigOperStatus, sfcsProxyConfigGumbo=sfcsProxyConfigGumbo, sfcsCnxStatsHiToLoDroppedCells=sfcsCnxStatsHiToLoDroppedCells, sfcsBwPortPoolStatABRPrevAdverCDV=sfcsBwPortPoolStatABRPrevAdverCDV, sfcsANIMPicTLSN=sfcsANIMPicTLSN, sfcsBwPortPoolTrapMgmtTable=sfcsBwPortPoolTrapMgmtTable, sfcsBWNimsBuffCount=sfcsBWNimsBuffCount, sfcsUPCReset=sfcsUPCReset, sfcsCnxErrorRowStatus=sfcsCnxErrorRowStatus, sfcsConfigLastChange=sfcsConfigLastChange, sfcsBwPortPoolStatUBRAggPCRRev=sfcsBwPortPoolStatUBRAggPCRRev, sfcsSysConfigNumberANIMS=sfcsSysConfigNumberANIMS, sfcsBwPortsIndex=sfcsBwPortsIndex, sfcsBuffPrioPeakAlloc=sfcsBuffPrioPeakAlloc, sfcsProxyConfigInitPort=sfcsProxyConfigInitPort, sfcsCnxCfgType=sfcsCnxCfgType, sfcsBwPortPoolStatConnCntFwd=sfcsBwPortPoolStatConnCntFwd, sfcsConfigMasterClock1Standby=sfcsConfigMasterClock1Standby, sfcsBwPortPoolStatVBRConnRejFwd=sfcsBwPortPoolStatVBRConnRejFwd, sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoFwd=sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoFwd, sfcsQueueStatsQueuePeakLevel=sfcsQueueStatsQueuePeakLevel, sfcsCTMInterfaceConfigEntry=sfcsCTMInterfaceConfigEntry, sfcsBwPortPoolStatVBRAllocBwFwd=sfcsBwPortPoolStatVBRAllocBwFwd, sfcsProxyReadData=sfcsProxyReadData, sfcsInterfaceStatsInterfaceIndex=sfcsInterfaceStatsInterfaceIndex, sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiRev=sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiRev, sfcsBwPortPoolLimitsCBRLimitRev=sfcsBwPortPoolLimitsCBRLimitRev, sfcsCTMInterfaceConfigClocking=sfcsCTMInterfaceConfigClocking, sfcsBwPortPoolStatVBRPrevAdverMAXCTD=sfcsBwPortPoolStatVBRPrevAdverMAXCTD, sfcsInterfaceConfigEntry=sfcsInterfaceConfigEntry, sfcsInterfaceConfig=sfcsInterfaceConfig, sfcsUPCOperTime=sfcsUPCOperTime, sfcsCnxCfgCrossConnectLowIfIndex=sfcsCnxCfgCrossConnectLowIfIndex, sfcsBwPortsPhysBwRev=sfcsBwPortsPhysBwRev, sfcsBwPortPoolStatUBRPrevAdverMAXCTD=sfcsBwPortPoolStatUBRPrevAdverMAXCTD, sfcsBwPortPoolTrapMgmtAllocBwTholdHiRev=sfcsBwPortPoolTrapMgmtAllocBwTholdHiRev, sfcsQueueConfigQueueBandwidth=sfcsQueueConfigQueueBandwidth, sfcsBwPortPoolStatCBRAllocBwRev=sfcsBwPortPoolStatCBRAllocBwRev, sfcsBwPortPoolStatUBRPrevAdverCDV=sfcsBwPortPoolStatUBRPrevAdverCDV, sfcsBwPortPoolStatABRAggPCRRev=sfcsBwPortPoolStatABRAggPCRRev, sfcsBWNimsPrioCount=sfcsBWNimsPrioCount, sfcsSysStatusTdmCellCount=sfcsSysStatusTdmCellCount, sfcsConfigTable=sfcsConfigTable, sfcsBWPortPoolTrapMgmtConnRejThold=sfcsBWPortPoolTrapMgmtConnRejThold, sfcsBuffPrioUpTholdTrap=sfcsBuffPrioUpTholdTrap, sfcsBwPortPoolLimitsBwConstant=sfcsBwPortPoolLimitsBwConstant, sfcsQueueConfigEFCILowThreshold=sfcsQueueConfigEFCILowThreshold, sfcsBwPortPoolTrapMgmtPeakBwTholdFwd=sfcsBwPortPoolTrapMgmtPeakBwTholdFwd, sfcsStatusEntry=sfcsStatusEntry, sfcsBwPortPoolStatPrevAdverAvailCRFwd=sfcsBwPortPoolStatPrevAdverAvailCRFwd, sfcsConfigAdminStatus=sfcsConfigAdminStatus, sfcsSysConfigPnniNodeLevel=sfcsSysConfigPnniNodeLevel, sfcsCnxCfgStatsEnable=sfcsCnxCfgStatsEnable, sfcsANIMPicNumbRsvdAddrs=sfcsANIMPicNumbRsvdAddrs, sfcsANIMConfigLineRate=sfcsANIMConfigLineRate, sfcsSysConfigPolicingSupport=sfcsSysConfigPolicingSupport, sfcsProxyConfigTxFifoReset=sfcsProxyConfigTxFifoReset, sfcsBuffPrioMinCtl=sfcsBuffPrioMinCtl, sfcsCnxCfgCrossConnectLowVpi=sfcsCnxCfgCrossConnectLowVpi, sfcsInterfaceStatsVPILookupInvalidErrors=sfcsInterfaceStatsVPILookupInvalidErrors, sfcsInterfaceStatsTxCellCnt=sfcsInterfaceStatsTxCellCnt, sfcsBwPortPoolLimitsMaxAllocBwFwd=sfcsBwPortPoolLimitsMaxAllocBwFwd, sfcsSysConfigMaxfreecva=sfcsSysConfigMaxfreecva, sfcsQueueConfigCongestionThreshold=sfcsQueueConfigCongestionThreshold, mibs=mibs, sfcsANIMPicTable=sfcsANIMPicTable, sfcsProxyConfigANIMIndex=sfcsProxyConfigANIMIndex, sfcsSysConfigPnniAddessingAdmnStatus=sfcsSysConfigPnniAddessingAdmnStatus, sfcsSysStatusEnt=sfcsSysStatusEnt, sfcsCTMInterfaceStatsRxCellCnt=sfcsCTMInterfaceStatsRxCellCnt, sfcsProxyRead=sfcsProxyRead, sfcsStatusTdmUtilization=sfcsStatusTdmUtilization, sfcsANIMConfigANIMType=sfcsANIMConfigANIMType, sfcsANIMPicMacAddr=sfcsANIMPicMacAddr, sfcsCnxStatsLoToHiTaggedCells=sfcsCnxStatsLoToHiTaggedCells, sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiRev=sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiRev, sfcsBwPortPoolStatABRAllocBwRev=sfcsBwPortPoolStatABRAllocBwRev, sfcsProxyReadVCI=sfcsProxyReadVCI, sfcsANIMPicVersion=sfcsANIMPicVersion, sfcsBwPortPoolStatCBRAggPCRFwd=sfcsBwPortPoolStatCBRAggPCRFwd, sfcsProxyTransPayloadLength=sfcsProxyTransPayloadLength, sfcsStatusTable=sfcsStatusTable, sfcsCTMQueueConfig=sfcsCTMQueueConfig, sfcsBwPortPoolLimitsABRLimitFwd=sfcsBwPortPoolLimitsABRLimitFwd, sfcsSysConfigPnniNsapPrefix=sfcsSysConfigPnniNsapPrefix, sfcsInterfaceConfigSigStackID=sfcsInterfaceConfigSigStackID, sfcsProxyConfig=sfcsProxyConfig, sfcsBwPortPoolTrapMgmtPeakBwTholdRev=sfcsBwPortPoolTrapMgmtPeakBwTholdRev, sfcsCnxStatsCrossConnectLowVci=sfcsCnxStatsCrossConnectLowVci, sfcsProxyConfigTransmitDone=sfcsProxyConfigTransmitDone, sfcsProxyReadInHecError=sfcsProxyReadInHecError, sfcsBwPortPoolStatCBRConnCntFwd=sfcsBwPortPoolStatCBRConnCntFwd, sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiRev=sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiRev, sfcsQueueStatsTxClpCellsDiscarded=sfcsQueueStatsTxClpCellsDiscarded, sfcsBwPortPoolStatCBRConnRejRev=sfcsBwPortPoolStatCBRConnRejRev, sfcsProxyTransCLP=sfcsProxyTransCLP, sfcsBwPortPoolStatPeakBwRev=sfcsBwPortPoolStatPeakBwRev, sfcsBwPortPoolStatUBRConnRejFwd=sfcsBwPortPoolStatUBRConnRejFwd, sfcsBwPortPoolStatUBRAllocBwRev=sfcsBwPortPoolStatUBRAllocBwRev, sfcsBuffPrioEntry=sfcsBuffPrioEntry, sfcsBwPortPoolTrapMgmtAllocBwTholdHiFwd=sfcsBwPortPoolTrapMgmtAllocBwTholdHiFwd, sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoFwd=sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoFwd, sfcsCTMInterfaceConfigNextVCI=sfcsCTMInterfaceConfigNextVCI, sfcsCnxStatsEntry=sfcsCnxStatsEntry, sfcsConfigMaxCnxEntries=sfcsConfigMaxCnxEntries, sfcsBwPortPoolStatABRConnRejRev=sfcsBwPortPoolStatABRConnRejRev, sfcsProxyConfigNUMPORTS=sfcsProxyConfigNUMPORTS, sfcsCnxStatsCrossConnectLowIfIndex=sfcsCnxStatsCrossConnectLowIfIndex, sfcsSysConfigUBR=sfcsSysConfigUBR, sfcsStatsEngineSlotIndex=sfcsStatsEngineSlotIndex, sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiFwd=sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiFwd, sfcsConfigVersion=sfcsConfigVersion, sfcsCTMInterfaceStatsVPILookupInvalidErrors=sfcsCTMInterfaceStatsVPILookupInvalidErrors, sfcsBwPortPools=sfcsBwPortPools, sfcsInterfaceStatsRxErrors=sfcsInterfaceStatsRxErrors, sfcsProxyTransControl=sfcsProxyTransControl, sfcsPacketDiscardEngineOperStatus=sfcsPacketDiscardEngineOperStatus, sfcsCnxCfgCrossConnectHighVci=sfcsCnxCfgCrossConnectHighVci, sfcsANIMPicDcDcConverterType=sfcsANIMPicDcDcConverterType, sfcsCnxStatsCrossConnectHighVpi=sfcsCnxStatsCrossConnectHighVpi, sfcsCnxStatsCrossConnectLowVpi=sfcsCnxStatsCrossConnectLowVpi, sfcsBwPortPoolLimitsABRLimitRev=sfcsBwPortPoolLimitsABRLimitRev, sfcsQueueStatsTable=sfcsQueueStatsTable, sfcsUPCEntry=sfcsUPCEntry, sfcsUPCTable=sfcsUPCTable, sfcsInterfaceConfigClockingSource=sfcsInterfaceConfigClockingSource, sfcsProxyTransPayloadAdaptionLayer=sfcsProxyTransPayloadAdaptionLayer, sfcsProxyConfigLoad=sfcsProxyConfigLoad, sfcsProxyReadInLengthMismatchError=sfcsProxyReadInLengthMismatchError, sfcsQueueStatsInterfaceIndex=sfcsQueueStatsInterfaceIndex, sfcsBwPorts=sfcsBwPorts, sfcsCTMInterfaceConfigSigStackID=sfcsCTMInterfaceConfigSigStackID, sfcsInterfaceStatistics=sfcsInterfaceStatistics, sfcsSysConfigOperStatus=sfcsSysConfigOperStatus, sfcsStatsEngineTable=sfcsStatsEngineTable, sfcsConfigMaxStatEntries=sfcsConfigMaxStatEntries, sfcsProxyReadNewPdu=sfcsProxyReadNewPdu, sfcsSysConfigCTMSlotMask=sfcsSysConfigCTMSlotMask, sfcsCTMInterfaceConfig=sfcsCTMInterfaceConfig, sfcsStatusCurrCtmAgent=sfcsStatusCurrCtmAgent, sfcsANIMPicModuleTypeString=sfcsANIMPicModuleTypeString, sfcsSysConfigTable=sfcsSysConfigTable, sfcsCTMQueueStatsTxClpCellsDiscarded=sfcsCTMQueueStatsTxClpCellsDiscarded, sfcsConnectionError=sfcsConnectionError, sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoRev=sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoRev, sfcsBwPortPoolLimitsBwAllocStrat=sfcsBwPortPoolLimitsBwAllocStrat, sfcsBwPortPoolStatUBRConnCntFwd=sfcsBwPortPoolStatUBRConnCntFwd, sfcsStatsEngineOperTime=sfcsStatsEngineOperTime, sfcsCnxStatsLoToHiHTxCells=sfcsCnxStatsLoToHiHTxCells, sfcsBwPortPoolTrapMgmtPoolIndex=sfcsBwPortPoolTrapMgmtPoolIndex, sfcsANIMStatsTable=sfcsANIMStatsTable, sfcsBwPortPoolStatVBRConnCntFwd=sfcsBwPortPoolStatVBRConnCntFwd, sfcsANIMPicMfgReworkLocation=sfcsANIMPicMfgReworkLocation, sfcsInterface=sfcsInterface, sfcsCTMInterfaceStatsInterfaceIndex=sfcsCTMInterfaceStatsInterfaceIndex, sfcsSysConfig=sfcsSysConfig, sfcsBwPortPoolStatRejConnFwd=sfcsBwPortPoolStatRejConnFwd, sfcsBwPortsEntry=sfcsBwPortsEntry, sfcsCTMQueueConfigQueueBandwidth=sfcsCTMQueueConfigQueueBandwidth, sfcsBwPortPoolStatUBRConnCntRev=sfcsBwPortPoolStatUBRConnCntRev, sfcsCTMInterfaceStatsRxCnxLookupInvalidErrors=sfcsCTMInterfaceStatsRxCnxLookupInvalidErrors, sfcsSysConfigATOMPersistance=sfcsSysConfigATOMPersistance, sfcsCTMQueueConfigRMThreshold=sfcsCTMQueueConfigRMThreshold, sfcsQueueConfigEPDThreshold=sfcsQueueConfigEPDThreshold, sfcsBwPortPoolStatCBRPrevAdverMAXCTD=sfcsBwPortPoolStatCBRPrevAdverMAXCTD, sfcsBwPortPoolStatVBRAllocBwRev=sfcsBwPortPoolStatVBRAllocBwRev, sfcsStatusCurrUPCEntries=sfcsStatusCurrUPCEntries, sfcsSysStatusCurrCnxEntries=sfcsSysStatusCurrCnxEntries, sfcsBwPortPoolStatABRPrevAdverMAXCTD=sfcsBwPortPoolStatABRPrevAdverMAXCTD, sfcsPacketDiscardEngineEntry=sfcsPacketDiscardEngineEntry, sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiFwd=sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiFwd, sfcsCnxCfgStatsTableCounterSizes=sfcsCnxCfgStatsTableCounterSizes, sfcsCnxCfgCrossConnectHighVpi=sfcsCnxCfgCrossConnectHighVpi, sfcsBwPortPoolStatPrevAdverMAXCRFwd=sfcsBwPortPoolStatPrevAdverMAXCRFwd, sfcsBWPortPoolTrapMgmtBuffLoThold=sfcsBWPortPoolTrapMgmtBuffLoThold, sfcsInterfaceStatsTable=sfcsInterfaceStatsTable, sfcsBwPortsZone=sfcsBwPortsZone, sfcsInterfaceConfigTable=sfcsInterfaceConfigTable, sfcsCTMInterfaceStatsTable=sfcsCTMInterfaceStatsTable, sfcsPacketDiscardEngineEPDPercentage=sfcsPacketDiscardEngineEPDPercentage, sfcsCTMQueueConfigClpDropThreshold=sfcsCTMQueueConfigClpDropThreshold, sfcsSysConfigSwitchCapacity=sfcsSysConfigSwitchCapacity, sfcsInterfaceStatsRxCellCnt=sfcsInterfaceStatsRxCellCnt, sfcsANIMStatistics=sfcsANIMStatistics, sfcsANIMPicTLPN=sfcsANIMPicTLPN, sfcsBwPortPoolLimitsIndex=sfcsBwPortPoolLimitsIndex, sfcsCTMInterfaceConfigNumberOfQueues=sfcsCTMInterfaceConfigNumberOfQueues, sfcsSysStatus=sfcsSysStatus, sfcsProxyReadInTotalCells=sfcsProxyReadInTotalCells, sfcsSysConfigMaxCnxEntries=sfcsSysConfigMaxCnxEntries, sfcsConfigOperTime=sfcsConfigOperTime, sfcsConfigMasterClock1Source=sfcsConfigMasterClock1Source, sfcsSystem=sfcsSystem)
