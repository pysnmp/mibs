#
# PySNMP MIB module CADANT-CMTS-EQUIPMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/CADANT-CMTS-EQUIPMENT-MIB
# Produced by pysmi-1.1.12 at Wed Sep 18 06:42:44 2024
# On host fv-az1780-151 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
cadEquipment, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadEquipment")
CardSubType, FirmwareSource, PicType, PortType, DuplexStatus, FlowControlMode, PrimaryState, DiskVolumeUsageLevel, UnknownState, CardId, PortDetectedMode, CardType, AdminState, PortMode, SecondaryState, PortId, ShelfId, EqActionType = mibBuilder.importSymbols("CADANT-TC", "CardSubType", "FirmwareSource", "PicType", "PortType", "DuplexStatus", "FlowControlMode", "PrimaryState", "DiskVolumeUsageLevel", "UnknownState", "CardId", "PortDetectedMode", "CardType", "AdminState", "PortMode", "SecondaryState", "PortId", "ShelfId", "EqActionType")
TenthdBmV, = mibBuilder.importSymbols("DOCS-IF-MIB", "TenthdBmV")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, ModuleIdentity, Integer32, IpAddress, ObjectIdentity, NotificationType, Counter64, Gauge32, Counter32, Bits, TimeTicks, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Integer32", "IpAddress", "ObjectIdentity", "NotificationType", "Counter64", "Gauge32", "Counter32", "Bits", "TimeTicks", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DateAndTime, TruthValue, DisplayString, TimeStamp, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "TruthValue", "DisplayString", "TimeStamp", "MacAddress", "RowStatus")
cadEquipmentMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1))
cadEquipmentMib.setRevisions(('2009-03-03 00:00', '2009-01-05 00:00', '2008-10-14 00:00', '2008-10-01 00:00', '2008-07-03 00:00', '2008-06-18 00:00', '2008-04-28 00:00', '2008-04-02 00:00', '2008-02-25 00:00', '2007-11-05 00:00', '2007-01-10 00:00', '2006-11-13 00:00', '2006-09-12 00:00', '2006-08-23 00:00', '2006-02-14 00:00', '2005-08-30 00:00', '2005-04-06 00:00', '2005-02-04 00:00', '2005-01-24 00:00', '2004-12-01 00:00', '2004-11-18 00:00', '2004-11-11 00:00', '2004-09-07 00:00', '2004-07-23 00:00', '2004-03-22 00:00', '2004-03-18 00:00', '2004-02-04 00:00', '2003-12-18 00:00', '2003-03-31 00:00', '2003-03-17 00:00', '2003-03-05 00:00', '2003-03-02 00:00', '2003-01-29 00:00', '2002-12-14 00:00', '2002-11-07 00:00', '2002-09-25 00:00', '2002-09-01 00:00', '2002-05-01 00:00', '2001-12-28 16:30', '2001-12-21 16:30', '2001-10-03 00:00', '2001-07-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadEquipmentMib.setRevisionsDescriptions(('Change syntax of cmIpAddress from IpAddress to OCTET STRING to handle IPv4 and v6.', 'Add restrictions on the size of some strings in card table.', 'Add shelf id back into trap messages.', 'Add ranges for allowable card temperatures.', 'Remove portGroupId since cable-mac replaced this MIB object.\n\tAdd shelfNumber to portPrStateChange, portSecStateChange and portDplxStatusChange to match the variable binding list seen on trap monitor.', 'Additional support for disk sizes.', 'Initial support for MPM carrier cards.', 'Support various levels of temperature warnings.', 'Allowed Event Ids to range 0x00000000 to 0xFFFFFFFF for fpgaErrorEvent Table.', 'Add port flow control parameters and remove gbic support.', 'Remove cardSwBuildTime', 'Remove portMacPortId', 'Change syntax of portMacPortId from MacPortId to MacPortIdWithInvalid (65536 is invalid)', 'Add portMacPortId', 'Add additional variable-binding cmIpAddress cmRegistrationNotification', 'Add support for RCM module.', 'Add support for CM registration notification', 'Add downstream power loss notification.', 'Add last card reset reason to card table.', 'Add downstream power visibility to port table.', '(1) Add 2 additional variable-bindings to cmResetClearNotification.\n         (2) Add 1 additional variable-binding  to cmResetNotification.', 'Add preliminary support for customized FPGA error event handling.', 'Add cardSubType, portGroupId and portDocsIfIndex to C4 Port Primary\n         and Secondary Trap.', '(1) Modify the TEXTUAL-CONVENTION of TestId.\n         (2) Add diagTestId for cardTestResultNotification.', 'Added portDescription.', '(1) Add support for card temperature trap control.\n         (2) Fix smidump error by changing diskVolumeFileName object mibtree', 'Add CmResetClear notification.', 'Add support for logical uchannel port type and\n         preliminary support for extended gbic information.', 'Add preliminary pic support.', 'Add card detail support.', 'Replacing portGroupId with portCardSubType and renaming portDPortId to portGroupId.', 'Add card temperature monitoring.', 'Adding portDPortId and portConnectorId objects to portTable to support 2D12U CAM.', 'Revise audit entries. Add auditAutoScheduling and auditLogOutput control.\n         Remove auditResultNotification', 'Add support for diskVolume', 'Undo previous change.', 'Make cardsubtype backward compatible.', 'Add support for cardFpgaToCpuSendRate.', 'Add support for cardSwBuildTime.', 'Add support for cardUpTime.', 'Add support for card detected trap.', 'Add support for card sparing.',))
if mibBuilder.loadTexts: cadEquipmentMib.setLastUpdated('200903030000Z')
if mibBuilder.loadTexts: cadEquipmentMib.setOrganization('Arris International, Inc.')
if mibBuilder.loadTexts: cadEquipmentMib.setContactInfo('Arris Technical Support\n         Phone: +1 630 281 3000\n         E-Mail: support@arrisi.com')
if mibBuilder.loadTexts: cadEquipmentMib.setDescription('This MIB is intended to describe all objects which are used to\n         control and report on the state of a Cadant CMTS. These objects\n         are used to perform the following functions on a Cadant CMTS:\n\n         a) provision the cards, ports, and the CMTS itself\n         b) run dianostic tests\n         c) configure auditing parameters\n         d) receive equipment-related traps ')
class TestId(TextualConvention, Integer32):
    description = ' Used as index to Test Tables. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 100)

class TestType(TextualConvention, Integer32):
    description = " Indicates whether this is a 'Test', a 'Diagnostic',\n         or unknown. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("test", 1), ("diagnostic", 2), ("unknown", 3))

class TestCommand(TextualConvention, Integer32):
    description = ' A set of commands applicable to this test. A value of\n         noop will do nothing. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("noop", 1), ("stop", 2), ("disable", 3), ("enable", 4), ("runNow", 5))

class TestScheduleCommand(TextualConvention, Integer32):
    description = ' A set of periodic schedule command applicable to\n         this test. This is used in conjunction with the \n         TestSchedule and TestTime to specify the start\n         time of the test. If the TestSchedule value is 0, \n         then the test will be executed once at the time\n         specified by the TestTime. For any other \n         TestSchedule value, the test will be executed at\n         time specified by the TestTime and repeated \n         periodically base on the value specified by \n         TestSchedule. A value of noop will do nothing. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noop", 1), ("disable", 2), ("enable", 3))

class TestSchedule(TextualConvention, Integer32):
    description = ' A set of scheduling interval option applicable to this \n         test only if Schedule is selected. This is recommended for \n         hardware routine exercise (REX).  The value expresses in multiple\n         of hours. For example: 1 hour interval, 24 hour interval, 48 hour interval.\n         A value of 0 indicate no scheduling option for this test.'
    status = 'current'

class TestResult(TextualConvention, Integer32):
    description = ' Test Result. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("notRun", 1), ("inProgress", 2), ("pass", 3), ("fail", 4), ("inconclusive", 5), ("timeOut", 6), ("abort", 7))

class TestTransactionId(TextualConvention, Integer32):
    description = ' Transaction Id associated with a test or diagnostic. The EMS must populate\n         the value of this object to be able to correlate the test sent and the \n         result coming back.  '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

equipmentTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0))
systemGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1))
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: systemClock.setStatus('current')
if mibBuilder.loadTexts: systemClock.setDescription('CMTS local date and time displayed as \n             yyyy-mm-dd,hh:mm:ss.d,+/-hh:mm, where the date is yyyy-mmmm-dd and \n             time in deci-seconds is hh:mm:ss.d, adn teh current offset from \n             GMT is +/-hh:mm. This object is adjusted by teh TZ and DST rules.\n             E.g. 2002-5-26,13;30:15.0,-4:0')
trapCounter = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCounter.setStatus('current')
if mibBuilder.loadTexts: trapCounter.setDescription(' This is the trap sequence number that increments each\n            time a trap is sent. It is persistent across resets. ')
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6), ("informational", 7))).clone('cleared')).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSeverity.setStatus('current')
if mibBuilder.loadTexts: trapSeverity.setDescription(' Severity level of a Cadant trap. ')
systemKey = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemKey.setStatus('current')
if mibBuilder.loadTexts: systemKey.setDescription(" The systemKey is a unique string used for Candant's CMTS\n              identification. The EMS uses this key string as well as the\n              sysOid in the MIB-II system group MIB to identify Candant's\n              CMTS's. ")
cardNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 98), CardId().clone(99)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cardNumber.setStatus('current')
if mibBuilder.loadTexts: cardNumber.setDescription(' Card Id used in traps. A value 99 indicates an invalid cardNumber. ')
portNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 99), PortId().clone(99)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: portNumber.setStatus('current')
if mibBuilder.loadTexts: portNumber.setDescription(' Port Id used in traps. A value of 99 indicates an invalid portNumber. ')
diskDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(99)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: diskDriveNumber.setStatus('current')
if mibBuilder.loadTexts: diskDriveNumber.setDescription(' Disk drive ID use in a Cadant trap. A value of 99 indicates an invalid diskDriveNumber')
diskVolumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(99)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: diskVolumeNumber.setStatus('current')
if mibBuilder.loadTexts: diskVolumeNumber.setDescription(' Disk volume ID use in a Cadant trap. A value of 99 indicates an invalid diskVolumeNumber')
shelfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 2))
shelfNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 2, 1), ShelfId().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfNumber.setStatus('deprecated')
if mibBuilder.loadTexts: shelfNumber.setDescription(' The instance identifier of a Cadant CMTS in a multi-Cadant CMTS\n            configuration. This shelfNumber is used in traps.  A value of 99 \n            indicates an invalid shelfNumber. ')
shelfName = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 2, 2), DisplayString().clone('Cadant C4 CMTS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfName.setStatus('current')
if mibBuilder.loadTexts: shelfName.setDescription(' A string that represents the name of this machine and may uniquely\n            identify it from other network devices. ')
shelfSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfSwVersion.setStatus('current')
if mibBuilder.loadTexts: shelfSwVersion.setDescription('The software version currently executing.')
equipmentState = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 3))
cardLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 3, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: cardLastChangeTime.setDescription('The value of sysUpTime at the time any of the objects\n            in cardTable last changed. ')
portLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 3, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: portLastChangeTime.setDescription('The value of sysUpTime at the time any of the objects\n            in portTable last changed. ')
equipmentTbl = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4))
cardTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2), )
if mibBuilder.loadTexts: cardTable.setStatus('current')
if mibBuilder.loadTexts: cardTable.setDescription('A table of card or circuit pack information.')
cardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cardShelfId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cardId"))
if mibBuilder.loadTexts: cardEntry.setStatus('current')
if mibBuilder.loadTexts: cardEntry.setDescription('A conceptual row containing pertinent information about a card or\n            a circuit pack. ')
cardShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 1), ShelfId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardShelfId.setStatus('obsolete')
if mibBuilder.loadTexts: cardShelfId.setDescription('The unique id the shelf that contains this card.')
cardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 2), CardId())
if mibBuilder.loadTexts: cardId.setStatus('current')
if mibBuilder.loadTexts: cardId.setDescription('The unique id of this card within the shelf. The \n             convention of cardId is as follows:\n            - Indices from 1 to 50 [1 - 50] are reserved for Circuit Packs. \n              In this case, the cardId is 1 plus the 0-based slot number. \n            - Indices from 51 to 98 [51 - 98] are reserved for Auxilliary Devices in within\n              a shelf. Auxilliary Devices or Modules could be Fan Module, Power Module,\n              Tape Drive and or Disc-Drive. In this case, the cardName and cardType\n              indentify the Auxilliary Devices. Not all of row attributes are applicable\n              for Auxilliary Devices. ')
cardName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardName.setStatus('current')
if mibBuilder.loadTexts: cardName.setDescription(' This is the name of the card, if it has one. ')
cardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 4), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardType.setStatus('current')
if mibBuilder.loadTexts: cardType.setDescription(" The type of card, if any. For example Ecard, Fcard, Dcard or Ucard\n                 If the slot is empty, the value would be 'empty'. ")
cardSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 5), CardSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardSubType.setStatus('current')
if mibBuilder.loadTexts: cardSubType.setDescription(" The cardType alone may not be specific enough to fully describe the\n             type of card that is in this slot. For example, a card type of Dcard\n             might have a more  specific type of 1D8U with integrated upconverter.\n             If the card needs no further specificication that the cardType, then\n             the value of cardSubType is 'none'. Not yet implemented. ")
cardSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSerialNum.setStatus('current')
if mibBuilder.loadTexts: cardSerialNum.setDescription(' This is the serial number of the card. ')
cardFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFwVersion.setStatus('current')
if mibBuilder.loadTexts: cardFwVersion.setDescription(' This is the firmware or FPGA version number of the card. ')
cardHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardHwVersion.setStatus('current')
if mibBuilder.loadTexts: cardHwVersion.setDescription(' This is the hardware version of the card. ')
cardSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSwVersion.setStatus('current')
if mibBuilder.loadTexts: cardSwVersion.setDescription(' This is the software version of the card. ')
cardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 12), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardAdminState.setStatus('current')
if mibBuilder.loadTexts: cardAdminState.setDescription(' This is the administrative state of this card. ')
cardPrState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 13), PrimaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPrState.setStatus('current')
if mibBuilder.loadTexts: cardPrState.setDescription(' This is the primary state of this card. ')
cardSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 14), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSecState.setStatus('current')
if mibBuilder.loadTexts: cardSecState.setDescription(' This is the secondary state of this card. ')
cardDplxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 15), DuplexStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDplxStatus.setStatus('current')
if mibBuilder.loadTexts: cardDplxStatus.setDescription(' This is the duplexing status of this card. ')
cardAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 17), EqActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardAction.setStatus('current')
if mibBuilder.loadTexts: cardAction.setDescription(' Write-only action performed on this card. ')
cardTrapInh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 18), Bits().clone(namedValues=NamedValues(("primary", 0), ("secondary", 1), ("duplex", 2), ("detected", 3), ("tempoutofrange", 4), ("tempnoreport", 5), ("tempoverheat", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTrapInh.setStatus('current')
if mibBuilder.loadTexts: cardTrapInh.setDescription(' If a bit is set, the corresponding state change trap\n            will not be sent. ')
cardNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardNumPorts.setStatus('current')
if mibBuilder.loadTexts: cardNumPorts.setDescription(' Number of ports this card contains. ')
cardDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 20), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDetected.setStatus('current')
if mibBuilder.loadTexts: cardDetected.setDescription(' CardType dectected automatically by the CMTS. ')
cardSubDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 21), CardSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSubDetected.setStatus('current')
if mibBuilder.loadTexts: cardSubDetected.setDescription(' CardSubType dectected automatically by the CMTS. ')
cardFwUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 23), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFwUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: cardFwUpdateStatus.setDescription(' Set to TRUE if a firmware update is in progress or has been done,\n            else set to FALSE. ')
cardSpareGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 24), CardId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardSpareGroupId.setStatus('current')
if mibBuilder.loadTexts: cardSpareGroupId.setDescription(' The cardId of the spare group leader for this sparing group.  \n            This value will be set to the invalid card id for all cards not\n            associated with a sparing group. ')
cardSpareGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("manual", 1), ("auto", 2), ("invalid", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardSpareGroupMode.setStatus('current')
if mibBuilder.loadTexts: cardSpareGroupMode.setDescription(' The admin mode of the spare group leader for this sparing group.\n            This value will be set to the invalid card id for all cards not\n            associated with a sparing group. ')
cardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 26), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardUpTime.setStatus('current')
if mibBuilder.loadTexts: cardUpTime.setDescription(' The value of sysUpTime when the primary state for this card \n            made a transition from OOS to IS. ')
cardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-30, 120), ValueRangeConstraint(999, 999), )).clone(999)).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTemperature.setStatus('current')
if mibBuilder.loadTexts: cardTemperature.setDescription(' The current operational temperature of the card. ')
cardCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCpuType.setStatus('current')
if mibBuilder.loadTexts: cardCpuType.setDescription(' The current CPU type of the card. ')
cardCpuSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 31), Unsigned32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCpuSpeed.setStatus('current')
if mibBuilder.loadTexts: cardCpuSpeed.setDescription(' The current CPU speed of the card. ')
cardBusSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 32), Unsigned32()).setUnits('hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cardBusSpeed.setStatus('current')
if mibBuilder.loadTexts: cardBusSpeed.setDescription(' The current bus speed of the card. ')
cardRamSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 33), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cardRamSize.setStatus('current')
if mibBuilder.loadTexts: cardRamSize.setDescription(' The current size of installed RAM of the card. ')
cardFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 34), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFlashSize.setStatus('current')
if mibBuilder.loadTexts: cardFlashSize.setDescription(' The current size of installed FLASH of the card. ')
cardCPLDVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCPLDVersion.setStatus('current')
if mibBuilder.loadTexts: cardCPLDVersion.setDescription(' The current version of CPLD installed on the card. ')
cardFpgaSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 36), FirmwareSource().clone('committed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFpgaSource.setStatus('current')
if mibBuilder.loadTexts: cardFpgaSource.setDescription(' The source of the running version of the FPGAs on the card. ')
cardBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 90))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardBootVersion.setStatus('current')
if mibBuilder.loadTexts: cardBootVersion.setDescription(' The current versions of the boot loaders installed on the card. ')
cardLastBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLastBootVersion.setStatus('current')
if mibBuilder.loadTexts: cardLastBootVersion.setDescription(' The last version of the boot loader used on the card. ')
cardLastBootSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 39), FirmwareSource().clone('boot1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLastBootSource.setStatus('current')
if mibBuilder.loadTexts: cardLastBootSource.setDescription(' The source of the version of the bootloader last\n              used on the card. ')
cardPicDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 40), PicType().clone('invalid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPicDetected.setStatus('current')
if mibBuilder.loadTexts: cardPicDetected.setDescription(' The type of PIC detected in this slot. ')
cardPicSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPicSerialNum.setStatus('current')
if mibBuilder.loadTexts: cardPicSerialNum.setDescription(' This is the serial number of the PIC. ')
cardPicHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPicHwVersion.setStatus('current')
if mibBuilder.loadTexts: cardPicHwVersion.setDescription(' This is the hardware version of the PIC. ')
cardLastResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLastResetReason.setStatus('current')
if mibBuilder.loadTexts: cardLastResetReason.setDescription(' The reason for the latest card recovery. ')
cardTemperatureHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 44), Integer32().clone(70)).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTemperatureHighWarn.setStatus('current')
if mibBuilder.loadTexts: cardTemperatureHighWarn.setDescription(' The temperature of the card at which warnings are generated. ')
cardTemperatureHighError = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 45), Integer32().clone(90)).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTemperatureHighError.setStatus('current')
if mibBuilder.loadTexts: cardTemperatureHighError.setDescription(' The temperature of the card at which recoveries are initiated. ')
cardCarrierSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCarrierSerialNum.setStatus('current')
if mibBuilder.loadTexts: cardCarrierSerialNum.setDescription(' This is the serial number of the carrier card, and valid only for DMM/MPM cards. ')
cardCarrierFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCarrierFwVersion.setStatus('current')
if mibBuilder.loadTexts: cardCarrierFwVersion.setDescription(' This is the firmware version of the carrier card, and valid only for DMM/MPM cards. ')
cardCarrierHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCarrierHwVersion.setStatus('current')
if mibBuilder.loadTexts: cardCarrierHwVersion.setDescription(' This is the hardwarer versioin of the carrier card, and valid only for DMM/MPM cards. ')
portTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription('A table of Ports information.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "portShelfId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "portCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "portId"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
if mibBuilder.loadTexts: portEntry.setDescription('A conceptual row containing pertinent information about a port \n             owned by a card.')
portShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 1), ShelfId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portShelfId.setStatus('deprecated')
if mibBuilder.loadTexts: portShelfId.setDescription('The unique id of the shelf this port belongs to.')
portCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 2), CardId())
if mibBuilder.loadTexts: portCardId.setStatus('current')
if mibBuilder.loadTexts: portCardId.setDescription('The unique id of the card this port belongs to.')
portId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 3), PortId())
if mibBuilder.loadTexts: portId.setStatus('current')
if mibBuilder.loadTexts: portId.setDescription('The unique id of this port within a card.\n             the shelfId, the cardId and portId uniquely identify a port ')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 4), PortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
if mibBuilder.loadTexts: portType.setDescription(' Type of this port. ')
portAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 6), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAdminState.setStatus('current')
if mibBuilder.loadTexts: portAdminState.setDescription('The Admin state of this port')
portPrState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 7), PrimaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPrState.setStatus('current')
if mibBuilder.loadTexts: portPrState.setDescription('The primary state of this port')
portSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 8), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecState.setStatus('current')
if mibBuilder.loadTexts: portSecState.setDescription('The secondary state of this port')
portDplxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 9), DuplexStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDplxStatus.setStatus('current')
if mibBuilder.loadTexts: portDplxStatus.setDescription('The port Duplexing status.')
portAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 11), EqActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAction.setStatus('current')
if mibBuilder.loadTexts: portAction.setDescription(' Write-only action performed on a Port. ')
portTrapInh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 12), Bits().clone(namedValues=NamedValues(("primary", 0), ("secondary", 1), ("duplex", 2), ("linkUpLinkDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrapInh.setStatus('current')
if mibBuilder.loadTexts: portTrapInh.setDescription(' If a bit is set, the corresponding state change trap\n            will not be sent. ')
portNumChans = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumChans.setStatus('current')
if mibBuilder.loadTexts: portNumChans.setDescription(' Number of channels this port contains. ')
portDocsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 14), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDocsIfIndex.setStatus('current')
if mibBuilder.loadTexts: portDocsIfIndex.setDescription(" This object is here just in case a Port component does\n            have a one to one correspondent with the IfTable. Example: D card\n            in Cadant's CMTS system contains 8 ports, 1 for downstream channel and\n            up to 3 upstream channels. Each channel will correspond to an ifIndex as\n            specified in the ipcdn-rf-interface-mib. In this case, this object MUST\n            have the same value as of ifIndex. A -1 indicates that this port does not\n            have an association in the Iftable. ")
portMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacAddress.setStatus('current')
if mibBuilder.loadTexts: portMacAddress.setDescription(' The physical address value for this card. This value is used to\n            populate the ifPhysAddress field in the IfTable and other Tables in docsis RFC MIBs.')
portMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 16), PortMode().clone('autoNegotiate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMode.setStatus('current')
if mibBuilder.loadTexts: portMode.setDescription(' The desired operating mode of an ethernet port. Not yet implemented. ')
portDetectedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 17), PortDetectedMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDetectedMode.setStatus('current')
if mibBuilder.loadTexts: portDetectedMode.setDescription(' The current operating mode of an ethernet port. ')
portBgpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBgpId.setStatus('current')
if mibBuilder.loadTexts: portBgpId.setDescription(' The bridge group port id for this port. ')
portConnectorId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 20), PortId().clone(99)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConnectorId.setStatus('current')
if mibBuilder.loadTexts: portConnectorId.setDescription(' For portType = uport, the rear pic connector this port is mapped to.\n            Otherwise, the value of this object is invalid(99). ')
portCardSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 21), CardSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCardSubType.setStatus('current')
if mibBuilder.loadTexts: portCardSubType.setDescription(' The CardSubType of the card this port belongs to.')
portDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDescription.setStatus('current')
if mibBuilder.loadTexts: portDescription.setDescription(' A persistent copy of ifAlias for this interface.')
portCurrDsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 28), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCurrDsPower.setStatus('current')
if mibBuilder.loadTexts: portCurrDsPower.setDescription(' The latest downstream power level reported by the port.\n              This is valid on for ports of type dport.')
portMinDsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 29), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMinDsPower.setStatus('current')
if mibBuilder.loadTexts: portMinDsPower.setDescription(' The latest downstream power level reported by the port.\n              This is valid on for ports of type dport.')
portMaxDsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 30), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMaxDsPower.setStatus('current')
if mibBuilder.loadTexts: portMaxDsPower.setDescription(' The latest downstream power level reported by the port.\n              This is valid on for ports of type dport.')
portTxFlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 31), FlowControlMode().clone('desired')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTxFlowControlMode.setStatus('current')
if mibBuilder.loadTexts: portTxFlowControlMode.setDescription(' The transmit flow control settings for this port (network ports only).')
portRxFlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 32), FlowControlMode().clone('desired')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRxFlowControlMode.setStatus('current')
if mibBuilder.loadTexts: portRxFlowControlMode.setDescription(' The receive flow control settings for this port (network ports only).')
portTxFlowControlDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 33), FlowControlMode().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTxFlowControlDetected.setStatus('current')
if mibBuilder.loadTexts: portTxFlowControlDetected.setDescription(' The reported transmit flow control settings for this port (network ports only).')
portRxFlowControlDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 34), FlowControlMode().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRxFlowControlDetected.setStatus('current')
if mibBuilder.loadTexts: portRxFlowControlDetected.setDescription(' The reported receive flow control settings for this port (network ports only).')
portMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 35), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacIfIndex.setStatus('current')
if mibBuilder.loadTexts: portMacIfIndex.setDescription(' The MAC IfIndex currently associcated with the RF port.')
diskVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4), )
if mibBuilder.loadTexts: diskVolumeTable.setStatus('current')
if mibBuilder.loadTexts: diskVolumeTable.setDescription('A table of disk volume information.')
diskVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeShelfId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeDriveId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeId"))
if mibBuilder.loadTexts: diskVolumeEntry.setStatus('current')
if mibBuilder.loadTexts: diskVolumeEntry.setDescription('A conceptual row containing pertinent information about a disk volume ')
diskVolumeShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 1), ShelfId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVolumeShelfId.setStatus('deprecated')
if mibBuilder.loadTexts: diskVolumeShelfId.setDescription('The unique id of the shelf this disk volume belongs to.')
diskVolumeCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 2), CardId())
if mibBuilder.loadTexts: diskVolumeCardId.setStatus('current')
if mibBuilder.loadTexts: diskVolumeCardId.setDescription('The unique id of the card this disk volume belongs to.')
diskVolumeDriveId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)))
if mibBuilder.loadTexts: diskVolumeDriveId.setStatus('current')
if mibBuilder.loadTexts: diskVolumeDriveId.setDescription('The unique id of the disk drive this disk volume belongs to.\n             A value of 99 indicates an invalid disk drive')
diskVolumeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)))
if mibBuilder.loadTexts: diskVolumeId.setStatus('current')
if mibBuilder.loadTexts: diskVolumeId.setDescription('The unique id of this disk volume.\n             the diskVolumeShelfId, the diskVolumeCardId, the diskVolumeDiskId, \n             and the. A value of 99 indicate an invalid volume ')
diskVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVolumeName.setStatus('current')
if mibBuilder.loadTexts: diskVolumeName.setDescription('The name of the disk volume.')
diskVolumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 6), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVolumeSize.setStatus('current')
if mibBuilder.loadTexts: diskVolumeSize.setDescription('The disk volume size in units of 512 bytes.')
diskVolumeUsageLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 7), DiskVolumeUsageLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVolumeUsageLevel.setStatus('current')
if mibBuilder.loadTexts: diskVolumeUsageLevel.setDescription('The disk volume usage level.')
diskVolumeUsagePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVolumeUsagePercentage.setStatus('current')
if mibBuilder.loadTexts: diskVolumeUsagePercentage.setDescription('The disk volume usage percentage.')
diskVolumeUsageCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskVolumeUsageCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: diskVolumeUsageCriticalThreshold.setDescription('Usage percentage level when exceed will cause a\n             diskVolumeUsageNotification trap to be sent with \n             diskVolumeUsageLevel of diskVolumeUsageCritical.')
diskVolumeUsageMajorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskVolumeUsageMajorThreshold.setStatus('current')
if mibBuilder.loadTexts: diskVolumeUsageMajorThreshold.setDescription('Usage percentage level when exceed will cause a\n             diskVolumeUsageNotification trap to be sent with \n             diskVolumeUsageLevel of diskVolumeUsageMajor.')
diskVolumeUsageMinorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(70)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskVolumeUsageMinorThreshold.setStatus('current')
if mibBuilder.loadTexts: diskVolumeUsageMinorThreshold.setDescription('Usage percentage level when exceed will cause a\n             diskVolumeUsageNotification trap to be sent with \n             diskVolumeUsageLevel of diskVolumeUsageMinor.')
diskVolumeAutoDeleteUnusedFile = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskVolumeAutoDeleteUnusedFile.setStatus('current')
if mibBuilder.loadTexts: diskVolumeAutoDeleteUnusedFile.setDescription('When set to TRUE to the system will automatically delete \n             unused files when diskVolumeUsage exceed the \n             diskVolumeUsageCriticalThreshold value.')
diskVolumeTrapInh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 13), Bits().clone(namedValues=NamedValues(("criticalUsageLevel", 0), ("majorUsageLevel", 1), ("minorUsageLevel", 2), ("autoDeleteFiles", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskVolumeTrapInh.setStatus('current')
if mibBuilder.loadTexts: diskVolumeTrapInh.setDescription('If a bit is set, the corresponding trap\n             will not be sent. ')
diskVolumeDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 14), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVolumeDiskSize.setStatus('current')
if mibBuilder.loadTexts: diskVolumeDiskSize.setDescription('Total physical disk capacity in bytes.')
diskVolumeFileName = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: diskVolumeFileName.setStatus('current')
if mibBuilder.loadTexts: diskVolumeFileName.setDescription('The name of a file on the disk volume use for trap notification.')
equipmentDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5))
eqDiagConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1))
remainInDiagMode = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remainInDiagMode.setStatus('current')
if mibBuilder.loadTexts: remainInDiagMode.setDescription('When set to TRUE, the device being diagnosed will remain\n             in diagnostic state when the diagnostic test is completed.\n             When set to FALSE, the device will revert to its original\n             state when the diagnostic test is completed.')
consoleOutput = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1, 2), TruthValue().clone('false'))
if mibBuilder.loadTexts: consoleOutput.setStatus('obsolete')
if mibBuilder.loadTexts: consoleOutput.setDescription('If true then the diagnostic result will be displayed on the\n             system console. ')
verboseLevel = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: verboseLevel.setStatus('current')
if mibBuilder.loadTexts: verboseLevel.setDescription('Verbose output level for diagnostic console output\n             display. Higher number indicate more detailed output.')
diagTestId = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 2), TestId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: diagTestId.setStatus('current')
if mibBuilder.loadTexts: diagTestId.setDescription(' Test Identification Number. Used in cardTestResultNotification variable-binding')
cardTestTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3), )
if mibBuilder.loadTexts: cardTestTable.setStatus('current')
if mibBuilder.loadTexts: cardTestTable.setDescription('A table of test available for a card. ')
cardTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cardShelfTestIndex"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cardTestIndex"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cardTestId"))
if mibBuilder.loadTexts: cardTestEntry.setStatus('current')
if mibBuilder.loadTexts: cardTestEntry.setDescription('A conceptual row containing information about tests or dignostics available for\n             a card. ')
cardShelfTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 1), ShelfId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardShelfTestIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cardShelfTestIndex.setDescription(' Shelf Identification Number taken from the Shelf Table. Used as index. ')
cardTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 2), CardId())
if mibBuilder.loadTexts: cardTestIndex.setStatus('current')
if mibBuilder.loadTexts: cardTestIndex.setDescription(' Card Identification Number taken from the CardTable. Used as index. ')
cardTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 3), TestId())
if mibBuilder.loadTexts: cardTestId.setStatus('current')
if mibBuilder.loadTexts: cardTestId.setDescription(' Test Identification Number. Used as index to test table ')
cardTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestName.setStatus('current')
if mibBuilder.loadTexts: cardTestName.setDescription(' A unique name for this test.')
cardTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 5), TestType().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestType.setStatus('current')
if mibBuilder.loadTexts: cardTestType.setDescription(' Test Type.')
cardTestDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestDescription.setStatus('current')
if mibBuilder.loadTexts: cardTestDescription.setDescription(' A short description of the test. ')
cardTestCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 7), TestCommand().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestCommand.setStatus('current')
if mibBuilder.loadTexts: cardTestCommand.setDescription(' Command to be execute this test on this shelf ')
cardTestScheduleCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 8), TestScheduleCommand().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestScheduleCommand.setStatus('current')
if mibBuilder.loadTexts: cardTestScheduleCommand.setDescription(' Schedule Command to be execute this test on this shelf ')
cardTestSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 9), TestSchedule()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestSchedule.setStatus('current')
if mibBuilder.loadTexts: cardTestSchedule.setDescription(' Test Scheduling. ')
cardTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 10), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestTime.setStatus('current')
if mibBuilder.loadTexts: cardTestTime.setDescription(' Test start time. ')
cardTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 11), TestResult().clone('notRun')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestResult.setStatus('current')
if mibBuilder.loadTexts: cardTestResult.setDescription(' Result of the test. ')
cardTestResultDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestResultDesc.setStatus('current')
if mibBuilder.loadTexts: cardTestResultDesc.setDescription('Additional information of the test result. ')
cardTestTransId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 13), TestTransactionId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestTransId.setStatus('current')
if mibBuilder.loadTexts: cardTestTransId.setDescription(' Test transaction Id. ')
equipmentAudit = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6))
auditAutoScheduling = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditAutoScheduling.setStatus('current')
if mibBuilder.loadTexts: auditAutoScheduling.setDescription(' Enable or disable automatic audit execution. ')
auditLogOutput = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogOutput.setStatus('current')
if mibBuilder.loadTexts: auditLogOutput.setDescription(' Enable or disable logging of error entries to system log. ')
auditLogThrottle = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogThrottle.setStatus('current')
if mibBuilder.loadTexts: auditLogThrottle.setDescription(' Enable or disable audit log output throttling to prevent\n              audit errors from flooding the log. ')
auditTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4), )
if mibBuilder.loadTexts: auditTable.setStatus('current')
if mibBuilder.loadTexts: auditTable.setDescription('A table of test available for a card. ')
auditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "auditShelfId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "auditCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "auditId"))
if mibBuilder.loadTexts: auditEntry.setStatus('current')
if mibBuilder.loadTexts: auditEntry.setDescription(' A conceptual row contains information about Audits. ')
auditShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 1), ShelfId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditShelfId.setStatus('deprecated')
if mibBuilder.loadTexts: auditShelfId.setDescription(' Shelf Identification Number taken from the Shelf Table. Used as index. ')
auditCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 2), CardId())
if mibBuilder.loadTexts: auditCardId.setStatus('current')
if mibBuilder.loadTexts: auditCardId.setDescription(' Card Identification Number taken from the CardTable. Used as index. ')
auditId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: auditId.setStatus('current')
if mibBuilder.loadTexts: auditId.setDescription(' Unique ID of the internal Audit ')
auditName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditName.setStatus('current')
if mibBuilder.loadTexts: auditName.setDescription(' Name of the internal Audit ')
auditDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditDescription.setStatus('current')
if mibBuilder.loadTexts: auditDescription.setDescription('Description of the  Audit ')
auditTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditTime.setStatus('current')
if mibBuilder.loadTexts: auditTime.setDescription(' Start time of the audit.  ')
auditCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("runnow", 4))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditCommand.setStatus('current')
if mibBuilder.loadTexts: auditCommand.setDescription(' Audit Commands. The runnow command will stop the currently running \n              audit sequence and start executing requested audit immediated. If \n              enabled, automatic audit schedule will be restarted.')
auditStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditStatus.setStatus('current')
if mibBuilder.loadTexts: auditStatus.setDescription(' Audit status. ')
auditResult = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("abort", 4), ("notRun", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditResult.setStatus('current')
if mibBuilder.loadTexts: auditResult.setDescription(' Audit Result. ')
auditPassedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditPassedCount.setStatus('current')
if mibBuilder.loadTexts: auditPassedCount.setDescription(' Number of passed entry during previous audit run. ')
auditFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditFailedCount.setStatus('current')
if mibBuilder.loadTexts: auditFailedCount.setDescription(' Number of failed entry during previous audit run. ')
auditCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditCycleCount.setStatus('current')
if mibBuilder.loadTexts: auditCycleCount.setDescription(' Number of audit run completed. ')
auditTotalPassedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditTotalPassedCount.setStatus('current')
if mibBuilder.loadTexts: auditTotalPassedCount.setDescription(' Number of cumulative passed entry of all audit runs. ')
auditTotalFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditTotalFailedCount.setStatus('current')
if mibBuilder.loadTexts: auditTotalFailedCount.setDescription(' Number of cumulative failed entry of all audit runs. ')
cmDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8))
cmMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmMacAddress.setDescription('The MAC address for the cable modem')
cmVendor = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmVendor.setStatus('current')
if mibBuilder.loadTexts: cmVendor.setDescription('The vendor name of the cable modem')
cmResetReason = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetReason.setStatus('current')
if mibBuilder.loadTexts: cmResetReason.setDescription('The reason for the cable modem to reset')
cmUChannelID = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmUChannelID.setStatus('current')
if mibBuilder.loadTexts: cmUChannelID.setDescription('The CMTS upstream channel ID which is connected to the cable modem')
cmPrimarySID = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmPrimarySID.setStatus('current')
if mibBuilder.loadTexts: cmPrimarySID.setDescription('The primary Service Identifier (SID) assigned by the CMTS associated with the cable modem')
cmResetStatus = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetStatus.setStatus('current')
if mibBuilder.loadTexts: cmResetStatus.setDescription('The cable modem status before it resets')
cmResetUpTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 7), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetUpTime.setStatus('current')
if mibBuilder.loadTexts: cmResetUpTime.setDescription('This value indicates how long in hundreds of seconds the cable modem\n         is up since it is initial ranged')
cmResetInfo = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetInfo.setStatus('current')
if mibBuilder.loadTexts: cmResetInfo.setDescription('The additional information for the cable modem to reset')
cmIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 9), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmIpAddress.setStatus('current')
if mibBuilder.loadTexts: cmIpAddress.setDescription('The IP Address of the cable modem')
equipmentError = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9))
fpgaErrorEventTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1), )
if mibBuilder.loadTexts: fpgaErrorEventTable.setStatus('current')
if mibBuilder.loadTexts: fpgaErrorEventTable.setDescription('Overrides default handling of FPGA error events.')
fpgaErrorEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "errEventId"))
if mibBuilder.loadTexts: fpgaErrorEventEntry.setStatus('current')
if mibBuilder.loadTexts: fpgaErrorEventEntry.setDescription('A conceptual row containing information about FPGA error event handling.')
errEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: errEventId.setStatus('current')
if mibBuilder.loadTexts: errEventId.setDescription(' Event ID associated with the FPGA error. A row in\n              this table defines behavior for a specific FPGA error\n              that overrides the default behavior of the system. ')
errEvRecoveryEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvRecoveryEnabled.setStatus('current')
if mibBuilder.loadTexts: errEvRecoveryEnabled.setDescription(' If true, the card can be recovered when this FPGA error\n              is detected.  When the card is recovered depends on the\n              setting of errEvRecoveryThreshold. If this value is false,\n              the card will not be recovered when this error is detected. ')
errEvLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvLoggingEnabled.setStatus('current')
if mibBuilder.loadTexts: errEvLoggingEnabled.setDescription(' If true, the card will provide notification of the \n              occurance of the this error.  When the notification\n              occurs is dependent on the setting of \n              errEvLogThrottleThreshold.  The severity of the notification\n              is determined by the setting of errEvLogLevel. ')
errEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvLogLevel.setStatus('current')
if mibBuilder.loadTexts: errEvLogLevel.setDescription(' If errEvLoggingEnabled is true, this setting sets the \n              severity level of the generated notification.  In\n              general, higher values indicate lower severity. ')
errEvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvRowStatus.setStatus('current')
if mibBuilder.loadTexts: errEvRowStatus.setDescription(' The only set actions supported on this table are\n              createAndGo(4) and destroy(6). ')
cadEquipmentMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10))
cadEquipmentMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 1))
cadEquipmentMibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2))
cardPrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 5)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardPrState"))
if mibBuilder.loadTexts: cardPrStateChange.setStatus('current')
if mibBuilder.loadTexts: cardPrStateChange.setDescription(" This trap is sent whenever the card's Primary\n            state changes. ")
cardSecStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 6)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSecState"))
if mibBuilder.loadTexts: cardSecStateChange.setStatus('current')
if mibBuilder.loadTexts: cardSecStateChange.setDescription(" This trap is sent whenever the card's Secondary\n            state changes. ")
cardDetectedChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 7)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSubDetected"))
if mibBuilder.loadTexts: cardDetectedChange.setStatus('current')
if mibBuilder.loadTexts: cardDetectedChange.setDescription(' This trap is sent whenever a new card is detected. ')
cardDplxStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 8)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardDplxStatus"))
if mibBuilder.loadTexts: cardDplxStatusChange.setStatus('current')
if mibBuilder.loadTexts: cardDplxStatusChange.setDescription(" This trap is sent whenever the card's Duplex\n            status changes. ")
portPrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 9)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portType"), ("CADANT-CMTS-EQUIPMENT-MIB", "portPrState"), ("CADANT-CMTS-EQUIPMENT-MIB", "portCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "portDocsIfIndex"))
if mibBuilder.loadTexts: portPrStateChange.setStatus('current')
if mibBuilder.loadTexts: portPrStateChange.setDescription(" This trap is sent whenever the port's Primary\n            state changes. ")
portSecStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 10)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portType"), ("CADANT-CMTS-EQUIPMENT-MIB", "portSecState"), ("CADANT-CMTS-EQUIPMENT-MIB", "portCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "portDocsIfIndex"))
if mibBuilder.loadTexts: portSecStateChange.setStatus('current')
if mibBuilder.loadTexts: portSecStateChange.setDescription(" This trap is sent whenever the port's Secondary\n            state changes. ")
portDplxStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 11)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardDplxStatus"))
if mibBuilder.loadTexts: portDplxStatusChange.setStatus('current')
if mibBuilder.loadTexts: portDplxStatusChange.setDescription(" This trap is sent whenever the port's Duplex\n            status changes. ")
cardTestResultNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 13)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diagTestId"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResult"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResultDesc"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestTransId"))
if mibBuilder.loadTexts: cardTestResultNotification.setStatus('current')
if mibBuilder.loadTexts: cardTestResultNotification.setDescription(' This trap is sent when a test or diagnostic completed on a card. ')
cmResetClearNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 15)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmUChannelID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"))
if mibBuilder.loadTexts: cmResetClearNotification.setStatus('current')
if mibBuilder.loadTexts: cmResetClearNotification.setDescription(' This trap is sent when a CM is on-line from previous flap.')
cmResetNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 16)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmVendor"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetReason"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmUChannelID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmPrimarySID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetUpTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetInfo"))
if mibBuilder.loadTexts: cmResetNotification.setStatus('current')
if mibBuilder.loadTexts: cmResetNotification.setDescription(' This trap is sent when a CM is reset.')
diskVolumeUsageNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 17)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskDriveNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeUsageLevel"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeName"))
if mibBuilder.loadTexts: diskVolumeUsageNotification.setStatus('current')
if mibBuilder.loadTexts: diskVolumeUsageNotification.setDescription('This trap is sent when a disk volume usage level \n             exceed a disk usage threshold.')
diskVolumeAutoDeleteFileNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 18)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskDriveNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeName"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeFileName"))
if mibBuilder.loadTexts: diskVolumeAutoDeleteFileNotification.setStatus('current')
if mibBuilder.loadTexts: diskVolumeAutoDeleteFileNotification.setDescription('This trap is sent when a file is automatically\n             deleted by the system in respond to disk volume\n             usage exceed critical thresholh.')
cardTempOutOfRangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 19)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"))
if mibBuilder.loadTexts: cardTempOutOfRangeNotification.setStatus('current')
if mibBuilder.loadTexts: cardTempOutOfRangeNotification.setDescription('This trap is sent when the card temperature is out of range.')
cardTempNoReportNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 20)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"))
if mibBuilder.loadTexts: cardTempNoReportNotification.setStatus('current')
if mibBuilder.loadTexts: cardTempNoReportNotification.setDescription('This trap is sent when there is no reporting on card temperature.')
cardTempOverHeatNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 21)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"))
if mibBuilder.loadTexts: cardTempOverHeatNotification.setStatus('current')
if mibBuilder.loadTexts: cardTempOverHeatNotification.setDescription('This trap is sent when the card is overheat, card is being shut down.')
downstreamPowerLoss = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 22)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portNumber"))
if mibBuilder.loadTexts: downstreamPowerLoss.setStatus('current')
if mibBuilder.loadTexts: downstreamPowerLoss.setDescription(' This trap is sent when c4 detects the loss of downstream power.')
cmRegistrationNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 23)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmVendor"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmUChannelID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmIpAddress"))
if mibBuilder.loadTexts: cmRegistrationNotification.setStatus('current')
if mibBuilder.loadTexts: cmRegistrationNotification.setDescription(' This trap is sent when a CM is registered.')
systemGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 1)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemGeneralGroup = systemGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: systemGeneralGroup.setDescription(' This group contains a collection of objects general to the overall\n            system. ')
equipmentStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 2)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cardLastChangeTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "portLastChangeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentStateGroup = equipmentStateGroup.setStatus('current')
if mibBuilder.loadTexts: equipmentStateGroup.setDescription(' This group contains a collection of objects general to the state\n             of the equipments. ')
equipmentShelfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 3)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "shelfName"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfSwVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentShelfGroup = equipmentShelfGroup.setStatus('current')
if mibBuilder.loadTexts: equipmentShelfGroup.setDescription(' This group contains a collection of objects general specific to shelf\n              objects. ')
equipmentCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 4)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cardName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSerialNum"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardFwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardHwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardAdminState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardPrState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSecState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardDplxStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardAction"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTrapInh"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumPorts"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSubDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardFwUpdateStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSpareGroupId"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSpareGroupMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardUpTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTemperature"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardCpuType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardCpuSpeed"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardBusSpeed"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardRamSize"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardFlashSize"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardCPLDVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardFpgaSource"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardBootVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardLastBootVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardLastBootSource"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardPicDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardPicSerialNum"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardPicHwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTemperatureHighWarn"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTemperatureHighError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentCardGroup = equipmentCardGroup.setStatus('current')
if mibBuilder.loadTexts: equipmentCardGroup.setDescription(' This group contains a collection of objects general specific to Card \n            table. ')
equipmentPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 5)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "portType"), ("CADANT-CMTS-EQUIPMENT-MIB", "portAdminState"), ("CADANT-CMTS-EQUIPMENT-MIB", "portPrState"), ("CADANT-CMTS-EQUIPMENT-MIB", "portSecState"), ("CADANT-CMTS-EQUIPMENT-MIB", "portDplxStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "portAction"), ("CADANT-CMTS-EQUIPMENT-MIB", "portTrapInh"), ("CADANT-CMTS-EQUIPMENT-MIB", "portNumChans"), ("CADANT-CMTS-EQUIPMENT-MIB", "portMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "portMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "portDetectedMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "portDocsIfIndex"), ("CADANT-CMTS-EQUIPMENT-MIB", "portBgpId"), ("CADANT-CMTS-EQUIPMENT-MIB", "portConnectorId"), ("CADANT-CMTS-EQUIPMENT-MIB", "portCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "portDescription"), ("CADANT-CMTS-EQUIPMENT-MIB", "portCurrDsPower"), ("CADANT-CMTS-EQUIPMENT-MIB", "portMinDsPower"), ("CADANT-CMTS-EQUIPMENT-MIB", "portMaxDsPower"), ("CADANT-CMTS-EQUIPMENT-MIB", "portTxFlowControlMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "portRxFlowControlMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "portTxFlowControlDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "portRxFlowControlDetected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentPortGroup = equipmentPortGroup.setStatus('current')
if mibBuilder.loadTexts: equipmentPortGroup.setDescription(' This group contains a collection of objects specific to Port table. ')
equipmentDiagGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 6)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "remainInDiagMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "verboseLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentDiagGroup = equipmentDiagGroup.setStatus('current')
if mibBuilder.loadTexts: equipmentDiagGroup.setDescription(' This group contains a collection of objects specific to equipment diagnostics. ')
equipmentCardTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 8)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cardTestName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestDescription"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestCommand"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestScheduleCommand"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestSchedule"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResult"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResultDesc"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestTransId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentCardTestGroup = equipmentCardTestGroup.setStatus('current')
if mibBuilder.loadTexts: equipmentCardTestGroup.setDescription(' This group contains a collection of objects specific to card Test group ')
equipmentAuditGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 10)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "auditAutoScheduling"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditLogOutput"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditLogThrottle"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditName"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditDescription"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditCommand"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditResult"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditPassedCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditFailedCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditCycleCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditTotalPassedCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditTotalFailedCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentAuditGroup = equipmentAuditGroup.setStatus('current')
if mibBuilder.loadTexts: equipmentAuditGroup.setDescription(' This group contains a collection of objects specific audit group. ')
diskVolumeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 11)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeName"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeSize"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeUsageLevel"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeUsagePercentage"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeUsageCriticalThreshold"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeUsageMajorThreshold"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeUsageMinorThreshold"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeAutoDeleteUnusedFile"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeTrapInh"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    diskVolumeGroup = diskVolumeGroup.setStatus('current')
if mibBuilder.loadTexts: diskVolumeGroup.setDescription(' This group contains a collection of objects specific to disk volume objects. ')
fpgaErrorEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 12)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "errEvRecoveryEnabled"), ("CADANT-CMTS-EQUIPMENT-MIB", "errEvLoggingEnabled"), ("CADANT-CMTS-EQUIPMENT-MIB", "errEvLogLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fpgaErrorEventGroup = fpgaErrorEventGroup.setStatus('current')
if mibBuilder.loadTexts: fpgaErrorEventGroup.setDescription(' This group contains a collection of objects dealing with FPGA errors. ')
cadEquipmentMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 1, 1)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "systemGeneralGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentStateGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentShelfGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentCardGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentPortGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentDiagGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentCardTestGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentAuditGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "fpgaErrorEventGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadEquipmentMibCompliance = cadEquipmentMibCompliance.setStatus('current')
if mibBuilder.loadTexts: cadEquipmentMibCompliance.setDescription('The compliance statement for entities which\n             implement the Equipment MIB. ')
mibBuilder.exportSymbols("CADANT-CMTS-EQUIPMENT-MIB", portShelfId=portShelfId, cardSpareGroupMode=cardSpareGroupMode, TestCommand=TestCommand, verboseLevel=verboseLevel, diskVolumeFileName=diskVolumeFileName, diskVolumeEntry=diskVolumeEntry, PYSNMP_MODULE_ID=cadEquipmentMib, trapSeverity=trapSeverity, cardNumPorts=cardNumPorts, cadEquipmentMibCompliance=cadEquipmentMibCompliance, auditFailedCount=auditFailedCount, cardTestResult=cardTestResult, diskVolumeNumber=diskVolumeNumber, cardTestTable=cardTestTable, cardCarrierSerialNum=cardCarrierSerialNum, portMacAddress=portMacAddress, cardTestResultDesc=cardTestResultDesc, cadEquipmentMibConformance=cadEquipmentMibConformance, cardTestId=cardTestId, cardAdminState=cardAdminState, auditEntry=auditEntry, cmDevice=cmDevice, systemGeneralGroup=systemGeneralGroup, shelfObjects=shelfObjects, portCurrDsPower=portCurrDsPower, diskVolumeAutoDeleteUnusedFile=diskVolumeAutoDeleteUnusedFile, diskVolumeUsageNotification=diskVolumeUsageNotification, portSecState=portSecState, portBgpId=portBgpId, cardShelfId=cardShelfId, diskVolumeUsageLevel=diskVolumeUsageLevel, cardTempOutOfRangeNotification=cardTempOutOfRangeNotification, consoleOutput=consoleOutput, cardTempNoReportNotification=cardTempNoReportNotification, portMode=portMode, diskVolumeShelfId=diskVolumeShelfId, auditTotalPassedCount=auditTotalPassedCount, cardFwVersion=cardFwVersion, cmUChannelID=cmUChannelID, cmResetClearNotification=cmResetClearNotification, cadEquipmentMibCompliances=cadEquipmentMibCompliances, cmRegistrationNotification=cmRegistrationNotification, cardDplxStatusChange=cardDplxStatusChange, diskVolumeUsageMajorThreshold=diskVolumeUsageMajorThreshold, auditTable=auditTable, systemKey=systemKey, cardTestTransId=cardTestTransId, portDetectedMode=portDetectedMode, auditCardId=auditCardId, diskVolumeDiskSize=diskVolumeDiskSize, diskVolumeAutoDeleteFileNotification=diskVolumeAutoDeleteFileNotification, portType=portType, cardTestSchedule=cardTestSchedule, equipmentAuditGroup=equipmentAuditGroup, cardType=cardType, cardFlashSize=cardFlashSize, remainInDiagMode=remainInDiagMode, cardBootVersion=cardBootVersion, equipmentCardTestGroup=equipmentCardTestGroup, fpgaErrorEventTable=fpgaErrorEventTable, cardDplxStatus=cardDplxStatus, portCardSubType=portCardSubType, cardPrStateChange=cardPrStateChange, errEvLogLevel=errEvLogLevel, fpgaErrorEventGroup=fpgaErrorEventGroup, portRxFlowControlMode=portRxFlowControlMode, cardLastResetReason=cardLastResetReason, portTxFlowControlDetected=portTxFlowControlDetected, equipmentStateGroup=equipmentStateGroup, cardTestType=cardTestType, cadEquipmentMib=cadEquipmentMib, TestType=TestType, cardPicDetected=cardPicDetected, portMaxDsPower=portMaxDsPower, cardSecStateChange=cardSecStateChange, cardFpgaSource=cardFpgaSource, TestId=TestId, cardSubType=cardSubType, cardDetected=cardDetected, cardTempOverHeatNotification=cardTempOverHeatNotification, auditCommand=auditCommand, portDplxStatusChange=portDplxStatusChange, trapCounter=trapCounter, cardTestResultNotification=cardTestResultNotification, TestTransactionId=TestTransactionId, downstreamPowerLoss=downstreamPowerLoss, cardBusSpeed=cardBusSpeed, errEvRowStatus=errEvRowStatus, cardCpuType=cardCpuType, equipmentTbl=equipmentTbl, diskVolumeGroup=diskVolumeGroup, portMinDsPower=portMinDsPower, shelfNumber=shelfNumber, portDplxStatus=portDplxStatus, auditStatus=auditStatus, cardShelfTestIndex=cardShelfTestIndex, equipmentShelfGroup=equipmentShelfGroup, cardTemperatureHighWarn=cardTemperatureHighWarn, cardLastChangeTime=cardLastChangeTime, auditAutoScheduling=auditAutoScheduling, cardRamSize=cardRamSize, auditTime=auditTime, auditResult=auditResult, diskVolumeCardId=diskVolumeCardId, equipmentDiagGroup=equipmentDiagGroup, diskVolumeUsagePercentage=diskVolumeUsagePercentage, cardPicSerialNum=cardPicSerialNum, cardTemperatureHighError=cardTemperatureHighError, portId=portId, cardTestDescription=cardTestDescription, diskVolumeUsageMinorThreshold=diskVolumeUsageMinorThreshold, auditDescription=auditDescription, auditLogThrottle=auditLogThrottle, cardTestCommand=cardTestCommand, auditCycleCount=auditCycleCount, equipmentDiag=equipmentDiag, portDescription=portDescription, cardPrState=cardPrState, cardCarrierFwVersion=cardCarrierFwVersion, cardTestIndex=cardTestIndex, diagTestId=diagTestId, auditShelfId=auditShelfId, cardTestScheduleCommand=cardTestScheduleCommand, cardFwUpdateStatus=cardFwUpdateStatus, portConnectorId=portConnectorId, eqDiagConfig=eqDiagConfig, diskVolumeTrapInh=diskVolumeTrapInh, cardTable=cardTable, cmResetStatus=cmResetStatus, cmResetInfo=cmResetInfo, diskVolumeTable=diskVolumeTable, diskDriveNumber=diskDriveNumber, TestResult=TestResult, portCardId=portCardId, auditTotalFailedCount=auditTotalFailedCount, cardSerialNum=cardSerialNum, cmVendor=cmVendor, cardHwVersion=cardHwVersion, equipmentCardGroup=equipmentCardGroup, cardCpuSpeed=cardCpuSpeed, equipmentAudit=equipmentAudit, equipmentTraps=equipmentTraps, portTable=portTable, portAction=portAction, portRxFlowControlDetected=portRxFlowControlDetected, cardTemperature=cardTemperature, equipmentError=equipmentError, cardSwVersion=cardSwVersion, cmResetUpTime=cmResetUpTime, cardId=cardId, shelfName=shelfName, cardCarrierHwVersion=cardCarrierHwVersion, portNumChans=portNumChans, cadEquipmentMibGroup=cadEquipmentMibGroup, cardTestName=cardTestName, shelfSwVersion=shelfSwVersion, cardNumber=cardNumber, cardTrapInh=cardTrapInh, portTrapInh=portTrapInh, systemClock=systemClock, cardSecState=cardSecState, cardUpTime=cardUpTime, portDocsIfIndex=portDocsIfIndex, portNumber=portNumber, cardSpareGroupId=cardSpareGroupId, diskVolumeName=diskVolumeName, diskVolumeUsageCriticalThreshold=diskVolumeUsageCriticalThreshold, systemGeneral=systemGeneral, portTxFlowControlMode=portTxFlowControlMode, cmPrimarySID=cmPrimarySID, cardDetectedChange=cardDetectedChange, portPrStateChange=portPrStateChange, errEvLoggingEnabled=errEvLoggingEnabled, errEvRecoveryEnabled=errEvRecoveryEnabled, cardPicHwVersion=cardPicHwVersion, portSecStateChange=portSecStateChange, equipmentPortGroup=equipmentPortGroup, cmMacAddress=cmMacAddress, equipmentState=equipmentState, cardTestEntry=cardTestEntry, cardEntry=cardEntry, auditLogOutput=auditLogOutput, auditPassedCount=auditPassedCount, cardSubDetected=cardSubDetected, cardTestTime=cardTestTime, portLastChangeTime=portLastChangeTime, cardLastBootSource=cardLastBootSource, cmResetReason=cmResetReason, errEventId=errEventId, portEntry=portEntry, cardAction=cardAction, fpgaErrorEventEntry=fpgaErrorEventEntry, diskVolumeId=diskVolumeId, diskVolumeSize=diskVolumeSize, auditId=auditId, portAdminState=portAdminState, cardLastBootVersion=cardLastBootVersion, cmIpAddress=cmIpAddress, diskVolumeDriveId=diskVolumeDriveId, TestSchedule=TestSchedule, TestScheduleCommand=TestScheduleCommand, cmResetNotification=cmResetNotification, cardCPLDVersion=cardCPLDVersion, portPrState=portPrState, portMacIfIndex=portMacIfIndex, auditName=auditName, cardName=cardName)
