#
# PySNMP MIB module VIPRINET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/viprinet/VIPRINET-MIB
# Produced by pysmi-1.1.12 at Wed May 29 07:23:27 2024
# On host fv-az1114-382 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, Unsigned32, MibIdentifier, Counter64, Counter32, TimeTicks, iso, Gauge32, enterprises, NotificationType, IpAddress, ModuleIdentity, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "MibIdentifier", "Counter64", "Counter32", "TimeTicks", "iso", "Gauge32", "enterprises", "NotificationType", "IpAddress", "ModuleIdentity", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
viprinet = ModuleIdentity((1, 3, 6, 1, 4, 1, 35424))
viprinet.setRevisions(('2015-09-28 16:20',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: viprinet.setRevisionsDescriptions(('Seventh revision.',))
if mibBuilder.loadTexts: viprinet.setLastUpdated('201509281620Z')
if mibBuilder.loadTexts: viprinet.setOrganization('Viprinet')
if mibBuilder.loadTexts: viprinet.setContactInfo('Viprinet')
if mibBuilder.loadTexts: viprinet.setDescription('This MIB complements the ViprinetMIB.')
vpnRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 35424, 1))
vpnRouterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 35424, 1, 1))
vpnRouterHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 35424, 1, 2))
vpnRouterFans = MibIdentifier((1, 3, 6, 1, 4, 1, 35424, 1, 3))
vpnRouterInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 35424, 1, 4))
vpnRouterTunnels = MibIdentifier((1, 3, 6, 1, 4, 1, 35424, 1, 5))
vpnRouterTunnelChannels = MibIdentifier((1, 3, 6, 1, 4, 1, 35424, 1, 6))
vpnRouterName = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterName.setStatus('current')
if mibBuilder.loadTexts: vpnRouterName.setDescription('A short descriptive name of the router.')
vpnRouterSerial = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterSerial.setStatus('current')
if mibBuilder.loadTexts: vpnRouterSerial.setDescription('Serial number of this router.')
vpnRouterModel = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterModel.setStatus('current')
if mibBuilder.loadTexts: vpnRouterModel.setDescription('Router Model')
vpnRouterFirmware = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(22, 22)).setFixedLength(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterFirmware.setStatus('current')
if mibBuilder.loadTexts: vpnRouterFirmware.setDescription('Firmware Version currently running on this router.')
vpnRouterMode = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterMode.setStatus('current')
if mibBuilder.loadTexts: vpnRouterMode.setDescription('Current mode that the router is running in. Possible values are:\n        0 - Node\n        1 - Hub\n        2 - Hub running as HotSpare\n        3 - Hotspare-Hub replacing another router')
vpnRouteruptime = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouteruptime.setStatus('current')
if mibBuilder.loadTexts: vpnRouteruptime.setDescription('Elapsed time since the router has booted.')
vpnRouterFirmwareStatus = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterFirmwareStatus.setStatus('current')
if mibBuilder.loadTexts: vpnRouterFirmwareStatus.setDescription('Current Status of the Update System. Possible values are:\n        0 - Idle / No new firmware available\n        1 - Updates Available\n        2 - Checking for Updates\n        3 - Downloading Update\n        4 - Installing Update')
vpnRouterCPULoad = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterCPULoad.setStatus('current')
if mibBuilder.loadTexts: vpnRouterCPULoad.setDescription('Load average on this router')
vpnRouterMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: vpnRouterMemoryUsage.setDescription('Current total memory usage (in KByte).')
vpnRouterSystemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterSystemTemperature.setStatus('current')
if mibBuilder.loadTexts: vpnRouterSystemTemperature.setDescription('Current system temperature (in degree Celsius).')
vpnRouterCPUTemperature = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterCPUTemperature.setStatus('current')
if mibBuilder.loadTexts: vpnRouterCPUTemperature.setDescription('Current CPU temperature (in degree Celsius)')
vpnRouterPowerSupplyFailure = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterPowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: vpnRouterPowerSupplyFailure.setDescription('Information about the PSU\n        Possible Values are:\n        0 = no failure\n        1 = a single PSU is out of order')
vpnRouterFanCount = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterFanCount.setStatus('current')
if mibBuilder.loadTexts: vpnRouterFanCount.setDescription('Number of Fans.')
vpnRouterFanTable = MibTable((1, 3, 6, 1, 4, 1, 35424, 1, 3, 2), )
if mibBuilder.loadTexts: vpnRouterFanTable.setStatus('current')
if mibBuilder.loadTexts: vpnRouterFanTable.setDescription('The table holding information to each fan.')
vpnRouterFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35424, 1, 3, 2, 1), ).setIndexNames((0, "VIPRINET-MIB", "vpnRouterFanIndex"))
if mibBuilder.loadTexts: vpnRouterFanEntry.setStatus('current')
if mibBuilder.loadTexts: vpnRouterFanEntry.setDescription('The entry associated with each fan.')
vpnRouterFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vpnRouterFanIndex.setStatus('current')
if mibBuilder.loadTexts: vpnRouterFanIndex.setDescription('ID-Number of the fan')
vpnRouterFanAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterFanAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vpnRouterFanAdminStatus.setDescription('Desired state of this Fan\n         Possible Values:\n         0 = off\n         1 = on')
vpnRouterFanOperativeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterFanOperativeStatus.setStatus('current')
if mibBuilder.loadTexts: vpnRouterFanOperativeStatus.setDescription('Operative status of this fan\n          0 = Disabled\n          1 = OK\n          2 = Faulty')
vpnRouterFanRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterFanRPM.setStatus('current')
if mibBuilder.loadTexts: vpnRouterFanRPM.setDescription('Current RPM of this fan.  Note that not all models supply this info.')
vpnRouterInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceCount.setDescription('Number of Interfaces.')
vpnRouterInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2), )
if mibBuilder.loadTexts: vpnRouterInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceTable.setDescription('The table holding information to each interface.')
vpnRouterInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1), ).setIndexNames((0, "VIPRINET-MIB", "vpnRouterInterfaceIndex"))
if mibBuilder.loadTexts: vpnRouterInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceEntry.setDescription('The entry associated with each interface.')
vpnRouterInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vpnRouterInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceIndex.setDescription('ID-Number of the interface.')
vpnRouterInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceName.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceName.setDescription('A short descriptive name of  the interface')
vpnRouterInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceAdminStatus.setDescription('Desired state of the interface.\n        possible values: 0 = disconnected, 1 = connected')
vpnRouterInterfaceOperativeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceOperativeStatus.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceOperativeStatus.setDescription('Current state of the interface.\n         possible values: \n         0 = disconnected,\n         1 = connected,\n         2 = connecting,\n         3 = disconnecting')
vpnRouterInterfaceBandwidthToWan = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceBandwidthToWan.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceBandwidthToWan.setDescription('Theoretical maximum upstream (in KBit). Might be illusional.')
vpnRouterInterfaceBandwidthFromWan = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceBandwidthFromWan.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceBandwidthFromWan.setDescription('Theoretical maximum downstream (in KBit).')
vpnRouterInterfaceTrafficUp = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceTrafficUp.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceTrafficUp.setDescription('Total upstream traffic made (in Byte) since router boot.')
vpnRouterInterfaceTrafficDown = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceTrafficDown.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceTrafficDown.setDescription('Total downstream traffic made (in Byte) since router boot.')
vpnRouterInterfaceSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceSignalStrength.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceSignalStrength.setDescription('Signal Strength (in percent).')
vpnRouterInterfaceServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceServiceType.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceServiceType.setDescription('Interface Service Type.')
vpnRouterInterfaceServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceServiceStatus.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceServiceStatus.setDescription('Service Status.')
vpnRouterInterfaceRoaming = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceRoaming.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceRoaming.setDescription('Interface Roaming.\n         possible values: \n         0 = off,\n         1 = on')
vpnRouterInterfaceNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceNetworkName.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceNetworkName.setDescription('Interface Network Name.')
vpnRouterInterfaceBandInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceBandInfo.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceBandInfo.setDescription('Interface Band Info.')
vpnRouterInterfaceIMSI = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceIMSI.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceIMSI.setDescription('Interface IMSI.')
vpnRouterInterfaceIMEI = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceIMEI.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceIMEI.setDescription('Interface IMEI.')
vpnRouterInterfacePINStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfacePINStatus.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfacePINStatus.setDescription('Interface PIN Status.')
vpnRouterInterfaceRFBand = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceRFBand.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceRFBand.setDescription('Interface RF Band.')
vpnRouterInterfaceRFChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceRFChannel.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceRFChannel.setDescription('Interface RF Channel.')
vpnRouterInterfaceSyncrateUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceSyncrateUpstream.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceSyncrateUpstream.setDescription('Interface Syncrate Upstream.')
vpnRouterInterfaceSyncrateDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterInterfaceSyncrateDownstream.setStatus('current')
if mibBuilder.loadTexts: vpnRouterInterfaceSyncrateDownstream.setDescription('Interface Syncrate Downstream.')
vpnRouterTunnelCount = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelCount.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelCount.setDescription('Number of Tunnels.')
vpnRouterTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 35424, 1, 5, 2), )
if mibBuilder.loadTexts: vpnRouterTunnelTable.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelTable.setDescription('The table holding information to each tunnel.')
vpnRouterTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35424, 1, 5, 2, 1), ).setIndexNames((0, "VIPRINET-MIB", "vpnRouterTunnelIndex"))
if mibBuilder.loadTexts: vpnRouterTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelEntry.setDescription('The entry associated with each tunnel.')
vpnRouterTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vpnRouterTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelIndex.setDescription('ID-Number of the tunnel.')
vpnRouterTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelName.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelName.setDescription('Name of VPN tunnel')
vpnRouterTunnelAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelAdminStatus.setDescription('Desired state of the tunnel.\n        possible values: 0 = disconnected,  1 = connected')
vpnRouterTunnelOperativeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelOperativeStatus.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelOperativeStatus.setDescription('Current state of the tunnel.\n         possible values: \n         0 = disconnected,\n         1 = connected')
vpnRouterTunnelCumulatedBandwidthToWan = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelCumulatedBandwidthToWan.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelCumulatedBandwidthToWan.setDescription('Theoretical maximum cumulated downstream (in KBit), considering all active channels.')
vpnRouterTunnelCumulatedBandwidthFromWan = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelCumulatedBandwidthFromWan.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelCumulatedBandwidthFromWan.setDescription('Theoretical maximum cumulated upstream (in KBit), considering all active channels.')
vpnRouterTunnelCurrentCumulatedBandwidthToWan = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelCurrentCumulatedBandwidthToWan.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelCurrentCumulatedBandwidthToWan.setDescription('Current cumulated upstream (in KBit).')
vpnRouterTunnelCurrentCumulatedBandwidthFromWan = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelCurrentCumulatedBandwidthFromWan.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelCurrentCumulatedBandwidthFromWan.setDescription('Current cumulated downstream (in KBit).')
vpnRouterTunnelTrafficUp = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelTrafficUp.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelTrafficUp.setDescription('Total upstream traffic made (in Byte) since router boot.')
vpnRouterTunnelTrafficDown = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelTrafficDown.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelTrafficDown.setDescription('Total downstream traffic made (in Byte) since router boot.')
vpnRouterTunnelRemoteRouterSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 5, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelRemoteRouterSerial.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelRemoteRouterSerial.setDescription('Serial of the remote router.')
vpnRouterTunnelChannelCount = MibScalar((1, 3, 6, 1, 4, 1, 35424, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelCount.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelCount.setDescription('Number of TunnelChannel.')
vpnRouterTunnelChannelTable = MibTable((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2), )
if mibBuilder.loadTexts: vpnRouterTunnelChannelTable.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelTable.setDescription('The table holding information to each tunnelchannel.')
vpnRouterTunnelChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1), ).setIndexNames((0, "VIPRINET-MIB", "vpnRouterTunnelChannelIndex"))
if mibBuilder.loadTexts: vpnRouterTunnelChannelEntry.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelEntry.setDescription('The entry associated with each tunnelchannel.')
vpnRouterTunnelChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vpnRouterTunnelChannelIndex.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelIndex.setDescription('ID-Number of the tunnelchannel.')
vpnRouterTunnelChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelName.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelName.setDescription('Name of tunnelchannel. It will be in the form tunnel.tunnelname')
vpnRouterTunnelChannelAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelAdminStatus.setDescription('Desired state of the tunnelchannel.\n        possible values: 0 = disconnected,  1 = connected')
vpnRouterTunnelChannelOperativeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelOperativeStatus.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelOperativeStatus.setDescription('Current state of the tunnelchannel.\n         possible values: \n         0 = disconnected,\n         1 = connected,\n         2 = connecting,\n         3 = disconnecting,\n         4 = connectedpingtest,\n         5 = connectedpingtestwait,\n         6 = connectedtooslow,\n         7 = connectedstalled,\n         8 = error')
vpnRouterTunnelChannelMaxBandwidthToWan = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelMaxBandwidthToWan.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelMaxBandwidthToWan.setDescription('Maximum possible bandwidth to WAN (in KBit/sec).')
vpnRouterTunnelChannelMaxBandwidthFromWan = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelMaxBandwidthFromWan.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelMaxBandwidthFromWan.setDescription('Maximum possible bandwidth from WAN (in KBit/sec).')
vpnRouterTunnelChannelCurrentBandwidthToWan = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelCurrentBandwidthToWan.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelCurrentBandwidthToWan.setDescription('Current bandwidth to WAN (in KBit/sec).')
vpnRouterTunnelChannelCurrentBandwidthFromWan = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelCurrentBandwidthFromWan.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelCurrentBandwidthFromWan.setDescription('Current bandwidth from WAN (in KBit/sec).')
vpnRouterTunnelChannelTrafficUp = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelTrafficUp.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelTrafficUp.setDescription('Total upstream traffic made (in Byte) since router boot.')
vpnRouterTunnelChannelTrafficDown = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelTrafficDown.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelTrafficDown.setDescription('Total downstream traffic made (in Byte) since router boot.')
vpnRouterTunnelChannelReferencedTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelReferencedTunnel.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelReferencedTunnel.setDescription('The OID of the tunnel that this channel is referencing to.')
vpnRouterTunnelChannelIsBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelIsBackup.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelIsBackup.setDescription('Is this channel configured as fallback? Possible Values:\n         0 = no,\n         1 = yes')
vpnRouterTunnelChannelModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelModuleSlot.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelModuleSlot.setDescription('Module that the channel is using.\n         Possible Values:\n         0 = Hub WAN-Interface,\n         1 = Module in Slot 1,\n         2 = Module in Slot 2,\n         3 = Module in Slot 3,\n         4 = Module in Slot 4,\n         5 = Module in Slot 5,\n         6 = Module in Slot 6')
vpnRouterTunnelChannelPacketLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelPacketLoss.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelPacketLoss.setDescription('Overall packetloss experienced (in %) on the channel-connection.')
vpnRouterTunnelChannelLinkStability = MibTableColumn((1, 3, 6, 1, 4, 1, 35424, 1, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnRouterTunnelChannelLinkStability.setStatus('current')
if mibBuilder.loadTexts: vpnRouterTunnelChannelLinkStability.setDescription('Estimated Link Stability (in %) of  the channel-connection.')
vpnRouterConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 35424, 1, 7))
vpnRouterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 35424, 1, 7, 1))
vpnRouterCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 35424, 1, 7, 2))
vpnRouterReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 35424, 1, 7, 2, 1)).setObjects(("VIPRINET-MIB", "vpnRouterObjects"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vpnRouterReadOnlyCompliance = vpnRouterReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: vpnRouterReadOnlyCompliance.setDescription('When this MIB is implemented without support for read-\n         create (i.e., in read-only mode), the implementation can\n         claim read-only compliance.')
vpnRouterObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 35424, 1, 7, 1, 1)).setObjects(("VIPRINET-MIB", "vpnRouterTunnelChannelName"), ("VIPRINET-MIB", "vpnRouterTunnelChannelAdminStatus"), ("VIPRINET-MIB", "vpnRouterTunnelChannelOperativeStatus"), ("VIPRINET-MIB", "vpnRouterTunnelChannelMaxBandwidthToWan"), ("VIPRINET-MIB", "vpnRouterTunnelChannelMaxBandwidthFromWan"), ("VIPRINET-MIB", "vpnRouterTunnelChannelCurrentBandwidthToWan"), ("VIPRINET-MIB", "vpnRouterTunnelChannelCurrentBandwidthFromWan"), ("VIPRINET-MIB", "vpnRouterTunnelChannelTrafficUp"), ("VIPRINET-MIB", "vpnRouterTunnelChannelTrafficDown"), ("VIPRINET-MIB", "vpnRouterTunnelChannelReferencedTunnel"), ("VIPRINET-MIB", "vpnRouterTunnelChannelIsBackup"), ("VIPRINET-MIB", "vpnRouterTunnelChannelModuleSlot"), ("VIPRINET-MIB", "vpnRouterTunnelChannelPacketLoss"), ("VIPRINET-MIB", "vpnRouterTunnelChannelLinkStability"), ("VIPRINET-MIB", "vpnRouterTunnelName"), ("VIPRINET-MIB", "vpnRouterTunnelAdminStatus"), ("VIPRINET-MIB", "vpnRouterTunnelOperativeStatus"), ("VIPRINET-MIB", "vpnRouterTunnelCumulatedBandwidthToWan"), ("VIPRINET-MIB", "vpnRouterTunnelCumulatedBandwidthFromWan"), ("VIPRINET-MIB", "vpnRouterTunnelCurrentCumulatedBandwidthToWan"), ("VIPRINET-MIB", "vpnRouterTunnelCurrentCumulatedBandwidthFromWan"), ("VIPRINET-MIB", "vpnRouterTunnelTrafficUp"), ("VIPRINET-MIB", "vpnRouterTunnelTrafficDown"), ("VIPRINET-MIB", "vpnRouterTunnelRemoteRouterSerial"), ("VIPRINET-MIB", "vpnRouterInterfaceName"), ("VIPRINET-MIB", "vpnRouterInterfaceAdminStatus"), ("VIPRINET-MIB", "vpnRouterInterfaceOperativeStatus"), ("VIPRINET-MIB", "vpnRouterInterfaceBandwidthToWan"), ("VIPRINET-MIB", "vpnRouterInterfaceBandwidthFromWan"), ("VIPRINET-MIB", "vpnRouterInterfaceTrafficUp"), ("VIPRINET-MIB", "vpnRouterInterfaceTrafficDown"), ("VIPRINET-MIB", "vpnRouterFanAdminStatus"), ("VIPRINET-MIB", "vpnRouterFanOperativeStatus"), ("VIPRINET-MIB", "vpnRouterFanRPM"), ("VIPRINET-MIB", "vpnRouterName"), ("VIPRINET-MIB", "vpnRouterSerial"), ("VIPRINET-MIB", "vpnRouterModel"), ("VIPRINET-MIB", "vpnRouterFirmware"), ("VIPRINET-MIB", "vpnRouterMode"), ("VIPRINET-MIB", "vpnRouteruptime"), ("VIPRINET-MIB", "vpnRouterFirmwareStatus"), ("VIPRINET-MIB", "vpnRouterCPULoad"), ("VIPRINET-MIB", "vpnRouterMemoryUsage"), ("VIPRINET-MIB", "vpnRouterSystemTemperature"), ("VIPRINET-MIB", "vpnRouterCPUTemperature"), ("VIPRINET-MIB", "vpnRouterPowerSupplyFailure"), ("VIPRINET-MIB", "vpnRouterFanCount"), ("VIPRINET-MIB", "vpnRouterInterfaceCount"), ("VIPRINET-MIB", "vpnRouterTunnelCount"), ("VIPRINET-MIB", "vpnRouterTunnelChannelCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vpnRouterObjects = vpnRouterObjects.setStatus('current')
if mibBuilder.loadTexts: vpnRouterObjects.setDescription('The Objects of the vpnRouter.')
mibBuilder.exportSymbols("VIPRINET-MIB", vpnRouterFanTable=vpnRouterFanTable, vpnRouterInterfaceEntry=vpnRouterInterfaceEntry, vpnRouterInterfaceServiceStatus=vpnRouterInterfaceServiceStatus, viprinet=viprinet, vpnRouterFanCount=vpnRouterFanCount, vpnRouterTunnelChannelPacketLoss=vpnRouterTunnelChannelPacketLoss, vpnRouterSerial=vpnRouterSerial, vpnRouterTunnelIndex=vpnRouterTunnelIndex, vpnRouterInterfaceTrafficUp=vpnRouterInterfaceTrafficUp, vpnRouterInterfaceIMEI=vpnRouterInterfaceIMEI, vpnRouterInterfaceSyncrateDownstream=vpnRouterInterfaceSyncrateDownstream, vpnRouterHealth=vpnRouterHealth, vpnRouterGroups=vpnRouterGroups, vpnRouterTunnelChannelAdminStatus=vpnRouterTunnelChannelAdminStatus, vpnRouterTunnelCurrentCumulatedBandwidthFromWan=vpnRouterTunnelCurrentCumulatedBandwidthFromWan, vpnRouterTunnelChannels=vpnRouterTunnelChannels, vpnRouterInterfaceName=vpnRouterInterfaceName, vpnRouterInterfaceTrafficDown=vpnRouterInterfaceTrafficDown, vpnRouterInterfaceServiceType=vpnRouterInterfaceServiceType, vpnRouterTunnelChannelTrafficUp=vpnRouterTunnelChannelTrafficUp, vpnRouterName=vpnRouterName, vpnRouterTunnelChannelCurrentBandwidthFromWan=vpnRouterTunnelChannelCurrentBandwidthFromWan, vpnRouterInterfaceTable=vpnRouterInterfaceTable, vpnRouterFanIndex=vpnRouterFanIndex, vpnRouterInterfaces=vpnRouterInterfaces, vpnRouterFanAdminStatus=vpnRouterFanAdminStatus, vpnRouterObjects=vpnRouterObjects, vpnRouterInterfaceCount=vpnRouterInterfaceCount, PYSNMP_MODULE_ID=viprinet, vpnRouterFirmwareStatus=vpnRouterFirmwareStatus, vpnRouterTunnelAdminStatus=vpnRouterTunnelAdminStatus, vpnRouterInterfaceAdminStatus=vpnRouterInterfaceAdminStatus, vpnRouterTunnelChannelIndex=vpnRouterTunnelChannelIndex, vpnRouterTunnelCumulatedBandwidthFromWan=vpnRouterTunnelCumulatedBandwidthFromWan, vpnRouterMemoryUsage=vpnRouterMemoryUsage, vpnRouterTunnelCount=vpnRouterTunnelCount, vpnRouterTunnelChannelTrafficDown=vpnRouterTunnelChannelTrafficDown, vpnRouterTunnelChannelOperativeStatus=vpnRouterTunnelChannelOperativeStatus, vpnRouterInterfaceSyncrateUpstream=vpnRouterInterfaceSyncrateUpstream, vpnRouterMode=vpnRouterMode, vpnRouterTunnelChannelEntry=vpnRouterTunnelChannelEntry, vpnRouterInterfaceNetworkName=vpnRouterInterfaceNetworkName, vpnRouterInterfaceOperativeStatus=vpnRouterInterfaceOperativeStatus, vpnRouterConformance=vpnRouterConformance, vpnRouteruptime=vpnRouteruptime, vpnRouterTunnelChannelMaxBandwidthToWan=vpnRouterTunnelChannelMaxBandwidthToWan, vpnRouterCPUTemperature=vpnRouterCPUTemperature, vpnRouterTunnelChannelIsBackup=vpnRouterTunnelChannelIsBackup, vpnRouterInterfaceBandInfo=vpnRouterInterfaceBandInfo, vpnRouterFans=vpnRouterFans, vpnRouter=vpnRouter, vpnRouterTunnelEntry=vpnRouterTunnelEntry, vpnRouterTunnelOperativeStatus=vpnRouterTunnelOperativeStatus, vpnRouterInterfaceBandwidthFromWan=vpnRouterInterfaceBandwidthFromWan, vpnRouterTunnelCumulatedBandwidthToWan=vpnRouterTunnelCumulatedBandwidthToWan, vpnRouterInterfaceSignalStrength=vpnRouterInterfaceSignalStrength, vpnRouterInterfaceIMSI=vpnRouterInterfaceIMSI, vpnRouterCompliances=vpnRouterCompliances, vpnRouterFirmware=vpnRouterFirmware, vpnRouterTunnelTrafficUp=vpnRouterTunnelTrafficUp, vpnRouterInterfaceRFChannel=vpnRouterInterfaceRFChannel, vpnRouterTunnelChannelName=vpnRouterTunnelChannelName, vpnRouterTunnelTable=vpnRouterTunnelTable, vpnRouterCPULoad=vpnRouterCPULoad, vpnRouterInterfacePINStatus=vpnRouterInterfacePINStatus, vpnRouterFanRPM=vpnRouterFanRPM, vpnRouterTunnelTrafficDown=vpnRouterTunnelTrafficDown, vpnRouterTunnelChannelModuleSlot=vpnRouterTunnelChannelModuleSlot, vpnRouterFanEntry=vpnRouterFanEntry, vpnRouterTunnelChannelMaxBandwidthFromWan=vpnRouterTunnelChannelMaxBandwidthFromWan, vpnRouterFanOperativeStatus=vpnRouterFanOperativeStatus, vpnRouterTunnelChannelLinkStability=vpnRouterTunnelChannelLinkStability, vpnRouterTunnelChannelCurrentBandwidthToWan=vpnRouterTunnelChannelCurrentBandwidthToWan, vpnRouterTunnels=vpnRouterTunnels, vpnRouterInterfaceBandwidthToWan=vpnRouterInterfaceBandwidthToWan, vpnRouterInterfaceRoaming=vpnRouterInterfaceRoaming, vpnRouterInterfaceRFBand=vpnRouterInterfaceRFBand, vpnRouterModel=vpnRouterModel, vpnRouterTunnelCurrentCumulatedBandwidthToWan=vpnRouterTunnelCurrentCumulatedBandwidthToWan, vpnRouterInterfaceIndex=vpnRouterInterfaceIndex, vpnRouterSystemTemperature=vpnRouterSystemTemperature, vpnRouterPowerSupplyFailure=vpnRouterPowerSupplyFailure, vpnRouterTunnelChannelTable=vpnRouterTunnelChannelTable, vpnRouterReadOnlyCompliance=vpnRouterReadOnlyCompliance, vpnRouterTunnelName=vpnRouterTunnelName, vpnRouterTunnelChannelReferencedTunnel=vpnRouterTunnelChannelReferencedTunnel, vpnRouterTunnelChannelCount=vpnRouterTunnelChannelCount, vpnRouterInfo=vpnRouterInfo, vpnRouterTunnelRemoteRouterSerial=vpnRouterTunnelRemoteRouterSerial)
