#
# PySNMP MIB module ADVA-FSPR7-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/ADVA-FSPR7-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 08:49:49 2024
# On host fv-az2028-26 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
FspR7SnmpPrivLevel, FspR7AidType, FspR7TopologyType, FspR7TimDetMode, FspR7LacpTimeout, FspR7EdfaOutputPowerRating, FspR7AccessNcuC2, FspR7Mapping, FspR7ChannelRangeInventory, FspR7MpState, FspR7SnmpHexString, FspR7BidirectionalChannel, FspR7ChannelNumberCaps, FfpType, FspR7CapInventory, FspR7RenewMode, FspR7YcableType, FspR7Baund, FspR7TypeCrs, FspR7SdnInterface, FspR7PrivacyKeyType, FspR7TerminateSessions, FspR7FlowControlMode, FspR7FunctionCrs, FspR7LagState, FspR7XfpDecisionThres, FspR7IpMode, FspR7OpticalSubBand, FspR7SwitchOverCause, FspR7OpticalInterfaceReach, FspR7IpType, FspR7SnmpLongString, FspR7PortMode, FspR7TrafficDirection, FspR7PasswordHashType, FspR7TransmissionMode, FspR7NtpTestStatus, FspR7MuxMethod, FspR7LicenseServerStatus, FspR7AccessStatus, ApsType, FspR7ChannelIdentifier, FspR7DCFiberType, FspR7LicenseFilesInstall, FspR7YesNo, FspR7NCTRouteType, FspR7NumberOfChannels, FspR7NoYes, FspR7OpticalMultiplexLevel, FspR7LagPortType, FspR7PmSnapshotStatus, FspR7TiltSet, FspR7Gain, FspR7AdminState, FspR7InterfaceFunction, FspR7FltrCableType, FspR7DisableEnable, FspR7AlarmListType, FspR7APSCommand, FspR7GccUsage, FspR7OscUsage, FspR7OpticalLanes, FspR7TerminationMode, FspR7VSessChangeReason, FspR7VSessStatus, FspR7TelemetryOutput, FspR7ColumnMark, FspR7LLDPNeighbors, FspR7SupplyType, FspR7RequestAction, FspR7LicenseManagement, FspR7LicenseType, ConnectionNotation, FspR7LLDPScope, FspR7VoaMode, Grade, FspR7PathNode, FspR7DmsrmtOperation, FspR7LacpMode, FspR7OspfMode, FspR7ChannelBandwidth, FspR7UserInterface, FspR7VSessWriteAccess, FspR7CpAuthType, FspR7PrivLevel, FspR7ProtectionState, FspR7ProtectionType, FspR7LagSysIdFend, FspR7ConnectState, FspR7ParityBit, FspR7ErrorFwdMode, FspR7ChannelSpacing, FspR7OpticalBand, FspR7LagFendState, FspR7CodeGain, FspR7LagIdFend, FspR7NaasMode, FspR7MaxBitErrorRate, FspR7AccessProtocol, FspR7SshHostKeyLength, FspR7SessionStatus, ApsRevertMode, FspR7EntityType, FspR7OperState, FspR7SignalDirection, FspR7EnableDisable, FspR7SnmpVersion, FspR7FecType, FspR7Acp, FspR7MonLevel, FspR7Category, FspR7ConnectorType, FspR7EntitySecondaryStates, FspR7GropticsType, EquipmentState, FspR7LaserDelayTimer, FspR7RlsAction, FspR7PortRole, FspR7ValidityPeriod, FspR7NCTraceId, FspR7CommandState, FspR7LineCoding, FspR7PlugDataRateCaps, FspR7OdtuType, FspR7PlugMode, FspR7LLDPLocation, FspR7ManualAuto, FspR7FDStatusCaps, FspR7InterfaceCrossover, FspR7TypeConnection, FspR7SdpType, FspR7Topology, FspR7TransferProtocol, FspR7PmReset, FspR7InvertTelemetryInputLogic, FspR7ApsChannel, FspR7DhcpServer, FspR7AccessProtocolCaps, FspR7MpTag, FspR7Conn, FspR7Protocol, FspR7ForcedStatus, FspR7SshHostKeyEncryptAlgorithm, FspR7TxOffOnTm, FspR7RoadmNumber, FspR7DmsrmtStatus, FspR7AlarmProfileList, FspR7RemoteAuthProtocol, FspR7BERThreshold, FspR7IPv6Type, FspR7LagPorts, FspR7Ipv6Address, FspR7PathProt, FspR7RequestState, FspR7RPFilter, FspR7ApsFarEndModule, FspR7StateConnection, FspR7SingleFiberLocation, FspR7CdCompensationRange, FspR7TimeShort, FspR7Date, FspR7FanMode, FspR7OpuPayloadType, FspR7Bitrate, FspR7EquipmentAssignState, FspR7LLDPManagementType, FspR7AccStateTrap, FspR7OduMultiplexStructure, FspR7PlugType, FspR7AlsMode, FspR7RemoteAuth, EntityType, FspR7ChannelNumber, FspR7ProtectionRole, FspR7AutosrvLock, FspR7InterfaceType, FspR7LLDPManagementInterface, FspR7LagStandby, FspR7PsuOutputPower, EntityClassName, FspR7Stages, FspR7SnmpSecuLevel, FspR7Length, FspR7OpticalFiberType, FspR7OpticalGroup, FspR7DispersionModes, FspR7GainRange, FspR7FrameFormat, FspR7LLDPChassisType, FspR7TLSSupport, FspR7AppType, FspR7Access, FspR7DeploymentScenario, FspR7OscChannel, FspR7IpForwarding, FspR7CdPostCompensationRange, FspR7ChannelIdentifierCaps, FspR7PmSnapshotParameterTypes, FspR7LaneGroupInventory, FspR7NtpSyncStatus, FspR7AccState, FspR7DmLayer, FspR7EncapsulationMethod, FspR7PortBehaviour, FspR7OpticalInterfaceReachCaps, FspR7UntaggedFrames, FspR7OtdrPeriod, CryptoFspR7EncryptionCommunication, FspR7CommandBusy, FspR7KeyLength, FspR7DispersionCompensation, FspR7Optimize, FspR7AccountFlag, FspR7FiberBrand, FspR7PlugDataRate, FspR7Command, FspR7LLDPPortType = mibBuilder.importSymbols("ADVA-FSPR7-TC-MIB", "FspR7SnmpPrivLevel", "FspR7AidType", "FspR7TopologyType", "FspR7TimDetMode", "FspR7LacpTimeout", "FspR7EdfaOutputPowerRating", "FspR7AccessNcuC2", "FspR7Mapping", "FspR7ChannelRangeInventory", "FspR7MpState", "FspR7SnmpHexString", "FspR7BidirectionalChannel", "FspR7ChannelNumberCaps", "FfpType", "FspR7CapInventory", "FspR7RenewMode", "FspR7YcableType", "FspR7Baund", "FspR7TypeCrs", "FspR7SdnInterface", "FspR7PrivacyKeyType", "FspR7TerminateSessions", "FspR7FlowControlMode", "FspR7FunctionCrs", "FspR7LagState", "FspR7XfpDecisionThres", "FspR7IpMode", "FspR7OpticalSubBand", "FspR7SwitchOverCause", "FspR7OpticalInterfaceReach", "FspR7IpType", "FspR7SnmpLongString", "FspR7PortMode", "FspR7TrafficDirection", "FspR7PasswordHashType", "FspR7TransmissionMode", "FspR7NtpTestStatus", "FspR7MuxMethod", "FspR7LicenseServerStatus", "FspR7AccessStatus", "ApsType", "FspR7ChannelIdentifier", "FspR7DCFiberType", "FspR7LicenseFilesInstall", "FspR7YesNo", "FspR7NCTRouteType", "FspR7NumberOfChannels", "FspR7NoYes", "FspR7OpticalMultiplexLevel", "FspR7LagPortType", "FspR7PmSnapshotStatus", "FspR7TiltSet", "FspR7Gain", "FspR7AdminState", "FspR7InterfaceFunction", "FspR7FltrCableType", "FspR7DisableEnable", "FspR7AlarmListType", "FspR7APSCommand", "FspR7GccUsage", "FspR7OscUsage", "FspR7OpticalLanes", "FspR7TerminationMode", "FspR7VSessChangeReason", "FspR7VSessStatus", "FspR7TelemetryOutput", "FspR7ColumnMark", "FspR7LLDPNeighbors", "FspR7SupplyType", "FspR7RequestAction", "FspR7LicenseManagement", "FspR7LicenseType", "ConnectionNotation", "FspR7LLDPScope", "FspR7VoaMode", "Grade", "FspR7PathNode", "FspR7DmsrmtOperation", "FspR7LacpMode", "FspR7OspfMode", "FspR7ChannelBandwidth", "FspR7UserInterface", "FspR7VSessWriteAccess", "FspR7CpAuthType", "FspR7PrivLevel", "FspR7ProtectionState", "FspR7ProtectionType", "FspR7LagSysIdFend", "FspR7ConnectState", "FspR7ParityBit", "FspR7ErrorFwdMode", "FspR7ChannelSpacing", "FspR7OpticalBand", "FspR7LagFendState", "FspR7CodeGain", "FspR7LagIdFend", "FspR7NaasMode", "FspR7MaxBitErrorRate", "FspR7AccessProtocol", "FspR7SshHostKeyLength", "FspR7SessionStatus", "ApsRevertMode", "FspR7EntityType", "FspR7OperState", "FspR7SignalDirection", "FspR7EnableDisable", "FspR7SnmpVersion", "FspR7FecType", "FspR7Acp", "FspR7MonLevel", "FspR7Category", "FspR7ConnectorType", "FspR7EntitySecondaryStates", "FspR7GropticsType", "EquipmentState", "FspR7LaserDelayTimer", "FspR7RlsAction", "FspR7PortRole", "FspR7ValidityPeriod", "FspR7NCTraceId", "FspR7CommandState", "FspR7LineCoding", "FspR7PlugDataRateCaps", "FspR7OdtuType", "FspR7PlugMode", "FspR7LLDPLocation", "FspR7ManualAuto", "FspR7FDStatusCaps", "FspR7InterfaceCrossover", "FspR7TypeConnection", "FspR7SdpType", "FspR7Topology", "FspR7TransferProtocol", "FspR7PmReset", "FspR7InvertTelemetryInputLogic", "FspR7ApsChannel", "FspR7DhcpServer", "FspR7AccessProtocolCaps", "FspR7MpTag", "FspR7Conn", "FspR7Protocol", "FspR7ForcedStatus", "FspR7SshHostKeyEncryptAlgorithm", "FspR7TxOffOnTm", "FspR7RoadmNumber", "FspR7DmsrmtStatus", "FspR7AlarmProfileList", "FspR7RemoteAuthProtocol", "FspR7BERThreshold", "FspR7IPv6Type", "FspR7LagPorts", "FspR7Ipv6Address", "FspR7PathProt", "FspR7RequestState", "FspR7RPFilter", "FspR7ApsFarEndModule", "FspR7StateConnection", "FspR7SingleFiberLocation", "FspR7CdCompensationRange", "FspR7TimeShort", "FspR7Date", "FspR7FanMode", "FspR7OpuPayloadType", "FspR7Bitrate", "FspR7EquipmentAssignState", "FspR7LLDPManagementType", "FspR7AccStateTrap", "FspR7OduMultiplexStructure", "FspR7PlugType", "FspR7AlsMode", "FspR7RemoteAuth", "EntityType", "FspR7ChannelNumber", "FspR7ProtectionRole", "FspR7AutosrvLock", "FspR7InterfaceType", "FspR7LLDPManagementInterface", "FspR7LagStandby", "FspR7PsuOutputPower", "EntityClassName", "FspR7Stages", "FspR7SnmpSecuLevel", "FspR7Length", "FspR7OpticalFiberType", "FspR7OpticalGroup", "FspR7DispersionModes", "FspR7GainRange", "FspR7FrameFormat", "FspR7LLDPChassisType", "FspR7TLSSupport", "FspR7AppType", "FspR7Access", "FspR7DeploymentScenario", "FspR7OscChannel", "FspR7IpForwarding", "FspR7CdPostCompensationRange", "FspR7ChannelIdentifierCaps", "FspR7PmSnapshotParameterTypes", "FspR7LaneGroupInventory", "FspR7NtpSyncStatus", "FspR7AccState", "FspR7DmLayer", "FspR7EncapsulationMethod", "FspR7PortBehaviour", "FspR7OpticalInterfaceReachCaps", "FspR7UntaggedFrames", "FspR7OtdrPeriod", "CryptoFspR7EncryptionCommunication", "FspR7CommandBusy", "FspR7KeyLength", "FspR7DispersionCompensation", "FspR7Optimize", "FspR7AccountFlag", "FspR7FiberBrand", "FspR7PlugDataRate", "FspR7Command", "FspR7LLDPPortType")
EnableState, LoopConfig, FspR7EquipmentType, OtnTcmLevel, SonetTraceForm, SourceIpAddress, OtnPayloadType, FspR7TrapsinkLifetime, SonetTimingSource, ProtectionMech, ServiceImpairment, EthDuplexMode, FileType, TimMode, ServiceAffecting, EntityClass, FspR7EquipmentTypeCaps, PgmType, OhTerminationLevel, TrapAlarmSeverity, VirtualContainerType, AssignmentState, FileArea, RestoreActivation, ApsDirection, ApsHoldoffTime, fspR7 = mibBuilder.importSymbols("ADVA-MIB", "EnableState", "LoopConfig", "FspR7EquipmentType", "OtnTcmLevel", "SonetTraceForm", "SourceIpAddress", "OtnPayloadType", "FspR7TrapsinkLifetime", "SonetTimingSource", "ProtectionMech", "ServiceImpairment", "EthDuplexMode", "FileType", "TimMode", "ServiceAffecting", "EntityClass", "FspR7EquipmentTypeCaps", "PgmType", "OhTerminationLevel", "TrapAlarmSeverity", "VirtualContainerType", "AssignmentState", "FileArea", "RestoreActivation", "ApsDirection", "ApsHoldoffTime", "fspR7")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, iso, ModuleIdentity, Counter64, Integer32, Unsigned32, IpAddress, TimeTicks, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "iso", "ModuleIdentity", "Counter64", "Integer32", "Unsigned32", "IpAddress", "TimeTicks", "NotificationType", "Bits")
RowStatus, MacAddress, RowPointer, DateAndTime, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "RowPointer", "DateAndTime", "DisplayString", "TextualConvention", "TruthValue")
advaFspR7 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7))
advaFspR7.setRevisions(('2018-12-14 00:00', '2018-10-30 00:00', '2018-08-09 00:00', '2018-05-28 00:00', '2018-04-17 00:00', '2018-03-15 00:00', '2018-02-26 00:00', '2017-12-07 00:00', '2017-11-01 00:00', '2017-09-11 00:00', '2017-06-06 00:00', '2017-03-23 00:00', '2016-06-01 00:00', '2016-04-01 00:00', '2015-12-10 00:00', '2015-10-01 00:00', '2015-09-03 00:00', '2015-05-06 00:00', '2015-03-20 00:00', '2014-10-15 00:00', '2014-09-29 00:00', '2013-12-04 00:00', '2013-08-20 00:00', '2011-05-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: advaFspR7.setRevisionsDescriptions(('FSP3000 F7 Release 18.2.1 MIB.', 'FSP3000 F7 Release 18.1.2 MIB.', 'FSP3000 F7 Release 18.1.1 MIB.', 'FSP3000 F7 Release 17.2.2 MIB.', 'FSP3000 F7 Release 17.2.1 MIB.', 'FSP3000 F7 Release 17.1.2 MIB.', 'FSP3000 F7 Release 16.3.3 MIB.', 'FSP3000 F7 Release 17.1.1 MIB.', 'FSP3000 F7 Release 16.3.2 MIB.', 'FSP3000 F7 Release 16.3.1 MIB.', 'FSP3000 F7 Release 16.2.2 MIB.', 'FSP3000 F7 Release 16.2.1 MIB.', 'FSP3000 F7 Release 16.1.2 MIB.', 'FSP3000 F7 Release 16.1.1 MIB.', 'FSP3000 F7 Release 15.2.1 MIB.', 'FSP3000 F7 Release 15.1.2 MIB.', 'FSP3000 F7 Release 15.1.1 MIB.', 'FSP3000 F7 Release 13.3.2 MIB.', 'FSP3000 F7 Release 13.3.1 MIB.', 'FSP3000 F7 Release 13.2.2 MIB.', 'FSP3000 F7 Release 13.2.1 MIB.', 'FSP3000 F7 Release 12.2.1 MIB.', 'FSP3000 F7 Release 12.1.1 MIB.', 'FSP3000 F7 Release 11.2 MIB.',))
if mibBuilder.loadTexts: advaFspR7.setLastUpdated('201812140000Z')
if mibBuilder.loadTexts: advaFspR7.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: advaFspR7.setContactInfo('EMEA Support\n                  Phone : +49 89 89 0665 848\n                  Fax   : +49 89 89 0665 22848\n                  Email : support@advaoptical.com\n\n                  North American Support\n                  Phone : 886 442 ADVA (2382) (toll-free within the US, Canada and Mexico)\n                  Fax   : + 1 806 741 8529 (elsewhere)\n                  Email : support-usa@advaoptical.com\n\n                  Asia Pacific Support\n                  Phone : + 1 866 442 2382 (other toll-free numbers available in some countries)\n                  Email : support-asia@advaoptical.com')
if mibBuilder.loadTexts: advaFspR7.setDescription('This is a MIB definition for ADVA AG Optical Networking entity management.')
containers = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1))
entities = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3))
neMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1))
ipConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100))
ospfConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 101))
timeoutConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 102))
specificMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2))
eqptMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3))
facilityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4))
dcnMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5))
opticalMuxMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6))
shelfConnMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7))
envMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8))
containerMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9))
opticalLineMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10))
alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4))
alarmProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5))
fspR7Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0))
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6))
performanceFacility = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4))
performanceFacilityThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1))
performanceFacilityMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2))
featureSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7))
fiberMap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1))
pmSnapshot = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2))
eci = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3))
serviceDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4))
changeService = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5))
protection = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6))
translation = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7))
advaSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8))
ipSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9))
dateAndTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10))
snmpSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11))
tools = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12))
files = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90))
hdShelves = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13))
licenses = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200))
relationship = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8))
notAssignables = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9))
inventory = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10))
containerShelfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1), )
if mibBuilder.loadTexts: containerShelfTable.setStatus('current')
if mibBuilder.loadTexts: containerShelfTable.setDescription('containerShelfTable')
containerShelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerShelfShelfNo"), (0, "ADVA-FSPR7-MIB", "containerShelfSlotNo"), (0, "ADVA-FSPR7-MIB", "containerShelfPortNo"), (0, "ADVA-FSPR7-MIB", "containerShelfExtNo"), (0, "ADVA-FSPR7-MIB", "containerShelfClassName"))
if mibBuilder.loadTexts: containerShelfEntry.setStatus('current')
if mibBuilder.loadTexts: containerShelfEntry.setDescription('Entry of containerShelfTable')
containerShelfShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerShelfShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerShelfShelfNo.setDescription('Adress index.')
containerShelfSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerShelfSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerShelfSlotNo.setDescription('Adress index.')
containerShelfPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerShelfPortNo.setStatus('current')
if mibBuilder.loadTexts: containerShelfPortNo.setDescription('Adress index.')
containerShelfExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerShelfExtNo.setStatus('current')
if mibBuilder.loadTexts: containerShelfExtNo.setDescription('Adress index.')
containerShelfClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerShelfClassName.setStatus('current')
if mibBuilder.loadTexts: containerShelfClassName.setDescription('Entity Class Name')
containerShelfAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfAidString.setStatus('current')
if mibBuilder.loadTexts: containerShelfAidString.setDescription('Aid string of entity.')
containerShelfClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfClass.setStatus('current')
if mibBuilder.loadTexts: containerShelfClass.setDescription('Entity Class')
containerShelfTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfTableId.setStatus('current')
if mibBuilder.loadTexts: containerShelfTableId.setDescription('RowPointer to managment table')
containerShelfEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 9), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfEquipmentState.setStatus('current')
if mibBuilder.loadTexts: containerShelfEquipmentState.setDescription('See EquipmentState.')
containerShelfParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfParentId.setStatus('current')
if mibBuilder.loadTexts: containerShelfParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerFanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2), )
if mibBuilder.loadTexts: containerFanTable.setStatus('current')
if mibBuilder.loadTexts: containerFanTable.setDescription('containerFanTable')
containerFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerFanShelfNo"), (0, "ADVA-FSPR7-MIB", "containerFanSlotNo"), (0, "ADVA-FSPR7-MIB", "containerFanPortNo"), (0, "ADVA-FSPR7-MIB", "containerFanExtNo"), (0, "ADVA-FSPR7-MIB", "containerFanClassName"))
if mibBuilder.loadTexts: containerFanEntry.setStatus('current')
if mibBuilder.loadTexts: containerFanEntry.setDescription('Entry of containerFanTable')
containerFanShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerFanShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerFanShelfNo.setDescription('Adress index.')
containerFanSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerFanSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerFanSlotNo.setDescription('Adress index.')
containerFanPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerFanPortNo.setStatus('current')
if mibBuilder.loadTexts: containerFanPortNo.setDescription('Adress index.')
containerFanExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerFanExtNo.setStatus('current')
if mibBuilder.loadTexts: containerFanExtNo.setDescription('Adress index.')
containerFanClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerFanClassName.setStatus('current')
if mibBuilder.loadTexts: containerFanClassName.setDescription('Entity Class Name')
containerFanAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanAidString.setStatus('current')
if mibBuilder.loadTexts: containerFanAidString.setDescription('Aid string of entity.')
containerFanClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanClass.setStatus('current')
if mibBuilder.loadTexts: containerFanClass.setDescription('Entity Class')
containerFanTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanTableId.setStatus('current')
if mibBuilder.loadTexts: containerFanTableId.setDescription('RowPointer to managment table')
containerFanEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 9), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanEquipmentState.setStatus('current')
if mibBuilder.loadTexts: containerFanEquipmentState.setDescription('See EquipmentState.')
containerFanParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanParentId.setStatus('current')
if mibBuilder.loadTexts: containerFanParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerPlugTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3), )
if mibBuilder.loadTexts: containerPlugTable.setStatus('current')
if mibBuilder.loadTexts: containerPlugTable.setDescription('containerPlugTable')
containerPlugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerPlugShelfNo"), (0, "ADVA-FSPR7-MIB", "containerPlugSlotNo"), (0, "ADVA-FSPR7-MIB", "containerPlugPortNo"), (0, "ADVA-FSPR7-MIB", "containerPlugExtNo"), (0, "ADVA-FSPR7-MIB", "containerPlugClassName"))
if mibBuilder.loadTexts: containerPlugEntry.setStatus('current')
if mibBuilder.loadTexts: containerPlugEntry.setDescription('Entry of containerPlugTable')
containerPlugShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerPlugShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerPlugShelfNo.setDescription('Adress index.')
containerPlugSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerPlugSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerPlugSlotNo.setDescription('Adress index.')
containerPlugPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerPlugPortNo.setStatus('current')
if mibBuilder.loadTexts: containerPlugPortNo.setDescription('Adress index.')
containerPlugExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerPlugExtNo.setStatus('current')
if mibBuilder.loadTexts: containerPlugExtNo.setDescription('Adress index.')
containerPlugClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerPlugClassName.setStatus('current')
if mibBuilder.loadTexts: containerPlugClassName.setDescription('Entity Class Name')
containerPlugAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugAidString.setStatus('current')
if mibBuilder.loadTexts: containerPlugAidString.setDescription('Aid string of entity.')
containerPlugClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugClass.setStatus('current')
if mibBuilder.loadTexts: containerPlugClass.setDescription('Entity Class')
containerPlugTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugTableId.setStatus('current')
if mibBuilder.loadTexts: containerPlugTableId.setDescription('RowPointer to managment table')
containerPlugEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 9), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugEquipmentState.setStatus('current')
if mibBuilder.loadTexts: containerPlugEquipmentState.setDescription('See EquipmentState.')
containerPlugParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugParentId.setStatus('current')
if mibBuilder.loadTexts: containerPlugParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerModTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4), )
if mibBuilder.loadTexts: containerModTable.setStatus('current')
if mibBuilder.loadTexts: containerModTable.setDescription('containerModTable')
containerModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerModShelfNo"), (0, "ADVA-FSPR7-MIB", "containerModSlotNo"), (0, "ADVA-FSPR7-MIB", "containerModPortNo"), (0, "ADVA-FSPR7-MIB", "containerModExtNo"), (0, "ADVA-FSPR7-MIB", "containerModClassName"))
if mibBuilder.loadTexts: containerModEntry.setStatus('current')
if mibBuilder.loadTexts: containerModEntry.setDescription('Entry of containerModTable')
containerModShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerModShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerModShelfNo.setDescription('Adress index.')
containerModSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerModSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerModSlotNo.setDescription('Adress index.')
containerModPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerModPortNo.setStatus('current')
if mibBuilder.loadTexts: containerModPortNo.setDescription('Adress index.')
containerModExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerModExtNo.setStatus('current')
if mibBuilder.loadTexts: containerModExtNo.setDescription('Adress index.')
containerModClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerModClassName.setStatus('current')
if mibBuilder.loadTexts: containerModClassName.setDescription('Entity Class Name')
containerModAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModAidString.setStatus('current')
if mibBuilder.loadTexts: containerModAidString.setDescription('Aid string of entity.')
containerModClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModClass.setStatus('current')
if mibBuilder.loadTexts: containerModClass.setDescription('Entity Class')
containerModTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModTableId.setStatus('current')
if mibBuilder.loadTexts: containerModTableId.setDescription('RowPointer to managment table')
containerModEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 9), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModEquipmentState.setStatus('current')
if mibBuilder.loadTexts: containerModEquipmentState.setDescription('See EquipmentState.')
containerModParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModParentId.setStatus('current')
if mibBuilder.loadTexts: containerModParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerVchTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7), )
if mibBuilder.loadTexts: containerVchTable.setStatus('current')
if mibBuilder.loadTexts: containerVchTable.setDescription('containerVchTable')
containerVchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVchShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVchSlotNo"), (0, "ADVA-FSPR7-MIB", "containerVchPortNo"), (0, "ADVA-FSPR7-MIB", "containerVchExtNo"), (0, "ADVA-FSPR7-MIB", "containerVchClassName"))
if mibBuilder.loadTexts: containerVchEntry.setStatus('current')
if mibBuilder.loadTexts: containerVchEntry.setDescription('Entry of containerVchTable')
containerVchShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVchShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerVchShelfNo.setDescription('Adress index.')
containerVchSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVchSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerVchSlotNo.setDescription('Adress index.')
containerVchPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVchPortNo.setStatus('current')
if mibBuilder.loadTexts: containerVchPortNo.setDescription('Adress index.')
containerVchExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVchExtNo.setStatus('current')
if mibBuilder.loadTexts: containerVchExtNo.setDescription('Adress index.')
containerVchClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVchClassName.setStatus('current')
if mibBuilder.loadTexts: containerVchClassName.setDescription('Entity Class Name')
containerVchAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVchAidString.setStatus('current')
if mibBuilder.loadTexts: containerVchAidString.setDescription('Aid string of entity.')
containerVchClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVchClass.setStatus('current')
if mibBuilder.loadTexts: containerVchClass.setDescription('Entity Class')
containerVchTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVchTableId.setStatus('current')
if mibBuilder.loadTexts: containerVchTableId.setDescription('RowPointer to managment table')
containerVchParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVchParentId.setStatus('current')
if mibBuilder.loadTexts: containerVchParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerCrossConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8), )
if mibBuilder.loadTexts: containerCrossConnTable.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnTable.setDescription('containerCrossConnection')
containerCrossConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrossConnFromShelfNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromSlotNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPortNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromExtNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromClassName"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToShelfNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToSlotNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToPortNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToExtNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToClassName"), (0, "ADVA-FSPR7-MIB", "containerCrossConnClassName"))
if mibBuilder.loadTexts: containerCrossConnEntry.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnEntry.setDescription('Entry of containerCrossConnectionTable')
containerCrossConnFromShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromShelfNo.setDescription('Adress index.')
containerCrossConnFromSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromSlotNo.setDescription('Adress index.')
containerCrossConnFromPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPortNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromPortNo.setDescription('Adress index.')
containerCrossConnFromExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromExtNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromExtNo.setDescription('Adress index.')
containerCrossConnFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrossConnFromClassName.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromClassName.setDescription('Entity Class Name')
containerCrossConnToShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 6), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnToShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnToShelfNo.setDescription('Adress index.')
containerCrossConnToSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 7), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnToSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnToSlotNo.setDescription('Adress index.')
containerCrossConnToPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 8), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnToPortNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnToPortNo.setDescription('Adress index.')
containerCrossConnToExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 9), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnToExtNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnToExtNo.setDescription('Adress index.')
containerCrossConnToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 10), EntityClassName())
if mibBuilder.loadTexts: containerCrossConnToClassName.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnToClassName.setDescription('Entity Class Name')
containerCrossConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 11), EntityClassName())
if mibBuilder.loadTexts: containerCrossConnClassName.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnClassName.setDescription('Entity Class Name')
containerCrossConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnAidString.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnAidString.setDescription('Aid string of entity.')
containerCrossConnFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 13), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromId.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromId.setDescription('RowPointer to FROM point entity.')
containerCrossConnToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnToId.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnToId.setDescription('RowPointer to TO point entity.')
containerCrossConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 15), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnClass.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnClass.setDescription('EntityClass')
containerCrossConnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnTableId.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnTableId.setDescription('RowPointer to managment table')
containerCrossConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnParentId.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerCrossConnFromPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9), )
if mibBuilder.loadTexts: containerCrossConnFromPointTable.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromPointTable.setDescription('containerCrossConnFromTable')
containerCrossConnFromPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointShelfNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointSlotNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointPortNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointExtNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointClassName"))
if mibBuilder.loadTexts: containerCrossConnFromPointEntry.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromPointEntry.setDescription('Entry for containerCrossConnFromTable')
containerCrossConnFromPointShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPointShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromPointShelfNo.setDescription('Adress index.')
containerCrossConnFromPointSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPointSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromPointSlotNo.setDescription('Adress index.')
containerCrossConnFromPointPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPointPortNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromPointPortNo.setDescription('Adress index.')
containerCrossConnFromPointExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPointExtNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromPointExtNo.setDescription('Adress index.')
containerCrossConnFromPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrossConnFromPointClassName.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromPointClassName.setDescription('Entity Class Name')
containerCrossConnFromPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointAidString.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromPointAidString.setDescription('Aid string of entity.')
containerCrossConnFromPointFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointFromId.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromPointFromId.setDescription('RowPointer to FROM point entity.')
containerCrossConnFromPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointClass.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromPointClass.setDescription('EntityClass')
containerCrossConnFromPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointTableId.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromPointTableId.setDescription('RowPointer to managment table')
containerCrossConnFromPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointParentId.setStatus('current')
if mibBuilder.loadTexts: containerCrossConnFromPointParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10), )
if mibBuilder.loadTexts: containerTerminPointTable.setStatus('current')
if mibBuilder.loadTexts: containerTerminPointTable.setDescription('containerTerminPointTable')
containerTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerTerminPointClassName"))
if mibBuilder.loadTexts: containerTerminPointEntry.setStatus('current')
if mibBuilder.loadTexts: containerTerminPointEntry.setDescription('Entry for containerTerminPointTable')
containerTerminPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerTerminPointIndexNo1.setStatus('current')
if mibBuilder.loadTexts: containerTerminPointIndexNo1.setDescription('Adress index.')
containerTerminPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerTerminPointIndexNo2.setStatus('current')
if mibBuilder.loadTexts: containerTerminPointIndexNo2.setDescription('Adress index.')
containerTerminPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerTerminPointIndexNo3.setStatus('current')
if mibBuilder.loadTexts: containerTerminPointIndexNo3.setDescription('Adress index.')
containerTerminPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerTerminPointIndexNo4.setStatus('current')
if mibBuilder.loadTexts: containerTerminPointIndexNo4.setDescription('Adress index.')
containerTerminPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerTerminPointClassName.setStatus('current')
if mibBuilder.loadTexts: containerTerminPointClassName.setDescription('Entity Class Name')
containerTerminPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerTerminPointAidString.setStatus('current')
if mibBuilder.loadTexts: containerTerminPointAidString.setDescription('Aid string of entity.')
containerTerminPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerTerminPointClass.setStatus('current')
if mibBuilder.loadTexts: containerTerminPointClass.setDescription('EntityClass')
containerTerminPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerTerminPointTableId.setStatus('current')
if mibBuilder.loadTexts: containerTerminPointTableId.setDescription('RowPointer to managment table')
containerTerminPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerTerminPointParentId.setStatus('current')
if mibBuilder.loadTexts: containerTerminPointParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerConnectStdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11), )
if mibBuilder.loadTexts: containerConnectStdTable.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdTable.setDescription('containerConnectStdTable')
containerConnectStdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerConnectStdNotation"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromClassName"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToClassName"), (0, "ADVA-FSPR7-MIB", "containerConnectStdClassName"))
if mibBuilder.loadTexts: containerConnectStdEntry.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdEntry.setDescription('Entry for containerConnectStdTable')
containerConnectStdNotation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 1), ConnectionNotation())
if mibBuilder.loadTexts: containerConnectStdNotation.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdNotation.setDescription('Notation indicates how to interpret the following indexes (keys) of\n        the table. It has two values:\n        fromToNotation(1) - first five idnexes represent FROM enity while next five indexes represent TO enity,\n        toFromNotation(2) - first five idnexes represent TO enity while next five indexes represent FROM enity')
containerConnectStdFromIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdFromIndexNo1.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdFromIndexNo1.setDescription('Adress index.')
containerConnectStdFromIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdFromIndexNo2.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdFromIndexNo2.setDescription('Adress index.')
containerConnectStdFromIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdFromIndexNo3.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdFromIndexNo3.setDescription('Adress index.')
containerConnectStdFromIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 5), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdFromIndexNo4.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdFromIndexNo4.setDescription('Adress index.')
containerConnectStdFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 6), EntityClassName())
if mibBuilder.loadTexts: containerConnectStdFromClassName.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdFromClassName.setDescription('Entity Class Name')
containerConnectStdToIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 7), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdToIndexNo1.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdToIndexNo1.setDescription('Adress index.')
containerConnectStdToIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 8), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdToIndexNo2.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdToIndexNo2.setDescription('Adress index.')
containerConnectStdToIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 9), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdToIndexNo3.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdToIndexNo3.setDescription('Adress index.')
containerConnectStdToIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 10), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdToIndexNo4.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdToIndexNo4.setDescription('Adress index.')
containerConnectStdToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 11), EntityClassName())
if mibBuilder.loadTexts: containerConnectStdToClassName.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdToClassName.setDescription('Entity Class Name')
containerConnectStdClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 12), EntityClassName())
if mibBuilder.loadTexts: containerConnectStdClassName.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdClassName.setDescription('Entity Class Name')
containerConnectStdAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdAidString.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdAidString.setDescription('Aid string of entity.')
containerConnectStdFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdFromId.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdFromId.setDescription('RowPointer to FROM point entity.')
containerConnectStdToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 15), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdToId.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdToId.setDescription('RowPointer to TO point entity.')
containerConnectStdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 16), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdClass.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdClass.setDescription('EntityClass')
containerConnectStdTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdTableId.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdTableId.setDescription('RowPointer to managment table')
containerConnectStdParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 18), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdParentId.setStatus('current')
if mibBuilder.loadTexts: containerConnectStdParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerConnectNonStdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12), )
if mibBuilder.loadTexts: containerConnectNonStdTable.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdTable.setDescription('containerConnectNonStdTable')
containerConnectNonStdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerConnectNonStdNotation"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromClassName"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToClassName"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdClassName"))
if mibBuilder.loadTexts: containerConnectNonStdEntry.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdEntry.setDescription('Entry for containerConnectNonStdTable')
containerConnectNonStdNotation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 1), ConnectionNotation())
if mibBuilder.loadTexts: containerConnectNonStdNotation.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdNotation.setDescription('Notation indicates how to interpret the following indexes (keys) of\n        the table. It has two values:\n        fromToNotation(1) - first five idnexes represent FROM enity while next five indexes represent TO enity,\n        toFromNotation(2) - first five idnexes represent TO enity while next five indexes represent FROM enity')
containerConnectNonStdFromIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo1.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo1.setDescription('Adress index.')
containerConnectNonStdFromIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo2.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo2.setDescription('Adress index.')
containerConnectNonStdFromIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo3.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo3.setDescription('Adress index.')
containerConnectNonStdFromIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 5), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo4.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo4.setDescription('Adress index.')
containerConnectNonStdFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 6), EntityClassName())
if mibBuilder.loadTexts: containerConnectNonStdFromClassName.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdFromClassName.setDescription('Entity Class Name')
containerConnectNonStdToIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 7), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo1.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo1.setDescription('Adress index.')
containerConnectNonStdToIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 8), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo2.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo2.setDescription('Adress index.')
containerConnectNonStdToIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 9), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo3.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo3.setDescription('Adress index.')
containerConnectNonStdToIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 10), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo4.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo4.setDescription('Adress index.')
containerConnectNonStdToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 11), EntityClassName())
if mibBuilder.loadTexts: containerConnectNonStdToClassName.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdToClassName.setDescription('Entity Class Name')
containerConnectNonStdClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 12), EntityClassName())
if mibBuilder.loadTexts: containerConnectNonStdClassName.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdClassName.setDescription('Entity Class Name')
containerConnectNonStdAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdAidString.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdAidString.setDescription('Aid string of entity.')
containerConnectNonStdFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdFromId.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdFromId.setDescription('RowPointer to FROM point entity.')
containerConnectNonStdToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 15), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdToId.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdToId.setDescription('RowPointer to TO point entity.')
containerConnectNonStdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 16), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdClass.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdClass.setDescription('EntityClass')
containerConnectNonStdTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdTableId.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdTableId.setDescription('RowPointer to managment table')
containerConnectNonStdParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 18), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdParentId.setStatus('current')
if mibBuilder.loadTexts: containerConnectNonStdParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13), )
if mibBuilder.loadTexts: containerExternalPortTable.setStatus('current')
if mibBuilder.loadTexts: containerExternalPortTable.setDescription('containerExternalPort')
containerExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "containerExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "containerExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "containerExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "containerExternalPortClassName"))
if mibBuilder.loadTexts: containerExternalPortEntry.setStatus('current')
if mibBuilder.loadTexts: containerExternalPortEntry.setDescription('Entry of containerExternalPort')
containerExternalPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerExternalPortShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerExternalPortShelfNo.setDescription('Adress index.')
containerExternalPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerExternalPortSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerExternalPortSlotNo.setDescription('Adress index.')
containerExternalPortPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerExternalPortPortNo.setStatus('current')
if mibBuilder.loadTexts: containerExternalPortPortNo.setDescription('Adress index.')
containerExternalPortExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerExternalPortExtNo.setStatus('current')
if mibBuilder.loadTexts: containerExternalPortExtNo.setDescription('Adress index.')
containerExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerExternalPortClassName.setStatus('current')
if mibBuilder.loadTexts: containerExternalPortClassName.setDescription('Entity Class Name')
containerExternalPortAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalPortAidString.setStatus('current')
if mibBuilder.loadTexts: containerExternalPortAidString.setDescription('Aid string of entity.')
containerExternalPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalPortClass.setStatus('current')
if mibBuilder.loadTexts: containerExternalPortClass.setDescription('EntityClass')
containerExternalPortTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalPortTableId.setStatus('current')
if mibBuilder.loadTexts: containerExternalPortTableId.setDescription('RowPointer to managment table')
containerExternalPortParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalPortParentId.setStatus('current')
if mibBuilder.loadTexts: containerExternalPortParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerCrsOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14), )
if mibBuilder.loadTexts: containerCrsOptLineTable.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineTable.setDescription('containerCrsOptLineTable')
containerCrsOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromClassName"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToClassName"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineClassName"))
if mibBuilder.loadTexts: containerCrsOptLineEntry.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineEntry.setDescription('Entry of containerCrsOptLineTable')
containerCrsOptLineFromIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo1.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo1.setDescription('Adress index.')
containerCrsOptLineFromIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo2.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo2.setDescription('Adress index.')
containerCrsOptLineFromIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo3.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo3.setDescription('Adress index.')
containerCrsOptLineFromIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo4.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo4.setDescription('Adress index.')
containerCrsOptLineFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrsOptLineFromClassName.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromClassName.setDescription('Entity Class Name')
containerCrsOptLineToIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 6), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo1.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo1.setDescription('Adress index.')
containerCrsOptLineToIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 7), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo2.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo2.setDescription('Adress index.')
containerCrsOptLineToIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 8), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo3.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo3.setDescription('Adress index.')
containerCrsOptLineToIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 9), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo4.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo4.setDescription('Adress index.')
containerCrsOptLineToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 10), EntityClassName())
if mibBuilder.loadTexts: containerCrsOptLineToClassName.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineToClassName.setDescription('Entity Class Name')
containerCrsOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 11), EntityClassName())
if mibBuilder.loadTexts: containerCrsOptLineClassName.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineClassName.setDescription('Entity Class Name')
containerCrsOptLineAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineAidString.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineAidString.setDescription('Aid string of entity.')
containerCrsOptLineFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 13), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromId.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromId.setDescription('RowPointer to FROM point entity.')
containerCrsOptLineToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineToId.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineToId.setDescription('RowPointer to TO point entity.')
containerCrsOptLineClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 15), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineClass.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineClass.setDescription('EntityClass')
containerCrsOptLineTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineTableId.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineTableId.setDescription('RowPointer to managment table')
containerCrsOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineParentId.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerCrsOptLineFromPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15), )
if mibBuilder.loadTexts: containerCrsOptLineFromPointTable.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromPointTable.setDescription('containerCrsOptLineFromTable')
containerCrsOptLineFromPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointClassName"))
if mibBuilder.loadTexts: containerCrsOptLineFromPointEntry.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromPointEntry.setDescription('Entry for containerCrsOptLineFromTable')
containerCrsOptLineFromPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo1.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo1.setDescription('Adress index.')
containerCrsOptLineFromPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo2.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo2.setDescription('Adress index.')
containerCrsOptLineFromPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo3.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo3.setDescription('Adress index.')
containerCrsOptLineFromPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo4.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo4.setDescription('Adress index.')
containerCrsOptLineFromPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrsOptLineFromPointClassName.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromPointClassName.setDescription('Entity Class Name')
containerCrsOptLineFromPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointAidString.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromPointAidString.setDescription('Aid string of entity.')
containerCrsOptLineFromPointFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointFromId.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromPointFromId.setDescription('RowPointer to FROM point entity.')
containerCrsOptLineFromPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointClass.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromPointClass.setDescription('EntityClass')
containerCrsOptLineFromPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointTableId.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromPointTableId.setDescription('RowPointer to managment table')
containerCrsOptLineFromPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointParentId.setStatus('current')
if mibBuilder.loadTexts: containerCrsOptLineFromPointParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerExternalOmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16), )
if mibBuilder.loadTexts: containerExternalOmTable.setStatus('current')
if mibBuilder.loadTexts: containerExternalOmTable.setDescription('containerExternalOm')
containerExternalOmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerExternalOmShelfNo"), (0, "ADVA-FSPR7-MIB", "containerExternalOmSlotNo"), (0, "ADVA-FSPR7-MIB", "containerExternalOmPortNo"), (0, "ADVA-FSPR7-MIB", "containerExternalOmExtNo"), (0, "ADVA-FSPR7-MIB", "containerExternalOmClassName"))
if mibBuilder.loadTexts: containerExternalOmEntry.setStatus('current')
if mibBuilder.loadTexts: containerExternalOmEntry.setDescription('Entry of containerExternalOm')
containerExternalOmShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerExternalOmShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerExternalOmShelfNo.setDescription('Adress index.')
containerExternalOmSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerExternalOmSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerExternalOmSlotNo.setDescription('Adress index.')
containerExternalOmPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerExternalOmPortNo.setStatus('current')
if mibBuilder.loadTexts: containerExternalOmPortNo.setDescription('Adress index.')
containerExternalOmExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerExternalOmExtNo.setStatus('current')
if mibBuilder.loadTexts: containerExternalOmExtNo.setDescription('Adress index.')
containerExternalOmClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerExternalOmClassName.setStatus('current')
if mibBuilder.loadTexts: containerExternalOmClassName.setDescription('Entity Class Name')
containerExternalOmAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalOmAidString.setStatus('current')
if mibBuilder.loadTexts: containerExternalOmAidString.setDescription('Aid string of entity.')
containerExternalOmClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalOmClass.setStatus('current')
if mibBuilder.loadTexts: containerExternalOmClass.setDescription('EntityClass')
containerExternalOmTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalOmTableId.setStatus('current')
if mibBuilder.loadTexts: containerExternalOmTableId.setDescription('RowPointer to managment table')
containerExternalOmParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalOmParentId.setStatus('current')
if mibBuilder.loadTexts: containerExternalOmParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerExternalVchTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17), )
if mibBuilder.loadTexts: containerExternalVchTable.setStatus('current')
if mibBuilder.loadTexts: containerExternalVchTable.setDescription('containerExternalVom')
containerExternalVchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerExternalVchShelfNo"), (0, "ADVA-FSPR7-MIB", "containerExternalVchSlotNo"), (0, "ADVA-FSPR7-MIB", "containerExternalVchPortNo"), (0, "ADVA-FSPR7-MIB", "containerExternalVchExtNo"), (0, "ADVA-FSPR7-MIB", "containerExternalVchClassName"))
if mibBuilder.loadTexts: containerExternalVchEntry.setStatus('current')
if mibBuilder.loadTexts: containerExternalVchEntry.setDescription('Entry of containerExternalVom')
containerExternalVchShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerExternalVchShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerExternalVchShelfNo.setDescription('Adress index.')
containerExternalVchSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerExternalVchSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerExternalVchSlotNo.setDescription('Adress index.')
containerExternalVchPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerExternalVchPortNo.setStatus('current')
if mibBuilder.loadTexts: containerExternalVchPortNo.setDescription('Adress index.')
containerExternalVchExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerExternalVchExtNo.setStatus('current')
if mibBuilder.loadTexts: containerExternalVchExtNo.setDescription('Adress index.')
containerExternalVchClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerExternalVchClassName.setStatus('current')
if mibBuilder.loadTexts: containerExternalVchClassName.setDescription('Entity Class Name')
containerExternalVchAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalVchAidString.setStatus('current')
if mibBuilder.loadTexts: containerExternalVchAidString.setDescription('Aid string of entity.')
containerExternalVchClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalVchClass.setStatus('current')
if mibBuilder.loadTexts: containerExternalVchClass.setDescription('EntityClass')
containerExternalVchTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalVchTableId.setStatus('current')
if mibBuilder.loadTexts: containerExternalVchTableId.setDescription('RowPointer to managment table')
containerExternalVchParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalVchParentId.setStatus('current')
if mibBuilder.loadTexts: containerExternalVchParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerChTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20), )
if mibBuilder.loadTexts: containerChTable.setStatus('current')
if mibBuilder.loadTexts: containerChTable.setDescription('containerChTable')
containerChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerChShelfNo"), (0, "ADVA-FSPR7-MIB", "containerChSlotNo"), (0, "ADVA-FSPR7-MIB", "containerChPortNo"), (0, "ADVA-FSPR7-MIB", "containerChExtNo"), (0, "ADVA-FSPR7-MIB", "containerChClassName"))
if mibBuilder.loadTexts: containerChEntry.setStatus('current')
if mibBuilder.loadTexts: containerChEntry.setDescription('Entry of containerChTable')
containerChShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerChShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerChShelfNo.setDescription('Adress index.')
containerChSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerChSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerChSlotNo.setDescription('Adress index.')
containerChPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerChPortNo.setStatus('current')
if mibBuilder.loadTexts: containerChPortNo.setDescription('Adress index.')
containerChExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerChExtNo.setStatus('current')
if mibBuilder.loadTexts: containerChExtNo.setDescription('Adress index.')
containerChClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerChClassName.setStatus('current')
if mibBuilder.loadTexts: containerChClassName.setDescription('Entity Class Name')
containerChAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerChAidString.setStatus('current')
if mibBuilder.loadTexts: containerChAidString.setDescription('Aid string of entity.')
containerChClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerChClass.setStatus('current')
if mibBuilder.loadTexts: containerChClass.setDescription('Entity Class')
containerChTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerChTableId.setStatus('current')
if mibBuilder.loadTexts: containerChTableId.setDescription('RowPointer to managment table')
containerChParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerChParentId.setStatus('current')
if mibBuilder.loadTexts: containerChParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerEthTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21), )
if mibBuilder.loadTexts: containerEthTable.setStatus('current')
if mibBuilder.loadTexts: containerEthTable.setDescription('containerEthTable')
containerEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerEthShelfNo"), (0, "ADVA-FSPR7-MIB", "containerEthSlotNo"), (0, "ADVA-FSPR7-MIB", "containerEthPortNo"), (0, "ADVA-FSPR7-MIB", "containerEthExtNo"), (0, "ADVA-FSPR7-MIB", "containerEthClassName"))
if mibBuilder.loadTexts: containerEthEntry.setStatus('current')
if mibBuilder.loadTexts: containerEthEntry.setDescription('Entry of containerEthTable')
containerEthShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerEthShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerEthShelfNo.setDescription('Adress index.')
containerEthSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerEthSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerEthSlotNo.setDescription('Adress index.')
containerEthPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerEthPortNo.setStatus('current')
if mibBuilder.loadTexts: containerEthPortNo.setDescription('Adress index.')
containerEthExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerEthExtNo.setStatus('current')
if mibBuilder.loadTexts: containerEthExtNo.setDescription('Adress index.')
containerEthClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerEthClassName.setStatus('current')
if mibBuilder.loadTexts: containerEthClassName.setDescription('Entity Class Name')
containerEthAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEthAidString.setStatus('current')
if mibBuilder.loadTexts: containerEthAidString.setDescription('Aid string of entity.')
containerEthClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEthClass.setStatus('current')
if mibBuilder.loadTexts: containerEthClass.setDescription('Entity Class')
containerEthTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEthTableId.setStatus('current')
if mibBuilder.loadTexts: containerEthTableId.setDescription('RowPointer to managment table')
containerEthParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEthParentId.setStatus('current')
if mibBuilder.loadTexts: containerEthParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerVethTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22), )
if mibBuilder.loadTexts: containerVethTable.setStatus('current')
if mibBuilder.loadTexts: containerVethTable.setDescription('containerVethTable')
containerVethEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVethShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVethSlotNo"), (0, "ADVA-FSPR7-MIB", "containerVethPortNo"), (0, "ADVA-FSPR7-MIB", "containerVethExtNo"), (0, "ADVA-FSPR7-MIB", "containerVethClassName"))
if mibBuilder.loadTexts: containerVethEntry.setStatus('current')
if mibBuilder.loadTexts: containerVethEntry.setDescription('Entry of containerVethTable')
containerVethShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVethShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerVethShelfNo.setDescription('Adress index.')
containerVethSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVethSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerVethSlotNo.setDescription('Adress index.')
containerVethPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVethPortNo.setStatus('current')
if mibBuilder.loadTexts: containerVethPortNo.setDescription('Adress index.')
containerVethExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVethExtNo.setStatus('current')
if mibBuilder.loadTexts: containerVethExtNo.setDescription('Adress index.')
containerVethClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVethClassName.setStatus('current')
if mibBuilder.loadTexts: containerVethClassName.setDescription('Entity Class Name')
containerVethAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVethAidString.setStatus('current')
if mibBuilder.loadTexts: containerVethAidString.setDescription('Aid string of entity.')
containerVethClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVethClass.setStatus('current')
if mibBuilder.loadTexts: containerVethClass.setDescription('Entity Class')
containerVethTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVethTableId.setStatus('current')
if mibBuilder.loadTexts: containerVethTableId.setDescription('RowPointer to managment table')
containerVethParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVethParentId.setStatus('current')
if mibBuilder.loadTexts: containerVethParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerOtlgTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23), )
if mibBuilder.loadTexts: containerOtlgTable.setStatus('current')
if mibBuilder.loadTexts: containerOtlgTable.setDescription('containerOtlgTable')
containerOtlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerOtlgShelfNo"), (0, "ADVA-FSPR7-MIB", "containerOtlgSlotNo"), (0, "ADVA-FSPR7-MIB", "containerOtlgPortNo"), (0, "ADVA-FSPR7-MIB", "containerOtlgExtNo"), (0, "ADVA-FSPR7-MIB", "containerOtlgClassName"))
if mibBuilder.loadTexts: containerOtlgEntry.setStatus('current')
if mibBuilder.loadTexts: containerOtlgEntry.setDescription('Entry of containerOtlgTable')
containerOtlgShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerOtlgShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerOtlgShelfNo.setDescription('Adress index.')
containerOtlgSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerOtlgSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerOtlgSlotNo.setDescription('Adress index.')
containerOtlgPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerOtlgPortNo.setStatus('current')
if mibBuilder.loadTexts: containerOtlgPortNo.setDescription('Adress index.')
containerOtlgExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerOtlgExtNo.setStatus('current')
if mibBuilder.loadTexts: containerOtlgExtNo.setDescription('Adress index.')
containerOtlgClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerOtlgClassName.setStatus('current')
if mibBuilder.loadTexts: containerOtlgClassName.setDescription('Entity Class Name')
containerOtlgAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOtlgAidString.setStatus('current')
if mibBuilder.loadTexts: containerOtlgAidString.setDescription('Aid string of entity.')
containerOtlgClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOtlgClass.setStatus('current')
if mibBuilder.loadTexts: containerOtlgClass.setDescription('Entity Class')
containerOtlgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOtlgTableId.setStatus('current')
if mibBuilder.loadTexts: containerOtlgTableId.setDescription('RowPointer to managment table')
containerOtlgParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOtlgParentId.setStatus('current')
if mibBuilder.loadTexts: containerOtlgParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerPchTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24), )
if mibBuilder.loadTexts: containerPchTable.setStatus('current')
if mibBuilder.loadTexts: containerPchTable.setDescription('containerPchTable')
containerPchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerPchShelfNo"), (0, "ADVA-FSPR7-MIB", "containerPchSlotNo"), (0, "ADVA-FSPR7-MIB", "containerPchPortNo"), (0, "ADVA-FSPR7-MIB", "containerPchExtNo"), (0, "ADVA-FSPR7-MIB", "containerPchClassName"))
if mibBuilder.loadTexts: containerPchEntry.setStatus('current')
if mibBuilder.loadTexts: containerPchEntry.setDescription('Entry of containerPchTable')
containerPchShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerPchShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerPchShelfNo.setDescription('Adress index.')
containerPchSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerPchSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerPchSlotNo.setDescription('Adress index.')
containerPchPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerPchPortNo.setStatus('current')
if mibBuilder.loadTexts: containerPchPortNo.setDescription('Adress index.')
containerPchExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerPchExtNo.setStatus('current')
if mibBuilder.loadTexts: containerPchExtNo.setDescription('Adress index.')
containerPchClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerPchClassName.setStatus('current')
if mibBuilder.loadTexts: containerPchClassName.setDescription('Entity Class Name')
containerPchAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPchAidString.setStatus('current')
if mibBuilder.loadTexts: containerPchAidString.setDescription('Aid string of entity.')
containerPchClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPchClass.setStatus('current')
if mibBuilder.loadTexts: containerPchClass.setDescription('Entity Class')
containerPchTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPchTableId.setStatus('current')
if mibBuilder.loadTexts: containerPchTableId.setDescription('RowPointer to managment table')
containerPchParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPchParentId.setStatus('current')
if mibBuilder.loadTexts: containerPchParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerVschTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25), )
if mibBuilder.loadTexts: containerVschTable.setStatus('current')
if mibBuilder.loadTexts: containerVschTable.setDescription('containerVschTable')
containerVschEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVschShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVschSlotNo"), (0, "ADVA-FSPR7-MIB", "containerVschPortNo"), (0, "ADVA-FSPR7-MIB", "containerVschExtNo"), (0, "ADVA-FSPR7-MIB", "containerVschClassName"))
if mibBuilder.loadTexts: containerVschEntry.setStatus('current')
if mibBuilder.loadTexts: containerVschEntry.setDescription('Entry of containerVschTable')
containerVschShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVschShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerVschShelfNo.setDescription('Adress index.')
containerVschSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVschSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerVschSlotNo.setDescription('Adress index.')
containerVschPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVschPortNo.setStatus('current')
if mibBuilder.loadTexts: containerVschPortNo.setDescription('Adress index.')
containerVschExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVschExtNo.setStatus('current')
if mibBuilder.loadTexts: containerVschExtNo.setDescription('Adress index.')
containerVschClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVschClassName.setStatus('current')
if mibBuilder.loadTexts: containerVschClassName.setDescription('Entity Class Name')
containerVschAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVschAidString.setStatus('current')
if mibBuilder.loadTexts: containerVschAidString.setDescription('Aid string of entity.')
containerVschClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVschClass.setStatus('current')
if mibBuilder.loadTexts: containerVschClass.setDescription('Entity Class')
containerVschTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVschTableId.setStatus('current')
if mibBuilder.loadTexts: containerVschTableId.setDescription('RowPointer to managment table')
containerVschParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVschParentId.setStatus('current')
if mibBuilder.loadTexts: containerVschParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerVch1Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26), )
if mibBuilder.loadTexts: containerVch1Table.setStatus('current')
if mibBuilder.loadTexts: containerVch1Table.setDescription('containerVch1Table')
containerVch1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVch1ShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVch1SlotNo"), (0, "ADVA-FSPR7-MIB", "containerVch1PortNo"), (0, "ADVA-FSPR7-MIB", "containerVch1ExtNo"), (0, "ADVA-FSPR7-MIB", "containerVch1ClassName"))
if mibBuilder.loadTexts: containerVch1Entry.setStatus('current')
if mibBuilder.loadTexts: containerVch1Entry.setDescription('Entry of containerVch1Table')
containerVch1ShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVch1ShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerVch1ShelfNo.setDescription('Adress index.')
containerVch1SlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVch1SlotNo.setStatus('current')
if mibBuilder.loadTexts: containerVch1SlotNo.setDescription('Adress index.')
containerVch1PortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVch1PortNo.setStatus('current')
if mibBuilder.loadTexts: containerVch1PortNo.setDescription('Adress index.')
containerVch1ExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVch1ExtNo.setStatus('current')
if mibBuilder.loadTexts: containerVch1ExtNo.setDescription('Adress index.')
containerVch1ClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVch1ClassName.setStatus('current')
if mibBuilder.loadTexts: containerVch1ClassName.setDescription('Entity Class Name')
containerVch1AidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVch1AidString.setStatus('current')
if mibBuilder.loadTexts: containerVch1AidString.setDescription('Aid string of entity.')
containerVch1Class = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVch1Class.setStatus('current')
if mibBuilder.loadTexts: containerVch1Class.setDescription('Entity Class')
containerVch1TableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVch1TableId.setStatus('current')
if mibBuilder.loadTexts: containerVch1TableId.setDescription('RowPointer to managment table')
containerVch1ParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVch1ParentId.setStatus('current')
if mibBuilder.loadTexts: containerVch1ParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerOmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40), )
if mibBuilder.loadTexts: containerOmTable.setStatus('current')
if mibBuilder.loadTexts: containerOmTable.setDescription('containerOmTable')
containerOmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerOmShelfNo"), (0, "ADVA-FSPR7-MIB", "containerOmSlotNo"), (0, "ADVA-FSPR7-MIB", "containerOmPortNo"), (0, "ADVA-FSPR7-MIB", "containerOmExtNo"), (0, "ADVA-FSPR7-MIB", "containerOmClassName"))
if mibBuilder.loadTexts: containerOmEntry.setStatus('current')
if mibBuilder.loadTexts: containerOmEntry.setDescription('Entry of containerOmTable')
containerOmShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerOmShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerOmShelfNo.setDescription('Adress index.')
containerOmSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerOmSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerOmSlotNo.setDescription('Adress index.')
containerOmPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerOmPortNo.setStatus('current')
if mibBuilder.loadTexts: containerOmPortNo.setDescription('Adress index.')
containerOmExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerOmExtNo.setStatus('current')
if mibBuilder.loadTexts: containerOmExtNo.setDescription('Adress index.')
containerOmClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerOmClassName.setStatus('current')
if mibBuilder.loadTexts: containerOmClassName.setDescription('Entity Class Name')
containerOmAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOmAidString.setStatus('current')
if mibBuilder.loadTexts: containerOmAidString.setDescription('Aid string of entity.')
containerOmClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOmClass.setStatus('current')
if mibBuilder.loadTexts: containerOmClass.setDescription('Entity Class')
containerOmTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOmTableId.setStatus('current')
if mibBuilder.loadTexts: containerOmTableId.setDescription('RowPointer to managment table')
containerOmParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOmParentId.setStatus('current')
if mibBuilder.loadTexts: containerOmParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerVomTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41), )
if mibBuilder.loadTexts: containerVomTable.setStatus('current')
if mibBuilder.loadTexts: containerVomTable.setDescription('containerVomTable')
containerVomEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVomShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVomSlotNo"), (0, "ADVA-FSPR7-MIB", "containerVomPortNo"), (0, "ADVA-FSPR7-MIB", "containerVomExtNo"), (0, "ADVA-FSPR7-MIB", "containerVomClassName"))
if mibBuilder.loadTexts: containerVomEntry.setStatus('current')
if mibBuilder.loadTexts: containerVomEntry.setDescription('Entry of containerVomTable')
containerVomShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVomShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerVomShelfNo.setDescription('Adress index.')
containerVomSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVomSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerVomSlotNo.setDescription('Adress index.')
containerVomPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVomPortNo.setStatus('current')
if mibBuilder.loadTexts: containerVomPortNo.setDescription('Adress index.')
containerVomExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVomExtNo.setStatus('current')
if mibBuilder.loadTexts: containerVomExtNo.setDescription('Adress index.')
containerVomClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVomClassName.setStatus('current')
if mibBuilder.loadTexts: containerVomClassName.setDescription('Entity Class Name')
containerVomAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVomAidString.setStatus('current')
if mibBuilder.loadTexts: containerVomAidString.setDescription('Aid string of entity.')
containerVomClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVomClass.setStatus('current')
if mibBuilder.loadTexts: containerVomClass.setDescription('Entity Class')
containerVomTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVomTableId.setStatus('current')
if mibBuilder.loadTexts: containerVomTableId.setDescription('RowPointer to managment table')
containerVomParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVomParentId.setStatus('current')
if mibBuilder.loadTexts: containerVomParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50), )
if mibBuilder.loadTexts: containerShelfConnTable.setStatus('current')
if mibBuilder.loadTexts: containerShelfConnTable.setDescription('containerShelfConnTable')
containerShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "containerShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "containerShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "containerShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "containerShelfConnClassName"))
if mibBuilder.loadTexts: containerShelfConnEntry.setStatus('current')
if mibBuilder.loadTexts: containerShelfConnEntry.setDescription('Entry of containerShelfConnTable')
containerShelfConnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerShelfConnShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerShelfConnShelfNo.setDescription('Adress index.')
containerShelfConnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerShelfConnSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerShelfConnSlotNo.setDescription('Adress index.')
containerShelfConnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerShelfConnPortNo.setStatus('current')
if mibBuilder.loadTexts: containerShelfConnPortNo.setDescription('Adress index.')
containerShelfConnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerShelfConnExtNo.setStatus('current')
if mibBuilder.loadTexts: containerShelfConnExtNo.setDescription('Adress index.')
containerShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerShelfConnClassName.setStatus('current')
if mibBuilder.loadTexts: containerShelfConnClassName.setDescription('Entity Class Name')
containerShelfConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfConnAidString.setStatus('current')
if mibBuilder.loadTexts: containerShelfConnAidString.setDescription('Aid string of entity.')
containerShelfConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfConnClass.setStatus('current')
if mibBuilder.loadTexts: containerShelfConnClass.setDescription('EntityClass')
containerShelfConnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfConnTableId.setStatus('current')
if mibBuilder.loadTexts: containerShelfConnTableId.setDescription('RowPointer to managment table')
containerShelfConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfConnParentId.setStatus('current')
if mibBuilder.loadTexts: containerShelfConnParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerFfpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60), )
if mibBuilder.loadTexts: containerFfpTable.setStatus('current')
if mibBuilder.loadTexts: containerFfpTable.setDescription('containerFfpTable')
containerFfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerFfpShelfNo"), (0, "ADVA-FSPR7-MIB", "containerFfpSlotNo"), (0, "ADVA-FSPR7-MIB", "containerFfpPortNo"), (0, "ADVA-FSPR7-MIB", "containerFfpExtNo"), (0, "ADVA-FSPR7-MIB", "containerFfpClassName"))
if mibBuilder.loadTexts: containerFfpEntry.setStatus('current')
if mibBuilder.loadTexts: containerFfpEntry.setDescription('Entry of containerFfpTable')
containerFfpShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerFfpShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerFfpShelfNo.setDescription('Adress index.')
containerFfpSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerFfpSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerFfpSlotNo.setDescription('Adress index.')
containerFfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerFfpPortNo.setStatus('current')
if mibBuilder.loadTexts: containerFfpPortNo.setDescription('Adress index.')
containerFfpExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerFfpExtNo.setStatus('current')
if mibBuilder.loadTexts: containerFfpExtNo.setDescription('Adress index.')
containerFfpClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerFfpClassName.setStatus('current')
if mibBuilder.loadTexts: containerFfpClassName.setDescription('Entity Class Name')
containerFfpAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFfpAidString.setStatus('current')
if mibBuilder.loadTexts: containerFfpAidString.setDescription('Aid string of entity.')
containerFfpClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFfpClass.setStatus('current')
if mibBuilder.loadTexts: containerFfpClass.setDescription('EntityClass')
containerFfpTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFfpTableId.setStatus('current')
if mibBuilder.loadTexts: containerFfpTableId.setDescription('RowPointer to managment table')
containerFfpParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFfpParentId.setStatus('current')
if mibBuilder.loadTexts: containerFfpParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerEccTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70), )
if mibBuilder.loadTexts: containerEccTable.setStatus('current')
if mibBuilder.loadTexts: containerEccTable.setDescription('containerEccTable')
containerEccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerEccShelfNo"), (0, "ADVA-FSPR7-MIB", "containerEccSlotNo"), (0, "ADVA-FSPR7-MIB", "containerEccPortNo"), (0, "ADVA-FSPR7-MIB", "containerEccExtNo"), (0, "ADVA-FSPR7-MIB", "containerEccClassName"))
if mibBuilder.loadTexts: containerEccEntry.setStatus('current')
if mibBuilder.loadTexts: containerEccEntry.setDescription('Entry of containerEccTable')
containerEccShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerEccShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerEccShelfNo.setDescription('Adress index.')
containerEccSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerEccSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerEccSlotNo.setDescription('Adress index.')
containerEccPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerEccPortNo.setStatus('current')
if mibBuilder.loadTexts: containerEccPortNo.setDescription('Adress index.')
containerEccExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerEccExtNo.setStatus('current')
if mibBuilder.loadTexts: containerEccExtNo.setDescription('Adress index.')
containerEccClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerEccClassName.setStatus('current')
if mibBuilder.loadTexts: containerEccClassName.setDescription('Entity Class Name')
containerEccAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEccAidString.setStatus('current')
if mibBuilder.loadTexts: containerEccAidString.setDescription('Aid string of entity.')
containerEccClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEccClass.setStatus('current')
if mibBuilder.loadTexts: containerEccClass.setDescription('Entity Class')
containerEccTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEccTableId.setStatus('current')
if mibBuilder.loadTexts: containerEccTableId.setDescription('RowPointer to managment table')
containerEccParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEccParentId.setStatus('current')
if mibBuilder.loadTexts: containerEccParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71), )
if mibBuilder.loadTexts: containerLinkTable.setStatus('current')
if mibBuilder.loadTexts: containerLinkTable.setDescription('containerLinkTable')
containerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerLinkShelfNo"), (0, "ADVA-FSPR7-MIB", "containerLinkSlotNo"), (0, "ADVA-FSPR7-MIB", "containerLinkPortNo"), (0, "ADVA-FSPR7-MIB", "containerLinkExtNo"), (0, "ADVA-FSPR7-MIB", "containerLinkClassName"))
if mibBuilder.loadTexts: containerLinkEntry.setStatus('current')
if mibBuilder.loadTexts: containerLinkEntry.setDescription('Entry of containerLinkTable')
containerLinkShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerLinkShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerLinkShelfNo.setDescription('Adress index.')
containerLinkSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerLinkSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerLinkSlotNo.setDescription('Adress index.')
containerLinkPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerLinkPortNo.setStatus('current')
if mibBuilder.loadTexts: containerLinkPortNo.setDescription('Adress index.')
containerLinkExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerLinkExtNo.setStatus('current')
if mibBuilder.loadTexts: containerLinkExtNo.setDescription('Adress index.')
containerLinkClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerLinkClassName.setStatus('current')
if mibBuilder.loadTexts: containerLinkClassName.setDescription('Entity Class Name')
containerLinkAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLinkAidString.setStatus('current')
if mibBuilder.loadTexts: containerLinkAidString.setDescription('Aid string of entity.')
containerLinkClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLinkClass.setStatus('current')
if mibBuilder.loadTexts: containerLinkClass.setDescription('Entity Class')
containerLinkTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLinkTableId.setStatus('current')
if mibBuilder.loadTexts: containerLinkTableId.setDescription('RowPointer to managment table')
containerLinkParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLinkParentId.setStatus('current')
if mibBuilder.loadTexts: containerLinkParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerScTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72), )
if mibBuilder.loadTexts: containerScTable.setStatus('current')
if mibBuilder.loadTexts: containerScTable.setDescription('containerScTable')
containerScEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerScShelfNo"), (0, "ADVA-FSPR7-MIB", "containerScSlotNo"), (0, "ADVA-FSPR7-MIB", "containerScPortNo"), (0, "ADVA-FSPR7-MIB", "containerScExtNo"), (0, "ADVA-FSPR7-MIB", "containerScClassName"))
if mibBuilder.loadTexts: containerScEntry.setStatus('current')
if mibBuilder.loadTexts: containerScEntry.setDescription('Entry of containerScTable')
containerScShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerScShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerScShelfNo.setDescription('Adress index.')
containerScSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerScSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerScSlotNo.setDescription('Adress index.')
containerScPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerScPortNo.setStatus('current')
if mibBuilder.loadTexts: containerScPortNo.setDescription('Adress index.')
containerScExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerScExtNo.setStatus('current')
if mibBuilder.loadTexts: containerScExtNo.setDescription('Adress index.')
containerScClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerScClassName.setStatus('current')
if mibBuilder.loadTexts: containerScClassName.setDescription('Entity Class Name')
containerScAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerScAidString.setStatus('current')
if mibBuilder.loadTexts: containerScAidString.setDescription('Aid string of entity.')
containerScClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerScClass.setStatus('current')
if mibBuilder.loadTexts: containerScClass.setDescription('Entity Class')
containerScTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerScTableId.setStatus('current')
if mibBuilder.loadTexts: containerScTableId.setDescription('RowPointer to managment table')
containerScParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerScParentId.setStatus('current')
if mibBuilder.loadTexts: containerScParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerLanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73), )
if mibBuilder.loadTexts: containerLanTable.setStatus('current')
if mibBuilder.loadTexts: containerLanTable.setDescription('containerLanTable')
containerLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerLanShelfNo"), (0, "ADVA-FSPR7-MIB", "containerLanSlotNo"), (0, "ADVA-FSPR7-MIB", "containerLanPortNo"), (0, "ADVA-FSPR7-MIB", "containerLanExtNo"), (0, "ADVA-FSPR7-MIB", "containerLanClassName"))
if mibBuilder.loadTexts: containerLanEntry.setStatus('current')
if mibBuilder.loadTexts: containerLanEntry.setDescription('Entry of containerLanTable')
containerLanShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerLanShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerLanShelfNo.setDescription('Adress index.')
containerLanSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerLanSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerLanSlotNo.setDescription('Adress index.')
containerLanPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerLanPortNo.setStatus('current')
if mibBuilder.loadTexts: containerLanPortNo.setDescription('Adress index.')
containerLanExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerLanExtNo.setStatus('current')
if mibBuilder.loadTexts: containerLanExtNo.setDescription('Adress index.')
containerLanClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerLanClassName.setStatus('current')
if mibBuilder.loadTexts: containerLanClassName.setDescription('Entity Class Name')
containerLanAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLanAidString.setStatus('current')
if mibBuilder.loadTexts: containerLanAidString.setDescription('Aid string of entity.')
containerLanClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLanClass.setStatus('current')
if mibBuilder.loadTexts: containerLanClass.setDescription('Entity Class')
containerLanTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLanTableId.setStatus('current')
if mibBuilder.loadTexts: containerLanTableId.setDescription('RowPointer to managment table')
containerLanParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLanParentId.setStatus('current')
if mibBuilder.loadTexts: containerLanParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80), )
if mibBuilder.loadTexts: containerEnvTable.setStatus('current')
if mibBuilder.loadTexts: containerEnvTable.setDescription('containerEnvTable')
containerEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "containerEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "containerEnvPortNo"), (0, "ADVA-FSPR7-MIB", "containerEnvExtNo"), (0, "ADVA-FSPR7-MIB", "containerEnvClassName"))
if mibBuilder.loadTexts: containerEnvEntry.setStatus('current')
if mibBuilder.loadTexts: containerEnvEntry.setDescription('Entry of containerEnvTable')
containerEnvShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerEnvShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerEnvShelfNo.setDescription('Adress index.')
containerEnvSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerEnvSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerEnvSlotNo.setDescription('Adress index.')
containerEnvPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerEnvPortNo.setStatus('current')
if mibBuilder.loadTexts: containerEnvPortNo.setDescription('Adress index.')
containerEnvExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerEnvExtNo.setStatus('current')
if mibBuilder.loadTexts: containerEnvExtNo.setDescription('Adress index.')
containerEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerEnvClassName.setStatus('current')
if mibBuilder.loadTexts: containerEnvClassName.setDescription('Entity Class Name')
containerEnvAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEnvAidString.setStatus('current')
if mibBuilder.loadTexts: containerEnvAidString.setDescription('Aid string of entity.')
containerEnvClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEnvClass.setStatus('current')
if mibBuilder.loadTexts: containerEnvClass.setDescription('EntityClass')
containerEnvTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEnvTableId.setStatus('current')
if mibBuilder.loadTexts: containerEnvTableId.setDescription('RowPointer to managment table')
containerEnvParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEnvParentId.setStatus('current')
if mibBuilder.loadTexts: containerEnvParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerWchTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90), )
if mibBuilder.loadTexts: containerWchTable.setStatus('current')
if mibBuilder.loadTexts: containerWchTable.setDescription('containerWchTable')
containerWchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerWchIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerWchIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerWchIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerWchIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerWchClassName"))
if mibBuilder.loadTexts: containerWchEntry.setStatus('current')
if mibBuilder.loadTexts: containerWchEntry.setDescription('Entry of containerWchTable')
containerWchIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerWchIndexNo1.setStatus('current')
if mibBuilder.loadTexts: containerWchIndexNo1.setDescription('Adress index.')
containerWchIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerWchIndexNo2.setStatus('current')
if mibBuilder.loadTexts: containerWchIndexNo2.setDescription('Adress index.')
containerWchIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerWchIndexNo3.setStatus('current')
if mibBuilder.loadTexts: containerWchIndexNo3.setDescription('Adress index.')
containerWchIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerWchIndexNo4.setStatus('current')
if mibBuilder.loadTexts: containerWchIndexNo4.setDescription('Adress index.')
containerWchClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerWchClassName.setStatus('current')
if mibBuilder.loadTexts: containerWchClassName.setDescription('Entity Class Name')
containerWchAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerWchAidString.setStatus('current')
if mibBuilder.loadTexts: containerWchAidString.setDescription('Aid string of entity.')
containerWchClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerWchClass.setStatus('current')
if mibBuilder.loadTexts: containerWchClass.setDescription('Entity Class')
containerWchTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerWchTableId.setStatus('current')
if mibBuilder.loadTexts: containerWchTableId.setDescription('RowPointer to managment table')
containerWchParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerWchParentId.setStatus('current')
if mibBuilder.loadTexts: containerWchParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerOlTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91), )
if mibBuilder.loadTexts: containerOlTable.setStatus('current')
if mibBuilder.loadTexts: containerOlTable.setDescription('containerOlTable')
containerOlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerOlIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerOlIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerOlIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerOlIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerOlClassName"))
if mibBuilder.loadTexts: containerOlEntry.setStatus('current')
if mibBuilder.loadTexts: containerOlEntry.setDescription('Entry of containerOlTable')
containerOlIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerOlIndexNo1.setStatus('current')
if mibBuilder.loadTexts: containerOlIndexNo1.setDescription('Adress index.')
containerOlIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerOlIndexNo2.setStatus('current')
if mibBuilder.loadTexts: containerOlIndexNo2.setDescription('Adress index.')
containerOlIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerOlIndexNo3.setStatus('current')
if mibBuilder.loadTexts: containerOlIndexNo3.setDescription('Adress index.')
containerOlIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerOlIndexNo4.setStatus('current')
if mibBuilder.loadTexts: containerOlIndexNo4.setDescription('Adress index.')
containerOlClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerOlClassName.setStatus('current')
if mibBuilder.loadTexts: containerOlClassName.setDescription('Entity Class Name')
containerOlAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOlAidString.setStatus('current')
if mibBuilder.loadTexts: containerOlAidString.setDescription('Aid string of entity.')
containerOlClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOlClass.setStatus('current')
if mibBuilder.loadTexts: containerOlClass.setDescription('Entity Class')
containerOlTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOlTableId.setStatus('current')
if mibBuilder.loadTexts: containerOlTableId.setDescription('RowPointer to managment table')
containerOlParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOlParentId.setStatus('current')
if mibBuilder.loadTexts: containerOlParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerOwlgTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92), )
if mibBuilder.loadTexts: containerOwlgTable.setStatus('current')
if mibBuilder.loadTexts: containerOwlgTable.setDescription('containerOwlgTable')
containerOwlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerOwlgIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerOwlgIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerOwlgIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerOwlgIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerOwlgClassName"))
if mibBuilder.loadTexts: containerOwlgEntry.setStatus('current')
if mibBuilder.loadTexts: containerOwlgEntry.setDescription('Entry of containerOwlgTable')
containerOwlgIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerOwlgIndexNo1.setStatus('current')
if mibBuilder.loadTexts: containerOwlgIndexNo1.setDescription('Adress index.')
containerOwlgIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerOwlgIndexNo2.setStatus('current')
if mibBuilder.loadTexts: containerOwlgIndexNo2.setDescription('Adress index.')
containerOwlgIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerOwlgIndexNo3.setStatus('current')
if mibBuilder.loadTexts: containerOwlgIndexNo3.setDescription('Adress index.')
containerOwlgIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerOwlgIndexNo4.setStatus('current')
if mibBuilder.loadTexts: containerOwlgIndexNo4.setDescription('Adress index.')
containerOwlgClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerOwlgClassName.setStatus('current')
if mibBuilder.loadTexts: containerOwlgClassName.setDescription('Entity Class Name')
containerOwlgAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOwlgAidString.setStatus('current')
if mibBuilder.loadTexts: containerOwlgAidString.setDescription('Aid string of entity.')
containerOwlgClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOwlgClass.setStatus('current')
if mibBuilder.loadTexts: containerOwlgClass.setDescription('Entity Class')
containerOwlgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOwlgTableId.setStatus('current')
if mibBuilder.loadTexts: containerOwlgTableId.setDescription('RowPointer to managment table')
containerOwlgParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOwlgParentId.setStatus('current')
if mibBuilder.loadTexts: containerOwlgParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
containerCrossDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93), )
if mibBuilder.loadTexts: containerCrossDcnTable.setStatus('current')
if mibBuilder.loadTexts: containerCrossDcnTable.setDescription('containerCrossDcnTable')
containerCrossDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrossDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "containerCrossDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "containerCrossDcnPortNo"), (0, "ADVA-FSPR7-MIB", "containerCrossDcnExtNo"), (0, "ADVA-FSPR7-MIB", "containerCrossDcnClassName"))
if mibBuilder.loadTexts: containerCrossDcnEntry.setStatus('current')
if mibBuilder.loadTexts: containerCrossDcnEntry.setDescription('Entry of containerCrossDcnTable')
containerCrossDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrossDcnShelfNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossDcnShelfNo.setDescription('Adress index.')
containerCrossDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrossDcnSlotNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossDcnSlotNo.setDescription('Adress index.')
containerCrossDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrossDcnPortNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossDcnPortNo.setDescription('Adress index.')
containerCrossDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrossDcnExtNo.setStatus('current')
if mibBuilder.loadTexts: containerCrossDcnExtNo.setDescription('Adress index.')
containerCrossDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrossDcnClassName.setStatus('current')
if mibBuilder.loadTexts: containerCrossDcnClassName.setDescription('Entity Class Name')
containerCrossDcnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossDcnAidString.setStatus('current')
if mibBuilder.loadTexts: containerCrossDcnAidString.setDescription('Aid string of entity.')
containerCrossDcnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossDcnClass.setStatus('current')
if mibBuilder.loadTexts: containerCrossDcnClass.setDescription('Entity Class')
containerCrossDcnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossDcnTableId.setStatus('current')
if mibBuilder.loadTexts: containerCrossDcnTableId.setDescription('RowPointer to managment table')
containerCrossDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossDcnParentId.setStatus('current')
if mibBuilder.loadTexts: containerCrossDcnParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
nextUnusedPc = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 94), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextUnusedPc.setStatus('current')
if mibBuilder.loadTexts: nextUnusedPc.setDescription('First not assigned PC entity in the system')
nextUnusedFc = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 95), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextUnusedFc.setStatus('current')
if mibBuilder.loadTexts: nextUnusedFc.setDescription('First not assigned FC entity in the system')
endOfContainers = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainers.setStatus('current')
if mibBuilder.loadTexts: endOfContainers.setDescription('')
entitySysTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1), )
if mibBuilder.loadTexts: entitySysTable.setStatus('current')
if mibBuilder.loadTexts: entitySysTable.setDescription('entitySysTable')
entitySysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entitySysShelfNo"), (0, "ADVA-FSPR7-MIB", "entitySysSlotNo"), (0, "ADVA-FSPR7-MIB", "entitySysPortNo"), (0, "ADVA-FSPR7-MIB", "entitySysExtNo"), (0, "ADVA-FSPR7-MIB", "entitySysClassName"))
if mibBuilder.loadTexts: entitySysEntry.setStatus('current')
if mibBuilder.loadTexts: entitySysEntry.setDescription('Entry of entitySysTable')
entitySysShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entitySysShelfNo.setStatus('current')
if mibBuilder.loadTexts: entitySysShelfNo.setDescription('Adress index.')
entitySysSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entitySysSlotNo.setStatus('current')
if mibBuilder.loadTexts: entitySysSlotNo.setDescription('Adress index.')
entitySysPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entitySysPortNo.setStatus('current')
if mibBuilder.loadTexts: entitySysPortNo.setDescription('Adress index.')
entitySysExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entitySysExtNo.setStatus('current')
if mibBuilder.loadTexts: entitySysExtNo.setDescription('Adress index.')
entitySysClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entitySysClassName.setStatus('current')
if mibBuilder.loadTexts: entitySysClassName.setDescription('Entity Class Name')
entitySysAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysAidString.setStatus('current')
if mibBuilder.loadTexts: entitySysAidString.setDescription('Aid string of entity.')
entitySysType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysType.setStatus('current')
if mibBuilder.loadTexts: entitySysType.setDescription('The type of entity.')
entitySysTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysTableId.setStatus('current')
if mibBuilder.loadTexts: entitySysTableId.setDescription('RowPointer to managment table of entity.')
entitySysParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysParentId.setStatus('current')
if mibBuilder.loadTexts: entitySysParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entitySysClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysClass.setStatus('current')
if mibBuilder.loadTexts: entitySysClass.setDescription('EntityClass')
entitySysOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysOneIndex.setStatus('current')
if mibBuilder.loadTexts: entitySysOneIndex.setDescription('One Index Aid representation')
entitySysEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 12), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysEquipmentState.setStatus('current')
if mibBuilder.loadTexts: entitySysEquipmentState.setDescription('See EquipmentState.')
entityEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2), )
if mibBuilder.loadTexts: entityEqptTable.setStatus('current')
if mibBuilder.loadTexts: entityEqptTable.setDescription('entityEqptTable')
entityEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: entityEqptEntry.setStatus('current')
if mibBuilder.loadTexts: entityEqptEntry.setDescription('Entry of entityEqptTable')
entityEqptShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityEqptShelfNo.setStatus('current')
if mibBuilder.loadTexts: entityEqptShelfNo.setDescription('Adress index.')
entityEqptSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityEqptSlotNo.setStatus('current')
if mibBuilder.loadTexts: entityEqptSlotNo.setDescription('Adress index.')
entityEqptPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityEqptPortNo.setStatus('current')
if mibBuilder.loadTexts: entityEqptPortNo.setDescription('Adress index.')
entityEqptExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityEqptExtNo.setStatus('current')
if mibBuilder.loadTexts: entityEqptExtNo.setDescription('Adress index.')
entityEqptClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityEqptClassName.setStatus('current')
if mibBuilder.loadTexts: entityEqptClassName.setDescription('Entity Class Name.')
entityEqptAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptAidString.setStatus('current')
if mibBuilder.loadTexts: entityEqptAidString.setDescription('Aid string of entity.')
entityEqptType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptType.setStatus('current')
if mibBuilder.loadTexts: entityEqptType.setDescription('The type of entity.')
entityEqptTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptTableId.setStatus('current')
if mibBuilder.loadTexts: entityEqptTableId.setDescription('RowPointer to managment table of entity.')
entityEqptParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptParentId.setStatus('current')
if mibBuilder.loadTexts: entityEqptParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityEqptClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptClass.setStatus('current')
if mibBuilder.loadTexts: entityEqptClass.setDescription('EntityClass')
entityEqptOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptOneIndex.setStatus('current')
if mibBuilder.loadTexts: entityEqptOneIndex.setDescription('One Index Aid representation')
entityEqptEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 12), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptEquipmentState.setStatus('current')
if mibBuilder.loadTexts: entityEqptEquipmentState.setDescription('See EquipmentState.')
entityEqptMtosiParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 13), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptMtosiParentId.setStatus('current')
if mibBuilder.loadTexts: entityEqptMtosiParentId.setDescription('')
entityDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3), )
if mibBuilder.loadTexts: entityDcnTable.setStatus('current')
if mibBuilder.loadTexts: entityDcnTable.setDescription('entityDcnTable')
entityDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: entityDcnEntry.setStatus('current')
if mibBuilder.loadTexts: entityDcnEntry.setDescription('Entry of entityDcnTable')
entityDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityDcnShelfNo.setStatus('current')
if mibBuilder.loadTexts: entityDcnShelfNo.setDescription('Adress index.')
entityDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityDcnSlotNo.setStatus('current')
if mibBuilder.loadTexts: entityDcnSlotNo.setDescription('Adress index.')
entityDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityDcnPortNo.setStatus('current')
if mibBuilder.loadTexts: entityDcnPortNo.setDescription('Adress index.')
entityDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityDcnExtNo.setStatus('current')
if mibBuilder.loadTexts: entityDcnExtNo.setDescription('Adress index.')
entityDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityDcnClassName.setStatus('current')
if mibBuilder.loadTexts: entityDcnClassName.setDescription('Entity Class Name')
entityDcnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnAidString.setStatus('current')
if mibBuilder.loadTexts: entityDcnAidString.setDescription('Aid string of entity.')
entityDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnType.setStatus('current')
if mibBuilder.loadTexts: entityDcnType.setDescription('The type of entity.')
entityDcnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnTableId.setStatus('current')
if mibBuilder.loadTexts: entityDcnTableId.setDescription('RowPointer to managment table of entity.')
entityDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnParentId.setStatus('current')
if mibBuilder.loadTexts: entityDcnParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityDcnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnClass.setStatus('current')
if mibBuilder.loadTexts: entityDcnClass.setDescription('EntityClass')
entityDcnOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnOneIndex.setStatus('current')
if mibBuilder.loadTexts: entityDcnOneIndex.setDescription('One Index Aid representation')
entityOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4), )
if mibBuilder.loadTexts: entityOptLineTable.setStatus('current')
if mibBuilder.loadTexts: entityOptLineTable.setDescription('entityOptLineTable')
entityOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityOptLineClassName"))
if mibBuilder.loadTexts: entityOptLineEntry.setStatus('current')
if mibBuilder.loadTexts: entityOptLineEntry.setDescription('Entry of entityOptLineTable')
entityOptLineIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityOptLineIndexNo1.setStatus('current')
if mibBuilder.loadTexts: entityOptLineIndexNo1.setDescription('Adress index.')
entityOptLineIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityOptLineIndexNo2.setStatus('current')
if mibBuilder.loadTexts: entityOptLineIndexNo2.setDescription('Adress index.')
entityOptLineIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityOptLineIndexNo3.setStatus('current')
if mibBuilder.loadTexts: entityOptLineIndexNo3.setDescription('Adress index.')
entityOptLineIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityOptLineIndexNo4.setStatus('current')
if mibBuilder.loadTexts: entityOptLineIndexNo4.setDescription('Adress index.')
entityOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityOptLineClassName.setStatus('current')
if mibBuilder.loadTexts: entityOptLineClassName.setDescription('Entity Class Name')
entityOptLineAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineAidString.setStatus('current')
if mibBuilder.loadTexts: entityOptLineAidString.setDescription('Aid string of entity.')
entityOptLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineType.setStatus('current')
if mibBuilder.loadTexts: entityOptLineType.setDescription('The type of entity.')
entityOptLineTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineTableId.setStatus('current')
if mibBuilder.loadTexts: entityOptLineTableId.setDescription('RowPointer to managment table of entity.')
entityOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineParentId.setStatus('current')
if mibBuilder.loadTexts: entityOptLineParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityOptLineOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineOneIndex.setStatus('current')
if mibBuilder.loadTexts: entityOptLineOneIndex.setDescription('One Index Aid representation')
entityOptLineClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 11), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineClass.setStatus('current')
if mibBuilder.loadTexts: entityOptLineClass.setDescription('EntityClass')
entityEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5), )
if mibBuilder.loadTexts: entityEnvTable.setStatus('current')
if mibBuilder.loadTexts: entityEnvTable.setDescription('entityEnvTable')
entityEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEnvPortNo"), (0, "ADVA-FSPR7-MIB", "entityEnvExtNo"), (0, "ADVA-FSPR7-MIB", "entityEnvClassName"))
if mibBuilder.loadTexts: entityEnvEntry.setStatus('current')
if mibBuilder.loadTexts: entityEnvEntry.setDescription('Entry of entityEnvTable')
entityEnvShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityEnvShelfNo.setStatus('current')
if mibBuilder.loadTexts: entityEnvShelfNo.setDescription('Adress index.')
entityEnvSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityEnvSlotNo.setStatus('current')
if mibBuilder.loadTexts: entityEnvSlotNo.setDescription('Adress index.')
entityEnvPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityEnvPortNo.setStatus('current')
if mibBuilder.loadTexts: entityEnvPortNo.setDescription('Adress index.')
entityEnvExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityEnvExtNo.setStatus('current')
if mibBuilder.loadTexts: entityEnvExtNo.setDescription('Adress index.')
entityEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityEnvClassName.setStatus('current')
if mibBuilder.loadTexts: entityEnvClassName.setDescription('Entity Class Name')
entityEnvAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvAidString.setStatus('current')
if mibBuilder.loadTexts: entityEnvAidString.setDescription('Aid string of entity.')
entityEnvType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvType.setStatus('current')
if mibBuilder.loadTexts: entityEnvType.setDescription('The type of entity.')
entityEnvTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvTableId.setStatus('current')
if mibBuilder.loadTexts: entityEnvTableId.setDescription('RowPointer to managment table of entity.')
entityEnvParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvParentId.setStatus('current')
if mibBuilder.loadTexts: entityEnvParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityEnvClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvClass.setStatus('current')
if mibBuilder.loadTexts: entityEnvClass.setDescription('EntityClass')
entityEnvOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvOneIndex.setStatus('current')
if mibBuilder.loadTexts: entityEnvOneIndex.setDescription('One Index Aid representation')
entityFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7), )
if mibBuilder.loadTexts: entityFacilityTable.setStatus('current')
if mibBuilder.loadTexts: entityFacilityTable.setDescription('entityFacilityTable')
entityFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: entityFacilityEntry.setStatus('current')
if mibBuilder.loadTexts: entityFacilityEntry.setDescription('Entry of entityFacilityTable')
entityFacilityShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityFacilityShelfNo.setStatus('current')
if mibBuilder.loadTexts: entityFacilityShelfNo.setDescription('Adress index.')
entityFacilitySlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityFacilitySlotNo.setStatus('current')
if mibBuilder.loadTexts: entityFacilitySlotNo.setDescription('Adress index.')
entityFacilityPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityFacilityPortNo.setStatus('current')
if mibBuilder.loadTexts: entityFacilityPortNo.setDescription('Adress index.')
entityFacilityExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityFacilityExtNo.setStatus('current')
if mibBuilder.loadTexts: entityFacilityExtNo.setDescription('Adress index.')
entityFacilityClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityFacilityClassName.setStatus('current')
if mibBuilder.loadTexts: entityFacilityClassName.setDescription('Entity Class Name')
entityFacilityAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityAidString.setStatus('current')
if mibBuilder.loadTexts: entityFacilityAidString.setDescription('Aid string of entity.')
entityFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityType.setStatus('current')
if mibBuilder.loadTexts: entityFacilityType.setDescription('The type of entity.')
entityFacilityTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityTableId.setStatus('current')
if mibBuilder.loadTexts: entityFacilityTableId.setDescription('RowPointer to managment table of entity.')
entityFacilityParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityParentId.setStatus('current')
if mibBuilder.loadTexts: entityFacilityParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityFacilityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityClass.setStatus('current')
if mibBuilder.loadTexts: entityFacilityClass.setDescription('EntityClass')
entityFacilityOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityOneIndex.setStatus('current')
if mibBuilder.loadTexts: entityFacilityOneIndex.setDescription('One Index Aid representation')
entityCrossConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8), )
if mibBuilder.loadTexts: entityCrossConnTable.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnTable.setDescription('entityCrossConnTable')
entityCrossConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossConnFromShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnClassName"))
if mibBuilder.loadTexts: entityCrossConnEntry.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnEntry.setDescription('Entry of entityCrossConnTable')
entityCrossConnFromShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnFromShelfNo.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnFromShelfNo.setDescription('Adress index.')
entityCrossConnFromSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnFromSlotNo.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnFromSlotNo.setDescription('Adress index.')
entityCrossConnFromPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnFromPortNo.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnFromPortNo.setDescription('Adress index.')
entityCrossConnFromExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnFromExtNo.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnFromExtNo.setDescription('Adress index.')
entityCrossConnFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityCrossConnFromClassName.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnFromClassName.setDescription('Entity Class Name')
entityCrossConnToShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 6), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnToShelfNo.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnToShelfNo.setDescription('Adress index.')
entityCrossConnToSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 7), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnToSlotNo.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnToSlotNo.setDescription('Adress index.')
entityCrossConnToPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 8), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnToPortNo.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnToPortNo.setDescription('Adress index.')
entityCrossConnToExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 9), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnToExtNo.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnToExtNo.setDescription('Adress index.')
entityCrossConnToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 10), EntityClassName())
if mibBuilder.loadTexts: entityCrossConnToClassName.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnToClassName.setDescription('Entity Class Name')
entityCrossConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 11), EntityClassName())
if mibBuilder.loadTexts: entityCrossConnClassName.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnClassName.setDescription('Entity Class Name')
entityCrossConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnAidString.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnAidString.setDescription('Aid string of entity.')
entityCrossConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 13), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnType.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnType.setDescription('The type of entity.')
entityCrossConnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnTableId.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnTableId.setDescription('RowPointer to managment table of entity.')
entityCrossConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 15), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnParentId.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityCrossConnFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnFromId.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnFromId.setDescription('RowPointer to FROM point entity.')
entityCrossConnToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnToId.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnToId.setDescription('RowPointer to TO point entity.')
entityCrossConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 18), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnClass.setStatus('current')
if mibBuilder.loadTexts: entityCrossConnClass.setDescription('EntityClass')
entityTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10), )
if mibBuilder.loadTexts: entityTerminPointTable.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointTable.setDescription('entityTerminPointTable')
entityTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"))
if mibBuilder.loadTexts: entityTerminPointEntry.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointEntry.setDescription('Entry of entityTerminPointTable')
entityTerminPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityTerminPointIndexNo1.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointIndexNo1.setDescription('Adress index.')
entityTerminPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityTerminPointIndexNo2.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointIndexNo2.setDescription('Adress index.')
entityTerminPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityTerminPointIndexNo3.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointIndexNo3.setDescription('Adress index.')
entityTerminPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityTerminPointIndexNo4.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointIndexNo4.setDescription('Adress index.')
entityTerminPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityTerminPointClassName.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointClassName.setDescription('Entity Class Name')
entityTerminPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointAidString.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointAidString.setDescription('Aid string of entity.')
entityTerminPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointType.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointType.setDescription('The type of entity.')
entityTerminPointAssignState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 8), AssignmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointAssignState.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointAssignState.setDescription('Assignment state of entity.')
entityTerminPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointTableId.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointTableId.setDescription('RowPointer to managment table of entity.')
entityTerminPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointParentId.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityTerminPointOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointOneIndex.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointOneIndex.setDescription('One Index Aid representation')
entityTerminPointReferencedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 12), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointReferencedTo.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointReferencedTo.setDescription('RowPointer to refer object.')
entityTerminPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 13), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointClass.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointClass.setDescription('EntityClass')
entityTerminPointPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 14), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointPortClass.setStatus('current')
if mibBuilder.loadTexts: entityTerminPointPortClass.setDescription('EntityClass of the corresponding Port.')
entityConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11), )
if mibBuilder.loadTexts: entityConnectionTable.setStatus('current')
if mibBuilder.loadTexts: entityConnectionTable.setDescription('entityConnectionTable')
entityConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityConnectionClassName"))
if mibBuilder.loadTexts: entityConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: entityConnectionEntry.setDescription('Entry of entityConnectionTable')
entityConnectionClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 1), EntityClassName())
if mibBuilder.loadTexts: entityConnectionClassName.setStatus('current')
if mibBuilder.loadTexts: entityConnectionClassName.setDescription('Entity Class Name')
entityConnectionAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionAidString.setStatus('current')
if mibBuilder.loadTexts: entityConnectionAidString.setDescription('Aid string of entity.')
entityConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 3), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionType.setStatus('current')
if mibBuilder.loadTexts: entityConnectionType.setDescription('The type of entity.')
entityConnectionTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionTableId.setStatus('current')
if mibBuilder.loadTexts: entityConnectionTableId.setDescription('RowPointer to managment table of entity.')
entityConnectionParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionParentId.setStatus('current')
if mibBuilder.loadTexts: entityConnectionParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityConnectionFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 6), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionFromId.setStatus('current')
if mibBuilder.loadTexts: entityConnectionFromId.setDescription('RowPointer to FROM point entity.')
entityConnectionToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionToId.setStatus('current')
if mibBuilder.loadTexts: entityConnectionToId.setDescription('RowPointer to TO point entity.')
entityConnectionClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionClass.setStatus('current')
if mibBuilder.loadTexts: entityConnectionClass.setDescription('EntityClass')
entityExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12), )
if mibBuilder.loadTexts: entityExternalPortTable.setStatus('current')
if mibBuilder.loadTexts: entityExternalPortTable.setDescription('entityExternalPortTable')
entityExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: entityExternalPortEntry.setStatus('current')
if mibBuilder.loadTexts: entityExternalPortEntry.setDescription('Entry of entityExternalPortTable')
entityExternalPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityExternalPortShelfNo.setStatus('current')
if mibBuilder.loadTexts: entityExternalPortShelfNo.setDescription('Adress index.')
entityExternalPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityExternalPortSlotNo.setStatus('current')
if mibBuilder.loadTexts: entityExternalPortSlotNo.setDescription('Adress index.')
entityExternalPortPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityExternalPortPortNo.setStatus('current')
if mibBuilder.loadTexts: entityExternalPortPortNo.setDescription('Adress index.')
entityExternalPortExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityExternalPortExtNo.setStatus('current')
if mibBuilder.loadTexts: entityExternalPortExtNo.setDescription('Adress index.')
entityExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityExternalPortClassName.setStatus('current')
if mibBuilder.loadTexts: entityExternalPortClassName.setDescription('Entity Class Name')
entityExternalPortAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortAidString.setStatus('current')
if mibBuilder.loadTexts: entityExternalPortAidString.setDescription('Aid string of entity.')
entityExternalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortType.setStatus('current')
if mibBuilder.loadTexts: entityExternalPortType.setDescription('The type of entity.')
entityExternalPortTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortTableId.setStatus('current')
if mibBuilder.loadTexts: entityExternalPortTableId.setDescription('RowPointer to managment table of entity.')
entityExternalPortParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortParentId.setStatus('current')
if mibBuilder.loadTexts: entityExternalPortParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityExternalPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortClass.setStatus('current')
if mibBuilder.loadTexts: entityExternalPortClass.setDescription('EntityClass')
entityExternalPortOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortOneIndex.setStatus('current')
if mibBuilder.loadTexts: entityExternalPortOneIndex.setDescription('One Index Aid representation')
entityCrsOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13), )
if mibBuilder.loadTexts: entityCrsOptLineTable.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineTable.setDescription('entityCrsOptLineTable')
entityCrsOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineClassName"))
if mibBuilder.loadTexts: entityCrsOptLineEntry.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineEntry.setDescription('Entry of entityCrsOptLineTable')
entityCrsOptLineFromIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo1.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo1.setDescription('Adress index.')
entityCrsOptLineFromIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo2.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo2.setDescription('Adress index.')
entityCrsOptLineFromIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo3.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo3.setDescription('Adress index.')
entityCrsOptLineFromIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo4.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo4.setDescription('Adress index.')
entityCrsOptLineFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityCrsOptLineFromClassName.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineFromClassName.setDescription('Entity Class Name')
entityCrsOptLineToIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 6), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo1.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo1.setDescription('Adress index.')
entityCrsOptLineToIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 7), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo2.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo2.setDescription('Adress index.')
entityCrsOptLineToIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 8), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo3.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo3.setDescription('Adress index.')
entityCrsOptLineToIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 9), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo4.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo4.setDescription('Adress index.')
entityCrsOptLineToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 10), EntityClassName())
if mibBuilder.loadTexts: entityCrsOptLineToClassName.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineToClassName.setDescription('Entity Class Name')
entityCrsOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 11), EntityClassName())
if mibBuilder.loadTexts: entityCrsOptLineClassName.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineClassName.setDescription('Entity Class Name')
entityCrsOptLineAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineAidString.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineAidString.setDescription('Aid string of entity.')
entityCrsOptLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 13), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineType.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineType.setDescription('The type of entity.')
entityCrsOptLineTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineTableId.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineTableId.setDescription('RowPointer to managment table of entity.')
entityCrsOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 15), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineParentId.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityCrsOptLineFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineFromId.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineFromId.setDescription('RowPointer to FROM point entity.')
entityCrsOptLineToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineToId.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineToId.setDescription('RowPointer to TO point entity.')
entityCrsOptLineClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 18), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineClass.setStatus('current')
if mibBuilder.loadTexts: entityCrsOptLineClass.setDescription('EntityClass')
entityContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16), )
if mibBuilder.loadTexts: entityContainerTable.setStatus('current')
if mibBuilder.loadTexts: entityContainerTable.setDescription('entityContainerTable')
entityContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"))
if mibBuilder.loadTexts: entityContainerEntry.setStatus('current')
if mibBuilder.loadTexts: entityContainerEntry.setDescription('Entry of entityContainerTable')
entityContainerShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityContainerShelfNo.setStatus('current')
if mibBuilder.loadTexts: entityContainerShelfNo.setDescription('Adress index.')
entityContainerSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityContainerSlotNo.setStatus('current')
if mibBuilder.loadTexts: entityContainerSlotNo.setDescription('Adress index.')
entityContainerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityContainerPortNo.setStatus('current')
if mibBuilder.loadTexts: entityContainerPortNo.setDescription('Adress index.')
entityContainerExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityContainerExtNo.setStatus('current')
if mibBuilder.loadTexts: entityContainerExtNo.setDescription('Adress index.')
entityContainerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityContainerClassName.setStatus('current')
if mibBuilder.loadTexts: entityContainerClassName.setDescription('Entity Class Name')
entityContainerAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerAidString.setStatus('current')
if mibBuilder.loadTexts: entityContainerAidString.setDescription('Aid string of entity.')
entityContainerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerType.setStatus('current')
if mibBuilder.loadTexts: entityContainerType.setDescription('The type of entity.')
entityContainerTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerTableId.setStatus('current')
if mibBuilder.loadTexts: entityContainerTableId.setDescription('RowPointer to managment table of entity.')
entityContainerParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerParentId.setStatus('current')
if mibBuilder.loadTexts: entityContainerParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityContainerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerClass.setStatus('current')
if mibBuilder.loadTexts: entityContainerClass.setDescription('EntityClass')
entityContainerOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerOneIndex.setStatus('current')
if mibBuilder.loadTexts: entityContainerOneIndex.setDescription('One Index Aid representation')
entityOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17), )
if mibBuilder.loadTexts: entityOpticalMuxTable.setStatus('current')
if mibBuilder.loadTexts: entityOpticalMuxTable.setDescription('entityOpticalTable')
entityOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: entityOpticalMuxEntry.setStatus('current')
if mibBuilder.loadTexts: entityOpticalMuxEntry.setDescription('Entry of entityOpticalTable')
entityOpticalMuxShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityOpticalMuxShelfNo.setStatus('current')
if mibBuilder.loadTexts: entityOpticalMuxShelfNo.setDescription('Adress index.')
entityOpticalMuxSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityOpticalMuxSlotNo.setStatus('current')
if mibBuilder.loadTexts: entityOpticalMuxSlotNo.setDescription('Adress index.')
entityOpticalMuxPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityOpticalMuxPortNo.setStatus('current')
if mibBuilder.loadTexts: entityOpticalMuxPortNo.setDescription('Adress index.')
entityOpticalMuxExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityOpticalMuxExtNo.setStatus('current')
if mibBuilder.loadTexts: entityOpticalMuxExtNo.setDescription('Adress index.')
entityOpticalMuxClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityOpticalMuxClassName.setStatus('current')
if mibBuilder.loadTexts: entityOpticalMuxClassName.setDescription('Entity Class Name')
entityOpticalMuxAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxAidString.setStatus('current')
if mibBuilder.loadTexts: entityOpticalMuxAidString.setDescription('Aid string of entity.')
entityOpticalMuxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxType.setStatus('current')
if mibBuilder.loadTexts: entityOpticalMuxType.setDescription('The type of entity.')
entityOpticalMuxTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxTableId.setStatus('current')
if mibBuilder.loadTexts: entityOpticalMuxTableId.setDescription('RowPointer to managment table of entity.')
entityOpticalMuxParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxParentId.setStatus('current')
if mibBuilder.loadTexts: entityOpticalMuxParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityOpticalMuxClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxClass.setStatus('current')
if mibBuilder.loadTexts: entityOpticalMuxClass.setDescription('EntityClass')
entityOpticalMuxOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxOneIndex.setStatus('current')
if mibBuilder.loadTexts: entityOpticalMuxOneIndex.setDescription('One Index Aid representation')
entityShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18), )
if mibBuilder.loadTexts: entityShelfConnTable.setStatus('current')
if mibBuilder.loadTexts: entityShelfConnTable.setDescription('entityShelfConnTable')
entityShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"))
if mibBuilder.loadTexts: entityShelfConnEntry.setStatus('current')
if mibBuilder.loadTexts: entityShelfConnEntry.setDescription('Entry of entityShelfConnTable')
entityShelfConnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityShelfConnShelfNo.setStatus('current')
if mibBuilder.loadTexts: entityShelfConnShelfNo.setDescription('Adress index.')
entityShelfConnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityShelfConnSlotNo.setStatus('current')
if mibBuilder.loadTexts: entityShelfConnSlotNo.setDescription('Adress index.')
entityShelfConnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityShelfConnPortNo.setStatus('current')
if mibBuilder.loadTexts: entityShelfConnPortNo.setDescription('Adress index.')
entityShelfConnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityShelfConnExtNo.setStatus('current')
if mibBuilder.loadTexts: entityShelfConnExtNo.setDescription('Adress index.')
entityShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityShelfConnClassName.setStatus('current')
if mibBuilder.loadTexts: entityShelfConnClassName.setDescription('Entity Class Name')
entityShelfConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnAidString.setStatus('current')
if mibBuilder.loadTexts: entityShelfConnAidString.setDescription('Aid string of entity.')
entityShelfConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnType.setStatus('current')
if mibBuilder.loadTexts: entityShelfConnType.setDescription('The type of entity.')
entityShelfConnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnTableId.setStatus('current')
if mibBuilder.loadTexts: entityShelfConnTableId.setDescription('RowPointer to managment table of entity.')
entityShelfConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnParentId.setStatus('current')
if mibBuilder.loadTexts: entityShelfConnParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityShelfConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnClass.setStatus('current')
if mibBuilder.loadTexts: entityShelfConnClass.setDescription('EntityClass')
entityShelfConnOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnOneIndex.setStatus('current')
if mibBuilder.loadTexts: entityShelfConnOneIndex.setDescription('One Index Aid representation')
entityFfpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19), )
if mibBuilder.loadTexts: entityFfpTable.setStatus('current')
if mibBuilder.loadTexts: entityFfpTable.setDescription('entityFfpTable - conatains entities used by Protection')
entityFfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFfpShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFfpSlotNo"), (0, "ADVA-FSPR7-MIB", "entityFfpPortNo"), (0, "ADVA-FSPR7-MIB", "entityFfpExtNo"), (0, "ADVA-FSPR7-MIB", "entityFfpClassName"))
if mibBuilder.loadTexts: entityFfpEntry.setStatus('current')
if mibBuilder.loadTexts: entityFfpEntry.setDescription('Entry of entityFfpTable')
entityFfpShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityFfpShelfNo.setStatus('current')
if mibBuilder.loadTexts: entityFfpShelfNo.setDescription('Adress index.')
entityFfpSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityFfpSlotNo.setStatus('current')
if mibBuilder.loadTexts: entityFfpSlotNo.setDescription('Adress index.')
entityFfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityFfpPortNo.setStatus('current')
if mibBuilder.loadTexts: entityFfpPortNo.setDescription('Adress index.')
entityFfpExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityFfpExtNo.setStatus('current')
if mibBuilder.loadTexts: entityFfpExtNo.setDescription('Adress index.')
entityFfpClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityFfpClassName.setStatus('current')
if mibBuilder.loadTexts: entityFfpClassName.setDescription('Entity Class Name')
entityFfpAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpAidString.setStatus('current')
if mibBuilder.loadTexts: entityFfpAidString.setDescription('Aid string of entity.')
entityFfpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpType.setStatus('current')
if mibBuilder.loadTexts: entityFfpType.setDescription('The type of entity.')
entityFfpTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpTableId.setStatus('current')
if mibBuilder.loadTexts: entityFfpTableId.setDescription('RowPointer to managment table of entity.')
entityFfpParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpParentId.setStatus('current')
if mibBuilder.loadTexts: entityFfpParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityFfpClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpClass.setStatus('current')
if mibBuilder.loadTexts: entityFfpClass.setDescription('EntityClass')
entityFfpOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpOneIndex.setStatus('current')
if mibBuilder.loadTexts: entityFfpOneIndex.setDescription('One Index Aid representation')
entityCrossDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20), )
if mibBuilder.loadTexts: entityCrossDcnTable.setStatus('current')
if mibBuilder.loadTexts: entityCrossDcnTable.setDescription('entityCrossDcnTable - conatains entities of Cross-Dcn')
entityCrossDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnClassName"))
if mibBuilder.loadTexts: entityCrossDcnEntry.setStatus('current')
if mibBuilder.loadTexts: entityCrossDcnEntry.setDescription('Entry of entityCrossDcnTable')
entityCrossDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityCrossDcnShelfNo.setStatus('current')
if mibBuilder.loadTexts: entityCrossDcnShelfNo.setDescription('Adress index.')
entityCrossDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityCrossDcnSlotNo.setStatus('current')
if mibBuilder.loadTexts: entityCrossDcnSlotNo.setDescription('Adress index.')
entityCrossDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityCrossDcnPortNo.setStatus('current')
if mibBuilder.loadTexts: entityCrossDcnPortNo.setDescription('Adress index.')
entityCrossDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityCrossDcnExtNo.setStatus('current')
if mibBuilder.loadTexts: entityCrossDcnExtNo.setDescription('Adress index.')
entityCrossDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityCrossDcnClassName.setStatus('current')
if mibBuilder.loadTexts: entityCrossDcnClassName.setDescription('Entity Class Name')
entityCrossDcnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnAidString.setStatus('current')
if mibBuilder.loadTexts: entityCrossDcnAidString.setDescription('Aid string of entity.')
entityCrossDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnType.setStatus('current')
if mibBuilder.loadTexts: entityCrossDcnType.setDescription('The type of entity.')
entityCrossDcnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnTableId.setStatus('current')
if mibBuilder.loadTexts: entityCrossDcnTableId.setDescription('RowPointer to managment table of entity.')
entityCrossDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnParentId.setStatus('current')
if mibBuilder.loadTexts: entityCrossDcnParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityCrossDcnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnClass.setStatus('current')
if mibBuilder.loadTexts: entityCrossDcnClass.setDescription('EntityClass')
entityCrossDcnOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnOneIndex.setStatus('current')
if mibBuilder.loadTexts: entityCrossDcnOneIndex.setDescription('One Index Aid representation')
entityProtectionCableTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21), )
if mibBuilder.loadTexts: entityProtectionCableTable.setStatus('current')
if mibBuilder.loadTexts: entityProtectionCableTable.setDescription('entityProtectionCableTable')
entityProtectionCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableClassName"))
if mibBuilder.loadTexts: entityProtectionCableEntry.setStatus('current')
if mibBuilder.loadTexts: entityProtectionCableEntry.setDescription('Entry of entityProtectionCableTable')
entityProtectionCableIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityProtectionCableIndex1.setStatus('current')
if mibBuilder.loadTexts: entityProtectionCableIndex1.setDescription('Adress index.')
entityProtectionCableIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityProtectionCableIndex2.setStatus('current')
if mibBuilder.loadTexts: entityProtectionCableIndex2.setDescription('Adress index.')
entityProtectionCableIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityProtectionCableIndex3.setStatus('current')
if mibBuilder.loadTexts: entityProtectionCableIndex3.setDescription('Adress index.')
entityProtectionCableIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityProtectionCableIndex4.setStatus('current')
if mibBuilder.loadTexts: entityProtectionCableIndex4.setDescription('Adress index.')
entityProtectionCableClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityProtectionCableClassName.setStatus('current')
if mibBuilder.loadTexts: entityProtectionCableClassName.setDescription('Entity Class Name.')
entityProtectionCableAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableAidString.setStatus('current')
if mibBuilder.loadTexts: entityProtectionCableAidString.setDescription('Aid string of entity.')
entityProtectionCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableType.setStatus('current')
if mibBuilder.loadTexts: entityProtectionCableType.setDescription('The type of entity.')
entityProtectionCableTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableTableId.setStatus('current')
if mibBuilder.loadTexts: entityProtectionCableTableId.setDescription('RowPointer to managment table of entity.')
entityProtectionCableParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableParentId.setStatus('current')
if mibBuilder.loadTexts: entityProtectionCableParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityProtectionCableClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableClass.setStatus('current')
if mibBuilder.loadTexts: entityProtectionCableClass.setDescription('EntityClass')
entityFilterCableTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22), )
if mibBuilder.loadTexts: entityFilterCableTable.setStatus('current')
if mibBuilder.loadTexts: entityFilterCableTable.setDescription('entityFilterCableTable')
entityFilterCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFilterCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityFilterCableClassName"))
if mibBuilder.loadTexts: entityFilterCableEntry.setStatus('current')
if mibBuilder.loadTexts: entityFilterCableEntry.setDescription('Entry of entityFilterCableTable')
entityFilterCableIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityFilterCableIndex1.setStatus('current')
if mibBuilder.loadTexts: entityFilterCableIndex1.setDescription('Adress index.')
entityFilterCableIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityFilterCableIndex2.setStatus('current')
if mibBuilder.loadTexts: entityFilterCableIndex2.setDescription('Adress index.')
entityFilterCableIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityFilterCableIndex3.setStatus('current')
if mibBuilder.loadTexts: entityFilterCableIndex3.setDescription('Adress index.')
entityFilterCableIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityFilterCableIndex4.setStatus('current')
if mibBuilder.loadTexts: entityFilterCableIndex4.setDescription('Adress index.')
entityFilterCableClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityFilterCableClassName.setStatus('current')
if mibBuilder.loadTexts: entityFilterCableClassName.setDescription('Entity Class Name.')
entityFilterCableAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableAidString.setStatus('current')
if mibBuilder.loadTexts: entityFilterCableAidString.setDescription('Aid string of entity.')
entityFilterCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableType.setStatus('current')
if mibBuilder.loadTexts: entityFilterCableType.setDescription('The type of entity.')
entityFilterCableTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableTableId.setStatus('current')
if mibBuilder.loadTexts: entityFilterCableTableId.setDescription('RowPointer to managment table of entity.')
entityFilterCableParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableParentId.setStatus('current')
if mibBuilder.loadTexts: entityFilterCableParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityFilterCableClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableClass.setStatus('current')
if mibBuilder.loadTexts: entityFilterCableClass.setDescription('EntityClass')
entityMtosiSlotsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100), )
if mibBuilder.loadTexts: entityMtosiSlotsTable.setStatus('current')
if mibBuilder.loadTexts: entityMtosiSlotsTable.setDescription('entityMtosiSlotsTable')
entityMtosiSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityMtosiSlotsShelfNo"), (0, "ADVA-FSPR7-MIB", "entityMtosiSlotsSlotNo"), (0, "ADVA-FSPR7-MIB", "entityMtosiSlotsPortNo"), (0, "ADVA-FSPR7-MIB", "entityMtosiSlotsExtNo"), (0, "ADVA-FSPR7-MIB", "entityMtosiSlotsClassName"))
if mibBuilder.loadTexts: entityMtosiSlotsEntry.setStatus('current')
if mibBuilder.loadTexts: entityMtosiSlotsEntry.setDescription('Entry of entityMtosiSlotsTable')
entityMtosiSlotsShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityMtosiSlotsShelfNo.setStatus('current')
if mibBuilder.loadTexts: entityMtosiSlotsShelfNo.setDescription('Adress index.')
entityMtosiSlotsSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityMtosiSlotsSlotNo.setStatus('current')
if mibBuilder.loadTexts: entityMtosiSlotsSlotNo.setDescription('Adress index.')
entityMtosiSlotsPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityMtosiSlotsPortNo.setStatus('current')
if mibBuilder.loadTexts: entityMtosiSlotsPortNo.setDescription('Adress index.')
entityMtosiSlotsExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityMtosiSlotsExtNo.setStatus('current')
if mibBuilder.loadTexts: entityMtosiSlotsExtNo.setDescription('Adress index.')
entityMtosiSlotsClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityMtosiSlotsClassName.setStatus('current')
if mibBuilder.loadTexts: entityMtosiSlotsClassName.setDescription('Entity Class Name.')
entityMtosiSlotsAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityMtosiSlotsAidString.setStatus('current')
if mibBuilder.loadTexts: entityMtosiSlotsAidString.setDescription('Aid string of entity.')
entityMtosiSlotsParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityMtosiSlotsParentId.setStatus('current')
if mibBuilder.loadTexts: entityMtosiSlotsParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
entityMtosiSlotsClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityMtosiSlotsClass.setStatus('current')
if mibBuilder.loadTexts: entityMtosiSlotsClass.setDescription('EntityClass')
entityMtosiSlotsChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityMtosiSlotsChildId.setStatus('current')
if mibBuilder.loadTexts: entityMtosiSlotsChildId.setDescription('')
endOfEntities = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEntities.setStatus('current')
if mibBuilder.loadTexts: endOfEntities.setDescription('')
trapModeLegacy = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 1), FspR7NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapModeLegacy.setStatus('current')
if mibBuilder.loadTexts: trapModeLegacy.setDescription('Scalar indicate MIB from which will be taken OID of entity to trap\n        when entity is supported by more than one MIB.')
artificialEntity = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 2), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artificialEntity.setStatus('current')
if mibBuilder.loadTexts: artificialEntity.setDescription('Enable/Disable Artifial Entity in SNMP. Specific tables get special artificial entity in each column to boost the sync process (no empty columns).')
identifyTraps = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 3), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identifyTraps.setStatus('current')
if mibBuilder.loadTexts: identifyTraps.setDescription('Enable/disable extra data in traps (current user and application source)')
controlPlane = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 4), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlane.setStatus('current')
if mibBuilder.loadTexts: controlPlane.setDescription('Control Plane functionality enable/disable configuration')
autoRestart = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 5), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoRestart.setStatus('current')
if mibBuilder.loadTexts: autoRestart.setDescription('Automatic NCU restart on Flash I/O Error')
autoRestartMax = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoRestartMax.setStatus('current')
if mibBuilder.loadTexts: autoRestartMax.setDescription('Maximum automatic NCU restart attempts due to Flash I/O Errors')
autoRestartCount = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoRestartCount.setStatus('current')
if mibBuilder.loadTexts: autoRestartCount.setDescription('Automatic NCU restart attempts due to Flash I/O Errors')
cpRest = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 8), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpRest.setStatus('current')
if mibBuilder.loadTexts: cpRest.setDescription('CP REST Interface control enable/disable')
autoProvisionOL = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 9), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoProvisionOL.setStatus('current')
if mibBuilder.loadTexts: autoProvisionOL.setDescription("When set to 'Disable', the user must manually provision OL and the fiber-map between OL and OSFM N-Port.\n        When set to 'Enable', software will auto provision OL and the fiber-map between OL and OSFM N-Port.")
uidEraseTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1096), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('day').setMaxAccess("readwrite")
if mibBuilder.loadTexts: uidEraseTime.setStatus('current')
if mibBuilder.loadTexts: uidEraseTime.setDescription('Time interval in days deffining, how long a user name is kept in log files. 0 means keep user names forever.')
restConf = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 11), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restConf.setStatus('deprecated')
if mibBuilder.loadTexts: restConf.setDescription('RESTCONF protocol interface control enable/disable, supports YANG, NETCONF')
netConf = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 12), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConf.setStatus('deprecated')
if mibBuilder.loadTexts: netConf.setDescription('NETCONF (Network Configuration Protocol) interface control enable/disable')
networkIntelligence = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 13), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkIntelligence.setStatus('current')
if mibBuilder.loadTexts: networkIntelligence.setDescription('Network Intelligence functionality enable/disable configuration.')
channelSpacing = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 14), FspR7ChannelSpacing()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelSpacing.setStatus('current')
if mibBuilder.loadTexts: channelSpacing.setDescription('ITU Grid channel spacing')
sdnInterface = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 15), FspR7SdnInterface()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdnInterface.setStatus('current')
if mibBuilder.loadTexts: sdnInterface.setDescription('NETCONF and RESTCONF interfaces control.')
webInterface = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 16), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webInterface.setStatus('current')
if mibBuilder.loadTexts: webInterface.setDescription('WEB Server enable/disable configuration')
updateFwpOnInstall = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 17), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: updateFwpOnInstall.setStatus('current')
if mibBuilder.loadTexts: updateFwpOnInstall.setDescription('Update FWP on Install')
mpFilePointer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 18), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFilePointer.setStatus('current')
if mibBuilder.loadTexts: mpFilePointer.setDescription('Pointer to MP file in ACTive area.')
ipv6Control = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100, 1), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6Control.setStatus('current')
if mibBuilder.loadTexts: ipv6Control.setDescription('IPv6 Control')
ipv6DefGateway = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6DefGateway.setStatus('current')
if mibBuilder.loadTexts: ipv6DefGateway.setDescription('IPv6 Address of Default Gateway')
ipv6 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6.setStatus('current')
if mibBuilder.loadTexts: ipv6.setDescription('IPv6 Address')
ipv6PrefixLen = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 128), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: ipv6PrefixLen.setDescription('IPv6 Subnet Prefix Length')
dnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer1.setStatus('current')
if mibBuilder.loadTexts: dnsServer1.setDescription('DNS Server 1')
dnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100, 11), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer2.setStatus('current')
if mibBuilder.loadTexts: dnsServer2.setDescription('DNS Server 2')
naasMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 101, 3), FspR7NaasMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: naasMode.setStatus('current')
if mibBuilder.loadTexts: naasMode.setDescription('Defines node attributes advertisement mode.')
netConfTmout = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 102, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(30, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfTmout.setStatus('current')
if mibBuilder.loadTexts: netConfTmout.setDescription('The time period of a inactivity (in seconds) after which the NETCONF session terminates')
endOfNeMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNeMgmt.setStatus('current')
if mibBuilder.loadTexts: endOfNeMgmt.setDescription('')
crossConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6), )
if mibBuilder.loadTexts: crossConnectionTable.setStatus('current')
if mibBuilder.loadTexts: crossConnectionTable.setDescription('crossConnectionTable')
crossConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossConnFromShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnClassName"))
if mibBuilder.loadTexts: crossConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: crossConnectionEntry.setDescription('Entry of crossConnectionTable')
crossConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionRowStatus.setStatus('current')
if mibBuilder.loadTexts: crossConnectionRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
crossConnectionAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 2), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionAdmin.setStatus('current')
if mibBuilder.loadTexts: crossConnectionAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
crossConnectionRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 3), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionRedLineState.setStatus('current')
if mibBuilder.loadTexts: crossConnectionRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
crossConnectionCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 4), FspR7FunctionCrs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsFunction.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCrsFunction.setDescription('Describes the Cross Connect Functionality')
crossConnectionConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 5), FspR7Conn()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionConn.setStatus('current')
if mibBuilder.loadTexts: crossConnectionConn.setDescription('Bidirectional | Unidirectional')
crossConnectionCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 6), FspR7TypeCrs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsType.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCrsType.setDescription('Type of Cross-Connect')
crossConnectionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionAlias.setStatus('current')
if mibBuilder.loadTexts: crossConnectionAlias.setDescription('User Applied Descriptor')
crossConnectionPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 8), FspR7PathNode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionPathNode.setStatus('current')
if mibBuilder.loadTexts: crossConnectionPathNode.setDescription('Node count along a signal path on a unidirectional basis from the client signal ingress to egress')
crossConnectionTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 9), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionTunnelAid.setStatus('current')
if mibBuilder.loadTexts: crossConnectionTunnelAid.setDescription('Tunnel AID')
crossConnectionIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionIngressTid.setStatus('current')
if mibBuilder.loadTexts: crossConnectionIngressTid.setDescription('Ingress Target ID')
crossConnectionIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionIngressNodeIp.setStatus('current')
if mibBuilder.loadTexts: crossConnectionIngressNodeIp.setDescription('Ingress Node IP')
crossConnectionOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 12), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionOperState.setStatus('current')
if mibBuilder.loadTexts: crossConnectionOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
crossConnectionSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 13), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: crossConnectionSecondaryStates.setDescription('Secondary States')
crossConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 14), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionType.setStatus('current')
if mibBuilder.loadTexts: crossConnectionType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
crossConnectionPathProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 15), FspR7PathProt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionPathProtection.setStatus('current')
if mibBuilder.loadTexts: crossConnectionPathProtection.setDescription('Indicates the traffic path for path protection cases when the FFP does not exist.  When the FFP exists, protected is indicated and the status is determined by the FFP.')
crossConnectionCrsFromAidTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 16), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsFromAidTwo.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCrsFromAidTwo.setDescription('Secondary source point (AID)')
crossConnectionCrsToAidTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 17), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsToAidTwo.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCrsToAidTwo.setDescription('Secondary destination point (AID)')
crossConnectionCrsMcAidList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 18), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsMcAidList.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCrsMcAidList.setDescription('Cross Connection destinations for multicast services (List of AIDs)')
crossConnectionCrsContAidList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 19), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsContAidList.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCrsContAidList.setDescription('Cross connect destinations that continue on the network (List of AIDs)')
crossConnectionCrsContAidListTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 20), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsContAidListTwo.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCrsContAidListTwo.setDescription('Cross Connection secondary destinations that continue on the network (List of AIDs)')
crossOpticalLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7), )
if mibBuilder.loadTexts: crossOpticalLineTable.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineTable.setDescription('crossOpticalLineTable')
crossOpticalLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineClassName"))
if mibBuilder.loadTexts: crossOpticalLineEntry.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineEntry.setDescription('Entry of crossOpticalLineTable')
crossOpticalLineRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineRowStatus.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
crossOpticalLineRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 2), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineRedLineState.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
crossOpticalLineCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 3), FspR7FunctionCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCrsFunction.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineCrsFunction.setDescription('Describes the Cross Connect Functionality')
crossOpticalLineConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 4), FspR7Conn()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineConn.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineConn.setDescription('Bidirectional | Unidirectional')
crossOpticalLineCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 5), FspR7TypeCrs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineCrsType.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineCrsType.setDescription('Type of Cross-Connect')
crossOpticalLineAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineAlias.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineAlias.setDescription('User Applied Descriptor')
crossOpticalLineTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineTunnelAid.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineTunnelAid.setDescription('Tunnel AID')
crossOpticalLineIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineIngressTid.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineIngressTid.setDescription('Ingress Target ID')
crossOpticalLineIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineIngressNodeIp.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineIngressNodeIp.setDescription('Ingress Node IP')
crossOpticalLineSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 10), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineSecondaryStates.setDescription('Secondary States')
endOfCrossOpticalLineTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfCrossOpticalLineTable.setStatus('current')
if mibBuilder.loadTexts: endOfCrossOpticalLineTable.setDescription('')
crossDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9), )
if mibBuilder.loadTexts: crossDcnTable.setStatus('current')
if mibBuilder.loadTexts: crossDcnTable.setDescription('crossDcnTable')
crossDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnClassName"))
if mibBuilder.loadTexts: crossDcnEntry.setStatus('current')
if mibBuilder.loadTexts: crossDcnEntry.setDescription('Entry of crossDcnTable')
crossDcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossDcnRowStatus.setStatus('current')
if mibBuilder.loadTexts: crossDcnRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
crossDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1, 2), FspR7TypeConnection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossDcnType.setStatus('current')
if mibBuilder.loadTexts: crossDcnType.setDescription('Type of Cross-Connect')
crossDcnLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossDcnLink.setStatus('current')
if mibBuilder.loadTexts: crossDcnLink.setDescription('Address Identifier of PPPIP LINK Entity.')
crossDcnEcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossDcnEcc.setStatus('current')
if mibBuilder.loadTexts: crossDcnEcc.setDescription('Address Identifier of ECC Entity.')
endOfCrossDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfCrossDcnTable.setStatus('current')
if mibBuilder.loadTexts: endOfCrossDcnTable.setDescription('')
endOfSpecificMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfSpecificMgmt.setStatus('current')
if mibBuilder.loadTexts: endOfSpecificMgmt.setDescription('')
shelfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1), )
if mibBuilder.loadTexts: shelfTable.setStatus('current')
if mibBuilder.loadTexts: shelfTable.setDescription('shelfTable')
shelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: shelfEntry.setStatus('current')
if mibBuilder.loadTexts: shelfEntry.setDescription('Entry of shelfTable')
shelfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfRowStatus.setStatus('current')
if mibBuilder.loadTexts: shelfRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
shelfNetworkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfNetworkPorts.setStatus('current')
if mibBuilder.loadTexts: shelfNetworkPorts.setDescription('Number of Network Ports')
shelfInternalPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInternalPlugs.setStatus('current')
if mibBuilder.loadTexts: shelfInternalPlugs.setDescription('Internal Plugs Required')
shelfConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 4), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnectionType.setStatus('current')
if mibBuilder.loadTexts: shelfConnectionType.setDescription('Connectivity Parameters for Facilities')
shelfOscPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOscPorts.setStatus('current')
if mibBuilder.loadTexts: shelfOscPorts.setDescription('Number of OSC Ports')
shelfShelfHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 6), Unsigned32()).setUnits('HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfShelfHeight.setStatus('current')
if mibBuilder.loadTexts: shelfShelfHeight.setDescription('Height of Shelf in HU')
shelfChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 7), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChannel.setStatus('current')
if mibBuilder.loadTexts: shelfChannel.setDescription('Possible internal channel')
shelfPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 8), FspR7PsuOutputPower()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfPsuOutputPower.setStatus('current')
if mibBuilder.loadTexts: shelfPsuOutputPower.setDescription('Maximum PSU Output Power')
shelfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 9), FspR7EquipmentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfType.setStatus('current')
if mibBuilder.loadTexts: shelfType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely\n        the number and allowed TYPE's of the provisionable dependent\n        entities (plugs, interfaces, modules)")
shelfChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 10), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChannelsNumber.setStatus('current')
if mibBuilder.loadTexts: shelfChannelsNumber.setDescription('Number of channels supported by an entity')
shelfRack = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 11), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfRack.setStatus('current')
if mibBuilder.loadTexts: shelfRack.setDescription('Rack Containing Shelf')
shelfInternalPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 12), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInternalPlugRates.setStatus('current')
if mibBuilder.loadTexts: shelfInternalPlugRates.setDescription('List of Provisionable Internal Plug Rates Supported')
shelfConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 13), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnectorType.setStatus('current')
if mibBuilder.loadTexts: shelfConnectorType.setDescription('Connector Type')
shelfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 14), FspR7SupplyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfSupply.setStatus('current')
if mibBuilder.loadTexts: shelfSupply.setDescription('The kind of power supply - provisioned value')
shelfClientPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfClientPorts.setStatus('current')
if mibBuilder.loadTexts: shelfClientPorts.setDescription('Number of Client Ports')
shelfFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 16), FspR7FiberBrand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFiberBrand.setStatus('current')
if mibBuilder.loadTexts: shelfFiberBrand.setDescription('Brand of fiber present in the fiber plant')
shelfTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 17), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: shelfTransmitChannel.setDescription('Channel')
shelfBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 18), FspR7OpticalBand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfBandProvision.setStatus('current')
if mibBuilder.loadTexts: shelfBandProvision.setDescription('Band Provision. Reference to BAND__INVENTORY.')
shelfUpgradePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfUpgradePorts.setStatus('current')
if mibBuilder.loadTexts: shelfUpgradePorts.setDescription('Number of Upgrade Ports')
shelfStandardSlotHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 20), Unsigned32()).setUnits('0.1 HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfStandardSlotHeight.setStatus('current')
if mibBuilder.loadTexts: shelfStandardSlotHeight.setDescription('Height of Standard Slots in Shelf in HU')
shelfStandardSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfStandardSlots.setStatus('current')
if mibBuilder.loadTexts: shelfStandardSlots.setDescription('Number of Provisionable Standard Slots')
shelfChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 22), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChannelBandwith.setStatus('current')
if mibBuilder.loadTexts: shelfChannelBandwith.setDescription('Channel Bandwidth')
shelfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 23), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfAdmin.setStatus('current')
if mibBuilder.loadTexts: shelfAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
shelfInternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInternalPorts.setStatus('current')
if mibBuilder.loadTexts: shelfInternalPorts.setDescription('Number of Internal Ports')
shelfRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfRackNumber.setStatus('current')
if mibBuilder.loadTexts: shelfRackNumber.setDescription('Number of the Rack')
shelfRackOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 45))).setUnits('HU').setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfRackOrder.setStatus('current')
if mibBuilder.loadTexts: shelfRackOrder.setDescription('Defines the position of the shelf in a rack, starting from the top or bottom for the rack depending on Shelf Order (COUNT__ORDER). Shelf Position is used with Shelf Order for the graphical rack view.')
shelfOscChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 27), FspR7OscChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOscChannel.setStatus('current')
if mibBuilder.loadTexts: shelfOscChannel.setDescription('OSC Channel')
shelfMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 28), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfMaxPowerConsumption.setStatus('current')
if mibBuilder.loadTexts: shelfMaxPowerConsumption.setDescription('Maximum Power Consumption of the device')
shelfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 29), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfAlias.setStatus('current')
if mibBuilder.loadTexts: shelfAlias.setDescription('User Applied Descriptor')
shelfFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 30), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFiberType.setStatus('current')
if mibBuilder.loadTexts: shelfFiberType.setDescription('Fiber of Optical Interface - Provision, Reference to FIBER__INVENTORY')
shelfChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 31), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: shelfChannelSpacing.setDescription('ITU Grid channel spacing')
shelfSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 32), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: shelfSecondaryStates.setDescription('Secondary States')
shelfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 33), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOperState.setStatus('current')
if mibBuilder.loadTexts: shelfOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
shelfScuRing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 34), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfScuRing.setStatus('current')
if mibBuilder.loadTexts: shelfScuRing.setDescription('SCU Interconnection')
shelfShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfShelfId.setStatus('current')
if mibBuilder.loadTexts: shelfShelfId.setDescription('Shelf ID')
shelfFDports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFDports.setStatus('current')
if mibBuilder.loadTexts: shelfFDports.setDescription('Number of Fiber Detect Ports')
shelfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfSlot.setStatus('current')
if mibBuilder.loadTexts: shelfSlot.setDescription('Slot Position')
shelfChannelRangeProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 38), FspR7ChannelRangeInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChannelRangeProvision.setStatus('current')
if mibBuilder.loadTexts: shelfChannelRangeProvision.setDescription('Channel Range')
shelfPowerSupplyProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 39), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfPowerSupplyProtection.setStatus('current')
if mibBuilder.loadTexts: shelfPowerSupplyProtection.setDescription('Power Supply Redundancy Configuration')
shelfAirFilterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 40), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfAirFilterClear.setStatus('current')
if mibBuilder.loadTexts: shelfAirFilterClear.setDescription('Operation to clear air filter replace condition and reset replacement count')
shelfAirFilterChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 41), Unsigned32()).setUnits('day').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfAirFilterChange.setStatus('current')
if mibBuilder.loadTexts: shelfAirFilterChange.setDescription('Air filter replace remain time')
shelfAirFilterCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setUnits('month').setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfAirFilterCycle.setStatus('current')
if mibBuilder.loadTexts: shelfAirFilterCycle.setDescription('Sets the replacement duration for the air filter replace time setting in months; a setting of 0 prevents the replacement warning alram from being raised')
endOfShelfTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfTable.setStatus('current')
if mibBuilder.loadTexts: endOfShelfTable.setDescription('')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
if mibBuilder.loadTexts: fanTable.setDescription('fanTable')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
if mibBuilder.loadTexts: fanEntry.setDescription('Entry of fanTable')
fanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanRowStatus.setStatus('current')
if mibBuilder.loadTexts: fanRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
fanForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 2), FspR7ForcedStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanForceDestroy.setStatus('current')
if mibBuilder.loadTexts: fanForceDestroy.setDescription('Forced Destroy')
fanMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 3), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanMaxPowerConsumption.setStatus('current')
if mibBuilder.loadTexts: fanMaxPowerConsumption.setDescription('Maximum Power Consumption of the device')
fanAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 4), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanAdmin.setStatus('current')
if mibBuilder.loadTexts: fanAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
fanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 5), FspR7EquipmentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanType.setStatus('current')
if mibBuilder.loadTexts: fanType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely\n        the number and allowed TYPE's of the provisionable dependent\n        entities (plugs, interfaces, modules)")
fanAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanAlias.setStatus('current')
if mibBuilder.loadTexts: fanAlias.setDescription('User Applied Descriptor')
fanOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 7), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanOutputReset.setStatus('current')
if mibBuilder.loadTexts: fanOutputReset.setDescription('Has the same function as the HW switch at the UTM board')
fanFanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFanPorts.setStatus('current')
if mibBuilder.loadTexts: fanFanPorts.setDescription('Number of Fan Plug ins')
fanSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 9), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: fanSecondaryStates.setDescription('Secondary States')
fanOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 10), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanOperState.setStatus('current')
if mibBuilder.loadTexts: fanOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
fanFanProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 11), FspR7FanMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFanProfile.setStatus('current')
if mibBuilder.loadTexts: fanFanProfile.setDescription('Fan mode Calculated over all modules in the shelf')
endOfFanTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFanTable.setStatus('current')
if mibBuilder.loadTexts: endOfFanTable.setDescription('')
plugTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5), )
if mibBuilder.loadTexts: plugTable.setStatus('current')
if mibBuilder.loadTexts: plugTable.setDescription('plugTable')
plugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: plugEntry.setStatus('current')
if mibBuilder.loadTexts: plugEntry.setDescription('Entry of plugTable')
plugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugRowStatus.setStatus('current')
if mibBuilder.loadTexts: plugRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
plugConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 2), FspR7ConnectorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugConnector.setStatus('current')
if mibBuilder.loadTexts: plugConnector.setDescription('Connector')
plugType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 3), FspR7EquipmentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugType.setStatus('current')
if mibBuilder.loadTexts: plugType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely\n        the number and allowed TYPE's of the provisionable dependent\n        entities (plugs, interfaces, modules)")
plugReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 4), FspR7OpticalInterfaceReach()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugReach.setStatus('current')
if mibBuilder.loadTexts: plugReach.setDescription('Reach')
plugLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugLoopbackAttenuation.setStatus('current')
if mibBuilder.loadTexts: plugLoopbackAttenuation.setDescription('Loop back attenuation used for Optojack SE plugs')
plugGenericPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugGenericPorts.setStatus('current')
if mibBuilder.loadTexts: plugGenericPorts.setDescription('Number of Generic Ports')
plugConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 7), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugConnectorType.setStatus('current')
if mibBuilder.loadTexts: plugConnectorType.setDescription('Connector Type')
plugFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 8), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugFiberType.setStatus('current')
if mibBuilder.loadTexts: plugFiberType.setDescription('Fiber of Optical Interface - Provision, Reference to FIBER__INVENTORY')
plugTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: plugTransmitChannel.setDescription('Channel')
plugAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugAlias.setStatus('current')
if mibBuilder.loadTexts: plugAlias.setDescription('User Applied Descriptor')
plugLaneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 11), FspR7LaneGroupInventory()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugLaneGroup.setStatus('current')
if mibBuilder.loadTexts: plugLaneGroup.setDescription('Lane group to provision')
plugMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 12), FspR7PlugDataRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: plugMaxDataRate.setDescription('Rate')
plugThirdPartyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 13), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugThirdPartyUsage.setStatus('current')
if mibBuilder.loadTexts: plugThirdPartyUsage.setDescription('Usage of 3rd Party Plugs')
plugAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 14), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugAdmin.setStatus('current')
if mibBuilder.loadTexts: plugAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
plugSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 15), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: plugSecondaryStates.setDescription('Secondary States')
plugOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 16), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugOperState.setStatus('current')
if mibBuilder.loadTexts: plugOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
plugBidirectionalChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 17), FspR7BidirectionalChannel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugBidirectionalChannel.setStatus('current')
if mibBuilder.loadTexts: plugBidirectionalChannel.setDescription('Bidirectional Channel Rates from Provisioning')
plugChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 18), FspR7ChannelSpacing()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugChannelSpacingProvision.setStatus('current')
if mibBuilder.loadTexts: plugChannelSpacingProvision.setDescription('Channel Space Provision, reference to CHA-SPC__INVENTORY')
plugChannelRangeProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 19), FspR7ChannelRangeInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugChannelRangeProvision.setStatus('current')
if mibBuilder.loadTexts: plugChannelRangeProvision.setDescription('Channel Range')
plugLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 20), FspR7Length()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugLength.setStatus('current')
if mibBuilder.loadTexts: plugLength.setDescription('Length')
plugPlugType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 21), FspR7PlugType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugPlugType.setStatus('current')
if mibBuilder.loadTexts: plugPlugType.setDescription('Plug Type')
plugPlugMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 22), FspR7PlugMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugPlugMode.setStatus('current')
if mibBuilder.loadTexts: plugPlugMode.setDescription('Plug Mode')
endOfPlugTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPlugTable.setStatus('current')
if mibBuilder.loadTexts: endOfPlugTable.setDescription('')
moduleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7), )
if mibBuilder.loadTexts: moduleTable.setStatus('current')
if mibBuilder.loadTexts: moduleTable.setDescription('moduleTable')
moduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: moduleEntry.setStatus('current')
if mibBuilder.loadTexts: moduleEntry.setDescription('Entry of moduleTable')
moduleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleRowStatus.setStatus('current')
if mibBuilder.loadTexts: moduleRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
moduleForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 2), FspR7ForcedStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleForceDestroy.setStatus('current')
if mibBuilder.loadTexts: moduleForceDestroy.setDescription('Forced Destroy')
moduleCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 3), FspR7Category()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCategory.setStatus('current')
if mibBuilder.loadTexts: moduleCategory.setDescription('Used For Internal Purposes (and possibly for pre-selection in GUI)')
moduleNetworkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNetworkPorts.setStatus('current')
if mibBuilder.loadTexts: moduleNetworkPorts.setDescription('Number of Network Ports')
moduleInternalPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 5), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInternalPlugs.setStatus('current')
if mibBuilder.loadTexts: moduleInternalPlugs.setDescription('Internal Plugs Required')
modulePsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 6), FspR7PsuOutputPower()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modulePsuOutputPower.setStatus('current')
if mibBuilder.loadTexts: modulePsuOutputPower.setDescription('Maximum PSU Output Power')
moduleWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 7), Unsigned32()).setUnits('0.1 HP').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleWidth.setStatus('current')
if mibBuilder.loadTexts: moduleWidth.setDescription('Width')
modulePower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 8), FspR7EdfaOutputPowerRating()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modulePower.setStatus('current')
if mibBuilder.loadTexts: modulePower.setDescription('Optical Output Power Rating - Provision')
moduleReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 9), FspR7OpticalInterfaceReach()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleReach.setStatus('current')
if mibBuilder.loadTexts: moduleReach.setDescription('Reach')
moduleInitEqlz = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 10), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleInitEqlz.setStatus('current')
if mibBuilder.loadTexts: moduleInitEqlz.setDescription('Initiate Equalization')
moduleSuppClientPlugTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 11), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSuppClientPlugTypes.setStatus('current')
if mibBuilder.loadTexts: moduleSuppClientPlugTypes.setDescription('List of Client Plugs Supported')
moduleSuppNetworkPlugTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 12), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSuppNetworkPlugTypes.setStatus('current')
if mibBuilder.loadTexts: moduleSuppNetworkPlugTypes.setDescription('Network Plugs Required')
moduleLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 13), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleLanAid.setStatus('current')
if mibBuilder.loadTexts: moduleLanAid.setDescription('AID of LAN')
moduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 14), FspR7EquipmentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleType.setStatus('current')
if mibBuilder.loadTexts: moduleType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely\n        the number and allowed TYPE's of the provisionable dependent\n        entities (plugs, interfaces, modules)")
moduleMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 15), FspR7Mapping()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleMapping.setStatus('current')
if mibBuilder.loadTexts: moduleMapping.setDescription('Type of mapping; transparent or framing')
moduleGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 16), FspR7GainRange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleGainRange.setStatus('current')
if mibBuilder.loadTexts: moduleGainRange.setDescription('EDFA gain range to provision')
moduleInternalPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 17), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInternalPlugRates.setStatus('current')
if mibBuilder.loadTexts: moduleInternalPlugRates.setDescription('List of Provisionable Internal Plug Rates Supported')
moduleSfProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 18), FspR7SingleFiberLocation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleSfProvision.setStatus('current')
if mibBuilder.loadTexts: moduleSfProvision.setDescription('determines the location (A or B) for Single Fiber applications')
moduleInternalPlugsReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 19), FspR7OpticalInterfaceReachCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInternalPlugsReach.setStatus('current')
if mibBuilder.loadTexts: moduleInternalPlugsReach.setDescription('Reach of Internal Plugs')
moduleCapabilityLevelProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 20), FspR7CapInventory()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleCapabilityLevelProvision.setStatus('current')
if mibBuilder.loadTexts: moduleCapabilityLevelProvision.setDescription('Capability level provisioned')
moduleConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 21), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConnector.setStatus('current')
if mibBuilder.loadTexts: moduleConnector.setDescription('Connector Type')
moduleDCFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 22), FspR7DCFiberType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleDCFiberType.setStatus('current')
if mibBuilder.loadTexts: moduleDCFiberType.setDescription('Dispersion Compensation Fibertype')
moduleChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 23), FspR7NumberOfChannels()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleChannelsProvision.setStatus('current')
if mibBuilder.loadTexts: moduleChannelsProvision.setDescription('Number of channels supported by an entity')
moduleFiberDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 24), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleFiberDetect.setStatus('current')
if mibBuilder.loadTexts: moduleFiberDetect.setDescription('Fiber Detect')
moduleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDescription.setStatus('current')
if mibBuilder.loadTexts: moduleDescription.setDescription('Detailed description of capability level')
moduleSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 26), FspR7SupplyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleSupply.setStatus('current')
if mibBuilder.loadTexts: moduleSupply.setDescription('The kind of power supply - provisioned value')
moduleSuppClientPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 27), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSuppClientPlugRates.setStatus('current')
if mibBuilder.loadTexts: moduleSuppClientPlugRates.setDescription('List of Provisionable Client Plug Rates Supported')
moduleClientPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleClientPorts.setStatus('current')
if mibBuilder.loadTexts: moduleClientPorts.setDescription('Number of Client Ports')
moduleGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 29), FspR7OpticalGroup()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleGroup.setStatus('current')
if mibBuilder.loadTexts: moduleGroup.setDescription('The Group of 4 DWDM channels or the Group of 4 CWDM channels')
moduleDeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 30), FspR7DeploymentScenario()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleDeploy.setStatus('current')
if mibBuilder.loadTexts: moduleDeploy.setDescription('Describes how the card is applied related to a network scenario')
moduleLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleLagSysPrio.setStatus('current')
if mibBuilder.loadTexts: moduleLagSysPrio.setDescription('Link Aggregation Group Actor System Priority Part of LAG ID')
moduleMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 32), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMaxPowerConsumption.setStatus('current')
if mibBuilder.loadTexts: moduleMaxPowerConsumption.setDescription('Maximum Power Consumption of the device')
moduleTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 33), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: moduleTransmitChannel.setDescription('Channel')
moduleBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 34), FspR7OpticalBand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleBand.setStatus('current')
if mibBuilder.loadTexts: moduleBand.setDescription('The optical band of the module.')
moduleUpgradePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleUpgradePorts.setStatus('current')
if mibBuilder.loadTexts: moduleUpgradePorts.setDescription('Number of Upgrade Ports')
moduleTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 36), FspR7TrafficDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleTrafficDirection.setStatus('current')
if mibBuilder.loadTexts: moduleTrafficDirection.setDescription('Traffic Direction')
moduleMidstagePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMidstagePorts.setStatus('current')
if mibBuilder.loadTexts: moduleMidstagePorts.setDescription('Number of Midstage Ports')
moduleStages = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 38), FspR7Stages()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleStages.setStatus('current')
if mibBuilder.loadTexts: moduleStages.setDescription('Number of Stages')
moduleIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 39), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleIpAddr.setStatus('current')
if mibBuilder.loadTexts: moduleIpAddr.setDescription('IP Address assigned to LAN IP Interface')
moduleDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 40), FspR7DispersionCompensation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleDispersionCompensation.setStatus('current')
if mibBuilder.loadTexts: moduleDispersionCompensation.setDescription('Dispersion Compensation Value in km of SSMF fiber')
moduleActivateDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 41), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleActivateDetect.setStatus('current')
if mibBuilder.loadTexts: moduleActivateDetect.setDescription('Initialize Topology Detection')
moduleOscUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 42), FspR7OscUsage()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleOscUsage.setStatus('current')
if mibBuilder.loadTexts: moduleOscUsage.setDescription('Select if and how the OSC is to be used on an amplifier')
moduleInternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInternalPorts.setStatus('current')
if mibBuilder.loadTexts: moduleInternalPorts.setDescription('Number of Internal Ports')
moduleAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 44), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleAdmin.setStatus('current')
if mibBuilder.loadTexts: moduleAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
moduleScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 45), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleScrambling.setStatus('current')
if mibBuilder.loadTexts: moduleScrambling.setDescription('Configuration of scrambling functionality for Virtual Facilities')
moduleTerminationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 46), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTerminationType.setStatus('current')
if mibBuilder.loadTexts: moduleTerminationType.setDescription('Type of Physical Termination')
moduleChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 47), FspR7NumberOfChannels()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleChannelsNumber.setStatus('current')
if mibBuilder.loadTexts: moduleChannelsNumber.setDescription('Number of channels supported by an entity')
moduleLanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLanPorts.setStatus('current')
if mibBuilder.loadTexts: moduleLanPorts.setDescription('Number of LAN Ports')
moduleChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 49), FspR7ChannelSpacing()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleChannelSpacingProvision.setStatus('current')
if mibBuilder.loadTexts: moduleChannelSpacingProvision.setDescription('Channel Space Provision, reference to CHA-SPC__INVENTORY')
moduleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 50), FspR7TransmissionMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleMode.setStatus('current')
if mibBuilder.loadTexts: moduleMode.setDescription('Mode of the module, determine operation or functionality')
moduleEccPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEccPorts.setStatus('current')
if mibBuilder.loadTexts: moduleEccPorts.setDescription('Number of PPP over ECC Ports')
moduleSubBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 52), FspR7OpticalSubBand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleSubBandProvision.setStatus('current')
if mibBuilder.loadTexts: moduleSubBandProvision.setDescription('Subband - Provision')
moduleSuppNetworkPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 53), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSuppNetworkPlugRates.setStatus('current')
if mibBuilder.loadTexts: moduleSuppNetworkPlugRates.setDescription('List of Provisionable Network Plug Rates Supported')
moduleHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 54), Unsigned32()).setUnits('0.1 HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleHeight.setStatus('current')
if mibBuilder.loadTexts: moduleHeight.setDescription('Height')
moduleAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 55), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleAlias.setStatus('current')
if mibBuilder.loadTexts: moduleAlias.setDescription('User Applied Descriptor')
moduleFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 56), FspR7OpticalFiberType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleFiberType.setStatus('current')
if mibBuilder.loadTexts: moduleFiberType.setDescription('Fiber of Optical Interface - Provision, Reference to FIBER__INVENTORY')
moduleChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 57), FspR7ChannelSpacing()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: moduleChannelSpacing.setDescription('ITU Grid channel spacing')
moduleOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 58), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleOutputReset.setStatus('current')
if mibBuilder.loadTexts: moduleOutputReset.setDescription('Has the same function as the HW switch at the UTM board')
moduleSerialPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSerialPorts.setStatus('current')
if mibBuilder.loadTexts: moduleSerialPorts.setDescription('Number of Serial Ports')
moduleRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 60), FspR7RoadmNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleRoadmNumber.setStatus('current')
if mibBuilder.loadTexts: moduleRoadmNumber.setDescription('Number for ROADM module typically associated with a Network Fiber or Degree')
moduleSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 61), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: moduleSecondaryStates.setDescription('Secondary States')
moduleOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 62), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleOperState.setStatus('current')
if mibBuilder.loadTexts: moduleOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
moduleAlsConf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 63), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAlsConf.setStatus('current')
if mibBuilder.loadTexts: moduleAlsConf.setDescription("Enables EDFA amplifiers to provision their LOS behavior as 'ALS enabled' or 'ALS disabled'.")
moduleTopologyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 64), FspR7TopologyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTopologyType.setStatus('current')
if mibBuilder.loadTexts: moduleTopologyType.setDescription('Monitored Topology Type')
moduleScuRing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 65), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleScuRing.setStatus('current')
if mibBuilder.loadTexts: moduleScuRing.setDescription('SCU Interconnection')
moduleNodeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 66), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNodeIpAddress.setStatus('current')
if mibBuilder.loadTexts: moduleNodeIpAddress.setDescription('List of IP Addresses, Position of list is the internal NODE-ID in the ring')
moduleInventoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 67), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInventoryDescription.setStatus('current')
if mibBuilder.loadTexts: moduleInventoryDescription.setDescription('Description string of capability level reported by hw')
moduleGenericPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 68), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleGenericPlugRates.setStatus('current')
if mibBuilder.loadTexts: moduleGenericPlugRates.setDescription('List of Provisionable Generic Plug Rates Supported')
moduleTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 69), FspR7Topology()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleTopology.setStatus('current')
if mibBuilder.loadTexts: moduleTopology.setDescription('Shows the card topology in the NE')
moduleForceConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 70), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleForceConfig.setStatus('current')
if mibBuilder.loadTexts: moduleForceConfig.setDescription('Force cserver to send down configuration to module')
moduleRamUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 71), Unsigned32()).setUnits('kByte').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleRamUsage.setStatus('current')
if mibBuilder.loadTexts: moduleRamUsage.setDescription('Device RAM Consumption')
moduleFanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 72), FspR7FanMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFanMode.setStatus('current')
if mibBuilder.loadTexts: moduleFanMode.setDescription('Required CEM fan speed')
moduleMuxMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 73), FspR7MuxMethod()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleMuxMethod.setStatus('current')
if mibBuilder.loadTexts: moduleMuxMethod.setDescription('Selection of mux method')
moduleNdpCleanup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 74), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleNdpCleanup.setStatus('current')
if mibBuilder.loadTexts: moduleNdpCleanup.setDescription('Cleanup Network Data Path allocation')
moduleAvlndpGbeTxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 75), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpGbeTxcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpGbeTxcrs.setDescription('Available network data path for gigabit ethernet (GBE) services in TXRCS direction')
moduleAvlndpGbeRxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 76), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpGbeRxcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpGbeRxcrs.setDescription('Available network data path for gigabit ethernet (GBE) services in RXRCS direction')
moduleAvlndpF125Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 77), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF125Txcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpF125Txcrs.setDescription('Available network data path for F125 services in TXRCS direction')
moduleAvlndpF125Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 78), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF125Rxcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpF125Rxcrs.setDescription('Available network data path for F125 services in RXRCS direction')
moduleAvlndpF270Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 79), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF270Txcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpF270Txcrs.setDescription('Available network data path for F270 services in TXRCS direction')
moduleAvlndpF270Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 80), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF270Rxcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpF270Rxcrs.setDescription('Available network data path for F270 services in RXRCS direction')
moduleAvlndpF1483Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 81), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF1483Txcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpF1483Txcrs.setDescription('Available network data path for F1483 services in TXRCS direction')
moduleAvlndpF1483Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 82), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF1483Rxcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpF1483Rxcrs.setDescription('Available network data path for F1483 services in RXRCS direction')
moduleAvlndpF1485Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 83), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF1485Txcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpF1485Txcrs.setDescription('Available network data path for F1485 services in TXRCS direction')
moduleAvlndpF1485Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 84), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF1485Rxcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpF1485Rxcrs.setDescription('Available network data path for F1485 services in RXRCS direction')
moduleAvlndpF2967Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 85), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF2967Txcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpF2967Txcrs.setDescription('Available network data path for F2967 services in TXRCS direction')
moduleAvlndpF2967Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 86), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF2967Rxcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpF2967Rxcrs.setDescription('Available network data path for F2967 services in RXRCS direction')
moduleAvlndpF2970Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 87), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF2970Txcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpF2970Txcrs.setDescription('Available network data path for F2970 services in TXRCS direction')
moduleAvlndpF2970Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 88), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF2970Rxcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpF2970Rxcrs.setDescription('Available network data path for F2970 services in RXRCS direction')
moduleAvlmdp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 89), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlmdp.setStatus('current')
if mibBuilder.loadTexts: moduleAvlmdp.setDescription('There are up to 4 simultaneous monitor path')
moduleRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 90), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleRstp.setStatus('current')
if mibBuilder.loadTexts: moduleRstp.setDescription('Rapid spanning tree protocol')
moduleRemoteReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 91), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleRemoteReset.setStatus('current')
if mibBuilder.loadTexts: moduleRemoteReset.setDescription('Remote reset of module. This parameter will be available only on SH9HU and SH1HUPF shelves.')
moduleChannelRangeProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 92), FspR7ChannelRangeInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleChannelRangeProvision.setStatus('current')
if mibBuilder.loadTexts: moduleChannelRangeProvision.setDescription('Channel Range')
modulePartner1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 93), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modulePartner1.setStatus('current')
if mibBuilder.loadTexts: modulePartner1.setDescription('External Protection Trigger Entity AID #1')
modulePartner2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 94), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modulePartner2.setStatus('current')
if mibBuilder.loadTexts: modulePartner2.setDescription('External Protection Trigger Entity AID #2')
modulePartner3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 95), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modulePartner3.setStatus('current')
if mibBuilder.loadTexts: modulePartner3.setDescription('External Protection Trigger Entity AID #3')
modulePartner4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 96), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modulePartner4.setStatus('current')
if mibBuilder.loadTexts: modulePartner4.setDescription('External Protection Trigger Entity AID #4')
moduleAcp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 97), FspR7Acp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleAcp.setStatus('current')
if mibBuilder.loadTexts: moduleAcp.setDescription('APS communication partner')
moduleAvlSwCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 98), Unsigned32()).setUnits('0.01 Gbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlSwCap.setStatus('current')
if mibBuilder.loadTexts: moduleAvlSwCap.setDescription('Unused Switching Capacity')
moduleAvlMapCapUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 99), Unsigned32()).setUnits('0.01 Gbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlMapCapUp.setStatus('current')
if mibBuilder.loadTexts: moduleAvlMapCapUp.setDescription('Unused Mapping Capacity (16TCC10G ports C9 ... C16)')
moduleAvlMapCapDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 100), Unsigned32()).setUnits('0.01 Gbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlMapCapDown.setStatus('current')
if mibBuilder.loadTexts: moduleAvlMapCapDown.setDescription('Unused Mapping Capacity (16TCC10G ports C1 ... C9)')
moduleAvlndpAdapt1485Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 101), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpAdapt1485Txcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpAdapt1485Txcrs.setDescription('Available network data path for ADAPT1485 services in TXRCS direction')
moduleAvlndpAdapt1485Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 102), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpAdapt1485Rxcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpAdapt1485Rxcrs.setDescription('Available network data path for ADAPT1485 services in RXRCS direction')
moduleAvlndpAdapt2970Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 103), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpAdapt2970Txcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpAdapt2970Txcrs.setDescription('Available network data path for ADAPT2970 services in TXRCS direction')
moduleAvlndpAdapt2970Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 104), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpAdapt2970Rxcrs.setStatus('current')
if mibBuilder.loadTexts: moduleAvlndpAdapt2970Rxcrs.setDescription('Available network data path for ADAPT2970 services in RXRCS direction')
moduleManagementPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 105), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleManagementPorts.setStatus('current')
if mibBuilder.loadTexts: moduleManagementPorts.setDescription('Number of Management Ports (Ethernet RJ-45)')
endOfModuleTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfModuleTable.setStatus('current')
if mibBuilder.loadTexts: endOfModuleTable.setDescription('')
protectionCableTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 9), )
if mibBuilder.loadTexts: protectionCableTable.setStatus('current')
if mibBuilder.loadTexts: protectionCableTable.setDescription('protectionCableTable')
protectionCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableClassName"))
if mibBuilder.loadTexts: protectionCableEntry.setStatus('current')
if mibBuilder.loadTexts: protectionCableEntry.setDescription('Entry of protectionCableTable')
protectionCableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 9, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protectionCableRowStatus.setStatus('current')
if mibBuilder.loadTexts: protectionCableRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
protectionCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 9, 1, 2), FspR7YcableType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protectionCableType.setStatus('current')
if mibBuilder.loadTexts: protectionCableType.setDescription('Type of Y-cable')
endOfProtectionCableTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfProtectionCableTable.setStatus('current')
if mibBuilder.loadTexts: endOfProtectionCableTable.setDescription('')
filterCableTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 11), )
if mibBuilder.loadTexts: filterCableTable.setStatus('current')
if mibBuilder.loadTexts: filterCableTable.setDescription('filterCableTable')
filterCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFilterCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityFilterCableClassName"))
if mibBuilder.loadTexts: filterCableEntry.setStatus('current')
if mibBuilder.loadTexts: filterCableEntry.setDescription('Entry of filterCableTable')
filterCableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 11, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterCableRowStatus.setStatus('current')
if mibBuilder.loadTexts: filterCableRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
filterCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 11, 1, 2), FspR7FltrCableType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterCableType.setStatus('current')
if mibBuilder.loadTexts: filterCableType.setDescription('Filter Cable')
endOfFilterCableTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFilterCableTable.setStatus('current')
if mibBuilder.loadTexts: endOfFilterCableTable.setDescription('')
endOfEqptMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEqptMgmt.setStatus('current')
if mibBuilder.loadTexts: endOfEqptMgmt.setDescription('')
physicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1), )
if mibBuilder.loadTexts: physicalPortTable.setStatus('current')
if mibBuilder.loadTexts: physicalPortTable.setDescription('physicalPortTable')
physicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: physicalPortEntry.setStatus('current')
if mibBuilder.loadTexts: physicalPortEntry.setDescription('Entry of physicalPortTable')
physicalPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: physicalPortRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
physicalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortType.setStatus('current')
if mibBuilder.loadTexts: physicalPortType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
physicalPortAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAdmin.setStatus('current')
if mibBuilder.loadTexts: physicalPortAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
physicalPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 4), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortConnector.setStatus('current')
if mibBuilder.loadTexts: physicalPortConnector.setDescription('Connector Type')
physicalPortFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 5), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortFiber.setStatus('current')
if mibBuilder.loadTexts: physicalPortFiber.setDescription('Fiber of Optical Interface - Provision, Reference to FIBER__INVENTORY')
physicalPortConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 6), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortConnType.setStatus('current')
if mibBuilder.loadTexts: physicalPortConnType.setDescription('Connectivity Parameters for Facilities')
physicalPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 7), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortOperState.setStatus('current')
if mibBuilder.loadTexts: physicalPortOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
physicalPortLaneChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 8), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaneChannel.setStatus('current')
if mibBuilder.loadTexts: physicalPortLaneChannel.setDescription('Lane Channel of OLT Entity on CFP plug')
physicalPortLaserBiasCurrLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 9), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaserBiasCurrLevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortLaserBiasCurrLevel.setDescription('Laser Bias Current Level on demand')
physicalPortLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 10), Integer32()).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaserTemp.setStatus('current')
if mibBuilder.loadTexts: physicalPortLaserTemp.setDescription('Laser Temperature')
physicalPortInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 11), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortInputPower.setStatus('deprecated')
if mibBuilder.loadTexts: physicalPortInputPower.setDescription('Total Optical Input Power Received')
physicalPortOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 12), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortOutputPower.setStatus('deprecated')
if mibBuilder.loadTexts: physicalPortOutputPower.setDescription('Instantaneous Optical Power Transmitted (Output)')
physicalPortSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 13), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: physicalPortSecondaryStates.setDescription('Secondary States')
physicalPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 14), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAlias.setStatus('current')
if mibBuilder.loadTexts: physicalPortAlias.setDescription('User Applied Descriptor')
physicalPortAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 15), FspR7AlsMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAlsMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortAlsMode.setDescription('Determines the reaction in backward direction in response to a LOS\n        on the same Interface: on a Network Interface connected to the DWDM\n        this is a matter of laser safety')
physicalPortAutoThresReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 16), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortAutoThresReset.setStatus('current')
if mibBuilder.loadTexts: physicalPortAutoThresReset.setDescription('Adaptive Threshold Control Reset')
physicalPortAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 17), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: physicalPortAutonegotiation.setDescription('Auto Negotiation for the data rate')
physicalPortBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 18), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortBand.setStatus('current')
if mibBuilder.loadTexts: physicalPortBand.setDescription('Band Provision. Reference to BAND__INVENTORY.')
physicalPortPhysIfBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 19), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortPhysIfBaseType.setStatus('current')
if mibBuilder.loadTexts: physicalPortPhysIfBaseType.setDescription('The type of the physical interface. Will be nedded for LANIP interfaces to deliver information about the BASE facility type.')
physicalPortConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 20), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortConnState.setStatus('current')
if mibBuilder.loadTexts: physicalPortConnState.setDescription('Connection State')
physicalPortBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 21), FspR7PortBehaviour()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortBehaviour.setStatus('current')
if mibBuilder.loadTexts: physicalPortBehaviour.setDescription('Behavior or Port usage based on configuration/usage in the system regardless of faceplate designation')
physicalPortRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 22), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortRate.setStatus('current')
if mibBuilder.loadTexts: physicalPortRate.setDescription('Derived from TYPE and possibly PAYLOAD')
physicalPortBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 23), FspR7Bitrate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortBitrate.setStatus('current')
if mibBuilder.loadTexts: physicalPortBitrate.setDescription('Provisioned data rate')
physicalPortDispertionConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 24), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortDispertionConfig.setStatus('current')
if mibBuilder.loadTexts: physicalPortDispertionConfig.setDescription('Chromatic Dispersion Compensation')
physicalPortDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50000, 50000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortDispersionSetting.setStatus('current')
if mibBuilder.loadTexts: physicalPortDispersionSetting.setDescription('Chromatic Dispersion Compensation setting on module')
physicalPortDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 26), FspR7DispersionModes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortDispersionMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortDispersionMode.setDescription('Chromatic Dispersion Compensation Mode')
physicalPortChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 27), FspR7ChannelSpacing()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: physicalPortChannelSpacing.setDescription('ITU Grid channel spacing')
physicalPortChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 28), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortChannelProv.setStatus('current')
if mibBuilder.loadTexts: physicalPortChannelProv.setDescription('Channel')
physicalPortWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 29), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortWdmRxChannel.setStatus('current')
if mibBuilder.loadTexts: physicalPortWdmRxChannel.setDescription('Channel Number for the Receive Interface')
physicalPortCodeGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 30), FspR7CodeGain()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortCodeGain.setStatus('current')
if mibBuilder.loadTexts: physicalPortCodeGain.setDescription('Forward Error Correction Coding gain')
physicalPortXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 31), FspR7XfpDecisionThres()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortXfpDecisionThres.setStatus('current')
if mibBuilder.loadTexts: physicalPortXfpDecisionThres.setDescription('XFP Decision threshold setting')
physicalPortDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 32), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortDisparityCorrection.setStatus('current')
if mibBuilder.loadTexts: physicalPortDisparityCorrection.setDescription('Disparity correction')
physicalPortDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 33), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDuplexMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortDuplexMode.setDescription('Duplex Mode (provision), available when Auto Negoiation is Disable (AUTONEG=DISABLE)')
physicalPortEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 34), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: physicalPortEqlzAdmin.setDescription('Scheduled Equalization Administration')
physicalPortErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 35), FspR7ErrorFwdMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortErrorForwarding.setStatus('current')
if mibBuilder.loadTexts: physicalPortErrorForwarding.setDescription('Determines the reaction in forward direction in response to a LOS on\n        the interface on the opposite side of the module: may override\n        this behaviour in the interests of laser safety.')
physicalPortFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 36), FspR7FecType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortFecType.setStatus('current')
if mibBuilder.loadTexts: physicalPortFecType.setDescription('Forward Error Correction (Only relevant where TYPE = OTU#)')
physicalPortFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 37), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortFarEndCommunication.setStatus('current')
if mibBuilder.loadTexts: physicalPortFarEndCommunication.setDescription('Used for Optojack plugs; Communication to Far End Plug is observed')
physicalPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 38), FspR7FlowControlMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortFlowControl.setStatus('current')
if mibBuilder.loadTexts: physicalPortFlowControl.setDescription('Flow Control mechanism')
physicalPortForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 39), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortForceLaserOn.setStatus('current')
if mibBuilder.loadTexts: physicalPortForceLaserOn.setDescription('Laser Forced On')
physicalPortFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 40), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortFrequency.setStatus('current')
if mibBuilder.loadTexts: physicalPortFrequency.setDescription('Frequency of Optical Interface (unit: nm)')
physicalPortReceiverFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 41), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortReceiverFrequency.setStatus('current')
if mibBuilder.loadTexts: physicalPortReceiverFrequency.setDescription('Receiver Frequency of Optical Interface (unit: nm)')
physicalPortInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 42), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortInhibitSwitchToProt.setStatus('current')
if mibBuilder.loadTexts: physicalPortInhibitSwitchToProt.setDescription('Inhibit Switch to protection facility. Inhibition blocks an automatic switch\n        to the protection facility. Valid only for the working facility.')
physicalPortInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 43), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortInhibitSwitchToWork.setStatus('current')
if mibBuilder.loadTexts: physicalPortInhibitSwitchToWork.setDescription('Inhibit Switch to working facility. Inhibition blocks an automatic switch to the\n        working facility. Valid only for the protection facility.')
physicalPortTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 44), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTransmitWavelength.setStatus('current')
if mibBuilder.loadTexts: physicalPortTransmitWavelength.setDescription('Wavelength of Optical Interface (unit: nm)')
physicalPortReceiverWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 45), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortReceiverWavelength.setStatus('current')
if mibBuilder.loadTexts: physicalPortReceiverWavelength.setDescription('Receiver Wavelength of Optical Interface (unit: nm)')
physicalPortLaneChannelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 46), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaneChannelSetting.setStatus('current')
if mibBuilder.loadTexts: physicalPortLaneChannelSetting.setDescription('Lane Channel Setting')
physicalPortLaneChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 47), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaneChannel1.setStatus('current')
if mibBuilder.loadTexts: physicalPortLaneChannel1.setDescription('Lane Channel')
physicalPortLaneChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 48), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaneChannel2.setStatus('current')
if mibBuilder.loadTexts: physicalPortLaneChannel2.setDescription('Lane Channel')
physicalPortLaneChannel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 49), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaneChannel3.setStatus('current')
if mibBuilder.loadTexts: physicalPortLaneChannel3.setDescription('Lane Channel')
physicalPortLaneChannel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 50), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaneChannel4.setStatus('current')
if mibBuilder.loadTexts: physicalPortLaneChannel4.setDescription('Lane Channel')
physicalPortLaneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 51), FspR7LaneGroupInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaneGroup.setStatus('current')
if mibBuilder.loadTexts: physicalPortLaneGroup.setDescription('Lane group to provision')
physicalPortLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 52), LoopConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortLoopConfig.setStatus('current')
if mibBuilder.loadTexts: physicalPortLoopConfig.setDescription('The configuration of the loopback function.\n        - noLoop:   no loop configuration on the interface.\n        - lineLoop: the incoming signal is looped to the outgoing\n        line on the interface. The incoming signal is sent in the\n        downstream direction and processed as normal.\n        - inwardLoop: the output signal is looped to the incoming line\n        on the interface. The looped signal is transmitted unchanged on\n        the optical output.')
physicalPortLaserDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 53), FspR7LaserDelayTimer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaserDelayTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortLaserDelayTimer.setDescription('Relevant only when ERRFWD=LSROFF. Enables/disables the\n        possibility to delay turning off and on the laser.\n        This applies to the case when turning off the laser\n        is done  as an error forwarding mechanism.')
physicalPortLaserOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 54), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaserOffTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortLaserOffTimer.setDescription('Delay before laser is swiched off')
physicalPortLaserOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaserOnTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortLaserOnTimer.setDescription('Delay before laser is switched on')
physicalPortLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 56), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaserOffDelayFunction.setStatus('current')
if mibBuilder.loadTexts: physicalPortLaserOffDelayFunction.setDescription('A configuration request for the Laser Off Delay function. This function\n        delays turning off the laser as a consequent action to a defect.')
physicalPortMonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 57), FspR7MonLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortMonLevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortMonLevel.setDescription('Highest signal level of intrusive or non-intrusive monitoring. Hardware may monitor the signal one layer higher than Termination Level (TERM).')
physicalPortSumTransmited = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 58), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortSumTransmited.setStatus('current')
if mibBuilder.loadTexts: physicalPortSumTransmited.setDescription('Sum of Transmitted Optical Channels Provisioned')
physicalPortAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 59), FspR7ManualAuto()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAutoPTassignment.setStatus('current')
if mibBuilder.loadTexts: physicalPortAutoPTassignment.setDescription('Auto assignment of ODU PT')
physicalPortTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 60), FspR7ManualAuto()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTributarySlotMethod.setStatus('current')
if mibBuilder.loadTexts: physicalPortTributarySlotMethod.setDescription('Tributary Slot assignment method')
physicalPortTributaryFreeSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 61), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTributaryFreeSlotNo.setStatus('current')
if mibBuilder.loadTexts: physicalPortTributaryFreeSlotNo.setDescription('Number of Tributary Slots which are available for assignment.')
physicalPortTributaryAssignedSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 62), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTributaryAssignedSlotNo.setStatus('current')
if mibBuilder.loadTexts: physicalPortTributaryAssignedSlotNo.setDescription('Number of Tributary Slots which have been assigned.')
physicalPortInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 63), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortInitiateEqualization.setStatus('current')
if mibBuilder.loadTexts: physicalPortInitiateEqualization.setDescription('Initiate Equalization')
physicalPortLossAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 64), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortLossAttenuation.setStatus('current')
if mibBuilder.loadTexts: physicalPortLossAttenuation.setDescription('LOS Attenuation Finding in progress')
physicalPortOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: physicalPortOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
physicalPortDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 66), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: physicalPortDataLayerPmReset.setDescription('Reset data-layer Performance registers')
physicalPortPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 67), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortPrbsPmReset.setStatus('current')
if mibBuilder.loadTexts: physicalPortPrbsPmReset.setDescription('Reset PRBS PM counters')
physicalPortTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 68), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortTestPrbsRcvMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortTestPrbsRcvMode.setDescription('PRBS test pattern received')
physicalPortTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 69), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortTestPrbsTrmtMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortTestPrbsTrmtMode.setDescription('PRBS test pattern transmitted')
physicalPortSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 70), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: physicalPortSwitchCommand.setDescription('The switch command action for this facility. A command resulting\n        in a switch event will also cause a change of the facility secondary state\n        and a corresponding condition. Addressed by this command is the active port,\n        the port to switch away from. Since this is a manual switch command, it will\n        not switch if other port suffers from a signalfailure or a signal degrade.')
physicalPortOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 71), FspR7OpuPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: physicalPortOpuPayloadType.setDescription('OPU Payload Type Indicator')
physicalPortReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 72), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortReach.setStatus('current')
if mibBuilder.loadTexts: physicalPortReach.setDescription('Reach')
physicalPortSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 73), FspR7BERThreshold()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresSonetLine.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegThresSonetLine.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
physicalPortSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 74), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresSdhMs.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegThresSdhMs.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n        Defined as percentage Background Block Errors (30% default) evaluated\n        over a defined period (SDPER-RS).')
physicalPortSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegThresOtu.setDescription('Background-Block-Error-Based Signal Degradation Definition for OTU')
physicalPortSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
physicalPortSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 77), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThreshold.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegThreshold.setDescription('Threshold for number of errors (CV or CV+DE) in one second')
physicalPortSigDegPcslThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 78), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPcslThreshold.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegPcslThreshold.setDescription('Block-Error-Based Degradation Definition for Physical Coding Sublayer')
physicalPortSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 79), FspR7BERThreshold()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegThresSonetSection.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
physicalPortSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 80), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresSdhSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegThresSdhSection.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n        Defined as percentage Background Block Errors (30% default) evaluated\n        over a defined period (SDPER-RS).')
physicalPortSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
physicalPortSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
physicalPortSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
physicalPortSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 84), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSignalDegradePeriod.setStatus('current')
if mibBuilder.loadTexts: physicalPortSignalDegradePeriod.setDescription('The measurement period in seconds used together with\n        the deployProvIfSigDegThresSdhRegSect based on the block error counting method.\n        The valid range is 2..10,\n        The default being 7.')
physicalPortSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 85), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
physicalPortSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 86), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegPeriodOtu.setDescription('Integration Period for Signal degrade')
physicalPortSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 87), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodIntegration.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegPeriodIntegration.setDescription('Integration Period for Signal degrade')
physicalPortSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 88), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodSdhSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegPeriodSdhSection.setDescription('Provisionable Signal Degrade Integration Period for SDH')
physicalPortSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 89), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
physicalPortSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 90), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
physicalPortSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 91), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
physicalPortOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 92), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: physicalPortOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
physicalPortTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 93), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTcmALevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortTcmALevel.setDescription('Activation of Tandem Connection Monitoring Instance A')
physicalPortTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 94), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortTcmBLevel.setDescription('Activation of Tandem Connection Monitoring Instance B')
physicalPortTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 95), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
physicalPortTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 96), OhTerminationLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortTerminationLevel.setDescription('Highest signal level hardware removes then generates for transmission.')
physicalPortTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 97), SonetTimingSource()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimingSource.setStatus('current')
if mibBuilder.loadTexts: physicalPortTimingSource.setDescription('The timing source for this interface.\n        - internal: used in stand-alone, point-to-point topologies stand-alone (dedicated fiber operation).\n        - loopTiming: e.g. used in point-to-point via SONET network and feeder topologies. The default is\n        internal(1).')
physicalPortTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 98), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
physicalPortTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 99), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTimModeOtu.setDescription('OTU Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
physicalPortTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 100), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortTimModeSonetSection.setDescription('SONET Section  Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
physicalPortTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 101), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortTimModeOduTcmA.setDescription('TCM_A Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
physicalPortTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 102), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortTimModeOduTcmB.setDescription('TCM_B Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
physicalPortTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 103), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortTimModeOduTcmC.setDescription('TCM_C Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
physicalPortTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 104), SonetTraceForm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceFormSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceFormSonetSection.setDescription('Byte-Length of Trace Compared to Expected')
physicalPortTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 105), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceExpectedSonetSection.setDescription('Expected Sec/RS trace. NULL TRACE implies that no trace comparison is made.')
physicalPortTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 106), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitSonetSection.setDescription('Sec/RS Trace to be Transmitted')
physicalPortTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 107), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceExpectedOtu.setDescription('Expected SAPI part of the OTU trace (15 character). NULL TRACE implies that no trace comparison is made.')
physicalPortTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 108), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOtu.setDescription('The transmitted SAPI part of the OTU trace (15 character)')
physicalPortTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 109), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOtu.setDescription('The transmitted DAPI part of the OTU trace (15 character)')
physicalPortTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 110), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOtu.setDescription('The transmitted Operator Specific part of the OTU trace (32 character)')
physicalPortTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 111), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character). NULL TRACE implies that no trace comparison is made.')
physicalPortTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 112), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
physicalPortTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 113), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
physicalPortTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 114), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
physicalPortTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 115), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
physicalPortTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 116), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
physicalPortTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 117), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
physicalPortTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 118), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
physicalPortTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 119), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
physicalPortTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 120), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
physicalPortTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 121), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
physicalPortTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 122), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
physicalPortTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 123), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
physicalPortTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 124), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
physicalPortTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 125), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
physicalPortTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 126), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
physicalPortTraceRcvSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 127), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvSapiOdu.setDescription('The received SAPI part of the ODU trace (15 character)')
physicalPortTraceRcvDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 128), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvDapiOdu.setDescription('The received DAPI part of the ODU trace (15 character)')
physicalPortTraceRcvOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 129), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvOpspOdu.setDescription('The received Operator Specific part of the ODU trace (32 character)')
physicalPortTraceRcvSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 130), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvSapiOtu.setDescription('The received SAPI part of the OTU trace (15 character)')
physicalPortTraceRcvDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 131), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvDapiOtu.setDescription('The received DAPI part of the OTU trace (15 character)')
physicalPortTraceRcvOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 132), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvOpspOtu.setDescription('The received Operator Specific part of the OTU trace (32 character)')
physicalPortTraceRcvSapiTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 133), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiTcma.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvSapiTcma.setDescription('The received SAPI part of the TCMA trace (15 character)')
physicalPortTraceRcvDapiTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 134), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiTcma.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvDapiTcma.setDescription('The received DAPI part of the TCMA trace (15 character)')
physicalPortTraceRcvOpspTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 135), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspTcma.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvOpspTcma.setDescription('The received Operator Specific part of the TCMA trace (32 character)')
physicalPortTraceRcvSapiTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 136), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiTcmb.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvSapiTcmb.setDescription('The received SAPI part of the TCMB trace (15 character)')
physicalPortTraceRcvDapiTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 137), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiTcmb.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvDapiTcmb.setDescription('The received DAPI part of the TCMB trace (15 character)')
physicalPortTraceRcvOpspTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 138), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspTcmb.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvOpspTcmb.setDescription('The received Operator Specific part of the TCMB trace (32 character)')
physicalPortTraceRcvSapiTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 139), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiTcmc.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvSapiTcmc.setDescription('The received SAPI part of the TCMC trace (15 character)')
physicalPortTraceRcvDapiTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 140), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiTcmc.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvDapiTcmc.setDescription('The received DAPI part of the TCMC trace (15 character)')
physicalPortTraceRcvOpspTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 141), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspTcmc.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceRcvOpspTcmc.setDescription('The received Operator Specific part of the TCMC trace (32 character)')
physicalPortTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 142), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceReceived.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceReceived.setDescription('The received Sec/RS Trace')
physicalPortTurnupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 143), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortTurnupConfig.setStatus('current')
if mibBuilder.loadTexts: physicalPortTurnupConfig.setDescription('Turnup Operation')
physicalPortTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 144), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTxOffDelay.setStatus('current')
if mibBuilder.loadTexts: physicalPortTxOffDelay.setDescription('Enable or disable TXOFFHOLD Period for Error Forwarding and LKDO-OFF Consequent Action.')
physicalPortVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 145), FspR7VoaMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortVoaMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortVoaMode.setDescription('VOA operating mode')
physicalPortVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 146), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: physicalPortVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
physicalPortCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 147), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 26214400))).setUnits('Byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCbsRcv.setStatus('current')
if mibBuilder.loadTexts: physicalPortCbsRcv.setDescription('Committed Burst Size')
physicalPortCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 148), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25600))).setUnits('kByte').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: physicalPortCbsTrmt.setDescription('Committed Burst Size')
physicalPortCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 149), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCirRcv.setStatus('current')
if mibBuilder.loadTexts: physicalPortCirRcv.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
physicalPortCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 150), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCirTrmt.setStatus('current')
if mibBuilder.loadTexts: physicalPortCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
physicalPortLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 151), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLagPrio.setStatus('current')
if mibBuilder.loadTexts: physicalPortLagPrio.setDescription('Part of ID. Port pri that defines standby.')
physicalPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 152), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortMacAddress.setStatus('current')
if mibBuilder.loadTexts: physicalPortMacAddress.setDescription('Ethernet MAC address')
physicalPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 153), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: physicalPortMaxFrameSize.setDescription('Max Frame Size')
physicalPortPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 154), OtnPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPayload.setStatus('current')
if mibBuilder.loadTexts: physicalPortPayload.setDescription('The PAYLOAD defines the transport service type of the payload')
physicalPortPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 155), FspR7PortMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPortMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortPortMode.setDescription('Port Mode')
physicalPortPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 156), FspR7PortRole()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPortRole.setStatus('current')
if mibBuilder.loadTexts: physicalPortPortRole.setDescription('ADVA cloud Port Roles')
physicalPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 157), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPriority.setStatus('current')
if mibBuilder.loadTexts: physicalPortPriority.setDescription('Default PCP in case UTAG is Enabled. The Prio may be remapped in the EVC.')
physicalPortPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 158), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPvid.setStatus('current')
if mibBuilder.loadTexts: physicalPortPvid.setDescription('Default VLAN ID (both STAG/CTAG mode) in case UTAG is enabled')
physicalPortStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 159), FspR7SnmpHexString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortStagType.setStatus('current')
if mibBuilder.loadTexts: physicalPortStagType.setDescription('TAG type field')
physicalPortUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 160), FspR7UntaggedFrames()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortUtag.setStatus('current')
if mibBuilder.loadTexts: physicalPortUtag.setDescription('If untagged frames shall be enabled on this port or not.')
physicalPortVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 161), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortVethAid.setStatus('current')
if mibBuilder.loadTexts: physicalPortVethAid.setDescription('Shows if PORT is a member in the LAG with the VETH AID')
physicalPortChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 162), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortChannelBandwith.setStatus('current')
if mibBuilder.loadTexts: physicalPortChannelBandwith.setDescription('Channel Bandwidth')
physicalPortFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 163), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortFacilities.setStatus('current')
if mibBuilder.loadTexts: physicalPortFacilities.setDescription('List of AIDs (CH, VCH or WCH) used by parent entity (Segment, Service, Optical Line or Super Channel)')
physicalPortLanes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 164), FspR7OpticalLanes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLanes.setStatus('current')
if mibBuilder.loadTexts: physicalPortLanes.setDescription('Number of Optical Transport Lanes in OTLG')
physicalPortProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 165), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortProtectionRole.setStatus('current')
if mibBuilder.loadTexts: physicalPortProtectionRole.setDescription('Path label Working or Protect')
physicalPortMonitoredBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 166), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortMonitoredBitrate.setStatus('current')
if mibBuilder.loadTexts: physicalPortMonitoredBitrate.setDescription('Bit Rate read from card, - relevant to- auto clock')
physicalPortLagState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 167), FspR7LagState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagState.setStatus('current')
if mibBuilder.loadTexts: physicalPortLagState.setDescription('State of the LACP on this port')
physicalPortLagIdFend = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 168), FspR7LagIdFend()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagIdFend.setStatus('current')
if mibBuilder.loadTexts: physicalPortLagIdFend.setDescription('Part of Partner PORT ID. Operational Key, Pri and No. uses 4+2+4 HEX values. Coded as 10 HEXV2 in DD.')
physicalPortLagFendState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 169), FspR7LagFendState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagFendState.setStatus('current')
if mibBuilder.loadTexts: physicalPortLagFendState.setDescription('State of the LACP on partner port')
physicalPortLagPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 170), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagPortNo.setStatus('current')
if mibBuilder.loadTexts: physicalPortLagPortNo.setDescription('Part of ID. Hardcoded to physical port no.')
physicalPortLagKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 171), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagKey.setStatus('current')
if mibBuilder.loadTexts: physicalPortLagKey.setDescription('Part of ID. Operational KEY')
physicalPortValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 172), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortValidSigTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortValidSigTimer.setDescription('AINS state signal quality soak time remaining until transition to IS.')
physicalPortLaserReleaseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 173), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaserReleaseTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortLaserReleaseTimer.setDescription('Fall-back timer for forced laser operation.')
physicalPortBidirectionalChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 174), FspR7BidirectionalChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortBidirectionalChannel.setStatus('current')
if mibBuilder.loadTexts: physicalPortBidirectionalChannel.setDescription('Bidirectional Channel Rates from Provisioning')
physicalPortTransmitterWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 175), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTransmitterWavelength.setStatus('current')
if mibBuilder.loadTexts: physicalPortTransmitterWavelength.setDescription('Transmitter Wavelength of Optical Interface (unit: nm)')
physicalPortTransmitterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 176), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTransmitterFrequency.setStatus('current')
if mibBuilder.loadTexts: physicalPortTransmitterFrequency.setDescription('Transmitter Frequency of Optical Interface (unit: nm)')
physicalPortRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 177), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortRedLineState.setStatus('current')
if mibBuilder.loadTexts: physicalPortRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
physicalPortTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 178), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTunnelAid.setStatus('current')
if mibBuilder.loadTexts: physicalPortTunnelAid.setDescription('Tunnel AID')
physicalPortIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 179), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortIngressTid.setStatus('current')
if mibBuilder.loadTexts: physicalPortIngressTid.setDescription('Ingress Target ID')
physicalPortIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 180), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortIngressNodeIp.setStatus('current')
if mibBuilder.loadTexts: physicalPortIngressNodeIp.setDescription('Ingress Node IP')
physicalPortRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 181), FspR7DisableEnable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortRateLimit.setStatus('current')
if mibBuilder.loadTexts: physicalPortRateLimit.setDescription('Selection to apply rate limit feature or not.')
physicalPortPathProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 182), FspR7PathProt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortPathProtection.setStatus('current')
if mibBuilder.loadTexts: physicalPortPathProtection.setDescription('Indicates the traffic path for path protection cases when the FFP does not exist.  When the FFP exists, protected is indicated and the status is determined by the FFP.')
physicalPortGropticsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 183), FspR7GropticsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortGropticsType.setStatus('current')
if mibBuilder.loadTexts: physicalPortGropticsType.setDescription('Identification of the desired group optics inorder to verify the plug types are as expected')
physicalPortAvlntsTxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 184), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortAvlntsTxcrs.setStatus('current')
if mibBuilder.loadTexts: physicalPortAvlntsTxcrs.setDescription('Available Time slots in CRS transmit direction (from CRS to N-port)')
physicalPortAvlntsRxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 185), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortAvlntsRxcrs.setStatus('current')
if mibBuilder.loadTexts: physicalPortAvlntsRxcrs.setDescription('Available network time slots in CRS receive direction (from N-port to CRS)')
physicalPortTxOffOnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 186), FspR7TxOffOnTm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTxOffOnTm.setStatus('current')
if mibBuilder.loadTexts: physicalPortTxOffOnTm.setDescription('Relevant only when ERRFWD=TXOFF. Enables/disables the\n        possibility to delay turning off and on the the transmitter.\n        This applies to the case when turning off the transmitter\n        is done  as an error forwarding mechanism.')
physicalPortTxOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 187), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTxOffTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortTxOffTimer.setDescription('Delay before transmitter is swiched off')
physicalPortTxOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 188), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTxOnTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortTxOnTimer.setDescription('Delay before transmitter is switched on')
physicalPortTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 189), FspR7TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTrafficDirection.setStatus('current')
if mibBuilder.loadTexts: physicalPortTrafficDirection.setDescription('Traffic Direction')
physicalPortChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 190), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortChannelSpacingProvision.setStatus('current')
if mibBuilder.loadTexts: physicalPortChannelSpacingProvision.setDescription('Channel Space Provision, reference to CHA-SPC__INVENTORY')
physicalPortChannelRangeProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 191), FspR7ChannelRangeInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortChannelRangeProvision.setStatus('current')
if mibBuilder.loadTexts: physicalPortChannelRangeProvision.setDescription('Channel Range')
physicalPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 192), FspR7TransmissionMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortMode.setDescription('Mode of the module, determine operation or functionality')
physicalPortNearEndProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 193), FspR7ProtectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortNearEndProtectionState.setStatus('current')
if mibBuilder.loadTexts: physicalPortNearEndProtectionState.setDescription('Protection state at near end')
physicalPortFarEndProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 194), FspR7ProtectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortFarEndProtectionState.setStatus('current')
if mibBuilder.loadTexts: physicalPortFarEndProtectionState.setDescription('Protection state at far end')
physicalPortChannelPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 195), FspR7ChannelRangeInventory()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortChannelPlan.setStatus('current')
if mibBuilder.loadTexts: physicalPortChannelPlan.setDescription('Channel Range')
physicalPortAutosrvLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 196), FspR7AutosrvLock()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortAutosrvLock.setStatus('current')
if mibBuilder.loadTexts: physicalPortAutosrvLock.setDescription('Facility Rate the Adaptive Clock detected and locked too.')
physicalPortOptimize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 197), FspR7Optimize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOptimize.setStatus('current')
if mibBuilder.loadTexts: physicalPortOptimize.setDescription('Optimizes port for either protection switch time or traffic regeneration operation')
physicalPortEncryptionChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 198), CryptoFspR7EncryptionCommunication()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortEncryptionChannel.setStatus('current')
if mibBuilder.loadTexts: physicalPortEncryptionChannel.setDescription('Embedded Communication Channel used to support Encryption')
physicalPortLinkSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 199), FspR7DisableEnable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLinkSetup.setStatus('current')
if mibBuilder.loadTexts: physicalPortLinkSetup.setDescription('Support RDMA over Converged Ethernet (RoCE)')
physicalPortCdCompensationRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 200), FspR7CdCompensationRange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortCdCompensationRange.setStatus('current')
if mibBuilder.loadTexts: physicalPortCdCompensationRange.setDescription('Chromatic Dispersion Compensation Goal')
physicalPortLLDPNeighborsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 201), FspR7LLDPNeighbors()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLLDPNeighborsRx.setStatus('current')
if mibBuilder.loadTexts: physicalPortLLDPNeighborsRx.setDescription('LLDP Neighbors in Rx Direction')
physicalPortLLDPNeighborsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 202), FspR7LLDPNeighbors()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLLDPNeighborsTx.setStatus('current')
if mibBuilder.loadTexts: physicalPortLLDPNeighborsTx.setDescription('LLDP Neighbors in Tx Direction')
physicalPortCdPostCompensationRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 203), FspR7CdPostCompensationRange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortCdPostCompensationRange.setStatus('current')
if mibBuilder.loadTexts: physicalPortCdPostCompensationRange.setDescription('CD Post Compensation Range\n        Range 1: [-22 ns/nm   to +6 ns/nm] or [-20 ns/nm to +2 ns/nm]\n        Range 2: [-72 ns/nm   to +6 ns/nm] or [-45 ns/nm to +5 ns/nm]\n        Range 3: [-120 ns/nm to +6 ns/nm]\n        Range 4: [-280 ns/nm to +6 ns/nm]')
physicalPortOpticalSetPointLane1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 204), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOpticalSetPointLane1.setStatus('current')
if mibBuilder.loadTexts: physicalPortOpticalSetPointLane1.setDescription('Optical Power Setpoint for Optical Transport Lane 1')
physicalPortOpticalSetPointLane2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 205), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOpticalSetPointLane2.setStatus('current')
if mibBuilder.loadTexts: physicalPortOpticalSetPointLane2.setDescription('Optical Power Setpoint for Optical Transport Lane 2')
physicalPortOduMultiplexStructure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 206), FspR7OduMultiplexStructure()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOduMultiplexStructure.setStatus('current')
if mibBuilder.loadTexts: physicalPortOduMultiplexStructure.setDescription('ODU Multiplex Structure. The possible values depend on the high order ODUk: ODUCn=22; ODU4=21;  ODU3=(21,20); ODU2=(21,20); ODU1=20.')
physicalPortTerminationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 207), FspR7TerminationMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTerminationMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortTerminationMode.setDescription('FSP 3000 C Signal Termination Modes\n        Monitor or Terminate \tdescribes general signal handling at layer\n        Mux\t\tindicates if signal is multiplexed or demultiplexed at layer\n        Connect\t\tindicates support for Sub Network Connection (SNC), cross-connect')
physicalPortTimDetModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 208), FspR7TimDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimDetModeOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTimDetModeOtu.setDescription('OTU Trace Identifier Mismatch (TIM) strings compared to generate TIM defect.')
physicalPortTimActionOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 209), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimActionOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTimActionOtu.setDescription('Trace Identifier Mismatch (TIM) is reported as an alarm when detected. User selection allow traffic or AIS to be sent while the mismatch is present.')
physicalPortTraceExpectedDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 210), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedDapiOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceExpectedDapiOtu.setDescription('Expected DAPI part of the OTU trace (15 character). NULL TRACE implies that no trace comparison is made.')
physicalPortTraceExpectedOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 211), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOpspOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceExpectedOpspOtu.setDescription('Expected OPSP part of the OTU trace (32 character). NULL TRACE implies that no trace comparison is made.')
physicalPortTimDetModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 212), FspR7TimDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimDetModeOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTimDetModeOdu.setDescription('ODU Trace Identifier Mismatch (TIM) strings compared to generate TIM defect.')
physicalPortTimActionOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 213), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimActionOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTimActionOdu.setDescription('Trace Identifier Mismatch (TIM) is reported as an alarm when detected. User selection allow traffic or AIS to be sent while the mismatch is present.')
physicalPortTraceExpectedDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 214), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedDapiOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceExpectedDapiOdu.setDescription('Expected DAPI part of the ODU trace (15 character). NULL TRACE implies that no trace comparison is made.')
physicalPortTraceExpectedOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 215), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOpspOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortTraceExpectedOpspOdu.setDescription('Expected OPSP part of the ODU trace (32 character). NULL TRACE implies that no trace comparison is made.')
physicalPortReportAisLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 216), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortReportAisLine.setStatus('current')
if mibBuilder.loadTexts: physicalPortReportAisLine.setDescription('Whether AIS alarm (Line/MS) is reported or not.')
physicalPortReportSsfLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 217), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortReportSsfLine.setStatus('current')
if mibBuilder.loadTexts: physicalPortReportSsfLine.setDescription('Whether SSF alarm (Line/MS) is reported or not.')
physicalPortReportSsfSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 218), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortReportSsfSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortReportSsfSection.setDescription('Whether SSF alarm (Section/RS) is reported or not.')
physicalPortDelayMeasurementLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 219), FspR7DmLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDelayMeasurementLayer.setStatus('current')
if mibBuilder.loadTexts: physicalPortDelayMeasurementLayer.setDescription('Data layer where the Delay Measurement was performed')
physicalPortDelayMeasurementOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 220), FspR7DmsrmtOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortDelayMeasurementOperation.setStatus('current')
if mibBuilder.loadTexts: physicalPortDelayMeasurementOperation.setDescription('Delay Measurement start')
physicalPortDelayMeasurementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 221), FspR7DmsrmtStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDelayMeasurementStatus.setStatus('current')
if mibBuilder.loadTexts: physicalPortDelayMeasurementStatus.setDescription('Status of the Delay Measurement')
physicalPortDelayMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 222), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDelayMeasurementTime.setStatus('current')
if mibBuilder.loadTexts: physicalPortDelayMeasurementTime.setDescription('Date and time measurement was made')
virtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2), )
if mibBuilder.loadTexts: virtualPortTable.setStatus('current')
if mibBuilder.loadTexts: virtualPortTable.setDescription('virtualPortTable')
virtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: virtualPortEntry.setStatus('current')
if mibBuilder.loadTexts: virtualPortEntry.setDescription('Entry of virtualPortTable')
virtualPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: virtualPortRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
virtualPortChannelBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 2), FspR7ChannelBandwidth()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortChannelBand.setStatus('current')
if mibBuilder.loadTexts: virtualPortChannelBand.setDescription('Channel Bandwidth')
virtualPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 3), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortType.setStatus('current')
if mibBuilder.loadTexts: virtualPortType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
virtualPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortAlias.setStatus('current')
if mibBuilder.loadTexts: virtualPortAlias.setDescription('User Applied Descriptor')
virtualPortFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 5), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortFunction.setStatus('current')
if mibBuilder.loadTexts: virtualPortFunction.setDescription('Interface Function')
virtualPortChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 6), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortChannelProv.setStatus('current')
if mibBuilder.loadTexts: virtualPortChannelProv.setDescription('Channel')
virtualPortLambda = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 7), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLambda.setStatus('current')
if mibBuilder.loadTexts: virtualPortLambda.setDescription('Wavelength of Optical Interface (unit: nm)')
virtualPortFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 8), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortFrequency.setStatus('current')
if mibBuilder.loadTexts: virtualPortFrequency.setDescription('Frequency of Optical Interface (unit: nm)')
virtualPortAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 9), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortAdmin.setStatus('current')
if mibBuilder.loadTexts: virtualPortAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
virtualPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 10), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOperState.setStatus('current')
if mibBuilder.loadTexts: virtualPortOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
virtualPortConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 11), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortConnState.setStatus('current')
if mibBuilder.loadTexts: virtualPortConnState.setDescription('Connection State')
virtualPortEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 12), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: virtualPortEqlzAdmin.setDescription('Scheduled Equalization Administration')
virtualPortInitEqlz = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 13), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortInitEqlz.setStatus('current')
if mibBuilder.loadTexts: virtualPortInitEqlz.setDescription('Initiate Equalization')
virtualPortInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 14), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortInputPower.setStatus('deprecated')
if mibBuilder.loadTexts: virtualPortInputPower.setDescription('Total Optical Input Power Received')
virtualPortOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 15), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOutputPower.setStatus('deprecated')
if mibBuilder.loadTexts: virtualPortOutputPower.setDescription('Instantaneous Optical Power Transmitted (Output)')
virtualPortSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 16), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: virtualPortSecondaryStates.setDescription('Secondary States')
virtualPortRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 17), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortRate.setStatus('current')
if mibBuilder.loadTexts: virtualPortRate.setDescription('Derived from TYPE and possibly PAYLOAD')
virtualPortCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 18), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCirRcv.setStatus('current')
if mibBuilder.loadTexts: virtualPortCirRcv.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
virtualPortCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 26214400))).setUnits('Byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCbsRcv.setStatus('current')
if mibBuilder.loadTexts: virtualPortCbsRcv.setDescription('Committed Burst Size')
virtualPortCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 20), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCirTrmt.setStatus('current')
if mibBuilder.loadTexts: virtualPortCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
virtualPortCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25600))).setUnits('kByte').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: virtualPortCbsTrmt.setDescription('Committed Burst Size')
virtualPortLagPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 22), FspR7LagPorts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagPorts.setStatus('current')
if mibBuilder.loadTexts: virtualPortLagPorts.setDescription('A list of ports(AIDs) in the LAG.')
virtualPortLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 23), FspR7LagPortType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortLagPortType.setStatus('current')
if mibBuilder.loadTexts: virtualPortLagPortType.setDescription('Type/Speed of connected ports in the Link Aggregation Group')
virtualPortLagStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 24), FspR7LagStandby()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagStandby.setStatus('current')
if mibBuilder.loadTexts: virtualPortLagStandby.setDescription('Port is in standby in the Link Aggregation Group')
virtualPortLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 25), FspR7LacpMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortLacpMode.setStatus('current')
if mibBuilder.loadTexts: virtualPortLacpMode.setDescription('Enable of LACP state machine')
virtualPortLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 26), FspR7LacpTimeout()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortLacpTimeout.setStatus('current')
if mibBuilder.loadTexts: virtualPortLacpTimeout.setDescription('Timeout of the LACP')
virtualPortLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortLagActivePorts.setStatus('current')
if mibBuilder.loadTexts: virtualPortLagActivePorts.setDescription('Number of active ports in the Link Aggregation Group')
virtualPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 28), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortMacAddress.setStatus('current')
if mibBuilder.loadTexts: virtualPortMacAddress.setDescription('Ethernet MAC address')
virtualPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: virtualPortMaxFrameSize.setDescription('Max Frame Size')
virtualPortPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 30), FspR7PortMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortPortMode.setStatus('current')
if mibBuilder.loadTexts: virtualPortPortMode.setDescription('Port Mode')
virtualPortDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 31), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: virtualPortDataLayerPmReset.setDescription('Reset data-layer Performance registers')
virtualPortPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 32), FspR7PortRole()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortPortRole.setStatus('current')
if mibBuilder.loadTexts: virtualPortPortRole.setDescription('ADVA cloud Port Roles')
virtualPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortPriority.setStatus('current')
if mibBuilder.loadTexts: virtualPortPriority.setDescription('Default PCP in case UTAG is Enabled. The Prio may be remapped in the EVC.')
virtualPortPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortPvid.setStatus('current')
if mibBuilder.loadTexts: virtualPortPvid.setDescription('Default VLAN ID (both STAG/CTAG mode) in case UTAG is enabled')
virtualPortRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 35), ApsRevertMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: virtualPortRevertiveMode.setDescription('Revertive Protection Switching')
virtualPortStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 36), FspR7SnmpHexString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortStagType.setStatus('current')
if mibBuilder.loadTexts: virtualPortStagType.setDescription('TAG type field')
virtualPortUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 37), FspR7UntaggedFrames()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortUtag.setStatus('current')
if mibBuilder.loadTexts: virtualPortUtag.setDescription('If untagged frames shall be enabled on this port or not.')
virtualPortBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 38), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortBundle.setStatus('current')
if mibBuilder.loadTexts: virtualPortBundle.setDescription('List of VC4/VC3/STS1/STS3c/STS24c/STS48c containers used in the BUNDLE')
virtualPortSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 39), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: virtualPortSwitchCommand.setDescription('The switch command action for this facility. A command resulting\n        in a switch event will also cause a change of the facility secondary state\n        and a corresponding condition. Addressed by this command is the active port,\n        the port to switch away from. Since this is a manual switch command, it will\n        not switch if other port suffers from a signalfailure or a signal degrade.')
virtualPortInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 40), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortInhibitSwitchToWork.setStatus('current')
if mibBuilder.loadTexts: virtualPortInhibitSwitchToWork.setDescription('Inhibit Switch to working facility. Inhibition blocks an automatic switch to the\n        working facility.     Valid only for the protection facility.')
virtualPortInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 41), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortInhibitSwitchToProt.setStatus('current')
if mibBuilder.loadTexts: virtualPortInhibitSwitchToProt.setDescription('Inhibit Switch to protection facility. Inhibition blocks an automatic switch\n        to the protection facility. Valid only for the working facility.')
virtualPortMonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 42), FspR7MonLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortMonLevel.setStatus('current')
if mibBuilder.loadTexts: virtualPortMonLevel.setDescription('Highest signal level of intrusive or non-intrusive monitoring. Hardware may monitor the signal one layer higher than Termination Level (TERM).')
virtualPortOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 43), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortOduTribPortNo.setStatus('current')
if mibBuilder.loadTexts: virtualPortOduTribPortNo.setDescription('ODU Tributary Port Number')
virtualPortOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 44), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortOduTribTimeSlottNo.setStatus('current')
if mibBuilder.loadTexts: virtualPortOduTribTimeSlottNo.setDescription('ODU Tributary slot number. Multiple values can be entered as a string, separated by commas or given as a range.\n        For capabilities objects possible number of slots and valid range are displayed in a form:\n        [1,2,3,8][count: 1-1]\n        In first brackets valid slots are shown and in the second possible number of slots.')
virtualPortSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
virtualPortSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
virtualPortTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 47), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character). NULL TRACE implies that no trace comparison is made.')
virtualPortTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
virtualPortTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
virtualPortTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
virtualPortTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 51), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
virtualPortSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
virtualPortSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
virtualPortSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
virtualPortSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
virtualPortSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
virtualPortSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 57), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
virtualPortTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 58), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTcmALevel.setStatus('current')
if mibBuilder.loadTexts: virtualPortTcmALevel.setDescription('Activation of Tandem Connection Monitoring Instance A')
virtualPortTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 59), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: virtualPortTcmBLevel.setDescription('Activation of Tandem Connection Monitoring Instance B')
virtualPortTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 60), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: virtualPortTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
virtualPortTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
virtualPortTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 62), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
virtualPortTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
virtualPortTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
virtualPortTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 65), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortTimModeOduTcmA.setDescription('TCM_A Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
virtualPortTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
virtualPortTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 67), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
virtualPortTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
virtualPortTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
virtualPortTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 70), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortTimModeOduTcmB.setDescription('TCM_B Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
virtualPortTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
virtualPortTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 72), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
virtualPortTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 73), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
virtualPortTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 74), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
virtualPortTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 75), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortTimModeOduTcmC.setDescription('TCM_C Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
virtualPortTraceRcvSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 76), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvSapiOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceRcvSapiOdu.setDescription('The received SAPI part of the ODU trace (15 character)')
virtualPortTraceRcvDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 77), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvDapiOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceRcvDapiOdu.setDescription('The received DAPI part of the ODU trace (15 character)')
virtualPortTraceRcvOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 78), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvOpspOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceRcvOpspOdu.setDescription('The received Operator Specific part of the ODU trace (32 character)')
virtualPortTraceRcvSapiTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 79), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvSapiTcma.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceRcvSapiTcma.setDescription('The received SAPI part of the TCMA trace (15 character)')
virtualPortTraceRcvDapiTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 80), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvDapiTcma.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceRcvDapiTcma.setDescription('The received DAPI part of the TCMA trace (15 character)')
virtualPortTraceRcvOpspTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 81), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvOpspTcma.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceRcvOpspTcma.setDescription('The received Operator Specific part of the TCMA trace (32 character)')
virtualPortTraceRcvSapiTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 82), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvSapiTcmb.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceRcvSapiTcmb.setDescription('The received SAPI part of the TCMB trace (15 character)')
virtualPortTraceRcvDapiTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 83), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvDapiTcmb.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceRcvDapiTcmb.setDescription('The received DAPI part of the TCMB trace (15 character)')
virtualPortTraceRcvOpspTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 84), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvOpspTcmb.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceRcvOpspTcmb.setDescription('The received Operator Specific part of the TCMB trace (32 character)')
virtualPortTraceRcvSapiTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvSapiTcmc.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceRcvSapiTcmc.setDescription('The received SAPI part of the TCMC trace (15 character)')
virtualPortTraceRcvDapiTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvDapiTcmc.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceRcvDapiTcmc.setDescription('The received DAPI part of the TCMC trace (15 character)')
virtualPortTraceRcvOpspTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 87), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvOpspTcmc.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceRcvOpspTcmc.setDescription('The received Operator Specific part of the TCMC trace (32 character)')
virtualPortTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 88), OhTerminationLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: virtualPortTerminationLevel.setDescription('Highest signal level hardware removes then generates for transmission.')
virtualPortChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 89), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: virtualPortChannelSpacing.setDescription('ITU Grid channel spacing')
virtualPortCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 90), Unsigned32()).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortCir.setStatus('current')
if mibBuilder.loadTexts: virtualPortCir.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
virtualPortLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 91), LoopConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortLoopConfig.setStatus('current')
if mibBuilder.loadTexts: virtualPortLoopConfig.setDescription('External or Facility Loopback')
virtualPortOwnerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 92), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOwnerAid.setStatus('current')
if mibBuilder.loadTexts: virtualPortOwnerAid.setDescription('Channel Group which is the parent (owner) of the channel')
virtualPortPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 93), OtnPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortPayload.setStatus('current')
if mibBuilder.loadTexts: virtualPortPayload.setDescription('The PAYLOAD defines the transport service type of the payload')
virtualPortVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 94), VirtualContainerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortVcType.setStatus('current')
if mibBuilder.loadTexts: virtualPortVcType.setDescription('Virtual Container Group Type')
virtualPortOdtuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 95), FspR7OdtuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOdtuType.setStatus('current')
if mibBuilder.loadTexts: virtualPortOdtuType.setDescription('ODTU Transport Unit')
virtualPortProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 96), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortProtectionRole.setStatus('current')
if mibBuilder.loadTexts: virtualPortProtectionRole.setDescription('Path label Working or Protect')
virtualPortLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 97), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagSysPrio.setStatus('current')
if mibBuilder.loadTexts: virtualPortLagSysPrio.setDescription('Link Aggregation Group Actor System Priority Part of LAG ID')
virtualPortOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 98), FspR7OpuPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: virtualPortOpuPayloadType.setDescription('OPU Payload Type Indicator')
virtualPortLagSysMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 99), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagSysMac.setStatus('current')
if mibBuilder.loadTexts: virtualPortLagSysMac.setDescription('System MAC set to first member port')
virtualPortLagSysIdFend = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 100), FspR7LagSysIdFend()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagSysIdFend.setStatus('current')
if mibBuilder.loadTexts: virtualPortLagSysIdFend.setDescription('System ID (Pri&MAC) received from the Partner of the Link Aggregation Group.')
virtualPortValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 101), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortValidSigTimer.setStatus('current')
if mibBuilder.loadTexts: virtualPortValidSigTimer.setDescription('AINS state signal quality soak time remaining until transition to IS.')
virtualPortOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 102), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: virtualPortOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
virtualPortRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 103), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortRedLineState.setStatus('current')
if mibBuilder.loadTexts: virtualPortRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
virtualPortTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 104), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTunnelAid.setStatus('current')
if mibBuilder.loadTexts: virtualPortTunnelAid.setDescription('Tunnel AID')
virtualPortIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 105), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortIngressTid.setStatus('current')
if mibBuilder.loadTexts: virtualPortIngressTid.setDescription('Ingress Target ID')
virtualPortIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 106), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortIngressNodeIp.setStatus('current')
if mibBuilder.loadTexts: virtualPortIngressNodeIp.setDescription('Ingress Node IP')
virtualPortEncapsulationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 107), FspR7EncapsulationMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortEncapsulationMethod.setStatus('current')
if mibBuilder.loadTexts: virtualPortEncapsulationMethod.setDescription('Indicates the encapsulation method being used.')
virtualPortPathProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 108), FspR7PathProt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortPathProtection.setStatus('current')
if mibBuilder.loadTexts: virtualPortPathProtection.setDescription('Indicates the traffic path for path protection cases when the FFP does not exist.  When the FFP exists, protected is indicated and the status is determined by the FFP.')
virtualPortTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 109), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTimeslot.setStatus('current')
if mibBuilder.loadTexts: virtualPortTimeslot.setDescription('Time slots used')
virtualPortOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 110), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOffsetHigh.setStatus('current')
if mibBuilder.loadTexts: virtualPortOffsetHigh.setDescription('Sets the high level offset for power equalization in CCM')
virtualPortOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOffsetLow.setStatus('current')
if mibBuilder.loadTexts: virtualPortOffsetLow.setDescription('Sets the low level offset for power equalization in CCM')
virtualPortTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 112), FspR7TrafficDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTrafficDirection.setStatus('current')
if mibBuilder.loadTexts: virtualPortTrafficDirection.setDescription('Traffic Direction')
virtualPortChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 113), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortChannelId.setStatus('current')
if mibBuilder.loadTexts: virtualPortChannelId.setDescription('Channel ID [1 ..256]')
virtualPortNearEndProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 114), FspR7ProtectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortNearEndProtectionState.setStatus('current')
if mibBuilder.loadTexts: virtualPortNearEndProtectionState.setDescription('Protection state at near end')
virtualPortFarEndProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 115), FspR7ProtectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortFarEndProtectionState.setStatus('current')
if mibBuilder.loadTexts: virtualPortFarEndProtectionState.setDescription('Protection state at far end')
virtualPortAutosrvLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 116), FspR7AutosrvLock()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortAutosrvLock.setStatus('current')
if mibBuilder.loadTexts: virtualPortAutosrvLock.setDescription('Facility Rate the Adaptive Clock detected and locked too.')
virtualPortOptSetDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 117), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortOptSetDeviation.setStatus('current')
if mibBuilder.loadTexts: virtualPortOptSetDeviation.setDescription('Channel optical power delta from the port optical power set-point used for equalization (use is optional).')
virtualPortPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 118), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortPrbsPmReset.setStatus('current')
if mibBuilder.loadTexts: virtualPortPrbsPmReset.setDescription('Reset PRBS PM counters')
virtualPortTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 119), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortTestPrbsRcvMode.setStatus('current')
if mibBuilder.loadTexts: virtualPortTestPrbsRcvMode.setDescription('PRBS test pattern received')
virtualPortTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 120), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortTestPrbsTrmtMode.setStatus('current')
if mibBuilder.loadTexts: virtualPortTestPrbsTrmtMode.setDescription('PRBS test pattern transmitted')
virtualPortTerminationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 121), FspR7TerminationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTerminationMode.setStatus('current')
if mibBuilder.loadTexts: virtualPortTerminationMode.setDescription('FSP 3000 C Signal Termination Modes\n        Monitor or Terminate \tdescribes general signal handling at layer\n        Mux\t\tindicates if signal is multiplexed or demultiplexed at layer\n        Connect\t\tindicates support for Sub Network Connection (SNC), cross-connect')
virtualPortTimDetModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 122), FspR7TimDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimDetModeOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortTimDetModeOdu.setDescription('ODU Trace Identifier Mismatch (TIM) strings compared to generate TIM defect.')
virtualPortTimActionOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 123), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimActionOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortTimActionOdu.setDescription('Trace Identifier Mismatch (TIM) is reported as an alarm when detected. User selection allow traffic or AIS to be sent while the mismatch is present.')
virtualPortTraceExpectedDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 124), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedDapiOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceExpectedDapiOdu.setDescription('Expected DAPI part of the ODU trace (15 character). NULL TRACE implies that no trace comparison is made.')
virtualPortTraceExpectedOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 125), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedOpspOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortTraceExpectedOpspOdu.setDescription('Expected OPSP part of the ODU trace (32 character). NULL TRACE implies that no trace comparison is made.')
lldpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3), )
if mibBuilder.loadTexts: lldpTable.setStatus('current')
if mibBuilder.loadTexts: lldpTable.setDescription('lldpTable')
lldpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: lldpEntry.setStatus('current')
if mibBuilder.loadTexts: lldpEntry.setDescription('Entry of lldpTable')
lldpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lldpRowStatus.setStatus('current')
if mibBuilder.loadTexts: lldpRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
lldpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lldpType.setStatus('current')
if mibBuilder.loadTexts: lldpType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
lldpAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lldpAlias.setStatus('current')
if mibBuilder.loadTexts: lldpAlias.setDescription('User Applied Descriptor')
lldpDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 4), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: lldpDataLayerPmReset.setDescription('Reset data-layer Performance registers')
lldpAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 5), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lldpAdmin.setStatus('current')
if mibBuilder.loadTexts: lldpAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
lldpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 6), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOperState.setStatus('current')
if mibBuilder.loadTexts: lldpOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
lldpLLDPScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 7), FspR7LLDPScope()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lldpLLDPScope.setStatus('current')
if mibBuilder.loadTexts: lldpLLDPScope.setDescription('Scope of LLDP propogation based on standard group MAC Addresses')
lldpLLDPLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 8), FspR7LLDPLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLLDPLocation.setStatus('current')
if mibBuilder.loadTexts: lldpLLDPLocation.setDescription('LLDP Interface Location')
lldpAgeOutPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 9), Unsigned32()).setUnits('S').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpAgeOutPeriod.setStatus('current')
if mibBuilder.loadTexts: lldpAgeOutPeriod.setDescription('LLDP Time to Live (or Age out period)')
lldpTimeTillAgeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 10), Unsigned32()).setUnits('S').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpTimeTillAgeOut.setStatus('current')
if mibBuilder.loadTexts: lldpTimeTillAgeOut.setDescription('Remaining Time before Age out')
lldpLLDPChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 11), FspR7LLDPChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLLDPChassisType.setStatus('current')
if mibBuilder.loadTexts: lldpLLDPChassisType.setDescription('LLDP Chassis Type; read from agent on module')
lldpChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpChassisID.setStatus('current')
if mibBuilder.loadTexts: lldpChassisID.setDescription('LLDP Chassis ID; read from agent on module')
lldpPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 13), FspR7LLDPPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortType.setStatus('current')
if mibBuilder.loadTexts: lldpPortType.setDescription('LLDP Port Type; read from agent on module')
lldpPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortID.setStatus('current')
if mibBuilder.loadTexts: lldpPortID.setDescription('LLDP Port ID')
lldpPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortDescription.setStatus('current')
if mibBuilder.loadTexts: lldpPortDescription.setDescription('LLDP Port Description; read from agent on module')
lldpSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpSystemName.setStatus('current')
if mibBuilder.loadTexts: lldpSystemName.setDescription('LLDP System Name; read from agent on module')
lldpSystemDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpSystemDescription.setStatus('current')
if mibBuilder.loadTexts: lldpSystemDescription.setDescription('LLDP System Description; read from agent on module')
lldpSystemCapabilityList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpSystemCapabilityList.setStatus('current')
if mibBuilder.loadTexts: lldpSystemCapabilityList.setDescription('LLDP System Capabilities; refereced from SYSCAP')
lldpSystemOperationList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpSystemOperationList.setStatus('current')
if mibBuilder.loadTexts: lldpSystemOperationList.setDescription('LLDP Enabled Capabilities list; reference from SYSOPER')
lldpManagementType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 20), FspR7LLDPManagementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpManagementType.setStatus('current')
if mibBuilder.loadTexts: lldpManagementType.setDescription('LLDP Management type; read from agent on module')
lldpManagementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 21), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpManagementAddress.setStatus('current')
if mibBuilder.loadTexts: lldpManagementAddress.setDescription('LLDP Management Address; read from agent on module')
lldpManagementInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 22), FspR7LLDPManagementInterface()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpManagementInterface.setStatus('current')
if mibBuilder.loadTexts: lldpManagementInterface.setDescription('LLDP Interface type; read from agent on module')
lldpManagementReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpManagementReference.setStatus('current')
if mibBuilder.loadTexts: lldpManagementReference.setDescription('LLDP Management Interface number; read from agent on module')
lldpManagementObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 24), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpManagementObjectID.setStatus('current')
if mibBuilder.loadTexts: lldpManagementObjectID.setDescription('LLDP OIDs; read from agent on module')
endOfFacilityMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFacilityMgmt.setStatus('current')
if mibBuilder.loadTexts: endOfFacilityMgmt.setDescription('')
linkTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1), )
if mibBuilder.loadTexts: linkTable.setStatus('current')
if mibBuilder.loadTexts: linkTable.setDescription('linkTable')
linkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: linkEntry.setStatus('current')
if mibBuilder.loadTexts: linkEntry.setDescription('Entry of linkTable')
linkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkRowStatus.setStatus('current')
if mibBuilder.loadTexts: linkRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
linkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkType.setStatus('current')
if mibBuilder.loadTexts: linkType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
linkAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAdmin.setStatus('current')
if mibBuilder.loadTexts: linkAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
linkAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAlias.setStatus('current')
if mibBuilder.loadTexts: linkAlias.setDescription('User Applied Descriptor')
linkAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAuthString.setStatus('current')
if mibBuilder.loadTexts: linkAuthString.setDescription('OSPF Authentication Key/String depending on Authentication Type')
linkConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 6), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkConnector.setStatus('current')
if mibBuilder.loadTexts: linkConnector.setDescription('Connector Type')
linkProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 7), FspR7NoYes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProxyArp.setStatus('current')
if mibBuilder.loadTexts: linkProxyArp.setDescription('If enabled then ARP requests for FENDIP (coming in on another interface in the same subnet as FENDIP) will be replied too.')
linkOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 8), FspR7OspfMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkOspf.setStatus('current')
if mibBuilder.loadTexts: linkOspf.setDescription('OSPF Routing (Dynamic)')
linkBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 9), FspR7Baund()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkBaud.setStatus('current')
if mibBuilder.loadTexts: linkBaud.setDescription('Baud rate of the serial interface')
linkAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 10), FspR7CpAuthType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAuthType.setStatus('current')
if mibBuilder.loadTexts: linkAuthType.setDescription('OSPF Authentication Type')
linkIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 11), FspR7IpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkIpType.setStatus('current')
if mibBuilder.loadTexts: linkIpType.setDescription('Type of IP configuration')
linkMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkMetric.setStatus('current')
if mibBuilder.loadTexts: linkMetric.setDescription('Routing Metric')
linkAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 13), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAreaAid.setStatus('current')
if mibBuilder.loadTexts: linkAreaAid.setDescription('OSPF Area AID')
linkEccAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkEccAid.setStatus('current')
if mibBuilder.loadTexts: linkEccAid.setDescription('Address Identifier of ECC Entity.')
linkNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkNearEndIp.setStatus('current')
if mibBuilder.loadTexts: linkNearEndIp.setDescription('IP Address assigned to PPP Termination Point on Near-End NE. Defaults to System IP address')
linkFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkFarEndIp.setStatus('current')
if mibBuilder.loadTexts: linkFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default is set by NE System on LINK establishment if FENDIPACPT = Y')
linkBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 13702))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkBitrate.setStatus('current')
if mibBuilder.loadTexts: linkBitrate.setDescription('Maximum provisioned bit rate for PPP/IP Link of transmitter for an ECC')
linkParityBit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 18), FspR7ParityBit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkParityBit.setStatus('current')
if mibBuilder.loadTexts: linkParityBit.setDescription('Parity Bit Settings')
linkSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 19), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: linkSecondaryStates.setDescription('Secondary States')
linkOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 20), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOperState.setStatus('current')
if mibBuilder.loadTexts: linkOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
linkNendIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNendIpMonitor.setStatus('current')
if mibBuilder.loadTexts: linkNendIpMonitor.setDescription('IP address assigned to Near-End NE')
linkValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkValidSigTimer.setStatus('current')
if mibBuilder.loadTexts: linkValidSigTimer.setDescription('AINS state signal quality soak time remaining until transition to IS.')
linkIPv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 23), FspR7IPv6Type()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkIPv6Type.setStatus('current')
if mibBuilder.loadTexts: linkIPv6Type.setDescription('Type of IPv6 configuration')
linkNendIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 24), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkNendIPv6.setStatus('current')
if mibBuilder.loadTexts: linkNendIPv6.setDescription('IPv6 Address assigned to PPP Termination Point on Near-End NE.')
linkFendIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFendIPv6.setStatus('current')
if mibBuilder.loadTexts: linkFendIPv6.setDescription('IPv6 Address assigned to PPP Termination Point on Far-End NE.')
linkMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1280, 1500))).setUnits('Byte').setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkMtu.setStatus('current')
if mibBuilder.loadTexts: linkMtu.setDescription('Maximum Transmission Unit')
linkHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkHelloInterval.setStatus('current')
if mibBuilder.loadTexts: linkHelloInterval.setDescription('Hello Interval')
linkDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkDeadInterval.setStatus('current')
if mibBuilder.loadTexts: linkDeadInterval.setDescription('Dead Interval')
linkRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: linkRetransmitInterval.setDescription('Retransmit Interval')
linkNendLogicalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 30), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNendLogicalIpAddr.setStatus('current')
if mibBuilder.loadTexts: linkNendLogicalIpAddr.setDescription('Near End Logical Interface IP')
linkFendLogicalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 31), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkFendLogicalIpAddr.setStatus('current')
if mibBuilder.loadTexts: linkFendLogicalIpAddr.setDescription('Far End Logical Interface IP')
endOfLinkTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLinkTable.setStatus('current')
if mibBuilder.loadTexts: endOfLinkTable.setDescription('')
scTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3), )
if mibBuilder.loadTexts: scTable.setStatus('current')
if mibBuilder.loadTexts: scTable.setDescription('scTable')
scEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: scEntry.setStatus('current')
if mibBuilder.loadTexts: scEntry.setDescription('Entry of scTable')
scRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scRowStatus.setStatus('current')
if mibBuilder.loadTexts: scRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
scType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scType.setStatus('current')
if mibBuilder.loadTexts: scType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
scAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAdmin.setStatus('current')
if mibBuilder.loadTexts: scAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
scAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAlias.setStatus('current')
if mibBuilder.loadTexts: scAlias.setDescription('User Applied Descriptor')
scAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAuthString.setStatus('current')
if mibBuilder.loadTexts: scAuthString.setDescription('OSPF Authentication Key/String depending on Authentication Type')
scConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 6), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scConnector.setStatus('current')
if mibBuilder.loadTexts: scConnector.setDescription('Connector Type')
scOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 7), FspR7OspfMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scOspf.setStatus('current')
if mibBuilder.loadTexts: scOspf.setDescription('OSPF Routing (Dynamic)')
scAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 8), FspR7CpAuthType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAuthType.setStatus('current')
if mibBuilder.loadTexts: scAuthType.setDescription('OSPF Authentication Type')
scIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 9), FspR7IpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIpType.setStatus('current')
if mibBuilder.loadTexts: scIpType.setDescription('Type of IP configuration')
scMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scMetric.setStatus('current')
if mibBuilder.loadTexts: scMetric.setDescription('Routing Metric')
scAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 11), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAreaAid.setStatus('current')
if mibBuilder.loadTexts: scAreaAid.setDescription('OSPF Area AID')
scAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 12), FspR7AlsMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAlsMode.setStatus('current')
if mibBuilder.loadTexts: scAlsMode.setDescription('Determines the reaction in backward direction in response to a LOS\n        on the same Interface: on a Network Interface connected to the DWDM\n        this is a matter of laser safety')
scSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 13), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scSigDegThresReceiver.setStatus('current')
if mibBuilder.loadTexts: scSigDegThresReceiver.setDescription('Signal Degrade Threshold on Receiver. Reported as ATTRMT-SDHT to far end.')
scAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 14), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: scAutonegotiation.setDescription('Auto Negotiation for the data rate')
scPhysIfBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 15), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPhysIfBaseType.setStatus('current')
if mibBuilder.loadTexts: scPhysIfBaseType.setDescription('The type of the physical interface. Will be nedded for LANIP interfaces to deliver information about the BASE facility type.')
scBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 16), FspR7Bitrate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scBitrate.setStatus('current')
if mibBuilder.loadTexts: scBitrate.setDescription('Provisioned data rate')
scConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 17), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scConnectionType.setStatus('current')
if mibBuilder.loadTexts: scConnectionType.setDescription('Connectivity Parameters for Facilities')
scChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 18), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scChannel.setStatus('current')
if mibBuilder.loadTexts: scChannel.setDescription('Channel')
scDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 19), EthDuplexMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scDuplex.setStatus('current')
if mibBuilder.loadTexts: scDuplex.setDescription('Duplex Mode (provision), available when Auto Negoiation is Disable (AUTONEG=DISABLE)')
scFarEndTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFarEndTid.setStatus('current')
if mibBuilder.loadTexts: scFarEndTid.setDescription('Far End Target ID')
scFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 21), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFiberType.setStatus('current')
if mibBuilder.loadTexts: scFiberType.setDescription('Fiber of Optical Interface - Provision, Reference to FIBER__INVENTORY')
scTrmtFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 22), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: scTrmtFrequency.setStatus('current')
if mibBuilder.loadTexts: scTrmtFrequency.setDescription('Frequency of Optical Interface (unit: nm)')
scAttGradientTh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 990))).setUnits('0.1 dB/min').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAttGradientTh.setStatus('current')
if mibBuilder.loadTexts: scAttGradientTh.setDescription("Attenuation Gradient Threshold on Receive Fiber. Applies to both\n        TRMT and RCV directions; but threshold violation is reported for\n        each direction separately by the 'tapping' alarms: INTRUDE-RCV\n        and INTRUDE-TRMT.")
scIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 24), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIpAddr.setStatus('current')
if mibBuilder.loadTexts: scIpAddr.setDescription('IP Address assigned to LAN IP Interface')
scTrmtWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 25), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: scTrmtWavelength.setStatus('current')
if mibBuilder.loadTexts: scTrmtWavelength.setDescription('Wavelength of Optical Interface (unit: nm)')
scLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 26), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scLanAid.setStatus('current')
if mibBuilder.loadTexts: scLanAid.setDescription('AID of LAN')
scIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 27), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIpMask.setStatus('current')
if mibBuilder.loadTexts: scIpMask.setDescription('IP MASK assigned to LAN IP Interface')
scDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 28), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: scDataLayerPmReset.setDescription('Reset data-layer Performance registers')
scPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scPriority.setStatus('current')
if mibBuilder.loadTexts: scPriority.setDescription('Priority')
scReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 30), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scReach.setStatus('current')
if mibBuilder.loadTexts: scReach.setDescription('Reach')
scSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 31), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: scSecondaryStates.setDescription('Secondary States')
scOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 32), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scOperState.setStatus('current')
if mibBuilder.loadTexts: scOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
scIpAddrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 33), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIpAddrMonitor.setStatus('current')
if mibBuilder.loadTexts: scIpAddrMonitor.setDescription('IP address assigned to LAN IP Interface')
scMonitoredDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 34), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scMonitoredDuplexMode.setStatus('current')
if mibBuilder.loadTexts: scMonitoredDuplexMode.setDescription('Duplex Mode (monitor), available when Auto Negoiation is Enable (AUTONEG=ENABLE)')
scMonitoredBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 35), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: scMonitoredBitrate.setStatus('current')
if mibBuilder.loadTexts: scMonitoredBitrate.setDescription('Bit Rate read from card, - relevant to- auto clock')
scIpMaskMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIpMaskMonitor.setStatus('current')
if mibBuilder.loadTexts: scIpMaskMonitor.setDescription('IP mask assigned to LAN IP Interface')
scFarEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 37), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFarEndPort.setStatus('current')
if mibBuilder.loadTexts: scFarEndPort.setDescription('Far End DCN Port (SC-*)')
scFendTransportTermPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 38), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFendTransportTermPoint.setStatus('current')
if mibBuilder.loadTexts: scFendTransportTermPoint.setDescription('Far End Transport Layer Termination Point (OL-* for WDM)')
scFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 39), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFarEndIp.setStatus('current')
if mibBuilder.loadTexts: scFarEndIp.setDescription('Far End IP Address as seen by the neighbor discovery protocol')
scFarEndSigDegThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 40), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: scFarEndSigDegThres.setStatus('current')
if mibBuilder.loadTexts: scFarEndSigDegThres.setDescription('Far End Signal Degrade Threshold')
scValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: scValidSigTimer.setStatus('current')
if mibBuilder.loadTexts: scValidSigTimer.setDescription('AINS state signal quality soak time remaining until transition to IS.')
scIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 42), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIPv6.setStatus('current')
if mibBuilder.loadTexts: scIPv6.setDescription('IPv6 Address')
scIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIPv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: scIPv6PrefixLen.setDescription('IPv6 Subnet Prefix Length')
scIPv6LinkLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 44), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIPv6LinkLocal.setStatus('current')
if mibBuilder.loadTexts: scIPv6LinkLocal.setDescription('IPv6 Link Local Address. This address is derived from MAC')
scIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 45), FspR7IpMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIpMode.setStatus('current')
if mibBuilder.loadTexts: scIpMode.setDescription('IP Mode of Operation either IPv4 only or IPv4 and IPv6. When operation supports IPv6, it is used for addresses external to the network.')
scGatewayProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 46), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scGatewayProxyArp.setStatus('current')
if mibBuilder.loadTexts: scGatewayProxyArp.setDescription('Gateway node serves as an ARP proxy')
scMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1280, 1500))).setUnits('Byte').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scMtu.setStatus('current')
if mibBuilder.loadTexts: scMtu.setDescription('Maximum Transmission Unit')
scHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scHelloInterval.setStatus('current')
if mibBuilder.loadTexts: scHelloInterval.setDescription('Hello Interval')
scDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scDeadInterval.setStatus('current')
if mibBuilder.loadTexts: scDeadInterval.setDescription('Dead Interval')
scRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: scRetransmitInterval.setDescription('Retransmit Interval')
scDhcpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 51), FspR7DhcpServer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scDhcpServer.setStatus('current')
if mibBuilder.loadTexts: scDhcpServer.setDescription('Determines DHCP Server/Client mode of the NCU')
scDhcpStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 52), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scDhcpStartAddr.setStatus('current')
if mibBuilder.loadTexts: scDhcpStartAddr.setDescription('DHCP Start Address')
scDhcpStopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 53), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scDhcpStopAddr.setStatus('current')
if mibBuilder.loadTexts: scDhcpStopAddr.setDescription('DHCP Stop Address')
scDhcpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 54), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scDhcpMask.setStatus('current')
if mibBuilder.loadTexts: scDhcpMask.setDescription('DHCP Mask')
scFrcdLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 55), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scFrcdLogin.setStatus('current')
if mibBuilder.loadTexts: scFrcdLogin.setDescription('Directs web browser to the NED login page when enabled and user is not currently logged in.')
scMdix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 56), FspR7InterfaceCrossover()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scMdix.setStatus('current')
if mibBuilder.loadTexts: scMdix.setDescription('Medium-dependent interface crossover')
endOfScTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfScTable.setStatus('current')
if mibBuilder.loadTexts: endOfScTable.setDescription('')
lanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5), )
if mibBuilder.loadTexts: lanTable.setStatus('current')
if mibBuilder.loadTexts: lanTable.setDescription('lanTable')
lanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: lanEntry.setStatus('current')
if mibBuilder.loadTexts: lanEntry.setDescription('Entry of lanTable')
lanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanRowStatus.setStatus('current')
if mibBuilder.loadTexts: lanRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
lanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanType.setStatus('current')
if mibBuilder.loadTexts: lanType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
lanAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAdmin.setStatus('current')
if mibBuilder.loadTexts: lanAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
lanAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAlias.setStatus('current')
if mibBuilder.loadTexts: lanAlias.setDescription('User Applied Descriptor')
lanAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAuthString.setStatus('current')
if mibBuilder.loadTexts: lanAuthString.setDescription('OSPF Authentication Key/String depending on Authentication Type')
lanOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 6), FspR7OspfMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanOspf.setStatus('current')
if mibBuilder.loadTexts: lanOspf.setDescription('OSPF Routing (Dynamic)')
lanAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 7), FspR7CpAuthType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAuthType.setStatus('current')
if mibBuilder.loadTexts: lanAuthType.setDescription('OSPF Authentication Type')
lanIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 8), FspR7IpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIpType.setStatus('current')
if mibBuilder.loadTexts: lanIpType.setDescription('Type of IP configuration')
lanMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanMetric.setStatus('current')
if mibBuilder.loadTexts: lanMetric.setDescription('Routing Metric')
lanAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAreaAid.setStatus('current')
if mibBuilder.loadTexts: lanAreaAid.setDescription('OSPF Area AID')
lanIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIpAddr.setStatus('current')
if mibBuilder.loadTexts: lanIpAddr.setDescription('IP Address assigned to LAN IP Interface')
lanIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIpMask.setStatus('current')
if mibBuilder.loadTexts: lanIpMask.setDescription('IP MASK assigned to LAN IP Interface')
lanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanPriority.setStatus('current')
if mibBuilder.loadTexts: lanPriority.setDescription('Priority')
lanLanMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanLanMembers.setStatus('current')
if mibBuilder.loadTexts: lanLanMembers.setDescription("List of Entity AID's (modules, ports) belonging to this LAN")
lanSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 15), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: lanSecondaryStates.setDescription('Secondary States')
lanOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 16), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanOperState.setStatus('current')
if mibBuilder.loadTexts: lanOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
lanIpAddrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIpAddrMonitor.setStatus('current')
if mibBuilder.loadTexts: lanIpAddrMonitor.setDescription('IP address assigned to LAN IP Interface')
lanIpMaskMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIpMaskMonitor.setStatus('current')
if mibBuilder.loadTexts: lanIpMaskMonitor.setDescription('IP mask assigned to LAN IP Interface')
lanValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: lanValidSigTimer.setStatus('current')
if mibBuilder.loadTexts: lanValidSigTimer.setDescription('AINS state signal quality soak time remaining until transition to IS.')
lanIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 20), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIPv6.setStatus('current')
if mibBuilder.loadTexts: lanIPv6.setDescription('IPv6 Address')
lanIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIPv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: lanIPv6PrefixLen.setDescription('IPv6 Subnet Prefix Length')
lanIPv6LinkLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIPv6LinkLocal.setStatus('current')
if mibBuilder.loadTexts: lanIPv6LinkLocal.setDescription('IPv6 Link Local Address. This address is derived from MAC')
lanIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 23), FspR7IpMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIpMode.setStatus('current')
if mibBuilder.loadTexts: lanIpMode.setDescription('IP Mode of Operation either IPv4 only or IPv4 and IPv6. When operation supports IPv6, it is used for addresses external to the network.')
lanMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1280, 1500))).setUnits('Byte').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanMtu.setStatus('current')
if mibBuilder.loadTexts: lanMtu.setDescription('Maximum Transmission Unit')
lanHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanHelloInterval.setStatus('current')
if mibBuilder.loadTexts: lanHelloInterval.setDescription('Hello Interval')
lanDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanDeadInterval.setStatus('current')
if mibBuilder.loadTexts: lanDeadInterval.setDescription('Dead Interval')
lanRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: lanRetransmitInterval.setDescription('Retransmit Interval')
lanDhcpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 28), FspR7DhcpServer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanDhcpServer.setStatus('current')
if mibBuilder.loadTexts: lanDhcpServer.setDescription('Determines DHCP Server/Client mode of the NCU')
lanDhcpStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 29), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanDhcpStartAddr.setStatus('current')
if mibBuilder.loadTexts: lanDhcpStartAddr.setDescription('DHCP Start Address')
lanDhcpStopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 30), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanDhcpStopAddr.setStatus('current')
if mibBuilder.loadTexts: lanDhcpStopAddr.setDescription('DHCP Stop Address')
lanDhcpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 31), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanDhcpMask.setStatus('current')
if mibBuilder.loadTexts: lanDhcpMask.setDescription('DHCP Mask')
lanFrcdLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 32), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanFrcdLogin.setStatus('current')
if mibBuilder.loadTexts: lanFrcdLogin.setDescription('Directs web browser to the NED login page when enabled and user is not currently logged in.')
endOfLanTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLanTable.setStatus('current')
if mibBuilder.loadTexts: endOfLanTable.setDescription('')
eccTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7), )
if mibBuilder.loadTexts: eccTable.setStatus('current')
if mibBuilder.loadTexts: eccTable.setDescription('eccTable (Embedded Communication Channel)')
eccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: eccEntry.setStatus('current')
if mibBuilder.loadTexts: eccEntry.setDescription('Entry of eccTable')
eccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccRowStatus.setStatus('current')
if mibBuilder.loadTexts: eccRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
eccType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccType.setStatus('current')
if mibBuilder.loadTexts: eccType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
eccAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccAdmin.setStatus('current')
if mibBuilder.loadTexts: eccAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
eccAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccAlias.setStatus('current')
if mibBuilder.loadTexts: eccAlias.setDescription('User Applied Descriptor')
eccConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 5), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccConnectionType.setStatus('current')
if mibBuilder.loadTexts: eccConnectionType.setDescription('Connectivity Parameters for Facilities')
eccLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccLanAid.setStatus('current')
if mibBuilder.loadTexts: eccLanAid.setDescription('AID of LAN')
eccExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccExternalVid.setStatus('current')
if mibBuilder.loadTexts: eccExternalVid.setDescription('External VID')
eccpppIpLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccpppIpLinkAid.setStatus('current')
if mibBuilder.loadTexts: eccpppIpLinkAid.setDescription('Address Identifier of PPPIP LINK Entity.')
eccMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 9), Unsigned32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: eccMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: eccMaxDataRate.setDescription('Maximum Embedded Communication Channel Bitrate')
eccProtAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 10), FspR7NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccProtAvailability.setStatus('current')
if mibBuilder.loadTexts: eccProtAvailability.setDescription('ECC Protection Availability')
eccSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 11), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: eccSecondaryStates.setDescription('Secondary States')
eccConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 12), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccConnState.setStatus('current')
if mibBuilder.loadTexts: eccConnState.setDescription('Connection State')
eccOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 13), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccOperState.setStatus('current')
if mibBuilder.loadTexts: eccOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
eccValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: eccValidSigTimer.setStatus('current')
if mibBuilder.loadTexts: eccValidSigTimer.setDescription('AINS state signal quality soak time remaining until transition to IS.')
eccGccUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 15), FspR7GccUsage()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccGccUsage.setStatus('current')
if mibBuilder.loadTexts: eccGccUsage.setDescription('GCC Usage')
endOfEccTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEccTable.setStatus('current')
if mibBuilder.loadTexts: endOfEccTable.setDescription('')
endOfDcnMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDcnMgmt.setStatus('current')
if mibBuilder.loadTexts: endOfDcnMgmt.setDescription('')
opticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1), )
if mibBuilder.loadTexts: opticalMuxTable.setStatus('current')
if mibBuilder.loadTexts: opticalMuxTable.setDescription('opticalTable')
opticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: opticalMuxEntry.setStatus('current')
if mibBuilder.loadTexts: opticalMuxEntry.setDescription('Entry of opticalTable')
opticalMuxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxRowStatus.setStatus('current')
if mibBuilder.loadTexts: opticalMuxRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
opticalMuxConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 2), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxConnectionType.setStatus('current')
if mibBuilder.loadTexts: opticalMuxConnectionType.setDescription('Connectivity Parameters for Facilities')
opticalMuxChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 3), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxChannelsNumber.setStatus('current')
if mibBuilder.loadTexts: opticalMuxChannelsNumber.setDescription('Number of channels supported by an entity')
opticalMuxPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(115, 138))).setUnits('0.2 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxPumpPower.setStatus('current')
if mibBuilder.loadTexts: opticalMuxPumpPower.setDescription('Total raman pump power')
opticalMuxInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 5), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxInhibitSwitchToWork.setStatus('current')
if mibBuilder.loadTexts: opticalMuxInhibitSwitchToWork.setDescription('Inhibit Switch to Working. Inhibition blocks a switchInhibit Switch to Protection facility. Inhibition blocksInhibit Switch to Working. Inhibition blocks a switch\n        switch to the Protection facility (protection path).Inhibit Switch to Protection facility. Inhibition blocks\n        switch to the Protection facility (protection path).\n        to the Working facility (working path).\n        to the Working facility (working path).\n        Applicable only for the Working facility in ACT state.\n        Applicable only for the Working facility in ACT state.\n        Applicable for the Protection facility in ACT state.\n        Applicable for the Protection facility in ACT state.')
opticalMuxForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 6), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxForceLaserOn.setStatus('current')
if mibBuilder.loadTexts: opticalMuxForceLaserOn.setDescription('Laser Forced On')
opticalMuxAseTabCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 7), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxAseTabCreation.setStatus('current')
if mibBuilder.loadTexts: opticalMuxAseTabCreation.setDescription('ASE Table creation in process')
opticalMuxTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 8), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxTransmitFrequency.setStatus('current')
if mibBuilder.loadTexts: opticalMuxTransmitFrequency.setDescription('Frequency of Optical Interface (unit: nm)')
opticalMuxMultiplexLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 9), FspR7OpticalMultiplexLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxMultiplexLevel.setStatus('current')
if mibBuilder.loadTexts: opticalMuxMultiplexLevel.setDescription('Optical Multiplex Level')
opticalMuxOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: opticalMuxOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
opticalMuxInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 11), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxInitiateEqualization.setStatus('current')
if mibBuilder.loadTexts: opticalMuxInitiateEqualization.setDescription('Initiate Equalization')
opticalMuxConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 12), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxConnectorType.setStatus('current')
if mibBuilder.loadTexts: opticalMuxConnectorType.setDescription('Connector Type')
opticalMuxFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 13), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxFiberType.setStatus('current')
if mibBuilder.loadTexts: opticalMuxFiberType.setDescription('Fiber of Optical Interface - Provision, Reference to FIBER__INVENTORY')
opticalMuxTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 0))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxTilt.setStatus('current')
if mibBuilder.loadTexts: opticalMuxTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
opticalMuxOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 50))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOscOpticalSetpoint.setStatus('current')
if mibBuilder.loadTexts: opticalMuxOscOpticalSetpoint.setDescription('Sets the OSC optical power')
opticalMuxOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOffset.setStatus('current')
if mibBuilder.loadTexts: opticalMuxOffset.setDescription('Sets the offset for the mean optical power for power equalization in ROADM')
opticalMuxSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 17), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: opticalMuxSwitchCommand.setDescription('The switch command action for this facility. A command resulting\n        in a switch event will also cause a change of the facility secondary state\n        and a corresponding condition. Addressed by this command is the active port,\n        the port to switch away from. Since this is a manual switch command, it will\n        not switch if other port suffers from a signalfailure or a signal degrade.')
opticalMuxTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 18), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: opticalMuxTransmitChannel.setDescription('Channel')
opticalMuxBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 19), FspR7OpticalBand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxBandProvision.setStatus('current')
if mibBuilder.loadTexts: opticalMuxBandProvision.setDescription('Band Provision. Reference to BAND__INVENTORY.')
opticalMuxAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 20), FspR7AlsMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxAlsMode.setStatus('current')
if mibBuilder.loadTexts: opticalMuxAlsMode.setDescription('Determines the reaction in backward direction in response to a LOS\n        on the same Interface: on a Network Interface connected to the DWDM\n        this is a matter of laser safety')
opticalMuxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 21), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxType.setStatus('current')
if mibBuilder.loadTexts: opticalMuxType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
opticalMuxAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 990))).setUnits('0.1 dB/min').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxAttenuationGradient.setStatus('current')
if mibBuilder.loadTexts: opticalMuxAttenuationGradient.setDescription("Attenuation Gradient Threshold on Receive Fiber. Applies to both TRMT and RCV directions; but threshold violation is reported for each direction separately by the 'tapping' alarms: INTRUDE-RCV and INTRUDE-TRMT.")
opticalMuxTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 23), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxTransmitWavelength.setStatus('current')
if mibBuilder.loadTexts: opticalMuxTransmitWavelength.setDescription('Wavelength of Optical Interface (unit: nm)')
opticalMuxInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 24), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxInhibitSwitchToProt.setStatus('current')
if mibBuilder.loadTexts: opticalMuxInhibitSwitchToProt.setDescription('Inhibit Switch to Working. Inhibition blocks a switchInhibit Switch to Protection facility. Inhibition blocksInhibit Switch to Working. Inhibition blocks a switch')
opticalMuxTrmtChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 25), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxTrmtChannel.setStatus('current')
if mibBuilder.loadTexts: opticalMuxTrmtChannel.setDescription('Derived Transmit optical channel')
opticalMuxVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxVariableGain.setStatus('current')
if mibBuilder.loadTexts: opticalMuxVariableGain.setDescription('Variable Gain of EDFA')
opticalMuxSumTransmited = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxSumTransmited.setStatus('current')
if mibBuilder.loadTexts: opticalMuxSumTransmited.setDescription('Sum of Transmitted Optical Channels Provisioned')
opticalMuxRcvChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 28), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxRcvChannel.setStatus('current')
if mibBuilder.loadTexts: opticalMuxRcvChannel.setDescription('Derived Rcv optical channel')
opticalMuxAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 29), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxAdmin.setStatus('current')
if mibBuilder.loadTexts: opticalMuxAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
opticalMuxTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 30), FspR7OtdrPeriod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxTimePeriod.setStatus('current')
if mibBuilder.loadTexts: opticalMuxTimePeriod.setDescription('NONE - OTDR measurement disabled otherwise the OTDR duration in minutes.')
opticalMuxSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 31), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxSigDegThresReceiver.setStatus('current')
if mibBuilder.loadTexts: opticalMuxSigDegThresReceiver.setDescription('Signal Degrade Threshold on Receiver. Reported as ATTRMT-SDHT to far end.')
opticalMuxChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 32), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxChannelsProvision.setStatus('current')
if mibBuilder.loadTexts: opticalMuxChannelsProvision.setDescription('Number of channels supported by an entity')
opticalMuxAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 33), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxAlias.setStatus('current')
if mibBuilder.loadTexts: opticalMuxAlias.setDescription('User Applied Descriptor')
opticalMuxChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 34), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: opticalMuxChannelSpacing.setDescription('ITU Grid channel spacing')
opticalMuxDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 35), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDataLayerPmReset.setDescription('Reset data-layer Performance registers')
opticalMuxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 36), FspR7Gain()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxGain.setStatus('current')
if mibBuilder.loadTexts: opticalMuxGain.setDescription('Gain')
opticalMuxSignalDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 37), FspR7SignalDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxSignalDirection.setStatus('current')
if mibBuilder.loadTexts: opticalMuxSignalDirection.setDescription('Signal Direction')
opticalMuxEdfaPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 38), FspR7EdfaOutputPowerRating()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxEdfaPwrOut.setStatus('current')
if mibBuilder.loadTexts: opticalMuxEdfaPwrOut.setDescription('Optical Output Power Rating - Provision')
opticalMuxVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: opticalMuxVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
opticalMuxFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 40), FspR7FiberBrand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxFiberBrand.setStatus('current')
if mibBuilder.loadTexts: opticalMuxFiberBrand.setDescription('Brand of fiber present in the fiber plant')
opticalMuxStages = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 41), FspR7Stages()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxStages.setStatus('current')
if mibBuilder.loadTexts: opticalMuxStages.setDescription('Number of Stages')
opticalMuxTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 42), FspR7TiltSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxTiltSet.setStatus('current')
if mibBuilder.loadTexts: opticalMuxTiltSet.setDescription('Tilt setting as discrete values versus a range')
opticalMuxForceFwdAsePilotOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 43), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxForceFwdAsePilotOn.setStatus('current')
if mibBuilder.loadTexts: opticalMuxForceFwdAsePilotOn.setDescription('Force the BWD Raman pilot on to allow building of FWD Raman ASE Table')
opticalMuxSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 44), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: opticalMuxSecondaryStates.setDescription('Secondary States')
opticalMuxConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 45), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxConnState.setStatus('current')
if mibBuilder.loadTexts: opticalMuxConnState.setDescription('Connection State')
opticalMuxOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 46), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxOperState.setStatus('current')
if mibBuilder.loadTexts: opticalMuxOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
opticalMuxProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 47), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxProtectionRole.setStatus('current')
if mibBuilder.loadTexts: opticalMuxProtectionRole.setDescription('Path label Working or Protect')
opticalMuxFarEndSigDegThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 48), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxFarEndSigDegThres.setStatus('current')
if mibBuilder.loadTexts: opticalMuxFarEndSigDegThres.setDescription('Far End Signal Degrade Threshold')
opticalMuxMaxRamanGainMon = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 49), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxMaxRamanGainMon.setStatus('current')
if mibBuilder.loadTexts: opticalMuxMaxRamanGainMon.setDescription('Maximum Raman gain monitored from Raman ASE table build data')
opticalMuxValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxValidSigTimer.setStatus('current')
if mibBuilder.loadTexts: opticalMuxValidSigTimer.setDescription('AINS state signal quality soak time remaining until transition to IS.')
opticalMuxGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 51), FspR7GainRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxGainRange.setStatus('current')
if mibBuilder.loadTexts: opticalMuxGainRange.setDescription('EDFA gain range to provision')
opticalMuxPpc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-220, 150))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxPpc.setStatus('current')
if mibBuilder.loadTexts: opticalMuxPpc.setDescription('Target output optical power for each channel.')
opticalMuxOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOffsetHigh.setStatus('current')
if mibBuilder.loadTexts: opticalMuxOffsetHigh.setDescription('Sets the high level offset for power equalization in CCM')
opticalMuxOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOffsetLow.setStatus('current')
if mibBuilder.loadTexts: opticalMuxOffsetLow.setDescription('Sets the low level offset for power equalization in CCM')
opticalMuxOptUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 55), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxOptUpdate.setStatus('current')
if mibBuilder.loadTexts: opticalMuxOptUpdate.setDescription('This parameter is used to operate/trigger OPT PM update; it triggers the entity to update its current OPT PM value, which can be retrieved via GET function.')
opticalMuxChannelRangeProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 56), FspR7ChannelRangeInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxChannelRangeProvision.setStatus('current')
if mibBuilder.loadTexts: opticalMuxChannelRangeProvision.setDescription('Channel Range')
opticalMuxNearEndProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 57), FspR7ProtectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxNearEndProtectionState.setStatus('current')
if mibBuilder.loadTexts: opticalMuxNearEndProtectionState.setDescription('Protection state at near end')
opticalMuxFarEndProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 58), FspR7ProtectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxFarEndProtectionState.setStatus('current')
if mibBuilder.loadTexts: opticalMuxFarEndProtectionState.setDescription('Protection state at far end')
opticalMuxVariableGainNtoR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxVariableGainNtoR.setStatus('current')
if mibBuilder.loadTexts: opticalMuxVariableGainNtoR.setDescription('Variable Gain of EDFA (N to R)')
opticalMuxVariableGainNtoC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 60), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxVariableGainNtoC.setStatus('current')
if mibBuilder.loadTexts: opticalMuxVariableGainNtoC.setDescription('Variable Gain of EDFA (N to C)')
opticalMuxVariableGainRtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 61), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxVariableGainRtoN.setStatus('current')
if mibBuilder.loadTexts: opticalMuxVariableGainRtoN.setDescription('Variable Gain of EDFA (R to N)')
opticalMuxVariableGainCtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 62), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxVariableGainCtoN.setStatus('current')
if mibBuilder.loadTexts: opticalMuxVariableGainCtoN.setDescription('Variable Gain of EDFA (C to N)')
endOfOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxTable.setStatus('current')
if mibBuilder.loadTexts: endOfOpticalMuxTable.setDescription('')
endOfOpticalMuxMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxMgmt.setStatus('current')
if mibBuilder.loadTexts: endOfOpticalMuxMgmt.setDescription('')
shelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1), )
if mibBuilder.loadTexts: shelfConnTable.setStatus('current')
if mibBuilder.loadTexts: shelfConnTable.setDescription('shelfConnTable')
shelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"))
if mibBuilder.loadTexts: shelfConnEntry.setStatus('current')
if mibBuilder.loadTexts: shelfConnEntry.setDescription('Entry of shelfConnTable')
shelfConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnRowStatus.setStatus('current')
if mibBuilder.loadTexts: shelfConnRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
shelfConnConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 2), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnConnectionType.setStatus('current')
if mibBuilder.loadTexts: shelfConnConnectionType.setDescription('Connectivity Parameters for Facilities')
shelfConnConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 3), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnConnector.setStatus('current')
if mibBuilder.loadTexts: shelfConnConnector.setDescription('Connector Type')
shelfConnFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 4), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnFiber.setStatus('current')
if mibBuilder.loadTexts: shelfConnFiber.setDescription('Fiber of Optical Interface - Provision, Reference to FIBER__INVENTORY')
shelfConnReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 5), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnReach.setStatus('current')
if mibBuilder.loadTexts: shelfConnReach.setDescription('Reach')
shelfConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 6), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnRate.setStatus('current')
if mibBuilder.loadTexts: shelfConnRate.setDescription('Derived from TYPE and possibly PAYLOAD')
shelfConnAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 7), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnAdmin.setStatus('current')
if mibBuilder.loadTexts: shelfConnAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
shelfConnAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnAlias.setStatus('current')
if mibBuilder.loadTexts: shelfConnAlias.setDescription('User Applied Descriptor')
shelfConnTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: shelfConnTransmitChannel.setDescription('Channel')
shelfConnFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 10), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnFacilityType.setStatus('current')
if mibBuilder.loadTexts: shelfConnFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
shelfConnSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 11), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: shelfConnSecondaryStates.setDescription('Secondary States')
shelfConnOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 12), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnOperState.setStatus('current')
if mibBuilder.loadTexts: shelfConnOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
shelfConnValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnValidSigTimer.setStatus('current')
if mibBuilder.loadTexts: shelfConnValidSigTimer.setDescription('AINS state signal quality soak time remaining until transition to IS.')
shelfConnDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 14), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfConnDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: shelfConnDataLayerPmReset.setDescription('Reset data-layer Performance registers')
shelfConnAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 15), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: shelfConnAutonegotiation.setDescription('Auto Negotiation for the data rate')
shelfConnBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 16), FspR7Bitrate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnBitrate.setStatus('current')
if mibBuilder.loadTexts: shelfConnBitrate.setDescription('Provisioned data rate')
shelfConnDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 17), EthDuplexMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnDuplex.setStatus('current')
if mibBuilder.loadTexts: shelfConnDuplex.setDescription('Duplex Mode (provision), available when Auto Negoiation is Disable (AUTONEG=DISABLE)')
shelfConnMdix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 18), FspR7InterfaceCrossover()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnMdix.setStatus('current')
if mibBuilder.loadTexts: shelfConnMdix.setDescription('Medium-dependent interface crossover')
endOfShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfConnTable.setStatus('current')
if mibBuilder.loadTexts: endOfShelfConnTable.setDescription('')
endOfShelfConnMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfConnMgmt.setStatus('current')
if mibBuilder.loadTexts: endOfShelfConnMgmt.setDescription('')
envPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1), )
if mibBuilder.loadTexts: envPortTable.setStatus('current')
if mibBuilder.loadTexts: envPortTable.setDescription('telemetryPortTable')
envPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: envPortEntry.setStatus('current')
if mibBuilder.loadTexts: envPortEntry.setDescription('Entry of telemetryPortTable')
envPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: envPortRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
envPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 2), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortConnectorType.setStatus('current')
if mibBuilder.loadTexts: envPortConnectorType.setDescription('Connector Type')
envPortTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 3), FspR7TelemetryOutput()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortTelemetry.setStatus('current')
if mibBuilder.loadTexts: envPortTelemetry.setDescription('Telemetry interface output provision')
envPortFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 4), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortFacilityType.setStatus('current')
if mibBuilder.loadTexts: envPortFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
envPortTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortTifAlarmType.setStatus('current')
if mibBuilder.loadTexts: envPortTifAlarmType.setDescription('Telemetry interface alarm type')
envPortTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortTifAlarmMessage.setStatus('current')
if mibBuilder.loadTexts: envPortTifAlarmMessage.setDescription('Telemetry interface alarm message')
envPortInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 7), FspR7InvertTelemetryInputLogic()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortInvertTifInputLogic.setStatus('current')
if mibBuilder.loadTexts: envPortInvertTifInputLogic.setDescription('Change telemetry interface input logic')
endOfEnvPortTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEnvPortTable.setStatus('current')
if mibBuilder.loadTexts: endOfEnvPortTable.setDescription('')
endOfEnvMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEnvMgmt.setStatus('current')
if mibBuilder.loadTexts: endOfEnvMgmt.setDescription('')
containerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1), )
if mibBuilder.loadTexts: containerTable.setStatus('current')
if mibBuilder.loadTexts: containerTable.setDescription('containerTable')
containerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"))
if mibBuilder.loadTexts: containerEntry.setStatus('current')
if mibBuilder.loadTexts: containerEntry.setDescription('Entry of containerTable')
containerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: containerRowStatus.setStatus('current')
if mibBuilder.loadTexts: containerRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
containerAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 2), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerAdmin.setStatus('current')
if mibBuilder.loadTexts: containerAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
containerSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: containerSequenceNumber.setDescription('Sequence number of an individual container within a Virtual Concatenated Group')
containerFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 4), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: containerFacilityType.setStatus('current')
if mibBuilder.loadTexts: containerFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
containerContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerContainer.setStatus('current')
if mibBuilder.loadTexts: containerContainer.setDescription('AID of a logically linked Virtual Channel.')
containerVSContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVSContainer.setStatus('current')
if mibBuilder.loadTexts: containerVSContainer.setDescription('AID of a logically linked Virtual SubChannel.')
containerSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 7), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: containerSecondaryStates.setDescription('Secondary States')
containerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 8), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOperState.setStatus('current')
if mibBuilder.loadTexts: containerOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
endOfContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainerTable.setStatus('current')
if mibBuilder.loadTexts: endOfContainerTable.setDescription('')
endOfContainerMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainerMgmt.setStatus('current')
if mibBuilder.loadTexts: endOfContainerMgmt.setDescription('')
opticalLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1), )
if mibBuilder.loadTexts: opticalLineTable.setStatus('current')
if mibBuilder.loadTexts: opticalLineTable.setDescription('opticalLineTable')
opticalLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineClassName"))
if mibBuilder.loadTexts: opticalLineEntry.setStatus('current')
if mibBuilder.loadTexts: opticalLineEntry.setDescription('Entry of opticalLineTable')
opticalLineRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineRowStatus.setStatus('current')
if mibBuilder.loadTexts: opticalLineRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
opticalLineTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineTxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: opticalLineTxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to\n        transmitter of this interface. If there is loss of signal\n        then line attenuation is -65535. The value -255 will be\n        returned if the value isn't available.")
opticalLineRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineRxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: opticalLineRxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to receiver\n        of this interface. If there is loss of signal then ine\n        attenuation is -65535. The value -255 will be returned if\n        the value isn't available.")
opticalLineAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineAlias.setStatus('current')
if mibBuilder.loadTexts: opticalLineAlias.setDescription('User Applied Descriptor')
opticalLineFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: opticalLineFarEndLocation.setDescription('FEND Location')
opticalLineLaneChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 6), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLaneChannel1.setStatus('current')
if mibBuilder.loadTexts: opticalLineLaneChannel1.setDescription('Lane Channel')
opticalLineLaneChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 7), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLaneChannel2.setStatus('current')
if mibBuilder.loadTexts: opticalLineLaneChannel2.setDescription('Lane Channel')
opticalLineLaneChannel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 8), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLaneChannel3.setStatus('current')
if mibBuilder.loadTexts: opticalLineLaneChannel3.setDescription('Lane Channel')
opticalLineLaneChannel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLaneChannel4.setStatus('current')
if mibBuilder.loadTexts: opticalLineLaneChannel4.setDescription('Lane Channel')
opticalLineLanes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 10), FspR7OpticalLanes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLanes.setStatus('current')
if mibBuilder.loadTexts: opticalLineLanes.setDescription('Number of Optical Transport Lanes in OTLG')
opticalLineChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 11), FspR7ChannelBandwidth()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineChannelBandwith.setStatus('current')
if mibBuilder.loadTexts: opticalLineChannelBandwith.setDescription('Channel Bandwidth')
opticalLineChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 12), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: opticalLineChannelSpacing.setDescription('ITU Grid channel spacing')
opticalLineFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineFacilities.setStatus('current')
if mibBuilder.loadTexts: opticalLineFacilities.setDescription('List of AIDs (CH, VCH or WCH) used by parent entity (Segment, Service, Optical Line or Super Channel)')
opticalLineSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 14), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: opticalLineSecondaryStates.setDescription('Secondary States')
opticalLineConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 15), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineConnState.setStatus('current')
if mibBuilder.loadTexts: opticalLineConnState.setDescription('Connection State')
opticalLineLogicalInterfaceAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLogicalInterfaceAid.setStatus('current')
if mibBuilder.loadTexts: opticalLineLogicalInterfaceAid.setDescription('Logical Interface AID')
opticalLineOwnerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineOwnerAid.setStatus('current')
if mibBuilder.loadTexts: opticalLineOwnerAid.setDescription('Channel Group which is the parent (owner) of the channel')
opticalLineTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 18), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineTransmitWavelength.setStatus('current')
if mibBuilder.loadTexts: opticalLineTransmitWavelength.setDescription('Wavelength of Optical Interface (unit: nm)')
opticalLineTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 19), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineTransmitFrequency.setStatus('current')
if mibBuilder.loadTexts: opticalLineTransmitFrequency.setDescription('Frequency of Optical Interface (unit: nm)')
opticalLineTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 20), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: opticalLineTransmitChannel.setDescription('Channel')
opticalLineFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('km').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineFiberLength.setStatus('current')
if mibBuilder.loadTexts: opticalLineFiberLength.setDescription('Fiber length between 2 remote NEs')
endOfOpticalLineTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalLineTable.setStatus('current')
if mibBuilder.loadTexts: endOfOpticalLineTable.setDescription('')
endOfOpticalLineMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalLineMgmt.setStatus('current')
if mibBuilder.loadTexts: endOfOpticalLineMgmt.setDescription('')
alarmSysTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1), )
if mibBuilder.loadTexts: alarmSysTable.setStatus('current')
if mibBuilder.loadTexts: alarmSysTable.setDescription('alarmSysTable')
alarmSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entitySysShelfNo"), (0, "ADVA-FSPR7-MIB", "entitySysSlotNo"), (0, "ADVA-FSPR7-MIB", "entitySysPortNo"), (0, "ADVA-FSPR7-MIB", "entitySysExtNo"), (0, "ADVA-FSPR7-MIB", "entitySysClassName"), (0, "ADVA-FSPR7-MIB", "alarmSysType"))
if mibBuilder.loadTexts: alarmSysEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSysEntry.setDescription('Entry of alarmSysTable')
alarmSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSysType.setStatus('current')
if mibBuilder.loadTexts: alarmSysType.setDescription('List of all interface conditions.')
alarmSysSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSysSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmSysSeverity.setDescription('Object identifies the current severity of alarm.')
alarmSysAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSysAffect.setStatus('current')
if mibBuilder.loadTexts: alarmSysAffect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmSysTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSysTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmSysTimeStamp.setDescription('Timestamp.')
endOfAlarmSysTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSysTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmSysTable.setDescription('')
alarmSeveritySysTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 3), )
if mibBuilder.loadTexts: alarmSeveritySysTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeveritySysTable.setDescription('alarmSeveritySysTable')
alarmSeveritySysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entitySysShelfNo"), (0, "ADVA-FSPR7-MIB", "entitySysSlotNo"), (0, "ADVA-FSPR7-MIB", "entitySysPortNo"), (0, "ADVA-FSPR7-MIB", "entitySysExtNo"), (0, "ADVA-FSPR7-MIB", "entitySysClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeveritySysType"))
if mibBuilder.loadTexts: alarmSeveritySysEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeveritySysEntry.setDescription('Entry of alarmSeveritySysTable')
alarmSeveritySysType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 3, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeveritySysType.setStatus('current')
if mibBuilder.loadTexts: alarmSeveritySysType.setDescription('Type of severity.')
alarmSeveritySysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 3, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeveritySysValue.setStatus('current')
if mibBuilder.loadTexts: alarmSeveritySysValue.setDescription('Value of severity.')
endOfAlarmSeveritySysTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeveritySysTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmSeveritySysTable.setDescription('')
alarmEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5), )
if mibBuilder.loadTexts: alarmEqptTable.setStatus('current')
if mibBuilder.loadTexts: alarmEqptTable.setDescription('alarmEqptTable')
alarmEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"), (0, "ADVA-FSPR7-MIB", "alarmEqptType"))
if mibBuilder.loadTexts: alarmEqptEntry.setStatus('current')
if mibBuilder.loadTexts: alarmEqptEntry.setDescription('Entry of alarmEqptTable')
alarmEqptType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmEqptType.setStatus('current')
if mibBuilder.loadTexts: alarmEqptType.setDescription('List of all interface conditions.')
alarmEqptSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEqptSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmEqptSeverity.setDescription('Object identifies the current severity of alarm.')
alarmEqptAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEqptAffect.setStatus('current')
if mibBuilder.loadTexts: alarmEqptAffect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmEqptTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEqptTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmEqptTimeStamp.setDescription('Timestamp.')
endOfAlarmEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmEqptTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmEqptTable.setDescription('')
alarmFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7), )
if mibBuilder.loadTexts: alarmFacilityTable.setStatus('current')
if mibBuilder.loadTexts: alarmFacilityTable.setDescription('alarmFacilityTable')
alarmFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "alarmFacilityType"))
if mibBuilder.loadTexts: alarmFacilityEntry.setStatus('current')
if mibBuilder.loadTexts: alarmFacilityEntry.setDescription('Entry of alarmFacilityTable')
alarmFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmFacilityType.setStatus('current')
if mibBuilder.loadTexts: alarmFacilityType.setDescription('List of all interface conditions.')
alarmFacilitySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmFacilitySeverity.setStatus('current')
if mibBuilder.loadTexts: alarmFacilitySeverity.setDescription('Object identifies the current severity of alarm.')
alarmFacilityAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmFacilityAffect.setStatus('current')
if mibBuilder.loadTexts: alarmFacilityAffect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmFacilityTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmFacilityTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmFacilityTimeStamp.setDescription('Timestamp.')
alarmSeverityFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 8), )
if mibBuilder.loadTexts: alarmSeverityFacilityTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityFacilityTable.setDescription('alarmSeverityFacilityTable')
alarmSeverityFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 8, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityFacilityType"))
if mibBuilder.loadTexts: alarmSeverityFacilityEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityFacilityEntry.setDescription('Entry of alarmSeverityFacilityTable')
alarmSeverityFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 8, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityFacilityType.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityFacilityType.setDescription('Type of severity.')
alarmSeverityFacilityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 8, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityFacilityValue.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityFacilityValue.setDescription('Value of severity.')
alarmTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9), )
if mibBuilder.loadTexts: alarmTerminPointTable.setStatus('current')
if mibBuilder.loadTexts: alarmTerminPointTable.setDescription('alarmTerminPointTable')
alarmTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "alarmTerminPointType"))
if mibBuilder.loadTexts: alarmTerminPointEntry.setStatus('current')
if mibBuilder.loadTexts: alarmTerminPointEntry.setDescription('Entry of alarmTerminPointTable')
alarmTerminPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmTerminPointType.setStatus('current')
if mibBuilder.loadTexts: alarmTerminPointType.setDescription('List of all interface conditions.')
alarmTerminPointSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTerminPointSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmTerminPointSeverity.setDescription('Object identifies the current severity of alarm.')
alarmTerminPointAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTerminPointAffect.setStatus('current')
if mibBuilder.loadTexts: alarmTerminPointAffect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmTerminPointTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTerminPointTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmTerminPointTimeStamp.setDescription('Timestamp.')
alarmSeverityTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10), )
if mibBuilder.loadTexts: alarmSeverityTerminPointTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityTerminPointTable.setDescription('alarmSeverityTerminPointTable')
alarmSeverityTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityTerminPointType"))
if mibBuilder.loadTexts: alarmSeverityTerminPointEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityTerminPointEntry.setDescription('Entry of alarmSeverityTerminPointTable')
alarmSeverityTerminPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityTerminPointType.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityTerminPointType.setDescription('Type of severity.')
alarmSeverityTerminPointValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityTerminPointValue.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityTerminPointValue.setDescription('Value of severity.')
alarmExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11), )
if mibBuilder.loadTexts: alarmExternalPortTable.setStatus('current')
if mibBuilder.loadTexts: alarmExternalPortTable.setDescription('alarmExternalPort')
alarmExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"), (0, "ADVA-FSPR7-MIB", "alarmExternalPortType"))
if mibBuilder.loadTexts: alarmExternalPortEntry.setStatus('current')
if mibBuilder.loadTexts: alarmExternalPortEntry.setDescription('Entry of alarmExternalPort')
alarmExternalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmExternalPortType.setStatus('current')
if mibBuilder.loadTexts: alarmExternalPortType.setDescription('List of all interface conditions.')
alarmExternalPortSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmExternalPortSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmExternalPortSeverity.setDescription('Object identifies the current severity of alarm.')
alarmExternalPortAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmExternalPortAffect.setStatus('current')
if mibBuilder.loadTexts: alarmExternalPortAffect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmExternalPortTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmExternalPortTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmExternalPortTimeStamp.setDescription('Timestamp.')
alarmSeverityExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 12), )
if mibBuilder.loadTexts: alarmSeverityExternalPortTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityExternalPortTable.setDescription('alarmSeverityExternalPort')
alarmSeverityExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityExternalPortType"))
if mibBuilder.loadTexts: alarmSeverityExternalPortEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityExternalPortEntry.setDescription('Entry of alarmSeverityExternalPort')
alarmSeverityExternalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 12, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityExternalPortType.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityExternalPortType.setDescription('Type of severity.')
alarmSeverityExternalPortValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 12, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityExternalPortValue.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityExternalPortValue.setDescription('Value of severity.')
endOfAlarmSeverityExternalPortTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityExternalPortTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmSeverityExternalPortTable.setDescription('')
alarmSeverityEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 14), )
if mibBuilder.loadTexts: alarmSeverityEqptTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityEqptTable.setDescription('alarmSeverityEqptTable')
alarmSeverityEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityEqptType"))
if mibBuilder.loadTexts: alarmSeverityEqptEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityEqptEntry.setDescription('Entry of alarmSeverityEqptTable')
alarmSeverityEqptType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 14, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityEqptType.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityEqptType.setDescription('Type of severity.')
alarmSeverityEqptValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 14, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityEqptValue.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityEqptValue.setDescription('Value of severity.')
endOfAlarmSeverityEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityEqptTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmSeverityEqptTable.setDescription('')
alarmDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16), )
if mibBuilder.loadTexts: alarmDcnTable.setStatus('current')
if mibBuilder.loadTexts: alarmDcnTable.setDescription('alarmDcnTable')
alarmDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"), (0, "ADVA-FSPR7-MIB", "alarmDcnType"))
if mibBuilder.loadTexts: alarmDcnEntry.setStatus('current')
if mibBuilder.loadTexts: alarmDcnEntry.setDescription('Entry of alarmDcnTable')
alarmDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmDcnType.setStatus('current')
if mibBuilder.loadTexts: alarmDcnType.setDescription('List of all interface conditions.')
alarmDcnSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDcnSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmDcnSeverity.setDescription('Object identifies the current severity of alarm.')
alarmDcnAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDcnAffect.setStatus('current')
if mibBuilder.loadTexts: alarmDcnAffect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmDcnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDcnTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmDcnTimeStamp.setDescription('Timestamp.')
endOfAlarmDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmDcnTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmDcnTable.setDescription('')
alarmSeverityDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 18), )
if mibBuilder.loadTexts: alarmSeverityDcnTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityDcnTable.setDescription('alarmSeverityDcnTable')
alarmSeverityDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 18, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityDcnType"))
if mibBuilder.loadTexts: alarmSeverityDcnEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityDcnEntry.setDescription('Entry of alarmSeverityDcnTable')
alarmSeverityDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 18, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityDcnType.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityDcnType.setDescription('Type of severity.')
alarmSeverityDcnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 18, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityDcnValue.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityDcnValue.setDescription('Value of severity.')
endOfAlarmSeverityDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityDcnTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmSeverityDcnTable.setDescription('')
alarmEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20), )
if mibBuilder.loadTexts: alarmEnvTable.setStatus('current')
if mibBuilder.loadTexts: alarmEnvTable.setDescription('alarmEnvTable')
alarmEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEnvPortNo"), (0, "ADVA-FSPR7-MIB", "entityEnvExtNo"), (0, "ADVA-FSPR7-MIB", "entityEnvClassName"), (0, "ADVA-FSPR7-MIB", "alarmEnvType"))
if mibBuilder.loadTexts: alarmEnvEntry.setStatus('current')
if mibBuilder.loadTexts: alarmEnvEntry.setDescription('Entry of alarmEnvTable')
alarmEnvType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmEnvType.setStatus('current')
if mibBuilder.loadTexts: alarmEnvType.setDescription('List of all interface conditions.')
alarmEnvSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEnvSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmEnvSeverity.setDescription('Object identifies the current severity of alarm.')
alarmEnvAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEnvAffect.setStatus('current')
if mibBuilder.loadTexts: alarmEnvAffect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmEnvTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEnvTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmEnvTimeStamp.setDescription('Timestamp.')
endOfAlarmEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmEnvTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmEnvTable.setDescription('')
alarmSeverityEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 22), )
if mibBuilder.loadTexts: alarmSeverityEnvTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityEnvTable.setDescription('alarmSeverityEnvTable')
alarmSeverityEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 22, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEnvPortNo"), (0, "ADVA-FSPR7-MIB", "entityEnvExtNo"), (0, "ADVA-FSPR7-MIB", "entityEnvClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityEnvType"))
if mibBuilder.loadTexts: alarmSeverityEnvEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityEnvEntry.setDescription('Entry of alarmSeverityEnvTable')
alarmSeverityEnvType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 22, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityEnvType.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityEnvType.setDescription('Type of severity.')
alarmSeverityEnvValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 22, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityEnvValue.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityEnvValue.setDescription('Value of severity.')
endOfAlarmSeverityEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityEnvTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmSeverityEnvTable.setDescription('')
alarmContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24), )
if mibBuilder.loadTexts: alarmContainerTable.setStatus('current')
if mibBuilder.loadTexts: alarmContainerTable.setDescription('alarmContainerTable')
alarmContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"), (0, "ADVA-FSPR7-MIB", "alarmContainerType"))
if mibBuilder.loadTexts: alarmContainerEntry.setStatus('current')
if mibBuilder.loadTexts: alarmContainerEntry.setDescription('Entry of alarmContainerTable')
alarmContainerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmContainerType.setStatus('current')
if mibBuilder.loadTexts: alarmContainerType.setDescription('List of all interface conditions.')
alarmContainerSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmContainerSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmContainerSeverity.setDescription('Object identifies the current severity of alarm.')
alarmContainerAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmContainerAffect.setStatus('current')
if mibBuilder.loadTexts: alarmContainerAffect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmContainerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmContainerTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmContainerTimeStamp.setDescription('Timestamp.')
endOfAlarmContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmContainerTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmContainerTable.setDescription('')
alarmSeverityContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 26), )
if mibBuilder.loadTexts: alarmSeverityContainerTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityContainerTable.setDescription('alarmSeverityContainerTable')
alarmSeverityContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 26, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityContainerType"))
if mibBuilder.loadTexts: alarmSeverityContainerEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityContainerEntry.setDescription('Entry of alarmSeverityContainerTable')
alarmSeverityContainerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 26, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityContainerType.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityContainerType.setDescription('Type of severity.')
alarmSeverityContainerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 26, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityContainerValue.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityContainerValue.setDescription('Value of severity.')
endOfAlarmSeverityContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityContainerTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmSeverityContainerTable.setDescription('')
alarmOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28), )
if mibBuilder.loadTexts: alarmOpticalMuxTable.setStatus('current')
if mibBuilder.loadTexts: alarmOpticalMuxTable.setDescription('alarmOpticalMuxTable')
alarmOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"), (0, "ADVA-FSPR7-MIB", "alarmOpticalMuxType"))
if mibBuilder.loadTexts: alarmOpticalMuxEntry.setStatus('current')
if mibBuilder.loadTexts: alarmOpticalMuxEntry.setDescription('Entry of alarmOpticalMuxTable')
alarmOpticalMuxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmOpticalMuxType.setStatus('current')
if mibBuilder.loadTexts: alarmOpticalMuxType.setDescription('List of all interface conditions.')
alarmOpticalMuxSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOpticalMuxSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmOpticalMuxSeverity.setDescription('Object identifies the current severity of alarm.')
alarmOpticalMuxAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOpticalMuxAffect.setStatus('current')
if mibBuilder.loadTexts: alarmOpticalMuxAffect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmOpticalMuxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOpticalMuxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmOpticalMuxTimeStamp.setDescription('Timestamp.')
endOfAlarmOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmOpticalMuxTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmOpticalMuxTable.setDescription('')
alarmSeverityOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 30), )
if mibBuilder.loadTexts: alarmSeverityOpticalMuxTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityOpticalMuxTable.setDescription('alarmSeverityOpticalMuxTable')
alarmSeverityOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 30, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityOpticalMuxType"))
if mibBuilder.loadTexts: alarmSeverityOpticalMuxEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityOpticalMuxEntry.setDescription('Entry of alarmSeverityOpticalMuxTable')
alarmSeverityOpticalMuxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 30, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityOpticalMuxType.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityOpticalMuxType.setDescription('Type of severity.')
alarmSeverityOpticalMuxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 30, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityOpticalMuxValue.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityOpticalMuxValue.setDescription('Value of severity.')
endOfAlarmSeverityOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityOpticalMuxTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmSeverityOpticalMuxTable.setDescription('')
alarmShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32), )
if mibBuilder.loadTexts: alarmShelfConnTable.setStatus('current')
if mibBuilder.loadTexts: alarmShelfConnTable.setDescription('alarmShelfConnTable')
alarmShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"), (0, "ADVA-FSPR7-MIB", "alarmShelfConnType"))
if mibBuilder.loadTexts: alarmShelfConnEntry.setStatus('current')
if mibBuilder.loadTexts: alarmShelfConnEntry.setDescription('Entry of alarmShelfConnTable')
alarmShelfConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmShelfConnType.setStatus('current')
if mibBuilder.loadTexts: alarmShelfConnType.setDescription('List of all interface conditions.')
alarmShelfConnSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfConnSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmShelfConnSeverity.setDescription('Object identifies the current severity of alarm.')
alarmShelfConnAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfConnAffect.setStatus('current')
if mibBuilder.loadTexts: alarmShelfConnAffect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmShelfConnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfConnTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmShelfConnTimeStamp.setDescription('Timestamp.')
endOfAlarmShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmShelfConnTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmShelfConnTable.setDescription('')
alarmSeverityShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 34), )
if mibBuilder.loadTexts: alarmSeverityShelfConnTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityShelfConnTable.setDescription('alarmSeverityShelfConnTable')
alarmSeverityShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 34, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityShelfConnType"))
if mibBuilder.loadTexts: alarmSeverityShelfConnEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityShelfConnEntry.setDescription('Entry of alarmSeverityShelfConnTable')
alarmSeverityShelfConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 34, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityShelfConnType.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityShelfConnType.setDescription('Type of severity.')
alarmSeverityShelfConnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 34, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityShelfConnValue.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityShelfConnValue.setDescription('Value of severity.')
endOfAlarmSeverityShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityShelfConnTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmSeverityShelfConnTable.setDescription('')
alarmNtpIPv4Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 36), )
if mibBuilder.loadTexts: alarmNtpIPv4Table.setStatus('current')
if mibBuilder.loadTexts: alarmNtpIPv4Table.setDescription('alarmNtpIPv4Table')
alarmNtpIPv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 36, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ntpIPv4Ip"), (0, "ADVA-FSPR7-MIB", "alarmNtpIPv4Type"))
if mibBuilder.loadTexts: alarmNtpIPv4Entry.setStatus('current')
if mibBuilder.loadTexts: alarmNtpIPv4Entry.setDescription('Entry of alarmNtpIPv4Table')
alarmNtpIPv4Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 36, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmNtpIPv4Type.setStatus('current')
if mibBuilder.loadTexts: alarmNtpIPv4Type.setDescription('List of all interface conditions.')
alarmNtpIPv4Severity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 36, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNtpIPv4Severity.setStatus('current')
if mibBuilder.loadTexts: alarmNtpIPv4Severity.setDescription('Object identifies the current severity of alarm.')
alarmNtpIPv4Affect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 36, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNtpIPv4Affect.setStatus('current')
if mibBuilder.loadTexts: alarmNtpIPv4Affect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmNtpIPv4TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 36, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNtpIPv4TimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmNtpIPv4TimeStamp.setDescription('Timestamp.')
alarmSeverityNtpIPv4Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 38), )
if mibBuilder.loadTexts: alarmSeverityNtpIPv4Table.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityNtpIPv4Table.setDescription('alarmSeverityNtpIPv4Table')
alarmSeverityNtpIPv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 38, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ntpIPv4Ip"), (0, "ADVA-FSPR7-MIB", "alarmSeverityNtpIPv4Type"))
if mibBuilder.loadTexts: alarmSeverityNtpIPv4Entry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityNtpIPv4Entry.setDescription('Entry of alarmSeverityNtpIPv4Table')
alarmSeverityNtpIPv4Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 38, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityNtpIPv4Type.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityNtpIPv4Type.setDescription('Type of severity.')
alarmSeverityNtpIPv4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 38, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityNtpIPv4Value.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityNtpIPv4Value.setDescription('Value of severity.')
alarmNtpIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 40), )
if mibBuilder.loadTexts: alarmNtpIPv6Table.setStatus('current')
if mibBuilder.loadTexts: alarmNtpIPv6Table.setDescription('alarmNtpIPv6Table')
alarmNtpIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 40, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ntpIPv6Ip"), (0, "ADVA-FSPR7-MIB", "alarmNtpIPv6Type"))
if mibBuilder.loadTexts: alarmNtpIPv6Entry.setStatus('current')
if mibBuilder.loadTexts: alarmNtpIPv6Entry.setDescription('Entry of alarmNtpIPv6Table')
alarmNtpIPv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 40, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmNtpIPv6Type.setStatus('current')
if mibBuilder.loadTexts: alarmNtpIPv6Type.setDescription('List of all interface conditions.')
alarmNtpIPv6Severity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 40, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNtpIPv6Severity.setStatus('current')
if mibBuilder.loadTexts: alarmNtpIPv6Severity.setDescription('Object identifies the current severity of alarm.')
alarmNtpIPv6Affect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 40, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNtpIPv6Affect.setStatus('current')
if mibBuilder.loadTexts: alarmNtpIPv6Affect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmNtpIPv6TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 40, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNtpIPv6TimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmNtpIPv6TimeStamp.setDescription('Timestamp.')
alarmSeverityNtpIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 42), )
if mibBuilder.loadTexts: alarmSeverityNtpIPv6Table.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityNtpIPv6Table.setDescription('alarmSeverityNtpIPv6Table')
alarmSeverityNtpIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 42, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ntpIPv6Ip"), (0, "ADVA-FSPR7-MIB", "alarmSeverityNtpIPv6Type"))
if mibBuilder.loadTexts: alarmSeverityNtpIPv6Entry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityNtpIPv6Entry.setDescription('Entry of alarmSeverityNtpIPv6Table')
alarmSeverityNtpIPv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 42, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityNtpIPv6Type.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityNtpIPv6Type.setDescription('Type of severity.')
alarmSeverityNtpIPv6Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 42, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityNtpIPv6Value.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityNtpIPv6Value.setDescription('Value of severity.')
alarmProfileSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1), )
if mibBuilder.loadTexts: alarmProfileSeverityTable.setStatus('current')
if mibBuilder.loadTexts: alarmProfileSeverityTable.setDescription('')
alarmProfileSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "alarmProfileSeverityAidType"), (0, "ADVA-FSPR7-MIB", "alarmProfileSeverityType"))
if mibBuilder.loadTexts: alarmProfileSeverityEntry.setStatus('current')
if mibBuilder.loadTexts: alarmProfileSeverityEntry.setDescription('')
alarmProfileSeverityAidType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1, 1), FspR7AidType())
if mibBuilder.loadTexts: alarmProfileSeverityAidType.setStatus('current')
if mibBuilder.loadTexts: alarmProfileSeverityAidType.setDescription('')
alarmProfileSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1, 2), FspR7AlarmProfileList())
if mibBuilder.loadTexts: alarmProfileSeverityType.setStatus('current')
if mibBuilder.loadTexts: alarmProfileSeverityType.setDescription('')
alarmProfileSeverityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1, 3), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmProfileSeverityValue.setStatus('current')
if mibBuilder.loadTexts: alarmProfileSeverityValue.setDescription('This object identifies the severity assigned to this alarm.')
alarmProfileSeverityDefaultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1, 4), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProfileSeverityDefaultValue.setStatus('current')
if mibBuilder.loadTexts: alarmProfileSeverityDefaultValue.setDescription('This object identifies the default severity of this alarm.')
endOfAlarmProfileSeverityTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmProfileSeverityTable.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmProfileSeverityTable.setDescription('')
endOfAlarmProfile = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmProfile.setStatus('current')
if mibBuilder.loadTexts: endOfAlarmProfile.setDescription('')
serviceAffecting = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1000), ServiceAffecting()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: serviceAffecting.setStatus('current')
if mibBuilder.loadTexts: serviceAffecting.setDescription('Re-init of modules is SA or NSA. This object is send within a trap.')
endOfAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarm.setStatus('current')
if mibBuilder.loadTexts: endOfAlarm.setDescription('')
fspR7CreationTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 1))
if mibBuilder.loadTexts: fspR7CreationTrap.setStatus('current')
if mibBuilder.loadTexts: fspR7CreationTrap.setDescription('This trap is sent every time an entity is created.')
fspR7DeletionTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 2))
if mibBuilder.loadTexts: fspR7DeletionTrap.setStatus('current')
if mibBuilder.loadTexts: fspR7DeletionTrap.setDescription('This trap is sent every time an entity is destroyed.')
fspR7StateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 3))
if mibBuilder.loadTexts: fspR7StateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: fspR7StateChangeTrap.setDescription('This trap is sent when an entity state is changed.')
fspR7ObjectChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 4))
if mibBuilder.loadTexts: fspR7ObjectChangeTrap.setStatus('current')
if mibBuilder.loadTexts: fspR7ObjectChangeTrap.setDescription('This trap is sent when an object is changed.')
alarmTerminalLoopback = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 5))
if mibBuilder.loadTexts: alarmTerminalLoopback.setStatus('current')
if mibBuilder.loadTexts: alarmTerminalLoopback.setDescription('Inward Loopback on Interface')
alarmOosDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 6))
if mibBuilder.loadTexts: alarmOosDisabled.setStatus('current')
if mibBuilder.loadTexts: alarmOosDisabled.setDescription('Non-Specific Disablement of Management Access')
alarmOosManagement = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 7))
if mibBuilder.loadTexts: alarmOosManagement.setStatus('current')
if mibBuilder.loadTexts: alarmOosManagement.setDescription('Alarms are logged but not notified, service affecting changes are permitted')
alarmOosMaintenance = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 8))
if mibBuilder.loadTexts: alarmOosMaintenance.setStatus('current')
if mibBuilder.loadTexts: alarmOosMaintenance.setDescription('Alarms are logged but not notified, service affecting changes and operations are permitted')
alarmOosAins = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 9))
if mibBuilder.loadTexts: alarmOosAins.setStatus('current')
if mibBuilder.loadTexts: alarmOosAins.setDescription('Automatic In Service')
alarmRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10))
if mibBuilder.loadTexts: alarmRemoved.setStatus('current')
if mibBuilder.loadTexts: alarmRemoved.setDescription('The equipment has been removed / unplugged / disconnected.\n        This condition has been determined to be more probable than that below,\n        which is also supersedes.')
alarmLossOfSignal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 11))
if mibBuilder.loadTexts: alarmLossOfSignal.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfSignal.setDescription('Loss of Signal')
alarmOptInputPwrReceivedTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 12))
if mibBuilder.loadTexts: alarmOptInputPwrReceivedTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmOptInputPwrReceivedTooLow.setDescription('Optical Power Receive Low Threshold Exceeded')
alarmOptInputPwrReceivedTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 13))
if mibBuilder.loadTexts: alarmOptInputPwrReceivedTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmOptInputPwrReceivedTooHigh.setDescription('Optical Power Receive High Threshold Exceeded')
alarmLaserTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 14))
if mibBuilder.loadTexts: alarmLaserTemperatureTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmLaserTemperatureTooHigh.setDescription('TCA - Fixed high threshold of Laser Temperature has been crossed.')
alarmLaserTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 15))
if mibBuilder.loadTexts: alarmLaserTemperatureTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmLaserTemperatureTooLow.setDescription('TCA - Fixed low threshold of Laser Temperature has been crossed.')
alarmOptOutputPowerTransTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 16))
if mibBuilder.loadTexts: alarmOptOutputPowerTransTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmOptOutputPowerTransTooLow.setDescription('Optical Power Transmit (output) Low Threshold Exceeded')
alarmOptOutputPowerTransTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 17))
if mibBuilder.loadTexts: alarmOptOutputPowerTransTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmOptOutputPowerTransTooHigh.setDescription('Optical Power Transmitted (output) High Threshold Exceeded')
alarmAutoShutdownToHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 18))
if mibBuilder.loadTexts: alarmAutoShutdownToHighTemp.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownToHighTemp.setDescription('Facility autonomously shut down with Transmitter off due to temperature.')
alarmAutoShutdownToHighTxPwr = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 19))
if mibBuilder.loadTexts: alarmAutoShutdownToHighTxPwr.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownToHighTxPwr.setDescription('Facility Autonomously Shut Down with Transmitter OFF because of excessiv optical Power Transmitted.')
alarmLaserEndOfLife = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 20))
if mibBuilder.loadTexts: alarmLaserEndOfLife.setStatus('current')
if mibBuilder.loadTexts: alarmLaserEndOfLife.setDescription('End Of Life [laser degrade].')
alarmServerSignalFailureVf = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 21))
if mibBuilder.loadTexts: alarmServerSignalFailureVf.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailureVf.setDescription('Aggregate level failure')
alarmEqualizationProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 22))
if mibBuilder.loadTexts: alarmEqualizationProgress.setStatus('current')
if mibBuilder.loadTexts: alarmEqualizationProgress.setDescription('Equalization and countdown in progress')
alarmUPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 23))
if mibBuilder.loadTexts: alarmUPortFailure.setStatus('current')
if mibBuilder.loadTexts: alarmUPortFailure.setDescription('Internal U Port Failure')
alarmAutoShutdownBlock = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 24))
if mibBuilder.loadTexts: alarmAutoShutdownBlock.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownBlock.setDescription('Auto Shutdown Block')
alarmAutoPowerShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 25))
if mibBuilder.loadTexts: alarmAutoPowerShutdown.setStatus('current')
if mibBuilder.loadTexts: alarmAutoPowerShutdown.setDescription('Automatic Power Shutdown')
alarmConfOutPowerTransTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 26))
if mibBuilder.loadTexts: alarmConfOutPowerTransTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmConfOutPowerTransTooHigh.setDescription('Optical Power Transmit (output) High Threshold Exceeded')
alarmConfOutPowerTransTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 27))
if mibBuilder.loadTexts: alarmConfOutPowerTransTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmConfOutPowerTransTooLow.setDescription('Optical Power Transmit (output) Low Threshold Exceeded')
alarmOptSignalFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 28))
if mibBuilder.loadTexts: alarmOptSignalFailure.setStatus('current')
if mibBuilder.loadTexts: alarmOptSignalFailure.setDescription('Optical Power Transmit Signal Failure')
alarmDsbdChannelPowerTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 29))
if mibBuilder.loadTexts: alarmDsbdChannelPowerTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmDsbdChannelPowerTooHigh.setDescription('Optical power is not blocked when service is disabled (OPT > -25 dBm).')
alarmLossOfSignalCPort = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 30))
if mibBuilder.loadTexts: alarmLossOfSignalCPort.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfSignalCPort.setDescription('Loss of signal on C Port that corresponds to the network VCH via CRS')
alarmLossOfSignalNPort = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 31))
if mibBuilder.loadTexts: alarmLossOfSignalNPort.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfSignalNPort.setDescription('Internal N Port Failure')
alarmOutputPowerFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 32))
if mibBuilder.loadTexts: alarmOutputPowerFault.setStatus('current')
if mibBuilder.loadTexts: alarmOutputPowerFault.setDescription('There is no channel output power while the input power for the channel is above the LOS TH and the channel attenuation is set to a valid value.')
alarmEqlzAdjust = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 33))
if mibBuilder.loadTexts: alarmEqlzAdjust.setStatus('current')
if mibBuilder.loadTexts: alarmEqlzAdjust.setDescription('Channel power adjustment is in progress')
alarmAmpFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 34))
if mibBuilder.loadTexts: alarmAmpFailure.setStatus('current')
if mibBuilder.loadTexts: alarmAmpFailure.setDescription('SGEO-AMP is raised at a dependent entity due to an AMP auto shutdown condition at the associated supporting entity.')
alarmEqptProvMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 35))
if mibBuilder.loadTexts: alarmEqptProvMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmEqptProvMismatch.setDescription('Provisioning incompatible with configuration')
alarmBackreflectionTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 36))
if mibBuilder.loadTexts: alarmBackreflectionTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmBackreflectionTooHigh.setDescription('Backreflection Power too High, at Tx port')
transientEqlzStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 37))
if mibBuilder.loadTexts: transientEqlzStart.setStatus('current')
if mibBuilder.loadTexts: transientEqlzStart.setDescription('Start of Connection Equalization')
transientEqlzFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 38))
if mibBuilder.loadTexts: transientEqlzFailed.setStatus('current')
if mibBuilder.loadTexts: transientEqlzFailed.setDescription('Failure of Connection Equalization')
transientEqlzCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 39))
if mibBuilder.loadTexts: transientEqlzCompleted.setStatus('current')
if mibBuilder.loadTexts: transientEqlzCompleted.setDescription('Completion of Connection Equalization')
transientEqlzRequestDenied = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 40))
if mibBuilder.loadTexts: transientEqlzRequestDenied.setStatus('current')
if mibBuilder.loadTexts: transientEqlzRequestDenied.setDescription('Equalization request denied (could not be performed) by enity')
transientEqlzNotRequired = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 41))
if mibBuilder.loadTexts: transientEqlzNotRequired.setStatus('current')
if mibBuilder.loadTexts: transientEqlzNotRequired.setDescription('Equalization Null - Not Required - channel(s) are currently equalized')
transientEqlzProcessPassed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 42))
if mibBuilder.loadTexts: transientEqlzProcessPassed.setStatus('current')
if mibBuilder.loadTexts: transientEqlzProcessPassed.setDescription('Equalization Operation completed sucessfully')
transientEqlzProcessWait = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 43))
if mibBuilder.loadTexts: transientEqlzProcessWait.setStatus('current')
if mibBuilder.loadTexts: transientEqlzProcessWait.setDescription('Eqalization is in progress, User must wait then request equalization')
transientPmSnapshotStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 44))
if mibBuilder.loadTexts: transientPmSnapshotStarted.setStatus('current')
if mibBuilder.loadTexts: transientPmSnapshotStarted.setDescription('Reference value save start')
transientEqlzAuto = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 45))
if mibBuilder.loadTexts: transientEqlzAuto.setStatus('current')
if mibBuilder.loadTexts: transientEqlzAuto.setDescription('Scheduled Equalization resulted in adjustment of VCH')
transientEqlzRamanAdjust = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 46))
if mibBuilder.loadTexts: transientEqlzRamanAdjust.setStatus('current')
if mibBuilder.loadTexts: transientEqlzRamanAdjust.setDescription('Auto equalization for RAMAN adjustment on existing in-service cross-connected VCHs')
alarmFiberConnLos = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 48))
if mibBuilder.loadTexts: alarmFiberConnLos.setStatus('current')
if mibBuilder.loadTexts: alarmFiberConnLos.setDescription('Fiber Connection Loss of Signal')
alarmFiberConnOptFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 49))
if mibBuilder.loadTexts: alarmFiberConnOptFault.setStatus('current')
if mibBuilder.loadTexts: alarmFiberConnOptFault.setDescription('Fiber connection transmit optical power failure.')
alarmFiberConnInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 50))
if mibBuilder.loadTexts: alarmFiberConnInvalid.setStatus('current')
if mibBuilder.loadTexts: alarmFiberConnInvalid.setDescription('The fiber connection is in violation of the fiber connection rules.')
alarmFiberConnMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 51))
if mibBuilder.loadTexts: alarmFiberConnMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmFiberConnMismatch.setDescription('The fiber connection does not match the existing fiber-map in database.')
alarmFiberConnCommError = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 52))
if mibBuilder.loadTexts: alarmFiberConnCommError.setStatus('current')
if mibBuilder.loadTexts: alarmFiberConnCommError.setDescription('Fiber Connection Communications Fault')
alarmFiberConnProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 53))
if mibBuilder.loadTexts: alarmFiberConnProtocolFailure.setStatus('current')
if mibBuilder.loadTexts: alarmFiberConnProtocolFailure.setDescription('Fiber Connection Protocol Fault')
alarmFiberConnDataFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 54))
if mibBuilder.loadTexts: alarmFiberConnDataFailure.setStatus('current')
if mibBuilder.loadTexts: alarmFiberConnDataFailure.setDescription('Fiber Connection Data Fault')
alarmFiberAttenuationHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 55))
if mibBuilder.loadTexts: alarmFiberAttenuationHigh.setStatus('current')
if mibBuilder.loadTexts: alarmFiberAttenuationHigh.setDescription('Fiber Connection Attenuation High')
transientFiberConnStatChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 56))
if mibBuilder.loadTexts: transientFiberConnStatChange.setStatus('current')
if mibBuilder.loadTexts: transientFiberConnStatChange.setDescription('Fiber Connection Status Change')
alarmLaserBiasCurrAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 57))
if mibBuilder.loadTexts: alarmLaserBiasCurrAbnormal.setStatus('current')
if mibBuilder.loadTexts: alarmLaserBiasCurrAbnormal.setDescription('Abnormally High Laser Bias Current Level under the current operating conditions.')
alarmFiberConnInvalidTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 58))
if mibBuilder.loadTexts: alarmFiberConnInvalidTx.setStatus('current')
if mibBuilder.loadTexts: alarmFiberConnInvalidTx.setDescription('The fiber connection is in violation of the fiber connection rules.')
alarmFiberConnMismatchTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 59))
if mibBuilder.loadTexts: alarmFiberConnMismatchTx.setStatus('current')
if mibBuilder.loadTexts: alarmFiberConnMismatchTx.setDescription('The fiber connection does not match the existing fiber-map in database.')
alarmFiberAttenuationHighTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 60))
if mibBuilder.loadTexts: alarmFiberAttenuationHighTx.setStatus('current')
if mibBuilder.loadTexts: alarmFiberAttenuationHighTx.setDescription('Fiber Connection Attenuation High Tx')
alarmLaserFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 61))
if mibBuilder.loadTexts: alarmLaserFailure.setStatus('current')
if mibBuilder.loadTexts: alarmLaserFailure.setDescription('Optical Power Transmitted Failure: Laser Failure')
alarmLossOfReceiverClockRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 62))
if mibBuilder.loadTexts: alarmLossOfReceiverClockRecovery.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfReceiverClockRecovery.setDescription('Rx Clock Sync Failure')
alarmFiberAttenuationCond = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 63))
if mibBuilder.loadTexts: alarmFiberAttenuationCond.setStatus('current')
if mibBuilder.loadTexts: alarmFiberAttenuationCond.setDescription('Fiber Connection High Fiber Attenuation Condition')
alarmChannelMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 64))
if mibBuilder.loadTexts: alarmChannelMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmChannelMismatch.setDescription('Channel provisioning incompatible with associated port configuration')
alarmAlarmIndicationSignalLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 65))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalLine.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalLine.setDescription('Alarm Indication Signal Line / Multiplex Section')
alarmAlarmIndicationSignalLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 66))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalLowerOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalLowerOrderPath.setDescription('Alarm Indication Signal Lower Order Path')
alarmAlarmIndicationSignalOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 67))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOdu.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOdu.setDescription('Alarm Indication Signal ODU Path Monitoring')
alarmAlarmIndicationSignalOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 68))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOpu.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOpu.setDescription('Alarm Indication Signal OPU Path Monitoring')
alarmAlarmIndicationSignalOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 69))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOtu.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOtu.setDescription('Alarm Indication Signal OTU Section Monitoring')
alarmAlarmIndicationSignalHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 70))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalHigherOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalHigherOrderPath.setDescription('Alarm Indication Signal Path')
alarmAlarmIndicationSignalOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 71))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmA.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmA.setDescription('Alarm Indication Signal ODU Tandem Connection Monitoring Instance A')
alarmAlarmIndicationSignalOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 72))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmB.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmB.setDescription('Alarm Indication Signal ODU Tandem Connection Monitoring Instance B')
alarmAlarmIndicationSignalOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 73))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmC.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmC.setDescription('Alarm Indication Signal ODU Tandem Connection Monitoring Instance C')
alarmVirtualChannelAis = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 74))
if mibBuilder.loadTexts: alarmVirtualChannelAis.setStatus('current')
if mibBuilder.loadTexts: alarmVirtualChannelAis.setDescription('Client Failure Far-end')
alarmAmplifierAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 75))
if mibBuilder.loadTexts: alarmAmplifierAbnormal.setStatus('current')
if mibBuilder.loadTexts: alarmAmplifierAbnormal.setDescription('Output of amplifier is abnormal')
alarmAutomaticPowerReduction = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 76))
if mibBuilder.loadTexts: alarmAutomaticPowerReduction.setStatus('current')
if mibBuilder.loadTexts: alarmAutomaticPowerReduction.setDescription('The signal power exceeds the limit')
alarmAutomaticPowerReductionForEyeSafety = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 77))
if mibBuilder.loadTexts: alarmAutomaticPowerReductionForEyeSafety.setStatus('current')
if mibBuilder.loadTexts: alarmAutomaticPowerReductionForEyeSafety.setDescription('Output power is automatically reduced to eye safety limit')
transientAlpSettingFinished = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 78))
if mibBuilder.loadTexts: transientAlpSettingFinished.setStatus('current')
if mibBuilder.loadTexts: transientAlpSettingFinished.setDescription('Setting of alarm severities to Alarm Profile values completed')
transientAlpSettingStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 79))
if mibBuilder.loadTexts: transientAlpSettingStarted.setStatus('current')
if mibBuilder.loadTexts: transientAlpSettingStarted.setDescription('Setting of alarm severities to Alarm Profile values started')
alarmApsConfigMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 80))
if mibBuilder.loadTexts: alarmApsConfigMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmApsConfigMismatch.setDescription('Configuration Mismatch between NEND and FEND. Reported by working facility (PATHID==WKG) or protection facility (PATHID==PROTN)\n        In the case of Controller Protection: due to partner OOS-AU or OOS-MA, DSBLD (Protection Not Available).')
alarmApsProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 81))
if mibBuilder.loadTexts: alarmApsProtocolFailure.setStatus('current')
if mibBuilder.loadTexts: alarmApsProtocolFailure.setDescription('Protocol Failure between NEND and FEND. Reported by protecting facility (PATHID==PROTN).')
alarmAseLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 82))
if mibBuilder.loadTexts: alarmAseLow.setStatus('current')
if mibBuilder.loadTexts: alarmAseLow.setDescription('Pump laser is not switched on because of too low ASE power')
alarmAseTableGenFailLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 83))
if mibBuilder.loadTexts: alarmAseTableGenFailLow.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableGenFailLow.setDescription('ASE table generation failed because of too low ASE level')
alarmAseTableGenFailHighBackreflection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 84))
if mibBuilder.loadTexts: alarmAseTableGenFailHighBackreflection.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableGenFailHighBackreflection.setDescription('ASE table generation failed because of too high backreflection')
alarmAseTableGenFailOscMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 85))
if mibBuilder.loadTexts: alarmAseTableGenFailOscMissing.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableGenFailOscMissing.setDescription('ASE table generation failed because OSC is missing')
alarmAseTableGenFailPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 86))
if mibBuilder.loadTexts: alarmAseTableGenFailPilot.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableGenFailPilot.setDescription('ASE table generation failed because PILOT is missing')
alarmAseTableGenFailSignalinput = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 87))
if mibBuilder.loadTexts: alarmAseTableGenFailSignalinput.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableGenFailSignalinput.setDescription('ASE table generation failed because of detected input signal')
alarmAseTableNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 88))
if mibBuilder.loadTexts: alarmAseTableNotAvailable.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableNotAvailable.setDescription('ASE table not available or invalid')
alarmAseTableGenProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 89))
if mibBuilder.loadTexts: alarmAseTableGenProgress.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableGenProgress.setDescription('ASE table is in the build process')
alarmEncryptionPortAuthPasswdMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 90))
if mibBuilder.loadTexts: alarmEncryptionPortAuthPasswdMissing.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionPortAuthPasswdMissing.setDescription('Authentication password missing')
transientCryptoAuthPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 91))
if mibBuilder.loadTexts: transientCryptoAuthPasswdChanged.setStatus('current')
if mibBuilder.loadTexts: transientCryptoAuthPasswdChanged.setDescription('Change of Authentication Password')
alarmBackwardDefectIndicationOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 92))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOdu.setStatus('current')
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOdu.setDescription('ODU Backward Defect Indication')
alarmBackwardDefectIndicationOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 93))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOtu.setStatus('current')
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOtu.setDescription('OTU Backward Defect Indication')
alarmBackwardDefectIndicationOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 94))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmA.setStatus('current')
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmA.setDescription('ODU Tandem Connection Monitoring A Backward Defect Indication')
alarmBackwardDefectIndicationOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 95))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmB.setStatus('current')
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmB.setDescription('ODU Tandem Connection Monitoring B Backward Defect Indication')
alarmBackwardDefectIndicationOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 96))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmC.setStatus('current')
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmC.setDescription('ODU Tandem Connection Monitoring C Backward Defect Indication')
alarmTopologyDataCalculationInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 97))
if mibBuilder.loadTexts: alarmTopologyDataCalculationInProgress.setStatus('current')
if mibBuilder.loadTexts: alarmTopologyDataCalculationInProgress.setDescription('Calculation of topology in progress')
transientDispersionCompFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 98))
if mibBuilder.loadTexts: transientDispersionCompFailed.setStatus('current')
if mibBuilder.loadTexts: transientDispersionCompFailed.setDescription('Optimization of Chromatic Dispersion Compensation Fail')
alarmDispertionTunningCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 99))
if mibBuilder.loadTexts: alarmDispertionTunningCondition.setStatus('current')
if mibBuilder.loadTexts: alarmDispertionTunningCondition.setDescription('Chromatic Dispersion Compensation In Progress')
alarmLossOfCharSync = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 100))
if mibBuilder.loadTexts: alarmLossOfCharSync.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfCharSync.setDescription('Unable to syncronise on the characters in the incoming datastream')
alarmLossOfCharSyncFromFarEnd = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 101))
if mibBuilder.loadTexts: alarmLossOfCharSyncFromFarEnd.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfCharSyncFromFarEnd.setDescription('Loss of Character Synchronization from FEND')
transientCryptoAuthPasswdInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 102))
if mibBuilder.loadTexts: transientCryptoAuthPasswdInvalid.setStatus('current')
if mibBuilder.loadTexts: transientCryptoAuthPasswdInvalid.setDescription('A wrong Authentication password was sent with the command')
alarmEncryptionPortEncryptionSwitchOffEnabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 103))
if mibBuilder.loadTexts: alarmEncryptionPortEncryptionSwitchOffEnabled.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionPortEncryptionSwitchOffEnabled.setDescription('User enabled switching encryption off')
alarmEncryptionModuleCryPasswdMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 104))
if mibBuilder.loadTexts: alarmEncryptionModuleCryPasswdMissing.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionModuleCryPasswdMissing.setDescription('Crypto Officer password missing')
transientCryptoPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 105))
if mibBuilder.loadTexts: transientCryptoPasswdChanged.setStatus('current')
if mibBuilder.loadTexts: transientCryptoPasswdChanged.setDescription('Crypto Officer Password Changed')
transientCryptoRtf = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 106))
if mibBuilder.loadTexts: transientCryptoRtf.setStatus('current')
if mibBuilder.loadTexts: transientCryptoRtf.setDescription('Encryption settings reset to factory defaults')
alarmEncryptionModuleSelfTestStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 107))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestStarted.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestStarted.setDescription('Encryption selftest running')
alarmEncryptionPortEncryptionSwitchedOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 108))
if mibBuilder.loadTexts: alarmEncryptionPortEncryptionSwitchedOff.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionPortEncryptionSwitchedOff.setDescription('Encryption switched off')
alarmOpuClientSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 109))
if mibBuilder.loadTexts: alarmOpuClientSignalFail.setStatus('current')
if mibBuilder.loadTexts: alarmOpuClientSignalFail.setDescription('OPU Client Signal Fail')
alarmDatabaseMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 110))
if mibBuilder.loadTexts: alarmDatabaseMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmDatabaseMismatch.setDescription('compare DBACT__FAIL x.y.z in UBR note DBTYPE is retrievable immediately with RTRV-SYS, we do not currently supported a RTRV-COND-SYS')
alarmDatabaseFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 111))
if mibBuilder.loadTexts: alarmDatabaseFailure.setStatus('current')
if mibBuilder.loadTexts: alarmDatabaseFailure.setDescription('Database Failure detect by Database Check Routine')
alarmDatabaseNcuMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 112))
if mibBuilder.loadTexts: alarmDatabaseNcuMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmDatabaseNcuMismatch.setDescription('This parameter indicates a change of NCU Type (NCU<->NCU2E)')
alarmDbReplicationIncompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 113))
if mibBuilder.loadTexts: alarmDbReplicationIncompleted.setStatus('current')
if mibBuilder.loadTexts: alarmDbReplicationIncompleted.setDescription('DB Replication Incomplete')
alarmDatabaseVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 114))
if mibBuilder.loadTexts: alarmDatabaseVersionMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmDatabaseVersionMismatch.setDescription('The current DB is newer than required, or not updateable')
alarmXfpDecisionThresSetFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 115))
if mibBuilder.loadTexts: alarmXfpDecisionThresSetFailed.setStatus('current')
if mibBuilder.loadTexts: alarmXfpDecisionThresSetFailed.setDescription('Decision threshold setting failed')
alarmDuplexLinkFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 116))
if mibBuilder.loadTexts: alarmDuplexLinkFailure.setStatus('current')
if mibBuilder.loadTexts: alarmDuplexLinkFailure.setDescription('Controller Protection Link Failure')
transientFarEndDyingGasp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 117))
if mibBuilder.loadTexts: transientFarEndDyingGasp.setStatus('current')
if mibBuilder.loadTexts: transientFarEndDyingGasp.setDescription('signal received from far end upon far end power loss')
alarmSingleFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 118))
if mibBuilder.loadTexts: alarmSingleFanFailure.setStatus('current')
if mibBuilder.loadTexts: alarmSingleFanFailure.setDescription('Fan operation is degraded and needs attention (cleaning, filter replacement or possible fan replacement).')
alarmMultipleFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 119))
if mibBuilder.loadTexts: alarmMultipleFanFailure.setStatus('current')
if mibBuilder.loadTexts: alarmMultipleFanFailure.setDescription('Fan is failing or failed and needs replacement.')
alarmLossOfSignalTransmitter = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 120))
if mibBuilder.loadTexts: alarmLossOfSignalTransmitter.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfSignalTransmitter.setDescription('A Loss of signal has been detected on the FAR-END facility.')
transientFarEndChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 121))
if mibBuilder.loadTexts: transientFarEndChanged.setStatus('current')
if mibBuilder.loadTexts: transientFarEndChanged.setDescription('Neighbor Discovery Dectected  a Far End Change')
alarmFarEndIpAddressUnknown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 122))
if mibBuilder.loadTexts: alarmFarEndIpAddressUnknown.setStatus('current')
if mibBuilder.loadTexts: alarmFarEndIpAddressUnknown.setDescription('Send by active facility. If an FEND IP Address is changed the corresponding NODE-IP cannot be determined by the OSCM')
alarmFarEndCommFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 123))
if mibBuilder.loadTexts: alarmFarEndCommFailure.setStatus('current')
if mibBuilder.loadTexts: alarmFarEndCommFailure.setDescription('The connection to the Far End Optojack plug is dysfunctional')
transientTopologyDataInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 124))
if mibBuilder.loadTexts: transientTopologyDataInvalid.setStatus('current')
if mibBuilder.loadTexts: transientTopologyDataInvalid.setDescription('Topology Detection Data invalid')
alarmBackupForcedToHalt = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 125))
if mibBuilder.loadTexts: alarmBackupForcedToHalt.setStatus('current')
if mibBuilder.loadTexts: alarmBackupForcedToHalt.setDescription('Forced Halt')
transientForcedReboot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 126))
if mibBuilder.loadTexts: transientForcedReboot.setStatus('current')
if mibBuilder.loadTexts: transientForcedReboot.setDescription('Forced Reboot')
alarmFacilityForcedOn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 127))
if mibBuilder.loadTexts: alarmFacilityForcedOn.setStatus('current')
if mibBuilder.loadTexts: alarmFacilityForcedOn.setDescription('Laser or Switch forced ON')
alarmFwdAseTableFailPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 128))
if mibBuilder.loadTexts: alarmFwdAseTableFailPilot.setStatus('current')
if mibBuilder.loadTexts: alarmFwdAseTableFailPilot.setDescription('Force of BWD Raman pilot for FWD ASE Table Build Failed')
alarmFwdAseTableOnPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 129))
if mibBuilder.loadTexts: alarmFwdAseTableOnPilot.setStatus('current')
if mibBuilder.loadTexts: alarmFwdAseTableOnPilot.setDescription('Force the BWD Raman Pilot on to allow building of FWD Raman ASE Table')
transientCryptoFwpUpdate = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 130))
if mibBuilder.loadTexts: transientCryptoFwpUpdate.setStatus('current')
if mibBuilder.loadTexts: transientCryptoFwpUpdate.setDescription('A new FWP is installed')
alarmEncryptionModuleFwpUpdateEnabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 131))
if mibBuilder.loadTexts: alarmEncryptionModuleFwpUpdateEnabled.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionModuleFwpUpdateEnabled.setDescription('FWP upgrade is allowed')
alarmFwpMismatchDownloadNotServiceAffecting = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 132))
if mibBuilder.loadTexts: alarmFwpMismatchDownloadNotServiceAffecting.setStatus('current')
if mibBuilder.loadTexts: alarmFwpMismatchDownloadNotServiceAffecting.setDescription('Firmware Package Mismatch; download will be NOT Service Affecting')
alarmFwpMismatchDownloadServiceAffecting = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 133))
if mibBuilder.loadTexts: alarmFwpMismatchDownloadServiceAffecting.setStatus('current')
if mibBuilder.loadTexts: alarmFwpMismatchDownloadServiceAffecting.setDescription('Firmware Package Mismatch; download will be Service Affecting')
transientCryptoFwpRevChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 134))
if mibBuilder.loadTexts: transientCryptoFwpRevChanged.setStatus('current')
if mibBuilder.loadTexts: transientCryptoFwpRevChanged.setDescription('FWP upgrade revision number is changed')
alarmGainTiltNotSettable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 135))
if mibBuilder.loadTexts: alarmGainTiltNotSettable.setStatus('current')
if mibBuilder.loadTexts: alarmGainTiltNotSettable.setDescription('The nominal tilt and gain values are not settable')
alarmHighBer = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 136))
if mibBuilder.loadTexts: alarmHighBer.setStatus('current')
if mibBuilder.loadTexts: alarmHighBer.setDescription('More than 16 invalid 64B/66B sync headers within the current 125us period')
alarmReceiverOverloadProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 137))
if mibBuilder.loadTexts: alarmReceiverOverloadProtection.setStatus('current')
if mibBuilder.loadTexts: alarmReceiverOverloadProtection.setDescription('Safety condition, protecting the system against too high receive power.')
alarmHwInitializing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 138))
if mibBuilder.loadTexts: alarmHwInitializing.setStatus('current')
if mibBuilder.loadTexts: alarmHwInitializing.setDescription('Hardware is Initializing')
alarmHwOprReachedHT = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 139))
if mibBuilder.loadTexts: alarmHwOprReachedHT.setStatus('current')
if mibBuilder.loadTexts: alarmHwOprReachedHT.setDescription('HW OPR has reached a high thershold and could be damaged')
alarmHwDegrade = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 140))
if mibBuilder.loadTexts: alarmHwDegrade.setStatus('current')
if mibBuilder.loadTexts: alarmHwDegrade.setDescription('HW operation is degraded by a HW fault, but traffic is unaffected.')
alarmHwFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 141))
if mibBuilder.loadTexts: alarmHwFailure.setStatus('current')
if mibBuilder.loadTexts: alarmHwFailure.setDescription('General Hardware Failure')
alarmSwitchtoProtectionInhibited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 142))
if mibBuilder.loadTexts: alarmSwitchtoProtectionInhibited.setStatus('current')
if mibBuilder.loadTexts: alarmSwitchtoProtectionInhibited.setDescription('Protection Switch Inhibited. Switch to PROTN facility Locked Out. Reported by WKG facility. Leads to PSI state.')
alarmSwitchtoWorkingInhibited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 143))
if mibBuilder.loadTexts: alarmSwitchtoWorkingInhibited.setStatus('current')
if mibBuilder.loadTexts: alarmSwitchtoWorkingInhibited.setDescription('Protection Release Inhibited. Switch back to WKG facility Locked Out. Reported by PROTN facility. Leads to PRI state.')
transientIntrusionRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 144))
if mibBuilder.loadTexts: transientIntrusionRx.setStatus('current')
if mibBuilder.loadTexts: transientIntrusionRx.setDescription('Intrusion on the Receiver Fiber based on GRADHT-AT keyword.')
transientIntrusionTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 145))
if mibBuilder.loadTexts: transientIntrusionTx.setStatus('current')
if mibBuilder.loadTexts: transientIntrusionTx.setDescription('Intrusion on the Transmitter Fiber based on GRADHT-AT keyword.')
transientEncryptionPortSingleKeyExchgFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 146))
if mibBuilder.loadTexts: transientEncryptionPortSingleKeyExchgFailed.setStatus('current')
if mibBuilder.loadTexts: transientEncryptionPortSingleKeyExchgFailed.setDescription('At least one Key exchange failed')
transientCryptoKeyExchgFailCondClr = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 147))
if mibBuilder.loadTexts: transientCryptoKeyExchgFailCondClr.setStatus('current')
if mibBuilder.loadTexts: transientCryptoKeyExchgFailCondClr.setDescription('Key exchange fail counter reset')
alarmEncryptionPortKeyInitExchgMissed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 148))
if mibBuilder.loadTexts: alarmEncryptionPortKeyInitExchgMissed.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionPortKeyInitExchgMissed.setDescription('The initial successful key exchange has not be completed')
alarmEncryptionPortMaxKeyExchgFailuresReachedIs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 149))
if mibBuilder.loadTexts: alarmEncryptionPortMaxKeyExchgFailuresReachedIs.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionPortMaxKeyExchgFailuresReachedIs.setDescription('Maximum Key exchange failure count reached')
alarmEncryptionPortMaxKeyExchgFailuresReachedOos = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 150))
if mibBuilder.loadTexts: alarmEncryptionPortMaxKeyExchgFailuresReachedOos.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionPortMaxKeyExchgFailuresReachedOos.setDescription('Session Key missing')
alarmEncryptionPortKeyExchangedForced = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 151))
if mibBuilder.loadTexts: alarmEncryptionPortKeyExchangedForced.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionPortKeyExchangedForced.setDescription('Encryption Key exchanged forced')
alarmLaserOnDelay = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 152))
if mibBuilder.loadTexts: alarmLaserOnDelay.setStatus('current')
if mibBuilder.loadTexts: alarmLaserOnDelay.setDescription('Laser in process of turning on')
alarmLockedDefectOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 153))
if mibBuilder.loadTexts: alarmLockedDefectOdu.setStatus('current')
if mibBuilder.loadTexts: alarmLockedDefectOdu.setDescription('ODU Locked')
alarmLockedDefectOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 154))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmA.setStatus('current')
if mibBuilder.loadTexts: alarmLockedDefectOduTcmA.setDescription('Locked Defect ODU TCM Instance A')
alarmLockedDefectOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 155))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmB.setStatus('current')
if mibBuilder.loadTexts: alarmLockedDefectOduTcmB.setDescription('Locked Defect ODU TCM Instance B')
alarmLockedDefectOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 156))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmC.setStatus('current')
if mibBuilder.loadTexts: alarmLockedDefectOduTcmC.setDescription('Locked Defect ODU TCM Instance C')
alarmLinkControlProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 157))
if mibBuilder.loadTexts: alarmLinkControlProtocolFailure.setStatus('current')
if mibBuilder.loadTexts: alarmLinkControlProtocolFailure.setDescription('Link Control Protocol setup error or timeout')
alarmLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 158))
if mibBuilder.loadTexts: alarmLinkDown.setStatus('current')
if mibBuilder.loadTexts: alarmLinkDown.setDescription('Failure of External Linkage')
alarmAutoShutdownSendingAisLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 159))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisLine.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisLine.setDescription('Auto Shutdown (L-AIS)')
alarmAutoShutdownSendingAisOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 160))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOdu.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOdu.setDescription('Auto Shutdown (ODU-AIS)')
alarmAutoShutdownSendingAisOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 161))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOpu.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOpu.setDescription('Auto Shutdown (OPU-AIS)')
alarmClientFailForwarding = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 162))
if mibBuilder.loadTexts: alarmClientFailForwarding.setStatus('current')
if mibBuilder.loadTexts: alarmClientFailForwarding.setDescription('Forwarding of Client Failure')
alarmAutoShutdownAls = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 163))
if mibBuilder.loadTexts: alarmAutoShutdownAls.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownAls.setDescription('Auto Shutdown (ALS)')
alarmAutoAmpShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 164))
if mibBuilder.loadTexts: alarmAutoAmpShutdown.setStatus('current')
if mibBuilder.loadTexts: alarmAutoAmpShutdown.setDescription('AMP auto shut down due to having no optical service (CRS)')
alarmAutoShutdownAmpAps = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 165))
if mibBuilder.loadTexts: alarmAutoShutdownAmpAps.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownAmpAps.setDescription('Auto Shutdown on Network Tx fiber due to LOS on Network Rx fiber (AMP-APS enabled)')
alarmAseTableBuild = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 166))
if mibBuilder.loadTexts: alarmAseTableBuild.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableBuild.setDescription('Auto shutdown due to missing ASE table')
alarmAutoShutdownOpuClientSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 167))
if mibBuilder.loadTexts: alarmAutoShutdownOpuClientSignalFail.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownOpuClientSignalFail.setDescription('Automatic Shutdown - Client Signal Fail transmit (LKDO-CSF)')
alarmAutoShutdownSendingEPC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 168))
if mibBuilder.loadTexts: alarmAutoShutdownSendingEPC.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingEPC.setDescription('Auto Shutdown (EPC)')
alarmAutoShutdownSendingLckOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 169))
if mibBuilder.loadTexts: alarmAutoShutdownSendingLckOdu.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingLckOdu.setDescription('Auto Shutdown (ODU-LCK)')
alarmAutoShutdownSendingOciOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 170))
if mibBuilder.loadTexts: alarmAutoShutdownSendingOciOdu.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingOciOdu.setDescription('Auto Shutdown (ODU-OCI)')
alarmAutoShutdownLaserOffDueToErrFwd = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 171))
if mibBuilder.loadTexts: alarmAutoShutdownLaserOffDueToErrFwd.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownLaserOffDueToErrFwd.setDescription('Forward ALS')
alarmAutoShutdownTxRxLasersDueToHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 172))
if mibBuilder.loadTexts: alarmAutoShutdownTxRxLasersDueToHighTemp.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownTxRxLasersDueToHighTemp.setDescription('Facility autonomously shut down with Transmitter and Receiver off due to temperature.')
alarmLocalFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 173))
if mibBuilder.loadTexts: alarmLocalFault.setStatus('current')
if mibBuilder.loadTexts: alarmLocalFault.setDescription('Local Fault Sequence ordered_set received by the local PHY')
alarmLocalOscLevelAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 174))
if mibBuilder.loadTexts: alarmLocalOscLevelAbnormal.setStatus('current')
if mibBuilder.loadTexts: alarmLocalOscLevelAbnormal.setDescription('Rx Laser Current Level Abnormal (used for Local Oscillator)')
alarmLossOfGfpFrame = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 175))
if mibBuilder.loadTexts: alarmLossOfGfpFrame.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfGfpFrame.setDescription('GFP LOF')
alarmLossOfFrameMux = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 176))
if mibBuilder.loadTexts: alarmLossOfFrameMux.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfFrameMux.setDescription('Multiplexer Loss of Frame')
alarmLossOfFrameOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 177))
if mibBuilder.loadTexts: alarmLossOfFrameOtu.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfFrameOtu.setDescription('OTU LOF')
alarmLossOfFrame = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 178))
if mibBuilder.loadTexts: alarmLossOfFrame.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfFrame.setDescription('Section (SONET) / Regeneration Section (SDH) - Loss of Frame')
alarmLossOfFrameLossOfMultiFrameOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 179))
if mibBuilder.loadTexts: alarmLossOfFrameLossOfMultiFrameOdu.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfFrameLossOfMultiFrameOdu.setDescription('ODU LOF/LOM')
alarmLossOfLane = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 180))
if mibBuilder.loadTexts: alarmLossOfLane.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfLane.setDescription('Loss of Lane Alignment')
alarmLossofMultiframeLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 181))
if mibBuilder.loadTexts: alarmLossofMultiframeLowerOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmLossofMultiframeLowerOrderPath.setDescription('LO-Path Loss Of Multiframe Condition')
alarmLossOfMultiFrameOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 182))
if mibBuilder.loadTexts: alarmLossOfMultiFrameOtu.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfMultiFrameOtu.setDescription('OTU LOM')
alarmLossofMultiframeHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 183))
if mibBuilder.loadTexts: alarmLossofMultiframeHigherOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmLossofMultiframeHigherOrderPath.setDescription('Path LOM')
alarmLossOfPointerLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 184))
if mibBuilder.loadTexts: alarmLossOfPointerLowerOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfPointerLowerOrderPath.setDescription('Is this the same as LOF-LP')
alarmLossOfPointerHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 185))
if mibBuilder.loadTexts: alarmLossOfPointerHigherOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfPointerHigherOrderPath.setDescription('Path LOP')
alarmLosAttProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 186))
if mibBuilder.loadTexts: alarmLosAttProgress.setStatus('current')
if mibBuilder.loadTexts: alarmLosAttProgress.setDescription('Loss of Signal Attenuation finding in process')
alarmLossOsc = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 187))
if mibBuilder.loadTexts: alarmLossOsc.setStatus('current')
if mibBuilder.loadTexts: alarmLossOsc.setDescription('Loss Of OSC')
alarmGfpLossOfClientSig = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 188))
if mibBuilder.loadTexts: alarmGfpLossOfClientSig.setStatus('current')
if mibBuilder.loadTexts: alarmGfpLossOfClientSig.setDescription('GFP Loss Of Client Signal')
alarmLoopbackError = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 189))
if mibBuilder.loadTexts: alarmLoopbackError.setStatus('current')
if mibBuilder.loadTexts: alarmLoopbackError.setDescription('A loop in the PPP-IP path is detected')
alarmFacilityLoopback = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 190))
if mibBuilder.loadTexts: alarmFacilityLoopback.setStatus('current')
if mibBuilder.loadTexts: alarmFacilityLoopback.setDescription('External (Line) Loopback on Interface')
alarmLossofTandemConnectionOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 191))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmA.setStatus('current')
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmA.setDescription('Loss of Tandem Connection ODU Tandem Connection Monitoring Instane A')
alarmLossofTandemConnectionOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 192))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmB.setStatus('current')
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmB.setDescription('Loss of Tandem Connection ODU Tandem Connection Monitoring Instane B')
alarmLossofTandemConnectionOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 193))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmC.setStatus('current')
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmC.setDescription('Loss of Tandem Connection ODU Tandem Connection Monitoring Instane C')
alarmMansw = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 194))
if mibBuilder.loadTexts: alarmMansw.setStatus('current')
if mibBuilder.loadTexts: alarmMansw.setDescription('This condition will only be shown on the working entity, meaning the MANSW has switched traffic from the working entity to the protection entity.')
transientManualWorkingSwitchedBacktoWorking = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 195))
if mibBuilder.loadTexts: transientManualWorkingSwitchedBacktoWorking.setStatus('current')
if mibBuilder.loadTexts: transientManualWorkingSwitchedBacktoWorking.setDescription('Working Traffic (ACT) switched back to WKG facility from PROTN facility manually: sent by PROTN.')
transientManualWorkingSwitchedtoProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 196))
if mibBuilder.loadTexts: transientManualWorkingSwitchedtoProtection.setStatus('current')
if mibBuilder.loadTexts: transientManualWorkingSwitchedtoProtection.setDescription('Working Traffic (ACT) switched from Working facility to Protection facility manually: sent by WKG.')
alarmEquipmentNotAccepted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 197))
if mibBuilder.loadTexts: alarmEquipmentNotAccepted.setStatus('current')
if mibBuilder.loadTexts: alarmEquipmentNotAccepted.setDescription('The Plug cannot support any of the services provisionable on this card OR the Plug is unrecognizable')
alarmEquipmentNotApproved = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 198))
if mibBuilder.loadTexts: alarmEquipmentNotApproved.setStatus('current')
if mibBuilder.loadTexts: alarmEquipmentNotApproved.setDescription('The Plug is recognizable to the extent that service support can\n        be determined, but is not approved: this is susperseded by SGEO-RATE')
alarmCapabilityLevelMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 199))
if mibBuilder.loadTexts: alarmCapabilityLevelMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmCapabilityLevelMismatch.setDescription('Capability level mismatch')
alarmEquipmentMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 200))
if mibBuilder.loadTexts: alarmEquipmentMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmEquipmentMismatch.setDescription('The Plug is approved but does not match the specific Plug provisioned: this is superseded by MEA-APPROVE')
alarmEquipmentNotSupportedByPhysicalLayer = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 201))
if mibBuilder.loadTexts: alarmEquipmentNotSupportedByPhysicalLayer.setStatus('current')
if mibBuilder.loadTexts: alarmEquipmentNotSupportedByPhysicalLayer.setDescription('Equipment not Support Configured Physical Layer')
alarmMeaSwRevision = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 202))
if mibBuilder.loadTexts: alarmMeaSwRevision.setStatus('current')
if mibBuilder.loadTexts: alarmMeaSwRevision.setDescription('Mismatch of SW Revision')
alarmMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 203))
if mibBuilder.loadTexts: alarmMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmMismatch.setDescription('Non-Specific Mismatch. Equipment Not Match Provisioned Hardware')
alarmMidstageFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 204))
if mibBuilder.loadTexts: alarmMidstageFault.setStatus('current')
if mibBuilder.loadTexts: alarmMidstageFault.setDescription('Out of Service due to Midstage Fault.')
alarmMultiplexStructureIdentifierMismatchOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 205))
if mibBuilder.loadTexts: alarmMultiplexStructureIdentifierMismatchOPU.setStatus('current')
if mibBuilder.loadTexts: alarmMultiplexStructureIdentifierMismatchOPU.setDescription('Multiplex Structure Identifier Mismatch OPU')
alarmBackupNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 206))
if mibBuilder.loadTexts: alarmBackupNotResponding.setStatus('current')
if mibBuilder.loadTexts: alarmBackupNotResponding.setDescription('Not Responding')
alarmOpenConnectionIndicationOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 207))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOdu.setStatus('current')
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOdu.setDescription('Open Connection Indication ODU')
alarmOpenConnectionIndicationOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 208))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmA.setStatus('current')
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmA.setDescription('Open Connection Indication ODU Tandem Connection Monitoring A')
alarmOpenConnectionIndicationOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 209))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmB.setStatus('current')
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmB.setDescription('Open Connection Indication ODU Tandem Connection Monitoring B')
alarmOpenConnectionIndicationOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 210))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmC.setStatus('current')
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmC.setDescription('Open Connection Indication ODU Tandem Connection Monitoring C')
alarmOduTribMsiMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 211))
if mibBuilder.loadTexts: alarmOduTribMsiMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmOduTribMsiMismatch.setDescription('Tributary Port no and ODTU type do not match in provisioned time slots')
alarmTransmitterDisabledOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 212))
if mibBuilder.loadTexts: alarmTransmitterDisabledOff.setStatus('current')
if mibBuilder.loadTexts: alarmTransmitterDisabledOff.setDescription('Disablement of Management Access with Transmitter OFF')
alarmReceiverDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 213))
if mibBuilder.loadTexts: alarmReceiverDisabled.setStatus('current')
if mibBuilder.loadTexts: alarmReceiverDisabled.setDescription('Disablement of Management Access with Receiver OFF')
alarmOpmAbnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 214))
if mibBuilder.loadTexts: alarmOpmAbnormalCondition.setStatus('current')
if mibBuilder.loadTexts: alarmOpmAbnormalCondition.setDescription('OPM condition is abnormal (degraded)')
alarmFaultOnOpm = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 215))
if mibBuilder.loadTexts: alarmFaultOnOpm.setStatus('current')
if mibBuilder.loadTexts: alarmFaultOnOpm.setDescription('Fault detected on OPM')
alarmThresOptPowerCtrlFailureHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 216))
if mibBuilder.loadTexts: alarmThresOptPowerCtrlFailureHigh.setStatus('current')
if mibBuilder.loadTexts: alarmThresOptPowerCtrlFailureHigh.setDescription('Optical Power Control Failure High Threshold')
alarmThresOptPowerCtrlFailureLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 217))
if mibBuilder.loadTexts: alarmThresOptPowerCtrlFailureLow.setStatus('current')
if mibBuilder.loadTexts: alarmThresOptPowerCtrlFailureLow.setDescription('Optical Power Control Failure Low Threshold')
alarmTxPowerLimited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 218))
if mibBuilder.loadTexts: alarmTxPowerLimited.setStatus('current')
if mibBuilder.loadTexts: alarmTxPowerLimited.setDescription('The optical output power reached limit')
alarmOscOpticalPowerControlFailHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 219))
if mibBuilder.loadTexts: alarmOscOpticalPowerControlFailHigh.setStatus('current')
if mibBuilder.loadTexts: alarmOscOpticalPowerControlFailHigh.setDescription('OSC Optical Power Control Failure High Threshold')
alarmOscOpticalPowerControlFailLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 220))
if mibBuilder.loadTexts: alarmOscOpticalPowerControlFailLow.setStatus('current')
if mibBuilder.loadTexts: alarmOscOpticalPowerControlFailLow.setDescription('OSC Optical Power Control Failure Low Threshold')
alarmOTDRMeasuringinProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 221))
if mibBuilder.loadTexts: alarmOTDRMeasuringinProgress.setStatus('current')
if mibBuilder.loadTexts: alarmOTDRMeasuringinProgress.setDescription('')
alarmEncryptionModuleCryPasswdError = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 222))
if mibBuilder.loadTexts: alarmEncryptionModuleCryPasswdError.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionModuleCryPasswdError.setDescription('3 invalid CRYPW entered; The Module refuses input of CRYPW for 10 minutes')
alarmPeerLink = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 223))
if mibBuilder.loadTexts: alarmPeerLink.setStatus('current')
if mibBuilder.loadTexts: alarmPeerLink.setDescription('Failure of Internal Link or Link Protocol (could be protocol incompatibility) between cards in Protection or Regeneration Pair or between Encryption cards')
alarmPilotReceiveLevelHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 224))
if mibBuilder.loadTexts: alarmPilotReceiveLevelHigh.setStatus('current')
if mibBuilder.loadTexts: alarmPilotReceiveLevelHigh.setDescription('Pilot receive level is high')
alarmLossOfPilotSignal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 225))
if mibBuilder.loadTexts: alarmLossOfPilotSignal.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfPilotSignal.setDescription('Loss of Pilot Signal')
alarmPayloadMismatchGfp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 226))
if mibBuilder.loadTexts: alarmPayloadMismatchGfp.setStatus('current')
if mibBuilder.loadTexts: alarmPayloadMismatchGfp.setDescription('GFP Payload Mismatch')
alarmPayloadMismatchLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 227))
if mibBuilder.loadTexts: alarmPayloadMismatchLowerOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmPayloadMismatchLowerOrderPath.setDescription('LO-Path Payload Mismatch')
alarmPayloadMismatchOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 228))
if mibBuilder.loadTexts: alarmPayloadMismatchOPU.setStatus('current')
if mibBuilder.loadTexts: alarmPayloadMismatchOPU.setDescription('OPU Payload Mismatch')
alarmPayloadMismatchHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 229))
if mibBuilder.loadTexts: alarmPayloadMismatchHigherOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmPayloadMismatchHigherOrderPath.setDescription('SONET/SDH Path Payload Mismatch')
alarmProvPayloadMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 230))
if mibBuilder.loadTexts: alarmProvPayloadMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmProvPayloadMismatch.setDescription('Provisioning payload mismatch alarm')
alarmPrbsLossOfSeqSynch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 231))
if mibBuilder.loadTexts: alarmPrbsLossOfSeqSynch.setStatus('current')
if mibBuilder.loadTexts: alarmPrbsLossOfSeqSynch.setDescription('Loss of PRBS Pattern')
alarmPrbsRcvActivated = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 232))
if mibBuilder.loadTexts: alarmPrbsRcvActivated.setStatus('current')
if mibBuilder.loadTexts: alarmPrbsRcvActivated.setDescription('PRBS Receive Activated')
alarmPrbsTrmtActivated = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 233))
if mibBuilder.loadTexts: alarmPrbsTrmtActivated.setStatus('current')
if mibBuilder.loadTexts: alarmPrbsTrmtActivated.setDescription('PRBS Transmit Activated')
alarmProtectionNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 234))
if mibBuilder.loadTexts: alarmProtectionNotAvailable.setStatus('current')
if mibBuilder.loadTexts: alarmProtectionNotAvailable.setDescription('(Protection Not Available)\n        In the case of Channel Card Protection: due to unequipped or mismatched partner equipment - sent by active facility.\n        In the case of HST Channel Protection: due to unequipped or mismatched partner plug - sent by active facility;\n        on an OLM, the pilot laser has been switched off for a defined perion to allow an Optical Time Domain Reflectormeter to be deployed.\n        In the case of Controller Protection: due to partner OOS-AU or OOS-MA, DSBLD (Protection Not Available)')
alarmPowerSupplyUnitFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 235))
if mibBuilder.loadTexts: alarmPowerSupplyUnitFailure.setStatus('current')
if mibBuilder.loadTexts: alarmPowerSupplyUnitFailure.setDescription('')
alarmMaxPowerConsProvModulesToHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 236))
if mibBuilder.loadTexts: alarmMaxPowerConsProvModulesToHigh.setStatus('current')
if mibBuilder.loadTexts: alarmMaxPowerConsProvModulesToHigh.setDescription('The maximum power consumption of all provisioned equipment exceeds the capability of a single PSU in the shelf.')
alarmMaxPowerConsEquipModulesToHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 237))
if mibBuilder.loadTexts: alarmMaxPowerConsEquipModulesToHigh.setStatus('current')
if mibBuilder.loadTexts: alarmMaxPowerConsEquipModulesToHigh.setDescription('The maximum power consumption of the installed equipment exceeds the capability of a single PSU in the shelf.')
alarmPowerMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 238))
if mibBuilder.loadTexts: alarmPowerMissing.setStatus('current')
if mibBuilder.loadTexts: alarmPowerMissing.setDescription('Power Unit Missing')
alarmRemoteDefectIndicationLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 239))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationLine.setStatus('current')
if mibBuilder.loadTexts: alarmRemoteDefectIndicationLine.setDescription('Line / Multiplex Section RDI')
alarmRemoteDefectIndicationLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 240))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationLowerOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmRemoteDefectIndicationLowerOrderPath.setDescription('LO-Path Remote Defect Indication')
alarmRemoteDefectIndicationHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 241))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationHigherOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmRemoteDefectIndicationHigherOrderPath.setDescription('Path RDI')
transientPmSnapshotEnded = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 242))
if mibBuilder.loadTexts: transientPmSnapshotEnded.setStatus('current')
if mibBuilder.loadTexts: transientPmSnapshotEnded.setDescription('Reference value save end')
alarmDcnCommunicationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 243))
if mibBuilder.loadTexts: alarmDcnCommunicationFail.setStatus('current')
if mibBuilder.loadTexts: alarmDcnCommunicationFail.setDescription('The connection to the shelf is dysfunctional or the connection to the module within the shelf is dysfunctional')
alarmNtpForSchedEqlzRequired = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 244))
if mibBuilder.loadTexts: alarmNtpForSchedEqlzRequired.setStatus('current')
if mibBuilder.loadTexts: alarmNtpForSchedEqlzRequired.setDescription('Scheduled Equalization requires NTP to be enabled')
alarmSignalDegradeOlm = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 245))
if mibBuilder.loadTexts: alarmSignalDegradeOlm.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeOlm.setDescription('Signal Degrade')
alarmSignalDegradeLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 246))
if mibBuilder.loadTexts: alarmSignalDegradeLine.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeLine.setDescription('Line/Mux Section SD alarm; related to a configurable threshold')
alarmSignalDegradationonLinkVector = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 247))
if mibBuilder.loadTexts: alarmSignalDegradationonLinkVector.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradationonLinkVector.setDescription('Signal Degradation on Link Vector. Superseeded by SF-LINK.')
alarmSignalDegradeOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 248))
if mibBuilder.loadTexts: alarmSignalDegradeOdu.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeOdu.setDescription('ODU Signal Degrade alarm; Related to a configurable threshold')
alarmSignalDegradeOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 249))
if mibBuilder.loadTexts: alarmSignalDegradeOtu.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeOtu.setDescription('OTU Signal Degrade alarm; related to a configurable threshold')
alarmPcsSignalDegrade = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 250))
if mibBuilder.loadTexts: alarmPcsSignalDegrade.setStatus('current')
if mibBuilder.loadTexts: alarmPcsSignalDegrade.setDescription('Pysical Coding Sublayer Signal Degrade alarm; related to a configurable threshold')
alarmSignalDegradeScn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 251))
if mibBuilder.loadTexts: alarmSignalDegradeScn.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeScn.setDescription('Sec/RS signal degrade alarm; related to a configurable threshold')
alarmSignalDegradeOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 252))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmA.setDescription('Signal Degrade ODU Tandem Connection Monitoring Instance A. Related to a configurable threshold')
alarmSignalDegradeOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 253))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmB.setDescription('Signal Degrade ODU Tandem Connection Monitoring Instance B. Related to a configurable threshold')
alarmSignalDegradeOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 254))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmC.setDescription('Signal Degrade ODU Tandem Connection Monitoring Instance C. Related to a configurable threshold')
alarmEncryptionModuleSelfTestFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 255))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestFail.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestFail.setDescription('Noncritical selftest failed')
alarmEncryptionModuleSelfTestFailCritical = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 256))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestFailCritical.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestFailCritical.setDescription('Encrytion critical selftest failed')
alarmSignalFailureOnLink = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 257))
if mibBuilder.loadTexts: alarmSignalFailureOnLink.setStatus('current')
if mibBuilder.loadTexts: alarmSignalFailureOnLink.setDescription('Signal Failure on Link')
alarmSignalFailureonLinkVector = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 258))
if mibBuilder.loadTexts: alarmSignalFailureonLinkVector.setStatus('current')
if mibBuilder.loadTexts: alarmSignalFailureonLinkVector.setDescription('Signal Fail Link Vector')
alarmSignalFailureOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 259))
if mibBuilder.loadTexts: alarmSignalFailureOPU.setStatus('current')
if mibBuilder.loadTexts: alarmSignalFailureOPU.setDescription('This is a very severe signal degradation or loss')
alarmClientOutage = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 260))
if mibBuilder.loadTexts: alarmClientOutage.setStatus('current')
if mibBuilder.loadTexts: alarmClientOutage.setDescription('Aggregate level failure')
alarmFacilityDataRateNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 261))
if mibBuilder.loadTexts: alarmFacilityDataRateNotSupported.setStatus('current')
if mibBuilder.loadTexts: alarmFacilityDataRateNotSupported.setDescription('The Plug inserted cannot support the actual service provisioned on this card: this is superseded by the above')
transientCryptoSessKeyLifetimeChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 262))
if mibBuilder.loadTexts: transientCryptoSessKeyLifetimeChanged.setStatus('current')
if mibBuilder.loadTexts: transientCryptoSessKeyLifetimeChanged.setDescription('Change of session key lifetime')
alarmLossofSequenceLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 263))
if mibBuilder.loadTexts: alarmLossofSequenceLowerOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmLossofSequenceLowerOrderPath.setDescription('LO-Path Loss Of Sequence')
alarmLossofSequenceHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 264))
if mibBuilder.loadTexts: alarmLossofSequenceHigherOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmLossofSequenceHigherOrderPath.setDescription('Path Loss Of Sequence')
alarmServerSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 265))
if mibBuilder.loadTexts: alarmServerSignalFail.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFail.setDescription('All member ports signals have failed')
alarmServerSignalFailureGfp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 266))
if mibBuilder.loadTexts: alarmServerSignalFailureGfp.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailureGfp.setDescription('GFP Server Signal Failure')
alarmServerSignalFailureODU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 267))
if mibBuilder.loadTexts: alarmServerSignalFailureODU.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailureODU.setDescription('ODU Server Signal Failure')
alarmServerSignalFailurePath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 268))
if mibBuilder.loadTexts: alarmServerSignalFailurePath.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailurePath.setDescription('SONET/SDH Path Server Signal Failure')
alarmServerSignalFailureSectionRS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 269))
if mibBuilder.loadTexts: alarmServerSignalFailureSectionRS.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailureSectionRS.setDescription('Section (SONET) / Regeneration Section (SDH) - Server Signal Failure')
transientProtSwToDuplexCompl = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 270))
if mibBuilder.loadTexts: transientProtSwToDuplexCompl.setStatus('current')
if mibBuilder.loadTexts: transientProtSwToDuplexCompl.setDescription('Switch to Partner Controller complete')
transientProtSwToDuplexFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 271))
if mibBuilder.loadTexts: transientProtSwToDuplexFail.setStatus('current')
if mibBuilder.loadTexts: transientProtSwToDuplexFail.setDescription('Switch to Partner Controller failed')
alarmSwitchToDuplexInhibited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 272))
if mibBuilder.loadTexts: alarmSwitchToDuplexInhibited.setStatus('current')
if mibBuilder.loadTexts: alarmSwitchToDuplexInhibited.setDescription('Switch-Over to Partner Controller inhibited')
transientProtSwToDuplexStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 273))
if mibBuilder.loadTexts: transientProtSwToDuplexStart.setStatus('current')
if mibBuilder.loadTexts: transientProtSwToDuplexStart.setDescription('Switch to Partner Controller started')
alarmSwitchFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 274))
if mibBuilder.loadTexts: alarmSwitchFailed.setStatus('current')
if mibBuilder.loadTexts: alarmSwitchFailed.setDescription('Failure to Respond to Switch/Bridge Request within 50 ms')
transientSwResetReload = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 275))
if mibBuilder.loadTexts: transientSwResetReload.setStatus('current')
if mibBuilder.loadTexts: transientSwResetReload.setDescription('System Restart-RELOAD')
alarmCurrentTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 276))
if mibBuilder.loadTexts: alarmCurrentTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmCurrentTooHigh.setDescription('Output Current Too High')
alarmAttOnReceiverFiberHigherThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 277))
if mibBuilder.loadTexts: alarmAttOnReceiverFiberHigherThanMonitor.setStatus('current')
if mibBuilder.loadTexts: alarmAttOnReceiverFiberHigherThanMonitor.setDescription('Attenuation Rx Too High')
alarmAttOnReceiverFiberLowerThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 278))
if mibBuilder.loadTexts: alarmAttOnReceiverFiberLowerThanMonitor.setStatus('current')
if mibBuilder.loadTexts: alarmAttOnReceiverFiberLowerThanMonitor.setDescription('Attenuation Rx Too Low')
alarmAttOnTransmitterFiberHigherThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 279))
if mibBuilder.loadTexts: alarmAttOnTransmitterFiberHigherThanMonitor.setStatus('current')
if mibBuilder.loadTexts: alarmAttOnTransmitterFiberHigherThanMonitor.setDescription('Attenuation Tx Too High')
alarmAttOnTransmitterFiberLowerThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 280))
if mibBuilder.loadTexts: alarmAttOnTransmitterFiberLowerThanMonitor.setStatus('current')
if mibBuilder.loadTexts: alarmAttOnTransmitterFiberLowerThanMonitor.setDescription('Attenuation Tx Too Low')
alarmThres15MinExceededOduBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 281))
if mibBuilder.loadTexts: alarmThres15MinExceededOduBbe.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduBbe.setDescription('Background Block Errors ODU Section Monitoring')
transientThres1DayExceededOduBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 282))
if mibBuilder.loadTexts: transientThres1DayExceededOduBbe.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduBbe.setDescription('Background Block Errors ODU Section Monitoring')
alarmThres15MinExceededOtuBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 283))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuBbe.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOtuBbe.setDescription('Background Block Errors OTU Section Monitoring')
transientThres1DayExceededOtuBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 284))
if mibBuilder.loadTexts: transientThres1DayExceededOtuBbe.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOtuBbe.setDescription('Background Block Errors OTU Section Monitoring')
alarmThres15MinExceededOduTcmABbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 285))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmABbe.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmABbe.setDescription('Background Block Errors ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmABbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 286))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmABbe.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmABbe.setDescription('Background Block Errors ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmBBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 287))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBBbe.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBBbe.setDescription('Background Block Errors ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmBBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 288))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBBbe.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBBbe.setDescription('Background Block Errors ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmCBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 289))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCBbe.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCBbe.setDescription('Background Block Errors ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmCBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 290))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCBbe.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCBbe.setDescription('Background Block Errors ODU Tandem Connection Monitoring')
alarmThres15MinExceededFecBERCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 291))
if mibBuilder.loadTexts: alarmThres15MinExceededFecBERCE.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededFecBERCE.setDescription('Bit error rate before FEC 15 minutes high threshold crossed')
transientThres1DayExceededFecBERCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 292))
if mibBuilder.loadTexts: transientThres1DayExceededFecBERCE.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededFecBERCE.setDescription('Bit error rate before FEC 1day high threshold crossed')
alarmBrPwrRxTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 293))
if mibBuilder.loadTexts: alarmBrPwrRxTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmBrPwrRxTooHigh.setDescription('Backreflection Rx too High')
alarmChromaticDispersionTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 294))
if mibBuilder.loadTexts: alarmChromaticDispersionTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmChromaticDispersionTooHigh.setDescription('Chromatic Dispersion too High')
alarmChromaticDispersionTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 295))
if mibBuilder.loadTexts: alarmChromaticDispersionTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmChromaticDispersionTooLow.setDescription('Chromatic Dispersion too Low')
alarmDispersionCompensationTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 296))
if mibBuilder.loadTexts: alarmDispersionCompensationTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmDispersionCompensationTooHigh.setDescription('Chromatic Dispersion Compensation too High')
alarmDispersionCompensationTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 297))
if mibBuilder.loadTexts: alarmDispersionCompensationTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmDispersionCompensationTooLow.setDescription('Chromatic Dispersion Compensation too Low')
alarmThres15MinExceededFecCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 298))
if mibBuilder.loadTexts: alarmThres15MinExceededFecCE.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededFecCE.setDescription('FEC Corrected Errors Exceeded 15 Minute Threshold')
transientThres1DayExceededFecCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 299))
if mibBuilder.loadTexts: transientThres1DayExceededFecCE.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededFecCE.setDescription('FEC Corrected Errors Exceeded Day Threshold')
alarmCarrierFreqOffsetTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 300))
if mibBuilder.loadTexts: alarmCarrierFreqOffsetTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmCarrierFreqOffsetTooHigh.setDescription('Carrier Frequency Offset too High')
alarmCarrierFreqOffsetTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 301))
if mibBuilder.loadTexts: alarmCarrierFreqOffsetTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmCarrierFreqOffsetTooLow.setDescription('Carrier Frequency Offset too Low')
alarmThres15MinExceededSonetLineCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 302))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineCV.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineCV.setDescription('Coding Violations Line')
transientThres1DayExceededSonetLineCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 303))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineCV.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineCV.setDescription('Coding Violations Line')
alarmThres15MinExceededPhysConvCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 304))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCV.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCV.setDescription('Coding Violations Physical Coding Layer')
transientThres1DayExceededPhysConvCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 305))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCV.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCV.setDescription('Coding Violations Physical Coding Layer')
alarmThres15MinExceededSonetSectCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 306))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectCV.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectCV.setDescription('Coding Violations Section')
transientThres1DayExceededSonetSectCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 307))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectCV.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectCV.setDescription('Coding Violations Section')
alarmThres15MinExceededPhysConvDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 308))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvDE.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvDE.setDescription('Disparity Errors Physical Coding Layer')
transientThres1DayExceededPhysConvDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 309))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvDE.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvDE.setDescription('Disparity Errors Physical Coding Layer')
alarmDifferentialGroupDelayTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 310))
if mibBuilder.loadTexts: alarmDifferentialGroupDelayTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmDifferentialGroupDelayTooHigh.setDescription('Differential Group Delay too High')
alarmThres15MinExceededFecES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 311))
if mibBuilder.loadTexts: alarmThres15MinExceededFecES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededFecES.setDescription('Errored Seconds FEC OTU Monitoring')
transientThres1DayExceededFecES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 312))
if mibBuilder.loadTexts: transientThres1DayExceededFecES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededFecES.setDescription('Errored Seconds FEC OTU Monitoring')
alarmThres15MinExceededSonetLineES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 313))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineES.setDescription('Errored Seconds Line')
transientThres1DayExceededSonetLineES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 314))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineES.setDescription('Errored Seconds Line')
alarmThres15MinExceededOduES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 315))
if mibBuilder.loadTexts: alarmThres15MinExceededOduES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduES.setDescription('Errored Seconds ODU Path Monitoring')
transientThres1DayExceededOduES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 316))
if mibBuilder.loadTexts: transientThres1DayExceededOduES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduES.setDescription('Errored Seconds ODU Path Monitoring')
alarmThres15MinExceededOtuES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 317))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOtuES.setDescription('Errored Seconds OTU Section Monitoring')
transientThres1DayExceededOtuES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 318))
if mibBuilder.loadTexts: transientThres1DayExceededOtuES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOtuES.setDescription('Errored Seconds OTU Section Monitoring')
alarmThres15MinExceededPhysConvES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 319))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvES.setDescription('Errored Seconds Physical Coding Layer')
transientThres1DayExceededPhysConvES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 320))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvES.setDescription('Errored Seconds Physical Coding Layer')
alarmThres15MinExceededSonetSectES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 321))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectES.setDescription('Errored Seconds Section')
transientThres1DayExceededSonetSectES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 322))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectES.setDescription('This is a very severe degradation BER This is a very severe degradation BER Errored Seconds>Errored Seconds Section>= 10**-3 Section= 10**-3')
alarmThres15MinExceededOduTcmAES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 323))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmAES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmAES.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmAES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 324))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmAES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmAES.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmBES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 325))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBES.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmBES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 326))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBES.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmCES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 327))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCES.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmCES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 328))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCES.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
alarmLatencyTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 329))
if mibBuilder.loadTexts: alarmLatencyTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmLatencyTooHigh.setDescription('TCA -Round Trip Delay Too High')
alarmLatencyTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 330))
if mibBuilder.loadTexts: alarmLatencyTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmLatencyTooLow.setDescription('TCA -Round trip delay Too Low')
alarmLaserBiasCurrentNormalizedtooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 331))
if mibBuilder.loadTexts: alarmLaserBiasCurrentNormalizedtooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmLaserBiasCurrentNormalizedtooHigh.setDescription('TCA - Laser Bias Current Level too High. Fixed threshold has been crossed.')
alarmLocalOscTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 332))
if mibBuilder.loadTexts: alarmLocalOscTemperatureTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmLocalOscTemperatureTooHigh.setDescription('Rx Laser used for Local Oscillator Temperature High')
alarmLocalOscTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 333))
if mibBuilder.loadTexts: alarmLocalOscTemperatureTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmLocalOscTemperatureTooLow.setDescription('Rx Laser used for Local Oscillator Temperature Low')
alarmPumpLaser1TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 334))
if mibBuilder.loadTexts: alarmPumpLaser1TempTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser1TempTooHigh.setDescription('TCA - Fixed high threshold of Laser 1 Temperature has been crossed.')
alarmPumpLaser1TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 335))
if mibBuilder.loadTexts: alarmPumpLaser1TempTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser1TempTooLow.setDescription('TCA - Fixed low threshold of Laser 1 Temperature has been crossed.')
alarmPumpLaser2TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 336))
if mibBuilder.loadTexts: alarmPumpLaser2TempTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser2TempTooHigh.setDescription('TCA - Fixed high threshold of Laser 2 Temperature has been crossed.')
alarmPumpLaser2TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 337))
if mibBuilder.loadTexts: alarmPumpLaser2TempTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser2TempTooLow.setDescription('TCA - Fixed low threshold of Laser 2 Temperature has been crossed.')
alarmPumpLaser3TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 338))
if mibBuilder.loadTexts: alarmPumpLaser3TempTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser3TempTooHigh.setDescription('TCA - Fixed high threshold of Laser 3 Temperature has been crossed.')
alarmPumpLaser3TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 339))
if mibBuilder.loadTexts: alarmPumpLaser3TempTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser3TempTooLow.setDescription('TCA - Fixed low threshold of Laser 3 Temperature has been crossed.')
alarmPumpLaser4TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 340))
if mibBuilder.loadTexts: alarmPumpLaser4TempTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser4TempTooHigh.setDescription('TCA - Fixed high threshold of Laser 4 Temperature has been crossed.')
alarmPumpLaser4TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 341))
if mibBuilder.loadTexts: alarmPumpLaser4TempTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser4TempTooLow.setDescription('TCA - Fixed low threshold of Laser 4 Temperature has been crossed.')
alarmOscPwrTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 342))
if mibBuilder.loadTexts: alarmOscPwrTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmOscPwrTooHigh.setDescription('Optical Supervisory Channel Optical Power High Threshold Exceeded')
alarmOscPwrTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 343))
if mibBuilder.loadTexts: alarmOscPwrTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmOscPwrTooLow.setDescription('Optical Supervisory Channel Optical Power Low Threshold Exceeded')
alarmRamanPumpPwrTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 344))
if mibBuilder.loadTexts: alarmRamanPumpPwrTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmRamanPumpPwrTooHigh.setDescription('Pump Laser Power Fixed High Threshold Exceeded')
alarmRamanPumpPwrTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 345))
if mibBuilder.loadTexts: alarmRamanPumpPwrTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmRamanPumpPwrTooLow.setDescription('Pump Laser Power Fixed Low Threshold Exceeded')
alarmRoundTripDelayTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 346))
if mibBuilder.loadTexts: alarmRoundTripDelayTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmRoundTripDelayTooHigh.setDescription('Round Trip Delay High Threshold Exceeded')
alarmRoundTripDelayTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 347))
if mibBuilder.loadTexts: alarmRoundTripDelayTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmRoundTripDelayTooLow.setDescription('Round Trip Delay Low Threshold Exceeded')
alarmThres15MinExceededSonetSectSEFS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 348))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectSEFS.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectSEFS.setDescription('Severely Errored Framing Seconds Section 15 Minute Threshold Exceeded')
transientThres1DayExceededSonetSectSEFS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 349))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectSEFS.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectSEFS.setDescription('Severely Errored Framing Seconds Section 1 Day Threshold Exceeded')
alarmThres15MinExceededFecSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 350))
if mibBuilder.loadTexts: alarmThres15MinExceededFecSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededFecSES.setDescription('Severely Errored Seconds FEC 15 Minute Threshold Exceeded')
transientThres1DayExceededFecSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 351))
if mibBuilder.loadTexts: transientThres1DayExceededFecSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededFecSES.setDescription('Severely Errored Seconds FEC 1 Day Threshold Exceeded')
alarmThres15MinExceededSonetLineSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 352))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineSES.setDescription('Severely Errored Seconds Line 15 Minute Threshold Exceeded')
transientThres1DayExceededSonetLineSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 353))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineSES.setDescription('Severely Errored Seconds Line 1 Day Threshold Exceeded')
alarmThres15MinExceededOduSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 354))
if mibBuilder.loadTexts: alarmThres15MinExceededOduSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduSES.setDescription('Severely Errored Seconds ODU Path 15 Minute Threshold Exceeded')
transientThres1DayExceededOduSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 355))
if mibBuilder.loadTexts: transientThres1DayExceededOduSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduSES.setDescription('Severely Errored Seconds ODU Path 1 Day Threshold Exceeded')
alarmThres15MinExceededOtuSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 356))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOtuSES.setDescription('Severely Errored Seconds OTU Section 15 Minute Threshold Exceeded')
transientThres1DayExceededOtuSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 357))
if mibBuilder.loadTexts: transientThres1DayExceededOtuSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOtuSES.setDescription('Severely Errored Seconds OTU Section 1 Day Threshold Exceeded')
alarmThres15MinExceededSonetSectSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 358))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectSES.setDescription('Severely Errored Seconds Section 15 Minute Threshold Exceeded')
transientThres1DayExceededSonetSectSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 359))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectSES.setDescription('Severely Errored Seconds Section 1 Day Threshold Exceeded')
alarmThres15MinExceededOduTcmASES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 360))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmASES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmASES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring A (TCM_A) 15 Minute Threshold Exceeded')
transientThres1DayExceededOduTcmASES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 361))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmASES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmASES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring A (TCM_A) 1 Day Threshold Exceeded')
alarmThres15MinExceededOduTcmBSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 362))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBSES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring B (TCM_B) 15 Minute Threshold Exceeded')
transientThres1DayExceededOduTcmBSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 363))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBSES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring B (TCM_B) 1 Day Threshold Exceeded')
alarmThres15MinExceededOduTcmCSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 364))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCSES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring C (TCM_C) 15 Minute Threshold Exceeded')
transientThres1DayExceededOduTcmCSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 365))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCSES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring C (TCM_C) 1 Day Threshold Exceeded')
alarmLogicalLanesSkewTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 366))
if mibBuilder.loadTexts: alarmLogicalLanesSkewTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmLogicalLanesSkewTooHigh.setDescription('Skew between the farthest apart lanes High Threshold Exceeded')
alarmSignalToNoiseRatioTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 367))
if mibBuilder.loadTexts: alarmSignalToNoiseRatioTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmSignalToNoiseRatioTooLow.setDescription('Signal-to-Noise Ratio Low Threshold Exceeded')
alarmSubModuleTempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 368))
if mibBuilder.loadTexts: alarmSubModuleTempTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmSubModuleTempTooHigh.setDescription('Relevant only when ERRFWD=LSROFF. Enables/disables theSubmodule Tempe\n        possibility to delay turning off the laser.Relevant only when ERRFWD=LSROFF. Enables/disables theSubmodule Temperature too High\n        possibility to delay turning off the laser.\n        This applies to the case when turning off the laserrature too High\n        is done  as an error forwarding mechanism.\n        This applies to the case when turning off the laser\n        is done  as an error forwarding mechanism.')
alarmTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 369))
if mibBuilder.loadTexts: alarmTemperatureTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmTemperatureTooHigh.setDescription('Temperature Fixed High Threshold Exceeded')
alarmTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 370))
if mibBuilder.loadTexts: alarmTemperatureTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmTemperatureTooLow.setDescription('Temperature Fixed Low Thershold Exceeded')
alarmThres15MinExceededSonetLineUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 371))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineUAS.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineUAS.setDescription('Unavailable Seconds Line/MS 15 Minute Threshold Exceeded')
transientThres1DayExceededSonetLineUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 372))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineUAS.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineUAS.setDescription('Unavailable Seconds Line/MS 1 Day Threshold Exceeded')
alarmThres15MinExceededOduUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 373))
if mibBuilder.loadTexts: alarmThres15MinExceededOduUAS.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduUAS.setDescription('Unavailable Seconds ODU Path 15 Minute Threshold Exceeded')
transientThres1DayExceededOduUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 374))
if mibBuilder.loadTexts: transientThres1DayExceededOduUAS.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduUAS.setDescription('Unavailable Seconds ODU Path 1 Day Threshold Exceeded')
alarmThres15MinExceededOtuUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 375))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuUAS.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOtuUAS.setDescription('Unavailable Seconds OTU Section 15 Minute Threshold Exceeded')
transientThres1DayExceededOtuUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 376))
if mibBuilder.loadTexts: transientThres1DayExceededOtuUAS.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOtuUAS.setDescription('Unavailable Seconds OTU Section 1 Day Threshold Exceeded')
alarmThres15MinExceededOduTcmAUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 377))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmAUAS.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmAUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring A (TCM_A) 15 Minute Threshold Exceeded')
transientThres1DayExceededOduTcmAUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 378))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmAUAS.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmAUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring A (TCM_A) 1 Day Threshold Exceeded')
alarmThres15MinExceededOduTcmBUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 379))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBUAS.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring B (TCM_B) 15 Minute Threshold Exceeded')
transientThres1DayExceededOduTcmBUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 380))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBUAS.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring B (TCM_B) 1 Day Threshold Exceeded')
alarmThres15MinExceededOduTcmCUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 381))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCUAS.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring C (TCM_C) 15 Minute Threshold Exceeded')
transientThres1DayExceededOduTcmCUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 382))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCUAS.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring C (TCM_C) 1 Day Threshold Exceeded')
alarmThres15MinExceededFecUBE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 383))
if mibBuilder.loadTexts: alarmThres15MinExceededFecUBE.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededFecUBE.setDescription('FEC Uncorrected Block Error 15 Minute Threshold Exceeded')
transientThres1DayExceededFecUBE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 384))
if mibBuilder.loadTexts: transientThres1DayExceededFecUBE.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededFecUBE.setDescription('FEC Uncorrected Block Error 1 Day Threshold Exceeded')
alarmEncryptionModuleTamperDetected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 385))
if mibBuilder.loadTexts: alarmEncryptionModuleTamperDetected.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionModuleTamperDetected.setDescription('Tamper event on Encryption module')
alarmThermoElectricCoolerEndOfLife = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 386))
if mibBuilder.loadTexts: alarmThermoElectricCoolerEndOfLife.setStatus('current')
if mibBuilder.loadTexts: alarmThermoElectricCoolerEndOfLife.setDescription('TEC End of Life')
alarmInputTIF = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 387))
if mibBuilder.loadTexts: alarmInputTIF.setStatus('current')
if mibBuilder.loadTexts: alarmInputTIF.setDescription('Telemetry interface alarm')
transientHardwareResetInputTIF = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 388))
if mibBuilder.loadTexts: transientHardwareResetInputTIF.setStatus('current')
if mibBuilder.loadTexts: transientHardwareResetInputTIF.setDescription('Telemetry interface alarm reset by hardware switch')
alarmTraceIdentifierMismatchOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 389))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOdu.setStatus('current')
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOdu.setDescription('ODU-Trace Identifier Mismatch')
alarmTraceIdentifierMismatchOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 390))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOtu.setStatus('current')
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOtu.setDescription('OTU-TIM')
alarmSectionTraceMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 391))
if mibBuilder.loadTexts: alarmSectionTraceMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmSectionTraceMismatch.setDescription('Section (SONET) / Regeneration Section (SDH) - Trace Identifier Mismatch')
alarmTraceIdentifierMismatchOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 392))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmA.setStatus('current')
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmA.setDescription('Trace Identifier Mismatch of ODU Tandem Connection Monitoring Instance A')
alarmTraceIdentifierMismatchOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 393))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmB.setStatus('current')
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmB.setDescription('Trace Identifier Mismatch of ODU Tandem Connection Monitoring Instance B')
alarmTraceIdentifierMismatchOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 394))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmC.setStatus('current')
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmC.setDescription('Trace Identifier Mismatch of ODU Tandem Connection Monitoring Instance C')
alarmTurnupFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 395))
if mibBuilder.loadTexts: alarmTurnupFailed.setStatus('current')
if mibBuilder.loadTexts: alarmTurnupFailed.setDescription('Turnup Operation failed')
alarmTurnupCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 396))
if mibBuilder.loadTexts: alarmTurnupCondition.setStatus('current')
if mibBuilder.loadTexts: alarmTurnupCondition.setDescription('Turnup Operation in progress')
alarmUnequippedLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 397))
if mibBuilder.loadTexts: alarmUnequippedLowerOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmUnequippedLowerOrderPath.setDescription('LO-Path Unequipped')
alarmUnequippedHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 398))
if mibBuilder.loadTexts: alarmUnequippedHigherOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmUnequippedHigherOrderPath.setDescription('Path UNEQ')
alarmVoaControlFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 399))
if mibBuilder.loadTexts: alarmVoaControlFail.setStatus('current')
if mibBuilder.loadTexts: alarmVoaControlFail.setDescription('The power or attenuation control of OPCM failed')
alarmVoltageOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 400))
if mibBuilder.loadTexts: alarmVoltageOutOfRange.setStatus('current')
if mibBuilder.loadTexts: alarmVoltageOutOfRange.setDescription('Voltage Out of Range')
alarmInputVoltageFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 401))
if mibBuilder.loadTexts: alarmInputVoltageFailure.setStatus('current')
if mibBuilder.loadTexts: alarmInputVoltageFailure.setDescription('Failure of Input Voltage')
alarmInputVoltageFailurePort1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 402))
if mibBuilder.loadTexts: alarmInputVoltageFailurePort1.setStatus('current')
if mibBuilder.loadTexts: alarmInputVoltageFailurePort1.setDescription('Input Voltage Failed to power input 1 or A')
alarmInputVoltageFailurePort2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 403))
if mibBuilder.loadTexts: alarmInputVoltageFailurePort2.setStatus('current')
if mibBuilder.loadTexts: alarmInputVoltageFailurePort2.setDescription('Input Voltage Failed to Power input 2 or B')
transientWorkingSwitchedBacktoWorking = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 404))
if mibBuilder.loadTexts: transientWorkingSwitchedBacktoWorking.setStatus('current')
if mibBuilder.loadTexts: transientWorkingSwitchedBacktoWorking.setDescription('Working Traffic (ACT) switched back to Working facility from Protection facility automatically: sent by PROTN.')
transientWorkingSwitchedtoProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 405))
if mibBuilder.loadTexts: transientWorkingSwitchedtoProtection.setStatus('current')
if mibBuilder.loadTexts: transientWorkingSwitchedtoProtection.setDescription('Working Traffic (ACT) switched from WKG facility to PROTN facility automatically, sent by WKG.')
alarmWtrTimerRunning = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 406))
if mibBuilder.loadTexts: alarmWtrTimerRunning.setStatus('current')
if mibBuilder.loadTexts: alarmWtrTimerRunning.setDescription('WTR timer is running')
alarmLossOfLaneOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 407))
if mibBuilder.loadTexts: alarmLossOfLaneOtu.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfLaneOtu.setDescription('OTU Loss of Lane Alignment')
alarmLossOfTestSeqSynchOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 408))
if mibBuilder.loadTexts: alarmLossOfTestSeqSynchOpu.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfTestSeqSynchOpu.setDescription('Loss of test Sequence Synchronization at OPU layer')
alarmLossOfMfiOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 409))
if mibBuilder.loadTexts: alarmLossOfMfiOpu.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfMfiOpu.setDescription('Loss of OPU Multiframe Indication for an OPU4 (LOOMFI per G.798)')
alarmOosDisabledLckOduTrmt = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 410))
if mibBuilder.loadTexts: alarmOosDisabledLckOduTrmt.setStatus('current')
if mibBuilder.loadTexts: alarmOosDisabledLckOduTrmt.setDescription('Disablement of Management Access with Transmitter Sending LCK')
alarmConfigurationMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 411))
if mibBuilder.loadTexts: alarmConfigurationMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmConfigurationMismatch.setDescription('Configuration Mismatch')
alarmOduAutoShutdownRxAIS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 412))
if mibBuilder.loadTexts: alarmOduAutoShutdownRxAIS.setStatus('current')
if mibBuilder.loadTexts: alarmOduAutoShutdownRxAIS.setDescription('Auto Shutdown (ODU-AIS-RCV)')
alarmOduAutoShutdownTxAIS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 413))
if mibBuilder.loadTexts: alarmOduAutoShutdownTxAIS.setStatus('current')
if mibBuilder.loadTexts: alarmOduAutoShutdownTxAIS.setDescription('Auto Shutdown (ODU-AIS-TRMT)')
alarmOosDisabledLckOduRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 414))
if mibBuilder.loadTexts: alarmOosDisabledLckOduRx.setStatus('current')
if mibBuilder.loadTexts: alarmOosDisabledLckOduRx.setDescription('Disablement of Management Access with sending LCK-ODU in Rx')
transientBootUpFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 415))
if mibBuilder.loadTexts: transientBootUpFailed.setStatus('current')
if mibBuilder.loadTexts: transientBootUpFailed.setDescription('Boot up failed')
transientBootUpCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 416))
if mibBuilder.loadTexts: transientBootUpCompleted.setStatus('current')
if mibBuilder.loadTexts: transientBootUpCompleted.setDescription('Boot up completed')
transientBootUpStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 417))
if mibBuilder.loadTexts: transientBootUpStarted.setStatus('current')
if mibBuilder.loadTexts: transientBootUpStarted.setDescription('Boot up started')
transientInstallFwpCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 418))
if mibBuilder.loadTexts: transientInstallFwpCompleted.setStatus('current')
if mibBuilder.loadTexts: transientInstallFwpCompleted.setDescription('Installation of FWP completed')
transientBootUpRejected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 419))
if mibBuilder.loadTexts: transientBootUpRejected.setStatus('current')
if mibBuilder.loadTexts: transientBootUpRejected.setDescription('Boot up rejected')
alarmThres15MinExceededBbePcs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 420))
if mibBuilder.loadTexts: alarmThres15MinExceededBbePcs.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededBbePcs.setDescription('Background Block Errors PCS Section Monitoring')
transientThres15DayExceededBbePcs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 421))
if mibBuilder.loadTexts: transientThres15DayExceededBbePcs.setStatus('current')
if mibBuilder.loadTexts: transientThres15DayExceededBbePcs.setDescription('Background Block Errors PCS Monitoring')
alarmAutoShutdownGAis = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 422))
if mibBuilder.loadTexts: alarmAutoShutdownGAis.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownGAis.setDescription('Auto Shutdown (G-AIS)')
alarmEquipmentMismatchAllow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 423))
if mibBuilder.loadTexts: alarmEquipmentMismatchAllow.setStatus('current')
if mibBuilder.loadTexts: alarmEquipmentMismatchAllow.setDescription('Equipment and slot provisioning are mismatched')
alarmWarmUp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 424))
if mibBuilder.loadTexts: alarmWarmUp.setStatus('current')
if mibBuilder.loadTexts: alarmWarmUp.setDescription('Shelf is warming up')
transientFwpInstallStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 425))
if mibBuilder.loadTexts: transientFwpInstallStarted.setStatus('current')
if mibBuilder.loadTexts: transientFwpInstallStarted.setDescription('Transfer started')
transientFwpInstallFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 426))
if mibBuilder.loadTexts: transientFwpInstallFailed.setStatus('current')
if mibBuilder.loadTexts: transientFwpInstallFailed.setDescription('Transfer failed')
transientFwpInstallCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 427))
if mibBuilder.loadTexts: transientFwpInstallCompleted.setStatus('current')
if mibBuilder.loadTexts: transientFwpInstallCompleted.setDescription('Transfer completed')
transientFwpSwitchStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 428))
if mibBuilder.loadTexts: transientFwpSwitchStarted.setStatus('current')
if mibBuilder.loadTexts: transientFwpSwitchStarted.setDescription('Switch started')
transientFwpSwitchFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 429))
if mibBuilder.loadTexts: transientFwpSwitchFailed.setStatus('current')
if mibBuilder.loadTexts: transientFwpSwitchFailed.setDescription('Switch failed')
transientFwpSwitchCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 430))
if mibBuilder.loadTexts: transientFwpSwitchCompleted.setStatus('current')
if mibBuilder.loadTexts: transientFwpSwitchCompleted.setDescription('Switch completed')
transientFwpSwitchRejected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 431))
if mibBuilder.loadTexts: transientFwpSwitchRejected.setStatus('current')
if mibBuilder.loadTexts: transientFwpSwitchRejected.setDescription('Switch rejected')
alarmNetworkPathRestricted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 432))
if mibBuilder.loadTexts: alarmNetworkPathRestricted.setStatus('current')
if mibBuilder.loadTexts: alarmNetworkPathRestricted.setDescription('Available network data path are restricted')
transientPathCleanupComplete = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 433))
if mibBuilder.loadTexts: transientPathCleanupComplete.setStatus('current')
if mibBuilder.loadTexts: transientPathCleanupComplete.setDescription('Network data path cleanup completed')
alarmVfClientSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 434))
if mibBuilder.loadTexts: alarmVfClientSignalFail.setStatus('current')
if mibBuilder.loadTexts: alarmVfClientSignalFail.setDescription('GFP Client Signal Fail on virtual Facility')
alarmAutoShutdownVfCSF = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 435))
if mibBuilder.loadTexts: alarmAutoShutdownVfCSF.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownVfCSF.setDescription('Automatic Shutdown - Client Signal Fail transmit (LKDO-CSF)')
transientNtpSrvTestSuccessed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 436))
if mibBuilder.loadTexts: transientNtpSrvTestSuccessed.setStatus('current')
if mibBuilder.loadTexts: transientNtpSrvTestSuccessed.setDescription('NTPTEST-SUCCESS')
transientNtpSrvTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 437))
if mibBuilder.loadTexts: transientNtpSrvTestFailed.setStatus('current')
if mibBuilder.loadTexts: transientNtpSrvTestFailed.setDescription('NTPTEST-FAIL')
transientNtpSrvSyncChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 438))
if mibBuilder.loadTexts: transientNtpSrvSyncChanged.setStatus('current')
if mibBuilder.loadTexts: transientNtpSrvSyncChanged.setDescription('NTP Synchronization Change (current Status in Varbind)')
alarmLinkFailToPartner1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 439))
if mibBuilder.loadTexts: alarmLinkFailToPartner1.setStatus('current')
if mibBuilder.loadTexts: alarmLinkFailToPartner1.setDescription('Signal Failure on Communication to EPTE#1')
alarmLinkFailToPartner2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 440))
if mibBuilder.loadTexts: alarmLinkFailToPartner2.setStatus('current')
if mibBuilder.loadTexts: alarmLinkFailToPartner2.setDescription('Signal Failure on Communication to EPTE#2')
alarmLinkFailToPartner3 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 441))
if mibBuilder.loadTexts: alarmLinkFailToPartner3.setStatus('current')
if mibBuilder.loadTexts: alarmLinkFailToPartner3.setDescription('Signal Failure on Communication to EPTE#3')
alarmLinkFailToPartner4 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 442))
if mibBuilder.loadTexts: alarmLinkFailToPartner4.setStatus('current')
if mibBuilder.loadTexts: alarmLinkFailToPartner4.setDescription('Signal Failure on Communication to EPTE#4')
alarmPartnerUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 443))
if mibBuilder.loadTexts: alarmPartnerUnavailable.setStatus('current')
if mibBuilder.loadTexts: alarmPartnerUnavailable.setDescription('No communication link to provisioned external protection trigger partners')
transientCommunicationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 444))
if mibBuilder.loadTexts: transientCommunicationFail.setStatus('current')
if mibBuilder.loadTexts: transientCommunicationFail.setDescription('Signal Failure on Communication')
alarmPartner1Deleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 445))
if mibBuilder.loadTexts: alarmPartner1Deleted.setStatus('current')
if mibBuilder.loadTexts: alarmPartner1Deleted.setDescription('External Protection Trigger Partner #1 has been deleted')
alarmPartner2Deleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 446))
if mibBuilder.loadTexts: alarmPartner2Deleted.setStatus('current')
if mibBuilder.loadTexts: alarmPartner2Deleted.setDescription('External Protection Trigger Partner #2 has been deleted')
alarmPartner3Deleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 447))
if mibBuilder.loadTexts: alarmPartner3Deleted.setStatus('current')
if mibBuilder.loadTexts: alarmPartner3Deleted.setDescription('External Protection Trigger Partner #3 has been deleted')
alarmPartner4Deleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 448))
if mibBuilder.loadTexts: alarmPartner4Deleted.setStatus('current')
if mibBuilder.loadTexts: alarmPartner4Deleted.setDescription('External Protection Trigger Partner #4 has been deleted')
transientEqlzReport = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 449))
if mibBuilder.loadTexts: transientEqlzReport.setStatus('current')
if mibBuilder.loadTexts: transientEqlzReport.setDescription('System (Control Plane) triggered an equalization')
alarmThres15MinExceededPhysConvSE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 450))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvSE.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvSE.setDescription('Sync Header Errors Physical Coding Layer 15 Minute Threshold Exceeded')
transientThres1DayExceededPhysConvSE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 451))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvSE.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvSE.setDescription('Sync Header Errors Physical Coding Layer 1 Day Threshold Exceeded')
alarmThres15MinExceededPhysConvCVDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 452))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCVDE.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCVDE.setDescription('Coding Violations And Disparity Errors Physical Coding Layer')
transientThres1DayExceededPhysConvCVDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 453))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCVDE.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCVDE.setDescription('Coding Violations And Disparity Errors Physical Coding Layer')
transientForcedWorkingSwitchedBacktoWorking = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 454))
if mibBuilder.loadTexts: transientForcedWorkingSwitchedBacktoWorking.setStatus('current')
if mibBuilder.loadTexts: transientForcedWorkingSwitchedBacktoWorking.setDescription('Forced Working Switched Back to Working')
transientForcedWorkingSwitchedBacktoProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 455))
if mibBuilder.loadTexts: transientForcedWorkingSwitchedBacktoProtection.setStatus('current')
if mibBuilder.loadTexts: transientForcedWorkingSwitchedBacktoProtection.setDescription('Forced Working Switched Back to Protection')
alarmAutoShutdownSendingOciOduTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 456))
if mibBuilder.loadTexts: alarmAutoShutdownSendingOciOduTx.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingOciOduTx.setDescription('Auto Shutdown Transmit (ODU-OCI)')
alarmAcpLinkLoss = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 457))
if mibBuilder.loadTexts: alarmAcpLinkLoss.setStatus('current')
if mibBuilder.loadTexts: alarmAcpLinkLoss.setDescription('Loss of communication to the ACP partner')
alarmAcpChannelUnAvail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 458))
if mibBuilder.loadTexts: alarmAcpChannelUnAvail.setStatus('current')
if mibBuilder.loadTexts: alarmAcpChannelUnAvail.setDescription('APS channel of ACP partner is not available')
alarmAcpPartnerUnassigned = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 459))
if mibBuilder.loadTexts: alarmAcpPartnerUnassigned.setStatus('current')
if mibBuilder.loadTexts: alarmAcpPartnerUnassigned.setDescription('APS channel communication partner is unassigned')
alarmAcpPartnerDeleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 460))
if mibBuilder.loadTexts: alarmAcpPartnerDeleted.setStatus('current')
if mibBuilder.loadTexts: alarmAcpPartnerDeleted.setDescription('APS channel partner is removed form DB')
alarmThres15MinExceededCrcErrorsRcv = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 461))
if mibBuilder.loadTexts: alarmThres15MinExceededCrcErrorsRcv.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededCrcErrorsRcv.setDescription('Rx CRC 15M Crossed')
transientThres1DayExceededCrcErrorsRcv = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 462))
if mibBuilder.loadTexts: transientThres1DayExceededCrcErrorsRcv.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededCrcErrorsRcv.setDescription('Rx CRC 1D Crossed')
alarmThres15MinExceededCrcFramesEgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 463))
if mibBuilder.loadTexts: alarmThres15MinExceededCrcFramesEgress.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededCrcFramesEgress.setDescription('Tx CRC 15M Crossed')
transientThres1DayExceededCrcFramesEgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 464))
if mibBuilder.loadTexts: transientThres1DayExceededCrcFramesEgress.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededCrcFramesEgress.setDescription('Tx CRC 1Day Exceeded')
alarmAutoServiceMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 465))
if mibBuilder.loadTexts: alarmAutoServiceMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmAutoServiceMismatch.setDescription('Mismatch of service locked at working and protection')
alarmBatteryNoCharge = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 466))
if mibBuilder.loadTexts: alarmBatteryNoCharge.setStatus('current')
if mibBuilder.loadTexts: alarmBatteryNoCharge.setDescription('Flat battery')
transientFwpHashPass = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 467))
if mibBuilder.loadTexts: transientFwpHashPass.setStatus('current')
if mibBuilder.loadTexts: transientFwpHashPass.setDescription('Firmware package hash verification passed')
transientFwpHashFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 468))
if mibBuilder.loadTexts: transientFwpHashFail.setStatus('current')
if mibBuilder.loadTexts: transientFwpHashFail.setDescription('Firmware package hash verification failed')
alarmTagReceiveFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 469))
if mibBuilder.loadTexts: alarmTagReceiveFail.setStatus('current')
if mibBuilder.loadTexts: alarmTagReceiveFail.setDescription('Alarm indicating an Ethernet packet was received with a tag error')
alarmTagReceiveFailMaxReached = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 470))
if mibBuilder.loadTexts: alarmTagReceiveFailMaxReached.setStatus('current')
if mibBuilder.loadTexts: alarmTagReceiveFailMaxReached.setDescription('Alarm to indicate Ethernet packets with tag errors has reached the specified limit (TAGFAIL-LIMIT) in the specfiied time window (TAGFAIL-TIME)')
transientTagCounterReset = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 471))
if mibBuilder.loadTexts: transientTagCounterReset.setStatus('current')
if mibBuilder.loadTexts: transientTagCounterReset.setDescription('Log entry to indicate the Ethernet packet tag error count (TAGFAILCNT) was reset by the operator')
transientTagCounterResetFw = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 472))
if mibBuilder.loadTexts: transientTagCounterResetFw.setStatus('current')
if mibBuilder.loadTexts: transientTagCounterResetFw.setDescription('Log entry to indicate the Ethernet packet tag error count (TAGFAILCNT) was reset by the firmware.')
alarmInternalEncryptionFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 473))
if mibBuilder.loadTexts: alarmInternalEncryptionFail.setStatus('current')
if mibBuilder.loadTexts: alarmInternalEncryptionFail.setDescription('internal encryption failure')
transientCryptoTagFailureLimitChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 474))
if mibBuilder.loadTexts: transientCryptoTagFailureLimitChanged.setStatus('current')
if mibBuilder.loadTexts: transientCryptoTagFailureLimitChanged.setDescription('Change number of Ethernet packets received with a tag errors')
transientCryptoTagFailurePeriodChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 475))
if mibBuilder.loadTexts: transientCryptoTagFailurePeriodChanged.setStatus('current')
if mibBuilder.loadTexts: transientCryptoTagFailurePeriodChanged.setDescription('Change of time window Ethernet packets with tag errors')
alarmInsufficientPower = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 476))
if mibBuilder.loadTexts: alarmInsufficientPower.setStatus('current')
if mibBuilder.loadTexts: alarmInsufficientPower.setDescription('Insufficient Power')
alarmPowerConsumptionHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 477))
if mibBuilder.loadTexts: alarmPowerConsumptionHigh.setStatus('current')
if mibBuilder.loadTexts: alarmPowerConsumptionHigh.setDescription('Power Consumption High')
alarmLossOfOverhead = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 478))
if mibBuilder.loadTexts: alarmLossOfOverhead.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfOverhead.setDescription('Loss of Overhead Communication Signal')
alarmLossOfInputSignal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 479))
if mibBuilder.loadTexts: alarmLossOfInputSignal.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfInputSignal.setDescription('Loss of Payload Signal')
alarmOtuServerSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 480))
if mibBuilder.loadTexts: alarmOtuServerSignalFail.setStatus('current')
if mibBuilder.loadTexts: alarmOtuServerSignalFail.setDescription('OTU Server Signal Failure')
alarmLossOfPRBSonaLane = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 481))
if mibBuilder.loadTexts: alarmLossOfPRBSonaLane.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfPRBSonaLane.setDescription('Loss of PRBS on a Lane')
alarmLossOfAlignment = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 482))
if mibBuilder.loadTexts: alarmLossOfAlignment.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfAlignment.setDescription('Loss of Alignment')
alarmLocalFaultRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 483))
if mibBuilder.loadTexts: alarmLocalFaultRx.setStatus('current')
if mibBuilder.loadTexts: alarmLocalFaultRx.setDescription('Detection of link fault sequence in Rx direction')
alarmLocalFaultTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 484))
if mibBuilder.loadTexts: alarmLocalFaultTx.setStatus('current')
if mibBuilder.loadTexts: alarmLocalFaultTx.setDescription('Detection of link fault sequence in Tx direction')
alarmServerSignalFailRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 485))
if mibBuilder.loadTexts: alarmServerSignalFailRx.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailRx.setDescription('Detection of Server Signal Fail in Rx Direction')
alarmServerSignalFailTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 486))
if mibBuilder.loadTexts: alarmServerSignalFailTx.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailTx.setDescription('Detection of Server Signal Fail in Tx Direction')
alarmLossOfBlockLock = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 487))
if mibBuilder.loadTexts: alarmLossOfBlockLock.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfBlockLock.setDescription('Loss of Block Lock')
alarmInputVoltageLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 488))
if mibBuilder.loadTexts: alarmInputVoltageLow.setStatus('current')
if mibBuilder.loadTexts: alarmInputVoltageLow.setDescription('Input Voltage Low (Input voltage low Warning is done after the A/B power Oring)')
alarmOutputVoltageFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 489))
if mibBuilder.loadTexts: alarmOutputVoltageFailure.setStatus('current')
if mibBuilder.loadTexts: alarmOutputVoltageFailure.setDescription('Output Voltage Failure')
alarmOutputPowerHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 490))
if mibBuilder.loadTexts: alarmOutputPowerHigh.setStatus('current')
if mibBuilder.loadTexts: alarmOutputPowerHigh.setDescription('Output Power High alarm')
alarmCommunicationLoss = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 491))
if mibBuilder.loadTexts: alarmCommunicationLoss.setStatus('current')
if mibBuilder.loadTexts: alarmCommunicationLoss.setDescription('Communication Loss between the ECM and Module across the backplane')
alarmIncompatibleVersion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 492))
if mibBuilder.loadTexts: alarmIncompatibleVersion.setStatus('current')
if mibBuilder.loadTexts: alarmIncompatibleVersion.setDescription('Equipment version is not compatible with configuration')
alarmAirDustFilterClogged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 493))
if mibBuilder.loadTexts: alarmAirDustFilterClogged.setStatus('current')
if mibBuilder.loadTexts: alarmAirDustFilterClogged.setDescription('Air dust filter clogged')
alarmPsmRedundancyMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 494))
if mibBuilder.loadTexts: alarmPsmRedundancyMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmPsmRedundancyMismatch.setDescription('Power supply redundancy mismatch')
alarmLossOfModemSync = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 495))
if mibBuilder.loadTexts: alarmLossOfModemSync.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfModemSync.setDescription('Loss of Modem Sync')
alarmServerSignalFailPayload = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 496))
if mibBuilder.loadTexts: alarmServerSignalFailPayload.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailPayload.setDescription('Server Signal Fail Payload')
alarmOutputCurrentDrawHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 497))
if mibBuilder.loadTexts: alarmOutputCurrentDrawHigh.setStatus('current')
if mibBuilder.loadTexts: alarmOutputCurrentDrawHigh.setDescription('Output current draw (usage) is over the limit')
alarmRAndCPortOutage = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 498))
if mibBuilder.loadTexts: alarmRAndCPortOutage.setStatus('current')
if mibBuilder.loadTexts: alarmRAndCPortOutage.setDescription('R & C Port Outage')
alarmRPortOutage = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 499))
if mibBuilder.loadTexts: alarmRPortOutage.setStatus('current')
if mibBuilder.loadTexts: alarmRPortOutage.setDescription('Internal R Port Failure')
alarmPPortOutage = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 500))
if mibBuilder.loadTexts: alarmPPortOutage.setStatus('current')
if mibBuilder.loadTexts: alarmPPortOutage.setDescription('Internal P Port Failure')
alarmHwOptReachedHT = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 501))
if mibBuilder.loadTexts: alarmHwOptReachedHT.setStatus('current')
if mibBuilder.loadTexts: alarmHwOptReachedHT.setDescription('HW OPT has reached a high thershold, and it could be damaged.')
alarmExcessLLDPNeighborsRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 502))
if mibBuilder.loadTexts: alarmExcessLLDPNeighborsRx.setStatus('current')
if mibBuilder.loadTexts: alarmExcessLLDPNeighborsRx.setDescription('Too many LLDP neighbors detected in the Rx Direction')
alarmExcessLLDPNeighborsTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 503))
if mibBuilder.loadTexts: alarmExcessLLDPNeighborsTx.setStatus('current')
if mibBuilder.loadTexts: alarmExcessLLDPNeighborsTx.setDescription('Too many LLDP neighbors detected in the Tx Direction')
alarmConfigurationFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 504))
if mibBuilder.loadTexts: alarmConfigurationFault.setStatus('current')
if mibBuilder.loadTexts: alarmConfigurationFault.setDescription('Mismatch between module configuration and Database')
alarmChannelMismatchRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 505))
if mibBuilder.loadTexts: alarmChannelMismatchRx.setStatus('current')
if mibBuilder.loadTexts: alarmChannelMismatchRx.setDescription('Channel on recieved signal does not match the provisioned channel.')
alarmLossOfCoupling = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 506))
if mibBuilder.loadTexts: alarmLossOfCoupling.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfCoupling.setDescription('Loss of Coupling Alignment')
alarmHardwareUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 507))
if mibBuilder.loadTexts: alarmHardwareUnavailable.setStatus('current')
if mibBuilder.loadTexts: alarmHardwareUnavailable.setDescription('Hardware Resource Unavailable')
transientCryBootStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 508))
if mibBuilder.loadTexts: transientCryBootStarted.setStatus('current')
if mibBuilder.loadTexts: transientCryBootStarted.setDescription('Encryption module boot up started')
transientCryAuthKeyMade = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 509))
if mibBuilder.loadTexts: transientCryAuthKeyMade.setStatus('current')
if mibBuilder.loadTexts: transientCryAuthKeyMade.setDescription('Authentication Key created and ready to use')
transientCryAuthKeyReceived = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 510))
if mibBuilder.loadTexts: transientCryAuthKeyReceived.setStatus('current')
if mibBuilder.loadTexts: transientCryAuthKeyReceived.setDescription('Authentication key received from the far end')
alarmCryAuthKeyMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 511))
if mibBuilder.loadTexts: alarmCryAuthKeyMissing.setStatus('current')
if mibBuilder.loadTexts: alarmCryAuthKeyMissing.setDescription('Authentication key is missing')
alarmCryDataInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 512))
if mibBuilder.loadTexts: alarmCryDataInvalid.setStatus('current')
if mibBuilder.loadTexts: alarmCryDataInvalid.setDescription('Received encryption data is invalid')
alarmLossOfSignalDcPort = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 513))
if mibBuilder.loadTexts: alarmLossOfSignalDcPort.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfSignalDcPort.setDescription('DC Port Failure')
alarmAmpDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 514))
if mibBuilder.loadTexts: alarmAmpDisabled.setStatus('current')
if mibBuilder.loadTexts: alarmAmpDisabled.setDescription('Amplifier is Administratively Disabled')
transientEncryptionModuleSelfTestPass = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 515))
if mibBuilder.loadTexts: transientEncryptionModuleSelfTestPass.setStatus('current')
if mibBuilder.loadTexts: transientEncryptionModuleSelfTestPass.setDescription('Selftest passed')
alarmLicenseMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 516))
if mibBuilder.loadTexts: alarmLicenseMissing.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseMissing.setDescription('No license available (license missing) but equipment is provisoned.')
alarmHwConfigFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 517))
if mibBuilder.loadTexts: alarmHwConfigFault.setStatus('current')
if mibBuilder.loadTexts: alarmHwConfigFault.setDescription('Possible mismatch between HW configuration and NCU database')
alarmThres15MinExceededSonetSectBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 518))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectBbe.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectBbe.setDescription('Section/RS Background Block Errors 15 Min High Treshold')
transientThres1DayExceededSonetSectBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 519))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectBbe.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectBbe.setDescription('Section/RS Background Block Errors 1-Day High Treshold')
alarmThres15MinExceededSonetLineBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 520))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineBbe.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineBbe.setDescription('Line/MS Background Block Errors 15 Min High Treshold')
transientThres1DayExceededSonetLineBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 521))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineBbe.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineBbe.setDescription('Line/MS Background Block Errors 1-Day High Treshold')
alarmServerSignalFailLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 522))
if mibBuilder.loadTexts: alarmServerSignalFailLine.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailLine.setDescription('Line/MS - Server Signal Failure')
alarmThres15MinExceededSonetSectOofs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 523))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectOofs.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectOofs.setDescription('Section/RS Out-Of-Frame Seconds 15 Min Threshold Exceeded')
transientThres1DayExceededSonetSectOofs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 524))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectOofs.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectOofs.setDescription('Section/RS Out-Of-Frame Seconds 1-Day Threshold Exceeded')
alarmNoLicenseFile = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 525))
if mibBuilder.loadTexts: alarmNoLicenseFile.setStatus('current')
if mibBuilder.loadTexts: alarmNoLicenseFile.setDescription('License File has not been added to the node or shelf')
alarmLicenseServerDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 526))
if mibBuilder.loadTexts: alarmLicenseServerDisconnected.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseServerDisconnected.setDescription('License Server Disconnected')
alarmLicenseServerNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 527))
if mibBuilder.loadTexts: alarmLicenseServerNotConfigured.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseServerNotConfigured.setDescription('License Server has not been configured')
alarmLicenseInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 528))
if mibBuilder.loadTexts: alarmLicenseInvalid.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseInvalid.setDescription('License is invalid (expired or corrupted)')
alarmLicenseOverdraft = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 529))
if mibBuilder.loadTexts: alarmLicenseOverdraft.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseOverdraft.setDescription('Number of licenses in use and granted exceed licenses supported')
alarmLicenseMissingMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 530))
if mibBuilder.loadTexts: alarmLicenseMissingMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseMissingMismatch.setDescription('No license available, NCU has configuration but equipment configuration failed. A configuration mismatch exists between NCU and equipment.')
alarmQualityFactorTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 531))
if mibBuilder.loadTexts: alarmQualityFactorTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmQualityFactorTooLow.setDescription('Quality Factor low threshold exceeded')
transientCryBootCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 532))
if mibBuilder.loadTexts: transientCryBootCompleted.setStatus('current')
if mibBuilder.loadTexts: transientCryBootCompleted.setDescription('Encryption module boot up completed')
transientCryBootFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 533))
if mibBuilder.loadTexts: transientCryBootFailed.setStatus('current')
if mibBuilder.loadTexts: transientCryBootFailed.setDescription('Encryption module boot up failed')
transientCrySwitchStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 534))
if mibBuilder.loadTexts: transientCrySwitchStarted.setStatus('current')
if mibBuilder.loadTexts: transientCrySwitchStarted.setDescription('Encryption module switch started')
transientCrySwitchCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 535))
if mibBuilder.loadTexts: transientCrySwitchCompleted.setStatus('current')
if mibBuilder.loadTexts: transientCrySwitchCompleted.setDescription('Encryption module switch completed')
transientCrySwitchFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 536))
if mibBuilder.loadTexts: transientCrySwitchFailed.setStatus('current')
if mibBuilder.loadTexts: transientCrySwitchFailed.setDescription('Encryption module switch failed')
alarmReplaceAirFilter = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 537))
if mibBuilder.loadTexts: alarmReplaceAirFilter.setStatus('current')
if mibBuilder.loadTexts: alarmReplaceAirFilter.setDescription('Replace Air Filter')
alarmAutoShutdownSendingIdle = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 538))
if mibBuilder.loadTexts: alarmAutoShutdownSendingIdle.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingIdle.setDescription('Idle insertion')
transientMpReleased = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 539)).setObjects(("ADVA-FSPR7-MIB", "entitySysAidString"), ("ADVA-FSPR7-MIB", "fileDataMpName"), ("ADVA-FSPR7-MIB", "fileDataComment"), ("ADVA-FSPR7-MIB", "fileDataMpTag"), ("ADVA-FSPR7-MIB", "fileDataRevision"), ("ADVA-FSPR7-MIB", "fileDataVersion"), ("ADVA-FSPR7-MIB", "fileDataCreationTime"))
if mibBuilder.loadTexts: transientMpReleased.setStatus('current')
if mibBuilder.loadTexts: transientMpReleased.setDescription('Master profile has been release by an admin user, users can change parameters supported by the master profile.')
transientMpLocked = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 540)).setObjects(("ADVA-FSPR7-MIB", "entitySysAidString"), ("ADVA-FSPR7-MIB", "fileDataMpName"), ("ADVA-FSPR7-MIB", "fileDataComment"), ("ADVA-FSPR7-MIB", "fileDataMpTag"), ("ADVA-FSPR7-MIB", "fileDataRevision"), ("ADVA-FSPR7-MIB", "fileDataVersion"), ("ADVA-FSPR7-MIB", "fileDataCreationTime"))
if mibBuilder.loadTexts: transientMpLocked.setStatus('current')
if mibBuilder.loadTexts: transientMpLocked.setDescription('Master profile activated, users cannot change parameters supported by the master profile.')
alarmMpFileMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 541))
if mibBuilder.loadTexts: alarmMpFileMissing.setStatus('current')
if mibBuilder.loadTexts: alarmMpFileMissing.setDescription('Master profile from Network Manager has been released. Alarm is cleared by transferring and activating the master profile from Network Manager.')
transientMpDeleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 542))
if mibBuilder.loadTexts: transientMpDeleted.setStatus('current')
if mibBuilder.loadTexts: transientMpDeleted.setDescription('Master profile deleted, users cannot change parameters supported by the master profile.')
transientMpCreated = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 543)).setObjects(("ADVA-FSPR7-MIB", "entitySysAidString"), ("ADVA-FSPR7-MIB", "fileDataMpName"), ("ADVA-FSPR7-MIB", "fileDataComment"), ("ADVA-FSPR7-MIB", "fileDataMpTag"), ("ADVA-FSPR7-MIB", "fileDataRevision"), ("ADVA-FSPR7-MIB", "fileDataVersion"), ("ADVA-FSPR7-MIB", "fileDataCreationTime"))
if mibBuilder.loadTexts: transientMpCreated.setStatus('current')
if mibBuilder.loadTexts: transientMpCreated.setDescription('Master profile has been creteated. Master profile is deactivated, users can change parameters supported by the master profile.')
transientMpParameterSetFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 544)).setObjects(("ADVA-FSPR7-MIB", "entitySysAidString"), ("ADVA-FSPR7-MIB", "errorMessage"))
if mibBuilder.loadTexts: transientMpParameterSetFail.setStatus('current')
if mibBuilder.loadTexts: transientMpParameterSetFail.setDescription('MP Parameter Set Fail.')
transientMpImported = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 545)).setObjects(("ADVA-FSPR7-MIB", "entitySysAidString"), ("ADVA-FSPR7-MIB", "fileDataMpName"), ("ADVA-FSPR7-MIB", "fileDataComment"), ("ADVA-FSPR7-MIB", "fileDataMpTag"), ("ADVA-FSPR7-MIB", "fileDataRevision"), ("ADVA-FSPR7-MIB", "fileDataVersion"), ("ADVA-FSPR7-MIB", "fileDataCreationTime"))
if mibBuilder.loadTexts: transientMpImported.setStatus('current')
if mibBuilder.loadTexts: transientMpImported.setDescription('Master profile has been imported.')
alarmDelayMeasurementProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 546))
if mibBuilder.loadTexts: alarmDelayMeasurementProgress.setStatus('current')
if mibBuilder.loadTexts: alarmDelayMeasurementProgress.setDescription('Delay Measurement in progress')
transientDelayMeasurementCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 547))
if mibBuilder.loadTexts: transientDelayMeasurementCompleted.setStatus('current')
if mibBuilder.loadTexts: transientDelayMeasurementCompleted.setDescription('Measurement Complete')
transientDelayMeasurementFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 548))
if mibBuilder.loadTexts: transientDelayMeasurementFailed.setStatus('current')
if mibBuilder.loadTexts: transientDelayMeasurementFailed.setDescription('Delay Measurement failed')
fspR7EquipmentInsertedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10001))
if mibBuilder.loadTexts: fspR7EquipmentInsertedTrap.setStatus('current')
if mibBuilder.loadTexts: fspR7EquipmentInsertedTrap.setDescription('This trap is sent when an equipment is inserted.')
fspR7EquipmentRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10002))
if mibBuilder.loadTexts: fspR7EquipmentRemovedTrap.setStatus('current')
if mibBuilder.loadTexts: fspR7EquipmentRemovedTrap.setDescription('This trap is sent when an equipment is inserted.')
fspR7WriteAccessRequest = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10010))
if mibBuilder.loadTexts: fspR7WriteAccessRequest.setStatus('current')
if mibBuilder.loadTexts: fspR7WriteAccessRequest.setDescription('')
fspR7WriteAccessGranted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10011))
if mibBuilder.loadTexts: fspR7WriteAccessGranted.setStatus('current')
if mibBuilder.loadTexts: fspR7WriteAccessGranted.setDescription('')
fspR7WriteAccessRevoked = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10012))
if mibBuilder.loadTexts: fspR7WriteAccessRevoked.setStatus('current')
if mibBuilder.loadTexts: fspR7WriteAccessRevoked.setDescription('')
fspR7WriteAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10013))
if mibBuilder.loadTexts: fspR7WriteAccessDenied.setStatus('current')
if mibBuilder.loadTexts: fspR7WriteAccessDenied.setDescription('')
fspR7WriteAccessTimeout = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10014))
if mibBuilder.loadTexts: fspR7WriteAccessTimeout.setStatus('current')
if mibBuilder.loadTexts: fspR7WriteAccessTimeout.setDescription('')
fspR7WriteAccessRequestTimeout = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10015))
if mibBuilder.loadTexts: fspR7WriteAccessRequestTimeout.setStatus('current')
if mibBuilder.loadTexts: fspR7WriteAccessRequestTimeout.setDescription('')
fspR7TrapSinkCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10020)).setObjects(("ADVA-FSPR7-MIB", "trapSinkIPv4"), ("ADVA-FSPR7-MIB", "trapSinkIPv6"))
if mibBuilder.loadTexts: fspR7TrapSinkCreation.setStatus('current')
if mibBuilder.loadTexts: fspR7TrapSinkCreation.setDescription('This trap is sent every time a trapSink is created.')
fspR7TrapSinkDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10021)).setObjects(("ADVA-FSPR7-MIB", "trapSinkIPv4"), ("ADVA-FSPR7-MIB", "trapSinkIPv6"))
if mibBuilder.loadTexts: fspR7TrapSinkDeletion.setStatus('current')
if mibBuilder.loadTexts: fspR7TrapSinkDeletion.setDescription('This trap is sent every time a trapSink is deleted.')
fspR7TrapSinkChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10022)).setObjects(("ADVA-FSPR7-MIB", "trapSinkIPv4"), ("ADVA-FSPR7-MIB", "trapSinkIPv6"), ("ADVA-FSPR7-MIB", "trapSinkCommunity"), ("ADVA-FSPR7-MIB", "trapSinkUserName"))
if mibBuilder.loadTexts: fspR7TrapSinkChange.setStatus('current')
if mibBuilder.loadTexts: fspR7TrapSinkChange.setDescription('This trap is sent every time a trapSink is changed.')
fspR7AccountStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10023)).setObjects(("ADVA-FSPR7-MIB", "authTrapUserName"), ("ADVA-FSPR7-MIB", "authTrapAccountState"))
if mibBuilder.loadTexts: fspR7AccountStateChange.setStatus('current')
if mibBuilder.loadTexts: fspR7AccountStateChange.setDescription('This trap is sent every time users Account State is changed.')
fspR7CommunityCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10024)).setObjects(("ADVA-FSPR7-MIB", "communityName"))
if mibBuilder.loadTexts: fspR7CommunityCreation.setStatus('current')
if mibBuilder.loadTexts: fspR7CommunityCreation.setDescription('This trap is sent every time a community string is created.')
fspR7CommunityDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10025)).setObjects(("ADVA-FSPR7-MIB", "communityName"))
if mibBuilder.loadTexts: fspR7CommunityDeletion.setStatus('current')
if mibBuilder.loadTexts: fspR7CommunityDeletion.setDescription('This trap is sent every time a community string is created.')
fspR7PrivilegeChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10026)).setObjects(("ADVA-FSPR7-MIB", "privilegeChangeState"), ("ADVA-FSPR7-MIB", "privilegeChangeUserName"), ("ADVA-FSPR7-MIB", "privilegeChangeIpAddress"), ("ADVA-FSPR7-MIB", "privilegeChangeInterface"), ("ADVA-FSPR7-MIB", "privilegeChangeCurrentPrivilege"), ("ADVA-FSPR7-MIB", "privilegeChangeRequestedPrivilege"), ("ADVA-FSPR7-MIB", "privilegeChangeDuration"))
if mibBuilder.loadTexts: fspR7PrivilegeChange.setStatus('current')
if mibBuilder.loadTexts: fspR7PrivilegeChange.setDescription('This trap is sent every time a privilege change request is changed (added, modified, removed).')
fspR7AuthenticationNotification = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10027)).setObjects(("ADVA-FSPR7-MIB", "authTrapSrcIp"), ("ADVA-FSPR7-MIB", "authTrapStatus"), ("ADVA-FSPR7-MIB", "authTrapSessionId"), ("ADVA-FSPR7-MIB", "authTrapProtocol"), ("ADVA-FSPR7-MIB", "authTrapPort"), ("ADVA-FSPR7-MIB", "authTrapUserName"), ("ADVA-FSPR7-MIB", "authTrapAccess"))
if mibBuilder.loadTexts: fspR7AuthenticationNotification.setStatus('current')
if mibBuilder.loadTexts: fspR7AuthenticationNotification.setDescription('This trap is sent when authentication attempt happens.')
fspR7AuthenticationNotificationSummary = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10028)).setObjects(("ADVA-FSPR7-MIB", "authTrapProtocol"), ("ADVA-FSPR7-MIB", "authTrapSuccessfulAuthCount"), ("ADVA-FSPR7-MIB", "authTrapUnsuccessfulAuthCount"))
if mibBuilder.loadTexts: fspR7AuthenticationNotificationSummary.setStatus('current')
if mibBuilder.loadTexts: fspR7AuthenticationNotificationSummary.setDescription('This trap is sent when authentication attempt happens more often\n        than 5 times within 10 seconds.')
optThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1), )
if mibBuilder.loadTexts: optThresholdConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: optThresholdConfigTable.setDescription('optThresholdConfigTable')
optThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: optThresholdConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: optThresholdConfigEntry.setDescription('Entry of optThresholdConfigTable')
optThresholdConfigLowFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1, 1), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optThresholdConfigLowFixed.setStatus('deprecated')
if mibBuilder.loadTexts: optThresholdConfigLowFixed.setDescription('Low fixed threshold of the Optical Power Transmitted (output)')
optThresholdConfigHighFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optThresholdConfigHighFixed.setStatus('deprecated')
if mibBuilder.loadTexts: optThresholdConfigHighFixed.setDescription('High fixed threshold of the Optical Power Transmitted (output)')
optThresholdConfigLowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 300))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optThresholdConfigLowConfig.setStatus('deprecated')
if mibBuilder.loadTexts: optThresholdConfigLowConfig.setDescription('Configurable threshold of the Optical Power Transmitted (output)')
optThresholdConfigHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 300))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optThresholdConfigHighConfig.setStatus('deprecated')
if mibBuilder.loadTexts: optThresholdConfigHighConfig.setDescription('Configurable high threshold of the Optical Power Transmitted (output)')
oprThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 2), )
if mibBuilder.loadTexts: oprThresholdConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: oprThresholdConfigTable.setDescription('oprThresholdConfigTable')
oprThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: oprThresholdConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: oprThresholdConfigEntry.setDescription('Entry of oprThresholdConfigTable')
oprThresholdConfigLowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-450, 260))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: oprThresholdConfigLowConfig.setStatus('deprecated')
if mibBuilder.loadTexts: oprThresholdConfigLowConfig.setDescription('Optical Input Power Received')
oprThresholdConfigHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-450, 270))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: oprThresholdConfigHighConfig.setStatus('deprecated')
if mibBuilder.loadTexts: oprThresholdConfigHighConfig.setDescription('Optical Input Power Received')
lsrtempThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 3), )
if mibBuilder.loadTexts: lsrtempThresholdConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: lsrtempThresholdConfigTable.setDescription('lsrtempThresholdConfigTable')
lsrtempThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: lsrtempThresholdConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: lsrtempThresholdConfigEntry.setDescription('Entry of lsrtempThresholdConfigTable')
lsrtempThresholdConfigLowFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 3, 1, 1), Integer32()).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lsrtempThresholdConfigLowFixed.setStatus('deprecated')
if mibBuilder.loadTexts: lsrtempThresholdConfigLowFixed.setDescription('Laser temperature fixed low threshold.')
lsrtempThresholdConfigHighFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 3, 1, 2), Integer32()).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lsrtempThresholdConfigHighFixed.setStatus('deprecated')
if mibBuilder.loadTexts: lsrtempThresholdConfigHighFixed.setDescription('Laser temperature fixed high threshold.')
optIntervalPm15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1), )
if mibBuilder.loadTexts: optIntervalPm15minTable.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm15minTable.setDescription('optIntervalPm15minTable')
optIntervalPm15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "optIntervalPm15minNumber"))
if mibBuilder.loadTexts: optIntervalPm15minEntry.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm15minEntry.setDescription('Entry of optIntervalPm15minTable')
optIntervalPm15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: optIntervalPm15minNumber.setStatus('current')
if mibBuilder.loadTexts: optIntervalPm15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n        which the set of statistics is available. The interval\n        identified by 1 is the most recently completed 15 minute\n        interval, and the interval identified by N is the interval\n        immediately preceding the one identified by N-1.')
optIntervalPm15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minLow.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm15minLow.setDescription('Optical Output Power Transmitted')
optIntervalPm15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minMean.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm15minMean.setDescription('Optical Output Power Transmitted')
optIntervalPm15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minHigh.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm15minHigh.setDescription('Optical Output Power Transmitted')
optIntervalPm15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minValidFlag.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm15minValidFlag.setDescription('Valid Flag')
optIntervalPm15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm15minTimeStamp.setDescription('Timestamp')
optIntervalPm1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2), )
if mibBuilder.loadTexts: optIntervalPm1dayTable.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm1dayTable.setDescription('optIntervalPm1dayTable')
optIntervalPm1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "optIntervalPm1dayNumber"))
if mibBuilder.loadTexts: optIntervalPm1dayEntry.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm1dayEntry.setDescription('Entry of optIntervalPm1dayTable')
optIntervalPm1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: optIntervalPm1dayNumber.setStatus('current')
if mibBuilder.loadTexts: optIntervalPm1dayNumber.setDescription('A number, which identifies the interval for\n        which the set of statistics is available. The interval\n        identified by 1 is the most recently completed 1 day\n        interval.')
optIntervalPm1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayLow.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm1dayLow.setDescription('Optical Output Power Transmitted')
optIntervalPm1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayMean.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm1dayMean.setDescription('Optical Output Power Transmitted')
optIntervalPm1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayHigh.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm1dayHigh.setDescription('Optical Output Power Transmitted')
optIntervalPm1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayValidFlag.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm1dayValidFlag.setDescription('Valid Flag')
optIntervalPm1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm1dayTimeStamp.setDescription('Timestamp')
optIntervalPm1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3), )
if mibBuilder.loadTexts: optIntervalPm1weekTable.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm1weekTable.setDescription('optIntervalPm1weekTable')
optIntervalPm1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "optIntervalPm1weekNumber"))
if mibBuilder.loadTexts: optIntervalPm1weekEntry.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm1weekEntry.setDescription('Entry of optIntervalPm1weekTable')
optIntervalPm1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: optIntervalPm1weekNumber.setStatus('current')
if mibBuilder.loadTexts: optIntervalPm1weekNumber.setDescription('Number 1week')
optIntervalPm1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekLow.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm1weekLow.setDescription('Optical Output Power Transmitted')
optIntervalPm1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekMean.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm1weekMean.setDescription('Optical Output Power Transmitted')
optIntervalPm1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekHigh.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm1weekHigh.setDescription('Optical Output Power Transmitted')
optIntervalPm1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekValidFlag.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm1weekValidFlag.setDescription('Valid Flag')
optIntervalPm1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: optIntervalPm1weekTimeStamp.setDescription('Timestamp')
oprIntervalPm15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4), )
if mibBuilder.loadTexts: oprIntervalPm15minTable.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm15minTable.setDescription('oprIntervalPm15minTable')
oprIntervalPm15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "oprIntervalPm15minNumber"))
if mibBuilder.loadTexts: oprIntervalPm15minEntry.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm15minEntry.setDescription('Entry of oprIntervalPm15minTable')
oprIntervalPm15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: oprIntervalPm15minNumber.setStatus('current')
if mibBuilder.loadTexts: oprIntervalPm15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n        which the set of statistics is available. The interval\n        identified by 1 is the most recently completed 15 minute\n        interval, and the interval identified by N is the interval\n        immediately preceding the one identified by N-1.')
oprIntervalPm15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minLow.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm15minLow.setDescription('Optical Input Power Received')
oprIntervalPm15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minMean.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm15minMean.setDescription('Optical Input Power Received')
oprIntervalPm15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minHigh.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm15minHigh.setDescription('Optical Input Power Received')
oprIntervalPm15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minValidFlag.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm15minValidFlag.setDescription('Valid Flag')
oprIntervalPm15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm15minTimeStamp.setDescription('Timestamp')
oprIntervalPm1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5), )
if mibBuilder.loadTexts: oprIntervalPm1dayTable.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm1dayTable.setDescription('oprIntervalPm1dayTable')
oprIntervalPm1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "oprIntervalPm1dayNumber"))
if mibBuilder.loadTexts: oprIntervalPm1dayEntry.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm1dayEntry.setDescription('Entry of oprIntervalPm1dayTable')
oprIntervalPm1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: oprIntervalPm1dayNumber.setStatus('current')
if mibBuilder.loadTexts: oprIntervalPm1dayNumber.setDescription('A number, which identifies the interval for\n        which the set of statistics is available. The interval\n        identified by 1 is the most recently completed 1 day\n        interval.')
oprIntervalPm1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayLow.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm1dayLow.setDescription('Optical Input Power Received')
oprIntervalPm1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayMean.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm1dayMean.setDescription('Optical Input Power Received')
oprIntervalPm1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayHigh.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm1dayHigh.setDescription('Optical Input Power Received')
oprIntervalPm1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayValidFlag.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm1dayValidFlag.setDescription('Valid Flag')
oprIntervalPm1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm1dayTimeStamp.setDescription('Timestamp')
oprIntervalPm1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6), )
if mibBuilder.loadTexts: oprIntervalPm1weekTable.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm1weekTable.setDescription('oprIntervalPm1weekTable')
oprIntervalPm1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "oprIntervalPm1weekNumber"))
if mibBuilder.loadTexts: oprIntervalPm1weekEntry.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm1weekEntry.setDescription('Entry of oprIntervalPm1weekTable')
oprIntervalPm1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: oprIntervalPm1weekNumber.setStatus('current')
if mibBuilder.loadTexts: oprIntervalPm1weekNumber.setDescription('Number 1week')
oprIntervalPm1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekLow.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm1weekLow.setDescription('Optical Input Power Received')
oprIntervalPm1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekMean.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm1weekMean.setDescription('Optical Input Power Received')
oprIntervalPm1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekHigh.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm1weekHigh.setDescription('Optical Input Power Received')
oprIntervalPm1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekValidFlag.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm1weekValidFlag.setDescription('Valid Flag')
oprIntervalPm1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: oprIntervalPm1weekTimeStamp.setDescription('Timestamp')
endOfPerformance = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPerformance.setStatus('current')
if mibBuilder.loadTexts: endOfPerformance.setDescription('')
terminationPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1), )
if mibBuilder.loadTexts: terminationPointTable.setStatus('current')
if mibBuilder.loadTexts: terminationPointTable.setDescription('terminationPoint')
terminationPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"))
if mibBuilder.loadTexts: terminationPointEntry.setStatus('current')
if mibBuilder.loadTexts: terminationPointEntry.setDescription('Entry of terminationPoint')
terminationPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: terminationPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: terminationPointRowStatus.setDescription('Termination Point RowStatus. Object is used to\n        create or delete a row in the table.')
terminationPointPartnerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointPartnerAid.setStatus('current')
if mibBuilder.loadTexts: terminationPointPartnerAid.setDescription('Termination Point Partner AID.')
terminationPointAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: terminationPointAdmin.setStatus('current')
if mibBuilder.loadTexts: terminationPointAdmin.setDescription('Termination Point Adminstrative State.')
terminationPointFiberDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 4), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: terminationPointFiberDetect.setStatus('current')
if mibBuilder.loadTexts: terminationPointFiberDetect.setDescription('Termination Point Fiber Detect.')
terminationPointFiberDetectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 5), FspR7FDStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFiberDetectStatus.setStatus('current')
if mibBuilder.loadTexts: terminationPointFiberDetectStatus.setDescription('Termination Point Fiber Detect Status.')
terminationPointFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 6), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFunction.setStatus('current')
if mibBuilder.loadTexts: terminationPointFunction.setDescription('Termination Point Interface Function.')
terminationPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminationPointAlias.setStatus('current')
if mibBuilder.loadTexts: terminationPointAlias.setDescription('Termination Point Alias.')
terminationPointValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointValidSigTimer.setStatus('current')
if mibBuilder.loadTexts: terminationPointValidSigTimer.setDescription('Termination Point Valid Signal Timer.')
terminationPointConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 9), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointConnector.setStatus('current')
if mibBuilder.loadTexts: terminationPointConnector.setDescription('Termination Point Connector Type.')
terminationPointFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 10), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFiber.setStatus('current')
if mibBuilder.loadTexts: terminationPointFiber.setDescription('Termination Point Fiber Type.')
terminationPointConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 11), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointConnType.setStatus('current')
if mibBuilder.loadTexts: terminationPointConnType.setDescription('Termination Point Connectivity Type.')
terminationPointOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 12), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointOper.setStatus('current')
if mibBuilder.loadTexts: terminationPointOper.setDescription('Termination Point Operational State.')
terminationPointOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 13), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointOutputPower.setStatus('current')
if mibBuilder.loadTexts: terminationPointOutputPower.setDescription('Termination Point Optical Power Tx.')
terminationPointInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 14), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointInputPower.setStatus('current')
if mibBuilder.loadTexts: terminationPointInputPower.setDescription('Termination Point Optical Power Rx.')
terminationPointFiberConnAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 15), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFiberConnAtten.setStatus('current')
if mibBuilder.loadTexts: terminationPointFiberConnAtten.setDescription('Termination Point Fiber Connection Attenuation.')
terminationPointConnEqptState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 16), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointConnEqptState.setStatus('current')
if mibBuilder.loadTexts: terminationPointConnEqptState.setDescription('Termination Point Fiber Connection Eqpt State.')
terminationPointTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 17), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointTermType.setStatus('current')
if mibBuilder.loadTexts: terminationPointTermType.setDescription('Termination Point Termination Type.')
terminationPointChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 18), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointChannel.setStatus('current')
if mibBuilder.loadTexts: terminationPointChannel.setDescription('Termination Point Channel Provision.')
terminationPointLambda = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 19), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointLambda.setStatus('current')
if mibBuilder.loadTexts: terminationPointLambda.setDescription('Termination Point Lambda.')
terminationPointFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 20), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFrequency.setStatus('current')
if mibBuilder.loadTexts: terminationPointFrequency.setDescription('Termination Point Frequency.')
terminationPointReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 21), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointReach.setStatus('current')
if mibBuilder.loadTexts: terminationPointReach.setDescription('Termination Point Reach Provision.')
terminationPointBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 22), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointBand.setStatus('current')
if mibBuilder.loadTexts: terminationPointBand.setDescription('Termination Point Band Provision.')
terminationPointSubBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 23), FspR7OpticalSubBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointSubBand.setStatus('current')
if mibBuilder.loadTexts: terminationPointSubBand.setDescription('Termination Point SubBand Provision.')
terminationPointGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 24), FspR7OpticalGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointGroup.setStatus('current')
if mibBuilder.loadTexts: terminationPointGroup.setDescription('Termination Point Group Provision.')
terminationPointSfProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 25), FspR7SingleFiberLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointSfProvision.setStatus('current')
if mibBuilder.loadTexts: terminationPointSfProvision.setDescription('Termination Point Sf Provision.')
terminationPointDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 26), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointDirection.setStatus('current')
if mibBuilder.loadTexts: terminationPointDirection.setDescription('Termination Point Direction.')
terminationPointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 27), FspR7OpticalMultiplexLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointLevel.setStatus('current')
if mibBuilder.loadTexts: terminationPointLevel.setDescription('Termination Point Level.')
terminationPointSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 28), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: terminationPointSecondaryStates.setDescription('Termination Secondary States.')
terminationPointChannelRangeProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 29), FspR7ChannelRangeInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointChannelRangeProvision.setStatus('current')
if mibBuilder.loadTexts: terminationPointChannelRangeProvision.setDescription('Channel Range')
connectionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2), )
if mibBuilder.loadTexts: connectionTable.setStatus('current')
if mibBuilder.loadTexts: connectionTable.setDescription('connectionTable')
connectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityConnectionClassName"))
if mibBuilder.loadTexts: connectionEntry.setStatus('current')
if mibBuilder.loadTexts: connectionEntry.setDescription('Entry of connectionTable')
connectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: connectionRowStatus.setStatus('current')
if mibBuilder.loadTexts: connectionRowStatus.setDescription('Physical Connection RowStatus. Object is used to create\n        or delete a row in the table.')
connectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1, 2), FspR7TypeConnection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: connectionType.setStatus('current')
if mibBuilder.loadTexts: connectionType.setDescription('Physical Connection Type.')
connectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1, 3), FspR7StateConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionState.setStatus('current')
if mibBuilder.loadTexts: connectionState.setDescription('Physical Connection State.')
connectionCreationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1, 4), FfpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: connectionCreationMethod.setStatus('current')
if mibBuilder.loadTexts: connectionCreationMethod.setDescription('Type of protection (normal/forced)')
facilityReferByTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 3), )
if mibBuilder.loadTexts: facilityReferByTable.setStatus('current')
if mibBuilder.loadTexts: facilityReferByTable.setDescription('facilityReferByTable')
facilityReferByEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: facilityReferByEntry.setStatus('current')
if mibBuilder.loadTexts: facilityReferByEntry.setDescription('Entry of facilityReferByTable')
facilityReferByTerminPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 3, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityReferByTerminPoint.setStatus('current')
if mibBuilder.loadTexts: facilityReferByTerminPoint.setDescription('RowPointer to object which refer to.')
externalPortReferByTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 4), )
if mibBuilder.loadTexts: externalPortReferByTable.setStatus('current')
if mibBuilder.loadTexts: externalPortReferByTable.setDescription('externalPortReferByTable')
externalPortReferByEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalPortReferByEntry.setStatus('current')
if mibBuilder.loadTexts: externalPortReferByEntry.setDescription('Entry of externalPortReferByTable')
externalPortReferByTerminPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 4, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortReferByTerminPoint.setStatus('current')
if mibBuilder.loadTexts: externalPortReferByTerminPoint.setDescription('RowPointer to object which refer to.')
endOfExternalPortReferByTabke = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfExternalPortReferByTabke.setStatus('current')
if mibBuilder.loadTexts: endOfExternalPortReferByTabke.setDescription('')
dcnReferByTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 6), )
if mibBuilder.loadTexts: dcnReferByTable.setStatus('current')
if mibBuilder.loadTexts: dcnReferByTable.setDescription('dcnReferByTable')
dcnReferByEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: dcnReferByEntry.setStatus('current')
if mibBuilder.loadTexts: dcnReferByEntry.setDescription('Entry of dcnReferByTable')
dcnReferByTerminPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 6, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnReferByTerminPoint.setStatus('current')
if mibBuilder.loadTexts: dcnReferByTerminPoint.setDescription('RowPointer to object which refer to.')
endOfDcnReferByTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDcnReferByTable.setStatus('current')
if mibBuilder.loadTexts: endOfDcnReferByTable.setDescription('')
opticalMuxReferByTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 8), )
if mibBuilder.loadTexts: opticalMuxReferByTable.setStatus('current')
if mibBuilder.loadTexts: opticalMuxReferByTable.setDescription('opticalMuxReferByTable')
opticalMuxReferByEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 8, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: opticalMuxReferByEntry.setStatus('current')
if mibBuilder.loadTexts: opticalMuxReferByEntry.setDescription('Entry of opticalMuxReferByTable')
opticalMuxReferByTerminPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 8, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxReferByTerminPoint.setStatus('current')
if mibBuilder.loadTexts: opticalMuxReferByTerminPoint.setDescription('RowPointer to object which refer to.')
endOfOpticalMuxReferByTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxReferByTable.setStatus('current')
if mibBuilder.loadTexts: endOfOpticalMuxReferByTable.setDescription('')
endOfFiberMap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFiberMap.setStatus('current')
if mibBuilder.loadTexts: endOfFiberMap.setDescription('')
startPmSnapshot = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 1), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startPmSnapshot.setStatus('current')
if mibBuilder.loadTexts: startPmSnapshot.setDescription('Apply PM reference values')
pmSnapshotStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 2), FspR7PmSnapshotStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotStatus.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotStatus.setDescription('PM Reference value Status')
pmSnapshotCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3), )
if mibBuilder.loadTexts: pmSnapshotCurrentTable.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotCurrentTable.setDescription('pmSnapshotCurrentFacilityTable')
pmSnapshotCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: pmSnapshotCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotCurrentEntry.setDescription('Entry of pmSnapshotCurrentFacilityTable')
pmSnapshotCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 1), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentOutputPower.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotCurrentOutputPower.setDescription('Instantaneous Optical Power Transmitted (Output).')
pmSnapshotCurrentInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentInputPower.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotCurrentInputPower.setDescription('Total Optical Input Power Received.')
pmSnapshotCurrentAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentAttenuation.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotCurrentAttenuation.setDescription("The attenuation in dB from the TRMT of the 1st stage to the RCV of the 2nd stage.'")
pmSnapshotCurrentAttenOfVoa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentAttenOfVoa.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotCurrentAttenOfVoa.setDescription('The attenuation of VOA in dB.')
pmSnapshotCurrentOscGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 5), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentOscGain.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotCurrentOscGain.setDescription('Current Raman OSC gain.')
pmSnapshotCurrentBckreflecPwrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 6), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentBckreflecPwrRx.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotCurrentBckreflecPwrRx.setDescription('Backreflection Received Current.')
pmSnapshotCurrentRamanPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 7), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentRamanPumpPower.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotCurrentRamanPumpPower.setDescription('Total raman pump power.')
pmSnapshotCurrentOscPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 8), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentOscPwrReceived.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotCurrentOscPwrReceived.setDescription('Optical Supervisory Channel Input Power Received Current.')
pmSnapshotCurrentVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 9), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentVariableGain.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotCurrentVariableGain.setDescription('Variable Gain of EDFA.')
pmSnapshotCurrentTxLineAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 10), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentTxLineAtten.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotCurrentTxLineAtten.setDescription('Attenuation on Transmit Fiber.')
pmSnapshotCurrentRxLineAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 11), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentRxLineAtten.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotCurrentRxLineAtten.setDescription('Instantaneous Attenuation on Receive Fiber.')
pmSnapshotHistoricalTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4), )
if mibBuilder.loadTexts: pmSnapshotHistoricalTable.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotHistoricalTable.setDescription('pmSnapshotHistoricalFacilityTable')
pmSnapshotHistoricalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "pmSnapshotHistoricalParameter"), (0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "pmSnapshotHistoricalNumber"))
if mibBuilder.loadTexts: pmSnapshotHistoricalEntry.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotHistoricalEntry.setDescription('Entry of pmSnapshotHistoricalFacilityTable')
pmSnapshotHistoricalParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 1), FspR7PmSnapshotParameterTypes())
if mibBuilder.loadTexts: pmSnapshotHistoricalParameter.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotHistoricalParameter.setDescription('Index representing the PM parameter')
pmSnapshotHistoricalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: pmSnapshotHistoricalNumber.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotHistoricalNumber.setDescription('Record number of optical power reference level.')
pmSnapshotHistoricalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 3), Integer32()).setUnits('0.1').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalValue.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotHistoricalValue.setDescription("Different units are used for specific parameters (intervalPmSnapshotParameter - the first index of the table):\n        'dBm' for OutputPower, InputPower, RamanPumpPower, OscPowerReceived;\n        'dB' for Attenuation, AttenuationOfVoa, OscGain, BackreflectionPowerReceived, TxLineAttenuation, RxLineAttenuation;\n        'no unit' for VariableGain.")
pmSnapshotHistoricalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalValidFlag.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotHistoricalValidFlag.setDescription('Valid Flag.')
pmSnapshotHistoricalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotHistoricalTimeStamp.setDescription('Timestamp.')
pmSnapshotCurrentTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5), )
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointTable.setStatus('deprecated')
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointTable.setDescription('pmSnapshotCurrentTerminPointTable')
pmSnapshotCurrentTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"))
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointEntry.setStatus('deprecated')
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointEntry.setDescription('Entry of pmSnapshotCurrentTerminPointTable')
pmSnapshotCurrentTerminPointOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5, 1, 1), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointOutputPower.setStatus('deprecated')
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointOutputPower.setDescription('Instantaneous Optical Power Transmitted (Output).')
pmSnapshotCurrentTerminPointInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointInputPower.setStatus('deprecated')
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointInputPower.setDescription('Total Optical Input Power Received.')
pmSnapshotCurrentTerminPointFiberConnAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointFiberConnAtten.setStatus('deprecated')
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointFiberConnAtten.setDescription('Fiber Connection Attenuation.')
pmSnapshotHistoricalTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6), )
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointTable.setStatus('deprecated')
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointTable.setDescription('pmSnapshotHistoricalTerminPointTable')
pmSnapshotHistoricalTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "pmSnapshotHistoricalTerminPointParameter"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "pmSnapshotHistoricalTerminPointNumber"))
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointEntry.setStatus('deprecated')
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointEntry.setDescription('Entry of pmSnapshotHistoricalTerminPointTable')
pmSnapshotHistoricalTerminPointParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 1), FspR7PmSnapshotParameterTypes())
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointParameter.setStatus('deprecated')
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointParameter.setDescription('Index representing the PM parameter')
pmSnapshotHistoricalTerminPointNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointNumber.setStatus('deprecated')
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointNumber.setDescription('Record number of optical power reference level.')
pmSnapshotHistoricalTerminPointValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 3), Integer32()).setUnits('0.1').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointValue.setStatus('deprecated')
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointValue.setDescription("Different units are used for specific parameters (intervalPmSnapshotParameter - the first index of the table):\n        'dBm' for OutputPower, InputPower, RamanPumpPower, OscPowerReceived;\n        'dB' for Attenuation, AttenuationOfVoa, OscGain, BackreflectionPowerReceived, TxLineAttenuation, RxLineAttenuation;\n        'no unit' for VariableGain.")
pmSnapshotHistoricalTerminPointValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointValidFlag.setStatus('deprecated')
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointValidFlag.setDescription('Valid Flag.')
pmSnapshotHistoricalTerminPointTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointTimeStamp.setDescription('Timestamp.')
endOfPmSnampshot = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmSnampshot.setStatus('current')
if mibBuilder.loadTexts: endOfPmSnampshot.setDescription('')
externalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1), )
if mibBuilder.loadTexts: externalPortTable.setStatus('current')
if mibBuilder.loadTexts: externalPortTable.setDescription('externalPort')
externalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalPortEntry.setStatus('current')
if mibBuilder.loadTexts: externalPortEntry.setDescription('Entry of externalPort')
externalPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: externalPortRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
externalPortConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 2), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortConnectionState.setStatus('current')
if mibBuilder.loadTexts: externalPortConnectionState.setDescription('Connection State')
externalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 3), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortType.setStatus('current')
if mibBuilder.loadTexts: externalPortType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
externalPortTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 4), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: externalPortTransmitChannel.setDescription('Channel')
externalPortChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 5), FspR7ChannelBandwidth()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortChannelBandwith.setStatus('current')
if mibBuilder.loadTexts: externalPortChannelBandwith.setDescription('Channel Bandwidth')
externalPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortAlias.setStatus('current')
if mibBuilder.loadTexts: externalPortAlias.setDescription('User Applied Descriptor')
externalPortFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: externalPortFarEndLocation.setDescription('FEND Location')
externalPortBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 8), Unsigned32()).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortBitrate.setStatus('current')
if mibBuilder.loadTexts: externalPortBitrate.setDescription('Derived from TYPE')
externalPortFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 9), FspR7FecType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortFecType.setStatus('current')
if mibBuilder.loadTexts: externalPortFecType.setDescription('Forward Error Correction (Only relevant where TYPE = OTU#)')
externalPortLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 10), FspR7LineCoding()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortLineCoding.setStatus('current')
if mibBuilder.loadTexts: externalPortLineCoding.setDescription('Line Coding')
externalPortFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 11), FspR7FrameFormat()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortFrameFormat.setStatus('current')
if mibBuilder.loadTexts: externalPortFrameFormat.setDescription('Frame Format')
externalPortOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9900, 600))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortOpticalPowerTx.setStatus('current')
if mibBuilder.loadTexts: externalPortOpticalPowerTx.setDescription('Optical Power Transmit')
externalPortOsnrTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 58))).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortOsnrTransmit.setStatus('current')
if mibBuilder.loadTexts: externalPortOsnrTransmit.setDescription('Optical Signal to Noise Ratio Transmit')
externalPortPmdTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortPmdTransmit.setStatus('current')
if mibBuilder.loadTexts: externalPortPmdTransmit.setDescription('Polarization Mode Dispersion Transmit')
externalPortChromDisperTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortChromDisperTx.setStatus('current')
if mibBuilder.loadTexts: externalPortChromDisperTx.setDescription('Chromatic Dispersion Transmit')
externalPortMinOsnrRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 58))).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMinOsnrRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortMinOsnrRcv.setDescription('Minimum Optical Signal to Noise Ratio, Rcv')
externalPortMinOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMinOptPowerRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortMinOptPowerRcv.setDescription('Minimum Optical Power Received')
externalPortMaxOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMaxOptPowerRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortMaxOptPowerRcv.setDescription('Maximum Optical Power Received')
externalPortMaxPmdRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMaxPmdRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortMaxPmdRcv.setDescription('Maximum Polarization Mode Dispersion Rcv')
externalPortMinChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMinChromDisperRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortMinChromDisperRcv.setDescription('Minimum Chromatic Dispersion Rcv')
externalPortMaxChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMaxChromDisperRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortMaxChromDisperRcv.setDescription('Maximum Chromatic Dispersion Rcv')
externalPortMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 22), FspR7MaxBitErrorRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMaxBitErrorRate.setStatus('current')
if mibBuilder.loadTexts: externalPortMaxBitErrorRate.setDescription('Maximum Bit Error Rate')
externalPortSourceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 23), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortSourceProfile.setStatus('current')
if mibBuilder.loadTexts: externalPortSourceProfile.setDescription('File Name')
externalPortSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 24), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: externalPortSecondaryStates.setDescription('Secondary States')
externalOmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 3), )
if mibBuilder.loadTexts: externalOmTable.setStatus('current')
if mibBuilder.loadTexts: externalOmTable.setDescription('externalOm')
externalOmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalOmEntry.setStatus('current')
if mibBuilder.loadTexts: externalOmEntry.setDescription('Entry of externalOm')
externalOmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalOmRowStatus.setStatus('current')
if mibBuilder.loadTexts: externalOmRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
externalOmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 3, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalOmType.setStatus('current')
if mibBuilder.loadTexts: externalOmType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
externalOmHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 3, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalOmHostName.setStatus('current')
if mibBuilder.loadTexts: externalOmHostName.setDescription('Host Device Name')
externalVchTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5), )
if mibBuilder.loadTexts: externalVchTable.setStatus('current')
if mibBuilder.loadTexts: externalVchTable.setDescription('externalVch')
externalVchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalVchEntry.setStatus('current')
if mibBuilder.loadTexts: externalVchEntry.setDescription('Entry of externalVch')
externalVchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchRowStatus.setStatus('current')
if mibBuilder.loadTexts: externalVchRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
externalVchConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 2), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchConnectionState.setStatus('current')
if mibBuilder.loadTexts: externalVchConnectionState.setDescription('Connection State')
externalVchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 3), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchType.setStatus('current')
if mibBuilder.loadTexts: externalVchType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
externalVchTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 4), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: externalVchTransmitChannel.setDescription('Channel')
externalVchChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 5), FspR7ChannelBandwidth()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchChannelBandwith.setStatus('current')
if mibBuilder.loadTexts: externalVchChannelBandwith.setDescription('Channel Bandwidth')
externalVchAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchAlias.setStatus('current')
if mibBuilder.loadTexts: externalVchAlias.setDescription('User Applied Descriptor')
externalVchFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: externalVchFarEndLocation.setDescription('FEND Location')
externalVchBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 8), Unsigned32()).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchBitrate.setStatus('current')
if mibBuilder.loadTexts: externalVchBitrate.setDescription('Derived from TYPE')
externalVchFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 9), FspR7FecType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchFecType.setStatus('current')
if mibBuilder.loadTexts: externalVchFecType.setDescription('Forward Error Correction (Only relevant where TYPE = OTU#)')
externalVchLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 10), FspR7LineCoding()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchLineCoding.setStatus('current')
if mibBuilder.loadTexts: externalVchLineCoding.setDescription('Line Coding')
externalVchFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 11), FspR7FrameFormat()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchFrameFormat.setStatus('current')
if mibBuilder.loadTexts: externalVchFrameFormat.setDescription('Frame Format')
externalVchOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9900, 600))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchOpticalPowerTx.setStatus('current')
if mibBuilder.loadTexts: externalVchOpticalPowerTx.setDescription('Optical Power Transmit')
externalVchOsnrTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 58))).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchOsnrTransmit.setStatus('current')
if mibBuilder.loadTexts: externalVchOsnrTransmit.setDescription('Optical Signal to Noise Ratio Transmit')
externalVchPmdTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchPmdTransmit.setStatus('current')
if mibBuilder.loadTexts: externalVchPmdTransmit.setDescription('Polarization Mode Dispersion Transmit')
externalVchChromDisperTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchChromDisperTx.setStatus('current')
if mibBuilder.loadTexts: externalVchChromDisperTx.setDescription('Chromatic Dispersion Transmit')
externalVchMinOsnrRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 58))).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchMinOsnrRcv.setStatus('current')
if mibBuilder.loadTexts: externalVchMinOsnrRcv.setDescription('Minimum Optical Signal to Noise Ratio, Rcv')
externalVchMinOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchMinOptPowerRcv.setStatus('current')
if mibBuilder.loadTexts: externalVchMinOptPowerRcv.setDescription('Minimum Optical Power Received')
externalVchMaxOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchMaxOptPowerRcv.setStatus('current')
if mibBuilder.loadTexts: externalVchMaxOptPowerRcv.setDescription('Maximum Optical Power Received')
externalVchMaxPmdRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchMaxPmdRcv.setStatus('current')
if mibBuilder.loadTexts: externalVchMaxPmdRcv.setDescription('Maximum Polarization Mode Dispersion Rcv')
externalVchMinChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchMinChromDisperRcv.setStatus('current')
if mibBuilder.loadTexts: externalVchMinChromDisperRcv.setDescription('Minimum Chromatic Dispersion Rcv')
externalVchMaxChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchMaxChromDisperRcv.setStatus('current')
if mibBuilder.loadTexts: externalVchMaxChromDisperRcv.setDescription('Maximum Chromatic Dispersion Rcv')
externalVchMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 22), FspR7MaxBitErrorRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchMaxBitErrorRate.setStatus('current')
if mibBuilder.loadTexts: externalVchMaxBitErrorRate.setDescription('Maximum Bit Error Rate')
endOfEci = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEci.setStatus('current')
if mibBuilder.loadTexts: endOfEci.setDescription('')
channelTracesTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1), )
if mibBuilder.loadTexts: channelTracesTable.setStatus('current')
if mibBuilder.loadTexts: channelTracesTable.setDescription('newNodeChannelTrace')
channelTracesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "channelTracesIndexNo1"), (0, "ADVA-FSPR7-MIB", "channelTracesIndexNo2"), (0, "ADVA-FSPR7-MIB", "channelTracesIndexNo3"), (0, "ADVA-FSPR7-MIB", "channelTracesIndexNo4"), (0, "ADVA-FSPR7-MIB", "channelTracesClassName"), (0, "ADVA-FSPR7-MIB", "channelTracesChannelNumber"), (0, "ADVA-FSPR7-MIB", "channelTracesRouteId"), (0, "ADVA-FSPR7-MIB", "channelTracesElementId"))
if mibBuilder.loadTexts: channelTracesEntry.setStatus('current')
if mibBuilder.loadTexts: channelTracesEntry.setDescription('Entry of newNodeChannelTrace')
channelTracesIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: channelTracesIndexNo1.setStatus('current')
if mibBuilder.loadTexts: channelTracesIndexNo1.setDescription('Adress index.')
channelTracesIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: channelTracesIndexNo2.setStatus('current')
if mibBuilder.loadTexts: channelTracesIndexNo2.setDescription('Adress index.')
channelTracesIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: channelTracesIndexNo3.setStatus('current')
if mibBuilder.loadTexts: channelTracesIndexNo3.setDescription('Adress index.')
channelTracesIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: channelTracesIndexNo4.setStatus('current')
if mibBuilder.loadTexts: channelTracesIndexNo4.setDescription('Adress index.')
channelTracesClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: channelTracesClassName.setStatus('current')
if mibBuilder.loadTexts: channelTracesClassName.setDescription('Entity Class Name.')
channelTracesChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 6), FspR7ChannelNumber())
if mibBuilder.loadTexts: channelTracesChannelNumber.setStatus('current')
if mibBuilder.loadTexts: channelTracesChannelNumber.setDescription('Channel Number')
channelTracesRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 7), FspR7NCTraceId())
if mibBuilder.loadTexts: channelTracesRouteId.setStatus('current')
if mibBuilder.loadTexts: channelTracesRouteId.setDescription('Route ID')
channelTracesElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 8), Unsigned32())
if mibBuilder.loadTexts: channelTracesElementId.setStatus('current')
if mibBuilder.loadTexts: channelTracesElementId.setDescription('Route element ID')
channelTracesFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesFromAid.setStatus('current')
if mibBuilder.loadTexts: channelTracesFromAid.setDescription('AID FROM represented as string')
channelTracesToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesToAid.setStatus('current')
if mibBuilder.loadTexts: channelTracesToAid.setDescription('AID TO represented as string')
channelTracesRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 11), FspR7NCTRouteType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesRouteType.setStatus('current')
if mibBuilder.loadTexts: channelTracesRouteType.setDescription('FspR7NCTRouteType Textual-Convention indicates the connection type between two ports.\n        If a connection between the two ports is within a module (i.e. Client to Network port),\n        the Route-Type is either provisioned(6) of fixed ( equipment(5) ). If the connection\n        is between two modules ports, then the Route-Type is fiber(2), cable(3) or backPlane(4).')
channelTracesChannelRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 12), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesChannelRx.setStatus('current')
if mibBuilder.loadTexts: channelTracesChannelRx.setDescription('Channel Number for the Receive Interface')
channelTracesChannelTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 13), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesChannelTx.setStatus('current')
if mibBuilder.loadTexts: channelTracesChannelTx.setDescription('Channel Number for the Transmit Interface')
endOfchannelTracesTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfchannelTracesTable.setStatus('current')
if mibBuilder.loadTexts: endOfchannelTracesTable.setDescription('')
ratFrom = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratFrom.setStatus('current')
if mibBuilder.loadTexts: ratFrom.setDescription('FROM-end of equipment connection (jumper). FROM direction is significant only for 1WAY connections.')
ratTo = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratTo.setStatus('current')
if mibBuilder.loadTexts: ratTo.setDescription('TO-end of equipment connection (jumper). TO direction is signaificant only for 1WAY')
ratChIngress = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 5), FspR7ChannelNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratChIngress.setStatus('current')
if mibBuilder.loadTexts: ratChIngress.setDescription('Channel')
ratChEgress = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 6), FspR7ChannelNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratChEgress.setStatus('current')
if mibBuilder.loadTexts: ratChEgress.setDescription('Channel')
ratSuperChannel = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 7), FspR7NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratSuperChannel.setStatus('current')
if mibBuilder.loadTexts: ratSuperChannel.setDescription('Super Channel Support')
ratSuperChannelFq = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 8), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratSuperChannelFq.setStatus('current')
if mibBuilder.loadTexts: ratSuperChannelFq.setDescription('Lane Channel Setting')
ratStartPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10), )
if mibBuilder.loadTexts: ratStartPointTable.setStatus('current')
if mibBuilder.loadTexts: ratStartPointTable.setDescription('ratStartPoint')
ratStartPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ratStartPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "ratStartPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "ratStartPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "ratStartPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "ratStartPointClassName"))
if mibBuilder.loadTexts: ratStartPointEntry.setStatus('current')
if mibBuilder.loadTexts: ratStartPointEntry.setDescription('Entry of ratStartPoint')
ratStartPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ratStartPointIndexNo1.setStatus('current')
if mibBuilder.loadTexts: ratStartPointIndexNo1.setDescription('Adress index.')
ratStartPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ratStartPointIndexNo2.setStatus('current')
if mibBuilder.loadTexts: ratStartPointIndexNo2.setDescription('Adress index.')
ratStartPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 3), Unsigned32())
if mibBuilder.loadTexts: ratStartPointIndexNo3.setStatus('current')
if mibBuilder.loadTexts: ratStartPointIndexNo3.setDescription('Adress index.')
ratStartPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 4), Unsigned32())
if mibBuilder.loadTexts: ratStartPointIndexNo4.setStatus('current')
if mibBuilder.loadTexts: ratStartPointIndexNo4.setDescription('Adress index.')
ratStartPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 5), EntityClassName())
if mibBuilder.loadTexts: ratStartPointClassName.setStatus('current')
if mibBuilder.loadTexts: ratStartPointClassName.setDescription('Entity Class Name')
ratStartPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointAidString.setStatus('current')
if mibBuilder.loadTexts: ratStartPointAidString.setDescription('Aid string of entity.')
ratStartPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointTableId.setStatus('current')
if mibBuilder.loadTexts: ratStartPointTableId.setDescription('RowPointer to the dependent entity.')
ratStartPointChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 8), FspR7ChannelNumberCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointChannelNumber.setStatus('current')
if mibBuilder.loadTexts: ratStartPointChannelNumber.setDescription('Channel Number')
ratStartPointChannelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 9), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointChannelGroup.setStatus('current')
if mibBuilder.loadTexts: ratStartPointChannelGroup.setDescription('Channel Group Number')
ratStartPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointClass.setStatus('current')
if mibBuilder.loadTexts: ratStartPointClass.setDescription('EntityClass')
endOfRatStartPointTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfRatStartPointTable.setStatus('current')
if mibBuilder.loadTexts: endOfRatStartPointTable.setDescription('')
ratAnalyzerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12), )
if mibBuilder.loadTexts: ratAnalyzerTable.setStatus('current')
if mibBuilder.loadTexts: ratAnalyzerTable.setDescription('resourceAnalyzer')
ratAnalyzerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ratAnalyzerRouteId"), (0, "ADVA-FSPR7-MIB", "ratAnalyzerElementId"))
if mibBuilder.loadTexts: ratAnalyzerEntry.setStatus('current')
if mibBuilder.loadTexts: ratAnalyzerEntry.setDescription('Entry of resourceAnalyzer')
ratAnalyzerRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ratAnalyzerRouteId.setStatus('current')
if mibBuilder.loadTexts: ratAnalyzerRouteId.setDescription('Route ID')
ratAnalyzerElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ratAnalyzerElementId.setStatus('current')
if mibBuilder.loadTexts: ratAnalyzerElementId.setDescription('Route element ID')
ratAnalyzerFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerFromAid.setStatus('current')
if mibBuilder.loadTexts: ratAnalyzerFromAid.setDescription('FROM-end of equipment connection (jumper). FROM direction is significant only for 1WAY connections.')
ratAnalyzerToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerToAid.setStatus('current')
if mibBuilder.loadTexts: ratAnalyzerToAid.setDescription('TO-end of equipment connection (jumper). TO direction is signaificant only for 1WAY')
ratAnalyzerChannelTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 5), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerChannelTx.setStatus('current')
if mibBuilder.loadTexts: ratAnalyzerChannelTx.setDescription('Channel Number for the Transmit Interface')
ratAnalyzerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 6), FspR7StateConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerState.setStatus('current')
if mibBuilder.loadTexts: ratAnalyzerState.setDescription('State of the Physical Connection')
ratAnalyzerRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 7), FspR7NCTRouteType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerRouteType.setStatus('current')
if mibBuilder.loadTexts: ratAnalyzerRouteType.setDescription('FspR7NCTRouteType Textual-Convention indicates the connection type between two ports.\n        If a connection between the two ports is within a module (i.e. Client to Network port),\n        the Route-Type is either provisioned(6) of fixed ( equipment(5) ). If the connection\n        is between two modules ports, then the Route-Type is fiber(2), cable(3) or backPlane(4).')
endOfRatAnalyzerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfRatAnalyzerTable.setStatus('current')
if mibBuilder.loadTexts: endOfRatAnalyzerTable.setDescription('')
ratBlockingTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14), )
if mibBuilder.loadTexts: ratBlockingTable.setStatus('current')
if mibBuilder.loadTexts: ratBlockingTable.setDescription('ratBlocking')
ratBlockingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ratBlockingElementId"))
if mibBuilder.loadTexts: ratBlockingEntry.setStatus('current')
if mibBuilder.loadTexts: ratBlockingEntry.setDescription('Entry of ratBlocking')
ratBlockingElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ratBlockingElementId.setStatus('current')
if mibBuilder.loadTexts: ratBlockingElementId.setDescription('Element ID')
ratBlockingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1, 2), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratBlockingType.setStatus('current')
if mibBuilder.loadTexts: ratBlockingType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely\n        the number and allowed TYPE's of the provisionable dependent\n        entities (plugs, interfaces, modules)")
ratBlockingConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1, 3), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratBlockingConnState.setStatus('current')
if mibBuilder.loadTexts: ratBlockingConnState.setDescription('Connection State')
ratBlockingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratBlockingAid.setStatus('current')
if mibBuilder.loadTexts: ratBlockingAid.setDescription('TL1 Access Identifier')
endOfRatBlockingTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfRatBlockingTable.setStatus('current')
if mibBuilder.loadTexts: endOfRatBlockingTable.setDescription('')
endOfserviceDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfserviceDiagnostics.setStatus('current')
if mibBuilder.loadTexts: endOfserviceDiagnostics.setDescription('')
changePhysicalPortServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1), )
if mibBuilder.loadTexts: changePhysicalPortServiceTable.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTable.setDescription('')
changePhysicalPortServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: changePhysicalPortServiceEntry.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceEntry.setDescription('')
changePhysicalPortServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
changePhysicalPortServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceType.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
changePhysicalPortServiceAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceAdmin.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
changePhysicalPortServiceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceAlias.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceAlias.setDescription('User Applied Descriptor')
changePhysicalPortServiceAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 5), FspR7AlsMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceAlsMode.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceAlsMode.setDescription('Determines the reaction in backward direction in response to a LOS\n        on the same Interface: on a Network Interface connected to the DWDM\n        this is a matter of laser safety')
changePhysicalPortServiceBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 6), FspR7PortBehaviour()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceBehaviour.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceBehaviour.setDescription('Behavior or Port usage based on configuration/usage in the system regardless of faceplate designation')
changePhysicalPortServiceDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50000, 50000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceDispersionSetting.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDispersionSetting.setDescription('Chromatic Dispersion Compensation setting on module')
changePhysicalPortServiceDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 8), FspR7DispersionModes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceDispersionMode.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDispersionMode.setDescription('Chromatic Dispersion Compensation Mode')
changePhysicalPortServiceChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceChannelProv.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceChannelProv.setDescription('Channel')
changePhysicalPortServiceWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 10), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceWdmRxChannel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceWdmRxChannel.setDescription('Channel Number for the Receive Interface')
changePhysicalPortServiceCodeGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 11), FspR7CodeGain()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceCodeGain.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCodeGain.setDescription('Forward Error Correction Coding gain')
changePhysicalPortServiceXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 12), FspR7XfpDecisionThres()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceXfpDecisionThres.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceXfpDecisionThres.setDescription('XFP Decision threshold setting')
changePhysicalPortServiceDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 13), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceDisparityCorrection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDisparityCorrection.setDescription('Disparity correction')
changePhysicalPortServiceEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 14), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceEqlzAdmin.setDescription('Scheduled Equalization Administration')
changePhysicalPortServiceErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 15), FspR7ErrorFwdMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceErrorForwarding.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceErrorForwarding.setDescription('Determines the reaction in forward direction in response to a LOS on\n        the interface on the opposite side of the module: may override\n        this behaviour in the interests of laser safety.')
changePhysicalPortServiceFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 16), FspR7FecType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceFecType.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceFecType.setDescription('Forward Error Correction (Only relevant where TYPE = OTU#)')
changePhysicalPortServiceFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 17), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceFarEndCommunication.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceFarEndCommunication.setDescription('Used for Optojack plugs; Communication to Far End Plug is observed')
changePhysicalPortServiceFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 18), FspR7FlowControlMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceFlowControl.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceFlowControl.setDescription('Flow Control mechanism')
changePhysicalPortServiceLaneChannelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 19), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaneChannelSetting.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceLaneChannelSetting.setDescription('Lane Channel Setting')
changePhysicalPortServiceLaserDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 20), FspR7LaserDelayTimer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaserDelayTimer.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceLaserDelayTimer.setDescription('Relevant only when ERRFWD=LSROFF. Enables/disables the\n        possibility to delay turning off and on the laser.\n        This applies to the case when turning off the laser\n        is done  as an error forwarding mechanism.')
changePhysicalPortServiceLaserOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaserOffTimer.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceLaserOffTimer.setDescription('Delay before laser is swiched off')
changePhysicalPortServiceLaserOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaserOnTimer.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceLaserOnTimer.setDescription('Delay before laser is switched on')
changePhysicalPortServiceLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 23), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaserOffDelayFunction.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceLaserOffDelayFunction.setDescription('A configuration request for the Laser Off Delay function. This function\n        delays turning off the laser as a consequent action to a defect.')
changePhysicalPortServiceAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 24), FspR7ManualAuto()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceAutoPTassignment.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceAutoPTassignment.setDescription('Auto assignment of ODU PT')
changePhysicalPortServiceTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 25), FspR7ManualAuto()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTributarySlotMethod.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTributarySlotMethod.setDescription('Tributary Slot assignment method')
changePhysicalPortServiceOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
changePhysicalPortServiceOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 27), FspR7OpuPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceOpuPayloadType.setDescription('OPU Payload Type Indicator')
changePhysicalPortServiceSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 28), FspR7BERThreshold()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSonetLine.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSonetLine.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
changePhysicalPortServiceSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSdhMs.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSdhMs.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n        Defined as percentage Background Block Errors (30% default) evaluated\n        over a defined period (SDPER-RS).')
changePhysicalPortServiceSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOtu.setDescription('Background-Block-Error-Based Signal Degradation Definition for OTU')
changePhysicalPortServiceSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
changePhysicalPortServiceSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThreshold.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThreshold.setDescription('Threshold for number of errors (CV or CV+DE) in one second')
changePhysicalPortServiceSigDegPcslThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPcslThreshold.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPcslThreshold.setDescription('Block-Error-Based Degradation Definition for Physical Coding Sublayer')
changePhysicalPortServiceSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 34), FspR7BERThreshold()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSonetSection.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
changePhysicalPortServiceSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSdhSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSdhSection.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n        Defined as percentage Background Block Errors (30% default) evaluated\n        over a defined period (SDPER-RS).')
changePhysicalPortServiceSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
changePhysicalPortServiceSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
changePhysicalPortServiceSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
changePhysicalPortServiceSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSignalDegradePeriod.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSignalDegradePeriod.setDescription('The measurement period in seconds used together with\n        the deployProvIfSigDegThresSdhRegSect based on the block error counting method.\n        The valid range is 2..10,\n        The default being 7.')
changePhysicalPortServiceSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
changePhysicalPortServiceSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOtu.setDescription('Integration Period for Signal degrade')
changePhysicalPortServiceSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodIntegration.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodIntegration.setDescription('Integration Period for Signal degrade')
changePhysicalPortServiceSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodSdhSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodSdhSection.setDescription('Provisionable Signal Degrade Integration Period for SDH')
changePhysicalPortServiceSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
changePhysicalPortServiceSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
changePhysicalPortServiceSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
changePhysicalPortServiceOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 47), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
changePhysicalPortServiceTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 48), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTcmALevel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTcmALevel.setDescription('Activation of Tandem Connection Monitoring Instance A')
changePhysicalPortServiceTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 49), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTcmBLevel.setDescription('Activation of Tandem Connection Monitoring Instance B')
changePhysicalPortServiceTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 50), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
changePhysicalPortServiceTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 51), OhTerminationLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTerminationLevel.setDescription('Highest signal level hardware removes then generates for transmission.')
changePhysicalPortServiceTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 52), SonetTimingSource()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimingSource.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTimingSource.setDescription('The timing source for this interface.\n        - internal: used in stand-alone, point-to-point topologies stand-alone (dedicated fiber operation).\n        - loopTiming: e.g. used in point-to-point via SONET network and feeder topologies. The default is\n        internal(1).')
changePhysicalPortServiceTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 53), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
changePhysicalPortServiceTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 54), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOtu.setDescription('OTU Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
changePhysicalPortServiceTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 55), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeSonetSection.setDescription('SONET Section  Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
changePhysicalPortServiceTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 56), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOduTcmA.setDescription('TCM_A Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
changePhysicalPortServiceTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 57), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOduTcmB.setDescription('TCM_B Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
changePhysicalPortServiceTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 58), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOduTcmC.setDescription('TCM_C Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
changePhysicalPortServiceTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 59), SonetTraceForm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceFormSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceFormSonetSection.setDescription('Byte-Length of Trace Compared to Expected')
changePhysicalPortServiceTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedSonetSection.setDescription('Expected Sec/RS trace. NULL TRACE implies that no trace comparison is made.')
changePhysicalPortServiceTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSonetSection.setDescription('Sec/RS Trace to be Transmitted')
changePhysicalPortServiceTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 62), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOtu.setDescription('Expected SAPI part of the OTU trace (15 character). NULL TRACE implies that no trace comparison is made.')
changePhysicalPortServiceTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOtu.setDescription('The transmitted SAPI part of the OTU trace (15 character)')
changePhysicalPortServiceTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOtu.setDescription('The transmitted DAPI part of the OTU trace (15 character)')
changePhysicalPortServiceTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOtu.setDescription('The transmitted Operator Specific part of the OTU trace (32 character)')
changePhysicalPortServiceTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character). NULL TRACE implies that no trace comparison is made.')
changePhysicalPortServiceTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 67), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
changePhysicalPortServiceTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
changePhysicalPortServiceTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
changePhysicalPortServiceTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
changePhysicalPortServiceTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
changePhysicalPortServiceTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 72), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
changePhysicalPortServiceTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 73), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
changePhysicalPortServiceTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 74), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
changePhysicalPortServiceTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 75), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
changePhysicalPortServiceTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 76), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
changePhysicalPortServiceTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 77), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
changePhysicalPortServiceTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 78), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
changePhysicalPortServiceTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 79), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
changePhysicalPortServiceTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 80), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
changePhysicalPortServiceTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 81), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
changePhysicalPortServiceTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 82), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTxOffDelay.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTxOffDelay.setDescription('Enable or disable TXOFFHOLD Period for Error Forwarding and LKDO-OFF Consequent Action.')
changePhysicalPortServiceVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 83), FspR7VoaMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceVoaMode.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceVoaMode.setDescription('VOA operating mode')
changePhysicalPortServiceVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 84), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
changePhysicalPortServiceTxOffOnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 85), FspR7TxOffOnTm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTxOffOnTm.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTxOffOnTm.setDescription('Relevant only when ERRFWD=TXOFF. Enables/disables the\n        possibility to delay turning off and on the the transmitter.\n        This applies to the case when turning off the transmitter\n        is done  as an error forwarding mechanism.')
changePhysicalPortServiceTxOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 86), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTxOffTimer.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTxOffTimer.setDescription('Delay before transmitter is swiched off')
changePhysicalPortServiceTxOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 87), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTxOnTimer.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceTxOnTimer.setDescription('Delay before transmitter is switched on')
changePhysicalPortServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 88), FspR7TransmissionMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceMode.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceMode.setDescription('Mode of the module, determine operation or functionality')
changePhysicalPortServiceChannelPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 89), FspR7ChannelRangeInventory()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceChannelPlan.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceChannelPlan.setDescription('Channel Range')
changePhysicalPortServiceOptimize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 90), FspR7Optimize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceOptimize.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceOptimize.setDescription('Optimizes port for either protection switch time or traffic regeneration operation')
changePhysicalPortServiceLinkSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 91), FspR7DisableEnable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLinkSetup.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceLinkSetup.setDescription('Support RDMA over Converged Ethernet (RoCE)')
changePhysicalPortServiceChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 92), FspR7ChannelSpacing()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceChannelSpacing.setDescription('ITU Grid channel spacing')
endOfChangeService = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfChangeService.setStatus('current')
if mibBuilder.loadTexts: endOfChangeService.setDescription('')
haTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1), )
if mibBuilder.loadTexts: haTable.setStatus('current')
if mibBuilder.loadTexts: haTable.setDescription('')
haEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: haEntry.setStatus('current')
if mibBuilder.loadTexts: haEntry.setDescription('')
haProtectionIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProtectionIndexAid.setStatus('current')
if mibBuilder.loadTexts: haProtectionIndexAid.setDescription('(Protection AID) AID of protection entity involved in the protection group.')
haInhSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 2), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: haInhSwitching.setStatus('current')
if mibBuilder.loadTexts: haInhSwitching.setDescription('(Inhibit Controller Switching) Prevents protection switch to partner controller.')
haSwitchToDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 3), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: haSwitchToDuplex.setStatus('current')
if mibBuilder.loadTexts: haSwitchToDuplex.setDescription('Switch to Parnter Controller')
haSwitchOverCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 4), FspR7SwitchOverCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haSwitchOverCause.setStatus('current')
if mibBuilder.loadTexts: haSwitchOverCause.setDescription('Cause of Fail-Over or Switch-Over to Partner Controller')
haSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: haSoftwareVersion.setDescription('Software Version of the NCU software. <')
endOfHaTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfHaTable.setStatus('current')
if mibBuilder.loadTexts: endOfHaTable.setDescription('')
ffpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3), )
if mibBuilder.loadTexts: ffpTable.setStatus('current')
if mibBuilder.loadTexts: ffpTable.setDescription('FfpTable')
ffpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFfpShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFfpSlotNo"), (0, "ADVA-FSPR7-MIB", "entityFfpPortNo"), (0, "ADVA-FSPR7-MIB", "entityFfpExtNo"), (0, "ADVA-FSPR7-MIB", "entityFfpClassName"))
if mibBuilder.loadTexts: ffpEntry.setStatus('current')
if mibBuilder.loadTexts: ffpEntry.setDescription('Entry of FfpTable')
ffpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpRowStatus.setStatus('current')
if mibBuilder.loadTexts: ffpRowStatus.setDescription('RowStatus')
ffpCreationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 2), FfpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpCreationMethod.setStatus('current')
if mibBuilder.loadTexts: ffpCreationMethod.setDescription('Type of protection (normal/forced)')
ffpSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 3), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpSDswitching.setStatus('current')
if mibBuilder.loadTexts: ffpSDswitching.setDescription('This state controls whether the switch criteria for the APS group will\n        include the Signal Degrade alarm.')
ffpHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 4), ApsHoldoffTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: ffpHoldOffTime.setDescription('This value controls the switch delay (0 to 10 seconds in\n        100ms steps) for the protection group. Changing the hold-off\n        time when the timer is active will not affect the active\n        timer. The change will take effect the next time the timer\n        is active.')
ffpProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 5), ProtectionMech()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpProtectionMech.setStatus('current')
if mibBuilder.loadTexts: ffpProtectionMech.setDescription('The protection type of this protection group.')
ffpWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpWorkingAid.setStatus('current')
if mibBuilder.loadTexts: ffpWorkingAid.setDescription('AID of working port involved in the protection group.')
ffpProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpProtectionAid.setStatus('current')
if mibBuilder.loadTexts: ffpProtectionAid.setDescription('(Protection AID) AID of protection entity involved in the protection group.')
ffpSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 8), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpSignalDegradeSwitching.setStatus('current')
if mibBuilder.loadTexts: ffpSignalDegradeSwitching.setDescription('Switch Trigger Additionally on Signal Degrade Link Detection')
ffpSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 9), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpSignalFailureSwitching.setStatus('current')
if mibBuilder.loadTexts: ffpSignalFailureSwitching.setDescription('Switch Trigger on Signal Failure Link Detection')
ffpFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpFarEndIp.setStatus('current')
if mibBuilder.loadTexts: ffpFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default\n        is set by NE System on LINK establishment if FENDIPACPT = Y')
ffpPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 11), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpPeerAid.setStatus('current')
if mibBuilder.loadTexts: ffpPeerAid.setDescription('AID of Protection Partner involved in the protection group.')
ffpApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 12), ApsType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpApsType.setStatus('current')
if mibBuilder.loadTexts: ffpApsType.setDescription('The type of APS implemented in this protection group.')
ffpRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 13), ApsRevertMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpRevertMode.setStatus('current')
if mibBuilder.loadTexts: ffpRevertMode.setDescription('Revertive Protection Switching')
ffpWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 12))).setUnits('min').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: ffpWaitToRestore.setDescription('Wait to Restore Timer value')
ffpDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 15), ApsDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpDirection.setStatus('current')
if mibBuilder.loadTexts: ffpDirection.setDescription("Indicates whether the APS function is 'unidirectional' (single-ended)\n        or 'bidirectional' (dual-ended).")
ffpProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 16), FspR7ProtectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpProtectionType.setStatus('current')
if mibBuilder.loadTexts: ffpProtectionType.setDescription('')
ffpApsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 17), FspR7ApsChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpApsChannel.setStatus('current')
if mibBuilder.loadTexts: ffpApsChannel.setDescription('Selection of the location of the APS channel')
ffpApsFarEndModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 18), FspR7ApsFarEndModule()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpApsFarEndModule.setStatus('current')
if mibBuilder.loadTexts: ffpApsFarEndModule.setDescription('This value is the far end module type(10tcc10g or other).')
endOfFfpTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFfpTable.setStatus('current')
if mibBuilder.loadTexts: endOfFfpTable.setDescription('')
endOfProtection = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfProtection.setStatus('current')
if mibBuilder.loadTexts: endOfProtection.setDescription('')
aidMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1), )
if mibBuilder.loadTexts: aidMappingTable.setStatus('current')
if mibBuilder.loadTexts: aidMappingTable.setDescription('Contains entries that represent string format of valid AID in F7 systems.\n        This table contains entries only for those strings that were requested using snmpget from this table within last 1ms.')
aidMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "aidMappingAidString"))
if mibBuilder.loadTexts: aidMappingEntry.setStatus('current')
if mibBuilder.loadTexts: aidMappingEntry.setDescription('')
aidMappingAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: aidMappingAidString.setStatus('current')
if mibBuilder.loadTexts: aidMappingAidString.setDescription('')
aidMappingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aidMappingId.setStatus('current')
if mibBuilder.loadTexts: aidMappingId.setDescription('RowPointer to the entity.')
aidMappingString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aidMappingString.setStatus('current')
if mibBuilder.loadTexts: aidMappingString.setDescription("String representation of the entity. Example: '20.7.33152.19420.18'.")
endOfAidMappingTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAidMappingTable.setStatus('current')
if mibBuilder.loadTexts: endOfAidMappingTable.setDescription('')
endOfTranslation = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfTranslation.setStatus('current')
if mibBuilder.loadTexts: endOfTranslation.setDescription('')
sshHostKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 1), FspR7SshHostKeyLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyLength.setStatus('current')
if mibBuilder.loadTexts: sshHostKeyLength.setDescription('Generated SSH host key length')
newSshHostKey = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 2), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newSshHostKey.setStatus('current')
if mibBuilder.loadTexts: newSshHostKey.setDescription('Apply generated SSH host key')
accessWarning = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 3), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessWarning.setStatus('current')
if mibBuilder.loadTexts: accessWarning.setDescription('Unauthorized Access Warning Switch')
accessWarningMessage = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 4), FspR7SnmpLongString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessWarningMessage.setStatus('current')
if mibBuilder.loadTexts: accessWarningMessage.setDescription('Unauthorized Access Warning Message')
showLastLoginSuccess = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 5), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: showLastLoginSuccess.setStatus('current')
if mibBuilder.loadTexts: showLastLoginSuccess.setDescription('Enable/disable displaying information about last successful login attempt immediately after logging in.')
showLastLoginFail = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 6), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: showLastLoginFail.setStatus('current')
if mibBuilder.loadTexts: showLastLoginFail.setDescription('Enable/disable displaying information about last failed login attempt immediately after logging in.')
writeAccessStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 7), FspR7DisableEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: writeAccessStatus.setStatus('current')
if mibBuilder.loadTexts: writeAccessStatus.setDescription('Enable/Disable Central Access Control - temporary write access for monitor users.')
writeAccessRequestTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(60, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: writeAccessRequestTimeout.setStatus('current')
if mibBuilder.loadTexts: writeAccessRequestTimeout.setDescription('User Request (via SNMP) timeout period. Range: 60-3600 seconds (1-60 minutes)')
virtualSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15), )
if mibBuilder.loadTexts: virtualSessionTable.setStatus('current')
if mibBuilder.loadTexts: virtualSessionTable.setDescription('')
virtualSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "virtualSessionId"))
if mibBuilder.loadTexts: virtualSessionEntry.setStatus('current')
if mibBuilder.loadTexts: virtualSessionEntry.setDescription('')
virtualSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: virtualSessionId.setStatus('current')
if mibBuilder.loadTexts: virtualSessionId.setDescription('')
virtualSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 2), FspR7VSessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionStatus.setStatus('current')
if mibBuilder.loadTexts: virtualSessionStatus.setDescription("Read-only object that describes current status of user session.\n        There are 3 possible valid values of this object:\n        - Normal(1) - default session status.\n        - writeAcsRequested(2) - status assigned to session that requested write access and is waiting for ADMIN response\n        After time equal 'write access request timeout' if session status has not been changed it will automatically change back to normal(1) and fspR7WriteAccessRequestTimeout trap will be sent.\n        - writeAcsGranted(3) - write access has been granted by ADMIN user. Session can act as if it had PROVISION privilege level.\n        After time equal virtualSessionTimeout session status will be automatically changed to normal(1) and fspR7WriteAccessTimeout trap will be sent.")
virtualSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: virtualSessionTimeout.setDescription('Read-write parameter describing time for which write access will be granted to the session. This parameter can be edited only if sessionStatus is equal 1 (normal).\n        Can be edited only by user with privilege level MONITOR.')
virtualSessionWriteAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 4), FspR7VSessWriteAccess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSessionWriteAccess.setStatus('current')
if mibBuilder.loadTexts: virtualSessionWriteAccess.setDescription('Read-write parameter used to manipulate write access of the user. SNMPGET/SNMPGETNEXT will always return none(4) value for this parameter. It can be set to multiple values depending of sessionStatus:\n        - request(1) - settable only by MONITOR if his sessionStatus is equal normal. Causes change of sessionStatus to writeAcsRequested(2). Trap FspR7WriteAccessRequest will be sent.\n        - revoke(2) - settable both by MONITOR user and ADMIN user, only if session status is equal writeAcsRequested(2) or writeAcsGranted(3).\n        If session status is equal writeAcsRequested(2) setting this value  will change session status back to normal(1). Depending on author of action fspR7WriteAccessRevoked (MONITOR) or fspR7WriteAccessDenied (ADMIN) trap will be sent.\n        If session status is equal writeAcsGranted(3) it will be changed to normal(1).  fspR7WriteAccessRevoked trap will be sent.\n        - Grant(3) - settable only by ADMIN user only when session status is equal writeAcsRequested(2). Setting this value will change session staus to writeAcsGranted (3), additionally fspR7WriteAccessGranted trap will be sent.')
virtualSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionUserName.setStatus('current')
if mibBuilder.loadTexts: virtualSessionUserName.setDescription('Name of the user owning the virtual session.')
virtualSessionIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionIpAddress.setStatus('current')
if mibBuilder.loadTexts: virtualSessionIpAddress.setDescription('IP of the user owning the virtual session.')
virtualSessionChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 7), FspR7VSessChangeReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionChangeReason.setStatus('current')
if mibBuilder.loadTexts: virtualSessionChangeReason.setDescription('Last operation status')
virtualSessionChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionChangeTime.setStatus('current')
if mibBuilder.loadTexts: virtualSessionChangeTime.setDescription('Time of last operation status')
packetFiltering = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 16), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: packetFiltering.setStatus('current')
if mibBuilder.loadTexts: packetFiltering.setDescription('Enable/disable packet filtering.')
whitelistFiltering = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 17), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whitelistFiltering.setStatus('current')
if mibBuilder.loadTexts: whitelistFiltering.setDescription('Enable/disable whitelist rules filtering.')
restrictToSysIP = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 18), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restrictToSysIP.setStatus('current')
if mibBuilder.loadTexts: restrictToSysIP.setDescription('Enable/disable whitelist restriction, that only packets are accepted, which are targeted to the System IP.')
icmpFiltering = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 19), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpFiltering.setStatus('current')
if mibBuilder.loadTexts: icmpFiltering.setDescription('Enable/disable ICMP filtering.')
icmpEchoRequests = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 20), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpEchoRequests.setStatus('current')
if mibBuilder.loadTexts: icmpEchoRequests.setDescription('Enable/disable blocking incoming ICMP echo requests.')
icmpSourceQuench = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 21), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpSourceQuench.setStatus('current')
if mibBuilder.loadTexts: icmpSourceQuench.setDescription('Enable/disable blocking incoming ICMP Source-Quench messages.')
icmpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 22), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpRedirect.setStatus('current')
if mibBuilder.loadTexts: icmpRedirect.setDescription('Enable/disable blocking incoming ICMP redirect messages.')
ocmpTimestampRequest = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 23), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocmpTimestampRequest.setStatus('current')
if mibBuilder.loadTexts: ocmpTimestampRequest.setDescription('Enable/disable blocking incoming ICMP timestamp request messages.')
icmpAddrMask = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 24), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpAddrMask.setStatus('current')
if mibBuilder.loadTexts: icmpAddrMask.setDescription('Enable/disable blocking incoming ICMP address-mask request messages.')
dosProtection = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 25), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosProtection.setStatus('current')
if mibBuilder.loadTexts: dosProtection.setDescription('Enable/disable denial-of-service protection.')
isolateInbandChan = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 26), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isolateInbandChan.setStatus('current')
if mibBuilder.loadTexts: isolateInbandChan.setDescription('Enable/disable blocking routing between inband channels.')
ipForwarding = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 27), FspR7IpForwarding()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipForwarding.setStatus('current')
if mibBuilder.loadTexts: ipForwarding.setDescription('Enable/disable IP forwarding.')
whitelistTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30), )
if mibBuilder.loadTexts: whitelistTable.setStatus('current')
if mibBuilder.loadTexts: whitelistTable.setDescription('whitelistTable')
whitelistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "whitelistId"))
if mibBuilder.loadTexts: whitelistEntry.setStatus('current')
if mibBuilder.loadTexts: whitelistEntry.setDescription('Entry of whitelistTable')
whitelistId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: whitelistId.setStatus('current')
if mibBuilder.loadTexts: whitelistId.setDescription('')
whitelistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: whitelistRowStatus.setStatus('current')
if mibBuilder.loadTexts: whitelistRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
whitelistAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: whitelistAdmin.setStatus('current')
if mibBuilder.loadTexts: whitelistAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
whitelistIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: whitelistIpMask.setStatus('current')
if mibBuilder.loadTexts: whitelistIpMask.setDescription('IP MASK assigned to LAN IP Interface')
whitelistIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: whitelistIpAddr.setStatus('current')
if mibBuilder.loadTexts: whitelistIpAddr.setDescription('IP Address assigned to LAN IP Interface')
lockSafety = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 31), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lockSafety.setStatus('current')
if mibBuilder.loadTexts: lockSafety.setDescription('The last admin account is protected by locking.')
unlockTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 32), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: unlockTime.setStatus('current')
if mibBuilder.loadTexts: unlockTime.setDescription('Time that the user account is locked (after the maximum number of failed login attempts has been exceeded).')
sslRenewMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 33), FspR7RenewMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslRenewMode.setStatus('current')
if mibBuilder.loadTexts: sslRenewMode.setDescription('Defines SSL certificate renew mode. In AUTOMATIC mode SSL certificate is verified and generated (if needed) at every system startup. In MANUAL mode the user is responsible for generation new SSL certificate when needed.')
sslKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 34), FspR7KeyLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslKeyLength.setStatus('current')
if mibBuilder.loadTexts: sslKeyLength.setDescription('SSL certificate key length (in bits).')
sslValidityPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 35), FspR7ValidityPeriod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslValidityPeriod.setStatus('current')
if mibBuilder.loadTexts: sslValidityPeriod.setDescription('Period of time (in years) a generated SSL certificate is valid.')
sslCertApply = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 36), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertApply.setStatus('current')
if mibBuilder.loadTexts: sslCertApply.setDescription('Apply generated SSL certificate.')
sslCertIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 37), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertIp.setStatus('current')
if mibBuilder.loadTexts: sslCertIp.setDescription('User defined IP address used in SSL certificate.')
trapSource = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 38), FspR7AppType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSource.setStatus('current')
if mibBuilder.loadTexts: trapSource.setDescription('This parameter contains source application on which trap was created.')
trapUser = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 39), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapUser.setStatus('current')
if mibBuilder.loadTexts: trapUser.setDescription('This parameter contains user name of preson who created trap.')
removeUsers = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 40), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: removeUsers.setStatus('current')
if mibBuilder.loadTexts: removeUsers.setDescription('This operational removes selected users from the system (only expired/inactive ones as of 13.3).')
authTrapUserName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 41), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapUserName.setStatus('current')
if mibBuilder.loadTexts: authTrapUserName.setDescription('The first part of User identifier. This name could be used for display purposes.')
authTrapAccountState = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 42), FspR7AccStateTrap()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapAccountState.setStatus('current')
if mibBuilder.loadTexts: authTrapAccountState.setDescription('User account state.')
privilegeChangeTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43), )
if mibBuilder.loadTexts: privilegeChangeTable.setStatus('current')
if mibBuilder.loadTexts: privilegeChangeTable.setDescription('This table holds requests for WDM36 Privilege Change.\n        This is for users with lower privileges to elevate them to higher ones for limited amount of time.')
privilegeChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "privilegeChangeId"))
if mibBuilder.loadTexts: privilegeChangeEntry.setStatus('current')
if mibBuilder.loadTexts: privilegeChangeEntry.setDescription('Column for privilegeChangeTable.')
privilegeChangeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: privilegeChangeId.setStatus('current')
if mibBuilder.loadTexts: privilegeChangeId.setDescription('Unique index identifying a request.')
privilegeChangeUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeUserName.setStatus('current')
if mibBuilder.loadTexts: privilegeChangeUserName.setDescription('The name string for user authentication purposes')
privilegeChangeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeIpAddress.setStatus('current')
if mibBuilder.loadTexts: privilegeChangeIpAddress.setDescription('Source IP address of sending NE.')
privilegeChangeInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 4), FspR7UserInterface()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeInterface.setStatus('current')
if mibBuilder.loadTexts: privilegeChangeInterface.setDescription('User Interface currently being used by the user')
privilegeChangeCurrentPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 5), FspR7PrivLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeCurrentPrivilege.setStatus('current')
if mibBuilder.loadTexts: privilegeChangeCurrentPrivilege.setDescription('Current privilege level of the user, who is requesting role upgrade.')
privilegeChangeRequestedPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 6), FspR7PrivLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeRequestedPrivilege.setStatus('current')
if mibBuilder.loadTexts: privilegeChangeRequestedPrivilege.setDescription('Privilege requested by user for session.')
privilegeChangeDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 480))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeDuration.setStatus('current')
if mibBuilder.loadTexts: privilegeChangeDuration.setDescription('Requested time period by user.')
privilegeChangeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 8), FspR7RequestAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privilegeChangeAction.setStatus('current')
if mibBuilder.loadTexts: privilegeChangeAction.setDescription('Privilege request action.')
privilegeChangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 9), FspR7RequestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeState.setStatus('current')
if mibBuilder.loadTexts: privilegeChangeState.setDescription('Privilege request state.')
privilegeChangeRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 10), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeRemainingTime.setStatus('current')
if mibBuilder.loadTexts: privilegeChangeRemainingTime.setDescription('Time remaining in session with upgrade user privilege (in seconds).')
privilegeChangeRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeRemoteName.setStatus('current')
if mibBuilder.loadTexts: privilegeChangeRemoteName.setDescription('Name string for RADIUS authentication')
authTrapSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 45), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapSrcIp.setStatus('current')
if mibBuilder.loadTexts: authTrapSrcIp.setDescription('IPv4/IPv6 Address')
authTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 46), FspR7AccessStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapStatus.setStatus('current')
if mibBuilder.loadTexts: authTrapStatus.setDescription('Indication whether security operation was succesful/unsuccessful.')
authTrapSessionId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 47), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapSessionId.setStatus('current')
if mibBuilder.loadTexts: authTrapSessionId.setDescription('Session name used in NE access.')
authTrapProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 48), FspR7AccessProtocol()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapProtocol.setStatus('current')
if mibBuilder.loadTexts: authTrapProtocol.setDescription('Protocol type used in NE access.')
authTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 49), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapPort.setStatus('current')
if mibBuilder.loadTexts: authTrapPort.setDescription('Port number used in NE access.')
authTrapAccess = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 50), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapAccess.setStatus('current')
if mibBuilder.loadTexts: authTrapAccess.setDescription('Second part of User identifier. This name is for internal usage.')
authTrapSuccessfulAuthCount = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 51), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapSuccessfulAuthCount.setStatus('current')
if mibBuilder.loadTexts: authTrapSuccessfulAuthCount.setDescription('Number of successful authentications.')
authTrapUnsuccessfulAuthCount = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 52), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapUnsuccessfulAuthCount.setStatus('current')
if mibBuilder.loadTexts: authTrapUnsuccessfulAuthCount.setDescription('Number of unsuccessful authentications.')
userManagementTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53), )
if mibBuilder.loadTexts: userManagementTable.setStatus('current')
if mibBuilder.loadTexts: userManagementTable.setDescription('userManagementTable')
userManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "userManagementUsername"))
if mibBuilder.loadTexts: userManagementEntry.setStatus('current')
if mibBuilder.loadTexts: userManagementEntry.setDescription('Entry of userManagementTable')
userManagementRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementRowStatus.setStatus('current')
if mibBuilder.loadTexts: userManagementRowStatus.setDescription('RowStatus')
userManagementUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementUsername.setStatus('current')
if mibBuilder.loadTexts: userManagementUsername.setDescription('The name string for user authentication purposes')
userManagementPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 3), FspR7SnmpPrivLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementPrivilegeLevel.setStatus('current')
if mibBuilder.loadTexts: userManagementPrivilegeLevel.setDescription('')
userManagementSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 4), FspR7SnmpSecuLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: userManagementSecurityLevel.setDescription('')
userManagementAuthPrivKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementAuthPrivKey.setStatus('current')
if mibBuilder.loadTexts: userManagementAuthPrivKey.setDescription('A human readable string representing the current or new password for user\n        account.')
userManagementAuthPrivKeyOld = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementAuthPrivKeyOld.setStatus('current')
if mibBuilder.loadTexts: userManagementAuthPrivKeyOld.setDescription('A human readable string representing the old password for user\n        account. This object should be used only for password change\n        procedure.')
userManagementTl1TimeoutAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 7), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementTl1TimeoutAvailable.setStatus('current')
if mibBuilder.loadTexts: userManagementTl1TimeoutAvailable.setDescription('')
userManagementTl1TimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementTl1TimeoutValue.setStatus('current')
if mibBuilder.loadTexts: userManagementTl1TimeoutValue.setDescription('')
userManagementSnmpTimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 3600))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: userManagementSnmpTimeoutValue.setStatus('current')
if mibBuilder.loadTexts: userManagementSnmpTimeoutValue.setDescription('The time period between SNMP requests for given SNMPv3 user or SNMPv1 community name after which the virtual SNMP session is deleted from SNMP Agent')
userManagementUdpSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 10), FspR7SessionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userManagementUdpSessionStatus.setStatus('current')
if mibBuilder.loadTexts: userManagementUdpSessionStatus.setDescription('UDP-based User Session Status')
userManagementAccountFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 11), FspR7AccountFlag()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementAccountFlag.setStatus('current')
if mibBuilder.loadTexts: userManagementAccountFlag.setDescription('User account flag used currently to set the forced authentication\n        change request. See the FspR7AccountFlag Textual-Convention.')
userManagementPasswordMinAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementPasswordMinAge.setStatus('current')
if mibBuilder.loadTexts: userManagementPasswordMinAge.setDescription('')
userManagementPasswordMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementPasswordMaxAge.setStatus('current')
if mibBuilder.loadTexts: userManagementPasswordMaxAge.setDescription('')
userManagementPasswordExpirationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementPasswordExpirationPeriod.setStatus('current')
if mibBuilder.loadTexts: userManagementPasswordExpirationPeriod.setDescription('')
userManagementAccountState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 15), FspR7AccState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementAccountState.setStatus('current')
if mibBuilder.loadTexts: userManagementAccountState.setDescription('')
userManagementPasswordExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userManagementPasswordExpirationDate.setStatus('current')
if mibBuilder.loadTexts: userManagementPasswordExpirationDate.setDescription('PASSWORD_EXPIRATION_DATE')
userManagementPasswordLastChangeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userManagementPasswordLastChangeDate.setStatus('current')
if mibBuilder.loadTexts: userManagementPasswordLastChangeDate.setDescription('PASSWORD_LASTCHANGE_DATE')
userManagementFailedLoginAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementFailedLoginAttempts.setStatus('current')
if mibBuilder.loadTexts: userManagementFailedLoginAttempts.setDescription('')
userManagementLastLoginFailInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userManagementLastLoginFailInfo.setStatus('current')
if mibBuilder.loadTexts: userManagementLastLoginFailInfo.setDescription('FAIL_INFO')
userManagementLastLoginSuccessInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userManagementLastLoginSuccessInfo.setStatus('current')
if mibBuilder.loadTexts: userManagementLastLoginSuccessInfo.setDescription('SUCCESS_INFO')
userManagementInactivityPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setUnits('day').setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementInactivityPeriod.setStatus('current')
if mibBuilder.loadTexts: userManagementInactivityPeriod.setDescription("Account parameter; Account is locked when user hasn't logged in for INACTIVITY_PERIOD of time.")
userManagementAccessStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 22), FspR7TimeShort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementAccessStartTime.setStatus('current')
if mibBuilder.loadTexts: userManagementAccessStartTime.setDescription('Time (in HH-MM format) when user can log in.')
userManagementAccessEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 23), FspR7TimeShort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementAccessEndTime.setStatus('current')
if mibBuilder.loadTexts: userManagementAccessEndTime.setDescription('Time (in HH-MM format) when user must logout or is forced off the node.')
userManagementAccessDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 24), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementAccessDays.setStatus('current')
if mibBuilder.loadTexts: userManagementAccessDays.setDescription('Days of the week a user is authorized to log in to the node.')
userManagementExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 25), FspR7Date()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementExpirationDate.setStatus('current')
if mibBuilder.loadTexts: userManagementExpirationDate.setDescription('Date')
userManagementSso2fa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 26), FspR7DisableEnable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementSso2fa.setStatus('current')
if mibBuilder.loadTexts: userManagementSso2fa.setDescription('If enabled, user can login only if Single Sign On\n        and 2 Factor Authentication are enabled.\n        This parameter can be set only on user creation.')
userManagementPasswordHashType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 27), FspR7PasswordHashType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userManagementPasswordHashType.setStatus('current')
if mibBuilder.loadTexts: userManagementPasswordHashType.setDescription('Type of algorithm used to hash the password in shadow')
userManagementPrivacyKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 28), FspR7PrivacyKeyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementPrivacyKeyType.setStatus('current')
if mibBuilder.loadTexts: userManagementPrivacyKeyType.setDescription('Defines if SNMP Privacy Key should use a user password as value.')
userManagementPrivacyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 29), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementPrivacyKey.setStatus('current')
if mibBuilder.loadTexts: userManagementPrivacyKey.setDescription('Privacy key/password for SNMP v3 auth-priv queries encryption.')
activeUsersTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 54), )
if mibBuilder.loadTexts: activeUsersTable.setStatus('current')
if mibBuilder.loadTexts: activeUsersTable.setDescription('activeUsersTable. The index (activeUsersSessionGroupName) consist of User Name, Privilige Level and Access which can be LOCAL or REMOTE.\n        This is a single string seperated by &.')
activeUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 54, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "activeUsersSessionGroupName"))
if mibBuilder.loadTexts: activeUsersEntry.setStatus('current')
if mibBuilder.loadTexts: activeUsersEntry.setDescription('Entry of activeUsersTable')
activeUsersSessionGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 54, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeUsersSessionGroupName.setStatus('current')
if mibBuilder.loadTexts: activeUsersSessionGroupName.setDescription('The name string for user authentication purposes')
activeUsersInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 54, 1, 2), FspR7AccessProtocolCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeUsersInterfaces.setStatus('current')
if mibBuilder.loadTexts: activeUsersInterfaces.setDescription('List of protocols in which user is active.')
activeUsersTerminate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 54, 1, 3), FspR7TerminateSessions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeUsersTerminate.setStatus('current')
if mibBuilder.loadTexts: activeUsersTerminate.setDescription('Shows forced logout availability for selected user and allows to take such an action.')
ncuPortC2 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 55), FspR7AccessNcuC2()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncuPortC2.setStatus('current')
if mibBuilder.loadTexts: ncuPortC2.setDescription('Controls NCU C2 port access to the Management Network (DCN)')
rpFilter = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 56), FspR7RPFilter()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpFilter.setStatus('current')
if mibBuilder.loadTexts: rpFilter.setDescription('Enable/disable Reverse Path Filtering')
sso2fa = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 57), FspR7DisableEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sso2fa.setStatus('current')
if mibBuilder.loadTexts: sso2fa.setDescription('Enables SSO in NED when 2-Factor Authentication in RADIUS is applied')
remoteAuth = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 60), FspR7RemoteAuth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAuth.setStatus('current')
if mibBuilder.loadTexts: remoteAuth.setDescription('Type of Remote authentication')
remoteAuthProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 61), FspR7RemoteAuthProtocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAuthProtocol.setStatus('current')
if mibBuilder.loadTexts: remoteAuthProtocol.setDescription('Sets the Authentication Protocol for the Remote Authentication mechanism')
tlsSupport = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 62), FspR7TLSSupport()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlsSupport.setStatus('current')
if mibBuilder.loadTexts: tlsSupport.setDescription('TLS protocol version support.')
knownHostIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3), )
if mibBuilder.loadTexts: knownHostIPv6Table.setStatus('current')
if mibBuilder.loadTexts: knownHostIPv6Table.setDescription('KnownHost Table for IPv6 addresses. The first index has fixed length to 16')
knownHostIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "knownHostIPv6IP"), (0, "ADVA-FSPR7-MIB", "knownHostIPv6KeyEncryptAlgorithm"))
if mibBuilder.loadTexts: knownHostIPv6Entry.setStatus('current')
if mibBuilder.loadTexts: knownHostIPv6Entry.setDescription('Entry of knownHostIPv6Table')
knownHostIPv6IP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1, 1), FspR7Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: knownHostIPv6IP.setStatus('current')
if mibBuilder.loadTexts: knownHostIPv6IP.setDescription('IPv6 Address of known host')
knownHostIPv6KeyEncryptAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1, 2), FspR7SshHostKeyEncryptAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownHostIPv6KeyEncryptAlgorithm.setStatus('current')
if mibBuilder.loadTexts: knownHostIPv6KeyEncryptAlgorithm.setDescription('ssh host key encryption alogrithm')
knownHostIPv6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: knownHostIPv6RowStatus.setStatus('current')
if mibBuilder.loadTexts: knownHostIPv6RowStatus.setDescription('This object is used to create, or delete a row in this table')
knownHostIPv6FingerPrint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1, 4), FspR7SnmpHexString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: knownHostIPv6FingerPrint.setStatus('current')
if mibBuilder.loadTexts: knownHostIPv6FingerPrint.setDescription('Fingerprint of ssh host key')
ipv6ActRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14), )
if mibBuilder.loadTexts: ipv6ActRoutesTable.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesTable.setDescription('Routing Table for IPv6 (active routes)')
ipv6ActRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ipv6ActRoutesDestination"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesPrefix"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesNextHop"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesShelfNo"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesSlotNo"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesPortNo"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesExtNo"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesClassName"))
if mibBuilder.loadTexts: ipv6ActRoutesEntry.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesEntry.setDescription('Entry of ipv6ActRoutesTable')
ipv6ActRoutesDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 1), FspR7Ipv6Address())
if mibBuilder.loadTexts: ipv6ActRoutesDestination.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesDestination.setDescription('Destination IPv6 Address')
ipv6ActRoutesPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: ipv6ActRoutesPrefix.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesPrefix.setDescription('IPv6 Subnet Prefix Length')
ipv6ActRoutesNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 3), FspR7Ipv6Address())
if mibBuilder.loadTexts: ipv6ActRoutesNextHop.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesNextHop.setDescription('Gateway IPv6 Address')
ipv6ActRoutesShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 4), Unsigned32())
if mibBuilder.loadTexts: ipv6ActRoutesShelfNo.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesShelfNo.setDescription('Adress index.')
ipv6ActRoutesSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 5), Unsigned32())
if mibBuilder.loadTexts: ipv6ActRoutesSlotNo.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesSlotNo.setDescription('Adress index.')
ipv6ActRoutesPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 6), Unsigned32())
if mibBuilder.loadTexts: ipv6ActRoutesPortNo.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesPortNo.setDescription('Adress index.')
ipv6ActRoutesExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 7), Unsigned32())
if mibBuilder.loadTexts: ipv6ActRoutesExtNo.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesExtNo.setDescription('Adress index.')
ipv6ActRoutesClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 8), EntityClassName())
if mibBuilder.loadTexts: ipv6ActRoutesClassName.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesClassName.setDescription('Entity Class Name')
ipv6ActRoutesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6ActRoutesRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesRowStatus.setDescription('This object is used to create, or delete a row in this table.')
ipv6ActRoutesType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 10), FspR7Protocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6ActRoutesType.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesType.setDescription('The Type of the IP Route.')
ipv6ActRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6ActRoutesMetric.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesMetric.setDescription('Routing Metric')
ipv6ActRoutesDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ActRoutesDestIp.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesDestIp.setDescription('Destination IPv6 Address')
ipv6ActRoutesPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ActRoutesPrefixLen.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesPrefixLen.setDescription('IPv6 Subnet Prefix Length')
ipv6ActRoutesNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ActRoutesNextHopIp.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesNextHopIp.setDescription('Gateway IPv6 Address')
ipv6ActRoutesPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ActRoutesPort.setStatus('current')
if mibBuilder.loadTexts: ipv6ActRoutesPort.setDescription('Address Identifier of IP Entity. E.g SC-1-A-C or LINK-1-A-1.')
ipv6InActRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16), )
if mibBuilder.loadTexts: ipv6InActRoutesTable.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesTable.setDescription('Routing Table for IPv6 (inactive routes)')
ipv6InActRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ipv6InActRoutesDestination"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesPrefix"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesNextHop"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesShelfNo"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesSlotNo"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesPortNo"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesExtNo"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesClassName"))
if mibBuilder.loadTexts: ipv6InActRoutesEntry.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesEntry.setDescription('Entry of ipv6InActRoutesTable')
ipv6InActRoutesDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 1), FspR7Ipv6Address())
if mibBuilder.loadTexts: ipv6InActRoutesDestination.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesDestination.setDescription('Destination IPv6 Address')
ipv6InActRoutesPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: ipv6InActRoutesPrefix.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesPrefix.setDescription('IPv6 Subnet Prefix Length')
ipv6InActRoutesNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 3), FspR7Ipv6Address())
if mibBuilder.loadTexts: ipv6InActRoutesNextHop.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesNextHop.setDescription('Gateway IPv6 Address')
ipv6InActRoutesShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 4), Unsigned32())
if mibBuilder.loadTexts: ipv6InActRoutesShelfNo.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesShelfNo.setDescription('Adress index.')
ipv6InActRoutesSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 5), Unsigned32())
if mibBuilder.loadTexts: ipv6InActRoutesSlotNo.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesSlotNo.setDescription('Adress index.')
ipv6InActRoutesPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 6), Unsigned32())
if mibBuilder.loadTexts: ipv6InActRoutesPortNo.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesPortNo.setDescription('Adress index.')
ipv6InActRoutesExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 7), Unsigned32())
if mibBuilder.loadTexts: ipv6InActRoutesExtNo.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesExtNo.setDescription('Adress index.')
ipv6InActRoutesClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 8), EntityClassName())
if mibBuilder.loadTexts: ipv6InActRoutesClassName.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesClassName.setDescription('Entity Class Name')
ipv6InActRoutesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6InActRoutesRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesRowStatus.setDescription('This object is used to create, or delete a row in this table.')
ipv6InActRoutesType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 10), FspR7Protocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6InActRoutesType.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesType.setDescription('The Type of the IP Route.')
ipv6InActRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6InActRoutesMetric.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesMetric.setDescription('Routing Metric')
ipv6InActRoutesDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InActRoutesDestIp.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesDestIp.setDescription('Destination IPv6 Address')
ipv6InActRoutesPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InActRoutesPrefixLen.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesPrefixLen.setDescription('IPv6 Subnet Prefix Length')
ipv6InActRoutesNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InActRoutesNextHopIp.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesNextHopIp.setDescription('Gateway IPv6 Address')
ipv6InActRoutesPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InActRoutesPort.setStatus('current')
if mibBuilder.loadTexts: ipv6InActRoutesPort.setDescription('Address Identifier of IP Entity. E.g SC-1-A-C or LINK-1-A-1.')
syslogIPv4Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30), )
if mibBuilder.loadTexts: syslogIPv4Table.setStatus('current')
if mibBuilder.loadTexts: syslogIPv4Table.setDescription('The Syslog Server configuration table for IPv4')
syslogIPv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "syslogIPv4Ip"))
if mibBuilder.loadTexts: syslogIPv4Entry.setStatus('current')
if mibBuilder.loadTexts: syslogIPv4Entry.setDescription('The Syslog IPv4 Server entity')
syslogIPv4Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: syslogIPv4Ip.setStatus('current')
if mibBuilder.loadTexts: syslogIPv4Ip.setDescription('The IPv4 address of the remote Syslog server')
syslogIPv4RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv4RowStatus.setStatus('current')
if mibBuilder.loadTexts: syslogIPv4RowStatus.setDescription('RowStatus')
syslogIPv4Reporting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 3), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv4Reporting.setStatus('current')
if mibBuilder.loadTexts: syslogIPv4Reporting.setDescription('Syslog')
syslogIPv4DbchgReports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 4), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv4DbchgReports.setStatus('current')
if mibBuilder.loadTexts: syslogIPv4DbchgReports.setDescription('Enable or disable sending DB change events')
syslogIPv4SecurityReports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 5), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv4SecurityReports.setStatus('current')
if mibBuilder.loadTexts: syslogIPv4SecurityReports.setDescription('Enable or disable sending security-related events.')
syslogIPv4IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogIPv4IpAddr.setStatus('current')
if mibBuilder.loadTexts: syslogIPv4IpAddr.setDescription('The IP address of the IP host where Syslog notifications should be sent. Derived from AID')
syslogIPv4SourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 7), SourceIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv4SourceIp.setStatus('current')
if mibBuilder.loadTexts: syslogIPv4SourceIp.setDescription('Network interface type used for syslog connection. Two interface types are defined:\n        sysIp(1) and defaultIp(2)')
syslogIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32), )
if mibBuilder.loadTexts: syslogIPv6Table.setStatus('current')
if mibBuilder.loadTexts: syslogIPv6Table.setDescription('The Syslog Server configuration table for IPv6')
syslogIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "syslogIPv6Ip"))
if mibBuilder.loadTexts: syslogIPv6Entry.setStatus('current')
if mibBuilder.loadTexts: syslogIPv6Entry.setDescription('The Syslog IPv6 Server entity')
syslogIPv6Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 1), FspR7Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: syslogIPv6Ip.setStatus('current')
if mibBuilder.loadTexts: syslogIPv6Ip.setDescription('The IPv6 address of the remote Syslog server')
syslogIPv6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv6RowStatus.setStatus('current')
if mibBuilder.loadTexts: syslogIPv6RowStatus.setDescription('RowStatus')
syslogIPv6Reporting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 3), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv6Reporting.setStatus('current')
if mibBuilder.loadTexts: syslogIPv6Reporting.setDescription('Syslog')
syslogIPv6DbchgReports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 4), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv6DbchgReports.setStatus('current')
if mibBuilder.loadTexts: syslogIPv6DbchgReports.setDescription('Enable or disable sending DB change events')
syslogIPv6SecurityReports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 5), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv6SecurityReports.setStatus('current')
if mibBuilder.loadTexts: syslogIPv6SecurityReports.setDescription('Enable or disable sending security-related events.')
syslogIPv6IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogIPv6IpAddr.setStatus('current')
if mibBuilder.loadTexts: syslogIPv6IpAddr.setDescription('The IP address of the IP host where Syslog notifications should be sent. Derived from AID')
syslogIPv6SourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 7), SourceIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv6SourceIp.setStatus('current')
if mibBuilder.loadTexts: syslogIPv6SourceIp.setDescription('Network interface type used for syslog connection. Two interface types are defined:\n        sysIp(1) and defaultIp(2)')
ntpIPv4Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20), )
if mibBuilder.loadTexts: ntpIPv4Table.setStatus('current')
if mibBuilder.loadTexts: ntpIPv4Table.setDescription('The NTP Server configuration table for IPv4')
ntpIPv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ntpIPv4Ip"))
if mibBuilder.loadTexts: ntpIPv4Entry.setStatus('current')
if mibBuilder.loadTexts: ntpIPv4Entry.setDescription('The NTP IPv4 Server entity')
ntpIPv4Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpIPv4Ip.setStatus('current')
if mibBuilder.loadTexts: ntpIPv4Ip.setDescription('The IPv4 address of the remote NTP server')
ntpIPv4RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv4RowStatus.setStatus('current')
if mibBuilder.loadTexts: ntpIPv4RowStatus.setDescription('Row status used for managing a NTP server entity. All values defined for\n        RowStatus TC can be used')
ntpIPv4SourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 3), SourceIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv4SourceIp.setStatus('current')
if mibBuilder.loadTexts: ntpIPv4SourceIp.setDescription('Network interface type used for NTP connection. Two interface types are defined:\n        sysIp(1) and defaultIp(2)')
ntpIPv4Test = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 4), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIPv4Test.setStatus('current')
if mibBuilder.loadTexts: ntpIPv4Test.setDescription('Operational parameter for invoking a connection test procedure. If set\n        to ntpTest(2) then a connection with remote NTP server is being checked.\n        Result of this operation is saved under ntpServerTestStatus column. When\n        operation finish then value is automaticaly set to rls(1). It cannot\n        be set to rls(1) by hand')
ntpIPv4TestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 5), FspR7NtpTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv4TestStatus.setStatus('current')
if mibBuilder.loadTexts: ntpIPv4TestStatus.setDescription('Result of NTP availability check command invoked by setting ntpServerTest to ntpTest(2)')
ntpIPv4SyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 6), FspR7NtpSyncStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv4SyncStatus.setStatus('current')
if mibBuilder.loadTexts: ntpIPv4SyncStatus.setDescription('The NTP Synchronization status')
ntpIPv4Admin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 7), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv4Admin.setStatus('current')
if mibBuilder.loadTexts: ntpIPv4Admin.setDescription('Administrative state of remote NTP server. It can be set to is(2) or to dsbld(6)')
ntpIPv4OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 8), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv4OperState.setStatus('current')
if mibBuilder.loadTexts: ntpIPv4OperState.setDescription('Operative state of remote NTP server')
ntpIPv4IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv4IpAddr.setStatus('current')
if mibBuilder.loadTexts: ntpIPv4IpAddr.setDescription('The IPv4 address of the remote NTP server')
ntpIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22), )
if mibBuilder.loadTexts: ntpIPv6Table.setStatus('current')
if mibBuilder.loadTexts: ntpIPv6Table.setDescription('The NTP Server configuration table for IPv6')
ntpIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ntpIPv6Ip"))
if mibBuilder.loadTexts: ntpIPv6Entry.setStatus('current')
if mibBuilder.loadTexts: ntpIPv6Entry.setDescription('The NTP IPv6 Server entity')
ntpIPv6Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 1), FspR7Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpIPv6Ip.setStatus('current')
if mibBuilder.loadTexts: ntpIPv6Ip.setDescription('The IPv6 address of the remote NTP server')
ntpIPv6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv6RowStatus.setStatus('current')
if mibBuilder.loadTexts: ntpIPv6RowStatus.setDescription('Row status used for managing a NTP server entity. All values defined for\n        RowStatus TC can be used')
ntpIPv6SourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 3), SourceIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv6SourceIp.setStatus('current')
if mibBuilder.loadTexts: ntpIPv6SourceIp.setDescription('Network interface type used for NTP connection. Two interface types are defined:\n        sysIp(1) and defaultIp(2)')
ntpIPv6Test = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 4), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIPv6Test.setStatus('current')
if mibBuilder.loadTexts: ntpIPv6Test.setDescription('Operational parameter for invoking a connection test procedure. If set\n        to ntpTest(2) then a connection with remote NTP server is being checked.\n        Result of this operation is saved under ntpServerTestStatus column. When\n        operation finish then value is automaticaly set to rls(1). It cannot\n        be set to rls(1) by hand')
ntpIPv6TestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 5), FspR7NtpTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv6TestStatus.setStatus('current')
if mibBuilder.loadTexts: ntpIPv6TestStatus.setDescription('Result of NTP availability check command invoked by setting ntpServerTest to ntpTest(2)')
ntpIPv6SyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 6), FspR7NtpSyncStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv6SyncStatus.setStatus('current')
if mibBuilder.loadTexts: ntpIPv6SyncStatus.setDescription('The NTP Synchronization status')
ntpIPv6Admin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 7), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv6Admin.setStatus('current')
if mibBuilder.loadTexts: ntpIPv6Admin.setDescription('Administrative state of remote NTP server. It can be set to is(2) or to dsbld(6)')
ntpIPv6OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 8), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv6OperState.setStatus('current')
if mibBuilder.loadTexts: ntpIPv6OperState.setDescription('Operative state of remote NTP server')
ntpIPv6IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv6IpAddr.setStatus('current')
if mibBuilder.loadTexts: ntpIPv6IpAddr.setDescription('The IPv6 address of the remote NTP server')
unusedTrapSinkId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unusedTrapSinkId.setStatus('current')
if mibBuilder.loadTexts: unusedTrapSinkId.setDescription('Shows the first unused trapSinkId index. 0 means no free slots.')
trapSinkTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30), )
if mibBuilder.loadTexts: trapSinkTable.setStatus('current')
if mibBuilder.loadTexts: trapSinkTable.setDescription('trapSinkTable')
trapSinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "trapSinkId"))
if mibBuilder.loadTexts: trapSinkEntry.setStatus('current')
if mibBuilder.loadTexts: trapSinkEntry.setDescription('Entry of trapSinkTable')
trapSinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSinkId.setStatus('current')
if mibBuilder.loadTexts: trapSinkId.setDescription('')
trapSinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: trapSinkRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
trapSinkVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 3), FspR7SnmpVersion()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkVersion.setStatus('current')
if mibBuilder.loadTexts: trapSinkVersion.setDescription('The version of SNMP')
trapSinkIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 4), FspR7IpMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkIpMode.setStatus('current')
if mibBuilder.loadTexts: trapSinkIpMode.setDescription('IP Mode of Operation either IPv4 only or IPv4 and IPv6. When operation supports IPv6, it is used for addresses external to the network.')
trapSinkIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkIPv4.setStatus('current')
if mibBuilder.loadTexts: trapSinkIPv4.setDescription('IP Address assigned to LAN IP Interface')
trapSinkIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkIPv6.setStatus('current')
if mibBuilder.loadTexts: trapSinkIPv6.setDescription('IPv6 Address')
trapSinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkPort.setStatus('current')
if mibBuilder.loadTexts: trapSinkPort.setDescription('The destination port')
trapSinkCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkCommunity.setStatus('current')
if mibBuilder.loadTexts: trapSinkCommunity.setDescription('The community string used in SNMPv1/v2c messages')
trapSinkUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 9), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkUserName.setStatus('current')
if mibBuilder.loadTexts: trapSinkUserName.setDescription('The name string for user authentication purposes')
trapSinkDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 10), FspR7TrapsinkLifetime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkDuration.setStatus('current')
if mibBuilder.loadTexts: trapSinkDuration.setDescription('SNMP trapsink duration')
trapSinkIpSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 11), SourceIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkIpSubnet.setStatus('current')
if mibBuilder.loadTexts: trapSinkIpSubnet.setDescription('IP address which will be used as source address by client applications (i.e. FTP) to facilitate proper backward routing (i.e. server to client direction) in the DCN')
unusedCommunityId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unusedCommunityId.setStatus('current')
if mibBuilder.loadTexts: unusedCommunityId.setDescription('Shows the first unused communityId index. 0 means no free slots.')
communityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40), )
if mibBuilder.loadTexts: communityTable.setStatus('current')
if mibBuilder.loadTexts: communityTable.setDescription('communityTable')
communityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "communityId"))
if mibBuilder.loadTexts: communityEntry.setStatus('current')
if mibBuilder.loadTexts: communityEntry.setDescription('Entry of communityTable')
communityId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: communityId.setStatus('current')
if mibBuilder.loadTexts: communityId.setDescription('')
communityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityRowStatus.setStatus('current')
if mibBuilder.loadTexts: communityRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
communityIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 3), FspR7IpMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityIpMode.setStatus('current')
if mibBuilder.loadTexts: communityIpMode.setDescription('IP Mode of Operation either IPv4 only or IPv4 and IPv6. When operation supports IPv6, it is used for addresses external to the network.')
communityIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityIPv4.setStatus('current')
if mibBuilder.loadTexts: communityIPv4.setDescription('IP Address assigned to LAN IP Interface')
communityIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityIpMask.setStatus('current')
if mibBuilder.loadTexts: communityIpMask.setDescription('IP MASK assigned to LAN IP Interface')
communityIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityIPv6.setStatus('current')
if mibBuilder.loadTexts: communityIPv6.setDescription('IPv6 Address')
communityIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityIPv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: communityIPv6PrefixLen.setDescription('IPv6 Subnet Prefix Length')
communityName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityName.setStatus('current')
if mibBuilder.loadTexts: communityName.setDescription('The community string used in SNMPv1/v2c messages')
communityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 9), FspR7Access()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityAccess.setStatus('current')
if mibBuilder.loadTexts: communityAccess.setDescription('The type of access to the data')
neCommand = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 1), FspR7Command()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommand.setStatus('current')
if mibBuilder.loadTexts: neCommand.setDescription('Diffrerent operations on NE or other entities might be performed, like SCU backup, copy, download, install SW, etc.')
neCommandState = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 2), FspR7CommandState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neCommandState.setStatus('current')
if mibBuilder.loadTexts: neCommandState.setDescription('')
neCommandBusy = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 3), FspR7CommandBusy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neCommandBusy.setStatus('current')
if mibBuilder.loadTexts: neCommandBusy.setDescription('')
neCommandIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommandIp.setStatus('current')
if mibBuilder.loadTexts: neCommandIp.setDescription('IPv4/IPv6 Address')
neCommandLogin = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommandLogin.setStatus('current')
if mibBuilder.loadTexts: neCommandLogin.setDescription('User Name')
neCommandPass = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommandPass.setStatus('current')
if mibBuilder.loadTexts: neCommandPass.setDescription('Password')
neCommandPath = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommandPath.setStatus('current')
if mibBuilder.loadTexts: neCommandPath.setDescription("Path name on the remote server without the last '/'.")
neCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommandFile.setStatus('current')
if mibBuilder.loadTexts: neCommandFile.setDescription('File Name')
neCommandProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 11), FspR7TransferProtocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommandProtocol.setStatus('current')
if mibBuilder.loadTexts: neCommandProtocol.setDescription('Download Protocol')
neCommandSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 12), SourceIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommandSourceIp.setStatus('current')
if mibBuilder.loadTexts: neCommandSourceIp.setDescription('IP address which will be used as source address by client applications (i.e. FTP) to facilitate proper backward routing (i.e. server to client direction) in the DCN')
neSdpType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 13), FspR7SdpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSdpType.setStatus('current')
if mibBuilder.loadTexts: neSdpType.setDescription('Determines the amount of Support Data information collected')
neDbOnActivate = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 14), RestoreActivation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neDbOnActivate.setStatus('current')
if mibBuilder.loadTexts: neDbOnActivate.setDescription('Shows whether the last activation was(will be) a database restore or a new software activation')
neAutoDhcp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 15), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAutoDhcp.setStatus('current')
if mibBuilder.loadTexts: neAutoDhcp.setDescription("NCU C1 Auto Connect/DHCP Mode will offer DHCP leases to the user's device.")
errorMessage = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 16), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: errorMessage.setStatus('current')
if mibBuilder.loadTexts: errorMessage.setDescription('Error Message for MP Parameter Set Fail.')
fileDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1), )
if mibBuilder.loadTexts: fileDataTable.setStatus('current')
if mibBuilder.loadTexts: fileDataTable.setDescription('fileDataTable')
fileDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "fileDataArea"), (0, "ADVA-FSPR7-MIB", "fileDataId"))
if mibBuilder.loadTexts: fileDataEntry.setStatus('current')
if mibBuilder.loadTexts: fileDataEntry.setDescription('Entry of fileDataTable')
fileDataId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fileDataId.setStatus('current')
if mibBuilder.loadTexts: fileDataId.setDescription('')
fileDataArea = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 2), FileArea()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataArea.setStatus('current')
if mibBuilder.loadTexts: fileDataArea.setDescription('Type of Area')
fileDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 3), FileType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataType.setStatus('current')
if mibBuilder.loadTexts: fileDataType.setDescription('Type of File')
fileDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 4), Unsigned32()).setUnits('Byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataSize.setStatus('current')
if mibBuilder.loadTexts: fileDataSize.setDescription('Size of Memory = USED + AVAILABLE')
fileDataCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataCreationTime.setStatus('current')
if mibBuilder.loadTexts: fileDataCreationTime.setDescription('Creation Time')
fileDataVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataVersion.setStatus('current')
if mibBuilder.loadTexts: fileDataVersion.setDescription('General Release Issue Number of software in the ACT or STBY memory location. Format: XX-YY-Z')
fileDataGrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 7), Grade()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataGrade.setStatus('current')
if mibBuilder.loadTexts: fileDataGrade.setDescription('Used to distinguish between NCU capabilities (range of supported services or applications)')
fileDataComment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileDataComment.setStatus('current')
if mibBuilder.loadTexts: fileDataComment.setDescription('Comment of PGM or DBS files.')
fileDataFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataFileName.setStatus('current')
if mibBuilder.loadTexts: fileDataFileName.setDescription('File Name')
fileDataPgmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 10), PgmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataPgmType.setStatus('current')
if mibBuilder.loadTexts: fileDataPgmType.setDescription('Program Type')
fileDataMpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 11), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileDataMpName.setStatus('current')
if mibBuilder.loadTexts: fileDataMpName.setDescription('Master Profile Name.')
fileDataRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileDataRevision.setStatus('current')
if mibBuilder.loadTexts: fileDataRevision.setDescription('Revision Number')
fileDataMpTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 13), FspR7MpTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataMpTag.setStatus('current')
if mibBuilder.loadTexts: fileDataMpTag.setDescription('Master Profile Tag.')
fileDataMpState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 14), FspR7MpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataMpState.setStatus('current')
if mibBuilder.loadTexts: fileDataMpState.setDescription('Master Profile State.')
containerHdSystemTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 20), )
if mibBuilder.loadTexts: containerHdSystemTable.setStatus('current')
if mibBuilder.loadTexts: containerHdSystemTable.setDescription('containerHdSystemTable')
containerHdSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerHdSystemId"))
if mibBuilder.loadTexts: containerHdSystemEntry.setStatus('current')
if mibBuilder.loadTexts: containerHdSystemEntry.setDescription('Entry of containerHdSystemTable')
containerHdSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 20, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: containerHdSystemId.setStatus('current')
if mibBuilder.loadTexts: containerHdSystemId.setDescription('')
containerHdSystemAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 20, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerHdSystemAidString.setStatus('current')
if mibBuilder.loadTexts: containerHdSystemAidString.setDescription('Aid string of entity.')
containerHdSystemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 20, 1, 3), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerHdSystemClass.setStatus('current')
if mibBuilder.loadTexts: containerHdSystemClass.setDescription('Entity Class')
containerHdSystemParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 20, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerHdSystemParentId.setStatus('current')
if mibBuilder.loadTexts: containerHdSystemParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
hdSystemTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21), )
if mibBuilder.loadTexts: hdSystemTable.setStatus('current')
if mibBuilder.loadTexts: hdSystemTable.setDescription('hdSystemTable')
hdSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "hdSystemId"))
if mibBuilder.loadTexts: hdSystemEntry.setStatus('current')
if mibBuilder.loadTexts: hdSystemEntry.setDescription('Entry of hdSystemTable')
hdSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hdSystemId.setStatus('current')
if mibBuilder.loadTexts: hdSystemId.setDescription('')
hdSystemAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdSystemAidString.setStatus('current')
if mibBuilder.loadTexts: hdSystemAidString.setDescription('Aid string of entity.')
hdSystemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdSystemRowStatus.setStatus('current')
if mibBuilder.loadTexts: hdSystemRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
hdSystemDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdSystemDcnAid.setStatus('current')
if mibBuilder.loadTexts: hdSystemDcnAid.setDescription('Supporting DCN Facility AID')
hdSystemAdopt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 5), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdSystemAdopt.setStatus('deprecated')
if mibBuilder.loadTexts: hdSystemAdopt.setDescription('Allows FSP 3000C modules to be provisioned with information read from the equipment.')
hdSystemAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 6), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdSystemAdmin.setStatus('current')
if mibBuilder.loadTexts: hdSystemAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
hdSystemOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 7), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdSystemOperState.setStatus('current')
if mibBuilder.loadTexts: hdSystemOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
hdSystemSerialNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 8), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdSystemSerialNumbers.setStatus('current')
if mibBuilder.loadTexts: hdSystemSerialNumbers.setDescription('Serial Numbers')
hdSystemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 9), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdSystemClass.setStatus('current')
if mibBuilder.loadTexts: hdSystemClass.setDescription('Entity Class')
hdSystemParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdSystemParentId.setStatus('current')
if mibBuilder.loadTexts: hdSystemParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
hdSystemNendLogicalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdSystemNendLogicalIpAddr.setStatus('current')
if mibBuilder.loadTexts: hdSystemNendLogicalIpAddr.setDescription('Near End Logical Interface IP')
containerShelfmapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40), )
if mibBuilder.loadTexts: containerShelfmapTable.setStatus('current')
if mibBuilder.loadTexts: containerShelfmapTable.setDescription('containerShelfmapTable')
containerShelfmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerShelfmapId"))
if mibBuilder.loadTexts: containerShelfmapEntry.setStatus('current')
if mibBuilder.loadTexts: containerShelfmapEntry.setDescription('Entry of containerShelfmapTable')
containerShelfmapId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: containerShelfmapId.setStatus('current')
if mibBuilder.loadTexts: containerShelfmapId.setDescription('')
containerShelfmapAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfmapAidString.setStatus('current')
if mibBuilder.loadTexts: containerShelfmapAidString.setDescription('Aid string of entity.')
containerShelfmapSerialNumInv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfmapSerialNumInv.setStatus('current')
if mibBuilder.loadTexts: containerShelfmapSerialNumInv.setDescription('Inventory Serial Number')
containerShelfmapTypeInv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1, 4), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfmapTypeInv.setStatus('current')
if mibBuilder.loadTexts: containerShelfmapTypeInv.setDescription('Inventory type')
containerShelfmapEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1, 5), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfmapEquipmentState.setStatus('current')
if mibBuilder.loadTexts: containerShelfmapEquipmentState.setDescription('See EquipmentState.')
containerShelfmapClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1, 6), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfmapClass.setStatus('current')
if mibBuilder.loadTexts: containerShelfmapClass.setDescription('Entity Class')
containerShelfmapParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfmapParentId.setStatus('current')
if mibBuilder.loadTexts: containerShelfmapParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
shelfmapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41), )
if mibBuilder.loadTexts: shelfmapTable.setStatus('current')
if mibBuilder.loadTexts: shelfmapTable.setDescription('shelfmapTable')
shelfmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "shelfmapId"))
if mibBuilder.loadTexts: shelfmapEntry.setStatus('current')
if mibBuilder.loadTexts: shelfmapEntry.setDescription('Entry of shelfmapTable')
shelfmapId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfmapId.setStatus('current')
if mibBuilder.loadTexts: shelfmapId.setDescription('')
shelfmapAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapAidString.setStatus('current')
if mibBuilder.loadTexts: shelfmapAidString.setDescription('Aid string of entity.')
shelfmapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfmapRowStatus.setStatus('current')
if mibBuilder.loadTexts: shelfmapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
shelfmapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapIpAddr.setStatus('current')
if mibBuilder.loadTexts: shelfmapIpAddr.setDescription('IP Address assigned to LAN IP Interface')
shelfmapEqptIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfmapEqptIdentifier.setStatus('current')
if mibBuilder.loadTexts: shelfmapEqptIdentifier.setDescription('The valid address of physically available Equipment part.')
shelfmapSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfmapSerialNum.setStatus('current')
if mibBuilder.loadTexts: shelfmapSerialNum.setDescription('Provisioned Serial Number')
shelfmapSerialNumInv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapSerialNumInv.setStatus('current')
if mibBuilder.loadTexts: shelfmapSerialNumInv.setDescription('Inventory Serial Number')
shelfmapTypeInv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 8), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapTypeInv.setStatus('current')
if mibBuilder.loadTexts: shelfmapTypeInv.setDescription('Inventory type')
shelfmapEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 9), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapEquipmentState.setStatus('current')
if mibBuilder.loadTexts: shelfmapEquipmentState.setDescription('See EquipmentState.')
shelfmapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 10), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfmapAdmin.setStatus('current')
if mibBuilder.loadTexts: shelfmapAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
shelfmapOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 11), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapOperState.setStatus('current')
if mibBuilder.loadTexts: shelfmapOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
shelfmapClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 12), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapClass.setStatus('current')
if mibBuilder.loadTexts: shelfmapClass.setDescription('Entity Class')
shelfmapParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 13), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapParentId.setStatus('current')
if mibBuilder.loadTexts: shelfmapParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
alarmHdSystemTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 100), )
if mibBuilder.loadTexts: alarmHdSystemTable.setStatus('current')
if mibBuilder.loadTexts: alarmHdSystemTable.setDescription('alarmHdSystemTable')
alarmHdSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 100, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "alarmHdSystemId"), (0, "ADVA-FSPR7-MIB", "alarmHdSystemType"))
if mibBuilder.loadTexts: alarmHdSystemEntry.setStatus('current')
if mibBuilder.loadTexts: alarmHdSystemEntry.setDescription('Entry of alarmHdSystemTable')
alarmHdSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 100, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmHdSystemId.setStatus('current')
if mibBuilder.loadTexts: alarmHdSystemId.setDescription('')
alarmHdSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 100, 1, 2), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmHdSystemType.setStatus('current')
if mibBuilder.loadTexts: alarmHdSystemType.setDescription('List of all interface conditions.')
alarmHdSystemSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 100, 1, 3), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHdSystemSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmHdSystemSeverity.setDescription('Object identifies the current severity of alarm.')
alarmHdSystemAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 100, 1, 4), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHdSystemAffect.setStatus('current')
if mibBuilder.loadTexts: alarmHdSystemAffect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmHdSystemTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 100, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHdSystemTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmHdSystemTimeStamp.setDescription('Timestamp.')
alarmSeverityHdSystemTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 101), )
if mibBuilder.loadTexts: alarmSeverityHdSystemTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityHdSystemTable.setDescription('alarmSeverityHdSystemTable')
alarmSeverityHdSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 101, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "alarmSeverityHdSystemId"), (0, "ADVA-FSPR7-MIB", "alarmSeverityHdSystemType"))
if mibBuilder.loadTexts: alarmSeverityHdSystemEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityHdSystemEntry.setDescription('Entry of alarmSeverityHdSystemTable')
alarmSeverityHdSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 101, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmSeverityHdSystemId.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityHdSystemId.setDescription('')
alarmSeverityHdSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 101, 1, 2), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityHdSystemType.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityHdSystemType.setDescription('Type of severity.')
alarmSeverityHdSystemValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 101, 1, 3), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSeverityHdSystemValue.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityHdSystemValue.setDescription('Value of severity.')
alarmShelfmapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 102), )
if mibBuilder.loadTexts: alarmShelfmapTable.setStatus('current')
if mibBuilder.loadTexts: alarmShelfmapTable.setDescription('alarmShelfmapTable')
alarmShelfmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 102, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "alarmShelfmapId"), (0, "ADVA-FSPR7-MIB", "alarmShelfmapType"))
if mibBuilder.loadTexts: alarmShelfmapEntry.setStatus('current')
if mibBuilder.loadTexts: alarmShelfmapEntry.setDescription('Entry of alarmShelfmapTable')
alarmShelfmapId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 102, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmShelfmapId.setStatus('current')
if mibBuilder.loadTexts: alarmShelfmapId.setDescription('')
alarmShelfmapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 102, 1, 2), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmShelfmapType.setStatus('current')
if mibBuilder.loadTexts: alarmShelfmapType.setDescription('List of all interface conditions.')
alarmShelfmapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 102, 1, 3), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfmapSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmShelfmapSeverity.setDescription('Object identifies the current severity of alarm.')
alarmShelfmapAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 102, 1, 4), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfmapAffect.setStatus('current')
if mibBuilder.loadTexts: alarmShelfmapAffect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmShelfmapTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 102, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfmapTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmShelfmapTimeStamp.setDescription('Timestamp.')
alarmSeverityShelfmapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 103), )
if mibBuilder.loadTexts: alarmSeverityShelfmapTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityShelfmapTable.setDescription('alarmSeverityShelfmapTable')
alarmSeverityShelfmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 103, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "alarmSeverityShelfmapId"), (0, "ADVA-FSPR7-MIB", "alarmSeverityShelfmapType"))
if mibBuilder.loadTexts: alarmSeverityShelfmapEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityShelfmapEntry.setDescription('Entry of alarmSeverityShelfmapTable')
alarmSeverityShelfmapId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 103, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmSeverityShelfmapId.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityShelfmapId.setDescription('')
alarmSeverityShelfmapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 103, 1, 2), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityShelfmapType.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityShelfmapType.setDescription('Type of severity.')
alarmSeverityShelfmapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 103, 1, 3), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSeverityShelfmapValue.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityShelfmapValue.setDescription('Value of severity.')
licenseManagerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1), )
if mibBuilder.loadTexts: licenseManagerTable.setStatus('current')
if mibBuilder.loadTexts: licenseManagerTable.setDescription('licenseManagerTable')
licenseManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "licenseManagerShelfNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerSlotNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerPortNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerExtNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerClassName"))
if mibBuilder.loadTexts: licenseManagerEntry.setStatus('current')
if mibBuilder.loadTexts: licenseManagerEntry.setDescription('Entry of LicenseManagerTable')
licenseManagerShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: licenseManagerShelfNo.setStatus('current')
if mibBuilder.loadTexts: licenseManagerShelfNo.setDescription('Adress index.')
licenseManagerSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: licenseManagerSlotNo.setStatus('current')
if mibBuilder.loadTexts: licenseManagerSlotNo.setDescription('Adress index.')
licenseManagerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: licenseManagerPortNo.setStatus('current')
if mibBuilder.loadTexts: licenseManagerPortNo.setDescription('Adress index.')
licenseManagerExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: licenseManagerExtNo.setStatus('current')
if mibBuilder.loadTexts: licenseManagerExtNo.setDescription('Adress index.')
licenseManagerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: licenseManagerClassName.setStatus('current')
if mibBuilder.loadTexts: licenseManagerClassName.setDescription('Entity Class Name.')
licenseManagerAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerAidString.setStatus('current')
if mibBuilder.loadTexts: licenseManagerAidString.setDescription('Aid string of entity.')
licenseManagerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerClass.setStatus('current')
if mibBuilder.loadTexts: licenseManagerClass.setDescription('Entity Class')
licenseManagerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 8), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerRowStatus.setStatus('current')
if mibBuilder.loadTexts: licenseManagerRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
licenseManagerLicenseManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 9), FspR7LicenseManagement()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: licenseManagerLicenseManagement.setStatus('current')
if mibBuilder.loadTexts: licenseManagerLicenseManagement.setDescription('Source managing licenses')
licenseManagerLicenseServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: licenseManagerLicenseServer.setStatus('current')
if mibBuilder.loadTexts: licenseManagerLicenseServer.setDescription('License Server')
licenseManagerLicenseServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 11), FspR7LicenseServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerLicenseServerStatus.setStatus('current')
if mibBuilder.loadTexts: licenseManagerLicenseServerStatus.setDescription('License Server connection status')
licenseManagerLicenseFilesInstall = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 12), FspR7LicenseFilesInstall()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseManagerLicenseFilesInstall.setStatus('current')
if mibBuilder.loadTexts: licenseManagerLicenseFilesInstall.setDescription('Installs license from files when license policy is Node')
licenseManagerAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 13), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerAdmin.setStatus('current')
if mibBuilder.loadTexts: licenseManagerAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
licenseManagerSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 14), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: licenseManagerSecondaryStates.setDescription('Secondary States')
licenseManagerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 15), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerOperState.setStatus('current')
if mibBuilder.loadTexts: licenseManagerOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
licenseManagerParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerParentId.setStatus('current')
if mibBuilder.loadTexts: licenseManagerParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
licenseTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2), )
if mibBuilder.loadTexts: licenseTable.setStatus('current')
if mibBuilder.loadTexts: licenseTable.setDescription('licenseTable')
licenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "licenseShelfNo"), (0, "ADVA-FSPR7-MIB", "licenseSlotNo"), (0, "ADVA-FSPR7-MIB", "licensePortNo"), (0, "ADVA-FSPR7-MIB", "licenseExtNo"), (0, "ADVA-FSPR7-MIB", "licenseClassName"))
if mibBuilder.loadTexts: licenseEntry.setStatus('current')
if mibBuilder.loadTexts: licenseEntry.setDescription('Entry of licenseTable')
licenseShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: licenseShelfNo.setStatus('current')
if mibBuilder.loadTexts: licenseShelfNo.setDescription('Adress index.')
licenseSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: licenseSlotNo.setStatus('current')
if mibBuilder.loadTexts: licenseSlotNo.setDescription('Adress index.')
licensePortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: licensePortNo.setStatus('current')
if mibBuilder.loadTexts: licensePortNo.setDescription('Adress index.')
licenseExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 4), Unsigned32())
if mibBuilder.loadTexts: licenseExtNo.setStatus('current')
if mibBuilder.loadTexts: licenseExtNo.setDescription('Adress index.')
licenseClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 5), EntityClassName())
if mibBuilder.loadTexts: licenseClassName.setStatus('current')
if mibBuilder.loadTexts: licenseClassName.setDescription('Entity Class Name')
licenseAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseAidString.setStatus('current')
if mibBuilder.loadTexts: licenseAidString.setDescription('Aid string of entity.')
licenseClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseClass.setStatus('current')
if mibBuilder.loadTexts: licenseClass.setDescription('Entity Class')
licenseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 8), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseRowStatus.setStatus('current')
if mibBuilder.loadTexts: licenseRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
licenseLicenseName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLicenseName.setStatus('current')
if mibBuilder.loadTexts: licenseLicenseName.setDescription('License Name')
licenseLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 10), FspR7LicenseType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLicenseType.setStatus('current')
if mibBuilder.loadTexts: licenseLicenseType.setDescription('License Type')
licenseLicenseCountAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLicenseCountAvailable.setStatus('current')
if mibBuilder.loadTexts: licenseLicenseCountAvailable.setDescription('Licenses available to be issued from license file or server')
licenseLicenseCountUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLicenseCountUsed.setStatus('current')
if mibBuilder.loadTexts: licenseLicenseCountUsed.setDescription('License in use')
licenseLicenseCountGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLicenseCountGranted.setStatus('current')
if mibBuilder.loadTexts: licenseLicenseCountGranted.setDescription('Licenses requested but not necessarily in use.')
licenseAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 14), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseAdmin.setStatus('current')
if mibBuilder.loadTexts: licenseAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
licenseSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 15), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: licenseSecondaryStates.setDescription('Secondary States')
licenseOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 16), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseOperState.setStatus('current')
if mibBuilder.loadTexts: licenseOperState.setDescription('The Operational State will be displayed on the\n        GUI with full name values;  it will be differently\n        displayed in TL1 syntax according to TL1 display rules.')
licenseParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseParentId.setStatus('current')
if mibBuilder.loadTexts: licenseParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
alarmLicenseManagerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 100), )
if mibBuilder.loadTexts: alarmLicenseManagerTable.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseManagerTable.setDescription('alarmLicenseManagerTable')
alarmLicenseManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 100, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "licenseManagerShelfNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerSlotNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerPortNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerExtNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerClassName"), (0, "ADVA-FSPR7-MIB", "alarmLicenseManagerType"))
if mibBuilder.loadTexts: alarmLicenseManagerEntry.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseManagerEntry.setDescription('Entry of alarmLicenseManagerTable')
alarmLicenseManagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 100, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmLicenseManagerType.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseManagerType.setDescription('List of all interface conditions.')
alarmLicenseManagerSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 100, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLicenseManagerSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseManagerSeverity.setDescription('Object identifies the current severity of alarm.')
alarmLicenseManagerAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 100, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLicenseManagerAffect.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseManagerAffect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmLicenseManagerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 100, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLicenseManagerTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseManagerTimeStamp.setDescription('Timestamp.')
alarmSeverityLicenseManagerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 101), )
if mibBuilder.loadTexts: alarmSeverityLicenseManagerTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityLicenseManagerTable.setDescription('alarmSeverityLicenseManagerTable')
alarmSeverityLicenseManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 101, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "licenseManagerShelfNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerSlotNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerPortNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerExtNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityLicenseManagerType"))
if mibBuilder.loadTexts: alarmSeverityLicenseManagerEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityLicenseManagerEntry.setDescription('Entry of alarmSeverityLicenseManagerTable')
alarmSeverityLicenseManagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 101, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityLicenseManagerType.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityLicenseManagerType.setDescription('Type of severity.')
alarmSeverityLicenseManagerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 101, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityLicenseManagerValue.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityLicenseManagerValue.setDescription('Value of severity.')
alarmLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 102), )
if mibBuilder.loadTexts: alarmLicenseTable.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseTable.setDescription('alarmLicenseTable')
alarmLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 102, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "licenseShelfNo"), (0, "ADVA-FSPR7-MIB", "licenseSlotNo"), (0, "ADVA-FSPR7-MIB", "licensePortNo"), (0, "ADVA-FSPR7-MIB", "licenseExtNo"), (0, "ADVA-FSPR7-MIB", "licenseClassName"), (0, "ADVA-FSPR7-MIB", "alarmLicenseType"))
if mibBuilder.loadTexts: alarmLicenseEntry.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseEntry.setDescription('Entry of alarmLicenseTable')
alarmLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 102, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmLicenseType.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseType.setDescription('List of all interface conditions.')
alarmLicenseSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 102, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLicenseSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseSeverity.setDescription('Object identifies the current severity of alarm.')
alarmLicenseAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 102, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLicenseAffect.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseAffect.setDescription('Object indicates the service impairment affect of the alarm.')
alarmLicenseTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 102, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLicenseTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmLicenseTimeStamp.setDescription('Timestamp.')
alarmSeverityLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 103), )
if mibBuilder.loadTexts: alarmSeverityLicenseTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityLicenseTable.setDescription('alarmSeverityLicenseTable')
alarmSeverityLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 103, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "licenseShelfNo"), (0, "ADVA-FSPR7-MIB", "licenseSlotNo"), (0, "ADVA-FSPR7-MIB", "licensePortNo"), (0, "ADVA-FSPR7-MIB", "licenseExtNo"), (0, "ADVA-FSPR7-MIB", "licenseClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityLicenseType"))
if mibBuilder.loadTexts: alarmSeverityLicenseEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityLicenseEntry.setDescription('Entry of alarmSeverityLicenseTable')
alarmSeverityLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 103, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityLicenseType.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityLicenseType.setDescription('Type of severity.')
alarmSeverityLicenseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 103, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityLicenseValue.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityLicenseValue.setDescription('Value of severity.')
endOfLicensesMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLicensesMgmt.setStatus('current')
if mibBuilder.loadTexts: endOfLicensesMgmt.setDescription('')
endOfHdShelvesMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfHdShelvesMgmt.setStatus('current')
if mibBuilder.loadTexts: endOfHdShelvesMgmt.setDescription('')
endOfFeatureSpecific = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFeatureSpecific.setStatus('current')
if mibBuilder.loadTexts: endOfFeatureSpecific.setDescription('')
upwardEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1), )
if mibBuilder.loadTexts: upwardEqptTable.setStatus('current')
if mibBuilder.loadTexts: upwardEqptTable.setDescription('upwardEqptTable')
upwardEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardEqptPortNo"), (0, "ADVA-FSPR7-MIB", "upwardEqptExtNo"), (0, "ADVA-FSPR7-MIB", "upwardEqptClassName"), (0, "ADVA-FSPR7-MIB", "upwardEqptIndex"))
if mibBuilder.loadTexts: upwardEqptEntry.setStatus('current')
if mibBuilder.loadTexts: upwardEqptEntry.setDescription('Entry of upwardEqptTable')
upwardEqptShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardEqptShelfNo.setStatus('current')
if mibBuilder.loadTexts: upwardEqptShelfNo.setDescription('Adress index.')
upwardEqptSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardEqptSlotNo.setStatus('current')
if mibBuilder.loadTexts: upwardEqptSlotNo.setDescription('Adress index.')
upwardEqptPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardEqptPortNo.setStatus('current')
if mibBuilder.loadTexts: upwardEqptPortNo.setDescription('Adress index.')
upwardEqptExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardEqptExtNo.setStatus('current')
if mibBuilder.loadTexts: upwardEqptExtNo.setDescription('Adress index.')
upwardEqptClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardEqptClassName.setStatus('current')
if mibBuilder.loadTexts: upwardEqptClassName.setDescription('Entity Class Name')
upwardEqptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardEqptIndex.setStatus('current')
if mibBuilder.loadTexts: upwardEqptIndex.setDescription('Number of sequence.')
upwardEqptParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardEqptParentId.setStatus('current')
if mibBuilder.loadTexts: upwardEqptParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
endOfUpwardEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardEqptTable.setStatus('current')
if mibBuilder.loadTexts: endOfUpwardEqptTable.setDescription('')
downwardEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3), )
if mibBuilder.loadTexts: downwardEqptTable.setStatus('current')
if mibBuilder.loadTexts: downwardEqptTable.setDescription('downwardEqptTable')
downwardEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardEqptPortNo"), (0, "ADVA-FSPR7-MIB", "downwardEqptExtNo"), (0, "ADVA-FSPR7-MIB", "downwardEqptClassName"), (0, "ADVA-FSPR7-MIB", "downwardEqptIndex"))
if mibBuilder.loadTexts: downwardEqptEntry.setStatus('current')
if mibBuilder.loadTexts: downwardEqptEntry.setDescription('Entry of downwardEqptTable')
downwardEqptShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardEqptShelfNo.setStatus('current')
if mibBuilder.loadTexts: downwardEqptShelfNo.setDescription('Adress index.')
downwardEqptSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardEqptSlotNo.setStatus('current')
if mibBuilder.loadTexts: downwardEqptSlotNo.setDescription('Adress index.')
downwardEqptPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardEqptPortNo.setStatus('current')
if mibBuilder.loadTexts: downwardEqptPortNo.setDescription('Adress index.')
downwardEqptExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardEqptExtNo.setStatus('current')
if mibBuilder.loadTexts: downwardEqptExtNo.setDescription('Adress index.')
downwardEqptClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardEqptClassName.setStatus('current')
if mibBuilder.loadTexts: downwardEqptClassName.setDescription('Entity Class Name')
downwardEqptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardEqptIndex.setStatus('current')
if mibBuilder.loadTexts: downwardEqptIndex.setDescription('Number of sequence.')
downwardEqptChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardEqptChildId.setStatus('current')
if mibBuilder.loadTexts: downwardEqptChildId.setDescription('RowPointer to child entity.')
endOfDownwardEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardEqptTable.setStatus('current')
if mibBuilder.loadTexts: endOfDownwardEqptTable.setDescription('')
upwardDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5), )
if mibBuilder.loadTexts: upwardDcnTable.setStatus('current')
if mibBuilder.loadTexts: upwardDcnTable.setDescription('upwardDcnTable')
upwardDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardDcnPortNo"), (0, "ADVA-FSPR7-MIB", "upwardDcnExtNo"), (0, "ADVA-FSPR7-MIB", "upwardDcnClassName"), (0, "ADVA-FSPR7-MIB", "upwardDcnIndex"))
if mibBuilder.loadTexts: upwardDcnEntry.setStatus('current')
if mibBuilder.loadTexts: upwardDcnEntry.setDescription('Entry of upwardDcnTable')
upwardDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardDcnShelfNo.setStatus('current')
if mibBuilder.loadTexts: upwardDcnShelfNo.setDescription('Adress index.')
upwardDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardDcnSlotNo.setStatus('current')
if mibBuilder.loadTexts: upwardDcnSlotNo.setDescription('Adress index.')
upwardDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardDcnPortNo.setStatus('current')
if mibBuilder.loadTexts: upwardDcnPortNo.setDescription('Adress index.')
upwardDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardDcnExtNo.setStatus('current')
if mibBuilder.loadTexts: upwardDcnExtNo.setDescription('Adress index.')
upwardDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardDcnClassName.setStatus('current')
if mibBuilder.loadTexts: upwardDcnClassName.setDescription('Entity Class Name')
upwardDcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardDcnIndex.setStatus('current')
if mibBuilder.loadTexts: upwardDcnIndex.setDescription('Number of sequence.')
upwardDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardDcnParentId.setStatus('current')
if mibBuilder.loadTexts: upwardDcnParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
endOfUpwardDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardDcnTable.setStatus('current')
if mibBuilder.loadTexts: endOfUpwardDcnTable.setDescription('')
downwardDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7), )
if mibBuilder.loadTexts: downwardDcnTable.setStatus('current')
if mibBuilder.loadTexts: downwardDcnTable.setDescription('downwardDcnTable')
downwardDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardDcnPortNo"), (0, "ADVA-FSPR7-MIB", "downwardDcnExtNo"), (0, "ADVA-FSPR7-MIB", "downwardDcnClassName"), (0, "ADVA-FSPR7-MIB", "downwardDcnIndex"))
if mibBuilder.loadTexts: downwardDcnEntry.setStatus('current')
if mibBuilder.loadTexts: downwardDcnEntry.setDescription('Entry of downwardDcnTable')
downwardDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardDcnShelfNo.setStatus('current')
if mibBuilder.loadTexts: downwardDcnShelfNo.setDescription('Adress index.')
downwardDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardDcnSlotNo.setStatus('current')
if mibBuilder.loadTexts: downwardDcnSlotNo.setDescription('Adress index.')
downwardDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardDcnPortNo.setStatus('current')
if mibBuilder.loadTexts: downwardDcnPortNo.setDescription('Adress index.')
downwardDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardDcnExtNo.setStatus('current')
if mibBuilder.loadTexts: downwardDcnExtNo.setDescription('Adress index.')
downwardDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardDcnClassName.setStatus('current')
if mibBuilder.loadTexts: downwardDcnClassName.setDescription('Entity Class Name')
downwardDcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardDcnIndex.setStatus('current')
if mibBuilder.loadTexts: downwardDcnIndex.setDescription('Number of sequence.')
downwardDcnChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardDcnChildId.setStatus('current')
if mibBuilder.loadTexts: downwardDcnChildId.setDescription('RowPointer to child entity.')
endOfDownwardDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardDcnTable.setStatus('current')
if mibBuilder.loadTexts: endOfDownwardDcnTable.setDescription('')
upwardEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9), )
if mibBuilder.loadTexts: upwardEnvTable.setStatus('current')
if mibBuilder.loadTexts: upwardEnvTable.setDescription('upwardEnvTable')
upwardEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardEnvPortNo"), (0, "ADVA-FSPR7-MIB", "upwardEnvExtNo"), (0, "ADVA-FSPR7-MIB", "upwardEnvClassName"), (0, "ADVA-FSPR7-MIB", "upwardEnvIndex"))
if mibBuilder.loadTexts: upwardEnvEntry.setStatus('current')
if mibBuilder.loadTexts: upwardEnvEntry.setDescription('Entry of upwardEnvTable')
upwardEnvShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardEnvShelfNo.setStatus('current')
if mibBuilder.loadTexts: upwardEnvShelfNo.setDescription('Adress index.')
upwardEnvSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardEnvSlotNo.setStatus('current')
if mibBuilder.loadTexts: upwardEnvSlotNo.setDescription('Adress index.')
upwardEnvPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardEnvPortNo.setStatus('current')
if mibBuilder.loadTexts: upwardEnvPortNo.setDescription('Adress index.')
upwardEnvExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardEnvExtNo.setStatus('current')
if mibBuilder.loadTexts: upwardEnvExtNo.setDescription('Adress index.')
upwardEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardEnvClassName.setStatus('current')
if mibBuilder.loadTexts: upwardEnvClassName.setDescription('Entity Class Name')
upwardEnvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardEnvIndex.setStatus('current')
if mibBuilder.loadTexts: upwardEnvIndex.setDescription('Number of sequence.')
upwardEnvParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardEnvParentId.setStatus('current')
if mibBuilder.loadTexts: upwardEnvParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
endOfUpwardEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardEnvTable.setStatus('current')
if mibBuilder.loadTexts: endOfUpwardEnvTable.setDescription('')
downwardEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11), )
if mibBuilder.loadTexts: downwardEnvTable.setStatus('current')
if mibBuilder.loadTexts: downwardEnvTable.setDescription('downwardEnvTable')
downwardEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardEnvPortNo"), (0, "ADVA-FSPR7-MIB", "downwardEnvExtNo"), (0, "ADVA-FSPR7-MIB", "downwardEnvClassName"), (0, "ADVA-FSPR7-MIB", "downwardEnvIndex"))
if mibBuilder.loadTexts: downwardEnvEntry.setStatus('current')
if mibBuilder.loadTexts: downwardEnvEntry.setDescription('Entry of downwardEnvTable')
downwardEnvShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardEnvShelfNo.setStatus('current')
if mibBuilder.loadTexts: downwardEnvShelfNo.setDescription('Adress index.')
downwardEnvSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardEnvSlotNo.setStatus('current')
if mibBuilder.loadTexts: downwardEnvSlotNo.setDescription('Adress index.')
downwardEnvPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardEnvPortNo.setStatus('current')
if mibBuilder.loadTexts: downwardEnvPortNo.setDescription('Adress index.')
downwardEnvExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardEnvExtNo.setStatus('current')
if mibBuilder.loadTexts: downwardEnvExtNo.setDescription('Adress index.')
downwardEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardEnvClassName.setStatus('current')
if mibBuilder.loadTexts: downwardEnvClassName.setDescription('Entity Class Name')
downwardEnvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardEnvIndex.setStatus('current')
if mibBuilder.loadTexts: downwardEnvIndex.setDescription('Number of sequence.')
downwardEnvChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardEnvChildId.setStatus('current')
if mibBuilder.loadTexts: downwardEnvChildId.setDescription('RowPointer to child entity.')
endOfDownwardEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardEnvTable.setStatus('current')
if mibBuilder.loadTexts: endOfDownwardEnvTable.setDescription('')
upwardFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13), )
if mibBuilder.loadTexts: upwardFacilityTable.setStatus('current')
if mibBuilder.loadTexts: upwardFacilityTable.setDescription('upwardFacilityTable')
upwardFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "upwardFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "upwardFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "upwardFacilityClassName"), (0, "ADVA-FSPR7-MIB", "upwardFacilityIndex"))
if mibBuilder.loadTexts: upwardFacilityEntry.setStatus('current')
if mibBuilder.loadTexts: upwardFacilityEntry.setDescription('Entry of upwardFacilityTable')
upwardFacilityShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardFacilityShelfNo.setStatus('current')
if mibBuilder.loadTexts: upwardFacilityShelfNo.setDescription('Adress index.')
upwardFacilitySlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardFacilitySlotNo.setStatus('current')
if mibBuilder.loadTexts: upwardFacilitySlotNo.setDescription('Adress index.')
upwardFacilityPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardFacilityPortNo.setStatus('current')
if mibBuilder.loadTexts: upwardFacilityPortNo.setDescription('Adress index.')
upwardFacilityExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardFacilityExtNo.setStatus('current')
if mibBuilder.loadTexts: upwardFacilityExtNo.setDescription('Adress index.')
upwardFacilityClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardFacilityClassName.setStatus('current')
if mibBuilder.loadTexts: upwardFacilityClassName.setDescription('Entity Class Name')
upwardFacilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardFacilityIndex.setStatus('current')
if mibBuilder.loadTexts: upwardFacilityIndex.setDescription('Number of sequence.')
upwardFacilityParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardFacilityParentId.setStatus('current')
if mibBuilder.loadTexts: upwardFacilityParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
downwardFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14), )
if mibBuilder.loadTexts: downwardFacilityTable.setStatus('current')
if mibBuilder.loadTexts: downwardFacilityTable.setDescription('downwardFacilityTable')
downwardFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "downwardFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "downwardFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "downwardFacilityClassName"), (0, "ADVA-FSPR7-MIB", "downwardFacilityIndex"))
if mibBuilder.loadTexts: downwardFacilityEntry.setStatus('current')
if mibBuilder.loadTexts: downwardFacilityEntry.setDescription('Entry of downwardFacilityTable')
downwardFacilityShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardFacilityShelfNo.setStatus('current')
if mibBuilder.loadTexts: downwardFacilityShelfNo.setDescription('Adress index.')
downwardFacilitySlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardFacilitySlotNo.setStatus('current')
if mibBuilder.loadTexts: downwardFacilitySlotNo.setDescription('Adress index.')
downwardFacilityPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardFacilityPortNo.setStatus('current')
if mibBuilder.loadTexts: downwardFacilityPortNo.setDescription('Adress index.')
downwardFacilityExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardFacilityExtNo.setStatus('current')
if mibBuilder.loadTexts: downwardFacilityExtNo.setDescription('Adress index.')
downwardFacilityClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardFacilityClassName.setStatus('current')
if mibBuilder.loadTexts: downwardFacilityClassName.setDescription('Entity Class Name')
downwardFacilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardFacilityIndex.setStatus('current')
if mibBuilder.loadTexts: downwardFacilityIndex.setDescription('Number of sequence.')
downwardFacilityChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardFacilityChildId.setStatus('current')
if mibBuilder.loadTexts: downwardFacilityChildId.setDescription('RowPointer to child entity.')
endOfDownwardFacilityTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardFacilityTable.setStatus('current')
if mibBuilder.loadTexts: endOfDownwardFacilityTable.setDescription('')
upwardOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16), )
if mibBuilder.loadTexts: upwardOptLineTable.setStatus('current')
if mibBuilder.loadTexts: upwardOptLineTable.setDescription('upwardOptLineTable')
upwardOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardOptLineShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardOptLineSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardOptLinePortNo"), (0, "ADVA-FSPR7-MIB", "upwardOptLineExtNo"), (0, "ADVA-FSPR7-MIB", "upwardOptLineClassName"), (0, "ADVA-FSPR7-MIB", "upwardOptLineIndex"))
if mibBuilder.loadTexts: upwardOptLineEntry.setStatus('current')
if mibBuilder.loadTexts: upwardOptLineEntry.setDescription('Entry of upwardOptLineTable')
upwardOptLineShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardOptLineShelfNo.setStatus('current')
if mibBuilder.loadTexts: upwardOptLineShelfNo.setDescription('Adress index.')
upwardOptLineSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardOptLineSlotNo.setStatus('current')
if mibBuilder.loadTexts: upwardOptLineSlotNo.setDescription('Adress index.')
upwardOptLinePortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardOptLinePortNo.setStatus('current')
if mibBuilder.loadTexts: upwardOptLinePortNo.setDescription('Adress index.')
upwardOptLineExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardOptLineExtNo.setStatus('current')
if mibBuilder.loadTexts: upwardOptLineExtNo.setDescription('Adress index.')
upwardOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardOptLineClassName.setStatus('current')
if mibBuilder.loadTexts: upwardOptLineClassName.setDescription('Entity Class Name')
upwardOptLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardOptLineIndex.setStatus('current')
if mibBuilder.loadTexts: upwardOptLineIndex.setDescription('Number of sequence.')
upwardOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardOptLineParentId.setStatus('current')
if mibBuilder.loadTexts: upwardOptLineParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
endOfUpwardOptLineTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardOptLineTable.setStatus('current')
if mibBuilder.loadTexts: endOfUpwardOptLineTable.setDescription('')
downwardOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18), )
if mibBuilder.loadTexts: downwardOptLineTable.setStatus('current')
if mibBuilder.loadTexts: downwardOptLineTable.setDescription('downwardOptLineTable')
downwardOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardOptLineShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardOptLineSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardOptLinePortNo"), (0, "ADVA-FSPR7-MIB", "downwardOptLineExtNo"), (0, "ADVA-FSPR7-MIB", "downwardOptLineClassName"), (0, "ADVA-FSPR7-MIB", "downwardOptLineIndex"))
if mibBuilder.loadTexts: downwardOptLineEntry.setStatus('current')
if mibBuilder.loadTexts: downwardOptLineEntry.setDescription('Entry of downwardOptLineTable')
downwardOptLineShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardOptLineShelfNo.setStatus('current')
if mibBuilder.loadTexts: downwardOptLineShelfNo.setDescription('Adress index.')
downwardOptLineSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardOptLineSlotNo.setStatus('current')
if mibBuilder.loadTexts: downwardOptLineSlotNo.setDescription('Adress index.')
downwardOptLinePortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardOptLinePortNo.setStatus('current')
if mibBuilder.loadTexts: downwardOptLinePortNo.setDescription('Adress index.')
downwardOptLineExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardOptLineExtNo.setStatus('current')
if mibBuilder.loadTexts: downwardOptLineExtNo.setDescription('Adress index.')
downwardOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardOptLineClassName.setStatus('current')
if mibBuilder.loadTexts: downwardOptLineClassName.setDescription('Entity Class Name')
downwardOptLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardOptLineIndex.setStatus('current')
if mibBuilder.loadTexts: downwardOptLineIndex.setDescription('Number of sequence.')
downwardOptLineChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardOptLineChildId.setStatus('current')
if mibBuilder.loadTexts: downwardOptLineChildId.setDescription('RowPointer to child entity.')
upwardTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19), )
if mibBuilder.loadTexts: upwardTerminPointTable.setStatus('current')
if mibBuilder.loadTexts: upwardTerminPointTable.setDescription('upwardTerminPointTable')
upwardTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointIndex"))
if mibBuilder.loadTexts: upwardTerminPointEntry.setStatus('current')
if mibBuilder.loadTexts: upwardTerminPointEntry.setDescription('Entry of upwardTerminPointTable')
upwardTerminPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndexNo1.setStatus('current')
if mibBuilder.loadTexts: upwardTerminPointIndexNo1.setDescription('Adress index.')
upwardTerminPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndexNo2.setStatus('current')
if mibBuilder.loadTexts: upwardTerminPointIndexNo2.setDescription('Adress index.')
upwardTerminPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndexNo3.setStatus('current')
if mibBuilder.loadTexts: upwardTerminPointIndexNo3.setDescription('Adress index.')
upwardTerminPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndexNo4.setStatus('current')
if mibBuilder.loadTexts: upwardTerminPointIndexNo4.setDescription('Adress index.')
upwardTerminPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardTerminPointClassName.setStatus('current')
if mibBuilder.loadTexts: upwardTerminPointClassName.setDescription('Entity Class Name')
upwardTerminPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndex.setStatus('current')
if mibBuilder.loadTexts: upwardTerminPointIndex.setDescription('Number of sequence.')
upwardTerminPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardTerminPointParentId.setStatus('current')
if mibBuilder.loadTexts: upwardTerminPointParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
downwardTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20), )
if mibBuilder.loadTexts: downwardTerminPointTable.setStatus('current')
if mibBuilder.loadTexts: downwardTerminPointTable.setDescription('downwardTerminPointTable')
downwardTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointIndex"))
if mibBuilder.loadTexts: downwardTerminPointEntry.setStatus('current')
if mibBuilder.loadTexts: downwardTerminPointEntry.setDescription('Entry of downwardTerminPointTable')
downwardTerminPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndexNo1.setStatus('current')
if mibBuilder.loadTexts: downwardTerminPointIndexNo1.setDescription('Adress index.')
downwardTerminPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndexNo2.setStatus('current')
if mibBuilder.loadTexts: downwardTerminPointIndexNo2.setDescription('Adress index.')
downwardTerminPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndexNo3.setStatus('current')
if mibBuilder.loadTexts: downwardTerminPointIndexNo3.setDescription('Adress index.')
downwardTerminPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndexNo4.setStatus('current')
if mibBuilder.loadTexts: downwardTerminPointIndexNo4.setDescription('Adress index.')
downwardTerminPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardTerminPointClassName.setStatus('current')
if mibBuilder.loadTexts: downwardTerminPointClassName.setDescription('Entity Class Name')
downwardTerminPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndex.setStatus('current')
if mibBuilder.loadTexts: downwardTerminPointIndex.setDescription('Number of sequence.')
downwardTerminPointChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardTerminPointChildId.setStatus('current')
if mibBuilder.loadTexts: downwardTerminPointChildId.setDescription('RowPointer to child entity.')
endOfDownwardTerminPointTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardTerminPointTable.setStatus('current')
if mibBuilder.loadTexts: endOfDownwardTerminPointTable.setDescription('')
upwardExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23), )
if mibBuilder.loadTexts: upwardExternalPortTable.setStatus('current')
if mibBuilder.loadTexts: upwardExternalPortTable.setDescription('upwardExternalPortTable')
upwardExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortClassName"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortIndex"))
if mibBuilder.loadTexts: upwardExternalPortEntry.setStatus('current')
if mibBuilder.loadTexts: upwardExternalPortEntry.setDescription('Entry of upwardExternalPortTable')
upwardExternalPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortShelfNo.setStatus('current')
if mibBuilder.loadTexts: upwardExternalPortShelfNo.setDescription('Adress index.')
upwardExternalPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortSlotNo.setStatus('current')
if mibBuilder.loadTexts: upwardExternalPortSlotNo.setDescription('Adress index.')
upwardExternalPortPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortPortNo.setStatus('current')
if mibBuilder.loadTexts: upwardExternalPortPortNo.setDescription('Adress index.')
upwardExternalPortExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortExtNo.setStatus('current')
if mibBuilder.loadTexts: upwardExternalPortExtNo.setDescription('Adress index.')
upwardExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardExternalPortClassName.setStatus('current')
if mibBuilder.loadTexts: upwardExternalPortClassName.setDescription('Entity Class Name')
upwardExternalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortIndex.setStatus('current')
if mibBuilder.loadTexts: upwardExternalPortIndex.setDescription('Number of sequence.')
upwardExternalPortParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardExternalPortParentId.setStatus('current')
if mibBuilder.loadTexts: upwardExternalPortParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
downwardExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24), )
if mibBuilder.loadTexts: downwardExternalPortTable.setStatus('current')
if mibBuilder.loadTexts: downwardExternalPortTable.setDescription('downwardExternalPortTable')
downwardExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortClassName"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortIndex"))
if mibBuilder.loadTexts: downwardExternalPortEntry.setStatus('current')
if mibBuilder.loadTexts: downwardExternalPortEntry.setDescription('Entry of downwardExternalPortTable')
downwardExternalPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortShelfNo.setStatus('current')
if mibBuilder.loadTexts: downwardExternalPortShelfNo.setDescription('Adress index.')
downwardExternalPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortSlotNo.setStatus('current')
if mibBuilder.loadTexts: downwardExternalPortSlotNo.setDescription('Adress index.')
downwardExternalPortPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortPortNo.setStatus('current')
if mibBuilder.loadTexts: downwardExternalPortPortNo.setDescription('Adress index.')
downwardExternalPortExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortExtNo.setStatus('current')
if mibBuilder.loadTexts: downwardExternalPortExtNo.setDescription('Adress index.')
downwardExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardExternalPortClassName.setStatus('current')
if mibBuilder.loadTexts: downwardExternalPortClassName.setDescription('Entity Class Name')
downwardExternalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortIndex.setStatus('current')
if mibBuilder.loadTexts: downwardExternalPortIndex.setDescription('Number of sequence.')
downwardExternalPortChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardExternalPortChildId.setStatus('current')
if mibBuilder.loadTexts: downwardExternalPortChildId.setDescription('RowPointer to child entity.')
endOfDownwardExternalPortTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardExternalPortTable.setStatus('current')
if mibBuilder.loadTexts: endOfDownwardExternalPortTable.setDescription('')
upwardContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27), )
if mibBuilder.loadTexts: upwardContainerTable.setStatus('current')
if mibBuilder.loadTexts: upwardContainerTable.setDescription('upwardContainerTable')
upwardContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardContainerPortNo"), (0, "ADVA-FSPR7-MIB", "upwardContainerExtNo"), (0, "ADVA-FSPR7-MIB", "upwardContainerClassName"), (0, "ADVA-FSPR7-MIB", "upwardContainerIndex"))
if mibBuilder.loadTexts: upwardContainerEntry.setStatus('current')
if mibBuilder.loadTexts: upwardContainerEntry.setDescription('Entry of upwardContainerTable')
upwardContainerShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardContainerShelfNo.setStatus('current')
if mibBuilder.loadTexts: upwardContainerShelfNo.setDescription('Adress index.')
upwardContainerSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardContainerSlotNo.setStatus('current')
if mibBuilder.loadTexts: upwardContainerSlotNo.setDescription('Adress index.')
upwardContainerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardContainerPortNo.setStatus('current')
if mibBuilder.loadTexts: upwardContainerPortNo.setDescription('Adress index.')
upwardContainerExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardContainerExtNo.setStatus('current')
if mibBuilder.loadTexts: upwardContainerExtNo.setDescription('Adress index.')
upwardContainerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardContainerClassName.setStatus('current')
if mibBuilder.loadTexts: upwardContainerClassName.setDescription('Entity Class Name')
upwardContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardContainerIndex.setStatus('current')
if mibBuilder.loadTexts: upwardContainerIndex.setDescription('Number of sequence.')
upwardContainerParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardContainerParentId.setStatus('current')
if mibBuilder.loadTexts: upwardContainerParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
endOfUpwardContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardContainerTable.setStatus('current')
if mibBuilder.loadTexts: endOfUpwardContainerTable.setDescription('')
downwardContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29), )
if mibBuilder.loadTexts: downwardContainerTable.setStatus('current')
if mibBuilder.loadTexts: downwardContainerTable.setDescription('downwardContainerTable')
downwardContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardContainerPortNo"), (0, "ADVA-FSPR7-MIB", "downwardContainerExtNo"), (0, "ADVA-FSPR7-MIB", "downwardContainerClassName"), (0, "ADVA-FSPR7-MIB", "downwardContainerIndex"))
if mibBuilder.loadTexts: downwardContainerEntry.setStatus('current')
if mibBuilder.loadTexts: downwardContainerEntry.setDescription('Entry of downwardContainerTable')
downwardContainerShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardContainerShelfNo.setStatus('current')
if mibBuilder.loadTexts: downwardContainerShelfNo.setDescription('Adress index.')
downwardContainerSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardContainerSlotNo.setStatus('current')
if mibBuilder.loadTexts: downwardContainerSlotNo.setDescription('Adress index.')
downwardContainerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardContainerPortNo.setStatus('current')
if mibBuilder.loadTexts: downwardContainerPortNo.setDescription('Adress index.')
downwardContainerExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardContainerExtNo.setStatus('current')
if mibBuilder.loadTexts: downwardContainerExtNo.setDescription('Adress index.')
downwardContainerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardContainerClassName.setStatus('current')
if mibBuilder.loadTexts: downwardContainerClassName.setDescription('Entity Class Name')
downwardContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardContainerIndex.setStatus('current')
if mibBuilder.loadTexts: downwardContainerIndex.setDescription('Number of sequence.')
downwardContainerChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardContainerChildId.setStatus('current')
if mibBuilder.loadTexts: downwardContainerChildId.setDescription('RowPointer to child entity.')
endOfDownwardContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardContainerTable.setStatus('current')
if mibBuilder.loadTexts: endOfDownwardContainerTable.setDescription('')
upwardOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31), )
if mibBuilder.loadTexts: upwardOpticalMuxTable.setStatus('current')
if mibBuilder.loadTexts: upwardOpticalMuxTable.setDescription('upwardOpticalMuxTable')
upwardOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxClassName"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxIndex"))
if mibBuilder.loadTexts: upwardOpticalMuxEntry.setStatus('current')
if mibBuilder.loadTexts: upwardOpticalMuxEntry.setDescription('Entry of upwardOpticalMuxTable')
upwardOpticalMuxShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxShelfNo.setStatus('current')
if mibBuilder.loadTexts: upwardOpticalMuxShelfNo.setDescription('Adress index.')
upwardOpticalMuxSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxSlotNo.setStatus('current')
if mibBuilder.loadTexts: upwardOpticalMuxSlotNo.setDescription('Adress index.')
upwardOpticalMuxPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxPortNo.setStatus('current')
if mibBuilder.loadTexts: upwardOpticalMuxPortNo.setDescription('Adress index.')
upwardOpticalMuxExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxExtNo.setStatus('current')
if mibBuilder.loadTexts: upwardOpticalMuxExtNo.setDescription('Adress index.')
upwardOpticalMuxClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardOpticalMuxClassName.setStatus('current')
if mibBuilder.loadTexts: upwardOpticalMuxClassName.setDescription('Entity Class Name')
upwardOpticalMuxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxIndex.setStatus('current')
if mibBuilder.loadTexts: upwardOpticalMuxIndex.setDescription('Number of sequence.')
upwardOpticalMuxParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardOpticalMuxParentId.setStatus('current')
if mibBuilder.loadTexts: upwardOpticalMuxParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
endOfUpwardOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardOpticalMuxTable.setStatus('current')
if mibBuilder.loadTexts: endOfUpwardOpticalMuxTable.setDescription('')
downwardOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33), )
if mibBuilder.loadTexts: downwardOpticalMuxTable.setStatus('current')
if mibBuilder.loadTexts: downwardOpticalMuxTable.setDescription('downwardOpticalMuxTable')
downwardOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxClassName"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxIndex"))
if mibBuilder.loadTexts: downwardOpticalMuxEntry.setStatus('current')
if mibBuilder.loadTexts: downwardOpticalMuxEntry.setDescription('Entry of downwardOpticalMuxTable')
downwardOpticalMuxShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxShelfNo.setStatus('current')
if mibBuilder.loadTexts: downwardOpticalMuxShelfNo.setDescription('Adress index.')
downwardOpticalMuxSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxSlotNo.setStatus('current')
if mibBuilder.loadTexts: downwardOpticalMuxSlotNo.setDescription('Adress index.')
downwardOpticalMuxPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxPortNo.setStatus('current')
if mibBuilder.loadTexts: downwardOpticalMuxPortNo.setDescription('Adress index.')
downwardOpticalMuxExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxExtNo.setStatus('current')
if mibBuilder.loadTexts: downwardOpticalMuxExtNo.setDescription('Adress index.')
downwardOpticalMuxClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardOpticalMuxClassName.setStatus('current')
if mibBuilder.loadTexts: downwardOpticalMuxClassName.setDescription('Entity Class Name')
downwardOpticalMuxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxIndex.setStatus('current')
if mibBuilder.loadTexts: downwardOpticalMuxIndex.setDescription('Number of sequence.')
downwardOpticalMuxChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardOpticalMuxChildId.setStatus('current')
if mibBuilder.loadTexts: downwardOpticalMuxChildId.setDescription('RowPointer to child entity.')
endOfDownwardOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardOpticalMuxTable.setStatus('current')
if mibBuilder.loadTexts: endOfDownwardOpticalMuxTable.setDescription('')
upwardShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35), )
if mibBuilder.loadTexts: upwardShelfConnTable.setStatus('current')
if mibBuilder.loadTexts: upwardShelfConnTable.setDescription('upwardShelfConnTable')
upwardShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnClassName"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnIndex"))
if mibBuilder.loadTexts: upwardShelfConnEntry.setStatus('current')
if mibBuilder.loadTexts: upwardShelfConnEntry.setDescription('Entry of upwardShelfConnTable')
upwardShelfConnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnShelfNo.setStatus('current')
if mibBuilder.loadTexts: upwardShelfConnShelfNo.setDescription('Adress index.')
upwardShelfConnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnSlotNo.setStatus('current')
if mibBuilder.loadTexts: upwardShelfConnSlotNo.setDescription('Adress index.')
upwardShelfConnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnPortNo.setStatus('current')
if mibBuilder.loadTexts: upwardShelfConnPortNo.setDescription('Adress index.')
upwardShelfConnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnExtNo.setStatus('current')
if mibBuilder.loadTexts: upwardShelfConnExtNo.setDescription('Adress index.')
upwardShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardShelfConnClassName.setStatus('current')
if mibBuilder.loadTexts: upwardShelfConnClassName.setDescription('Entity Class Name')
upwardShelfConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnIndex.setStatus('current')
if mibBuilder.loadTexts: upwardShelfConnIndex.setDescription('Number of sequence.')
upwardShelfConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardShelfConnParentId.setStatus('current')
if mibBuilder.loadTexts: upwardShelfConnParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
endOfUpwardShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardShelfConnTable.setStatus('current')
if mibBuilder.loadTexts: endOfUpwardShelfConnTable.setDescription('')
downwardShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37), )
if mibBuilder.loadTexts: downwardShelfConnTable.setStatus('current')
if mibBuilder.loadTexts: downwardShelfConnTable.setDescription('downwardShelfConnTable')
downwardShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnClassName"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnIndex"))
if mibBuilder.loadTexts: downwardShelfConnEntry.setStatus('current')
if mibBuilder.loadTexts: downwardShelfConnEntry.setDescription('Entry of downwardShelfConnTable')
downwardShelfConnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnShelfNo.setStatus('current')
if mibBuilder.loadTexts: downwardShelfConnShelfNo.setDescription('Adress index.')
downwardShelfConnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnSlotNo.setStatus('current')
if mibBuilder.loadTexts: downwardShelfConnSlotNo.setDescription('Adress index.')
downwardShelfConnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnPortNo.setStatus('current')
if mibBuilder.loadTexts: downwardShelfConnPortNo.setDescription('Adress index.')
downwardShelfConnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnExtNo.setStatus('current')
if mibBuilder.loadTexts: downwardShelfConnExtNo.setDescription('Adress index.')
downwardShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardShelfConnClassName.setStatus('current')
if mibBuilder.loadTexts: downwardShelfConnClassName.setDescription('Entity Class Name')
downwardShelfConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnIndex.setStatus('current')
if mibBuilder.loadTexts: downwardShelfConnIndex.setDescription('Number of sequence.')
downwardShelfConnChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardShelfConnChildId.setStatus('current')
if mibBuilder.loadTexts: downwardShelfConnChildId.setDescription('RowPointer to child entity.')
endOfDownwardShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardShelfConnTable.setStatus('current')
if mibBuilder.loadTexts: endOfDownwardShelfConnTable.setDescription('')
dependentTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100), )
if mibBuilder.loadTexts: dependentTable.setStatus('current')
if mibBuilder.loadTexts: dependentTable.setDescription('dependentTable')
dependentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "dependentIndexNo1"), (0, "ADVA-FSPR7-MIB", "dependentIndexNo2"), (0, "ADVA-FSPR7-MIB", "dependentIndexNo3"), (0, "ADVA-FSPR7-MIB", "dependentIndexNo4"), (0, "ADVA-FSPR7-MIB", "dependentClassName"), (0, "ADVA-FSPR7-MIB", "dependentIndex"))
if mibBuilder.loadTexts: dependentEntry.setStatus('current')
if mibBuilder.loadTexts: dependentEntry.setDescription('Entry of dependentTable')
dependentIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dependentIndexNo1.setStatus('current')
if mibBuilder.loadTexts: dependentIndexNo1.setDescription('Adress index.')
dependentIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 2), Unsigned32())
if mibBuilder.loadTexts: dependentIndexNo2.setStatus('current')
if mibBuilder.loadTexts: dependentIndexNo2.setDescription('Adress index.')
dependentIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 3), Unsigned32())
if mibBuilder.loadTexts: dependentIndexNo3.setStatus('current')
if mibBuilder.loadTexts: dependentIndexNo3.setDescription('Adress index.')
dependentIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 4), Unsigned32())
if mibBuilder.loadTexts: dependentIndexNo4.setStatus('current')
if mibBuilder.loadTexts: dependentIndexNo4.setDescription('Adress index.')
dependentClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 5), EntityClassName())
if mibBuilder.loadTexts: dependentClassName.setStatus('current')
if mibBuilder.loadTexts: dependentClassName.setDescription('Entity Class Name')
dependentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 6), Unsigned32())
if mibBuilder.loadTexts: dependentIndex.setStatus('current')
if mibBuilder.loadTexts: dependentIndex.setDescription('Number of sequence.')
dependentAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dependentAid.setStatus('current')
if mibBuilder.loadTexts: dependentAid.setDescription('Aid string of entity.')
dependentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dependentId.setStatus('current')
if mibBuilder.loadTexts: dependentId.setDescription('RowPointer to the dependent entity.')
endOfDependentTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDependentTable.setStatus('current')
if mibBuilder.loadTexts: endOfDependentTable.setDescription('')
endOfRelationship = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfRelationship.setStatus('current')
if mibBuilder.loadTexts: endOfRelationship.setDescription('')
notAssignableEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2), )
if mibBuilder.loadTexts: notAssignableEqptTable.setStatus('current')
if mibBuilder.loadTexts: notAssignableEqptTable.setDescription('notAssignableEqpt')
notAssignableEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableEqptIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableEqptIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableEqptIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableEqptIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableEqptClassName"))
if mibBuilder.loadTexts: notAssignableEqptEntry.setStatus('current')
if mibBuilder.loadTexts: notAssignableEqptEntry.setDescription('Entry of notAssignableEqpt')
notAssignableEqptIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableEqptIndexNo1.setStatus('current')
if mibBuilder.loadTexts: notAssignableEqptIndexNo1.setDescription('Adress index.')
notAssignableEqptIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableEqptIndexNo2.setStatus('current')
if mibBuilder.loadTexts: notAssignableEqptIndexNo2.setDescription('Adress index.')
notAssignableEqptIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableEqptIndexNo3.setStatus('current')
if mibBuilder.loadTexts: notAssignableEqptIndexNo3.setDescription('Adress index.')
notAssignableEqptIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableEqptIndexNo4.setStatus('current')
if mibBuilder.loadTexts: notAssignableEqptIndexNo4.setDescription('Adress index.')
notAssignableEqptClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableEqptClassName.setStatus('current')
if mibBuilder.loadTexts: notAssignableEqptClassName.setDescription('Entity Class Name')
notAssignableEqptAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEqptAidString.setStatus('current')
if mibBuilder.loadTexts: notAssignableEqptAidString.setDescription('Aid string of entity.')
notAssignableEqptParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEqptParentId.setStatus('current')
if mibBuilder.loadTexts: notAssignableEqptParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
notAssignableEqptClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEqptClass.setStatus('current')
if mibBuilder.loadTexts: notAssignableEqptClass.setDescription('EntityClass')
endOfNotAssignableEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableEqptTable.setStatus('current')
if mibBuilder.loadTexts: endOfNotAssignableEqptTable.setDescription('')
notAssignableDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4), )
if mibBuilder.loadTexts: notAssignableDcnTable.setStatus('current')
if mibBuilder.loadTexts: notAssignableDcnTable.setDescription('notAssignableDcn')
notAssignableDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableDcnIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableDcnIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableDcnIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableDcnIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableDcnClassName"))
if mibBuilder.loadTexts: notAssignableDcnEntry.setStatus('current')
if mibBuilder.loadTexts: notAssignableDcnEntry.setDescription('Entry of notAssignableDcn')
notAssignableDcnIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableDcnIndexNo1.setStatus('current')
if mibBuilder.loadTexts: notAssignableDcnIndexNo1.setDescription('Adress index.')
notAssignableDcnIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableDcnIndexNo2.setStatus('current')
if mibBuilder.loadTexts: notAssignableDcnIndexNo2.setDescription('Adress index.')
notAssignableDcnIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableDcnIndexNo3.setStatus('current')
if mibBuilder.loadTexts: notAssignableDcnIndexNo3.setDescription('Adress index.')
notAssignableDcnIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableDcnIndexNo4.setStatus('current')
if mibBuilder.loadTexts: notAssignableDcnIndexNo4.setDescription('Adress index.')
notAssignableDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableDcnClassName.setStatus('current')
if mibBuilder.loadTexts: notAssignableDcnClassName.setDescription('Entity Class Name')
notAssignableDcnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableDcnAidString.setStatus('current')
if mibBuilder.loadTexts: notAssignableDcnAidString.setDescription('Aid string of entity.')
notAssignableDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableDcnParentId.setStatus('current')
if mibBuilder.loadTexts: notAssignableDcnParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
notAssignableDcnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableDcnClass.setStatus('current')
if mibBuilder.loadTexts: notAssignableDcnClass.setDescription('EntityClass')
endOfNotAssignableDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableDcnTable.setStatus('current')
if mibBuilder.loadTexts: endOfNotAssignableDcnTable.setDescription('')
notAssignableFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7), )
if mibBuilder.loadTexts: notAssignableFacilityTable.setStatus('current')
if mibBuilder.loadTexts: notAssignableFacilityTable.setDescription('notAssignableFacility')
notAssignableFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableFacilityIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableFacilityIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableFacilityIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableFacilityIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableFacilityClassName"))
if mibBuilder.loadTexts: notAssignableFacilityEntry.setStatus('current')
if mibBuilder.loadTexts: notAssignableFacilityEntry.setDescription('Entry of notAssignableFacility')
notAssignableFacilityIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableFacilityIndexNo1.setStatus('current')
if mibBuilder.loadTexts: notAssignableFacilityIndexNo1.setDescription('Adress index.')
notAssignableFacilityIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableFacilityIndexNo2.setStatus('current')
if mibBuilder.loadTexts: notAssignableFacilityIndexNo2.setDescription('Adress index.')
notAssignableFacilityIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableFacilityIndexNo3.setStatus('current')
if mibBuilder.loadTexts: notAssignableFacilityIndexNo3.setDescription('Adress index.')
notAssignableFacilityIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableFacilityIndexNo4.setStatus('current')
if mibBuilder.loadTexts: notAssignableFacilityIndexNo4.setDescription('Adress index.')
notAssignableFacilityClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableFacilityClassName.setStatus('current')
if mibBuilder.loadTexts: notAssignableFacilityClassName.setDescription('Entity Class Name')
notAssignableFacilityAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableFacilityAidString.setStatus('current')
if mibBuilder.loadTexts: notAssignableFacilityAidString.setDescription('Aid string of entity.')
notAssignableFacilityParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableFacilityParentId.setStatus('current')
if mibBuilder.loadTexts: notAssignableFacilityParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
notAssignableFacilityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableFacilityClass.setStatus('current')
if mibBuilder.loadTexts: notAssignableFacilityClass.setDescription('EntityClass')
endOfNotAssignableFacilityTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableFacilityTable.setStatus('current')
if mibBuilder.loadTexts: endOfNotAssignableFacilityTable.setDescription('')
notAssignableOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9), )
if mibBuilder.loadTexts: notAssignableOptLineTable.setStatus('current')
if mibBuilder.loadTexts: notAssignableOptLineTable.setDescription('notAssignableOptLine')
notAssignableOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableOptLineIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableOptLineIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableOptLineIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableOptLineClassName"))
if mibBuilder.loadTexts: notAssignableOptLineEntry.setStatus('current')
if mibBuilder.loadTexts: notAssignableOptLineEntry.setDescription('Entry of notAssignableOptLine')
notAssignableOptLineIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableOptLineIndexNo1.setStatus('current')
if mibBuilder.loadTexts: notAssignableOptLineIndexNo1.setDescription('Adress index.')
notAssignableOptLineIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableOptLineIndexNo2.setStatus('current')
if mibBuilder.loadTexts: notAssignableOptLineIndexNo2.setDescription('Adress index.')
notAssignableOptLineIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableOptLineIndexNo3.setStatus('current')
if mibBuilder.loadTexts: notAssignableOptLineIndexNo3.setDescription('Adress index.')
notAssignableOptLineIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableOptLineIndexNo4.setStatus('current')
if mibBuilder.loadTexts: notAssignableOptLineIndexNo4.setDescription('Adress index.')
notAssignableOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableOptLineClassName.setStatus('current')
if mibBuilder.loadTexts: notAssignableOptLineClassName.setDescription('Entity Class Name')
notAssignableOptLineAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOptLineAidString.setStatus('current')
if mibBuilder.loadTexts: notAssignableOptLineAidString.setDescription('Aid string of entity.')
notAssignableOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOptLineParentId.setStatus('current')
if mibBuilder.loadTexts: notAssignableOptLineParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
notAssignableOptLineClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOptLineClass.setStatus('current')
if mibBuilder.loadTexts: notAssignableOptLineClass.setDescription('EntityClass')
endOfNotAssignableOptLineTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableOptLineTable.setStatus('current')
if mibBuilder.loadTexts: endOfNotAssignableOptLineTable.setDescription('')
notAssignableEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11), )
if mibBuilder.loadTexts: notAssignableEnvTable.setStatus('current')
if mibBuilder.loadTexts: notAssignableEnvTable.setDescription('notAssignableEnv')
notAssignableEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableEnvIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableEnvIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableEnvIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableEnvIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableEnvClassName"))
if mibBuilder.loadTexts: notAssignableEnvEntry.setStatus('current')
if mibBuilder.loadTexts: notAssignableEnvEntry.setDescription('Entry of notAssignableEnv')
notAssignableEnvIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableEnvIndexNo1.setStatus('current')
if mibBuilder.loadTexts: notAssignableEnvIndexNo1.setDescription('Adress index.')
notAssignableEnvIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableEnvIndexNo2.setStatus('current')
if mibBuilder.loadTexts: notAssignableEnvIndexNo2.setDescription('Adress index.')
notAssignableEnvIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableEnvIndexNo3.setStatus('current')
if mibBuilder.loadTexts: notAssignableEnvIndexNo3.setDescription('Adress index.')
notAssignableEnvIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableEnvIndexNo4.setStatus('current')
if mibBuilder.loadTexts: notAssignableEnvIndexNo4.setDescription('Adress index.')
notAssignableEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableEnvClassName.setStatus('current')
if mibBuilder.loadTexts: notAssignableEnvClassName.setDescription('Entity Class Name')
notAssignableEnvAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEnvAidString.setStatus('current')
if mibBuilder.loadTexts: notAssignableEnvAidString.setDescription('Aid string of entity.')
notAssignableEnvParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEnvParentId.setStatus('current')
if mibBuilder.loadTexts: notAssignableEnvParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
notAssignableEnvClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEnvClass.setStatus('current')
if mibBuilder.loadTexts: notAssignableEnvClass.setDescription('EntityClass')
endOfNotAssignableEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableEnvTable.setStatus('current')
if mibBuilder.loadTexts: endOfNotAssignableEnvTable.setDescription('')
notAssignableExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13), )
if mibBuilder.loadTexts: notAssignableExternalPortTable.setStatus('current')
if mibBuilder.loadTexts: notAssignableExternalPortTable.setDescription('notAssignableExternalPort')
notAssignableExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableExternalPortIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableExternalPortIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableExternalPortIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableExternalPortIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableExternalPortClassName"))
if mibBuilder.loadTexts: notAssignableExternalPortEntry.setStatus('current')
if mibBuilder.loadTexts: notAssignableExternalPortEntry.setDescription('Entry of notAssignableExternalPort')
notAssignableExternalPortIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo1.setStatus('current')
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo1.setDescription('Adress index.')
notAssignableExternalPortIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo2.setStatus('current')
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo2.setDescription('Adress index.')
notAssignableExternalPortIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo3.setStatus('current')
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo3.setDescription('Adress index.')
notAssignableExternalPortIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo4.setStatus('current')
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo4.setDescription('Adress index.')
notAssignableExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableExternalPortClassName.setStatus('current')
if mibBuilder.loadTexts: notAssignableExternalPortClassName.setDescription('Entity Class Name')
notAssignableExternalPortAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableExternalPortAidString.setStatus('current')
if mibBuilder.loadTexts: notAssignableExternalPortAidString.setDescription('Aid string of entity.')
notAssignableExternalPortParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableExternalPortParentId.setStatus('current')
if mibBuilder.loadTexts: notAssignableExternalPortParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
notAssignableExternalPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableExternalPortClass.setStatus('current')
if mibBuilder.loadTexts: notAssignableExternalPortClass.setDescription('EntityClass')
endOfNotAssignableExternalPortTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableExternalPortTable.setStatus('current')
if mibBuilder.loadTexts: endOfNotAssignableExternalPortTable.setDescription('')
notAssignableContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15), )
if mibBuilder.loadTexts: notAssignableContainerTable.setStatus('current')
if mibBuilder.loadTexts: notAssignableContainerTable.setDescription('notAssignableContainer')
notAssignableContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableContainerIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableContainerIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableContainerIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableContainerIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableContainerClassName"))
if mibBuilder.loadTexts: notAssignableContainerEntry.setStatus('current')
if mibBuilder.loadTexts: notAssignableContainerEntry.setDescription('Entry of notAssignableContainer')
notAssignableContainerIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableContainerIndexNo1.setStatus('current')
if mibBuilder.loadTexts: notAssignableContainerIndexNo1.setDescription('Adress index.')
notAssignableContainerIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableContainerIndexNo2.setStatus('current')
if mibBuilder.loadTexts: notAssignableContainerIndexNo2.setDescription('Adress index.')
notAssignableContainerIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableContainerIndexNo3.setStatus('current')
if mibBuilder.loadTexts: notAssignableContainerIndexNo3.setDescription('Adress index.')
notAssignableContainerIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableContainerIndexNo4.setStatus('current')
if mibBuilder.loadTexts: notAssignableContainerIndexNo4.setDescription('Adress index.')
notAssignableContainerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableContainerClassName.setStatus('current')
if mibBuilder.loadTexts: notAssignableContainerClassName.setDescription('Entity Class Name')
notAssignableContainerAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableContainerAidString.setStatus('current')
if mibBuilder.loadTexts: notAssignableContainerAidString.setDescription('Aid string of entity.')
notAssignableContainerParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableContainerParentId.setStatus('current')
if mibBuilder.loadTexts: notAssignableContainerParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
notAssignableContainerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableContainerClass.setStatus('current')
if mibBuilder.loadTexts: notAssignableContainerClass.setDescription('EntityClass')
endOfNotAssignableContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableContainerTable.setStatus('current')
if mibBuilder.loadTexts: endOfNotAssignableContainerTable.setDescription('')
notAssignableOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17), )
if mibBuilder.loadTexts: notAssignableOpticalMuxTable.setStatus('current')
if mibBuilder.loadTexts: notAssignableOpticalMuxTable.setDescription('notAssignableOpticalMux')
notAssignableOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxClassName"))
if mibBuilder.loadTexts: notAssignableOpticalMuxEntry.setStatus('current')
if mibBuilder.loadTexts: notAssignableOpticalMuxEntry.setDescription('Entry of notAssignableOpticalMux')
notAssignableOpticalMuxIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo1.setStatus('current')
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo1.setDescription('Adress index.')
notAssignableOpticalMuxIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo2.setStatus('current')
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo2.setDescription('Adress index.')
notAssignableOpticalMuxIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo3.setStatus('current')
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo3.setDescription('Adress index.')
notAssignableOpticalMuxIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo4.setStatus('current')
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo4.setDescription('Adress index.')
notAssignableOpticalMuxClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableOpticalMuxClassName.setStatus('current')
if mibBuilder.loadTexts: notAssignableOpticalMuxClassName.setDescription('Entity Class Name')
notAssignableOpticalMuxAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOpticalMuxAidString.setStatus('current')
if mibBuilder.loadTexts: notAssignableOpticalMuxAidString.setDescription('Aid string of entity.')
notAssignableOpticalMuxParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOpticalMuxParentId.setStatus('current')
if mibBuilder.loadTexts: notAssignableOpticalMuxParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
notAssignableOpticalMuxClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOpticalMuxClass.setStatus('current')
if mibBuilder.loadTexts: notAssignableOpticalMuxClass.setDescription('EntityClass')
endOfNotAssignableOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableOpticalMuxTable.setStatus('current')
if mibBuilder.loadTexts: endOfNotAssignableOpticalMuxTable.setDescription('')
notAssignableShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20), )
if mibBuilder.loadTexts: notAssignableShelfConnTable.setStatus('current')
if mibBuilder.loadTexts: notAssignableShelfConnTable.setDescription('notAssignableShelfConn')
notAssignableShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableShelfConnIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableShelfConnIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableShelfConnIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableShelfConnIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableShelfConnClassName"))
if mibBuilder.loadTexts: notAssignableShelfConnEntry.setStatus('current')
if mibBuilder.loadTexts: notAssignableShelfConnEntry.setDescription('Entry of notAssignableShelfConn')
notAssignableShelfConnIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo1.setStatus('current')
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo1.setDescription('Adress index.')
notAssignableShelfConnIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo2.setStatus('current')
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo2.setDescription('Adress index.')
notAssignableShelfConnIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo3.setStatus('current')
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo3.setDescription('Adress index.')
notAssignableShelfConnIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo4.setStatus('current')
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo4.setDescription('Adress index.')
notAssignableShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableShelfConnClassName.setStatus('current')
if mibBuilder.loadTexts: notAssignableShelfConnClassName.setDescription('Entity Class Name')
notAssignableShelfConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableShelfConnAidString.setStatus('current')
if mibBuilder.loadTexts: notAssignableShelfConnAidString.setDescription('Aid string of entity.')
notAssignableShelfConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableShelfConnParentId.setStatus('current')
if mibBuilder.loadTexts: notAssignableShelfConnParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
notAssignableShelfConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableShelfConnClass.setStatus('current')
if mibBuilder.loadTexts: notAssignableShelfConnClass.setDescription('EntityClass')
endOfNotAssignableShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableShelfConnTable.setStatus('current')
if mibBuilder.loadTexts: endOfNotAssignableShelfConnTable.setDescription('')
endOfNotAssignables = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignables.setStatus('current')
if mibBuilder.loadTexts: endOfNotAssignables.setDescription('')
advaInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1), )
if mibBuilder.loadTexts: advaInventoryTable.setStatus('current')
if mibBuilder.loadTexts: advaInventoryTable.setDescription('This table lists all physically present (equipped) equipment in the NE')
advaInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "advaInventoryShelfNo"), (0, "ADVA-FSPR7-MIB", "advaInventorySlotNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryPortNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryExtNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryClassName"))
if mibBuilder.loadTexts: advaInventoryEntry.setStatus('current')
if mibBuilder.loadTexts: advaInventoryEntry.setDescription('')
advaInventoryShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: advaInventoryShelfNo.setStatus('current')
if mibBuilder.loadTexts: advaInventoryShelfNo.setDescription('Adress index.')
advaInventorySlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: advaInventorySlotNo.setStatus('current')
if mibBuilder.loadTexts: advaInventorySlotNo.setDescription('Adress index.')
advaInventoryPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: advaInventoryPortNo.setStatus('current')
if mibBuilder.loadTexts: advaInventoryPortNo.setDescription('Adress index.')
advaInventoryExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: advaInventoryExtNo.setStatus('current')
if mibBuilder.loadTexts: advaInventoryExtNo.setDescription('Adress index.')
advaInventoryClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: advaInventoryClassName.setStatus('current')
if mibBuilder.loadTexts: advaInventoryClassName.setDescription('Entity Class Name.')
advaInventoryAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryAidString.setStatus('current')
if mibBuilder.loadTexts: advaInventoryAidString.setDescription('Aid string of entity.')
advaInventoryUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryUnitName.setStatus('current')
if mibBuilder.loadTexts: advaInventoryUnitName.setDescription('ADVA Official Equipment Name')
advaInventoryFirmwarePackageRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryFirmwarePackageRev.setStatus('current')
if mibBuilder.loadTexts: advaInventoryFirmwarePackageRev.setDescription('Firmware Package Revision Number')
advaInventoryHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryHardwareRev.setStatus('current')
if mibBuilder.loadTexts: advaInventoryHardwareRev.setDescription('Equipment Revision Number')
advaInventorySoftwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventorySoftwareRev.setStatus('current')
if mibBuilder.loadTexts: advaInventorySoftwareRev.setDescription('The active Application software version on the unit/module.')
advaInventoryFpgaRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryFpgaRev.setStatus('current')
if mibBuilder.loadTexts: advaInventoryFpgaRev.setDescription('The active FPGA version on the unit/module.')
advaInventorySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventorySerialNum.setStatus('current')
if mibBuilder.loadTexts: advaInventorySerialNum.setDescription('Equipment Serial Number')
advaInventoryPartnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryPartnumber.setStatus('current')
if mibBuilder.loadTexts: advaInventoryPartnumber.setDescription('ADVA Part Number')
advaInventoryCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryCleiCode.setStatus('current')
if mibBuilder.loadTexts: advaInventoryCleiCode.setDescription('Common Language Equipment Identifier')
advaInventoryVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryVendorId.setStatus('current')
if mibBuilder.loadTexts: advaInventoryVendorId.setDescription('OEM Vendor Code')
advaInventoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 16), EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryType.setStatus('current')
if mibBuilder.loadTexts: advaInventoryType.setDescription('Type of a physical entity: shelf/module/plug')
advaInventoryUniversalSerialIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryUniversalSerialIdent.setStatus('current')
if mibBuilder.loadTexts: advaInventoryUniversalSerialIdent.setDescription('Unique Serial Identifier')
advaInventoryGradeInventory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 18), Grade()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryGradeInventory.setStatus('current')
if mibBuilder.loadTexts: advaInventoryGradeInventory.setDescription('Used to distinguish between NCU capabilities (range of supported services or applications)')
advaInventoryClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 19), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryClass.setStatus('current')
if mibBuilder.loadTexts: advaInventoryClass.setDescription('Entity Class')
advaInventoryInventoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryInventoryDescription.setStatus('current')
if mibBuilder.loadTexts: advaInventoryInventoryDescription.setDescription('Description string of capability level reported by hw')
advaInventoryCapabilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 21), FspR7CapInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryCapabilityLevel.setStatus('current')
if mibBuilder.loadTexts: advaInventoryCapabilityLevel.setDescription('Capability level reported by HW')
advaInventoryCfSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryCfSerialNum.setStatus('current')
if mibBuilder.loadTexts: advaInventoryCfSerialNum.setDescription('Compact Flash Serial Number')
advaInventoryCfModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 23), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryCfModel.setStatus('current')
if mibBuilder.loadTexts: advaInventoryCfModel.setDescription('Compact Flash Model Number')
unassignedInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2), )
if mibBuilder.loadTexts: unassignedInventoryTable.setStatus('current')
if mibBuilder.loadTexts: unassignedInventoryTable.setDescription('')
unassignedInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "advaInventoryShelfNo"), (0, "ADVA-FSPR7-MIB", "advaInventorySlotNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryPortNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryExtNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryClassName"))
if mibBuilder.loadTexts: unassignedInventoryEntry.setStatus('current')
if mibBuilder.loadTexts: unassignedInventoryEntry.setDescription('')
unassignedInventoryAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryAidString.setStatus('current')
if mibBuilder.loadTexts: unassignedInventoryAidString.setDescription('Aid string of entity.')
unassignedInventoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 2), EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryType.setStatus('current')
if mibBuilder.loadTexts: unassignedInventoryType.setDescription('Type of a physical entity: shelf/module/plug')
unassignedInventoryParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryParentId.setStatus('current')
if mibBuilder.loadTexts: unassignedInventoryParentId.setDescription('RowPointer to parent entity reported in corresponding entity table.')
unassignedInventoryClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 4), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryClass.setStatus('current')
if mibBuilder.loadTexts: unassignedInventoryClass.setDescription('Entity Class')
unassignedInventoryAssignState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 5), FspR7EquipmentAssignState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryAssignState.setStatus('current')
if mibBuilder.loadTexts: unassignedInventoryAssignState.setDescription('Assignment state of entity.')
unassignedInventoryOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryOneIndex.setStatus('current')
if mibBuilder.loadTexts: unassignedInventoryOneIndex.setDescription('One Index Aid representation')
unassignedInventoryTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryTableId.setStatus('current')
if mibBuilder.loadTexts: unassignedInventoryTableId.setDescription('RowPointer to managment table of entity.')
unassignedInventoryMtosiParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryMtosiParentId.setStatus('current')
if mibBuilder.loadTexts: unassignedInventoryMtosiParentId.setDescription('')
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", packetFiltering=packetFiltering, entitySysEquipmentState=entitySysEquipmentState, virtualPortLagPorts=virtualPortLagPorts, physicalPortTraceRcvOpspTcmb=physicalPortTraceRcvOpspTcmb, containerLinkParentId=containerLinkParentId, moduleConnector=moduleConnector, alarmShelfConnSeverity=alarmShelfConnSeverity, ipv6ActRoutesMetric=ipv6ActRoutesMetric, containerCrsOptLineTable=containerCrsOptLineTable, licenseManagerLicenseFilesInstall=licenseManagerLicenseFilesInstall, alarmHdSystemTable=alarmHdSystemTable, linkDeadInterval=linkDeadInterval, virtualPortDataLayerPmReset=virtualPortDataLayerPmReset, opticalLineTransmitFrequency=opticalLineTransmitFrequency, alarmQualityFactorTooLow=alarmQualityFactorTooLow, entityDcnEntry=entityDcnEntry, advaInventoryGradeInventory=advaInventoryGradeInventory, containerFfpEntry=containerFfpEntry, virtualPortFunction=virtualPortFunction, pmSnapshotCurrentOscGain=pmSnapshotCurrentOscGain, advaInventoryCfSerialNum=advaInventoryCfSerialNum, entityConnectionClass=entityConnectionClass, dependentIndexNo1=dependentIndexNo1, advaInventoryPartnumber=advaInventoryPartnumber, alarmAseTableNotAvailable=alarmAseTableNotAvailable, notAssignableEnvTable=notAssignableEnvTable, optThresholdConfigLowFixed=optThresholdConfigLowFixed, containerCrossDcnClass=containerCrossDcnClass, advaInventoryHardwareRev=advaInventoryHardwareRev, containerExternalOmClass=containerExternalOmClass, physicalPortForceLaserOn=physicalPortForceLaserOn, lldpManagementAddress=lldpManagementAddress, alarmSeverityHdSystemType=alarmSeverityHdSystemType, downwardEnvChildId=downwardEnvChildId, notAssignableEnvClassName=notAssignableEnvClassName, alarmThres15MinExceededOduTcmCUAS=alarmThres15MinExceededOduTcmCUAS, moduleAvlMapCapDown=moduleAvlMapCapDown, entityFacilityParentId=entityFacilityParentId, alarmAutoShutdownSendingAisLine=alarmAutoShutdownSendingAisLine, notAssignableExternalPortIndexNo4=notAssignableExternalPortIndexNo4, alarmFacilityEntry=alarmFacilityEntry, alarmSeverityEnvValue=alarmSeverityEnvValue, ffpWaitToRestore=ffpWaitToRestore, pmSnapshotHistoricalTerminPointEntry=pmSnapshotHistoricalTerminPointEntry, containerHdSystemAidString=containerHdSystemAidString, ipv6PrefixLen=ipv6PrefixLen, containerEthTable=containerEthTable, entityCrossDcnExtNo=entityCrossDcnExtNo, shelfMaxPowerConsumption=shelfMaxPowerConsumption, virtualPortAutosrvLock=virtualPortAutosrvLock, entityDcnTableId=entityDcnTableId, alarmPrbsTrmtActivated=alarmPrbsTrmtActivated, physicalPortProtectionRole=physicalPortProtectionRole, alarmShelfConnEntry=alarmShelfConnEntry, activeUsersEntry=activeUsersEntry, virtualPortTimModeOduTcmB=virtualPortTimModeOduTcmB, fanMaxPowerConsumption=fanMaxPowerConsumption, virtualPortPortMode=virtualPortPortMode, physicalPortSigDegPeriodOtu=physicalPortSigDegPeriodOtu, whitelistIpMask=whitelistIpMask, moduleInternalPlugsReach=moduleInternalPlugsReach, lanDhcpServer=lanDhcpServer, containerFanEntry=containerFanEntry, alarmThres15MinExceededFecES=alarmThres15MinExceededFecES, opticalMuxMaxRamanGainMon=opticalMuxMaxRamanGainMon, containerOtlgTableId=containerOtlgTableId, containerOtlgEntry=containerOtlgEntry, terminationPointChannel=terminationPointChannel, containerOmAidString=containerOmAidString, virtualPortTable=virtualPortTable, downwardShelfConnIndex=downwardShelfConnIndex, notAssignableContainerIndexNo2=notAssignableContainerIndexNo2, scValidSigTimer=scValidSigTimer, containerExternalVchAidString=containerExternalVchAidString, changePhysicalPortServiceTxOffTimer=changePhysicalPortServiceTxOffTimer, authTrapStatus=authTrapStatus, alarmOpenConnectionIndicationOduTcmC=alarmOpenConnectionIndicationOduTcmC, virtualPortInhibitSwitchToProt=virtualPortInhibitSwitchToProt, alarmEquipmentNotAccepted=alarmEquipmentNotAccepted, alarmThres15MinExceededOduUAS=alarmThres15MinExceededOduUAS, containerConnectNonStdFromIndexNo2=containerConnectNonStdFromIndexNo2, channelTracesFromAid=channelTracesFromAid, shelfRackOrder=shelfRackOrder, containerVch1AidString=containerVch1AidString, communityIpMask=communityIpMask, virtualPortEqlzAdmin=virtualPortEqlzAdmin, virtualPortTrafficDirection=virtualPortTrafficDirection, alarmMidstageFault=alarmMidstageFault, pmSnapshotHistoricalTimeStamp=pmSnapshotHistoricalTimeStamp, entityFfpClass=entityFfpClass, opticalLineSecondaryStates=opticalLineSecondaryStates, neCommandFile=neCommandFile, alarmDsbdChannelPowerTooHigh=alarmDsbdChannelPowerTooHigh, shelfBandProvision=shelfBandProvision, containerCrsOptLineAidString=containerCrsOptLineAidString, alarmSysTable=alarmSysTable, containerCrsOptLineToIndexNo4=containerCrsOptLineToIndexNo4, oprThresholdConfigEntry=oprThresholdConfigEntry, entityEqptMtosiParentId=entityEqptMtosiParentId, physicalPortSigDegThresOdu=physicalPortSigDegThresOdu, alarmLossOfFrame=alarmLossOfFrame, physicalPortTraceRcvOpspTcmc=physicalPortTraceRcvOpspTcmc, shelfEntry=shelfEntry, physicalPortLaserOffTimer=physicalPortLaserOffTimer, moduleAvlndpAdapt2970Rxcrs=moduleAvlndpAdapt2970Rxcrs, fspR7AuthenticationNotificationSummary=fspR7AuthenticationNotificationSummary, changePhysicalPortServiceSignalDegradePeriod=changePhysicalPortServiceSignalDegradePeriod, moduleAvlndpF2967Txcrs=moduleAvlndpF2967Txcrs, alarmLossofTandemConnectionOduTcmA=alarmLossofTandemConnectionOduTcmA, containerVch1ClassName=containerVch1ClassName, entityConnectionFromId=entityConnectionFromId, crossConnectionRowStatus=crossConnectionRowStatus, opticalMuxTransmitWavelength=opticalMuxTransmitWavelength, downwardFacilityEntry=downwardFacilityEntry, physicalPortLaserDelayTimer=physicalPortLaserDelayTimer, opticalMuxTable=opticalMuxTable, notAssignableFacilityClass=notAssignableFacilityClass, hdSystemEntry=hdSystemEntry, transientThres1DayExceededPhysConvES=transientThres1DayExceededPhysConvES, ffpEntry=ffpEntry, containerModParentId=containerModParentId, containerCrossConnFromPointSlotNo=containerCrossConnFromPointSlotNo, alarmAutoShutdownTxRxLasersDueToHighTemp=alarmAutoShutdownTxRxLasersDueToHighTemp, userManagementSnmpTimeoutValue=userManagementSnmpTimeoutValue, downwardContainerChildId=downwardContainerChildId, alarmThres15MinExceededCrcFramesEgress=alarmThres15MinExceededCrcFramesEgress, alarmSeverityHdSystemValue=alarmSeverityHdSystemValue, opticalMuxOperState=opticalMuxOperState, shelfConnReach=shelfConnReach, entityExternalPortParentId=entityExternalPortParentId, entityTerminPointPortClass=entityTerminPointPortClass, endOfScTable=endOfScTable, endOfDownwardTerminPointTable=endOfDownwardTerminPointTable, endOfFfpTable=endOfFfpTable, entityOptLineAidString=entityOptLineAidString, moduleChannelsNumber=moduleChannelsNumber, terminationPointReach=terminationPointReach, changePhysicalPortServiceTraceTransmitOpspOdu=changePhysicalPortServiceTraceTransmitOpspOdu, alarmSeverityNtpIPv6Type=alarmSeverityNtpIPv6Type, scIpMaskMonitor=scIpMaskMonitor, notAssignableEnvIndexNo4=notAssignableEnvIndexNo4, ipv6ActRoutesPort=ipv6ActRoutesPort, containerOwlgIndexNo4=containerOwlgIndexNo4, alarmAmplifierAbnormal=alarmAmplifierAbnormal, changePhysicalPortServiceTraceTransmitDapiOduTcmC=changePhysicalPortServiceTraceTransmitDapiOduTcmC, scFarEndSigDegThres=scFarEndSigDegThres, alarmUnequippedLowerOrderPath=alarmUnequippedLowerOrderPath, physicalPortTraceTransmitDapiOtu=physicalPortTraceTransmitDapiOtu, containerWchEntry=containerWchEntry, entityFilterCableIndex3=entityFilterCableIndex3, physicalPortGropticsType=physicalPortGropticsType, externalPortType=externalPortType, userManagementPasswordExpirationDate=userManagementPasswordExpirationDate, endOfAlarm=endOfAlarm, upwardOpticalMuxEntry=upwardOpticalMuxEntry, lanAreaAid=lanAreaAid, physicalPortFarEndProtectionState=physicalPortFarEndProtectionState, alarmFarEndCommFailure=alarmFarEndCommFailure, containerConnectNonStdToIndexNo1=containerConnectNonStdToIndexNo1, fanFanPorts=fanFanPorts, endOfLinkTable=endOfLinkTable, physicalPortTraceExpectedOtu=physicalPortTraceExpectedOtu, virtualPortSigDegThresOduTcmA=virtualPortSigDegThresOduTcmA, alarmDatabaseMismatch=alarmDatabaseMismatch, changePhysicalPortServiceLaserOffDelayFunction=changePhysicalPortServiceLaserOffDelayFunction, shelfUpgradePorts=shelfUpgradePorts, notAssignableExternalPortEntry=notAssignableExternalPortEntry, haSwitchToDuplex=haSwitchToDuplex, licenseLicenseCountAvailable=licenseLicenseCountAvailable, scAutonegotiation=scAutonegotiation, containerVschTableId=containerVschTableId, physicalPortTraceRcvDapiTcma=physicalPortTraceRcvDapiTcma, plugEntry=plugEntry, whitelistRowStatus=whitelistRowStatus, alarmSeveritySysValue=alarmSeveritySysValue, shelfConnTransmitChannel=shelfConnTransmitChannel, fileDataSize=fileDataSize, containerHdSystemClass=containerHdSystemClass, entityCrsOptLineFromClassName=entityCrsOptLineFromClassName, plugLaneGroup=plugLaneGroup, scDhcpStopAddr=scDhcpStopAddr, transientThres1DayExceededPhysConvCV=transientThres1DayExceededPhysConvCV, physicalPortTurnupConfig=physicalPortTurnupConfig, entityConnectionClassName=entityConnectionClassName, neCommand=neCommand, externalVchFrameFormat=externalVchFrameFormat, notAssignableEqptTable=notAssignableEqptTable, opticalLineAlias=opticalLineAlias, containerChShelfNo=containerChShelfNo, changePhysicalPortServiceTraceTransmitDapiOduTcmB=changePhysicalPortServiceTraceTransmitDapiOduTcmB, entityFilterCableIndex1=entityFilterCableIndex1, containerShelfmapAidString=containerShelfmapAidString, plugSecondaryStates=plugSecondaryStates, alarmLossOfAlignment=alarmLossOfAlignment, fileDataArea=fileDataArea, alarmLicenseManagerTable=alarmLicenseManagerTable, alarmThres15MinExceededOduTcmBBbe=alarmThres15MinExceededOduTcmBBbe, physicalPortAutoThresReset=physicalPortAutoThresReset, physicalPortLLDPNeighborsRx=physicalPortLLDPNeighborsRx, timeoutConf=timeoutConf, advaInventoryUnitName=advaInventoryUnitName, containerConnectStdClassName=containerConnectStdClassName, sdnInterface=sdnInterface, opticalLineLaneChannel2=opticalLineLaneChannel2, restConf=restConf, containerPchShelfNo=containerPchShelfNo, alarmLossOfCharSyncFromFarEnd=alarmLossOfCharSyncFromFarEnd, alarmEncryptionModuleSelfTestFail=alarmEncryptionModuleSelfTestFail, alarmChannelMismatchRx=alarmChannelMismatchRx, ipv6ActRoutesExtNo=ipv6ActRoutesExtNo, entityMtosiSlotsClassName=entityMtosiSlotsClassName, syslogIPv4RowStatus=syslogIPv4RowStatus, envPortTifAlarmMessage=envPortTifAlarmMessage, containerShelfConnShelfNo=containerShelfConnShelfNo, transientThres1DayExceededOduTcmBBbe=transientThres1DayExceededOduTcmBBbe, virtualPortTraceRcvSapiTcma=virtualPortTraceRcvSapiTcma, containerVomSlotNo=containerVomSlotNo, containerWchTableId=containerWchTableId, opticalMuxBandProvision=opticalMuxBandProvision, ntpIPv4OperState=ntpIPv4OperState, containerCrsOptLineFromPointIndexNo4=containerCrsOptLineFromPointIndexNo4, fanAlias=fanAlias, alarmThresOptPowerCtrlFailureLow=alarmThresOptPowerCtrlFailureLow, notAssignableOptLineClassName=notAssignableOptLineClassName, containerConnectStdFromIndexNo3=containerConnectStdFromIndexNo3, alarmLoopbackError=alarmLoopbackError, externalPortConnectionState=externalPortConnectionState, downwardTerminPointTable=downwardTerminPointTable, alarmUPortFailure=alarmUPortFailure, alarmLossOfOverhead=alarmLossOfOverhead, alarmLicenseServerDisconnected=alarmLicenseServerDisconnected, alarmHwDegrade=alarmHwDegrade, knownHostIPv6FingerPrint=knownHostIPv6FingerPrint, unassignedInventoryMtosiParentId=unassignedInventoryMtosiParentId, alarmSeverityOpticalMuxEntry=alarmSeverityOpticalMuxEntry, virtualPortTraceTransmitSapiOduTcmC=virtualPortTraceTransmitSapiOduTcmC, transientThres1DayExceededSonetLineSES=transientThres1DayExceededSonetLineSES, downwardOptLineExtNo=downwardOptLineExtNo, moduleAvlndpF1483Rxcrs=moduleAvlndpF1483Rxcrs, physicalPortWdmRxChannel=physicalPortWdmRxChannel, entityFilterCableEntry=entityFilterCableEntry, virtualPortOtnStuffing=virtualPortOtnStuffing, virtualPortCirRcv=virtualPortCirRcv, opticalLineLaneChannel4=opticalLineLaneChannel4, fspR7AuthenticationNotification=fspR7AuthenticationNotification, alarmSeverityLicenseManagerTable=alarmSeverityLicenseManagerTable, downwardTerminPointIndexNo3=downwardTerminPointIndexNo3, entityCrossConnClass=entityCrossConnClass, lanDhcpMask=lanDhcpMask, shelfConnValidSigTimer=shelfConnValidSigTimer, containerExternalVchExtNo=containerExternalVchExtNo, ipv6ActRoutesEntry=ipv6ActRoutesEntry, transientThres1DayExceededSonetSectES=transientThres1DayExceededSonetSectES, containerScExtNo=containerScExtNo)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", opticalMuxAlsMode=opticalMuxAlsMode, alarmAttOnReceiverFiberLowerThanMonitor=alarmAttOnReceiverFiberLowerThanMonitor, oprIntervalPm15minNumber=oprIntervalPm15minNumber, physicalPortStagType=physicalPortStagType, physicalPortTimModeOduTcmB=physicalPortTimModeOduTcmB, containerVch1Table=containerVch1Table, entityEnvTableId=entityEnvTableId, alarmSeverityShelfmapTable=alarmSeverityShelfmapTable, userManagementRowStatus=userManagementRowStatus, crossOpticalLineSecondaryStates=crossOpticalLineSecondaryStates, containerVchClass=containerVchClass, alarmCommunicationLoss=alarmCommunicationLoss, whitelistId=whitelistId, virtualSessionTable=virtualSessionTable, optIntervalPm1dayTable=optIntervalPm1dayTable, alarmBackwardDefectIndicationOduTcmB=alarmBackwardDefectIndicationOduTcmB, alarmRoundTripDelayTooLow=alarmRoundTripDelayTooLow, ratBlockingElementId=ratBlockingElementId, autoRestartCount=autoRestartCount, virtualPortCir=virtualPortCir, entitySysType=entitySysType, alarmClientFailForwarding=alarmClientFailForwarding, physicalPortChannelPlan=physicalPortChannelPlan, virtualPortEntry=virtualPortEntry, endOfUpwardEqptTable=endOfUpwardEqptTable, moduleChannelRangeProvision=moduleChannelRangeProvision, privilegeChangeAction=privilegeChangeAction, containerCrossConnClassName=containerCrossConnClassName, changePhysicalPortServiceSigDegThresOduTcmA=changePhysicalPortServiceSigDegThresOduTcmA, upwardShelfConnIndex=upwardShelfConnIndex, advaInventoryShelfNo=advaInventoryShelfNo, entityFilterCableIndex2=entityFilterCableIndex2, entityFfpTableId=entityFfpTableId, pmSnapshotHistoricalEntry=pmSnapshotHistoricalEntry, ipv6ActRoutesShelfNo=ipv6ActRoutesShelfNo, moduleInitEqlz=moduleInitEqlz, alarmPayloadMismatchGfp=alarmPayloadMismatchGfp, trapSinkRowStatus=trapSinkRowStatus, entitySysClassName=entitySysClassName, entityCrossConnToPortNo=entityCrossConnToPortNo, endOfEccTable=endOfEccTable, transientDelayMeasurementCompleted=transientDelayMeasurementCompleted, entityDcnExtNo=entityDcnExtNo, sslValidityPeriod=sslValidityPeriod, changePhysicalPortServiceAlias=changePhysicalPortServiceAlias, hdSystemDcnAid=hdSystemDcnAid, entityEqptOneIndex=entityEqptOneIndex, virtualPortTraceRcvOpspTcmc=virtualPortTraceRcvOpspTcmc, transientThres1DayExceededFecBERCE=transientThres1DayExceededFecBERCE, notAssignableDcnIndexNo3=notAssignableDcnIndexNo3, alarmOosDisabled=alarmOosDisabled, transientMpDeleted=transientMpDeleted, physicalPortTraceTransmitSapiOduTcmC=physicalPortTraceTransmitSapiOduTcmC, ffpRowStatus=ffpRowStatus, upwardEqptShelfNo=upwardEqptShelfNo, notAssignableShelfConnClass=notAssignableShelfConnClass, physicalPortTraceRcvDapiTcmc=physicalPortTraceRcvDapiTcmc, containerCrsOptLineFromPointAidString=containerCrsOptLineFromPointAidString, opticalMuxSigDegThresReceiver=opticalMuxSigDegThresReceiver, alarmProfileSeverityType=alarmProfileSeverityType, scReach=scReach, transientPmSnapshotStarted=transientPmSnapshotStarted, terminationPointOper=terminationPointOper, entityOptLineParentId=entityOptLineParentId, changePhysicalPortServiceFarEndCommunication=changePhysicalPortServiceFarEndCommunication, lanType=lanType, alarmSignalDegradeOduTcmB=alarmSignalDegradeOduTcmB, notAssignableContainerParentId=notAssignableContainerParentId, containerChSlotNo=containerChSlotNo, plugAlias=plugAlias, opticalLineTxLineAttenuation=opticalLineTxLineAttenuation, alarmVirtualChannelAis=alarmVirtualChannelAis, physicalPortOduMultiplexStructure=physicalPortOduMultiplexStructure, containerEccEntry=containerEccEntry, alarmDcnSeverity=alarmDcnSeverity, fspR7TrapSinkDeletion=fspR7TrapSinkDeletion, changePhysicalPortServiceTraceFormSonetSection=changePhysicalPortServiceTraceFormSonetSection, physicalPortBitrate=physicalPortBitrate, virtualPortChannelProv=virtualPortChannelProv, entityCrossConnEntry=entityCrossConnEntry, advaInventorySoftwareRev=advaInventorySoftwareRev, lanIpAddr=lanIpAddr, moduleLanPorts=moduleLanPorts, lanAuthString=lanAuthString, terminationPointEntry=terminationPointEntry, alarmHdSystemAffect=alarmHdSystemAffect, opticalMuxVariableGain=opticalMuxVariableGain, shelfmapOperState=shelfmapOperState, optThresholdConfigTable=optThresholdConfigTable, changePhysicalPortServiceDispersionMode=changePhysicalPortServiceDispersionMode, endOfFilterCableTable=endOfFilterCableTable, containerOtlgParentId=containerOtlgParentId, alarmSeverityTerminPointValue=alarmSeverityTerminPointValue, changePhysicalPortServiceTxOffDelay=changePhysicalPortServiceTxOffDelay, userManagementAuthPrivKey=userManagementAuthPrivKey, endOfOpticalMuxMgmt=endOfOpticalMuxMgmt, alarmEqptAffect=alarmEqptAffect, transientEqlzCompleted=transientEqlzCompleted, alarmConfOutPowerTransTooLow=alarmConfOutPowerTransTooLow, unassignedInventoryAidString=unassignedInventoryAidString, physicalPortSigDegThresOduTcmA=physicalPortSigDegThresOduTcmA, downwardShelfConnEntry=downwardShelfConnEntry, alarmEncryptionPortMaxKeyExchgFailuresReachedOos=alarmEncryptionPortMaxKeyExchgFailuresReachedOos, ffpProtectionAid=ffpProtectionAid, alarmFacilityType=alarmFacilityType, externalPortMaxPmdRcv=externalPortMaxPmdRcv, authTrapSessionId=authTrapSessionId, licenseLicenseCountUsed=licenseLicenseCountUsed, linkFendIPv6=linkFendIPv6, ipv6InActRoutesPort=ipv6InActRoutesPort, alarmLossOfSignal=alarmLossOfSignal, upwardEqptIndex=upwardEqptIndex, containerCrsOptLineFromPointEntry=containerCrsOptLineFromPointEntry, physicalPortLinkSetup=physicalPortLinkSetup, physicalPortTimModeOduTcmA=physicalPortTimModeOduTcmA, externalPortFrameFormat=externalPortFrameFormat, physicalPortCodeGain=physicalPortCodeGain, endOfDownwardEqptTable=endOfDownwardEqptTable, moduleInternalPlugs=moduleInternalPlugs, physicalPortIngressTid=physicalPortIngressTid, alarmNtpIPv6TimeStamp=alarmNtpIPv6TimeStamp, physicalPortPortRole=physicalPortPortRole, externalPortFecType=externalPortFecType, entityTerminPointIndexNo2=entityTerminPointIndexNo2, transientDispersionCompFailed=transientDispersionCompFailed, entityProtectionCableEntry=entityProtectionCableEntry, alarmOosManagement=alarmOosManagement, containerCrossConnFromPointAidString=containerCrossConnFromPointAidString, dependentAid=dependentAid, alarmServerSignalFailureODU=alarmServerSignalFailureODU, physicalPortLaserOffDelayFunction=physicalPortLaserOffDelayFunction, changePhysicalPortServiceBehaviour=changePhysicalPortServiceBehaviour, transientThres1DayExceededOduES=transientThres1DayExceededOduES, alarmSeverityLicenseManagerValue=alarmSeverityLicenseManagerValue, containerScClass=containerScClass, physicalPortSigDegThresSonetSection=physicalPortSigDegThresSonetSection, virtualPortOpuPayloadType=virtualPortOpuPayloadType, licenseTable=licenseTable, userManagementFailedLoginAttempts=userManagementFailedLoginAttempts, shelfAdmin=shelfAdmin, ratTo=ratTo, physicalPortTributaryFreeSlotNo=physicalPortTributaryFreeSlotNo, shelfmapParentId=shelfmapParentId, moduleOperState=moduleOperState, entityCrossConnParentId=entityCrossConnParentId, lldpLLDPLocation=lldpLLDPLocation, scFarEndTid=scFarEndTid, containerExternalOmClassName=containerExternalOmClassName, containerCrsOptLineFromPointIndexNo1=containerCrsOptLineFromPointIndexNo1, alarmHdSystemSeverity=alarmHdSystemSeverity, containerExternalOmPortNo=containerExternalOmPortNo, moduleAvlndpF1483Txcrs=moduleAvlndpF1483Txcrs, alarmPumpLaser1TempTooLow=alarmPumpLaser1TempTooLow, notAssignableDcnAidString=notAssignableDcnAidString, scIpMode=scIpMode, scBitrate=scBitrate, notAssignableEnvClass=notAssignableEnvClass, facilityReferByTerminPoint=facilityReferByTerminPoint, entityOptLineIndexNo2=entityOptLineIndexNo2, endOfAlarmProfile=endOfAlarmProfile, physicalPortPrbsPmReset=physicalPortPrbsPmReset, scFarEndPort=scFarEndPort, upwardExternalPortIndex=upwardExternalPortIndex, envPortTifAlarmType=envPortTifAlarmType, virtualPortPortRole=virtualPortPortRole, licenseParentId=licenseParentId, virtualPortLambda=virtualPortLambda, entityFfpType=entityFfpType, alarmLaserTemperatureTooHigh=alarmLaserTemperatureTooHigh, containerLanShelfNo=containerLanShelfNo, containerCrossConnTable=containerCrossConnTable, virtualPortLoopConfig=virtualPortLoopConfig, channelTracesChannelTx=channelTracesChannelTx, ffpApsFarEndModule=ffpApsFarEndModule, virtualPortTcmALevel=virtualPortTcmALevel, notAssignableFacilityParentId=notAssignableFacilityParentId, entityEnvPortNo=entityEnvPortNo, alarmAlarmIndicationSignalLowerOrderPath=alarmAlarmIndicationSignalLowerOrderPath, transientInstallFwpCompleted=transientInstallFwpCompleted, containerScTable=containerScTable, containerScAidString=containerScAidString, entityContainerType=entityContainerType, containerShelfEntry=containerShelfEntry, entityConnectionParentId=entityConnectionParentId, opticalLineConnState=opticalLineConnState, downwardFacilitySlotNo=downwardFacilitySlotNo, ratAnalyzerChannelTx=ratAnalyzerChannelTx, fileDataEntry=fileDataEntry, notAssignableFacilityAidString=notAssignableFacilityAidString, physicalPortAlias=physicalPortAlias, scIPv6PrefixLen=scIPv6PrefixLen, downwardTerminPointIndexNo2=downwardTerminPointIndexNo2, containerVchShelfNo=containerVchShelfNo, containerExternalOmAidString=containerExternalOmAidString, ratBlockingType=ratBlockingType, physicalPortTraceRcvOpspOdu=physicalPortTraceRcvOpspOdu, containerShelfmapEntry=containerShelfmapEntry, opticalMuxPumpPower=opticalMuxPumpPower, containerShelfSlotNo=containerShelfSlotNo, shelfmapSerialNum=shelfmapSerialNum, licenseLicenseType=licenseLicenseType, alarmLicenseMissingMismatch=alarmLicenseMissingMismatch, alarmLossOfPRBSonaLane=alarmLossOfPRBSonaLane, containerPchEntry=containerPchEntry, opticalMuxVariableGainRtoN=opticalMuxVariableGainRtoN, entityTerminPointClass=entityTerminPointClass, virtualPortTraceRcvOpspTcmb=virtualPortTraceRcvOpspTcmb, alarmDcnType=alarmDcnType, downwardContainerPortNo=downwardContainerPortNo, physicalPortTraceTransmitOpspOtu=physicalPortTraceTransmitOpspOtu, ratStartPointTableId=ratStartPointTableId, virtualPortTraceExpectedOpspOdu=virtualPortTraceExpectedOpspOdu, alarmMeaSwRevision=alarmMeaSwRevision, containerTerminPointIndexNo2=containerTerminPointIndexNo2, virtualPortTimDetModeOdu=virtualPortTimDetModeOdu, licenseManagerAdmin=licenseManagerAdmin, entityTerminPointIndexNo1=entityTerminPointIndexNo1, entityProtectionCableIndex4=entityProtectionCableIndex4, containerWchTable=containerWchTable, physicalPortEncryptionChannel=physicalPortEncryptionChannel, virtualPortTcmBLevel=virtualPortTcmBLevel, containerShelfmapTable=containerShelfmapTable, containerOtlgExtNo=containerOtlgExtNo, alarmFiberConnProtocolFailure=alarmFiberConnProtocolFailure, alarmAutoShutdownLaserOffDueToErrFwd=alarmAutoShutdownLaserOffDueToErrFwd, crossConnectionSecondaryStates=crossConnectionSecondaryStates, mpFilePointer=mpFilePointer, advaInventorySerialNum=advaInventorySerialNum, trapSinkVersion=trapSinkVersion, alarmMultiplexStructureIdentifierMismatchOPU=alarmMultiplexStructureIdentifierMismatchOPU, containerVch1TableId=containerVch1TableId, alarmLicenseServerNotConfigured=alarmLicenseServerNotConfigured, icmpAddrMask=icmpAddrMask, scMonitoredBitrate=scMonitoredBitrate, transientManualWorkingSwitchedBacktoWorking=transientManualWorkingSwitchedBacktoWorking, shelfClientPorts=shelfClientPorts, physicalPortConnState=physicalPortConnState, physicalPortTcmBLevel=physicalPortTcmBLevel, alarmDispersionCompensationTooLow=alarmDispersionCompensationTooLow, advaInventoryEntry=advaInventoryEntry, alarmFiberAttenuationHigh=alarmFiberAttenuationHigh, downwardOpticalMuxTable=downwardOpticalMuxTable, moduleAvlndpAdapt1485Rxcrs=moduleAvlndpAdapt1485Rxcrs, moduleSuppClientPlugRates=moduleSuppClientPlugRates, pmSnapshotCurrentTerminPointOutputPower=pmSnapshotCurrentTerminPointOutputPower, performance=performance, opticalLineFarEndLocation=opticalLineFarEndLocation, entityProtectionCableTableId=entityProtectionCableTableId, userManagementSecurityLevel=userManagementSecurityLevel, containerConnectStdClass=containerConnectStdClass, transientCryptoAuthPasswdInvalid=transientCryptoAuthPasswdInvalid, fanType=fanType, alarmSwitchtoWorkingInhibited=alarmSwitchtoWorkingInhibited, endOfUpwardEnvTable=endOfUpwardEnvTable)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", alarmLicenseTimeStamp=alarmLicenseTimeStamp, linkMtu=linkMtu, ratStartPointIndexNo3=ratStartPointIndexNo3, alarmSeverityFacilityEntry=alarmSeverityFacilityEntry, virtualPortLacpMode=virtualPortLacpMode, channelSpacing=channelSpacing, scIpAddr=scIpAddr, downwardExternalPortEntry=downwardExternalPortEntry, physicalPortTraceRcvSapiOdu=physicalPortTraceRcvSapiOdu, containerCrsOptLineClassName=containerCrsOptLineClassName, changePhysicalPortServiceChannelSpacing=changePhysicalPortServiceChannelSpacing, virtualPortEncapsulationMethod=virtualPortEncapsulationMethod, physicalPortLagPortNo=physicalPortLagPortNo, downwardDcnTable=downwardDcnTable, alarmGainTiltNotSettable=alarmGainTiltNotSettable, syslogIPv4DbchgReports=syslogIPv4DbchgReports, plugOperState=plugOperState, alarmDatabaseNcuMismatch=alarmDatabaseNcuMismatch, virtualPortTimModeOdu=virtualPortTimModeOdu, physicalPortChannelBandwith=physicalPortChannelBandwith, moduleWidth=moduleWidth, linkParityBit=linkParityBit, hdSystemParentId=hdSystemParentId, filterCableEntry=filterCableEntry, physicalPortTerminationLevel=physicalPortTerminationLevel, containerFfpTable=containerFfpTable, downwardContainerExtNo=downwardContainerExtNo, alarmOptSignalFailure=alarmOptSignalFailure, opticalMuxNearEndProtectionState=opticalMuxNearEndProtectionState, transientCryptoFwpUpdate=transientCryptoFwpUpdate, scMonitoredDuplexMode=scMonitoredDuplexMode, containerCrossDcnParentId=containerCrossDcnParentId, opticalLineTransmitWavelength=opticalLineTransmitWavelength, alarmEncryptionPortKeyExchangedForced=alarmEncryptionPortKeyExchangedForced, userManagementAccountFlag=userManagementAccountFlag, containerCrossConnFromClassName=containerCrossConnFromClassName, containerChExtNo=containerChExtNo, entityFacilityPortNo=entityFacilityPortNo, isolateInbandChan=isolateInbandChan, ratAnalyzerFromAid=ratAnalyzerFromAid, upwardOptLineExtNo=upwardOptLineExtNo, moduleAvlndpF2970Txcrs=moduleAvlndpF2970Txcrs, physicalPortSigDegPeriodIntegration=physicalPortSigDegPeriodIntegration, ratAnalyzerTable=ratAnalyzerTable, alarmTopologyDataCalculationInProgress=alarmTopologyDataCalculationInProgress, containerVethSlotNo=containerVethSlotNo, alarmPeerLink=alarmPeerLink, alarmRamanPumpPwrTooHigh=alarmRamanPumpPwrTooHigh, alarmAutoShutdownGAis=alarmAutoShutdownGAis, externalVchType=externalVchType, changePhysicalPortServiceType=changePhysicalPortServiceType, eccRowStatus=eccRowStatus, ipv6InActRoutesNextHopIp=ipv6InActRoutesNextHopIp, alarmEnvEntry=alarmEnvEntry, containerCrossConnFromShelfNo=containerCrossConnFromShelfNo, entityExternalPortShelfNo=entityExternalPortShelfNo, changePhysicalPortServiceTimingSource=changePhysicalPortServiceTimingSource, upwardExternalPortParentId=upwardExternalPortParentId, endOfPmSnampshot=endOfPmSnampshot, containerVomTableId=containerVomTableId, optIntervalPm15minEntry=optIntervalPm15minEntry, moduleNdpCleanup=moduleNdpCleanup, entitySysOneIndex=entitySysOneIndex, physicalPortTraceExpectedSonetSection=physicalPortTraceExpectedSonetSection, transientHardwareResetInputTIF=transientHardwareResetInputTIF, alarmCapabilityLevelMismatch=alarmCapabilityLevelMismatch, containerVethEntry=containerVethEntry, externalPortReferByTable=externalPortReferByTable, opticalMuxTiltSet=opticalMuxTiltSet, notAssignableShelfConnEntry=notAssignableShelfConnEntry, moduleSuppNetworkPlugTypes=moduleSuppNetworkPlugTypes, oprIntervalPm1weekEntry=oprIntervalPm1weekEntry, shelfmapId=shelfmapId, modulePartner4=modulePartner4, entityEqptTable=entityEqptTable, physicalPortReach=physicalPortReach, alarmPartner2Deleted=alarmPartner2Deleted, changePhysicalPortServiceFecType=changePhysicalPortServiceFecType, lldpManagementReference=lldpManagementReference, channelTracesClassName=channelTracesClassName, moduleAvlndpGbeTxcrs=moduleAvlndpGbeTxcrs, shelfSecondaryStates=shelfSecondaryStates, entityExternalPortTableId=entityExternalPortTableId, transientFwpSwitchCompleted=transientFwpSwitchCompleted, containerScEntry=containerScEntry, ratBlockingConnState=ratBlockingConnState, upwardDcnShelfNo=upwardDcnShelfNo, containerEccParentId=containerEccParentId, notAssignableShelfConnIndexNo1=notAssignableShelfConnIndexNo1, channelTracesRouteId=channelTracesRouteId, containerOlIndexNo4=containerOlIndexNo4, alarmBackwardDefectIndicationOduTcmC=alarmBackwardDefectIndicationOduTcmC, serviceAffecting=serviceAffecting, notAssignableShelfConnIndexNo3=notAssignableShelfConnIndexNo3, alarmExternalPortAffect=alarmExternalPortAffect, alarmSwitchtoProtectionInhibited=alarmSwitchtoProtectionInhibited, entityCrossDcnPortNo=entityCrossDcnPortNo, moduleAvlndpAdapt2970Txcrs=moduleAvlndpAdapt2970Txcrs, entityFfpClassName=entityFfpClassName, notAssignableFacilityEntry=notAssignableFacilityEntry, moduleAvlndpF270Txcrs=moduleAvlndpF270Txcrs, communityIPv4=communityIPv4, physicalPortOptimize=physicalPortOptimize, containerEthExtNo=containerEthExtNo, containerConnectNonStdFromIndexNo3=containerConnectNonStdFromIndexNo3, channelTracesElementId=channelTracesElementId, hdSystemSerialNumbers=hdSystemSerialNumbers, hdSystemNendLogicalIpAddr=hdSystemNendLogicalIpAddr, upwardEnvEntry=upwardEnvEntry, scDhcpMask=scDhcpMask, alarmSeverityTerminPointEntry=alarmSeverityTerminPointEntry, downwardOpticalMuxClassName=downwardOpticalMuxClassName, physicalPortSigDegPeriodSdhSection=physicalPortSigDegPeriodSdhSection, entitySysEntry=entitySysEntry, containerEthEntry=containerEthEntry, upwardTerminPointIndexNo1=upwardTerminPointIndexNo1, downwardFacilityIndex=downwardFacilityIndex, containerVch1PortNo=containerVch1PortNo, containerFfpTableId=containerFfpTableId, envMgmt=envMgmt, dcnReferByTable=dcnReferByTable, alarmRemoved=alarmRemoved, upwardOpticalMuxClassName=upwardOpticalMuxClassName, advaInventoryCleiCode=advaInventoryCleiCode, containerEthClassName=containerEthClassName, oprIntervalPm1weekValidFlag=oprIntervalPm1weekValidFlag, moduleChannelsProvision=moduleChannelsProvision, notAssignableOptLineClass=notAssignableOptLineClass, ipv6ActRoutesPortNo=ipv6ActRoutesPortNo, communityEntry=communityEntry, containerPchPortNo=containerPchPortNo, entityEnvEntry=entityEnvEntry, changePhysicalPortServiceLaneChannelSetting=changePhysicalPortServiceLaneChannelSetting, optIntervalPm1dayNumber=optIntervalPm1dayNumber, alarmOosDisabledLckOduRx=alarmOosDisabledLckOduRx, moduleAvlndpF1485Txcrs=moduleAvlndpF1485Txcrs, containerConnectStdToIndexNo2=containerConnectStdToIndexNo2, physicalPortTimModeOduTcmC=physicalPortTimModeOduTcmC, containerCrsOptLineFromPointParentId=containerCrsOptLineFromPointParentId, shelfFiberType=shelfFiberType, virtualPortSwitchCommand=virtualPortSwitchCommand, entityFacilityTable=entityFacilityTable, endOfNeMgmt=endOfNeMgmt, alarmOptOutputPowerTransTooHigh=alarmOptOutputPowerTransTooHigh, containerFfpPortNo=containerFfpPortNo, entityEnvClass=entityEnvClass, alarmHwOprReachedHT=alarmHwOprReachedHT, alarmInputVoltageFailurePort1=alarmInputVoltageFailurePort1, opticalMuxOffset=opticalMuxOffset, downwardOpticalMuxSlotNo=downwardOpticalMuxSlotNo, opticalMuxValidSigTimer=opticalMuxValidSigTimer, alarmLinkFailToPartner1=alarmLinkFailToPartner1, notAssignableContainerAidString=notAssignableContainerAidString, trapSinkTable=trapSinkTable, protectionCableTable=protectionCableTable, opticalMuxPpc=opticalMuxPpc, upwardFacilityShelfNo=upwardFacilityShelfNo, alarmSignalFailureOPU=alarmSignalFailureOPU, autoRestartMax=autoRestartMax, containerVschSlotNo=containerVschSlotNo, lldpLLDPScope=lldpLLDPScope, changePhysicalPortServiceSigDegThreshold=changePhysicalPortServiceSigDegThreshold, downwardEqptTable=downwardEqptTable, aidMappingId=aidMappingId, entityContainerExtNo=entityContainerExtNo, moduleSfProvision=moduleSfProvision, shelfmapTypeInv=shelfmapTypeInv, alarmEnvTable=alarmEnvTable, alarmShelfConnTimeStamp=alarmShelfConnTimeStamp, containerExternalPortClassName=containerExternalPortClassName, plugAdmin=plugAdmin, terminationPointChannelRangeProvision=terminationPointChannelRangeProvision, scPhysIfBaseType=scPhysIfBaseType, entityEqptPortNo=entityEqptPortNo, pmSnapshotCurrentTerminPointTable=pmSnapshotCurrentTerminPointTable, containerLanPortNo=containerLanPortNo, ipv6ActRoutesClassName=ipv6ActRoutesClassName, physicalPortTraceExpectedOduTcmB=physicalPortTraceExpectedOduTcmB, upwardTerminPointTable=upwardTerminPointTable, externalVchPmdTransmit=externalVchPmdTransmit, linkBaud=linkBaud, alarmAseTableGenFailHighBackreflection=alarmAseTableGenFailHighBackreflection, downwardEnvSlotNo=downwardEnvSlotNo, alarmOptOutputPowerTransTooLow=alarmOptOutputPowerTransTooLow, endOfFeatureSpecific=endOfFeatureSpecific, externalOmEntry=externalOmEntry, containerCrossConnClass=containerCrossConnClass, alarmClientOutage=alarmClientOutage, virtualPortLagSysMac=virtualPortLagSysMac, ipv6ActRoutesDestIp=ipv6ActRoutesDestIp, containerLinkSlotNo=containerLinkSlotNo, virtualPortOutputPower=virtualPortOutputPower, alarmThres15MinExceededOduTcmAES=alarmThres15MinExceededOduTcmAES, notAssignableShelfConnTable=notAssignableShelfConnTable, fanRowStatus=fanRowStatus, terminationPointConnector=terminationPointConnector, transientManualWorkingSwitchedtoProtection=transientManualWorkingSwitchedtoProtection, changePhysicalPortServiceTraceExpectedOduTcmA=changePhysicalPortServiceTraceExpectedOduTcmA, upwardShelfConnPortNo=upwardShelfConnPortNo, opticalMuxTrmtChannel=opticalMuxTrmtChannel, shelfStandardSlotHeight=shelfStandardSlotHeight, scAreaAid=scAreaAid, entityShelfConnOneIndex=entityShelfConnOneIndex, entitySysParentId=entitySysParentId, shelfmapAdmin=shelfmapAdmin, containerFanAidString=containerFanAidString, linkRowStatus=linkRowStatus, shelfConnFiber=shelfConnFiber, ratStartPointClassName=ratStartPointClassName, ffpTable=ffpTable, downwardDcnIndex=downwardDcnIndex, entityEqptShelfNo=entityEqptShelfNo, physicalPortTraceRcvDapiOtu=physicalPortTraceRcvDapiOtu, channelTracesTable=channelTracesTable, containerTerminPointClassName=containerTerminPointClassName, entityTerminPointAidString=entityTerminPointAidString, alarmSeverityEqptEntry=alarmSeverityEqptEntry, alarmSeverityShelfmapEntry=alarmSeverityShelfmapEntry, alarmShelfmapAffect=alarmShelfmapAffect, physicalPortLaserBiasCurrLevel=physicalPortLaserBiasCurrLevel, entitySysPortNo=entitySysPortNo, fanAdmin=fanAdmin, lanDhcpStartAddr=lanDhcpStartAddr, licenseExtNo=licenseExtNo, upwardExternalPortSlotNo=upwardExternalPortSlotNo, errorMessage=errorMessage, containerCrsOptLineFromIndexNo2=containerCrsOptLineFromIndexNo2, containerFfpAidString=containerFfpAidString, containerConnectStdFromIndexNo1=containerConnectStdFromIndexNo1, entityDcnTable=entityDcnTable, containerVschClassName=containerVschClassName, neMgmt=neMgmt, upwardExternalPortTable=upwardExternalPortTable, containerPchClassName=containerPchClassName, ratStartPointIndexNo1=ratStartPointIndexNo1, physicalPortMacAddress=physicalPortMacAddress, containerModShelfNo=containerModShelfNo, alarmHardwareUnavailable=alarmHardwareUnavailable, alarmEncryptionPortAuthPasswdMissing=alarmEncryptionPortAuthPasswdMissing, licenseManagerAidString=licenseManagerAidString, physicalPortDispersionMode=physicalPortDispersionMode, alarmOscOpticalPowerControlFailLow=alarmOscOpticalPowerControlFailLow, downwardEqptIndex=downwardEqptIndex, containerExternalPortPortNo=containerExternalPortPortNo, containerModExtNo=containerModExtNo, alarmNtpIPv6Table=alarmNtpIPv6Table, fileDataComment=fileDataComment, containerWchIndexNo2=containerWchIndexNo2, alarmExcessLLDPNeighborsRx=alarmExcessLLDPNeighborsRx, alarmThres15MinExceededSonetLineBbe=alarmThres15MinExceededSonetLineBbe, containerVchSlotNo=containerVchSlotNo, terminationPointOutputPower=terminationPointOutputPower, ntpIPv4Test=ntpIPv4Test, userManagementAccessEndTime=userManagementAccessEndTime)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", endOfDownwardShelfConnTable=endOfDownwardShelfConnTable, lanIpMode=lanIpMode, shelfInternalPlugRates=shelfInternalPlugRates, opticalLineFacilities=opticalLineFacilities, optIntervalPm1weekMean=optIntervalPm1weekMean, entityFfpTable=entityFfpTable, changePhysicalPortServiceLaserOffTimer=changePhysicalPortServiceLaserOffTimer, alarmSeverityContainerTable=alarmSeverityContainerTable, alarmDispersionCompensationTooHigh=alarmDispersionCompensationTooHigh, entityProtectionCableType=entityProtectionCableType, opticalMuxAseTabCreation=opticalMuxAseTabCreation, physicalPortMonitoredBitrate=physicalPortMonitoredBitrate, endOfOpticalLineTable=endOfOpticalLineTable, alarmServerSignalFail=alarmServerSignalFail, containerCrsOptLineToClassName=containerCrsOptLineToClassName, alarmFiberConnDataFailure=alarmFiberConnDataFailure, transientThres1DayExceededOduUAS=transientThres1DayExceededOduUAS, unlockTime=unlockTime, containerEccClassName=containerEccClassName, alarmHwConfigFault=alarmHwConfigFault, containerShelfClass=containerShelfClass, physicalPortInputPower=physicalPortInputPower, linkHelloInterval=linkHelloInterval, alarmLossOfCharSync=alarmLossOfCharSync, containerFfpShelfNo=containerFfpShelfNo, notAssignableEqptEntry=notAssignableEqptEntry, terminationPointBand=terminationPointBand, containerOlClass=containerOlClass, containerVomEntry=containerVomEntry, containerVchAidString=containerVchAidString, alarmPumpLaser4TempTooLow=alarmPumpLaser4TempTooLow, virtualPortMonLevel=virtualPortMonLevel, physicalPortPvid=physicalPortPvid, alarmNtpIPv4Severity=alarmNtpIPv4Severity, entityMtosiSlotsTable=entityMtosiSlotsTable, alarmPumpLaser3TempTooHigh=alarmPumpLaser3TempTooHigh, containerOmSlotNo=containerOmSlotNo, alarmLossOfMultiFrameOtu=alarmLossOfMultiFrameOtu, plugChannelSpacingProvision=plugChannelSpacingProvision, containerEthParentId=containerEthParentId, entityOptLineClass=entityOptLineClass, containerSecondaryStates=containerSecondaryStates, entityMtosiSlotsParentId=entityMtosiSlotsParentId, opticalLineOwnerAid=opticalLineOwnerAid, advaInventorySlotNo=advaInventorySlotNo, alarmLicenseManagerAffect=alarmLicenseManagerAffect, userManagementTl1TimeoutValue=userManagementTl1TimeoutValue, ipv6ActRoutesPrefix=ipv6ActRoutesPrefix, endOfNotAssignableContainerTable=endOfNotAssignableContainerTable, showLastLoginSuccess=showLastLoginSuccess, upwardDcnIndex=upwardDcnIndex, downwardOptLineChildId=downwardOptLineChildId, containerVch1ParentId=containerVch1ParentId, entityTerminPointIndexNo3=entityTerminPointIndexNo3, userManagementPasswordLastChangeDate=userManagementPasswordLastChangeDate, containerVomParentId=containerVomParentId, modulePartner2=modulePartner2, notAssignableEnvAidString=notAssignableEnvAidString, opticalMuxType=opticalMuxType, entityEnvExtNo=entityEnvExtNo, shelfConnDataLayerPmReset=shelfConnDataLayerPmReset, alarmOpenConnectionIndicationOduTcmA=alarmOpenConnectionIndicationOduTcmA, transientThres1DayExceededPhysConvCVDE=transientThres1DayExceededPhysConvCVDE, files=files, optThresholdConfigEntry=optThresholdConfigEntry, containerFanTableId=containerFanTableId, alarmSeverityOpticalMuxTable=alarmSeverityOpticalMuxTable, lsrtempThresholdConfigTable=lsrtempThresholdConfigTable, shelfmapEquipmentState=shelfmapEquipmentState, netConfTmout=netConfTmout, containerOlIndexNo1=containerOlIndexNo1, licenseManagerExtNo=licenseManagerExtNo, containerOlTableId=containerOlTableId, containerVchParentId=containerVchParentId, alarmNtpIPv4Table=alarmNtpIPv4Table, trapSinkIpSubnet=trapSinkIpSubnet, alarmTraceIdentifierMismatchOduTcmC=alarmTraceIdentifierMismatchOduTcmC, containerWchIndexNo4=containerWchIndexNo4, alarmTxPowerLimited=alarmTxPowerLimited, aidMappingTable=aidMappingTable, syslogIPv6Entry=syslogIPv6Entry, endOfAlarmSeverityContainerTable=endOfAlarmSeverityContainerTable, communityName=communityName, crossOpticalLineCrsFunction=crossOpticalLineCrsFunction, containerCrsOptLineFromPointTable=containerCrsOptLineFromPointTable, moduleRoadmNumber=moduleRoadmNumber, physicalPortMode=physicalPortMode, entityDcnParentId=entityDcnParentId, ipv6DefGateway=ipv6DefGateway, scFendTransportTermPoint=scFendTransportTermPoint, moduleAlias=moduleAlias, containerLanAidString=containerLanAidString, containerCrsOptLineFromIndexNo1=containerCrsOptLineFromIndexNo1, optIntervalPm1dayLow=optIntervalPm1dayLow, trapSinkIPv4=trapSinkIPv4, alarmEqptTable=alarmEqptTable, pmSnapshotStatus=pmSnapshotStatus, entityEnvAidString=entityEnvAidString, ocmpTimestampRequest=ocmpTimestampRequest, alarmServerSignalFailureSectionRS=alarmServerSignalFailureSectionRS, transientCrySwitchFailed=transientCrySwitchFailed, changePhysicalPortServiceSigDegPeriodOduTcmC=changePhysicalPortServiceSigDegPeriodOduTcmC, linkEccAid=linkEccAid, physicalPortLagPrio=physicalPortLagPrio, moduleStages=moduleStages, transientThres1DayExceededOtuBbe=transientThres1DayExceededOtuBbe, licenseManagerSlotNo=licenseManagerSlotNo, transientMpCreated=transientMpCreated, externalPortEntry=externalPortEntry, containerOmPortNo=containerOmPortNo, entityEqptParentId=entityEqptParentId, physicalPortValidSigTimer=physicalPortValidSigTimer, alarmOptInputPwrReceivedTooHigh=alarmOptInputPwrReceivedTooHigh, communityIPv6=communityIPv6, endOfAlarmSeverityOpticalMuxTable=endOfAlarmSeverityOpticalMuxTable, plugGenericPorts=plugGenericPorts, virtualPortTcmCLevel=virtualPortTcmCLevel, alarmLatencyTooLow=alarmLatencyTooLow, containerOtlgClass=containerOtlgClass, plugThirdPartyUsage=plugThirdPartyUsage, entityConnectionType=entityConnectionType, changePhysicalPortServiceTraceTransmitSapiOduTcmB=changePhysicalPortServiceTraceTransmitSapiOduTcmB, externalVchOpticalPowerTx=externalVchOpticalPowerTx, physicalPortSigDegPeriodOdu=physicalPortSigDegPeriodOdu, entityOptLineIndexNo4=entityOptLineIndexNo4, physicalPortSigDegPeriodOduTcmA=physicalPortSigDegPeriodOduTcmA, containerConnectStdFromIndexNo2=containerConnectStdFromIndexNo2, icmpEchoRequests=icmpEchoRequests, pmSnapshotHistoricalTable=pmSnapshotHistoricalTable, notAssignableDcnParentId=notAssignableDcnParentId, endOfNotAssignableOpticalMuxTable=endOfNotAssignableOpticalMuxTable, containerLinkShelfNo=containerLinkShelfNo, opticalMuxVariableGainCtoN=opticalMuxVariableGainCtoN, opticalMuxStages=opticalMuxStages, alarmEquipmentMismatchAllow=alarmEquipmentMismatchAllow, containerCrossConnFromPointClass=containerCrossConnFromPointClass, containerOwlgClassName=containerOwlgClassName, entityConnectionToId=entityConnectionToId, containerLinkClass=containerLinkClass, shelfChannelSpacing=shelfChannelSpacing, virtualPortPriority=virtualPortPriority, alarmAttOnTransmitterFiberHigherThanMonitor=alarmAttOnTransmitterFiberHigherThanMonitor, entityFilterCableTableId=entityFilterCableTableId, physicalPortOpticalSetPointLane1=physicalPortOpticalSetPointLane1, linkSecondaryStates=linkSecondaryStates, physicalPortTraceExpectedOduTcmA=physicalPortTraceExpectedOduTcmA, shelfInternalPorts=shelfInternalPorts, entityFfpPortNo=entityFfpPortNo, physicalPortTraceRcvOpspOtu=physicalPortTraceRcvOpspOtu, virtualPortLagSysIdFend=virtualPortLagSysIdFend, containerEnvClassName=containerEnvClassName, protectionCableType=protectionCableType, fileDataRevision=fileDataRevision, physicalPortTraceTransmitDapiOduTcmB=physicalPortTraceTransmitDapiOduTcmB, plugBidirectionalChannel=plugBidirectionalChannel, alarmOduAutoShutdownTxAIS=alarmOduAutoShutdownTxAIS, lanDeadInterval=lanDeadInterval, alarmSeverityExternalPortValue=alarmSeverityExternalPortValue, entityFacilityExtNo=entityFacilityExtNo, transientCryBootFailed=transientCryBootFailed, virtualPortRate=virtualPortRate, transientThres1DayExceededOduTcmCES=transientThres1DayExceededOduTcmCES, alarmThres15MinExceededSonetLineUAS=alarmThres15MinExceededSonetLineUAS, alarmExternalPortTimeStamp=alarmExternalPortTimeStamp, alarmFiberConnInvalidTx=alarmFiberConnInvalidTx, physicalPortRateLimit=physicalPortRateLimit, alarmSeverityDcnEntry=alarmSeverityDcnEntry, opticalMuxInhibitSwitchToWork=opticalMuxInhibitSwitchToWork, eccType=eccType, entityCrsOptLineParentId=entityCrsOptLineParentId, externalVchMaxBitErrorRate=externalVchMaxBitErrorRate, virtualPortPvid=virtualPortPvid, containerExternalPortShelfNo=containerExternalPortShelfNo, changePhysicalPortServiceOpuPayloadType=changePhysicalPortServiceOpuPayloadType, alarmConfigurationMismatch=alarmConfigurationMismatch, opticalLineChannelSpacing=opticalLineChannelSpacing, alarmBackupNotResponding=alarmBackupNotResponding, alarmAlarmIndicationSignalOduTcmB=alarmAlarmIndicationSignalOduTcmB, endOfUpwardContainerTable=endOfUpwardContainerTable, alarmOpenConnectionIndicationOdu=alarmOpenConnectionIndicationOdu, alarmNtpIPv6Severity=alarmNtpIPv6Severity, containerConnectNonStdToClassName=containerConnectNonStdToClassName, upwardEnvIndex=upwardEnvIndex, moduleRamUsage=moduleRamUsage, ntpIPv6TestStatus=ntpIPv6TestStatus, upwardDcnExtNo=upwardDcnExtNo, changePhysicalPortServiceSigDegPeriodOduTcmB=changePhysicalPortServiceSigDegPeriodOduTcmB, externalPortSourceProfile=externalPortSourceProfile, scSigDegThresReceiver=scSigDegThresReceiver, alarmTraceIdentifierMismatchOduTcmA=alarmTraceIdentifierMismatchOduTcmA, alarmPrbsRcvActivated=alarmPrbsRcvActivated, shelfConnEntry=shelfConnEntry, containerCrossDcnClassName=containerCrossDcnClassName, transientBootUpCompleted=transientBootUpCompleted, alarmPowerConsumptionHigh=alarmPowerConsumptionHigh, alarmPayloadMismatchOPU=alarmPayloadMismatchOPU, ratStartPointIndexNo4=ratStartPointIndexNo4, opticalLineTransmitChannel=opticalLineTransmitChannel, alarmThres15MinExceededOtuUAS=alarmThres15MinExceededOtuUAS, alarmLocalOscTemperatureTooHigh=alarmLocalOscTemperatureTooHigh, fspR7DeletionTrap=fspR7DeletionTrap, transientCommunicationFail=transientCommunicationFail, pmSnapshotCurrentTable=pmSnapshotCurrentTable, transientEqlzAuto=transientEqlzAuto, changePhysicalPortServiceTraceTransmitSapiOduTcmC=changePhysicalPortServiceTraceTransmitSapiOduTcmC, virtualPortTimeslot=virtualPortTimeslot, moduleCapabilityLevelProvision=moduleCapabilityLevelProvision, oprIntervalPm1dayHigh=oprIntervalPm1dayHigh, notAssignableEnvIndexNo2=notAssignableEnvIndexNo2, containerFfpParentId=containerFfpParentId, moduleBand=moduleBand, upwardContainerSlotNo=upwardContainerSlotNo, entityMtosiSlotsAidString=entityMtosiSlotsAidString, alarmAutoShutdownBlock=alarmAutoShutdownBlock, trapSinkCommunity=trapSinkCommunity, fanForceDestroy=fanForceDestroy, upwardTerminPointClassName=upwardTerminPointClassName, downwardContainerClassName=downwardContainerClassName, virtualPortIngressNodeIp=virtualPortIngressNodeIp, crossConnectionAlias=crossConnectionAlias, terminationPointSecondaryStates=terminationPointSecondaryStates, ntpIPv4Entry=ntpIPv4Entry, fspR7EquipmentInsertedTrap=fspR7EquipmentInsertedTrap, alarmHdSystemTimeStamp=alarmHdSystemTimeStamp, alarmThres15MinExceededOtuBbe=alarmThres15MinExceededOtuBbe, fileDataPgmType=fileDataPgmType, upwardOpticalMuxPortNo=upwardOpticalMuxPortNo, alarmAmpFailure=alarmAmpFailure, channelTracesIndexNo2=channelTracesIndexNo2, licenseManagerOperState=licenseManagerOperState, containerOtlgSlotNo=containerOtlgSlotNo, lldpManagementObjectID=lldpManagementObjectID, downwardEnvEntry=downwardEnvEntry, downwardShelfConnPortNo=downwardShelfConnPortNo, moduleAvlmdp=moduleAvlmdp, scTrmtWavelength=scTrmtWavelength, privilegeChangeId=privilegeChangeId, lldpPortDescription=lldpPortDescription, ncuPortC2=ncuPortC2, externalVchBitrate=externalVchBitrate, writeAccessStatus=writeAccessStatus, transientThres1DayExceededOduTcmCSES=transientThres1DayExceededOduTcmCSES, advaInventoryVendorId=advaInventoryVendorId, physicalPortTraceTransmitOpspOdu=physicalPortTraceTransmitOpspOdu, containerPlugClass=containerPlugClass, alarmSeverityNtpIPv6Entry=alarmSeverityNtpIPv6Entry, changePhysicalPortServiceErrorForwarding=changePhysicalPortServiceErrorForwarding, alarmThres15MinExceededSonetSectBbe=alarmThres15MinExceededSonetSectBbe, linkBitrate=linkBitrate, pmSnapshotHistoricalTerminPointParameter=pmSnapshotHistoricalTerminPointParameter, containerExternalOmEntry=containerExternalOmEntry, nextUnusedFc=nextUnusedFc, physicalPortTransmitWavelength=physicalPortTransmitWavelength, moduleMode=moduleMode)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", trapSinkIPv6=trapSinkIPv6, upwardDcnEntry=upwardDcnEntry, whitelistFiltering=whitelistFiltering, physicalPortPortMode=physicalPortPortMode, alarmAlarmIndicationSignalLine=alarmAlarmIndicationSignalLine, privilegeChangeIpAddress=privilegeChangeIpAddress, downwardTerminPointChildId=downwardTerminPointChildId, downwardOptLinePortNo=downwardOptLinePortNo, alarmEncryptionModuleFwpUpdateEnabled=alarmEncryptionModuleFwpUpdateEnabled, containerLinkAidString=containerLinkAidString, alarmFaultOnOpm=alarmFaultOnOpm, alarmTerminPointType=alarmTerminPointType, upwardDcnSlotNo=upwardDcnSlotNo, entityEqptExtNo=entityEqptExtNo, containerEntry=containerEntry, entityProtectionCableClass=entityProtectionCableClass, moduleAvlndpF270Rxcrs=moduleAvlndpF270Rxcrs, physicalPortDisparityCorrection=physicalPortDisparityCorrection, containerSequenceNumber=containerSequenceNumber, containerScClassName=containerScClassName, changePhysicalPortServiceTimModeOduTcmB=changePhysicalPortServiceTimModeOduTcmB, transientThres1DayExceededOduTcmABbe=transientThres1DayExceededOduTcmABbe, syslogIPv6SecurityReports=syslogIPv6SecurityReports, downwardFacilityTable=downwardFacilityTable, oprIntervalPm1dayValidFlag=oprIntervalPm1dayValidFlag, ntpIPv4SourceIp=ntpIPv4SourceIp, upwardExternalPortClassName=upwardExternalPortClassName, virtualPortRowStatus=virtualPortRowStatus, alarmEqptProvMismatch=alarmEqptProvMismatch, transientFiberConnStatChange=transientFiberConnStatChange, containerVomClass=containerVomClass, crossConnectionIngressTid=crossConnectionIngressTid, shelfRowStatus=shelfRowStatus, moduleTransmitChannel=moduleTransmitChannel, alarmThres15MinExceededOduTcmCES=alarmThres15MinExceededOduTcmCES, alarmFiberConnMismatch=alarmFiberConnMismatch, transientThres1DayExceededOduTcmBES=transientThres1DayExceededOduTcmBES, syslogIPv6RowStatus=syslogIPv6RowStatus, alarmTransmitterDisabledOff=alarmTransmitterDisabledOff, containerVchTableId=containerVchTableId, haSwitchOverCause=haSwitchOverCause, alarmLockedDefectOdu=alarmLockedDefectOdu, endOfAlarmDcnTable=endOfAlarmDcnTable, entityCrsOptLineFromIndexNo2=entityCrsOptLineFromIndexNo2, virtualPortPathProtection=virtualPortPathProtection, ipv6InActRoutesType=ipv6InActRoutesType, containerFfpSlotNo=containerFfpSlotNo, transientNtpSrvTestFailed=transientNtpSrvTestFailed, endOfAlarmSeveritySysTable=endOfAlarmSeveritySysTable, transientAlpSettingFinished=transientAlpSettingFinished, moduleTrafficDirection=moduleTrafficDirection, notAssignableOptLineAidString=notAssignableOptLineAidString, transientEqlzProcessPassed=transientEqlzProcessPassed, alarmExternalPortTable=alarmExternalPortTable, externalVchFarEndLocation=externalVchFarEndLocation, optIntervalPm15minLow=optIntervalPm15minLow, alarmThres15MinExceededFecUBE=alarmThres15MinExceededFecUBE, downwardTerminPointIndexNo1=downwardTerminPointIndexNo1, notAssignableOpticalMuxIndexNo2=notAssignableOpticalMuxIndexNo2, shelfConnSecondaryStates=shelfConnSecondaryStates, alarmWarmUp=alarmWarmUp, alarmAutoShutdownSendingAisOdu=alarmAutoShutdownSendingAisOdu, virtualPortCbsTrmt=virtualPortCbsTrmt, moduleDCFiberType=moduleDCFiberType, opticalMuxForceLaserOn=opticalMuxForceLaserOn, virtualPortTraceExpectedOdu=virtualPortTraceExpectedOdu, alarmProfileSeverityDefaultValue=alarmProfileSeverityDefaultValue, containerOmEntry=containerOmEntry, alarmHwInitializing=alarmHwInitializing, haInhSwitching=haInhSwitching, endOfFacilityMgmt=endOfFacilityMgmt, activeUsersSessionGroupName=activeUsersSessionGroupName, notAssignableEnvIndexNo3=notAssignableEnvIndexNo3, entityShelfConnShelfNo=entityShelfConnShelfNo, fspR7TrapSinkChange=fspR7TrapSinkChange, eccAdmin=eccAdmin, alarmBackwardDefectIndicationOdu=alarmBackwardDefectIndicationOdu, physicalPortTxOffDelay=physicalPortTxOffDelay, alarmLossOfSignalDcPort=alarmLossOfSignalDcPort, entityExternalPortExtNo=entityExternalPortExtNo, syslogIPv4Table=syslogIPv4Table, entityCrossConnType=entityCrossConnType, containerOtlgPortNo=containerOtlgPortNo, containerConnectStdToIndexNo3=containerConnectStdToIndexNo3, hdSystemId=hdSystemId, fanFanProfile=fanFanProfile, scAuthString=scAuthString, oprIntervalPm1weekTable=oprIntervalPm1weekTable, dependentTable=dependentTable, virtualPortOperState=virtualPortOperState, unassignedInventoryTable=unassignedInventoryTable, containerOmTable=containerOmTable, transientCryAuthKeyMade=transientCryAuthKeyMade, trapUser=trapUser, endOfDownwardDcnTable=endOfDownwardDcnTable, authTrapProtocol=authTrapProtocol, containerFanPortNo=containerFanPortNo, entityCrsOptLineToClassName=entityCrsOptLineToClassName, upwardShelfConnParentId=upwardShelfConnParentId, alarmSignalFailureonLinkVector=alarmSignalFailureonLinkVector, moduleAvlndpF125Rxcrs=moduleAvlndpF125Rxcrs, scRowStatus=scRowStatus, transientThres1DayExceededCrcFramesEgress=transientThres1DayExceededCrcFramesEgress, moduleChannelSpacing=moduleChannelSpacing, notAssignableEnvParentId=notAssignableEnvParentId, containerCrossConnFromPointPortNo=containerCrossConnFromPointPortNo, privilegeChangeRemoteName=privilegeChangeRemoteName, containerCrossConnFromSlotNo=containerCrossConnFromSlotNo, containerVschClass=containerVschClass, alarmOpuClientSignalFail=alarmOpuClientSignalFail, containerAdmin=containerAdmin, notAssignableDcnEntry=notAssignableDcnEntry, physicalPortTraceExpectedOduTcmC=physicalPortTraceExpectedOduTcmC, virtualPortUtag=virtualPortUtag, transientThres1DayExceededCrcErrorsRcv=transientThres1DayExceededCrcErrorsRcv, endOfEntities=endOfEntities, ntpIPv6RowStatus=ntpIPv6RowStatus, moduleTable=moduleTable, licensePortNo=licensePortNo, privilegeChangeInterface=privilegeChangeInterface, oprIntervalPm15minMean=oprIntervalPm15minMean, alarmChromaticDispersionTooLow=alarmChromaticDispersionTooLow, entityCrsOptLineTableId=entityCrsOptLineTableId, endOfAlarmSeverityExternalPortTable=endOfAlarmSeverityExternalPortTable, lldpSystemDescription=lldpSystemDescription, ratAnalyzerElementId=ratAnalyzerElementId, scEntry=scEntry, neAutoDhcp=neAutoDhcp, downwardExternalPortShelfNo=downwardExternalPortShelfNo, ipv6ActRoutesNextHop=ipv6ActRoutesNextHop, alarmThres15MinExceededOduTcmAUAS=alarmThres15MinExceededOduTcmAUAS, upwardShelfConnExtNo=upwardShelfConnExtNo, physicalPortTraceTransmitSapiOtu=physicalPortTraceTransmitSapiOtu, scDhcpServer=scDhcpServer, entityOpticalMuxParentId=entityOpticalMuxParentId, crossConnectionType=crossConnectionType, shelfOscPorts=shelfOscPorts, alarmLossOfModemSync=alarmLossOfModemSync, opticalMuxFarEndProtectionState=opticalMuxFarEndProtectionState, alarmNtpIPv6Affect=alarmNtpIPv6Affect, alarmEquipmentMismatch=alarmEquipmentMismatch, alarmXfpDecisionThresSetFailed=alarmXfpDecisionThresSetFailed, alarmAirDustFilterClogged=alarmAirDustFilterClogged, upwardOptLineEntry=upwardOptLineEntry, alarmLockedDefectOduTcmC=alarmLockedDefectOduTcmC, virtualPortChannelId=virtualPortChannelId, externalVchMinOsnrRcv=externalVchMinOsnrRcv, notAssignableOpticalMuxTable=notAssignableOpticalMuxTable, alarmPrbsLossOfSeqSynch=alarmPrbsLossOfSeqSynch, whitelistEntry=whitelistEntry, alarmSeverityExternalPortType=alarmSeverityExternalPortType, alarmEqptSeverity=alarmEqptSeverity, oprThresholdConfigTable=oprThresholdConfigTable, physicalPortSigDegThresOduTcmB=physicalPortSigDegThresOduTcmB, opticalMuxInhibitSwitchToProt=opticalMuxInhibitSwitchToProt, ipv6ActRoutesType=ipv6ActRoutesType, containerChClass=containerChClass, entityProtectionCableParentId=entityProtectionCableParentId, alarmSeveritySysType=alarmSeveritySysType, virtualPortSigDegThresOduTcmB=virtualPortSigDegThresOduTcmB, fspR7EquipmentRemovedTrap=fspR7EquipmentRemovedTrap, containerEthAidString=containerEthAidString, moduleInternalPorts=moduleInternalPorts, opticalMuxChannelSpacing=opticalMuxChannelSpacing, virtualPortSigDegPeriodOduTcmC=virtualPortSigDegPeriodOduTcmC, eccOperState=eccOperState, pmSnapshotCurrentInputPower=pmSnapshotCurrentInputPower, alarmLocalOscLevelAbnormal=alarmLocalOscLevelAbnormal, externalPortMinOptPowerRcv=externalPortMinOptPowerRcv, downwardContainerEntry=downwardContainerEntry, protectionCableEntry=protectionCableEntry, lsrtempThresholdConfigHighFixed=lsrtempThresholdConfigHighFixed, entityCrossConnFromSlotNo=entityCrossConnFromSlotNo, virtualPortOffsetHigh=virtualPortOffsetHigh, privilegeChangeCurrentPrivilege=privilegeChangeCurrentPrivilege, alarmLossOfPointerHigherOrderPath=alarmLossOfPointerHigherOrderPath, alarmMaxPowerConsProvModulesToHigh=alarmMaxPowerConsProvModulesToHigh, channelTracesChannelRx=channelTracesChannelRx, ratAnalyzerState=ratAnalyzerState, plugConnectorType=plugConnectorType, containerExternalPortEntry=containerExternalPortEntry, entityEnvType=entityEnvType, containerConnectStdTable=containerConnectStdTable, entityContainerEntry=entityContainerEntry, entityExternalPortAidString=entityExternalPortAidString, transientNtpSrvSyncChanged=transientNtpSrvSyncChanged, externalPortTable=externalPortTable, externalPortRowStatus=externalPortRowStatus, physicalPortAutoPTassignment=physicalPortAutoPTassignment, ntpIPv4Admin=ntpIPv4Admin, dependentIndexNo4=dependentIndexNo4, endOfNotAssignables=endOfNotAssignables, containerConnectStdTableId=containerConnectStdTableId, downwardDcnSlotNo=downwardDcnSlotNo, opticalLineRxLineAttenuation=opticalLineRxLineAttenuation, entityOptLineClassName=entityOptLineClassName, opticalMuxProtectionRole=opticalMuxProtectionRole, alarmApsConfigMismatch=alarmApsConfigMismatch, entityCrossConnToSlotNo=entityCrossConnToSlotNo, virtualPortTraceTransmitDapiOduTcmA=virtualPortTraceTransmitDapiOduTcmA, alarmBackupForcedToHalt=alarmBackupForcedToHalt, physicalPortInhibitSwitchToWork=physicalPortInhibitSwitchToWork, changePhysicalPortServiceSigDegThresOduTcmC=changePhysicalPortServiceSigDegThresOduTcmC, lanOspf=lanOspf, containerExternalVchClass=containerExternalVchClass, optIntervalPm15minMean=optIntervalPm15minMean, entityContainerClassName=entityContainerClassName, entityShelfConnPortNo=entityShelfConnPortNo, alarmThres15MinExceededSonetSectCV=alarmThres15MinExceededSonetSectCV, alarmFiberAttenuationCond=alarmFiberAttenuationCond, endOfAlarmSeverityEnvTable=endOfAlarmSeverityEnvTable, alarmEncryptionPortMaxKeyExchgFailuresReachedIs=alarmEncryptionPortMaxKeyExchgFailuresReachedIs, entityCrossDcnParentId=entityCrossDcnParentId, shelfShelfHeight=shelfShelfHeight, physicalPortNearEndProtectionState=physicalPortNearEndProtectionState, containerCrossConnAidString=containerCrossConnAidString, filterCableTable=filterCableTable, moduleHeight=moduleHeight, alarmSeverityDcnType=alarmSeverityDcnType, alarmSeverityEnvType=alarmSeverityEnvType, notAssignableOpticalMuxIndexNo4=notAssignableOpticalMuxIndexNo4, connectionRowStatus=connectionRowStatus, moduleAvlSwCap=moduleAvlSwCap, entityContainerTableId=entityContainerTableId, entityMtosiSlotsPortNo=entityMtosiSlotsPortNo, opticalLineLanes=opticalLineLanes, containerEnvTableId=containerEnvTableId, containerCrossConnFromPointExtNo=containerCrossConnFromPointExtNo, containerVethClassName=containerVethClassName, transientSwResetReload=transientSwResetReload, containerPlugTableId=containerPlugTableId, containerConnectStdNotation=containerConnectStdNotation, lanDhcpStopAddr=lanDhcpStopAddr, changePhysicalPortServiceSigDegThresSonetLine=changePhysicalPortServiceSigDegThresSonetLine, physicalPortDelayMeasurementOperation=physicalPortDelayMeasurementOperation, transientCryptoSessKeyLifetimeChanged=transientCryptoSessKeyLifetimeChanged, alarmBackwardDefectIndicationOduTcmA=alarmBackwardDefectIndicationOduTcmA, opticalMuxOffsetHigh=opticalMuxOffsetHigh, ratStartPointChannelNumber=ratStartPointChannelNumber, physicalPortRate=physicalPortRate, fanOutputReset=fanOutputReset, moduleFiberDetect=moduleFiberDetect, naasMode=naasMode, pmSnapshotCurrentTxLineAtten=pmSnapshotCurrentTxLineAtten, syslogIPv4SecurityReports=syslogIPv4SecurityReports, endOfShelfConnTable=endOfShelfConnTable, endOfAlarmContainerTable=endOfAlarmContainerTable, alarmInputVoltageFailure=alarmInputVoltageFailure, shelfSlot=shelfSlot, alarmTerminPointAffect=alarmTerminPointAffect, ipv6ActRoutesDestination=ipv6ActRoutesDestination, physicalPortFlowControl=physicalPortFlowControl, alarmServerSignalFailureGfp=alarmServerSignalFailureGfp, entityFfpEntry=entityFfpEntry)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", physicalPortOpticalSetPoint=physicalPortOpticalSetPoint, endOfserviceDiagnostics=endOfserviceDiagnostics, entityExternalPortClass=entityExternalPortClass, entityCrossConnFromShelfNo=entityCrossConnFromShelfNo, lldpManagementInterface=lldpManagementInterface, alarmLicenseTable=alarmLicenseTable, notAssignableEqptIndexNo4=notAssignableEqptIndexNo4, sslRenewMode=sslRenewMode, notAssignableContainerClass=notAssignableContainerClass, virtualPortLacpTimeout=virtualPortLacpTimeout, containerEnvSlotNo=containerEnvSlotNo, opticalLineLaneChannel1=opticalLineLaneChannel1, physicalPortOutputPower=physicalPortOutputPower, downwardOptLineIndex=downwardOptLineIndex, physicalPortLoopConfig=physicalPortLoopConfig, alarmSysType=alarmSysType, upwardOpticalMuxParentId=upwardOpticalMuxParentId, alarmReceiverDisabled=alarmReceiverDisabled, containerShelfConnSlotNo=containerShelfConnSlotNo, syslogIPv4Entry=syslogIPv4Entry, haEntry=haEntry, opticalLineLaneChannel3=opticalLineLaneChannel3, containerExternalVchSlotNo=containerExternalVchSlotNo, entityFfpExtNo=entityFfpExtNo, alarmOduAutoShutdownRxAIS=alarmOduAutoShutdownRxAIS, alarmOutputCurrentDrawHigh=alarmOutputCurrentDrawHigh, externalPortMaxBitErrorRate=externalPortMaxBitErrorRate, dcnReferByEntry=dcnReferByEntry, physicalPortTraceTransmitOpspOduTcmA=physicalPortTraceTransmitOpspOduTcmA, physicalPortFiber=physicalPortFiber, physicalPortLossAttenuation=physicalPortLossAttenuation, optIntervalPm1dayTimeStamp=optIntervalPm1dayTimeStamp, shelfPsuOutputPower=shelfPsuOutputPower, hdSystemTable=hdSystemTable, alarmLockedDefectOduTcmA=alarmLockedDefectOduTcmA, unassignedInventoryTableId=unassignedInventoryTableId, entityExternalPortClassName=entityExternalPortClassName, alarmFacilityLoopback=alarmFacilityLoopback, icmpRedirect=icmpRedirect, changePhysicalPortServiceSigDegPcslThreshold=changePhysicalPortServiceSigDegPcslThreshold, authTrapPort=authTrapPort, containerOmExtNo=containerOmExtNo, transientMpReleased=transientMpReleased, transientThres1DayExceededOtuUAS=transientThres1DayExceededOtuUAS, alarmInsufficientPower=alarmInsufficientPower, transientThres1DayExceededOduTcmCBbe=transientThres1DayExceededOduTcmCBbe, physicalPortSigDegThresOtu=physicalPortSigDegThresOtu, pmSnapshotCurrentAttenOfVoa=pmSnapshotCurrentAttenOfVoa, lldpAlias=lldpAlias, alarmSwitchToDuplexInhibited=alarmSwitchToDuplexInhibited, alarmCarrierFreqOffsetTooHigh=alarmCarrierFreqOffsetTooHigh, shelfConnMgmt=shelfConnMgmt, changePhysicalPortServiceRowStatus=changePhysicalPortServiceRowStatus, physicalPortTraceTransmitDapiOduTcmA=physicalPortTraceTransmitDapiOduTcmA, hdSystemAdopt=hdSystemAdopt, endOfPerformance=endOfPerformance, moduleRemoteReset=moduleRemoteReset, alarmLossOfFrameMux=alarmLossOfFrameMux, alarmEnvSeverity=alarmEnvSeverity, virtualPortBundle=virtualPortBundle, endOfNotAssignableExternalPortTable=endOfNotAssignableExternalPortTable, restrictToSysIP=restrictToSysIP, dependentIndex=dependentIndex, ipv6ActRoutesSlotNo=ipv6ActRoutesSlotNo, licenseManagerSecondaryStates=licenseManagerSecondaryStates, neCommandState=neCommandState, containerCrossConnToPortNo=containerCrossConnToPortNo, containerExternalOmExtNo=containerExternalOmExtNo, virtualPortTraceTransmitDapiOduTcmB=virtualPortTraceTransmitDapiOduTcmB, downwardContainerSlotNo=downwardContainerSlotNo, pmSnapshotHistoricalNumber=pmSnapshotHistoricalNumber, containerPlugShelfNo=containerPlugShelfNo, moduleNetworkPorts=moduleNetworkPorts, alarmLossofSequenceHigherOrderPath=alarmLossofSequenceHigherOrderPath, ffpProtectionMech=ffpProtectionMech, entityEqptSlotNo=entityEqptSlotNo, alarmNtpForSchedEqlzRequired=alarmNtpForSchedEqlzRequired, entityEnvParentId=entityEnvParentId, terminationPointFiber=terminationPointFiber, alarmSignalDegradeOdu=alarmSignalDegradeOdu, ipv6InActRoutesPrefix=ipv6InActRoutesPrefix, webInterface=webInterface, entityFacilityShelfNo=entityFacilityShelfNo, containerVschPortNo=containerVschPortNo, ffpApsChannel=ffpApsChannel, externalVchChromDisperTx=externalVchChromDisperTx, containerWchClass=containerWchClass, endOfContainerMgmt=endOfContainerMgmt, entityShelfConnTable=entityShelfConnTable, physicalPortTraceReceived=physicalPortTraceReceived, endOfProtectionCableTable=endOfProtectionCableTable, scDeadInterval=scDeadInterval, syslogIPv6DbchgReports=syslogIPv6DbchgReports, virtualSessionWriteAccess=virtualSessionWriteAccess, moduleType=moduleType, changePhysicalPortServiceSigDegPeriodOtu=changePhysicalPortServiceSigDegPeriodOtu, alarmProtectionNotAvailable=alarmProtectionNotAvailable, alarmTraceIdentifierMismatchOdu=alarmTraceIdentifierMismatchOdu, ratStartPointIndexNo2=ratStartPointIndexNo2, containerCrossDcnShelfNo=containerCrossDcnShelfNo, containerCrossDcnTableId=containerCrossDcnTableId, moduleGenericPlugRates=moduleGenericPlugRates, scIPv6=scIPv6, changePhysicalPortServiceTraceTransmitSapiOtu=changePhysicalPortServiceTraceTransmitSapiOtu, alarmLossOfLane=alarmLossOfLane, entityExternalPortSlotNo=entityExternalPortSlotNo, entityShelfConnClass=entityShelfConnClass, virtualPortValidSigTimer=virtualPortValidSigTimer, alarmReplaceAirFilter=alarmReplaceAirFilter, physicalPortReportSsfSection=physicalPortReportSsfSection, transientFwpHashFail=transientFwpHashFail, physicalPortSigDegPcslThreshold=physicalPortSigDegPcslThreshold, changePhysicalPortServiceTraceExpectedSonetSection=changePhysicalPortServiceTraceExpectedSonetSection, opticalMuxReferByTerminPoint=opticalMuxReferByTerminPoint, entityMtosiSlotsChildId=entityMtosiSlotsChildId, upwardOptLineIndex=upwardOptLineIndex, licenseLicenseName=licenseLicenseName, alarmAutoShutdownAls=alarmAutoShutdownAls, alarmThresOptPowerCtrlFailureHigh=alarmThresOptPowerCtrlFailureHigh, ratAnalyzerEntry=ratAnalyzerEntry, opticalLineFiberLength=opticalLineFiberLength, alarmTurnupCondition=alarmTurnupCondition, containerExternalOmShelfNo=containerExternalOmShelfNo, activeUsersInterfaces=activeUsersInterfaces, upwardExternalPortExtNo=upwardExternalPortExtNo, alarmPsmRedundancyMismatch=alarmPsmRedundancyMismatch, endOfAlarmSeverityShelfConnTable=endOfAlarmSeverityShelfConnTable, knownHostIPv6IP=knownHostIPv6IP, crossConnectionCrsMcAidList=crossConnectionCrsMcAidList, physicalPortPayload=physicalPortPayload, physicalPortCdPostCompensationRange=physicalPortCdPostCompensationRange, ntpIPv6Table=ntpIPv6Table, endOfUpwardDcnTable=endOfUpwardDcnTable, containerConnectStdEntry=containerConnectStdEntry, alarmThres15MinExceededFecCE=alarmThres15MinExceededFecCE, physicalPortReportAisLine=physicalPortReportAisLine, alarmThermoElectricCoolerEndOfLife=alarmThermoElectricCoolerEndOfLife, containerOlTable=containerOlTable, shelfType=shelfType, transientCryBootStarted=transientCryBootStarted, containerOwlgClass=containerOwlgClass, physicalPortTcmCLevel=physicalPortTcmCLevel, fspR7WriteAccessRequestTimeout=fspR7WriteAccessRequestTimeout, opticalMuxVariableGainNtoR=opticalMuxVariableGainNtoR, changePhysicalPortServiceDisparityCorrection=changePhysicalPortServiceDisparityCorrection, moduleSubBandProvision=moduleSubBandProvision, lanPriority=lanPriority, containerVchPortNo=containerVchPortNo, alarmOpticalMuxAffect=alarmOpticalMuxAffect, entityDcnShelfNo=entityDcnShelfNo, alarmLaserFailure=alarmLaserFailure, virtualPortTerminationLevel=virtualPortTerminationLevel, crossDcnEcc=crossDcnEcc, entityMtosiSlotsEntry=entityMtosiSlotsEntry, alarmShelfmapSeverity=alarmShelfmapSeverity, entityShelfConnSlotNo=entityShelfConnSlotNo, entitySysClass=entitySysClass, crossOpticalLineAlias=crossOpticalLineAlias, virtualPortLagSysPrio=virtualPortLagSysPrio, moduleInternalPlugRates=moduleInternalPlugRates, channelTracesEntry=channelTracesEntry, upwardOptLinePortNo=upwardOptLinePortNo, alarmServerSignalFailureVf=alarmServerSignalFailureVf, physicalPortDispersionSetting=physicalPortDispersionSetting, moduleOutputReset=moduleOutputReset, transientForcedReboot=transientForcedReboot, virtualPortTraceTransmitSapiOduTcmB=virtualPortTraceTransmitSapiOduTcmB, externalOmType=externalOmType, virtualPortMacAddress=virtualPortMacAddress, physicalPortSigDegThresSdhMs=physicalPortSigDegThresSdhMs, containerFanSlotNo=containerFanSlotNo, containerCrsOptLineToIndexNo3=containerCrsOptLineToIndexNo3, containerOlClassName=containerOlClassName, shelfConnAlias=shelfConnAlias, alarmSeverityFacilityValue=alarmSeverityFacilityValue, haTable=haTable, notAssignableContainerEntry=notAssignableContainerEntry, containerOwlgTable=containerOwlgTable, linkOspf=linkOspf, containerEccSlotNo=containerEccSlotNo, shelfmapIpAddr=shelfmapIpAddr, ntpIPv4SyncStatus=ntpIPv4SyncStatus, alarmFacilityTimeStamp=alarmFacilityTimeStamp, entityCrsOptLineTable=entityCrsOptLineTable, moduleAvlndpF2970Rxcrs=moduleAvlndpF2970Rxcrs, virtualPortOduTribPortNo=virtualPortOduTribPortNo, terminationPointTermType=terminationPointTermType, hdSystemRowStatus=hdSystemRowStatus, downwardExternalPortClassName=downwardExternalPortClassName, containerConnectNonStdClassName=containerConnectNonStdClassName, moduleEccPorts=moduleEccPorts, virtualPortTraceTransmitOpspOduTcmC=virtualPortTraceTransmitOpspOduTcmC, userManagementAuthPrivKeyOld=userManagementAuthPrivKeyOld, notAssignableDcnIndexNo4=notAssignableDcnIndexNo4, pmSnapshotCurrentTerminPointEntry=pmSnapshotCurrentTerminPointEntry, downwardEnvExtNo=downwardEnvExtNo, containerConnectStdToClassName=containerConnectStdToClassName, transientThres1DayExceededFecES=transientThres1DayExceededFecES, alarmProfile=alarmProfile, channelTracesIndexNo1=channelTracesIndexNo1, aidMappingAidString=aidMappingAidString, ipv6Control=ipv6Control, changePhysicalPortServiceSigDegThresOtu=changePhysicalPortServiceSigDegThresOtu, alarmAutoShutdownToHighTemp=alarmAutoShutdownToHighTemp, notAssignableShelfConnParentId=notAssignableShelfConnParentId, alarmNtpIPv4TimeStamp=alarmNtpIPv4TimeStamp, virtualPortTraceTransmitOpspOduTcmA=virtualPortTraceTransmitOpspOduTcmA, moduleInventoryDescription=moduleInventoryDescription, containerLanTable=containerLanTable, physicalPortTimModeOtu=physicalPortTimModeOtu, containerCrossConnToClassName=containerCrossConnToClassName, physicalPortCdCompensationRange=physicalPortCdCompensationRange, opticalMuxSwitchCommand=opticalMuxSwitchCommand, downwardTerminPointIndexNo4=downwardTerminPointIndexNo4, shelfChannelBandwith=shelfChannelBandwith, opticalMuxTimePeriod=opticalMuxTimePeriod, alarmBackwardDefectIndicationOtu=alarmBackwardDefectIndicationOtu, lanLanMembers=lanLanMembers, changePhysicalPortServiceDispersionSetting=changePhysicalPortServiceDispersionSetting, containerOtlgAidString=containerOtlgAidString, moduleReach=moduleReach, shelfPowerSupplyProtection=shelfPowerSupplyProtection, entityTerminPointClassName=entityTerminPointClassName, moduleAvlMapCapUp=moduleAvlMapCapUp, ratStartPointAidString=ratStartPointAidString, virtualPortTraceExpectedDapiOdu=virtualPortTraceExpectedDapiOdu, externalVchFecType=externalVchFecType, containerFfpExtNo=containerFfpExtNo, physicalPortBehaviour=physicalPortBehaviour, licenseManagerParentId=licenseManagerParentId, entityConnectionTableId=entityConnectionTableId, alarmThres15MinExceededFecSES=alarmThres15MinExceededFecSES, containerEthClass=containerEthClass, changePhysicalPortServiceEqlzAdmin=changePhysicalPortServiceEqlzAdmin, endOfProtection=endOfProtection, terminationPointAdmin=terminationPointAdmin, lldpEntry=lldpEntry, ipv6ActRoutesRowStatus=ipv6ActRoutesRowStatus, notAssignableExternalPortTable=notAssignableExternalPortTable, endOfDownwardOpticalMuxTable=endOfDownwardOpticalMuxTable, downwardOptLineShelfNo=downwardOptLineShelfNo, physicalPortDelayMeasurementLayer=physicalPortDelayMeasurementLayer, userManagementExpirationDate=userManagementExpirationDate, hdShelves=hdShelves, alarmLockedDefectOduTcmB=alarmLockedDefectOduTcmB, containerEnvParentId=containerEnvParentId, transientFwpHashPass=transientFwpHashPass, icmpSourceQuench=icmpSourceQuench, alarmOosMaintenance=alarmOosMaintenance, advaInventoryFpgaRev=advaInventoryFpgaRev, entityCrsOptLineType=entityCrsOptLineType, virtualPortMaxFrameSize=virtualPortMaxFrameSize, crossConnectionCrsContAidList=crossConnectionCrsContAidList, entityCrossDcnAidString=entityCrossDcnAidString)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", endOfFanTable=endOfFanTable, entityEnvSlotNo=entityEnvSlotNo, containerEnvClass=containerEnvClass, transientEncryptionModuleSelfTestPass=transientEncryptionModuleSelfTestPass, entityEqptEquipmentState=entityEqptEquipmentState, containerPlugExtNo=containerPlugExtNo, entityDcnOneIndex=entityDcnOneIndex, endOfRatStartPointTable=endOfRatStartPointTable, changePhysicalPortServiceTimModeSonetSection=changePhysicalPortServiceTimModeSonetSection, physicalPortTributaryAssignedSlotNo=physicalPortTributaryAssignedSlotNo, upwardTerminPointEntry=upwardTerminPointEntry, virtualPortProtectionRole=virtualPortProtectionRole, virtualPortStagType=virtualPortStagType, alarmPayloadMismatchHigherOrderPath=alarmPayloadMismatchHigherOrderPath, ipv6InActRoutesNextHop=ipv6InActRoutesNextHop, containerExternalOmTableId=containerExternalOmTableId, physicalPortSigDegPeriodOduTcmC=physicalPortSigDegPeriodOduTcmC, alarmThres15MinExceededBbePcs=alarmThres15MinExceededBbePcs, channelTracesRouteType=channelTracesRouteType, containerFanShelfNo=containerFanShelfNo, containerFanParentId=containerFanParentId, changePhysicalPortServiceTributarySlotMethod=changePhysicalPortServiceTributarySlotMethod, moduleManagementPorts=moduleManagementPorts, shelfConnConnectionType=shelfConnConnectionType, entityTerminPointTable=entityTerminPointTable, alarmSeverityExternalPortTable=alarmSeverityExternalPortTable, crossDcnEntry=crossDcnEntry, notAssignableOptLineIndexNo2=notAssignableOptLineIndexNo2, alarmLossOfFrameLossOfMultiFrameOdu=alarmLossOfFrameLossOfMultiFrameOdu, containerShelfmapId=containerShelfmapId, upwardShelfConnSlotNo=upwardShelfConnSlotNo, externalPortPmdTransmit=externalPortPmdTransmit, alarmEncryptionModuleCryPasswdError=alarmEncryptionModuleCryPasswdError, alarmThres15MinExceededOduBbe=alarmThres15MinExceededOduBbe, activeUsersTable=activeUsersTable, alarmDifferentialGroupDelayTooHigh=alarmDifferentialGroupDelayTooHigh, alarmOscPwrTooHigh=alarmOscPwrTooHigh, endOfNotAssignableDcnTable=endOfNotAssignableDcnTable, management=management, alarmFiberConnInvalid=alarmFiberConnInvalid, physicalPortTraceTransmitSapiOdu=physicalPortTraceTransmitSapiOdu, downwardShelfConnTable=downwardShelfConnTable, physicalPortCirTrmt=physicalPortCirTrmt, alarmFacilityAffect=alarmFacilityAffect, alarmLocalFaultRx=alarmLocalFaultRx, ratAnalyzerToAid=ratAnalyzerToAid, alarmSeverityOpticalMuxType=alarmSeverityOpticalMuxType, entityShelfConnParentId=entityShelfConnParentId, containerEnvExtNo=containerEnvExtNo, containerModSlotNo=containerModSlotNo, alarmSeveritySysEntry=alarmSeveritySysEntry, alarmFiberConnOptFault=alarmFiberConnOptFault, scAlsMode=scAlsMode, alarmLaserBiasCurrAbnormal=alarmLaserBiasCurrAbnormal, physicalPortLaserOnTimer=physicalPortLaserOnTimer, transientThres1DayExceededPhysConvSE=transientThres1DayExceededPhysConvSE, physicalPortFacilities=physicalPortFacilities, changePhysicalPortServiceTcmBLevel=changePhysicalPortServiceTcmBLevel, transientBootUpFailed=transientBootUpFailed, oprIntervalPm15minLow=oprIntervalPm15minLow, transientDelayMeasurementFailed=transientDelayMeasurementFailed, changePhysicalPortServiceMode=changePhysicalPortServiceMode, opticalMuxOscOpticalSetpoint=opticalMuxOscOpticalSetpoint, dnsServer1=dnsServer1, oprIntervalPm1weekLow=oprIntervalPm1weekLow, alarmShelfConnAffect=alarmShelfConnAffect, downwardEnvPortNo=downwardEnvPortNo, transientForcedWorkingSwitchedBacktoWorking=transientForcedWorkingSwitchedBacktoWorking, fspR7WriteAccessGranted=fspR7WriteAccessGranted, dependentClassName=dependentClassName, terminationPointFunction=terminationPointFunction, userManagementAccountState=userManagementAccountState, crossOpticalLineIngressTid=crossOpticalLineIngressTid, alarmSectionTraceMismatch=alarmSectionTraceMismatch, moduleAlsConf=moduleAlsConf, containerCrsOptLineToIndexNo1=containerCrsOptLineToIndexNo1, containerScTableId=containerScTableId, entityOptLineType=entityOptLineType, envPortTable=envPortTable, transientThres1DayExceededSonetLineUAS=transientThres1DayExceededSonetLineUAS, upwardEnvTable=upwardEnvTable, entityMtosiSlotsExtNo=entityMtosiSlotsExtNo, crossConnectionTunnelAid=crossConnectionTunnelAid, changePhysicalPortServiceTraceTransmitOpspOduTcmC=changePhysicalPortServiceTraceTransmitOpspOduTcmC, entityDcnSlotNo=entityDcnSlotNo, haProtectionIndexAid=haProtectionIndexAid, authTrapUserName=authTrapUserName, entityFacilitySlotNo=entityFacilitySlotNo, containerVomExtNo=containerVomExtNo, alarmExternalPortEntry=alarmExternalPortEntry, terminationPointTable=terminationPointTable, entityFfpSlotNo=entityFfpSlotNo, licenseManagerShelfNo=licenseManagerShelfNo, downwardFacilityShelfNo=downwardFacilityShelfNo, alarmLaserBiasCurrentNormalizedtooHigh=alarmLaserBiasCurrentNormalizedtooHigh, alarmProfileSeverityValue=alarmProfileSeverityValue, optThresholdConfigLowConfig=optThresholdConfigLowConfig, physicalPortDispertionConfig=physicalPortDispertionConfig, containerVomClassName=containerVomClassName, entityCrossDcnType=entityCrossDcnType, lanAuthType=lanAuthType, entityEqptClass=entityEqptClass, alarmSysEntry=alarmSysEntry, alarmSignalDegradeScn=alarmSignalDegradeScn, ntpIPv4Table=ntpIPv4Table, alarmMaxPowerConsEquipModulesToHigh=alarmMaxPowerConsEquipModulesToHigh, ffpFarEndIp=ffpFarEndIp, downwardEqptClassName=downwardEqptClassName, shelfTransmitChannel=shelfTransmitChannel, endOfDcnReferByTable=endOfDcnReferByTable, containerFanExtNo=containerFanExtNo, physicalPortDuplexMode=physicalPortDuplexMode, neCommandSourceIp=neCommandSourceIp, userManagementPasswordMinAge=userManagementPasswordMinAge, physicalPortVoaMode=physicalPortVoaMode, lanRetransmitInterval=lanRetransmitInterval, entityContainerParentId=entityContainerParentId, fileDataMpState=fileDataMpState, moduleForceConfig=moduleForceConfig, virtualPortTraceTransmitOpspOduTcmB=virtualPortTraceTransmitOpspOduTcmB, transientThres1DayExceededOduTcmASES=transientThres1DayExceededOduTcmASES, alarmVoltageOutOfRange=alarmVoltageOutOfRange, advaInventoryClass=advaInventoryClass, physicalPortLaneChannel4=physicalPortLaneChannel4, ipv6InActRoutesMetric=ipv6InActRoutesMetric, containerCrossConnFromPointClassName=containerCrossConnFromPointClassName, shelfConnMdix=shelfConnMdix, endOfDownwardEnvTable=endOfDownwardEnvTable, upwardEqptExtNo=upwardEqptExtNo, containerVschExtNo=containerVschExtNo, changePhysicalPortServiceTraceTransmitOpspOtu=changePhysicalPortServiceTraceTransmitOpspOtu, alarmThres15MinExceededOduTcmBSES=alarmThres15MinExceededOduTcmBSES, notAssignableExternalPortIndexNo3=notAssignableExternalPortIndexNo3, containerCrossConnToSlotNo=containerCrossConnToSlotNo, trapSinkEntry=trapSinkEntry, entityOpticalMuxShelfNo=entityOpticalMuxShelfNo, licenseManagerLicenseServerStatus=licenseManagerLicenseServerStatus, alarmLocalFault=alarmLocalFault, ipv6InActRoutesDestIp=ipv6InActRoutesDestIp, virtualPortTunnelAid=virtualPortTunnelAid, lldpTimeTillAgeOut=lldpTimeTillAgeOut, containerModPortNo=containerModPortNo, containerVch1SlotNo=containerVch1SlotNo, endOfRelationship=endOfRelationship, optIntervalPm1dayMean=optIntervalPm1dayMean, entityTerminPointParentId=entityTerminPointParentId, externalVchLineCoding=externalVchLineCoding, ntpIPv4RowStatus=ntpIPv4RowStatus, transientBootUpRejected=transientBootUpRejected, alarmSysAffect=alarmSysAffect, alarmLicenseType=alarmLicenseType, upwardEnvSlotNo=upwardEnvSlotNo, alarmDispertionTunningCondition=alarmDispertionTunningCondition, containerCrsOptLineFromPointIndexNo2=containerCrsOptLineFromPointIndexNo2, containerVomPortNo=containerVomPortNo, entityCrsOptLineToIndexNo3=entityCrsOptLineToIndexNo3, virtualPortAdmin=virtualPortAdmin, containerTerminPointClass=containerTerminPointClass, alarmAutoShutdownSendingOciOdu=alarmAutoShutdownSendingOciOdu, terminationPointPartnerAid=terminationPointPartnerAid, downwardShelfConnChildId=downwardShelfConnChildId, ratStartPointClass=ratStartPointClass, physicalPortTestPrbsRcvMode=physicalPortTestPrbsRcvMode, entityOpticalMuxExtNo=entityOpticalMuxExtNo, licenseEntry=licenseEntry, downwardShelfConnClassName=downwardShelfConnClassName, alarmEncryptionModuleTamperDetected=alarmEncryptionModuleTamperDetected, alarmAlarmIndicationSignalOduTcmC=alarmAlarmIndicationSignalOduTcmC, downwardTerminPointClassName=downwardTerminPointClassName, endOfShelfTable=endOfShelfTable, fanSecondaryStates=fanSecondaryStates, optIntervalPm1weekLow=optIntervalPm1weekLow, alarmServerSignalFailLine=alarmServerSignalFailLine, ipv6ActRoutesNextHopIp=ipv6ActRoutesNextHopIp, alarmNtpIPv4Affect=alarmNtpIPv4Affect, alarmLossofTandemConnectionOduTcmC=alarmLossofTandemConnectionOduTcmC, containerShelfPortNo=containerShelfPortNo, changePhysicalPortServiceTraceExpectedOduTcmB=changePhysicalPortServiceTraceExpectedOduTcmB, alarmSeverityEqptTable=alarmSeverityEqptTable, alarmAseTableGenProgress=alarmAseTableGenProgress, alarmRamanPumpPwrTooLow=alarmRamanPumpPwrTooLow, terminationPointFiberDetect=terminationPointFiberDetect, endOfRatAnalyzerTable=endOfRatAnalyzerTable, scTrmtFrequency=scTrmtFrequency, haSoftwareVersion=haSoftwareVersion, terminationPointRowStatus=terminationPointRowStatus, physicalPortTraceRcvDapiTcmb=physicalPortTraceRcvDapiTcmb, virtualPortSigDegPeriodOduTcmA=virtualPortSigDegPeriodOduTcmA, changePhysicalPortServiceTimModeOduTcmA=changePhysicalPortServiceTimModeOduTcmA, scConnector=scConnector, virtualPortSecondaryStates=virtualPortSecondaryStates, upwardEnvParentId=upwardEnvParentId, crossConnectionPathProtection=crossConnectionPathProtection, upwardShelfConnEntry=upwardShelfConnEntry, containerOperState=containerOperState, containerTerminPointIndexNo3=containerTerminPointIndexNo3, entityCrossDcnEntry=entityCrossDcnEntry, lanFrcdLogin=lanFrcdLogin, containerFanTable=containerFanTable, artificialEntity=artificialEntity, fanTable=fanTable, opticalMuxFiberBrand=opticalMuxFiberBrand, transientFwpInstallStarted=transientFwpInstallStarted, pmSnapshotCurrentRxLineAtten=pmSnapshotCurrentRxLineAtten, upwardFacilityParentId=upwardFacilityParentId, entityOpticalMuxTableId=entityOpticalMuxTableId, scSecondaryStates=scSecondaryStates, physicalPortTxOnTimer=physicalPortTxOnTimer, physicalPortTributarySlotMethod=physicalPortTributarySlotMethod, alarmOTDRMeasuringinProgress=alarmOTDRMeasuringinProgress, alarmAcpPartnerUnassigned=alarmAcpPartnerUnassigned, containerPlugClassName=containerPlugClassName, oprThresholdConfigHighConfig=oprThresholdConfigHighConfig, containerModAidString=containerModAidString, opticalMuxGainRange=opticalMuxGainRange, alarmSignalDegradationonLinkVector=alarmSignalDegradationonLinkVector, changePhysicalPortServiceTxOnTimer=changePhysicalPortServiceTxOnTimer, alarmLinkFailToPartner2=alarmLinkFailToPartner2, optIntervalPm1weekNumber=optIntervalPm1weekNumber, pmSnapshotCurrentTerminPointFiberConnAtten=pmSnapshotCurrentTerminPointFiberConnAtten, physicalPortDataLayerPmReset=physicalPortDataLayerPmReset, alarmThres15MinExceededOtuES=alarmThres15MinExceededOtuES, containerVomShelfNo=containerVomShelfNo, scDataLayerPmReset=scDataLayerPmReset, endOfShelfConnMgmt=endOfShelfConnMgmt, opticalMuxRowStatus=opticalMuxRowStatus, upwardOptLineShelfNo=upwardOptLineShelfNo, alarmSeverityNtpIPv4Table=alarmSeverityNtpIPv4Table, privilegeChangeDuration=privilegeChangeDuration, virtualPortTraceExpectedOduTcmB=virtualPortTraceExpectedOduTcmB, notAssignableShelfConnIndexNo4=notAssignableShelfConnIndexNo4, alarmThres15MinExceededFecBERCE=alarmThres15MinExceededFecBERCE, alarmDatabaseFailure=alarmDatabaseFailure, neCommandPath=neCommandPath, upwardFacilityPortNo=upwardFacilityPortNo, ffpSignalDegradeSwitching=ffpSignalDegradeSwitching, transientCryptoTagFailurePeriodChanged=transientCryptoTagFailurePeriodChanged, moduleOscUsage=moduleOscUsage, entityContainerClass=entityContainerClass, containerLanTableId=containerLanTableId, crossOpticalLineTunnelAid=crossOpticalLineTunnelAid, opticalMuxAlias=opticalMuxAlias, translation=translation, containerPlugParentId=containerPlugParentId, containerEthSlotNo=containerEthSlotNo, containerOwlgIndexNo2=containerOwlgIndexNo2, alarmTemperatureTooLow=alarmTemperatureTooLow, notAssignableDcnTable=notAssignableDcnTable, notAssignableFacilityClassName=notAssignableFacilityClassName, ratBlockingEntry=ratBlockingEntry, licenseManagerLicenseServer=licenseManagerLicenseServer, linkNearEndIp=linkNearEndIp, alarmTerminPointTable=alarmTerminPointTable, alarmRAndCPortOutage=alarmRAndCPortOutage)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", fiberMap=fiberMap, containerExternalVchTable=containerExternalVchTable, envPortFacilityType=envPortFacilityType, alarmSeverityFacilityTable=alarmSeverityFacilityTable, alarmServerSignalFailRx=alarmServerSignalFailRx, virtualPortTerminationMode=virtualPortTerminationMode, downwardExternalPortIndex=downwardExternalPortIndex, containerTerminPointAidString=containerTerminPointAidString, notAssignableContainerTable=notAssignableContainerTable, externalVchMaxPmdRcv=externalVchMaxPmdRcv, entityFilterCableClass=entityFilterCableClass, changePhysicalPortServiceLinkSetup=changePhysicalPortServiceLinkSetup, autoRestart=autoRestart, alarmPowerSupplyUnitFailure=alarmPowerSupplyUnitFailure, alarmLicenseMissing=alarmLicenseMissing, eccLanAid=eccLanAid, scConnectionType=scConnectionType, channelTracesIndexNo4=channelTracesIndexNo4, entityExternalPortPortNo=entityExternalPortPortNo, entityShelfConnAidString=entityShelfConnAidString, physicalPortTimDetModeOdu=physicalPortTimDetModeOdu, changePhysicalPortServiceFlowControl=changePhysicalPortServiceFlowControl, alarmAttOnReceiverFiberHigherThanMonitor=alarmAttOnReceiverFiberHigherThanMonitor, ffpDirection=ffpDirection, endOfRatBlockingTable=endOfRatBlockingTable, terminationPointLambda=terminationPointLambda, fileDataType=fileDataType, alarmBrPwrRxTooHigh=alarmBrPwrRxTooHigh, notAssignableOpticalMuxAidString=notAssignableOpticalMuxAidString, entityFacilityClassName=entityFacilityClassName, entityContainerTable=entityContainerTable, alarmThres15MinExceededPhysConvES=alarmThres15MinExceededPhysConvES, externalOmTable=externalOmTable, channelTracesIndexNo3=channelTracesIndexNo3, plugReach=plugReach, downwardFacilityClassName=downwardFacilityClassName, lldpAdmin=lldpAdmin, opticalMuxAdmin=opticalMuxAdmin, transientNtpSrvTestSuccessed=transientNtpSrvTestSuccessed, containerCrossConnToExtNo=containerCrossConnToExtNo, alarmTraceIdentifierMismatchOduTcmB=alarmTraceIdentifierMismatchOduTcmB, transientThres1DayExceededFecSES=transientThres1DayExceededFecSES, unassignedInventoryAssignState=unassignedInventoryAssignState, containerShelfTable=containerShelfTable, alarmPumpLaser1TempTooHigh=alarmPumpLaser1TempTooHigh, notAssignableDcnIndexNo2=notAssignableDcnIndexNo2, physicalPortTimModeSonetSection=physicalPortTimModeSonetSection, entityCrsOptLineFromId=entityCrsOptLineFromId, endOfEci=endOfEci, opticalMuxConnectorType=opticalMuxConnectorType, containerPchSlotNo=containerPchSlotNo, licenseClassName=licenseClassName, entityTerminPointAssignState=entityTerminPointAssignState, upwardEnvClassName=upwardEnvClassName, alarmSysSeverity=alarmSysSeverity, alarmThres15MinExceededSonetLineES=alarmThres15MinExceededSonetLineES, downwardEqptChildId=downwardEqptChildId, authTrapUnsuccessfulAuthCount=authTrapUnsuccessfulAuthCount, endOfCrossDcnTable=endOfCrossDcnTable, transientCryptoKeyExchgFailCondClr=transientCryptoKeyExchgFailCondClr, facilityReferByTable=facilityReferByTable, protection=protection, opticalMuxForceFwdAsePilotOn=opticalMuxForceFwdAsePilotOn, changePhysicalPortServiceTcmCLevel=changePhysicalPortServiceTcmCLevel, physicalPortFarEndCommunication=physicalPortFarEndCommunication, alarmSeveritySysTable=alarmSeveritySysTable, alarmNtpIPv6Type=alarmNtpIPv6Type, lsrtempThresholdConfigLowFixed=lsrtempThresholdConfigLowFixed, alarmLossOfLaneOtu=alarmLossOfLaneOtu, entityContainerOneIndex=entityContainerOneIndex, alarmSeverityTerminPointTable=alarmSeverityTerminPointTable, containerConnectNonStdTableId=containerConnectNonStdTableId, moduleSecondaryStates=moduleSecondaryStates, notAssignableFacilityIndexNo1=notAssignableFacilityIndexNo1, alarmSeverityLicenseValue=alarmSeverityLicenseValue, endOfLanTable=endOfLanTable, advaInventoryInventoryDescription=advaInventoryInventoryDescription, virtualPortInputPower=virtualPortInputPower, ipv6InActRoutesClassName=ipv6InActRoutesClassName, scHelloInterval=scHelloInterval, removeUsers=removeUsers, notAssignableDcnClassName=notAssignableDcnClassName, physicalPortTraceTransmitSonetSection=physicalPortTraceTransmitSonetSection, oprThresholdConfigLowConfig=oprThresholdConfigLowConfig, ratAnalyzerRouteId=ratAnalyzerRouteId, endOfAlarmEnvTable=endOfAlarmEnvTable, virtualPortTimModeOduTcmA=virtualPortTimModeOduTcmA, containerModTable=containerModTable, fspR7WriteAccessTimeout=fspR7WriteAccessTimeout, oprIntervalPm1weekHigh=oprIntervalPm1weekHigh, terminationPointGroup=terminationPointGroup, entityCrossConnToExtNo=entityCrossConnToExtNo, containerConnectNonStdParentId=containerConnectNonStdParentId, alarmSeverityHdSystemTable=alarmSeverityHdSystemTable, ipConf=ipConf, containerVethExtNo=containerVethExtNo, physicalPortMaxFrameSize=physicalPortMaxFrameSize, containerExternalOmTable=containerExternalOmTable, notAssignableFacilityTable=notAssignableFacilityTable, alarmContainerEntry=alarmContainerEntry, alarmThres15MinExceededOduTcmCBbe=alarmThres15MinExceededOduTcmCBbe, containerVomAidString=containerVomAidString, advaInventoryUniversalSerialIdent=advaInventoryUniversalSerialIdent, upwardTerminPointIndexNo3=upwardTerminPointIndexNo3, physicalPortSigDegThresOduTcmC=physicalPortSigDegThresOduTcmC, ipv6InActRoutesExtNo=ipv6InActRoutesExtNo, physicalPortTraceRcvSapiTcma=physicalPortTraceRcvSapiTcma, endOfAlarmSeverityDcnTable=endOfAlarmSeverityDcnTable, moduleMaxPowerConsumption=moduleMaxPowerConsumption, moduleAvlndpF125Txcrs=moduleAvlndpF125Txcrs, endOfEnvMgmt=endOfEnvMgmt, ntpIPv6SourceIp=ntpIPv6SourceIp, entityFilterCableTable=entityFilterCableTable, alarmNetworkPathRestricted=alarmNetworkPathRestricted, showLastLoginFail=showLastLoginFail, externalVchRowStatus=externalVchRowStatus, scMtu=scMtu, userManagementPasswordExpirationPeriod=userManagementPasswordExpirationPeriod, externalPortMaxOptPowerRcv=externalPortMaxOptPowerRcv, alarmShelfmapId=alarmShelfmapId, knownHostIPv6RowStatus=knownHostIPv6RowStatus, opticalLineLogicalInterfaceAid=opticalLineLogicalInterfaceAid, scFiberType=scFiberType, containerVschAidString=containerVschAidString, alarmLaserTemperatureTooLow=alarmLaserTemperatureTooLow, containerVch1Class=containerVch1Class, containerPchExtNo=containerPchExtNo, containerEnvTable=containerEnvTable, physicalPortSignalDegradePeriod=physicalPortSignalDegradePeriod, ipv6InActRoutesDestination=ipv6InActRoutesDestination, entityEqptAidString=entityEqptAidString, eccpppIpLinkAid=eccpppIpLinkAid, containerTerminPointTableId=containerTerminPointTableId, containerCrsOptLineParentId=containerCrsOptLineParentId, entityOpticalMuxClassName=entityOpticalMuxClassName, containerRowStatus=containerRowStatus, alarmSeverityNtpIPv4Entry=alarmSeverityNtpIPv4Entry, externalPortFarEndLocation=externalPortFarEndLocation, upwardOptLineTable=upwardOptLineTable, alarmLicenseSeverity=alarmLicenseSeverity, entityEnvOneIndex=entityEnvOneIndex, moduleUpgradePorts=moduleUpgradePorts, containerCrossConnFromPointFromId=containerCrossConnFromPointFromId, neCommandPass=neCommandPass, transientProtSwToDuplexStart=transientProtSwToDuplexStart, lanOperState=lanOperState, ratBlockingAid=ratBlockingAid, containerShelfmapSerialNumInv=containerShelfmapSerialNumInv, changePhysicalPortServiceTraceTransmitDapiOtu=changePhysicalPortServiceTraceTransmitDapiOtu, notAssignableExternalPortIndexNo1=notAssignableExternalPortIndexNo1, physicalPortPathProtection=physicalPortPathProtection, crossOpticalLineRowStatus=crossOpticalLineRowStatus, physicalPortLaserTemp=physicalPortLaserTemp, transientPmSnapshotEnded=transientPmSnapshotEnded, alarmOutputPowerHigh=alarmOutputPowerHigh, notAssignableOptLineParentId=notAssignableOptLineParentId, transientEqlzReport=transientEqlzReport, entityFfpParentId=entityFfpParentId, lanAlias=lanAlias, entityDcnType=entityDcnType, containerCrossConnToShelfNo=containerCrossConnToShelfNo, downwardContainerIndex=downwardContainerIndex, containerVethTable=containerVethTable, containerShelfConnExtNo=containerShelfConnExtNo, shelfOperState=shelfOperState, opticalMuxOffsetLow=opticalMuxOffsetLow, cpRest=cpRest, plugRowStatus=plugRowStatus, containerOwlgTableId=containerOwlgTableId, physicalPortEqlzAdmin=physicalPortEqlzAdmin, notAssignableDcnIndexNo1=notAssignableDcnIndexNo1, ratSuperChannel=ratSuperChannel, ffpWorkingAid=ffpWorkingAid, alarmShelfmapEntry=alarmShelfmapEntry, moduleEntry=moduleEntry, opticalMuxOptUpdate=opticalMuxOptUpdate, containerTerminPointIndexNo4=containerTerminPointIndexNo4, containerEnvPortNo=containerEnvPortNo, upwardExternalPortShelfNo=upwardExternalPortShelfNo, alarmConfOutPowerTransTooHigh=alarmConfOutPowerTransTooHigh, optThresholdConfigHighFixed=optThresholdConfigHighFixed, lanEntry=lanEntry, alarmLossOfSignalNPort=alarmLossOfSignalNPort, alarmSeverityLicenseTable=alarmSeverityLicenseTable, notAssignableFacilityIndexNo2=notAssignableFacilityIndexNo2, shelfInternalPlugs=shelfInternalPlugs, advaInventoryFirmwarePackageRev=advaInventoryFirmwarePackageRev, alarmPartner4Deleted=alarmPartner4Deleted, unusedTrapSinkId=unusedTrapSinkId, containerVchClassName=containerVchClassName, containerTable=containerTable, alarmServerSignalFailTx=alarmServerSignalFailTx, userManagementEntry=userManagementEntry, entityCrsOptLineToId=entityCrsOptLineToId, virtualSessionUserName=virtualSessionUserName, alarmShelfmapTimeStamp=alarmShelfmapTimeStamp, entityFfpShelfNo=entityFfpShelfNo, containerConnectStdToId=containerConnectStdToId, entityTerminPointIndexNo4=entityTerminPointIndexNo4, entityCrossDcnOneIndex=entityCrossDcnOneIndex, moduleFanMode=moduleFanMode, upwardFacilityClassName=upwardFacilityClassName, containerConnectNonStdNotation=containerConnectNonStdNotation, entityCrsOptLineFromIndexNo3=entityCrsOptLineFromIndexNo3, alarmSeverityShelfConnEntry=alarmSeverityShelfConnEntry, containerExternalPortClass=containerExternalPortClass, linkTable=linkTable, downwardDcnExtNo=downwardDcnExtNo, virtualPortIngressTid=virtualPortIngressTid, notAssignableEnvIndexNo1=notAssignableEnvIndexNo1, notAssignableOpticalMuxIndexNo3=notAssignableOpticalMuxIndexNo3, transientEqlzStart=transientEqlzStart, physicalPortLaneGroup=physicalPortLaneGroup, shelfFiberBrand=shelfFiberBrand, ffpRevertMode=ffpRevertMode, containerPchParentId=containerPchParentId, alarmEqualizationProgress=alarmEqualizationProgress, containerShelfEquipmentState=containerShelfEquipmentState, containerExternalPortSlotNo=containerExternalPortSlotNo, externalVchMaxChromDisperRcv=externalVchMaxChromDisperRcv, alarmAseTableBuild=alarmAseTableBuild, entityCrossDcnClassName=entityCrossDcnClassName, physicalPortBidirectionalChannel=physicalPortBidirectionalChannel, alarmProvPayloadMismatch=alarmProvPayloadMismatch, virtualSessionEntry=virtualSessionEntry, plugFiberType=plugFiberType, physicalPortUtag=physicalPortUtag, transientEqlzRamanAdjust=transientEqlzRamanAdjust, alarmSignalDegradeOduTcmA=alarmSignalDegradeOduTcmA, containerShelfShelfNo=containerShelfShelfNo, containerCrossDcnPortNo=containerCrossDcnPortNo, containerCrsOptLineFromPointFromId=containerCrsOptLineFromPointFromId, alarmAttOnTransmitterFiberLowerThanMonitor=alarmAttOnTransmitterFiberLowerThanMonitor, moduleNodeIpAddress=moduleNodeIpAddress, transientThres1DayExceededSonetLineCV=transientThres1DayExceededSonetLineCV, containerScSlotNo=containerScSlotNo, endOfNotAssignableFacilityTable=endOfNotAssignableFacilityTable, containerVch1Entry=containerVch1Entry, lanIpMask=lanIpMask, alarmLicenseManagerEntry=alarmLicenseManagerEntry, ratChEgress=ratChEgress, alarmPumpLaser2TempTooLow=alarmPumpLaser2TempTooLow, communityIPv6PrefixLen=communityIPv6PrefixLen, transientFwpInstallFailed=transientFwpInstallFailed, transientBootUpStarted=transientBootUpStarted, downwardFacilityPortNo=downwardFacilityPortNo, transientCryAuthKeyReceived=transientCryAuthKeyReceived, unassignedInventoryClass=unassignedInventoryClass, moduleSuppNetworkPlugRates=moduleSuppNetworkPlugRates, physicalPortTraceTransmitOpspOduTcmC=physicalPortTraceTransmitOpspOduTcmC, containerEccAidString=containerEccAidString, alarmAutoShutdownToHighTxPwr=alarmAutoShutdownToHighTxPwr, alarmOduTribMsiMismatch=alarmOduTribMsiMismatch, optIntervalPm1dayHigh=optIntervalPm1dayHigh)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", containerConnectNonStdTable=containerConnectNonStdTable, alarmNtpIPv4Type=alarmNtpIPv4Type, oprIntervalPm1dayTable=oprIntervalPm1dayTable, crossConnectionTable=crossConnectionTable, externalPortChannelBandwith=externalPortChannelBandwith, crossConnectionCrsType=crossConnectionCrsType, downwardOpticalMuxExtNo=downwardOpticalMuxExtNo, entityExternalPortTable=entityExternalPortTable, alarmPPortOutage=alarmPPortOutage, downwardEqptSlotNo=downwardEqptSlotNo, containerVomTable=containerVomTable, entityFilterCableIndex4=entityFilterCableIndex4, autoProvisionOL=autoProvisionOL, crossConnectionEntry=crossConnectionEntry, lanAdmin=lanAdmin, entityDcnAidString=entityDcnAidString, scMdix=scMdix, alarmLossOfTestSeqSynchOpu=alarmLossOfTestSeqSynchOpu, changePhysicalPortServiceSigDegThresSdhSection=changePhysicalPortServiceSigDegThresSdhSection, crossConnectionCrsFunction=crossConnectionCrsFunction, oprIntervalPm15minValidFlag=oprIntervalPm15minValidFlag, alarmEncryptionModuleCryPasswdMissing=alarmEncryptionModuleCryPasswdMissing, privilegeChangeRemainingTime=privilegeChangeRemainingTime, opticalMuxInitiateEqualization=opticalMuxInitiateEqualization, shelfmapSerialNumInv=shelfmapSerialNumInv, optIntervalPm15minTimeStamp=optIntervalPm15minTimeStamp, containerShelfmapEquipmentState=containerShelfmapEquipmentState, notAssignableEqptClass=notAssignableEqptClass, shelfChannelRangeProvision=shelfChannelRangeProvision, alarmSeverityContainerType=alarmSeverityContainerType, containerShelfAidString=containerShelfAidString, moduleForceDestroy=moduleForceDestroy, alarmAcpPartnerDeleted=alarmAcpPartnerDeleted, moduleGainRange=moduleGainRange, shelfConnRowStatus=shelfConnRowStatus, transientEqlzRequestDenied=transientEqlzRequestDenied, opticalLineEntry=opticalLineEntry, alarmOpenConnectionIndicationOduTcmB=alarmOpenConnectionIndicationOduTcmB, privilegeChangeState=privilegeChangeState, upwardTerminPointParentId=upwardTerminPointParentId, alarmThres15MinExceededOduTcmASES=alarmThres15MinExceededOduTcmASES, containerOwlgEntry=containerOwlgEntry, alarmThres15MinExceededCrcErrorsRcv=alarmThres15MinExceededCrcErrorsRcv, scPriority=scPriority, moduleAcp=moduleAcp, entityOpticalMuxEntry=entityOpticalMuxEntry, containerHdSystemId=containerHdSystemId, fspR7AccountStateChange=fspR7AccountStateChange, dcnReferByTerminPoint=dcnReferByTerminPoint, downwardDcnShelfNo=downwardDcnShelfNo, alarmOosDisabledLckOduTrmt=alarmOosDisabledLckOduTrmt, PYSNMP_MODULE_ID=advaFspR7, alarmOpticalMuxTimeStamp=alarmOpticalMuxTimeStamp, alarmThres15MinExceededOduTcmABbe=alarmThres15MinExceededOduTcmABbe, linkNendIPv6=linkNendIPv6, optIntervalPm15minNumber=optIntervalPm15minNumber, containerFacilityType=containerFacilityType, containerTerminPointParentId=containerTerminPointParentId, alarmContainerType=alarmContainerType, virtualSessionId=virtualSessionId, upwardEqptTable=upwardEqptTable, licenseClass=licenseClass, notAssignableEqptParentId=notAssignableEqptParentId, changePhysicalPortServiceAlsMode=changePhysicalPortServiceAlsMode, virtualPortTestPrbsRcvMode=virtualPortTestPrbsRcvMode, physicalPortTraceTransmitDapiOdu=physicalPortTraceTransmitDapiOdu, ntpIPv6Admin=ntpIPv6Admin, alarmOpticalMuxType=alarmOpticalMuxType, fileDataId=fileDataId, alarmAseTableGenFailPilot=alarmAseTableGenFailPilot, licenseLicenseCountGranted=licenseLicenseCountGranted, changePhysicalPortServiceChannelProv=changePhysicalPortServiceChannelProv, downwardDcnPortNo=downwardDcnPortNo, transientMpImported=transientMpImported, entityEqptEntry=entityEqptEntry, containerLanParentId=containerLanParentId, notAssignableExternalPortAidString=notAssignableExternalPortAidString, externalPortMaxChromDisperRcv=externalPortMaxChromDisperRcv, linkProxyArp=linkProxyArp, scMetric=scMetric, shelfConnectionType=shelfConnectionType, containerShelfClassName=containerShelfClassName, crossOpticalLineConn=crossOpticalLineConn, shelfmapEntry=shelfmapEntry, virtualSessionStatus=virtualSessionStatus, alarmChromaticDispersionTooHigh=alarmChromaticDispersionTooHigh, containerCrsOptLineFromPointClassName=containerCrsOptLineFromPointClassName, terminationPointFiberConnAtten=terminationPointFiberConnAtten, containerOtlgShelfNo=containerOtlgShelfNo, notAssignableFacilityIndexNo3=notAssignableFacilityIndexNo3, downwardDcnClassName=downwardDcnClassName, alarmLicenseManagerType=alarmLicenseManagerType, containerVch1ShelfNo=containerVch1ShelfNo, downwardFacilityExtNo=downwardFacilityExtNo, entityCrsOptLineClass=entityCrsOptLineClass, shelfConnBitrate=shelfConnBitrate, opticalMuxChannelRangeProvision=opticalMuxChannelRangeProvision, featureSpecific=featureSpecific, changePhysicalPortServiceSigDegPeriodSdhSection=changePhysicalPortServiceSigDegPeriodSdhSection, downwardShelfConnShelfNo=downwardShelfConnShelfNo, changePhysicalPortServiceXfpDecisionThres=changePhysicalPortServiceXfpDecisionThres, downwardEqptPortNo=downwardEqptPortNo, upwardOpticalMuxIndex=upwardOpticalMuxIndex, physicalPortTestPrbsTrmtMode=physicalPortTestPrbsTrmtMode, scFrcdLogin=scFrcdLogin, alarmNoLicenseFile=alarmNoLicenseFile, physicalPortTraceRcvSapiTcmc=physicalPortTraceRcvSapiTcmc, knownHostIPv6Entry=knownHostIPv6Entry, externalVchAlias=externalVchAlias, physicalPortSumTransmited=physicalPortSumTransmited, containerCrossDcnExtNo=containerCrossDcnExtNo, syslogIPv4Reporting=syslogIPv4Reporting, optIntervalPm1weekHigh=optIntervalPm1weekHigh, opticalMuxVariableGainNtoC=opticalMuxVariableGainNtoC, containerCrsOptLineFromPointClass=containerCrsOptLineFromPointClass, licenseOperState=licenseOperState, containerLinkEntry=containerLinkEntry, upwardOpticalMuxExtNo=upwardOpticalMuxExtNo, containerShelfConnAidString=containerShelfConnAidString, neCommandProtocol=neCommandProtocol, knownHostIPv6Table=knownHostIPv6Table, downwardContainerTable=downwardContainerTable, alarmSysTimeStamp=alarmSysTimeStamp, entityDcnClassName=entityDcnClassName, containerShelfConnClass=containerShelfConnClass, transientThres1DayExceededOduBbe=transientThres1DayExceededOduBbe, entityOptLineIndexNo3=entityOptLineIndexNo3, advaSecurity=advaSecurity, alarmDcnAffect=alarmDcnAffect, entityMtosiSlotsSlotNo=entityMtosiSlotsSlotNo, endOfAlarmEqptTable=endOfAlarmEqptTable, oprIntervalPm1weekTimeStamp=oprIntervalPm1weekTimeStamp, lldpChassisID=lldpChassisID, alarmSeverityDcnValue=alarmSeverityDcnValue, linkConnector=linkConnector, communityTable=communityTable, physicalPortTraceExpectedDapiOtu=physicalPortTraceExpectedDapiOtu, alarmLossOfBlockLock=alarmLossOfBlockLock, virtualPortTraceExpectedOduTcmC=virtualPortTraceExpectedOduTcmC, containerConnectStdFromClassName=containerConnectStdFromClassName, pmSnapshotHistoricalParameter=pmSnapshotHistoricalParameter, alarmAutoShutdownSendingEPC=alarmAutoShutdownSendingEPC, advaInventoryType=advaInventoryType, containerShelfConnClassName=containerShelfConnClassName, entityContainerSlotNo=entityContainerSlotNo, entityProtectionCableClassName=entityProtectionCableClassName, endOfchannelTracesTable=endOfchannelTracesTable, containerModTableId=containerModTableId, alarmThres15MinExceededSonetSectSEFS=alarmThres15MinExceededSonetSectSEFS, virtualPortOffsetLow=virtualPortOffsetLow, scTable=scTable, changePhysicalPortServiceTraceTransmitSapiOduTcmA=changePhysicalPortServiceTraceTransmitSapiOduTcmA, containerPchTable=containerPchTable, alarmAlarmIndicationSignalOtu=alarmAlarmIndicationSignalOtu, crossConnectionAdmin=crossConnectionAdmin, alarmLaserEndOfLife=alarmLaserEndOfLife, entityProtectionCableIndex3=entityProtectionCableIndex3, physicalPortOpuPayloadType=physicalPortOpuPayloadType, containerShelfmapParentId=containerShelfmapParentId, licenseSecondaryStates=licenseSecondaryStates, physicalPortInitiateEqualization=physicalPortInitiateEqualization, moduleTopologyType=moduleTopologyType, virtualPortFrequency=virtualPortFrequency, syslogIPv6Table=syslogIPv6Table, changePhysicalPortServiceOpticalSetPoint=changePhysicalPortServiceOpticalSetPoint, alarmLaserOnDelay=alarmLaserOnDelay, upwardEqptPortNo=upwardEqptPortNo, transientEqlzFailed=transientEqlzFailed, alarmSwitchFailed=alarmSwitchFailed, alarmEqlzAdjust=alarmEqlzAdjust, containerTerminPointEntry=containerTerminPointEntry, containerCrsOptLineEntry=containerCrsOptLineEntry, alarmAutoShutdownSendingIdle=alarmAutoShutdownSendingIdle, containerWchClassName=containerWchClassName, transientThres1DayExceededOduTcmCUAS=transientThres1DayExceededOduTcmCUAS, ffpCreationMethod=ffpCreationMethod, fspR7CommunityCreation=fspR7CommunityCreation, authTrapSrcIp=authTrapSrcIp, endOfDownwardContainerTable=endOfDownwardContainerTable, crossConnectionRedLineState=crossConnectionRedLineState, moduleSerialPorts=moduleSerialPorts, linkType=linkType, alarmProfileSeverityTable=alarmProfileSeverityTable, containerVschParentId=containerVschParentId, alarmThres15MinExceededOduTcmBUAS=alarmThres15MinExceededOduTcmBUAS, ipv6InActRoutesTable=ipv6InActRoutesTable, moduleAvlndpAdapt1485Txcrs=moduleAvlndpAdapt1485Txcrs, notAssignableEqptIndexNo3=notAssignableEqptIndexNo3, alarmThres15MinExceededSonetSectSES=alarmThres15MinExceededSonetSectSES, physicalPortTimActionOtu=physicalPortTimActionOtu, notAssignableShelfConnAidString=notAssignableShelfConnAidString, userManagementUsername=userManagementUsername, opticalMuxEntry=opticalMuxEntry, alarmSeverityHdSystemEntry=alarmSeverityHdSystemEntry, entityFacilityTableId=entityFacilityTableId, modulePsuOutputPower=modulePsuOutputPower, virtualPortOduTribTimeSlottNo=virtualPortOduTribTimeSlottNo, downwardOpticalMuxIndex=downwardOpticalMuxIndex, externalVchMinOptPowerRcv=externalVchMinOptPowerRcv, shelfFDports=shelfFDports, lanIPv6=lanIPv6, hdSystemAidString=hdSystemAidString, terminationPointConnType=terminationPointConnType, alarmHighBer=alarmHighBer, ffpHoldOffTime=ffpHoldOffTime, endOfAidMappingTable=endOfAidMappingTable, alarmSeverityContainerValue=alarmSeverityContainerValue, downwardOptLineTable=downwardOptLineTable, plugMaxDataRate=plugMaxDataRate, crossOpticalLineEntry=crossOpticalLineEntry, containerCrsOptLineFromPointIndexNo3=containerCrsOptLineFromPointIndexNo3, alarmSeverityOpticalMuxValue=alarmSeverityOpticalMuxValue, crossConnectionIngressNodeIp=crossConnectionIngressNodeIp, physicalPortMonLevel=physicalPortMonLevel, transientCrySwitchStarted=transientCrySwitchStarted, ratFrom=ratFrom, alarmLossOfMfiOpu=alarmLossOfMfiOpu, upwardFacilitySlotNo=upwardFacilitySlotNo, moduleGroup=moduleGroup, physicalPortIngressNodeIp=physicalPortIngressNodeIp, authTrapSuccessfulAuthCount=authTrapSuccessfulAuthCount, entityShelfConnType=entityShelfConnType, privilegeChangeUserName=privilegeChangeUserName, eccConnState=eccConnState, activeUsersTerminate=activeUsersTerminate, containerChEntry=containerChEntry, externalOmHostName=externalOmHostName, alarmLossOfPilotSignal=alarmLossOfPilotSignal, entityCrossDcnTable=entityCrossDcnTable, icmpFiltering=icmpFiltering, entityCrossDcnClass=entityCrossDcnClass, containerExternalPortExtNo=containerExternalPortExtNo, containerVch1ExtNo=containerVch1ExtNo, entityFacilityType=entityFacilityType, ratStartPointEntry=ratStartPointEntry, containerConnectStdParentId=containerConnectStdParentId, terminationPointFrequency=terminationPointFrequency, ffpSDswitching=ffpSDswitching, crossOpticalLineCrsType=crossOpticalLineCrsType, containerHdSystemParentId=containerHdSystemParentId, notAssignableShelfConnClassName=notAssignableShelfConnClassName, containerLanEntry=containerLanEntry, alarmFwdAseTableFailPilot=alarmFwdAseTableFailPilot, endOfCrossOpticalLineTable=endOfCrossOpticalLineTable, alarmDelayMeasurementProgress=alarmDelayMeasurementProgress, authTrapAccess=authTrapAccess, shelfConnectorType=shelfConnectorType, alarmRemoteDefectIndicationLowerOrderPath=alarmRemoteDefectIndicationLowerOrderPath, alarmEqptType=alarmEqptType, alarmSingleFanFailure=alarmSingleFanFailure, containerConnectNonStdFromIndexNo1=containerConnectNonStdFromIndexNo1, alarmPcsSignalDegrade=alarmPcsSignalDegrade, alarmAutoShutdownVfCSF=alarmAutoShutdownVfCSF, physicalPortChannelRangeProvision=physicalPortChannelRangeProvision)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", downwardEnvShelfNo=downwardEnvShelfNo, alarmAutomaticPowerReductionForEyeSafety=alarmAutomaticPowerReductionForEyeSafety, optIntervalPm15minValidFlag=optIntervalPm15minValidFlag, alarmWtrTimerRunning=alarmWtrTimerRunning, containerLanExtNo=containerLanExtNo, entityCrossConnAidString=entityCrossConnAidString, containerCrossDcnSlotNo=containerCrossDcnSlotNo, virtualPortLagActivePorts=virtualPortLagActivePorts, downwardOpticalMuxChildId=downwardOpticalMuxChildId, alarmFacilityForcedOn=alarmFacilityForcedOn, alarmSignalToNoiseRatioTooLow=alarmSignalToNoiseRatioTooLow, downwardDcnChildId=downwardDcnChildId, transientThres1DayExceededOtuSES=transientThres1DayExceededOtuSES, opticalMuxReferByEntry=opticalMuxReferByEntry, linkEntry=linkEntry, ratChIngress=ratChIngress, entityTerminPointEntry=entityTerminPointEntry, lanTable=lanTable, alarmLosAttProgress=alarmLosAttProgress, virtualPortTraceRcvDapiTcma=virtualPortTraceRcvDapiTcma, scRetransmitInterval=scRetransmitInterval, alarmReceiverOverloadProtection=alarmReceiverOverloadProtection, containerOwlgParentId=containerOwlgParentId, linkValidSigTimer=linkValidSigTimer, fileDataVersion=fileDataVersion, specificMgmt=specificMgmt, virtualPortType=virtualPortType, lldpSystemOperationList=lldpSystemOperationList, writeAccessRequestTimeout=writeAccessRequestTimeout, virtualPortTraceTransmitDapiOduTcmC=virtualPortTraceTransmitDapiOduTcmC, alarmLossOfPointerLowerOrderPath=alarmLossOfPointerLowerOrderPath, terminationPointDirection=terminationPointDirection, containerOlParentId=containerOlParentId, aidMappingEntry=aidMappingEntry, physicalPortInhibitSwitchToProt=physicalPortInhibitSwitchToProt, alarmLossofMultiframeLowerOrderPath=alarmLossofMultiframeLowerOrderPath, endOfDownwardFacilityTable=endOfDownwardFacilityTable, opticalMuxReferByTable=opticalMuxReferByTable, containerConnectNonStdToIndexNo4=containerConnectNonStdToIndexNo4, alarmIncompatibleVersion=alarmIncompatibleVersion, alarmOpmAbnormalCondition=alarmOpmAbnormalCondition, entityContainerShelfNo=entityContainerShelfNo, containerShelfConnPortNo=containerShelfConnPortNo, physicalPortVoaSetpoint=physicalPortVoaSetpoint, entityOpticalMuxOneIndex=entityOpticalMuxOneIndex, alarmAutoServiceMismatch=alarmAutoServiceMismatch, sslKeyLength=sslKeyLength, entityExternalPortEntry=entityExternalPortEntry, transientCryptoFwpRevChanged=transientCryptoFwpRevChanged, plugLength=plugLength, fanOperState=fanOperState, upwardTerminPointIndex=upwardTerminPointIndex, alarmLicenseAffect=alarmLicenseAffect, accessWarning=accessWarning, alarmPumpLaser4TempTooHigh=alarmPumpLaser4TempTooHigh, ratStartPointChannelGroup=ratStartPointChannelGroup, notAssignableOpticalMuxIndexNo1=notAssignableOpticalMuxIndexNo1, containerShelfConnEntry=containerShelfConnEntry, alarmShelfConnTable=alarmShelfConnTable, oprIntervalPm15minTimeStamp=oprIntervalPm15minTimeStamp, containerEccExtNo=containerEccExtNo, virtualPortTraceTransmitOpspOdu=virtualPortTraceTransmitOpspOdu, alarmLossOfCoupling=alarmLossOfCoupling, physicalPortLaneChannel=physicalPortLaneChannel, alarmFarEndIpAddressUnknown=alarmFarEndIpAddressUnknown, containerVethShelfNo=containerVethShelfNo, physicalPortLagKey=physicalPortLagKey, moduleActivateDetect=moduleActivateDetect, ntpIPv6OperState=ntpIPv6OperState, alarmFacilityTable=alarmFacilityTable, userManagementLastLoginSuccessInfo=userManagementLastLoginSuccessInfo, ipv6InActRoutesEntry=ipv6InActRoutesEntry, entityOptLineOneIndex=entityOptLineOneIndex, alarmLinkFailToPartner3=alarmLinkFailToPartner3, alarmThres15MinExceededPhysConvCVDE=alarmThres15MinExceededPhysConvCVDE, ffpProtectionType=ffpProtectionType, physicalPortDelayMeasurementStatus=physicalPortDelayMeasurementStatus, dcnMgmt=dcnMgmt, pmSnapshotHistoricalTerminPointNumber=pmSnapshotHistoricalTerminPointNumber, containerEthPortNo=containerEthPortNo, alarmThres15MinExceededOduSES=alarmThres15MinExceededOduSES, endOfPlugTable=endOfPlugTable, scOspf=scOspf, trap=trap, alarmContainerSeverity=alarmContainerSeverity, transientThres1DayExceededOduTcmBSES=transientThres1DayExceededOduTcmBSES, scIpMask=scIpMask, alarmSeverityHdSystemId=alarmSeverityHdSystemId, shelfRackNumber=shelfRackNumber, containerChTable=containerChTable, opticalMuxMultiplexLevel=opticalMuxMultiplexLevel, alarmContainerTimeStamp=alarmContainerTimeStamp, alarmSeverityEqptType=alarmSeverityEqptType, alarmEncryptionPortEncryptionSwitchedOff=alarmEncryptionPortEncryptionSwitchedOff, alarmTurnupFailed=alarmTurnupFailed, changePhysicalPortServiceAdmin=changePhysicalPortServiceAdmin, upwardContainerShelfNo=upwardContainerShelfNo, notAssignableDcnClass=notAssignableDcnClass, endOfNotAssignableShelfConnTable=endOfNotAssignableShelfConnTable, physicalPortTraceRcvSapiOtu=physicalPortTraceRcvSapiOtu, endOfNotAssignableEnvTable=endOfNotAssignableEnvTable, alarmEnvAffect=alarmEnvAffect, entityConnectionTable=entityConnectionTable, transientThres1DayExceededFecUBE=transientThres1DayExceededFecUBE, externalVchMinChromDisperRcv=externalVchMinChromDisperRcv, containerShelfmapClass=containerShelfmapClass, alarmShelfmapType=alarmShelfmapType, tools=tools, notAssignableShelfConnIndexNo2=notAssignableShelfConnIndexNo2, eccEntry=eccEntry, containerFanEquipmentState=containerFanEquipmentState, pmSnapshotCurrentAttenuation=pmSnapshotCurrentAttenuation, alarmBatteryNoCharge=alarmBatteryNoCharge, ratAnalyzerRouteType=ratAnalyzerRouteType, entityCrsOptLineFromIndexNo1=entityCrsOptLineFromIndexNo1, physicalPortTxOffOnTm=physicalPortTxOffOnTm, fspR7StateChangeTrap=fspR7StateChangeTrap, virtualPortTraceRcvSapiOdu=virtualPortTraceRcvSapiOdu, hdSystemClass=hdSystemClass, containerCrossConnEntry=containerCrossConnEntry, upwardEqptClassName=upwardEqptClassName, containerVethParentId=containerVethParentId, containerOlIndexNo2=containerOlIndexNo2, entityOpticalMuxType=entityOpticalMuxType, moduleAvlndpF2967Rxcrs=moduleAvlndpF2967Rxcrs, alarmVfClientSignalFail=alarmVfClientSignalFail, alarmHdSystemType=alarmHdSystemType, crossDcnTable=crossDcnTable, privilegeChangeEntry=privilegeChangeEntry, physicalPortLagState=physicalPortLagState, ipSettings=ipSettings, moduleScrambling=moduleScrambling, alarmFwdAseTableOnPilot=alarmFwdAseTableOnPilot, containerExternalPortAidString=containerExternalPortAidString, physicalPortLagFendState=physicalPortLagFendState, containerCrsOptLineFromIndexNo3=containerCrsOptLineFromIndexNo3, virtualPortRedLineState=virtualPortRedLineState, moduleTopology=moduleTopology, alarmOpticalMuxEntry=alarmOpticalMuxEntry, changePhysicalPortServiceTxOffOnTm=changePhysicalPortServiceTxOffOnTm, virtualPortInhibitSwitchToWork=virtualPortInhibitSwitchToWork, notAssignables=notAssignables, entityCrossConnTableId=entityCrossConnTableId, physicalPortLaneChannelSetting=physicalPortLaneChannelSetting, endOfAlarmProfileSeverityTable=endOfAlarmProfileSeverityTable, transientThres1DayExceededOduTcmAES=transientThres1DayExceededOduTcmAES, communityRowStatus=communityRowStatus, lanIpAddrMonitor=lanIpAddrMonitor, oprIntervalPm1dayMean=oprIntervalPm1dayMean, physicalPortChannelSpacingProvision=physicalPortChannelSpacingProvision, moduleAdmin=moduleAdmin, containerConnectStdToIndexNo1=containerConnectStdToIndexNo1, containerEccShelfNo=containerEccShelfNo, lanRowStatus=lanRowStatus, ospfConf=ospfConf, alarmFwpMismatchDownloadNotServiceAffecting=alarmFwpMismatchDownloadNotServiceAffecting, containerExternalOmSlotNo=containerExternalOmSlotNo, containerVchTable=containerVchTable, lanIpMaskMonitor=lanIpMaskMonitor, alarmLinkControlProtocolFailure=alarmLinkControlProtocolFailure, alarmLinkFailToPartner4=alarmLinkFailToPartner4, alarmInputVoltageLow=alarmInputVoltageLow, virtualPortTraceRcvDapiTcmb=virtualPortTraceRcvDapiTcmb, shelfNetworkPorts=shelfNetworkPorts, containerCrossConnFromPortNo=containerCrossConnFromPortNo, pmSnapshotCurrentBckreflecPwrRx=pmSnapshotCurrentBckreflecPwrRx, virtualPortTraceRcvOpspOdu=virtualPortTraceRcvOpspOdu, containerOlIndexNo3=containerOlIndexNo3, eccMaxDataRate=eccMaxDataRate, lanIPv6PrefixLen=lanIPv6PrefixLen, alarmPayloadMismatchLowerOrderPath=alarmPayloadMismatchLowerOrderPath, containerCrossConnFromExtNo=containerCrossConnFromExtNo, advaInventoryTable=advaInventoryTable, ipv6InActRoutesPrefixLen=ipv6InActRoutesPrefixLen, alarmOtuServerSignalFail=alarmOtuServerSignalFail, moduleChannelSpacingProvision=moduleChannelSpacingProvision, containerFfpClassName=containerFfpClassName, alarmMansw=alarmMansw, notAssignableEqptIndexNo2=notAssignableEqptIndexNo2, downwardEqptEntry=downwardEqptEntry, entityCrsOptLineToIndexNo4=entityCrsOptLineToIndexNo4, entityEnvTable=entityEnvTable, entityCrsOptLineEntry=entityCrsOptLineEntry, physicalPortAvlntsTxcrs=physicalPortAvlntsTxcrs, opticalMuxFiberType=opticalMuxFiberType, envPortEntry=envPortEntry, alarmUnequippedHigherOrderPath=alarmUnequippedHigherOrderPath, downwardOptLineEntry=downwardOptLineEntry, notAssignableOpticalMuxParentId=notAssignableOpticalMuxParentId, syslogIPv4Ip=syslogIPv4Ip, downwardShelfConnExtNo=downwardShelfConnExtNo, ratBlockingTable=ratBlockingTable, lldpLLDPChassisType=lldpLLDPChassisType, optIntervalPm1dayEntry=optIntervalPm1dayEntry, moduleDescription=moduleDescription, alarmSeverityEnvTable=alarmSeverityEnvTable, scLanAid=scLanAid, linkNendLogicalIpAddr=linkNendLogicalIpAddr, moduleAvlndpGbeRxcrs=moduleAvlndpGbeRxcrs, entityCrossConnToClassName=entityCrossConnToClassName, containerOmShelfNo=containerOmShelfNo, alarmSeverityDcnTable=alarmSeverityDcnTable, externalPortChromDisperTx=externalPortChromDisperTx, entityFacilityClass=entityFacilityClass, transientThres1DayExceededOtuES=transientThres1DayExceededOtuES, alarmGfpLossOfClientSig=alarmGfpLossOfClientSig, lanMtu=lanMtu, linkRetransmitInterval=linkRetransmitInterval, fspR7PrivilegeChange=fspR7PrivilegeChange, fileDataCreationTime=fileDataCreationTime, sshHostKeyLength=sshHostKeyLength, alarmAcpChannelUnAvail=alarmAcpChannelUnAvail, scChannel=scChannel, trapSinkId=trapSinkId, plugChannelRangeProvision=plugChannelRangeProvision, physicalPortLaneChannel1=physicalPortLaneChannel1, shelfShelfId=shelfShelfId, containerTerminPointIndexNo1=containerTerminPointIndexNo1, alarmEncryptionPortKeyInitExchgMissed=alarmEncryptionPortKeyInitExchgMissed, alarmApsProtocolFailure=alarmApsProtocolFailure, containerEnvEntry=containerEnvEntry, externalPortLineCoding=externalPortLineCoding, snmpSettings=snmpSettings, pmSnapshotCurrentVariableGain=pmSnapshotCurrentVariableGain, moduleSuppClientPlugTypes=moduleSuppClientPlugTypes, alarmRoundTripDelayTooHigh=alarmRoundTripDelayTooHigh, containerPlugEntry=containerPlugEntry, entityConnectionEntry=entityConnectionEntry, fileDataMpTag=fileDataMpTag, transientWorkingSwitchedtoProtection=transientWorkingSwitchedtoProtection, alarmMpFileMissing=alarmMpFileMissing, eccConnectionType=eccConnectionType, ntpIPv6Entry=ntpIPv6Entry, notAssignableExternalPortClassName=notAssignableExternalPortClassName, changePhysicalPortServiceSigDegPeriodOduTcmA=changePhysicalPortServiceSigDegPeriodOduTcmA, alarmDcnCommunicationFail=alarmDcnCommunicationFail, virtualPortSigDegThresOdu=virtualPortSigDegThresOdu, alarmOscPwrTooLow=alarmOscPwrTooLow, alarmSeverityShelfConnTable=alarmSeverityShelfConnTable, shelfAirFilterChange=shelfAirFilterChange, userManagementPasswordHashType=userManagementPasswordHashType, downwardShelfConnSlotNo=downwardShelfConnSlotNo, opticalLineRowStatus=opticalLineRowStatus, linkFendLogicalIpAddr=linkFendLogicalIpAddr, alarmSeverityShelfmapType=alarmSeverityShelfmapType, containerEthTableId=containerEthTableId, transientIntrusionTx=transientIntrusionTx, scGatewayProxyArp=scGatewayProxyArp, unassignedInventoryOneIndex=unassignedInventoryOneIndex, alarmEncryptionModuleSelfTestFailCritical=alarmEncryptionModuleSelfTestFailCritical, alarmLatencyTooHigh=alarmLatencyTooHigh, lanMetric=lanMetric, changePhysicalPortServiceLaserDelayTimer=changePhysicalPortServiceLaserDelayTimer, containerVschTable=containerVschTable)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", lldpSystemCapabilityList=lldpSystemCapabilityList, physicalPortCbsTrmt=physicalPortCbsTrmt, alarmFacilitySeverity=alarmFacilitySeverity, changePhysicalPortServiceSigDegThresSdhMs=changePhysicalPortServiceSigDegThresSdhMs, ffpPeerAid=ffpPeerAid, communityId=communityId, alarmNtpIPv4Entry=alarmNtpIPv4Entry, privilegeChangeRequestedPrivilege=privilegeChangeRequestedPrivilege, upwardFacilityEntry=upwardFacilityEntry, containerEccTable=containerEccTable, externalPortBitrate=externalPortBitrate, crossOpticalLineTable=crossOpticalLineTable, opticalMuxChannelsNumber=opticalMuxChannelsNumber, containerConnectStdFromId=containerConnectStdFromId, startPmSnapshot=startPmSnapshot, physicalPortVethAid=physicalPortVethAid, transientTopologyDataInvalid=transientTopologyDataInvalid, containerScPortNo=containerScPortNo, envPortTelemetry=envPortTelemetry, entityCrsOptLineFromIndexNo4=entityCrsOptLineFromIndexNo4, virtualPortFarEndProtectionState=virtualPortFarEndProtectionState, opticalMuxFarEndSigDegThres=opticalMuxFarEndSigDegThres, alarmSeverityLicenseEntry=alarmSeverityLicenseEntry, virtualSessionIpAddress=virtualSessionIpAddress, opticalLineMgmt=opticalLineMgmt, userManagementSso2fa=userManagementSso2fa, lldpOperState=lldpOperState, alarmPumpLaser3TempTooLow=alarmPumpLaser3TempTooLow, userManagementPrivacyKeyType=userManagementPrivacyKeyType, accessWarningMessage=accessWarningMessage, plugConnector=plugConnector, alarmSubModuleTempTooHigh=alarmSubModuleTempTooHigh, externalPortReferByEntry=externalPortReferByEntry, transientThres1DayExceededSonetSectBbe=transientThres1DayExceededSonetSectBbe, endOfExternalPortReferByTabke=endOfExternalPortReferByTabke, entityTerminPointReferencedTo=entityTerminPointReferencedTo, trapSinkPort=trapSinkPort, entityFacilityOneIndex=entityFacilityOneIndex, containerConnectNonStdToId=containerConnectNonStdToId, alarmSeverityLicenseManagerType=alarmSeverityLicenseManagerType, containerCrsOptLineClass=containerCrsOptLineClass, upwardOpticalMuxSlotNo=upwardOpticalMuxSlotNo, virtualSessionChangeReason=virtualSessionChangeReason, moduleSupply=moduleSupply, physicalPortTraceTransmitDapiOduTcmC=physicalPortTraceTransmitDapiOduTcmC, containerExternalVchParentId=containerExternalVchParentId, alarmLossOfSignalTransmitter=alarmLossOfSignalTransmitter, transientCryptoRtf=transientCryptoRtf, privilegeChangeTable=privilegeChangeTable, transientCryptoAuthPasswdChanged=transientCryptoAuthPasswdChanged, advaInventoryAidString=advaInventoryAidString, containerScParentId=containerScParentId, virtualPortCbsRcv=virtualPortCbsRcv, moduleMuxMethod=moduleMuxMethod, plugPlugMode=plugPlugMode, ffpSignalFailureSwitching=ffpSignalFailureSwitching, downwardFacilityChildId=downwardFacilityChildId, notAssignableOpticalMuxClass=notAssignableOpticalMuxClass, containerEnvAidString=containerEnvAidString, alarmThres15MinExceededPhysConvCV=alarmThres15MinExceededPhysConvCV, changePhysicalPortServiceSigDegThresOdu=changePhysicalPortServiceSigDegThresOdu, entityShelfConnClassName=entityShelfConnClassName, crossConnectionCrsContAidListTwo=crossConnectionCrsContAidListTwo, physicalPortFrequency=physicalPortFrequency, physicalPortFecType=physicalPortFecType, virtualPortTraceExpectedOduTcmA=virtualPortTraceExpectedOduTcmA, alarmDatabaseVersionMismatch=alarmDatabaseVersionMismatch, endOfUpwardOptLineTable=endOfUpwardOptLineTable, entityMtosiSlotsClass=entityMtosiSlotsClass, alarmSeverityShelfmapValue=alarmSeverityShelfmapValue, alarmAlarmIndicationSignalOpu=alarmAlarmIndicationSignalOpu, alarmServerSignalFailPayload=alarmServerSignalFailPayload, alarmSeverityContainerEntry=alarmSeverityContainerEntry, shelfConnFacilityType=shelfConnFacilityType, trapSinkIpMode=trapSinkIpMode, advaInventoryCfModel=advaInventoryCfModel, transientThres1DayExceededSonetLineES=transientThres1DayExceededSonetLineES, upwardDcnClassName=upwardDcnClassName, virtualPortTraceTransmitSapiOduTcmA=virtualPortTraceTransmitSapiOduTcmA, alarmOutputPowerFault=alarmOutputPowerFault, entityDcnClass=entityDcnClass, notAssignableContainerIndexNo4=notAssignableContainerIndexNo4, advaInventoryCapabilityLevel=advaInventoryCapabilityLevel, containerCrossConnFromPointParentId=containerCrossConnFromPointParentId, containerConnectNonStdToIndexNo2=containerConnectNonStdToIndexNo2, physicalPortTerminationMode=physicalPortTerminationMode, scAdmin=scAdmin, containerConnectNonStdEntry=containerConnectNonStdEntry, alarmLinkDown=alarmLinkDown, hdSystemAdmin=hdSystemAdmin, entityExternalPortType=entityExternalPortType, pmSnapshotCurrentEntry=pmSnapshotCurrentEntry, upwardOpticalMuxShelfNo=upwardOpticalMuxShelfNo, upwardEqptParentId=upwardEqptParentId, containerCrossConnParentId=containerCrossConnParentId, alarmCarrierFreqOffsetTooLow=alarmCarrierFreqOffsetTooLow, containerCrossConnFromPointShelfNo=containerCrossConnFromPointShelfNo, alarmShelfConnType=alarmShelfConnType, transientProtSwToDuplexFail=transientProtSwToDuplexFail, changePhysicalPortServiceTraceTransmitDapiOdu=changePhysicalPortServiceTraceTransmitDapiOdu, physicalPortSigDegThreshold=physicalPortSigDegThreshold, physicalPortTraceRcvOpspTcma=physicalPortTraceRcvOpspTcma, advaInventoryClassName=advaInventoryClassName, alarmLossofMultiframeHigherOrderPath=alarmLossofMultiframeHigherOrderPath, alarmProfileSeverityAidType=alarmProfileSeverityAidType, alarmThres15MinExceededSonetLineSES=alarmThres15MinExceededSonetLineSES, alarmProfileSeverityEntry=alarmProfileSeverityEntry, alarmMultipleFanFailure=alarmMultipleFanFailure, lldpTable=lldpTable, transientFwpSwitchFailed=transientFwpSwitchFailed, pmSnapshotCurrentTerminPointInputPower=pmSnapshotCurrentTerminPointInputPower, entityFfpAidString=entityFfpAidString, scDhcpStartAddr=scDhcpStartAddr, containerVethPortNo=containerVethPortNo, licenseAidString=licenseAidString, eccGccUsage=eccGccUsage, physicalPortLaneChannel2=physicalPortLaneChannel2, upwardContainerIndex=upwardContainerIndex, alarmLicenseManagerSeverity=alarmLicenseManagerSeverity, entityCrossConnTable=entityCrossConnTable, rpFilter=rpFilter, lanSecondaryStates=lanSecondaryStates, userManagementLastLoginFailInfo=userManagementLastLoginFailInfo, physicalPortTraceFormSonetSection=physicalPortTraceFormSonetSection, alarmSeverityNtpIPv6Value=alarmSeverityNtpIPv6Value, entityCrossDcnTableId=entityCrossDcnTableId, containerModEquipmentState=containerModEquipmentState, userManagementTable=userManagementTable, notAssignableOptLineIndexNo4=notAssignableOptLineIndexNo4, endOfModuleTable=endOfModuleTable, ipv6=ipv6, aidMappingString=aidMappingString, crossDcnRowStatus=crossDcnRowStatus, changePhysicalPortServiceTcmALevel=changePhysicalPortServiceTcmALevel, containerVschEntry=containerVschEntry, ipForwarding=ipForwarding, containerCrossConnFromPointTableId=containerCrossConnFromPointTableId, transientWorkingSwitchedBacktoWorking=transientWorkingSwitchedBacktoWorking, userManagementPrivilegeLevel=userManagementPrivilegeLevel, transientMpParameterSetFail=transientMpParameterSetFail, linkMetric=linkMetric, entityShelfConnEntry=entityShelfConnEntry, alarmMismatch=alarmMismatch, alarmThres15MinExceededSonetSectOofs=alarmThres15MinExceededSonetSectOofs, neCommandLogin=neCommandLogin, containerPchAidString=containerPchAidString, notAssignableExternalPortIndexNo2=notAssignableExternalPortIndexNo2, endOfLicensesMgmt=endOfLicensesMgmt, endOfAlarmSysTable=endOfAlarmSysTable, linkAdmin=linkAdmin, changePhysicalPortServiceTimModeOduTcmC=changePhysicalPortServiceTimModeOduTcmC, physicalPortLaserReleaseTimer=physicalPortLaserReleaseTimer, shelfConnTable=shelfConnTable, alarmAlarmIndicationSignalHigherOrderPath=alarmAlarmIndicationSignalHigherOrderPath, licenseManagerRowStatus=licenseManagerRowStatus, alarmInputTIF=alarmInputTIF, entityCrossConnFromClassName=entityCrossConnFromClassName, endOfUpwardOpticalMuxTable=endOfUpwardOpticalMuxTable, endOfEqptMgmt=endOfEqptMgmt, alarmAseLow=alarmAseLow, containerPlugSlotNo=containerPlugSlotNo, alarmDcnEntry=alarmDcnEntry, transientThres15DayExceededBbePcs=transientThres15DayExceededBbePcs, shelfTable=shelfTable, opticalMuxConnectionType=opticalMuxConnectionType, physicalPortTraceTransmitOpspOduTcmB=physicalPortTraceTransmitOpspOduTcmB, syslogIPv6SourceIp=syslogIPv6SourceIp, upwardEqptSlotNo=upwardEqptSlotNo, unassignedInventoryParentId=unassignedInventoryParentId, optThresholdConfigHighConfig=optThresholdConfigHighConfig, alarmAcpLinkLoss=alarmAcpLinkLoss, physicalPortType=physicalPortType, entityEnvShelfNo=entityEnvShelfNo, ntpIPv6Ip=ntpIPv6Ip, entityOpticalMuxSlotNo=entityOpticalMuxSlotNo, containerLanSlotNo=containerLanSlotNo, uidEraseTime=uidEraseTime, alarmSignalFailureOnLink=alarmSignalFailureOnLink, advaInventoryExtNo=advaInventoryExtNo, externalVchMaxOptPowerRcv=externalVchMaxOptPowerRcv, containerModClass=containerModClass, containerLinkTable=containerLinkTable, containerOwlgAidString=containerOwlgAidString, licenseRowStatus=licenseRowStatus, containers=containers, notAssignableOpticalMuxEntry=notAssignableOpticalMuxEntry, opticalMuxChannelsProvision=opticalMuxChannelsProvision, alarmConfigurationFault=alarmConfigurationFault, alarmAutoShutdownAmpAps=alarmAutoShutdownAmpAps, fileDataTable=fileDataTable, entitySysSlotNo=entitySysSlotNo, upwardExternalPortPortNo=upwardExternalPortPortNo, virtualPortPayload=virtualPortPayload, alarmOutputVoltageFailure=alarmOutputVoltageFailure, containerShelfmapTypeInv=containerShelfmapTypeInv, physicalPortTransmitterWavelength=physicalPortTransmitterWavelength, shelfmapEqptIdentifier=shelfmapEqptIdentifier, downwardEnvIndex=downwardEnvIndex, notAssignableExternalPortParentId=notAssignableExternalPortParentId, virtualPortTimModeOduTcmC=virtualPortTimModeOduTcmC, opticalMuxDataLayerPmReset=opticalMuxDataLayerPmReset, opticalMuxConnState=opticalMuxConnState, shelfConnConnector=shelfConnConnector, upwardOpticalMuxTable=upwardOpticalMuxTable, moduleScuRing=moduleScuRing, scIpAddrMonitor=scIpAddrMonitor, alarmSeverityEnvEntry=alarmSeverityEnvEntry, transientFarEndDyingGasp=transientFarEndDyingGasp, containerConnectNonStdFromId=containerConnectNonStdFromId, moduleMidstagePorts=moduleMidstagePorts, containerCrossConnFromPointTable=containerCrossConnFromPointTable, ipv6InActRoutesRowStatus=ipv6InActRoutesRowStatus, physicalPortOtnStuffing=physicalPortOtnStuffing, transientFwpSwitchStarted=transientFwpSwitchStarted, entityEqptClassName=entityEqptClassName, containerConnectNonStdToIndexNo3=containerConnectNonStdToIndexNo3, transientProtSwToDuplexCompl=transientProtSwToDuplexCompl, userManagementUdpSessionStatus=userManagementUdpSessionStatus, terminationPointAlias=terminationPointAlias, alarmSeverityExternalPortEntry=alarmSeverityExternalPortEntry, opticalMuxMgmt=opticalMuxMgmt, containerMgmt=containerMgmt, entityDcnPortNo=entityDcnPortNo, virtualPortTraceTransmitDapiOdu=virtualPortTraceTransmitDapiOdu, containerCrsOptLineFromPointTableId=containerCrsOptLineFromPointTableId, dependentIndexNo2=dependentIndexNo2, opticalMuxAttenuationGradient=opticalMuxAttenuationGradient, lldpAgeOutPeriod=lldpAgeOutPeriod, containerExternalVchTableId=containerExternalVchTableId, virtualPortCirTrmt=virtualPortCirTrmt, physicalPortAlsMode=physicalPortAlsMode, shelfConnDuplex=shelfConnDuplex, physicalPortOperState=physicalPortOperState, inventory=inventory, containerCrossConnTableId=containerCrossConnTableId, entityTerminPointTableId=entityTerminPointTableId, externalVchConnectionState=externalVchConnectionState, remoteAuthProtocol=remoteAuthProtocol, physicalPortTcmALevel=physicalPortTcmALevel, downwardExternalPortSlotNo=downwardExternalPortSlotNo, alarmAutoPowerShutdown=alarmAutoPowerShutdown, transientCryBootCompleted=transientCryBootCompleted, entityCrsOptLineClassName=entityCrsOptLineClassName, shelfAirFilterCycle=shelfAirFilterCycle, alarmSignalDegradeOtu=alarmSignalDegradeOtu, externalVchChannelBandwith=externalVchChannelBandwith, crossOpticalLineRedLineState=crossOpticalLineRedLineState, entityEnvClassName=entityEnvClassName, alarmEnvTimeStamp=alarmEnvTimeStamp, sslCertApply=sslCertApply, containerConnectStdToIndexNo4=containerConnectStdToIndexNo4, physicalPortTimActionOdu=physicalPortTimActionOdu, syslogIPv4IpAddr=syslogIPv4IpAddr, entities=entities)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", ntpIPv4TestStatus=ntpIPv4TestStatus, lldpRowStatus=lldpRowStatus, connectionType=connectionType, dosProtection=dosProtection, endOfContainerTable=endOfContainerTable, containerShelfTableId=containerShelfTableId, physicalPortSecondaryStates=physicalPortSecondaryStates, alarmEqptEntry=alarmEqptEntry, downwardExternalPortChildId=downwardExternalPortChildId, containerLinkClassName=containerLinkClassName, entityOptLineTable=entityOptLineTable, linkIPv6Type=linkIPv6Type, containerEccPortNo=containerEccPortNo, virtualSessionChangeTime=virtualSessionChangeTime, endOfDownwardExternalPortTable=endOfDownwardExternalPortTable, alarmThres15MinExceededOduTcmBES=alarmThres15MinExceededOduTcmBES, physicalPortTxOffTimer=physicalPortTxOffTimer, opticalLineTable=opticalLineTable, licenseManagerPortNo=licenseManagerPortNo, moduleLanAid=moduleLanAid, moduleAvlndpF1485Rxcrs=moduleAvlndpF1485Rxcrs, alarmLicenseInvalid=alarmLicenseInvalid, unassignedInventoryType=unassignedInventoryType, containerExternalVchClassName=containerExternalVchClassName, containerPlugTable=containerPlugTable, containerEthShelfNo=containerEthShelfNo, physicalPortBand=physicalPortBand, optIntervalPm1weekTable=optIntervalPm1weekTable, containerChPortNo=containerChPortNo, containerEccClass=containerEccClass, virtualPortTestPrbsTrmtMode=virtualPortTestPrbsTrmtMode, alarmLossOsc=alarmLossOsc, entityFilterCableType=entityFilterCableType, alarmAlarmIndicationSignalOdu=alarmAlarmIndicationSignalOdu, alarmLocalOscTemperatureTooLow=alarmLocalOscTemperatureTooLow, entityOpticalMuxTable=entityOpticalMuxTable, performanceFacilityThreshold=performanceFacilityThreshold, physicalPortReceiverWavelength=physicalPortReceiverWavelength, lanValidSigTimer=lanValidSigTimer, upwardExternalPortEntry=upwardExternalPortEntry, lockSafety=lockSafety, alarmPumpLaser2TempTooHigh=alarmPumpLaser2TempTooHigh, alarmTagReceiveFail=alarmTagReceiveFail, alarmLocalFaultTx=alarmLocalFaultTx, linkFarEndIp=linkFarEndIp, transientTagCounterResetFw=transientTagCounterResetFw, alarmShelfmapTable=alarmShelfmapTable, physicalPortTraceRcvSapiTcmb=physicalPortTraceRcvSapiTcmb, shelfConnRate=shelfConnRate, terminationPointValidSigTimer=terminationPointValidSigTimer, endOfDcnMgmt=endOfDcnMgmt, alarmTerminPointEntry=alarmTerminPointEntry, transientCryptoTagFailureLimitChanged=transientCryptoTagFailureLimitChanged, oprIntervalPm1dayEntry=oprIntervalPm1dayEntry, ipv6InActRoutesSlotNo=ipv6InActRoutesSlotNo, upwardFacilityExtNo=upwardFacilityExtNo, lldpPortID=lldpPortID, shelfScuRing=shelfScuRing, alarmFiberAttenuationHighTx=alarmFiberAttenuationHighTx, ipv6ActRoutesPrefixLen=ipv6ActRoutesPrefixLen, opticalMuxVoaSetpoint=opticalMuxVoaSetpoint, alarm=alarm, shelfAirFilterClear=shelfAirFilterClear, upwardContainerEntry=upwardContainerEntry, shelfAlias=shelfAlias, alarmHdSystemId=alarmHdSystemId, scAlias=scAlias, containerCrossDcnTable=containerCrossDcnTable, alarmLicenseManagerTimeStamp=alarmLicenseManagerTimeStamp, notAssignableOpticalMuxClassName=notAssignableOpticalMuxClassName, containerShelfConnTable=containerShelfConnTable, alarmThres15MinExceededOtuSES=alarmThres15MinExceededOtuSES, transientThres1DayExceededPhysConvDE=transientThres1DayExceededPhysConvDE, dnsServer2=dnsServer2, alarmSeverityNtpIPv6Table=alarmSeverityNtpIPv6Table, containerConnectNonStdClass=containerConnectNonStdClass, containerExternalVchPortNo=containerExternalVchPortNo, sslCertIp=sslCertIp, notAssignableEqptIndexNo1=notAssignableEqptIndexNo1, communityIpMode=communityIpMode, shelfmapTable=shelfmapTable, alarmHwFailure=alarmHwFailure, upwardOptLineClassName=upwardOptLineClassName, downwardTerminPointIndex=downwardTerminPointIndex, performanceFacilityMonitoring=performanceFacilityMonitoring, alarmLicenseEntry=alarmLicenseEntry, neCommandBusy=neCommandBusy, virtualPortTimActionOdu=virtualPortTimActionOdu, containerEnvShelfNo=containerEnvShelfNo, linkAuthString=linkAuthString, endOfNotAssignableOptLineTable=endOfNotAssignableOptLineTable, scAuthType=scAuthType, opticalMuxSignalDirection=opticalMuxSignalDirection, containerTerminPointTable=containerTerminPointTable, containerConnectNonStdFromIndexNo4=containerConnectNonStdFromIndexNo4, alarmEncryptionPortEncryptionSwitchOffEnabled=alarmEncryptionPortEncryptionSwitchOffEnabled, opticalMuxSecondaryStates=opticalMuxSecondaryStates, linkOperState=linkOperState, eccExternalVid=eccExternalVid, virtualPortSigDegPeriodOdu=virtualPortSigDegPeriodOdu, physicalPortTraceExpectedOpspOdu=physicalPortTraceExpectedOpspOdu, endOfAlarmShelfConnTable=endOfAlarmShelfConnTable, optIntervalPm15minHigh=optIntervalPm15minHigh, downwardEqptShelfNo=downwardEqptShelfNo, alarmServerSignalFailurePath=alarmServerSignalFailurePath, alarmOpticalMuxSeverity=alarmOpticalMuxSeverity, opticalMuxRcvChannel=opticalMuxRcvChannel, containerShelfParentId=containerShelfParentId, alarmFiberConnMismatchTx=alarmFiberConnMismatchTx, entityContainerAidString=entityContainerAidString, crossConnectionPathNode=crossConnectionPathNode, notAssignableExternalPortClass=notAssignableExternalPortClass, filterCableType=filterCableType, eqptMgmt=eqptMgmt, entityProtectionCableTable=entityProtectionCableTable, downwardEqptExtNo=downwardEqptExtNo, upwardEnvShelfNo=upwardEnvShelfNo, moduleClientPorts=moduleClientPorts, physicalPortLLDPNeighborsTx=physicalPortLLDPNeighborsTx, externalVchEntry=externalVchEntry, notAssignableContainerIndexNo3=notAssignableContainerIndexNo3, scIPv6LinkLocal=scIPv6LinkLocal, externalPortReferByTerminPoint=externalPortReferByTerminPoint, changePhysicalPortServiceTraceExpectedOtu=changePhysicalPortServiceTraceExpectedOtu, entityCrossConnFromId=entityCrossConnFromId, containerExternalPortParentId=containerExternalPortParentId, moduleDispersionCompensation=moduleDispersionCompensation, physicalPortTraceTransmitSapiOduTcmA=physicalPortTraceTransmitSapiOduTcmA, fspR7ObjectChangeTrap=fspR7ObjectChangeTrap, pmSnapshotCurrentRamanPumpPower=pmSnapshotCurrentRamanPumpPower, containerWchParentId=containerWchParentId, alarmEquipmentNotApproved=alarmEquipmentNotApproved, virtualPortChannelSpacing=virtualPortChannelSpacing, physicalPortOpticalSetPointLane2=physicalPortOpticalSetPointLane2, unusedCommunityId=unusedCommunityId, entitySysExtNo=entitySysExtNo, facilityReferByEntry=facilityReferByEntry, licenses=licenses, changePhysicalPortServiceTraceExpectedOduTcmC=changePhysicalPortServiceTraceExpectedOduTcmC, shelfChannelsNumber=shelfChannelsNumber, physicalPortChannelSpacing=physicalPortChannelSpacing, endOfOpticalMuxTable=endOfOpticalMuxTable, externalVchOsnrTransmit=externalVchOsnrTransmit, containerPlugAidString=containerPlugAidString, syslogIPv6IpAddr=syslogIPv6IpAddr, containerOmTableId=containerOmTableId, notAssignableOptLineIndexNo3=notAssignableOptLineIndexNo3, opticalLineChannelBandwith=opticalLineChannelBandwith, dependentId=dependentId, alarmSignalDegradeLine=alarmSignalDegradeLine, optIntervalPm1weekTimeStamp=optIntervalPm1weekTimeStamp, notAssignableOptLineIndexNo1=notAssignableOptLineIndexNo1, ntpIPv6IpAddr=ntpIPv6IpAddr, upwardOptLineParentId=upwardOptLineParentId, alarmInternalEncryptionFail=alarmInternalEncryptionFail, physicalPortSigDegThresSdhSection=physicalPortSigDegThresSdhSection, upwardEnvExtNo=upwardEnvExtNo, entityOptLineIndexNo1=entityOptLineIndexNo1, knownHostIPv6KeyEncryptAlgorithm=knownHostIPv6KeyEncryptAlgorithm, alarmSeverityShelfConnValue=alarmSeverityShelfConnValue, downwardOpticalMuxEntry=downwardOpticalMuxEntry, pmSnapshotHistoricalTerminPointTimeStamp=pmSnapshotHistoricalTerminPointTimeStamp, entityCrossDcnShelfNo=entityCrossDcnShelfNo, containerCrsOptLineFromId=containerCrsOptLineFromId, alarmEncryptionModuleSelfTestStarted=alarmEncryptionModuleSelfTestStarted, alarmAutoShutdownSendingLckOdu=alarmAutoShutdownSendingLckOdu, alarmSeverityLicenseType=alarmSeverityLicenseType, notAssignableOptLineTable=notAssignableOptLineTable, alarmChannelMismatch=alarmChannelMismatch, alarmTerminPointTimeStamp=alarmTerminPointTimeStamp, physicalPortAutosrvLock=physicalPortAutosrvLock, containerLanClass=containerLanClass, alarmLossOfInputSignal=alarmLossOfInputSignal, trapSinkDuration=trapSinkDuration, optIntervalPm1dayValidFlag=optIntervalPm1dayValidFlag, entityCrossConnToShelfNo=entityCrossConnToShelfNo, physicalPortCirRcv=physicalPortCirRcv, pmSnapshotHistoricalValidFlag=pmSnapshotHistoricalValidFlag, crossDcnLink=crossDcnLink, alarmHdSystemEntry=alarmHdSystemEntry, transientThres1DayExceededSonetSectCV=transientThres1DayExceededSonetSectCV, upwardTerminPointIndexNo4=upwardTerminPointIndexNo4, alarmAseTableGenFailLow=alarmAseTableGenFailLow, updateFwpOnInstall=updateFwpOnInstall, physicalPortRowStatus=physicalPortRowStatus, trapSource=trapSource, physicalPortTimingSource=physicalPortTimingSource, containerChAidString=containerChAidString, fspR7WriteAccessRequest=fspR7WriteAccessRequest, authTrapAccountState=authTrapAccountState, changePhysicalPortServiceVoaSetpoint=changePhysicalPortServiceVoaSetpoint, entityOpticalMuxAidString=entityOpticalMuxAidString, entityFilterCableClassName=entityFilterCableClassName, transientTagCounterReset=transientTagCounterReset, alarmSeverityNtpIPv4Type=alarmSeverityNtpIPv4Type, whitelistAdmin=whitelistAdmin, entityCrossConnFromExtNo=entityCrossConnFromExtNo, entityContainerPortNo=entityContainerPortNo, changePhysicalPortServiceLaserOnTimer=changePhysicalPortServiceLaserOnTimer, entityExternalPortOneIndex=entityExternalPortOneIndex, physicalPortLaneChannel3=physicalPortLaneChannel3, lldpSystemName=lldpSystemName, entityOptLineEntry=entityOptLineEntry, notAssignableContainerIndexNo1=notAssignableContainerIndexNo1, alarmSeverityShelfConnType=alarmSeverityShelfConnType, physicalPortLagIdFend=physicalPortLagIdFend, changePhysicalPortServiceSigDegThresSonetSection=changePhysicalPortServiceSigDegThresSonetSection, connectionEntry=connectionEntry, containerVethTableId=containerVethTableId, containerFfpClass=containerFfpClass, linkAreaAid=linkAreaAid, alarmDcnTimeStamp=alarmDcnTimeStamp, alarmCurrentTooHigh=alarmCurrentTooHigh, virtualPortSigDegPeriodOduTcmB=virtualPortSigDegPeriodOduTcmB, controlPlane=controlPlane, physicalPortLanes=physicalPortLanes, shelfmapRowStatus=shelfmapRowStatus, containerCrossDcnEntry=containerCrossDcnEntry, containerLanClassName=containerLanClassName, plugLoopbackAttenuation=plugLoopbackAttenuation, alarmSeverityFacilityType=alarmSeverityFacilityType, containerScShelfNo=containerScShelfNo, scIpType=scIpType, endOfHaTable=endOfHaTable, relationship=relationship, changePhysicalPortServiceSigDegThresOduTcmB=changePhysicalPortServiceSigDegThresOduTcmB, alarmBackreflectionTooHigh=alarmBackreflectionTooHigh, changePhysicalPortServiceCodeGain=changePhysicalPortServiceCodeGain, alarmCryAuthKeyMissing=alarmCryAuthKeyMissing, transientCrySwitchCompleted=transientCrySwitchCompleted, terminationPointSubBand=terminationPointSubBand, endOfAlarmSeverityEqptTable=endOfAlarmSeverityEqptTable, externalPortOpticalPowerTx=externalPortOpticalPowerTx, upwardDcnTable=upwardDcnTable, containerPlugPortNo=containerPlugPortNo, containerChParentId=containerChParentId, containerChTableId=containerChTableId, scAttGradientTh=scAttGradientTh, endOfSpecificMgmt=endOfSpecificMgmt, containerOmClassName=containerOmClassName, licenseManagerEntry=licenseManagerEntry, unassignedInventoryEntry=unassignedInventoryEntry, ipv6InActRoutesShelfNo=ipv6InActRoutesShelfNo, alarmAutoShutdownOpuClientSignalFail=alarmAutoShutdownOpuClientSignalFail, externalVchTable=externalVchTable, pmSnapshot=pmSnapshot, upwardDcnPortNo=upwardDcnPortNo, serviceDiagnostics=serviceDiagnostics, virtualPortTraceRcvDapiTcmc=virtualPortTraceRcvDapiTcmc, notAssignableEnvEntry=notAssignableEnvEntry, alarmFacilityDataRateNotSupported=alarmFacilityDataRateNotSupported, moduleIpAddr=moduleIpAddr, endOfAlarmOpticalMuxTable=endOfAlarmOpticalMuxTable, userManagementAccessStartTime=userManagementAccessStartTime)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", physicalPortAdmin=physicalPortAdmin, containerPchTableId=containerPchTableId, terminationPointConnEqptState=terminationPointConnEqptState, containerOmParentId=containerOmParentId, physicalPortAvlntsRxcrs=physicalPortAvlntsRxcrs, physicalPortTrafficDirection=physicalPortTrafficDirection, virtualPortChannelBand=virtualPortChannelBand, containerWchIndexNo3=containerWchIndexNo3, transientFwpInstallCompleted=transientFwpInstallCompleted, containerFanClass=containerFanClass, changeService=changeService, scOperState=scOperState, scDuplex=scDuplex, neSdpType=neSdpType, pmSnapshotHistoricalTerminPointTable=pmSnapshotHistoricalTerminPointTable, fspR7Trap=fspR7Trap, connectionState=connectionState, containerWchAidString=containerWchAidString, transientEqlzNotRequired=transientEqlzNotRequired, containerConnectStdFromIndexNo4=containerConnectStdFromIndexNo4, alarmSeverityNtpIPv4Value=alarmSeverityNtpIPv4Value, entityFilterCableParentId=entityFilterCableParentId, moduleTerminationType=moduleTerminationType, alarmOscOpticalPowerControlFailHigh=alarmOscOpticalPowerControlFailHigh, filterCableRowStatus=filterCableRowStatus, endOfOpticalMuxReferByTable=endOfOpticalMuxReferByTable, virtualPortTraceRcvDapiOdu=virtualPortTraceRcvDapiOdu, eci=eci, envPortInvertTifInputLogic=envPortInvertTifInputLogic, oprIntervalPm1dayNumber=oprIntervalPm1dayNumber, ratStartPointTable=ratStartPointTable, containerHdSystemEntry=containerHdSystemEntry, licenseSlotNo=licenseSlotNo, entityMtosiSlotsShelfNo=entityMtosiSlotsShelfNo, alarmDcnTable=alarmDcnTable, channelTracesToAid=channelTracesToAid, opticalMuxTilt=opticalMuxTilt, changePhysicalPortServiceTraceTransmitOpspOduTcmB=changePhysicalPortServiceTraceTransmitOpspOduTcmB, transientCryptoPasswdChanged=transientCryptoPasswdChanged, alarmAutoShutdownSendingOciOduTx=alarmAutoShutdownSendingOciOduTx, alarmAmpDisabled=alarmAmpDisabled, virtualPortTraceRcvSapiTcmb=virtualPortTraceRcvSapiTcmb, containerCrsOptLineTableId=containerCrsOptLineTableId, containerVchExtNo=containerVchExtNo, shelfStandardSlots=shelfStandardSlots, terminationPointSfProvision=terminationPointSfProvision, changePhysicalPortServiceTraceTransmitSapiOdu=changePhysicalPortServiceTraceTransmitSapiOdu, alarmEquipmentNotSupportedByPhysicalLayer=alarmEquipmentNotSupportedByPhysicalLayer, eccValidSigTimer=eccValidSigTimer, containerLinkExtNo=containerLinkExtNo, entityOpticalMuxClass=entityOpticalMuxClass, connectionCreationMethod=connectionCreationMethod, channelTracesChannelNumber=channelTracesChannelNumber, virtualPortOptSetDeviation=virtualPortOptSetDeviation, fspR7WriteAccessRevoked=fspR7WriteAccessRevoked, alarmThres15MinExceededOduES=alarmThres15MinExceededOduES, neCommandIp=neCommandIp, transientThres1DayExceededSonetSectSEFS=transientThres1DayExceededSonetSectSEFS, crossDcnType=crossDcnType, dateAndTime=dateAndTime, containerModEntry=containerModEntry, scType=scType, alarmLossofSequenceLowerOrderPath=alarmLossofSequenceLowerOrderPath, linkAlias=linkAlias, alarmTerminalLoopback=alarmTerminalLoopback, changePhysicalPortServiceTable=changePhysicalPortServiceTable, downwardExternalPortExtNo=downwardExternalPortExtNo, containerContainer=containerContainer, transientFarEndChanged=transientFarEndChanged, linkNendIpMonitor=linkNendIpMonitor, alarmSignalDegradeOduTcmC=alarmSignalDegradeOduTcmC, whitelistTable=whitelistTable, syslogIPv4SourceIp=syslogIPv4SourceIp, licenseShelfNo=licenseShelfNo, ntpIPv6SyncStatus=ntpIPv6SyncStatus, lldpPortType=lldpPortType, entityProtectionCableAidString=entityProtectionCableAidString, terminationPointFiberDetectStatus=terminationPointFiberDetectStatus, entitySysTableId=entitySysTableId, physicalPortConnType=physicalPortConnType, syslogIPv6Ip=syslogIPv6Ip, transientForcedWorkingSwitchedBacktoProtection=transientForcedWorkingSwitchedBacktoProtection, protectionCableRowStatus=protectionCableRowStatus, downwardOptLineClassName=downwardOptLineClassName, crossOpticalLineIngressNodeIp=crossOpticalLineIngressNodeIp, moduleRowStatus=moduleRowStatus, physicalPortTraceRcvDapiOdu=physicalPortTraceRcvDapiOdu, upwardContainerParentId=upwardContainerParentId, alarmThres15MinExceededPhysConvSE=alarmThres15MinExceededPhysConvSE, physicalPortAutonegotiation=physicalPortAutonegotiation, optIntervalPm15minTable=optIntervalPm15minTable, entityShelfConnExtNo=entityShelfConnExtNo, alarmDuplexLinkFailure=alarmDuplexLinkFailure, physicalPortReportSsfLine=physicalPortReportSsfLine, containerExternalPortTableId=containerExternalPortTableId, containerOmClass=containerOmClass, alarmLogicalLanesSkewTooHigh=alarmLogicalLanesSkewTooHigh, downwardOptLineSlotNo=downwardOptLineSlotNo, alarmFiberConnCommError=alarmFiberConnCommError, virtualPortInitEqlz=virtualPortInitEqlz, virtualPortTraceTransmitSapiOdu=virtualPortTraceTransmitSapiOdu, externalOmRowStatus=externalOmRowStatus, containerEccTableId=containerEccTableId, downwardEnvClassName=downwardEnvClassName, opticalMuxSumTransmited=opticalMuxSumTransmited, alarmExternalPortSeverity=alarmExternalPortSeverity, transientMpLocked=transientMpLocked, alarmThres15MinExceededSonetSectES=alarmThres15MinExceededSonetSectES, changePhysicalPortServiceTraceTransmitOpspOduTcmA=changePhysicalPortServiceTraceTransmitOpspOduTcmA, crossConnectionOperState=crossConnectionOperState, physicalPortSigDegPeriodOduTcmB=physicalPortSigDegPeriodOduTcmB, alarmTraceIdentifierMismatchOtu=alarmTraceIdentifierMismatchOtu, physicalPortDelayMeasurementTime=physicalPortDelayMeasurementTime, changePhysicalPortServiceAutoPTassignment=changePhysicalPortServiceAutoPTassignment, physicalPortXfpDecisionThres=physicalPortXfpDecisionThres, containerLinkTableId=containerLinkTableId, plugTransmitChannel=plugTransmitChannel, moduleDeploy=moduleDeploy, facilityMgmt=facilityMgmt, ratSuperChannelFq=ratSuperChannelFq, entityFacilityEntry=entityFacilityEntry, containerConnectStdAidString=containerConnectStdAidString, containerOtlgTable=containerOtlgTable, alarmTerminPointSeverity=alarmTerminPointSeverity, userManagementPrivacyKey=userManagementPrivacyKey, virtualPortPrbsPmReset=virtualPortPrbsPmReset, virtualPortAlias=virtualPortAlias, dependentEntry=dependentEntry, whitelistIpAddr=whitelistIpAddr, endOfUpwardShelfConnTable=endOfUpwardShelfConnTable, entityCrossConnToId=entityCrossConnToId, physicalPortEntry=physicalPortEntry, upwardContainerExtNo=upwardContainerExtNo, changePhysicalPortServiceTraceExpectedOdu=changePhysicalPortServiceTraceExpectedOdu, lldpDataLayerPmReset=lldpDataLayerPmReset, upwardShelfConnShelfNo=upwardShelfConnShelfNo, lanHelloInterval=lanHelloInterval, plugTable=plugTable, lldpType=lldpType, oprIntervalPm15minHigh=oprIntervalPm15minHigh, upwardContainerPortNo=upwardContainerPortNo, endOfHdShelvesMgmt=endOfHdShelvesMgmt, entityProtectionCableIndex1=entityProtectionCableIndex1, containerLinkPortNo=containerLinkPortNo, modulePower=modulePower, entitySysTable=entitySysTable, entityFfpOneIndex=entityFfpOneIndex, transientEncryptionPortSingleKeyExchgFailed=transientEncryptionPortSingleKeyExchgFailed, userManagementPasswordMaxAge=userManagementPasswordMaxAge, downwardExternalPortTable=downwardExternalPortTable, newSshHostKey=newSshHostKey, alarmLicenseOverdraft=alarmLicenseOverdraft, envPortRowStatus=envPortRowStatus, containerExternalOmParentId=containerExternalOmParentId, entityCrsOptLineAidString=entityCrsOptLineAidString, dependentIndexNo3=dependentIndexNo3, externalPortMinOsnrRcv=externalPortMinOsnrRcv, alarmAseTableGenFailSignalinput=alarmAseTableGenFailSignalinput, alarmAutomaticPowerReduction=alarmAutomaticPowerReduction, alarmThres15MinExceededOduTcmCSES=alarmThres15MinExceededOduTcmCSES, containerShelfExtNo=containerShelfExtNo, containerWchIndexNo1=containerWchIndexNo1, moduleCategory=moduleCategory, transientThres1DayExceededOduTcmBUAS=transientThres1DayExceededOduTcmBUAS, entityOptLineTableId=entityOptLineTableId, fileDataFileName=fileDataFileName, licenseManagerLicenseManagement=licenseManagerLicenseManagement, fspR7CommunityDeletion=fspR7CommunityDeletion, crossConnectionCrsFromAidTwo=crossConnectionCrsFromAidTwo, alarmAutoShutdownSendingAisOpu=alarmAutoShutdownSendingAisOpu, lsrtempThresholdConfigEntry=lsrtempThresholdConfigEntry, upwardFacilityIndex=upwardFacilityIndex, containerVethAidString=containerVethAidString, alarmHwOptReachedHT=alarmHwOptReachedHT, downwardExternalPortPortNo=downwardExternalPortPortNo, oprIntervalPm1weekMean=oprIntervalPm1weekMean, endOfNotAssignableEqptTable=endOfNotAssignableEqptTable, containerOlEntry=containerOlEntry, physicalPortTraceExpectedOpspOtu=physicalPortTraceExpectedOpspOtu, fspR7WriteAccessDenied=fspR7WriteAccessDenied, alarmFwpMismatchDownloadServiceAffecting=alarmFwpMismatchDownloadServiceAffecting, pmSnapshotCurrentOscPwrReceived=pmSnapshotCurrentOscPwrReceived, alarmEnvType=alarmEnvType, changePhysicalPortServiceOtnStuffing=changePhysicalPortServiceOtnStuffing, externalVchTransmitChannel=externalVchTransmitChannel, userManagementTl1TimeoutAvailable=userManagementTl1TimeoutAvailable, lldpManagementType=lldpManagementType, containerChClassName=containerChClassName, fileDataMpName=fileDataMpName, alarmTemperatureTooHigh=alarmTemperatureTooHigh, shelfConnOperState=shelfConnOperState, notAssignableEqptClassName=notAssignableEqptClassName, containerCrsOptLineFromClassName=containerCrsOptLineFromClassName, optIntervalPm1weekEntry=optIntervalPm1weekEntry, linkAuthType=linkAuthType, externalPortOsnrTransmit=externalPortOsnrTransmit, physicalPortTraceExpectedDapiOdu=physicalPortTraceExpectedDapiOdu, entityOpticalMuxPortNo=entityOpticalMuxPortNo, containerVethClass=containerVethClass, containerShelfConnTableId=containerShelfConnTableId, physicalPortConnector=physicalPortConnector, containerModClassName=containerModClassName, downwardOpticalMuxPortNo=downwardOpticalMuxPortNo, containerOlAidString=containerOlAidString, remoteAuth=remoteAuth, virtualPortNearEndProtectionState=virtualPortNearEndProtectionState, virtualPortLagPortType=virtualPortLagPortType, oprIntervalPm1dayTimeStamp=oprIntervalPm1dayTimeStamp, moduleMapping=moduleMapping, pmSnapshotCurrentOutputPower=pmSnapshotCurrentOutputPower, shelfConnAutonegotiation=shelfConnAutonegotiation, pmSnapshotHistoricalTerminPointValue=pmSnapshotHistoricalTerminPointValue, physicalPortTraceTransmitSapiOduTcmB=physicalPortTraceTransmitSapiOduTcmB, shelfmapAidString=shelfmapAidString, transientIntrusionRx=transientIntrusionRx, fspR7TrapSinkCreation=fspR7TrapSinkCreation, transientThres1DayExceededSonetSectOofs=transientThres1DayExceededSonetSectOofs, alarmPowerMissing=alarmPowerMissing, containerConnectNonStdAidString=containerConnectNonStdAidString, physicalPortSigDegThresSonetLine=physicalPortSigDegThresSonetLine, moduleRstp=moduleRstp, physicalPortTraceExpectedOdu=physicalPortTraceExpectedOdu, physicalPortRedLineState=physicalPortRedLineState, ntpIPv6Test=ntpIPv6Test, entityCrossDcnSlotNo=entityCrossDcnSlotNo, alarmSeverityLicenseManagerEntry=alarmSeverityLicenseManagerEntry, containerVschShelfNo=containerVschShelfNo, externalPortMinChromDisperRcv=externalPortMinChromDisperRcv, neDbOnActivate=neDbOnActivate, containerExternalPortTable=containerExternalPortTable, virtualPortSigDegThresOduTcmC=virtualPortSigDegThresOduTcmC, upwardContainerTable=upwardContainerTable, notAssignableFacilityIndexNo4=notAssignableFacilityIndexNo4, alarmContainerAffect=alarmContainerAffect, endOfOpticalLineMgmt=endOfOpticalLineMgmt, externalPortTransmitChannel=externalPortTransmitChannel, fanEntry=fanEntry, alarmFiberConnLos=alarmFiberConnLos, entityEqptType=entityEqptType, changePhysicalPortServiceTerminationLevel=changePhysicalPortServiceTerminationLevel, entityCrossConnClassName=entityCrossConnClassName, nextUnusedPc=nextUnusedPc, scFarEndIp=scFarEndIp, eccSecondaryStates=eccSecondaryStates, entityFilterCableAidString=entityFilterCableAidString, virtualPortVcType=virtualPortVcType, transientPathCleanupComplete=transientPathCleanupComplete, alarmOpticalMuxTable=alarmOpticalMuxTable, trapModeLegacy=trapModeLegacy, alarmLossOfGfpFrame=alarmLossOfGfpFrame, virtualPortConnState=virtualPortConnState, alarmSignalDegradeOlm=alarmSignalDegradeOlm, userManagementInactivityPeriod=userManagementInactivityPeriod, shelfChannel=shelfChannel)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", containerCrossDcnAidString=containerCrossDcnAidString, opticalMuxTransmitChannel=opticalMuxTransmitChannel, upwardShelfConnTable=upwardShelfConnTable, alarmOptInputPwrReceivedTooLow=alarmOptInputPwrReceivedTooLow, terminationPointLevel=terminationPointLevel, changePhysicalPortServiceTimModeOdu=changePhysicalPortServiceTimModeOdu, alarmSeverityShelfmapId=alarmSeverityShelfmapId, alarmExcessLLDPNeighborsTx=alarmExcessLLDPNeighborsTx, moduleLagSysPrio=moduleLagSysPrio, containerCrossConnFromId=containerCrossConnFromId, virtualPortTraceRcvSapiTcmc=virtualPortTraceRcvSapiTcmc, advaInventoryPortNo=advaInventoryPortNo, hdSystemOperState=hdSystemOperState, containerPchClass=containerPchClass, entityEqptTableId=entityEqptTableId, licenseManagerClass=licenseManagerClass, tlsSupport=tlsSupport, terminationPointInputPower=terminationPointInputPower, changePhysicalPortServiceChannelPlan=changePhysicalPortServiceChannelPlan, lanIPv6LinkLocal=lanIPv6LinkLocal, endOfDependentTable=endOfDependentTable, containerOwlgIndexNo3=containerOwlgIndexNo3, endOfChangeService=endOfChangeService, changePhysicalPortServiceSigDegPeriodOdu=changePhysicalPortServiceSigDegPeriodOdu, transientFwpSwitchRejected=transientFwpSwitchRejected, licenseAdmin=licenseAdmin, transientThres1DayExceededOduSES=transientThres1DayExceededOduSES, downwardEnvTable=downwardEnvTable, notAssignableOptLineEntry=notAssignableOptLineEntry, entitySysShelfNo=entitySysShelfNo, upwardOptLineSlotNo=upwardOptLineSlotNo, alarmContainerTable=alarmContainerTable, containerFanClassName=containerFanClassName, oprIntervalPm1weekNumber=oprIntervalPm1weekNumber, alarmVoaControlFail=alarmVoaControlFail, alarmRPortOutage=alarmRPortOutage, transientAlpSettingStarted=transientAlpSettingStarted, containerCrossConnFromPointEntry=containerCrossConnFromPointEntry, downwardOpticalMuxShelfNo=downwardOpticalMuxShelfNo, alarmAutoAmpShutdown=alarmAutoAmpShutdown, externalPortAlias=externalPortAlias, containerCrossConnToId=containerCrossConnToId, physicalPortTransmitterFrequency=physicalPortTransmitterFrequency, alarmInputVoltageFailurePort2=alarmInputVoltageFailurePort2, changePhysicalPortServiceWdmRxChannel=changePhysicalPortServiceWdmRxChannel, containerExternalVchShelfNo=containerExternalVchShelfNo, physicalPortChannelProv=physicalPortChannelProv, alarmOosAins=alarmOosAins, downwardContainerShelfNo=downwardContainerShelfNo, physicalPortSwitchCommand=physicalPortSwitchCommand, trapSinkUserName=trapSinkUserName, plugType=plugType, transientThres1DayExceededOduTcmAUAS=transientThres1DayExceededOduTcmAUAS, entityCrsOptLineToIndexNo1=entityCrsOptLineToIndexNo1, alarmSeverityEqptValue=alarmSeverityEqptValue, downwardDcnEntry=downwardDcnEntry, alarmRemoteDefectIndicationLine=alarmRemoteDefectIndicationLine, containerOwlgIndexNo1=containerOwlgIndexNo1, alarmPilotReceiveLevelHigh=alarmPilotReceiveLevelHigh, shelfOscChannel=shelfOscChannel, physicalPortTimModeOdu=physicalPortTimModeOdu, envPortConnectorType=envPortConnectorType, changePhysicalPortServiceTraceTransmitSonetSection=changePhysicalPortServiceTraceTransmitSonetSection, physicalPortErrorForwarding=physicalPortErrorForwarding, transientThres1DayExceededSonetSectSES=transientThres1DayExceededSonetSectSES, virtualPortOwnerAid=virtualPortOwnerAid, eccTable=eccTable, alarmLossOfFrameOtu=alarmLossOfFrameOtu, connectionTable=connectionTable, modulePartner1=modulePartner1, entityCrsOptLineToIndexNo2=entityCrsOptLineToIndexNo2, alarmLossOfReceiverClockRecovery=alarmLossOfReceiverClockRecovery, containerConnectNonStdFromClassName=containerConnectNonStdFromClassName, opticalMuxOpticalSetPoint=opticalMuxOpticalSetPoint, opticalMuxGain=opticalMuxGain, entityProtectionCableIndex2=entityProtectionCableIndex2, alarmTagReceiveFailMaxReached=alarmTagReceiveFailMaxReached, alarmAseTableGenFailOscMissing=alarmAseTableGenFailOscMissing, ipv6ActRoutesTable=ipv6ActRoutesTable, alarmEqptTimeStamp=alarmEqptTimeStamp, virtualSessionTimeout=virtualSessionTimeout, changePhysicalPortServiceSigDegPeriodIntegration=changePhysicalPortServiceSigDegPeriodIntegration, moduleFiberType=moduleFiberType, alarmCryDataInvalid=alarmCryDataInvalid, alarmPartner3Deleted=alarmPartner3Deleted, alarmAlarmIndicationSignalOduTcmA=alarmAlarmIndicationSignalOduTcmA, licenseManagerClassName=licenseManagerClassName, plugPlugType=plugPlugType, physicalPortTable=physicalPortTable, containerVSContainer=containerVSContainer, sso2fa=sso2fa, containerShelfConnParentId=containerShelfConnParentId, opticalMuxEdfaPwrOut=opticalMuxEdfaPwrOut, oprIntervalPm15minTable=oprIntervalPm15minTable, ipv6InActRoutesPortNo=ipv6InActRoutesPortNo, licenseManagerTable=licenseManagerTable, upwardContainerClassName=upwardContainerClassName, notAssignableContainerClassName=notAssignableContainerClassName, changePhysicalPortServiceTraceTransmitDapiOduTcmA=changePhysicalPortServiceTraceTransmitDapiOduTcmA, physicalPortTunnelAid=physicalPortTunnelAid, userManagementAccessDays=userManagementAccessDays, modulePartner3=modulePartner3, virtualPortOdtuType=virtualPortOdtuType, containerVchEntry=containerVchEntry, alarmExternalPortType=alarmExternalPortType, containerPlugEquipmentState=containerPlugEquipmentState, networkIntelligence=networkIntelligence, alarmPartnerUnavailable=alarmPartnerUnavailable, transientThres1DayExceededSonetLineBbe=transientThres1DayExceededSonetLineBbe, changePhysicalPortServiceVoaMode=changePhysicalPortServiceVoaMode, ffpApsType=ffpApsType, containerCrsOptLineToId=containerCrsOptLineToId, endOfContainers=endOfContainers, ntpIPv4Ip=ntpIPv4Ip, upwardDcnParentId=upwardDcnParentId, notAssignableEqptAidString=notAssignableEqptAidString, alarmThres15MinExceededPhysConvDE=alarmThres15MinExceededPhysConvDE, alarmNtpIPv6Entry=alarmNtpIPv6Entry, performanceFacility=performanceFacility, communityAccess=communityAccess, alarmLossOfSignalCPort=alarmLossOfSignalCPort, physicalPortTimDetModeOtu=physicalPortTimDetModeOtu, entityCrossConnFromPortNo=entityCrossConnFromPortNo, eccAlias=eccAlias, entityShelfConnTableId=entityShelfConnTableId, entityTerminPointType=entityTerminPointType, pmSnapshotHistoricalTerminPointValidFlag=pmSnapshotHistoricalTerminPointValidFlag, virtualPortRevertiveMode=virtualPortRevertiveMode, containerOtlgClassName=containerOtlgClassName, containerHdSystemTable=containerHdSystemTable, containerCrsOptLineFromIndexNo4=containerCrsOptLineFromIndexNo4, alarmPartner1Deleted=alarmPartner1Deleted, physicalPortPhysIfBaseType=physicalPortPhysIfBaseType, entityTerminPointOneIndex=entityTerminPointOneIndex, changePhysicalPortServiceEntry=changePhysicalPortServiceEntry, shelfConnAdmin=shelfConnAdmin, endOfFiberMap=endOfFiberMap, physicalPortCbsRcv=physicalPortCbsRcv, upwardShelfConnClassName=upwardShelfConnClassName, oprIntervalPm1dayLow=oprIntervalPm1dayLow, fspR7CreationTrap=fspR7CreationTrap, upwardTerminPointIndexNo2=upwardTerminPointIndexNo2, advaFspR7=advaFspR7, fileDataGrade=fileDataGrade, transientEqlzProcessWait=transientEqlzProcessWait, pmSnapshotHistoricalValue=pmSnapshotHistoricalValue, shelfRack=shelfRack, alarmRemoteDefectIndicationHigherOrderPath=alarmRemoteDefectIndicationHigherOrderPath, physicalPortReceiverFrequency=physicalPortReceiverFrequency, shelfSupply=shelfSupply, downwardTerminPointEntry=downwardTerminPointEntry, alarmLossofTandemConnectionOduTcmB=alarmLossofTandemConnectionOduTcmB, identifyTraps=identifyTraps, ntpIPv4IpAddr=ntpIPv4IpAddr, eccProtAvailability=eccProtAvailability, netConf=netConf, linkIpType=linkIpType, syslogIPv6Reporting=syslogIPv6Reporting, virtualPortLagStandby=virtualPortLagStandby, virtualPortTraceRcvOpspTcma=virtualPortTraceRcvOpspTcma, oprIntervalPm15minEntry=oprIntervalPm15minEntry, changePhysicalPortServiceTimModeOtu=changePhysicalPortServiceTimModeOtu, entityConnectionAidString=entityConnectionAidString, optIntervalPm1weekValidFlag=optIntervalPm1weekValidFlag, lanIpType=lanIpType, upwardEnvPortNo=upwardEnvPortNo, alarmThres15MinExceededSonetLineCV=alarmThres15MinExceededSonetLineCV, changePhysicalPortServiceOptimize=changePhysicalPortServiceOptimize, upwardEqptEntry=upwardEqptEntry, entityFacilityAidString=entityFacilityAidString, externalPortSecondaryStates=externalPortSecondaryStates, endOfTranslation=endOfTranslation, upwardFacilityTable=upwardFacilityTable, physicalPortPriority=physicalPortPriority, containerCrsOptLineToIndexNo2=containerCrsOptLineToIndexNo2, opticalMuxTransmitFrequency=opticalMuxTransmitFrequency, alarmDbReplicationIncompleted=alarmDbReplicationIncompleted, transientThres1DayExceededFecCE=transientThres1DayExceededFecCE, endOfEnvPortTable=endOfEnvPortTable, alarmSeverityTerminPointType=alarmSeverityTerminPointType, crossConnectionCrsToAidTwo=crossConnectionCrsToAidTwo, shelfmapClass=shelfmapClass, entitySysAidString=entitySysAidString, crossConnectionConn=crossConnectionConn, containerExternalVchEntry=containerExternalVchEntry)
