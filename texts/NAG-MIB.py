#
# PySNMP MIB module NAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/snr/NAG-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:16:02 2024
# On host fv-az692-788 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, enterprises, NotificationType, iso, Gauge32, NotificationType, TimeTicks, Counter64, ModuleIdentity, Integer32, mib_2, experimental, MibIdentifier, ObjectIdentity, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "enterprises", "NotificationType", "iso", "Gauge32", "NotificationType", "TimeTicks", "Counter64", "ModuleIdentity", "Integer32", "mib-2", "experimental", "MibIdentifier", "ObjectIdentity", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
TruthValue, DisplayString, RowStatus, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TimeStamp", "TextualConvention")
class DisplayString(OctetString):
    pass

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(17, 17)
    fixedLength = 17

class InetAddressType(TextualConvention, Integer32):
    description = 'A value that represents a type of Internet address.\n\n         unknown(0)  An unknown address type.  This value MUST\n                     be used if the value of the corresponding\n                     InetAddress object is a zero-length string.\n                     It may also be used to indicate an IP address\n                     that is not in one of the formats defined\n                     below.\n\n         ipv4(1)     An IPv4 address as defined by the\n                     InetAddressIPv4 textual convention.\n\n         ipv6(2)     An IPv6 address as defined by the\n                     InetAddressIPv6 textual convention.\n\n         ipv4z(3)    A non-global IPv4 address including a zone\n                     index as defined by the InetAddressIPv4z\n                     textual convention.\n\n         ipv6z(4)    A non-global IPv6 address including a zone\n                     index as defined by the InetAddressIPv6z\n                     textual convention.\n\n         dns(16)     A DNS domain name as defined by the\n                     InetAddressDNS textual convention.\n\n         Each definition of a concrete InetAddressType value must be\n         accompanied by a definition of a textual convention for use\n         with that InetAddressType.\n\n         To support future extensions, the InetAddressType textual\n         convention SHOULD NOT be sub-typed in object type definitions.\n         It MAY be sub-typed in compliance statements in order to\n         require only a subset of these address types for a compliant\n         implementation.\n\n         Implementations must ensure that InetAddressType objects\n         and any dependent objects (e.g., InetAddress objects) are\n         consistent.  An inconsistentValue error must be generated\n         if an attempt to change an InetAddressType object would,\n         for example, lead to an undefined InetAddress value.  In\n\n         particular, InetAddressType/InetAddress pairs must be\n         changed together if the address type changes (e.g., from\n         ipv6(2) to ipv4(1)).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 16))
    namedValues = NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("dns", 16))

class InetAddress(TextualConvention, OctetString):
    description = "Denotes a generic Internet address.\n\n         An InetAddress value is always interpreted within the context\n         of an InetAddressType value.  Every usage of the InetAddress\n         textual convention is required to specify the InetAddressType\n         object that provides the context.  It is suggested that the\n         InetAddressType object be logically registered before the\n         object(s) that use the InetAddress textual convention, if\n         they appear in the same logical row.\n\n         The value of an InetAddress object must always be\n         consistent with the value of the associated InetAddressType\n         object.  Attempts to set an InetAddress object to a value\n         inconsistent with the associated InetAddressType\n         must fail with an inconsistentValue error.\n\n         When this textual convention is used as the syntax of an\n         index object, there may be issues with the limit of 128\n         sub-identifiers specified in SMIv2, STD 58.  In this case,\n         the object definition MUST include a 'SIZE' clause to\n         limit the number of potential instance sub-identifiers;\n         otherwise the applicable constraints MUST be stated in\n         the appropriate conceptual row DESCRIPTION clauses, or\n         in the surrounding documentation if there is no single\n         DESCRIPTION clause that is appropriate."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class VlanList(TextualConvention, OctetString):
    description = "Vlan ID range is (1..4094), \n         Each octet within this value specifies a set of eight\n         vlans, with the first octet specifying vlans 1 through\n         8, the second octet specifying vlans 9 through 16, etc.\n         Within each octet, the most significant bit represents\n         the lowest numbered vlan, and the least significant bit\n         represents the highest numbered vlan.  If that bit has \n         a value of '1' then that vlan is allowed to pass ; \n         the vlan is not allowed if its bit has a value of '0'.\n         the value is a changing cells:if the maximum of vlans is 8,you\n         sends one octet to me;the remnant octet's value is defaulted '0',\n         the remnant octet needn't to send to me."
    status = 'current'

class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight\n        ports, with the first octet specifying ports 1 through\n        8, the second octet specifying ports 9 through 16, etc.\n        Within each octet, the most significant bit represents\n        the lowest numbered port, and the least significant bit\n        represents the highest numbered port.  Thus, each port\n        of the bridge is represented by a single bit within the\n        value of this object.  If that bit has a value of '1'\n        then that port is included in the set of ports; the port\n        is not included if its bit has a value of '0'."
    status = 'current'

class EnabledStatusPrivate(TextualConvention, Integer32):
    description = 'A simple status value for the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enabled", 1), ("disabled", 0))

class ValidStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object to create and destroy\n         a table entry. This is a simplified variant of RowStatus as it\n         supports only two values. Setting it to valid(1) creates an entry.\n         Setting it to invalid(2) destroys an entry.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("valid", 1), ("invalid", 0))

class OspfBigMetric(TextualConvention, Integer32):
    description = 'The OSPF External Metric.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16777214)

class OspfAreaID(TextualConvention, IpAddress):
    description = 'An OSPF Area Identifier.'
    status = 'current'

class SnmpAdminString(TextualConvention, OctetString):
    description = 'An octet string containing administrative\n                 information, preferably in human-readable form.\n\n                 To facilitate internationalization, this\n                 information is represented using the ISO/IEC\n                 IS 10646-1 character set, encoded as an octet\n                 string using the UTF-8 transformation format\n                 described in [RFC2279].\n\n                 Since additional code points are added by\n                 amendments to the 10646 standard from time\n                 to time, implementations must be prepared to\n                 encounter any code point from 0x00000000 to\n                 0x7fffffff.  Byte sequences that do not\n                 correspond to the valid UTF-8 encoding of a\n                 code point or are outside this range are\n                 prohibited.\n\n                 The use of control codes should be avoided.\n\n                 When it is necessary to represent a newline,\n                 the control code sequence CR LF should be used.\n\n                 The use of leading or trailing white space should\n                 be avoided.\n\n                 For code points not directly supported by user\n                 interface hardware or software, an alternative\n                 means of entry and display, such as hexadecimal,\n                 may be provided.\n\n                 For information encoded in 7-bit US-ASCII,\n                 the UTF-8 encoding is identical to the\n                 US-ASCII encoding.\n\n                 UTF-8 may require multiple bytes to represent a\n                 single character / code point; thus the length\n                 of this object in octets may be different from\n                 the number of characters encoded.  Similarly,\n                 size constraints refer to the number of encoded\n                 octets, not the number of characters represented\n                 by an encoding.\n\n                 Note that when this TC is used for an object that\n                 is used or envisioned to be used as an index, then\n                 a SIZE restriction MUST be specified so that the\n                 number of sub-identifiers for any object instance\n                 does not exceed the limit of 128, as defined by\n                 [RFC3416].\n\n                 Note that the size of an SnmpAdminString object is\n                 measured in octets, not characters.\n                '
    status = 'current'
    displayHint = '255t'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class InterfaceIndex(TextualConvention, Integer32):
    description = "A unique value, greater than zero, for each interface or\n            interface sub-layer in the managed system.  It is\n            recommended that values are assigned contiguously starting\n            from 1.  The value for each interface sub-layer must remain\n            constant at least from one re-initialization of the entity's\n            network management system to the next re-initialization."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class InterfaceIndexOrZero(TextualConvention, Integer32):
    description = 'This textual convention is an extension of the\n            InterfaceIndex convention.  The latter defines a greater\n            than zero value used to identify an interface or interface\n            sub-layer in the managed system.  This extension permits the\n            additional value of zero.  the value zero is object-specific\n            and must therefore be defined as part of the description of\n            any object which uses this syntax.  Examples of the usage of\n            zero might include situations where interface was unknown,\n            or when none or all interfaces need to be referenced.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class TimeFilter(TextualConvention, TimeTicks):
    description = "To be used for the index to a table.  Allows an application\n        to download only those rows changed since a particular time.\n        A row is considered changed if the value of any object in the\n        row changes or if the row is created or deleted.\n\n        When sysUpTime is equal to zero, this table shall be empty.\n\n        One entry exists for each past value of sysUpTime, except that\n        the whole table is purged should sysUpTime wrap.\n\n        As this basic row is updated new conceptual rows are created\n        (which still share the now updated object values with all\n        other instances).  The number of instances which are created\n        is determined by the value of sysUpTime at which the basic row\n        was last updated.  One instance will exist for each value of\n        sysUpTime at the last update time for the row.  A new\n        timeMark instance is created for each new sysUpTime value.\n        Each new conceptual row will be associated with the timeMark\n        instance which was created at the value of sysUpTime with\n        which the conceptual row is to be associated.\n\n        By definition all conceptual rows were updated at or after\n        time zero and so at least one conceptual row (associated with\n        timeMark.0) must exist for each underlying (basic) row.\n\n        See the appendix for further discussion of this variable.\n\n        Consider the following fooTable:\n\n        fooTable ...\n        INDEX { fooTimeMark, fooIndex }\n\n        FooEntry {\n           fooTimeMark  TimeFilter\n           fooIndex     INTEGER,\n           fooCounts    Counter\n        }\n\n        Should there be two basic rows in this table (fooIndex == 1,\n        fooIndex == 2) and row 1 was updated most recently at time 6,\n        while row 2 was updated most recently at time 8, and both rows\n        had been updated on several earlier occasions such that the\n        current values were 5 and 9 respectively then the following\n        fooCounts instances would exist.\n\n        fooCounts.0.1  5\n        fooCounts.0.2  9\n        fooCounts.1.1  5\n\n\n\n\n\n        fooCounts.1.2  9\n        fooCounts.2.1  5\n        fooCounts.2.2  9\n        fooCounts.3.1  5\n        fooCounts.3.2  9\n        fooCounts.4.1  5\n        fooCounts.4.2  9\n        fooCounts.5.1  5\n        fooCounts.5.2  9\n        fooCounts.6.1  5\n        fooCounts.6.2  9\n        fooCounts.7.2  9    -- note that row 1 doesn't exist for\n        fooCounts.8.2  9    -- times 7 and 8"
    status = 'current'

class Ipv6Address(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 addresses.\n        This is a binary string of 16 octets in network\n        byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

NAG = MibIdentifier((1, 3, 6, 1, 4, 1, 40418))
SNR = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7))
os = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100))
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 102))
priSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1))
priSpanningTree = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2))
priPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3))
priIpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4))
priVlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5))
priJumblyStacking = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6))
priUamSecurityPortMib = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7))
priIgmpSnoopingMib = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8))
priQinQmib = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9))
prisecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10))
priQos = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11))
primirror = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12))
pridhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13))
priportGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14))
prisnmpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15))
l3 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16))
sntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17))
urpf = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18))
dcscm = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20))
dcscm6 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21))
prClusterv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22))
dns = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23))
ntpSnmpMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25))
priPoeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26))
priQos2 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27))
dot1xMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28))
portMacCountLimit = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29))
ddm = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30))
priPppoeIaMib = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31))
portSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32))
macNotificationMib = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33))
prieeePortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 34))
portRateLimit = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35))
macBlackholeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 36))
priCable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 37))
priMrppRing = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38))
erpsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39))
fdbMacInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40))
lldpPrivateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 200))
ntpSnmpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1))
ntpEntInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1))
ntpEntStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2))
sysResetUnit = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noReset", 1), ("setfactory", 2), ("warmReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResetUnit.setStatus('current')
if mibBuilder.loadTexts: sysResetUnit.setDescription(' setfactory(2)\n\t  warmReset(3)\n\t  noReset(1)\n\t  default the status is 1 ')
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: sysHardwareVersion.setDescription('The version information of switch hardware ')
sysSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: sysSoftwareVersion.setDescription('The version information of switch software ')
sysStackFlag = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stack", 1), ("noStack", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStackFlag.setStatus('current')
if mibBuilder.loadTexts: sysStackFlag.setDescription('If it is the status of stacking')
sysCPUMac = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 5), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUMac.setStatus('current')
if mibBuilder.loadTexts: sysCPUMac.setDescription("The MAC Address of the switch's CPU")
sysWriteConfig = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("write", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWriteConfig.setStatus('current')
if mibBuilder.loadTexts: sysWriteConfig.setDescription('write(1)save the current configuration')
sysPowerStateTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7), )
if mibBuilder.loadTexts: sysPowerStateTable.setStatus('current')
if mibBuilder.loadTexts: sysPowerStateTable.setDescription('the power supply status is only used for chassis switch')
sysPowerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1), ).setIndexNames((0, "NAG-MIB", "sysPowerSlotIndex"))
if mibBuilder.loadTexts: sysPowerStateEntry.setStatus('current')
if mibBuilder.loadTexts: sysPowerStateEntry.setDescription('power supply status')
sysPowerSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: sysPowerSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sysPowerSlotIndex.setDescription('Module model No.')
sysPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("sysPowerInstalled", 1), ("sysPowerNotInstalled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPowerState.setStatus('current')
if mibBuilder.loadTexts: sysPowerState.setDescription('if the power supply insert')
sysPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPowerValue.setStatus('current')
if mibBuilder.loadTexts: sysPowerValue.setDescription('Power Value')
sysPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("systemPower", 0), ("poePower", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPowerType.setStatus('current')
if mibBuilder.loadTexts: sysPowerType.setDescription('Power Type')
sysPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("abnormal", 1), ("na", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPowerStatus.setStatus('current')
if mibBuilder.loadTexts: sysPowerStatus.setDescription('Power Status')
sysSlotTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8), )
if mibBuilder.loadTexts: sysSlotTable.setStatus('current')
if mibBuilder.loadTexts: sysSlotTable.setDescription('machine information,it is only used by chassis.')
sysSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1), ).setIndexNames((0, "NAG-MIB", "sysSlotIndex"))
if mibBuilder.loadTexts: sysSlotEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlotEntry.setDescription('Switch information')
sysSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: sysSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sysSlotIndex.setDescription('Module Model No.')
sysCPUType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUType.setStatus('current')
if mibBuilder.loadTexts: sysCPUType.setDescription('CPU type')
sysCPUFiveSecondIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUFiveSecondIdle.setStatus('current')
if mibBuilder.loadTexts: sysCPUFiveSecondIdle.setDescription('Last  5 second CPU IDLE')
sysCPUThirtySecondIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUThirtySecondIdle.setStatus('current')
if mibBuilder.loadTexts: sysCPUThirtySecondIdle.setDescription('Last 30 second CPU IDLE')
sysCPUFiveMinuteIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUFiveMinuteIdle.setStatus('current')
if mibBuilder.loadTexts: sysCPUFiveMinuteIdle.setDescription('Last  5 minute CPU IDLE')
sysCPUIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUIdle.setStatus('current')
if mibBuilder.loadTexts: sysCPUIdle.setDescription('From  running  CPU IDLE')
sysMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemorySize.setStatus('current')
if mibBuilder.loadTexts: sysMemorySize.setDescription('memory size')
sysMemoryBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemoryBusy.setStatus('current')
if mibBuilder.loadTexts: sysMemoryBusy.setDescription('memory usage rent')
sysFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFlashSize.setStatus('current')
if mibBuilder.loadTexts: sysFlashSize.setDescription('The flash capacity of this slot.')
sysTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTemperature.setStatus('current')
if mibBuilder.loadTexts: sysTemperature.setDescription('The Temperature of this slot.80 is 80centigrade')
sysCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuUsage.setStatus('current')
if mibBuilder.loadTexts: sysCpuUsage.setDescription('The CPU usage of this slot.')
sysMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: sysMemoryUsage.setDescription('The memory usage of this slot.')
sysMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemUsage.setStatus('current')
if mibBuilder.loadTexts: sysMemUsage.setDescription('The memory usage of this slot.')
sysPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortNum.setStatus('current')
if mibBuilder.loadTexts: sysPortNum.setDescription('The physical port number of this slot.')
sysFreeFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFreeFlashSize.setStatus('current')
if mibBuilder.loadTexts: sysFreeFlashSize.setDescription('The free flash capacity of this slot in Kbytes.')
sysMemorySizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemorySizeInMB.setStatus('current')
if mibBuilder.loadTexts: sysMemorySizeInMB.setDescription('The memory size in MB')
switchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9), )
if mibBuilder.loadTexts: switchInfoTable.setStatus('current')
if mibBuilder.loadTexts: switchInfoTable.setDescription('Table of descriptive and status information about\n                     switches in this system.')
switchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9, 1), ).setIndexNames((0, "NAG-MIB", "swSlotIndex"), (0, "NAG-MIB", "swUnitIndex"))
if mibBuilder.loadTexts: switchInfoEntry.setStatus('current')
if mibBuilder.loadTexts: switchInfoEntry.setDescription('An entry in the table, containing information\n                     about a single switch in this system.')
swSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSlotIndex.setStatus('current')
if mibBuilder.loadTexts: swSlotIndex.setDescription('This object identifies the slot within the switch\n                     for which this entry contains information.                    \n                     While for the chassis device, the value is real switch slot number.')
swUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swUnitIndex.setDescription('This object identifies the switch within the system\n                     for which this entry contains information. This\n                     value can never be greater than switchNumber.')
swModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 8, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 299, 300, 301, 302, 303, 304, 305, 320, 321, 322, 323, 324, 326))).clone(namedValues=NamedValues(("typeMFC", 0), ("typeSFC", 1), ("type1GS", 2), ("type1GL", 3), ("type100M1GT", 4), ("type10M100MT", 8), ("type1-M12GB", 101), ("type1-12GT", 102), ("type1-210Gx", 103), ("type1-110Gx", 104), ("type1-CPU8245", 105), ("type1-BACKPLANE", 106), ("type1-24GB", 107), ("type1-24GT", 108), ("type1-36TX", 109), ("type1-4GX32TX", 110), ("type1-16FX", 111), ("type1-ES2GB", 112), ("type1-M4GX24TX", 113), ("type1-ES", 114), ("type1-MI", 115), ("type1-MII", 116), ("type1-12GB", 117), ("type1-M8GB", 118), ("type1-2XFP8GX16GB", 119), ("type1-8GX16GB", 120), ("type1-4GX24TX", 121), ("type1-L-M4GX24TX", 122), ("type1-1XFP8GX16GB", 123), ("type1-2XFP12GX12GT", 124), ("type1-12GX12GT", 125), ("type1-1XFP12GX12GT", 126), ("type1-48GT", 127), ("type1-M1XFP12GX12GT", 128), ("type1-4XFP", 129), ("type1-48GB", 130), ("type1-M44GT", 131), ("type1-M1XFP12GX12GB", 132), ("type1-12GX12GB", 133), ("type1-2XFP12GX12GB", 134), ("type1-4GB12GX8GT", 135), ("type1-2XFP24GB12GT", 136), ("type1-24GB12GT", 137), ("type1-NEWMI", 138), ("type1-M1XFP12GX12GTR4", 139), ("type1-12GX12GTR4", 140), ("type1-2XFP12GX12GTR4", 141), ("type1-E-24GB12GT", 142), ("type1-E-2XFP24GB12GT", 143), ("type1-MSC", 144), ("type8QSFP", 145), ("type1-FW", 146), ("type1-OF", 147), ("type1-MIIR2", 148), ("type1-E-M16GX8GB", 149), ("type1-E-4XS16GX8GB", 150), ("type1-2XFP12GX12GTR5", 151), ("type1-MIIR3", 152), ("type1-M2XS8GX16GB", 154), ("type1-28GB16GT4XS", 155), ("type1-E-48GT", 156), ("type1-44GB4XS", 157), ("type1-20XS2Q", 158), ("type2-M12GB", 165), ("type2-12GT", 166), ("type2-210Gx", 167), ("type2-110Gx", 168), ("type2-CPU8245", 169), ("type2-BACKPLANE", 170), ("type2-24GB", 171), ("type2-24GT", 172), ("type2-36TX", 173), ("type2-4GX32TX", 174), ("type2-16FX", 175), ("type2-ES2GB", 176), ("type2-M4GX24TX", 177), ("type2-ES", 178), ("type2-MI", 179), ("type2-MII", 180), ("type2-12GB", 181), ("type2-M8GB", 182), ("type2-2XFP8GX16GB", 183), ("type2-8GX16GB", 184), ("type2-4GX24TX", 185), ("type2-L-M4GX24TX", 186), ("type2-1XFP8GX16GB", 187), ("type2-2XFP12GX12GT", 188), ("type2-12GX12GT", 189), ("type2-1XFP12GX12GT", 190), ("type2-48GT", 191), ("type2-M1XFP12GX12GT", 192), ("type2-4XFP", 193), ("type2-48GB", 194), ("type2-M44GT", 195), ("type2-M1XFP12GX12GB", 196), ("type2-12GX12GB", 197), ("type2-2XFP12GX12GB", 198), ("type2-4GB12GX8GT", 199), ("type2-2XFP24GB12GT", 200), ("type2-24GB12GT", 201), ("type2-NEWMI", 202), ("type2-M1XFP12GX12GTR4", 203), ("type2-12GX12GTR4", 204), ("type2-2XFP12GX12GTR4", 205), ("type2-E-24GB12GT", 206), ("type2-E-2XFP24GB12GT", 207), ("type2-MSC", 208), ("type2-M1XFP12GX12GTV", 209), ("type2-FW", 210), ("type2-OF", 211), ("type2-MIIR2", 212), ("type2-E-M16GX8GB", 213), ("type2-E-4XS16GX8GB", 214), ("type2-2XFP12GX12GTR5", 215), ("type2-MIIR3", 216), ("type2-M2XS8GX16GB", 218), ("type2-28GB16GT4XS", 219), ("type2-E-48GT", 220), ("type2-44GB4XS", 221), ("type2-20XS2Q", 222), ("type3-M", 228), ("type3-MI", 229), ("type3-MII", 230), ("type3-24GT", 231), ("type3-24GB", 232), ("type3-ES-FW", 233), ("type3-4XFP", 234), ("type3-8XFP", 235), ("type3-24GT-V", 236), ("type3-24GB-V", 237), ("type3-24SFP-PLUS", 238), ("type3-SUP", 239), ("type3-FAB", 240), ("type3-MSC", 241), ("type3-24GT-WS", 242), ("type3-24GB-WS", 243), ("type3-FW", 244), ("type3-8QSFP", 245), ("type3-OF", 246), ("type3-20XS2Q", 247), ("type3-FAB-TWO-CHIP", 248), ("type3-08BACKPLANE", 299), ("type4-4GT", 300), ("type4-4FX", 301), ("type4-2GB", 302), ("type4-4TX", 303), ("type4-4GB", 304), ("type4-4FB", 305), ("type5-M16K-SUP", 320), ("type5-M16K-16Q", 321), ("type5-M16K-FC", 322), ("type5-M16K-48XS2Q", 323), ("type5-M16K-24T24S2XS", 324), ("type5-DCFW-1800-M16K", 326)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swModuleType.setStatus('current')
if mibBuilder.loadTexts: swModuleType.setDescription('Type of expansion module in this switch slot.')
switchFileCopy = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10))
fileUserName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileUserName.setStatus('current')
if mibBuilder.loadTexts: fileUserName.setDescription('ftp user name')
fileUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileUserPassword.setStatus('current')
if mibBuilder.loadTexts: fileUserPassword.setDescription('ftp user password')
fileIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileIPaddress.setStatus('current')
if mibBuilder.loadTexts: fileIPaddress.setDescription('ftp or tftp server ip address')
sourceFileCopy = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceFileCopy.setStatus('current')
if mibBuilder.loadTexts: sourceFileCopy.setDescription('Source file name or Copy from current system configuration\n\t                   .')
destinationFileCopy = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationFileCopy.setStatus('current')
if mibBuilder.loadTexts: destinationFileCopy.setDescription('Destination file name or Copy to startup configuration.')
fileCopyMode = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ascii", 0), ("binary", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyMode.setStatus('current')
if mibBuilder.loadTexts: fileCopyMode.setDescription('ascii(0): ASCII file mode;\n                 binary(1): Binary file mode.')
fileCopyUseMode = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ftp", 1), ("tftp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyUseMode.setStatus('current')
if mibBuilder.loadTexts: fileCopyUseMode.setDescription('ftp(1): ftp server or client;\n                 tftp(2): tftp server or client.')
fileCopy = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upload", 1), ("download", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopy.setStatus('current')
if mibBuilder.loadTexts: fileCopy.setDescription('File copy configurate.')
fileCopyResult = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 0), ("ok", 1), ("uploading", 2), ("downloading", 3), ("idle", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyResult.setStatus('current')
if mibBuilder.loadTexts: fileCopyResult.setDescription('The result of file copy:error(0):copy file failure;ok(1):copy file success;\n            uploading(2):in process of upload file;downloading(3):in process of download file;\n            idle(4):be out of copy file.')
fileName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileName.setStatus('current')
if mibBuilder.loadTexts: fileName.setDescription('Source file name and destination file name.')
fileType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("any", 0), ("img", 1), ("cfg", 2), ("log", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileType.setStatus('current')
if mibBuilder.loadTexts: fileType.setDescription('File type.')
filePort = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filePort.setStatus('current')
if mibBuilder.loadTexts: filePort.setDescription('ftp or tftp server port number.')
fileCopyFailReason = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyFailReason.setStatus('current')
if mibBuilder.loadTexts: fileCopyFailReason.setDescription('The reason when copy file failed.')
fileCMCCCopy = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upload", 1), ("download", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCMCCCopy.setStatus('current')
if mibBuilder.loadTexts: fileCMCCCopy.setDescription('File copy configurate.')
fileCMCCIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCMCCIPaddress.setStatus('current')
if mibBuilder.loadTexts: fileCMCCIPaddress.setDescription('ftp or tftp server ip address')
fileCMCCCopyResult = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 0), ("ok", 1), ("uploading", 2), ("downloading", 3), ("idle", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCMCCCopyResult.setStatus('current')
if mibBuilder.loadTexts: fileCMCCCopyResult.setDescription('The result of file copy:error(0):copy file failure;ok(1):copy file success;\n            uploading(2):in process of upload file;downloading(3):in process of download file;\n            idle(4):be out of copy file.')
switchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11))
switchCPUType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCPUType.setStatus('current')
if mibBuilder.loadTexts: switchCPUType.setDescription('The CPU type of switch')
switchCPUFiveSecondIdle = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCPUFiveSecondIdle.setStatus('current')
if mibBuilder.loadTexts: switchCPUFiveSecondIdle.setDescription('Last  5 second CPU IDLE')
switchCPUThirtySecondIdle = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCPUThirtySecondIdle.setStatus('current')
if mibBuilder.loadTexts: switchCPUThirtySecondIdle.setDescription('Last 30 second CPU IDLE')
switchCPUFiveMinuteIdle = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCPUFiveMinuteIdle.setStatus('current')
if mibBuilder.loadTexts: switchCPUFiveMinuteIdle.setDescription('Last  5 minute CPU IDLE')
switchCPUIdle = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCPUIdle.setStatus('current')
if mibBuilder.loadTexts: switchCPUIdle.setDescription('From  running  CPU IDLE')
switchMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchMemorySize.setStatus('current')
if mibBuilder.loadTexts: switchMemorySize.setDescription('memory size')
switchMemoryBusy = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchMemoryBusy.setStatus('current')
if mibBuilder.loadTexts: switchMemoryBusy.setDescription('memory usage rent')
switchFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFlashSize.setStatus('current')
if mibBuilder.loadTexts: switchFlashSize.setDescription('The flash capacity of switch.')
switchTemperature = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchTemperature.setStatus('current')
if mibBuilder.loadTexts: switchTemperature.setDescription('The Temperature of switch.80 is 80centigrade')
switchCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCpuUsage.setStatus('current')
if mibBuilder.loadTexts: switchCpuUsage.setDescription('The CPU usage of switch.')
switchMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: switchMemoryUsage.setDescription('The memory usage of switch.')
sysFanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12), )
if mibBuilder.loadTexts: sysFanTable.setStatus('current')
if mibBuilder.loadTexts: sysFanTable.setDescription(' the state of fan.')
sysFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1), ).setIndexNames((0, "NAG-MIB", "sysFanIndex"))
if mibBuilder.loadTexts: sysFanEntry.setStatus('current')
if mibBuilder.loadTexts: sysFanEntry.setDescription('fan supply status')
sysFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: sysFanIndex.setStatus('current')
if mibBuilder.loadTexts: sysFanIndex.setDescription('system fan entry index')
sysFanInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sysFanNotInstalled", 0), ("sysFanInstalled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanInserted.setStatus('current')
if mibBuilder.loadTexts: sysFanInserted.setDescription('Whether the slot fan is installed or not.')
sysFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("abnormal", 1), ("normal", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanStatus.setStatus('current')
if mibBuilder.loadTexts: sysFanStatus.setDescription('Whether the slot fan is normal or abnormal.')
sysFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("low", 1), ("medium-low", 2), ("medium", 3), ("medium-high", 4), ("high", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFanSpeed.setStatus('current')
if mibBuilder.loadTexts: sysFanSpeed.setDescription('Status of Fan. Status: Low(1), Medium-Low(2), Medium(3), Medium-High(4), High(5), none(0) is readonly')
switchBootImgPrimary = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchBootImgPrimary.setStatus('current')
if mibBuilder.loadTexts: switchBootImgPrimary.setDescription('Set or get filename of boot img for first time,and the length of filename is between 1 and 128.')
switchBootImgSecondary = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchBootImgSecondary.setStatus('current')
if mibBuilder.loadTexts: switchBootImgSecondary.setDescription('Set or get filename of boot img for second time,and the length of filename is between 1 and 128.')
switchBootStartUpCfg = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchBootStartUpCfg.setStatus('current')
if mibBuilder.loadTexts: switchBootStartUpCfg.setDescription('Set or get filename of boot startup config ,and the length of filename is between 1 and 128.')
showSwitchStartUpStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("success", 2), ("fail", 3), ("in-progress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showSwitchStartUpStatus.setStatus('current')
if mibBuilder.loadTexts: showSwitchStartUpStatus.setDescription("this object identifies start up status of switch and AM of chassis.1(idle) means hasn't wrote cfg since boot,\n        2(success) means wrote cfg successfully; 3(fail) means wrote cfg fail; \n        4(in-progress) means is writing cfg right now. for chassis:it can only be used by active master")
sysSlotBootInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17), )
if mibBuilder.loadTexts: sysSlotBootInfoTable.setStatus('current')
if mibBuilder.loadTexts: sysSlotBootInfoTable.setDescription(' A list of boot information.it is only used by chassis.')
sysSlotBootInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1), ).setIndexNames((0, "NAG-MIB", "sysBootInfoIndex"))
if mibBuilder.loadTexts: sysSlotBootInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlotBootInfoEntry.setDescription(' Entry for boot information.')
sysBootInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBootInfoIndex.setStatus('current')
if mibBuilder.loadTexts: sysBootInfoIndex.setDescription('slot NO.')
sysBootImgPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootImgPrimary.setStatus('current')
if mibBuilder.loadTexts: sysBootImgPrimary.setDescription('Set or get filename of boot img for first time,and the length of filename is between 1 and 128.')
sysBootImgSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootImgSecondary.setStatus('current')
if mibBuilder.loadTexts: sysBootImgSecondary.setDescription('Set or get filename of boot img for backup,and the length of filename is between 1 and 128.')
sysBootStartupCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootStartupCfg.setStatus('current')
if mibBuilder.loadTexts: sysBootStartupCfg.setDescription('Set or get filename of boot startup config ,and the length of filename is between 1 and 128.')
sysSetBootPassword = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18))
oldPassword = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oldPassword.setStatus('current')
if mibBuilder.loadTexts: oldPassword.setDescription('If there is a old password, you should enter the old password, then you can set the new password or delete\n        the password. The length of the password is between 3 and 32, enter wrong old password or enter wrong length \n        password, you can not set new password or delete password. ')
newPassword = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newPassword.setStatus('current')
if mibBuilder.loadTexts: newPassword.setDescription('Enter the new password you want to set, and the length of the password is between 3 and 32.')
confirmPassword = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confirmPassword.setStatus('current')
if mibBuilder.loadTexts: confirmPassword.setDescription('Enter the new password again to confirm the new password, the password entries must match.')
deletePassword = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deletePassword.setStatus('current')
if mibBuilder.loadTexts: deletePassword.setDescription("If you want to delete the password, enter '1'; if you don't want delete it, you can enter '0'\n        or do nothing.")
sysSetBootPwStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSetBootPwStatus.setStatus('current')
if mibBuilder.loadTexts: sysSetBootPwStatus.setDescription("If you enter '1', excute the operation you set. Firstly, judge the type of deletePassword, if \n        it is '1', delete the password, and return ok; if the type is '0', then modify the password. At\n        first judge the correctness of oldpassword, then judge the new password equal to confirm password.\n        if they are all right, set the new password.")
sysAddUser = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22))
sysUserName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysUserName.setStatus('current')
if mibBuilder.loadTexts: sysUserName.setDescription('set the username.')
sysUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysUserPassword.setStatus('current')
if mibBuilder.loadTexts: sysUserPassword.setDescription('set the password.')
sysUserPasswordOption = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 7))).clone(namedValues=NamedValues(("uncrypted", 0), ("crypted", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysUserPasswordOption.setStatus('current')
if mibBuilder.loadTexts: sysUserPasswordOption.setDescription('set a uncrypted(0) or crypted(7) password,default uncrypted(0).')
sysUserNamePrivilege = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysUserNamePrivilege.setStatus('current')
if mibBuilder.loadTexts: sysUserNamePrivilege.setDescription('set username privilege,default 15.')
sysAddUserStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAddUserStatus.setStatus('current')
if mibBuilder.loadTexts: sysAddUserStatus.setDescription('enable(1) user name and password.')
priPowerTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23), )
if mibBuilder.loadTexts: priPowerTable.setStatus('current')
if mibBuilder.loadTexts: priPowerTable.setDescription('Table of power information about\n                     switches in this switch.')
priPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23, 1), ).setIndexNames((0, "NAG-MIB", "priPowerIndex"))
if mibBuilder.loadTexts: priPowerEntry.setStatus('current')
if mibBuilder.loadTexts: priPowerEntry.setDescription('An entry in the table, containing information\n                     about power in this switch.')
priPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priPowerIndex.setStatus('current')
if mibBuilder.loadTexts: priPowerIndex.setDescription('get power number(power1-AC;power2-DC).')
priPowerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priPowerPresent.setStatus('current')
if mibBuilder.loadTexts: priPowerPresent.setDescription("get power's status of present(1:present; 0: not present; 2:unknown).")
priPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priPowerSupply.setStatus('current')
if mibBuilder.loadTexts: priPowerSupply.setDescription("get power's supply status(1:up; 0:shutdown; ; 2:unknown).")
vsfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30))
vsfCount = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfCount.setStatus('current')
if mibBuilder.loadTexts: vsfCount.setDescription('vsf member count.')
vsfModuleTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2), )
if mibBuilder.loadTexts: vsfModuleTable.setStatus('current')
if mibBuilder.loadTexts: vsfModuleTable.setDescription('Table of descriptive and status information about\n                     vsf in this system.')
vsfModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2, 1), ).setIndexNames((0, "NAG-MIB", "vsfSlotIndex"), (0, "NAG-MIB", "vsfMemberIndex"))
if mibBuilder.loadTexts: vsfModuleEntry.setStatus('current')
if mibBuilder.loadTexts: vsfModuleEntry.setDescription('An entry in the table, containing information\n                     about  vsf in this system.')
vsfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfSlotIndex.setStatus('current')
if mibBuilder.loadTexts: vsfSlotIndex.setDescription('the value is real vsf slot number.')
vsfMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfMemberIndex.setStatus('current')
if mibBuilder.loadTexts: vsfMemberIndex.setDescription('vsf member index.')
vsfModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 8, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 299, 300, 301, 302, 303, 304, 305, 320, 321, 322, 323, 324))).clone(namedValues=NamedValues(("typeMFC", 0), ("typeSFC", 1), ("type1GS", 2), ("type1GL", 3), ("type100M1GT", 4), ("type10M100MT", 8), ("type1-M12GB", 101), ("type1-12GT", 102), ("type1-210Gx", 103), ("type1-110Gx", 104), ("type1-CPU8245", 105), ("type1-BACKPLANE", 106), ("type1-24GB", 107), ("type1-24GT", 108), ("type1-36TX", 109), ("type1-4GX32TX", 110), ("type1-16FX", 111), ("type1-ES2GB", 112), ("type1-M4GX24TX", 113), ("type1-ES", 114), ("type1-MI", 115), ("type1-MII", 116), ("type1-12GB", 117), ("type1-M8GB", 118), ("type1-2XFP8GX16GB", 119), ("type1-8GX16GB", 120), ("type1-4GX24TX", 121), ("type1-L-M4GX24TX", 122), ("type1-1XFP8GX16GB", 123), ("type1-2XFP12GX12GT", 124), ("type1-12GX12GT", 125), ("type1-1XFP12GX12GT", 126), ("type1-48GT", 127), ("type1-M1XFP12GX12GT", 128), ("type1-4XFP", 129), ("type1-48GB", 130), ("type1-M44GT", 131), ("type1-M1XFP12GX12GB", 132), ("type1-12GX12GB", 133), ("type1-2XFP12GX12GB", 134), ("type1-4GB12GX8GT", 135), ("type1-2XFP24GB12GT", 136), ("type1-24GB12GT", 137), ("type1-NEWMI", 138), ("type1-M1XFP12GX12GTR4", 139), ("type1-12GX12GTR4", 140), ("type1-2XFP12GX12GTR4", 141), ("type1-E-24GB12GT", 142), ("type1-E-2XFP24GB12GT", 143), ("type1-MSC", 144), ("type8QSFP", 145), ("type1-FW", 146), ("type1-OF", 147), ("type1-MIIR2", 148), ("type1-E-M16GX8GB", 149), ("type1-E-4XS16GX8GB", 150), ("type1-2XFP12GX12GTR5", 151), ("type1-MIIR3", 152), ("type1-M2XS8GX16GB", 154), ("type1-28GB16GT4XS", 155), ("type1-E-48GT", 156), ("type1-44GB4XS", 157), ("type1-20XS2Q", 158), ("type2-M12GB", 165), ("type2-12GT", 166), ("type2-210Gx", 167), ("type2-110Gx", 168), ("type2-CPU8245", 169), ("type2-BACKPLANE", 170), ("type2-24GB", 171), ("type2-24GT", 172), ("type2-36TX", 173), ("type2-4GX32TX", 174), ("type2-16FX", 175), ("type2-ES2GB", 176), ("type2-M4GX24TX", 177), ("type2-ES", 178), ("type2-MI", 179), ("type2-MII", 180), ("type2-12GB", 181), ("type2-M8GB", 182), ("type2-2XFP8GX16GB", 183), ("type2-8GX16GB", 184), ("type2-4GX24TX", 185), ("type2-L-M4GX24TX", 186), ("type2-1XFP8GX16GB", 187), ("type2-2XFP12GX12GT", 188), ("type2-12GX12GT", 189), ("type2-1XFP12GX12GT", 190), ("type2-48GT", 191), ("type2-M1XFP12GX12GT", 192), ("type2-4XFP", 193), ("type2-48GB", 194), ("type2-M44GT", 195), ("type2-M1XFP12GX12GB", 196), ("type2-12GX12GB", 197), ("type2-2XFP12GX12GB", 198), ("type2-4GB12GX8GT", 199), ("type2-2XFP24GB12GT", 200), ("type2-24GB12GT", 201), ("type2-NEWMI", 202), ("type2-M1XFP12GX12GTR4", 203), ("type2-12GX12GTR4", 204), ("type2-2XFP12GX12GTR4", 205), ("type2-E-24GB12GT", 206), ("type2-E-2XFP24GB12GT", 207), ("type2-MSC", 208), ("type2-M1XFP12GX12GTV", 209), ("type2-FW", 210), ("type2-OF", 211), ("type2-MIIR2", 212), ("type2-E-M16GX8GB", 213), ("type2-E-4XS16GX8GB", 214), ("type2-2XFP12GX12GTR5", 215), ("type2-MIIR3", 216), ("type2-M2XS8GX16GB", 218), ("type2-28GB16GT4XS", 219), ("type2-E-48GT", 220), ("type2-44GB4XS", 221), ("type2-20XS2Q", 222), ("type3-M", 228), ("type3-MI", 229), ("type3-MII", 230), ("type3-24GT", 231), ("type3-24GB", 232), ("type3-ES-FW", 233), ("type3-4XFP", 234), ("type3-8XFP", 235), ("type3-24GT-V", 236), ("type3-24GB-V", 237), ("type3-24SFP-PLUS", 238), ("type3-SUP", 239), ("type3-FAB", 240), ("type3-MSC", 241), ("type3-24GT-WS", 242), ("type3-24GB-WS", 243), ("type3-FW", 244), ("type3-8QSFP", 245), ("type3-OF", 246), ("type3-20XS2Q", 247), ("type3-FAB-TWO-CHIP", 248), ("type3-08BACKPLANE", 299), ("type4-4GT", 300), ("type4-4FX", 301), ("type4-2GB", 302), ("type4-4TX", 303), ("type4-4GB", 304), ("type4-4FB", 305), ("type5-M16K-SUP", 320), ("type5-M16K-16Q", 321), ("type5-M16K-FC", 322), ("type5-M16K-48XS2Q", 323), ("type5-M16K-24T24S2XS", 324)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfModuleType.setStatus('current')
if mibBuilder.loadTexts: vsfModuleType.setDescription('Type of expansion module in this vsf slot.')
sysMonitorAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31), )
if mibBuilder.loadTexts: sysMonitorAlarmTable.setStatus('current')
if mibBuilder.loadTexts: sysMonitorAlarmTable.setDescription(' the state of MonitorAlarm.')
sysMonitorAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1), ).setIndexNames((0, "NAG-MIB", "sysMonitorAlarmIndex"))
if mibBuilder.loadTexts: sysMonitorAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: sysMonitorAlarmEntry.setDescription('MonitorAlarm supply status')
sysMonitorAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 1), Integer32())
if mibBuilder.loadTexts: sysMonitorAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: sysMonitorAlarmIndex.setDescription('system MonitorAlarm entry index')
sysMonitorAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sysMonitorAlarmNotEnable", 0), ("sysMonitorAlarmEnable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMonitorAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: sysMonitorAlarmEnable.setDescription('Whether the slot MonitorAlarm is enabled or not.')
sysMonitorAlarmBindSet = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("input1-output1", 1), ("input1-output2", 2), ("input2-output1", 3), ("input2-output2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMonitorAlarmBindSet.setStatus('current')
if mibBuilder.loadTexts: sysMonitorAlarmBindSet.setDescription('Whether the slot fan is normal or abnormal.')
sysMonitorAlarmInputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("input1-high", 1), ("input1-low", 2), ("input2-high", 3), ("input2-low", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMonitorAlarmInputSet.setStatus('current')
if mibBuilder.loadTexts: sysMonitorAlarmInputSet.setDescription('InputSet of MonitorAlarm. Status: input1-high(1), input1-low(2), input2-high(3), input2-low(4) is readonly')
sysMonitorAlarmOutputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("output1-high", 1), ("output1-low", 2), ("output2-high", 3), ("output2-low", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMonitorAlarmOutputSet.setStatus('current')
if mibBuilder.loadTexts: sysMonitorAlarmOutputSet.setDescription('Output of MonitorAlarm. Status: output1-high(1), output1-low(2), output2-high(3)), output2-low(4)is readonly')
deviceTypeID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTypeID.setStatus('current')
if mibBuilder.loadTexts: deviceTypeID.setDescription('the hardware type ID of the physical entity.')
rpsPowerVoltage = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsPowerVoltage.setStatus('current')
if mibBuilder.loadTexts: rpsPowerVoltage.setDescription('show rps power voltage.')
spanGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: spanGlobalEnable.setDescription(' Enable or disable the Spanning Tree algorithm in the switch.')
mstpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2))
mstpSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1))
mstpEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpEnable.setStatus('current')
if mibBuilder.loadTexts: mstpEnable.setDescription('Enable or disable the Spanning Tree algorithm in the switch. \n                 This scalar takes effect when Spanning Tree is globally enabled.')
mstpTCFlush = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("protect", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpTCFlush.setStatus('current')
if mibBuilder.loadTexts: mstpTCFlush.setDescription('configure global style of TC FLUSH')
mstpForwardTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpForwardTime.setStatus('current')
if mibBuilder.loadTexts: mstpForwardTime.setDescription('This time value, measured in units of hundredths of a second, \n                controls how fast a port changes its spanning state when moving \n                towards the Forwarding state.  The value determines how long the \n                port stays in each of the Listening and Learning states, which \n                precede the Forwarding state.  This value is also used, when a \n                topology change has been detected and is underway, to age all \n                dynamic entries in the Forwarding Database.')
mstpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpHelloTime.setStatus('current')
if mibBuilder.loadTexts: mstpHelloTime.setDescription('The amount of time between the transmission of Configuration \n                bridge PDUs by this node on any port when it is the root of \n                the spanning tree or trying to become so, in units of hundredths \n                of a second. This is the actual value that this bridge is currently using.')
mstpMaxage = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpMaxage.setStatus('current')
if mibBuilder.loadTexts: mstpMaxage.setDescription('The maximum age of Spanning Tree Protocol information learned \n                from the network on any port before it is discarded, in units \n                of hundredths of a second.  This is the actual value that this \n                bridge is currently using.')
mstpMaxhop = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpMaxhop.setStatus('current')
if mibBuilder.loadTexts: mstpMaxhop.setDescription('setting global Maxhop of mstp')
mstpMode = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stp", 0), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpMode.setStatus('current')
if mibBuilder.loadTexts: mstpMode.setDescription('setting global mode of mstp,stp or rstp')
mstpName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpName.setStatus('current')
if mibBuilder.loadTexts: mstpName.setDescription('setting the name of mst')
mstpRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: mstpRevisionLevel.setDescription('setting the global revision level of mstp')
mstpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: mstpBridgeForwardDelay.setDescription('setting global Forwardtime of mstp')
mstpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: mstpBridgeHelloTime.setDescription('setting global HelloTime of mstp')
mstpBridgeMaxage = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpBridgeMaxage.setStatus('current')
if mibBuilder.loadTexts: mstpBridgeMaxage.setDescription('setting global Maxage of mstp')
mstpInstancePortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3), )
if mibBuilder.loadTexts: mstpInstancePortTable.setStatus('current')
if mibBuilder.loadTexts: mstpInstancePortTable.setDescription(' interrelated parameter list of instance and port ')
mstpInstancePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1), ).setIndexNames((0, "NAG-MIB", "mstpInstancePortInstanceID"), (0, "NAG-MIB", "mstpInstancePortPortIndex"))
if mibBuilder.loadTexts: mstpInstancePortEntry.setStatus('current')
if mibBuilder.loadTexts: mstpInstancePortEntry.setDescription(' The index of this table is instance ID and port index')
mstpInstancePortInstanceID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: mstpInstancePortInstanceID.setStatus('current')
if mibBuilder.loadTexts: mstpInstancePortInstanceID.setDescription(' instance ID')
mstpInstancePortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: mstpInstancePortPortIndex.setStatus('current')
if mibBuilder.loadTexts: mstpInstancePortPortIndex.setDescription('port index')
mstpInstancePortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpInstancePortCost.setStatus('current')
if mibBuilder.loadTexts: mstpInstancePortCost.setDescription('port cost of port under the special instance')
mstpInstancePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpInstancePortPriority.setStatus('current')
if mibBuilder.loadTexts: mstpInstancePortPriority.setDescription('port priority of port under the special instance')
mstpInstancePortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpInstancePortRootGuard.setStatus('current')
if mibBuilder.loadTexts: mstpInstancePortRootGuard.setDescription('rootguard enable/disable on the current instance')
mstpInstancePortID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstancePortID.setStatus('current')
if mibBuilder.loadTexts: mstpInstancePortID.setDescription('ID of port which receive a BPDU')
mstpInstancePortExtRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstancePortExtRootPathCost.setStatus('current')
if mibBuilder.loadTexts: mstpInstancePortExtRootPathCost.setDescription('the path cost from self bridge to Root bridge')
mstpInstancePortIntRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstancePortIntRootPathCost.setStatus('current')
if mibBuilder.loadTexts: mstpInstancePortIntRootPathCost.setDescription('the path cost from self bridge to Region Root')
mstpInstancePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("block", 0), ("forwarding", 1), ("learning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstancePortState.setStatus('current')
if mibBuilder.loadTexts: mstpInstancePortState.setDescription('the port state in the instance')
mstpInstancePortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nonstp", 0), ("alternate", 1), ("root", 2), ("designated", 3), ("backup", 4), ("master", 5), ("disabled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstancePortRole.setStatus('current')
if mibBuilder.loadTexts: mstpInstancePortRole.setDescription('the port role in the instance')
mstpInstancePortDesignatedBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstancePortDesignatedBridgeID.setStatus('current')
if mibBuilder.loadTexts: mstpInstancePortDesignatedBridgeID.setDescription('the designated bridge ID')
mstpInstancePortDesignatedPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstancePortDesignatedPortID.setStatus('current')
if mibBuilder.loadTexts: mstpInstancePortDesignatedPortID.setDescription('the designated port ID')
mstpInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2), )
if mibBuilder.loadTexts: mstpInstanceTable.setStatus('current')
if mibBuilder.loadTexts: mstpInstanceTable.setDescription(' correlative information list with instance')
mstpInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1), ).setIndexNames((0, "NAG-MIB", "mstpInstanceID"))
if mibBuilder.loadTexts: mstpInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: mstpInstanceEntry.setDescription(' The index of this table is instance ID')
mstpInstanceID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: mstpInstanceID.setStatus('current')
if mibBuilder.loadTexts: mstpInstanceID.setDescription(' instance ID')
mstpInstanceVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpInstanceVlans.setStatus('current')
if mibBuilder.loadTexts: mstpInstanceVlans.setDescription(' the map of vlans to instance.The input format is  consonant with cli.')
mstpInstanceSwitchPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpInstanceSwitchPriority.setStatus('current')
if mibBuilder.loadTexts: mstpInstanceSwitchPriority.setDescription(' the priority of the router in the special instance.')
mstpInstanceRegionRootID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstanceRegionRootID.setStatus('current')
if mibBuilder.loadTexts: mstpInstanceRegionRootID.setDescription(' the region root ID in the special instance.')
mstpInstanceIntRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstanceIntRootPathCost.setStatus('current')
if mibBuilder.loadTexts: mstpInstanceIntRootPathCost.setDescription(' the path cost from self bridge to Region Root.')
mstpInstanceRootPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstanceRootPortID.setStatus('current')
if mibBuilder.loadTexts: mstpInstanceRootPortID.setDescription(' the root port ID in the special instance.')
mstpPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4), )
if mibBuilder.loadTexts: mstpPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: mstpPortInfoTable.setDescription(' mstp information list of port')
mstpPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1), ).setIndexNames((0, "NAG-MIB", "mstpPortInfoPortIndex"))
if mibBuilder.loadTexts: mstpPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: mstpPortInfoEntry.setDescription(' The index of this table is port index')
mstpPortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: mstpPortInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: mstpPortInfoPortIndex.setDescription(' port index')
mstpPortInfoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpPortInfoEnable.setStatus('current')
if mibBuilder.loadTexts: mstpPortInfoEnable.setDescription('enable/disable mstp on the port.')
mstpPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("auto", 2), ("force-true", 1), ("force-false", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpPortLinkType.setStatus('current')
if mibBuilder.loadTexts: mstpPortLinkType.setDescription(' the p2p link type of the port')
mstpPortMcheck = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("untrigger", 0), ("trigger", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpPortMcheck.setStatus('current')
if mibBuilder.loadTexts: mstpPortMcheck.setDescription('trigger/untrigger')
mstpPortPortFast = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("bpdufilter", 1), ("bpduguard", 2), ("noportfast", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpPortPortFast.setStatus('current')
if mibBuilder.loadTexts: mstpPortPortFast.setDescription('\n                default:the port mode is portfast mode\n                bpdufilter:the port mode is portfast mode with bpdufilter\n                bpduguard:the port mode is portfast mode with bpduguard\n                noportfast:the port mode is not portfast mode')
mstpPortFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("standard", 0), ("privacy", 1), ("auto", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpPortFormat.setStatus('current')
if mibBuilder.loadTexts: mstpPortFormat.setDescription('which mode can be setted up port of message format function')
mstpPortDigestSnp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpPortDigestSnp.setStatus('current')
if mibBuilder.loadTexts: mstpPortDigestSnp.setDescription("Whether the port use peer's authentication key")
mstpPortTCFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("protect", 3), ("useglobal", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpPortTCFlush.setStatus('current')
if mibBuilder.loadTexts: mstpPortTCFlush.setDescription('when topology is changed,  how to flush the mac')
portCount = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCount.setStatus('current')
if mibBuilder.loadTexts: portCount.setDescription(' The total number of ports in the system.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription(' A list of port entries.')
priPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1), ).setIndexNames((0, "NAG-MIB", "portIndex"))
if mibBuilder.loadTexts: priPortEntry.setStatus('current')
if mibBuilder.loadTexts: priPortEntry.setDescription(' A port entry containing port information, \n            status, and control.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('port No.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription(' Name of the port. exp:financial.')
switchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNum.setStatus('current')
if mibBuilder.loadTexts: switchNum.setDescription(' This value is denoting the number of swith in which this port resides.\n                   For the non-stackable device,the value is always 1.\n                   While for the stackable device, the value is real switch stack number.')
slotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotNum.setStatus('current')
if mibBuilder.loadTexts: slotNum.setDescription(' This value is denoting the number of slot.\n                   For the static slot,the value is 1,while for \n                   the extended slot the value is real extended slot number.')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 255))).clone(namedValues=NamedValues(("typeSFP", 0), ("typeCombo", 1), ("typeFiber", 2), ("typeSingleOptFE", 3), ("typeMultiOptFE", 4), ("typeElecFE", 5), ("typeSingleOptGE", 6), ("typeMultiOptGE", 7), ("typeElecGE", 8), ("typePortAGG", 9), ("typePortUsbGE", 10), ("typeOptXge", 11), ("typeElecXge", 12), ("other", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
if mibBuilder.loadTexts: portType.setDescription('Type of expansion module in this port.')
flowControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowControlStatus.setStatus('current')
if mibBuilder.loadTexts: flowControlStatus.setDescription("The flow-control status of the port. \n\t        \tIts functionality is exactly same as 'flow control' or 'no flow control' commands\n\t        \tin console mode.")
bandwidthControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ingress", 0), ("egress", 1), ("both", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthControlStatus.setStatus('current')
if mibBuilder.loadTexts: bandwidthControlStatus.setDescription('The bandwidth-control status of the port. \n\t        \tIts functionality is to stop the bandwidth control.\n\t        \tThe only way to enable bandwidth control is to set receiveBandwidth or transmitBandwith.')
maxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 0), ("bw100M", 1), ("bw1000M", 2), ("bw10000M", 3), ("bw40000M", 4), ("bw20000M", 5), ("bw25G", 6), ("bw100G", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxBandwidth.setStatus('current')
if mibBuilder.loadTexts: maxBandwidth.setDescription('The max bandwidth of the port.')
receiveBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiveBandwidth.setStatus('current')
if mibBuilder.loadTexts: receiveBandwidth.setDescription("The recevice bandwidth of the port. Its unit is kbs.\n\t        \tThe command 'bandwidth control 50 both' in console mode equals\n\t        \tsetting both receiveBandwidth and transmitBandwidth to 50 kbs.\n\t        \tSet 0 is no bandwidth.")
transmitBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transmitBandwidth.setStatus('current')
if mibBuilder.loadTexts: transmitBandwidth.setDescription('The transmit bandwidth of the port. Its unit is kbs.\n\t        \tSet 0 is no bandwidth.')
shutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("shutDown", 0), ("noshutdown", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shutdown.setStatus('current')
if mibBuilder.loadTexts: shutdown.setDescription('Close or open to specify the port.')
loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noloopback", 0), ("loopback", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopback.setStatus('current')
if mibBuilder.loadTexts: loopback.setDescription('Open or close to specify the wreath of \n\t        \tthe port back to test the function.')
speedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("auto", 0), ("half10", 1), ("full10", 2), ("half100", 3), ("full100", 4), ("half1000", 5), ("full1000", 6), ("half-1000-M", 7), ("half-1000-s", 8), ("full-1000-M", 9), ("full-1000-s", 10), ("fx-100", 13), ("fx-100-phy", 14), ("fx-100-no-phy", 15), ("neg-10-auto", 16), ("neg-10-full", 17), ("neg-10-half", 18), ("neg-10-100-auto", 19), ("neg-10-100-full", 20), ("neg-10-100-half", 21), ("neg-10-100-1000-full", 22), ("neg-10-100-1000-half", 23), ("neg-full-10g", 24), ("full-10g", 25), ("full-40g", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: speedDuplex.setStatus('current')
if mibBuilder.loadTexts: speedDuplex.setDescription('The speed and duplex status of the port.')
portMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2), ("hybrid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMode.setStatus('current')
if mibBuilder.loadTexts: portMode.setDescription('port mode: 1 is access,2 is trunk,3 is hybrid')
pvid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvid.setStatus('current')
if mibBuilder.loadTexts: pvid.setDescription('port of native vlan No.')
indicatesType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseSfp", 8), ("hundredBaseFxScSingleMode", 9), ("hundredBaseFxScMultiMode", 10), ("thousandBaseCX", 11), ("tenG", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: indicatesType.setStatus('current')
if mibBuilder.loadTexts: indicatesType.setDescription('Indicates the port type of the configuration of the switch.')
vctAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctAction.setStatus('current')
if mibBuilder.loadTexts: vctAction.setDescription('This object indicates the VCT action of the port,only the value 1 is permitted \n                    when SET this entry though you can GET 1(processing) and 0(succeed);\n                    The specified port will be shutdown when one sets 1 to this entry,and then it will return \n                    to no shutdown after operate the virtual-cable-test. You can get the status of VCT from\n                    the entry vctLastStatus.')
vctLastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctLastStatus.setStatus('current')
if mibBuilder.loadTexts: vctLastStatus.setDescription('Indicates the last VCT status of the port.')
portTrunkAllowedvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrunkAllowedvlan.setStatus('current')
if mibBuilder.loadTexts: portTrunkAllowedvlan.setDescription('trunk port allowed vlan list string')
portHybridTaggedAllowedvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridTaggedAllowedvlan.setStatus('current')
if mibBuilder.loadTexts: portHybridTaggedAllowedvlan.setDescription('hybrid port tagged allowed vlan list string')
portHybridUntaggedAllowedvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridUntaggedAllowedvlan.setStatus('current')
if mibBuilder.loadTexts: portHybridUntaggedAllowedvlan.setDescription('hybrid port untagged allowed vlan list string')
portBandWidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBandWidthUsage.setStatus('current')
if mibBuilder.loadTexts: portBandWidthUsage.setDescription("The percentage of the port's bandwidth usage")
lastFiveMinInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastFiveMinInPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: lastFiveMinInPktsPerSec.setDescription('last five minutes input packets/Sec.')
lastFiveMinOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastFiveMinOutPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: lastFiveMinOutPktsPerSec.setDescription('last five minutes output packets/Sec.')
lastFiveSecInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastFiveSecInPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: lastFiveSecInPktsPerSec.setDescription('last five seconds input packets/Sec.')
lastFiveSecOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastFiveSecOutPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: lastFiveSecOutPktsPerSec.setDescription('last five seconds output packets/Sec.')
transceiverSn = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transceiverSn.setStatus('current')
if mibBuilder.loadTexts: transceiverSn.setDescription(' serial num of transceiver.if port is not a transceiver,value is null.')
portBlockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBlockMode.setStatus('current')
if mibBuilder.loadTexts: portBlockMode.setDescription('port block mode.value:\n\t        \t noblock:                    0, \n\t        \t rate-violation block:       1, \n\t        \t loopback-detection block:   2, \n\t        \t unknown-protocol block:     3')
portBlockState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBlockState.setStatus('current')
if mibBuilder.loadTexts: portBlockState.setDescription('port shutdown mode.value:\n\t        \t noblock state:                    0, \n\t        \t rate-violation block state:       1, \n\t        \t loopback-detection block state:   2, \n\t        \t unknown-protocol block state:     3')
portComboMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("phyModeCopperPrefered", 1), ("phyModeCopperForced", 2), ("phyModeFiberPrefered", 3), ("phyModeFiberForced", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portComboMediaType.setStatus('current')
if mibBuilder.loadTexts: portComboMediaType.setDescription('The media type of combo port')
portDiscardPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2), ("no-tag", 3), ("no-untag", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDiscardPktType.setStatus('current')
if mibBuilder.loadTexts: portDiscardPktType.setDescription('port mode: 1 is tag,2 is untag;\n\t\t\t\t\t\t\t3 is set no tag,4 is set no untag.')
stormControlTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3), )
if mibBuilder.loadTexts: stormControlTable.setStatus('current')
if mibBuilder.loadTexts: stormControlTable.setDescription('storm-contol table')
stormControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1), ).setIndexNames((0, "NAG-MIB", "stormControlIndex"), (0, "NAG-MIB", "stormControlType"))
if mibBuilder.loadTexts: stormControlEntry.setStatus('current')
if mibBuilder.loadTexts: stormControlEntry.setDescription(' storm-control entry')
stormControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormControlIndex.setStatus('current')
if mibBuilder.loadTexts: stormControlIndex.setDescription('port index')
stormControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("broadcast", 0), ("multicast", 1), ("unicast", 2), ("dlf", 3), ("brmc", 4), ("brmcdlf", 5), ("all", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormControlType.setStatus('current')
if mibBuilder.loadTexts: stormControlType.setDescription('broadcast(broadcast rate suppression),multicast(multicast rate suppression),\n                   unicast(unicast rate suppression),dlf(Destination Lookup Failure rate suppression),\n                   brmc(broadcast and multicast rate suppression),brmcdlf(Broadcast, multicast and DLF rate suppression)')
stormControlRate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormControlRate.setStatus('current')
if mibBuilder.loadTexts: stormControlRate.setDescription('the suppress rate.the value range at <1-1488095> or <1-1000000> on different devices.')
stormControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("destroy", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormControlStatus.setStatus('current')
if mibBuilder.loadTexts: stormControlStatus.setDescription('Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry ')
loopbackDetection = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4))
loopbackDetecCtrlRecovery = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbackDetecCtrlRecovery.setStatus('current')
if mibBuilder.loadTexts: loopbackDetecCtrlRecovery.setDescription('This value is the state recovery time.When this time comes,\n         port back to the normal state.But when the value is 0, does not restore state.')
loopbackDetecIntervalTime = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 2))
lpbackDetecExistInterval = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbackDetecExistInterval.setStatus('current')
if mibBuilder.loadTexts: lpbackDetecExistInterval.setDescription('This detection time interval is present when the loop exists, \n          in seconds, the range of 5 to 300. The default value is 5.')
lpbackDetecNoExistInterval = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbackDetecNoExistInterval.setStatus('current')
if mibBuilder.loadTexts: lpbackDetecNoExistInterval.setDescription('This detection time interval is present when the loop does not exist, \n          in seconds, the range from 1 to 30,The default value is 3.')
loopbackDetecCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 3), )
if mibBuilder.loadTexts: loopbackDetecCtrlTable.setStatus('current')
if mibBuilder.loadTexts: loopbackDetecCtrlTable.setDescription('A table containing current configuration information for\n          the function of loopback detection control.')
loopbackDetecCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 3, 1), ).setIndexNames((0, "NAG-MIB", "lpbackDetecCtrlIndex"))
if mibBuilder.loadTexts: loopbackDetecCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: loopbackDetecCtrlEntry.setDescription('An entry in the loopback detection control table.')
lpbackDetecCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: lpbackDetecCtrlIndex.setStatus('current')
if mibBuilder.loadTexts: lpbackDetecCtrlIndex.setDescription('An unique value for each port.')
lpbackDetecCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nocontrol", 0), ("shutdown", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbackDetecCtrlMode.setStatus('current')
if mibBuilder.loadTexts: lpbackDetecCtrlMode.setDescription('Indicates the control type of the configuration of the loopback detection.\n          The default value is 0. When the value is set to 0,the loopback detection control function will be disabled.')
loopbackDetecSpecVlanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4), )
if mibBuilder.loadTexts: loopbackDetecSpecVlanTable.setStatus('current')
if mibBuilder.loadTexts: loopbackDetecSpecVlanTable.setDescription('Setting the loopback detection function for the specified vlan of the port.')
loopbackDetecSpecVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4, 1), ).setIndexNames((0, "NAG-MIB", "lpbackDetecVlanPortIndex"))
if mibBuilder.loadTexts: loopbackDetecSpecVlanEntry.setStatus('current')
if mibBuilder.loadTexts: loopbackDetecSpecVlanEntry.setDescription('An entry in the loopbackDetecSpecVlanTable.')
lpbackDetecVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: lpbackDetecVlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: lpbackDetecVlanPortIndex.setDescription('An unique value for each port.')
lpbackDetecVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbackDetecVlanList.setStatus('current')
if mibBuilder.loadTexts: lpbackDetecVlanList.setDescription('The value is a vlan list that you will set.Please pay attention to the list of writing,eg:1;3;5-20 .')
lpbackDetecVlanListSetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbackDetecVlanListSetFlag.setStatus('current')
if mibBuilder.loadTexts: lpbackDetecVlanListSetFlag.setDescription('When lpbackDetecVlanListSetFlag is 1,open the \n          specified VLAN loopback detection function.When lpbackDetecVlanListSetFlag is 0,close the \n          specified VLAN loopback detection function.')
loopbackDetecShowTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 5), )
if mibBuilder.loadTexts: loopbackDetecShowTable.setStatus('current')
if mibBuilder.loadTexts: loopbackDetecShowTable.setDescription('Show the config and state of loopback detection for the specified port.')
loopbackDetecShowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 5, 1), ).setIndexNames((0, "NAG-MIB", "lpbackDetecShowPortIndex"))
if mibBuilder.loadTexts: loopbackDetecShowEntry.setStatus('current')
if mibBuilder.loadTexts: loopbackDetecShowEntry.setDescription('An entry in the loopbackDetecShowTable.')
lpbackDetecShowPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: lpbackDetecShowPortIndex.setStatus('current')
if mibBuilder.loadTexts: lpbackDetecShowPortIndex.setDescription('An unique value for each port.')
lpbackDetecShowInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpbackDetecShowInformation.setStatus('current')
if mibBuilder.loadTexts: lpbackDetecShowInformation.setDescription('The value display the configuration and state of loopback detection for the specified port.')
stormControlPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5), )
if mibBuilder.loadTexts: stormControlPortTable.setStatus('current')
if mibBuilder.loadTexts: stormControlPortTable.setDescription('storm-contol port table')
stormControlPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1), ).setIndexNames((0, "NAG-MIB", "stormControlPortIndex"), (0, "NAG-MIB", "stormControlSuppressType"))
if mibBuilder.loadTexts: stormControlPortEntry.setStatus('current')
if mibBuilder.loadTexts: stormControlPortEntry.setDescription(' storm-control entry')
stormControlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormControlPortIndex.setStatus('current')
if mibBuilder.loadTexts: stormControlPortIndex.setDescription('port index')
stormControlSuppressType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("broadcast", 0), ("multicast", 1), ("unicast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormControlSuppressType.setStatus('current')
if mibBuilder.loadTexts: stormControlSuppressType.setDescription('broadcast(broadcast rate suppression),multicast(multicast rate suppression),\n                   unicast(unicast rate suppression))')
stormControlSuppressRateUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("kbps", 0), ("pps", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormControlSuppressRateUnit.setStatus('current')
if mibBuilder.loadTexts: stormControlSuppressRateUnit.setDescription('set kbps as measure or set pps as measure ')
stormControlSuppressRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormControlSuppressRateValue.setStatus('current')
if mibBuilder.loadTexts: stormControlSuppressRateValue.setDescription('if the suppressrate unit is pps,the value range at <1-1488095> ,or if the suppressrate unit is bps,the value range at <1-1000000>,\n                   it depends on stormControlSuppressRateUnit.')
stormControlSuppressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("destroy", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormControlSuppressStatus.setStatus('current')
if mibBuilder.loadTexts: stormControlSuppressStatus.setDescription('Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry ')
flowCounterTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6), )
if mibBuilder.loadTexts: flowCounterTable.setStatus('current')
if mibBuilder.loadTexts: flowCounterTable.setDescription('control port and vlan interface flow table')
flowCouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1), ).setIndexNames((0, "NAG-MIB", "flowPortIndex"), (0, "NAG-MIB", "flowVlanID"))
if mibBuilder.loadTexts: flowCouterEntry.setStatus('current')
if mibBuilder.loadTexts: flowCouterEntry.setDescription(' control port and vlan interface flow entry')
flowPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowPortIndex.setStatus('current')
if mibBuilder.loadTexts: flowPortIndex.setDescription('Port Index')
flowVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowVlanID.setStatus('current')
if mibBuilder.loadTexts: flowVlanID.setDescription('Vlan ID')
flowCounterInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterInOctets.setStatus('current')
if mibBuilder.loadTexts: flowCounterInOctets.setDescription('The total number of octets received on the interface,\n               including framing characters.  This object is a 64-bit\n               version of ifInOctets.')
flowCounterInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: flowCounterInUcastPkts.setDescription('The number of packets, delivered by this sub-layer to\n               a higher (sub-)layer, which were not addressed to a\n               multicast or broadcast address at this sub-layer.\n               This object is a 64-bit version of ifInUcastPkts.')
flowCounterInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: flowCounterInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to\n               a higher (sub-)layer, which were addressed to a\n               multicast address at this sub-layer.  For a MAC layer\n               protocol, this includes both Group and Functional\n               addresses.  This object is a 64-bit version of   ifInMulticastPkts.')
flowCounterInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: flowCounterInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to\n               a higher (sub-)layer, which were addressed to a\n               broadcast address at this sub-layer.  This object is a\n               64-bit version of ifInBroadcastPkts.')
flowCounterOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterOutOctets.setStatus('current')
if mibBuilder.loadTexts: flowCounterOutOctets.setDescription('The total number of octets transmitted out of the\n               interface, including framing characters.  This object\n               is a 64-bit version of ifOutOctets.')
flowCounterOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: flowCounterOutUcastPkts.setDescription('The total number of packets that higher-level\n               protocols requested be transmitted, and which were not\n               addressed to a multicast or broadcast address at this\n               sub-layer, including those that were discarded or not\n               sent.  This object is a 64-bit version of\n               ifOutUcastPkts.')
flowCounterOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: flowCounterOutMulticastPkts.setDescription('The total number of packets that higher-level\n               protocols requested be transmitted, and which were\n               addressed to a multicast address at this sub-layer,\n               including those that were discarded or not sent.  For\n               a MAC layer protocol, this includes both Group and\n               Functional addresses.  This object is a 64-bit version   \n               of ifOutMulticastPkts.')
flowCounterOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: flowCounterOutBroadcastPkts.setDescription('The total number of packets that higher-level\n               protocols requested be transmitted, and which were\n               addressed to a broadcast address at this sub-layer,\n               including those that were discarded or not sent.  This\n               object is a 64-bit version of ifOutBroadcastPkts.')
clearFlowCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearFlowCounter.setStatus('current')
if mibBuilder.loadTexts: clearFlowCounter.setDescription('Clear flow counter.')
sumFlowCounterTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7), )
if mibBuilder.loadTexts: sumFlowCounterTable.setStatus('current')
if mibBuilder.loadTexts: sumFlowCounterTable.setDescription('control port and vlan interface flow table')
sumFlowCouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1), ).setIndexNames((0, "NAG-MIB", "sumFlowVlanID"))
if mibBuilder.loadTexts: sumFlowCouterEntry.setStatus('current')
if mibBuilder.loadTexts: sumFlowCouterEntry.setDescription(' control port and vlan interface flow entry')
sumFlowVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sumFlowVlanID.setStatus('current')
if mibBuilder.loadTexts: sumFlowVlanID.setDescription('Vlan ID')
sumFlowCounterInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sumFlowCounterInOctets.setStatus('current')
if mibBuilder.loadTexts: sumFlowCounterInOctets.setDescription('The total number of octets received on the interface,\n               including framing characters.  This object is a 64-bit\n               version of ifInOctets.')
sumFlowCounterInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sumFlowCounterInPkts.setStatus('current')
if mibBuilder.loadTexts: sumFlowCounterInPkts.setDescription('The number of packets, delivered by this sub-layer to\n               a higher (sub-)layer, which were not addressed to a\n               multicast or broadcast address at this sub-layer.\n               This object is a 64-bit version of ifInUcastPkts.')
sumFlowCounterOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sumFlowCounterOutOctets.setStatus('current')
if mibBuilder.loadTexts: sumFlowCounterOutOctets.setDescription('The total number of octets transmitted out of the\n               interface, including framing characters.  This object\n               is a 64-bit version of ifOutOctets.')
sumFlowCounterOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sumFlowCounterOutPkts.setStatus('current')
if mibBuilder.loadTexts: sumFlowCounterOutPkts.setDescription('The total number of packets that higher-level\n               protocols requested be transmitted, and which were not\n               addressed to a multicast or broadcast address at this\n               sub-layer, including those that were discarded or not\n               sent.  This object is a 64-bit version of\n               ifOutUcastPkts.')
clearSumFlowCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearSumFlowCounter.setStatus('current')
if mibBuilder.loadTexts: clearSumFlowCounter.setDescription('Clear flow counter.')
portUtilTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10), )
if mibBuilder.loadTexts: portUtilTable.setStatus('current')
if mibBuilder.loadTexts: portUtilTable.setDescription('A list of port util entries.')
portUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1), ).setIndexNames((0, "NAG-MIB", "portUtilIndex"))
if mibBuilder.loadTexts: portUtilEntry.setStatus('current')
if mibBuilder.loadTexts: portUtilEntry.setDescription('A port util entry containing wan port in util,wan port out util,\n\t\t\tbit error rate and packet lost rate.')
portUtilIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portUtilIndex.setStatus('current')
if mibBuilder.loadTexts: portUtilIndex.setDescription('port No.')
wanIfInUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfInUtil.setStatus('current')
if mibBuilder.loadTexts: wanIfInUtil.setDescription('WAN port inflows utilization.')
wanIfOutUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfOutUtil.setStatus('current')
if mibBuilder.loadTexts: wanIfOutUtil.setDescription('WAN port outflows utilization.')
ifBer = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBer.setStatus('current')
if mibBuilder.loadTexts: ifBer.setDescription('port error rate.')
ifPaketLostRate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifPaketLostRate.setStatus('current')
if mibBuilder.loadTexts: ifPaketLostRate.setDescription('port packet lost rate.')
portLEDShutoffTable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11))
portLEDTimerange = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1))
portLEDTimeRangeMapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1), )
if mibBuilder.loadTexts: portLEDTimeRangeMapTable.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeMapTable.setDescription('timeRange Map Table')
portLEDTimeRangeMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1, 1), ).setIndexNames((0, "NAG-MIB", "portLEDTimeRangeMapIndex"))
if mibBuilder.loadTexts: portLEDTimeRangeMapEntry.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeMapEntry.setDescription('timeRange Map Entry')
portLEDTimeRangeMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLEDTimeRangeMapIndex.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeMapIndex.setDescription('TimeRange Map index,the range of it is 1-(2^32-1).')
portLEDTimeRangeMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeMapName.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeMapName.setDescription('TimeRange Map name')
portLEDTimeRangeMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeMapStatus.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeMapStatus.setDescription('TimeRange Map status')
portLEDTimeRangeTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2), )
if mibBuilder.loadTexts: portLEDTimeRangeTable.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeTable.setDescription('timeRange Table')
portLEDTimeRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1), ).setIndexNames((0, "NAG-MIB", "portLEDTimeRangeIndex"), (0, "NAG-MIB", "portLEDTimeRangeSubIndex"))
if mibBuilder.loadTexts: portLEDTimeRangeEntry.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeEntry.setDescription('timeRange Entry')
portLEDTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLEDTimeRangeIndex.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeIndex.setDescription('TimeRange index,the allowed range is 1 to 1000.')
portLEDTimeRangeSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLEDTimeRangeSubIndex.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeSubIndex.setDescription('TimeRange sub index,the allowed range is 1 to 1000.')
portLEDTimeRangeType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("periodic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeType.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeType.setDescription('TimeRange type')
portLEDTimeRangeStartWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 4), Bits().clone(namedValues=NamedValues(("monday", 0), ("tuesday", 1), ("wednesday", 2), ("thursday", 3), ("friday", 4), ("saturday", 5), ("sunday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeStartWeek.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeStartWeek.setDescription('configurate the start week,for example: f8 means monday+tuesday+wednesday+thurday+friday,\n                the lowest bit is not used,so fe is the biggest.')
portLEDTimeRangeStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeStartDate.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeStartDate.setDescription('configurate the start Date,for example YYYY.MM.DD .')
portLEDTimeRangeStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeStartTime.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeStartTime.setDescription('configurate the start clock,for example HH:MM:SS.')
portLEDTimeRangeEndWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 7), Bits().clone(namedValues=NamedValues(("monday", 0), ("tuesday", 1), ("wednesday", 2), ("thursday", 3), ("friday", 4), ("saturday", 5), ("sunday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeEndWeek.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeEndWeek.setDescription('configurate the end week,for example: f8 means monday+tuesday+wednesday+thurday+friday,\n                the lowest bit is not used,so fe is the biggest.')
portLEDTimeRangeEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeEndDate.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeEndDate.setDescription('configurate the end date,for example YYYY.MM.DD.')
portLEDTimeRangeEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeEndTime.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeEndTime.setDescription('configurate the end clock,for example HH:MM:SS.')
portLEDTimeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeStatus.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeStatus.setDescription('status of timeRangeMapTable')
portLEDConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 2))
portLEDTimeRangeName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeName.setDescription('the timer range of port LED shut-off config')
portLEDState = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("allOn", 0), ("allOff", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLEDState.setStatus('current')
if mibBuilder.loadTexts: portLEDState.setDescription(' enable or disable LED shut-off on all ports.')
portLEDTimeRangeDelete = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: portLEDTimeRangeDelete.setStatus('current')
if mibBuilder.loadTexts: portLEDTimeRangeDelete.setDescription('the timer range of port LED shut-off delete')
portTruckAllowedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12), )
if mibBuilder.loadTexts: portTruckAllowedVlanTable.setStatus('current')
if mibBuilder.loadTexts: portTruckAllowedVlanTable.setDescription('Truck port alllowed vlan table')
portTruckAllowedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1), ).setIndexNames((0, "NAG-MIB", "portTruckPortIndex"))
if mibBuilder.loadTexts: portTruckAllowedVlanEntry.setStatus('current')
if mibBuilder.loadTexts: portTruckAllowedVlanEntry.setDescription(' Truck port alllowed vlan entry')
portTruckPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: portTruckPortIndex.setStatus('current')
if mibBuilder.loadTexts: portTruckPortIndex.setDescription('port index of truck mode')
portTruckAllowedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTruckAllowedVlan.setStatus('current')
if mibBuilder.loadTexts: portTruckAllowedVlan.setDescription('VLAN IDs of the allowed VLANs when this port is in trunking mode.')
portTruckAllowedVlanAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTruckAllowedVlanAdd.setStatus('current')
if mibBuilder.loadTexts: portTruckAllowedVlanAdd.setDescription('Add VLANs to the current list.')
portTruckAllowedVlanExcept = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTruckAllowedVlanExcept.setStatus('current')
if mibBuilder.loadTexts: portTruckAllowedVlanExcept.setDescription('All VLANs except the following.')
portTruckAllowedVlanRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTruckAllowedVlanRemove.setStatus('current')
if mibBuilder.loadTexts: portTruckAllowedVlanRemove.setDescription('Remove VLANs from the current list.')
portTruckAllowedVlanAll = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("all", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTruckAllowedVlanAll.setStatus('current')
if mibBuilder.loadTexts: portTruckAllowedVlanAll.setDescription('Allow all(1) vlans or none vlans.')
portHybridTaggedAllowedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13), )
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanTable.setStatus('current')
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanTable.setDescription('Truck port alllowed vlan table')
portHybridTaggedAllowedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1), ).setIndexNames((0, "NAG-MIB", "portHybridTaggedPortIndex"))
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanEntry.setStatus('current')
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanEntry.setDescription(' Truck port alllowed vlan entry')
portHybridTaggedPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: portHybridTaggedPortIndex.setStatus('current')
if mibBuilder.loadTexts: portHybridTaggedPortIndex.setDescription('port index of Hybrid mode')
portHybridTaggedAllowedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridTaggedAllowedVlan.setStatus('current')
if mibBuilder.loadTexts: portHybridTaggedAllowedVlan.setDescription('VLAN IDs of the allowed VLANs when this port is in hybrid mode.')
portHybridTaggedAllowedVlanAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanAdd.setStatus('current')
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanAdd.setDescription('Add VLANs to the current list.')
portHybridTaggedAllowedVlanExcept = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanExcept.setStatus('current')
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanExcept.setDescription('All VLANs except the following.')
portHybridTaggedAllowedVlanRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanRemove.setStatus('current')
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanRemove.setDescription('Remove VLANs from the current list.')
portHybridTaggedAllowedVlanAll = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("all", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanAll.setStatus('current')
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanAll.setDescription('allow all(1) vlans or none vlans.')
portHybridUntaggedAllowedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14), )
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanTable.setStatus('current')
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanTable.setDescription('Truck port alllowed vlan table')
portHybridUntaggedAllowedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1), ).setIndexNames((0, "NAG-MIB", "portHybridUntaggedPortIndex"))
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanEntry.setStatus('current')
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanEntry.setDescription(' Truck port alllowed vlan entry')
portHybridUntaggedPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 1), Integer32())
if mibBuilder.loadTexts: portHybridUntaggedPortIndex.setStatus('current')
if mibBuilder.loadTexts: portHybridUntaggedPortIndex.setDescription('port index of Hybrid mode')
portHybridUntaggedAllowedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlan.setStatus('current')
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlan.setDescription('VLAN IDs of the allowed VLANs when this port is in hybrid mode.')
portHybridUntaggedAllowedVlanAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanAdd.setStatus('current')
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanAdd.setDescription('Add VLANs to the current list.')
portHybridUntaggedAllowedVlanExcept = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanExcept.setStatus('current')
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanExcept.setDescription('All VLANs except the following.')
portHybridUntaggedAllowedVlanRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanRemove.setStatus('current')
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanRemove.setDescription('Remove VLANs from the current list.')
portHybridUntaggedAllowedVlanAll = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("all", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanAll.setStatus('current')
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanAll.setDescription('allow all(1) vlans or none vlans.')
netDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: netDefaultGateway.setDescription('The IP Address of the default gateway.  If this value is\n        \t\tundefined or unknown, it shall have the value 0.0.0.0.')
ipHttpState = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpState.setStatus('current')
if mibBuilder.loadTexts: ipHttpState.setDescription('Web server on-off.')
iPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3), )
if mibBuilder.loadTexts: iPAddrTable.setStatus('current')
if mibBuilder.loadTexts: iPAddrTable.setDescription('A table of iPAddrEntry.')
iPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1), ).setIndexNames((0, "NAG-MIB", "iPAddrVid"), (0, "NAG-MIB", "iPAddrIPAddress"))
if mibBuilder.loadTexts: iPAddrEntry.setStatus('current')
if mibBuilder.loadTexts: iPAddrEntry.setDescription('A set of configuration parameters for a particular\n        network interface on this device. If the device has no network\n        interface, this table is empty.\n\n        The index is composed of the ifIndex assigned to the\n        corresponding interface.')
iPAddrVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: iPAddrVid.setStatus('current')
if mibBuilder.loadTexts: iPAddrVid.setDescription('The VLAN interface being used by this table entry. Only the \n                 VLAN interfaces which have an IP configured will appear in\n                 the table.')
iPAddrIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: iPAddrIPAddress.setStatus('current')
if mibBuilder.loadTexts: iPAddrIPAddress.setDescription('The IP address of this Net interface.  The default value\n        for this object is 0.0.0.0.  If either the IPAddrIPAddress\n        or IPAddrSubnetMask is 0.0.0.0, then when the device\n        boots, it may use BOOTP to try to figure out what these\n        values should be. If BOOTP fails, before the device\n        can talk on the network, this value must be configured\n        (e.g., through a terminal attached to the device).')
iPAddrSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPAddrSubnetMask.setStatus('current')
if mibBuilder.loadTexts: iPAddrSubnetMask.setDescription('The subnet mask of this Net interface.  The default value\n        for this object is 0.0.0.0.  If either the IPAddrIPAddress\n        or IPAddrSubnetMask are 0.0.0.0, then when the device\n        boots, it may use BOOTP to try to figure out what these\n        values should be. If BOOTP fails, before the device\n        can talk on the network, this value must be configured\n        (e.g., through a terminal attached to the device).')
iPAddrPrimaryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPAddrPrimaryInterface.setStatus('current')
if mibBuilder.loadTexts: iPAddrPrimaryInterface.setDescription('Whether this is a primary interface.')
iPAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPAddrStatus.setStatus('current')
if mibBuilder.loadTexts: iPAddrStatus.setDescription('Now state.')
interfaceTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4), )
if mibBuilder.loadTexts: interfaceTable.setStatus('current')
if mibBuilder.loadTexts: interfaceTable.setDescription('A table of interfaceEntry.')
interfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1), ).setIndexNames((0, "NAG-MIB", "intfacetype"), (0, "NAG-MIB", "intfaceID"))
if mibBuilder.loadTexts: interfaceEntry.setStatus('current')
if mibBuilder.loadTexts: interfaceEntry.setDescription('A set of configuration parameters for a particular\n        network interface on this device. If the device has no network\n        interface, this table is empty.\n\n        The index is composed of the ifIndex assigned to the\n        corresponding interface.')
intfacetype = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vintf", 1), ("loopback", 2), ("tunnel", 3))))
if mibBuilder.loadTexts: intfacetype.setStatus('current')
if mibBuilder.loadTexts: intfacetype.setDescription('The Type of interface.\n                 Now support(1)vintf and (2)loopback.')
intfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: intfaceID.setStatus('current')
if mibBuilder.loadTexts: intfaceID.setDescription('The Number of interface.\n        exp:intfacetype(1),interfaceID(2) means interface vlan 2.\n            if intfacetype(2) interfaceID(4) means interface loopback4.\n            if intfacetype(3) interfaceID(5) means interface Tunnel5.')
intfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfaceIndex.setStatus('current')
if mibBuilder.loadTexts: intfaceIndex.setDescription('The Index of interface.')
intfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intfaceStatus.setStatus('current')
if mibBuilder.loadTexts: intfaceStatus.setDescription('Now state.')
vlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1), )
if mibBuilder.loadTexts: vlanInfoTable.setStatus('current')
if mibBuilder.loadTexts: vlanInfoTable.setDescription('A table containing current configuration information\n        for each VLAN currently configured into the device by\n        (local or network) management.')
vlanInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1), ).setIndexNames((0, "NAG-MIB", "vlanID"))
if mibBuilder.loadTexts: vlanInfoEntry.setStatus('current')
if mibBuilder.loadTexts: vlanInfoEntry.setDescription('Static information for a VLAN configured into the\n        device by (local or network) management.')
vlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: vlanID.setStatus('current')
if mibBuilder.loadTexts: vlanID.setDescription("This value is vlan's ID.")
vlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanName.setStatus('current')
if mibBuilder.loadTexts: vlanName.setDescription('which may be used to identify the VLAN.')
vlanPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPortNumber.setStatus('current')
if mibBuilder.loadTexts: vlanPortNumber.setDescription("The sum of vlan's ports.")
vlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: vlanRowStatus.setDescription('This object indicates the status of this entry.')
mvlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2), )
if mibBuilder.loadTexts: mvlanInfoTable.setStatus('current')
if mibBuilder.loadTexts: mvlanInfoTable.setDescription('A table containing current configuration information\n        for  Multicast VLAN .')
mvlanInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1), ).setIndexNames((0, "NAG-MIB", "mvlanID"))
if mibBuilder.loadTexts: mvlanInfoEntry.setStatus('current')
if mibBuilder.loadTexts: mvlanInfoEntry.setDescription('Static information for Multicast VLAN configured into the\n        device by (local or network) management.')
mvlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: mvlanID.setStatus('current')
if mibBuilder.loadTexts: mvlanID.setDescription("This value is mvlan's ID.")
mvlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanStatus.setStatus('current')
if mibBuilder.loadTexts: mvlanStatus.setDescription('the status of mVLAN:enable(1) to active a mvlanID;disable(0) is to destroy a mvlanID.')
mvlanAssoVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanAssoVlanList.setStatus('current')
if mibBuilder.loadTexts: mvlanAssoVlanList.setDescription(" configure vlans association with multicast Vlan,such as'3-4'or '2,5,6',set or unset by Configuring mvlanAssoVlanStatus; geting vlans which associating with multicast Vlan .")
mvlanAssoVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanAssoVlanStatus.setStatus('current')
if mibBuilder.loadTexts: mvlanAssoVlanStatus.setDescription('the status of mvlanAssoVlan:enable(1) to enable multicast Vlan association with Vlan;\n        disable(0) is to disable multicast Vlan association with  Vlan.')
mvlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("dynamic", 1), ("compatible", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanMode.setStatus('current')
if mibBuilder.loadTexts: mvlanMode.setDescription('configure mode: when no configration,Default: 0.')
mvlanPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3), )
if mibBuilder.loadTexts: mvlanPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: mvlanPortInfoTable.setDescription('A table containing current configuration information\n        for each Multicast VLAN .')
mvlanPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1), ).setIndexNames((0, "NAG-MIB", "mvlanVId"), (0, "NAG-MIB", "mvlanPortIndex"))
if mibBuilder.loadTexts: mvlanPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: mvlanPortInfoEntry.setDescription('Static information for Multicast VLAN configured into the\n        device by (local or network) management.')
mvlanVId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: mvlanVId.setStatus('current')
if mibBuilder.loadTexts: mvlanVId.setDescription("This value is mvlan's ID.")
mvlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: mvlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: mvlanPortIndex.setDescription("Mvlan's port index.")
mvlanAssoPortTagid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanAssoPortTagid.setStatus('current')
if mibBuilder.loadTexts: mvlanAssoPortTagid.setDescription("tagId of portIndex association with multicast Vlan,Default:0.if port needn't Tagid,\n          set portIndex association with mvlanVId only.")
mvlanPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanPortStatus.setStatus('current')
if mibBuilder.loadTexts: mvlanPortStatus.setDescription('the status of mvlanPortStatus:enable(1) to enable port association with multicast Vlan;\n        disable(0) is to disable port association with multicast Vlan.')
vlanFlowCounterTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4), )
if mibBuilder.loadTexts: vlanFlowCounterTable.setStatus('current')
if mibBuilder.loadTexts: vlanFlowCounterTable.setDescription('A table containing flow counters according to vlanid,in/out direction,\n        containing unicast,multicast and broadcast flow.')
vlanFlowCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1), ).setIndexNames((0, "NAG-MIB", "vlanID"))
if mibBuilder.loadTexts: vlanFlowCounterEntry.setStatus('current')
if mibBuilder.loadTexts: vlanFlowCounterEntry.setDescription('Flow counters on vlan for in/out ports.')
vlanFCVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: vlanFCVlanID.setStatus('current')
if mibBuilder.loadTexts: vlanFCVlanID.setDescription("This value is vlan's ID.")
vlanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInOctets.setStatus('current')
if mibBuilder.loadTexts: vlanInOctets.setDescription('The total number of octets received on the interface,\n               including framing characters.  This object is a 64-bit\n               version of ifInOctets.')
vlanInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: vlanInUcastPkts.setDescription('The number of packets, delivered by this sub-layer to\n               a higher (sub-)layer, which were not addressed to a\n               multicast or broadcast address at this sub-layer.\n               This object is a 64-bit version of ifInUcastPkts.')
vlanInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: vlanInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to\n               a higher (sub-)layer, which were addressed to a\n               multicast address at this sub-layer.  For a MAC layer\n               protocol, this includes both Group and Functional\n               addresses.  This object is a 64-bit version of   ifInMulticastPkts.')
vlanInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: vlanInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to\n               a higher (sub-)layer, which were addressed to a\n               broadcast address at this sub-layer.  This object is a\n               64-bit version of ifInBroadcastPkts.')
vlanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanOutOctets.setStatus('current')
if mibBuilder.loadTexts: vlanOutOctets.setDescription('The total number of octets transmitted out of the\n               interface, including framing characters.  This object\n               is a 64-bit version of ifOutOctets.')
vlanOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: vlanOutUcastPkts.setDescription('The total number of packets that higher-level\n               protocols requested be transmitted, and which were not\n               addressed to a multicast or broadcast address at this\n               sub-layer, including those that were discarded or not\n               sent.  This object is a 64-bit version of\n               ifOutUcastPkts.')
vlanOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: vlanOutMulticastPkts.setDescription('The total number of packets that higher-level\n               protocols requested be transmitted, and which were\n               addressed to a multicast address at this sub-layer,\n               including those that were discarded or not sent.  For\n               a MAC layer protocol, this includes both Group and\n               Functional addresses.  This object is a 64-bit version   \n               of ifOutMulticastPkts.')
vlanOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: vlanOutBroadcastPkts.setDescription('The total number of packets that higher-level\n               protocols requested be transmitted, and which were\n               addressed to a broadcast address at this sub-layer,\n               including those that were discarded or not sent.  This\n               object is a 64-bit version of ifOutBroadcastPkts.')
clearVlanFlowCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearVlanFlowCounter.setStatus('current')
if mibBuilder.loadTexts: clearVlanFlowCounter.setDescription('Clear flow counter.')
sysStackUnitNumber = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStackUnitNumber.setStatus('current')
if mibBuilder.loadTexts: sysStackUnitNumber.setDescription(' the number of the stacked units.')
jumblyStackingInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2), )
if mibBuilder.loadTexts: jumblyStackingInfoTable.setStatus('current')
if mibBuilder.loadTexts: jumblyStackingInfoTable.setDescription('Table of descriptive and status information about\n                     jumbly stacking in this system.')
jumblyStackingInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1), ).setIndexNames((0, "NAG-MIB", "swUnitIndex"))
if mibBuilder.loadTexts: jumblyStackingInfoEntry.setStatus('current')
if mibBuilder.loadTexts: jumblyStackingInfoEntry.setDescription('An entry in the table, containing information\n                     about stacking switch in this system.')
stackingUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackingUnitIndex.setStatus('current')
if mibBuilder.loadTexts: stackingUnitIndex.setDescription('This object identifies the switch within the system\n                     for which this entry contains information. This\n                     value can never be greater than switchNumber.')
swHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: swHardwareVersion.setDescription(' The text string denoting the version of the hardware.')
swSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: swSoftwareVersion.setDescription(' The text string denoting the version of the software.')
swCPUMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 4), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCPUMac.setStatus('current')
if mibBuilder.loadTexts: swCPUMac.setDescription(' the Mac address of the machine.')
swType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swType.setStatus('current')
if mibBuilder.loadTexts: swType.setDescription('Type of this switch.')
portSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1), )
if mibBuilder.loadTexts: portSecurityTable.setStatus('current')
if mibBuilder.loadTexts: portSecurityTable.setDescription('The table of port security ')
portSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1), ).setIndexNames((0, "NAG-MIB", "psPortIndex"))
if mibBuilder.loadTexts: portSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: portSecurityEntry.setDescription('An entry in the port security table.')
psPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: psPortIndex.setStatus('current')
if mibBuilder.loadTexts: psPortIndex.setDescription('A unique value for each port')
psPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPortSecurity.setStatus('current')
if mibBuilder.loadTexts: psPortSecurity.setDescription('enable or disable mac bind on this port')
psSecuritytSaticMacAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 3), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecuritytSaticMacAdd.setStatus('current')
if mibBuilder.loadTexts: psSecuritytSaticMacAdd.setDescription('bind Security mac address on this port')
psSecurityStaticMacDel = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 4), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityStaticMacDel.setStatus('current')
if mibBuilder.loadTexts: psSecurityStaticMacDel.setDescription('delete Security mac address on this port')
psSecurityPortLock = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unlock", 0), ("lock", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityPortLock.setStatus('current')
if mibBuilder.loadTexts: psSecurityPortLock.setDescription('lock or unlock this port')
psSecurityPortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityPortMax.setStatus('current')
if mibBuilder.loadTexts: psSecurityPortMax.setDescription('Maximum secure addrs on this port')
psSecurityPortConvertmac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityPortConvertmac.setStatus('current')
if mibBuilder.loadTexts: psSecurityPortConvertmac.setDescription('convert dynamic mac to security mac')
psSecurityPortLocktimer = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityPortLocktimer.setStatus('current')
if mibBuilder.loadTexts: psSecurityPortLocktimer.setDescription('lock timer on this port')
securityMacPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2), )
if mibBuilder.loadTexts: securityMacPortTable.setStatus('current')
if mibBuilder.loadTexts: securityMacPortTable.setDescription('Table of descriptive and status information about security port')
securityMacPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2, 1), ).setIndexNames((0, "NAG-MIB", "secPortIndex"), (0, "NAG-MIB", "secMacAdress"))
if mibBuilder.loadTexts: securityMacPortEntry.setStatus('current')
if mibBuilder.loadTexts: securityMacPortEntry.setDescription('An entry in the security mac port table.')
secPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secPortIndex.setStatus('current')
if mibBuilder.loadTexts: secPortIndex.setDescription('A unique value for each port')
secMacAdress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: secMacAdress.setStatus('current')
if mibBuilder.loadTexts: secMacAdress.setDescription('Mac adress bind on this port')
secVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secVid.setStatus('current')
if mibBuilder.loadTexts: secVid.setDescription('vlan id of this port(pvid)')
priIgmpSnoopingGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingGlobalEnable.setDescription(' Enable or disable the IgmpSnooping algorithm in the switch.')
priIgmpSnoopingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2), )
if mibBuilder.loadTexts: priIgmpSnoopingVlanTable.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingVlanTable.setDescription(' IopgmpSnoing configuration in vlan.')
priIgmpSnoopingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1), ).setIndexNames((0, "NAG-MIB", "priIgmpSnoopingvlanID"))
if mibBuilder.loadTexts: priIgmpSnoopingEntry.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingEntry.setDescription(' IgmpSnooping confition in vlan.')
priIgmpSnoopingvlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: priIgmpSnoopingvlanID.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingvlanID.setDescription("This value is vlan's ID.")
priIgmpSnoopingvlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingvlanEnable.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingvlanEnable.setDescription(' Enable or disable the IgmpSnooping in the switch.Default:0')
priIgmpSnoopingleave = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-immediate-leave", 0), ("immediate-leave", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingleave.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingleave.setDescription(' Enable or disable the immediate leave config.Default:0')
priIgmpSnoopingL2gen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-l2-general-querier", 0), ("l2-general-querier", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingL2gen.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingL2gen.setDescription(' Enable or disable the l2-general-querier config.Default:0')
priIgmpSnoopingGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingGroupNum.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingGroupNum.setDescription('set the maximum IGMP group the port can join')
priIgmpSnoopingSourceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingSourceNum.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingSourceNum.setDescription('set the maximum source number')
priIgmpSnoopingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingPort.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingPort.setDescription(' set static mrouter port of vlan.\n      \t\tethernet:  Name of Ethernet port\n      \t\tifname:  Name of interface\n      \t\tport-channel: Port aggregation.')
priIgmpSnoopingNoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingNoPort.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingNoPort.setDescription(' unset static mrouter port of vlan.\n      \t\tethernet:  Name of Ethernet port\n      \t\tifname:  Name of interface\n      \t\tport-channel: Port aggregation.')
priIgmpSnoopingPortTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingPortTime.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingPortTime.setDescription(' Configure this survive time of mrouter port.Default: 255s')
priIgmpSnoopingQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingQueryInterval.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingQueryInterval.setDescription(' Configure this query interval. Default: 125s')
priIgmpSnoopingQueryMrsp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingQueryMrsp.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingQueryMrsp.setDescription(' Configure the maximum query response period. Default: 10s')
priIgmpSnoopingQueryRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingQueryRobustness.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingQueryRobustness.setDescription(' Configure the query robustness.Default: 2')
priIgmpSnoopingSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingSuppression.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingSuppression.setDescription(' Configure the suppression query time.Default: 255s')
priIgmpSnoopingBindTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3), )
if mibBuilder.loadTexts: priIgmpSnoopingBindTable.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingBindTable.setDescription(' IgmpSnoing bind configuration.')
priIgmpSnoopingBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3, 1), ).setIndexNames((0, "NAG-MIB", "priIgmpSnoopingVlanID"), (0, "NAG-MIB", "priIgmpSnoopingGroupAddress"))
if mibBuilder.loadTexts: priIgmpSnoopingBindEntry.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingBindEntry.setDescription(' IgmpSnooping bind configuration.')
priIgmpSnoopingVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: priIgmpSnoopingVlanID.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingVlanID.setDescription("This value is vlan's ID.")
priIgmpSnoopingGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: priIgmpSnoopingGroupAddress.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingGroupAddress.setDescription("This value is group's ip address.")
priIgmpSnoopingPortBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priIgmpSnoopingPortBitmap.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingPortBitmap.setDescription("Port's bitmap.")
priIgmpSnoopingLimitPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4), )
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortTable.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortTable.setDescription(' IopgmpSnoing limits configuration per port in vlan.')
priIgmpSnoopingLimitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1), ).setIndexNames((0, "NAG-MIB", "priIgmpSnoopingLimitVlanID"), (0, "NAG-MIB", "priIgmpSnoopingLimitPortIndex"))
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortEntry.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortEntry.setDescription(' IgmpSnooping limits confition per port in vlan.')
priIgmpSnoopingLimitVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: priIgmpSnoopingLimitVlanID.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingLimitVlanID.setDescription("This value is vlan's ID which enable ip igmp snooping.")
priIgmpSnoopingLimitPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortIndex.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortIndex.setDescription("This value is port's Index.")
priIgmpSnoopingLimitPortGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortGroupNum.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortGroupNum.setDescription('set the maximum IGMP group the port can join.Default:FFFFFFFF, if only set source_num,\n\t\t    when geting ,the result is -1(FFFFFFFF)')
priIgmpSnoopingLimitPortSourceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortSourceNum.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortSourceNum.setDescription('set the maximum source number the port can join.Default:FFFFFFFF, if only set group_num,\n\t\t    when geting ,the result is -1(FFFFFFFF)')
priIgmpSnoopingLimitPortStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortStrategy.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortStrategy.setDescription('configure the strategy over limit.')
priIgmpSnoopingLimitPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortStatus.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortStatus.setDescription('the status of limitPort:enable(1) to enable value of limitation;\n        disable(0) is to disable value of limitation.')
priIgmpSnoopingPortCtrlPktTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 5), )
if mibBuilder.loadTexts: priIgmpSnoopingPortCtrlPktTable.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingPortCtrlPktTable.setDescription(' IgmpSnooping filter of the layer 3 control packet function of a port.')
priIgmpSnoopingPortCtrlPktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 5, 1), ).setIndexNames((0, "NAG-MIB", "priIgmpSnoopingPortCtrlPktDrop"))
if mibBuilder.loadTexts: priIgmpSnoopingPortCtrlPktEntry.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingPortCtrlPktEntry.setDescription(' IgmpSnooping control packet per port.')
priIgmpSnoopingPortCtrlPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("query", 1), ("report", 2), ("query-and-report", 3), ("no-query", 4), ("no-report", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingPortCtrlPktDrop.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingPortCtrlPktDrop.setDescription(' if set(1), drop query packet ,\n\t\t\t\t\t\t and if set(2), drop report packet,\n\t\t\t\t\t\t if set(4), no drop query packet ,\n\t\t\t\t\t\t and if set(5), no drop report packet,\n\t\t\t\t\t\t query_and_report(3): drop query and report packet,')
priIgmpSnoopingPortAuthTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 6), )
if mibBuilder.loadTexts: priIgmpSnoopingPortAuthTable.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingPortAuthTable.setDescription(' This table is used to manage the IGMP Access Authentication \n            configurations of a port.')
priIgmpSnoopingPortAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 6, 1), ).setIndexNames((0, "NAG-MIB", "priIgmpSnoopingPortAuthEnable"))
if mibBuilder.loadTexts: priIgmpSnoopingPortAuthEntry.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingPortAuthEntry.setDescription(' IgmpSnooping: A list of manageable entities for IGMP Access Authentication.\n            The configuration is done per port.')
priIgmpSnoopingPortAuthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingPortAuthEnable.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingPortAuthEnable.setDescription('If set(0), not enable igmp snooping authentication on port, \n\t\t\t\t\t\t if set(1), enable igmp snooping authentication on port.')
priIgmpSnoopingPortAuthFreeRule = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: priIgmpSnoopingPortAuthFreeRule.setStatus('current')
if mibBuilder.loadTexts: priIgmpSnoopingPortAuthFreeRule.setDescription('get the igmpsnooping authentication group control')
dot1qTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1), )
if mibBuilder.loadTexts: dot1qTunnelTable.setStatus('current')
if mibBuilder.loadTexts: dot1qTunnelTable.setDescription(' port of qinq tunnel function list')
dot1qTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1, 1), ).setIndexNames((0, "NAG-MIB", "qinqPortIndex"))
if mibBuilder.loadTexts: dot1qTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: dot1qTunnelEntry.setDescription(' configure of dot1qTunnel')
qinqPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: qinqPortIndex.setStatus('current')
if mibBuilder.loadTexts: qinqPortIndex.setDescription('port index')
tunnelPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelPortEnable.setStatus('current')
if mibBuilder.loadTexts: tunnelPortEnable.setDescription('Enable or disable the dot1q-tunnel in this port.')
tunnelPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelPortType.setStatus('current')
if mibBuilder.loadTexts: tunnelPortType.setDescription('Protocol type of trunk port(TPID)(exp:33024(0x8100)/37120(0x9100)/37376(0x9200)).')
vlanTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2), )
if mibBuilder.loadTexts: vlanTranslationTable.setStatus('current')
if mibBuilder.loadTexts: vlanTranslationTable.setDescription(' VLAN translation basic config.')
vlanTranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2, 1), ).setIndexNames((0, "NAG-MIB", "translatPortIndex"))
if mibBuilder.loadTexts: vlanTranslationEntry.setStatus('current')
if mibBuilder.loadTexts: vlanTranslationEntry.setDescription('VLAN translation')
translatPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: translatPortIndex.setStatus('current')
if mibBuilder.loadTexts: translatPortIndex.setDescription('Index of Port.')
translationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: translationEnable.setStatus('current')
if mibBuilder.loadTexts: translationEnable.setDescription('if the port can be done translation function')
translationDropType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3), ("noIn", 4), ("noOut", 5), ("noBoth", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: translationDropType.setStatus('current')
if mibBuilder.loadTexts: translationDropType.setDescription('when VLAN-translation missed, drop packet mode')
vlanTranslationTypeTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3), )
if mibBuilder.loadTexts: vlanTranslationTypeTable.setStatus('current')
if mibBuilder.loadTexts: vlanTranslationTypeTable.setDescription(' port VLAN-translation of translation relation list')
vlanTranslationTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1), ).setIndexNames((0, "NAG-MIB", "translatPortTypeIndex"), (0, "NAG-MIB", "translationType"), (0, "NAG-MIB", "translationOldVlanid"), (0, "NAG-MIB", "translationNewVlanid"))
if mibBuilder.loadTexts: vlanTranslationTypeEntry.setStatus('current')
if mibBuilder.loadTexts: vlanTranslationTypeEntry.setDescription(' port VLAN translation of translation relation,index is port index and translation sort')
translatPortTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: translatPortTypeIndex.setStatus('current')
if mibBuilder.loadTexts: translatPortTypeIndex.setDescription('port index')
translationType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: translationType.setStatus('current')
if mibBuilder.loadTexts: translationType.setDescription('translation type. in:input translation; out:output translation.')
translationOldVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: translationOldVlanid.setStatus('current')
if mibBuilder.loadTexts: translationOldVlanid.setDescription('vlantranslation pre-vid')
translationNewVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: translationNewVlanid.setStatus('current')
if mibBuilder.loadTexts: translationNewVlanid.setDescription('the new vid')
translationTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: translationTypeStatus.setStatus('current')
if mibBuilder.loadTexts: translationTypeStatus.setDescription(' accession/delete VLAN-translation relation')
acl = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1))
fireWall = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 1))
timeRange = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2))
aclConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3))
aclAttach = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4))
fireWallEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fireWallEnable.setStatus('current')
if mibBuilder.loadTexts: fireWallEnable.setDescription('firewall on-off')
timeRangeMapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1), )
if mibBuilder.loadTexts: timeRangeMapTable.setStatus('current')
if mibBuilder.loadTexts: timeRangeMapTable.setDescription('timeRange Map Table')
timeRangeMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1, 1), ).setIndexNames((0, "NAG-MIB", "timeRangeMapIndex"))
if mibBuilder.loadTexts: timeRangeMapEntry.setStatus('current')
if mibBuilder.loadTexts: timeRangeMapEntry.setDescription('timeRange Map Entry')
timeRangeMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeRangeMapIndex.setStatus('current')
if mibBuilder.loadTexts: timeRangeMapIndex.setDescription('TimeRange Map index,the range of it is 1-(2^32-1).')
timeRangeMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeMapName.setStatus('current')
if mibBuilder.loadTexts: timeRangeMapName.setDescription('TimeRange Map name')
timeRangeMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeMapStatus.setStatus('current')
if mibBuilder.loadTexts: timeRangeMapStatus.setDescription('TimeRange Map status')
timeRangeTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2), )
if mibBuilder.loadTexts: timeRangeTable.setStatus('current')
if mibBuilder.loadTexts: timeRangeTable.setDescription('timeRange Table')
timeRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1), ).setIndexNames((0, "NAG-MIB", "timeRangeIndex"), (0, "NAG-MIB", "timeRangeSubIndex"))
if mibBuilder.loadTexts: timeRangeEntry.setStatus('current')
if mibBuilder.loadTexts: timeRangeEntry.setDescription('timeRange Entry')
timeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeRangeIndex.setStatus('current')
if mibBuilder.loadTexts: timeRangeIndex.setDescription('TimeRange index,the allowed range is 1 to 1000.')
timeRangeSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeRangeSubIndex.setStatus('current')
if mibBuilder.loadTexts: timeRangeSubIndex.setDescription('TimeRange sub index,the allowed range is 1 to 1000.')
timeRangeType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("periodic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeType.setStatus('current')
if mibBuilder.loadTexts: timeRangeType.setDescription('TimeRange type')
timeRangeStartWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 4), Bits().clone(namedValues=NamedValues(("monday", 0), ("tuesday", 1), ("wednesday", 2), ("thursday", 3), ("friday", 4), ("saturday", 5), ("sunday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStartWeek.setStatus('current')
if mibBuilder.loadTexts: timeRangeStartWeek.setDescription('configurate the start week,for example: f8 means monday+tuesday+wednesday+thurday+friday,\n                the lowest bit is not used,so fe is the biggest.')
timeRangeStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStartDate.setStatus('current')
if mibBuilder.loadTexts: timeRangeStartDate.setDescription('configurate the start Date,for example YYYY.MM.DD .')
timeRangeStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStartTime.setStatus('current')
if mibBuilder.loadTexts: timeRangeStartTime.setDescription('configurate the start clock,for example HH:MM:SS.')
timeRangeEndWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 7), Bits().clone(namedValues=NamedValues(("monday", 0), ("tuesday", 1), ("wednesday", 2), ("thursday", 3), ("friday", 4), ("saturday", 5), ("sunday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeEndWeek.setStatus('current')
if mibBuilder.loadTexts: timeRangeEndWeek.setDescription('configurate the end week,for example: f8 means monday+tuesday+wednesday+thurday+friday,\n                the lowest bit is not used,so fe is the biggest.')
timeRangeEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeEndDate.setStatus('current')
if mibBuilder.loadTexts: timeRangeEndDate.setDescription('configurate the end date,for example YYYY.MM.DD.')
timeRangeEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeEndTime.setStatus('current')
if mibBuilder.loadTexts: timeRangeEndTime.setDescription('configurate the end clock,for example HH:MM:SS.')
timeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStatus.setStatus('current')
if mibBuilder.loadTexts: timeRangeStatus.setDescription('status of timeRangeMapTable')
numAclGroupTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1), )
if mibBuilder.loadTexts: numAclGroupTable.setStatus('current')
if mibBuilder.loadTexts: numAclGroupTable.setDescription('this table is used for building a num-acl list.')
numAclGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1), ).setIndexNames((0, "NAG-MIB", "numAclGroupAclIndex"))
if mibBuilder.loadTexts: numAclGroupEntry.setStatus('current')
if mibBuilder.loadTexts: numAclGroupEntry.setDescription("numAclGroup Table's Entry")
numAclGroupAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numAclGroupAclIndex.setStatus('current')
if mibBuilder.loadTexts: numAclGroupAclIndex.setDescription('the index of number acl,ip standard <1-99>,ip extern <100-199>, \n                ip extern (support discontinuous ip address mask)<200-299>, mac standard <700-799>,\n                mac extern <1100-1199>,ipv6 standard <500-599> ipv6 extern <600-699>,\n                mac-ip extern <3100-3199>,mac-ip extern(support discontinuous ip address mask) <3200-3299>')
numAclGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("autoPriority", 0), ("configPriority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numAclGroupMatchOrder.setStatus('current')
if mibBuilder.loadTexts: numAclGroupMatchOrder.setDescription("value 0 means Acl rule's priority is automatically configured,\n                  value 1 means Acl rule's priority is manually configured,\n                  but now it's not supported.")
numAclGroupSubitemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numAclGroupSubitemNum.setStatus('current')
if mibBuilder.loadTexts: numAclGroupSubitemNum.setDescription("the Number of one acl's rule.")
numAclGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numAclGroupStatus.setStatus('current')
if mibBuilder.loadTexts: numAclGroupStatus.setDescription('the status of number acl.')
nameAclGroupTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2), )
if mibBuilder.loadTexts: nameAclGroupTable.setStatus('current')
if mibBuilder.loadTexts: nameAclGroupTable.setDescription('this table is used for building a name-acl list and mapping a string of named acl to a value of number,\n                when you want to config name-acl list,you must map at here.')
nameAclGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1), ).setIndexNames((0, "NAG-MIB", "nameAclGroupAclIndex"))
if mibBuilder.loadTexts: nameAclGroupEntry.setStatus('current')
if mibBuilder.loadTexts: nameAclGroupEntry.setDescription("nameAclGroup Table's Entry")
nameAclGroupAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameAclGroupAclIndex.setStatus('current')
if mibBuilder.loadTexts: nameAclGroupAclIndex.setDescription('the index of name acl,the range starts at 20000.')
nameAclGroupAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameAclGroupAclName.setStatus('current')
if mibBuilder.loadTexts: nameAclGroupAclName.setDescription('the name of name-acl.')
nameAclGroupAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ipStandard", 0), ("ipExtern", 1), ("macStandard", 2), ("macExtern", 3), ("macIpExtern", 4), ("macIpStandard", 5), ("ipv6Standard", 6), ("ipv6Extern", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameAclGroupAclType.setStatus('current')
if mibBuilder.loadTexts: nameAclGroupAclType.setDescription('the type of name acl.')
nameAclGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("autoPriority", 0), ("configPriority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameAclGroupMatchOrder.setStatus('current')
if mibBuilder.loadTexts: nameAclGroupMatchOrder.setDescription("value 0 means Acl rule's priority is automatically configured,\n                  value 1 means Acl rule's priority is manually configured,\n                  but now it's not supported.")
nameAclGroupSubitemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameAclGroupSubitemNum.setStatus('current')
if mibBuilder.loadTexts: nameAclGroupSubitemNum.setDescription("the Number of one acl's rule.")
nameAclGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameAclGroupStatus.setStatus('current')
if mibBuilder.loadTexts: nameAclGroupStatus.setDescription('the status of nameAclGroupTable.')
ipStandardAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3), )
if mibBuilder.loadTexts: ipStandardAclTable.setStatus('current')
if mibBuilder.loadTexts: ipStandardAclTable.setDescription('config ip Standard Acl ')
ipStandardAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1), ).setIndexNames((0, "NAG-MIB", "ipStandardIndex"), (0, "NAG-MIB", "ipStandardSubIndex"))
if mibBuilder.loadTexts: ipStandardAclEntry.setStatus('current')
if mibBuilder.loadTexts: ipStandardAclEntry.setDescription("ip standard  Table's Entry")
ipStandardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStandardIndex.setStatus('current')
if mibBuilder.loadTexts: ipStandardIndex.setDescription('The index of ip-standard-acl group.')
ipStandardSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStandardSubIndex.setStatus('current')
if mibBuilder.loadTexts: ipStandardSubIndex.setDescription('The index of ip-standard-acl rule.')
ipStandardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStandardPriority.setStatus('current')
if mibBuilder.loadTexts: ipStandardPriority.setDescription("The priority of standard ip acl's rule,it is not supported now.")
ipStandardAct = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStandardAct.setStatus('current')
if mibBuilder.loadTexts: ipStandardAct.setDescription(' The action of acl rule.')
ipStandardSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStandardSrcIp.setStatus('current')
if mibBuilder.loadTexts: ipStandardSrcIp.setDescription(' Source IP-address of basic acl rule.')
ipStandardSrcIpWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStandardSrcIpWild.setStatus('current')
if mibBuilder.loadTexts: ipStandardSrcIpWild.setDescription(' Source IP-address wild  of basic acl rule.')
ipStandardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStandardStatus.setStatus('current')
if mibBuilder.loadTexts: ipStandardStatus.setDescription(' status of the ipStandardAclTable.')
ipExternAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4), )
if mibBuilder.loadTexts: ipExternAclTable.setStatus('current')
if mibBuilder.loadTexts: ipExternAclTable.setDescription('ip extern Acl Table')
ipExternAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1), ).setIndexNames((0, "NAG-MIB", "ipExternIndex"), (0, "NAG-MIB", "ipExternSubIndex"))
if mibBuilder.loadTexts: ipExternAclEntry.setStatus('current')
if mibBuilder.loadTexts: ipExternAclEntry.setDescription("ip extern Table's Entry")
ipExternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExternIndex.setStatus('current')
if mibBuilder.loadTexts: ipExternIndex.setDescription('The index of ip-Extern-acl group .')
ipExternSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExternSubIndex.setStatus('current')
if mibBuilder.loadTexts: ipExternSubIndex.setDescription('The index of ip-Extern-acl rule .')
ipExternPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternPriority.setStatus('current')
if mibBuilder.loadTexts: ipExternPriority.setDescription("The priority of extern ip acl's rule,it is not supported now.")
ipExternAct = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternAct.setStatus('current')
if mibBuilder.loadTexts: ipExternAct.setDescription(' The action of acl rule.')
ipExternProtocal = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternProtocal.setStatus('current')
if mibBuilder.loadTexts: ipExternProtocal.setDescription('The protocol number field in the IP header used to indicate\n        the higher layer protocol as specified in RFC 1700. A value \n        value of 65535 matches every IP packet. \n        \n        For example :\n        1 is ICMP, 2 is IGMP, 4 is IP in IP encapsulation,\n        6 is TCP, 9 is IGRP, 17 is UDP, 47 is GRE, 50 is ESP, 51 is AH,\n        88 is EIGRP, 89 is OSPF, 94 is KA9Q/NOS compatible IP over IP,\n        103 is PIMv2, 108 is PCP, 65535 is ip.')
ipExternSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternSrcIp.setStatus('current')
if mibBuilder.loadTexts: ipExternSrcIp.setDescription(' Source IP-address of advanced acl rule,for example 10.1.1.0 .')
ipExternSrcIpWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternSrcIpWild.setStatus('current')
if mibBuilder.loadTexts: ipExternSrcIpWild.setDescription(' Source IP-address wild  of advanced acl rule,for example 0.0.0.255 .')
ipExternDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternDstIp.setStatus('current')
if mibBuilder.loadTexts: ipExternDstIp.setDescription(' Destination IP-address of advanced acl rule,for example 10.1.1.0 .')
ipExternDstIpWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternDstIpWild.setStatus('current')
if mibBuilder.loadTexts: ipExternDstIpWild.setDescription(' Destination IP-address wild  of advanced acl rule,for example 0.0.0.255 .')
ipExternTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: ipExternTimeRangeName.setDescription('The Time-range of advanced acl rule.')
ipExternSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noOperator", 0), ("eq", 1), ("range", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternSrcOp.setStatus('current')
if mibBuilder.loadTexts: ipExternSrcOp.setDescription("Indicates how a packet's source TCP/UDP port number is\n        to be compared.\n        \n        If the numIpExternProtocol object in the same row does not\n        indicate TCP or UDP, this object has to be 'noOperator(0)' and\n        cannot be changed while this row is active, i.e., the value of\n        numIpExternStatus in the same row has the value 'active(1)'.\n        \n        'noOperator(0)', which is the default value, means that no\n        comparison is to be made with the source TCP/UDP port number.\n        \n        eq(1) means equal, This operators are using the ipExternSrcPort1 \n        object as an operand which is the only one needed. \n        \n        range(3) means that it compares the port value between two \n        numbers, so this operator needs 2 operands. One operand is \n        the starting port number of the range which is ipExternSrcPort1 \n        object, and the other operand is the ending port number of the \n        range which the ipExternSrcPort2 object is in.\n        \n        Now support(3)eq,(5)range.")
ipExternSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternSrcPort1.setStatus('current')
if mibBuilder.loadTexts: ipExternSrcPort1.setDescription('The source port number of the TCP or UDP protocol. If the\n        numIpExternSrcOP object in the same row is range(5), this\n        object will be the starting port number of the port range.\n        This object cannot be configured if numIpExternStatus in the \n        same row is active(1) or numIpExternSrcOP in the same row\n        is noOperator(0).')
ipExternSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternSrcPort2.setStatus('current')
if mibBuilder.loadTexts: ipExternSrcPort2.setDescription('The source port number of the TCP or UDP protocol. If the\n        numIpExternSrcOP object in the same row is range(5), this\n        object will be the ending port number of the port range.\n        This object cannot be configured if numIpExternStatus in the \n        same row is active(1) or numIpExternSrcOP in the same row\n        is not range(5).')
ipExternDstOp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noOperator", 0), ("eq", 1), ("range", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternDstOp.setStatus('current')
if mibBuilder.loadTexts: ipExternDstOp.setDescription("Indicates how a packet's Destination TCP/UDP port number is\n        to be compared.\n        \n        If the numIpExternProtocol object in the same row does not\n        indicate TCP or UDP, this object has to be 'noOperator(0)' and\n        cannot be changed while this row is active, i.e., the value of\n        numIpExternStatus in the same row has the value 'active(1)'.\n        \n        'noOperator(0)', which is the default value, means that no\n        comparison is to be made with the source TCP/UDP port number.\n         eq(1)means equal, This operators are using the numIpExternDestPort \n         object as an operand which is the only one needed. \n        \n        range(5) means that it compares the port value between two \n        numbers, so this operator needs 2 operands. One operand is \n        the starting port number of the range which is numIpExternSrcPort \n        object, and the other operand is the ending port number of the \n        range which the numIpExternDestPortRange object is in.\n        \n        Now support(3)eq,(5)range.")
ipExternDstPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternDstPort1.setStatus('current')
if mibBuilder.loadTexts: ipExternDstPort1.setDescription('The source port number of the TCP or UDP protocol. If the\n        numIpExternDestOP object in the same row is range(5), this\n        object will be the starting port number of the port range.\n        This object cannot be configured if numIpExternStatus in the \n        same row is active(1) or numIpExternDestOP in the same row\n        is noOperator(0).')
ipExternDstPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternDstPort2.setStatus('current')
if mibBuilder.loadTexts: ipExternDstPort2.setDescription('The source port number of the TCP or UDP protocol. If the\n        numIpExternDestOP object in the same row is range(5), this\n        object will be the ending port number of the port range.\n        This object cannot be configured if numIpExternStatus in the \n        same row is active(1) or numIpExternDestOP in the same row\n        is not range(5).')
ipExternStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternStatus.setStatus('current')
if mibBuilder.loadTexts: ipExternStatus.setDescription(' now state of the access-list.')
macStandardAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5), )
if mibBuilder.loadTexts: macStandardAclTable.setStatus('current')
if mibBuilder.loadTexts: macStandardAclTable.setDescription('mac Standard Acl Table')
macStandardAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1), ).setIndexNames((0, "NAG-MIB", "macStandardIndex"), (0, "NAG-MIB", "macStandardSubIndex"))
if mibBuilder.loadTexts: macStandardAclEntry.setStatus('current')
if mibBuilder.loadTexts: macStandardAclEntry.setDescription("mac standard  Table's Entry")
macStandardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macStandardIndex.setStatus('current')
if mibBuilder.loadTexts: macStandardIndex.setDescription('The index of mac-standard-acl group .')
macStandardSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macStandardSubIndex.setStatus('current')
if mibBuilder.loadTexts: macStandardSubIndex.setDescription('The index of mac-standard-acl rule .')
macStandardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macStandardPriority.setStatus('current')
if mibBuilder.loadTexts: macStandardPriority.setDescription("The priority of standard mac acl's rule,it is not supported now.")
macStandardAct = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macStandardAct.setStatus('current')
if mibBuilder.loadTexts: macStandardAct.setDescription(' The action of acl rule.')
macStandardSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macStandardSrcMac.setStatus('current')
if mibBuilder.loadTexts: macStandardSrcMac.setDescription(' Source Mac-address of basic acl rule,for example : ff-ff-ff-ff-ff-00.')
macStandardSrcMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macStandardSrcMacWild.setStatus('current')
if mibBuilder.loadTexts: macStandardSrcMacWild.setDescription(" Source Mac-address's anti-mask of basic acl rule,for example : ff-ff-ff-ff-00-00.")
macStandardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macStandardStatus.setStatus('current')
if mibBuilder.loadTexts: macStandardStatus.setDescription(' status of the access-list.')
macExternAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6), )
if mibBuilder.loadTexts: macExternAclTable.setStatus('current')
if mibBuilder.loadTexts: macExternAclTable.setDescription('mac extern Acl Table')
macExternAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1), ).setIndexNames((0, "NAG-MIB", "macExternIndex"), (0, "NAG-MIB", "macExternSubIndex"))
if mibBuilder.loadTexts: macExternAclEntry.setStatus('current')
if mibBuilder.loadTexts: macExternAclEntry.setDescription("mac extern  Table's Entry")
macExternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macExternIndex.setStatus('current')
if mibBuilder.loadTexts: macExternIndex.setDescription('The index of Mac-Extern-acl group.')
macExternSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macExternSubIndex.setStatus('current')
if mibBuilder.loadTexts: macExternSubIndex.setDescription(' The index of Mac-Extern-acl rule.')
macExternPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternPriority.setStatus('current')
if mibBuilder.loadTexts: macExternPriority.setDescription(" The priority of extern mac acl's rule,it is not supported now.")
macExternAct = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternAct.setStatus('current')
if mibBuilder.loadTexts: macExternAct.setDescription(' The action of acl rule.')
macExternSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternSrcMac.setStatus('current')
if mibBuilder.loadTexts: macExternSrcMac.setDescription(' Source Mac-address of advanced acl rule,for example : ff-ff-ff-ff-ff-00.')
macExternSrcMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternSrcMacWild.setStatus('current')
if mibBuilder.loadTexts: macExternSrcMacWild.setDescription(" Source Mac-address's anti-mask  of advanced acl rule,for example : ff-ff-ff-ff-00-00.")
macExternDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternDstMac.setStatus('current')
if mibBuilder.loadTexts: macExternDstMac.setDescription(' Destination Mac-address of advanced acl rule,for example : ff-ff-ff-ff-ff-00.')
macExternDstMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternDstMacWild.setStatus('current')
if mibBuilder.loadTexts: macExternDstMacWild.setDescription(" Destination Mac-address's anti-mask  of advanced acl rule,for example : ff-ff-ff-ff-00-00.")
macExternPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternPacketType.setStatus('current')
if mibBuilder.loadTexts: macExternPacketType.setDescription('Indicates the message type of packets.none(0),untagged-eth2(1),\n                untagged-802.3(2),tagged-eth2(3),tagged-802.3(4)')
macExternEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternEtherType.setStatus('current')
if mibBuilder.loadTexts: macExternEtherType.setDescription('Value of the ethertype')
macExternEtherTypeWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternEtherTypeWild.setStatus('current')
if mibBuilder.loadTexts: macExternEtherTypeWild.setDescription('Anti-mask of the ethertype')
macExternCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternCos.setStatus('current')
if mibBuilder.loadTexts: macExternCos.setDescription('value of the cos')
macExternCosWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternCosWild.setStatus('current')
if mibBuilder.loadTexts: macExternCosWild.setDescription('Anti-mask of the cos')
macExternVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternVlanId.setStatus('current')
if mibBuilder.loadTexts: macExternVlanId.setDescription('vlan id')
macExternVlanIdWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternVlanIdWild.setStatus('current')
if mibBuilder.loadTexts: macExternVlanIdWild.setDescription('Anti-mask of the vlan id')
macExternStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternStatus.setStatus('current')
if mibBuilder.loadTexts: macExternStatus.setDescription(' now state of the access-list.')
ipv6StandardAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7), )
if mibBuilder.loadTexts: ipv6StandardAclTable.setStatus('current')
if mibBuilder.loadTexts: ipv6StandardAclTable.setDescription('ipv6 Standard Acl Table')
ipv6StandardAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1), ).setIndexNames((0, "NAG-MIB", "ipv6StandardIndex"), (0, "NAG-MIB", "ipv6StandardSubIndex"))
if mibBuilder.loadTexts: ipv6StandardAclEntry.setStatus('current')
if mibBuilder.loadTexts: ipv6StandardAclEntry.setDescription("ipv6 standard  Table's Entry")
ipv6StandardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6StandardIndex.setStatus('current')
if mibBuilder.loadTexts: ipv6StandardIndex.setDescription('The index of ipv6-standard-acl group.')
ipv6StandardSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6StandardSubIndex.setStatus('current')
if mibBuilder.loadTexts: ipv6StandardSubIndex.setDescription('The index of ipv6-standard-acl rule.')
ipv6StandardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6StandardPriority.setStatus('current')
if mibBuilder.loadTexts: ipv6StandardPriority.setDescription("The priority of standard ipv6 acl's rule,it is not supported now.")
ipv6StandardAct = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6StandardAct.setStatus('current')
if mibBuilder.loadTexts: ipv6StandardAct.setDescription(' The action of acl rule.')
ipv6StandardSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6StandardSrcIp.setStatus('current')
if mibBuilder.loadTexts: ipv6StandardSrcIp.setDescription(' Source IPV6-address of basic acl rule,for example : 3ffe:506::100.')
ipv6StandardSrcPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6StandardSrcPrefixLen.setStatus('current')
if mibBuilder.loadTexts: ipv6StandardSrcPrefixLen.setDescription(' Source IPV6-address prefix length of basic acl rule.')
ipv6StandardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6StandardStatus.setStatus('current')
if mibBuilder.loadTexts: ipv6StandardStatus.setDescription(' now state of the access-list.')
ipv6ExternAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8), )
if mibBuilder.loadTexts: ipv6ExternAclTable.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternAclTable.setDescription('ipv6 extern Acl Table')
ipv6ExternAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1), ).setIndexNames((0, "NAG-MIB", "ipv6ExternIndex"), (0, "NAG-MIB", "ipv6ExternSubIndex"))
if mibBuilder.loadTexts: ipv6ExternAclEntry.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternAclEntry.setDescription("ipv6 extern Table's Entry")
ipv6ExternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternIndex.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternIndex.setDescription('The index of ipv6-Extern-acl group .')
ipv6ExternSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternSubIndex.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternSubIndex.setDescription('The index of ipv6-Extern-acl rule .')
ipv6ExternPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternPriority.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternPriority.setDescription("The priority of extern ipv6 acl's rule,it is not supported now.")
ipv6ExternAct = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternAct.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternAct.setDescription(' The action of acl rule.')
ipv6ExternProtocal = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternProtocal.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternProtocal.setDescription('The protocol number field in the IP header used to indicate\n        the higher layer protocol as specified .  \n        \n        For example :\n        0 is IP, 1 is ICMP, 2 is IGMP, 4 is IP in IP encapsulation,\n        6 is TCP, 9 is IGRP, 17 is UDP, 47 is GRE, 50 is ESP, 51 is AH,\n        88 is EIGRP, 89 is OSPF, 94 is KA9Q/NOS compatible IP over IP,\n        103 is PIMv2, 108 is PCP')
ipv6ExternSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternSrcIp.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternSrcIp.setDescription(' Source IPV6-address of advanced acl rule,for example : 3ffe:506::100.')
ipv6ExternSrcPreLen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternSrcPreLen.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternSrcPreLen.setDescription(' Source IP-address prefix length of advanced acl rule.')
ipv6ExternDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternDstIp.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternDstIp.setDescription(' Destination IPV6-address of advanced acl rule,for example : 3ffe:506::100.')
ipv6ExternDstPreLen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternDstPreLen.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternDstPreLen.setDescription(' Destination IPV6-address prefix length of advanced acl rule.')
ipv6ExternTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternTimeRangeName.setDescription('The Time-range of advanced acl rule.')
ipv6ExternSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("noOperator", 0), ("eq", 3), ("range", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternSrcOp.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternSrcOp.setDescription("Indicates how a packet's source  TCP/UDP port number is\n        to be compared.\n        \n        If the ipv6ExternProtocal object in the same row does not\n        indicate TCP or UDP, this object has to be 'noOperator(0)' and\n        cannot be changed while this row is active, i.e., the value of\n        ipv6ExternStatus in the same row has the value 'active(1)'.\n        \n        'noOperator(0)', which is the default value, means that no\n        comparison is to be made with the source TCP/UDP port number.\n        \n        eq(3) means equal,range(5) means that it compares the port value between two \n        numbers, so this operator needs 2 operands. One operand is \n        the starting port number of the range which is ipv6ExternSrcPort1 \n        object, and the other operand is the ending port number of the \n        range which the ipv6ExternSrcPort2 object is in.")
ipv6ExternSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternSrcPort1.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternSrcPort1.setDescription('The source port number of the TCP or UDP protocol. If the\n        ipv6ExternSrcOp object in the same row is range(5), this\n        object will be the starting port number of the port range.\n        This object cannot be configured if ipv6ExternStatus in the \n        same row is active(1) or ipv6ExternSrcOp in the same row\n        is noOperator(0).')
ipv6ExternSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternSrcPort2.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternSrcPort2.setDescription('The source port number of the TCP or UDP protocol. If the\n        ipv6ExternSrcOp object in the same row is range(5), this\n        object will be the ending port number of the port range.\n        This object cannot be configured if ipv6ExternStatus in the \n        same row is active(1) or ipv6ExternSrcOp in the same row\n        is not range(5).')
ipv6ExternDstOp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("noOperator", 0), ("eq", 3), ("range", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternDstOp.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternDstOp.setDescription("Indicates how a packet's Destination TCP/UDP port number is\n        to be compared.\n        \n        If the ipv6ExternProtocal object in the same row does not\n        indicate TCP or UDP, this object has to be 'noOperator(0)' and\n        cannot be changed while this row is active, i.e., the value of\n        ipv6ExternStatus in the same row has the value 'active(1)'.\n        \n        'noOperator(0)', which is the default value, means that no\n        comparison is to be made with the source TCP/UDP port number.\n        \n        eq(3) means equal,range(5) means that it compares the port value between two \n        numbers, so this operator needs 2 operands. One operand is \n        the starting port number of the range which is ipv6ExternDstPort1 \n        object, and the other operand is the ending port number of the \n        range which the ipv6ExternDstPort2 object is in.")
ipv6ExternDstPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternDstPort1.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternDstPort1.setDescription('The Destination port number of the TCP or UDP protocol. If the\n        ipv6ExternDstOp object in the same row is range(5), this\n        object will be the starting port number of the port range.\n        This object cannot be configured if ipv6ExternStatus in the \n        same row is active(1) or ipv6ExternDstOp in the same row\n        is noOperator(0).')
ipv6ExternDstPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternDstPort2.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternDstPort2.setDescription('The Destination port number of the TCP or UDP protocol. If the\n        ipv6ExternDstOp object in the same row is range(5), this\n        object will be the ending port number of the port range.\n        This object cannot be configured if ipv6ExternStatus in the \n        same row is active(1) or ipv6ExternDstOp in the same row\n        is not range(5).')
ipv6ExternStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternStatus.setStatus('current')
if mibBuilder.loadTexts: ipv6ExternStatus.setDescription(' status of ipv6ExternAclTable.')
macIpExternAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9), )
if mibBuilder.loadTexts: macIpExternAclTable.setStatus('current')
if mibBuilder.loadTexts: macIpExternAclTable.setDescription('mac-ip extern Acl Table')
macIpExternAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1), ).setIndexNames((0, "NAG-MIB", "macIpExternIndex"), (0, "NAG-MIB", "macIpExternSubIndex"))
if mibBuilder.loadTexts: macIpExternAclEntry.setStatus('current')
if mibBuilder.loadTexts: macIpExternAclEntry.setDescription("mac-ip extern Table's Entry")
macIpExternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macIpExternIndex.setStatus('current')
if mibBuilder.loadTexts: macIpExternIndex.setDescription('The index of macIp-Extern-acl group .')
macIpExternSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macIpExternSubIndex.setStatus('current')
if mibBuilder.loadTexts: macIpExternSubIndex.setDescription('The index of macIp-Extern-acl rule .')
macIpExternPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternPriority.setStatus('current')
if mibBuilder.loadTexts: macIpExternPriority.setDescription("The priority of extern macIp acl's rule,it is not supported now.")
macIpExternAct = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternAct.setStatus('current')
if mibBuilder.loadTexts: macIpExternAct.setDescription(' The action of acl rule.')
macIpExternProtocal = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternProtocal.setStatus('current')
if mibBuilder.loadTexts: macIpExternProtocal.setDescription('The protocol number field in the IP header used to indicate\n        the higher layer protocol as specified in RFC 1700. A value \n        value of 65535 matches every IP packet. \n        \n        For example :\n        1 is ICMP, 2 is IGMP, 4 is IP in IP encapsulation,\n        6 is TCP, 9 is IGRP, 17 is UDP, 47 is GRE, 50 is ESP, 51 is AH,\n        88 is EIGRP, 89 is OSPF, 94 is KA9Q/NOS compatible IP over IP,\n        103 is PIMv2, 108 is PCP, 65535 is ip.')
macIpExternSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternSrcMac.setStatus('current')
if mibBuilder.loadTexts: macIpExternSrcMac.setDescription(' Source Mac-address of advanced acl rule,for example : ff-ff-ff-ff-ff-00.')
macIpExternSrcMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternSrcMacWild.setStatus('current')
if mibBuilder.loadTexts: macIpExternSrcMacWild.setDescription(" Source Mac-address's anti-mask  of advanced acl rule,for example : ff-ff-ff-ff-00-00.")
macIpExternDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternDstMac.setStatus('current')
if mibBuilder.loadTexts: macIpExternDstMac.setDescription(' Destination Mac-address of advanced acl rule,for example : ff-ff-ff-ff-ff-00.')
macIpExternDstMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternDstMacWild.setStatus('current')
if mibBuilder.loadTexts: macIpExternDstMacWild.setDescription(" Destination Mac-address's anti-mask  of advanced acl rule,for example : ff-ff-ff-ff-00-00.")
macIpExternSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternSrcIp.setStatus('current')
if mibBuilder.loadTexts: macIpExternSrcIp.setDescription(' Source IP-address of advanced acl rule,for example 10.1.1.0 .')
macIpExternSrcIpWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternSrcIpWild.setStatus('current')
if mibBuilder.loadTexts: macIpExternSrcIpWild.setDescription(' Source IP-address wild  of advanced acl rule,for example 0.0.0.255 .')
macIpExternDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternDstIp.setStatus('current')
if mibBuilder.loadTexts: macIpExternDstIp.setDescription(' Destination IP-address of advanced acl rule,for example 10.1.1.0 .')
macIpExternDstIpWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternDstIpWild.setStatus('current')
if mibBuilder.loadTexts: macIpExternDstIpWild.setDescription(' Destination IP-address wild  of advanced acl rule,for example 0.0.0.255 .')
macIpExternTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: macIpExternTimeRangeName.setDescription('The Time-range of advanced acl rule.')
macIpExternSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("noOperator", 0), ("eq", 3), ("range", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternSrcOp.setStatus('current')
if mibBuilder.loadTexts: macIpExternSrcOp.setDescription("Indicates how a packet's source TCP/UDP port number is\n        to be compared.\n        \n        If the macIpExternProtocal object in the same row does not\n        indicate TCP or UDP, this object has to be 'noOperator(0)' and\n        cannot be changed while this row is active, i.e., the value of\n        macIpExternStatus in the same row has the value 'active(1)'.\n        \n        'noOperator(0)', which is the default value, means that no\n        comparison is to be made with the source TCP/UDP port number.\n        \n        eq(3) means equal, This operators are using the macIpExternSrcPort1 \n        object as an operand which is the only one needed. \n        \n        range(5) means that it compares the port value between two \n        numbers, so this operator needs 2 operands. One operand is \n        the starting port number of the range which is macIpExternSrcPort1 \n        object, and the other operand is the ending port number of the \n        range which the macIpExternSrcPort2 object is in.\n        \n        Now support(3)eq,(5)range.")
macIpExternSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternSrcPort1.setStatus('current')
if mibBuilder.loadTexts: macIpExternSrcPort1.setDescription('The source port number of the TCP or UDP protocol. If the\n        macIpExternSrcOP object in the same row is range(5), this\n        object will be the starting port number of the port range.\n        This object cannot be configured if macIpExternStatus in the \n        same row is active(1) or numIpExternSrcOP in the same row\n        is noOperator(0).')
macIpExternSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternSrcPort2.setStatus('current')
if mibBuilder.loadTexts: macIpExternSrcPort2.setDescription('The source port number of the TCP or UDP protocol. If the\n        macIpExternSrcOP object in the same row is range(5), this\n        object will be the ending port number of the port range.\n        This object cannot be configured if numIpExternStatus in the \n        same row is active(1) or macIpExternSrcOP in the same row\n        is not range(5).')
macIpExternDstOp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noOperator", 0), ("eq", 1), ("range", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternDstOp.setStatus('current')
if mibBuilder.loadTexts: macIpExternDstOp.setDescription("Indicates how a packet's Destination TCP/UDP port number is\n        to be compared.\n        \n        If the macIpExternProtocol object in the same row does not\n        indicate TCP or UDP, this object has to be 'noOperator(0)' and\n        cannot be changed while this row is active, i.e., the value of\n        macIpExternStatus in the same row has the value 'active(1)'.\n        \n        'noOperator(0)', which is the default value, means that no\n        comparison is to be made with the source TCP/UDP port number.\n         eq(3)means equal, This operators are using the macIpExternDstPort \n         object as an operand which is the only one needed. \n        \n        range(5) means that it compares the port value between two \n        numbers, so this operator needs 2 operands. One operand is \n        the starting port number of the range which is macIpExternSrcPort1 \n        object, and the other operand is the ending port number of the \n        range which the macIpExternDstPort2 object is in.\n        \n        Now support(3)eq,(5)range.")
macIpExternDstPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternDstPort1.setStatus('current')
if mibBuilder.loadTexts: macIpExternDstPort1.setDescription('The source port number of the TCP or UDP protocol. If the\n        macIpExternDstOP object in the same row is range(5), this\n        object will be the starting port number of the port range.\n        This object cannot be configured if macIpExternStatus in the \n        same row is active(1) or macIpExternDstOP in the same row\n        is noOperator(0).')
macIpExternDstPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternDstPort2.setStatus('current')
if mibBuilder.loadTexts: macIpExternDstPort2.setDescription('The source port number of the TCP or UDP protocol. If the\n        macIpExternDstOP object in the same row is range(5), this\n        object will be the ending port number of the port range.\n        This object cannot be configured if numIpExternStatus in the \n        same row is active(1) or macIpExternDstOP in the same row\n        is not range(5).')
macIpExternPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternPrecedence.setStatus('current')
if mibBuilder.loadTexts: macIpExternPrecedence.setDescription('The precedence of macIp-Extern-acl  .')
macIpExternTos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternTos.setStatus('current')
if mibBuilder.loadTexts: macIpExternTos.setDescription('The tos of macIp-Extern-acl  .')
macIpExternStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternStatus.setStatus('current')
if mibBuilder.loadTexts: macIpExternStatus.setDescription(' state of the access-list.')
macIpExternVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternVlanId.setStatus('current')
if mibBuilder.loadTexts: macIpExternVlanId.setDescription('The vlan Id')
macIpExternVlanIdWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternVlanIdWild.setStatus('current')
if mibBuilder.loadTexts: macIpExternVlanIdWild.setDescription('The vlan Id mask')
aclActiveTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1), )
if mibBuilder.loadTexts: aclActiveTable.setStatus('current')
if mibBuilder.loadTexts: aclActiveTable.setDescription('bind  Acl in port or vlan.')
aclActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1), ).setIndexNames((0, "NAG-MIB", "aclActiveBindType"), (0, "NAG-MIB", "aclActiveIndex"), (0, "NAG-MIB", "aclActiveType"), (0, "NAG-MIB", "aclActiveDirection"))
if mibBuilder.loadTexts: aclActiveEntry.setStatus('current')
if mibBuilder.loadTexts: aclActiveEntry.setDescription('Entry for aclActiveTable')
aclActiveBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("port", 0), ("vlan", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclActiveBindType.setStatus('current')
if mibBuilder.loadTexts: aclActiveBindType.setDescription('point out the type of position of the bind-acl.')
aclActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclActiveIndex.setStatus('current')
if mibBuilder.loadTexts: aclActiveIndex.setDescription('The value of port id or vlan id  .')
aclActiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 8))).clone(namedValues=NamedValues(("ip", 1), ("ipv6", 3), ("mac", 5), ("macIp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclActiveType.setStatus('current')
if mibBuilder.loadTexts: aclActiveType.setDescription('the type of acl.')
aclActiveDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("out", 0), ("in", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclActiveDirection.setStatus('current')
if mibBuilder.loadTexts: aclActiveDirection.setDescription('the direction of a binding acl.')
aclActiveAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclActiveAclIndex.setStatus('current')
if mibBuilder.loadTexts: aclActiveAclIndex.setDescription('the value of acl index,you have configured in aclNumAccessGroupTable or aclNameAccessGroupTable.')
aclActiveStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclActiveStatistic.setStatus('current')
if mibBuilder.loadTexts: aclActiveStatistic.setDescription('support traffic statistic or not.')
aclActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclActiveStatus.setStatus('current')
if mibBuilder.loadTexts: aclActiveStatus.setDescription('access or delete the bind-acl.')
aclStatisticClearTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2), )
if mibBuilder.loadTexts: aclStatisticClearTable.setStatus('current')
if mibBuilder.loadTexts: aclStatisticClearTable.setDescription('clear traffic-statistic in port or vlan.')
aclStatisticClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1), ).setIndexNames((0, "NAG-MIB", "aclActiveBindType"), (0, "NAG-MIB", "aclActiveDirection"), (0, "NAG-MIB", "aclActiveIndex"))
if mibBuilder.loadTexts: aclStatisticClearEntry.setStatus('current')
if mibBuilder.loadTexts: aclStatisticClearEntry.setDescription('entry for aclStatisticClearTable')
aclStatisticClearBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("port", 0), ("vlan", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclStatisticClearBindType.setStatus('current')
if mibBuilder.loadTexts: aclStatisticClearBindType.setDescription('point out the type of position of the bind-acl.')
aclStatisticClearDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("out", 0), ("in", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclStatisticClearDirection.setStatus('current')
if mibBuilder.loadTexts: aclStatisticClearDirection.setDescription('the direction of a binding acl.')
aclStatisticClearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclStatisticClearIndex.setStatus('current')
if mibBuilder.loadTexts: aclStatisticClearIndex.setDescription('The value of port id or vlan id   .')
aclStatisticClearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclStatisticClearStatus.setStatus('current')
if mibBuilder.loadTexts: aclStatisticClearStatus.setDescription("clear the bind-acl's traffic-statistic.")
sshMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2))
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setStatus('current')
if mibBuilder.loadTexts: sshServerStatus.setDescription('The status of Secure Shell Server, set this value\n                     to 1 to enable SSH server, set this value to 0 to \n                     disable the SSH server.')
sshServerVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerVersion.setStatus('current')
if mibBuilder.loadTexts: sshServerVersion.setDescription('The version of the SSH Server.')
sshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshTimeout.setStatus('current')
if mibBuilder.loadTexts: sshTimeout.setDescription('The time interval that the router waits for the SSH \n                     client to respond. The range is 10-600.')
sshAuthRetries = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthRetries.setStatus('current')
if mibBuilder.loadTexts: sshAuthRetries.setDescription('The number of attempts after which the interface is reset.\n                     The range is 1-10.')
sshUseTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5), )
if mibBuilder.loadTexts: sshUseTable.setStatus('current')
if mibBuilder.loadTexts: sshUseTable.setDescription('The table for Secure Shell Connection.')
sshUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1), ).setIndexNames((0, "NAG-MIB", "sshUserIndex"))
if mibBuilder.loadTexts: sshUseEntry.setStatus('current')
if mibBuilder.loadTexts: sshUseEntry.setDescription('The conceptual row for sshConnInfoTable.')
sshUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: sshUserIndex.setStatus('current')
if mibBuilder.loadTexts: sshUserIndex.setDescription('')
sshUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserName.setStatus('current')
if mibBuilder.loadTexts: sshUserName.setDescription('')
sshUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 7))).clone(namedValues=NamedValues(("noCryptograph", 0), ("cryptograph", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserType.setStatus('current')
if mibBuilder.loadTexts: sshUserType.setDescription('')
sshUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserPassword.setStatus('current')
if mibBuilder.loadTexts: sshUserPassword.setDescription('')
sshUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserStatus.setStatus('current')
if mibBuilder.loadTexts: sshUserStatus.setDescription('')
sshConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6), )
if mibBuilder.loadTexts: sshConnInfoTable.setStatus('current')
if mibBuilder.loadTexts: sshConnInfoTable.setDescription('The table for Secure Shell Connection.')
sshConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1), ).setIndexNames((0, "NAG-MIB", "sshConnID"))
if mibBuilder.loadTexts: sshConnInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sshConnInfoEntry.setDescription('The conceptual row for sshConnInfoTable.')
sshConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnID.setStatus('current')
if mibBuilder.loadTexts: sshConnID.setDescription('The connection ID of the Secure Shell Connection.')
sshConnVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnVersion.setStatus('current')
if mibBuilder.loadTexts: sshConnVersion.setDescription('The SSH version.')
sshConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("negotiationStart", 1), ("authenticationStart", 2), ("sessionStart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnStatus.setStatus('current')
if mibBuilder.loadTexts: sshConnStatus.setDescription('The SSH connection State. negotiationStart(1) mean the\n                     SSH is in its negotiation start state, authenticationStart(2)\n                     mean the SSH is in authentication start state, sessionStart(3)\n                     mean the SSH is in session start State.')
sshConnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnUserName.setStatus('current')
if mibBuilder.loadTexts: sshConnUserName.setDescription('User Name.')
tacacsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3))
tacacsServerHostTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1), )
if mibBuilder.loadTexts: tacacsServerHostTable.setStatus('current')
if mibBuilder.loadTexts: tacacsServerHostTable.setDescription('IP address of TACACS server.')
tacacsServerHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1), ).setIndexNames((0, "NAG-MIB", "tacacsServerHostIndex"))
if mibBuilder.loadTexts: tacacsServerHostEntry.setStatus('current')
if mibBuilder.loadTexts: tacacsServerHostEntry.setDescription('')
tacacsServerHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: tacacsServerHostIndex.setStatus('current')
if mibBuilder.loadTexts: tacacsServerHostIndex.setDescription('IP address of TACACS server.')
tacacsServerHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerHostIP.setStatus('current')
if mibBuilder.loadTexts: tacacsServerHostIP.setDescription('IP address of TACACS server.')
tacacsServerHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerHostPort.setStatus('current')
if mibBuilder.loadTexts: tacacsServerHostPort.setDescription('Port of TACACS server.')
tacacsServerHostPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noPrimary", 0), ("primary", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerHostPrimary.setStatus('current')
if mibBuilder.loadTexts: tacacsServerHostPrimary.setDescription('')
tacacsServerHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerHostStatus.setStatus('current')
if mibBuilder.loadTexts: tacacsServerHostStatus.setDescription('')
tacacsServerHostKey = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerHostKey.setStatus('current')
if mibBuilder.loadTexts: tacacsServerHostKey.setDescription("Key for TACACS. Input space(' ') to clear this key")
tacacsServerHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerHostTimeout.setStatus('current')
if mibBuilder.loadTexts: tacacsServerHostTimeout.setDescription('The time before retransmit of the TACACS server.')
tacacsServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerTimeout.setStatus('current')
if mibBuilder.loadTexts: tacacsServerTimeout.setDescription('The time before retransmit of the TACACS server.')
tacacsServerKey = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerKey.setStatus('current')
if mibBuilder.loadTexts: tacacsServerKey.setDescription("Key for TACACS. Input space(' ') to clear this key")
am = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4))
amGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: amGlobalEnable.setDescription(' Global Enable or disable the Access Management.')
amPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2), )
if mibBuilder.loadTexts: amPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: amPortInfoTable.setDescription('Access Management information list of port.')
amPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1), ).setIndexNames((0, "NAG-MIB", "amPortIndex"), (0, "NAG-MIB", "amPortIp"))
if mibBuilder.loadTexts: amPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: amPortInfoEntry.setDescription('')
amPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: amPortIndex.setStatus('current')
if mibBuilder.loadTexts: amPortIndex.setDescription('port index')
amPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amPortEnable.setStatus('current')
if mibBuilder.loadTexts: amPortEnable.setDescription('Enable or disable the Access Management on the port.')
amPortForwardingType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip-pool", 1), ("mac-ip-pool", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amPortForwardingType.setStatus('current')
if mibBuilder.loadTexts: amPortForwardingType.setDescription('Access Management forwarding type.')
amPortIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amPortIp.setStatus('current')
if mibBuilder.loadTexts: amPortIp.setDescription('IP address of Access Management.')
amPortMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 5), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amPortMac.setStatus('current')
if mibBuilder.loadTexts: amPortMac.setDescription('Mac address of Access Management.')
amPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amPortCount.setStatus('current')
if mibBuilder.loadTexts: amPortCount.setDescription('Seriate IP address number.')
amPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amPortStatus.setStatus('current')
if mibBuilder.loadTexts: amPortStatus.setDescription('')
radiusMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5))
aaaEnabled = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaEnabled.setStatus('current')
if mibBuilder.loadTexts: aaaEnabled.setDescription('Enable or disable Aaa function.')
aaaAccount = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAccount.setStatus('current')
if mibBuilder.loadTexts: aaaAccount.setDescription('Enable or disable Aaa Accounting function.')
aaaAccountUpdate = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAccountUpdate.setStatus('current')
if mibBuilder.loadTexts: aaaAccountUpdate.setDescription('Enable or disable Aaa Accounting update function.')
aaaAccountBindingDHCP = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAccountBindingDHCP.setStatus('current')
if mibBuilder.loadTexts: aaaAccountBindingDHCP.setDescription('Enable or disable Aaa Accounting DHCP-Binding function.')
radiusAuthenServerHostTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5), )
if mibBuilder.loadTexts: radiusAuthenServerHostTable.setStatus('current')
if mibBuilder.loadTexts: radiusAuthenServerHostTable.setDescription('Configuration items and information list of RADIUS authentication server host.')
radiusAuthenServerHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1), ).setIndexNames((0, "NAG-MIB", "radiusAuthenServerHostIndex"))
if mibBuilder.loadTexts: radiusAuthenServerHostEntry.setStatus('current')
if mibBuilder.loadTexts: radiusAuthenServerHostEntry.setDescription('')
radiusAuthenServerHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: radiusAuthenServerHostIndex.setStatus('current')
if mibBuilder.loadTexts: radiusAuthenServerHostIndex.setDescription('Index of RADIUS authentication server.')
radiusAuthenServerHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthenServerHostIP.setStatus('current')
if mibBuilder.loadTexts: radiusAuthenServerHostIP.setDescription('IP address of RADIUS authentication server.')
radiusAuthenServerHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthenServerHostPort.setStatus('current')
if mibBuilder.loadTexts: radiusAuthenServerHostPort.setDescription('Port of RADIUS authentication server.')
radiusAutServerHostKey = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAutServerHostKey.setStatus('current')
if mibBuilder.loadTexts: radiusAutServerHostKey.setDescription("Key for RADIUS authentication server. Input space(' ') to clear this key")
radiusAuthenServerHostPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noPrimary", 0), ("primary", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthenServerHostPrimary.setStatus('current')
if mibBuilder.loadTexts: radiusAuthenServerHostPrimary.setDescription('Configuration of primary or not primary ')
radiusAutServerHostAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("dot1x", 1), ("telnet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAutServerHostAccessMode.setStatus('current')
if mibBuilder.loadTexts: radiusAutServerHostAccessMode.setDescription('Configuration access mode of none, dot1x or telnet ')
radiusAuthenServerHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthenServerHostStatus.setStatus('current')
if mibBuilder.loadTexts: radiusAuthenServerHostStatus.setDescription('Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
radiusAcctServerHostTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6), )
if mibBuilder.loadTexts: radiusAcctServerHostTable.setStatus('current')
if mibBuilder.loadTexts: radiusAcctServerHostTable.setDescription('Configuration items and information list of RADIUS accounting server host.')
radiusAcctServerHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1), ).setIndexNames((0, "NAG-MIB", "radiusAcctServerHostIndex"))
if mibBuilder.loadTexts: radiusAcctServerHostEntry.setStatus('current')
if mibBuilder.loadTexts: radiusAcctServerHostEntry.setDescription('')
radiusAcctServerHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: radiusAcctServerHostIndex.setStatus('current')
if mibBuilder.loadTexts: radiusAcctServerHostIndex.setDescription('Index of RADIUS accounting server.')
radiusAcctServerHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctServerHostIP.setStatus('current')
if mibBuilder.loadTexts: radiusAcctServerHostIP.setDescription('IP address of RADIUS accounting server.')
radiusAcctServerHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctServerHostPort.setStatus('current')
if mibBuilder.loadTexts: radiusAcctServerHostPort.setDescription('Port of RADIUS accounting server.')
radiusAcctServerHostKey = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctServerHostKey.setStatus('current')
if mibBuilder.loadTexts: radiusAcctServerHostKey.setDescription("Key for RADIUS accounting server. Input space(' ') to clear this key")
radiusAcctServerHostPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noPrimary", 0), ("primary", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctServerHostPrimary.setStatus('current')
if mibBuilder.loadTexts: radiusAcctServerHostPrimary.setDescription('Configuration of primary or not primary ')
radiusAcctServerHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctServerHostStatus.setStatus('current')
if mibBuilder.loadTexts: radiusAcctServerHostStatus.setDescription('Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
radiusServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusServerTimeout.setDescription('The time before retransmit of the RADIUS server.')
radiusServerRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerRetransmit.setStatus('current')
if mibBuilder.loadTexts: radiusServerRetransmit.setDescription('Retransmit time before giving up the current RADIUS server.')
radiusServerDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerDeadTime.setStatus('current')
if mibBuilder.loadTexts: radiusServerDeadTime.setDescription('The time before retry of the down-server.')
radiusServerKey = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerKey.setStatus('current')
if mibBuilder.loadTexts: radiusServerKey.setDescription("Key for RADIUS. Input space(' ') to clear this key")
radiusServerAccountTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAccountTimeOut.setStatus('current')
if mibBuilder.loadTexts: radiusServerAccountTimeOut.setDescription('Accounting update interval.')
radiusServerNasIpv4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerNasIpv4.setStatus('current')
if mibBuilder.loadTexts: radiusServerNasIpv4.setDescription('Radius server nas IPv4. Input 0.0.0.0 to delete nas ipv4 address')
radiusServerNasIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerNasIpv6.setStatus('current')
if mibBuilder.loadTexts: radiusServerNasIpv6.setDescription('Radius server nas IPv6. Input 0 to delete nas IPv6 address')
qos = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1))
qosEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEnable.setStatus('current')
if mibBuilder.loadTexts: qosEnable.setDescription('qos golbal switch.disable express close,enable is open.')
qosPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2), )
if mibBuilder.loadTexts: qosPortTable.setStatus('current')
if mibBuilder.loadTexts: qosPortTable.setDescription('qos port configration.')
qosPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1), ).setIndexNames((0, "NAG-MIB", "qosPortIndex"))
if mibBuilder.loadTexts: qosPortEntry.setStatus('current')
if mibBuilder.loadTexts: qosPortEntry.setDescription(' qos port list of concrete definition.index is port index')
qosPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: qosPortIndex.setStatus('current')
if mibBuilder.loadTexts: qosPortIndex.setDescription('port Index')
qosPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2, 3))).clone(namedValues=NamedValues(("cos", 1), ("trust", 0), ("dscpMutation", 2), ("priorityQueueOut", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortType.setStatus('current')
if mibBuilder.loadTexts: qosPortType.setDescription('the relation between qosPortType and CLI:\n                1 mls qos cos {<default-cos> };     \n\t\t0 mls qos trust {cos [pass-through-cos] [pass-through-dscp]|dscp [pass-through-cos] [pass-through-dscp]| ip-precedence [pass-through-cos] [pass-through-dscp] |port priority <cos> [pass-through-cos] [pass-through-dscp]} ;\n\t\t2 mls qos dscp-mutation <dscp-mutation-name>;\n\t\t3 priority-queue out.\n\t\tAccording to the relation,when configurate qos with snmp,first set the qosPortType to the correct value to select CLI,\n\t\tthen set next CLI parameter.Fox example,set qos default cos is 5, first set qosPortType=1 ,then set qosPortCos to 5,\n\t\tfinally setting qosPortStatus to 1, trigger snmp-cache works.')
qosPortCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortCos.setStatus('current')
if mibBuilder.loadTexts: qosPortCos.setDescription('port default cos value')
qosPortTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("priority", 0), ("priAndPassThroughDscp", 1), ("priAndPassThroughCos", 2), ("priAndPassThroughCosAndPassThroughDscp", 3), ("cos", 4), ("cosAndPassThroughDscp", 5), ("cosAndPassThroughCos", 6), ("cosAndPassThroughCosAndPassThroughDscp", 7), ("dscp", 8), ("dscpAndPassThroughCos", 9), ("dscpAndPassThroughDscp", 10), ("dscpAndPassThroughDscpAndPassThroughCos", 11), ("ipPrecedence", 12), ("ipPreAndPassThroughCos", 13), ("ipPreAndPassThroughDSCP", 14), ("ipPreAndPassThroughDSCPAndPassThroughCos", 15), ("mplsEXP", 16)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortTrust.setStatus('current')
if mibBuilder.loadTexts: qosPortTrust.setDescription('Configure port trust.\n                  priority(0),mls qos trust port priority <cos>;\n                  priAndPassThroughDscp(1),opposite cli is mls qos trust port priority <cos> pass-through-dscp;\n                  priAndPassThroughCos(2),opposite cli is mls qos trust port priority <cos> pass-through-cos;\n                  priAndPassThroughCosAndPassThroughDscp(3),opposite cli is mls qos trust port priority <cos> pass-through-cos pass-through-dscp;\n            \t    cos(4),mls qos trust cos;\n               \t  cosAndPassThroughDscp(5),opposite cli is mls qos trust cos pass-through-dscp;\n               \t  cosAndPassThroughCos(6),opposite cli is mls qos trust cos pass-through-cos;\n               \t  cosAndPassThroughCosAndPassThroughDscp(7),opposite cli is mls qos trust cos pass-through-cos pass-through-dscp;\n               \t  dscp(8),mls qos trust dscp;\n               \t  dscpAndPassThroughCos(9),opposite cli is mls qos trust dscp pass-through-cos;\n               \t  dscpAndPassThroughDscp(10),opposite cli is mls qos trust dscp pass-through-dscp;\n               \t  dscpAndPassThroughDscpAndPassThroughCos(11),opposite cli is mls qos trust dscp pass-through-dscp pass-through-cos;\n               \t  ipPrecedence(12), mls qos trust ip-precedence;\n               \t  ipPreAndPassThroughCos(13),opposite cli is mls qos trust ip-precedence pass-through-cos;\n               \t  ipPreAndPassThroughDSCP(14),opposite cli is mls qos trust ip-precedence pass-through-dscp;\n               \t  ipPreAndPassThroughDSCPAndPassThroughCos(15),opposite cli is mls qos trust ip-precedence pass-through-dscp pass-through-cos;\n               \t  mplsEXP(16),mls qos mpls trust exp.')
qosPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortPriority.setStatus('current')
if mibBuilder.loadTexts: qosPortPriority.setDescription('The corresponding CLI:mls qos trust port priority <cos>.')
qosPortMutation = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortMutation.setStatus('current')
if mibBuilder.loadTexts: qosPortMutation.setDescription("configure port of dscp-mutation,opposite cli 'mls qos dscp-mutation <dscp-mutation-name>'")
qosPortQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("priorityQueue", 0), ("wrrQueue", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueue.setStatus('current')
if mibBuilder.loadTexts: qosPortQueue.setDescription('priorityQueue configure queue out method to strict priority-queue method;\n                 wrrQueue restores the default wrr queue out method.')
qosPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortStatus.setStatus('current')
if mibBuilder.loadTexts: qosPortStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qosClassMapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3), )
if mibBuilder.loadTexts: qosClassMapTable.setStatus('current')
if mibBuilder.loadTexts: qosClassMapTable.setDescription('classmap configure list')
qosclassmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1), ).setIndexNames((0, "NAG-MIB", "qosClassMapName"))
if mibBuilder.loadTexts: qosclassmapEntry.setStatus('current')
if mibBuilder.loadTexts: qosclassmapEntry.setDescription(' about classmap list of concrete definition,index is classmapname.')
qosClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: qosClassMapName.setStatus('current')
if mibBuilder.loadTexts: qosClassMapName.setDescription('classmap name')
qosClassMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 3, 8, 7, 4, 9, 10))).clone(namedValues=NamedValues(("configurClassMap", 0), ("accessGroup", 1), ("dscp", 2), ("v6dscp", 5), ("ippre", 3), ("v6AccessGroup", 8), ("v6Flow", 7), ("vlan", 4), ("cos", 9), ("exptopmost", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapType.setStatus('current')
if mibBuilder.loadTexts: qosClassMapType.setDescription('0 class-map <class-map-name>,index is classmapname;\n\t\t1 match access-group <acl-index-or-name>,need qosClassMapAccessGroup cooperation;\n\t\t2 match ip dscp <dscp-list>    qosClassMapDscp ;\n\t\t3 match ip precedence <ip-precedence-list>  qosClassMapIpPre;\n\t\t4 match vlan <vlan-list>     qosClassMapVlan;\n\t\t5 match ipv6 dscp <dscp-list>    qosClassMapV6Dscp;\n\t\t7 match ipv6 flowlabel      qosClassMapV6Flow;\n\t\t8 match ipv6 access-group     qosClassMapV6AccGroup\n\t\t9 match cos     qosClassCos\n\t  10 match mpls-experimental topmost    qosClassMapEXPtopmost')
qosClassMapAccessGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapAccessGroup.setStatus('current')
if mibBuilder.loadTexts: qosClassMapAccessGroup.setDescription('Match specify access-group (name or number). \n                This object be configured only if qosClassMapType  \n                in the same row is accessGroup(1).')
qosClassMapDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapDscp.setStatus('current')
if mibBuilder.loadTexts: qosClassMapDscp.setDescription('Match specify Dscp.\n                This object be configured only if qosClassMapType \n                in the same row is dscp(2).')
qosClassMapV6Dscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapV6Dscp.setStatus('current')
if mibBuilder.loadTexts: qosClassMapV6Dscp.setDescription('Match specify ipv6 Dscp.\n                This object be configured only if qosClassMapType \n                in the same row is v6dscp(5).')
qosClassMapIpPre = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapIpPre.setStatus('current')
if mibBuilder.loadTexts: qosClassMapIpPre.setDescription('Match specify Ip Precedence.\n                This object be configured only if qosClassMapType \n                in the same row is ippre(3).')
qosClassMapV6AccGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapV6AccGroup.setStatus('current')
if mibBuilder.loadTexts: qosClassMapV6AccGroup.setDescription('Match specify Ipv6 Access-Group.\n                This object be configured only if qosClassMapType  \n                in the same row is v6AccessGroup(8).')
qosClassMapV6Flow = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapV6Flow.setStatus('current')
if mibBuilder.loadTexts: qosClassMapV6Flow.setDescription('Match specify Ipv6 Flowlabel.\n                This object be configured only if qosClassMapType  \n                in the same row is v6Flow(6).')
qosClassMapVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapVlan.setStatus('current')
if mibBuilder.loadTexts: qosClassMapVlan.setDescription('Match specify Vlan list . At most 8 vlan id.\n                This object be configured only if qosClassMapType  \n                in the same row is vlan(4).')
qosClassCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassCos.setStatus('current')
if mibBuilder.loadTexts: qosClassCos.setDescription('Match specify Cos .\n                This object be configured only if qosClassMapType  \n                in the same row is cos(9).')
qosClassMapEXPtopmost = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapEXPtopmost.setStatus('current')
if mibBuilder.loadTexts: qosClassMapEXPtopmost.setDescription('Match specify MPLS EXP.\n\t                This object be configured only if qosClassMapType  \n\t                in the same row is EXPtopmost(10).')
qosClassMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapStatus.setStatus('current')
if mibBuilder.loadTexts: qosClassMapStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qosPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4), )
if mibBuilder.loadTexts: qosPolicyTable.setStatus('current')
if mibBuilder.loadTexts: qosPolicyTable.setDescription('qos policy list')
qosPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1), ).setIndexNames((0, "NAG-MIB", "qosPolicyName"))
if mibBuilder.loadTexts: qosPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: qosPolicyEntry.setDescription(' qos policy list of definition,index is qos policy and classmap of name')
qosPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: qosPolicyName.setStatus('current')
if mibBuilder.loadTexts: qosPolicyName.setDescription('QoS Policy name')
qosPolicyClassMap = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyClassMap.setStatus('current')
if mibBuilder.loadTexts: qosPolicyClassMap.setDescription('Specify the classmap name.After a policy map is created, it can be associated to a class.\n                So, if you want the class map to match the policy map,please setting the qosPolicyType to 1,and then\n                setting the qosPolicyStatus to 1 .')
qosPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("policymap", 0), ("matchclassmap", 1), ("sp", 2), ("aggregatePolicer", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyType.setStatus('current')
if mibBuilder.loadTexts: qosPolicyType.setDescription('the relation between qosPolicyType and CLI:\n\t\t0  policy-map <policy-map-name>;\n\t\t1  class <class-map-name>;\n\t\t2  police <rate-kbps> <burst-kbyte> [exceed-action {drop | policed-dscp-transmit}];\n\t\t3  police aggregate <aggregate-policer-name>; ')
qosPolicyRateKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyRateKbps.setStatus('current')
if mibBuilder.loadTexts: qosPolicyRateKbps.setDescription('Rate Bandwidth of one policymap.\n                This object be configured only if qosPolicyType \n                in the same row is sp(2). ')
qosPolicyNormalBurstKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyNormalBurstKbps.setStatus('current')
if mibBuilder.loadTexts: qosPolicyNormalBurstKbps.setDescription('Normal burst kbytes.')
qosPolicyMaximumBurstKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyMaximumBurstKbps.setStatus('current')
if mibBuilder.loadTexts: qosPolicyMaximumBurstKbps.setDescription('Maximum burst kbytes.')
qosPolicyPeakKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyPeakKbps.setStatus('current')
if mibBuilder.loadTexts: qosPolicyPeakKbps.setDescription('Peak information rate.')
qosPolicyConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyConformAction.setStatus('current')
if mibBuilder.loadTexts: qosPolicyConformAction.setDescription('conform-action transmit means send packets without any change when specified speed is not exceeded;\n                 conform-action drop means drop packets when specified speed is not exceeded;\n                 conform-action set-dscp-transmit specifies to mark down packet DSCP value \n                 according to policed-dscp mapping when specified speed is not exceeded;\n                 conform-action set-prec-transmit specifies to mark down packet TOS value \n                 according to policed-dscp mapping when specified speed is not exceeded.')
qosPolicyConformActionChangeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyConformActionChangeValue.setStatus('current')
if mibBuilder.loadTexts: qosPolicyConformActionChangeValue.setDescription('If conform-action is set-dscp-transmit(2),the value is between 0-63;\n                 else if conform-action is set-prec-transmit(2),the value is between 0-7.')
qosPolicyExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("policeDscpTransmit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyExceedAction.setStatus('current')
if mibBuilder.loadTexts: qosPolicyExceedAction.setDescription('exceed-action transmit means send packets without any change when specified speed is exceeded;\n                 exceed-action drop means drop packets when specified speed is exceeded;\n                 exceed-action policed-dscp-transmit specifies to mark down packet DSCP value \n                 according to policed-dscp mapping when specified speed is exceeded.')
qosPolicyViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("policeDscpTransmit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyViolateAction.setStatus('current')
if mibBuilder.loadTexts: qosPolicyViolateAction.setDescription('violate-action transmit means send packets without any change when specified speed is violate;\n                 violate-action drop means drop packets when specified speed is violate;\n                 violate-action policed-dscp-transmit specifies to mark down packet DSCP value \n                 according to policed-dscp mapping when specified speed is violate.')
qosPolicyAggregatePolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyAggregatePolicer.setStatus('current')
if mibBuilder.loadTexts: qosPolicyAggregatePolicer.setDescription('aggregate-policer-name.\n                This object be configured only if qosPolicyType \n                in the same row is aggregatePolicer(3).')
qosPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: qosPolicyStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qosAggPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5), )
if mibBuilder.loadTexts: qosAggPolicerTable.setStatus('current')
if mibBuilder.loadTexts: qosAggPolicerTable.setDescription('qos of AggPolicer list,use it can configure one item AggPolicer,Attention : the get/get next operation can only get snmp cache content,\n                please refer to qosshow node for the running configuraton')
qosAggPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1), ).setIndexNames((0, "NAG-MIB", "qosAggPolicerName"))
if mibBuilder.loadTexts: qosAggPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: qosAggPolicerEntry.setDescription(' index is AggPolicer name.')
qosAggPolicerName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: qosAggPolicerName.setStatus('current')
if mibBuilder.loadTexts: qosAggPolicerName.setDescription('QoS qosAggPolicer name')
qosAggPolicerRateKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerRateKbps.setStatus('current')
if mibBuilder.loadTexts: qosAggPolicerRateKbps.setDescription('Rate Bandwidth of After the classification.')
qosAggPolicerNormalBurstKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerNormalBurstKbps.setStatus('current')
if mibBuilder.loadTexts: qosAggPolicerNormalBurstKbps.setDescription('Normal burst kbytes.')
qosAggPolicerMaximumBurstKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerMaximumBurstKbps.setStatus('current')
if mibBuilder.loadTexts: qosAggPolicerMaximumBurstKbps.setDescription('Maximum burst kbytes.')
qosAggPolicerPeakKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerPeakKbps.setStatus('current')
if mibBuilder.loadTexts: qosAggPolicerPeakKbps.setDescription('Peak information rate.')
qosAggPolicerConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerConformAction.setStatus('current')
if mibBuilder.loadTexts: qosAggPolicerConformAction.setDescription('conform-action transmit means send packets without any change when specified speed is not exceeded;\n                 conform-action drop means drop packets when specified speed is not exceeded;\n                 conform-action set-dscp-transmit specifies to mark down packet DSCP value \n                 according to policed-dscp mapping when specified speed is not exceeded;\n                 conform-action set-prec-transmit specifies to mark down packet TOS value \n                 according to policed-dscp mapping when specified speed is not exceeded.')
qosAggPolicerConformActionChangeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerConformActionChangeValue.setStatus('current')
if mibBuilder.loadTexts: qosAggPolicerConformActionChangeValue.setDescription('If conform-action is set-dscp-transmit(2),the value is between 0-63;\n                 else if conform-action is set-prec-transmit(2),the value is between 0-7.')
qosAggPolicerExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("policeDscpTransmit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerExceedAction.setStatus('current')
if mibBuilder.loadTexts: qosAggPolicerExceedAction.setDescription('exceed-action transmit means send packets without any change when specified speed is exceeded;\n                 exceed-action drop means drop packets when specified speed is exceeded;\n                 exceed-action policed-dscp-transmit specifies to mark down packet DSCP value \n                 according to policed-dscp mapping when specified speed is exceeded.')
qosAggPolicerViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("policeDscpTransmit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerViolateAction.setStatus('current')
if mibBuilder.loadTexts: qosAggPolicerViolateAction.setDescription('violate-action transmit means send packets without any change when specified speed is violate;\n                 violate-action drop means drop packets when specified speed is violate;\n                 violate-action policed-dscp-transmit specifies to mark down packet DSCP value \n                 according to policed-dscp mapping when specified speed is violate.')
qosAggPolicerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerStatus.setStatus('current')
if mibBuilder.loadTexts: qosAggPolicerStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qosSetTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6), )
if mibBuilder.loadTexts: qosSetTable.setStatus('current')
if mibBuilder.loadTexts: qosSetTable.setDescription('remark new dscp or ip precedence for classified flow')
qosSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1), ).setIndexNames((0, "NAG-MIB", "qosSetPolicyMapName"))
if mibBuilder.loadTexts: qosSetEntry.setStatus('current')
if mibBuilder.loadTexts: qosSetEntry.setDescription(' qosSetTable list of acce index policyname and classmap name.')
qosSetPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: qosSetPolicyMapName.setStatus('current')
if mibBuilder.loadTexts: qosSetPolicyMapName.setDescription('QoS Policy name')
qosSetClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetClassMapName.setStatus('current')
if mibBuilder.loadTexts: qosSetClassMapName.setDescription('QoS class map name')
qosSetType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dscp", 1), ("precedence", 2), ("nextHop", 3), ("v6Dscp", 4), ("v6FlowLabel", 6), ("v6nextHop", 7), ("cos", 8), ("expimposition", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetType.setStatus('current')
if mibBuilder.loadTexts: qosSetType.setDescription('qosSetType range:1,2,3,4,5,6,7,8,9\n                1   dscp         Set IP DSCP (DiffServ CodePoints);\n                2   precedence   Set IP precedence;\n                3   nexthop      Set IP nexthop;\n                4   dscp         Set IPv6 DSCP (DiffServ CodePoints);\n                6   flowlabel    Set IPv6 flowlabel;\n\t\t            7   v6nextHop    Set IPv6 nexthop;\n                8   cos          Set CoS ;\n                9   expimposition Set mpls-experimental-imposition ')
qosSetdscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetdscp.setStatus('current')
if mibBuilder.loadTexts: qosSetdscp.setDescription('remark dscp for the classified flow')
qosSetprecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetprecedence.setStatus('current')
if mibBuilder.loadTexts: qosSetprecedence.setDescription('remark ip precedence for classified flow')
qosSetnextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetnextHop.setStatus('current')
if mibBuilder.loadTexts: qosSetnextHop.setDescription('set nexthop for classified flow')
qosSetv6Dscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetv6Dscp.setStatus('current')
if mibBuilder.loadTexts: qosSetv6Dscp.setDescription('remark ipv6 dscp for classified flow')
qosSetv6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetv6FlowLabel.setStatus('current')
if mibBuilder.loadTexts: qosSetv6FlowLabel.setDescription('remark ipv6 flow lable for classified flow')
qosSetv6nextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetv6nextHop.setStatus('current')
if mibBuilder.loadTexts: qosSetv6nextHop.setDescription('set IPv6 nexthop for classified flow')
qosSetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetCos.setStatus('current')
if mibBuilder.loadTexts: qosSetCos.setDescription('remark cos for classified flow')
qosSetEXPimposition = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetEXPimposition.setStatus('current')
if mibBuilder.loadTexts: qosSetEXPimposition.setDescription('remark MPLS EXP value for classified flow')
qosSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetStatus.setStatus('current')
if mibBuilder.loadTexts: qosSetStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qosPortBindTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7), )
if mibBuilder.loadTexts: qosPortBindTable.setStatus('current')
if mibBuilder.loadTexts: qosPortBindTable.setDescription('Apply a policy map to the specified port.')
qosPortBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7, 1), ).setIndexNames((0, "NAG-MIB", "qosPortBindIndex"), (0, "NAG-MIB", "qosPortBindPolicy"))
if mibBuilder.loadTexts: qosPortBindEntry.setStatus('current')
if mibBuilder.loadTexts: qosPortBindEntry.setDescription('the index of this  entry is port-index and policy-map')
qosPortBindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: qosPortBindIndex.setStatus('current')
if mibBuilder.loadTexts: qosPortBindIndex.setDescription('QoS Port Index')
qosPortBindPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: qosPortBindPolicy.setStatus('current')
if mibBuilder.loadTexts: qosPortBindPolicy.setDescription('QoS Policy name')
qosPortBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("input", 1), ("output", 2), ("noinput", 3), ("nooutput", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortBindType.setStatus('current')
if mibBuilder.loadTexts: qosPortBindType.setDescription(' input(1),bind the policy-map to ingress port;\n               \t\toutput(2),bind the policy-map to egress port;\n               \t\tnoinput(3),unbind the policy-map to ingress port;\n               \t\tnooutput(4), unbind the policy-map to egress port')
qosPortQueueTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8), )
if mibBuilder.loadTexts: qosPortQueueTable.setStatus('current')
if mibBuilder.loadTexts: qosPortQueueTable.setDescription('set golbal qos WRR weight')
qosPortQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1), ).setIndexNames((0, "NAG-MIB", "qosPortQueueIndex"))
if mibBuilder.loadTexts: qosPortQueueEntry.setStatus('current')
if mibBuilder.loadTexts: qosPortQueueEntry.setDescription(' set port qos WRR weight,index is port index.')
qosPortQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: qosPortQueueIndex.setStatus('current')
if mibBuilder.loadTexts: qosPortQueueIndex.setDescription('QoS Port Index')
qosPortQueueWeight1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight1.setStatus('current')
if mibBuilder.loadTexts: qosPortQueueWeight1.setDescription('WRR weight,range is 0~15.')
qosPortQueueWeight2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight2.setStatus('current')
if mibBuilder.loadTexts: qosPortQueueWeight2.setDescription('WRR weight,range is 0~15.')
qosPortQueueWeight3 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight3.setStatus('current')
if mibBuilder.loadTexts: qosPortQueueWeight3.setDescription('WRR weight,range is 0~15.')
qosPortQueueWeight4 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight4.setStatus('current')
if mibBuilder.loadTexts: qosPortQueueWeight4.setDescription('WRR weight,range is 0~15.')
qosPortQueueWeight5 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight5.setStatus('current')
if mibBuilder.loadTexts: qosPortQueueWeight5.setDescription('WRR weight,range is 0~15.')
qosPortQueueWeight6 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight6.setStatus('current')
if mibBuilder.loadTexts: qosPortQueueWeight6.setDescription('WRR weight,range is 0~15.')
qosPortQueueWeight7 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight7.setStatus('current')
if mibBuilder.loadTexts: qosPortQueueWeight7.setDescription('WRR weight,range is 0~15.')
qosPortQueueWeight8 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight8.setStatus('current')
if mibBuilder.loadTexts: qosPortQueueWeight8.setDescription('WRR weight,range is 0~15.')
qosPortQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueStatus.setStatus('current')
if mibBuilder.loadTexts: qosPortQueueStatus.setDescription('Setting it to active(1) creates an entry.Setting it to destroy(2) destroys an entry.')
qosMap = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10))
qosMapType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cosDscp", 1), ("dscpCos", 2), ("dscpMutation", 3), ("ipPrecDscp", 4), ("policedDscp", 5), ("expdscp", 6), ("dscpexp", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapType.setStatus('current')
if mibBuilder.loadTexts: qosMapType.setDescription('qosMapType range is 1~5.1 mls qos map cos-dscp <dscp1...dscp8>;\n                 2 mls qos map  dscp-cos <dscp-list> to <cos>;\n                 3 mls qos map  dscp-mutation <dscp-mutation-name> <in-dscp> to <out-dscp>;\n\t\t 4  mls qos map ip-prec-dscp <dscp1...dscp8>; \n\t\t 5  mls qos map policed-dscp <dscp-list> to <mark-down-dscp>;\n\t\t 6  mls qos map exp-dscp <dscp-value-list>;\n\t\t 7  mls qos map dscp-exp <dscp-value-list> to <exp>\n\t\t When you want to configure the Map of DSCP to COS,please configure the qosMapType==2 firstly,\n\t\t  input the dscp(1~8) optionally, then  configure the qosMapCos , valid/invalid the qosMapStatus finally.')
qosMapDscp1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp1.setStatus('current')
if mibBuilder.loadTexts: qosMapDscp1.setDescription('DSCP-CoS map,DSCP range is 0~63')
qosMapDscp2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp2.setStatus('current')
if mibBuilder.loadTexts: qosMapDscp2.setDescription('DSCP-CoS map,DSCP range is 0~63')
qosMapDscp3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp3.setStatus('current')
if mibBuilder.loadTexts: qosMapDscp3.setDescription('DSCP-CoS map,DSCP range is 0~63')
qosMapDscp4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp4.setStatus('current')
if mibBuilder.loadTexts: qosMapDscp4.setDescription('DSCP-CoS map,DSCP range is 0~63')
qosMapDscp5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp5.setStatus('current')
if mibBuilder.loadTexts: qosMapDscp5.setDescription('DSCP-CoS map,DSCP range is 0~63')
qosMapDscp6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp6.setStatus('current')
if mibBuilder.loadTexts: qosMapDscp6.setDescription('DSCP-CoS map,DSCP range is 0~63')
qosMapDscp7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp7.setStatus('current')
if mibBuilder.loadTexts: qosMapDscp7.setDescription('DSCP-CoS map,DSCP range is 0~63')
qosMapDscp8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp8.setStatus('current')
if mibBuilder.loadTexts: qosMapDscp8.setDescription('DSCP-CoS map,DSCP range is 0~63')
qosMapCos = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapCos.setStatus('current')
if mibBuilder.loadTexts: qosMapCos.setDescription('the cos which DSCP map to ')
qosMapEXP = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapEXP.setStatus('current')
if mibBuilder.loadTexts: qosMapEXP.setDescription('the EXP value which DSCP map to ')
qosMapMarkDownDscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapMarkDownDscp.setStatus('current')
if mibBuilder.loadTexts: qosMapMarkDownDscp.setDescription('the dscp after mark down')
qosMapMarkDownType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal-burst", 0), ("max-burst", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapMarkDownType.setStatus('current')
if mibBuilder.loadTexts: qosMapMarkDownType.setDescription('normal-burst:markdown map used by the exceed-action;max-burst:markdown map used by the violate-action.')
qosMapMutationName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapMutationName.setStatus('current')
if mibBuilder.loadTexts: qosMapMutationName.setDescription('map name')
qosMapMutationOut = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapMutationOut.setStatus('current')
if mibBuilder.loadTexts: qosMapMutationOut.setDescription('egress DSCP,only one,eight ingress DSCP value map to one egress value')
qosMapStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapStatus.setStatus('current')
if mibBuilder.loadTexts: qosMapStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
showqos = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11))
showclassmapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 1), )
if mibBuilder.loadTexts: showclassmapTable.setStatus('current')
if mibBuilder.loadTexts: showclassmapTable.setDescription(' show class map table')
showclassmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 1, 1), ).setIndexNames((0, "NAG-MIB", "showclassmapname"))
if mibBuilder.loadTexts: showclassmapEntry.setStatus('current')
if mibBuilder.loadTexts: showclassmapEntry.setDescription(' show class map entry')
showclassmapname = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: showclassmapname.setStatus('current')
if mibBuilder.loadTexts: showclassmapname.setDescription(' classmap name')
showclassmapmatch = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showclassmapmatch.setStatus('current')
if mibBuilder.loadTexts: showclassmapmatch.setDescription('one item classmap match rule')
showpolicymapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 2), )
if mibBuilder.loadTexts: showpolicymapTable.setStatus('current')
if mibBuilder.loadTexts: showpolicymapTable.setDescription(' show policy list')
showpolicymapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 2, 1), ).setIndexNames((0, "NAG-MIB", "showpolicymapname"))
if mibBuilder.loadTexts: showpolicymapEntry.setStatus('current')
if mibBuilder.loadTexts: showpolicymapEntry.setDescription(' policy map entry')
showpolicymapname = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: showpolicymapname.setStatus('current')
if mibBuilder.loadTexts: showpolicymapname.setDescription(' policy name')
showpolicymapcontent = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showpolicymapcontent.setStatus('current')
if mibBuilder.loadTexts: showpolicymapcontent.setDescription('the match classmap and all defined other rules')
showqosaggregatepolicerTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 3), )
if mibBuilder.loadTexts: showqosaggregatepolicerTable.setStatus('current')
if mibBuilder.loadTexts: showqosaggregatepolicerTable.setDescription(' display aggregatepolicer list')
showqosaggregatepolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 3, 1), ).setIndexNames((0, "NAG-MIB", "showqosaggregatepolicername"))
if mibBuilder.loadTexts: showqosaggregatepolicerEntry.setStatus('current')
if mibBuilder.loadTexts: showqosaggregatepolicerEntry.setDescription(' aggregatepolicer entry,index is showqosaggregatepolicername')
showqosaggregatepolicername = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: showqosaggregatepolicername.setStatus('current')
if mibBuilder.loadTexts: showqosaggregatepolicername.setDescription(' aggregatepolicer name')
showqosaggregatepolicercontent = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showqosaggregatepolicercontent.setStatus('current')
if mibBuilder.loadTexts: showqosaggregatepolicercontent.setDescription('aggregatepolicer parameter')
showmlsqosinterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 4), )
if mibBuilder.loadTexts: showmlsqosinterfaceTable.setStatus('current')
if mibBuilder.loadTexts: showmlsqosinterfaceTable.setDescription(' show port qos configuration')
showmlsqosinterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 4, 1), ).setIndexNames((0, "NAG-MIB", "showmlsqosinterfaceIndex"))
if mibBuilder.loadTexts: showmlsqosinterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: showmlsqosinterfaceEntry.setDescription(' showmlsqosinterfaceTable,index is port-index')
showmlsqosinterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: showmlsqosinterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: showmlsqosinterfaceIndex.setDescription(' port index')
showmlsqosinterfaceqoscontent = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosinterfaceqoscontent.setStatus('current')
if mibBuilder.loadTexts: showmlsqosinterfaceqoscontent.setDescription('qos port configuration')
showmlsqosmaps = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5))
showmlsqosmapscosdscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapscosdscp.setStatus('current')
if mibBuilder.loadTexts: showmlsqosmapscosdscp.setDescription('cos-dscp map ')
showmlsqosmapscosqueue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapscosqueue.setStatus('current')
if mibBuilder.loadTexts: showmlsqosmapscosqueue.setDescription('COS-wrr-queue map')
showmlsqosmapsdscpcos = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapsdscpcos.setStatus('current')
if mibBuilder.loadTexts: showmlsqosmapsdscpcos.setDescription('DSCP-COS map')
showmlsqosmapsipprecdscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapsipprecdscp.setStatus('current')
if mibBuilder.loadTexts: showmlsqosmapsipprecdscp.setDescription('IP precedence to DSCP map')
showmlsqosmapspoliceddscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapspoliceddscp.setStatus('current')
if mibBuilder.loadTexts: showmlsqosmapspoliceddscp.setDescription(' DSCP mark down map')
showmlsqosmapspoliceddscpnormalburst = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapspoliceddscpnormalburst.setStatus('current')
if mibBuilder.loadTexts: showmlsqosmapspoliceddscpnormalburst.setDescription(' Normal Burst Policed-dscp map')
showmlsqosmapsexpdscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapsexpdscp.setStatus('current')
if mibBuilder.loadTexts: showmlsqosmapsexpdscp.setDescription(' EXP to DSCP map')
showmlsqosmapsdscpexp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapsdscpexp.setStatus('current')
if mibBuilder.loadTexts: showmlsqosmapsdscpexp.setDescription(' DSCP to EXP map')
showmlsqosmapsdscpmutationTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 6), )
if mibBuilder.loadTexts: showmlsqosmapsdscpmutationTable.setStatus('current')
if mibBuilder.loadTexts: showmlsqosmapsdscpmutationTable.setDescription(' ingress DSCP to egress DSCP map')
showmlsqosmapsdscpmutationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 6, 1), ).setIndexNames((0, "NAG-MIB", "showmlsqosmapsdscpmutationname"))
if mibBuilder.loadTexts: showmlsqosmapsdscpmutationEntry.setStatus('current')
if mibBuilder.loadTexts: showmlsqosmapsdscpmutationEntry.setDescription('index is dscpmutationname')
showmlsqosmapsdscpmutationname = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: showmlsqosmapsdscpmutationname.setStatus('current')
if mibBuilder.loadTexts: showmlsqosmapsdscpmutationname.setDescription(' dscpmutationname.')
showmlsqosmapsdscpmutationcontent = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapsdscpmutationcontent.setStatus('current')
if mibBuilder.loadTexts: showmlsqosmapsdscpmutationcontent.setDescription('DSCP-DSCP map')
mirrorDestTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1), )
if mibBuilder.loadTexts: mirrorDestTable.setStatus('current')
if mibBuilder.loadTexts: mirrorDestTable.setDescription('Destination port for mirrored packets.')
mirrorDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1, 1), ).setIndexNames((0, "NAG-MIB", "mirrorDestSession"))
if mibBuilder.loadTexts: mirrorDestEntry.setStatus('current')
if mibBuilder.loadTexts: mirrorDestEntry.setDescription('Destination port for mirrored packets.')
mirrorDestSession = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorDestSession.setStatus('current')
if mibBuilder.loadTexts: mirrorDestSession.setDescription('Session ID.')
mirrorDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorDestPort.setStatus('current')
if mibBuilder.loadTexts: mirrorDestPort.setDescription('mirror destination port  eg:Ethernet1/1.')
mirrorDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorDestStatus.setStatus('current')
if mibBuilder.loadTexts: mirrorDestStatus.setDescription('Status.')
mirrorSrcPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2), )
if mibBuilder.loadTexts: mirrorSrcPortTable.setStatus('current')
if mibBuilder.loadTexts: mirrorSrcPortTable.setDescription('Src port for mirrored packets.')
mirrorSrcPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1), ).setIndexNames((0, "NAG-MIB", "mirrorSrcPortSession"), (0, "NAG-MIB", "mirrorSrcPortDirect"))
if mibBuilder.loadTexts: mirrorSrcPortEntry.setStatus('current')
if mibBuilder.loadTexts: mirrorSrcPortEntry.setDescription('Src port for mirrored packets.')
mirrorSrcPortSession = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorSrcPortSession.setStatus('current')
if mibBuilder.loadTexts: mirrorSrcPortSession.setDescription('Session ID.')
mirrorSrcPortDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorSrcPortDirect.setStatus('current')
if mibBuilder.loadTexts: mirrorSrcPortDirect.setDescription('Direction of  mirror.')
mirrorSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorSrcPort.setStatus('current')
if mibBuilder.loadTexts: mirrorSrcPort.setDescription('mirror source port. eg:Ethernet1/1.')
mirrorSrcPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorSrcPortStatus.setStatus('current')
if mibBuilder.loadTexts: mirrorSrcPortStatus.setDescription('Status.')
qos3 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2))
qos3PolicyMapGroupTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1), )
if mibBuilder.loadTexts: qos3PolicyMapGroupTable.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyMapGroupTable.setDescription('this table is used for building a policy and mapping the named policy to number,\n             if you want to configure a policy,you must map at here.')
qos3PolicyMapGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1), ).setIndexNames((0, "NAG-MIB", "qos3PolicyMapGroupIndex"))
if mibBuilder.loadTexts: qos3PolicyMapGroupEntry.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyMapGroupEntry.setDescription('entry for policy map group.')
qos3PolicyMapGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3PolicyMapGroupIndex.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyMapGroupIndex.setDescription('the range is 0-(2^64 - 1).')
qos3PolicyMapGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyMapGroupName.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyMapGroupName.setDescription('the policy name')
qos3PolicyMapGroupIsExt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyMapGroupIsExt.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyMapGroupIsExt.setDescription('indicate that whether the policy used on extand field processor.')
qos3PolicyMapGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyMapGroupStatus.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyMapGroupStatus.setDescription('the status of qos3PolicyMapGroupTable')
qos3ClassMapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2), )
if mibBuilder.loadTexts: qos3ClassMapTable.setStatus('current')
if mibBuilder.loadTexts: qos3ClassMapTable.setDescription('this table is used for configuring the filter rule of qos')
qos3ClassMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1), ).setIndexNames((0, "NAG-MIB", "qos3ClassMapName"))
if mibBuilder.loadTexts: qos3ClassMapEntry.setStatus('current')
if mibBuilder.loadTexts: qos3ClassMapEntry.setDescription('entry for class map.')
qos3ClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ClassMapName.setStatus('current')
if mibBuilder.loadTexts: qos3ClassMapName.setDescription('the name of class')
qos3ClassMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cos", 0), ("dscp", 1), ("ipPrecedence", 2), ("ipv6Dscp", 3), ("ipv6Flowlabel", 4), ("exp", 5), ("vlan", 6), ("aclIndex", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ClassMapType.setStatus('current')
if mibBuilder.loadTexts: qos3ClassMapType.setDescription('the clss type that you want to matching.')
qos3ClassMapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ClassMapValue.setStatus('current')
if mibBuilder.loadTexts: qos3ClassMapValue.setDescription('the value of you choosed type at last node,the limits: cos <0-7> dscp <0-63> ipPrecedence<0-7> ipv6Dscp<0-63> vlan <1-4094> ipv6Flowlabel<0-1048575>\n                  exp is not support now.except aclindex,you can  config 8 parameters at most,for example,if you choose the\n                  type of cos,you can config 0,1,2,3,4,5,6,7 or 0,1 at here.')
qos3ClassMapUsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ClassMapUsedTime.setStatus('current')
if mibBuilder.loadTexts: qos3ClassMapUsedTime.setDescription('display how many times the class used.')
qos3ClassMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ClassMapStatus.setStatus('current')
if mibBuilder.loadTexts: qos3ClassMapStatus.setDescription('the status of qos3ClassMapTable,destroy(2) will destroy the whole class-map,remove(3) just clear the value of qos3ClassMapValue.')
qos3AggregatePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3), )
if mibBuilder.loadTexts: qos3AggregatePolicyTable.setStatus('current')
if mibBuilder.loadTexts: qos3AggregatePolicyTable.setDescription('this table is used for configuring aggregate policy.')
qos3AggregatePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1), ).setIndexNames((0, "NAG-MIB", "qos3AggPolicyMapName"))
if mibBuilder.loadTexts: qos3AggregatePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: qos3AggregatePolicyEntry.setDescription('entry for aggregate policy.')
qos3AggPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3AggPolicyMapName.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyMapName.setDescription('the name of aggregate policy.')
qos3AggPolicyCIRKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyCIRKbps.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyCIRKbps.setDescription('CIR(Committed Information Rate) Kbits per second <1-10000000>')
qos3AggPolicyCBSKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyCBSKbps.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyCBSKbps.setDescription('CBS(Committed Burst Size) Kbytes  <1-1000000>')
qos3AggPolicyPBSKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyPBSKbps.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyPBSKbps.setDescription('PBS(Peak Burst Size) Kbytes <1-1000000>')
qos3AggPolicyPIRKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyPIRKbps.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyPIRKbps.setDescription('PIR(Peak Information Rate) Kbits per second <1-10000000>')
qos3AggPolicyConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 6), Bits().clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("cos", 2), ("dscp", 3), ("ipPrecedence", 4), ("intp", 5), ("dp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyConformAction.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyConformAction.setDescription('Action when rate is not exceeded,for example: if you want to config cos(2) and intp(5),you must set 24 (0010 0100).')
qos3AggPolicyconformSetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyconformSetCos.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyconformSetCos.setDescription('Set COS')
qos3AggPolicyconformSetDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyconformSetDscp.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyconformSetDscp.setDescription('Change dscp')
qos3AggPolicyconformSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyconformSetPrec.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyconformSetPrec.setDescription('Change precedence')
qos3AggPolicyconformSetIntp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyconformSetIntp.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyconformSetIntp.setDescription('Set Internal priority')
qos3AggPolicyconformSetDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyconformSetDp.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyconformSetDp.setDescription('Set Drop priority')
qos3AggPolicyExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 12), Bits().clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("cos", 2), ("dscp", 3), ("ipPrecedence", 4), ("intp", 5), ("dp", 6), ("policiedIntpTransmit", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyExceedAction.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyExceedAction.setDescription('Action when rate is exceeded,for example: if you want to config cos(2) and intp(5),you must set 24 (0010 0100).')
qos3AggPolicyExceedSetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyExceedSetCos.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyExceedSetCos.setDescription('Set COS')
qos3AggPolicyExceedSetDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyExceedSetDscp.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyExceedSetDscp.setDescription(' Change dscp')
qos3AggPolicyExceedSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyExceedSetPrec.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyExceedSetPrec.setDescription('Change precedence')
qos3AggPolicyExceedSetIntp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyExceedSetIntp.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyExceedSetIntp.setDescription('Set Internal priority')
qos3AggPolicyExceedSetDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyExceedSetDp.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyExceedSetDp.setDescription('Set Drop priority')
qos3AggPolicyViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 18), Bits().clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("cos", 2), ("dscp", 3), ("ipPrecedence", 4), ("intp", 5), ("dp", 6), ("policiedIntpTransmit", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyViolateAction.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyViolateAction.setDescription('Action when rate is violated,for example: if you want to config cos(2) and intp(5),you must set 24 (0010 0100).')
qos3AggPolicyViolateSetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyViolateSetCos.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyViolateSetCos.setDescription('Set COS')
qos3AggPolicyViolateSetDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyViolateSetDscp.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyViolateSetDscp.setDescription('Change dscp')
qos3AggPolicyViolateSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyViolateSetPrec.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyViolateSetPrec.setDescription('Change precedence')
qos3AggPolicyViolateSetIntp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyViolateSetIntp.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyViolateSetIntp.setDescription('Set Internal priority')
qos3AggPolicyViolateSetDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyViolateSetDp.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyViolateSetDp.setDescription('Set Drop priority')
qos3AggPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: qos3AggPolicyStatus.setDescription('the status of qos3AggregatePolicyTable')
qos3PolicyTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4), )
if mibBuilder.loadTexts: qos3PolicyTable.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyTable.setDescription('this table is used for configuring policy')
qos3PolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1), ).setIndexNames((0, "NAG-MIB", "qos3PolicyMapIndex"), (0, "NAG-MIB", "qos3PolicyClassMapName"))
if mibBuilder.loadTexts: qos3PolicyEntry.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyEntry.setDescription('entry for policy.')
qos3PolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3PolicyMapIndex.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyMapIndex.setDescription('the index of policy that you configured at qos3PolicyMapGroupTable')
qos3PolicyClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3PolicyClassMapName.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyClassMapName.setDescription('Specify the classmap name.After a policy map is created, it can be associated to a class')
qos3PolicyInsertClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyInsertClassMapName.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyInsertClassMapName.setDescription('Specify the position of classmap name')
qos3PolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 4), Bits().clone(namedValues=NamedValues(("pidAction", 0), ("colorAction", 1), ("aggregateAction", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyType.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyType.setDescription('pidAction means simple policy.colorAction and aggregateAction is Mutually exclusive,for example,if you \n                want the pidAction and colorAction become effective,you must set the value c0.')
qos3PolicyCIRKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyCIRKbps.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyCIRKbps.setDescription('CIR(Committed Information Rate) Kbits per second <1-10000000>')
qos3PolicyCBSKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyCBSKbps.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyCBSKbps.setDescription(' CBS(Committed Burst Size) Kbytes  <1-1000000>')
qos3PolicyPBSKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyPBSKbps.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyPBSKbps.setDescription(' PBS(Peak Burst Size) Kbytes <1-1000000>')
qos3PolicyPIRKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyPIRKbps.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyPIRKbps.setDescription('PIR(Peak Information Rate) Kbits per second <1-10000000>')
qos3PolicyConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 9), Bits().clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("cos", 2), ("dscp", 3), ("ipPrecedence", 4), ("intp", 5), ("dp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyConformAction.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyConformAction.setDescription('Action when rate is not exceeded,for example: if you want to config cos(2) and intp(5),you must set 24 (0010 0100).')
qos3PolicyconformSetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyconformSetCos.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyconformSetCos.setDescription('Set COS')
qos3PolicyconformSetDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyconformSetDscp.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyconformSetDscp.setDescription('Change dscp')
qos3PolicyconformSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyconformSetPrec.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyconformSetPrec.setDescription('Change precedence')
qos3PolicyconformSetIntp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyconformSetIntp.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyconformSetIntp.setDescription('Set Internal priority')
qos3PolicyconformSetDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyconformSetDp.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyconformSetDp.setDescription('Set Drop priority')
qos3PolicyExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 15), Bits().clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("cos", 2), ("dscp", 3), ("ipPrecedence", 4), ("intp", 5), ("dp", 6), ("policiedIntpTransmit", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyExceedAction.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyExceedAction.setDescription('Action when rate is exceeded,for example: if you want to config cos(2) and intp(5),you must set 24 (0010 0100).')
qos3PolicyExceedSetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyExceedSetCos.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyExceedSetCos.setDescription('Set COS')
qos3PolicyExceedSetDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyExceedSetDscp.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyExceedSetDscp.setDescription('Change dscp')
qos3PolicyExceedSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyExceedSetPrec.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyExceedSetPrec.setDescription('Change precedence')
qos3PolicyExceedSetIntp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyExceedSetIntp.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyExceedSetIntp.setDescription('Set Internal priority')
qos3PolicyExceedSetDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyExceedSetDp.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyExceedSetDp.setDescription('Set Drop priority')
qos3PolicyViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 21), Bits().clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("cos", 2), ("dscp", 3), ("ipPrecedence", 4), ("intp", 5), ("dp", 6), ("policiedIntpTransmit", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyViolateAction.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyViolateAction.setDescription('Action when rate is violated,for example: if you want to config cos(2) and intp(5),you must set 24 (0010 0100).')
qos3PolicyViolateSetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyViolateSetCos.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyViolateSetCos.setDescription(' Set COS')
qos3PolicyViolateSetDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyViolateSetDscp.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyViolateSetDscp.setDescription('Change dscp')
qos3PolicyViolateSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyViolateSetPrec.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyViolateSetPrec.setDescription('Change precedence')
qos3PolicyViolateSetIntp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyViolateSetIntp.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyViolateSetIntp.setDescription('Set Internal priority')
qos3PolicyViolateSetDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyViolateSetDp.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyViolateSetDp.setDescription('Set Drop priority')
qos3PolicyAggregatePolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyAggregatePolicer.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyAggregatePolicer.setDescription('the name of aggregate policy')
qos3PolicyAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyAccounting.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyAccounting.setDescription('enable the Counter statistics or not.')
qos3PolicyPidAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 29), Bits().clone(namedValues=NamedValues(("cos", 0), ("dscp", 1), ("ipPrecedence", 2), ("ipNextHop", 3), ("exp", 4), ("ipv6NextHop", 5), ("intp", 6), ("dp", 7), ("setCvid", 8), ("setSvid", 9), ("setSTpid", 10), ("addSvid", 11), ("delCvid", 12), ("setTunnelId", 13), ("transmit", 14), ("drop", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyPidAction.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyPidAction.setDescription('simple policy action,for example: if you want to config cos(0) and setSTpid(10),you must set 8020 (1000 0000 0010 0000).\n                some network Management Software offer selections that is not correct,in RFC3417,When encoding an object whose syntax is \n                described using the BITS construct, the value is encoded as an OCTET STRING, in which all the named bits in (the definition of) the bitstring,\n\t\t\t\t\t\t\t\tcommencing with the first bit and proceeding to the last bit,are placed in bits 8 (high order bit) to 1 (low order bit) of\n\t\t\t\t\t\t\t\tthe first octet, followed by bits 8 to 1 of each subsequent octet in turn, followed by as many bits as are needed of the\n\t\t\t\t\t\t\t\tfinal subsequent octet, commencing with bit 8. Remaining bits,if any, of the final octet are set to zero on generation and\n\t\t\t\t\t\t\t\tignored on receipt.')
qos3SetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetCos.setStatus('current')
if mibBuilder.loadTexts: qos3SetCos.setDescription('set cos')
qos3SetIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpDscp.setStatus('current')
if mibBuilder.loadTexts: qos3SetIpDscp.setDescription('change dscp')
qos3SetIpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpPrec.setStatus('current')
if mibBuilder.loadTexts: qos3SetIpPrec.setDescription('change precedence')
qos3SetIntp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIntp.setStatus('current')
if mibBuilder.loadTexts: qos3SetIntp.setDescription(' Set Internal priority')
qos3SetDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetDp.setStatus('current')
if mibBuilder.loadTexts: qos3SetDp.setDescription('Set Drop priority')
qos3SetCVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetCVid.setStatus('current')
if mibBuilder.loadTexts: qos3SetCVid.setDescription('set  vlan id of inner VLAN tag.')
qos3SetSVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetSVid.setStatus('current')
if mibBuilder.loadTexts: qos3SetSVid.setDescription('set vlan id of outer VLAN tag.')
qos3SetSTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("value0x8100", 1), ("value0x88a8", 2), ("value0x9100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetSTpid.setStatus('current')
if mibBuilder.loadTexts: qos3SetSTpid.setDescription('Set S-tpid')
qos3AddSVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AddSVid.setStatus('current')
if mibBuilder.loadTexts: qos3AddSVid.setDescription('add vlan id of outer VLAN tag')
qos3DelCVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3DelCVid.setStatus('current')
if mibBuilder.loadTexts: qos3DelCVid.setDescription('delete vlan id of inner VLAN tag.')
qos3SetTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetTunnelId.setStatus('current')
if mibBuilder.loadTexts: qos3SetTunnelId.setDescription('')
qos3SetIpDefaultPBR = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpDefaultPBR.setStatus('current')
if mibBuilder.loadTexts: qos3SetIpDefaultPBR.setDescription('whether add Default routing of ip type.')
qos3SetIpVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 252))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpVrf.setStatus('current')
if mibBuilder.loadTexts: qos3SetIpVrf.setDescription('set the vrf of ip type')
qos3SetIpNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 43), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpNextHop.setStatus('current')
if mibBuilder.loadTexts: qos3SetIpNextHop.setDescription('set Nexthop IP address.')
qos3SetExp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetExp.setStatus('current')
if mibBuilder.loadTexts: qos3SetExp.setDescription('set exp.')
qos3SetIpv6DefaultPBR = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpv6DefaultPBR.setStatus('current')
if mibBuilder.loadTexts: qos3SetIpv6DefaultPBR.setDescription('whether add Default routing of ipv6 type ')
qos3SetIpv6Vrf = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 252))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpv6Vrf.setStatus('current')
if mibBuilder.loadTexts: qos3SetIpv6Vrf.setDescription('set the vrf of ipv6 type.')
qos3SetIpv6NextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpv6NextHop.setStatus('current')
if mibBuilder.loadTexts: qos3SetIpv6NextHop.setDescription('set Nexthop IPv6 address')
qos3PolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2), ("removeColorAct", 3), ("removeAggregateAct", 4), ("removePidAct", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyStatus.setStatus('current')
if mibBuilder.loadTexts: qos3PolicyStatus.setDescription('the status of qos3PolicyTable. destroy(2) will put off the class-map,removeColorAct(3) will clear the color-act,\n                 removeAggregateAct(4) will clear the aggregate-act,removePidAct(5) will clear the value while you set int pidAction.')
qos3PortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5), )
if mibBuilder.loadTexts: qos3PortTable.setStatus('current')
if mibBuilder.loadTexts: qos3PortTable.setDescription('qos port configration.')
qos3PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1), ).setIndexNames((0, "NAG-MIB", "qos3PortIndex"))
if mibBuilder.loadTexts: qos3PortEntry.setStatus('current')
if mibBuilder.loadTexts: qos3PortEntry.setDescription('entry for port configuration of qos about trust,cos value,queue drop-algorithm and queue algorithm.')
qos3PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3PortIndex.setStatus('current')
if mibBuilder.loadTexts: qos3PortIndex.setDescription('port index.')
qos3PortCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PortCos.setStatus('current')
if mibBuilder.loadTexts: qos3PortCos.setDescription('set default cos of the port.')
qos3PortTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 3), Bits().clone(namedValues=NamedValues(("cosEnable", 0), ("dscpEnable", 1), ("expEnable", 2), ("cosDisable", 3), ("dscpDisable", 4), ("expDisbable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PortTrust.setStatus('current')
if mibBuilder.loadTexts: qos3PortTrust.setDescription('set port trust. cosEnable,dscpEnable and expEnable can be set at the same time;cosDisable,dscpDisable and expDisbable can be set at the same time;\n          cosEnable,dscpEnable and expEnable can not be set at the same time with dscpDisable,cosDisable and expDisbable.')
qos3PortWredEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tail", 0), ("wred", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PortWredEnable.setStatus('current')
if mibBuilder.loadTexts: qos3PortWredEnable.setDescription("set the drop Algorithm of port's queue.")
qos3PortQueueAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("sp", 0), ("wrr", 1), ("wdrr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PortQueueAlgorithm.setStatus('current')
if mibBuilder.loadTexts: qos3PortQueueAlgorithm.setDescription(" effected the weight Algorithm of port's queue.")
qos3PortPassThroughCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PortPassThroughCos.setStatus('current')
if mibBuilder.loadTexts: qos3PortPassThroughCos.setDescription(' forbid changing the value of cos.')
qos3PortPassThroughDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PortPassThroughDscp.setStatus('current')
if mibBuilder.loadTexts: qos3PortPassThroughDscp.setDescription(' forbid changing the value of dscp.')
qos3QueueWeightTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6), )
if mibBuilder.loadTexts: qos3QueueWeightTable.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWeightTable.setDescription("this table is used for configuring port's weight")
qos3QueueWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1), ).setIndexNames((0, "NAG-MIB", "qos3QueueWeightPortIndex"), (0, "NAG-MIB", "qos3QueueWeightType"))
if mibBuilder.loadTexts: qos3QueueWeightEntry.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWeightEntry.setDescription('entry for queue weight configuration.')
qos3QueueWeightPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3QueueWeightPortIndex.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWeightPortIndex.setDescription('port index.')
qos3QueueWeightType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wrr", 0), ("wdrr", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3QueueWeightType.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWeightType.setDescription('choose the algorithm weight that you want to set.')
qos3QueueWeight0 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight0.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWeight0.setDescription('wrr default value is 1,wdrr default value is 10.')
qos3QueueWeight1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight1.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWeight1.setDescription('wrr default value is 2,wdrr default value is 20')
qos3QueueWeight2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight2.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWeight2.setDescription('wrr default value is 3,wdrr default value is 40')
qos3QueueWeight3 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight3.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWeight3.setDescription('wrr default value is 4,wdrr default value is 80')
qos3QueueWeight4 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight4.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWeight4.setDescription('wrr default value is 5,wdrr default value is 160')
qos3QueueWeight5 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight5.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWeight5.setDescription('wrr default value is 6,wdrr default value is 320')
qos3QueueWeight6 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight6.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWeight6.setDescription('wrr default value is 7,wdrr default value is 640')
qos3QueueWeight7 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight7.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWeight7.setDescription('wrr default value is 8,wdrr default value is 1280')
qos3QueueWeightStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeightStatus.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWeightStatus.setDescription('the status of qos3QueueWeightTable.')
qos3QueueBindWidthTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7), )
if mibBuilder.loadTexts: qos3QueueBindWidthTable.setStatus('current')
if mibBuilder.loadTexts: qos3QueueBindWidthTable.setDescription('this table is used for setting bindwidth of port.')
qos3QueueBindWidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1), ).setIndexNames((0, "NAG-MIB", "qos3QueueBindWidthPortIndex"), (0, "NAG-MIB", "qos3QueueBindWidthQueueId"))
if mibBuilder.loadTexts: qos3QueueBindWidthEntry.setStatus('current')
if mibBuilder.loadTexts: qos3QueueBindWidthEntry.setDescription('entry for Queue BindWidth configuration.')
qos3QueueBindWidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3QueueBindWidthPortIndex.setStatus('current')
if mibBuilder.loadTexts: qos3QueueBindWidthPortIndex.setDescription('port index.')
qos3QueueBindWidthQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3QueueBindWidthQueueId.setStatus('current')
if mibBuilder.loadTexts: qos3QueueBindWidthQueueId.setDescription('queue id')
qos3QueueBindWidthMin = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueBindWidthMin.setStatus('current')
if mibBuilder.loadTexts: qos3QueueBindWidthMin.setDescription('the Smallest bindwidth.')
qos3QueueBindWidthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueBindWidthMax.setStatus('current')
if mibBuilder.loadTexts: qos3QueueBindWidthMax.setDescription('the Largest bindwidth.')
qos3QueueBindWidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueBindWidthStatus.setStatus('current')
if mibBuilder.loadTexts: qos3QueueBindWidthStatus.setDescription('the status of qos3QueueBindWidthTable')
qos3QueueWredTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8), )
if mibBuilder.loadTexts: qos3QueueWredTable.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWredTable.setDescription('this table is used for configuring the drop Algorithm of queue')
qos3QueueWredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1), ).setIndexNames((0, "NAG-MIB", "qos3QueueWredPortIndex"), (0, "NAG-MIB", "qos3QueueWredQueueId"), (0, "NAG-MIB", "qos3QueueWredDp"))
if mibBuilder.loadTexts: qos3QueueWredEntry.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWredEntry.setDescription('entry for queue wred configuration.')
qos3QueueWredPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3QueueWredPortIndex.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWredPortIndex.setDescription('port index.')
qos3QueueWredQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3QueueWredQueueId.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWredQueueId.setDescription('queue id.')
qos3QueueWredDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3QueueWredDp.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWredDp.setDescription('drop Priority.')
qos3QueueWredDpStart = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWredDpStart.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWredDpStart.setDescription('the smallist queue length when the queue start Discard packet.')
qos3QueueWredDpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWredDpEnd.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWredDpEnd.setDescription('the Largest queue length when the queue start Discard packet')
qos3QueueWredDpMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWredDpMaxRate.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWredDpMaxRate.setDescription('the max Discard Probability')
qos3QueueWredStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWredStatus.setStatus('current')
if mibBuilder.loadTexts: qos3QueueWredStatus.setDescription('the status of qos3QueueWredEntry')
qos3MapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9), )
if mibBuilder.loadTexts: qos3MapTable.setStatus('current')
if mibBuilder.loadTexts: qos3MapTable.setDescription('this table is used for setting map between priorities(eg:cos,intp).')
qos3MapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1), ).setIndexNames((0, "NAG-MIB", "qos3MapType"))
if mibBuilder.loadTexts: qos3MapEntry.setStatus('current')
if mibBuilder.loadTexts: qos3MapEntry.setDescription('entry for mls qos map configuration.')
qos3MapType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("cosToIntp", 0), ("cosToDp", 1), ("expToIntp", 2), ("expToDp", 3), ("intpToCos", 4), ("intpToDscp", 5), ("intpToExp", 6), ("cosToCosGreen", 7), ("cosToCosYellow", 8), ("cosToCosRed", 9), ("cosToDscpGreen", 10), ("cosToDscpYellow", 11), ("cosToDscpRed", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3MapType.setStatus('current')
if mibBuilder.loadTexts: qos3MapType.setDescription('the type of map,if the range of intp value beyonds 0-7,please config it in qos3MapIntpExtendTable. ')
qos3MapAtoB1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB1.setStatus('current')
if mibBuilder.loadTexts: qos3MapAtoB1.setDescription('according to maptype,map a to b for the first value.')
qos3MapAtoB2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB2.setStatus('current')
if mibBuilder.loadTexts: qos3MapAtoB2.setDescription('according to maptype,map a to b for the second value.')
qos3MapAtoB3 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB3.setStatus('current')
if mibBuilder.loadTexts: qos3MapAtoB3.setDescription('according to maptype,map a to b for the third value.')
qos3MapAtoB4 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB4.setStatus('current')
if mibBuilder.loadTexts: qos3MapAtoB4.setDescription('according to maptype,map a to b for the fourth value.')
qos3MapAtoB5 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB5.setStatus('current')
if mibBuilder.loadTexts: qos3MapAtoB5.setDescription('according to maptype,map a to b for the fifth value.')
qos3MapAtoB6 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB6.setStatus('current')
if mibBuilder.loadTexts: qos3MapAtoB6.setDescription('according to maptype,map a to b for the sixth value.')
qos3MapAtoB7 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB7.setStatus('current')
if mibBuilder.loadTexts: qos3MapAtoB7.setDescription('according to maptype,map a to b for the seventh value.')
qos3MapAtoB8 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB8.setStatus('current')
if mibBuilder.loadTexts: qos3MapAtoB8.setDescription('according to maptype,map a to b for the eighth value.')
qos3MapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapStatus.setStatus('current')
if mibBuilder.loadTexts: qos3MapStatus.setDescription('the status of qos3MapTable')
qos3MapDscpTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10), )
if mibBuilder.loadTexts: qos3MapDscpTable.setStatus('current')
if mibBuilder.loadTexts: qos3MapDscpTable.setDescription('this table is used for mapping between dscp and other priorities.')
qos3MapDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1), ).setIndexNames((0, "NAG-MIB", "qos3MapDscpType"), (0, "NAG-MIB", "qos3MapDscpIndex"))
if mibBuilder.loadTexts: qos3MapDscpEntry.setStatus('current')
if mibBuilder.loadTexts: qos3MapDscpEntry.setDescription('entry for mls qos dscp map configuration.')
qos3MapDscpType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("dscpToIntp", 0), ("dscpToDp", 1), ("dscpToDscp", 2), ("dscpToDscpGreen", 3), ("dscpToDscpYellow", 4), ("dscpToDscpRed", 5), ("dscpToCosGreen", 6), ("dscpToCosYellow", 7), ("dscpToCosRed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3MapDscpType.setStatus('current')
if mibBuilder.loadTexts: qos3MapDscpType.setDescription('the type of map')
qos3MapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3MapDscpIndex.setStatus('current')
if mibBuilder.loadTexts: qos3MapDscpIndex.setDescription('the index of dscp')
qos3MapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapDscpValue.setStatus('current')
if mibBuilder.loadTexts: qos3MapDscpValue.setDescription('the map value')
qos3mapDscpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3mapDscpStatus.setStatus('current')
if mibBuilder.loadTexts: qos3mapDscpStatus.setDescription('the status of qos3MapDscpTable')
qos3ServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11), )
if mibBuilder.loadTexts: qos3ServicePolicyTable.setStatus('current')
if mibBuilder.loadTexts: qos3ServicePolicyTable.setDescription('bind the policy to port or vlan.')
qos3ServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1), ).setIndexNames((0, "NAG-MIB", "qos3ServicePolicyBindType"), (0, "NAG-MIB", "qos3ServicePolicyDirection"), (0, "NAG-MIB", "qos3ServicePolicyIndex"))
if mibBuilder.loadTexts: qos3ServicePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: qos3ServicePolicyEntry.setDescription('entry for qos bind.')
qos3ServicePolicyBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("port", 0), ("vlan", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ServicePolicyBindType.setStatus('current')
if mibBuilder.loadTexts: qos3ServicePolicyBindType.setDescription('bind the policy to port or vlan')
qos3ServicePolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ServicePolicyIndex.setStatus('current')
if mibBuilder.loadTexts: qos3ServicePolicyIndex.setDescription('port index or vlan id')
qos3ServicePolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("out", 0), ("in", 1), ("ext", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ServicePolicyDirection.setStatus('current')
if mibBuilder.loadTexts: qos3ServicePolicyDirection.setDescription('the direction of binding')
qos3ServicePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ServicePolicyName.setStatus('current')
if mibBuilder.loadTexts: qos3ServicePolicyName.setDescription('the policy name')
qos3SercivePolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SercivePolicyStatus.setStatus('current')
if mibBuilder.loadTexts: qos3SercivePolicyStatus.setDescription('the status of qos3ServicePolicyTable')
qos3StatisticClearTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12), )
if mibBuilder.loadTexts: qos3StatisticClearTable.setStatus('current')
if mibBuilder.loadTexts: qos3StatisticClearTable.setDescription('this table is used for clearing counter statistics')
qos3StatisticClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1), ).setIndexNames((0, "NAG-MIB", "qos3StatisticClearBindType"), (0, "NAG-MIB", "qos3StatisticClearDirection"), (0, "NAG-MIB", "qos3StatisticClearIndex"))
if mibBuilder.loadTexts: qos3StatisticClearEntry.setStatus('current')
if mibBuilder.loadTexts: qos3StatisticClearEntry.setDescription('entry for clear statistics of vlan or port.')
qos3StatisticClearBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("port", 0), ("vlan", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3StatisticClearBindType.setStatus('current')
if mibBuilder.loadTexts: qos3StatisticClearBindType.setDescription('bind to port or vlan')
qos3StatisticClearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3StatisticClearIndex.setStatus('current')
if mibBuilder.loadTexts: qos3StatisticClearIndex.setDescription('port index or vlan id')
qos3StatisticClearDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("out", 0), ("in", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3StatisticClearDirection.setStatus('current')
if mibBuilder.loadTexts: qos3StatisticClearDirection.setDescription('the direction that you want to clear')
qos3StatisticClearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3StatisticClearStatus.setStatus('current')
if mibBuilder.loadTexts: qos3StatisticClearStatus.setDescription('the status of qos3StatisticClearTable')
qos3Ets = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13))
qos3EtsTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1), )
if mibBuilder.loadTexts: qos3EtsTable.setStatus('current')
if mibBuilder.loadTexts: qos3EtsTable.setDescription('this table is used for enabling QOS ETS and MC_UC mode.')
qos3EtsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1, 1), ).setIndexNames((0, "NAG-MIB", "qos3EtsPortIndex"))
if mibBuilder.loadTexts: qos3EtsEntry.setStatus('current')
if mibBuilder.loadTexts: qos3EtsEntry.setDescription('entry for enabling ETS and MC_UC.')
qos3EtsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3EtsPortIndex.setStatus('current')
if mibBuilder.loadTexts: qos3EtsPortIndex.setDescription('port index')
qos3EtsScheduleStatusConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("uc", 1), ("mc", 2), ("ets", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3EtsScheduleStatusConfig.setStatus('current')
if mibBuilder.loadTexts: qos3EtsScheduleStatusConfig.setDescription('config schedule mode.')
qos3EtsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3EtsStatus.setStatus('current')
if mibBuilder.loadTexts: qos3EtsStatus.setDescription('the status of qos3EtsTable.')
qos3McQueueBindWidthTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2), )
if mibBuilder.loadTexts: qos3McQueueBindWidthTable.setStatus('current')
if mibBuilder.loadTexts: qos3McQueueBindWidthTable.setDescription('a list of mc bindWidth configuration.')
qos3McQueueBindWidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1), ).setIndexNames((0, "NAG-MIB", "qos3McQueueBindWidthPortIndex"), (0, "NAG-MIB", "qos3McQueueID"))
if mibBuilder.loadTexts: qos3McQueueBindWidthEntry.setStatus('current')
if mibBuilder.loadTexts: qos3McQueueBindWidthEntry.setDescription('entry for configuring mc bindWidth.')
qos3McQueueBindWidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3McQueueBindWidthPortIndex.setStatus('current')
if mibBuilder.loadTexts: qos3McQueueBindWidthPortIndex.setDescription('port index')
qos3McQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3McQueueID.setStatus('current')
if mibBuilder.loadTexts: qos3McQueueID.setDescription('queue index.')
qos3McQueueBindWidthMin = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3McQueueBindWidthMin.setStatus('current')
if mibBuilder.loadTexts: qos3McQueueBindWidthMin.setDescription('minimize vaule of queue bindWidth')
qos3McQueueBindWidthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3McQueueBindWidthMax.setStatus('current')
if mibBuilder.loadTexts: qos3McQueueBindWidthMax.setDescription('maximize value of queue bindWidth.')
qos3McQueueBindWidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3McQueueBindWidthStatus.setStatus('current')
if mibBuilder.loadTexts: qos3McQueueBindWidthStatus.setDescription('the status of qos3McQueueBindWidthTable.')
qos3SchedulePolicyMapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3), )
if mibBuilder.loadTexts: qos3SchedulePolicyMapTable.setStatus('current')
if mibBuilder.loadTexts: qos3SchedulePolicyMapTable.setDescription('this table is used for building a Schedule policy and mapping the named policy to number, if you want to configure a Schedule policy,you must map at here.')
qos3SchedulePolicyMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3, 1), ).setIndexNames((0, "NAG-MIB", "qos3SchedulePolicyMapIndex"))
if mibBuilder.loadTexts: qos3SchedulePolicyMapEntry.setStatus('current')
if mibBuilder.loadTexts: qos3SchedulePolicyMapEntry.setDescription('entry for building schedule policy.')
qos3SchedulePolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3SchedulePolicyMapIndex.setStatus('current')
if mibBuilder.loadTexts: qos3SchedulePolicyMapIndex.setDescription('the range is 0-(2^64 - 1).')
qos3SchedulePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SchedulePolicyName.setStatus('current')
if mibBuilder.loadTexts: qos3SchedulePolicyName.setDescription('the schedule policy name.')
qos3SchedulePolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SchedulePolicyStatus.setStatus('current')
if mibBuilder.loadTexts: qos3SchedulePolicyStatus.setDescription('the status of qos3SchedulePolicyGroupTable.')
qos3NodeScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4), )
if mibBuilder.loadTexts: qos3NodeScheduleTable.setStatus('current')
if mibBuilder.loadTexts: qos3NodeScheduleTable.setDescription('this table is used for building a Schedule node.')
qos3NodeScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1), ).setIndexNames((0, "NAG-MIB", "qos3NodeSchedulePolicyIndex"), (0, "NAG-MIB", "qos3NodeScheduleLevelID"), (0, "NAG-MIB", "qos3NodeScheduleNodeID"))
if mibBuilder.loadTexts: qos3NodeScheduleEntry.setStatus('current')
if mibBuilder.loadTexts: qos3NodeScheduleEntry.setDescription('entry for building schedule policy.')
qos3NodeSchedulePolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3NodeSchedulePolicyIndex.setStatus('current')
if mibBuilder.loadTexts: qos3NodeSchedulePolicyIndex.setDescription('policy index.')
qos3NodeScheduleLevelID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3NodeScheduleLevelID.setStatus('current')
if mibBuilder.loadTexts: qos3NodeScheduleLevelID.setDescription('level ID.')
qos3NodeScheduleNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3NodeScheduleNodeID.setStatus('current')
if mibBuilder.loadTexts: qos3NodeScheduleNodeID.setDescription("node ID. range of it's value is determined by level ID,for level 1,it can only be 1;\n         for level 2 and level 3,the range is 1-4.")
qos3NodeScheduleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3NodeScheduleStatus.setStatus('current')
if mibBuilder.loadTexts: qos3NodeScheduleStatus.setDescription('the status of qos3NodeScheduleTable.')
qos3ScheduleQueueAlgorithmTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5), )
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmTable.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmTable.setDescription('this table is used for schedule queue algorithm configuration.')
qos3ScheduleQueueAlgorithmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1), ).setIndexNames((0, "NAG-MIB", "qos3ScheduleQueueAlgorithmPolicyIndex"), (0, "NAG-MIB", "qos3ScheduleQueueAlgorithmLevelID"), (0, "NAG-MIB", "qos3ScheduleQueueAlgorithmNodeID"))
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmEntry.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmEntry.setDescription('entry for configuring schedule queue algorithm.')
qos3ScheduleQueueAlgorithmPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmPolicyIndex.setDescription('schedule policy map Index.')
qos3ScheduleQueueAlgorithmLevelID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmLevelID.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmLevelID.setDescription('level ID.')
qos3ScheduleQueueAlgorithmNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmNodeID.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmNodeID.setDescription("node ID. range of it's value is determined by level ID,for level 1,it can only be 1;\n         for level 2 and level 3,the range is 1-4.")
qos3ScheduleQueueAlgorithmConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("rr", 0), ("sp", 1), ("wrr", 2), ("wdrr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmConfig.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmConfig.setDescription('schedule queue algorithm.')
qos3ScheduleQueueAlgorithmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmStatus.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmStatus.setDescription('the status of qos3ScheduleQueueAlgorithmTable.')
qos3ScheduleQueueWeightTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6), )
if mibBuilder.loadTexts: qos3ScheduleQueueWeightTable.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueWeightTable.setDescription('this table is used for schedule queue weight configuration.')
qos3ScheduleQueueWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1), ).setIndexNames((0, "NAG-MIB", "qos3ScheduleQueueWeightPolicyIndex"), (0, "NAG-MIB", "qos3ScheduleQueueWeightLevelID"), (0, "NAG-MIB", "qos3ScheduleQueueWeightNodeID"), (0, "NAG-MIB", "qos3ScheduleQueueAlgorithm"), (0, "NAG-MIB", "qos3ScheduleQueueWeightQueueID"))
if mibBuilder.loadTexts: qos3ScheduleQueueWeightEntry.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueWeightEntry.setDescription('entry for configuring schedule queue weight.')
qos3ScheduleQueueWeightPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueWeightPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueWeightPolicyIndex.setDescription('schedule policy map Index.')
qos3ScheduleQueueWeightLevelID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueWeightLevelID.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueWeightLevelID.setDescription('level ID.')
qos3ScheduleQueueWeightNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueWeightNodeID.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueWeightNodeID.setDescription("node ID. range of it's value is determined by level ID,for level 1,it can only be 1;\n         for level 2 and level 3,the range is 1-4.")
qos3ScheduleQueueAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wrr", 0), ("wdrr", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithm.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithm.setDescription('queue algorithm.')
qos3ScheduleQueueWeightQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueWeightQueueID.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueWeightQueueID.setDescription('queue ID.')
qos3ScheduleQueueWeightValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleQueueWeightValue.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueWeightValue.setDescription('queue weight value.')
qos3ScheduleQueueWeightStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleQueueWeightStatus.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueWeightStatus.setDescription('the status of qos3ScheduleQueueWeightTable.')
qos3ScheduleQueueInputTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7), )
if mibBuilder.loadTexts: qos3ScheduleQueueInputTable.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueInputTable.setDescription('this table is used for schedule queue input configuration.')
qos3ScheduleQueueInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1), ).setIndexNames((0, "NAG-MIB", "qos3ScheduleQueueInputPolicyIndex"), (0, "NAG-MIB", "qos3ScheduleQueueInputLevelID"), (0, "NAG-MIB", "qos3ScheduleQueueInputNodeID"), (0, "NAG-MIB", "qos3ScheduleQueueInputQueueID"))
if mibBuilder.loadTexts: qos3ScheduleQueueInputEntry.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueInputEntry.setDescription('entry for configuring schedule queue input.')
qos3ScheduleQueueInputPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueInputPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueInputPolicyIndex.setDescription('schedule policy map Index.')
qos3ScheduleQueueInputLevelID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueInputLevelID.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueInputLevelID.setDescription('level ID.')
qos3ScheduleQueueInputNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueInputNodeID.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueInputNodeID.setDescription("node ID. range of it's value is determined by level ID,for level 1,it can only be 1;\n         for level 2 and level 3,the range is 1-4.")
qos3ScheduleQueueInputQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueInputQueueID.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueInputQueueID.setDescription('queue ID.')
qos3ScheduleQueueInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("uc", 0), ("mc", 1), ("node", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleQueueInputType.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueInputType.setDescription('input type of queue.')
qos3ScheduleQueueInputTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleQueueInputTypeValue.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueInputTypeValue.setDescription('value of the input type,the value range for uc is 1-18,the value range for mc is 1-4,the value range for node is 1-4.')
qos3ScheduleQueueInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleQueueInputStatus.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleQueueInputStatus.setDescription('the status of qos3ScheduleBindWidthTable.')
qos3ScheduleBindWidthTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8), )
if mibBuilder.loadTexts: qos3ScheduleBindWidthTable.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleBindWidthTable.setDescription('this table is used for schedule bindWidth configuration.')
qos3ScheduleBindWidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1), ).setIndexNames((0, "NAG-MIB", "qos3ScheduleBindWidthPolicyIndex"), (0, "NAG-MIB", "qos3ScheduleBindWidthLevelID"), (0, "NAG-MIB", "qos3ScheduleBindWidthNodeID"))
if mibBuilder.loadTexts: qos3ScheduleBindWidthEntry.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleBindWidthEntry.setDescription('entry for configuring schedule bindWidth.')
qos3ScheduleBindWidthPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleBindWidthPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleBindWidthPolicyIndex.setDescription('schedule policy map Index.')
qos3ScheduleBindWidthLevelID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleBindWidthLevelID.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleBindWidthLevelID.setDescription('level ID.')
qos3ScheduleBindWidthNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleBindWidthNodeID.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleBindWidthNodeID.setDescription("node ID. range of it's value is determined by level ID,for level 1,it can only be 1;\n         for level 2 and level 3,the range is 1-4.")
qos3ScheduleBindWidthMin = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleBindWidthMin.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleBindWidthMin.setDescription('minimize value of schedule bindWidth.')
qos3ScheduleBindWidthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleBindWidthMax.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleBindWidthMax.setDescription('maximize value of schedule bindWidth.')
qos3ScheduleBindWidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleBindWidthStatus.setStatus('current')
if mibBuilder.loadTexts: qos3ScheduleBindWidthStatus.setDescription('the status of qos3ScheduleBindWidthTable.')
qos3SchedulePolicyBindTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9), )
if mibBuilder.loadTexts: qos3SchedulePolicyBindTable.setStatus('current')
if mibBuilder.loadTexts: qos3SchedulePolicyBindTable.setDescription('this table is used for binding schedule policy to port.')
qos3SchedulePolicyBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9, 1), ).setIndexNames((0, "NAG-MIB", "qos3SchedulePolicyBindPortIndex"))
if mibBuilder.loadTexts: qos3SchedulePolicyBindEntry.setStatus('current')
if mibBuilder.loadTexts: qos3SchedulePolicyBindEntry.setDescription('entry for binding schedule policy.')
qos3SchedulePolicyBindPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3SchedulePolicyBindPortIndex.setStatus('current')
if mibBuilder.loadTexts: qos3SchedulePolicyBindPortIndex.setDescription('port Index.')
qos3SchedulePolicyBindPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SchedulePolicyBindPolicyName.setStatus('current')
if mibBuilder.loadTexts: qos3SchedulePolicyBindPolicyName.setDescription('the schedule policy name.')
qos3SchedulePolicyBindStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SchedulePolicyBindStatus.setStatus('current')
if mibBuilder.loadTexts: qos3SchedulePolicyBindStatus.setDescription('the status of qos3SchedulePolicyBindTable.')
qos3MapIntpExtendTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14), )
if mibBuilder.loadTexts: qos3MapIntpExtendTable.setStatus('current')
if mibBuilder.loadTexts: qos3MapIntpExtendTable.setDescription('this table is used for mapping between intp and other priorities,the range of value for intp is 0-119.')
qos3MapIntpExtendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1), ).setIndexNames((0, "NAG-MIB", "qos3MapIntpExtendType"), (0, "NAG-MIB", "qos3MapIntpExtendIndex"))
if mibBuilder.loadTexts: qos3MapIntpExtendEntry.setStatus('current')
if mibBuilder.loadTexts: qos3MapIntpExtendEntry.setDescription('entry for mls qos intp map configuration.')
qos3MapIntpExtendType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("intpToCos", 0), ("intpToDscp", 1), ("intpToExp", 2), ("intpToQueue", 3), ("intpToDp", 4), ("intpToIntpRed", 5), ("intpToIntpYellow", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3MapIntpExtendType.setStatus('current')
if mibBuilder.loadTexts: qos3MapIntpExtendType.setDescription('the type of map')
qos3MapIntpExtendIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3MapIntpExtendIndex.setStatus('current')
if mibBuilder.loadTexts: qos3MapIntpExtendIndex.setDescription('the index of intp')
qos3MapIntpExtendValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapIntpExtendValue.setStatus('current')
if mibBuilder.loadTexts: qos3MapIntpExtendValue.setDescription('the map value')
qos3mapIntpExtendStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3mapIntpExtendStatus.setStatus('current')
if mibBuilder.loadTexts: qos3mapIntpExtendStatus.setDescription('the status of qos3MapIntpExtendTable')
qos3EgressRemark = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 15))
qos3EgressGreenRemark = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3EgressGreenRemark.setStatus('current')
if mibBuilder.loadTexts: qos3EgressGreenRemark.setDescription('enabling egress remark on green packet.')
showQos3 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16))
showQos3VlanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1), )
if mibBuilder.loadTexts: showQos3VlanTable.setStatus('current')
if mibBuilder.loadTexts: showQos3VlanTable.setDescription(' Show Qos3 Vlan Table')
showQos3VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1), ).setIndexNames((0, "NAG-MIB", "showQos3VlanId"), (0, "NAG-MIB", "showQos3PolicyDirection"), (0, "NAG-MIB", "showQos3ClassmapName"))
if mibBuilder.loadTexts: showQos3VlanEntry.setStatus('current')
if mibBuilder.loadTexts: showQos3VlanEntry.setDescription('index is vlan id')
showQos3VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: showQos3VlanId.setStatus('current')
if mibBuilder.loadTexts: showQos3VlanId.setDescription(' show qos vlan id.')
showQos3PolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("in", 0), ("out", 1), ("pre", 2), ("ext", 3))))
if mibBuilder.loadTexts: showQos3PolicyDirection.setStatus('current')
if mibBuilder.loadTexts: showQos3PolicyDirection.setDescription('QoS Policy direction')
showQos3ClassmapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: showQos3ClassmapName.setStatus('current')
if mibBuilder.loadTexts: showQos3ClassmapName.setDescription('QoS class map name')
showQos3VlanInCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3VlanInCounter.setStatus('current')
if mibBuilder.loadTexts: showQos3VlanInCounter.setDescription('in vlan counter')
showQos3VlanOutCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3VlanOutCounter.setStatus('current')
if mibBuilder.loadTexts: showQos3VlanOutCounter.setDescription('out vlan counter')
showQos3VlanGreenCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3VlanGreenCounter.setStatus('current')
if mibBuilder.loadTexts: showQos3VlanGreenCounter.setDescription('green vlan counter')
showQos3VlanYellowCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3VlanYellowCounter.setStatus('current')
if mibBuilder.loadTexts: showQos3VlanYellowCounter.setDescription('yellow vlan counter')
showQos3VlanRedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3VlanRedCounter.setStatus('current')
if mibBuilder.loadTexts: showQos3VlanRedCounter.setDescription('red vlan counter')
showQos3QueueStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17), )
if mibBuilder.loadTexts: showQos3QueueStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: showQos3QueueStatisticsTable.setDescription(' Show Qos3 Queue Statistics Table')
showQos3QueueStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1), ).setIndexNames((0, "NAG-MIB", "showQos3QueueStatisticsPortIndex"))
if mibBuilder.loadTexts: showQos3QueueStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: showQos3QueueStatisticsEntry.setDescription('index is port id')
showQos3QueueStatisticsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3QueueStatisticsPortIndex.setStatus('current')
if mibBuilder.loadTexts: showQos3QueueStatisticsPortIndex.setDescription(' show qos port id.')
showQos3QueueStatisticsQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3QueueStatisticsQueueID.setStatus('current')
if mibBuilder.loadTexts: showQos3QueueStatisticsQueueID.setDescription('show qos queue id')
showQos3QueueStatisticsPassedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3QueueStatisticsPassedPacket.setStatus('current')
if mibBuilder.loadTexts: showQos3QueueStatisticsPassedPacket.setDescription('QoS queue statististics passed packet')
showQos3QueueStatisticsDropedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3QueueStatisticsDropedPacket.setStatus('current')
if mibBuilder.loadTexts: showQos3QueueStatisticsDropedPacket.setDescription('QoS queue statististics drop packet')
showQos3MCQueueStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18), )
if mibBuilder.loadTexts: showQos3MCQueueStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: showQos3MCQueueStatisticsTable.setDescription(' Show Qos3 MC-Queue Statistics Table')
showQos3MCQueueStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1), ).setIndexNames((0, "NAG-MIB", "showQos3MCQueueStatisticsPortIndex"))
if mibBuilder.loadTexts: showQos3MCQueueStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: showQos3MCQueueStatisticsEntry.setDescription('index is port id for MC-QUEUE')
showQos3MCQueueStatisticsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3MCQueueStatisticsPortIndex.setStatus('current')
if mibBuilder.loadTexts: showQos3MCQueueStatisticsPortIndex.setDescription(' show qos port id for MC-QUEUE.')
showQos3MCQueueStatisticsQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3MCQueueStatisticsQueueID.setStatus('current')
if mibBuilder.loadTexts: showQos3MCQueueStatisticsQueueID.setDescription('show qos MC-queue id')
showQos3MCQueueStatisticsPassedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3MCQueueStatisticsPassedPacket.setStatus('current')
if mibBuilder.loadTexts: showQos3MCQueueStatisticsPassedPacket.setDescription('QoS MC-queue statististics passed packet')
showQos3MCQueueStatisticsDropedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3MCQueueStatisticsDropedPacket.setStatus('current')
if mibBuilder.loadTexts: showQos3MCQueueStatisticsDropedPacket.setDescription('QoS MC-queue statististics drop packet')
mirrorSrcCpuTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3), )
if mibBuilder.loadTexts: mirrorSrcCpuTable.setStatus('current')
if mibBuilder.loadTexts: mirrorSrcCpuTable.setDescription('Src Cpu for mirrored packets.')
mirrorSrcCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1), ).setIndexNames((0, "NAG-MIB", "mirrorSrcCpuSession"), (0, "NAG-MIB", "mirrorSrcCpuDirect"), (0, "NAG-MIB", "mirrorSrcCpuSlot"))
if mibBuilder.loadTexts: mirrorSrcCpuEntry.setStatus('current')
if mibBuilder.loadTexts: mirrorSrcCpuEntry.setDescription('Src Cpu for mirrored packets.')
mirrorSrcCpuSession = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorSrcCpuSession.setStatus('current')
if mibBuilder.loadTexts: mirrorSrcCpuSession.setDescription('Session ID.')
mirrorSrcCpuDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorSrcCpuDirect.setStatus('current')
if mibBuilder.loadTexts: mirrorSrcCpuDirect.setDescription('Direction of  mirror.')
mirrorSrcCpuSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorSrcCpuSlot.setStatus('current')
if mibBuilder.loadTexts: mirrorSrcCpuSlot.setDescription('Src cpu slot index.')
mirrorSrcCpuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorSrcCpuStatus.setStatus('current')
if mibBuilder.loadTexts: mirrorSrcCpuStatus.setDescription('Status.')
mirrorReflectorPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4), )
if mibBuilder.loadTexts: mirrorReflectorPortTable.setStatus('current')
if mibBuilder.loadTexts: mirrorReflectorPortTable.setDescription('mirror reflector destination port configuration Table of Rspan.\n        The information about the reflector destination port and \n        its associated session will be specified by this table,which \n        will not present itself in the mirrorDestTable. Which means \n        the mirrorReflectorPortTable and the mirrorDestTable is \n        independent from each other.')
mirrorReflectorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4, 1), ).setIndexNames((0, "NAG-MIB", "mirrorReflectorPortSession"), (0, "NAG-MIB", "mirrorReflectorPort"))
if mibBuilder.loadTexts: mirrorReflectorPortEntry.setStatus('current')
if mibBuilder.loadTexts: mirrorReflectorPortEntry.setDescription('mirror destination port configuration of Rspan.')
mirrorReflectorPortSession = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorReflectorPortSession.setStatus('current')
if mibBuilder.loadTexts: mirrorReflectorPortSession.setDescription('Session ID.')
mirrorReflectorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorReflectorPort.setStatus('current')
if mibBuilder.loadTexts: mirrorReflectorPort.setDescription('mirror reflector destination port number.')
mirrorReflectorPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorReflectorPortStatus.setStatus('current')
if mibBuilder.loadTexts: mirrorReflectorPortStatus.setDescription('The configuration status of the reflector destination port and its associated session.')
mirrorRspanVlanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 5), )
if mibBuilder.loadTexts: mirrorRspanVlanTable.setStatus('current')
if mibBuilder.loadTexts: mirrorRspanVlanTable.setDescription('Vlan configuration Table of Rspan.')
mirrorRspanVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 5, 1), ).setIndexNames((0, "NAG-MIB", "mirrorRspanVlan"))
if mibBuilder.loadTexts: mirrorRspanVlanEntry.setStatus('current')
if mibBuilder.loadTexts: mirrorRspanVlanEntry.setDescription('Vlan configuration of Rspan.')
mirrorRspanVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorRspanVlan.setStatus('current')
if mibBuilder.loadTexts: mirrorRspanVlan.setDescription('Vlan ID.')
mirrorRspanVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorRspanVlanStatus.setStatus('current')
if mibBuilder.loadTexts: mirrorRspanVlanStatus.setDescription('Vlan status.')
mirrorRspanSessionTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6), )
if mibBuilder.loadTexts: mirrorRspanSessionTable.setStatus('current')
if mibBuilder.loadTexts: mirrorRspanSessionTable.setDescription('Session configuration Table of Rspan.When creating an entry, \n        the correctness of both the Vlan ID an the Session ID should be ensured.\n        When destroying an entry, only the correctness of the Session ID is required.')
mirrorRspanSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6, 1), ).setIndexNames((0, "NAG-MIB", "mirrorRspanSession"), (0, "NAG-MIB", "mirrorRspanSessionVlan"))
if mibBuilder.loadTexts: mirrorRspanSessionEntry.setStatus('current')
if mibBuilder.loadTexts: mirrorRspanSessionEntry.setDescription('Session configuration of Rspan.')
mirrorRspanSession = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorRspanSession.setStatus('current')
if mibBuilder.loadTexts: mirrorRspanSession.setDescription('Session ID.')
mirrorRspanSessionVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorRspanSessionVlan.setStatus('current')
if mibBuilder.loadTexts: mirrorRspanSessionVlan.setDescription('Vlan ID.')
mirrorRspanSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorRspanSessionStatus.setStatus('current')
if mibBuilder.loadTexts: mirrorRspanSessionStatus.setDescription('The configuration status of the mirror session and its associated Rspan Vlan.')
mirrorDestGreTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7), )
if mibBuilder.loadTexts: mirrorDestGreTable.setStatus('current')
if mibBuilder.loadTexts: mirrorDestGreTable.setDescription('Destination port for mirrored packets.')
mirrorDestGreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1), ).setIndexNames((0, "NAG-MIB", "mirrorDestGreSession"), (0, "NAG-MIB", "mirrorDestGrePort"))
if mibBuilder.loadTexts: mirrorDestGreEntry.setStatus('current')
if mibBuilder.loadTexts: mirrorDestGreEntry.setDescription('Destination port for mirrored packets.')
mirrorDestGreSession = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorDestGreSession.setStatus('current')
if mibBuilder.loadTexts: mirrorDestGreSession.setDescription('Session ID.')
mirrorDestGrePort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorDestGrePort.setStatus('current')
if mibBuilder.loadTexts: mirrorDestGrePort.setDescription('configure GRE port index.')
mirrorDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 3), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorDestMacAddr.setStatus('current')
if mibBuilder.loadTexts: mirrorDestMacAddr.setDescription('MAC address of equipment contacted with destination inferface.')
mirrorDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorDestIP.setStatus('current')
if mibBuilder.loadTexts: mirrorDestIP.setDescription('GRE destination IP address.')
mirrorSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorSrcIP.setStatus('current')
if mibBuilder.loadTexts: mirrorSrcIP.setDescription('GRE source IP address.')
mirrorDestGreStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorDestGreStatus.setStatus('current')
if mibBuilder.loadTexts: mirrorDestGreStatus.setDescription('Status.')
dhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1))
dhcpRelayForwardUdpBootps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noBootps", 0), ("bootps", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayForwardUdpBootps.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayForwardUdpBootps.setDescription('If dhcp rely forward bootps udp broadcast packet,broadcast message bootps.')
dhcpRelayServerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2), )
if mibBuilder.loadTexts: dhcpRelayServerAddrTable.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerAddrTable.setDescription('The role of DHCP Relay Agent is to forward requests \n                        and replies between server and client when they are not\n                        in the same subnet. To enable DHCP Relay service user needs to \n                        specify Relay Server ip address and then restart DHCP Relay.\n                        This Table is to specify Relay Server ip address, \n                        the maximum numbers of server ip address user can specify is 5.\n                        To Restart DHCP Relay, please use the dhcpRelayRestart variable.')
dhcpRelayServerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1), ).setIndexNames((0, "NAG-MIB", "dhcpRelayServerAddrVlanId"), (0, "NAG-MIB", "dhcpRelayServerAddrIndex"))
if mibBuilder.loadTexts: dhcpRelayServerAddrEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerAddrEntry.setDescription('A conceptual row of dhcpRelayServerAddrTable.')
dhcpRelayServerAddrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpRelayServerAddrVlanId.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerAddrVlanId.setDescription('The ID of VLAN interface used by this table entry.')
dhcpRelayServerAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: dhcpRelayServerAddrIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerAddrIndex.setDescription('The index of relay address set in the VLAN interface.')
dhcpRelayServerAddrServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayServerAddrServerIp.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerAddrServerIp.setDescription('Appoint the destination address used for DHCP relay.')
dhcpRelayServerAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayServerAddrStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerAddrStatus.setDescription('Configuration status.')
dhcpRelayOption82Enalbe = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noEnable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayOption82Enalbe.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayOption82Enalbe.setDescription('If set(0), disable dhcp relay option82 function,\n                        set(1),then enable dhcp relay option82 function.')
dhcpRelayInformationOptionRemoteIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("vs-hp", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayInformationOptionRemoteIDFormat.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayInformationOptionRemoteIDFormat.setDescription('If set(0), then use vlan mac address as the default format, \n                         set(1), use vs-hp format to keep compatibility with HP.')
dhcpRelayInformationOptionRemoteID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayInformationOptionRemoteID.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayInformationOptionRemoteID.setDescription("If input the 'standard' string ,then use vlan mac address format for option82 sub-option 2, \n                         other strings are used as romote ID of option82 sub-option 2,\n                         the default string is 'standard'.")
dhcpRelayInformationOptionSubscriberIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("hex", 0), ("acsii", 1), ("vs-hp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayInformationOptionSubscriberIDFormat.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayInformationOptionSubscriberIDFormat.setDescription('If set(0), then use hex format of vlan and mac address,\n                         set(1), use ACSII format of vlan and mac address,\n                         set(2), use vs-hp format to keep compatibility with HP,\n                         the default value is set(1).')
dhcpServerRelayInformationEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noEnable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerRelayInformationEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerRelayInformationEnable.setDescription('If set(0), disable the option82 relay function on dhcp server, the dhcp server neglects the option82 information,\n                         set(1), then enable the option82 relay function on dhcp server,then dhcp server starts to identify option82 information.')
dhcpRelayInformationOptionDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("colon", 0), ("dot", 1), ("slash", 2), ("space", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayInformationOptionDelimiter.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayInformationOptionDelimiter.setDescription('If set(0), then use colon to compart sub-option parameters,\n                         set(1), use dot to compart sub-option parameters,\n                         set(2), use slash to compart sub-option parameters,\n                         set(3), use space to compart sub-option parameters,\n                         the default value is set(2).')
dhcpRelayOptionSelfDefinedSubscriberIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hex", 0), ("ascii", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayOptionSelfDefinedSubscriberIDFormat.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayOptionSelfDefinedSubscriberIDFormat.setDescription('If set(0), then use hex format to generate sub-scriber ID,\n                         set(1), use ASCII format to generate sub-scriber ID,\n                         the default value is set(1).')
dhcpRelayOptionSelfDefinedRemoteIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hex", 0), ("ascii", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayOptionSelfDefinedRemoteIDFormat.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayOptionSelfDefinedRemoteIDFormat.setDescription('If set(0), then use hex format to generate remote ID,\n                         set(1), use ASCII format to generate remote ID,\n                         the default value is set(1).')
dhcpRelayOptionSelfDefinedSubscriberID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayOptionSelfDefinedSubscriberID.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayOptionSelfDefinedSubscriberID.setDescription("If user does not configure the circuit-id of option82 explicitly on a port, then \n                         the user can self define format to generate the circuit-id, the format options include\n                         vlan, port, ID, self-designed string, the subscriber ID may be only one or any combination of them,\n                         and is strictly generated according to the sequence of format options, the ID option includes \t\n                         switch ID and remote-mac, but the user just select only one of them, also In the swtich ID, it \n                         includes mac and hostname options, the user just select only one of two, the maximum length \n                         of self-designed striing is 64. If user input the string 'NULL', then delete the last configuration.\n                         For example, if select vlan ,ID(swtich-id(mac)), and string 'str' format,\n                         the user input the string like as 'vlan id swtich-id mac string str'.")
dhcpRelayOptionSelfDefinedRemoteID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayOptionSelfDefinedRemoteID.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayOptionSelfDefinedRemoteID.setDescription("If user does not configure the remote-id of option82 explicitly on a port, then \n                         the user can self define format to generate the remote-id, the format options include\n                         mac,hostname and self-designed string, the remote ID may be only one or any combination of them,\n                         and is strictly generated according to the sequence of format options, \n                         the maximum length of self-designed striing is 32.\n                         If user input the string 'NULL', then delete the last configuration.\n                         For example, if select hostname,mac,and string 'str' format,\n                         the user input the string like as 'hostname mac string str'.")
dhcpRelayOption82InterfaceConfigureTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13), )
if mibBuilder.loadTexts: dhcpRelayOption82InterfaceConfigureTable.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayOption82InterfaceConfigureTable.setDescription('After enable the option82 relay function ,the swith must adopt some forwarding policy,\n                       and use specified format for subscriber ID to handle receving the dhcp request packets \n                       according to specified port.')
dhcpRelayOption82InterfaceConfigureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13, 1), ).setIndexNames((0, "NAG-MIB", "dhcpRelayOption82Vid"))
if mibBuilder.loadTexts: dhcpRelayOption82InterfaceConfigureEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayOption82InterfaceConfigureEntry.setDescription('A conceptual row of dhcpRelayOption82InterfaceConfigureTable.')
dhcpRelayOption82Vid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpRelayOption82Vid.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayOption82Vid.setDescription('The Vlan interface being used by this table entry. \n                       Only the Vlan interfaces which have an IP configured will appear in the table.')
dhcpRelayOption82ForwardPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82ForwardPolicy.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayOption82ForwardPolicy.setDescription('If set(1), then drop the dhcp request packets with option82 sub-option,\n                       set(2), keep the dhcp request packets with option82 sub-option and forward to the dhcp server,\n                       set(3), the systerm replace the option82 sub-option of dhcp request packets with its own option82 sub-option,\n                       the default value is set(3).')
dhcpRelayOption82SubscriberID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82SubscriberID.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayOption82SubscriberID.setDescription("If input the 'standard' string ,then use vlan and physical port format for option82 sub-option 1, \n                       other string, that be used as circuit-id of option82 sub-option 1,\n                       the default string is 'standard'.")
dhcpRelaySharevlanSubvlanConfigureTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 14), )
if mibBuilder.loadTexts: dhcpRelaySharevlanSubvlanConfigureTable.setStatus('current')
if mibBuilder.loadTexts: dhcpRelaySharevlanSubvlanConfigureTable.setDescription('the swith use the subvlan \n\t\t\t\t\t\tto handle receving the dhcp request packets.')
dhcpRelaySharevlanSubvlanConfigureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 14, 1), ).setIndexNames((0, "NAG-MIB", "dhcpRelaySharevlanSubvlanList"))
if mibBuilder.loadTexts: dhcpRelaySharevlanSubvlanConfigureEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpRelaySharevlanSubvlanConfigureEntry.setDescription('A conceptual row of dhcpRelaySharevlanSubvlanConfigureTable.')
dhcpRelaySharevlanSubvlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelaySharevlanSubvlanList.setStatus('current')
if mibBuilder.loadTexts: dhcpRelaySharevlanSubvlanList.setDescription('DHCP Relay: set the subvlan list for the sharevlan.')
dhcpRelayNoSharevlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayNoSharevlan.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayNoSharevlan.setDescription('DHCP Relay: UNset the subvlan list for the sharevlan.')
dhcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2))
dhcpServerServiceStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerServiceStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpServerServiceStatus.setDescription('Setting this to 1 to enable the dhcp server service.\n                 Setting this to 2 to disable the dhcp server service.')
dhcploggingStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcploggingStatus.setStatus('current')
if mibBuilder.loadTexts: dhcploggingStatus.setDescription('Setting this to 1 to enable the dhcp conflict logging. \n                 Setting this to 0 to disable the dhcp conflict logging.')
dhcpPool = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3))
dhcpPoolTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1), )
if mibBuilder.loadTexts: dhcpPoolTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolTable.setDescription('A dhcp pool is a collection of\n                       user configuration such as option config-lease time                         \n                        or dns-server IPs, a network address for network pool,\n                        or a host IP plus a hardware address pair for host pool. \n                        However, a dhcp pool only can either be a network pool \n                        or a host pool, or none of them (such as that pool only \n                        containing option config no network address config \n                        or a host ip config as well)')
dhcpPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1), ).setIndexNames((0, "NAG-MIB", "dhcpPoolPoolName"))
if mibBuilder.loadTexts: dhcpPoolEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolEntry.setDescription('A conceptual row of dhcpPoolTable.')
dhcpPoolPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: dhcpPoolPoolName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolPoolName.setDescription('PoolName, simply specify a string.')
dhcpPoolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("active", 1), ("destroy", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolStatus.setDescription('accession delete the pool,according to dhcpPoolName')
dhcpPoolAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("host", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolAddressType.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolAddressType.setDescription('configure dhcppool of address style')
dhcpPoolAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolAddress.setDescription('configurate dhcp pool.\n           if dhcpPoolAddressType=1 configurate address range,\n\t\t       if dhcpPoolAddressType=2 configurate single address')
dhcpPoolAddressPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolAddressPrefix.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolAddressPrefix.setDescription('dhcp pool ip address prefix')
dhcpPoolAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("active", 1), ("destroy", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolAddressStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolAddressStatus.setDescription('address of configuration satus')
dhcpPoolMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolMacAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolMacAddress.setDescription('appoint user of hardware address.Condition: dhcpPoolAddressType(2).')
dhcpPoolProType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolProType.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolProType.setDescription('RFC define protocol style of number express,Condition:dhcpPoolAddressType(2).')
dhcpPoolMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("active", 1), ("destroy", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolMacStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolMacStatus.setDescription('hardware address configure status.Condition: dhcpPoolAddressType(2).')
dhcpPoolExpandTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2), )
if mibBuilder.loadTexts: dhcpPoolExpandTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolExpandTable.setDescription('A dhcp pool is a collection of\n                       user configuration such as option config-lease time                         \n                        or dns-server IPs, a network address for network pool,\n                        or a host IP plus a hardware address pair for host pool. \n                        However, a dhcp pool only can either be a network pool \n                        or a host pool, or none of them (such as that pool only \n                        containing option config no network address config \n                        or a host ip config as well)')
dhcpPoolExpandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1), ).setIndexNames((0, "NAG-MIB", "dhcpPoolExpandName"))
if mibBuilder.loadTexts: dhcpPoolExpandEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolExpandEntry.setDescription('A conceptual row of dhcpPoolExpandTable.')
dhcpPoolExpandName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: dhcpPoolExpandName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolExpandName.setDescription('PoolName, simply specify a string which \n                      string size NO MORE THAN 8')
dhcpPoolNetbiosNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNetbiosNodeType.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolNetbiosNodeType.setDescription('Configure DHCP client of node style. \n                      For example, Broadcast node 1, Peer-to-peer node 2, Mixed node 4, Hybrid node 8')
dhcpPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDomainName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDomainName.setDescription('DHCP client configure domain name')
dhcpPoolBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolBootFile.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolBootFile.setDescription('configure DHCP client boot-file name')
dhcpPoolCLid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolCLid.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolCLid.setDescription('set dhcp pool client id.\n\t\t       Condition: the pool of address is handcraft bind')
dhcpPoolExpandstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("valid", 0), ("destroy", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolExpandstatus.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolExpandstatus.setDescription('if configure is valid(0),and the list of all configuration operatation accession \n\t\t       if configure is destroy(1),and the list of all configuration operation delet')
dhcpLeaseTimeTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4), )
if mibBuilder.loadTexts: dhcpLeaseTimeTable.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseTimeTable.setDescription('configure rent term in address pool')
dhcpLeaseTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1), ).setIndexNames((0, "NAG-MIB", "dhcpLeaseTimePoolName"))
if mibBuilder.loadTexts: dhcpLeaseTimeEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseTimeEntry.setDescription('configure rent term in address pool')
dhcpLeaseTimePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: dhcpLeaseTimePoolName.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseTimePoolName.setDescription('PoolName, simply specify a string which \n                      string size NO MORE THAN 8')
dhcpLeaseTimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("temp", 0), ("infinite", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseTimeType.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseTimeType.setDescription('rent time style,0 is temporarily rent,1 is forever rent')
dhcpLeaseTimeDay = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseTimeDay.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseTimeDay.setDescription('day,condition:dhcpLeaseTimeType=temp(0).')
dhcpLeaseTimeHours = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseTimeHours.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseTimeHours.setDescription('hour,condition:dhcpLeaseTimeType=temp(0).')
dhcpLeaseTimeMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseTimeMinutes.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseTimeMinutes.setDescription('hour,condition:dhcpLeaseTimeType=temp(0).')
dhcpLeaseTimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseTimeStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseTimeStatus.setDescription('Setting this to active(1) creates an entry.\n                       Setting this to destroy(2) destroys an entry.\n\t\t       default status is 0,no opperation')
dhcpPoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5), )
if mibBuilder.loadTexts: dhcpPoolOptionTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionTable.setDescription('configure pool of optional parameters')
dhcpPoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1), ).setIndexNames((0, "NAG-MIB", "dhcpPoolOptionName"), (0, "NAG-MIB", "dhcpPoolOptionIndex"))
if mibBuilder.loadTexts: dhcpPoolOptionEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionEntry.setDescription('configure pool of optional parameters')
dhcpPoolOptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: dhcpPoolOptionName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionName.setDescription('PoolName, simply specify a string which \n                      string size NO MORE THAN 8')
dhcpPoolOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: dhcpPoolOptionIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionIndex.setDescription('The index of option which has been set in this pool')
dhcpPoolOptionId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolOptionId.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionId.setDescription('dhcpPoolOptionId (0..254)')
dhcpPoolOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ipaddress", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolOptionType.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionType.setDescription('dhcpPoolOptionType')
dhcpPoolOption = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolOption.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOption.setDescription('\n           if dhcpPoolOptionType=1, ASCII string\n\t\t       if dhcpPoolOptionType=2, HEX string\n\t\t       if dhcpPoolOptionType=3,IP address')
dhcpPoolOptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolOptionStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionStatus.setDescription('optional parameters configure status')
dhcpServerExcludedIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6), )
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrTable.setDescription('dhcpServer Excluded IpAddr Table')
dhcpServerExcludedIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6, 1), ).setIndexNames((0, "NAG-MIB", "dhcpServerExcludedIpAddrLowIp"), (0, "NAG-MIB", "dhcpServerExcludedIpAddrHiIp"))
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrEntry.setDescription('dhcpServer Excluded IpAddrEntry')
dhcpServerExcludedIpAddrLowIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrLowIp.setStatus('current')
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrLowIp.setDescription('The excluded IP address, \n                        or first IP address in an excluded address range.')
dhcpServerExcludedIpAddrHiIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrHiIp.setStatus('current')
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrHiIp.setDescription('The last IP address in the excluded address range.')
dhcpServerExcludedIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrStatus.setDescription('Setting this to active(1) creates an entry.\n                       Setting this to destroy(2) destroys an entry.')
dhcpPoolDnsSerTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8), )
if mibBuilder.loadTexts: dhcpPoolDnsSerTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDnsSerTable.setDescription(' dhcpPool Dns Server Table:the maximum 8 dns is allowed\n\t\t\tthe first dns server has the highest priority.so address1 is highest priority,next is address2,address3...')
dhcpPoolDnsSerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1), ).setIndexNames((0, "NAG-MIB", "dhcpPoolDnsSerPoolName"))
if mibBuilder.loadTexts: dhcpPoolDnsSerEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDnsSerEntry.setDescription('is DHCP client configure DNS server')
dhcpPoolDnsSerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPoolDnsSerPoolName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDnsSerPoolName.setDescription('PoolName, simply specify a string which \n                      string size NO MORE THAN 8')
dhcpPoolDnsSerIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress1.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress1.setDescription('IP address,MUST.')
dhcpPoolDnsSerIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress2.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress2.setDescription('IP address,option')
dhcpPoolDnsSerIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress3.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress3.setDescription('IP address,option')
dhcpPoolDnsSerIpAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress4.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress4.setDescription('IP address,option')
dhcpPoolDnsSerIpAddress5 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress5.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress5.setDescription('IP address,option')
dhcpPoolDnsSerIpAddress6 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress6.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress6.setDescription('IP address,option')
dhcpPoolDnsSerIpAddress7 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress7.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress7.setDescription('IP address,option')
dhcpPoolDnsSerIpAddress8 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress8.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress8.setDescription('IP address,option')
dhcpPoolDnsSerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDnsSerStatus.setDescription('configure DNS server status')
dhcpPoolDefaultRouterTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9), )
if mibBuilder.loadTexts: dhcpPoolDefaultRouterTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDefaultRouterTable.setDescription('dhcpPoolDefaultRouterTable:\n          the maximum 8 default gateway address can be set,the first gateway has the highest priority,\n          So address1 has the highest priority,next is address2,address3...')
dhcpPoolDefaultRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1), ).setIndexNames((0, "NAG-MIB", "dhcpPoolDnsSerPoolName"))
if mibBuilder.loadTexts: dhcpPoolDefaultRouterEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDefaultRouterEntry.setDescription('DHCP client machine configure default gateway')
dhcpPoolDefaultRouterPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPoolDefaultRouterPoolName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDefaultRouterPoolName.setDescription('PoolName, simply specify a string which \n                      string size NO MORE THAN 8')
dhcpPoolDefaultRouterIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress1.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress1.setDescription('IP address,must')
dhcpPoolDefaultRouterIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress2.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress2.setDescription('IP address,option')
dhcpPoolDefaultRouterIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress3.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress3.setDescription('IP address,option')
dhcpPoolDefaultRouterIpAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress4.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress4.setDescription('IP address,option')
dhcpPoolDefaultRouterIpAddress5 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress5.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress5.setDescription('IP address,option')
dhcpPoolDefaultRouterIpAddress6 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress6.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress6.setDescription('IP address,option')
dhcpPoolDefaultRouterIpAddress7 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress7.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress7.setDescription('IP address,option')
dhcpPoolDefaultRouterIpAddress8 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress8.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress8.setDescription('IP address,option')
dhcpPoolDefaultRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDefaultRouterStatus.setDescription('configure default gateway state machine')
dhcpPoolNextServerTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10), )
if mibBuilder.loadTexts: dhcpPoolNextServerTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolNextServerTable.setDescription('dhcpPoolNextServerTable')
dhcpPoolNextServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1), ).setIndexNames((0, "NAG-MIB", "dhcpPoolNextServerPoolName"))
if mibBuilder.loadTexts: dhcpPoolNextServerEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolNextServerEntry.setDescription('dhcpPoolNextServerEntry')
dhcpPoolNextServerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPoolNextServerPoolName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolNextServerPoolName.setDescription('PoolName, simply specify a string which \n                      string size NO MORE THAN 8')
dhcpPoolNextServerIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress1.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress1.setDescription('IP address,must')
dhcpPoolNextServerIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress2.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress2.setDescription('IP address,option')
dhcpPoolNextServerIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress3.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress3.setDescription('IP address,option')
dhcpPoolNextServerIpAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress4.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress4.setDescription('IP address,option')
dhcpPoolNextServerIpAddress5 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress5.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress5.setDescription('IP address,option')
dhcpPoolNextServerIpAddress6 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress6.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress6.setDescription('IP address,option')
dhcpPoolNextServerIpAddress7 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress7.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress7.setDescription('IP address,option')
dhcpPoolNextServerIpAddress8 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress8.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress8.setDescription('IP address,option')
dhcpPoolNextServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolNextServerStatus.setDescription('status machine')
dhcpPoolWinsTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11), )
if mibBuilder.loadTexts: dhcpPoolWinsTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolWinsTable.setDescription('dhcpPoolWinsTable')
dhcpPoolWinsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1), ).setIndexNames((0, "NAG-MIB", "dhcpPoolDnsSerPoolName"))
if mibBuilder.loadTexts: dhcpPoolWinsEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolWinsEntry.setDescription('configure Wins sever address')
dhcpPoolWinsPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPoolWinsPoolName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolWinsPoolName.setDescription('PoolName, simply specify a string which \n                      string size NO MORE THAN 8')
dhcpPoolWinsIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress1.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress1.setDescription('IP address,must')
dhcpPoolWinsIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress2.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress2.setDescription('IP address,option')
dhcpPoolWinsIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress3.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress3.setDescription('IPaddress,option')
dhcpPoolWinsIpAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress4.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress4.setDescription('IP address,option')
dhcpPoolWinsIpAddress5 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress5.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress5.setDescription('IP address,option')
dhcpPoolWinsIpAddress6 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress6.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress6.setDescription('IP address,option')
dhcpPoolWinsIpAddress7 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress7.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress7.setDescription('IP address,option')
dhcpPoolWinsIpAddress8 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress8.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress8.setDescription('IP address,option')
dhcpPoolWinsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolWinsStatus.setDescription('configure wins server status machine')
dhcpServerLeaseBindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12), )
if mibBuilder.loadTexts: dhcpServerLeaseBindingTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseBindingTable.setDescription('express IP address and MAC address bind status')
dhcpServerLeaseBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1), ).setIndexNames((0, "NAG-MIB", "dhcpServerLeaseBindingIp"), (0, "NAG-MIB", "dhcpServerLeaseBindingType"))
if mibBuilder.loadTexts: dhcpServerLeaseBindingEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseBindingEntry.setDescription('express IP address and MAC address bind status')
dhcpServerLeaseBindingIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseBindingIp.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseBindingIp.setDescription('certain address appointed, format is x.x.x.x')
dhcpServerLeaseBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseBindingType.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseBindingType.setDescription('manual express handcraft bind style;dynamic express dynamic distribution style')
dhcpServerLeaseBindingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseBindingMac.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseBindingMac.setDescription('MAC address')
dhcpServerLeaseBindingLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseBindingLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseBindingLeaseTime.setDescription('rent term')
dhcpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3))
dhcpSnoopingEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noEnable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingEnable.setDescription('Enable the dhcp snooping function.')
dhcpSnoopingBindingEnalbe = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noEnable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingEnalbe.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingEnalbe.setDescription('Enable the dhcp snooping binding function.')
dhcpSnoopingVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingVlanEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingVlanEnable.setDescription(" Enable the dhcp snooping on vlan list string, the vlan list string is input \n\t\t\t\t\t\tlike as '1-2'. If the next time input the string '3-5',then the final vlan list\n\t\t\t\t\t\tis '1-5'.If input the string 'NULL',then delete the whole vlan list.")
dhcpSnoopingInformationEnalbe = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noEnable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingInformationEnalbe.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingInformationEnalbe.setDescription('Enable the dhcp snooping information function.')
dhcpSnoopingLimitRate = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingLimitRate.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingLimitRate.setDescription('Configration of dhcp packets rate on the switch, the default rate of dhcp packets received is 100 pps.')
dhcpSnoopingActionMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingActionMaxNum.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingActionMaxNum.setDescription('Configration of the maximum number of dhcp snooping action on a port, the default value is 10.')
dhcpSnoopingbindingARP = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notBindingARP", 0), ("bindingARP", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingbindingARP.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingbindingARP.setDescription('If set(0), the static ARP entry is not added when the dhcp snooping is created,\n\t\t\t            if set(1), the static ARP entry is added according to the dhcp snooping binding,\n\t\t\t            the priority of this static ARP entry is lower than that configured by administrator.')
dhcpSnoopingInformationOptionDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("colon", 0), ("dot", 1), ("slash", 2), ("space", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingInformationOptionDelimiter.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingInformationOptionDelimiter.setDescription('If set(0), then use colon to compart sub-option parameters,\n\t\t\t              set(1), use dot to compart sub-option parameters,\n\t\t\t\t\t\t  set(2), use slash to compart sub-option parameters,\n\t\t\t\t\t\t  set(3), use space to compart sub-option parameters\n\t\t\t\t\t\t  the default value is set(2).')
dhcpSnoopingInformationOptionSubscriberIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("hex", 0), ("acsii", 1), ("vs-hp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingInformationOptionSubscriberIDFormat.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingInformationOptionSubscriberIDFormat.setDescription('If set(0), then use hex format of vlan and mac address,\n\t\t\t              set(1), use ACSII format of vlan and mac address,\n\t\t\t\t\t\t  set(2), use vs-hp format to keep compatibility with HP,\n\t\t\t\t\t\t  the default value is set(1).')
dhcpSnoopingInformationOptionRemoteID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingInformationOptionRemoteID.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingInformationOptionRemoteID.setDescription("If input the 'standard' string ,then use vlan mac address format for option82 sub-option 2, \n\t\t\t             other string, that be used as romote ID of option82 sub-option 2,\n\t\t\t\t\t\t the default string is 'standard'.")
dhcpSnoopingInformationOptionAllowUntrusted = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllowUntrusted", 0), ("allowUntrusted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingInformationOptionAllowUntrusted.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingInformationOptionAllowUntrusted.setDescription('If set(0), the dhcp packets with option82 are discarded, \n\t\t\t\t\t\tif set (1), the dhcp packets with option82 are permitted, and the content of option82 is not changed.')
dhcpSnoopingOptionSelfDefinedSubscriberIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hex", 0), ("ascii", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOptionSelfDefinedSubscriberIDFormat.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOptionSelfDefinedSubscriberIDFormat.setDescription('If set(0), then use ASCII format to generate sub-scriber ID,\n\t\t\t              set(1), use hex format to generate sub-scriber ID,\n\t\t\t\t\t\t  the default value is set(1).')
dhcpSnoopingOptionSelfDefinedRemoteIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hex", 0), ("ascii", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOptionSelfDefinedRemoteIDFormat.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOptionSelfDefinedRemoteIDFormat.setDescription('If set(0), then use ASCII format to generate remote ID,\n\t\t\t              set(1), use hex format to generate remote ID,\n\t\t\t\t\t\t  the default value is set(1).')
dhcpSnoopingOptionSelfDefinedSubscriberID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOptionSelfDefinedSubscriberID.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOptionSelfDefinedSubscriberID.setDescription("If user does not configure the circuit-id of option82 explicitly on a port, then \n\t\t\t             the user can self define format to generate the circuit-id, the format options include\n\t\t\t\t\t\t vlan, port, ID, self designed string, the subscriber ID may be only one or any combination of \n\t\t\t\t\t\t them,and is strictly generated according to the sequence of format options, the ID option \n\t\t\t\t\t\t includes switch ID and remote-mac, but the user just selects only one of them, also In the \n\t\t\t\t\t\t swtich ID, it includes mac and hostname options, the user just selects only one of two, the \n\t\t\t\t\t\t maximum length of self-designed striing is 64.\n\t\t\t\t\t\t if user inputs the string 'NULL', then delete the last configuration.\n\t\t\t\t\t\t For example, if select vlan ,ID(swtich-id(mac)), and string 'str' format,\n\t\t\t\t\t\t the user can input the string like as 'vlan id swtich-id mac string str'.")
dhcpSnoopingOptionSelfDefinedRemoteID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOptionSelfDefinedRemoteID.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOptionSelfDefinedRemoteID.setDescription("If user does not configure the remote-id of option82 explicitly on a port, then \n\t\t\t             the user can self define format to generate the remote-id, the format options include\n\t\t\t\t\t\t mac,hostname and self designed string, the remote ID may be only one or any combination of \n\t\t\t\t\t\t them,and is strictly generated according to the sequence of format options, \n\t\t\t\t\t\t the maximum length of self designed striing is 32.\n\t\t\t\t\t\t If user inputs the string 'NULL', then delete the last configuration.\n\t\t\t\t\t\t For example, if select hostname,mac,and string 'str' format,\n\t\t\t\t\t\t the user can input the string like as 'hostname mac string str'.")
dhcpSnoopingClearBinding = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingClearBinding.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingClearBinding.setDescription("Clear the dhcp snooping bindings, the user can specify the mac address and vlan ID,\n\t\t\t\t\t\tor interface name and vlan ID ,or vlan ID, if input 'all' string, then clear all of the \n\t\t\t\t\t\tbindings,if input 'mac 00-24-e3-3a-f3-24 vlan 2', then clear the bindings with mac address \n\t\t\t\t\t\t00-24-e3-3a-f3-24 in the vlan 2, if input 'interface ethernet0/0/1 vlan 2', then clear all of \n\t\t\t\t\t\tthe bidings on the interface ethernet0/0/1 in the vlan 2, if input 'vlan 1' string ,then clear \n\t\t\t\t\t\tall of bindings in the vlan 1.")
dhcpSnoopingPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17), )
if mibBuilder.loadTexts: dhcpSnoopingPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortConfigTable.setDescription('After enable the dhcp snooping function, the administrator can configure the port information.')
dhcpSnoopingPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1), ).setIndexNames((0, "NAG-MIB", "dhcpSnoopingPortIndex"))
if mibBuilder.loadTexts: dhcpSnoopingPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortConfigEntry.setDescription('A conceptual row of dhcpSnoopingPortConfigTable.')
dhcpSnoopingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpSnoopingPortIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortIndex.setDescription('Configure the dhcp snooping function on the specified port.')
dhcpSnoopingUserControlMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingUserControlMaxNum.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingUserControlMaxNum.setDescription('Configure the maximum of the binding users on a port, the range of binding users number is \n\t\t              0-1024,the default number is 1024.')
dhcpSnoopingUserControl = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notEnable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingUserControl.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingUserControl.setDescription('If set(0), not enable the user control function on a specified port,\n\t\t               if set(1), enable the user control function on a specified port,\n\t\t\t\t\t   the default value is set(0).')
dhcpSnoopingTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingTrust.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingTrust.setDescription("Configure trust function on a port or vlan list string.If input the string 'all', then trust \n\t\t              all the vlan. If input the string '1-2', then only trust the DHCP packets with that \n\t\t\t\t\t  vlan ID is 1 or 2. If input string 'NULL', then close the trust function on the port.")
dhcpSnoopingBindingDot1x = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notEnable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingDot1x.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingDot1x.setDescription('If set(0), not enable to notify dhcp snooping binding information to Dot1x module,\n\t\t               if set(1), enable to notify dhcp snooping binding information to Dot1x module,\n\t\t\t\t\t   the default value is set(0).')
dhcpSnoopingSubScriberID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingSubScriberID.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingSubScriberID.setDescription("If input the 'standard' string ,then use vlan mac address format for option82 sub-option 2, \n\t\t\t             other string, that be used as romote ID of option82 sub-option 2,\n\t\t\t\t\t\t the default string is 'standard'.")
dhcpSnoopingAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAlarmCount.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAlarmCount.setDescription('Show the alarm count of dhcp snooping on a specified port.')
dhcpSnoopingBindingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingBindingCount.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingCount.setDescription('Show the binding count of dhcp snooping on a specified port.')
dhcpSnoopingPortActionTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18), )
if mibBuilder.loadTexts: dhcpSnoopingPortActionTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortActionTable.setDescription('After enable the dhcp snooping function, the administrator can configure the port action.')
dhcpSnoopingPortActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1), ).setIndexNames((0, "NAG-MIB", "dhcpSnoopingPortIndex"))
if mibBuilder.loadTexts: dhcpSnoopingPortActionEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortActionEntry.setDescription('A conceptual row of dhcpSnoopingPortActionTable.')
dhcpSnoopingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpSnoopingPort.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPort.setDescription('Configure the dhcp snooping function on the specified port.')
dhcpSnoopingActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAction", 0), ("shutdown", 1), ("blackhole", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingActionType.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingActionType.setDescription('If set(0), not to add any action, \n\t\t\t\t\t\t if set(1), add shutdown action ,\n\t\t\t\t\t\t and if set(2), add blackhole action on  a port when detectd the DHCP server protended .')
dhcpSnoopingActionRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingActionRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingActionRecoveryTime.setDescription('Configure the recovery time of action, the range time is 10-3600 seconds,\n\t\t\t\t\t\tthe default value is 30 seconds.')
dhcpSnoopingActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("destroy", 0), ("active", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingActionStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingActionStatus.setDescription('If set(0), then destory an aciton configured previously,\n\t\t\t\t\t\t if set(1), then configure an action on a port.')
dhcpSnoopingStaticBindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19), )
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingTable.setDescription('After enable the dhcp snooping function, the administrator can configure or delete the dhcp \n\t\t               snooping static binding.')
dhcpSnoopingStaticBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1), ).setIndexNames((0, "NAG-MIB", "dhcpSnoopingStaticBindingIP"))
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingEntry.setDescription('A conceptual row of dhcpSnoopingStaticBindingTable.')
dhcpSnoopingStaticBindingIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 1), IpAddress())
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingIP.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingIP.setDescription('The one IP address just only identifies one ack binding entry.')
dhcpSnoopingStaticBindingMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingMAC.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingMAC.setDescription('Configure the MAC address of the static binding.')
dhcpSnoopingStaticBindingMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingMask.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingMask.setDescription('Configure the IP address mask of the static binding.')
dhcpSnoopingStaticBindingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingPort.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingPort.setDescription('Configure the port of the static binding.')
dhcpSnoopingStaticBindingVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingVid.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingVid.setDescription('Configure the vlan ID of the static binding.')
dhcpSnoopingStaticBindingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("destory", 0), ("active", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingStatus.setDescription('If set(0), then distory a specified static binding that has been configured,\n\t\t               if set(1), create a specified static binding according to the input content.')
dhcpSnoopingAckBindingInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20), )
if mibBuilder.loadTexts: dhcpSnoopingAckBindingInfoTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAckBindingInfoTable.setDescription('Show the specified bindings after received the DHCP ACK packets.')
dhcpSnoopingAckBindingInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1), ).setIndexNames((0, "NAG-MIB", "dhcpSnoopingAckBindingIP"))
if mibBuilder.loadTexts: dhcpSnoopingAckBindingInfoEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAckBindingInfoEntry.setDescription('A conceptual row of dhcpSnoopingAckBindingInfoTable.')
dhcpSnoopingAckBindingIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 1), IpAddress())
if mibBuilder.loadTexts: dhcpSnoopingAckBindingIP.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAckBindingIP.setDescription('The one IP address just only identifies one ack binding entry.')
dhcpSnoopingAckBindingMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAckBindingMAC.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAckBindingMAC.setDescription('Show the MAC address of the ack binding.')
dhcpSnoopingAckBindingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAckBindingPort.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAckBindingPort.setDescription('Show the port index information of the ack binding.')
dhcpSnoopingAckBindingVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAckBindingVid.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAckBindingVid.setDescription('Show the Vid information of the ack bidning.')
dhcpSnoopingAckBindingLease = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAckBindingLease.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAckBindingLease.setDescription('Show the lease of the ack binding. The lease of static binding is infinite, the lease of dynamic binding comes from the DHCP \n\t\t               reply packets of dhcp server.')
dhcpSnoopingAckBindingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAckBindingFlag.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAckBindingFlag.setDescription("Show the type of the ack binding. The flag 'S' indentifies the static type binding, 'D' indentifies the dynamic type binding,\n                       'U' indentifies that bindings are uploaded from the server, 'O' indentifies that DHCP request packet is \n\t\t\t\t\t   with option82 information, 'X' indentifies that the bindings have been notified Dot1x module, and the \n                       client is control under the Dot1x function, 'L' indentifies that the binding entry has been sent to the driver,\n                       'E' indentifies that the notification to Dot1x module is failed.")
dhcpSnoopingRequestBindingInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21), )
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingInfoTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingInfoTable.setDescription('Show the specified bindings after received the DHCP request packets.')
dhcpSnoopingRequestBindingInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1), ).setIndexNames((0, "NAG-MIB", "dhcpSnoopingRequestBindingIP"))
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingInfoEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingInfoEntry.setDescription('A conceptual row of dhcpSnoopingRequestBindingInfoTable.')
dhcpSnoopingRequestBindingIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 1), IpAddress())
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingIP.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingIP.setDescription('The one IP address just only identifies one Request binding entry.')
dhcpSnoopingRequestBindingMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingMAC.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingMAC.setDescription('Show the MAC address of the Request binding.')
dhcpSnoopingRequestBindingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingPort.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingPort.setDescription('Show the port index information of the Request binding.')
dhcpSnoopingRequestBindingVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingVid.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingVid.setDescription('Show the Vid information of the Request binding.')
dhcpSnoopingRequestBindingLease = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingLease.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingLease.setDescription('Show the lease of the Request binding.')
dhcpSnoopingAlarmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22), )
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoTable.setDescription('Show the dhcp snooping alarm information.')
dhcpSnoopingAlarmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1), ).setIndexNames((0, "NAG-MIB", "dhcpSnoopingAlarmInfoPortIndex"), (0, "NAG-MIB", "dhcpSnoopingAlarmInfoNum"))
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoEntry.setDescription('A conceptual row of dhcpSnoopingAlarmInfoTable.')
dhcpSnoopingAlarmInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoPortIndex.setDescription('The port sequence of the alarm events.')
dhcpSnoopingAlarmInfoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 2), Integer32())
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoNum.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoNum.setDescription('The sequence of the alarm events on a port.')
dhcpSnoopingAlarmInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoType.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoType.setDescription('Show the type information of the alarm event.')
dhcpSnoopingAlarmInfoBlackholeMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoBlackholeMAC.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoBlackholeMAC.setDescription('Show the blackhole mac address of the alarm event.')
dhcpSnoopingAlarmInfoRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoRecoveryTime.setDescription('Show the recovery time of the alarm event.')
dhcpSnoopingAlarmInfoRecoveryActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoRecoveryActionStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoRecoveryActionStatus.setDescription('Show the status of the recovery  action.')
dhcpSnoopingStatisticTable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23))
dhcpSnoopingStatisticAlarmNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatisticAlarmNum.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingStatisticAlarmNum.setDescription('Show the total number of the alarm events.')
dhcpSnoopingStatisticAckBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatisticAckBindingNum.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingStatisticAckBindingNum.setDescription('Show the total number of the ack bindings.')
dhcpSnoopingStatisticRequestBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatisticRequestBindingNum.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingStatisticRequestBindingNum.setDescription('Show the total number of the request bindings.')
dhcpSnoopingStatisticDropPktsNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatisticDropPktsNum.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingStatisticDropPktsNum.setDescription('Show the total number of the drop packets.')
dhcpSnoopingStatisticDiscardPktsNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatisticDiscardPktsNum.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingStatisticDiscardPktsNum.setDescription('Show the total number of the discarded packets.')
dhcpSnoopingBlockedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24), )
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoTable.setDescription('Show the dhcp snooping blocked information.')
dhcpSnoopingBlockedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24, 1), ).setIndexNames((0, "NAG-MIB", "dhcpSnoopingBlockedInfoPortIndex"), (0, "NAG-MIB", "dhcpSnoopingBlockedInfoRecordingTime"))
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoEntry.setDescription('A conceptual row of dhcpSnoopingBlockedInfoTable.')
dhcpSnoopingBlockedInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoPortIndex.setDescription('The port sequence of the blocked information.')
dhcpSnoopingBlockedInfoRecordingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24, 1, 2), Integer32())
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoRecordingTime.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoRecordingTime.setDescription('The recording time of one blocked info entry  on a port.')
dhcpSnoopingBlockedInfoShow = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoShow.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoShow.setDescription('Show the blocked information of one blocked info entry.')
systemPriority = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemPriority.setStatus('current')
if mibBuilder.loadTexts: systemPriority.setDescription('Modify the system priority which is used by port group.')
portGroupTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2), )
if mibBuilder.loadTexts: portGroupTable.setStatus('current')
if mibBuilder.loadTexts: portGroupTable.setDescription('This table contains port group information associated \n        \twith the local system known to this agent.')
portGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1), ).setIndexNames((0, "NAG-MIB", "portGroupIndex"))
if mibBuilder.loadTexts: portGroupEntry.setStatus('current')
if mibBuilder.loadTexts: portGroupEntry.setDescription('Configure the port group information.')
portGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: portGroupIndex.setStatus('current')
if mibBuilder.loadTexts: portGroupIndex.setDescription('Port group number.')
portGroupMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupMemberCount.setStatus('current')
if mibBuilder.loadTexts: portGroupMemberCount.setDescription('The number of port group member.')
loadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16))).clone(namedValues=NamedValues(("dst-src-mac", 1), ("dst-src-ip", 2), ("src-mac", 3), ("dst-mac", 4), ("src-ip", 5), ("dst-ip", 6), ("dst-src-mac-ip", 7), ("enhance-profile", 8), ("dst-src-mac-vlan", 9), ("dst-src-ip-port", 10), ("dst-src-mac-ip-port", 13), ("dst-src-mac-vlan-normal", 14), ("dst-src-ip-port-normal", 15), ("dst-src-mac-ip-port-normal", 16)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: loadBalance.setStatus('current')
if mibBuilder.loadTexts: loadBalance.setDescription('Load balancing method:\n\t        dst-src-mac(1):destination and source mac address;\n\t        dst-src-ip(2):destination and source ip address;\n\t        src-mac(3):source mac address;\n\t        dst-mac(4):destination mac address;\n\t        src-ip(5):source ip address;\n\t        dst-ip(6):destination ip address;\n\t        dst-src-mac-ip(7):destination and source mac address, ip address;\n\t\t\tenhance-profile(8):enhance-profile;\n\t\t\tdst-src-mac-vlan(9):destination and source mac address, vlan;\n\t\t\tdst-src-ip-port(10):destination and source ip address, port;\n\t\t\tdst-src-mac-ip-port(13):destination and source mac address, ip address, port;\n\t\t\tdst-src-mac-vlan-normal(14):destination and source mac address, vlan, normal;\n\t\t\tdst-src-ip-port-normal(15):destination and source ip address, port, normal;\n\t\t\tdst-src-mac-ip-port-normal(16):destination and source mac address, ip address, port, normal.\n\t        If there is no member in the port group, the value is -1.\n\t        If you set value to the load balance method that your switch is not unsupported, it will return error. \n\t        Please see the handbook and make sure that the load balance method is supported by your switch.')
portGroupInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupInfo.setStatus('current')
if mibBuilder.loadTexts: portGroupInfo.setDescription('Port group brief information. Format is ID, Mode, Partner ID, Ports and Load-balance.\n\t        If there is no member in the port group, the value is empty.')
portGroupPortListTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3), )
if mibBuilder.loadTexts: portGroupPortListTable.setStatus('current')
if mibBuilder.loadTexts: portGroupPortListTable.setDescription('This table contains port group member information associated \n        \twith the local system known to this agent.')
portGroupPortListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1), ).setIndexNames((0, "NAG-MIB", "portGroupIndex"), (0, "NAG-MIB", "portGroupMemberIndex"))
if mibBuilder.loadTexts: portGroupPortListEntry.setStatus('current')
if mibBuilder.loadTexts: portGroupPortListEntry.setDescription('Configure the port group member information.')
portGroupMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: portGroupMemberIndex.setStatus('current')
if mibBuilder.loadTexts: portGroupMemberIndex.setDescription('Port group member index. Format is group number and port index of member.')
portGroupMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupMemberName.setStatus('current')
if mibBuilder.loadTexts: portGroupMemberName.setDescription('The name of port group member.')
portGroupMemberMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupMemberMode.setStatus('current')
if mibBuilder.loadTexts: portGroupMemberMode.setDescription('The mode of port group member.')
portGroupMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portGroupMemberPriority.setStatus('current')
if mibBuilder.loadTexts: portGroupMemberPriority.setDescription('The port priority of port group member. If the port group mode is on, the value is -1.')
portGroupMemberTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("long", 0), ("short", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupMemberTimeout.setStatus('current')
if mibBuilder.loadTexts: portGroupMemberTimeout.setDescription('The timeout mode of port group member. If the port group mode is on, the value is -1.')
portGroupMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unselected", 0), ("selected", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupMemberStatus.setStatus('current')
if mibBuilder.loadTexts: portGroupMemberStatus.setDescription('The status of port group member. If the port group mode is on, the value is -1.')
snmpSecurityIpStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpSecurityIpStatus.setStatus('current')
if mibBuilder.loadTexts: snmpSecurityIpStatus.setDescription('Enable or disable secure IP address check function on the NMS.')
snmpTrapHostStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapHostStatus.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostStatus.setDescription('Enable the switch to send Trap message.\n\t         This command is used for SNMP v1/v2.')
snmpRmonStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpRmonStatus.setStatus('current')
if mibBuilder.loadTexts: snmpRmonStatus.setDescription('Enable/disable RMON.')
securityIpTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4), )
if mibBuilder.loadTexts: securityIpTable.setStatus('current')
if mibBuilder.loadTexts: securityIpTable.setDescription('A list of snmp securityIp entries.')
securityIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4, 1), ).setIndexNames((0, "NAG-MIB", "securityIpIndex"))
if mibBuilder.loadTexts: securityIpEntry.setStatus('current')
if mibBuilder.loadTexts: securityIpEntry.setDescription('Configure the secure IP address which is \n          allowed to access the switch on the NMS;')
securityIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: securityIpIndex.setStatus('current')
if mibBuilder.loadTexts: securityIpIndex.setDescription('Index.')
securityIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: securityIpAddress.setStatus('current')
if mibBuilder.loadTexts: securityIpAddress.setDescription('The address of security.')
securityIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: securityIpStatus.setStatus('current')
if mibBuilder.loadTexts: securityIpStatus.setDescription('Writing this to active(1) creates an entry.\n         Writing this to destroy(2) destroys an entry.')
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5), )
if mibBuilder.loadTexts: trapDestTable.setStatus('current')
if mibBuilder.loadTexts: trapDestTable.setDescription('A list of trap destination entries.')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1), ).setIndexNames((0, "NAG-MIB", "trapDestIndex"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('current')
if mibBuilder.loadTexts: trapDestEntry.setDescription('This entry includes a destination IP address to which to send\n        traps for this community.')
trapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: trapDestIndex.setStatus('current')
if mibBuilder.loadTexts: trapDestIndex.setDescription('Index')
trapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestAddress.setStatus('current')
if mibBuilder.loadTexts: trapDestAddress.setDescription('The address to send traps.')
trapDestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("version1", 0), ("version2", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestVersion.setStatus('current')
if mibBuilder.loadTexts: trapDestVersion.setDescription('This variables represent the version of the Trap we wish to send to trap Receiver.\n         If the value is 0, mean we wish to send Version 1 trap. If the value is 1,\n         mean we wish to send version 2 trap. ')
trapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestCommunity.setStatus('current')
if mibBuilder.loadTexts: trapDestCommunity.setDescription('A community to which this destination address belongs.')
trapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestStatus.setStatus('current')
if mibBuilder.loadTexts: trapDestStatus.setDescription('Writing this to active(1) creates an entry.\n         Writing this to destroy(2) destroys an entry.')
arpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1))
routeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2))
arpCacheDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("delete", 1), ("noDelete", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpCacheDeleteAll.setStatus('current')
if mibBuilder.loadTexts: arpCacheDeleteAll.setDescription('when set , triger flush arp-cache, when get ,nosense')
arpCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpCacheTimeout.setStatus('current')
if mibBuilder.loadTexts: arpCacheTimeout.setDescription('arp cache timeout time')
arpSecurityUpdateProtectALL = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpSecurityUpdateProtectALL.setStatus('current')
if mibBuilder.loadTexts: arpSecurityUpdateProtectALL.setDescription('global enable or disable arp security update protect')
arpSecurityLearnProtectALL = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpSecurityLearnProtectALL.setStatus('current')
if mibBuilder.loadTexts: arpSecurityLearnProtectALL.setDescription('global enable or disable arp security learn protect')
arpSecurityConvertALL = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpSecurityConvertALL.setStatus('current')
if mibBuilder.loadTexts: arpSecurityConvertALL.setDescription('global convert dynamic arp-cache to static arp item .enable mean convert')
arpSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6), )
if mibBuilder.loadTexts: arpSecurityTable.setStatus('current')
if mibBuilder.loadTexts: arpSecurityTable.setDescription('arp security table')
arpsecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1), ).setIndexNames((0, "NAG-MIB", "arpSecurityIfindex"))
if mibBuilder.loadTexts: arpsecurityEntry.setStatus('current')
if mibBuilder.loadTexts: arpsecurityEntry.setDescription(' index is L3 interface index')
arpSecurityIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: arpSecurityIfindex.setStatus('current')
if mibBuilder.loadTexts: arpSecurityIfindex.setDescription('L3 interface index')
arpSecurityUpdateProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpSecurityUpdateProtect.setStatus('current')
if mibBuilder.loadTexts: arpSecurityUpdateProtect.setDescription('enable or disable arp security update protect on the current port')
arpSecurityLearnProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpSecurityLearnProtect.setStatus('current')
if mibBuilder.loadTexts: arpSecurityLearnProtect.setDescription('enable or disable arp security learn protect on the current port')
arpSecurityConvert = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpSecurityConvert.setStatus('current')
if mibBuilder.loadTexts: arpSecurityConvert.setDescription('convert dynamic arp-cache to static arp item on the port.enable mean convert,get OPS is nosense')
arpProxyArpTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 7), )
if mibBuilder.loadTexts: arpProxyArpTable.setStatus('current')
if mibBuilder.loadTexts: arpProxyArpTable.setDescription(' configure arp proxy list')
arpProxyArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 7, 1), ).setIndexNames((0, "NAG-MIB", "arpProxyArpIfIndex"))
if mibBuilder.loadTexts: arpProxyArpEntry.setStatus('current')
if mibBuilder.loadTexts: arpProxyArpEntry.setDescription(' index is L3 interface index')
arpProxyArpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: arpProxyArpIfIndex.setStatus('current')
if mibBuilder.loadTexts: arpProxyArpIfIndex.setDescription(' L3 interface index')
arpProxyArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpProxyArpStatus.setStatus('current')
if mibBuilder.loadTexts: arpProxyArpStatus.setDescription('arp proxy enable')
arpStacticTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8), )
if mibBuilder.loadTexts: arpStacticTable.setStatus('current')
if mibBuilder.loadTexts: arpStacticTable.setDescription(' static state arp configuration list')
arpStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1), ).setIndexNames((0, "NAG-MIB", "arpProxyArpIfIndex"), (0, "NAG-MIB", "arpStaticIpaddress"))
if mibBuilder.loadTexts: arpStaticEntry.setStatus('current')
if mibBuilder.loadTexts: arpStaticEntry.setDescription(" index is 'arpProxyArpIfIndex.arpStaticIpaddress'.")
arpStaticIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: arpStaticIfindex.setStatus('current')
if mibBuilder.loadTexts: arpStaticIfindex.setDescription(' L3 interface index')
arpStaticIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 2), IpAddress())
if mibBuilder.loadTexts: arpStaticIpaddress.setStatus('current')
if mibBuilder.loadTexts: arpStaticIpaddress.setDescription('ip address')
arpStaticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 3), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpStaticMac.setStatus('current')
if mibBuilder.loadTexts: arpStaticMac.setDescription(' the Mac address of the arp item')
arpStaticPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpStaticPortIndex.setStatus('current')
if mibBuilder.loadTexts: arpStaticPortIndex.setDescription('the port index of the arp item')
arpStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("waitingforset", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpStaticStatus.setStatus('current')
if mibBuilder.loadTexts: arpStaticStatus.setDescription('valid(1),this is a active arp when get/getnext; when set,mean create the static arp item\n            \t\tinvalid(2); when set, mean destory the current arp item\n            \t\twaitingforset(3); reserved')
ipStaticRouteExtTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1), )
if mibBuilder.loadTexts: ipStaticRouteExtTable.setStatus('current')
if mibBuilder.loadTexts: ipStaticRouteExtTable.setDescription(' static route configuration list')
ipStaticRouteExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1), ).setIndexNames((0, "NAG-MIB", "ipStaticRouteExtDest"), (0, "NAG-MIB", "ipStaticRouteExtMask"))
if mibBuilder.loadTexts: ipStaticRouteExtEntry.setStatus('current')
if mibBuilder.loadTexts: ipStaticRouteExtEntry.setDescription('The index of this table is ip.mask')
ipStaticRouteExtDest = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipStaticRouteExtDest.setStatus('current')
if mibBuilder.loadTexts: ipStaticRouteExtDest.setDescription('static route of intention net segment')
ipStaticRouteExtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipStaticRouteExtMask.setStatus('current')
if mibBuilder.loadTexts: ipStaticRouteExtMask.setDescription('mask')
ipStaticRouteExtNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipStaticRouteExtNextHop.setStatus('current')
if mibBuilder.loadTexts: ipStaticRouteExtNextHop.setDescription(' next step ip')
ipStaticRouteExtMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipStaticRouteExtMetric.setStatus('current')
if mibBuilder.loadTexts: ipStaticRouteExtMetric.setDescription(' Manage distance/PRI')
ipStaticRouteExtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("waitingforset", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipStaticRouteExtStatus.setStatus('current')
if mibBuilder.loadTexts: ipStaticRouteExtStatus.setDescription(" When you get/getnext one entry, the meaning of 'valid' is that the static route which you get is \n                valid (or active); when you want to configure one static route, 'valid/creating' stand for setting one \n                entry, and 'invalid/destory' stands for delete the static route.")
dvmrpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5))
dvmrpScalar = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 1))
dvmrpVersionString = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpVersionString.setStatus('current')
if mibBuilder.loadTexts: dvmrpVersionString.setDescription("The router's DVMRP version information.  Similar to\n            sysDescr in MIB-II, this is a free-form field which can be\n            used to display vendor-specific information.")
dvmrpNumRoutes = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNumRoutes.setStatus('current')
if mibBuilder.loadTexts: dvmrpNumRoutes.setDescription('The number of entries in the routing table.  This can be\n            used to monitor the routing table size.')
dvmrpReachableRoutes = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpReachableRoutes.setStatus('current')
if mibBuilder.loadTexts: dvmrpReachableRoutes.setDescription('The number of entries in the routing table with non\n            infinite metrics.  This can be used to detect network\n            partitions by observing the ratio of reachable routes to\n            total routes.')
dvmrpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2), )
if mibBuilder.loadTexts: dvmrpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceTable.setDescription("The (conceptual) table listing the router's multicast-\n            capable interfaces.")
dvmrpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1), ).setIndexNames((0, "NAG-MIB", "dvmrpInterfaceIndex"))
if mibBuilder.loadTexts: dvmrpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceEntry.setDescription('An entry (conceptual row) in the dvmrpInterfaceTable.  This\n            row augments ipMRouteInterfaceEntry in the IP Multicast MIB,\n            where the threshold object resides.')
dvmrpInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceIndex.setDescription('The ifIndex value of the interface for which DVMRP is\n            enabled.')
dvmrpInterfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceLocalAddress.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceLocalAddress.setDescription('The IP address this system will use as a source address on\n            this interface.  On unnumbered interfaces, it must be the\n            same value as dvmrpInterfaceLocalAddress for some interface\n            on the system.')
dvmrpInterfaceMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dvmrpInterfaceMetric.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceMetric.setDescription('The distance metric for this interface which is used to\n            calculate distance vectors.')
dvmrpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dvmrpInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceStatus.setDescription('The status of this entry.  Creating the entry enables DVMRP\n            on the virtual interface; destroying the entry or setting it\n            to notInService disables DVMRP on the virtual interface.')
dvmrpInterfaceRcvBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceRcvBadPkts.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceRcvBadPkts.setDescription('The number of DVMRP messages received on the interface by\n            the DVMRP process which were subsequently discarded as\n            invalid (e.g. invalid packet format, or a route report from\n            an unknown neighbor).')
dvmrpInterfaceRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceRcvBadRoutes.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceRcvBadRoutes.setDescription('The number of routes, in valid DVMRP packets, which were\n            ignored because the entry was invalid.')
dvmrpInterfaceSentRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceSentRoutes.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceSentRoutes.setDescription('The number of routes, in DVMRP Report packets, which have\n            been sent on this interface.  Together with\n            dvmrpNeighborRcvRoutes at a peer, this object is useful for\n            detecting routes being lost.')
dvmrpInterfaceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceKey.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceKey.setDescription('The (shared) key for authenticating neighbors on this\n            interface.  This object is intended solely for the purpose\n            of setting the interface key, and MUST be accessible only\n            via requests using both authentication and privacy.  The\n            agent MAY report an empty string in response to get, get-\n            next, get-bulk requests.')
dvmrpInterfaceKeyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceKeyVersion.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceKeyVersion.setDescription('The highest version number of all known interface keys for\n            this interface used for authenticating neighbors.')
dvmrpInterfaceGenerationId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceGenerationId.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceGenerationId.setDescription('The generation identifier for the interface.  This is used\n            by neighboring routers to detect whether the DVMRP routing\n            table should be resent.')
dvmrpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3), )
if mibBuilder.loadTexts: dvmrpNeighborTable.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborTable.setDescription("The (conceptual) table listing the router's DVMRP\n            neighbors, as discovered by receiving DVMRP messages.")
dvmrpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1), ).setIndexNames((0, "NAG-MIB", "dvmrpNeighborIfIndex"), (0, "NAG-MIB", "dvmrpNeighborAddress"))
if mibBuilder.loadTexts: dvmrpNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborEntry.setDescription('An entry (conceptual row) in the dvmrpNeighborTable.')
dvmrpNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborIfIndex.setDescription('The value of ifIndex for the virtual interface used to\n            reach this DVMRP neighbor.')
dvmrpNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborAddress.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborAddress.setDescription('The IP address of the DVMRP neighbor for which this entry\n            contains information.')
dvmrpNeighborUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborUpTime.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborUpTime.setDescription('The time since this DVMRP neighbor (last) became a neighbor\n            of the local router.')
dvmrpNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborExpiryTime.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborExpiryTime.setDescription('The minimum time remaining before this DVMRP neighbor will\n            be aged out.')
dvmrpNeighborGenerationId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborGenerationId.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborGenerationId.setDescription("The neighboring router's generation identifier.")
dvmrpNeighborMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborMajorVersion.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborMajorVersion.setDescription("The neighboring router's major DVMRP version number.")
dvmrpNeighborMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborMinorVersion.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborMinorVersion.setDescription("The neighboring router's minor DVMRP version number.")
dvmrpNeighborCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 8), Bits().clone(namedValues=NamedValues(("leaf", 0), ("prune", 1), ("generationID", 2), ("mtrace", 3), ("snmp", 4), ("netmask", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborCapabilities.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborCapabilities.setDescription("This object describes the neighboring router's\n            capabilities.  The leaf bit indicates that the neighbor has\n            only one interface with neighbors.  The prune bit indicates\n            that the neighbor supports pruning.  The generationID bit\n            indicates that the neighbor sends its generationID in Probe\n            messages.  The mtrace bit indicates that the neighbor can\n            handle mtrace requests. The snmp bit indicates that the \n            neighbor support snmp. The netmask bit indicates that the \n            neighbor support netmask.")
dvmrpNeighborRcvRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborRcvRoutes.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborRcvRoutes.setDescription('The total number of routes received in valid DVMRP packets\n            received from this neighbor.  This can be used to diagnose\n            problems such as unicast route injection, as well as giving\n            an indication of the level of DVMRP route exchange\n            activity.')
dvmrpNeighborRcvBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborRcvBadPkts.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborRcvBadPkts.setDescription('The number of packet received from this neighbor which were\n            discarded as invalid.')
dvmrpNeighborRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborRcvBadRoutes.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborRcvBadRoutes.setDescription('The number of routes, in valid DVMRP packets received from\n            this neighbor, which were ignored because the entry was\n            invalid.')
dvmrpNeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneway", 1), ("active", 2), ("ignoring", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborState.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborState.setDescription('State of the neighbor adjacency.')
dvmrpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4), )
if mibBuilder.loadTexts: dvmrpRouteTable.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteTable.setDescription('The table of routes learned through DVMRP route exchange.')
dvmrpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1), ).setIndexNames((0, "NAG-MIB", "dvmrpRouteSource"), (0, "NAG-MIB", "dvmrpRouteSourceMask"))
if mibBuilder.loadTexts: dvmrpRouteEntry.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteEntry.setDescription('An entry (conceptual row) containing the multicast routing\n            information used by DVMRP in place of the unicast routing\n            information.')
dvmrpRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteSource.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteSource.setDescription('The network address which when combined with the\n            corresponding value of dvmrpRouteSourceMask identifies the\n            sources for which this entry contains multicast routing\n            information.')
dvmrpRouteSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteSourceMask.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteSourceMask.setDescription('The network mask which when combined with the corresponding\n            value of dvmrpRouteSource identifies the sources for which\n            this entry contains multicast routing information.')
dvmrpRouteUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteUpstreamNeighbor.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteUpstreamNeighbor.setDescription('The address of the upstream neighbor (e.g., RPF neighbor)\n            from which IP datagrams from these sources are received.')
dvmrpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteIfIndex.setDescription('The value of ifIndex for the interface on which IP\n            datagrams sent by these sources are received.  A value of 0\n            typically means the route is an aggregate for which no next-\n            hop interface exists.')
dvmrpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteMetric.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteMetric.setDescription('The distance in hops to the source subnet.')
dvmrpRouteExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteExpiryTime.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteExpiryTime.setDescription('The minimum amount of time remaining before this entry will\n            be aged out.')
dvmrpRouteUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteUpTime.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteUpTime.setDescription('The time since the route represented by this entry was\n            learned by the router.')
dvmrpRouteNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5), )
if mibBuilder.loadTexts: dvmrpRouteNextHopTable.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteNextHopTable.setDescription('The (conceptual) table containing information on the next\n            hops on outgoing interfaces for routing IP multicast\n            datagrams.')
dvmrpRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1), ).setIndexNames((0, "NAG-MIB", "dvmrpRouteNextHopSource"), (0, "NAG-MIB", "dvmrpRouteNextHopSourceMask"), (0, "NAG-MIB", "dvmrpRouteNextHopIfIndex"))
if mibBuilder.loadTexts: dvmrpRouteNextHopEntry.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteNextHopEntry.setDescription('An entry (conceptual row) in the list of next hops on\n            outgoing interfaces to which IP multicast datagrams from\n            particular sources are routed.')
dvmrpRouteNextHopSource = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteNextHopSource.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteNextHopSource.setDescription('The network address which when combined with the\n            corresponding value of dvmrpRouteNextHopSourceMask\n            identifies the sources for which this entry specifies a next\n            hop on an outgoing interface.')
dvmrpRouteNextHopSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteNextHopSourceMask.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteNextHopSourceMask.setDescription('The network mask which when combined with the corresponding\n            value of dvmrpRouteNextHopSource identifies the sources for\n            which this entry specifies a next hop on an outgoing\n            interface.')
dvmrpRouteNextHopIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteNextHopIfIndex.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteNextHopIfIndex.setDescription('The ifIndex value of the interface for the outgoing\n            interface for this next hop.')
dvmrpRouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leaf", 1), ("branch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteNextHopType.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteNextHopType.setDescription('Type is leaf if no downstream dependent neighbors exist on\n            the outgoing virtual interface.  Otherwise, type is branch.')
dvmrpPruneTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6), )
if mibBuilder.loadTexts: dvmrpPruneTable.setStatus('current')
if mibBuilder.loadTexts: dvmrpPruneTable.setDescription("The (conceptual) table listing the router's upstream prune\n            state.")
dvmrpPruneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1), ).setIndexNames((0, "NAG-MIB", "dvmrpPruneGroup"), (0, "NAG-MIB", "dvmrpPruneSource"), (0, "NAG-MIB", "dvmrpPruneSourceMask"))
if mibBuilder.loadTexts: dvmrpPruneEntry.setStatus('current')
if mibBuilder.loadTexts: dvmrpPruneEntry.setDescription('An entry (conceptual row) in the dvmrpPruneTable.')
dvmrpPruneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpPruneGroup.setStatus('current')
if mibBuilder.loadTexts: dvmrpPruneGroup.setDescription('The group address which has been pruned.')
dvmrpPruneSource = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpPruneSource.setStatus('current')
if mibBuilder.loadTexts: dvmrpPruneSource.setDescription('The address of the source or source network which has been\n            pruned.')
dvmrpPruneSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpPruneSourceMask.setStatus('current')
if mibBuilder.loadTexts: dvmrpPruneSourceMask.setDescription("The address of the source or source network which has been\n            pruned.  The mask must either be all 1's, or else\n            dvmrpPruneSource and dvmrpPruneSourceMask must match\n            dvmrpRouteSource and dvmrpRouteSourceMask for some entry in\n            the dvmrpRouteTable.")
dvmrpPruneExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpPruneExpiryTime.setStatus('current')
if mibBuilder.loadTexts: dvmrpPruneExpiryTime.setDescription("The amount of time remaining before this prune should\n            expire at the upstream neighbor.  This value should be the\n            minimum of the default prune lifetime and the remaining\n            prune lifetimes of the local router's downstream neighbors,\n            if any.")
ripMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3))
ospfMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4))
ripTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 1))
ripUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2147483647)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripUpdateTime.setStatus('current')
if mibBuilder.loadTexts: ripUpdateTime.setDescription('The update time in seconds controls the advertising of regular\n                     update messages. The real working model, while using this\n                     timer, the time should be offset by a small random time\n                     (+/- 0 to 5 seconds each time it is set.')
ripTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2147483647)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripTimeoutTime.setStatus('current')
if mibBuilder.loadTexts: ripTimeoutTime.setDescription('The timeout timer in seconds governs the validity of a route.\n                     It is initialized when a route is established, and any time\n                     an update message is received for the route. If the setting time\n                     elapses from the last time the timrout was initialized, the route\n                     is considered to have expired, and the hop count of the route is\n                     set to infinite. It should be at least three times the value of \n                     update timer.')
ripGarbageCollectionTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2147483647)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripGarbageCollectionTime.setStatus('current')
if mibBuilder.loadTexts: ripGarbageCollectionTime.setDescription('When the information about a route becomes invalid, the system\n                     should not immediately purge that route from its table. Instead,\n                     it continues to advertise the route with a metric of infinite.\n                     At the same time, the garbage-collection timer is set for that \n                     route. When the count reaches zero, the route is purged from the\n                     the table. This timer allows neighbors to become aware of \n                     the invalidity of a route prior to purging.')
ripRoutingProcessStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 2), EnabledStatusPrivate().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripRoutingProcessStatus.setStatus('current')
if mibBuilder.loadTexts: ripRoutingProcessStatus.setDescription('Enable or Disable RIP routing process on a system.')
ripRouterVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2))).clone('rip2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripRouterVersion.setStatus('current')
if mibBuilder.loadTexts: ripRouterVersion.setDescription('To specify a RIP version used globally by the rourter.')
ripInstabilityPreventingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 4), )
if mibBuilder.loadTexts: ripInstabilityPreventingTable.setStatus('current')
if mibBuilder.loadTexts: ripInstabilityPreventingTable.setDescription('A list of RIP instability preventing status')
ripInstabilityPreventingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 4, 1), ).setIndexNames((0, "NAG-MIB", "ripVlanIndex"))
if mibBuilder.loadTexts: ripInstabilityPreventingEntry.setStatus('current')
if mibBuilder.loadTexts: ripInstabilityPreventingEntry.setDescription("An entry in the table, containing information\n                     about RIP instability preventing configuration.\n                     The ifIndex index is a VLAN's ifIndex")
ripVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ripVlanIndex.setDescription('This is defined as a VLAN interface.\n                     A routing interface is a VLAN binds a IP\n                     subnet.')
ripSplitHorizonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 0, 1))).clone(namedValues=NamedValues(("splitHorizon", 2), ("poisonReverse", 0), ("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripSplitHorizonStatus.setStatus('current')
if mibBuilder.loadTexts: ripSplitHorizonStatus.setDescription('Enable or Disable RIP instability preventing status on an interface')
ripStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: ripStatisticsReset.setDescription("Write it to reset(1), the following objects in RFC 1724 \n                     should be reset: \n                     1. Global Counters:\n                        'rip2GlobalRouteChanges',\n                        'rip2GlobalQueries'.\n                     2. Interface Status Table, for each 'rip2IfStatAddress':\n                        'rip2IfStatRcvBadPackets',\n                        'rip2IfStatRcvBadRoutes',\n                        'rip2IfStatSendUpdates'\n                     3. Peer Table, for each 'rip2PeerAddress' and 'rip2PeerDomain',\n                        'rip2PeerRcvBadPackets',\n                        'rip2PeerRcvBadRoutes'\n                     When read it, this value always is noReset(2).")
ripNetworkInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 6), )
if mibBuilder.loadTexts: ripNetworkInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ripNetworkInterfaceTable.setDescription('')
ripNetworkInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 6, 1), ).setIndexNames((0, "NAG-MIB", "ripNetworkInterfaceAddress"))
if mibBuilder.loadTexts: ripNetworkInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: ripNetworkInterfaceEntry.setDescription('')
ripNetworkInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetworkInterfaceAddress.setStatus('current')
if mibBuilder.loadTexts: ripNetworkInterfaceAddress.setDescription('The RIP Network address(the ip address of the interface).')
ripNetworkInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 6, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNetworkInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: ripNetworkInterfaceStatus.setDescription('Set this variable to create or destroy a RIP network address.\n         ValidStatus:\n         A simple status value for the object to create and destroy\n         a table entry. This is a simplified variant of RowStatus as it\n         supports only two values. Setting it to valid(1) creates an entry.\n         Setting it to invalid(0) destroys an entry.')
ripNetworkAddrTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7), )
if mibBuilder.loadTexts: ripNetworkAddrTable.setStatus('current')
if mibBuilder.loadTexts: ripNetworkAddrTable.setDescription('')
ripNetworkAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7, 1), ).setIndexNames((0, "NAG-MIB", "ripNetworkAddrAddress"), (0, "NAG-MIB", "ripNetworkAddrPrefixLen"))
if mibBuilder.loadTexts: ripNetworkAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ripNetworkAddrEntry.setDescription('')
ripNetworkAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetworkAddrAddress.setStatus('current')
if mibBuilder.loadTexts: ripNetworkAddrAddress.setDescription('The RIP Network address.')
ripNetworkAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetworkAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: ripNetworkAddrPrefixLen.setDescription('The RIP Network prefix length of address.')
ripNetworkAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNetworkAddrStatus.setStatus('current')
if mibBuilder.loadTexts: ripNetworkAddrStatus.setDescription('Set this variable to create or destroy a RIP network address.\n         ValidStatus:\n         A simple status value for the object to create and destroy\n         a table entry. This is a simplified variant of RowStatus as it\n         supports only two values. Setting it to valid(1) creates an entry.\n         Setting it to invalid(0) destroys an entry.')
ospfSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1))
ospfRouterIdType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2))).clone('auto')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRouterIdType.setStatus('current')
if mibBuilder.loadTexts: ospfRouterIdType.setDescription('Set router ID automatically or  manually.')
ospfRfc1583CompatibleState = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 2), EnabledStatusPrivate().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfRfc1583CompatibleState.setStatus('current')
if mibBuilder.loadTexts: ospfRfc1583CompatibleState.setDescription('Enable or disable rfc1583 compatibility.')
ospfAutoCost = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAutoCost.setStatus('current')
if mibBuilder.loadTexts: ospfAutoCost.setDescription('Set the reference bandwith of auto cost, the unit is Mbps.')
ospfAdvertiseDefaultRoute = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("always", 1), ("notAlways", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAdvertiseDefaultRoute.setStatus('current')
if mibBuilder.loadTexts: ospfAdvertiseDefaultRoute.setDescription('If always is set, always advertises the default route regardless \n                     \tof whether the default route exists;If notalways is set ,advertises \n                     \tthe default route when the router have the default route.')
ospfDefaultExternalMetric = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 5), OspfBigMetric()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfDefaultExternalMetric.setStatus('current')
if mibBuilder.loadTexts: ospfDefaultExternalMetric.setDescription('Metric used for generating the default route.')
ospfSpfHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfSpfHoldTime.setStatus('current')
if mibBuilder.loadTexts: ospfSpfHoldTime.setDescription('Sets the hold time between two consecutive SPF calculations.')
ospfSpfDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfSpfDelayTime.setStatus('current')
if mibBuilder.loadTexts: ospfSpfDelayTime.setDescription('Sets the delay time to calculate SPF Delay time, in seconds, between \n                         when OSPF receives a topology change and when it starts an SPF calculation.')
ospfAreaNumber = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNumber.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNumber.setDescription('Records the OSPF area numbers.')
clearOspfProcess = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearOspfProcess.setStatus('current')
if mibBuilder.loadTexts: clearOspfProcess.setDescription('clear ip ospf process by process ID.')
ospfNssaTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2), )
if mibBuilder.loadTexts: ospfNssaTable.setStatus('current')
if mibBuilder.loadTexts: ospfNssaTable.setDescription('A conceptually table for ospfNssaEntry.')
ospfNssaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1), ).setIndexNames((0, "NAG-MIB", "ospfNssaAreaId"))
if mibBuilder.loadTexts: ospfNssaEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNssaEntry.setDescription('A conceptually row for ospfNssaTable.')
ospfNssaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1, 1), OspfAreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNssaAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfNssaAreaId.setDescription('The 32-bit identifier for the NSSA. On creation, \n            this can be derived from the instance.')
ospfNssaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1, 2), EnabledStatusPrivate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNssaStatus.setStatus('current')
if mibBuilder.loadTexts: ospfNssaStatus.setDescription('The status of this conceptual row entry. This object isused to manage the\n\t\t\tcreation and deletion of conceptual rows.')
ospfNssaRedistributeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1, 3), EnabledStatusPrivate().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNssaRedistributeStatus.setStatus('current')
if mibBuilder.loadTexts: ospfNssaRedistributeStatus.setDescription('Enabled or disabled to import routes only into the normal areas,\n            but not into the NSSA area.')
ospfNssaOriginateDefaultInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1, 4), EnabledStatusPrivate().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNssaOriginateDefaultInfoStatus.setStatus('current')
if mibBuilder.loadTexts: ospfNssaOriginateDefaultInfoStatus.setDescription('Enable or disable to generate a Type 7 default into the NSSA area.')
ospfRedistributeTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3), )
if mibBuilder.loadTexts: ospfRedistributeTable.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeTable.setDescription('The conceptual table of all of ospfRedistributeEntry.')
ospfRedistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1), ).setIndexNames((0, "NAG-MIB", "ospfRedistributeProtocol"))
if mibBuilder.loadTexts: ospfRedistributeEntry.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeEntry.setDescription('The conceptual row for ospfRedistributeTable.')
ospfRedistributeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 8, 9))).clone(namedValues=NamedValues(("kernel", 1), ("connect", 2), ("static", 3), ("rip", 4), ("ospf", 6), ("bgp", 8), ("isis", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRedistributeProtocol.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeProtocol.setDescription('Protocol ID.')
ospfRedistributeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1, 2), EnabledStatusPrivate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeStatus.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeStatus.setDescription(" enable-- redistribute the specific route,disable--- does not redistribute the specific route.For example\n\t\t\t when the ospfRedistributeProtocol is equal to rip, 'enable' stands for redistribute the route from rip.")
ospfRedistributeMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2))).clone('type2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeMetricType.setDescription('Metric type.')
ospfRedistributeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1, 4), OspfBigMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeMetric.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeMetric.setDescription('Metric value.')
ospfSummaryAddressTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4), )
if mibBuilder.loadTexts: ospfSummaryAddressTable.setStatus('current')
if mibBuilder.loadTexts: ospfSummaryAddressTable.setDescription('The conceptual table of all of ospfSummaryAddressEntry.')
ospfSummaryAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4, 1), ).setIndexNames((0, "NAG-MIB", "ospfSummaryAddress"), (0, "NAG-MIB", "ospfSummaryMask"))
if mibBuilder.loadTexts: ospfSummaryAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ospfSummaryAddressEntry.setDescription('The conceptual row for ospfSummaryAddressTable.')
ospfSummaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSummaryAddress.setStatus('current')
if mibBuilder.loadTexts: ospfSummaryAddress.setDescription('Summary address.')
ospfSummaryMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSummaryMask.setStatus('current')
if mibBuilder.loadTexts: ospfSummaryMask.setDescription('Summary mask.')
ospfSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4, 1, 3), EnabledStatusPrivate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfSummaryStatus.setStatus('current')
if mibBuilder.loadTexts: ospfSummaryStatus.setDescription(' valid/enable--- define a summary, invalid/disable destory the summary from the router')
ospfNetworkAreaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5), )
if mibBuilder.loadTexts: ospfNetworkAreaAddressTable.setStatus('current')
if mibBuilder.loadTexts: ospfNetworkAreaAddressTable.setDescription('The conceptual table of all of ospfNetworkAreaAddressEntry.')
ospfNetworkAreaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1), ).setIndexNames((0, "NAG-MIB", "ospfNetworkAareaAddress"), (0, "NAG-MIB", "ospfNetworkAreaMask"), (0, "NAG-MIB", "ospfNetworkAreaAreaId"))
if mibBuilder.loadTexts: ospfNetworkAreaAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNetworkAreaAddressEntry.setDescription('The conceptual row for ospfNetworkAreaAddressTable.')
ospfNetworkAareaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNetworkAareaAddress.setStatus('current')
if mibBuilder.loadTexts: ospfNetworkAareaAddress.setDescription('NetworkArea address.')
ospfNetworkAreaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNetworkAreaMask.setStatus('current')
if mibBuilder.loadTexts: ospfNetworkAreaMask.setDescription('NetworkArea mask.')
ospfNetworkAreaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNetworkAreaAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfNetworkAreaAreaId.setDescription('NetworkArea area ID.')
ospfNetworkAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1, 4), EnabledStatusPrivate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNetworkAreaStatus.setStatus('current')
if mibBuilder.loadTexts: ospfNetworkAreaStatus.setDescription('enabled(1), disabled(0).\n\t\t\tvalid/enable--- run the ospf on the interfaces,which match the ipaddr/mask;\n\t\t\tinvalid/disable--disable the ospf.\n\t\t\t ValidStatus:\n         A simple status value for the object to create and destroy\n         a table entry. This is a simplified variant of RowStatus as it\n         supports only two values. Setting it to valid(1) creates an entry.\n         Setting it to invalid(0) destroys an entry.')
sntpPollTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16284))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPollTime.setStatus('current')
if mibBuilder.loadTexts: sntpPollTime.setDescription('The interval for SNTP clients to send requests to NTP/SNTP.')
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
if mibBuilder.loadTexts: sntpServerTable.setDescription('The ipv4 sntp server configration table.')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2, 1), ).setIndexNames((0, "NAG-MIB", "sntpServerVersion"), (0, "NAG-MIB", "sntpServerAddress"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
if mibBuilder.loadTexts: sntpServerEntry.setDescription('A set of configuration parameters for a ipv4 sntp server.')
sntpServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServerVersion.setStatus('current')
if mibBuilder.loadTexts: sntpServerVersion.setDescription('The version of ipv4 sntp server.')
sntpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServerAddress.setStatus('current')
if mibBuilder.loadTexts: sntpServerAddress.setDescription('The ipv4 address of the sntp server.')
sntpServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerStatus.setStatus('current')
if mibBuilder.loadTexts: sntpServerStatus.setDescription('Now state.')
sntpServer6Table = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3), )
if mibBuilder.loadTexts: sntpServer6Table.setStatus('current')
if mibBuilder.loadTexts: sntpServer6Table.setDescription('The ipv6 sntp server configration table.')
sntpServer6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3, 1), ).setIndexNames((0, "NAG-MIB", "sntpServer6Version"), (0, "NAG-MIB", "sntpServer6Address"))
if mibBuilder.loadTexts: sntpServer6Entry.setStatus('current')
if mibBuilder.loadTexts: sntpServer6Entry.setDescription('A set of configuration parameters for a ipv6 sntp server.')
sntpServer6Version = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServer6Version.setStatus('current')
if mibBuilder.loadTexts: sntpServer6Version.setDescription('The version of ipv6 sntp server.')
sntpServer6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServer6Address.setStatus('current')
if mibBuilder.loadTexts: sntpServer6Address.setDescription('The IP address of the ipv6 sntp server.')
sntpServer6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServer6Status.setStatus('current')
if mibBuilder.loadTexts: sntpServer6Status.setDescription('Now state.')
sntpTimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4))
sntpTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpTimeZoneName.setStatus('current')
if mibBuilder.loadTexts: sntpTimeZoneName.setDescription('The name of sntp time zone.')
sntpTimeZoneType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("add", 1), ("subtract", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpTimeZoneType.setStatus('current')
if mibBuilder.loadTexts: sntpTimeZoneType.setDescription('The type of sntp time zone.')
sntpTimeZoneTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpTimeZoneTime.setStatus('current')
if mibBuilder.loadTexts: sntpTimeZoneTime.setDescription('The interval time of sntp time zone.')
sntpTimeZoneStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpTimeZoneStatus.setStatus('current')
if mibBuilder.loadTexts: sntpTimeZoneStatus.setDescription('now state of sntp time zone.')
urpfEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: urpfEnable.setStatus('current')
if mibBuilder.loadTexts: urpfEnable.setDescription(' Global Enable or disable the Unicast reverse path forwarding.')
urpfPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2), )
if mibBuilder.loadTexts: urpfPortTable.setStatus('current')
if mibBuilder.loadTexts: urpfPortTable.setDescription('The URPF port configration table.')
urpfPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1), ).setIndexNames((0, "NAG-MIB", "urpfPortIndex"))
if mibBuilder.loadTexts: urpfPortEntry.setStatus('current')
if mibBuilder.loadTexts: urpfPortEntry.setDescription('The index of this table is port index.')
urpfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urpfPortIndex.setStatus('current')
if mibBuilder.loadTexts: urpfPortIndex.setDescription('Port Index.')
urpfPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("loose", 1), ("strict", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: urpfPortMode.setStatus('current')
if mibBuilder.loadTexts: urpfPortMode.setDescription('Configration of the URPF mode on the port.')
urpfPortAllowDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("allowdefaultroute", 1), ("noallowdefaultroute", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: urpfPortAllowDefault.setStatus('current')
if mibBuilder.loadTexts: urpfPortAllowDefault.setDescription('Allow or not allow default route of URPF.')
urpfPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: urpfPortStatus.setStatus('current')
if mibBuilder.loadTexts: urpfPortStatus.setDescription('Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
dcscmdcEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmdcEnable.setStatus('current')
if mibBuilder.loadTexts: dcscmdcEnable.setDescription('Dcscm destination control multicast is disable or enable')
dcscmdcAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2), )
if mibBuilder.loadTexts: dcscmdcAclTable.setStatus('current')
if mibBuilder.loadTexts: dcscmdcAclTable.setDescription('dcscm dst control multicast')
dcscmdcAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1), ).setIndexNames((0, "NAG-MIB", "dcscmdcAclNumber"), (0, "NAG-MIB", "dcscmdcAclSubNumber"))
if mibBuilder.loadTexts: dcscmdcAclEntry.setStatus('current')
if mibBuilder.loadTexts: dcscmdcAclEntry.setDescription('dcscm dst control multicast entry')
dcscmdcAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6000, 7999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcscmdcAclNumber.setStatus('current')
if mibBuilder.loadTexts: dcscmdcAclNumber.setDescription('Acl number of Dcscm destination control multicast,the range is 6000--7999.')
dcscmdcAclSubNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcscmdcAclSubNumber.setStatus('current')
if mibBuilder.loadTexts: dcscmdcAclSubNumber.setDescription('Acl sub number of Dcscm destination control multicast,the range is 1--1024.')
dcscmdcAclSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcscmdcAclSourceIp.setStatus('current')
if mibBuilder.loadTexts: dcscmdcAclSourceIp.setDescription('Source ip address of acl entry ')
dcscmdcAclSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcscmdcAclSourceMask.setStatus('current')
if mibBuilder.loadTexts: dcscmdcAclSourceMask.setDescription('Source Mask of acl entry ')
dcscmdcAclDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcscmdcAclDestinationIp.setStatus('current')
if mibBuilder.loadTexts: dcscmdcAclDestinationIp.setDescription('Destination ip address of acl entry.the destination ip must be a valid multicast group address. ')
dcscmdcAclDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcscmdcAclDestinationMask.setStatus('current')
if mibBuilder.loadTexts: dcscmdcAclDestinationMask.setDescription('Destination Mask of acl entry. the destination mask should meet the request of muticast group address. ')
dcscmdcAclPermitOrDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 0), ("deltheAcl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmdcAclPermitOrDeny.setStatus('current')
if mibBuilder.loadTexts: dcscmdcAclPermitOrDeny.setDescription(' acl entry permit or deny ; 0:deny; 1:permit; 2:del this acl entry')
dcscmVMacbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3), )
if mibBuilder.loadTexts: dcscmVMacbindingTable.setStatus('current')
if mibBuilder.loadTexts: dcscmVMacbindingTable.setDescription('dcscm destination control multicast, Acl is binded to VMac')
dcscmVMacbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3, 1), ).setIndexNames((0, "NAG-MIB", "dcscmVMacbindingVlanid"), (0, "NAG-MIB", "dcscmVMacbindingMacAddr"))
if mibBuilder.loadTexts: dcscmVMacbindingEntry.setStatus('current')
if mibBuilder.loadTexts: dcscmVMacbindingEntry.setDescription('The index of this table is Vlanid,MacAddress')
dcscmVMacbindingVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmVMacbindingVlanid.setStatus('current')
if mibBuilder.loadTexts: dcscmVMacbindingVlanid.setDescription(' Dcscm destination control multicast,The vlanid of rule')
dcscmVMacbindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmVMacbindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: dcscmVMacbindingMacAddr.setDescription(' Dcscm destination control multicast,The Mac Address of rule')
dcscmVMacbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(6000, 7999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmVMacbindingAclNumber.setStatus('current')
if mibBuilder.loadTexts: dcscmVMacbindingAclNumber.setDescription(' Dcscm destination control multicast,The Acl number of rule ; 0 means del the rule binded to vmac')
dcscmSipbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4), )
if mibBuilder.loadTexts: dcscmSipbindingTable.setStatus('current')
if mibBuilder.loadTexts: dcscmSipbindingTable.setDescription('dcscm destination control multicast, Acl is binded to Sip')
dcscmSipbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4, 1), ).setIndexNames((0, "NAG-MIB", "dcscmSipbindingSipAddress"), (0, "NAG-MIB", "dcscmSipbindingSipMask"))
if mibBuilder.loadTexts: dcscmSipbindingEntry.setStatus('current')
if mibBuilder.loadTexts: dcscmSipbindingEntry.setDescription('The index of this table is Sourceip,SourceMask ')
dcscmSipbindingSipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmSipbindingSipAddress.setStatus('current')
if mibBuilder.loadTexts: dcscmSipbindingSipAddress.setDescription(' Dcscm destination control multicast,The Source ip of rule')
dcscmSipbindingSipMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmSipbindingSipMask.setStatus('current')
if mibBuilder.loadTexts: dcscmSipbindingSipMask.setDescription(' Dcscm destination control multicast,The Source ip mask len of rule')
dcscmSipbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(6000, 7999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmSipbindingAclNumber.setStatus('current')
if mibBuilder.loadTexts: dcscmSipbindingAclNumber.setDescription(' Dcscm destination control multicast,The Acl number of rule;0 means del the rule binded to sip')
dcscmdcPortbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 5), )
if mibBuilder.loadTexts: dcscmdcPortbindingTable.setStatus('current')
if mibBuilder.loadTexts: dcscmdcPortbindingTable.setDescription('dcscm destination control multicast, Acl is binded to Port')
dcscmdcPortbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 5, 1), ).setIndexNames((0, "NAG-MIB", "dcscmdcPortbindingPortName"))
if mibBuilder.loadTexts: dcscmdcPortbindingEntry.setStatus('current')
if mibBuilder.loadTexts: dcscmdcPortbindingEntry.setDescription('The index of this table is PortName')
dcscmdcPortbindingPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmdcPortbindingPortName.setStatus('current')
if mibBuilder.loadTexts: dcscmdcPortbindingPortName.setDescription(' Dcscm destination control multicast,The Port index of rule')
dcscmdcPortbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(6000, 7999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmdcPortbindingAclNumber.setStatus('current')
if mibBuilder.loadTexts: dcscmdcPortbindingAclNumber.setDescription(' Dcscm destination control multicast,The Acl number of rule;0 means del the rule binded to port')
dcscmscEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscEnable.setStatus('current')
if mibBuilder.loadTexts: dcscmscEnable.setDescription('dcscm source control multicast is disable or enable')
dcscmscAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7), )
if mibBuilder.loadTexts: dcscmscAclTable.setStatus('current')
if mibBuilder.loadTexts: dcscmscAclTable.setDescription('dcscm src control multicast')
dcscmscAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1), ).setIndexNames((0, "NAG-MIB", "dcscmscAclNumber"), (0, "NAG-MIB", "dcscmscAclSubNumber"))
if mibBuilder.loadTexts: dcscmscAclEntry.setStatus('current')
if mibBuilder.loadTexts: dcscmscAclEntry.setDescription('dcscm src control multicast entry')
dcscmscAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 5099))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscAclNumber.setStatus('current')
if mibBuilder.loadTexts: dcscmscAclNumber.setDescription('Acl number of Dcscm source control multicast,the range is 5000--5099.')
dcscmscAclSubNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscAclSubNumber.setStatus('current')
if mibBuilder.loadTexts: dcscmscAclSubNumber.setDescription('Acl sub number')
dcscmscAclSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscAclSourceIp.setStatus('current')
if mibBuilder.loadTexts: dcscmscAclSourceIp.setDescription('Source ip address of acl entry ')
dcscmscAclSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscAclSourceMask.setStatus('current')
if mibBuilder.loadTexts: dcscmscAclSourceMask.setDescription('Source Mask of acl entry ')
dcscmscAclDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscAclDestinationIp.setStatus('current')
if mibBuilder.loadTexts: dcscmscAclDestinationIp.setDescription('Destination ip address of acl entry, the destination ip must be a valid multicast group address.')
dcscmscAclDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscAclDestinationMask.setStatus('current')
if mibBuilder.loadTexts: dcscmscAclDestinationMask.setDescription('Destination Mask of acl entry, the destination mask should meet the request of muticast group address.')
dcscmscAclPermitOrDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 0), ("deltheAcl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscAclPermitOrDeny.setStatus('current')
if mibBuilder.loadTexts: dcscmscAclPermitOrDeny.setDescription(' acl entry permit or deny;0:deny; 1:permit; 2:del this acl')
dcscmscPortbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 8), )
if mibBuilder.loadTexts: dcscmscPortbindingTable.setStatus('current')
if mibBuilder.loadTexts: dcscmscPortbindingTable.setDescription('dcscm destination control multicast, Acl is binded to Port')
dcscmscPortbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 8, 1), ).setIndexNames((0, "NAG-MIB", "dcscmscPortbindingPortName"))
if mibBuilder.loadTexts: dcscmscPortbindingEntry.setStatus('current')
if mibBuilder.loadTexts: dcscmscPortbindingEntry.setDescription('The index of this table is PortName')
dcscmscPortbindingPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmscPortbindingPortName.setStatus('current')
if mibBuilder.loadTexts: dcscmscPortbindingPortName.setDescription(' Dcscm source control multicast,The Port Number of rule')
dcscmscPortbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5099), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscPortbindingAclNumber.setStatus('current')
if mibBuilder.loadTexts: dcscmscPortbindingAclNumber.setDescription(' Dcscm source control multicast,The Acl number of rule ; 0 means to del the rule binded to port')
dcscmpcTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9), )
if mibBuilder.loadTexts: dcscmpcTable.setStatus('current')
if mibBuilder.loadTexts: dcscmpcTable.setDescription('dcscm policy multicast table')
dcscmpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1), ).setIndexNames((0, "NAG-MIB", "dcscmpcSourceIp"), (0, "NAG-MIB", "dcscmpcSourceMasklen"), (0, "NAG-MIB", "dcscmpcDestinationIp"), (0, "NAG-MIB", "dcscmpcDestinationMasklen"))
if mibBuilder.loadTexts: dcscmpcEntry.setStatus('current')
if mibBuilder.loadTexts: dcscmpcEntry.setDescription('The index of this table is dcscmpcSourceIp,dcscmpcSourceMasklen,dcscmpcDestinationIp,dcscmpcDestinationMasklen')
dcscmpcSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmpcSourceIp.setStatus('current')
if mibBuilder.loadTexts: dcscmpcSourceIp.setDescription('source ip address of policy multicast ')
dcscmpcSourceMasklen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmpcSourceMasklen.setStatus('current')
if mibBuilder.loadTexts: dcscmpcSourceMasklen.setDescription('Mask length of source Ip')
dcscmpcDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmpcDestinationIp.setStatus('current')
if mibBuilder.loadTexts: dcscmpcDestinationIp.setDescription('Destination ip address of policy multicast,the destination ip must be a valid multicast group address. ')
dcscmpcDestinationMasklen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmpcDestinationMasklen.setStatus('current')
if mibBuilder.loadTexts: dcscmpcDestinationMasklen.setDescription('Mask length of destination Ip')
dcscmpccos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmpccos.setStatus('current')
if mibBuilder.loadTexts: dcscmpccos.setDescription(' cos value of policy multicast; between 0 and 7 ;8 means to del the policy')
dcscm6dcEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcEnable.setStatus('current')
if mibBuilder.loadTexts: dcscm6dcEnable.setDescription('dcscm6 destination control multicast is disable or enable')
dcscm6dcAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2))
dcscm6dcAclNumber = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9000, 10999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcAclNumber.setStatus('current')
if mibBuilder.loadTexts: dcscm6dcAclNumber.setDescription('Acl number of Dcscm6 destination control multicast,the range is 9000--10999.')
dcscm6dcAclSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcAclSourceIp.setStatus('current')
if mibBuilder.loadTexts: dcscm6dcAclSourceIp.setDescription('Source ip address of acl entry ')
dcscm6dcAclSourceMask = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcAclSourceMask.setStatus('current')
if mibBuilder.loadTexts: dcscm6dcAclSourceMask.setDescription('Source MaskLen of acl entry ')
dcscm6dcAclDestinationIp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 4), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcAclDestinationIp.setStatus('current')
if mibBuilder.loadTexts: dcscm6dcAclDestinationIp.setDescription('Destination ip address of acl entry,the destination ip must be a valid multicast group address. ')
dcscm6dcAclDestinationMask = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcAclDestinationMask.setStatus('current')
if mibBuilder.loadTexts: dcscm6dcAclDestinationMask.setDescription('Destination MaskLen of acl entry ,the mask length should meet the request of multicast group address.')
dcscm6dcAclPermitOrDeny = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 0), ("deltheAcl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcAclPermitOrDeny.setStatus('current')
if mibBuilder.loadTexts: dcscm6dcAclPermitOrDeny.setDescription(' acl entry permit or deny; 0:deny; 1:permit; 2:del this acl')
dcscm6VMacbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3), )
if mibBuilder.loadTexts: dcscm6VMacbindingTable.setStatus('current')
if mibBuilder.loadTexts: dcscm6VMacbindingTable.setDescription('dcscm6 destination control multicast, Acl is binded to VMac')
dcscm6VMacbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3, 1), ).setIndexNames((0, "NAG-MIB", "dcscm6VMacbindingVlanid"), (0, "NAG-MIB", "dcscm6VMacbindingMacAddr"))
if mibBuilder.loadTexts: dcscm6VMacbindingEntry.setStatus('current')
if mibBuilder.loadTexts: dcscm6VMacbindingEntry.setDescription('The index of this table is Vlanid,MacAddress')
dcscm6VMacbindingVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6VMacbindingVlanid.setStatus('current')
if mibBuilder.loadTexts: dcscm6VMacbindingVlanid.setDescription(' Dcscm6 destination control multicast,The vlanid of rule')
dcscm6VMacbindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6VMacbindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: dcscm6VMacbindingMacAddr.setDescription(' Dcscm6 destination control multicast,The Mac Address of rule')
dcscm6VMacbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(9000, 10999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6VMacbindingAclNumber.setStatus('current')
if mibBuilder.loadTexts: dcscm6VMacbindingAclNumber.setDescription(' Dcscm6 destination control multicast,The Acl number of rule;0 means del the rule binded to vmac')
dcscm6SipbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4), )
if mibBuilder.loadTexts: dcscm6SipbindingTable.setStatus('current')
if mibBuilder.loadTexts: dcscm6SipbindingTable.setDescription('dcscm6 destination control multicast, Acl is binded to Sip')
dcscm6SipbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4, 1), ).setIndexNames((0, "NAG-MIB", "dcscm6SipbindingSipAddress"), (0, "NAG-MIB", "dcscm6SipbindingSipMaskLen"))
if mibBuilder.loadTexts: dcscm6SipbindingEntry.setStatus('current')
if mibBuilder.loadTexts: dcscm6SipbindingEntry.setDescription('The index of this table is Sourceip,SourceMaskLen ')
dcscm6SipbindingSipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6SipbindingSipAddress.setStatus('current')
if mibBuilder.loadTexts: dcscm6SipbindingSipAddress.setDescription(' Dcscm6 destination control multicast,The Source ip of rule')
dcscm6SipbindingSipMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6SipbindingSipMaskLen.setStatus('current')
if mibBuilder.loadTexts: dcscm6SipbindingSipMaskLen.setDescription(' Dcscm6 destination control multicast,The Source ip mask len of rule')
dcscm6SipbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(9000, 10999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6SipbindingAclNumber.setStatus('current')
if mibBuilder.loadTexts: dcscm6SipbindingAclNumber.setDescription(' Dcscm6 destination control multicast,The Acl number of rule;0 means del the rule binded to sip')
dcscm6dcPortbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 5), )
if mibBuilder.loadTexts: dcscm6dcPortbindingTable.setStatus('current')
if mibBuilder.loadTexts: dcscm6dcPortbindingTable.setDescription('dcscm6 destination control multicast, Acl is binded to Port')
dcscm6dcPortbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 5, 1), ).setIndexNames((0, "NAG-MIB", "dcscm6dcPortbindingPortName"))
if mibBuilder.loadTexts: dcscm6dcPortbindingEntry.setStatus('current')
if mibBuilder.loadTexts: dcscm6dcPortbindingEntry.setDescription('The index of this table is PortName')
dcscm6dcPortbindingPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6dcPortbindingPortName.setStatus('current')
if mibBuilder.loadTexts: dcscm6dcPortbindingPortName.setDescription(' Dcscm6 destination control multicast,The Port Number of rule')
dcscm6dcPortbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(9000, 10999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcPortbindingAclNumber.setStatus('current')
if mibBuilder.loadTexts: dcscm6dcPortbindingAclNumber.setDescription(' Dcscm6 destination control multicast,The Acl number of rule;0 means del the rule binded to port')
dcscm6scEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scEnable.setStatus('current')
if mibBuilder.loadTexts: dcscm6scEnable.setDescription('dcscm6 source control multicast is disable or enable')
dcscm6scAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7))
dcscm6scAclNumber = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 8099))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scAclNumber.setStatus('current')
if mibBuilder.loadTexts: dcscm6scAclNumber.setDescription('Acl number of Dcscm6 source control multicast.the range is 8000--8099')
dcscm6scAclSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scAclSourceIp.setStatus('current')
if mibBuilder.loadTexts: dcscm6scAclSourceIp.setDescription('Source ip address of acl entry ')
dcscm6scAclSourceMask = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scAclSourceMask.setStatus('current')
if mibBuilder.loadTexts: dcscm6scAclSourceMask.setDescription('Source MaskLen of acl entry ')
dcscm6scAclDestinationIp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 4), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scAclDestinationIp.setStatus('current')
if mibBuilder.loadTexts: dcscm6scAclDestinationIp.setDescription('Destination ip address of acl entry,the destination ip must be a valid multicast group address. ')
dcscm6scAclDestinationMask = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scAclDestinationMask.setStatus('current')
if mibBuilder.loadTexts: dcscm6scAclDestinationMask.setDescription('Destination MaskLen of acl entry ,the mask length should meet the request of multicast group address.')
dcscm6scAclPermitOrDeny = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 0), ("deltheAcl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scAclPermitOrDeny.setStatus('current')
if mibBuilder.loadTexts: dcscm6scAclPermitOrDeny.setDescription(' acl entry permit or deny; 0:deny; 1:permit; 2:del this acl')
dcscm6scPortbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 8), )
if mibBuilder.loadTexts: dcscm6scPortbindingTable.setStatus('current')
if mibBuilder.loadTexts: dcscm6scPortbindingTable.setDescription('dcscm6 destination control multicast, Acl is binded to Port')
dcscm6scPortbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 8, 1), ).setIndexNames((0, "NAG-MIB", "dcscm6scPortbindingPortName"))
if mibBuilder.loadTexts: dcscm6scPortbindingEntry.setStatus('current')
if mibBuilder.loadTexts: dcscm6scPortbindingEntry.setDescription('The index of this table is PortName')
dcscm6scPortbindingPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6scPortbindingPortName.setStatus('current')
if mibBuilder.loadTexts: dcscm6scPortbindingPortName.setDescription(' Dcscm6 source control multicast,The Port Number of rule')
dcscm6scPortbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(8000, 8099), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scPortbindingAclNumber.setStatus('current')
if mibBuilder.loadTexts: dcscm6scPortbindingAclNumber.setDescription(' Dcscm6 source control multicast,The Acl number of rule,0 means to del the rule binded to port')
dcscm6pcTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9), )
if mibBuilder.loadTexts: dcscm6pcTable.setStatus('current')
if mibBuilder.loadTexts: dcscm6pcTable.setDescription('dcscm6 policy multicast table')
dcscm6pcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1), ).setIndexNames((0, "NAG-MIB", "dcscm6pcSourceIp"), (0, "NAG-MIB", "dcscm6pcSourceMask"), (0, "NAG-MIB", "dcscm6pcDestinationIp"), (0, "NAG-MIB", "dcscm6pcDestinationMask"))
if mibBuilder.loadTexts: dcscm6pcEntry.setStatus('current')
if mibBuilder.loadTexts: dcscm6pcEntry.setDescription('The index of this table is dcscm6pcSourceIp,dcscm6pcSourceMask,dcscm6pcDestinationIp,dcscm6pcDestinationMask')
dcscm6pcSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6pcSourceIp.setStatus('current')
if mibBuilder.loadTexts: dcscm6pcSourceIp.setDescription('source ip address of policy multicast ')
dcscm6pcSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6pcSourceMask.setStatus('current')
if mibBuilder.loadTexts: dcscm6pcSourceMask.setDescription('Source MaskLen  of policy multicast ')
dcscm6pcDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6pcDestinationIp.setStatus('current')
if mibBuilder.loadTexts: dcscm6pcDestinationIp.setDescription('Destination ip address of policy multicast ')
dcscm6pcDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6pcDestinationMask.setStatus('current')
if mibBuilder.loadTexts: dcscm6pcDestinationMask.setDescription('Destination MaskLen of policy multicast ')
dcscm6pccos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6pccos.setStatus('current')
if mibBuilder.loadTexts: dcscm6pccos.setDescription(' cos value of policy multicast; between 0 and 7 ;8 means to del the policy')
clusterv2Base = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1))
clusterv2BaseKey = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2BaseKey.setStatus('current')
if mibBuilder.loadTexts: clusterv2BaseKey.setDescription('cluster run switch,set the key word only while the cluster is not running\n            and you should set it with set clusterv2BaseRun.')
clusterv2BaseVlan = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2BaseVlan.setStatus('current')
if mibBuilder.loadTexts: clusterv2BaseVlan.setDescription('cluster run switch,set the Vlan only when the cluster is not running\n            and you should set it with set clusterv2BaseRun.\n            if get result is 0 that the cluser is not running!')
clusterv2BaseRun = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2BaseRun.setStatus('current')
if mibBuilder.loadTexts: clusterv2BaseRun.setDescription('cluster run switch,set the key word and vlan id or stop the cluster.')
clusterv2BaseRole = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("candidateDevice", 1), ("memberDevice", 2), ("commanderDevice", 3), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2BaseRole.setStatus('current')
if mibBuilder.loadTexts: clusterv2BaseRole.setDescription("The role of the device. \n            none means cluster device isn't running.")
clusterv2BaseVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2BaseVersion.setStatus('current')
if mibBuilder.loadTexts: clusterv2BaseVersion.setDescription('version of cluster.')
clusterv2BaseMaxNumberOfMembers = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2BaseMaxNumberOfMembers.setStatus('current')
if mibBuilder.loadTexts: clusterv2BaseMaxNumberOfMembers.setDescription('The maximum number of cluster members allowed in the\n             cluster.  The command switch is considered as a cluster\n             member also.')
clusterv2BaseMaxNumberOfSwitches = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2BaseMaxNumberOfSwitches.setStatus('current')
if mibBuilder.loadTexts: clusterv2BaseMaxNumberOfSwitches.setDescription('The maximum number of cluster switches allowed in the\n             cluster. The Candidates include commander,candidate and member.')
clusterv2Create = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 2))
clusterv2CreateIPPool = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2CreateIPPool.setStatus('current')
if mibBuilder.loadTexts: clusterv2CreateIPPool.setDescription('ip pool.Valid cluster ip-pool format like as 10.x.x.x,default is 10.254.254.1 .\n        if get result is 0 that the cluser is not running!\n        set it only on the device is not commander and should set it with set clusterv2CreateCmdrOperate.')
clusterv2CreateName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2CreateName.setStatus('current')
if mibBuilder.loadTexts: clusterv2CreateName.setDescription('create the clustername while create the cluster commander,\n        set it only on the device is not commander and should set it with set clusterv2CreateCmdrOperate.')
clusterv2CreateCmdrOperate = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("create", 1), ("destroy", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2CreateCmdrOperate.setStatus('current')
if mibBuilder.loadTexts: clusterv2CreateCmdrOperate.setDescription('if set create ,operation is to build cluster according to clusterv2CreateClusterIPPool/clusterv2StatusClusterName.\n        if set destroy , operation is try to clear the IPPool and the ClusterName.\n        set create only on the device is not commander.\n        set destroy only on the device is commander.')
clusterv2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 3))
clusterv2StatusClusterName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2StatusClusterName.setStatus('current')
if mibBuilder.loadTexts: clusterv2StatusClusterName.setDescription('The name of the cluster.Set only on the device is not commander.The default is NULL.')
clusterv2StatusKeepalive = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2StatusKeepalive.setStatus('current')
if mibBuilder.loadTexts: clusterv2StatusKeepalive.setDescription('cluster keepalive interval(3-30 second).\n        if get result is 0 that the cluser is not running!')
clusterv2StatusLoss_count = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("clusterv2StatusLoss-count").setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2StatusLoss_count.setStatus('current')
if mibBuilder.loadTexts: clusterv2StatusLoss_count.setDescription('cluster the max(1-10) loss-count packet during the keeplive interval.\n        if get result is 0 that the cluser is not running!')
clusterv2Commander = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4))
clusterv2CommanderAutoAddMem = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2CommanderAutoAddMem.setStatus('current')
if mibBuilder.loadTexts: clusterv2CommanderAutoAddMem.setDescription('auto add mem switch')
clusterv2MemberCounter = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2MemberCounter.setStatus('current')
if mibBuilder.loadTexts: clusterv2MemberCounter.setDescription('member number on commander,read only on commander or will return 65535.')
clusterv2MemberTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3), )
if mibBuilder.loadTexts: clusterv2MemberTable.setStatus('current')
if mibBuilder.loadTexts: clusterv2MemberTable.setDescription('This table contains one row per cluster member,\n            including the command switch,read only on commander.')
clusterv2MemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1), ).setIndexNames((0, "NAG-MIB", "clusterv2MemberNumber"))
if mibBuilder.loadTexts: clusterv2MemberEntry.setStatus('current')
if mibBuilder.loadTexts: clusterv2MemberEntry.setDescription('An entry containing cluster management information\n            applicable to a particular cluster member.')
clusterv2MemberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2MemberNumber.setStatus('current')
if mibBuilder.loadTexts: clusterv2MemberNumber.setDescription('An arbitrary value which uniquely identifies the \n             cluster member switch number. It ranges from 1 to\n             clusterv2StatusMaxNumberOfMembers,read only on commander.')
clusterv2MemberIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2MemberIpAddress.setStatus('current')
if mibBuilder.loadTexts: clusterv2MemberIpAddress.setDescription('The management ip address of the member device.')
clusterv2MemberOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMember", 1), ("inactiveMember", 2), ("memberTobe", 3), ("activeMember", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2MemberOperStatus.setStatus('current')
if mibBuilder.loadTexts: clusterv2MemberOperStatus.setDescription('The status of cluster management connectivity between\n             the command switch and a cluster member. Cluster management\n             connectivity is determined by the exchange of cluster\n             management messages between the command switch and a\n             cluster member.')
clusterv2MemberMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 4), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2MemberMacAddress.setStatus('current')
if mibBuilder.loadTexts: clusterv2MemberMacAddress.setDescription('The management MAC address of the member device.')
clusterv2MemberHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2MemberHostName.setStatus('current')
if mibBuilder.loadTexts: clusterv2MemberHostName.setDescription('')
clusterv2MemberDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2MemberDeviceType.setStatus('current')
if mibBuilder.loadTexts: clusterv2MemberDeviceType.setDescription('deviceType such as 5526S, 2008A etc')
clusterv2CandidateCounter = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2CandidateCounter.setStatus('current')
if mibBuilder.loadTexts: clusterv2CandidateCounter.setDescription('candidate number on commander,read only on commander or will return 65535.')
clusterv2CandidateTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5), )
if mibBuilder.loadTexts: clusterv2CandidateTable.setStatus('current')
if mibBuilder.loadTexts: clusterv2CandidateTable.setDescription('This table contains one row per cluster candidate,\n             A cluster candidate is a device that is currently\n             eligible to be added to the cluster of a command\n             switch.  A device is eligible if it satisfies the\n             following conditions:\n             1. It start the cluster func.\n             2. It is in a same L2 LAN with commander switch\n       \n             The entries in this table and the entries in \n             clusterMemberTable are mutually exclusive at all\n             times.  That is, any device that is a cluster\n             member never shows up in the clusterCandidateTable\n             or is never a candidate at the same time .  Also, any \n             candidate that shows up in clusterCandidateTable should not\n             appear in clusterMemberTable.')
clusterv2CandidateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1), ).setIndexNames((0, "NAG-MIB", "clusterv2CandidateId"))
if mibBuilder.loadTexts: clusterv2CandidateEntry.setStatus('current')
if mibBuilder.loadTexts: clusterv2CandidateEntry.setDescription('An entry pertaining to a single candidate device.')
clusterv2CandidateId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2CandidateId.setStatus('current')
if mibBuilder.loadTexts: clusterv2CandidateId.setDescription('The candidate id.')
clusterv2CandidateMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2CandidateMacAddress.setStatus('current')
if mibBuilder.loadTexts: clusterv2CandidateMacAddress.setDescription('The MAC address of a device qualified to\n             to be a cluster member of the command switch \n             cluster.')
clusterv2CandidateHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2CandidateHostName.setStatus('current')
if mibBuilder.loadTexts: clusterv2CandidateHostName.setDescription('')
clusterv2CandidateDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2CandidateDeviceType.setStatus('current')
if mibBuilder.loadTexts: clusterv2CandidateDeviceType.setDescription('')
clusterv2RebootMem = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2RebootMem.setStatus('current')
if mibBuilder.loadTexts: clusterv2RebootMem.setDescription("Operation is to reboot the specified member.you can select more member one time,\n       the value connected with '-' or ';',the string len is 1-30 .set only on commander.")
dnsEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsEnable.setStatus('current')
if mibBuilder.loadTexts: dnsEnable.setDescription('Enable or disable dns dynamic domain resolving.')
dnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2), )
if mibBuilder.loadTexts: dnsServerTable.setStatus('current')
if mibBuilder.loadTexts: dnsServerTable.setDescription("The dns server list table which consists of a sequence of 'dnsServerEntry' items which describe\n           the configured dns server IP information.")
dnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1), ).setIndexNames((0, "NAG-MIB", "dnsServerInetAddrType"), (0, "NAG-MIB", "dnsServerIpAddr"))
if mibBuilder.loadTexts: dnsServerEntry.setStatus('current')
if mibBuilder.loadTexts: dnsServerEntry.setDescription('An entry in the dnsServerTable containing the dns server IP.')
dnsServerInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: dnsServerInetAddrType.setStatus('current')
if mibBuilder.loadTexts: dnsServerInetAddrType.setDescription('The IP address type of dnsServerEntry. This value applies to dnsServerIpAddr.')
dnsServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsServerIpAddr.setDescription("The dns server IP address with 'dnsServerInetAddrType' to indicate the IP address type(IPv4 or IPv6).")
dnsServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsServerPriority.setStatus('current')
if mibBuilder.loadTexts: dnsServerPriority.setDescription('Current Priority of the dns server.')
dnsServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsServerStatus.setStatus('current')
if mibBuilder.loadTexts: dnsServerStatus.setDescription('Current state of the dns server.')
dnsDomainSuffixTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 3), )
if mibBuilder.loadTexts: dnsDomainSuffixTable.setStatus('current')
if mibBuilder.loadTexts: dnsDomainSuffixTable.setDescription("The dns domain suffix table which consists of a sequence of 'dnsDomainSuffixEntry' items which describe\n           the configured dns domain suffix information.")
dnsDomainSuffixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 3, 1), ).setIndexNames((0, "NAG-MIB", "dnsDomainSuffix"))
if mibBuilder.loadTexts: dnsDomainSuffixEntry.setStatus('current')
if mibBuilder.loadTexts: dnsDomainSuffixEntry.setDescription('An entry in the dnsDomainSuffixTable containing the dns domain suffix.')
dnsDomainSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDomainSuffix.setStatus('current')
if mibBuilder.loadTexts: dnsDomainSuffix.setDescription('The dns domain suffix(e.g. commpany.com).')
dnsDomainSuffixStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsDomainSuffixStatus.setStatus('current')
if mibBuilder.loadTexts: dnsDomainSuffixStatus.setDescription('Current state of the dns domain suffix.')
dnsDynHostTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4), )
if mibBuilder.loadTexts: dnsDynHostTable.setStatus('current')
if mibBuilder.loadTexts: dnsDynHostTable.setDescription("The dns dynamic host table which consists of a sequence of 'dnsDynHostEntry' items which describe\n           the resolved dns dynamic host information.")
dnsDynHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1), ).setIndexNames((0, "NAG-MIB", "dnsDynHostIndex"))
if mibBuilder.loadTexts: dnsDynHostEntry.setStatus('current')
if mibBuilder.loadTexts: dnsDynHostEntry.setDescription('An entry in the dnsDynHostTable containing the dns dynamic host information.')
dnsDynHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: dnsDynHostIndex.setStatus('current')
if mibBuilder.loadTexts: dnsDynHostIndex.setDescription('Index of position in the cache ')
dnsDynHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynHostName.setStatus('current')
if mibBuilder.loadTexts: dnsDynHostName.setDescription('The dns dynamic host name(e.g. www.sina.com.cn).')
dnsDynHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynHostIpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsDynHostIpAddr.setDescription("The dns dynamic host's IP address with 'dnsDynHostInetAddrType' to indicate the IP address type(IPv4 or IPv6).")
dnsDynHostTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynHostTtl.setStatus('current')
if mibBuilder.loadTexts: dnsDynHostTtl.setDescription("The dns dynamic host's living time(seconds).")
class NtpStratum(TextualConvention, Unsigned32):
    description = 'The NTP stratum, with 16 representing no stratum.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 16)

class NtpDateTime(TextualConvention, OctetString):
    description = 'NTP date/time on the device, in 128-bit\n         NTP date format. Ref: draft-ietf-ntp-ntpv4-proto-06,\n         section 6:\n          It includes a 64-bit signed seconds field\n          spanning 584 billion years and a 64-bit fraction\n          field resolving .05 attosecond (i.e. 0.5e-18).\n          For convenience in mapping between formats, the\n          seconds field is divided into a 32-bit era field\n          and a 32-bit timestamp field.\n\n         If time is not syncronized this field shall be a\n         zero-length string.\n\n         This TC is not to be used for objects that are used\n         to set the time of the node querying this object.\n         NTP should be used for this--or at least SNTP.'
    status = 'current'
    displayHint = '4d:4d:4d.4d'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), )
ntpEntSoftwareName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntSoftwareName.setStatus('current')
if mibBuilder.loadTexts: ntpEntSoftwareName.setDescription('The product name of the installed NTP version.')
ntpEntSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: ntpEntSoftwareVersion.setDescription('The software version of the installed NTP implementation.')
ntpEntSoftwareVendor = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntSoftwareVendor.setStatus('current')
if mibBuilder.loadTexts: ntpEntSoftwareVendor.setDescription('The vendor/author of the installed NTP version.')
ntpEntSystemType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntSystemType.setStatus('current')
if mibBuilder.loadTexts: ntpEntSystemType.setDescription('General hardware/os platform information.')
ntpEntTimeResolution = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntTimeResolution.setStatus('current')
if mibBuilder.loadTexts: ntpEntTimeResolution.setDescription('A string describing the time resolution of the running NTP\n         implementation.')
ntpEntTimePrecision = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntTimePrecision.setStatus('current')
if mibBuilder.loadTexts: ntpEntTimePrecision.setDescription("The entity's precision in integer format.")
ntpEntStatusCurrentMode = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusCurrentMode.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusCurrentMode.setDescription('The actual mode of NTP as a string')
ntpEntStatusCurrentModeVal = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 99))).clone(namedValues=NamedValues(("notRunning", 1), ("notSynchronized", 2), ("noneConfigured", 3), ("syncToLocal", 4), ("syncToRefclock", 5), ("syncToRemoteServer", 6), ("unknown", 99))).clone(99)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusCurrentModeVal.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusCurrentModeVal.setDescription('The current mode of the NTP as integer value.')
ntpEntStatusStratum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 3), NtpStratum().clone(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusStratum.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusStratum.setDescription("The NTP entity's own stratum value.")
ntpEntStatusActiveRefSourceId = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusActiveRefSourceId.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusActiveRefSourceId.setDescription('The association ID of the current syspeer.')
ntpEntStatusActiveRefSourceName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusActiveRefSourceName.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusActiveRefSourceName.setDescription('The hostname/descriptive name of the current reference source\n         selected as syspeer.')
ntpEntStatusNumberOfRefSources = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusNumberOfRefSources.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusNumberOfRefSources.setDescription('The number of reference sources configured for NTP.')
ntpEntStatusDateTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 10), NtpDateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusDateTime.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusDateTime.setDescription('The current NTP date/time on the device, in 128-bit\n         NTP date format. Ref: draft-ietf-ntp-ntpv4-proto-06,\n         section 6:\n          It includes a 64-bit signed seconds field\n          spanning 584 billion years and a 64-bit fraction\n          field resolving .05 attosecond (i.e. 0.5e-18).\n          For convenience in mapping between formats, the\n          seconds field is divided into a 32-bit era field\n          and a 32-bit timestamp field.\n\n         If time is not syncronized this field shall be a\n         zero-length string.\n\n         This object can be used to timestamp events on this\n         node and allow a management station to coorelate\n         different time objects. For example, a management\n         station could query this object and sysUpTime in\n         the same operation to be able to relate sysUpTime\n         to NTP time.\n\n         This object is not to be used to set the time of\n         the node querying this object. NTP should be used\n         for this--or at least SNTP.')
ntpEntStatusInPkts = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusInPkts.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusInPkts.setDescription('The total number of NTP messages delivered to the\n         NTP entity from the transport service.')
ntpEntStatusOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusOutPkts.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusOutPkts.setDescription('The total number of NTP messages delivered to the\n         transport service by this NTP entity.')
ntpEntStatusBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusBadVersion.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusBadVersion.setDescription('The total number of NTP messages which were delivered\n         to this NTP entity and were for an unsupported NTP\n         version.')
ntpEntStatusProtocolError = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusProtocolError.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusProtocolError.setDescription('The total number of NTP messages which were delivered\n         to this NTP entity and this entity was not able to\n         process due to an NTP protocol error.')
ntpEntConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6))
ntpEntCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 1))
ntpEntGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 2))
ntpEntNTPCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 1, 1)).setObjects(("NAG-MIB", "ntpEntObjectsGroup1"), ("NAG-MIB", "ntpEntObjectsGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpEntNTPCompliance = ntpEntNTPCompliance.setStatus('current')
if mibBuilder.loadTexts: ntpEntNTPCompliance.setDescription('The compliance statement for SNMP entities which use NTP and\n         implement the NTP MIB')
ntpEntSNTPCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 1, 2)).setObjects(("NAG-MIB", "ntpEntObjectsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpEntSNTPCompliance = ntpEntSNTPCompliance.setStatus('current')
if mibBuilder.loadTexts: ntpEntSNTPCompliance.setDescription('The compliance statement for SNMP entities which use SNTP and\n         implement the NTP MIB')
ntpEntObjectsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 2, 1)).setObjects(("NAG-MIB", "ntpEntSoftwareName"), ("NAG-MIB", "ntpEntSoftwareVersion"), ("NAG-MIB", "ntpEntSoftwareVendor"), ("NAG-MIB", "ntpEntSystemType"), ("NAG-MIB", "ntpEntStatusDateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpEntObjectsGroup1 = ntpEntObjectsGroup1.setStatus('current')
if mibBuilder.loadTexts: ntpEntObjectsGroup1.setDescription('A collection of objects for the NTP MIB that all NTP\n         or SNTP entities should implement.')
ntpEntObjectsGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 2, 2)).setObjects(("NAG-MIB", "ntpEntTimeResolution"), ("NAG-MIB", "ntpEntTimePrecision"), ("NAG-MIB", "ntpEntStatusCurrentMode"), ("NAG-MIB", "ntpEntStatusCurrentModeVal"), ("NAG-MIB", "ntpEntStatusStratum"), ("NAG-MIB", "ntpEntStatusActiveRefSourceId"), ("NAG-MIB", "ntpEntStatusActiveRefSourceName"), ("NAG-MIB", "ntpEntStatusNumberOfRefSources"), ("NAG-MIB", "ntpEntStatusInPkts"), ("NAG-MIB", "ntpEntStatusOutPkts"), ("NAG-MIB", "ntpEntStatusBadVersion"), ("NAG-MIB", "ntpEntStatusProtocolError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpEntObjectsGroup2 = ntpEntObjectsGroup2.setStatus('current')
if mibBuilder.loadTexts: ntpEntObjectsGroup2.setDescription('A collection of objects for the NTP MIB that are optional\n         for NTP or SNTP entities to implement.')
poeSystemEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSystemEnable.setStatus('current')
if mibBuilder.loadTexts: poeSystemEnable.setDescription(' The power inline global switch. Enable expresses it is turned on, while disable indicates that off.')
poeMaxPower = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(37, 776))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeMaxPower.setStatus('current')
if mibBuilder.loadTexts: poeMaxPower.setDescription(' The power inline global available power whitch cannot be exceeded by the total power of all PDs.')
poePoliceEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePoliceEnable.setStatus('current')
if mibBuilder.loadTexts: poePoliceEnable.setDescription(' The power inline power mamagement switch. Enable expresses it is in priority-policy mode, while disable indicates that in first-in-first-get mode.')
poeLegacyEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeLegacyEnable.setStatus('current')
if mibBuilder.loadTexts: poeLegacyEnable.setDescription(' The power inline nonstandard PD detect switch. Enable expresses nonstandard PD can be detected, while disable indicates that cannot be detected.')
poeDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ac", 0), ("dc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeDisconnect.setStatus('current')
if mibBuilder.loadTexts: poeDisconnect.setDescription(' The power inline disconnection mode.')
poeCurrentPower = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeCurrentPower.setStatus('current')
if mibBuilder.loadTexts: poeCurrentPower.setDescription(' The power inline current export power. It is a real time value.')
poePortMode = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("spare", 1), ("signal", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortMode.setStatus('current')
if mibBuilder.loadTexts: poePortMode.setDescription(' The power inline power supply mode.')
poeSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: poeSoftwareVersion.setDescription(' The power inline software version.')
poeHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: poeHardwareVersion.setDescription(' The power inline hardware version.')
poePortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10), )
if mibBuilder.loadTexts: poePortConfigTable.setStatus('current')
if mibBuilder.loadTexts: poePortConfigTable.setDescription(' The power inline port configuration table')
poePortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1), ).setIndexNames((0, "NAG-MIB", "portIndex"))
if mibBuilder.loadTexts: poePortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: poePortConfigEntry.setDescription(' The power inline configuration in port.')
poePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: poePortIndex.setStatus('current')
if mibBuilder.loadTexts: poePortIndex.setDescription('The power inline port index.')
poePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableAuto", 1), ("enableStatic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortStatus.setStatus('current')
if mibBuilder.loadTexts: poePortStatus.setDescription(' The power inline port switch. Enable expresses it is turned on, while disable indicates that off.enableAuto(1) turn on the \n        auto-mode,enableStatic(2) turn on the force-mode.')
poePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("critical", 0), ("high", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortPriority.setStatus('current')
if mibBuilder.loadTexts: poePortPriority.setDescription(' The power inline port priority.')
poePortMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortMaxPower.setStatus('current')
if mibBuilder.loadTexts: poePortMaxPower.setDescription(' The power inline port available power whitch cannot be exceeded by the connected PD.')
poePortCurrentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrentPower.setStatus('current')
if mibBuilder.loadTexts: poePortCurrentPower.setDescription(' The power inline port used power. It is a real time value.')
poePortCurrentCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrentCurrent.setStatus('current')
if mibBuilder.loadTexts: poePortCurrentCurrent.setDescription(' The power inline port export current. It is a real time value.')
poePortCurrentVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrentVoltage.setStatus('current')
if mibBuilder.loadTexts: poePortCurrentVoltage.setDescription(' The power inline port export voltage. It is a real time value.')
poePortPdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("faulty", 3), ("deny", 4), ("force", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortPdStatus.setStatus('current')
if mibBuilder.loadTexts: poePortPdStatus.setDescription(' The power inline detect status. on(1):PD is connected and natural powered, off(2):PD is not connected,\n        faulty(3):error, deny(4):power is low or high, force(5):force power.')
poePortPdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortPdClass.setStatus('current')
if mibBuilder.loadTexts: poePortPdClass.setDescription(' The connected PD class of power inline')
poeHighInrushEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeHighInrushEnable.setStatus('current')
if mibBuilder.loadTexts: poeHighInrushEnable.setDescription(' The power inline high-inrush switch. Enable expresses it is turned on, while disable indicates that off.')
qos2 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1))
qos2MapCostoIntp = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1))
qos2MapCostoIntp1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp1.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoIntp1.setDescription('COS to IntPrio map,IntPrio1<0-7>.')
qos2MapCostoIntp2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp2.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoIntp2.setDescription('COS to IntPrio map,IntPrio2<0-7>.')
qos2MapCostoIntp3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp3.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoIntp3.setDescription('COS to IntPrio map,IntPrio1<0-7>.')
qos2MapCostoIntp4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp4.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoIntp4.setDescription('COS to IntPrio map,IntPrio1<0-7>.')
qos2MapCostoIntp5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp5.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoIntp5.setDescription('COS to IntPrio map,IntPrio1<0-7>.')
qos2MapCostoIntp6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp6.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoIntp6.setDescription('COS to IntPrio map,IntPrio1<0-7>.')
qos2MapCostoIntp7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp7.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoIntp7.setDescription('COS to IntPrio map,IntPrio1<0-7>.')
qos2MapCostoIntp8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp8.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoIntp8.setDescription('COS to IntPrio map,IntPrio1<0-7>.')
qos2MapCostoIntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntpStatus.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoIntpStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qos2MapCostoDP = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2))
qos2MapCostoDP1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP1.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoDP1.setDescription('COS to drop precedence map,Drop Precedence1<0-2>.')
qos2MapCostoDP2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP2.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoDP2.setDescription('COS to drop precedence map,Drop Precedence2<0-2>.')
qos2MapCostoDP3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP3.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoDP3.setDescription('COS to drop precedence map,Drop Precedence3<0-2>.')
qos2MapCostoDP4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP4.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoDP4.setDescription('COS to drop precedence map,Drop Precedence4<0-2>.')
qos2MapCostoDP5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP5.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoDP5.setDescription('COS to drop precedence map,Drop Precedence5<0-2>.')
qos2MapCostoDP6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP6.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoDP6.setDescription('COS to drop precedence map,Drop Precedence6<0-2>.')
qos2MapCostoDP7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP7.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoDP7.setDescription('COS to drop precedence map,Drop Precedence7<0-2>.')
qos2MapCostoDP8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP8.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoDP8.setDescription('COS to drop precedence map,Drop Precedence8<0-2>.')
qos2MapCostoDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDPStatus.setStatus('current')
if mibBuilder.loadTexts: qos2MapCostoDPStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qos2MapDSCPtoDSCP = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3))
qos2MapDSCPtoDSCP1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP1.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP1.setDescription('DSCP to DSCP map, DSCP1<0-63>.')
qos2MapDSCPtoDSCP2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP2.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP2.setDescription('DSCP to DSCP map, DSCP2<0-63>.')
qos2MapDSCPtoDSCP3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP3.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP3.setDescription('DSCP to DSCP map, DSCP3<0-63>.')
qos2MapDSCPtoDSCP4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP4.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP4.setDescription('DSCP to DSCP map, DSCP4<0-63>.')
qos2MapDSCPtoDSCP5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP5.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP5.setDescription('DSCP to DSCP map, DSCP5<0-63>.')
qos2MapDSCPtoDSCP6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP6.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP6.setDescription('DSCP to DSCP map, DSCP6<0-63>.')
qos2MapDSCPtoDSCP7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP7.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP7.setDescription('DSCP to DSCP map, DSCP7<0-63>.')
qos2MapDSCPtoDSCP8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP8.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP8.setDescription('DSCP to DSCP map, DSCP8<0-63>.')
qos2MapDSCPtoDSCPoutDSCP = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCPoutDSCP.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDSCPoutDSCP.setDescription('DSCP to DSCP map, outDSCP<0-63>.')
qos2MapDSCPtoDSCPStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCPStatus.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDSCPStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qos2MapDSCPtoIntp = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4))
qos2MapDSCPtoIntp1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp1.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoIntp1.setDescription('DSCP to Intp map, DSCP1<0-63>.')
qos2MapDSCPtoIntp2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp2.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoIntp2.setDescription('DSCP to Intp map, DSCP2<0-63>.')
qos2MapDSCPtoIntp3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp3.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoIntp3.setDescription('DSCP to Intp map, DSCP3<0-63>.')
qos2MapDSCPtoIntp4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp4.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoIntp4.setDescription('DSCP to Intp map, DSCP4<0-63>.')
qos2MapDSCPtoIntp5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp5.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoIntp5.setDescription('DSCP to Intp map, DSCP5<0-63>.')
qos2MapDSCPtoIntp6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp6.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoIntp6.setDescription('DSCP to Intp map, DSCP6<0-63>.')
qos2MapDSCPtoIntp7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp7.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoIntp7.setDescription('DSCP to Intp map, DSCP7<0-63>.')
qos2MapDSCPtoIntp8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp8.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoIntp8.setDescription('DSCP to Intp map, DSCP8<0-63>.')
qos2MapDSCPtoIntpIntPriovalue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntpIntPriovalue.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoIntpIntPriovalue.setDescription('DSCP to Intp map, IntPrio value<0-7>.')
qos2MapDSCPtoIntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntpStatus.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoIntpStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qos2MapDSCPtoDP = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5))
qos2MapDSCPtoDP1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP1.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDP1.setDescription('DSCP to DP map, DSCP1<0-63>.')
qos2MapDSCPtoDP2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP2.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDP2.setDescription('DSCP to DP map, DSCP2<0-63>.')
qos2MapDSCPtoDP3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP3.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDP3.setDescription('DSCP to DP map, DSCP3<0-63>.')
qos2MapDSCPtoDP4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP4.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDP4.setDescription('DSCP to DP map, DSCP4<0-63>.')
qos2MapDSCPtoDP5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP5.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDP5.setDescription('DSCP to DP map, DSCP5<0-63>.')
qos2MapDSCPtoDP6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP6.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDP6.setDescription('DSCP to DP map, DSCP6<0-63>.')
qos2MapDSCPtoDP7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP7.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDP7.setDescription('DSCP to DP map, DSCP7<0-63>.')
qos2MapDSCPtoDP8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP8.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDP8.setDescription('DSCP to DP map, DSCP8<0-63>.')
qos2MapDSCPtoDPvalue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDPvalue.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDPvalue.setDescription('DSCP to DP map, Drop Precedence value<0-2>.')
qos2MapDSCPtoDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDPStatus.setStatus('current')
if mibBuilder.loadTexts: qos2MapDSCPtoDPStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qos2MapExptoIntp = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6))
qos2MapExptoIntp1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp1.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoIntp1.setDescription('EXP to Intp map,  IntPrio1 value<0-7>.')
qos2MapExptoIntp2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp2.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoIntp2.setDescription('EXP to Intp map,  IntPrio2 value<0-7>.')
qos2MapExptoIntp3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp3.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoIntp3.setDescription('EXP to Intp map,  IntPrio3 value<0-7>.')
qos2MapExptoIntp4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp4.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoIntp4.setDescription('EXP to Intp map,  IntPrio4 value<0-7>.')
qos2MapExptoIntp5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp5.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoIntp5.setDescription('EXP to Intp map,  IntPrio5 value<0-7>.')
qos2MapExptoIntp6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp6.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoIntp6.setDescription('EXP to Intp map,  IntPrio6 value<0-7>.')
qos2MapExptoIntp7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp7.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoIntp7.setDescription('EXP to Intp map,  IntPrio7 value<0-7>.')
qos2MapExptoIntp8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp8.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoIntp8.setDescription('EXP to Intp map,  IntPrio8 value<0-7>.')
qos2MapExptoIntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntpStatus.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoIntpStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qos2MapExptoDP = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7))
qos2MapExptoDP1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP1.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoDP1.setDescription('EXP to DP map, Drop Precedence value<0-2>.')
qos2MapExptoDP2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP2.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoDP2.setDescription('EXP to DP map, Drop Precedence value<0-2>.')
qos2MapExptoDP3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP3.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoDP3.setDescription('EXP to DP map, Drop Precedence value<0-2>.')
qos2MapExptoDP4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP4.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoDP4.setDescription('EXP to DP map, Drop Precedence value<0-2>.')
qos2MapExptoDP5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP5.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoDP5.setDescription('EXP to DP map, Drop Precedence value<0-2>.')
qos2MapExptoDP6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP6.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoDP6.setDescription('EXP to DP map, Drop Precedence value<0-2>.')
qos2MapExptoDP7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP7.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoDP7.setDescription('EXP to DP map, Drop Precedence value<0-2>.')
qos2MapExptoDP8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP8.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoDP8.setDescription('EXP to DP map, Drop Precedence value<0-2>.')
qos2MapExptoDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDPStatus.setStatus('current')
if mibBuilder.loadTexts: qos2MapExptoDPStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qos2MapIntptoDSCP = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8))
qos2MapIntptoDSCP1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP1.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoDSCP1.setDescription('Intp to DSCP map, IntPrio value<0-7>.')
qos2MapIntptoDSCP2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP2.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoDSCP2.setDescription('Intp to DSCP map, IntPrio value<0-7>.')
qos2MapIntptoDSCP3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP3.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoDSCP3.setDescription('Intp to DSCP map, IntPrio value<0-7>.')
qos2MapIntptoDSCP4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP4.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoDSCP4.setDescription('Intp to DSCP map, IntPrio value<0-7>.')
qos2MapIntptoDSCP5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP5.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoDSCP5.setDescription('Intp to DSCP map, IntPrio value<0-7>.')
qos2MapIntptoDSCP6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP6.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoDSCP6.setDescription('Intp to DSCP map, IntPrio value<0-7>.')
qos2MapIntptoDSCP7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP7.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoDSCP7.setDescription('Intp to DSCP map, IntPrio value<0-7>.')
qos2MapIntptoDSCP8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP8.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoDSCP8.setDescription('Intp to DSCP map, IntPrio value<0-7>.')
qos2MapIntptoDSCPStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCPStatus.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoDSCPStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qos2MapIntptoEXP = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10))
qos2MapIntptoEXP1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP1.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoEXP1.setDescription('Intp to EXP map, EXP value<0-7>.')
qos2MapIntptoEXP2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP2.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoEXP2.setDescription('Intp to EXP map, EXP value<0-7>.')
qos2MapIntptoEXP3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP3.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoEXP3.setDescription('Intp to EXP map, EXP value<0-7>.')
qos2MapIntptoEXP4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP4.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoEXP4.setDescription('Intp to EXP map, EXP value<0-7>.')
qos2MapIntptoEXP5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP5.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoEXP5.setDescription('Intp to EXP map, EXP value<0-7>.')
qos2MapIntptoEXP6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP6.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoEXP6.setDescription('Intp to EXP map, EXP value<0-7>.')
qos2MapIntptoEXP7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP7.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoEXP7.setDescription('Intp to EXP map, EXP value<0-7>.')
qos2MapIntptoEXP8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP8.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoEXP8.setDescription('Intp to EXP map, EXP value<0-7>.')
qos2MapIntptoEXPStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXPStatus.setStatus('current')
if mibBuilder.loadTexts: qos2MapIntptoEXPStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qos2AggregatePolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11))
qos2AggPolicyName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyName.setStatus('current')
if mibBuilder.loadTexts: qos2AggPolicyName.setDescription('Aggregate policy name<1-64>.')
qos2AggPolicyCIRKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyCIRKbps.setStatus('current')
if mibBuilder.loadTexts: qos2AggPolicyCIRKbps.setDescription('CIR(Committed Information Rate) Kbits per second <1-10000000>.')
qos2AggPolicyCBSKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyCBSKbps.setStatus('current')
if mibBuilder.loadTexts: qos2AggPolicyCBSKbps.setDescription('CBS(Committed Burst Size) Kbits per second <1-1000000>.')
qos2AggPolicyPBSKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyPBSKbps.setStatus('current')
if mibBuilder.loadTexts: qos2AggPolicyPBSKbps.setDescription('PBS(Peak Burst Size) Kbits per second <1-1000000>.')
qos2AggPolicyPIRKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyPIRKbps.setStatus('current')
if mibBuilder.loadTexts: qos2AggPolicyPIRKbps.setDescription('PIR(Peak Information Rate) Kbits per second <1-10000000>.')
qos2AggPolicyConformAction = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3), ("set-cos-transmit", 4), ("set-drop-precedence", 5), ("set-internal-priority", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyConformAction.setStatus('current')
if mibBuilder.loadTexts: qos2AggPolicyConformAction.setDescription('conform-action transmit means send packets without any change when specified speed is not exceeded; \n\t             conform-action drop means drop packets when specified speed is not exceeded; \n\t             conform-action set-dscp-transmit specifies to mark down packet DSCP value according to policed-dscp mapping when specified speed is not exceeded; \n\t             conform-action set-prec-transmit specifies to mark down packet TOS value according to policed-dscp mapping when specified speed is not exceeded.\n                .')
qos2AggPolicyConformActionChangeValue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyConformActionChangeValue.setStatus('current')
if mibBuilder.loadTexts: qos2AggPolicyConformActionChangeValue.setDescription('If conform-action is set-dscp-transmit(2),the value is between 0-63; \n\t             If conform-action is set-prec-transmit(3),the value is between 0-7;\n\t             If conform-action is set-cos-transmit(4),the value is between 0-7;\n\t             If conform-action is set-drop-precedence(5),the value is between 0-2;\n\t             If conform-action is set-internal-priority(6),the value is between 0-7;')
qos2AggPolicyExceedAction = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3), ("set-cos-transmit", 4), ("set-drop-precedence", 5), ("set-internal-priority", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyExceedAction.setStatus('current')
if mibBuilder.loadTexts: qos2AggPolicyExceedAction.setDescription('conform-action transmit means send packets without any change when specified speed is not exceeded; \n\t             conform-action drop means drop packets when specified speed is not exceeded; \n\t             conform-action set-dscp-transmit specifies to mark down packet DSCP value according to policed-dscp mapping when specified speed is not exceeded; \n\t             conform-action set-prec-transmit specifies to mark down packet TOS value according to policed-dscp mapping when specified speed is not exceeded.\n                .')
qos2AggPolicyExceedActionChangeValue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyExceedActionChangeValue.setStatus('current')
if mibBuilder.loadTexts: qos2AggPolicyExceedActionChangeValue.setDescription('If conform-action is set-dscp-transmit(2),the value is between 0-63; \n\t             If conform-action is set-prec-transmit(3),the value is between 0-7;\n\t             If conform-action is set-cos-transmit(4),the value is between 0-7;\n\t             If conform-action is set-drop-precedence(5),the value is between 0-2;\n\t             If conform-action is set-internal-priority(6),the value is between 0-7;')
qos2AggPolicyViolateAction = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3), ("set-cos-transmit", 4), ("set-drop-precedence", 5), ("set-internal-priority", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyViolateAction.setStatus('current')
if mibBuilder.loadTexts: qos2AggPolicyViolateAction.setDescription('conform-action transmit means send packets without any change when specified speed is not exceeded; \n\t             conform-action drop means drop packets when specified speed is not exceeded; \n\t             conform-action set-dscp-transmit specifies to mark down packet DSCP value according to policed-dscp mapping when specified speed is not exceeded; \n\t             conform-action set-prec-transmit specifies to mark down packet TOS value according to policed-dscp mapping when specified speed is not exceeded.\n                .')
qos2AggPolicyViolateActionChangeValue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyViolateActionChangeValue.setStatus('current')
if mibBuilder.loadTexts: qos2AggPolicyViolateActionChangeValue.setDescription('If conform-action is set-dscp-transmit(2),the value is between 0-63; \n\t             If conform-action is set-prec-transmit(3),the value is between 0-7;\n\t             If conform-action is set-cos-transmit(4),the value is between 0-7;\n\t             If conform-action is set-drop-precedence(5),the value is between 0-2;\n\t             If conform-action is set-internal-priority(6),the value is between 0-7;')
qos2AggPolicyStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: qos2AggPolicyStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qos2ServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12), )
if mibBuilder.loadTexts: qos2ServicePolicyTable.setStatus('current')
if mibBuilder.loadTexts: qos2ServicePolicyTable.setDescription(' QoS service policy table.')
qos2ServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12, 1), ).setIndexNames((0, "NAG-MIB", "qos2PolicyMapName"))
if mibBuilder.loadTexts: qos2ServicePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: qos2ServicePolicyEntry.setDescription(' QoS service policy table.')
qos2PolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos2PolicyMapName.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyMapName.setDescription('Policy map name<1-64>.')
qos2ServicePolicyVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos2ServicePolicyVlanList.setStatus('current')
if mibBuilder.loadTexts: qos2ServicePolicyVlanList.setDescription('Vlan list.')
qos2ServicePolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ServicePolicyStatus.setStatus('current')
if mibBuilder.loadTexts: qos2ServicePolicyStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qos2PortTable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13))
qos2PortIndex = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortIndex.setStatus('current')
if mibBuilder.loadTexts: qos2PortIndex.setDescription('port Index')
qos2PortType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("trust", 0), ("cos", 1), ("policy", 2), ("queueAndBandwidth", 3), ("queueAndAlgorithm", 4), ("queueAndWdrr", 5), ("queueAndWrr", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortType.setStatus('current')
if mibBuilder.loadTexts: qos2PortType.setDescription('the relation between qosPortType and CLI:\n \t\t0 mls qos trust {cos |dscp };               \n                1 mls qos cos {<default-cos>};     \n\t\t2 service-policy input WORD;\n\t\t3 mls qos queue {<queue id>} bandwidth {<MinBandwidth> <MaxBandwidth>};\n\t\t4 mls qos queue algorithm {sp |wdrr |wrr };\n\t\t5 mls qos queue wdrr weight {<Queue1 bandwidth> <Queue2 bandwidth> <Queue3 bandwidth> <Queue4 bandwidth> <Queue5 bandwidth> <Queue6 bandwidth> <Queue7 bandwidth> <Queue8 bandwidth>};\n\t\t6 mls qos queue wrr weight {<Queue1 weight> <Queue2 weight> <Queue3 weight> <Queue4 weight> <Queue5 weight> <Queue6 weight> <Queue7 weight> <Queue8 weight>}.\t\t\t\t\t\t\n\t\tAccording to the relation,when configurate qos with snmp,first set the qosPortType to the correct value to select CLI,\n\t\tthen set next CLI parameter.Fox example,set qos default cos is 5, first set qosPortType=1 ,then set qosPortCos to 5,\n\t\tfinally setting qosPortStatus to 1, trigger snmp-cache works.')
qos2PortCos = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortCos.setStatus('current')
if mibBuilder.loadTexts: qos2PortCos.setDescription('port default cos value')
qos2PortTrust = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cos", 0), ("dscp", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortTrust.setStatus('current')
if mibBuilder.loadTexts: qos2PortTrust.setDescription('Configure port trust.\n            \t  cos(0),mls qos trust cos;\n               \t  dscp(1),mls qos trust dscp.')
qos2PortPolicy = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortPolicy.setStatus('current')
if mibBuilder.loadTexts: qos2PortPolicy.setDescription('The corresponding CLI:service-policy input WORD.')
qos2PortQueueBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortQueueBandwidth.setStatus('current')
if mibBuilder.loadTexts: qos2PortQueueBandwidth.setDescription('The corresponding CLI:mls qos queue {<queue id>} bandwidth {<MinBandwidth> <MaxBandwidth>}.')
qos2PortQueueAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("sp", 0), ("wdrr", 1), ("wrr", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortQueueAlgorithm.setStatus('current')
if mibBuilder.loadTexts: qos2PortQueueAlgorithm.setDescription('The corresponding CLI:mls qos queue algorithm {sp |wdrr |wrr }.')
qos2PortQueueWdrr = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortQueueWdrr.setStatus('current')
if mibBuilder.loadTexts: qos2PortQueueWdrr.setDescription('The corresponding CLI:mls qos queue wdrr weight {<Queue1 bandwidth> <Queue2 bandwidth> <Queue3 bandwidth> <Queue4 bandwidth> <Queue5 bandwidth> <Queue6 bandwidth> <Queue7 bandwidth> <Queue8 bandwidth>}.')
qos2PortQueueWrr = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortQueueWrr.setStatus('current')
if mibBuilder.loadTexts: qos2PortQueueWrr.setDescription('The corresponding CLI:mls qos queue wrr weight {<Queue1 weight> <Queue2 weight> <Queue3 weight> <Queue4 weight> <Queue5 weight> <Queue6 weight> <Queue7 weight> <Queue8 weight>}.')
qos2PortStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortStatus.setStatus('current')
if mibBuilder.loadTexts: qos2PortStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qos2ClassMapTable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14))
qos2ClassMapName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapName.setStatus('current')
if mibBuilder.loadTexts: qos2ClassMapName.setDescription('classmap name')
qos2ClassMapType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 3, 8, 7, 4, 9, 10))).clone(namedValues=NamedValues(("configurClassMap", 0), ("accessGroup", 1), ("dscp", 2), ("v6dscp", 5), ("ippre", 3), ("v6AccessGroup", 8), ("v6Flow", 7), ("vlan", 4), ("cos", 9), ("exp", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapType.setStatus('current')
if mibBuilder.loadTexts: qos2ClassMapType.setDescription('0 class-map <class-map-name>,index is classmapname;\n\t\t1 match access-group <acl-index-or-name>,need qos2ClassMapAccessGroup cooperation;\n\t\t2 match ip dscp <dscp-list>,need qos2ClassMapDscp cooperation;\n\t\t3 match ip precedence <ip-precedence-list>,need qos2ClassMapIpPre cooperation;\n\t\t4 match vlan <vlan-list>,need qos2ClassMapVlan cooperation;\n\t\t5 match ipv6 dscp <dscp-list>,need qos2ClassMapV6Dscp cooperation;\n\t\t7 match ipv6 flowlabel,need qos2ClassMapV6Flow cooperation;\n\t\t8 match ipv6 access-group,need qos2ClassMapV6AccGroup cooperation;\n\t\t9 match cos,need qos2ClassCos cooperation;\n\t        10 match exp <exp-list>,need qos2ClassMapExp cooperation.')
qos2ClassMapAccessGroup = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapAccessGroup.setStatus('current')
if mibBuilder.loadTexts: qos2ClassMapAccessGroup.setDescription('Match specify access-group (name or number). \n                This object be configured only if qosClassMapType  \n                in the same row is accessGroup(1).')
qos2ClassMapDscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapDscp.setStatus('current')
if mibBuilder.loadTexts: qos2ClassMapDscp.setDescription('Match specify Dscp.\n                This object be configured only if qosClassMapType \n                in the same row is dscp(2).')
qos2ClassMapV6Dscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapV6Dscp.setStatus('current')
if mibBuilder.loadTexts: qos2ClassMapV6Dscp.setDescription('Match specify ipv6 Dscp.\n                This object be configured only if qosClassMapType \n                in the same row is v6dscp(5).')
qos2ClassMapIpPre = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapIpPre.setStatus('current')
if mibBuilder.loadTexts: qos2ClassMapIpPre.setDescription('Match specify Ip Precedence.\n                This object be configured only if qosClassMapType \n                in the same row is ippre(3).')
qos2ClassMapV6AccGroup = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapV6AccGroup.setStatus('current')
if mibBuilder.loadTexts: qos2ClassMapV6AccGroup.setDescription('Match specify Ipv6 Access-Group.\n                This object be configured only if qosClassMapType  \n                in the same row is v6AccessGroup(8).')
qos2ClassMapV6Flow = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapV6Flow.setStatus('current')
if mibBuilder.loadTexts: qos2ClassMapV6Flow.setDescription('Match specify Ipv6 Flowlabel.\n                This object be configured only if qosClassMapType  \n                in the same row is v6Flow(6).')
qos2ClassMapVlan = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapVlan.setStatus('current')
if mibBuilder.loadTexts: qos2ClassMapVlan.setDescription('Match specify Vlan list . At most 8 vlan id.\n                This object be configured only if qosClassMapType  \n                in the same row is vlan(4).')
qos2ClassMapCos = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapCos.setStatus('current')
if mibBuilder.loadTexts: qos2ClassMapCos.setDescription('Match specify Cos .\n                This object be configured only if qosClassMapType  \n                in the same row is cos(9).')
qos2ClassMapExp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapExp.setStatus('current')
if mibBuilder.loadTexts: qos2ClassMapExp.setDescription('Match specify MPLS EXP.\n                This object be configured only if qosClassMapType  \n                in the same row is Exp(10).')
qos2ClassMapStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapStatus.setStatus('current')
if mibBuilder.loadTexts: qos2ClassMapStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qos2PolicyTable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15))
qos2PolicyName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyName.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyName.setDescription('QoS Policy name')
qos2PolicyClassMap = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyClassMap.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyClassMap.setDescription('Specify the classmap name.After a policy map is created, it can be associated to a class.\n                So, if you want the class map to match the policy map,please setting the qosPolicyType to 1,and then\n                setting the qosPolicyStatus to 1 .')
qos2PolicyInsertClassMap = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyInsertClassMap.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyInsertClassMap.setDescription('Specify the position of classmap name.')
qos2PolicyType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("policymap", 0), ("matchclassmap", 1), ("threeColor", 2), ("aggregatePolicer", 3), ("accounting", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyType.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyType.setDescription('the relation between qosPolicyType and CLI:\n\t\t0  policy-map <policy-map-name>;\n\t\t1  class <class-map-name>;\n\t\t2  policy <bits_per_second> <normal_burst_bytes> [pir <peak_rate_bps>] |  <maximum_burst_bytes> [{conform-action ACTION | exceed-action ACTION | violate-action ACTION }];\n\t\t3  policy aggregate <aggregate-policer-name>; \n\t\t4  accounting. ')
qos2PolicyCIRKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyCIRKbps.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyCIRKbps.setDescription('CIR(Committed Information Rate) Kbits per second <1-10000000>.')
qos2PolicyCBSKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyCBSKbps.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyCBSKbps.setDescription('CBS(Committed Burst Size) Kbits per second <1-1000000>.')
qos2PolicyPBSKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyPBSKbps.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyPBSKbps.setDescription('PBS(Peak Burst Size) Kbits per second <1-1000000>.')
qos2PolicyPIRKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyPIRKbps.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyPIRKbps.setDescription('PIR(Peak Information Rate) Kbits per second <1-10000000>.')
qos2PolicyConformActionChange = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3), ("set-cos-transmit", 4), ("set-internal-priority", 5), ("set-drop-Precedence", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyConformActionChange.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyConformActionChange.setDescription('transmit(0): means send packets without any change;\n\t\tdrop(1): means drop packets;\n\t\tset-dscp-transmit(2): send packets and remark dscp value;\n\t\tset-prec-transmit(3): send packets and remark ip-precedence value;\n\t\tset-cos-transmit(4): send packets and remark cos value;\n\t\tset-internal-priority(5):send packets and remark internal-priority value ;\n\t\tset-drop-Precedence(6): send packets and remark drop-precedence value.')
qos2PolicyConformActionChangeValue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyConformActionChangeValue.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyConformActionChangeValue.setDescription('If action is set-dscp-transmit(2),the value is between 0-63;\n                 else if action is set-prec-transmit(3),the value is between 0-7;\n                 else if action is set-cos-transmit(4),the value is between 0-7;\n                 else if action is set-internal-priority(5),the value is between 0-7;\n                 else if action is set-drop-Precedence(6),the value is between 0-2.')
qos2PolicyExceedActionChange = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3), ("set-cos-transmit", 4), ("set-internal-priority", 5), ("set-drop-Precedence", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyExceedActionChange.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyExceedActionChange.setDescription('transmit(0): means send packets without any change;\n\t\tdrop(1): means drop packets;\n\t\tset-dscp-transmit(2): send packets and remark dscp value;\n\t\tset-prec-transmit(3): send packets and remark ip-precedence value;\n\t\tset-cos-transmit(4): send packets and remark cos value;\n\t\tset-internal-priority(5):send packets and remark internal-priority value ;\n\t\tset-drop-Precedence(6): send packets and remark drop-precedence value.')
qos2PolicyExceedActionChangeValue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyExceedActionChangeValue.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyExceedActionChangeValue.setDescription('If action is set-dscp-transmit(2),the value is between 0-63;\n                 else if action is set-prec-transmit(3),the value is between 0-7;\n                 else if action is set-cos-transmit(4),the value is between 0-7;\n                 else if action is set-internal-priority(5),the value is between 0-7;\n                 else if action is set-drop-Precedence(6),the value is between 0-2.')
qos2PolicyViolateActionChange = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3), ("set-cos-transmit", 4), ("set-internal-priority", 5), ("set-drop-Precedence", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyViolateActionChange.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyViolateActionChange.setDescription('transmit(0): means send packets without any change;\n\t\tdrop(1): means drop packets;\n\t\tset-dscp-transmit(2): send packets and remark dscp value;\n\t\tset-prec-transmit(3): send packets and remark ip-precedence value;\n\t\tset-cos-transmit(4): send packets and remark cos value;\n\t\tset-internal-priority(5):send packets and remark internal-priority value ;\n\t\tset-drop-Precedence(6): send packets and remark drop-precedence value.')
qos2PolicyViolateActionChangeValue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyViolateActionChangeValue.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyViolateActionChangeValue.setDescription('If action is set-dscp-transmit(2),the value is between 0-63;\n                 else if action is set-prec-transmit(3),the value is between 0-7;\n                 else if action is set-cos-transmit(4),the value is between 0-7;\n                 else if action is set-internal-priority(5),the value is between 0-7;\n                 else if action is set-drop-Precedence(6),the value is between 0-2.')
qos2PolicyAggregatePolicer = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyAggregatePolicer.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyAggregatePolicer.setDescription('aggregate-policer-name.\n                This object be configured only if qosPolicyType \n                in the same row is aggregatePolicer(3).')
qos2PolicyStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyStatus.setStatus('current')
if mibBuilder.loadTexts: qos2PolicyStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
qos2SetTable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16))
qos2SetPolicyMapName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetPolicyMapName.setStatus('current')
if mibBuilder.loadTexts: qos2SetPolicyMapName.setDescription('QoS Policy name.')
qos2SetClassMapName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetClassMapName.setStatus('current')
if mibBuilder.loadTexts: qos2SetClassMapName.setDescription('QoS class map name.')
qos2SetType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dscp", 1), ("precedence", 2), ("internal-priority", 3), ("drop-precedence", 4), ("nextHop", 5), ("v6nextHop", 6), ("cos", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetType.setStatus('current')
if mibBuilder.loadTexts: qos2SetType.setDescription('qos2SetType range:1,2,3,4,5,6\n                1   dscp         \tSet IP DSCP (DiffServ CodePoints);\n                2   precedence   \tSet IP precedence;\n                3   internal-priority   Set internal-priority;\n                4   drop-precedence   \tSet drop-precedence;\n                5   nexthop      \tSet IP nexthop;\n\t\t6   v6nextHop    \tSet IPv6 nexthop;\n                7   cos          \tSet CoS .')
qos2SetDscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetDscp.setStatus('current')
if mibBuilder.loadTexts: qos2SetDscp.setDescription('remark dscp for the classified flow.')
qos2SetPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetPrecedence.setStatus('current')
if mibBuilder.loadTexts: qos2SetPrecedence.setDescription('remark ip precedence for classified flow.')
qos2SetInternalPriority = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetInternalPriority.setStatus('current')
if mibBuilder.loadTexts: qos2SetInternalPriority.setDescription('remark internal priority for classified flow.')
qos2SetDropPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetDropPrecedence.setStatus('current')
if mibBuilder.loadTexts: qos2SetDropPrecedence.setDescription('remark drop precedence for classified flow.')
qos2SetDefaultPBR = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetDefaultPBR.setStatus('current')
if mibBuilder.loadTexts: qos2SetDefaultPBR.setDescription('0:no set default PBR for classified flow;\n                 1:set default PBR for classified flow.')
qos2SetVrf = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 252))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetVrf.setStatus('current')
if mibBuilder.loadTexts: qos2SetVrf.setDescription('set vrf value for classified flow.')
qos2SetnextHop = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetnextHop.setStatus('current')
if mibBuilder.loadTexts: qos2SetnextHop.setDescription('set nexthop for classified flow.')
qos2Setv6nextHop = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2Setv6nextHop.setStatus('current')
if mibBuilder.loadTexts: qos2Setv6nextHop.setDescription('set IPv6 nexthop for classified flow')
qos2SetCos = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetCos.setStatus('current')
if mibBuilder.loadTexts: qos2SetCos.setDescription('remark cos for classified flow')
qos2SetStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetStatus.setStatus('current')
if mibBuilder.loadTexts: qos2SetStatus.setDescription(' Setting it to  active(1) to creates an entry,setting it to destroy(2) to destroy an entry.')
mabOnlineUserTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1), )
if mibBuilder.loadTexts: mabOnlineUserTable.setStatus('current')
if mibBuilder.loadTexts: mabOnlineUserTable.setDescription('Show the information of MAB users.')
mabOnlineUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1), ).setIndexNames((0, "NAG-MIB", "mabOnlineUserIndex"))
if mibBuilder.loadTexts: mabOnlineUserEntry.setStatus('current')
if mibBuilder.loadTexts: mabOnlineUserEntry.setDescription('')
mabOnlineUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: mabOnlineUserIndex.setStatus('current')
if mibBuilder.loadTexts: mabOnlineUserIndex.setDescription('The index of MAB user.')
mabOnlineUserMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mabOnlineUserMac.setStatus('current')
if mibBuilder.loadTexts: mabOnlineUserMac.setDescription('The mac of MAB user.')
mabOnlineUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mabOnlineUserName.setStatus('current')
if mibBuilder.loadTexts: mabOnlineUserName.setDescription('The username of MAB user.')
mabOnlineUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mabOnlineUserState.setStatus('current')
if mibBuilder.loadTexts: mabOnlineUserState.setDescription('The state of MAB user.')
mabOnlineUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mabOnlineUserPort.setStatus('current')
if mibBuilder.loadTexts: mabOnlineUserPort.setDescription('The port for MAB user.')
mabSetUserOffline = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mabSetUserOffline.setStatus('current')
if mibBuilder.loadTexts: mabSetUserOffline.setDescription('The mac of user offline.')
dot1xOnlineUserTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3), )
if mibBuilder.loadTexts: dot1xOnlineUserTable.setStatus('current')
if mibBuilder.loadTexts: dot1xOnlineUserTable.setDescription('Show the information of dot1x users.')
dot1xOnlineUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1), ).setIndexNames((0, "NAG-MIB", "dot1xOnlineUserIndex"))
if mibBuilder.loadTexts: dot1xOnlineUserEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xOnlineUserEntry.setDescription('')
dot1xOnlineUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: dot1xOnlineUserIndex.setStatus('current')
if mibBuilder.loadTexts: dot1xOnlineUserIndex.setDescription('The index of dot1x user.')
dot1xOnlineUserMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xOnlineUserMac.setStatus('current')
if mibBuilder.loadTexts: dot1xOnlineUserMac.setDescription('The mac of dot1x user.')
dot1xOnlineUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xOnlineUserName.setStatus('current')
if mibBuilder.loadTexts: dot1xOnlineUserName.setDescription('The name of dot1x user.')
dot1xOnlineUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xOnlineUserPort.setStatus('current')
if mibBuilder.loadTexts: dot1xOnlineUserPort.setDescription('The port for dot1x user.')
dot1xOnlineUserPortVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xOnlineUserPortVlanid.setStatus('current')
if mibBuilder.loadTexts: dot1xOnlineUserPortVlanid.setDescription('The vlan id of dot1x user.')
dot1xOnlineUserPortMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xOnlineUserPortMethod.setStatus('current')
if mibBuilder.loadTexts: dot1xOnlineUserPortMethod.setDescription('The port method dot1x user.')
dot1xOnlineUserPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xOnlineUserPortControl.setStatus('current')
if mibBuilder.loadTexts: dot1xOnlineUserPortControl.setDescription('The port control for dot1x user.')
dot1xOnlineUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xOnlineUserState.setStatus('current')
if mibBuilder.loadTexts: dot1xOnlineUserState.setDescription('The state of dot1x user.')
dot1xSetUserOffline = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xSetUserOffline.setStatus('current')
if mibBuilder.loadTexts: dot1xSetUserOffline.setDescription('The mac of user offline.')
portMacCountLimitTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1), )
if mibBuilder.loadTexts: portMacCountLimitTable.setStatus('current')
if mibBuilder.loadTexts: portMacCountLimitTable.setDescription('The Port Mac Count Limit information table.')
portMacCountLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1), ).setIndexNames((0, "NAG-MIB", "portMacCountLimitPortIndex"))
if mibBuilder.loadTexts: portMacCountLimitEntry.setStatus('current')
if mibBuilder.loadTexts: portMacCountLimitEntry.setDescription('The index of this table is port index.')
portMacCountLimitPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacCountLimitPortIndex.setStatus('current')
if mibBuilder.loadTexts: portMacCountLimitPortIndex.setDescription('Port Index.')
portMacCountLimitConfigNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portMacCountLimitConfigNum.setStatus('current')
if mibBuilder.loadTexts: portMacCountLimitConfigNum.setDescription('Configration of the maxmum dynamic mac can be learned on the port.')
portMacCountLimitCurNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacCountLimitCurNum.setStatus('current')
if mibBuilder.loadTexts: portMacCountLimitCurNum.setDescription('The current number of the dynamic mac learned on the port.')
portMacCountLimitDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("disable", 1), ("not-disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portMacCountLimitDisable.setStatus('current')
if mibBuilder.loadTexts: portMacCountLimitDisable.setDescription('The disable state of mac count limit on the port.the disable state can be set,but enable state is not')
portMacCountLimitViolationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("protect", 1), ("shutdown", 2), ("replace", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portMacCountLimitViolationMode.setStatus('current')
if mibBuilder.loadTexts: portMacCountLimitViolationMode.setDescription('The violation mode of port mac count reach the threshold.The default mode is protect,if you want to disable violation mode,you can\n                config protect mode.')
portMacCountLimitShutRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portMacCountLimitShutRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: portMacCountLimitShutRecoveryTime.setDescription('The recovery time of violation shutdown  mode, the recovery time range is <5-3600>, the value 0 is to cancel recovery time, the value <1-4> is not allowed to config.')
ddmTranscDiagnosisTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1), )
if mibBuilder.loadTexts: ddmTranscDiagnosisTable.setStatus('current')
if mibBuilder.loadTexts: ddmTranscDiagnosisTable.setDescription('A list of  ddm transceiver diagnosis information.')
ddmTranscDiagnosisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1), ).setIndexNames((0, "NAG-MIB", "ddmDiagnosisIfIndex"))
if mibBuilder.loadTexts: ddmTranscDiagnosisEntry.setStatus('current')
if mibBuilder.loadTexts: ddmTranscDiagnosisEntry.setDescription('entry for ddm transceiver diagnosis information.')
ddmDiagnosisIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagnosisIfIndex.setStatus('current')
if mibBuilder.loadTexts: ddmDiagnosisIfIndex.setDescription('interface NO.')
ddmDiagnosisTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagnosisTemperature.setStatus('current')
if mibBuilder.loadTexts: ddmDiagnosisTemperature.setDescription('current Temperature of the port,and the unit is C.')
ddmDiagTempHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTempHighAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagTempHighAlarmThreshold.setDescription('High alarm threshold of Temperature.')
ddmDiagTempLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTempLowAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagTempLowAlarmThreshold.setDescription('Low alarm threshold of Temperature.')
ddmDiagTempHighWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTempHighWarnThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagTempHighWarnThreshold.setDescription('High warn threshold of Temperature.')
ddmDiagTempLowWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTempLowWarnThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagTempLowWarnThreshold.setDescription('Low warn threshold of Temperature.')
ddmDiagnosisVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagnosisVoltage.setStatus('current')
if mibBuilder.loadTexts: ddmDiagnosisVoltage.setDescription('voltage of the port,and the unit is V.')
ddmDiagVoltHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagVoltHighAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagVoltHighAlarmThreshold.setDescription('High alarm threshold of Voltage.')
ddmDiagVoltLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagVoltLowAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagVoltLowAlarmThreshold.setDescription('Low alarm threshold of Voltage.')
ddmDiagVoltHighWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagVoltHighWarnThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagVoltHighWarnThreshold.setDescription('High warn threshold of Voltage.')
ddmDiagVoltLowWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagVoltLowWarnThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagVoltLowWarnThreshold.setDescription('Low warn threshold of Voltage.')
ddmDiagnosisBias = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagnosisBias.setStatus('current')
if mibBuilder.loadTexts: ddmDiagnosisBias.setDescription('bias of the port,the unit is mA.')
ddmDiagBiasHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagBiasHighAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagBiasHighAlarmThreshold.setDescription('High alarm threshold of Bias.')
ddmDiagBiasLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagBiasLowAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagBiasLowAlarmThreshold.setDescription('Low alarm threshold of Bias.')
ddmDiagBiasHighWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagBiasHighWarnThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagBiasHighWarnThreshold.setDescription('High warn threshold of Bias.')
ddmDiagBiasLowWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagBiasLowWarnThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagBiasLowWarnThreshold.setDescription('Low warn threshold of Bias.')
ddmDiagnosisRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagnosisRXPower.setStatus('current')
if mibBuilder.loadTexts: ddmDiagnosisRXPower.setDescription("RXPower of the port,and the unit is dBM,if the value of RXPower is infinitesimal,then set it to '-'.")
ddmDiagRXPowerHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagRXPowerHighAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagRXPowerHighAlarmThreshold.setDescription('High alarm threshold of RXPower.')
ddmDiagRXPowerLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagRXPowerLowAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagRXPowerLowAlarmThreshold.setDescription('Low alarm threshold of RXPower.')
ddmDiagRXPowerHighWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagRXPowerHighWarnThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagRXPowerHighWarnThreshold.setDescription('High warn threshold of RXPower.')
ddmDiagRXPowerLowWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagRXPowerLowWarnThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagRXPowerLowWarnThreshold.setDescription('Low warn threshold of RXPower.')
ddmDiagnosisTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagnosisTXPower.setStatus('current')
if mibBuilder.loadTexts: ddmDiagnosisTXPower.setDescription("TXPower of the port,and the unit is dBM,if the value of TXPoweris infinitesimal,then set it to '-'.")
ddmDiagTXPowerHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTXPowerHighAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagTXPowerHighAlarmThreshold.setDescription('High alarm threshold of TXPower.')
ddmDiagTXPowerLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTXPowerLowAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagTXPowerLowAlarmThreshold.setDescription('k=Low alarm threshold of TXPower.')
ddmDiagTXPowerHighWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTXPowerHighWarnThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagTXPowerHighWarnThreshold.setDescription('High warn threshold of TXPower.')
ddmDiagTXPowerLowWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTXPowerLowWarnThreshold.setStatus('current')
if mibBuilder.loadTexts: ddmDiagTXPowerLowWarnThreshold.setDescription('Low warn threshold of TXPower.')
ddmTranscAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 2), )
if mibBuilder.loadTexts: ddmTranscAlarmTable.setStatus('current')
if mibBuilder.loadTexts: ddmTranscAlarmTable.setDescription('A list of  ddm transceiver alarm information.')
ddmTranscAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 2, 1), ).setIndexNames((0, "NAG-MIB", "ddmAlarmIfIndex"))
if mibBuilder.loadTexts: ddmTranscAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: ddmTranscAlarmEntry.setDescription('entry for ddm transceiver alarm information.')
ddmAlarmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmAlarmIfIndex.setStatus('current')
if mibBuilder.loadTexts: ddmAlarmIfIndex.setDescription('interface NO.')
ddmAlarmInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmAlarmInfo.setStatus('current')
if mibBuilder.loadTexts: ddmAlarmInfo.setDescription('ddm transceiver alarm information.')
ddmTranscBasicInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3), )
if mibBuilder.loadTexts: ddmTranscBasicInfoTable.setStatus('current')
if mibBuilder.loadTexts: ddmTranscBasicInfoTable.setDescription('Basic info of  ddm transceiver alarm information.')
ddmTranscBasicInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1), ).setIndexNames((0, "NAG-MIB", "ddmAlarmIfIndex"))
if mibBuilder.loadTexts: ddmTranscBasicInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ddmTranscBasicInfoEntry.setDescription('entry for ddm transceiver basic information.')
ddmTransSerialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialIndex.setStatus('current')
if mibBuilder.loadTexts: ddmTransSerialIndex.setDescription('ddm Trans Serial Index .')
ddmTransSerialName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialName.setStatus('current')
if mibBuilder.loadTexts: ddmTransSerialName.setDescription('ddm Trans Serial Name.')
ddmTransSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialNo.setStatus('current')
if mibBuilder.loadTexts: ddmTransSerialNo.setDescription('ddm transceiver Serial number.')
ddmTransSerialVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialVendorName.setStatus('current')
if mibBuilder.loadTexts: ddmTransSerialVendorName.setDescription('ddm transceiver Vendor Name.')
ddmTransSerialModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialModelName.setStatus('current')
if mibBuilder.loadTexts: ddmTransSerialModelName.setDescription('ddm transceiver Model Name:SFP,SFP+,QSFP+,QSFP,XFP,etc.')
ddmTransSerialTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialTypeName.setStatus('current')
if mibBuilder.loadTexts: ddmTransSerialTypeName.setDescription('ddm transceiver Type Name:1000BASE-T,10GBASE-LR,etc.')
ddmTransSerialBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialBitRate.setStatus('current')
if mibBuilder.loadTexts: ddmTransSerialBitRate.setDescription('ddm transceiver bit rate:1300Mbit/s,10300Mbit/s,etc.')
ddmTransSerialWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialWaveLength.setStatus('current')
if mibBuilder.loadTexts: ddmTransSerialWaveLength.setDescription('ddm transceiver Wave Length:1310nm,etc.')
priPppoeIaGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaGlobalEnable.setDescription(' Enable or disable the pppoe-ia function in the switch.')
priPppoeIaSelfDefinedCircuitID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaSelfDefinedCircuitID.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaSelfDefinedCircuitID.setDescription("If user does not configure the circuit-id of pppoe-ia explicitly on a port, then \n        the user can self-designed format to generate the circuit-id, the format options include\n        vlan, port, ID, self-designed string, the circuitId may be only one or any combination of them,\n        and is strictly generated according to the sequence of format options, the ID option includes \t\n        switch ID and remote-mac, but the user just select only one of them, also In the swtich ID, it \n        includes mac and hostname options, the user just select only one of two, the maximum length \n        of self-designed striing is 64. If user input NULL, then delete the last configuration.\n        For example, if select vlan ,ID(swtich-id(mac)), and string 'str' format,\n        the user input the string like as 'vlan id swtich-id mac string str'.")
priPppoeIaTr101CircuitID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaTr101CircuitID.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaTr101CircuitID.setDescription("If user does not configure the circuit-id of pppoe-ia explicitly on a port, then \n        the user can config Tr-101 format to generate the circuit-id, the format like follow\n        'identifier-string STRING option (sp|sv|pv|spv) delimiter WORD', the STRING can be any ascii\n        except space, and it max length is 47, the WORD must be one in (#|.|,|;|:|/|space). \n        If user input NULL, then delete the last configuration.\n        For example, if STRING is switch , option is spv and WORD is '/',\n        the user input the string like as 'identifier-string switch option spv delimiter /'.")
priPppoeIaSelfDefinedRemoteID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaSelfDefinedRemoteID.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaSelfDefinedRemoteID.setDescription("If user does not configure the remote-id of pppoe-ia explicitly on a port, then \n        the user can self-designed format to generate the remote-id, the format options include\n        mac,hostname and self-designed string, the remoteId may be only one or any combination of them,\n        and is strictly generated according to the sequence of format options, \n        the maximum length of self-designed striing is 64.\n        If user input the NULL, then delete the last configuration.\n        For example, if select hostname,mac,and string 'str' format,\n        the user input the string like as 'hostname mac string str'.")
priPppoeIaDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 0), ("pound", 1), ("dot", 2), ("comma", 3), ("semicolon", 4), ("colon", 5), ("slash", 6), ("space", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaDelimiter.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaDelimiter.setDescription(" Config pppoe-ia delimiter in circuitId and remoteId.\n        Default: the default delimiter of type TR-101 is space, \n        the default delimiter of type self-defined is '\\0'")
priPppoeIaCircuitIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("hex", 1), ("ascii", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaCircuitIdFormat.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaCircuitIdFormat.setDescription(" Config pppoe-ia circuitId format.\n        Default: the default format of the circuitId's mac(if included) is hex, other is ascii")
priPppoeIaRemoteIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("hex", 1), ("ascii", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaRemoteIdFormat.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaRemoteIdFormat.setDescription(" Config pppoe-ia remoteId format.\n        Default: the default format of the remoteId's mac(if included) is hex, other is ascii")
priPppoeIaPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8), )
if mibBuilder.loadTexts: priPppoeIaPortTable.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaPortTable.setDescription(' Pppoe-ia configuration in port.')
priPppoeIaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1), ).setIndexNames((0, "NAG-MIB", "priPppoeIaPortID"))
if mibBuilder.loadTexts: priPppoeIaEntry.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaEntry.setDescription(' Pppoe-ia configuration in port.')
priPppoeIaPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: priPppoeIaPortID.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaPortID.setDescription("This value is port's ID.")
priPppoeIaPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaPortEnable.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaPortEnable.setDescription(' Enable or disable the pppoe-ia function of the port in the switch. Default:0.')
priPppoeIaPortCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaPortCircuitID.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaPortCircuitID.setDescription(' Config circuitId for the port. Default:NULL.')
priPppoeIaPortRemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaPortRemoteID.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaPortRemoteID.setDescription(' Config remoteId for the port. Default:NULL.')
priPppoeIaPortTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaPortTrust.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaPortTrust.setDescription(' Enable or disable the pppoe-ia trust function of the port in the switch. Default:0')
priPppoeIaPortVendorTagStrip = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaPortVendorTagStrip.setStatus('current')
if mibBuilder.loadTexts: priPppoeIaPortVendorTagStrip.setDescription(' Enable or disable the pppoe-ia vendorTag strip function of the port in the switch. Default:0')
newPortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1), )
if mibBuilder.loadTexts: newPortSecurityTable.setStatus('current')
if mibBuilder.loadTexts: newPortSecurityTable.setDescription('The Port Security information table.')
newPortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1), ).setIndexNames((0, "NAG-MIB", "portSecurityPortIndex"))
if mibBuilder.loadTexts: newPortSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: newPortSecurityEntry.setDescription('The index of this table is port index.')
portSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityPortIndex.setStatus('current')
if mibBuilder.loadTexts: portSecurityPortIndex.setDescription('Secure Port Index.')
portSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityState.setStatus('current')
if mibBuilder.loadTexts: portSecurityState.setDescription('enable or disable port security on this port.')
portSecuritySticky = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecuritySticky.setStatus('current')
if mibBuilder.loadTexts: portSecuritySticky.setDescription('enable or disable port security sticky on this port.If enable it,the port converts all the dynamic secure \n\t\t\t\t\t\t\t\t\tMAC addresses, including those that were dynamically learned before sticky learning was enabled,to sticky \n\t\t\t\t\t\t\t\t\tsecure MAC addresses and adds all sticky secure MAC addresses to the running configuration')
portSecurityMaxMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityMaxMacNum.setStatus('current')
if mibBuilder.loadTexts: portSecurityMaxMacNum.setDescription('The maximum number of security mac can be set or learned on the secure port.')
portSecurityCurMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityCurMacNum.setStatus('current')
if mibBuilder.loadTexts: portSecurityCurMacNum.setDescription('The number of the current security mac on the secure port.')
portSecurityCfgMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityCfgMacNum.setStatus('current')
if mibBuilder.loadTexts: portSecurityCfgMacNum.setDescription('The number of security mac can be set on the secure port.')
portSecurityVioMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityVioMacNum.setStatus('current')
if mibBuilder.loadTexts: portSecurityVioMacNum.setDescription('The violation number of mac received on the secure port.')
portSecurityAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityAgingTime.setStatus('current')
if mibBuilder.loadTexts: portSecurityAgingTime.setDescription('The aging time for secure address entries on the secure port.')
portSecurityAgingType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("default", 0), ("absolute", 1), ("inactivity", 2), ("static", 4), ("absolute-static", 5), ("inactivity-static", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityAgingType.setStatus('current')
if mibBuilder.loadTexts: portSecurityAgingType.setDescription('The aging type for secure address entries on the secure port.If you want to disable inactivity or static aging type,you can config default type.')
portSecurityVioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("protect", 1), ("restrict", 2), ("shutdown", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityVioMode.setStatus('current')
if mibBuilder.loadTexts: portSecurityVioMode.setDescription('The violation mode of secure port mac count reach the threshold.The default mode is shutdown,if you want to disable violation mode,you can\n                config shutdown mode.')
portSecurityVioShutRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityVioShutRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: portSecurityVioShutRecoveryTime.setDescription('The recovery time of violation shutdown  mode, the recovery time range is <5-3600>, the value 0 is to cancel recovery time, the value <1-4> is not allowed to config.')
portSecurityVioRestrictRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityVioRestrictRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: portSecurityVioRestrictRecoveryTime.setDescription('The recovery time of violation restrict  mode, the recovery time range is <5-3600>, the value 0 is to cancel recovery time, the value <1-4> is not allowed to config.')
portSecurityVlanMaxNumTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2), )
if mibBuilder.loadTexts: portSecurityVlanMaxNumTable.setStatus('current')
if mibBuilder.loadTexts: portSecurityVlanMaxNumTable.setDescription('Table of maximum mac number with vlan on security port, and the secure port must be on trunk mode.')
portSecurityVlanMaxNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1), ).setIndexNames((0, "NAG-MIB", "portSecurityPortIndex"), (0, "NAG-MIB", "portSecurityVlanIndex"))
if mibBuilder.loadTexts: portSecurityVlanMaxNumEntry.setStatus('current')
if mibBuilder.loadTexts: portSecurityVlanMaxNumEntry.setDescription('An entry in the port security maximum mac number with vlan table.')
portSecurityVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityVlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: portSecurityVlanPortIndex.setDescription('Secure Port Index.')
portSecurityVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityVlanIndex.setStatus('current')
if mibBuilder.loadTexts: portSecurityVlanIndex.setDescription('The vlan index on the secure port.')
portSecurityVlanMaxMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityVlanMaxMacNum.setStatus('current')
if mibBuilder.loadTexts: portSecurityVlanMaxMacNum.setDescription('The maximum number of security mac can be set or learned in the vlan on the secure port,\n        \t\t\t\t\t\tthe maximum range is <1-4096>, the value 0 is to cancel maximum in this vlan,\n        \t\t\t\t\t\tand when you set the maximum number with one vlan the secure port must be on trunk mode.')
portSecurityVlanCurMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityVlanCurMacNum.setStatus('current')
if mibBuilder.loadTexts: portSecurityVlanCurMacNum.setDescription('The current number of security mac set or learned in the vlan on the secure port.')
portSecurityMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3), )
if mibBuilder.loadTexts: portSecurityMacAddressTable.setStatus('current')
if mibBuilder.loadTexts: portSecurityMacAddressTable.setDescription('Table of mac address on security port.')
portSecurityMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1), ).setIndexNames((0, "NAG-MIB", "portSecurityPortIndex"), (0, "NAG-MIB", "portSecurityVlanIndex"), (0, "NAG-MIB", "portSecurityMacAddress"))
if mibBuilder.loadTexts: portSecurityMacAddressEntry.setStatus('current')
if mibBuilder.loadTexts: portSecurityMacAddressEntry.setDescription('An entry in the port security mac address table.')
portSecurityMacAddressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityMacAddressPortIndex.setStatus('current')
if mibBuilder.loadTexts: portSecurityMacAddressPortIndex.setDescription('Secure Port Index.')
portSecurityMacAddressVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityMacAddressVlanIndex.setStatus('current')
if mibBuilder.loadTexts: portSecurityMacAddressVlanIndex.setDescription('The vlan index on the secure port.When set mac address,the vlan index must be zero if the port is on access mode.')
portSecurityMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityMacAddress.setStatus('current')
if mibBuilder.loadTexts: portSecurityMacAddress.setDescription('Secure mac address on this secure port')
portSecurityMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 64))).clone(namedValues=NamedValues(("secured", 16), ("secures", 32), ("securec", 64)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityMacType.setStatus('current')
if mibBuilder.loadTexts: portSecurityMacType.setDescription('The type of mac address on the secure port.')
portSecurityMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityMacStatus.setStatus('current')
if mibBuilder.loadTexts: portSecurityMacStatus.setDescription('Current state of the mac address.')
prieeePortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 34, 1), )
if mibBuilder.loadTexts: prieeePortTable.setStatus('current')
if mibBuilder.loadTexts: prieeePortTable.setDescription('A table containing current configuration information\n        for each port.')
prieeePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 34, 1, 1), ).setIndexNames((0, "NAG-MIB", "portIndex"))
if mibBuilder.loadTexts: prieeePortEntry.setStatus('current')
if mibBuilder.loadTexts: prieeePortEntry.setDescription('eee configuration in port')
eeePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 34, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: eeePortIndex.setStatus('current')
if mibBuilder.loadTexts: eeePortIndex.setDescription('The eee configuration port index.')
eeePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 34, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eeePortStatus.setStatus('current')
if mibBuilder.loadTexts: eeePortStatus.setDescription(' The eee config. Enable expresses it is turned on, while disable indicates that off.')
portRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1), )
if mibBuilder.loadTexts: portRateLimitTable.setStatus('current')
if mibBuilder.loadTexts: portRateLimitTable.setDescription('The Port Receiving Packets Rate Limit information table.')
portRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1), ).setIndexNames((0, "NAG-MIB", "portRateLimitPortIndex"))
if mibBuilder.loadTexts: portRateLimitEntry.setStatus('current')
if mibBuilder.loadTexts: portRateLimitEntry.setDescription('The index of this table is port index.')
portRateLimitPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRateLimitPortIndex.setStatus('current')
if mibBuilder.loadTexts: portRateLimitPortIndex.setDescription('Port Index.')
portRateLimitConfigBroadcastNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portRateLimitConfigBroadcastNum.setStatus('current')
if mibBuilder.loadTexts: portRateLimitConfigBroadcastNum.setDescription('Configration of the max receiving rate of broadcast packets on the port,the value range is <200-2000000>.\n                The value 0 means disable the rate limit of broadcast packets.\n                the value <1-199> is not allowed to config.')
portRateLimitCurBroadcastNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRateLimitCurBroadcastNum.setStatus('current')
if mibBuilder.loadTexts: portRateLimitCurBroadcastNum.setDescription('The current receiving rate of broadcast packets on the port.')
portRateLimitConfigMulticastNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portRateLimitConfigMulticastNum.setStatus('current')
if mibBuilder.loadTexts: portRateLimitConfigMulticastNum.setDescription('Configration of the max receiving rate of multicast packets on the port,the value range is <200-2000000>.\n                The value 0 means  disable the rate limit of multicast packets.\n                the value <1-199> is not allowed to config.')
portRateLimitCurMulticastNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRateLimitCurMulticastNum.setStatus('current')
if mibBuilder.loadTexts: portRateLimitCurMulticastNum.setDescription('The current receiving rate of Multicast packets on the port.')
portRateLimitConfigUnicastNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portRateLimitConfigUnicastNum.setStatus('current')
if mibBuilder.loadTexts: portRateLimitConfigUnicastNum.setDescription('Configration of the max receiving rate of unicast packets on the port,the value range is <200-2000000>.\n                The value 0 means disable the rate limit of unicast packets.\n                 the value <1-199> is not allowed to config.')
portRateLimitCurUnicastNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRateLimitCurUnicastNum.setStatus('current')
if mibBuilder.loadTexts: portRateLimitCurUnicastNum.setDescription('The current receiving rate of unicast packets on the port.')
portRateLimitConfigAllNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portRateLimitConfigAllNum.setStatus('current')
if mibBuilder.loadTexts: portRateLimitConfigAllNum.setDescription('Configration of the max receiving rate of all packets on the port,the value range is <200-2000000>.\n                The value 0 means disable the rate limit of all packets.\n                 the value <1-199> is not allowed to config.')
portRateLimitCurAllNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRateLimitCurAllNum.setStatus('current')
if mibBuilder.loadTexts: portRateLimitCurAllNum.setDescription('The current receiving rate of all packets on the port.')
portRateLimitPacketsType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRateLimitPacketsType.setStatus('current')
if mibBuilder.loadTexts: portRateLimitPacketsType.setDescription('Which type of receiving packets that rate limit is set.\n                0:none, 1:broadcast, 2:multicast, 3:unicast, 4:all,\n                5:broadcast+multicast, 6:broadcast+unicast, 7:multicast+unicast.\n                8:broadcast+all, 9:multicast+all, 10:unicast+all, 11:broadcast+multicast+all,\n                12:broadcast+unicast+all, 13:multicast+unicast+all, 14:broadcast+multicast+unicast,\n                15:broadcast+multicast+unicast+all')
portRateLimitViolationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nocontrol", 0), ("shutdown", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portRateLimitViolationMode.setStatus('current')
if mibBuilder.loadTexts: portRateLimitViolationMode.setDescription('The violation mode of port receiving packets rate reach the threshold.The default mode is no violation actions.')
portRateLimitShutRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portRateLimitShutRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: portRateLimitShutRecoveryTime.setDescription("The recovery time of violation shutdown  mode, the recovery time range is <0-86400>,\n                 the value 0 means the port cann't be recovery forever, the default value is 300.")
macBlackholeTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1), )
if mibBuilder.loadTexts: macBlackholeTable.setStatus('current')
if mibBuilder.loadTexts: macBlackholeTable.setDescription('A table containing current configuration information for each mac in vlan`s status.')
macBlackholeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1), ).setIndexNames((0, "NAG-MIB", "macAddressInVlanID"), (0, "NAG-MIB", "macAddress"))
if mibBuilder.loadTexts: macBlackholeEntry.setStatus('current')
if mibBuilder.loadTexts: macBlackholeEntry.setDescription('Thie entry is control the mac add to blackhole or delete from blackhole.')
macAddressInVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: macAddressInVlanID.setStatus('current')
if mibBuilder.loadTexts: macAddressInVlanID.setDescription('This value is the mac address in vlan.')
macAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: macAddress.setStatus('current')
if mibBuilder.loadTexts: macAddress.setDescription('This value is mac address.')
macType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("both", 0), ("source", 1), ("destination", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macType.setStatus('current')
if mibBuilder.loadTexts: macType.setDescription('Control the mac from both(0)/source(1)/destination(2).Default both(0).')
macStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("creat", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macStatus.setStatus('current')
if mibBuilder.loadTexts: macStatus.setDescription('creat(0) the mac to blackhole,or destroy(2) the mac from blackhole.active(1)the mac in blackhole')
cableTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 37, 1), )
if mibBuilder.loadTexts: cableTable.setStatus('current')
if mibBuilder.loadTexts: cableTable.setDescription(' A list of port entries.')
priCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 37, 1, 1), ).setIndexNames((0, "NAG-MIB", "cableLengthInfo"))
if mibBuilder.loadTexts: priCableEntry.setStatus('current')
if mibBuilder.loadTexts: priCableEntry.setDescription(' A port entry containing port information, \n            status, and control.')
cableLengthInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 37, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLengthInfo.setStatus('current')
if mibBuilder.loadTexts: cableLengthInfo.setDescription('Cable Length Info.')
priMrppRingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1), )
if mibBuilder.loadTexts: priMrppRingTable.setStatus('current')
if mibBuilder.loadTexts: priMrppRingTable.setDescription('The MRPP Ring information table.')
priMrppRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1), ).setIndexNames((0, "NAG-MIB", "mrppRingIndex"))
if mibBuilder.loadTexts: priMrppRingEntry.setStatus('current')
if mibBuilder.loadTexts: priMrppRingEntry.setDescription('The index of this table is RING index.')
mrppRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingIndex.setStatus('current')
if mibBuilder.loadTexts: mrppRingIndex.setDescription('mrpp ring Index<1-4096>.')
mrppRingNodeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingNodeMode.setStatus('current')
if mibBuilder.loadTexts: mrppRingNodeMode.setDescription('mrpp ring node mode:MASTER:1,TRANSIT:0.')
mrppRingNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingNodeState.setStatus('current')
if mibBuilder.loadTexts: mrppRingNodeState.setDescription('mrpp ring node state:\n                 IDLE:            0,\n                 COMPLETE:        1,\n                 FAILED:          2,\n                 LINKS_UP:        3,\n                 LINKS_DOWN:      4,\n                 PRE_FORWARDING:  5.')
mrppRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingStatus.setStatus('current')
if mibBuilder.loadTexts: mrppRingStatus.setDescription('mrpp ring status:enable:1,disable:0.')
mrppRingPriPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingPriPortName.setStatus('current')
if mibBuilder.loadTexts: mrppRingPriPortName.setDescription("ring's traffic primary port name.")
mrppRingPriPortBlockState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingPriPortBlockState.setStatus('current')
if mibBuilder.loadTexts: mrppRingPriPortBlockState.setDescription("ring's traffic primary port block state:BLOCK:1,UNBLOCK:0.")
mrppRingSecPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingSecPortName.setStatus('current')
if mibBuilder.loadTexts: mrppRingSecPortName.setDescription("ring's traffic secondary port name.")
mrppRingSecPortBlockState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingSecPortBlockState.setStatus('current')
if mibBuilder.loadTexts: mrppRingSecPortBlockState.setDescription("ring's traffic secondary port block state:BLOCK:1,UNBLOCK:0.")
erpsTcnPropagationConfig = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("erps", 1), ("stp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsTcnPropagationConfig.setStatus('current')
if mibBuilder.loadTexts: erpsTcnPropagationConfig.setDescription('Config Topology change propagation type.')
erpsRingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2), )
if mibBuilder.loadTexts: erpsRingConfigTable.setStatus('current')
if mibBuilder.loadTexts: erpsRingConfigTable.setDescription('Erps Ring configration table.')
erpsRingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"))
if mibBuilder.loadTexts: erpsRingConfigEntry.setStatus('current')
if mibBuilder.loadTexts: erpsRingConfigEntry.setDescription('Erps Ring configration entry.')
erpsRingNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsRingNameIndex.setStatus('current')
if mibBuilder.loadTexts: erpsRingNameIndex.setDescription('erps ring name index, the max number is 32.')
erpsRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingName.setStatus('current')
if mibBuilder.loadTexts: erpsRingName.setDescription('erps ring name.')
erpsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("v1", 1), ("v2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsVersion.setStatus('current')
if mibBuilder.loadTexts: erpsVersion.setDescription('Version Ethernet ring node running ITU-T G.8032.')
erpsOpenRing = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none-open", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsOpenRing.setStatus('current')
if mibBuilder.loadTexts: erpsOpenRing.setDescription('set Erps ring topolagy type .')
erpsRapsVirtualChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("without", 0), ("with", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRapsVirtualChannel.setStatus('current')
if mibBuilder.loadTexts: erpsRapsVirtualChannel.setDescription('R-APS virtual channel configuration .')
erpsRingPort0 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingPort0.setStatus('current')
if mibBuilder.loadTexts: erpsRingPort0.setDescription("ERPS ring's member port0 .")
erpsRingPort0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsRingPort0Index.setStatus('current')
if mibBuilder.loadTexts: erpsRingPort0Index.setDescription("ERPS ring's member port0 index .")
erpsRingPort1ExistFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("not-none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingPort1ExistFlag.setStatus('current')
if mibBuilder.loadTexts: erpsRingPort1ExistFlag.setDescription("ERPS ring's member port1 whether has been set none; \n\t\t\t\t can not be set alone,must be set with erpsRingPort0 together.")
erpsRingPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingPort1.setStatus('current')
if mibBuilder.loadTexts: erpsRingPort1.setDescription("ERPS ring's member port1 .")
erpsRingPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsRingPort1Index.setStatus('current')
if mibBuilder.loadTexts: erpsRingPort1Index.setDescription("ERPS ring's member port1 index .")
erpsRingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unset", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingRowStatus.setStatus('current')
if mibBuilder.loadTexts: erpsRingRowStatus.setDescription("ERPS ring's row status .")
erpsTrapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unset", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: erpsTrapEnabled.setDescription('ERPS trap configration.')
erpsLogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unset", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsLogEnabled.setStatus('current')
if mibBuilder.loadTexts: erpsLogEnabled.setDescription('ERPS log configration.')
erpsInstanceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3), )
if mibBuilder.loadTexts: erpsInstanceConfigTable.setStatus('current')
if mibBuilder.loadTexts: erpsInstanceConfigTable.setDescription('erps Instance configration table.')
erpsInstanceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"), (0, "NAG-MIB", "erpsInstanceId"))
if mibBuilder.loadTexts: erpsInstanceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: erpsInstanceConfigEntry.setDescription('A set of configuration parameters for erps Instance.')
erpsInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsInstanceId.setStatus('current')
if mibBuilder.loadTexts: erpsInstanceId.setDescription('erps instance id.scope:<1-48>')
erpsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsDescription.setStatus('current')
if mibBuilder.loadTexts: erpsDescription.setDescription('ERPS instance description.')
erpsRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingId.setStatus('current')
if mibBuilder.loadTexts: erpsRingId.setDescription('Set Ring ID that R-APS MAC address included.scope:<1-64>')
erpsRplPort0Role = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("owner", 1), ("neighbour", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRplPort0Role.setStatus('current')
if mibBuilder.loadTexts: erpsRplPort0Role.setDescription("Set Ring membor port0's role.")
erpsRplPort1Role = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("owner", 1), ("neighbour", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRplPort1Role.setStatus('current')
if mibBuilder.loadTexts: erpsRplPort1Role.setDescription("Set Ring membor port1's role.")
erpsRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("non-revertive", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: erpsRevertiveMode.setDescription('Set ERPS Ring working in non-revertive or revertive operation.')
erpsGuardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGuardTimer.setStatus('current')
if mibBuilder.loadTexts: erpsGuardTimer.setDescription('Guard timer configuration.scope:<1-200>')
erpsHoldoffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsHoldoffTimer.setStatus('current')
if mibBuilder.loadTexts: erpsHoldoffTimer.setDescription('Holdoff timer, scope:<0-10>')
erpsWtrTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsWtrTimer.setStatus('current')
if mibBuilder.loadTexts: erpsWtrTimer.setDescription('Wait To Restore configuration.scope:<1-12>')
erpsProtectedInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsProtectedInstance.setStatus('current')
if mibBuilder.loadTexts: erpsProtectedInstance.setDescription('Protection vlan reference MSTP instance configuration')
erpsRapsMel = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRapsMel.setStatus('current')
if mibBuilder.loadTexts: erpsRapsMel.setDescription('R-APS Maintenance Entity Group Level configuration.scope:<0-7>')
erpsControlVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsControlVlan.setStatus('current')
if mibBuilder.loadTexts: erpsControlVlan.setDescription('Control vlan configuration')
erpsForcedSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("port0-forced-switch", 1), ("port1-forced-switch", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsForcedSwitch.setStatus('current')
if mibBuilder.loadTexts: erpsForcedSwitch.setDescription('Forces a block on the ring port')
erpsManualSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("port0-manual-switch", 1), ("port1-manual-switch", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsManualSwitch.setStatus('current')
if mibBuilder.loadTexts: erpsManualSwitch.setDescription('Forces a block on the ring port in the absence of a failure or FS')
erpsClearCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsClearCommand.setStatus('current')
if mibBuilder.loadTexts: erpsClearCommand.setDescription('Clear an administrative command')
erpsClearPortStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsClearPortStatistics.setStatus('current')
if mibBuilder.loadTexts: erpsClearPortStatistics.setDescription('Clear an administrative command')
erpsInstanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unset", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsInstanceRowStatus.setStatus('current')
if mibBuilder.loadTexts: erpsInstanceRowStatus.setDescription('Clear an administrative command')
erpsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4))
erpsInstanceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 1), )
if mibBuilder.loadTexts: erpsInstanceStatusTable.setStatus('current')
if mibBuilder.loadTexts: erpsInstanceStatusTable.setDescription('erps Instance status table.')
erpsInstanceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 1, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"), (0, "NAG-MIB", "erpsInstanceId"))
if mibBuilder.loadTexts: erpsInstanceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: erpsInstanceStatusEntry.setDescription('erps instance status.')
erpsActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsActiveStatus.setStatus('current')
if mibBuilder.loadTexts: erpsActiveStatus.setDescription('erps instance active status.')
erpsNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsNodeState.setStatus('current')
if mibBuilder.loadTexts: erpsNodeState.setDescription('erps instance node state.')
erpsPort0StatusTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2), )
if mibBuilder.loadTexts: erpsPort0StatusTable.setStatus('current')
if mibBuilder.loadTexts: erpsPort0StatusTable.setDescription('erps port status table.')
erpsPort0StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"), (0, "NAG-MIB", "erpsInstanceId"))
if mibBuilder.loadTexts: erpsPort0StatusEntry.setStatus('current')
if mibBuilder.loadTexts: erpsPort0StatusEntry.setDescription('erps port0 status.')
erpsPort0Name = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0Name.setStatus('current')
if mibBuilder.loadTexts: erpsPort0Name.setDescription("erps port0's name.")
erpsPort0Status = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0Status.setStatus('current')
if mibBuilder.loadTexts: erpsPort0Status.setDescription("erps port0's block status.")
erpsPort0SignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0SignalStatus.setStatus('current')
if mibBuilder.loadTexts: erpsPort0SignalStatus.setDescription("erps port0's siginal status.")
erpsPort0RRapsNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RRapsNodeId.setStatus('current')
if mibBuilder.loadTexts: erpsPort0RRapsNodeId.setDescription("erps port0's R-APS-NodeId.")
erpsPort0BPR = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0BPR.setStatus('current')
if mibBuilder.loadTexts: erpsPort0BPR.setDescription("erps port0's BPR value.")
erpsPort1StatusTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3), )
if mibBuilder.loadTexts: erpsPort1StatusTable.setStatus('current')
if mibBuilder.loadTexts: erpsPort1StatusTable.setDescription('erps port1 status table.')
erpsPort1StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"), (0, "NAG-MIB", "erpsInstanceId"))
if mibBuilder.loadTexts: erpsPort1StatusEntry.setStatus('current')
if mibBuilder.loadTexts: erpsPort1StatusEntry.setDescription('erps port1 status.')
erpsPort1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1Name.setStatus('current')
if mibBuilder.loadTexts: erpsPort1Name.setDescription("erps port1's name.")
erpsPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1Status.setStatus('current')
if mibBuilder.loadTexts: erpsPort1Status.setDescription("erps port1's block status.")
erpsPort1SignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1SignalStatus.setStatus('current')
if mibBuilder.loadTexts: erpsPort1SignalStatus.setDescription("erps port1's siginal status.")
erpsPort1RRapsNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RRapsNodeId.setStatus('current')
if mibBuilder.loadTexts: erpsPort1RRapsNodeId.setDescription("erps port1's R-APS-NodeId.")
erpsPort1BPR = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1BPR.setStatus('current')
if mibBuilder.loadTexts: erpsPort1BPR.setDescription("erps port1's BPR value.")
erpsPortTrackConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5))
erpsPortTrackConfigTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1), )
if mibBuilder.loadTexts: erpsPortTrackConfigTable.setStatus('current')
if mibBuilder.loadTexts: erpsPortTrackConfigTable.setDescription('erps port0 failure-detect table.')
erpsPortTrackConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"), (0, "NAG-MIB", "erpsRingPortIndex"))
if mibBuilder.loadTexts: erpsPortTrackConfigEntry.setStatus('current')
if mibBuilder.loadTexts: erpsPortTrackConfigEntry.setDescription('A set of configuration parameters for erps port1 failure-detect.')
erpsRingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("port0", 0), ("port1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingPortIndex.setStatus('current')
if mibBuilder.loadTexts: erpsRingPortIndex.setDescription('Domain.')
erpsPortTrackProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cc", 1), ("physical-link-or-cc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackProtocolType.setStatus('current')
if mibBuilder.loadTexts: erpsPortTrackProtocolType.setDescription("Failure type that ERPS ring's member port detect.")
erpsPortTrackCfmDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackCfmDomain.setStatus('current')
if mibBuilder.loadTexts: erpsPortTrackCfmDomain.setDescription('Domain.')
erpsPortTrackCfmMaName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackCfmMaName.setStatus('current')
if mibBuilder.loadTexts: erpsPortTrackCfmMaName.setDescription('Service name string <1-45> character.')
erpsPortTrackCfmMaNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackCfmMaNum.setStatus('current')
if mibBuilder.loadTexts: erpsPortTrackCfmMaNum.setDescription('Service name by numbe.')
erpsPortTrackCfmPvlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackCfmPvlanId.setStatus('current')
if mibBuilder.loadTexts: erpsPortTrackCfmPvlanId.setDescription('Service name by primary vlan.')
erpsPortTrackCfmMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackCfmMepId.setStatus('current')
if mibBuilder.loadTexts: erpsPortTrackCfmMepId.setDescription('Local mep configuartion.')
erpsPortTrackCfmRmepId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackCfmRmepId.setStatus('current')
if mibBuilder.loadTexts: erpsPortTrackCfmRmepId.setDescription('Remote mep configuartion.')
erpsPortTrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unset", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackRowStatus.setStatus('current')
if mibBuilder.loadTexts: erpsPortTrackRowStatus.setDescription('enable configuartion.')
erpsPortStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6))
erpsPort0StatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1), )
if mibBuilder.loadTexts: erpsPort0StatisticsTable.setStatus('current')
if mibBuilder.loadTexts: erpsPort0StatisticsTable.setDescription('erps port0 Statistics table.')
erpsPort0StatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"), (0, "NAG-MIB", "erpsInstanceId"))
if mibBuilder.loadTexts: erpsPort0StatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: erpsPort0StatisticsEntry.setDescription('A set of results for erps port0 statistics.')
erpsPort0TxRapsNrPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0TxRapsNrPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort0TxRapsNrPktCnt.setDescription("ERPS port0's Tx NR Packet Count.")
erpsPort0RxRapsNrPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RxRapsNrPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort0RxRapsNrPktCnt.setDescription("ERPS port0's Rx NR Packet Count.")
erpsPort0TxRapsNrRbPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0TxRapsNrRbPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort0TxRapsNrRbPktCnt.setDescription("ERPS port0's Tx NR-RB Packet Count.")
erpsPort0RxRapsNrRbPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RxRapsNrRbPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort0RxRapsNrRbPktCnt.setDescription("ERPS port0's Rx NR-RB Packet Count.")
erpsPort0TxRapsSfPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0TxRapsSfPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort0TxRapsSfPktCnt.setDescription("ERPS port0's Tx SF Packet Count.")
erpsPort0RxRapsSfPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RxRapsSfPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort0RxRapsSfPktCnt.setDescription("ERPS port0's Rx SF Packet Count.")
erpsPort0TxRapsMsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0TxRapsMsPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort0TxRapsMsPktCnt.setDescription("ERPS port0's Tx MS Packet Count.")
erpsPort0RxRapsMsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RxRapsMsPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort0RxRapsMsPktCnt.setDescription("ERPS port0's Rx MS Packet Count.")
erpsPort0TxRapsFsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0TxRapsFsPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort0TxRapsFsPktCnt.setDescription("ERPS port0's Tx FS Packet Count.")
erpsPort0RxRapsFsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RxRapsFsPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort0RxRapsFsPktCnt.setDescription("ERPS port0's Rx FS Packet Count.")
erpsPort0TxRapsEventPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0TxRapsEventPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort0TxRapsEventPktCnt.setDescription("ERPS port0's Tx Event Packet Count.")
erpsPort0RxRapsEventPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RxRapsEventPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort0RxRapsEventPktCnt.setDescription("ERPS port0's Rx Event Packet Count.")
erpsPort0TxRapsTotalPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0TxRapsTotalPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort0TxRapsTotalPktCnt.setDescription("ERPS port0's Tx Total Packet Count.")
erpsPort0RxRapsTotalPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RxRapsTotalPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort0RxRapsTotalPktCnt.setDescription("ERPS port0's Rx Total Packet Count.")
erpsPort1StatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2), )
if mibBuilder.loadTexts: erpsPort1StatisticsTable.setStatus('current')
if mibBuilder.loadTexts: erpsPort1StatisticsTable.setDescription('erps port1 Statistics table.')
erpsPort1StatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"), (0, "NAG-MIB", "erpsInstanceId"))
if mibBuilder.loadTexts: erpsPort1StatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: erpsPort1StatisticsEntry.setDescription('A set of results for erps port1 statistics.')
erpsPort1TxRapsNrPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1TxRapsNrPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort1TxRapsNrPktCnt.setDescription("ERPS port1's Tx NR Packet Count.")
erpsPort1RxRapsNrPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RxRapsNrPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort1RxRapsNrPktCnt.setDescription("ERPS port1's Rx NR Packet Count.")
erpsPort1TxRapsNrRbPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1TxRapsNrRbPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort1TxRapsNrRbPktCnt.setDescription("ERPS port1's Tx NR-RB Packet Count.")
erpsPort1RxRapsNrRbPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RxRapsNrRbPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort1RxRapsNrRbPktCnt.setDescription("ERPS port1's Rx NR-RB Packet Count.")
erpsPort1TxRapsSfPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1TxRapsSfPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort1TxRapsSfPktCnt.setDescription("ERPS port1's Tx SF Packet Count.")
erpsPort1RxRapsSfPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RxRapsSfPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort1RxRapsSfPktCnt.setDescription("ERPS port1's Rx SF Packet Count.")
erpsPort1TxRapsMsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1TxRapsMsPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort1TxRapsMsPktCnt.setDescription("ERPS port1's Tx MS Packet Count.")
erpsPort1RxRapsMsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RxRapsMsPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort1RxRapsMsPktCnt.setDescription("ERPS port1's Rx MS Packet Count.")
erpsPort1TxRapsFsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1TxRapsFsPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort1TxRapsFsPktCnt.setDescription("ERPS port1's Tx FS Packet Count.")
erpsPort1RxRapsFsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RxRapsFsPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort1RxRapsFsPktCnt.setDescription("ERPS port1's Rx FS Packet Count.")
erpsPort1TxRapsEventPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1TxRapsEventPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort1TxRapsEventPktCnt.setDescription("ERPS port1's Tx Event Packet Count.")
erpsPort1RxRapsEventPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RxRapsEventPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort1RxRapsEventPktCnt.setDescription("ERPS port1's Rx Event Packet Count.")
erpsPort1TxRapsTotalPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1TxRapsTotalPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort1TxRapsTotalPktCnt.setDescription("ERPS port1's Tx Total Packet Count.")
erpsPort1RxRapsTotalPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RxRapsTotalPktCnt.setStatus('current')
if mibBuilder.loadTexts: erpsPort1RxRapsTotalPktCnt.setDescription("ERPS port1's Rx Total Packet Count.")
fdbMacInfoTable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1))
fdbMacMaxTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacMaxTotalNum.setStatus('current')
if mibBuilder.loadTexts: fdbMacMaxTotalNum.setDescription('MAX total filter entry number.')
fdbMacMaxStaticNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacMaxStaticNum.setStatus('current')
if mibBuilder.loadTexts: fdbMacMaxStaticNum.setDescription('MAX static filter entry number.')
fdbMacMaxUnicastNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacMaxUnicastNum.setStatus('current')
if mibBuilder.loadTexts: fdbMacMaxUnicastNum.setDescription('MAX unicast filter entry number.')
fdbMacMaxMulticastNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacMaxMulticastNum.setStatus('current')
if mibBuilder.loadTexts: fdbMacMaxMulticastNum.setDescription('MAX multicast filter entry number.')
fdbMacCurTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacCurTotalNum.setStatus('current')
if mibBuilder.loadTexts: fdbMacCurTotalNum.setDescription('CURRENT total filter entry number.')
fdbMacCurStaticNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacCurStaticNum.setStatus('current')
if mibBuilder.loadTexts: fdbMacCurStaticNum.setDescription('CURRENT static filter entry number.')
fdbMacCurUnicastNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacCurUnicastNum.setStatus('current')
if mibBuilder.loadTexts: fdbMacCurUnicastNum.setDescription('CURRENT unicast filter entry number.')
fdbMacCurHiddenNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacCurHiddenNum.setStatus('current')
if mibBuilder.loadTexts: fdbMacCurHiddenNum.setDescription('CURRENT hidden filter entry number.')
fdbMacCurMulticastInsertNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacCurMulticastInsertNum.setStatus('current')
if mibBuilder.loadTexts: fdbMacCurMulticastInsertNum.setDescription('CURRENT multicast insert filter entry number.')
fdbMacCurMulticastWaitNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacCurMulticastWaitNum.setStatus('current')
if mibBuilder.loadTexts: fdbMacCurMulticastWaitNum.setDescription('CURRENT multicast wait filter entry number.')
fdbMacCounterTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacCounterTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fdbMacCounterTimeStamp.setDescription('The value of sysUpTime when the fdbMacInfo was generated.')
lldpGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 200, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: lldpGlobalEnable.setDescription('Enable or disable lldp global config.')
macNotificationMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1))
macNotificationGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1))
macNotificationInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2))
macNotificationGlobalFeatureEnabled = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotificationGlobalFeatureEnabled.setStatus('current')
if mibBuilder.loadTexts: macNotificationGlobalFeatureEnabled.setDescription('Indicates whether the MAC notification feature is currently \n        running in the device.\n\n        Setting this object to false(2) disables the MAC notification\n        feature globally thus disabling the feature at each interface.\n\n        Setting this object to true(1) will start the MAC notification\n        feature running in the device. If the feature is already\n        running, setting to true(1) has no effect. Once the MAC\n        notification is enabled, whether the feature is running at each\n        interface is controlled by the macNotificationIfConfigTable.')
macNotificationNotificationInterval = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 2), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationNotificationInterval.setStatus('current')
if mibBuilder.loadTexts: macNotificationNotificationInterval.setDescription('This object specifies the maximum interval of time between\n        macNotificationMacChangedNotifications being generated by the device.\n        If the value of macNotificationNotificationsEnabled is true(1), the\n        device will send out the generated macNotificationMacChangedNotifications\n        and archive the MAC change notification events in the\n        macNotificationHistoryTable. If the value of macNotificationNotificationEnabled is\n        false(2), the device will not send out the generated\n        macNotificationMacChangedNotifications but it will archive these events\n        in the macNotificationHistoryTable.   \n        \n        If the value of this object is equal to 0, the device will \n        generate macNotificationMacChangedNotifications and archive the MAC \n        change notification events in the macNotificationHistoryTable as soon as\n        there is MAC address learnt or removed by the device.\n\n        If the value of this object is greater than 0, the device will\n        wait for a period of time equal to the value of this object\n        before generate the macNotificationMacChangedNotifications and archive\n        the MAC change notification events in the macNotificationHistoryTable.')
macNotificationMacAddressesLearnt = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationMacAddressesLearnt.setStatus('current')
if mibBuilder.loadTexts: macNotificationMacAddressesLearnt.setDescription('Indicates the number of MAC addresses learnt by the\n        device.')
macNotificationMacAddressesRemoved = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationMacAddressesRemoved.setStatus('current')
if mibBuilder.loadTexts: macNotificationMacAddressesRemoved.setDescription('Indicates the number of MAC addresses removed from the\n        forwarding database.')
macNotificationNotificationsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotificationNotificationsEnabled.setStatus('current')
if mibBuilder.loadTexts: macNotificationNotificationsEnabled.setDescription("Indicates whether macNotificationMacChangedNotification notifications\n          will or will not be sent when there are MAC addresses\n          learnt or removed from the device's forwarding database. \n          Disabling notifications does not prevent the MAC address\n          info from being added to the macNotificationHistoryTable.")
macNotificationNotificationsSent = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationNotificationsSent.setStatus('current')
if mibBuilder.loadTexts: macNotificationNotificationsSent.setDescription('Indicates the number of macNotificationMacChangedNotifications sent out\n        by the device.')
macNotificationHistTableMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 7), Counter32()).setUnits('entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationHistTableMaxLength.setStatus('current')
if mibBuilder.loadTexts: macNotificationHistTableMaxLength.setDescription('The upper limit on the number of entries that the\n        macNotificationHistoryTable may contain.  A value of 0 will\n        prevent any history from being retained. When this\n        table is full, the oldest entry will be deleted and\n        a new one will be created.')
macNotificationHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8), )
if mibBuilder.loadTexts: macNotificationHistoryTable.setStatus('current')
if mibBuilder.loadTexts: macNotificationHistoryTable.setDescription('This table will archive the MAC change notification events \n        generated by this device. The MAC change notification\n        events are archived here even if macNotificationMacChangesNotifications \n        are not actually sent.')
macNotificationHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8, 1), ).setIndexNames((0, "NAG-MIB", "macNotificationHistIndex"))
if mibBuilder.loadTexts: macNotificationHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: macNotificationHistoryEntry.setDescription('A MAC change notification message that was previously\n        generated by this device.  Each entry is indexed by a message\n        index.')
macNotificationHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationHistIndex.setStatus('current')
if mibBuilder.loadTexts: macNotificationHistIndex.setDescription('An index that uniquely identifies a MAC change notification\n        event previously generated by the device. This index starts at\n        1 and increases by one when a MAC change notification is \n        generated.  When it reaches the maximum value, the agent wraps\n        the value back to 1.')
macNotificationHistMacChangedMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationHistMacChangedMsg.setStatus('current')
if mibBuilder.loadTexts: macNotificationHistMacChangedMsg.setDescription("This object contains the information of a MAC change\n        notification event. It consists of several tuples packed\n        together in the format of '<tuple1><tuple2>...'.\n        \n        Each tuple consist of 11 octets in the format of\n        '<operation><VLAN><MAC><dot1dBasePort>' where \n\n        <operation> is of size 1 octet and supports the following values\n          0 - End of MIB object.\n          1 - MAC learnt.\n          2 - MAC removed.\n\n        <VLAN> is VLAN number of the VLAN which the MAC address is\n        belonged to and has size of 2 octet.\n\n        <MAC> is the Layer2 Mac Address and has size of 6 octets.\n\n        <dot1dBasePort> is the value of dot1dBasePort for the\n        interface from which the MAC address is learnt and has size\n        of 2 octets.")
macNotificationHistTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationHistTimestamp.setStatus('current')
if mibBuilder.loadTexts: macNotificationHistTimestamp.setDescription('The value of sysUpTime when the macNotificationMacChangedNotification\n        containing the information denoted by the macNotificationHistMacChangedMsg\n        object in this entry was generated.')
macNotificationIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2, 1), )
if mibBuilder.loadTexts: macNotificationIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: macNotificationIfConfigTable.setDescription('This table enables or disables the generation of notification\n        at each interface when MAC address is learnt or removed.')
macNotificationIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2, 1, 1), )
if mibBuilder.loadTexts: macNotificationIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: macNotificationIfConfigEntry.setDescription('Each entry contains the configuration for enabling the\n        MAC notification at each interface that supports this\n        feature.')
macNotificationMacAddrLearntEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotificationMacAddrLearntEnable.setStatus('current')
if mibBuilder.loadTexts: macNotificationMacAddrLearntEnable.setDescription('Indicates whether this interface is enabled to send \n        macNotificationMacChangedNotification when it learns a new MAC address. This\n        variable has no effect when the value of macNotificationGlobalFeatureEnabled\n        object is false(2).\n\n        Setting this object to true(1) enables the sending of\n        macNotificationMacChangedNotification when this interface learns a \n        new MAC address.\n\n        Setting this object to false(2) disables the sending\n        of macNotificationMacChangedNotification when this interface learns\n        a new MAC address.')
macNotificationMacAddrRemovedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotificationMacAddrRemovedEnable.setStatus('current')
if mibBuilder.loadTexts: macNotificationMacAddrRemovedEnable.setDescription('Indicates whether this interface is enabled to send \n        macNotificationMacChangedNotification when a MAC address which it learnt\n        previously is removed from the forwarding table. This variable\n        has no effect when the value of macNotificationGlobalFeatureEnabled object\n        is false(2). \n\n        Setting this object to true(1) enables the sending of\n        macNotificationMacChangedNotification when a MAC address which this\n        interface learnt previously is removed from the forwarding\n        table.\n\n        Setting this object to false(2) disables the sending of\n        macNotificationMacChangedNotification when a MAC address which this\n        interface learnt previously is removed from the forwarding\n        table.')
antiArpscan = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100))
prohibitPortOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 1))
if mibBuilder.loadTexts: prohibitPortOID.setStatus('current')
if mibBuilder.loadTexts: prohibitPortOID.setDescription('anti arp scan prohibit port.')
recoverPortOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 2))
if mibBuilder.loadTexts: recoverPortOID.setStatus('current')
if mibBuilder.loadTexts: recoverPortOID.setDescription('anti arp scan recover port.')
prohibitIPOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 3))
if mibBuilder.loadTexts: prohibitIPOID.setStatus('current')
if mibBuilder.loadTexts: prohibitIPOID.setDescription('anti arp scan  prohibit ip.')
prohibitIPExceedSlimitOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 4))
if mibBuilder.loadTexts: prohibitIPExceedSlimitOID.setStatus('current')
if mibBuilder.loadTexts: prohibitIPExceedSlimitOID.setDescription('anti arp scan  prohibit ip exceed S limit.')
prohibitIPExceedHlimitOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 5))
if mibBuilder.loadTexts: prohibitIPExceedHlimitOID.setStatus('current')
if mibBuilder.loadTexts: prohibitIPExceedHlimitOID.setDescription('anti arp scan prohibit ip exceed H limit.')
recoverIPOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 6))
if mibBuilder.loadTexts: recoverIPOID.setStatus('current')
if mibBuilder.loadTexts: recoverIPOID.setDescription('anti arp scan recover ip.')
ipAddress = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 7))
if mibBuilder.loadTexts: ipAddress.setStatus('current')
if mibBuilder.loadTexts: ipAddress.setDescription('anti arp scan ip address.')
arpSpeedLimitOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 8))
if mibBuilder.loadTexts: arpSpeedLimitOID.setStatus('current')
if mibBuilder.loadTexts: arpSpeedLimitOID.setDescription('anti arp scan speed limit.')
arpDiscardOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 9))
if mibBuilder.loadTexts: arpDiscardOID.setStatus('current')
if mibBuilder.loadTexts: arpDiscardOID.setDescription('anti arp scan discard arp.')
recoverArpSpeedOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 10))
if mibBuilder.loadTexts: recoverArpSpeedOID.setStatus('current')
if mibBuilder.loadTexts: recoverArpSpeedOID.setDescription('anti arp scan recover arp speed.')
recoverArpDiscardOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 11))
if mibBuilder.loadTexts: recoverArpDiscardOID.setStatus('current')
if mibBuilder.loadTexts: recoverArpDiscardOID.setDescription('anti arp scan recover arp discard.')
fan = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 101))
fanAbnormalOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 101, 1))
if mibBuilder.loadTexts: fanAbnormalOID.setStatus('current')
if mibBuilder.loadTexts: fanAbnormalOID.setDescription('fan abnormal.')
fanNormalOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 101, 2))
if mibBuilder.loadTexts: fanNormalOID.setStatus('current')
if mibBuilder.loadTexts: fanNormalOID.setDescription('fan normal.')
fanInsertOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 101, 3))
if mibBuilder.loadTexts: fanInsertOID.setStatus('current')
if mibBuilder.loadTexts: fanInsertOID.setDescription('fan insert.')
fanPullOutOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 101, 4))
if mibBuilder.loadTexts: fanPullOutOID.setStatus('current')
if mibBuilder.loadTexts: fanPullOutOID.setDescription('fan pull out.')
power = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 102))
powerAbnormalOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 102, 1))
if mibBuilder.loadTexts: powerAbnormalOID.setStatus('current')
if mibBuilder.loadTexts: powerAbnormalOID.setDescription('sys power DC is working!')
powerNormalOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 102, 2))
if mibBuilder.loadTexts: powerNormalOID.setStatus('current')
if mibBuilder.loadTexts: powerNormalOID.setDescription('sys power AC is working!')
powerInsertOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 102, 3))
if mibBuilder.loadTexts: powerInsertOID.setStatus('current')
if mibBuilder.loadTexts: powerInsertOID.setDescription('sys power insert!')
powerPullOutOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 102, 4))
if mibBuilder.loadTexts: powerPullOutOID.setStatus('current')
if mibBuilder.loadTexts: powerPullOutOID.setDescription('sys power pull out!')
slotTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 103))
slotTemperatureHigherOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 103, 1))
if mibBuilder.loadTexts: slotTemperatureHigherOID.setStatus('current')
if mibBuilder.loadTexts: slotTemperatureHigherOID.setDescription('Temperature breached high threshold')
slotTemperatureLowerOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 103, 2))
if mibBuilder.loadTexts: slotTemperatureLowerOID.setStatus('current')
if mibBuilder.loadTexts: slotTemperatureLowerOID.setDescription('Temperature breached low threshold')
dhcpsnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 104))
shutdownPort = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 1))
if mibBuilder.loadTexts: shutdownPort.setStatus('current')
if mibBuilder.loadTexts: shutdownPort.setDescription('dhcp snooping shutdown port.')
noShutdownPort = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 2))
if mibBuilder.loadTexts: noShutdownPort.setStatus('current')
if mibBuilder.loadTexts: noShutdownPort.setDescription('dhcp snooping no shutdown port.')
addBlackhole = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 3))
if mibBuilder.loadTexts: addBlackhole.setStatus('current')
if mibBuilder.loadTexts: addBlackhole.setDescription('dhcp snooping add black hole.')
delBlackhole = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 4))
if mibBuilder.loadTexts: delBlackhole.setStatus('current')
if mibBuilder.loadTexts: delBlackhole.setDescription('dhcp snooping delete black hole.')
addBlockedinfo = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 5))
if mibBuilder.loadTexts: addBlockedinfo.setStatus('current')
if mibBuilder.loadTexts: addBlockedinfo.setDescription('dhcp snooping add blocked information.')
rateViolation = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 105))
rateViolationShutdownPort = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 105, 1))
if mibBuilder.loadTexts: rateViolationShutdownPort.setStatus('current')
if mibBuilder.loadTexts: rateViolationShutdownPort.setDescription('rate violation shutdown port.')
rateViolationNoShutdownPort = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 105, 2))
if mibBuilder.loadTexts: rateViolationNoShutdownPort.setStatus('current')
if mibBuilder.loadTexts: rateViolationNoShutdownPort.setDescription('rate violation no shutdown port.')
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 106))
portGroupCreate = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 106, 1))
if mibBuilder.loadTexts: portGroupCreate.setStatus('current')
if mibBuilder.loadTexts: portGroupCreate.setDescription('port group create.')
portGroupDelete = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 106, 2))
if mibBuilder.loadTexts: portGroupDelete.setStatus('current')
if mibBuilder.loadTexts: portGroupDelete.setDescription('port group delete.')
portGroupUpdate = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 106, 3))
if mibBuilder.loadTexts: portGroupUpdate.setStatus('current')
if mibBuilder.loadTexts: portGroupUpdate.setDescription('port group update.')
transceiverMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 110))
transceiverMonitorAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 110, 1))
if mibBuilder.loadTexts: transceiverMonitorAlarmEvent.setStatus('current')
if mibBuilder.loadTexts: transceiverMonitorAlarmEvent.setDescription('tranceiver monitor alarm event.')
transceiverMonitorWarnEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 110, 2))
if mibBuilder.loadTexts: transceiverMonitorWarnEvent.setStatus('current')
if mibBuilder.loadTexts: transceiverMonitorWarnEvent.setDescription('transceiver monitor warn event.')
efmOam = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109))
efmOamDiscoverySuccess = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 1))
if mibBuilder.loadTexts: efmOamDiscoverySuccess.setStatus('current')
if mibBuilder.loadTexts: efmOamDiscoverySuccess.setDescription('efm oam discovery success.')
efmOamDiscoveryTimeout = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 2))
if mibBuilder.loadTexts: efmOamDiscoveryTimeout.setStatus('current')
if mibBuilder.loadTexts: efmOamDiscoveryTimeout.setDescription('efm oam discovery time out.')
efmOamLocalErrSymbolPeriodEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 3))
if mibBuilder.loadTexts: efmOamLocalErrSymbolPeriodEvent.setStatus('current')
if mibBuilder.loadTexts: efmOamLocalErrSymbolPeriodEvent.setDescription('efm oam local error symbol period event.')
efmOamLocalErrFramePeriodEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 4))
if mibBuilder.loadTexts: efmOamLocalErrFramePeriodEvent.setStatus('current')
if mibBuilder.loadTexts: efmOamLocalErrFramePeriodEvent.setDescription('efm oam local error frame period event.')
efmOamLocalErrFrameEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 5))
if mibBuilder.loadTexts: efmOamLocalErrFrameEvent.setStatus('current')
if mibBuilder.loadTexts: efmOamLocalErrFrameEvent.setDescription('efm oam local error frame event.')
efmOamLocalErrFrameSecondsSummaryEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 6))
if mibBuilder.loadTexts: efmOamLocalErrFrameSecondsSummaryEvent.setStatus('current')
if mibBuilder.loadTexts: efmOamLocalErrFrameSecondsSummaryEvent.setDescription('efm oam local error frame seconds summary event.')
efmOamLocalLinkFault = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 7))
if mibBuilder.loadTexts: efmOamLocalLinkFault.setStatus('current')
if mibBuilder.loadTexts: efmOamLocalLinkFault.setDescription('efm oam local link fault.')
efmOamLocalCriticalEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 8))
if mibBuilder.loadTexts: efmOamLocalCriticalEvent.setStatus('current')
if mibBuilder.loadTexts: efmOamLocalCriticalEvent.setDescription('efm oam local critical event.')
efmOamRemoteErrSymbolPeriodEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 9))
if mibBuilder.loadTexts: efmOamRemoteErrSymbolPeriodEvent.setStatus('current')
if mibBuilder.loadTexts: efmOamRemoteErrSymbolPeriodEvent.setDescription('efm oam remote error symbol period event.')
efmOamRemoteErrFramePeriodEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 10))
if mibBuilder.loadTexts: efmOamRemoteErrFramePeriodEvent.setStatus('current')
if mibBuilder.loadTexts: efmOamRemoteErrFramePeriodEvent.setDescription('efm oam remote error frame period event.')
efmOamRemoteErrFrameEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 11))
if mibBuilder.loadTexts: efmOamRemoteErrFrameEvent.setStatus('current')
if mibBuilder.loadTexts: efmOamRemoteErrFrameEvent.setDescription('efm oam remote error frame event.')
efmOamRemoteErrFrameSecondsSummaryEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 12))
if mibBuilder.loadTexts: efmOamRemoteErrFrameSecondsSummaryEvent.setStatus('current')
if mibBuilder.loadTexts: efmOamRemoteErrFrameSecondsSummaryEvent.setDescription('efm oam remote error frame seconds summary event.')
efmOamRemoteLinkFault = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 13))
if mibBuilder.loadTexts: efmOamRemoteLinkFault.setStatus('current')
if mibBuilder.loadTexts: efmOamRemoteLinkFault.setDescription('efm oam remote link fault.')
efmOamRemoteCriticalEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 14))
if mibBuilder.loadTexts: efmOamRemoteCriticalEvent.setStatus('current')
if mibBuilder.loadTexts: efmOamRemoteCriticalEvent.setDescription('efm oam remote critical event.')
efmOamRemoteDyingGasp = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 15))
if mibBuilder.loadTexts: efmOamRemoteDyingGasp.setStatus('current')
if mibBuilder.loadTexts: efmOamRemoteDyingGasp.setDescription('efm oam remote dying gasp.')
efmOamLoopBackSuccess = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 16))
if mibBuilder.loadTexts: efmOamLoopBackSuccess.setStatus('current')
if mibBuilder.loadTexts: efmOamLoopBackSuccess.setDescription('efm oam loopback success.')
efmOamLoopBackExit = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 17))
if mibBuilder.loadTexts: efmOamLoopBackExit.setStatus('current')
if mibBuilder.loadTexts: efmOamLoopBackExit.setDescription('efm oam loopback exit.')
dyingGasp = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 114))
dyingGaspEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 114, 1))
if mibBuilder.loadTexts: dyingGaspEvent.setStatus('current')
if mibBuilder.loadTexts: dyingGaspEvent.setDescription('dying gasp.')
copyRunningConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 116))
copyRunningConfigEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 116, 1))
if mibBuilder.loadTexts: copyRunningConfigEvent.setStatus('current')
if mibBuilder.loadTexts: copyRunningConfigEvent.setDescription('copy running config event.')
mstp = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 121))
mstpTcnTrapOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 121, 1))
if mibBuilder.loadTexts: mstpTcnTrapOID.setStatus('current')
if mibBuilder.loadTexts: mstpTcnTrapOID.setDescription('mstp tcn.')
powerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 122))
powerSupplyTrap = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 122, 2))
if mibBuilder.loadTexts: powerSupplyTrap.setStatus('current')
if mibBuilder.loadTexts: powerSupplyTrap.setDescription('power supply.')
powerPresentTrap = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 122, 4))
if mibBuilder.loadTexts: powerPresentTrap.setStatus('current')
if mibBuilder.loadTexts: powerPresentTrap.setDescription('power present.')
erpsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 125))
swERPSSFDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 125, 1))
if mibBuilder.loadTexts: swERPSSFDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: swERPSSFDetectedTrap.setDescription('ERPS SF deleted.')
swERPSSFClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 125, 2))
if mibBuilder.loadTexts: swERPSSFClearedTrap.setStatus('current')
if mibBuilder.loadTexts: swERPSSFClearedTrap.setDescription('ERPS SF cleared.')
authLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 126))
authLogin = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 126, 1))
if mibBuilder.loadTexts: authLogin.setStatus('current')
if mibBuilder.loadTexts: authLogin.setDescription('User Login.')
authLogout = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 126, 2))
if mibBuilder.loadTexts: authLogout.setStatus('current')
if mibBuilder.loadTexts: authLogout.setDescription('User Logout.')
mibBuilder.exportSymbols("NAG-MIB", qos3ClassMapName=qos3ClassMapName, qos2MapCostoIntp3=qos2MapCostoIntp3, qos3QueueWeight3=qos3QueueWeight3, sntpServer6Version=sntpServer6Version, showQos3MCQueueStatisticsDropedPacket=showQos3MCQueueStatisticsDropedPacket, ipStandardAct=ipStandardAct, qos3SetIpv6NextHop=qos3SetIpv6NextHop, mirrorDestStatus=mirrorDestStatus, qos2ClassMapVlan=qos2ClassMapVlan, qos=qos, erpsPort1TxRapsMsPktCnt=erpsPort1TxRapsMsPktCnt, dhcpSnoopingBlockedInfoRecordingTime=dhcpSnoopingBlockedInfoRecordingTime, qos3StatisticClearBindType=qos3StatisticClearBindType, ntpEntSoftwareName=ntpEntSoftwareName, fanNormalOID=fanNormalOID, efmOamLocalCriticalEvent=efmOamLocalCriticalEvent, dhcpPoolDnsSerStatus=dhcpPoolDnsSerStatus, dcscmscAclNumber=dcscmscAclNumber, erpsPort0TxRapsEventPktCnt=erpsPort0TxRapsEventPktCnt, dcscmscAclEntry=dcscmscAclEntry, SnmpAdminString=SnmpAdminString, dhcpPoolDnsSerIpAddress1=dhcpPoolDnsSerIpAddress1, ripTimers=ripTimers, dhcpPoolDefaultRouterIpAddress7=dhcpPoolDefaultRouterIpAddress7, dhcpPoolWinsPoolName=dhcpPoolWinsPoolName, erpsRapsVirtualChannel=erpsRapsVirtualChannel, sysMonitorAlarmBindSet=sysMonitorAlarmBindSet, qos3MapIntpExtendValue=qos3MapIntpExtendValue, ipv6ExternSrcOp=ipv6ExternSrcOp, erpsRingPort0=erpsRingPort0, switchFlashSize=switchFlashSize, erpsPort0StatisticsTable=erpsPort0StatisticsTable, mirrorSrcCpuTable=mirrorSrcCpuTable, qos3PolicyViolateSetDscp=qos3PolicyViolateSetDscp, tacacsServerHostStatus=tacacsServerHostStatus, dvmrpVersionString=dvmrpVersionString, macStandardSrcMacWild=macStandardSrcMacWild, amPortInfoTable=amPortInfoTable, ipExternSrcPort2=ipExternSrcPort2, portBlockMode=portBlockMode, macNotificationMib=macNotificationMib, lpbackDetecCtrlMode=lpbackDetecCtrlMode, portHybridUntaggedAllowedVlanAll=portHybridUntaggedAllowedVlanAll, macIpExternDstMac=macIpExternDstMac, dcscm6dcPortbindingPortName=dcscm6dcPortbindingPortName, arpStaticMac=arpStaticMac, timeRangeMapName=timeRangeMapName, dhcpServerLeaseBindingLeaseTime=dhcpServerLeaseBindingLeaseTime, arpProxyArpIfIndex=arpProxyArpIfIndex, erpsPort0TxRapsFsPktCnt=erpsPort0TxRapsFsPktCnt, macIpExternDstIp=macIpExternDstIp, switchMemoryBusy=switchMemoryBusy, macIpExternIndex=macIpExternIndex, portDiscardPktType=portDiscardPktType, showmlsqosmapsdscpmutationTable=showmlsqosmapsdscpmutationTable, qos2PortPolicy=qos2PortPolicy, ddmDiagTXPowerLowAlarmThreshold=ddmDiagTXPowerLowAlarmThreshold, qosSetprecedence=qosSetprecedence, erpsRapsMel=erpsRapsMel, sysMemorySizeInMB=sysMemorySizeInMB, ipStandardSubIndex=ipStandardSubIndex, numAclGroupEntry=numAclGroupEntry, showmlsqosmapsdscpexp=showmlsqosmapsdscpexp, mstpPortInfoEnable=mstpPortInfoEnable, qos2AggPolicyCBSKbps=qos2AggPolicyCBSKbps, portTruckAllowedVlanRemove=portTruckAllowedVlanRemove, clusterv2CandidateHostName=clusterv2CandidateHostName, clearOspfProcess=clearOspfProcess, cableTable=cableTable, erpsInstanceStatusEntry=erpsInstanceStatusEntry, dcscm6pcDestinationMask=dcscm6pcDestinationMask, authLogin=authLogin, priIgmpSnoopingPortAuthEntry=priIgmpSnoopingPortAuthEntry, priIgmpSnoopingPortAuthTable=priIgmpSnoopingPortAuthTable, qos2MapDSCPtoDSCP4=qos2MapDSCPtoDSCP4, sysUserPasswordOption=sysUserPasswordOption, ddmDiagTXPowerHighWarnThreshold=ddmDiagTXPowerHighWarnThreshold, NtpDateTime=NtpDateTime, sysWriteConfig=sysWriteConfig, qos2AggPolicyViolateAction=qos2AggPolicyViolateAction, dvmrpReachableRoutes=dvmrpReachableRoutes, portTruckPortIndex=portTruckPortIndex, portMacCountLimitTable=portMacCountLimitTable, mirrorRspanSessionTable=mirrorRspanSessionTable, efmOamLocalLinkFault=efmOamLocalLinkFault, qos3PolicyCBSKbps=qos3PolicyCBSKbps, efmOam=efmOam, showpolicymapEntry=showpolicymapEntry, dcscmVMacbindingAclNumber=dcscmVMacbindingAclNumber, erpsRingPort1Index=erpsRingPort1Index, vlanTranslationTypeTable=vlanTranslationTypeTable, erpsPort0RxRapsFsPktCnt=erpsPort0RxRapsFsPktCnt, dvmrpNeighborMinorVersion=dvmrpNeighborMinorVersion, dhcpSnoopingPortConfigEntry=dhcpSnoopingPortConfigEntry, sysUserPassword=sysUserPassword, dhcpSnoopingRequestBindingMAC=dhcpSnoopingRequestBindingMAC, efmOamRemoteLinkFault=efmOamRemoteLinkFault, mirrorRspanVlanTable=mirrorRspanVlanTable, macAddressInVlanID=macAddressInVlanID, macExternSubIndex=macExternSubIndex, qos3SetIpv6Vrf=qos3SetIpv6Vrf, dhcpPoolDnsSerIpAddress6=dhcpPoolDnsSerIpAddress6, dhcpPoolOptionTable=dhcpPoolOptionTable, portMacCountLimitViolationMode=portMacCountLimitViolationMode, qos2AggPolicyPIRKbps=qos2AggPolicyPIRKbps, qos2MapIntptoEXP8=qos2MapIntptoEXP8, interfaceTable=interfaceTable, sysPowerValue=sysPowerValue, qosPortTable=qosPortTable, dhcpPoolOption=dhcpPoolOption, clusterv2StatusKeepalive=clusterv2StatusKeepalive, mabOnlineUserIndex=mabOnlineUserIndex, trapDestCommunity=trapDestCommunity, sysSlotBootInfoEntry=sysSlotBootInfoEntry, dot1xSetUserOffline=dot1xSetUserOffline, qosSetdscp=qosSetdscp, qos3AggPolicyExceedSetIntp=qos3AggPolicyExceedSetIntp, arpStaticPortIndex=arpStaticPortIndex, ospfNssaRedistributeStatus=ospfNssaRedistributeStatus, sntpServerAddress=sntpServerAddress, dhcpPoolDnsSerEntry=dhcpPoolDnsSerEntry, qos3AggPolicyExceedSetPrec=qos3AggPolicyExceedSetPrec, mstpInstancePortPriority=mstpInstancePortPriority, qosSetEntry=qosSetEntry, prisecurity=prisecurity, qos3QueueBindWidthQueueId=qos3QueueBindWidthQueueId, showmlsqosmapsexpdscp=showmlsqosmapsexpdscp, aaaAccountUpdate=aaaAccountUpdate, showmlsqosinterfaceIndex=showmlsqosinterfaceIndex, tacacsServerHostPort=tacacsServerHostPort, qos2PolicyPBSKbps=qos2PolicyPBSKbps, sysMonitorAlarmIndex=sysMonitorAlarmIndex, macIpExternPrecedence=macIpExternPrecedence, qos2MapDSCPtoDPvalue=qos2MapDSCPtoDPvalue, priPppoeIaDelimiter=priPppoeIaDelimiter, qosClassCos=qosClassCos, ipStandardSrcIpWild=ipStandardSrcIpWild, portRateLimitPortIndex=portRateLimitPortIndex, qos3ClassMapEntry=qos3ClassMapEntry, qos3ScheduleQueueInputLevelID=qos3ScheduleQueueInputLevelID, radiusAuthenServerHostStatus=radiusAuthenServerHostStatus, ripInstabilityPreventingEntry=ripInstabilityPreventingEntry, mirrorReflectorPortTable=mirrorReflectorPortTable, fdbMacCurMulticastInsertNum=fdbMacCurMulticastInsertNum, priIgmpSnoopingPortCtrlPktDrop=priIgmpSnoopingPortCtrlPktDrop, InetAddressType=InetAddressType, priPowerTable=priPowerTable, showqos=showqos, priIgmpSnoopingLimitPortStrategy=priIgmpSnoopingLimitPortStrategy, mstpInstanceIntRootPathCost=mstpInstanceIntRootPathCost, mvlanAssoPortTagid=mvlanAssoPortTagid, qos3ScheduleQueueAlgorithmTable=qos3ScheduleQueueAlgorithmTable, dhcpSnoopingPort=dhcpSnoopingPort, securityIpEntry=securityIpEntry, sshConnInfoEntry=sshConnInfoEntry, mrppRingPriPortName=mrppRingPriPortName, erpsLogEnabled=erpsLogEnabled, ddmTranscAlarmTable=ddmTranscAlarmTable, deviceTypeID=deviceTypeID, translationNewVlanid=translationNewVlanid, sysResetUnit=sysResetUnit, dhcpPoolProType=dhcpPoolProType, ipExternProtocal=ipExternProtocal, ospfNssaStatus=ospfNssaStatus, dhcpRelay=dhcpRelay, dcscmSipbindingAclNumber=dcscmSipbindingAclNumber, dhcpRelayInformationOptionRemoteID=dhcpRelayInformationOptionRemoteID, lpbackDetecVlanListSetFlag=lpbackDetecVlanListSetFlag, dnsDynHostTable=dnsDynHostTable, InterfaceIndexOrZero=InterfaceIndexOrZero, switchInfo=switchInfo, portSecurityVlanMaxMacNum=portSecurityVlanMaxMacNum, macIpExternDstMacWild=macIpExternDstMacWild, qosClassMapTable=qosClassMapTable, ddmTransSerialModelName=ddmTransSerialModelName, ospfNetworkAreaAddressTable=ospfNetworkAreaAddressTable, aclActiveAclIndex=aclActiveAclIndex, qos2MapExptoDP7=qos2MapExptoDP7, dhcpSnoopingRequestBindingInfoTable=dhcpSnoopingRequestBindingInfoTable, powerPullOutOID=powerPullOutOID, macIpExternSrcIpWild=macIpExternSrcIpWild, dcscmVMacbindingTable=dcscmVMacbindingTable, qos3ClassMapType=qos3ClassMapType, ntpEntSoftwareVendor=ntpEntSoftwareVendor, erpsInstanceId=erpsInstanceId, confirmPassword=confirmPassword, mstpName=mstpName, qos3QueueWeightEntry=qos3QueueWeightEntry, efmOamLocalErrFramePeriodEvent=efmOamLocalErrFramePeriodEvent, qos2MapCostoDP=qos2MapCostoDP, aclStatisticClearDirection=aclStatisticClearDirection, sntpTimeZoneType=sntpTimeZoneType, qos3McQueueBindWidthMin=qos3McQueueBindWidthMin, dhcpPoolDefaultRouterPoolName=dhcpPoolDefaultRouterPoolName, mstpPortFormat=mstpPortFormat, macExternEtherType=macExternEtherType, showQos3VlanYellowCounter=showQos3VlanYellowCounter, vlanOutOctets=vlanOutOctets, transceiverMonitorWarnEvent=transceiverMonitorWarnEvent, mstpPortLinkType=mstpPortLinkType, eeePortIndex=eeePortIndex, dhcpRelayForwardUdpBootps=dhcpRelayForwardUdpBootps, ospfNssaTable=ospfNssaTable, sshConnUserName=sshConnUserName, dvmrpRouteNextHopType=dvmrpRouteNextHopType, erpsInstanceStatusTable=erpsInstanceStatusTable, qos3StatisticClearTable=qos3StatisticClearTable, qos2PolicyClassMap=qos2PolicyClassMap, macExternVlanId=macExternVlanId, qos2MapExptoDP8=qos2MapExptoDP8, erpsPortTrackCfmMepId=erpsPortTrackCfmMepId, qos3ClassMapStatus=qos3ClassMapStatus, qos2AggPolicyConformAction=qos2AggPolicyConformAction, ospfNetworkAreaAddressEntry=ospfNetworkAreaAddressEntry, nameAclGroupStatus=nameAclGroupStatus, mstpEnable=mstpEnable, qos3ScheduleQueueWeightNodeID=qos3ScheduleQueueWeightNodeID, ipv6StandardPriority=ipv6StandardPriority, dcscmpccos=dcscmpccos, sshServerVersion=sshServerVersion, sntpTimeZoneName=sntpTimeZoneName, EnabledStatusPrivate=EnabledStatusPrivate, portHybridUntaggedAllowedvlan=portHybridUntaggedAllowedvlan, clusterv2BaseRole=clusterv2BaseRole, showclassmapname=showclassmapname, ipExternTimeRangeName=ipExternTimeRangeName, arpSecurityLearnProtectALL=arpSecurityLearnProtectALL, ipv6ExternPriority=ipv6ExternPriority, priPppoeIaSelfDefinedRemoteID=priPppoeIaSelfDefinedRemoteID, intfaceIndex=intfaceIndex, dvmrpPruneSourceMask=dvmrpPruneSourceMask, portLEDTimeRangeStartDate=portLEDTimeRangeStartDate, addBlockedinfo=addBlockedinfo, qos2PortQueueAlgorithm=qos2PortQueueAlgorithm, qos3ScheduleBindWidthTable=qos3ScheduleBindWidthTable, qosPortQueueWeight1=qosPortQueueWeight1, stormControlEntry=stormControlEntry, qos2PortQueueWdrr=qos2PortQueueWdrr, qos2SetDscp=qos2SetDscp, secPortIndex=secPortIndex, qos3PolicyMapGroupName=qos3PolicyMapGroupName, dhcpSnoopingStaticBindingEntry=dhcpSnoopingStaticBindingEntry, qos3EtsScheduleStatusConfig=qos3EtsScheduleStatusConfig, dhcpSnoopingAckBindingInfoTable=dhcpSnoopingAckBindingInfoTable, ipStaticRouteExtMetric=ipStaticRouteExtMetric, ddmDiagBiasLowWarnThreshold=ddmDiagBiasLowWarnThreshold, fdbMacCurUnicastNum=fdbMacCurUnicastNum, sshUseTable=sshUseTable, qos3StatisticClearEntry=qos3StatisticClearEntry, clusterv2BaseRun=clusterv2BaseRun, urpfPortEntry=urpfPortEntry, dhcpPoolDnsSerTable=dhcpPoolDnsSerTable, qosClassMapV6Flow=qosClassMapV6Flow, qos3MapDscpIndex=qos3MapDscpIndex)
mibBuilder.exportSymbols("NAG-MIB", qos3ScheduleBindWidthNodeID=qos3ScheduleBindWidthNodeID, snmpTrapHostStatus=snmpTrapHostStatus, mstpInstanceTable=mstpInstanceTable, lpbackDetecCtrlIndex=lpbackDetecCtrlIndex, mabOnlineUserEntry=mabOnlineUserEntry, qosPortQueueWeight4=qosPortQueueWeight4, mvlanPortIndex=mvlanPortIndex, ntpEntSystemType=ntpEntSystemType, mrppRingPriPortBlockState=mrppRingPriPortBlockState, qos2MapIntptoEXP1=qos2MapIntptoEXP1, ipExternSrcIpWild=ipExternSrcIpWild, sysUserNamePrivilege=sysUserNamePrivilege, dvmrpPruneEntry=dvmrpPruneEntry, mstpMaxage=mstpMaxage, vlanInUcastPkts=vlanInUcastPkts, qos2PolicyCIRKbps=qos2PolicyCIRKbps, priPppoeIaTr101CircuitID=priPppoeIaTr101CircuitID, sysFanSpeed=sysFanSpeed, dhcpPoolCLid=dhcpPoolCLid, ntpEntStatusProtocolError=ntpEntStatusProtocolError, macStandardAclEntry=macStandardAclEntry, mstpMode=mstpMode, dcscm6pcDestinationIp=dcscm6pcDestinationIp, showQos3MCQueueStatisticsQueueID=showQos3MCQueueStatisticsQueueID, vlanTranslationEntry=vlanTranslationEntry, ddmDiagnosisTXPower=ddmDiagnosisTXPower, arpCacheDeleteAll=arpCacheDeleteAll, macIpExternTimeRangeName=macIpExternTimeRangeName, macExternDstMacWild=macExternDstMacWild, dcscm6pcTable=dcscm6pcTable, qos3EtsPortIndex=qos3EtsPortIndex, dhcpSnoopingRequestBindingLease=dhcpSnoopingRequestBindingLease, qos3ClassMapValue=qos3ClassMapValue, portHybridUntaggedPortIndex=portHybridUntaggedPortIndex, qosClassMapV6Dscp=qosClassMapV6Dscp, qos2MapDSCPtoIntp7=qos2MapDSCPtoIntp7, mabSetUserOffline=mabSetUserOffline, dcscm6SipbindingTable=dcscm6SipbindingTable, arpSecurityLearnProtect=arpSecurityLearnProtect, ripRoutingProcessStatus=ripRoutingProcessStatus, priIgmpSnoopingVlanID=priIgmpSnoopingVlanID, fileIPaddress=fileIPaddress, ddmDiagVoltLowAlarmThreshold=ddmDiagVoltLowAlarmThreshold, qos2SetInternalPriority=qos2SetInternalPriority, priCable=priCable, qos3MapTable=qos3MapTable, dhcpSnoopingAlarmInfoRecoveryTime=dhcpSnoopingAlarmInfoRecoveryTime, pridhcp=pridhcp, mirrorRspanSessionStatus=mirrorRspanSessionStatus, qosPolicyConformAction=qosPolicyConformAction, dhcpPoolDefaultRouterIpAddress8=dhcpPoolDefaultRouterIpAddress8, showQos3MCQueueStatisticsTable=showQos3MCQueueStatisticsTable, dnsServerTable=dnsServerTable, qos3MapAtoB3=qos3MapAtoB3, qos3SchedulePolicyName=qos3SchedulePolicyName, portTruckAllowedVlanExcept=portTruckAllowedVlanExcept, qos3SetSTpid=qos3SetSTpid, dhcpPoolAddressPrefix=dhcpPoolAddressPrefix, portSecurityCurMacNum=portSecurityCurMacNum, loopbackDetecShowTable=loopbackDetecShowTable, dhcpRelayOption82Enalbe=dhcpRelayOption82Enalbe, qos3AggregatePolicyEntry=qos3AggregatePolicyEntry, dvmrpInterfaceGenerationId=dvmrpInterfaceGenerationId, dhcpSnoopingUserControl=dhcpSnoopingUserControl, ripInstabilityPreventingTable=ripInstabilityPreventingTable, recoverArpDiscardOID=recoverArpDiscardOID, macIpExternSrcMacWild=macIpExternSrcMacWild, qosPortStatus=qosPortStatus, dhcpSnoopingAlarmInfoRecoveryActionStatus=dhcpSnoopingAlarmInfoRecoveryActionStatus, sysMemoryBusy=sysMemoryBusy, macNotificationNotificationInterval=macNotificationNotificationInterval, primirror=primirror, priCableEntry=priCableEntry, rpsPowerVoltage=rpsPowerVoltage, intfaceID=intfaceID, qos3QueueWredEntry=qos3QueueWredEntry, dhcpPoolAddressType=dhcpPoolAddressType, vsfSlotIndex=vsfSlotIndex, dcscm6pcSourceMask=dcscm6pcSourceMask, lastFiveSecInPktsPerSec=lastFiveSecInPktsPerSec, qos2ClassMapName=qos2ClassMapName, ddmTransSerialName=ddmTransSerialName, qos3PolicyPBSKbps=qos3PolicyPBSKbps, erpsPort0TxRapsNrRbPktCnt=erpsPort0TxRapsNrRbPktCnt, dhcpPoolDefaultRouterIpAddress2=dhcpPoolDefaultRouterIpAddress2, dhcpServerExcludedIpAddrEntry=dhcpServerExcludedIpAddrEntry, qosAggPolicerName=qosAggPolicerName, qos3ScheduleQueueAlgorithmLevelID=qos3ScheduleQueueAlgorithmLevelID, dhcpPoolNextServerStatus=dhcpPoolNextServerStatus, vlanTranslationTypeEntry=vlanTranslationTypeEntry, erpsPort1RxRapsMsPktCnt=erpsPort1RxRapsMsPktCnt, switchMemorySize=switchMemorySize, trapDestStatus=trapDestStatus, qos2MapDSCPtoDP=qos2MapDSCPtoDP, qosPolicyNormalBurstKbps=qosPolicyNormalBurstKbps, dvmrpNeighborGenerationId=dvmrpNeighborGenerationId, qos2SetStatus=qos2SetStatus, flowControlStatus=flowControlStatus, qos3SchedulePolicyMapEntry=qos3SchedulePolicyMapEntry, clusterv2CreateCmdrOperate=clusterv2CreateCmdrOperate, timeRangeMapStatus=timeRangeMapStatus, mstpInstanceSwitchPriority=mstpInstanceSwitchPriority, priIgmpSnoopingleave=priIgmpSnoopingleave, vsfMemberIndex=vsfMemberIndex, erpsPort0RxRapsNrRbPktCnt=erpsPort0RxRapsNrRbPktCnt, ntpEntStatusBadVersion=ntpEntStatusBadVersion, portHybridTaggedAllowedVlanExcept=portHybridTaggedAllowedVlanExcept, sntpTimeZoneStatus=sntpTimeZoneStatus, portSecurityVlanIndex=portSecurityVlanIndex, qos3AggPolicyconformSetDp=qos3AggPolicyconformSetDp, showQos3QueueStatisticsPortIndex=showQos3QueueStatisticsPortIndex, powerNormalOID=powerNormalOID, erpsInstanceConfigTable=erpsInstanceConfigTable, clusterv2CommanderAutoAddMem=clusterv2CommanderAutoAddMem, qos2MapExptoDP1=qos2MapExptoDP1, qos2MapDSCPtoDP4=qos2MapDSCPtoDP4, qos3SchedulePolicyBindPortIndex=qos3SchedulePolicyBindPortIndex, dhcpSnoopingActionType=dhcpSnoopingActionType, qos3PolicyconformSetDp=qos3PolicyconformSetDp, mirrorRspanVlanStatus=mirrorRspanVlanStatus, qosClassMapType=qosClassMapType, erpsTrapEnabled=erpsTrapEnabled, macStandardAct=macStandardAct, clusterv2CandidateTable=clusterv2CandidateTable, qos2MapExptoDP=qos2MapExptoDP, swUnitIndex=swUnitIndex, fdbMacCounterTimeStamp=fdbMacCounterTimeStamp, poePortStatus=poePortStatus, priMrppRingEntry=priMrppRingEntry, aclStatisticClearBindType=aclStatisticClearBindType, clusterv2BaseMaxNumberOfSwitches=clusterv2BaseMaxNumberOfSwitches, portGroupMemberMode=portGroupMemberMode, vlanOutBroadcastPkts=vlanOutBroadcastPkts, numAclGroupSubitemNum=numAclGroupSubitemNum, am=am, mstpInstanceID=mstpInstanceID, ddmDiagRXPowerHighWarnThreshold=ddmDiagRXPowerHighWarnThreshold, fileCMCCCopyResult=fileCMCCCopyResult, qos3StatisticClearIndex=qos3StatisticClearIndex, sumFlowCounterOutPkts=sumFlowCounterOutPkts, mvlanInfoTable=mvlanInfoTable, erpsPortTrackProtocolType=erpsPortTrackProtocolType, priIgmpSnoopingvlanID=priIgmpSnoopingvlanID, ipStaticRouteExtStatus=ipStaticRouteExtStatus, qosMapType=qosMapType, dcscm6dcPortbindingAclNumber=dcscm6dcPortbindingAclNumber, dcscmpcTable=dcscmpcTable, numAclGroupTable=numAclGroupTable, lastFiveSecOutPktsPerSec=lastFiveSecOutPktsPerSec, qos3AggPolicyViolateSetDp=qos3AggPolicyViolateSetDp, qosMapDscp5=qosMapDscp5, dcscm6dcAclDestinationMask=dcscm6dcAclDestinationMask, ipExternDstPort2=ipExternDstPort2, ddmDiagnosisRXPower=ddmDiagnosisRXPower, qos2MapDSCPtoDPStatus=qos2MapDSCPtoDPStatus, dhcpPoolDnsSerIpAddress7=dhcpPoolDnsSerIpAddress7, qos2MapDSCPtoDP1=qos2MapDSCPtoDP1, qosSetPolicyMapName=qosSetPolicyMapName, psSecuritytSaticMacAdd=psSecuritytSaticMacAdd, dhcpSnoopingAlarmCount=dhcpSnoopingAlarmCount, portLEDTimeRangeSubIndex=portLEDTimeRangeSubIndex, priPoeConfig=priPoeConfig, qos3AggPolicyExceedSetDp=qos3AggPolicyExceedSetDp, qos3ScheduleQueueWeightQueueID=qos3ScheduleQueueWeightQueueID, qos2MapCostoIntp8=qos2MapCostoIntp8, dhcpSnoopingAckBindingFlag=dhcpSnoopingAckBindingFlag, dvmrpInterfaceLocalAddress=dvmrpInterfaceLocalAddress, dcscm6scPortbindingPortName=dcscm6scPortbindingPortName, qos3QueueWredTable=qos3QueueWredTable, swModuleType=swModuleType, qosPortTrust=qosPortTrust, portBlockState=portBlockState, mstpInstancePortInstanceID=mstpInstancePortInstanceID, iPAddrSubnetMask=iPAddrSubnetMask, qos3SetIpVrf=qos3SetIpVrf, qos2MapDSCPtoIntp1=qos2MapDSCPtoIntp1, dhcpSnoopingBlockedInfoTable=dhcpSnoopingBlockedInfoTable, qos2MapCostoIntp2=qos2MapCostoIntp2, ifPaketLostRate=ifPaketLostRate, OspfBigMetric=OspfBigMetric, aclAttach=aclAttach, secVid=secVid, priportGroup=priportGroup, ipExternAclTable=ipExternAclTable, mabOnlineUserMac=mabOnlineUserMac, powerInsertOID=powerInsertOID, arpProxyArpTable=arpProxyArpTable, ospfSpfHoldTime=ospfSpfHoldTime, clusterv2Commander=clusterv2Commander, qos2ClassMapExp=qos2ClassMapExp, radiusAcctServerHostEntry=radiusAcctServerHostEntry, dhcpPoolDefaultRouterIpAddress1=dhcpPoolDefaultRouterIpAddress1, efmOamRemoteCriticalEvent=efmOamRemoteCriticalEvent, macStandardAclTable=macStandardAclTable, portLEDTimerange=portLEDTimerange, dnsDynHostTtl=dnsDynHostTtl, priPppoeIaCircuitIdFormat=priPppoeIaCircuitIdFormat, qos3ServicePolicyBindType=qos3ServicePolicyBindType, lpbackDetecVlanList=lpbackDetecVlanList, qos3MapAtoB6=qos3MapAtoB6, qos3QueueBindWidthTable=qos3QueueBindWidthTable, ddmDiagVoltHighWarnThreshold=ddmDiagVoltHighWarnThreshold, erpsVersion=erpsVersion, portLEDTimeRangeEndTime=portLEDTimeRangeEndTime, macExternPriority=macExternPriority, dhcpPoolNextServerIpAddress5=dhcpPoolNextServerIpAddress5, portSecurityCfgMacNum=portSecurityCfgMacNum, sysPowerStateTable=sysPowerStateTable, qosPolicyViolateAction=qosPolicyViolateAction, transmitBandwidth=transmitBandwidth, sntpPollTime=sntpPollTime, dcscmscAclSourceIp=dcscmscAclSourceIp, priMrppRing=priMrppRing, amPortIp=amPortIp, mabOnlineUserState=mabOnlineUserState, mabOnlineUserTable=mabOnlineUserTable, urpfPortMode=urpfPortMode, qos2MapDSCPtoIntp2=qos2MapDSCPtoIntp2, ntpEntGroups=ntpEntGroups, priPppoeIaGlobalEnable=priPppoeIaGlobalEnable, powerPresentTrap=powerPresentTrap, dcscm6dcAclNumber=dcscm6dcAclNumber, translationEnable=translationEnable, sysMemorySize=sysMemorySize, qos3AggPolicyconformSetPrec=qos3AggPolicyconformSetPrec, sysMonitorAlarmOutputSet=sysMonitorAlarmOutputSet, mstpInstanceRootPortID=mstpInstanceRootPortID, erpsPort1RxRapsNrPktCnt=erpsPort1RxRapsNrPktCnt, priPorts=priPorts, portRateLimitCurAllNum=portRateLimitCurAllNum, fdbMacMaxUnicastNum=fdbMacMaxUnicastNum, sysStackUnitNumber=sysStackUnitNumber, erpsPort0StatusEntry=erpsPort0StatusEntry, erpsPort1StatusTable=erpsPort1StatusTable, ripVlanIndex=ripVlanIndex, fireWallEnable=fireWallEnable, erpsRingNameIndex=erpsRingNameIndex, qos3ScheduleQueueWeightTable=qos3ScheduleQueueWeightTable, portRateLimitViolationMode=portRateLimitViolationMode, dhcpPoolEntry=dhcpPoolEntry, dot1qTunnelEntry=dot1qTunnelEntry, priPowerIndex=priPowerIndex, qos2MapCostoDP6=qos2MapCostoDP6, sysFanStatus=sysFanStatus, dhcpPoolNextServerIpAddress6=dhcpPoolNextServerIpAddress6, portGroupIndex=portGroupIndex, showQos3MCQueueStatisticsPassedPacket=showQos3MCQueueStatisticsPassedPacket, qosSetClassMapName=qosSetClassMapName, erpsPort1SignalStatus=erpsPort1SignalStatus, fileUserName=fileUserName, ripNetworkInterfaceTable=ripNetworkInterfaceTable, qosAggPolicerRateKbps=qosAggPolicerRateKbps, slotNum=slotNum, qos3AggPolicyCBSKbps=qos3AggPolicyCBSKbps)
mibBuilder.exportSymbols("NAG-MIB", mstpInstancePortState=mstpInstancePortState, dcscmscPortbindingEntry=dcscmscPortbindingEntry, dnsServerStatus=dnsServerStatus, qos3MapDscpValue=qos3MapDscpValue, portSecurityPortIndex=portSecurityPortIndex, dhcpSnoopingStaticBindingPort=dhcpSnoopingStaticBindingPort, qos3QueueWeight6=qos3QueueWeight6, sntpServerTable=sntpServerTable, dhcpServerExcludedIpAddrStatus=dhcpServerExcludedIpAddrStatus, priIgmpSnoopingEntry=priIgmpSnoopingEntry, mirrorDestGreTable=mirrorDestGreTable, poePortMode=poePortMode, clusterv2StatusLoss_count=clusterv2StatusLoss_count, dhcpRelayServerAddrStatus=dhcpRelayServerAddrStatus, qos2MapCostoIntp4=qos2MapCostoIntp4, qos2PortQueueWrr=qos2PortQueueWrr, mstpInstancePortDesignatedPortID=mstpInstancePortDesignatedPortID, priIgmpSnoopingGroupNum=priIgmpSnoopingGroupNum, qos3mapIntpExtendStatus=qos3mapIntpExtendStatus, qos3McQueueBindWidthTable=qos3McQueueBindWidthTable, priIgmpSnoopingPortCtrlPktTable=priIgmpSnoopingPortCtrlPktTable, dvmrpRouteEntry=dvmrpRouteEntry, portSecurityVlanMaxNumTable=portSecurityVlanMaxNumTable, translationDropType=translationDropType, dhcpSnoopingRequestBindingPort=dhcpSnoopingRequestBindingPort, qos3SetSVid=qos3SetSVid, portTruckAllowedVlanEntry=portTruckAllowedVlanEntry, iPAddrIPAddress=iPAddrIPAddress, showclassmapTable=showclassmapTable, mirrorSrcPort=mirrorSrcPort, priIgmpSnoopingBindTable=priIgmpSnoopingBindTable, qos3SchedulePolicyBindEntry=qos3SchedulePolicyBindEntry, dhcpPoolMacStatus=dhcpPoolMacStatus, erpsPort0TxRapsSfPktCnt=erpsPort0TxRapsSfPktCnt, aclStatisticClearEntry=aclStatisticClearEntry, radiusMgt=radiusMgt, dhcpPoolPoolName=dhcpPoolPoolName, dnsServerInetAddrType=dnsServerInetAddrType, qos3SchedulePolicyMapTable=qos3SchedulePolicyMapTable, dhcpPoolOptionId=dhcpPoolOptionId, qos2MapDSCPtoDSCP3=qos2MapDSCPtoDSCP3, stormControlPortEntry=stormControlPortEntry, dcscm6scPortbindingEntry=dcscm6scPortbindingEntry, efmOamLocalErrSymbolPeriodEvent=efmOamLocalErrSymbolPeriodEvent, qos2PortQueueBandwidth=qos2PortQueueBandwidth, transceiverSn=transceiverSn, qosPortQueueEntry=qosPortQueueEntry, priPppoeIaPortID=priPppoeIaPortID, dhcpSnoopingStaticBindingVid=dhcpSnoopingStaticBindingVid, ntpEntStatusCurrentMode=ntpEntStatusCurrentMode, prisnmpMgt=prisnmpMgt, dhcpServerServiceStatus=dhcpServerServiceStatus, dhcpSnoopingAckBindingPort=dhcpSnoopingAckBindingPort, qos2MapExptoIntp7=qos2MapExptoIntp7, timeRangeSubIndex=timeRangeSubIndex, mrppRingNodeMode=mrppRingNodeMode, dhcpPoolDnsSerIpAddress2=dhcpPoolDnsSerIpAddress2, qosPortQueueStatus=qosPortQueueStatus, qos3ScheduleQueueInputTypeValue=qos3ScheduleQueueInputTypeValue, dnsDynHostIndex=dnsDynHostIndex, psSecurityPortLock=psSecurityPortLock, dvmrpRouteUpTime=dvmrpRouteUpTime, tacacsServerHostIP=tacacsServerHostIP, qosAggPolicerPeakKbps=qosAggPolicerPeakKbps, portTable=portTable, qosMapCos=qosMapCos, dcscmscAclTable=dcscmscAclTable, dcscmscEnable=dcscmscEnable, sntpServer6Table=sntpServer6Table, priIgmpSnoopingLimitPortIndex=priIgmpSnoopingLimitPortIndex, psSecurityPortLocktimer=psSecurityPortLocktimer, qos3AggregatePolicyTable=qos3AggregatePolicyTable, showQos3VlanId=showQos3VlanId, qos2ServicePolicyTable=qos2ServicePolicyTable, arpDiscardOID=arpDiscardOID, sysSoftwareVersion=sysSoftwareVersion, ntpEntConformance=ntpEntConformance, qosPortQueueWeight3=qosPortQueueWeight3, macIpExternVlanId=macIpExternVlanId, priIgmpSnoopingLimitVlanID=priIgmpSnoopingLimitVlanID, dcscm6dcPortbindingTable=dcscm6dcPortbindingTable, ospfSummaryMask=ospfSummaryMask, DisplayString=DisplayString, aclStatisticClearIndex=aclStatisticClearIndex, sumFlowCouterEntry=sumFlowCouterEntry, netDefaultGateway=netDefaultGateway, authLogGroup=authLogGroup, erpsPort0TxRapsMsPktCnt=erpsPort0TxRapsMsPktCnt, trapDestIndex=trapDestIndex, dhcpPoolNextServerEntry=dhcpPoolNextServerEntry, dhcpSnoopingAckBindingIP=dhcpSnoopingAckBindingIP, macNotificationHistTimestamp=macNotificationHistTimestamp, sysPowerSlotIndex=sysPowerSlotIndex, qos2MapDSCPtoIntp6=qos2MapDSCPtoIntp6, qosClassMapV6AccGroup=qosClassMapV6AccGroup, ipv6ExternDstPort1=ipv6ExternDstPort1, qosPortBindType=qosPortBindType, snmpSecurityIpStatus=snmpSecurityIpStatus, portHybridUntaggedAllowedVlanEntry=portHybridUntaggedAllowedVlanEntry, dvmrpInterfaceKey=dvmrpInterfaceKey, portGroupDelete=portGroupDelete, priIgmpSnoopingL2gen=priIgmpSnoopingL2gen, ddmDiagRXPowerHighAlarmThreshold=ddmDiagRXPowerHighAlarmThreshold, clusterv2MemberDeviceType=clusterv2MemberDeviceType, dnsDomainSuffixEntry=dnsDomainSuffixEntry, priPppoeIaRemoteIdFormat=priPppoeIaRemoteIdFormat, dvmrpInterfaceTable=dvmrpInterfaceTable, qos3ScheduleQueueInputEntry=qos3ScheduleQueueInputEntry, mstpInstancePortTable=mstpInstancePortTable, dcscm6scAclPermitOrDeny=dcscm6scAclPermitOrDeny, qos3MapDscpEntry=qos3MapDscpEntry, dhcpSnoopingClearBinding=dhcpSnoopingClearBinding, qos3SetIpDefaultPBR=qos3SetIpDefaultPBR, dhcpSnoopingActionStatus=dhcpSnoopingActionStatus, mstpInstancePortID=mstpInstancePortID, portSecurityMacAddressPortIndex=portSecurityMacAddressPortIndex, dcscmdcPortbindingTable=dcscmdcPortbindingTable, qos2ServicePolicyEntry=qos2ServicePolicyEntry, erpsPort1RxRapsTotalPktCnt=erpsPort1RxRapsTotalPktCnt, prohibitIPExceedSlimitOID=prohibitIPExceedSlimitOID, qos2MapExptoIntp=qos2MapExptoIntp, dhcpRelayServerAddrEntry=dhcpRelayServerAddrEntry, portHybridTaggedAllowedVlanTable=portHybridTaggedAllowedVlanTable, dcscmdcAclEntry=dcscmdcAclEntry, qos3PolicyConformAction=qos3PolicyConformAction, qosClassMapEXPtopmost=qosClassMapEXPtopmost, qosAggPolicerEntry=qosAggPolicerEntry, qosPortBindPolicy=qosPortBindPolicy, macNotificationMacAddressesRemoved=macNotificationMacAddressesRemoved, portSecurityMacAddressVlanIndex=portSecurityMacAddressVlanIndex, mirrorDestGrePort=mirrorDestGrePort, erpsPort0Name=erpsPort0Name, speedDuplex=speedDuplex, poeSoftwareVersion=poeSoftwareVersion, dhcpPoolNextServerIpAddress3=dhcpPoolNextServerIpAddress3, ospfSpfDelayTime=ospfSpfDelayTime, qos2MapCostoDP5=qos2MapCostoDP5, radiusAcctServerHostIP=radiusAcctServerHostIP, macIpExternSubIndex=macIpExternSubIndex, qos3PolicyMapGroupEntry=qos3PolicyMapGroupEntry, priIgmpSnoopingPort=priIgmpSnoopingPort, dcscm=dcscm, qos3SchedulePolicyBindTable=qos3SchedulePolicyBindTable, macIpExternPriority=macIpExternPriority, qos3AggPolicyCIRKbps=qos3AggPolicyCIRKbps, stormControlStatus=stormControlStatus, priPortEntry=priPortEntry, qos3ScheduleQueueAlgorithmStatus=qos3ScheduleQueueAlgorithmStatus, qos2SetCos=qos2SetCos, ospfMgt=ospfMgt, qos3QueueWredQueueId=qos3QueueWredQueueId, addBlackhole=addBlackhole, qos2PolicyName=qos2PolicyName, dhcpSnoopingOptionSelfDefinedRemoteID=dhcpSnoopingOptionSelfDefinedRemoteID, switchCPUFiveMinuteIdle=switchCPUFiveMinuteIdle, qos2PortIndex=qos2PortIndex, qos2PortType=qos2PortType, timeRangeMapEntry=timeRangeMapEntry, dcscmdcAclSubNumber=dcscmdcAclSubNumber, qos2MapIntptoDSCP5=qos2MapIntptoDSCP5, macNotificationHistoryEntry=macNotificationHistoryEntry, radiusAcctServerHostTable=radiusAcctServerHostTable, portGroupMemberIndex=portGroupMemberIndex, dvmrpRouteSource=dvmrpRouteSource, erpsPortTrackRowStatus=erpsPortTrackRowStatus, qos2MapIntptoDSCP=qos2MapIntptoDSCP, recoverPortOID=recoverPortOID, ddmDiagRXPowerLowAlarmThreshold=ddmDiagRXPowerLowAlarmThreshold, sysPowerState=sysPowerState, qosClassMapVlan=qosClassMapVlan, ddmDiagnosisIfIndex=ddmDiagnosisIfIndex, ipExternAct=ipExternAct, showpolicymapTable=showpolicymapTable, dhcpPoolDefaultRouterTable=dhcpPoolDefaultRouterTable, efmOamRemoteErrFrameEvent=efmOamRemoteErrFrameEvent, qos2MapCostoDP4=qos2MapCostoDP4, ddmDiagRXPowerLowWarnThreshold=ddmDiagRXPowerLowWarnThreshold, vlanOutMulticastPkts=vlanOutMulticastPkts, qos2ClassMapStatus=qos2ClassMapStatus, mstpInstancePortPortIndex=mstpInstancePortPortIndex, qosSetTable=qosSetTable, qos3PortQueueAlgorithm=qos3PortQueueAlgorithm, erpsPort0SignalStatus=erpsPort0SignalStatus, qos2ClassMapV6Flow=qos2ClassMapV6Flow, priSpanningTree=priSpanningTree, dhcpSnoopingAlarmInfoType=dhcpSnoopingAlarmInfoType, dvmrpInterfaceRcvBadPkts=dvmrpInterfaceRcvBadPkts, ipv6ExternProtocal=ipv6ExternProtocal, qos2SetnextHop=qos2SetnextHop, sntpServer6Entry=sntpServer6Entry, qos3PolicyPIRKbps=qos3PolicyPIRKbps, poePortCurrentCurrent=poePortCurrentCurrent, ipv6StandardAclTable=ipv6StandardAclTable, fanAbnormalOID=fanAbnormalOID, swSoftwareVersion=swSoftwareVersion, qosPortQueueWeight5=qosPortQueueWeight5, qos3PolicyconformSetPrec=qos3PolicyconformSetPrec, mirrorDestPort=mirrorDestPort, priUamSecurityPortMib=priUamSecurityPortMib, tacacsServerHostTimeout=tacacsServerHostTimeout, erpsPort0RxRapsNrPktCnt=erpsPort0RxRapsNrPktCnt, qos3AggPolicyViolateAction=qos3AggPolicyViolateAction, erpsClearPortStatistics=erpsClearPortStatistics, macExternAct=macExternAct, mirrorDestIP=mirrorDestIP, ospfNetworkAareaAddress=ospfNetworkAareaAddress, ntpEntSNTPCompliance=ntpEntSNTPCompliance, sysPowerStatus=sysPowerStatus, qos2MapExptoIntp4=qos2MapExptoIntp4, qos2ServicePolicyStatus=qos2ServicePolicyStatus, ipv6ExternSrcIp=ipv6ExternSrcIp, cableLengthInfo=cableLengthInfo, vsfModuleEntry=vsfModuleEntry, ddmDiagBiasHighAlarmThreshold=ddmDiagBiasHighAlarmThreshold, portLEDTimeRangeStartTime=portLEDTimeRangeStartTime, ipv6ExternDstIp=ipv6ExternDstIp, qos3QueueWredDp=qos3QueueWredDp, showmlsqosmapsdscpmutationEntry=showmlsqosmapsdscpmutationEntry, qos3McQueueBindWidthEntry=qos3McQueueBindWidthEntry, macIpExternSrcMac=macIpExternSrcMac, dhcpSnoopingOptionSelfDefinedRemoteIDFormat=dhcpSnoopingOptionSelfDefinedRemoteIDFormat, qos2MapDSCPtoIntp5=qos2MapDSCPtoIntp5, qos2MapExptoDP4=qos2MapExptoDP4, sysUserName=sysUserName, dcscm6dcAclDestinationIp=dcscm6dcAclDestinationIp, qos2MapDSCPtoDSCP7=qos2MapDSCPtoDSCP7, qos3QueueBindWidthMax=qos3QueueBindWidthMax, snmpRmonStatus=snmpRmonStatus, priIgmpSnoopingPortAuthFreeRule=priIgmpSnoopingPortAuthFreeRule, qos3SchedulePolicyBindStatus=qos3SchedulePolicyBindStatus, ddmTranscDiagnosisEntry=ddmTranscDiagnosisEntry, macIpExternSrcOp=macIpExternSrcOp, dhcpSnoopingTrust=dhcpSnoopingTrust, dvmrpInterfaceEntry=dvmrpInterfaceEntry, sntpServerEntry=sntpServerEntry, showQos3ClassmapName=showQos3ClassmapName, dvmrpRouteMetric=dvmrpRouteMetric, qos3QueueWeight4=qos3QueueWeight4, macIpExternSrcPort2=macIpExternSrcPort2, erpsPort1RxRapsFsPktCnt=erpsPort1RxRapsFsPktCnt, poePortPdClass=poePortPdClass, prieeePortConfig=prieeePortConfig, dnsServerPriority=dnsServerPriority, priIgmpSnoopingQueryInterval=priIgmpSnoopingQueryInterval, erpsRingConfigTable=erpsRingConfigTable, qos3ScheduleQueueInputNodeID=qos3ScheduleQueueInputNodeID, qos2MapDSCPtoIntp8=qos2MapDSCPtoIntp8, priIpConfig=priIpConfig, dnsServerEntry=dnsServerEntry, qos2ClassMapV6AccGroup=qos2ClassMapV6AccGroup, macExternCos=macExternCos, qos3NodeScheduleStatus=qos3NodeScheduleStatus, efmOamLoopBackSuccess=efmOamLoopBackSuccess, qos3NodeSchedulePolicyIndex=qos3NodeSchedulePolicyIndex)
mibBuilder.exportSymbols("NAG-MIB", poePortCurrentVoltage=poePortCurrentVoltage, securityMacPortEntry=securityMacPortEntry, dhcpLeaseTimeDay=dhcpLeaseTimeDay, fileCopyMode=fileCopyMode, ipStandardAclEntry=ipStandardAclEntry, erpsPortTrackCfmMaNum=erpsPortTrackCfmMaNum, qosClassMapName=qosClassMapName, switchCPUIdle=switchCPUIdle, sysTemperature=sysTemperature, timeRangeStartWeek=timeRangeStartWeek, dvmrpNeighborRcvBadPkts=dvmrpNeighborRcvBadPkts, erpsPort1RxRapsSfPktCnt=erpsPort1RxRapsSfPktCnt, dhcpSnoopingStaticBindingTable=dhcpSnoopingStaticBindingTable, vlanInOctets=vlanInOctets, poePortPdStatus=poePortPdStatus, dhcpPoolDefaultRouterIpAddress6=dhcpPoolDefaultRouterIpAddress6, qos2MapExptoIntp2=qos2MapExptoIntp2, stormControlSuppressStatus=stormControlSuppressStatus, portUtilEntry=portUtilEntry, erpsRevertiveMode=erpsRevertiveMode, erpsPort1StatisticsEntry=erpsPort1StatisticsEntry, dhcpRelayOption82Vid=dhcpRelayOption82Vid, mstpMaxhop=mstpMaxhop, poeHighInrushEnable=poeHighInrushEnable, dvmrpInterfaceKeyVersion=dvmrpInterfaceKeyVersion, dhcpSnoopingBlockedInfoPortIndex=dhcpSnoopingBlockedInfoPortIndex, qos2AggPolicyPBSKbps=qos2AggPolicyPBSKbps, dhcpSnoopingActionRecoveryTime=dhcpSnoopingActionRecoveryTime, qos2MapIntptoEXP6=qos2MapIntptoEXP6, qos2MapCostoIntp6=qos2MapCostoIntp6, dhcpPoolExpandEntry=dhcpPoolExpandEntry, efmOamDiscoverySuccess=efmOamDiscoverySuccess, portRateLimitCurMulticastNum=portRateLimitCurMulticastNum, efmOamLoopBackExit=efmOamLoopBackExit, qos2MapExptoDP3=qos2MapExptoDP3, qosPolicyTable=qosPolicyTable, mirrorDestSession=mirrorDestSession, qos3AggPolicyMapName=qos3AggPolicyMapName, ipHttpState=ipHttpState, arpSpeedLimitOID=arpSpeedLimitOID, ipv6ExternAclEntry=ipv6ExternAclEntry, secMacAdress=secMacAdress, radiusAuthenServerHostPort=radiusAuthenServerHostPort, qos3MapIntpExtendTable=qos3MapIntpExtendTable, dhcpSnoopingStaticBindingIP=dhcpSnoopingStaticBindingIP, qos3PortPassThroughDscp=qos3PortPassThroughDscp, newPortSecurityEntry=newPortSecurityEntry, arpMgt=arpMgt, dhcpPoolOptionType=dhcpPoolOptionType, portSecurityVlanPortIndex=portSecurityVlanPortIndex, qos2MapCostoDP3=qos2MapCostoDP3, qos2SetTable=qos2SetTable, ripNetworkAddrPrefixLen=ripNetworkAddrPrefixLen, sshConnVersion=sshConnVersion, dhcpLeaseTimeType=dhcpLeaseTimeType, qos2AggPolicyExceedActionChangeValue=qos2AggPolicyExceedActionChangeValue, dhcpPoolDnsSerPoolName=dhcpPoolDnsSerPoolName, swHardwareVersion=swHardwareVersion, dhcpRelayInformationOptionSubscriberIDFormat=dhcpRelayInformationOptionSubscriberIDFormat, timeRangeIndex=timeRangeIndex, priIgmpSnoopingNoPort=priIgmpSnoopingNoPort, sysPortNum=sysPortNum, ospfAreaNumber=ospfAreaNumber, dhcpPoolDomainName=dhcpPoolDomainName, priPppoeIaSelfDefinedCircuitID=priPppoeIaSelfDefinedCircuitID, dhcpsnooping=dhcpsnooping, qos3StatisticClearStatus=qos3StatisticClearStatus, qosMapDscp1=qosMapDscp1, macExternEtherTypeWild=macExternEtherTypeWild, sshAuthRetries=sshAuthRetries, qos3PolicyAccounting=qos3PolicyAccounting, sysBootImgSecondary=sysBootImgSecondary, priPppoeIaPortCircuitID=priPppoeIaPortCircuitID, qos3PolicyconformSetIntp=qos3PolicyconformSetIntp, qosAggPolicerConformAction=qosAggPolicerConformAction, macStandardPriority=macStandardPriority, filePort=filePort, dcscmdcPortbindingPortName=dcscmdcPortbindingPortName, shutdownPort=shutdownPort, clusterv2MemberHostName=clusterv2MemberHostName, rateViolationShutdownPort=rateViolationShutdownPort, ipStaticRouteExtMask=ipStaticRouteExtMask, portName=portName, ipExternSubIndex=ipExternSubIndex, dhcpPoolBootFile=dhcpPoolBootFile, qos3QueueWeightTable=qos3QueueWeightTable, tacacsServerHostPrimary=tacacsServerHostPrimary, prieeePortEntry=prieeePortEntry, sysAddUserStatus=sysAddUserStatus, qos3ScheduleQueueInputPolicyIndex=qos3ScheduleQueueInputPolicyIndex, portLEDState=portLEDState, qos3ScheduleQueueWeightValue=qos3ScheduleQueueWeightValue, mirrorRspanSessionEntry=mirrorRspanSessionEntry, portRateLimitCurUnicastNum=portRateLimitCurUnicastNum, erpsProtectedInstance=erpsProtectedInstance, sysCPUMac=sysCPUMac, lpbackDetecShowPortIndex=lpbackDetecShowPortIndex, dhcpRelaySharevlanSubvlanConfigureEntry=dhcpRelaySharevlanSubvlanConfigureEntry, qos2PolicyExceedActionChange=qos2PolicyExceedActionChange, qosMapDscp6=qosMapDscp6, mirrorSrcPortTable=mirrorSrcPortTable, qos3PortWredEnable=qos3PortWredEnable, spanGlobalEnable=spanGlobalEnable, fdbMacCurHiddenNum=fdbMacCurHiddenNum, ipv6StandardSrcIp=ipv6StandardSrcIp, switchCPUThirtySecondIdle=switchCPUThirtySecondIdle, erpsClearCommand=erpsClearCommand, urpfPortStatus=urpfPortStatus, qosMapDscp8=qosMapDscp8, dcscmVMacbindingMacAddr=dcscmVMacbindingMacAddr, clusterv2BaseKey=clusterv2BaseKey, macExternIndex=macExternIndex, ddmDiagnosisBias=ddmDiagnosisBias, dhcpSnoopingPortConfigTable=dhcpSnoopingPortConfigTable, sysFreeFlashSize=sysFreeFlashSize, mstpHelloTime=mstpHelloTime, translationOldVlanid=translationOldVlanid, dvmrpMgt=dvmrpMgt, poePortMaxPower=poePortMaxPower, dcscmSipbindingSipMask=dcscmSipbindingSipMask, mvlanPortInfoTable=mvlanPortInfoTable, qosPortQueueWeight6=qosPortQueueWeight6, fdbMacCurMulticastWaitNum=fdbMacCurMulticastWaitNum, lpbackDetecShowInformation=lpbackDetecShowInformation, portHybridTaggedAllowedvlan=portHybridTaggedAllowedvlan, qos2MapExptoDP2=qos2MapExptoDP2, macIpExternProtocal=macIpExternProtocal, qos2MapDSCPtoIntpIntPriovalue=qos2MapDSCPtoIntpIntPriovalue, tacacsServerHostEntry=tacacsServerHostEntry, switchInfoEntry=switchInfoEntry, dcscm6scAcl=dcscm6scAcl, priPppoeIaPortTrust=priPppoeIaPortTrust, dcscm6scAclSourceMask=dcscm6scAclSourceMask, dhcpRelayServerAddrVlanId=dhcpRelayServerAddrVlanId, qosPolicyPeakKbps=qosPolicyPeakKbps, ddmDiagTXPowerHighAlarmThreshold=ddmDiagTXPowerHighAlarmThreshold, dyingGasp=dyingGasp, qos3PolicyTable=qos3PolicyTable, mirrorRspanSession=mirrorRspanSession, portMacCountLimitDisable=portMacCountLimitDisable, amPortStatus=amPortStatus, ntpEntStatusInPkts=ntpEntStatusInPkts, dhcpPoolMacAddress=dhcpPoolMacAddress, trapDestVersion=trapDestVersion, copyRunningConfigEvent=copyRunningConfigEvent, priJumblyStacking=priJumblyStacking, priIgmpSnoopingPortBitmap=priIgmpSnoopingPortBitmap, clearFlowCounter=clearFlowCounter, macNotificationHistIndex=macNotificationHistIndex, portHybridTaggedAllowedVlanAll=portHybridTaggedAllowedVlanAll, macStandardSubIndex=macStandardSubIndex, trapDestEntry=trapDestEntry, sntpServer6Status=sntpServer6Status, dhcpPoolDnsSerIpAddress3=dhcpPoolDnsSerIpAddress3, priIgmpSnoopingPortAuthEnable=priIgmpSnoopingPortAuthEnable, iPAddrStatus=iPAddrStatus, qos3SetIpPrec=qos3SetIpPrec, qosPortBindTable=qosPortBindTable, dhcpSnoopingPortActionTable=dhcpSnoopingPortActionTable, nameAclGroupAclName=nameAclGroupAclName, transceiverMonitorAlarmEvent=transceiverMonitorAlarmEvent, showQos3VlanTable=showQos3VlanTable, conformance=conformance, dcscmdcAclDestinationMask=dcscmdcAclDestinationMask, nameAclGroupEntry=nameAclGroupEntry, erpsPort0StatusTable=erpsPort0StatusTable, fileCopyFailReason=fileCopyFailReason, qos3PolicyconformSetCos=qos3PolicyconformSetCos, erpsInstanceRowStatus=erpsInstanceRowStatus, portSecurityMacAddressEntry=portSecurityMacAddressEntry, timeRangeStatus=timeRangeStatus, aclActiveStatistic=aclActiveStatistic, efmOamLocalErrFrameSecondsSummaryEvent=efmOamLocalErrFrameSecondsSummaryEvent, sysFlashSize=sysFlashSize, numAclGroupStatus=numAclGroupStatus, dhcpSnoopingEnable=dhcpSnoopingEnable, arpSecurityIfindex=arpSecurityIfindex, ipStandardSrcIp=ipStandardSrcIp, dhcpSnoopingAlarmInfoEntry=dhcpSnoopingAlarmInfoEntry, dhcpPoolWinsIpAddress1=dhcpPoolWinsIpAddress1, ipStaticRouteExtNextHop=ipStaticRouteExtNextHop, ddmTranscAlarmEntry=ddmTranscAlarmEntry, psPortSecurity=psPortSecurity, mirrorRspanVlan=mirrorRspanVlan, dhcpPoolDnsSerIpAddress4=dhcpPoolDnsSerIpAddress4, aclActiveDirection=aclActiveDirection, portGroupCreate=portGroupCreate, qosPortType=qosPortType, timeRangeEndTime=timeRangeEndTime, ntpEntTimeResolution=ntpEntTimeResolution, qos3AggPolicyViolateSetPrec=qos3AggPolicyViolateSetPrec, erpsPortTrackConfig=erpsPortTrackConfig, erpsStatus=erpsStatus, dhcpPoolTable=dhcpPoolTable, qos3NodeScheduleNodeID=qos3NodeScheduleNodeID, qos3QueueWredDpEnd=qos3QueueWredDpEnd, mvlanID=mvlanID, qos3QueueWeightType=qos3QueueWeightType, iPAddrVid=iPAddrVid, dhcpSnoopingVlanEnable=dhcpSnoopingVlanEnable, dot1xOnlineUserMac=dot1xOnlineUserMac, mstpRevisionLevel=mstpRevisionLevel, fdbMacMaxMulticastNum=fdbMacMaxMulticastNum, dhcpPoolWinsIpAddress7=dhcpPoolWinsIpAddress7, clusterv2Base=clusterv2Base, erpsPortStatistics=erpsPortStatistics, qos3PolicyExceedSetIntp=qos3PolicyExceedSetIntp, qos3QueueBindWidthMin=qos3QueueBindWidthMin, qos3QueueBindWidthStatus=qos3QueueBindWidthStatus, indicatesType=indicatesType, qos3ScheduleQueueAlgorithm=qos3ScheduleQueueAlgorithm, timeRangeStartDate=timeRangeStartDate, dvmrpRouteNextHopTable=dvmrpRouteNextHopTable, ddmAlarmInfo=ddmAlarmInfo, prClusterv2=prClusterv2, priIgmpSnoopingGroupAddress=priIgmpSnoopingGroupAddress, qosClassMapAccessGroup=qosClassMapAccessGroup, qos3PolicyEntry=qos3PolicyEntry, loopbackDetecSpecVlanEntry=loopbackDetecSpecVlanEntry, dhcpPoolWinsIpAddress8=dhcpPoolWinsIpAddress8, priQos=priQos, qos3PolicyType=qos3PolicyType, dvmrpRouteNextHopIfIndex=dvmrpRouteNextHopIfIndex, dvmrpInterfaceStatus=dvmrpInterfaceStatus, qos2MapCostoDP1=qos2MapCostoDP1, sshUserPassword=sshUserPassword, qos3AggPolicyPBSKbps=qos3AggPolicyPBSKbps, mstpTCFlush=mstpTCFlush, timeRangeEntry=timeRangeEntry, dcscmpcDestinationIp=dcscmpcDestinationIp, erpsPortTrackCfmDomain=erpsPortTrackCfmDomain, erpsManualSwitch=erpsManualSwitch, qos3AggPolicyconformSetIntp=qos3AggPolicyconformSetIntp, dhcpPoolWinsIpAddress5=dhcpPoolWinsIpAddress5, securityIpAddress=securityIpAddress, qos2MapIntptoEXP5=qos2MapIntptoEXP5, ddmDiagTempLowWarnThreshold=ddmDiagTempLowWarnThreshold, ntpEntObjectsGroup2=ntpEntObjectsGroup2, qos3PolicyViolateSetCos=qos3PolicyViolateSetCos, clusterv2MemberCounter=clusterv2MemberCounter, TimeFilter=TimeFilter, portGroupTable=portGroupTable, macExternAclEntry=macExternAclEntry, ntpSnmpMIB=ntpSnmpMIB, jumblyStackingInfoEntry=jumblyStackingInfoEntry, qos2AggPolicyExceedAction=qos2AggPolicyExceedAction, dhcpSnoopingBlockedInfoEntry=dhcpSnoopingBlockedInfoEntry, qos2MapExptoIntpStatus=qos2MapExptoIntpStatus, dhcpSnoopingOptionSelfDefinedSubscriberID=dhcpSnoopingOptionSelfDefinedSubscriberID, ospfRedistributeMetricType=ospfRedistributeMetricType, dvmrpNeighborExpiryTime=dvmrpNeighborExpiryTime, qosSetEXPimposition=qosSetEXPimposition, portType=portType, portLEDTimeRangeDelete=portLEDTimeRangeDelete)
mibBuilder.exportSymbols("NAG-MIB", dnsDomainSuffixTable=dnsDomainSuffixTable, qosPortQueueWeight8=qosPortQueueWeight8, showmlsqosinterfaceqoscontent=showmlsqosinterfaceqoscontent, mvlanInfoEntry=mvlanInfoEntry, PortList=PortList, qos3MapAtoB4=qos3MapAtoB4, qos3ScheduleQueueAlgorithmPolicyIndex=qos3ScheduleQueueAlgorithmPolicyIndex, portGroupMemberTimeout=portGroupMemberTimeout, pvid=pvid, ntpEntCompliances=ntpEntCompliances, qos3DelCVid=qos3DelCVid, slotTemperatureHigherOID=slotTemperatureHigherOID, dcscmVMacbindingVlanid=dcscmVMacbindingVlanid, dcscmscAclDestinationIp=dcscmscAclDestinationIp, flowCounterInMulticastPkts=flowCounterInMulticastPkts, showQos3=showQos3, qos3SetCos=qos3SetCos, dhcpPoolOptionIndex=dhcpPoolOptionIndex, portSecurityMacAddressTable=portSecurityMacAddressTable, qos2MapIntptoDSCP3=qos2MapIntptoDSCP3, dhcpPoolOptionEntry=dhcpPoolOptionEntry, erpsRingPort0Index=erpsRingPort0Index, psPortIndex=psPortIndex, portSecurityEntry=portSecurityEntry, stormControlRate=stormControlRate, NtpStratum=NtpStratum, qos3PolicyExceedSetDp=qos3PolicyExceedSetDp, dnsServerIpAddr=dnsServerIpAddr, iPAddrPrimaryInterface=iPAddrPrimaryInterface, sntpTimeZoneTime=sntpTimeZoneTime, dcscm6scPortbindingAclNumber=dcscm6scPortbindingAclNumber, qos3AggPolicyViolateSetDscp=qos3AggPolicyViolateSetDscp, vlanPortNumber=vlanPortNumber, qosPolicyName=qosPolicyName, ipv6StandardSubIndex=ipv6StandardSubIndex, ripRouterVersion=ripRouterVersion, portCount=portCount, qos3PolicyMapGroupIsExt=qos3PolicyMapGroupIsExt, vlanInMulticastPkts=vlanInMulticastPkts, dcscm6scEnable=dcscm6scEnable, vlanTranslationTable=vlanTranslationTable, portMacCountLimitCurNum=portMacCountLimitCurNum, mrppRingStatus=mrppRingStatus, ripNetworkAddrEntry=ripNetworkAddrEntry, dvmrpScalar=dvmrpScalar, aclActiveTable=aclActiveTable, portHybridUntaggedAllowedVlanAdd=portHybridUntaggedAllowedVlanAdd, qos3QueueWredPortIndex=qos3QueueWredPortIndex, mstpPortDigestSnp=mstpPortDigestSnp, showQos3VlanInCounter=showQos3VlanInCounter, slotTemperatureLowerOID=slotTemperatureLowerOID, qosMap=qosMap, radiusServerKey=radiusServerKey, showmlsqosmaps=showmlsqosmaps, fileCopyResult=fileCopyResult, sshUserStatus=sshUserStatus, portGroupInfo=portGroupInfo, timeRangeTable=timeRangeTable, dcscm6SipbindingEntry=dcscm6SipbindingEntry, mstpBridgeForwardDelay=mstpBridgeForwardDelay, ospfNetworkAreaStatus=ospfNetworkAreaStatus, ipv6StandardIndex=ipv6StandardIndex, clusterv2CreateName=clusterv2CreateName, macNotificationNotificationsEnabled=macNotificationNotificationsEnabled, dcscmscAclDestinationMask=dcscmscAclDestinationMask, loopbackDetection=loopbackDetection, qos2SetDefaultPBR=qos2SetDefaultPBR, macIpExternAclEntry=macIpExternAclEntry, qos2MapCostoDPStatus=qos2MapCostoDPStatus, dcscm6pccos=dcscm6pccos, ipAddress=ipAddress, switchBootImgPrimary=switchBootImgPrimary, dvmrpNeighborUpTime=dvmrpNeighborUpTime, dot1xOnlineUserState=dot1xOnlineUserState, portGroup=portGroup, ntpEntSoftwareVersion=ntpEntSoftwareVersion, qos3QueueBindWidthPortIndex=qos3QueueBindWidthPortIndex, arpSecurityConvertALL=arpSecurityConvertALL, portLEDShutoffTable=portLEDShutoffTable, ipExternDstIp=ipExternDstIp, qos2MapIntptoEXPStatus=qos2MapIntptoEXPStatus, authLogout=authLogout, transceiverMonitor=transceiverMonitor, qosMapDscp2=qosMapDscp2, priQinQmib=priQinQmib, ipv6StandardAclEntry=ipv6StandardAclEntry, qosSetv6nextHop=qosSetv6nextHop, dcscm6VMacbindingVlanid=dcscm6VMacbindingVlanid, clusterv2CandidateEntry=clusterv2CandidateEntry, qos2MapDSCPtoIntp=qos2MapDSCPtoIntp, dhcpSnoopingAckBindingMAC=dhcpSnoopingAckBindingMAC, nameAclGroupTable=nameAclGroupTable, macAddress=macAddress, qos2PortCos=qos2PortCos, showmlsqosmapsdscpcos=showmlsqosmapsdscpcos, portIndex=portIndex, dhcpRelayOption82ForwardPolicy=dhcpRelayOption82ForwardPolicy, showmlsqosinterfaceTable=showmlsqosinterfaceTable, vlanFCVlanID=vlanFCVlanID, amPortCount=amPortCount, dvmrpInterfaceRcvBadRoutes=dvmrpInterfaceRcvBadRoutes, clusterv2BaseMaxNumberOfMembers=clusterv2BaseMaxNumberOfMembers, qosPolicyType=qosPolicyType, ddmDiagTempHighWarnThreshold=ddmDiagTempHighWarnThreshold, priIgmpSnoopingLimitPortGroupNum=priIgmpSnoopingLimitPortGroupNum, portMacCountLimitConfigNum=portMacCountLimitConfigNum, ipv6ExternAclTable=ipv6ExternAclTable, efmOamLocalErrFrameEvent=efmOamLocalErrFrameEvent, qos3Ets=qos3Ets, ntpEntStatus=ntpEntStatus, qos3ScheduleBindWidthLevelID=qos3ScheduleBindWidthLevelID, ddmTranscBasicInfoEntry=ddmTranscBasicInfoEntry, clusterv2Status=clusterv2Status, portHybridTaggedPortIndex=portHybridTaggedPortIndex, macExternVlanIdWild=macExternVlanIdWild, timeRangeType=timeRangeType, dnsDomainSuffixStatus=dnsDomainSuffixStatus, sntpServerStatus=sntpServerStatus, portTruckAllowedVlan=portTruckAllowedVlan, oldPassword=oldPassword, dhcpLeaseTimeMinutes=dhcpLeaseTimeMinutes, erpsPort1TxRapsSfPktCnt=erpsPort1TxRapsSfPktCnt, dhcpServerRelayInformationEnable=dhcpServerRelayInformationEnable, erpsRplPort0Role=erpsRplPort0Role, dhcpSnoopingBindingDot1x=dhcpSnoopingBindingDot1x, trapDestTable=trapDestTable, ospfNssaOriginateDefaultInfoStatus=ospfNssaOriginateDefaultInfoStatus, dhcpRelayServerAddrIndex=dhcpRelayServerAddrIndex, qosPolicyClassMap=qosPolicyClassMap, MacAddress=MacAddress, dot1xOnlineUserPortControl=dot1xOnlineUserPortControl, priPppoeIaPortTable=priPppoeIaPortTable, dcscm6dcEnable=dcscm6dcEnable, dhcpSnoopingAlarmInfoTable=dhcpSnoopingAlarmInfoTable, ddmAlarmIfIndex=ddmAlarmIfIndex, ntpEntStatusCurrentModeVal=ntpEntStatusCurrentModeVal, qos3AggPolicyStatus=qos3AggPolicyStatus, priIgmpSnoopingVlanTable=priIgmpSnoopingVlanTable, recoverIPOID=recoverIPOID, qos3NodeScheduleEntry=qos3NodeScheduleEntry, ipExternSrcOp=ipExternSrcOp, qos3AggPolicyViolateSetIntp=qos3AggPolicyViolateSetIntp, mirrorDestTable=mirrorDestTable, dvmrpRouteUpstreamNeighbor=dvmrpRouteUpstreamNeighbor, copyRunningConfig=copyRunningConfig, efmOamDiscoveryTimeout=efmOamDiscoveryTimeout, erpsPort0RxRapsMsPktCnt=erpsPort0RxRapsMsPktCnt, destinationFileCopy=destinationFileCopy, NAG=NAG, erpsPortTrackCfmRmepId=erpsPortTrackCfmRmepId, qos2MapIntptoDSCP7=qos2MapIntptoDSCP7, qos2PolicyViolateActionChange=qos2PolicyViolateActionChange, portSecurityMacAddress=portSecurityMacAddress, ntpEntStatusNumberOfRefSources=ntpEntStatusNumberOfRefSources, slotTemperature=slotTemperature, dhcpSnoopingInformationOptionDelimiter=dhcpSnoopingInformationOptionDelimiter, dcscm6SipbindingAclNumber=dcscm6SipbindingAclNumber, aaaAccountBindingDHCP=aaaAccountBindingDHCP, clusterv2MemberTable=clusterv2MemberTable, portGroupEntry=portGroupEntry, ddmDiagTempHighAlarmThreshold=ddmDiagTempHighAlarmThreshold, dhcpPoolDefaultRouterIpAddress5=dhcpPoolDefaultRouterIpAddress5, qos2MapExptoIntp8=qos2MapExptoIntp8, ddmTransSerialIndex=ddmTransSerialIndex, mabOnlineUserPort=mabOnlineUserPort, lpbackDetecVlanPortIndex=lpbackDetecVlanPortIndex, showmlsqosmapspoliceddscp=showmlsqosmapspoliceddscp, qos3SercivePolicyStatus=qos3SercivePolicyStatus, qosMapMarkDownDscp=qosMapMarkDownDscp, fdbMacMaxTotalNum=fdbMacMaxTotalNum, sysCPUThirtySecondIdle=sysCPUThirtySecondIdle, ddmTransSerialTypeName=ddmTransSerialTypeName, qosPolicyEntry=qosPolicyEntry, dcscmscPortbindingTable=dcscmscPortbindingTable, ntpEntStatusDateTime=ntpEntStatusDateTime, dvmrpNeighborRcvRoutes=dvmrpNeighborRcvRoutes, sumFlowCounterInPkts=sumFlowCounterInPkts, portHybridUntaggedAllowedVlanTable=portHybridUntaggedAllowedVlanTable, qos2MapCostoDP8=qos2MapCostoDP8, sysCPUType=sysCPUType, qos3NodeScheduleLevelID=qos3NodeScheduleLevelID, stormControlType=stormControlType, qosPolicyStatus=qosPolicyStatus, ipStaticRouteExtEntry=ipStaticRouteExtEntry, mrppRingSecPortBlockState=mrppRingSecPortBlockState, macIpExternSrcPort1=macIpExternSrcPort1, mstpPortTCFlush=mstpPortTCFlush, qos3MapIntpExtendType=qos3MapIntpExtendType, qos2MapDSCPtoDSCP8=qos2MapDSCPtoDSCP8, ntpEntStatusActiveRefSourceName=ntpEntStatusActiveRefSourceName, priMrppRingTable=priMrppRingTable, OspfAreaID=OspfAreaID, portSecurityAgingTime=portSecurityAgingTime, dcscm6dcPortbindingEntry=dcscm6dcPortbindingEntry, qosAggPolicerViolateAction=qosAggPolicerViolateAction, vlanFlowCounterEntry=vlanFlowCounterEntry, priPowerSupply=priPowerSupply, sourceFileCopy=sourceFileCopy, ripMgt=ripMgt, fileCopyUseMode=fileCopyUseMode, ipExternPriority=ipExternPriority, mirrorDestGreEntry=mirrorDestGreEntry, macNotificationMibObjects=macNotificationMibObjects, tacacsServerHostTable=tacacsServerHostTable, trapDestAddress=trapDestAddress, clusterv2CandidateCounter=clusterv2CandidateCounter, dhcpSnoopingBindingCount=dhcpSnoopingBindingCount, intfaceStatus=intfaceStatus, sysPowerStateEntry=sysPowerStateEntry, qosPortIndex=qosPortIndex, erpsOpenRing=erpsOpenRing, clearVlanFlowCounter=clearVlanFlowCounter, priIgmpSnoopingBindEntry=priIgmpSnoopingBindEntry, poePortIndex=poePortIndex, macNotificationInterfaceObjects=macNotificationInterfaceObjects, sysStackFlag=sysStackFlag, mirrorSrcCpuEntry=mirrorSrcCpuEntry, prieeePortTable=prieeePortTable, flowCounterInOctets=flowCounterInOctets, qos3QueueWeightStatus=qos3QueueWeightStatus, dhcpSnoopingStatisticDropPktsNum=dhcpSnoopingStatisticDropPktsNum, timeRangeEndWeek=timeRangeEndWeek, showmlsqosinterfaceEntry=showmlsqosinterfaceEntry, qos3SetTunnelId=qos3SetTunnelId, dcscmscAclPermitOrDeny=dcscmscAclPermitOrDeny, dvmrpInterfaceMetric=dvmrpInterfaceMetric, ddmDiagVoltLowWarnThreshold=ddmDiagVoltLowWarnThreshold, dnsDomainSuffix=dnsDomainSuffix, vctAction=vctAction, showqosaggregatepolicerTable=showqosaggregatepolicerTable, ospfRedistributeProtocol=ospfRedistributeProtocol, portSecurityVioRestrictRecoveryTime=portSecurityVioRestrictRecoveryTime, erpsRingName=erpsRingName, erpsPort1RRapsNodeId=erpsPort1RRapsNodeId, qos3QueueWeightPortIndex=qos3QueueWeightPortIndex, intfacetype=intfacetype, clusterv2MemberOperStatus=clusterv2MemberOperStatus, macExternAclTable=macExternAclTable, dhcpServerLeaseBindingTable=dhcpServerLeaseBindingTable, qos3QueueBindWidthEntry=qos3QueueBindWidthEntry, jumblyStackingInfoTable=jumblyStackingInfoTable, dhcpSnoopingbindingARP=dhcpSnoopingbindingARP, portSecurity=portSecurity, dhcpPoolNextServerTable=dhcpPoolNextServerTable, tacacsMgt=tacacsMgt, sysMonitorAlarmEntry=sysMonitorAlarmEntry, dhcpSnoopingStaticBindingMask=dhcpSnoopingStaticBindingMask, stormControlTable=stormControlTable, qos3PolicyExceedSetPrec=qos3PolicyExceedSetPrec, qosPortQueueIndex=qosPortQueueIndex, showQos3QueueStatisticsDropedPacket=showQos3QueueStatisticsDropedPacket, erpsPort0RxRapsSfPktCnt=erpsPort0RxRapsSfPktCnt, ipv6StandardAct=ipv6StandardAct, mstpPortPortFast=mstpPortPortFast)
mibBuilder.exportSymbols("NAG-MIB", macNotificationHistTableMaxLength=macNotificationHistTableMaxLength, dot1xOnlineUserPortMethod=dot1xOnlineUserPortMethod, mirrorRspanSessionVlan=mirrorRspanSessionVlan, ipStandardPriority=ipStandardPriority, qos3StatisticClearDirection=qos3StatisticClearDirection, ntpEntStatusOutPkts=ntpEntStatusOutPkts, showQos3PolicyDirection=showQos3PolicyDirection, fileName=fileName, showQos3VlanGreenCounter=showQos3VlanGreenCounter, showQos3VlanRedCounter=showQos3VlanRedCounter, dcscmdcAclNumber=dcscmdcAclNumber, clusterv2RebootMem=clusterv2RebootMem, qos2MapIntptoDSCP1=qos2MapIntptoDSCP1, fileType=fileType, ddm=ddm, dhcpSnoopingAlarmInfoPortIndex=dhcpSnoopingAlarmInfoPortIndex, clusterv2CandidateId=clusterv2CandidateId, lastFiveMinOutPktsPerSec=lastFiveMinOutPktsPerSec, qos2MapIntptoDSCP4=qos2MapIntptoDSCP4, ripSplitHorizonStatus=ripSplitHorizonStatus, portTruckAllowedVlanTable=portTruckAllowedVlanTable, ipv6ExternDstOp=ipv6ExternDstOp, sshUseEntry=sshUseEntry, maxBandwidth=maxBandwidth, mvlanAssoVlanList=mvlanAssoVlanList, dcscmdcAclSourceIp=dcscmdcAclSourceIp, mrppRingSecPortName=mrppRingSecPortName, ntpEntNTPCompliance=ntpEntNTPCompliance, dnsEnable=dnsEnable, lpbackDetecNoExistInterval=lpbackDetecNoExistInterval, ospfRedistributeMetric=ospfRedistributeMetric, portComboMediaType=portComboMediaType, qos3QueueWeight0=qos3QueueWeight0, dhcpPoolWinsIpAddress3=dhcpPoolWinsIpAddress3, qos3MapEntry=qos3MapEntry, ddmTransSerialBitRate=ddmTransSerialBitRate, dhcpPoolExpandName=dhcpPoolExpandName, qos2MapDSCPtoDP5=qos2MapDSCPtoDP5, dot1xOnlineUserIndex=dot1xOnlineUserIndex, dhcpRelaySharevlanSubvlanConfigureTable=dhcpRelaySharevlanSubvlanConfigureTable, dhcpPoolNextServerIpAddress8=dhcpPoolNextServerIpAddress8, portSecurityTable=portSecurityTable, rateViolationNoShutdownPort=rateViolationNoShutdownPort, ospfNetworkAreaMask=ospfNetworkAreaMask, arpSecurityConvert=arpSecurityConvert, sysMonitorAlarmInputSet=sysMonitorAlarmInputSet, mirrorReflectorPortStatus=mirrorReflectorPortStatus, dcscm6=dcscm6, qos2AggPolicyViolateActionChangeValue=qos2AggPolicyViolateActionChangeValue, showmlsqosmapscosdscp=showmlsqosmapscosdscp, ddmDiagnosisTemperature=ddmDiagnosisTemperature, dhcpSnoopingAckBindingVid=dhcpSnoopingAckBindingVid, dhcpPoolOptionName=dhcpPoolOptionName, qos3ScheduleBindWidthEntry=qos3ScheduleBindWidthEntry, qos2PolicyTable=qos2PolicyTable, dhcpSnoopingLimitRate=dhcpSnoopingLimitRate, amGlobalEnable=amGlobalEnable, ddmDiagnosisVoltage=ddmDiagnosisVoltage, radiusAcctServerHostKey=radiusAcctServerHostKey, mirrorSrcPortEntry=mirrorSrcPortEntry, loopbackDetecIntervalTime=loopbackDetecIntervalTime, dcscm6scAclSourceIp=dcscm6scAclSourceIp, fileCMCCCopy=fileCMCCCopy, ospfRedistributeEntry=ospfRedistributeEntry, qos2ClassMapAccessGroup=qos2ClassMapAccessGroup, qosPortBindIndex=qosPortBindIndex, macIpExternAct=macIpExternAct, dhcpSnoopingInformationOptionAllowUntrusted=dhcpSnoopingInformationOptionAllowUntrusted, qos3SetExp=qos3SetExp, portHybridUntaggedAllowedVlanRemove=portHybridUntaggedAllowedVlanRemove, macIpExternVlanIdWild=macIpExternVlanIdWild, timeRange=timeRange, macStatus=macStatus, portRateLimitConfigBroadcastNum=portRateLimitConfigBroadcastNum, qosClassMapStatus=qosClassMapStatus, portSecurityVlanCurMacNum=portSecurityVlanCurMacNum, tacacsServerKey=tacacsServerKey, qos2SetVrf=qos2SetVrf, efmOamRemoteErrSymbolPeriodEvent=efmOamRemoteErrSymbolPeriodEvent, qos3McQueueID=qos3McQueueID, efmOamRemoteErrFrameSecondsSummaryEvent=efmOamRemoteErrFrameSecondsSummaryEvent, dcscmscPortbindingAclNumber=dcscmscPortbindingAclNumber, systemPriority=systemPriority, dhcpRelayOption82InterfaceConfigureTable=dhcpRelayOption82InterfaceConfigureTable, fireWall=fireWall, mstpBridgeMaxage=mstpBridgeMaxage, dvmrpPruneSource=dvmrpPruneSource, erpsPort1TxRapsTotalPktCnt=erpsPort1TxRapsTotalPktCnt, aaaAccount=aaaAccount, showQos3VlanOutCounter=showQos3VlanOutCounter, dcscmdcPortbindingEntry=dcscmdcPortbindingEntry, qos3PolicyAggregatePolicer=qos3PolicyAggregatePolicer, priIgmpSnoopingQueryRobustness=priIgmpSnoopingQueryRobustness, ospfSummaryAddress=ospfSummaryAddress, erpsPort0TxRapsTotalPktCnt=erpsPort0TxRapsTotalPktCnt, qos2MapCostoIntp5=qos2MapCostoIntp5, mvlanPortStatus=mvlanPortStatus, qos3QueueWredDpStart=qos3QueueWredDpStart, flowCounterOutUcastPkts=flowCounterOutUcastPkts, arpSecurityUpdateProtectALL=arpSecurityUpdateProtectALL, ddmDiagBiasHighWarnThreshold=ddmDiagBiasHighWarnThreshold, dhcpSnoopingRequestBindingInfoEntry=dhcpSnoopingRequestBindingInfoEntry, qos3ClassMapTable=qos3ClassMapTable, switchFileCopy=switchFileCopy, sshMgt=sshMgt, dvmrpInterfaceSentRoutes=dvmrpInterfaceSentRoutes, fileUserPassword=fileUserPassword, qos2MapIntptoDSCPStatus=qos2MapIntptoDSCPStatus, qos3SetCVid=qos3SetCVid, qosPortQueueWeight7=qosPortQueueWeight7, arpSecurityTable=arpSecurityTable, sumFlowCounterTable=sumFlowCounterTable, qos3AddSVid=qos3AddSVid, priPppoeIaPortEnable=priPppoeIaPortEnable, qos3PolicyViolateSetIntp=qos3PolicyViolateSetIntp, erpsMgt=erpsMgt, dns=dns, dhcpRelayServerAddrTable=dhcpRelayServerAddrTable, erpsGroup=erpsGroup, arpStaticIpaddress=arpStaticIpaddress, portSecurityVlanMaxNumEntry=portSecurityVlanMaxNumEntry, macBlackholeEntry=macBlackholeEntry, mstpInstanceRegionRootID=mstpInstanceRegionRootID, ddmTranscBasicInfoTable=ddmTranscBasicInfoTable, qosPortQueueTable=qosPortQueueTable, ripNetworkAddrTable=ripNetworkAddrTable, portMode=portMode, erpsTcnPropagationConfig=erpsTcnPropagationConfig, portHybridTaggedAllowedVlanRemove=portHybridTaggedAllowedVlanRemove, switchMemoryUsage=switchMemoryUsage, dot1qTunnelTable=dot1qTunnelTable, qos3MapDscpTable=qos3MapDscpTable, poePortConfigEntry=poePortConfigEntry, dvmrpRouteExpiryTime=dvmrpRouteExpiryTime, dhcpSnoopingBindingEnalbe=dhcpSnoopingBindingEnalbe, showSwitchStartUpStatus=showSwitchStartUpStatus, dhcpSnoopingPortIndex=dhcpSnoopingPortIndex, erpsNodeState=erpsNodeState, portLEDTimeRangeMapStatus=portLEDTimeRangeMapStatus, ipStaticRouteExtDest=ipStaticRouteExtDest, sysAddUser=sysAddUser, ipv6StandardSrcPrefixLen=ipv6StandardSrcPrefixLen, dcscmdcEnable=dcscmdcEnable, dhcpPoolOptionStatus=dhcpPoolOptionStatus, erpsPort1Name=erpsPort1Name, dcscm6scAclDestinationMask=dcscm6scAclDestinationMask, qos3PolicyViolateSetPrec=qos3PolicyViolateSetPrec, priPppoeIaMib=priPppoeIaMib, vlanInfoTable=vlanInfoTable, radiusServerTimeout=radiusServerTimeout, portTrunkAllowedvlan=portTrunkAllowedvlan, macExternSrcMacWild=macExternSrcMacWild, swType=swType, dhcpSnoopingStatisticRequestBindingNum=dhcpSnoopingStatisticRequestBindingNum, dvmrpPruneTable=dvmrpPruneTable, dcscmdcAclTable=dcscmdcAclTable, qos2SetClassMapName=qos2SetClassMapName, sysSlotBootInfoTable=sysSlotBootInfoTable, qos3AggPolicyExceedSetDscp=qos3AggPolicyExceedSetDscp, ifBer=ifBer, qos3PolicyMapGroupStatus=qos3PolicyMapGroupStatus, qos3MapStatus=qos3MapStatus, erpsPort0RxRapsEventPktCnt=erpsPort0RxRapsEventPktCnt, aaaEnabled=aaaEnabled, qos3ScheduleQueueInputQueueID=qos3ScheduleQueueInputQueueID, portUtilIndex=portUtilIndex, power=power, qos3QueueWredDpMaxRate=qos3QueueWredDpMaxRate, qos3ScheduleQueueInputStatus=qos3ScheduleQueueInputStatus, erpsGuardTimer=erpsGuardTimer, swERPSSFDetectedTrap=swERPSSFDetectedTrap, qos2MapExptoDPStatus=qos2MapExptoDPStatus, ospfNetworkAreaAreaId=ospfNetworkAreaAreaId, ntpEntStatusActiveRefSourceId=ntpEntStatusActiveRefSourceId, portRateLimitTable=portRateLimitTable, erpsPortTrackCfmMaName=erpsPortTrackCfmMaName, dhcpRelayOptionSelfDefinedSubscriberIDFormat=dhcpRelayOptionSelfDefinedSubscriberIDFormat, dhcpSnoopingRequestBindingIP=dhcpSnoopingRequestBindingIP, bandwidthControlStatus=bandwidthControlStatus, qos3EgressGreenRemark=qos3EgressGreenRemark, ddmDiagVoltHighAlarmThreshold=ddmDiagVoltHighAlarmThreshold, clusterv2MemberIpAddress=clusterv2MemberIpAddress, priPppoeIaEntry=priPppoeIaEntry, qosMapDscp3=qosMapDscp3, ipStaticRouteExtTable=ipStaticRouteExtTable, portRateLimitShutRecoveryTime=portRateLimitShutRecoveryTime, sysMonitorAlarmTable=sysMonitorAlarmTable, ValidStatus=ValidStatus, tunnelPortType=tunnelPortType, ntpEntObjectsGroup1=ntpEntObjectsGroup1, qosPolicyMaximumBurstKbps=qosPolicyMaximumBurstKbps, dhcpPoolDnsSerIpAddress5=dhcpPoolDnsSerIpAddress5, mstp=mstp, fdbMacCurStaticNum=fdbMacCurStaticNum, flowCounterInUcastPkts=flowCounterInUcastPkts, qos3ScheduleQueueInputTable=qos3ScheduleQueueInputTable, lpbackDetecExistInterval=lpbackDetecExistInterval, portLEDTimeRangeMapEntry=portLEDTimeRangeMapEntry, macIpExternSrcIp=macIpExternSrcIp, qos2MapDSCPtoIntp3=qos2MapDSCPtoIntp3, switchCPUFiveSecondIdle=switchCPUFiveSecondIdle, psSecurityPortConvertmac=psSecurityPortConvertmac, dvmrpRouteNextHopSourceMask=dvmrpRouteNextHopSourceMask, priVlanConfig=priVlanConfig, showQos3QueueStatisticsQueueID=showQos3QueueStatisticsQueueID, qos3ScheduleQueueAlgorithmNodeID=qos3ScheduleQueueAlgorithmNodeID, sysCPUFiveSecondIdle=sysCPUFiveSecondIdle, portUtilTable=portUtilTable, portBandWidthUsage=portBandWidthUsage, dhcpServerExcludedIpAddrLowIp=dhcpServerExcludedIpAddrLowIp, qos2ServicePolicyVlanList=qos2ServicePolicyVlanList, dyingGaspEvent=dyingGaspEvent, macBlackholeTable=macBlackholeTable, dcscm6dcAclSourceMask=dcscm6dcAclSourceMask, clusterv2MemberEntry=clusterv2MemberEntry, prohibitIPOID=prohibitIPOID, erpsWtrTimer=erpsWtrTimer, translationType=translationType, qos3SetIpDscp=qos3SetIpDscp, dcscmscAclSubNumber=dcscmscAclSubNumber, macBlackholeConfig=macBlackholeConfig, stackingUnitIndex=stackingUnitIndex, priIgmpSnoopingGlobalEnable=priIgmpSnoopingGlobalEnable, dhcpPoolStatus=dhcpPoolStatus, VlanList=VlanList, dhcpPoolDefaultRouterIpAddress4=dhcpPoolDefaultRouterIpAddress4, qos2MapCostoDP2=qos2MapCostoDP2, dcscm6VMacbindingTable=dcscm6VMacbindingTable, sysFanEntry=sysFanEntry, portLEDTimeRangeMapName=portLEDTimeRangeMapName, qosClassMapIpPre=qosClassMapIpPre, sysSlotTable=sysSlotTable, qos2MapDSCPtoDSCPStatus=qos2MapDSCPtoDSCPStatus, qosClassMapDscp=qosClassMapDscp, acl=acl, sysSlotEntry=sysSlotEntry, poeHardwareVersion=poeHardwareVersion, portSecurityVioMacNum=portSecurityVioMacNum, qos2PolicyConformActionChangeValue=qos2PolicyConformActionChangeValue, qos3McQueueBindWidthMax=qos3McQueueBindWidthMax, priIgmpSnoopingLimitPortEntry=priIgmpSnoopingLimitPortEntry, qos2MapExptoIntp6=qos2MapExptoIntp6, sysCPUIdle=sysCPUIdle, qosclassmapEntry=qosclassmapEntry, dhcploggingStatus=dhcploggingStatus, showmlsqosmapsdscpmutationname=showmlsqosmapsdscpmutationname, dhcpSnoopingUserControlMaxNum=dhcpSnoopingUserControlMaxNum, flowCounterInBroadcastPkts=flowCounterInBroadcastPkts, dhcpSnoopingAlarmInfoBlackholeMAC=dhcpSnoopingAlarmInfoBlackholeMAC, dcscm6SipbindingSipMaskLen=dcscm6SipbindingSipMaskLen, poeMaxPower=poeMaxPower, qos2MapIntptoEXP7=qos2MapIntptoEXP7, dhcpRelayOption82InterfaceConfigureEntry=dhcpRelayOption82InterfaceConfigureEntry, qos3MapIntpExtendIndex=qos3MapIntpExtendIndex)
mibBuilder.exportSymbols("NAG-MIB", mstpPortInfoTable=mstpPortInfoTable, aclActiveStatus=aclActiveStatus, clusterv2BaseVersion=clusterv2BaseVersion, qos3MapAtoB5=qos3MapAtoB5, qos2MapCostoIntp7=qos2MapCostoIntp7, qos3EtsTable=qos3EtsTable, ipExternAclEntry=ipExternAclEntry, dhcpPool=dhcpPool, macNotificationHistoryTable=macNotificationHistoryTable, dhcpPoolDefaultRouterEntry=dhcpPoolDefaultRouterEntry, qos3AggPolicyExceedAction=qos3AggPolicyExceedAction, dhcpLeaseTimePoolName=dhcpLeaseTimePoolName, arpProxyArpEntry=arpProxyArpEntry, qos2PolicyExceedActionChangeValue=qos2PolicyExceedActionChangeValue, psSecurityPortMax=psSecurityPortMax, qos3MapIntpExtendEntry=qos3MapIntpExtendEntry, dhcpSnoopingAckBindingLease=dhcpSnoopingAckBindingLease, showclassmapmatch=showclassmapmatch, mirrorRspanVlanEntry=mirrorRspanVlanEntry, poeSystemEnable=poeSystemEnable, qos3PolicyExceedAction=qos3PolicyExceedAction, ipStandardStatus=ipStandardStatus, switchNum=switchNum, qos2MapIntptoDSCP2=qos2MapIntptoDSCP2, dhcpRelayOptionSelfDefinedRemoteIDFormat=dhcpRelayOptionSelfDefinedRemoteIDFormat, portLEDTimeRangeName=portLEDTimeRangeName, erpsControlVlan=erpsControlVlan, qos2MapDSCPtoDSCPoutDSCP=qos2MapDSCPtoDSCPoutDSCP, dhcpSnoopingSubScriberID=dhcpSnoopingSubScriberID, dcscm6pcEntry=dcscm6pcEntry, ddmTranscDiagnosisTable=ddmTranscDiagnosisTable, mstpInstancePortEntry=mstpInstancePortEntry, amPortEnable=amPortEnable, priIgmpSnoopingLimitPortStatus=priIgmpSnoopingLimitPortStatus, qos3PolicyExceedSetCos=qos3PolicyExceedSetCos, qosPortQueue=qosPortQueue, priIgmpSnoopingSuppression=priIgmpSnoopingSuppression, portGroupMemberStatus=portGroupMemberStatus, qos2AggPolicyStatus=qos2AggPolicyStatus, dcscmscPortbindingPortName=dcscmscPortbindingPortName, qos3MapAtoB8=qos3MapAtoB8, ripNetworkInterfaceAddress=ripNetworkInterfaceAddress, portGroupUpdate=portGroupUpdate, qos3ClassMapUsedTime=qos3ClassMapUsedTime, dhcpSnoopingAlarmInfoNum=dhcpSnoopingAlarmInfoNum, sysHardwareVersion=sysHardwareVersion, mvlanVId=mvlanVId, qos2PortTable=qos2PortTable, vsfInfo=vsfInfo, dvmrpNeighborMajorVersion=dvmrpNeighborMajorVersion, erpsPort0RRapsNodeId=erpsPort0RRapsNodeId, qos3PolicyExceedSetDscp=qos3PolicyExceedSetDscp, clusterv2CandidateMacAddress=clusterv2CandidateMacAddress, stormControlSuppressType=stormControlSuppressType, macExternPacketType=macExternPacketType, mirrorSrcCpuDirect=mirrorSrcCpuDirect, priIgmpSnoopingMib=priIgmpSnoopingMib, dhcpRelayNoSharevlan=dhcpRelayNoSharevlan, interfaceEntry=interfaceEntry, qos3EtsStatus=qos3EtsStatus, sshConnStatus=sshConnStatus, priSystem=priSystem, mvlanAssoVlanStatus=mvlanAssoVlanStatus, arpProxyArpStatus=arpProxyArpStatus, dot1xOnlineUserPort=dot1xOnlineUserPort, dcscm6dcAcl=dcscm6dcAcl, aclStatisticClearTable=aclStatisticClearTable, dvmrpNeighborRcvBadRoutes=dvmrpNeighborRcvBadRoutes, qos3PolicyViolateAction=qos3PolicyViolateAction, qos3ServicePolicyTable=qos3ServicePolicyTable, erpsPort1RxRapsEventPktCnt=erpsPort1RxRapsEventPktCnt, qos3NodeScheduleTable=qos3NodeScheduleTable, timeRangeMapIndex=timeRangeMapIndex, dhcpRelayOption82SubscriberID=dhcpRelayOption82SubscriberID, portSecurityMaxMacNum=portSecurityMaxMacNum, vlanRowStatus=vlanRowStatus, mstpInstancePortIntRootPathCost=mstpInstancePortIntRootPathCost, portLEDTimeRangeMapTable=portLEDTimeRangeMapTable, portTruckAllowedVlanAll=portTruckAllowedVlanAll, arpStaticStatus=arpStaticStatus, ospfAdvertiseDefaultRoute=ospfAdvertiseDefaultRoute, dhcpSnoopingInformationOptionSubscriberIDFormat=dhcpSnoopingInformationOptionSubscriberIDFormat, showmlsqosmapsdscpmutationcontent=showmlsqosmapsdscpmutationcontent, priIgmpSnoopingQueryMrsp=priIgmpSnoopingQueryMrsp, radiusAutServerHostAccessMode=radiusAutServerHostAccessMode, showQos3QueueStatisticsEntry=showQos3QueueStatisticsEntry, mirrorReflectorPortEntry=mirrorReflectorPortEntry, stormControlPortTable=stormControlPortTable, dhcpPoolDefaultRouterIpAddress3=dhcpPoolDefaultRouterIpAddress3, erpsInstanceConfigEntry=erpsInstanceConfigEntry, flowCounterOutMulticastPkts=flowCounterOutMulticastPkts, radiusAuthenServerHostIP=radiusAuthenServerHostIP, qosPortMutation=qosPortMutation, dcscmdcAclPermitOrDeny=dcscmdcAclPermitOrDeny, radiusAcctServerHostPrimary=radiusAcctServerHostPrimary, qosMapMutationName=qosMapMutationName, lldpGlobalEnable=lldpGlobalEnable, ipExternDstOp=ipExternDstOp, qosSetStatus=qosSetStatus, erpsPort1TxRapsFsPktCnt=erpsPort1TxRapsFsPktCnt, erpsDescription=erpsDescription, qos2MapCostoIntp=qos2MapCostoIntp, fdbMacCurTotalNum=fdbMacCurTotalNum, ipStandardIndex=ipStandardIndex, dot1xOnlineUserEntry=dot1xOnlineUserEntry, portLEDTimeRangeTable=portLEDTimeRangeTable, qos3McQueueBindWidthStatus=qos3McQueueBindWidthStatus, dhcpServerExcludedIpAddrHiIp=dhcpServerExcludedIpAddrHiIp, dhcpSnoopingRequestBindingVid=dhcpSnoopingRequestBindingVid, erpsForcedSwitch=erpsForcedSwitch, showQos3MCQueueStatisticsEntry=showQos3MCQueueStatisticsEntry, dhcpSnoopingStatisticAckBindingNum=dhcpSnoopingStatisticAckBindingNum, noShutdownPort=noShutdownPort, dcscm6pcSourceIp=dcscm6pcSourceIp, clusterv2BaseVlan=clusterv2BaseVlan, mstpInstancePortDesignatedBridgeID=mstpInstancePortDesignatedBridgeID, dcscm6VMacbindingMacAddr=dcscm6VMacbindingMacAddr, tacacsServerHostIndex=tacacsServerHostIndex, qos3QueueWeight5=qos3QueueWeight5, macIpExternTos=macIpExternTos, portLEDTimeRangeStartWeek=portLEDTimeRangeStartWeek, priIgmpSnoopingPortCtrlPktEntry=priIgmpSnoopingPortCtrlPktEntry, priIgmpSnoopingLimitPortTable=priIgmpSnoopingLimitPortTable, portGroupMemberPriority=portGroupMemberPriority, qos3PortIndex=qos3PortIndex, erpsPort1StatisticsTable=erpsPort1StatisticsTable, psSecurityStaticMacDel=psSecurityStaticMacDel, qosMapMutationOut=qosMapMutationOut, radiusServerAccountTimeOut=radiusServerAccountTimeOut, portSecuritySticky=portSecuritySticky, dvmrpInterfaceIndex=dvmrpInterfaceIndex, dhcpSnoopingStatisticDiscardPktsNum=dhcpSnoopingStatisticDiscardPktsNum, qos3SetIpNextHop=qos3SetIpNextHop, qosAggPolicerConformActionChangeValue=qosAggPolicerConformActionChangeValue, qos3ServicePolicyEntry=qos3ServicePolicyEntry, dhcpPoolExpandstatus=dhcpPoolExpandstatus, dvmrpNeighborAddress=dvmrpNeighborAddress, dot1xOnlineUserTable=dot1xOnlineUserTable, portLEDTimeRangeMapIndex=portLEDTimeRangeMapIndex, radiusAcctServerHostIndex=radiusAcctServerHostIndex, qos2MapDSCPtoDP8=qos2MapDSCPtoDP8, mstpInstancePortCost=mstpInstancePortCost, qos3MapAtoB1=qos3MapAtoB1, flowCounterTable=flowCounterTable, erpsPortTrackCfmPvlanId=erpsPortTrackCfmPvlanId, dhcpPoolWinsIpAddress6=dhcpPoolWinsIpAddress6, qos3ScheduleQueueAlgorithmConfig=qos3ScheduleQueueAlgorithmConfig, mabOnlineUserName=mabOnlineUserName, qos2MapDSCPtoDP2=qos2MapDSCPtoDP2, urpfEnable=urpfEnable, qos2Setv6nextHop=qos2Setv6nextHop, dhcpServer=dhcpServer, switchCpuUsage=switchCpuUsage, mirrorSrcCpuSlot=mirrorSrcCpuSlot, portRateLimitConfigMulticastNum=portRateLimitConfigMulticastNum, macIpExternStatus=macIpExternStatus, qosSetnextHop=qosSetnextHop, mstpMgt=mstpMgt, dhcpPoolWinsIpAddress2=dhcpPoolWinsIpAddress2, ospfDefaultExternalMetric=ospfDefaultExternalMetric, erpsPortTrackConfigTable=erpsPortTrackConfigTable, recoverArpSpeedOID=recoverArpSpeedOID, mstpSystemGroup=mstpSystemGroup, qos2MapIntptoEXP3=qos2MapIntptoEXP3, macIpExternDstOp=macIpExternDstOp, sshConnID=sshConnID, qos3PolicyInsertClassMapName=qos3PolicyInsertClassMapName, portSecurityVioMode=portSecurityVioMode, qos3PortTrust=qos3PortTrust, efmOamRemoteErrFramePeriodEvent=efmOamRemoteErrFramePeriodEvent, erpsPort1BPR=erpsPort1BPR, ipExternDstPort1=ipExternDstPort1, ospfRfc1583CompatibleState=ospfRfc1583CompatibleState, erpsRingPort1=erpsRingPort1, loopbackDetecShowEntry=loopbackDetecShowEntry, qos3EgressRemark=qos3EgressRemark, powerAbnormalOID=powerAbnormalOID, qos3PolicyMapIndex=qos3PolicyMapIndex, priIgmpSnoopingLimitPortSourceNum=priIgmpSnoopingLimitPortSourceNum, qos2MapDSCPtoDSCP6=qos2MapDSCPtoDSCP6, qos2MapExptoDP6=qos2MapExptoDP6, portHybridUntaggedAllowedVlan=portHybridUntaggedAllowedVlan, ipExternDstIpWild=ipExternDstIpWild, radiusServerRetransmit=radiusServerRetransmit, translatPortIndex=translatPortIndex, qosMapDscp7=qosMapDscp7, qosAggPolicerStatus=qosAggPolicerStatus, macNotificationMacAddressesLearnt=macNotificationMacAddressesLearnt, rateViolation=rateViolation, mvlanMode=mvlanMode, portMacCountLimitShutRecoveryTime=portMacCountLimitShutRecoveryTime, clusterv2StatusClusterName=clusterv2StatusClusterName, dhcpServerLeaseBindingIp=dhcpServerLeaseBindingIp, securityIpStatus=securityIpStatus, qos2PolicyType=qos2PolicyType, qos3ScheduleBindWidthMin=qos3ScheduleBindWidthMin, tacacsServerTimeout=tacacsServerTimeout, qos3AggPolicyViolateSetCos=qos3AggPolicyViolateSetCos, portSecurityMacStatus=portSecurityMacStatus, qos3AggPolicyconformSetCos=qos3AggPolicyconformSetCos, securityMacPortTable=securityMacPortTable, qos2ClassMapDscp=qos2ClassMapDscp, dvmrpNeighborIfIndex=dvmrpNeighborIfIndex, erpsPort1TxRapsEventPktCnt=erpsPort1TxRapsEventPktCnt, dnsDynHostIpAddr=dnsDynHostIpAddr, fileCMCCIPaddress=fileCMCCIPaddress, sshUserIndex=sshUserIndex, loopbackDetecCtrlTable=loopbackDetecCtrlTable, amPortIndex=amPortIndex, ripNetworkInterfaceEntry=ripNetworkInterfaceEntry, qos2PolicyInsertClassMap=qos2PolicyInsertClassMap, qos2AggPolicyName=qos2AggPolicyName, qos2MapIntptoDSCP6=qos2MapIntptoDSCP6, qos2PolicyStatus=qos2PolicyStatus, macType=macType, deletePassword=deletePassword, macIpExternDstPort1=macIpExternDstPort1, mirrorDestMacAddr=mirrorDestMacAddr, clusterv2Create=clusterv2Create, powerSupplyTrap=powerSupplyTrap, erpsHoldoffTimer=erpsHoldoffTimer, ddmTransSerialWaveLength=ddmTransSerialWaveLength, routeMgt=routeMgt, qosMapEXP=qosMapEXP, poeDisconnect=poeDisconnect, dcscm6scAclDestinationIp=dcscm6scAclDestinationIp, poePoliceEnable=poePoliceEnable, qos2AggPolicyCIRKbps=qos2AggPolicyCIRKbps, dhcpLeaseTimeStatus=dhcpLeaseTimeStatus, dvmrpRouteNextHopSource=dvmrpRouteNextHopSource, qos3MapDscpType=qos3MapDscpType, qosMapStatus=qosMapStatus, ripNetworkAddrAddress=ripNetworkAddrAddress, ntpEntTimePrecision=ntpEntTimePrecision, priPppoeIaPortRemoteID=priPppoeIaPortRemoteID, amPortInfoEntry=amPortInfoEntry, qos3ScheduleQueueWeightStatus=qos3ScheduleQueueWeightStatus, dnsDynHostEntry=dnsDynHostEntry, flowCounterOutOctets=flowCounterOutOctets, showqosaggregatepolicercontent=showqosaggregatepolicercontent, ospfRedistributeStatus=ospfRedistributeStatus, dhcpRelaySharevlanSubvlanList=dhcpRelaySharevlanSubvlanList, dhcpSnoopingAckBindingInfoEntry=dhcpSnoopingAckBindingInfoEntry, qos3McQueueBindWidthPortIndex=qos3McQueueBindWidthPortIndex, portSecurityAgingType=portSecurityAgingType, dcscm6scPortbindingTable=dcscm6scPortbindingTable, mirrorDestGreSession=mirrorDestGreSession, lastFiveMinInPktsPerSec=lastFiveMinInPktsPerSec, ospfRouterIdType=ospfRouterIdType, aclActiveBindType=aclActiveBindType, qos2ClassMapV6Dscp=qos2ClassMapV6Dscp, qos3QueueWeight2=qos3QueueWeight2, aclActiveEntry=aclActiveEntry, portHybridUntaggedAllowedVlanExcept=portHybridUntaggedAllowedVlanExcept)
mibBuilder.exportSymbols("NAG-MIB", dcscm6scAclNumber=dcscm6scAclNumber, qos2PolicyPIRKbps=qos2PolicyPIRKbps, qos3PolicyCIRKbps=qos3PolicyCIRKbps, securityIpTable=securityIpTable, qos2MapExptoIntp3=qos2MapExptoIntp3, urpf=urpf, sysBootStartupCfg=sysBootStartupCfg, macNotificationHistMacChangedMsg=macNotificationHistMacChangedMsg, dhcpSnoopingStaticBindingMAC=dhcpSnoopingStaticBindingMAC, dcscm6dcAclPermitOrDeny=dcscm6dcAclPermitOrDeny, qos2MapCostoDP7=qos2MapCostoDP7, erpsRplPort1Role=erpsRplPort1Role, mrppRingNodeState=mrppRingNodeState, nameAclGroupSubitemNum=nameAclGroupSubitemNum, vsfCount=vsfCount, sysFanIndex=sysFanIndex, qos2PolicyMapName=qos2PolicyMapName, qosPortQueueWeight2=qosPortQueueWeight2, ipv6ExternTimeRangeName=ipv6ExternTimeRangeName, dhcpServerExcludedIpAddrTable=dhcpServerExcludedIpAddrTable, wanIfInUtil=wanIfInUtil, stormControlSuppressRateValue=stormControlSuppressRateValue, portRateLimitEntry=portRateLimitEntry, erpsPort0BPR=erpsPort0BPR, priPowerEntry=priPowerEntry, mirrorSrcPortStatus=mirrorSrcPortStatus, iPAddrTable=iPAddrTable, showqosaggregatepolicerEntry=showqosaggregatepolicerEntry, ripStatisticsReset=ripStatisticsReset, qos3PolicyClassMapName=qos3PolicyClassMapName, aclActiveType=aclActiveType, vlanName=vlanName, macIpExternDstIpWild=macIpExternDstIpWild, erpsPortTrackConfigEntry=erpsPortTrackConfigEntry, showclassmapEntry=showclassmapEntry, erpsRingPort1ExistFlag=erpsRingPort1ExistFlag, fdbMacInfo=fdbMacInfo, portGroupMemberCount=portGroupMemberCount, dhcpSnoopingBlockedInfoShow=dhcpSnoopingBlockedInfoShow, qos3PolicyMapGroupIndex=qos3PolicyMapGroupIndex, sysBootInfoIndex=sysBootInfoIndex, ipv6ExternDstPort2=ipv6ExternDstPort2, qosPolicyRateKbps=qosPolicyRateKbps, sshServerStatus=sshServerStatus, flowCouterEntry=flowCouterEntry, mirrorDestGreStatus=mirrorDestGreStatus, qos2AggregatePolicy=qos2AggregatePolicy, radiusServerNasIpv6=radiusServerNasIpv6, macNotificationGlobalObjects=macNotificationGlobalObjects, loadBalance=loadBalance, l3=l3, dhcpSnoopingOptionSelfDefinedSubscriberIDFormat=dhcpSnoopingOptionSelfDefinedSubscriberIDFormat, dhcpServerLeaseBindingType=dhcpServerLeaseBindingType, qos3ScheduleQueueAlgorithmEntry=qos3ScheduleQueueAlgorithmEntry, dcscmdcAclSourceMask=dcscmdcAclSourceMask, swERPSSFClearedTrap=swERPSSFClearedTrap, macStandardIndex=macStandardIndex, radiusAuthenServerHostEntry=radiusAuthenServerHostEntry, showQos3QueueStatisticsTable=showQos3QueueStatisticsTable, poeCurrentPower=poeCurrentPower, vlanID=vlanID, qosMapDscp4=qosMapDscp4, dhcpServerLeaseBindingMac=dhcpServerLeaseBindingMac, qos2PolicyConformActionChange=qos2PolicyConformActionChange, dcscm6SipbindingSipAddress=dcscm6SipbindingSipAddress, poePortCurrentPower=poePortCurrentPower, qosSetCos=qosSetCos, portSecurityState=portSecurityState, translatPortTypeIndex=translatPortTypeIndex, dhcpLeaseTimeHours=dhcpLeaseTimeHours, amPortForwardingType=amPortForwardingType, dcscmscAclSourceMask=dcscmscAclSourceMask, dcscm6dcAclSourceIp=dcscm6dcAclSourceIp, flowPortIndex=flowPortIndex, ipv6StandardStatus=ipv6StandardStatus, portLEDTimeRangeIndex=portLEDTimeRangeIndex, ipExternSrcIp=ipExternSrcIp, efmOamRemoteDyingGasp=efmOamRemoteDyingGasp, sntpServer6Address=sntpServer6Address, dhcpPoolWinsIpAddress4=dhcpPoolWinsIpAddress4, dhcpPoolExpandTable=dhcpPoolExpandTable, mirrorSrcPortSession=mirrorSrcPortSession, dcscm6VMacbindingEntry=dcscm6VMacbindingEntry, macExternStatus=macExternStatus, dhcpPoolNetbiosNodeType=dhcpPoolNetbiosNodeType, ddmDiagTXPowerLowWarnThreshold=ddmDiagTXPowerLowWarnThreshold, dvmrpNeighborEntry=dvmrpNeighborEntry, showmlsqosmapsipprecdscp=showmlsqosmapsipprecdscp, qos3ScheduleQueueWeightPolicyIndex=qos3ScheduleQueueWeightPolicyIndex, ripUpdateTime=ripUpdateTime, priPowerPresent=priPowerPresent, qosAggPolicerMaximumBurstKbps=qosAggPolicerMaximumBurstKbps, ddmDiagBiasLowAlarmThreshold=ddmDiagBiasLowAlarmThreshold, tacacsServerHostKey=tacacsServerHostKey, InetAddress=InetAddress, ipv6ExternDstPreLen=ipv6ExternDstPreLen, ospfAutoCost=ospfAutoCost, radiusAutServerHostKey=radiusAutServerHostKey, dhcpPoolNextServerIpAddress2=dhcpPoolNextServerIpAddress2, qosPortEntry=qosPortEntry, qos2ClassMapCos=qos2ClassMapCos, sumFlowVlanID=sumFlowVlanID, radiusAcctServerHostStatus=radiusAcctServerHostStatus, qos3PortCos=qos3PortCos, qosMapMarkDownType=qosMapMarkDownType, erpsRingConfigEntry=erpsRingConfigEntry, qos3ServicePolicyDirection=qos3ServicePolicyDirection, clearSumFlowCounter=clearSumFlowCounter, fanPullOutOID=fanPullOutOID, dot1xMgt=dot1xMgt, loopback=loopback, ripGarbageCollectionTime=ripGarbageCollectionTime, qos3ScheduleQueueInputType=qos3ScheduleQueueInputType, arpCacheTimeout=arpCacheTimeout, sntpMgt=sntpMgt, sysMemoryUsage=sysMemoryUsage, loopbackDetecCtrlRecovery=loopbackDetecCtrlRecovery, urpfPortAllowDefault=urpfPortAllowDefault, urpfPortTable=urpfPortTable, qos3SetDp=qos3SetDp, ospfSystemGroup=ospfSystemGroup, dcscmpcEntry=dcscmpcEntry, dvmrpNeighborCapabilities=dvmrpNeighborCapabilities, qos2PolicyViolateActionChangeValue=qos2PolicyViolateActionChangeValue, priQos2=priQos2, erpsPort1TxRapsNrPktCnt=erpsPort1TxRapsNrPktCnt, ripTimeoutTime=ripTimeoutTime, dvmrpNeighborState=dvmrpNeighborState, portLEDTimeRangeType=portLEDTimeRangeType, fdbMacMaxStaticNum=fdbMacMaxStaticNum, showQos3MCQueueStatisticsPortIndex=showQos3MCQueueStatisticsPortIndex, qos2MapIntptoDSCP8=qos2MapIntptoDSCP8, qos2PortStatus=qos2PortStatus, mstpTcnTrapOID=mstpTcnTrapOID, dhcpPoolNextServerIpAddress7=dhcpPoolNextServerIpAddress7, macNotificationNotificationsSent=macNotificationNotificationsSent, dhcpSnoopingStatisticTable=dhcpSnoopingStatisticTable, dcscmSipbindingTable=dcscmSipbindingTable, qos3SchedulePolicyBindPolicyName=qos3SchedulePolicyBindPolicyName, prohibitPortOID=prohibitPortOID, qos3SetIpv6DefaultPBR=qos3SetIpv6DefaultPBR, dvmrpPruneGroup=dvmrpPruneGroup, dvmrpRouteSourceMask=dvmrpRouteSourceMask, sysSlotIndex=sysSlotIndex, ospfSummaryAddressTable=ospfSummaryAddressTable, erpsPort0StatisticsEntry=erpsPort0StatisticsEntry, qos3PortPassThroughCos=qos3PortPassThroughCos, qos2SetType=qos2SetType, qos3ScheduleBindWidthPolicyIndex=qos3ScheduleBindWidthPolicyIndex, stormControlSuppressRateUnit=stormControlSuppressRateUnit, clusterv2CreateIPPool=clusterv2CreateIPPool, sysSetBootPassword=sysSetBootPassword, aclConfig=aclConfig, mirrorReflectorPort=mirrorReflectorPort, arpStaticEntry=arpStaticEntry, qos3QueueWeight1=qos3QueueWeight1, qos3SchedulePolicyMapIndex=qos3SchedulePolicyMapIndex, dhcpRelayInformationOptionDelimiter=dhcpRelayInformationOptionDelimiter, fileCopy=fileCopy, showpolicymapcontent=showpolicymapcontent, qos3ScheduleQueueWeightEntry=qos3ScheduleQueueWeightEntry, qos2MapCostoIntp1=qos2MapCostoIntp1, qos3PortTable=qos3PortTable, shutdown=shutdown, portLEDTimeRangeEndDate=portLEDTimeRangeEndDate, vlanInfoEntry=vlanInfoEntry, sysBootImgPrimary=sysBootImgPrimary, dcscmdcAclDestinationIp=dcscmdcAclDestinationIp, qosSetv6FlowLabel=qosSetv6FlowLabel, vlanFlowCounterTable=vlanFlowCounterTable, qos2MapDSCPtoDP3=qos2MapDSCPtoDP3, dhcpPoolAddress=dhcpPoolAddress, notifications=notifications, dhcpPoolWinsEntry=dhcpPoolWinsEntry, radiusServerDeadTime=radiusServerDeadTime, macIpExternAclTable=macIpExternAclTable, arpStaticIfindex=arpStaticIfindex, dcscmpcSourceMasklen=dcscmpcSourceMasklen, mvlanStatus=mvlanStatus, dhcpSnooping=dhcpSnooping, portSecurityMacType=portSecurityMacType, qos2MapDSCPtoDP7=qos2MapDSCPtoDP7, dhcpPoolDnsSerIpAddress8=dhcpPoolDnsSerIpAddress8, macNotificationMacAddrRemovedEnable=macNotificationMacAddrRemovedEnable, qosPortPriority=qosPortPriority, macStandardStatus=macStandardStatus, portMacCountLimitPortIndex=portMacCountLimitPortIndex, qosPolicyConformActionChangeValue=qosPolicyConformActionChangeValue, InterfaceIndex=InterfaceIndex, newPassword=newPassword, os=os, erpsRingPortIndex=erpsRingPortIndex, ipv6ExternIndex=ipv6ExternIndex, qos3PortEntry=qos3PortEntry, amPortMac=amPortMac, qos3ServicePolicyName=qos3ServicePolicyName, qos2=qos2, powerGroup=powerGroup, macExternSrcMac=macExternSrcMac, sysFanTable=sysFanTable, dhcpPoolAddressStatus=dhcpPoolAddressStatus, radiusAuthenServerHostTable=radiusAuthenServerHostTable, mirrorSrcPortDirect=mirrorSrcPortDirect, priIgmpSnoopingvlanEnable=priIgmpSnoopingvlanEnable, sysCpuUsage=sysCpuUsage, portLEDTimeRangeEndWeek=portLEDTimeRangeEndWeek, portLEDTimeRangeStatus=portLEDTimeRangeStatus, qos2SetPrecedence=qos2SetPrecedence, qos2ClassMapTable=qos2ClassMapTable, macStandardSrcMac=macStandardSrcMac, sshConnInfoTable=sshConnInfoTable, dvmrpRouteTable=dvmrpRouteTable, sumFlowCounterOutOctets=sumFlowCounterOutOctets, dcscm6VMacbindingAclNumber=dcscm6VMacbindingAclNumber, ospfRedistributeTable=ospfRedistributeTable, qosAggPolicerExceedAction=qosAggPolicerExceedAction, qos3AggPolicyconformSetDscp=qos3AggPolicyconformSetDscp, qos3PolicyStatus=qos3PolicyStatus, clusterv2MemberNumber=clusterv2MemberNumber, qos2SetDropPrecedence=qos2SetDropPrecedence, ddmTransSerialNo=ddmTransSerialNo, macNotificationIfConfigEntry=macNotificationIfConfigEntry, dhcpPoolDefaultRouterStatus=dhcpPoolDefaultRouterStatus, portTruckAllowedVlanAdd=portTruckAllowedVlanAdd, dvmrpRouteNextHopEntry=dvmrpRouteNextHopEntry, ospfNssaAreaId=ospfNssaAreaId, dhcpSnoopingPortActionEntry=dhcpSnoopingPortActionEntry, timeRangeStartTime=timeRangeStartTime, mstpInstancePortRootGuard=mstpInstancePortRootGuard, qos3AggPolicyPIRKbps=qos3AggPolicyPIRKbps, mstpInstanceEntry=mstpInstanceEntry, qinqPortIndex=qinqPortIndex, qos2ClassMapType=qos2ClassMapType, securityIpIndex=securityIpIndex, sshUserName=sshUserName, qos3ServicePolicyIndex=qos3ServicePolicyIndex, ipv6ExternStatus=ipv6ExternStatus, flowCounterOutBroadcastPkts=flowCounterOutBroadcastPkts, radiusServerNasIpv4=radiusServerNasIpv4, erpsPort1RxRapsNrRbPktCnt=erpsPort1RxRapsNrRbPktCnt, qos2MapExptoIntp1=qos2MapExptoIntp1, qos3ScheduleBindWidthMax=qos3ScheduleBindWidthMax, mstpInstancePortRole=mstpInstancePortRole, radiusAcctServerHostPort=radiusAcctServerHostPort, nameAclGroupAclIndex=nameAclGroupAclIndex, portGroupPortListTable=portGroupPortListTable, qos2MapDSCPtoIntpStatus=qos2MapDSCPtoIntpStatus, dhcpLeaseTimeTable=dhcpLeaseTimeTable, switchBootImgSecondary=switchBootImgSecondary, macExternDstMac=macExternDstMac, qos2PortTrust=qos2PortTrust, qos3AggPolicyConformAction=qos3AggPolicyConformAction, loopbackDetecCtrlEntry=loopbackDetecCtrlEntry, qos2PolicyAggregatePolicer=qos2PolicyAggregatePolicer)
mibBuilder.exportSymbols("NAG-MIB", ddmTransSerialVendorName=ddmTransSerialVendorName, stormControlPortIndex=stormControlPortIndex, mstpInstancePortExtRootPathCost=mstpInstancePortExtRootPathCost, showmlsqosmapspoliceddscpnormalburst=showmlsqosmapspoliceddscpnormalburst, prohibitIPExceedHlimitOID=prohibitIPExceedHlimitOID, sysSetBootPwStatus=sysSetBootPwStatus, mrppRingIndex=mrppRingIndex, erpsPort0TxRapsNrPktCnt=erpsPort0TxRapsNrPktCnt, switchBootStartUpCfg=switchBootStartUpCfg, antiArpscan=antiArpscan, sysPowerType=sysPowerType, macExternCosWild=macExternCosWild, portGroupMemberName=portGroupMemberName, showQos3QueueStatisticsPassedPacket=showQos3QueueStatisticsPassedPacket, dhcpSnoopingStaticBindingStatus=dhcpSnoopingStaticBindingStatus, vsfModuleType=vsfModuleType, portRateLimitCurBroadcastNum=portRateLimitCurBroadcastNum, qos3SetIntp=qos3SetIntp, numAclGroupMatchOrder=numAclGroupMatchOrder, sysFanInserted=sysFanInserted, qos2SetPolicyMapName=qos2SetPolicyMapName, sysMonitorAlarmEnable=sysMonitorAlarmEnable, dhcpPoolNextServerIpAddress4=dhcpPoolNextServerIpAddress4, qosPolicyExceedAction=qosPolicyExceedAction, radiusAuthenServerHostIndex=radiusAuthenServerHostIndex, qos3QueueWredStatus=qos3QueueWredStatus, mstpInstanceVlans=mstpInstanceVlans, mstpPortInfoEntry=mstpPortInfoEntry, showQos3VlanEntry=showQos3VlanEntry, ipExternSrcPort1=ipExternSrcPort1, qos3MapAtoB2=qos3MapAtoB2, eeePortStatus=eeePortStatus, mstpForwardTime=mstpForwardTime, qos3MapAtoB7=qos3MapAtoB7, urpfPortIndex=urpfPortIndex, iPAddrEntry=iPAddrEntry, poeLegacyEnable=poeLegacyEnable, priIgmpSnoopingPortTime=priIgmpSnoopingPortTime, dhcpPoolNextServerPoolName=dhcpPoolNextServerPoolName, qos3PolicyPidAction=qos3PolicyPidAction, vctLastStatus=vctLastStatus, sshTimeout=sshTimeout, vlanInBroadcastPkts=vlanInBroadcastPkts, qosAggPolicerNormalBurstKbps=qosAggPolicerNormalBurstKbps, arpSecurityUpdateProtect=arpSecurityUpdateProtect, ripNetworkAddrStatus=ripNetworkAddrStatus, ntpEntInfo=ntpEntInfo, qos3PolicyMapGroupTable=qos3PolicyMapGroupTable, ipExternIndex=ipExternIndex, wanIfOutUtil=wanIfOutUtil, ripNetworkInterfaceStatus=ripNetworkInterfaceStatus, fan=fan, vsfModuleTable=vsfModuleTable, portRateLimitConfigAllNum=portRateLimitConfigAllNum, ntpSnmpMIBObjects=ntpSnmpMIBObjects, sshUserType=sshUserType, erpsRingId=erpsRingId, dvmrpRouteIfIndex=dvmrpRouteIfIndex, priIgmpSnoopingSourceNum=priIgmpSnoopingSourceNum, ospfSummaryAddressEntry=ospfSummaryAddressEntry, dcscmpcSourceIp=dcscmpcSourceIp, qos2MapDSCPtoDSCP2=qos2MapDSCPtoDSCP2, fanInsertOID=fanInsertOID, ipExternStatus=ipExternStatus, switchInfoTable=switchInfoTable, dcscmVMacbindingEntry=dcscmVMacbindingEntry, clusterv2CandidateDeviceType=clusterv2CandidateDeviceType, dhcpSnoopingInformationOptionRemoteID=dhcpSnoopingInformationOptionRemoteID, qosEnable=qosEnable, portMacCountLimitEntry=portMacCountLimitEntry, switchTemperature=switchTemperature, dhcpRelayServerAddrServerIp=dhcpRelayServerAddrServerIp, dnsDynHostName=dnsDynHostName, dot1xOnlineUserPortVlanid=dot1xOnlineUserPortVlanid, aclStatisticClearStatus=aclStatisticClearStatus, portRateLimitConfigUnicastNum=portRateLimitConfigUnicastNum, qosSetv6Dscp=qosSetv6Dscp, qos2MapExptoIntp5=qos2MapExptoIntp5, portLEDTimeRangeEntry=portLEDTimeRangeEntry, portRateLimit=portRateLimit, qos2MapExptoDP5=qos2MapExptoDP5, mirrorReflectorPortSession=mirrorReflectorPortSession, aclActiveIndex=aclActiveIndex, tunnelPortEnable=tunnelPortEnable, arpsecurityEntry=arpsecurityEntry, ipv6ExternSubIndex=ipv6ExternSubIndex, dhcpRelayOptionSelfDefinedSubscriberID=dhcpRelayOptionSelfDefinedSubscriberID, newPortSecurityTable=newPortSecurityTable, translationTypeStatus=translationTypeStatus, qos3AggPolicyExceedSetCos=qos3AggPolicyExceedSetCos, nameAclGroupAclType=nameAclGroupAclType, dhcpRelayOptionSelfDefinedRemoteID=dhcpRelayOptionSelfDefinedRemoteID, erpsPort1TxRapsNrRbPktCnt=erpsPort1TxRapsNrRbPktCnt, mirrorSrcCpuSession=mirrorSrcCpuSession, dvmrpPruneExpiryTime=dvmrpPruneExpiryTime, erpsPort1StatusEntry=erpsPort1StatusEntry, sysMemUsage=sysMemUsage, qos3ScheduleBindWidthStatus=qos3ScheduleBindWidthStatus, portGroupPortListEntry=portGroupPortListEntry, vlanOutUcastPkts=vlanOutUcastPkts, stormControlIndex=stormControlIndex, qos3ScheduleQueueWeightLevelID=qos3ScheduleQueueWeightLevelID, ipv6ExternSrcPort2=ipv6ExternSrcPort2, portHybridTaggedAllowedVlanAdd=portHybridTaggedAllowedVlanAdd, flowVlanID=flowVlanID, portSecurityVioShutRecoveryTime=portSecurityVioShutRecoveryTime, ipv6ExternSrcPreLen=ipv6ExternSrcPreLen, dhcpSnoopingStatisticAlarmNum=dhcpSnoopingStatisticAlarmNum, sumFlowCounterInOctets=sumFlowCounterInOctets, ipStandardAclTable=ipStandardAclTable, dhcpLeaseTimeEntry=dhcpLeaseTimeEntry, qos2MapDSCPtoDSCP5=qos2MapDSCPtoDSCP5, macIpExternDstPort2=macIpExternDstPort2, dvmrpNumRoutes=dvmrpNumRoutes, qos2MapDSCPtoDSCP1=qos2MapDSCPtoDSCP1, switchCPUType=switchCPUType, showpolicymapname=showpolicymapname, qos2MapIntptoEXP4=qos2MapIntptoEXP4, portLEDConfig=portLEDConfig, showmlsqosmapscosqueue=showmlsqosmapscosqueue, delBlackhole=delBlackhole, timeRangeEndDate=timeRangeEndDate, poePortConfigTable=poePortConfigTable, qos2AggPolicyConformActionChangeValue=qos2AggPolicyConformActionChangeValue, qos2MapDSCPtoDSCP=qos2MapDSCPtoDSCP, portHybridTaggedAllowedVlanEntry=portHybridTaggedAllowedVlanEntry, dhcpRelayInformationOptionRemoteIDFormat=dhcpRelayInformationOptionRemoteIDFormat, qos2ClassMapIpPre=qos2ClassMapIpPre, dhcpPoolNextServerIpAddress1=dhcpPoolNextServerIpAddress1, mirrorDestEntry=mirrorDestEntry, numAclGroupAclIndex=numAclGroupAclIndex, dcscmSipbindingEntry=dcscmSipbindingEntry, qos3PolicyconformSetDscp=qos3PolicyconformSetDscp, dhcpPoolWinsStatus=dhcpPoolWinsStatus, portHybridTaggedAllowedVlan=portHybridTaggedAllowedVlan, portMacCountLimit=portMacCountLimit, qosAggPolicerTable=qosAggPolicerTable, mstpBridgeHelloTime=mstpBridgeHelloTime, receiveBandwidth=receiveBandwidth, qos3PolicyViolateSetDp=qos3PolicyViolateSetDp, ospfSummaryStatus=ospfSummaryStatus, mirrorSrcIP=mirrorSrcIP, SNR=SNR, lldpPrivateInfo=lldpPrivateInfo, portRateLimitPacketsType=portRateLimitPacketsType, sntpServerVersion=sntpServerVersion, qos3QueueWeight7=qos3QueueWeight7, qos2MapDSCPtoIntp4=qos2MapDSCPtoIntp4, dcscmdcPortbindingAclNumber=dcscmdcPortbindingAclNumber, ipv6ExternSrcPort1=ipv6ExternSrcPort1, dhcpPoolWinsTable=dhcpPoolWinsTable, priPppoeIaPortVendorTagStrip=priPppoeIaPortVendorTagStrip, sysCPUFiveMinuteIdle=sysCPUFiveMinuteIdle, showqosaggregatepolicername=showqosaggregatepolicername, qos2MapIntptoEXP2=qos2MapIntptoEXP2, mirrorSrcCpuStatus=mirrorSrcCpuStatus, nameAclGroupMatchOrder=nameAclGroupMatchOrder, qos3=qos3, qosPortCos=qosPortCos, erpsRingRowStatus=erpsRingRowStatus, radiusAuthenServerHostPrimary=radiusAuthenServerHostPrimary, qosPolicyAggregatePolicer=qosPolicyAggregatePolicer, ddmDiagTempLowAlarmThreshold=ddmDiagTempLowAlarmThreshold, mstpPortInfoPortIndex=mstpPortInfoPortIndex, qos3EtsEntry=qos3EtsEntry, dvmrpNeighborTable=dvmrpNeighborTable, ipv6ExternAct=ipv6ExternAct, qos2MapDSCPtoDP6=qos2MapDSCPtoDP6, erpsActiveStatus=erpsActiveStatus, qosSetType=qosSetType, arpStacticTable=arpStacticTable, qos3MapType=qos3MapType, erpsPort0Status=erpsPort0Status, ntpEntStatusStratum=ntpEntStatusStratum, poePortPriority=poePortPriority, dcscmSipbindingSipAddress=dcscmSipbindingSipAddress, macNotificationMacAddrLearntEnable=macNotificationMacAddrLearntEnable, dot1xOnlineUserName=dot1xOnlineUserName, macNotificationIfConfigTable=macNotificationIfConfigTable, qosPortBindEntry=qosPortBindEntry, loopbackDetecSpecVlanTable=loopbackDetecSpecVlanTable, qos3SchedulePolicyStatus=qos3SchedulePolicyStatus, dcscmpcDestinationMasklen=dcscmpcDestinationMasklen, erpsPort1Status=erpsPort1Status, ospfNssaEntry=ospfNssaEntry, clusterv2MemberMacAddress=clusterv2MemberMacAddress, dhcpSnoopingInformationEnalbe=dhcpSnoopingInformationEnalbe, swSlotIndex=swSlotIndex, Ipv6Address=Ipv6Address, erpsPort0RxRapsTotalPktCnt=erpsPort0RxRapsTotalPktCnt, macNotificationGlobalFeatureEnabled=macNotificationGlobalFeatureEnabled, dhcpServerLeaseBindingEntry=dhcpServerLeaseBindingEntry, qos2PolicyCBSKbps=qos2PolicyCBSKbps, fdbMacInfoTable=fdbMacInfoTable, qos3mapDscpStatus=qos3mapDscpStatus, mstpPortMcheck=mstpPortMcheck, sntpTimeZone=sntpTimeZone, timeRangeMapTable=timeRangeMapTable, qos2MapCostoIntpStatus=qos2MapCostoIntpStatus, qos2MapIntptoEXP=qos2MapIntptoEXP, dhcpSnoopingActionMaxNum=dhcpSnoopingActionMaxNum, swCPUMac=swCPUMac, mvlanPortInfoEntry=mvlanPortInfoEntry)
