#
# PySNMP MIB module AVIAT-SWMANAGEMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/aviat-wtm/AVIAT-SWMANAGEMENT-MIB
# Produced by pysmi-1.1.12 at Wed May 29 07:14:24 2024
# On host fv-az1114-382 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, iso, NotificationType, ObjectIdentity, TimeTicks, IpAddress, Unsigned32, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "NotificationType", "ObjectIdentity", "TimeTicks", "IpAddress", "Unsigned32", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "MibIdentifier", "ModuleIdentity")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
aviatModules, = mibBuilder.importSymbols("STXN-GLOBALREGISTER-MIB", "aviatModules")
aviatSwManagementModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2509, 9, 11))
aviatSwManagementModule.setRevisions(('2014-01-21 01:57',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: aviatSwManagementModule.setRevisionsDescriptions(('Initial Version.',))
if mibBuilder.loadTexts: aviatSwManagementModule.setLastUpdated('201401210157Z')
if mibBuilder.loadTexts: aviatSwManagementModule.setOrganization('Aviat Networks')
if mibBuilder.loadTexts: aviatSwManagementModule.setContactInfo('Aviat Networks\n                         Customer Service\n\n                         Postal: 5200 Great America Parkway\n                                 Santa Clara\n                                 California 95054\n                                 United States of America\n\n                         Tel: 408 567 7000\n\n                         E-mail: mibsupport@aviatnet.com')
if mibBuilder.loadTexts: aviatSwManagementModule.setDescription('This MIB defines the interface for software loading, soft\n                 reset and software details retrieval.')
aviatSwManagementConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2509, 9, 11, 1))
aviatSwManagementGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2509, 9, 11, 1, 1))
aviatSwManagementCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2509, 9, 11, 1, 2))
aviatSwManagementMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2))
aviatSwResetObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 1))
aviatSwLoadObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 2))
aviatSwDetailsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 3))
aviatSmSoftReset = MibScalar((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("resetNone", 0), ("resetSoft", 1), ("resetHard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatSmSoftReset.setStatus('current')
if mibBuilder.loadTexts: aviatSmSoftReset.setDescription('This is the control to perform a software reset on the\n                         product.\n\n                         When set to resetSoft(1) a soft reset will be\n                         performed. When set to resetHard(2) a full system\n                         reset will be performed, with all reinitialisation\n                         carried out. Setting to resetNone(0) has no effect.')
aviatSmLoadControl = MibScalar((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("abort", 0), ("load", 1), ("activate", 2), ("loadAndActivate", 3), ("rollback", 4), ("forceLoad", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatSmLoadControl.setStatus('current')
if mibBuilder.loadTexts: aviatSmLoadControl.setDescription('The software loading process may be controlled using\n                         this object.\n\n                         Setting the value load(1) will begin transfer of the\n                         specified file from the external URI to the unit. If\n                         the file is a manifest, this will initiate transfer of\n                         all referenced files. When this procedure has\n                         completed, aviatSmLoadStatus will indicate loadOk(6)\n                         for success, or loadError(10) for failure.\n\n                         An unresolvable incompatibility error is indicated by\n                         compatibilityError(13) and should be followed by an\n                         abort(0).\n\n                         A successful software (loadOk) load may be activated\n                         by setting the value to activate(2). If the\n                         delayed/timed activation objects are disabled this\n                         will have an immediate effect, otherwise the\n                         activation will take place as scheduled. A successful\n                         activation will result in an aviatSmLoadStatus value\n                         of activateOk(7). An error will be indicated by the\n                         value activateError(11).\n\n                         If the value is idle(7) and no software load process\n                         has been initiated since the last successful\n                         activation, the inactive software can be re-activated\n                         by setting the value to rollback(4). Success is\n                         indicated in aviatSmLoadStatus by rollbackOk(8) and\n                         failure by rollbackError(12).\n\n                         Setting the value to loadAndActivate(3) will begin\n                         software transfer. A successful transfer will be\n                         followed by software activation which is controlled by\n                         the delayed/timed activation objects. Success will be\n                         indicated in aviatSmLoadStatus by activateOk(7). A\n                         pending scheduled activation is indicated by\n                         waitingToActivate(13).')
aviatSmLoadStatus = MibScalar((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("abort", 0), ("load", 1), ("commit", 2), ("activate", 3), ("rollback", 4), ("idle", 5), ("loadOk", 6), ("activateOk", 7), ("rollbackOk", 8), ("compatibilityError", 9), ("loadError", 10), ("activateError", 11), ("rollbackError", 12), ("waitingToActivate", 13), ("sameVersion", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatSmLoadStatus.setStatus('current')
if mibBuilder.loadTexts: aviatSmLoadStatus.setDescription('The software loading process may be monitored using\n                         this object. See the aviatSmLoadControl object\n                         description for more details.')
aviatSmLoadRollbackDuration = MibScalar((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatSmLoadRollbackDuration.setStatus('current')
if mibBuilder.loadTexts: aviatSmLoadRollbackDuration.setDescription("This specifies the duration, in seconds, from which\n                         the 'sw load rollback timer' will count down when it\n                         is started.")
aviatSmLoadRollbackTimer = MibScalar((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatSmLoadRollbackTimer.setStatus('current')
if mibBuilder.loadTexts: aviatSmLoadRollbackTimer.setDescription("This is the control and counter of the 'sw load\n                         rollback timer'. When set to -1, the timer is stopped\n                         and disabled. When set to 0, the timer assumes an\n                         'instant timeout'. Otherwise, this object will\n                         indicate the time left on the timer.\n\n                         The timer is automatically started whenever the\n                         software starts up following a software load\n                         activation.\n\n                         When this timer reaches zero, the 'sw load manager' of\n                         the system will roll back the software to its previous\n                         version.")
aviatSmLoadActivateWaitDuration = MibScalar((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatSmLoadActivateWaitDuration.setStatus('current')
if mibBuilder.loadTexts: aviatSmLoadActivateWaitDuration.setDescription("This specifies the duration, in seconds, from which\n                         the 'sw load activate wait timer' will count down when\n                         it is started.")
aviatSmLoadActivateWaitTimer = MibScalar((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatSmLoadActivateWaitTimer.setStatus('current')
if mibBuilder.loadTexts: aviatSmLoadActivateWaitTimer.setDescription("This is the control and counter of the 'sw load\n                         activate wait timer'. When set to -1, the timer is\n                         stopped and disabled. When set to 0, the timer assumes\n                         an 'instant timeout'. Otherwise, this object will\n                         indicate the time left on the timer.\n\n                         This timer is loaded with the lesser of\n                         aviatSmLoadActivateWaitDuration (if non-zero), or the\n                         time in seconds until aviatSmLoadActivateTime occurs\n                         (if set) when the activate(2) state is entered.\n\n                         When this timer reaches zero, the 'sw load manager' of\n                         the system will activate the loaded software.")
aviatSmLoadActivateTime = MibScalar((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 2, 7), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatSmLoadActivateTime.setStatus('current')
if mibBuilder.loadTexts: aviatSmLoadActivateTime.setDescription("This determines the date and time at which to activate\n                         the loaded software.\n\n                         The 'sw load manager' of the system shall activate the\n                         loaded software when the current system time reaches\n                         or is past this setting.")
aviatSmLoadUri = MibScalar((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatSmLoadUri.setStatus('current')
if mibBuilder.loadTexts: aviatSmLoadUri.setDescription('The URI of the manifest for software loading.')
aviatSmLoadProgress = MibScalar((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatSmLoadProgress.setStatus('current')
if mibBuilder.loadTexts: aviatSmLoadProgress.setDescription('The percentage progress of the current sofware load.\n                         It is only meaningful during load and commit, and will\n                         return zero otherwise.')
aviatSmDetailsVersion = MibScalar((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatSmDetailsVersion.setStatus('current')
if mibBuilder.loadTexts: aviatSmDetailsVersion.setDescription('The software version of currently running software.')
aviatSmDetailsInactiveVersion = MibScalar((1, 3, 6, 1, 4, 1, 2509, 9, 11, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatSmDetailsInactiveVersion.setStatus('current')
if mibBuilder.loadTexts: aviatSmDetailsInactiveVersion.setDescription('The software version of the inactive software.')
aviatSwResetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2509, 9, 11, 1, 1, 1)).setObjects(("AVIAT-SWMANAGEMENT-MIB", "aviatSmSoftReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aviatSwResetGroup = aviatSwResetGroup.setStatus('current')
if mibBuilder.loadTexts: aviatSwResetGroup.setDescription('These are the software reset objects.')
aviatSwLoadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2509, 9, 11, 1, 1, 2)).setObjects(("AVIAT-SWMANAGEMENT-MIB", "aviatSmLoadControl"), ("AVIAT-SWMANAGEMENT-MIB", "aviatSmLoadStatus"), ("AVIAT-SWMANAGEMENT-MIB", "aviatSmLoadRollbackDuration"), ("AVIAT-SWMANAGEMENT-MIB", "aviatSmLoadRollbackTimer"), ("AVIAT-SWMANAGEMENT-MIB", "aviatSmLoadActivateWaitDuration"), ("AVIAT-SWMANAGEMENT-MIB", "aviatSmLoadActivateWaitTimer"), ("AVIAT-SWMANAGEMENT-MIB", "aviatSmLoadActivateTime"), ("AVIAT-SWMANAGEMENT-MIB", "aviatSmLoadUri"), ("AVIAT-SWMANAGEMENT-MIB", "aviatSmLoadProgress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aviatSwLoadGroup = aviatSwLoadGroup.setStatus('current')
if mibBuilder.loadTexts: aviatSwLoadGroup.setDescription('These are the objects for software loading.')
aviatSwDetailsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2509, 9, 11, 1, 1, 3)).setObjects(("AVIAT-SWMANAGEMENT-MIB", "aviatSmDetailsVersion"), ("AVIAT-SWMANAGEMENT-MIB", "aviatSmDetailsInactiveVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aviatSwDetailsGroup = aviatSwDetailsGroup.setStatus('current')
if mibBuilder.loadTexts: aviatSwDetailsGroup.setDescription('These are the software details objects.')
aviatSwManagementComplV1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2509, 9, 11, 1, 2, 1)).setObjects(("AVIAT-SWMANAGEMENT-MIB", "aviatSwResetGroup"), ("AVIAT-SWMANAGEMENT-MIB", "aviatSwLoadGroup"), ("AVIAT-SWMANAGEMENT-MIB", "aviatSwDetailsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aviatSwManagementComplV1 = aviatSwManagementComplV1.setStatus('current')
if mibBuilder.loadTexts: aviatSwManagementComplV1.setDescription('The implementation requirements for this MIB.')
mibBuilder.exportSymbols("AVIAT-SWMANAGEMENT-MIB", aviatSmLoadUri=aviatSmLoadUri, aviatSmDetailsVersion=aviatSmDetailsVersion, aviatSwResetGroup=aviatSwResetGroup, aviatSmLoadProgress=aviatSmLoadProgress, aviatSwLoadObjects=aviatSwLoadObjects, aviatSwLoadGroup=aviatSwLoadGroup, aviatSmSoftReset=aviatSmSoftReset, aviatSmLoadActivateWaitTimer=aviatSmLoadActivateWaitTimer, aviatSwManagementCompliance=aviatSwManagementCompliance, aviatSmLoadRollbackTimer=aviatSmLoadRollbackTimer, aviatSwDetailsGroup=aviatSwDetailsGroup, aviatSwManagementMIBObjects=aviatSwManagementMIBObjects, aviatSmLoadControl=aviatSmLoadControl, aviatSwManagementConf=aviatSwManagementConf, aviatSmLoadStatus=aviatSmLoadStatus, aviatSmDetailsInactiveVersion=aviatSmDetailsInactiveVersion, aviatSwManagementModule=aviatSwManagementModule, aviatSmLoadActivateWaitDuration=aviatSmLoadActivateWaitDuration, aviatSmLoadRollbackDuration=aviatSmLoadRollbackDuration, aviatSmLoadActivateTime=aviatSmLoadActivateTime, aviatSwDetailsObjects=aviatSwDetailsObjects, aviatSwResetObjects=aviatSwResetObjects, PYSNMP_MODULE_ID=aviatSwManagementModule, aviatSwManagementGroups=aviatSwManagementGroups, aviatSwManagementComplV1=aviatSwManagementComplV1)
