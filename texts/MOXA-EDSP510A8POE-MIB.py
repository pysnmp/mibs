#
# PySNMP MIB module MOXA-EDSP510A8POE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/moxa/MOXA-EDSP510A8POE-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 11:48:59 2024
# On host fv-az1427-842 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Integer32, Bits, ModuleIdentity, Unsigned32, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter64, IpAddress, NotificationType, ObjectIdentity, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Integer32", "Bits", "ModuleIdentity", "Unsigned32", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter64", "IpAddress", "NotificationType", "ObjectIdentity", "TimeTicks", "iso")
DisplayString, DateAndTime, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "MacAddress", "TextualConvention")
moxa = MibIdentifier((1, 3, 6, 1, 4, 1, 8691))
industrialEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7))
edsp510a8poe = ModuleIdentity((1, 3, 6, 1, 4, 1, 8691, 7, 86))
edsp510a8poe.setRevisions(('2017-01-16 00:00', '2015-06-30 00:00', '2013-01-08 00:00', '2012-12-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: edsp510a8poe.setRevisionsDescriptions(('Remove objects:\n                igmpSnoopingMulticastGroupTable,\n                igmpSnoopingMulticastGroupEntry,\n                igmpSnoopingIpGroup,\n                igmpSnoopingMacGroup,\n                igmpSnoopingJoinedPorts,\n                enhancedMode\n             Fix TYPO', 'Support v3.5 firmware,\n             Added new objects: \n            \tmulticastFastForwarding,\n            \t \n             Modified objects:\n             \tn/a', 'Support TurboPack2 v3.3 firmware,\n             Added new objects: \n            \ttimeProtocolOption,    \t            \t                    \t \n            \tloopProtection,\n            \tcalibratePeriod,\n            \tmonitorSFPTable,\n            \teventlog,\n            \t \n             Modified objects:\n             \tVlan,\n             \tenableModbusTCP,\n            \tenableWarmStart,\n            \tmibNotificationsPrefix,\n            \tdhcpRelayAgentSetting', 'Support TurboPack2 v3.1 firmware,\n             Added new objects: \n            \tspanningTreePortEdge,            \t            \t\n            \tenableEtherNetIP,\n            \tenableModbus,\n            \tenableNTPServer,\n            \tuserLoginSetting,\n            \tcpuLoading5s,\n            \tcpuLoading30s,\n            \tcpuLoading300s,\n            \ttotalMemory,\n            \tfreeMemory,\n            \tusedMemory,\n            \tmemoryUsage,            \t\n            \t \n             Modified objects:\n             \tVlan,\n             \tcommRedundancy,\n             \trateLimiting,\n             \tieee1588Setting',))
if mibBuilder.loadTexts: edsp510a8poe.setLastUpdated('201701160000Z')
if mibBuilder.loadTexts: edsp510a8poe.setOrganization('Moxa Inc.')
if mibBuilder.loadTexts: edsp510a8poe.setContactInfo('Postal: Moxa Inc.\n\t             Fl.4, No.135,Lane 235,Pao-Chiao Rd.\n\t             Shing Tien City,Taipei,Taiwan,R.O.C\n\t          \n\t             Tel: +866-2-89191230 ')
if mibBuilder.loadTexts: edsp510a8poe.setDescription('The MIB module for Moxa EDSP510A-8PoE series specific information.')
mibNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0))
swMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1))
swTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2))
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight\n        ports, with the first octet specifying ports 1 through\n        8, the second octet specifying ports 9 through 16, etc.\n        Within each octet, the most significant bit represents\n        the lowest numbered port, and the least significant bit\n        represents the highest numbered port.  Thus, each port\n        of the bridge is represented by a single bit within the\n        value of this object.  If that bit has a value of '1'\n        then that port is included in the set of ports; the port\n        is not included if its bit has a value of '0'."
    status = 'current'

numberOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfPorts.setStatus('current')
if mibBuilder.loadTexts: numberOfPorts.setDescription('Total Ports.')
switchModel = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchModel.setStatus('current')
if mibBuilder.loadTexts: switchModel.setDescription('The switch model.')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
if mibBuilder.loadTexts: firmwareVersion.setDescription('The firmware version.')
enableWebConfig = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("httpOrHttps", 1), ("httpsOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableWebConfig.setStatus('current')
if mibBuilder.loadTexts: enableWebConfig.setDescription('This enable the Web. configuration function.')
consoleLoginMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("menu", 0), ("cli", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleLoginMode.setStatus('current')
if mibBuilder.loadTexts: consoleLoginMode.setDescription('This option can change console login mode.')
enableTelnetConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableTelnetConsole.setStatus('current')
if mibBuilder.loadTexts: enableTelnetConsole.setDescription('This enable telnet console.')
lineSwapRecovery = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineSwapRecovery.setStatus('current')
if mibBuilder.loadTexts: lineSwapRecovery.setDescription('This enable line-swap-fast-recovery function.')
webTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webTimeout.setStatus('current')
if mibBuilder.loadTexts: webTimeout.setDescription('Web Timeout')
ageTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ageTime.setStatus('current')
if mibBuilder.loadTexts: ageTime.setDescription('Web Timeout')
networkSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8))
switchIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIpAddr.setStatus('current')
if mibBuilder.loadTexts: switchIpAddr.setDescription('The IP Address of this switch.')
switchIpMask = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIpMask.setStatus('current')
if mibBuilder.loadTexts: switchIpMask.setDescription('The netmask of this switch.')
defaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultGateway.setStatus('current')
if mibBuilder.loadTexts: defaultGateway.setDescription('The default gateway of this switch.')
enableAutoIpConfig = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableDHCP", 1), ("enableBOOTP", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAutoIpConfig.setStatus('current')
if mibBuilder.loadTexts: enableAutoIpConfig.setDescription('This enable the automatic IP address configuration function.')
dnsServer1IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer1IpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsServer1IpAddr.setDescription("The first DNS server's IP address")
snmpTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpTrapCommunity.setDescription('The SNMP trap community name')
trapServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerAddr.setStatus('current')
if mibBuilder.loadTexts: trapServerAddr.setDescription('The IP address/Domain name of SNMP trap server')
dnsServer2IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer2IpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsServer2IpAddr.setDescription("The second DNS server's IP address")
snmpReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpReadCommunity.setDescription('The SNMP read community name')
snmpTrap2Community = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap2Community.setStatus('current')
if mibBuilder.loadTexts: snmpTrap2Community.setDescription('The Second SNMP trap community name')
trap2ServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap2ServerAddr.setStatus('current')
if mibBuilder.loadTexts: trap2ServerAddr.setDescription('The IP address/Domain name of Second SNMP trap server')
snmpInformEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformEnable.setStatus('current')
if mibBuilder.loadTexts: snmpInformEnable.setDescription('This enable the snmpInform function.')
snmpInformRetries = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformRetries.setStatus('current')
if mibBuilder.loadTexts: snmpInformRetries.setDescription('The snmp inform retry times of SNMP trap server')
snmpInformTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformTimeout.setStatus('current')
if mibBuilder.loadTexts: snmpInformTimeout.setDescription('The snmp inform interval of SNMP trap server')
dhcpRetryPeriods = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRetryPeriods.setStatus('current')
if mibBuilder.loadTexts: dhcpRetryPeriods.setDescription('The DHCP retry periods.')
dhcpRetryTimes = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRetryTimes.setStatus('current')
if mibBuilder.loadTexts: dhcpRetryTimes.setDescription('The dhcp retry times.')
portSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9))
portTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription('The port table.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
if mibBuilder.loadTexts: portEntry.setDescription('The port entry.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('The port index.')
portDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDesc.setStatus('current')
if mibBuilder.loadTexts: portDesc.setDescription('The port description')
portEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEnable.setStatus('current')
if mibBuilder.loadTexts: portEnable.setDescription('This enable the port.')
portSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 0), ("speed100M-Full", 1), ("speed100M-Half", 2), ("speed10M-Full", 3), ("speed10M-Half", 4), ("speed1000M-Full", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeed.setStatus('current')
if mibBuilder.loadTexts: portSpeed.setDescription('The port speed and duplex.')
portMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("na", 0), ("auto", 1), ("mdi", 2), ("mdiX", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMDI.setStatus('current')
if mibBuilder.loadTexts: portMDI.setDescription('The port MDI/MDIX.')
portFDXFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFDXFlowCtrl.setStatus('current')
if mibBuilder.loadTexts: portFDXFlowCtrl.setDescription('The port FDX Flow Control')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription('The port Name')
monitor = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10))
power1InputStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-present", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power1InputStatus.setStatus('current')
if mibBuilder.loadTexts: power1InputStatus.setDescription('The status of the first power input.')
power2InputStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-present", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power2InputStatus.setStatus('current')
if mibBuilder.loadTexts: power2InputStatus.setDescription('The status of the second power input.')
monitorPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3), )
if mibBuilder.loadTexts: monitorPortTable.setStatus('current')
if mibBuilder.loadTexts: monitorPortTable.setDescription('The  port table of monitor function.')
monitorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorPortEntry.setStatus('current')
if mibBuilder.loadTexts: monitorPortEntry.setDescription('The port table entry of monitor function.')
monitorLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("disable", -1), ("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorLinkStatus.setStatus('current')
if mibBuilder.loadTexts: monitorLinkStatus.setDescription('The port link status.')
monitorSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 4, 3, 2, 1, 0, -1))).clone(namedValues=NamedValues(("speed1000M-Full", 5), ("speed1000M-Half", 4), ("speed100M-Full", 3), ("speed100M-Half", 2), ("speed10M-Full", 1), ("speed10M-Half", 0), ("na", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorSpeed.setStatus('current')
if mibBuilder.loadTexts: monitorSpeed.setDescription('The port speed and duplex status.')
monitorAutoMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -1))).clone(namedValues=NamedValues(("mdiX", 1), ("mdi", 0), ("na", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorAutoMDI.setStatus('current')
if mibBuilder.loadTexts: monitorAutoMDI.setDescription('The port MDI/MDIX status.')
monitorTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorTraffic.setStatus('current')
if mibBuilder.loadTexts: monitorTraffic.setDescription('The traffic loading percentage of port.')
monitorFDXFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFDXFlowCtrl.setStatus('current')
if mibBuilder.loadTexts: monitorFDXFlowCtrl.setDescription('The Full-Duplex flow control status')
monitorTxTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorTxTraffic.setStatus('current')
if mibBuilder.loadTexts: monitorTxTraffic.setDescription('The TX  traffic loading percentage of port.')
monitorRxTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRxTraffic.setStatus('current')
if mibBuilder.loadTexts: monitorRxTraffic.setDescription('The RTX  traffic loading percentage of port.')
monitorDiTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 4), )
if mibBuilder.loadTexts: monitorDiTable.setStatus('current')
if mibBuilder.loadTexts: monitorDiTable.setDescription('The DI table of monitor function.')
monitorDiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 4, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "diIndex"))
if mibBuilder.loadTexts: monitorDiEntry.setStatus('current')
if mibBuilder.loadTexts: monitorDiEntry.setDescription('The DI table entry of monitor function.')
diIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diIndex.setStatus('current')
if mibBuilder.loadTexts: diIndex.setDescription('The DI index of monitor function')
diInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diInputStatus.setStatus('current')
if mibBuilder.loadTexts: diInputStatus.setDescription('The DI input status.')
monitorSFPTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7), )
if mibBuilder.loadTexts: monitorSFPTable.setStatus('current')
if mibBuilder.loadTexts: monitorSFPTable.setDescription('The SFP table of monitor function.')
monitorSFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorSFPEntry.setStatus('current')
if mibBuilder.loadTexts: monitorSFPEntry.setDescription('The SFP table entry of monitor function.')
sfpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpPort.setStatus('current')
if mibBuilder.loadTexts: sfpPort.setDescription('The SPF index of monitor function')
sfpModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpModelName.setStatus('current')
if mibBuilder.loadTexts: sfpModelName.setDescription('The SPF ModelName of monitor function')
sfpTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTemperature.setStatus('current')
if mibBuilder.loadTexts: sfpTemperature.setDescription('The SPF Temperature of monitor function')
sfpVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVoltage.setStatus('current')
if mibBuilder.loadTexts: sfpVoltage.setDescription('The SPF Voltage of monitor function')
sfpTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTxPower.setStatus('current')
if mibBuilder.loadTexts: sfpTxPower.setDescription('The SPF TX power of monitor function')
sfpRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpRXPower.setStatus('current')
if mibBuilder.loadTexts: sfpRXPower.setDescription('The SPF RX power of monitor function')
emailWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11))
emailService = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 1))
emailWarningMailServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningMailServer.setStatus('current')
if mibBuilder.loadTexts: emailWarningMailServer.setDescription("The email server's Ip Address/Domain name of email warning function.")
emailWarningSMTPPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSMTPPort.setStatus('current')
if mibBuilder.loadTexts: emailWarningSMTPPort.setDescription("The email server's SMTP port of email warning function.")
emailWarningFirstEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFirstEmailAddr.setStatus('current')
if mibBuilder.loadTexts: emailWarningFirstEmailAddr.setDescription('The first email address of email warning function.')
emailWarningSecondEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSecondEmailAddr.setStatus('current')
if mibBuilder.loadTexts: emailWarningSecondEmailAddr.setDescription('The second email address of email warning function.')
emailWarningThirdEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningThirdEmailAddr.setStatus('current')
if mibBuilder.loadTexts: emailWarningThirdEmailAddr.setDescription('The third email address of email warning function.')
emailWarningFourthEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFourthEmailAddr.setStatus('current')
if mibBuilder.loadTexts: emailWarningFourthEmailAddr.setDescription('The fourth email address of email warning function.')
emailWarningEventType = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2))
emailWarningEventServerColdStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventServerColdStart.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventServerColdStart.setDescription('The switch cold start event of email warning function.')
emailWarningEventServerWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventServerWarmStart.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventServerWarmStart.setDescription('The switch warm start event of email warning function.')
emailWarningEventConfigChange = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventConfigChange.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventConfigChange.setDescription('The configuration changed event of email warning function.')
emailWarningEventPowerOn2Off = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventPowerOn2Off.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventPowerOn2Off.setDescription('The power on event of email warning function.')
emailWarningEventPowerOff2On = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventPowerOff2On.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventPowerOff2On.setDescription('The power off event of email warning function.')
emailWarningEventAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventAuthFail.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventAuthFail.setDescription('The authentication fail event of email warning function.')
emailWarningEventTopologyChanged = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventTopologyChanged.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventTopologyChanged.setDescription('The communication redundancy topology changed event of email warning function.')
emailWarningEventPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 3), )
if mibBuilder.loadTexts: emailWarningEventPortTable.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventPortTable.setDescription('The port table of the email warning event.')
emailWarningEventPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 3, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: emailWarningEventPortEntry.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventPortEntry.setDescription('The port table entry of the email warning event.')
emailWarningEventPortLinkOn = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventPortLinkOn.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventPortLinkOn.setDescription('The port link on event of email warning function.')
emailWarningEventPortLinkOff = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventPortLinkOff.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventPortLinkOff.setDescription('The port link off event of email warning function.')
emailWarningEventPortTrafficOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventPortTrafficOverload.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventPortTrafficOverload.setDescription("The port's traffic overloading event of email warning function.")
emailWarningEventPortRxTrafficThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventPortRxTrafficThreshold.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventPortRxTrafficThreshold.setDescription("The port's traffic threshold of the overloading event.")
emailWarningEventPortTrafficDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventPortTrafficDuration.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventPortTrafficDuration.setDescription("The port's traffic duration of the overloading event.")
emailWarningEventDiTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 4), )
if mibBuilder.loadTexts: emailWarningEventDiTable.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventDiTable.setDescription('The DI table of the email warning event.')
emailWarningEventDiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 4, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "diIndex"))
if mibBuilder.loadTexts: emailWarningEventDiEntry.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventDiEntry.setDescription('The DI table entry of the email warning event.')
emailWarningEventDiInputOn2Off = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventDiInputOn2Off.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventDiInputOn2Off.setDescription('The DI input off event of email warning function .')
emailWarningEventDiInputOff2On = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventDiInputOff2On.setStatus('current')
if mibBuilder.loadTexts: emailWarningEventDiInputOff2On.setDescription('The DI input on event of email warning function.')
setDeviceIp = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 12))
setDevIpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 12, 1), )
if mibBuilder.loadTexts: setDevIpTable.setStatus('current')
if mibBuilder.loadTexts: setDevIpTable.setDescription('The set device IP table.')
setDevIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 12, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "setDevIpIndex"))
if mibBuilder.loadTexts: setDevIpEntry.setStatus('current')
if mibBuilder.loadTexts: setDevIpEntry.setDescription('The set device IP table entry.')
setDevIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDevIpIndex.setStatus('current')
if mibBuilder.loadTexts: setDevIpIndex.setDescription('The set device IP index.')
setDevIpCurrentIpofDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDevIpCurrentIpofDevice.setStatus('current')
if mibBuilder.loadTexts: setDevIpCurrentIpofDevice.setDescription('The current IP address of connected to this port.')
setDevIpPresentBy = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("no", 0), ("dhcpClient", 1), ("rarp", 2), ("bootp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDevIpPresentBy.setStatus('current')
if mibBuilder.loadTexts: setDevIpPresentBy.setDescription('The protocol used that assigning IP to the device.')
setDevIpDedicatedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 12, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDevIpDedicatedIp.setStatus('current')
if mibBuilder.loadTexts: setDevIpDedicatedIp.setDescription('The IP address when assign to the device connected to this port.')
mirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 13))
targetPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: targetPort.setStatus('current')
if mibBuilder.loadTexts: targetPort.setDescription('The mirrored port of mirroring function.')
mirroringPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirroringPort.setStatus('current')
if mibBuilder.loadTexts: mirroringPort.setDescription('The mirroring port of mirroring function.')
monitorDirection = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inputDataStream", 0), ("outputDataStream", 1), ("biDirectional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorDirection.setStatus('current')
if mibBuilder.loadTexts: monitorDirection.setDescription('The traffic direction of mirroring function.')
portTrunking = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14))
trunkSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 1), )
if mibBuilder.loadTexts: trunkSettingTable.setStatus('current')
if mibBuilder.loadTexts: trunkSettingTable.setDescription('Port Trunking Setting Table.')
trunkSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "trunkSettingIndex"))
if mibBuilder.loadTexts: trunkSettingEntry.setStatus('current')
if mibBuilder.loadTexts: trunkSettingEntry.setDescription('Port Trunking Setting Entry.')
trunkSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkSettingIndex.setStatus('current')
if mibBuilder.loadTexts: trunkSettingIndex.setDescription('Trunking Group Index.')
trunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkType.setStatus('current')
if mibBuilder.loadTexts: trunkType.setDescription('Trunking Group Type.')
trunkMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkMemberPorts.setStatus('current')
if mibBuilder.loadTexts: trunkMemberPorts.setDescription('Trunking Group Member Ports.')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 2), )
if mibBuilder.loadTexts: trunkTable.setStatus('current')
if mibBuilder.loadTexts: trunkTable.setDescription('Port Trunking Table.')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 2, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "trunkIndex"), (0, "MOXA-EDSP510A8POE-MIB", "trunkPort"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
if mibBuilder.loadTexts: trunkEntry.setDescription('Port Trunking Entry.')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIndex.setStatus('current')
if mibBuilder.loadTexts: trunkIndex.setDescription('Trunking Group Index.')
trunkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkPort.setStatus('current')
if mibBuilder.loadTexts: trunkPort.setDescription('Trunking Group Member Port.')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("fail", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkStatus.setStatus('current')
if mibBuilder.loadTexts: trunkStatus.setDescription('Trunking Port Status.')
commRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16))
protocolOfRedundancySetup = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("spanningTree", 1), ("turboRing", 2), ("turboRingV2", 3), ("turboChain", 4), ("mstp", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolOfRedundancySetup.setStatus('current')
if mibBuilder.loadTexts: protocolOfRedundancySetup.setDescription('This set the redundancy protocol of this switch. ')
turboRing = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2))
turboRingMaster = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingMaster.setStatus('current')
if mibBuilder.loadTexts: turboRingMaster.setDescription('Is this a Master or Slave.')
turboRingMasterSetup = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingMasterSetup.setStatus('current')
if mibBuilder.loadTexts: turboRingMasterSetup.setDescription('Set this to be Master.')
turboRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 3), )
if mibBuilder.loadTexts: turboRingPortTable.setStatus('current')
if mibBuilder.loadTexts: turboRingPortTable.setDescription('Turbo Ring Port Table.')
turboRingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 3, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "turboRingPortIndex"))
if mibBuilder.loadTexts: turboRingPortEntry.setStatus('current')
if mibBuilder.loadTexts: turboRingPortEntry.setDescription('Turbo Ring Port Entry.')
turboRingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortIndex.setStatus('current')
if mibBuilder.loadTexts: turboRingPortIndex.setDescription('Turbo Ring Port Index.')
turboRingPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portDisabled", 0), ("notTurboRingPort", 1), ("linkDown", 2), ("blocked", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortStatus.setStatus('current')
if mibBuilder.loadTexts: turboRingPortStatus.setDescription('Turbo Ring Port Status.')
turboRingPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: turboRingPortDesignatedBridge.setDescription("The MAC address of the bridge which this\n              port considers to be the Designated Bridge for\n              this port's segment.")
turboRingPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: turboRingPortDesignatedPort.setDescription("The Port Number of the port on the Designated\n               Bridge for this port's segment.")
turboRingDesignatedMaster = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingDesignatedMaster.setStatus('current')
if mibBuilder.loadTexts: turboRingDesignatedMaster.setDescription('The MAC address of the bridge which is the Master of the TURBO RING.')
turboRingRdntPort1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingRdntPort1.setStatus('current')
if mibBuilder.loadTexts: turboRingRdntPort1.setDescription('The port number of 1st Redundant Port on the TURBO RING.')
turboRingRdntPort2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingRdntPort2.setStatus('current')
if mibBuilder.loadTexts: turboRingRdntPort2.setDescription('The port number of 2nd Redundant Port on the TURBO RING.')
turboRingEnableCoupling = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingEnableCoupling.setStatus('current')
if mibBuilder.loadTexts: turboRingEnableCoupling.setDescription('This enable the ring coupling function.')
turboRingCouplingPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingCouplingPort.setStatus('current')
if mibBuilder.loadTexts: turboRingCouplingPort.setDescription('The coupling port of ring coupling function.')
turboRingCouplingPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("portDisabled", 0), ("notCouplingPort", 1), ("linkDown", 2), ("blocked", 3), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingCouplingPortStatus.setStatus('current')
if mibBuilder.loadTexts: turboRingCouplingPortStatus.setDescription('The coupling port status of ring coupling function.')
turboRingControlPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingControlPort.setStatus('current')
if mibBuilder.loadTexts: turboRingControlPort.setDescription('The control port of ring coupling function.')
turboRingControlPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("portDisabled", 0), ("notControlPort", 1), ("linkDown", 2), ("blocked", 3), ("forwarding", 5), ("inactive", 6), ("active", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingControlPortStatus.setStatus('current')
if mibBuilder.loadTexts: turboRingControlPortStatus.setDescription('The control port status of ring coupling function.')
turboRingBrokenStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("normal", 1), ("broken", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingBrokenStatus.setStatus('current')
if mibBuilder.loadTexts: turboRingBrokenStatus.setDescription('Turbo Ring broken display.')
spanningTree = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3))
spanningTreeRoot = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeRoot.setStatus('current')
if mibBuilder.loadTexts: spanningTreeRoot.setDescription('The root of spanning tree.')
spanningTreeBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4096, 8192, 12288, 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, 61440))).clone(namedValues=NamedValues(("priority0", 0), ("priority4096", 4096), ("priority8192", 8192), ("priority12288", 12288), ("priority16384", 16384), ("priority20480", 20480), ("priority24576", 24576), ("priority28672", 28672), ("priority32768", 32768), ("priority36864", 36864), ("priority40960", 40960), ("priority45056", 45056), ("priority49152", 49152), ("priority53248", 53248), ("priority57344", 57344), ("priority61440", 61440)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeBridgePriority.setStatus('current')
if mibBuilder.loadTexts: spanningTreeBridgePriority.setDescription('The bridge priority of spanning tree protocol.')
spanningTreeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeHelloTime.setStatus('current')
if mibBuilder.loadTexts: spanningTreeHelloTime.setDescription('The hello time of spanning tree protocol.')
spanningTreeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeMaxAge.setStatus('current')
if mibBuilder.loadTexts: spanningTreeMaxAge.setDescription('The max. age of spanning tree protocol.')
spanningTreeForwardingDelay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeForwardingDelay.setStatus('current')
if mibBuilder.loadTexts: spanningTreeForwardingDelay.setDescription('Tje forwarding delay of spanning tree protocol.')
spanningTreeTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6), )
if mibBuilder.loadTexts: spanningTreeTable.setStatus('current')
if mibBuilder.loadTexts: spanningTreeTable.setDescription('The spanning tree table.')
spanningTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "spanningTreeIndex"))
if mibBuilder.loadTexts: spanningTreeEntry.setStatus('current')
if mibBuilder.loadTexts: spanningTreeEntry.setDescription('The spanning tree port entry.')
spanningTreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeIndex.setStatus('current')
if mibBuilder.loadTexts: spanningTreeIndex.setDescription('The index of spanning tree table.')
enableSpanningTree = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSpanningTree.setStatus('current')
if mibBuilder.loadTexts: enableSpanningTree.setDescription('This enable of spanning tree protocol for this port.')
spanningTreePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240))).clone(namedValues=NamedValues(("priority0", 0), ("priority16", 16), ("priority32", 32), ("priority48", 48), ("priority64", 64), ("priority80", 80), ("priority96", 96), ("priority112", 112), ("priority128", 128), ("priority144", 144), ("priority160", 160), ("priority176", 176), ("priority192", 192), ("priority208", 208), ("priority224", 224), ("priority240", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreePortPriority.setStatus('current')
if mibBuilder.loadTexts: spanningTreePortPriority.setDescription('The port priority of spanning tree protocol.')
spanningTreePortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreePortCost.setStatus('current')
if mibBuilder.loadTexts: spanningTreePortCost.setDescription('The port cost of spanning tree protocol.')
spanningTreePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portDisabled", 0), ("notSpanningTreePort", 1), ("linkDown", 2), ("blocked", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreePortStatus.setStatus('current')
if mibBuilder.loadTexts: spanningTreePortStatus.setDescription('The port status of spanning tree protocol.')
spanningTreePortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("forceEdge", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreePortEdge.setStatus('current')
if mibBuilder.loadTexts: spanningTreePortEdge.setDescription('This configures the Edge Port property for this port.')
activeProtocolOfRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("spanningTree", 1), ("turboRing", 2), ("turboRingV2", 3), ("turboChain", 4), ("mstp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeProtocolOfRedundancy.setStatus('current')
if mibBuilder.loadTexts: activeProtocolOfRedundancy.setDescription("This shows the active redundancy protocol of this switch now. The none(0) status will \n         be showed if only if the switch's redundancy protocol is set to spanning tree and none of\n         ports enable spanning tree.")
turboRingV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5))
turboRingV2Ring1 = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1))
ringIndexRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringIndexRing1.setStatus('current')
if mibBuilder.loadTexts: ringIndexRing1.setDescription('The turboRingV2 Ring Index.')
ringEnableRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringEnableRing1.setStatus('current')
if mibBuilder.loadTexts: ringEnableRing1.setDescription('The turboRingV2 Ring1 enable config.')
masterSetupRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: masterSetupRing1.setStatus('current')
if mibBuilder.loadTexts: masterSetupRing1.setDescription('Is this a Master or Slave.')
masterStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: masterStatusRing1.setStatus('current')
if mibBuilder.loadTexts: masterStatusRing1.setDescription('Set this to be Master.')
designatedMasterRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: designatedMasterRing1.setStatus('current')
if mibBuilder.loadTexts: designatedMasterRing1.setDescription('The MAC address of the bridge which is the Master of the turboRingV2.')
rdnt1stPortRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt1stPortRing1.setStatus('current')
if mibBuilder.loadTexts: rdnt1stPortRing1.setDescription('The port number of 1st Redundant Port on the turboRingV2.')
rdnt1stPortStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt1stPortStatusRing1.setStatus('current')
if mibBuilder.loadTexts: rdnt1stPortStatusRing1.setDescription('The status of 1st Redundant Port on the turboRingV2.')
rdnt2ndPortRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt2ndPortRing1.setStatus('current')
if mibBuilder.loadTexts: rdnt2ndPortRing1.setDescription('The port number of 2nd Redundant Port on the turboRingV2.')
rdnt2ndPortStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt2ndPortStatusRing1.setStatus('current')
if mibBuilder.loadTexts: rdnt2ndPortStatusRing1.setDescription('The status of 2nd Redundant Port on the turboRingV2.')
brokenStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("normal", 1), ("broken", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brokenStatusRing1.setStatus('current')
if mibBuilder.loadTexts: brokenStatusRing1.setDescription('turboRingV2 broken display.')
turboRingV2Ring2 = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2))
ringIndexRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringIndexRing2.setStatus('current')
if mibBuilder.loadTexts: ringIndexRing2.setDescription('The turboRingV2 Ring Index.')
ringEnableRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringEnableRing2.setStatus('current')
if mibBuilder.loadTexts: ringEnableRing2.setDescription('The turboRingV2 Ring2 enable config.')
masterSetupRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: masterSetupRing2.setStatus('current')
if mibBuilder.loadTexts: masterSetupRing2.setDescription('Is this a Master or Slave.')
masterStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: masterStatusRing2.setStatus('current')
if mibBuilder.loadTexts: masterStatusRing2.setDescription('Set this to be Master.')
designatedMasterRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: designatedMasterRing2.setStatus('current')
if mibBuilder.loadTexts: designatedMasterRing2.setDescription('The MAC address of the bridge which is the Master of the turboRingV2.')
rdnt1stPortRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt1stPortRing2.setStatus('current')
if mibBuilder.loadTexts: rdnt1stPortRing2.setDescription('The port number of 1st Redundant Port on the turboRingV2.')
rdnt1stPortStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt1stPortStatusRing2.setStatus('current')
if mibBuilder.loadTexts: rdnt1stPortStatusRing2.setDescription('The status of 1st Redundant Port on the turboRingV2.')
rdnt2ndPortRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt2ndPortRing2.setStatus('current')
if mibBuilder.loadTexts: rdnt2ndPortRing2.setDescription('The port number of 2nd Redundant Port on the turboRingV2.')
rdnt2ndPortStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt2ndPortStatusRing2.setStatus('current')
if mibBuilder.loadTexts: rdnt2ndPortStatusRing2.setDescription('The status of 2nd Redundant Port on the turboRingV2.')
brokenStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("normal", 1), ("broken", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brokenStatusRing2.setStatus('current')
if mibBuilder.loadTexts: brokenStatusRing2.setDescription('turboRingV2 broken display.')
turboRingV2Coupling = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 3))
couplingEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: couplingEnable.setStatus('current')
if mibBuilder.loadTexts: couplingEnable.setDescription('Setting the ring coupling enable.')
couplingMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dualHoming", 1), ("couplingBackup", 2), ("couplingPrimary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: couplingMode.setStatus('current')
if mibBuilder.loadTexts: couplingMode.setDescription('Setting the ring coupling mode.')
coupling1stPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coupling1stPort.setStatus('current')
if mibBuilder.loadTexts: coupling1stPort.setDescription("If in 'DUAL HOMING' mode, port name is 'Primary port'; if in 'COUPLING' mode, port name is 'Coupling port'")
coupling1stPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coupling1stPortStatus.setStatus('current')
if mibBuilder.loadTexts: coupling1stPortStatus.setDescription('The 1st coupling port status of coupling function.')
coupling2ndPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coupling2ndPort.setStatus('current')
if mibBuilder.loadTexts: coupling2ndPort.setDescription("If in 'DUAL HOMING' mode, port name is 'Backup port'; if in 'COUPLING' mode, port name is no used.")
coupling2ndPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coupling2ndPortStatus.setStatus('current')
if mibBuilder.loadTexts: coupling2ndPortStatus.setDescription('The 2nd coupling port status of coupling function.')
turboChain = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6))
turboChainRole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("head", 1), ("member", 2), ("tail", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboChainRole.setStatus('current')
if mibBuilder.loadTexts: turboChainRole.setDescription('The Role of TURBO CHAIN.')
turboChainPort1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboChainPort1.setStatus('current')
if mibBuilder.loadTexts: turboChainPort1.setDescription('The port number of 1st Redundant Port on the TURBO CHAIN.\n             If switch role is Turbo Chain Head, this is Head port,\n             If Switch role is  Turbo Chain Tail, this is Tail port.')
turboChainPort2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboChainPort2.setStatus('current')
if mibBuilder.loadTexts: turboChainPort2.setDescription('The port number of 2nd Redundant Port on the TURBO CHAIN.\n             It is the member port of TurboChain')
turboChainPort1Status = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notTurboChainPort", 0), ("linkDown", 1), ("blocking", 2), ("blocked", 3), ("forwarding", 4), ("na", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort1Status.setStatus('current')
if mibBuilder.loadTexts: turboChainPort1Status.setDescription('Turbo Chain Port Status.')
turboChainPort2Status = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notTurboChainPort", 0), ("linkDown", 1), ("blocking", 2), ("blocked", 3), ("forwarding", 4), ("na", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort2Status.setStatus('current')
if mibBuilder.loadTexts: turboChainPort2Status.setDescription('Turbo Chain Port Status.')
turboChainPort1PartnerBridge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort1PartnerBridge.setStatus('current')
if mibBuilder.loadTexts: turboChainPort1PartnerBridge.setDescription('The MAC address of the next bridge ')
turboChainPort2PartnerBridge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort2PartnerBridge.setStatus('current')
if mibBuilder.loadTexts: turboChainPort2PartnerBridge.setDescription('The MAC address of the neighbor Turbo Chain switch')
relayWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17))
relayWarningTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11), )
if mibBuilder.loadTexts: relayWarningTable.setStatus('current')
if mibBuilder.loadTexts: relayWarningTable.setDescription('The relay warning table.')
relayWarningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "relayAlarmIndex"))
if mibBuilder.loadTexts: relayWarningEntry.setStatus('current')
if mibBuilder.loadTexts: relayWarningEntry.setDescription('Relay Warning Entry.')
relayAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: relayAlarmIndex.setDescription('The Relay alarm index.')
relayWarningRelayContact = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("opened", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningRelayContact.setStatus('current')
if mibBuilder.loadTexts: relayWarningRelayContact.setDescription('The first Relay contact status.')
overrideRelayWarningSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideRelayWarningSetting.setStatus('current')
if mibBuilder.loadTexts: overrideRelayWarningSetting.setDescription('Override the relay warning setting.')
relayWarningPower1Off = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningPower1Off.setStatus('current')
if mibBuilder.loadTexts: relayWarningPower1Off.setDescription('The relay contact will be opened while the first power input off.')
relayWarningPower1OffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningPower1OffStatus.setStatus('current')
if mibBuilder.loadTexts: relayWarningPower1OffStatus.setDescription('The relay contact is opened as the first power input off..')
relayWarningPower2Off = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningPower2Off.setStatus('current')
if mibBuilder.loadTexts: relayWarningPower2Off.setDescription('The relay contact will be opened while the second power input off.')
relayWarningPower2OffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningPower2OffStatus.setStatus('current')
if mibBuilder.loadTexts: relayWarningPower2OffStatus.setDescription('The relay contact is opened as the second power input off.')
relayWarningTurboRingBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningTurboRingBreak.setStatus('current')
if mibBuilder.loadTexts: relayWarningTurboRingBreak.setDescription('The relay contact will be opened while turbo ring break.')
relayWarningTurboRingBreakStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningTurboRingBreakStatus.setStatus('current')
if mibBuilder.loadTexts: relayWarningTurboRingBreakStatus.setDescription('The relay contact is opened while turbo ring is broken.')
portRelayWarningTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12), )
if mibBuilder.loadTexts: portRelayWarningTable.setStatus('current')
if mibBuilder.loadTexts: portRelayWarningTable.setDescription('The relay warning port table.')
portRelayWarningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"), (0, "MOXA-EDSP510A8POE-MIB", "relayAlarmIndex"))
if mibBuilder.loadTexts: portRelayWarningEntry.setStatus('current')
if mibBuilder.loadTexts: portRelayWarningEntry.setDescription('Port Relay Warning Entry.')
relayWarningLinkChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ignore", 0), ("on2off", 1), ("off2on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningLinkChanged.setStatus('current')
if mibBuilder.loadTexts: relayWarningLinkChanged.setDescription("The relay contact will be opened while this port's link status is changed.")
relayWarningLinkChangedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningLinkChangedStatus.setStatus('current')
if mibBuilder.loadTexts: relayWarningLinkChangedStatus.setDescription("The relay contact is opened as this port's link status is changed.")
relayWarningTrafficOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningTrafficOverload.setStatus('current')
if mibBuilder.loadTexts: relayWarningTrafficOverload.setDescription("The relay contact will be opened while this port's traffic is overload.")
relayWarningTrafficOverloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningTrafficOverloadStatus.setStatus('current')
if mibBuilder.loadTexts: relayWarningTrafficOverloadStatus.setDescription("The relay contact is opened as this port's traffic is overload.")
relayWarningRxTrafficThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningRxTrafficThreshold.setStatus('current')
if mibBuilder.loadTexts: relayWarningRxTrafficThreshold.setDescription('The threshold of the port traffic will be over loading.')
relayWarningTrafficDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningTrafficDuration.setStatus('current')
if mibBuilder.loadTexts: relayWarningTrafficDuration.setDescription('The duration of the port traffic will be over loading.')
diRelayWarningTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 13), )
if mibBuilder.loadTexts: diRelayWarningTable.setStatus('current')
if mibBuilder.loadTexts: diRelayWarningTable.setDescription('The relay warning DI table.')
diRelayWarningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 13, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "diIndex"), (0, "MOXA-EDSP510A8POE-MIB", "relayAlarmIndex"))
if mibBuilder.loadTexts: diRelayWarningEntry.setStatus('current')
if mibBuilder.loadTexts: diRelayWarningEntry.setDescription('DI Relay Warning Entry.')
relayWarningDiInputChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningDiInputChanged.setStatus('current')
if mibBuilder.loadTexts: relayWarningDiInputChanged.setDescription('The relay contact will be opened while the DI input changed.')
relayWarningDiInputChangedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningDiInputChangedStatus.setStatus('current')
if mibBuilder.loadTexts: relayWarningDiInputChangedStatus.setDescription('The relay contact is opened as the first DI input changed..')
trafficPrioritization = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18))
qosClassification = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 1))
queuingMechanism = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("schedweightfair", 0), ("schedstrict", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuingMechanism.setStatus('current')
if mibBuilder.loadTexts: queuingMechanism.setDescription('The queuing mechanism.')
qosPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 1, 2), )
if mibBuilder.loadTexts: qosPortTable.setStatus('current')
if mibBuilder.loadTexts: qosPortTable.setDescription('The QoS port table.')
qosPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 1, 2, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: qosPortEntry.setStatus('current')
if mibBuilder.loadTexts: qosPortEntry.setDescription('The QoS Port Entry.')
inspectTos = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inspectTos.setStatus('current')
if mibBuilder.loadTexts: inspectTos.setDescription('This enable the inspection of TOS field.')
inspectCos = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inspectCos.setStatus('current')
if mibBuilder.loadTexts: inspectCos.setDescription('This enable the inspection of CoS field.')
portPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPriority.setStatus('current')
if mibBuilder.loadTexts: portPriority.setDescription('The default priority of the port.')
cosMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 2))
cosMappingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 2, 1), )
if mibBuilder.loadTexts: cosMappingTable.setStatus('current')
if mibBuilder.loadTexts: cosMappingTable.setDescription('The COS mapping table.')
cosMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 2, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "cosTag"))
if mibBuilder.loadTexts: cosMappingEntry.setStatus('current')
if mibBuilder.loadTexts: cosMappingEntry.setDescription('The COS mapping Entry.')
cosTag = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosTag.setStatus('current')
if mibBuilder.loadTexts: cosTag.setDescription('The cos tag of TOS field.')
cosMappedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("normal", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosMappedPriority.setStatus('current')
if mibBuilder.loadTexts: cosMappedPriority.setDescription("The frame's priority corresponding to it's COS tag value.")
tosMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 3))
tosMappingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 3, 1), )
if mibBuilder.loadTexts: tosMappingTable.setStatus('current')
if mibBuilder.loadTexts: tosMappingTable.setDescription('The TOS mapping table.')
tosMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 3, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "tosClass"))
if mibBuilder.loadTexts: tosMappingEntry.setStatus('current')
if mibBuilder.loadTexts: tosMappingEntry.setDescription('TOS mapping Entry.')
tosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tosClass.setStatus('current')
if mibBuilder.loadTexts: tosClass.setDescription('The TOS class of TOS field.')
tosMappedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("normal", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tosMappedPriority.setStatus('current')
if mibBuilder.loadTexts: tosMappedPriority.setDescription("The frame's priority corresponding to it's TOS class value.")
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19))
vlanPortSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 1), )
if mibBuilder.loadTexts: vlanPortSettingTable.setStatus('current')
if mibBuilder.loadTexts: vlanPortSettingTable.setDescription('The vlan setting table of ports.')
vlanPortSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: vlanPortSettingEntry.setStatus('current')
if mibBuilder.loadTexts: vlanPortSettingEntry.setDescription('Port Setting Entry of VLAN.')
portVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("access", 0), ("trunk", 1), ("hybrid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVlanType.setStatus('current')
if mibBuilder.loadTexts: portVlanType.setDescription('The vlan type of port.')
portDefaultVid = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDefaultVid.setStatus('current')
if mibBuilder.loadTexts: portDefaultVid.setDescription('The PVID of port.')
portFixedVid = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFixedVid.setStatus('current')
if mibBuilder.loadTexts: portFixedVid.setDescription('The fixed vids of (trunk) port.')
portForbiddenVid = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForbiddenVid.setStatus('current')
if mibBuilder.loadTexts: portForbiddenVid.setDescription('The forbidden vids of (trunk)port.')
portFixedVidUntag = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFixedVidUntag.setStatus('current')
if mibBuilder.loadTexts: portFixedVidUntag.setDescription('The fixed untag vids of (trunk) port.')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 2), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
if mibBuilder.loadTexts: vlanTable.setDescription('The VLAN table.')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 2, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "vlanId"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
if mibBuilder.loadTexts: vlanEntry.setDescription('VLAN Entry.')
vlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanId.setStatus('current')
if mibBuilder.loadTexts: vlanId.setDescription('The VLAN id.')
joinedAccessPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 2, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joinedAccessPorts.setStatus('current')
if mibBuilder.loadTexts: joinedAccessPorts.setDescription('The access ports that joined this VID.')
joinedTrunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joinedTrunkPorts.setStatus('current')
if mibBuilder.loadTexts: joinedTrunkPorts.setDescription('The trunk ports that joined this VID.')
joinedHybridPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 2, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joinedHybridPorts.setStatus('current')
if mibBuilder.loadTexts: joinedHybridPorts.setDescription('The hybrid ports that joined this VID.')
managementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVlanId.setStatus('current')
if mibBuilder.loadTexts: managementVlanId.setDescription('The management VLAN id.')
vlanType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tagBased", 0), ("portBased", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanType.setStatus('current')
if mibBuilder.loadTexts: vlanType.setDescription('VLAN Type.')
portbaseVlanSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 5), )
if mibBuilder.loadTexts: portbaseVlanSettingTable.setStatus('current')
if mibBuilder.loadTexts: portbaseVlanSettingTable.setDescription('Port base Vlan Setting Table.')
portbaseVlanSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 5, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portbaseVlanSettingIndex"))
if mibBuilder.loadTexts: portbaseVlanSettingEntry.setStatus('current')
if mibBuilder.loadTexts: portbaseVlanSettingEntry.setDescription('Port base Vlan  Setting Entry.')
portbaseVlanSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portbaseVlanSettingIndex.setStatus('current')
if mibBuilder.loadTexts: portbaseVlanSettingIndex.setDescription('port base Vlan Group Index.')
portbaseVlanMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 5, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portbaseVlanMemberPorts.setStatus('current')
if mibBuilder.loadTexts: portbaseVlanMemberPorts.setDescription('port base Vlan  Group Member Ports.')
enableGvrp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableGvrp.setStatus('current')
if mibBuilder.loadTexts: enableGvrp.setDescription('Enable GVRP.')
multicastFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20))
igmpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1))
querierQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: querierQueryInterval.setStatus('current')
if mibBuilder.loadTexts: querierQueryInterval.setDescription('This query interval of the querier function for this VLAN.')
igmpSnoopingSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 2), )
if mibBuilder.loadTexts: igmpSnoopingSettingTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopingSettingTable.setDescription('The IGMP snooping setting table.')
igmpSnoopingSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 2, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "vlanId"))
if mibBuilder.loadTexts: igmpSnoopingSettingEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopingSettingEntry.setDescription('The IGMP snooping setting Entry.')
enableIgmpSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableIgmpSnooping.setStatus('current')
if mibBuilder.loadTexts: enableIgmpSnooping.setDescription('This enable the IGMP snooping function in this VLAN.')
enableQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableQuerier.setStatus('current')
if mibBuilder.loadTexts: enableQuerier.setDescription('This enable the querier function for this VLAN.')
fixedMulticastQuerierPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fixedMulticastQuerierPorts.setStatus('current')
if mibBuilder.loadTexts: fixedMulticastQuerierPorts.setDescription('The ports that multicast-Querier exist.')
learnedMulticastQuerierPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 2, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedMulticastQuerierPorts.setStatus('current')
if mibBuilder.loadTexts: learnedMulticastQuerierPorts.setDescription('The ports that multicast-Querier exist.')
enableGlobalIgmpSnooping = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableGlobalIgmpSnooping.setStatus('current')
if mibBuilder.loadTexts: enableGlobalIgmpSnooping.setDescription('This enable the IGMP snooping function .')
multicastFastForwarding = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastFastForwarding.setStatus('current')
if mibBuilder.loadTexts: multicastFastForwarding.setDescription('This Enable Multicast Fast Forwarding Mode function .')
staticMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 2))
staticMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 2, 1), )
if mibBuilder.loadTexts: staticMulticastTable.setStatus('current')
if mibBuilder.loadTexts: staticMulticastTable.setDescription('The static multicast table.')
staticMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 2, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "staticMulticastAddress"))
if mibBuilder.loadTexts: staticMulticastEntry.setStatus('current')
if mibBuilder.loadTexts: staticMulticastEntry.setDescription('Static multicast Entry.')
staticMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 2, 1, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: staticMulticastAddress.setDescription('The static multicast address.')
staticMulticastPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 2, 1, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMulticastPorts.setStatus('current')
if mibBuilder.loadTexts: staticMulticastPorts.setDescription('The port map of the static multicast address.')
staticMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMulticastStatus.setStatus('current')
if mibBuilder.loadTexts: staticMulticastStatus.setDescription('The status is active to indicate normal.\n            Use createAndGo to create new on multiple SET.\n            Use createAndWait to create new on one SET all then active.\n            Use destroy to delete this row.')
gmrp = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3))
gmrpSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 1), )
if mibBuilder.loadTexts: gmrpSettingTable.setStatus('current')
if mibBuilder.loadTexts: gmrpSettingTable.setDescription('The GMRP setting table.')
gmrpSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: gmrpSettingEntry.setStatus('current')
if mibBuilder.loadTexts: gmrpSettingEntry.setDescription('The GMRP Setting Entry.')
enableGMRP = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableGMRP.setStatus('current')
if mibBuilder.loadTexts: enableGMRP.setDescription('Enable/Disable GMRP.')
gmrpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 2), )
if mibBuilder.loadTexts: gmrpTable.setStatus('current')
if mibBuilder.loadTexts: gmrpTable.setDescription('The GMRP status table.')
gmrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 2, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "gmrpMulticastGroup"))
if mibBuilder.loadTexts: gmrpEntry.setStatus('current')
if mibBuilder.loadTexts: gmrpEntry.setDescription('The GMRP Status Entry.')
gmrpMulticastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpMulticastGroup.setStatus('current')
if mibBuilder.loadTexts: gmrpMulticastGroup.setDescription('GMRP multicast group.')
gmrpFixedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 2, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpFixedPorts.setStatus('current')
if mibBuilder.loadTexts: gmrpFixedPorts.setDescription('The ports that joined GMRP multicast group manually.')
gmrpLearnedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpLearnedPorts.setStatus('current')
if mibBuilder.loadTexts: gmrpLearnedPorts.setDescription('The ports that joined GMRP multicast group by GMRP learning.')
rateLimiting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21))
rateLimitingMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("portDisable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rateLimitingMode.setStatus('current')
if mibBuilder.loadTexts: rateLimitingMode.setDescription('The rate limiting mode.')
normalModeRateLimitingIngressTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1), )
if mibBuilder.loadTexts: normalModeRateLimitingIngressTable.setStatus('current')
if mibBuilder.loadTexts: normalModeRateLimitingIngressTable.setDescription('The rate limiting table.')
normalModeRateLimitingIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: normalModeRateLimitingIngressEntry.setStatus('current')
if mibBuilder.loadTexts: normalModeRateLimitingIngressEntry.setDescription('Rate limiting Entry.')
limitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("all", 0), ("bmucast", 1), ("bmcast", 2), ("bcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitMode.setStatus('current')
if mibBuilder.loadTexts: limitMode.setDescription('The limit mode.')
lowPriLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notlimit", 0), ("limit128k", 1), ("limit256k", 2), ("limit512k", 3), ("limit1M", 4), ("limit2M", 5), ("limit4M", 6), ("limit8M", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowPriLimitRate.setStatus('current')
if mibBuilder.loadTexts: lowPriLimitRate.setDescription('The limiting rate of low priority queue.')
normalPriLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notlimit", 0), ("limit128k", 1), ("limit256k", 2), ("limit512k", 3), ("limit1M", 4), ("limit2M", 5), ("limit4M", 6), ("limit8M", 7), ("limit16M", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: normalPriLimitRate.setStatus('current')
if mibBuilder.loadTexts: normalPriLimitRate.setDescription('The limiting rate of normal priority queue.\n            The values being equal to or double value of lowPriLimitRate are valid for set.')
mediumPriLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notlimit", 0), ("limit128k", 1), ("limit256k", 2), ("limit512k", 3), ("limit1M", 4), ("limit2M", 5), ("limit4M", 6), ("limit8M", 7), ("limit16M", 8), ("limit32M", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mediumPriLimitRate.setStatus('current')
if mibBuilder.loadTexts: mediumPriLimitRate.setDescription('The limiting rate of medium priority queue.\n            The values being equal to or double value of normalPriLimitRate are valid for set.')
highPriLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("notlimit", 0), ("limit128k", 1), ("limit256k", 2), ("limit512k", 3), ("limit1M", 4), ("limit2M", 5), ("limit4M", 6), ("limit8M", 7), ("limit16M", 8), ("limit32M", 9), ("limit64M", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highPriLimitRate.setStatus('current')
if mibBuilder.loadTexts: highPriLimitRate.setDescription('The limiting rate of high priority queue.\n            The values being equal to or double value of mediumPriLimitRate are valid for set.')
egressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notlimited", 0), ("percentage03", 1), ("percentage05", 2), ("percentage10", 3), ("percentage15", 4), ("percentage25", 5), ("percentage35", 6), ("percentage50", 7), ("percentage65", 8), ("percentage85", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressLimit.setStatus('current')
if mibBuilder.loadTexts: egressLimit.setDescription('The ingress limit mode.')
portDisableMode = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 3))
portDisableModePeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDisableModePeriod.setStatus('current')
if mibBuilder.loadTexts: portDisableModePeriod.setDescription('Check time. ')
portDisableModeTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 3, 2), )
if mibBuilder.loadTexts: portDisableModeTable.setStatus('current')
if mibBuilder.loadTexts: portDisableModeTable.setDescription('The rate limiting table.')
portDisableModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 3, 2, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: portDisableModeEntry.setStatus('current')
if mibBuilder.loadTexts: portDisableModeEntry.setDescription('Rate limiting Entry.')
ingressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("notlimited", 0), ("rateMega1Fps4464", 1), ("rateMega2Fps7441", 2), ("rateMega3Fps14881", 3), ("rateMega4Fps22322", 4), ("rateMega5Fps37203", 5), ("rateMega6Fps52084", 6), ("rateMega7Fps74405", 7), ("rateGiga1Fps44640", 8), ("rateGiga2Fps74410", 9), ("rateGiga3Fps148810", 10), ("rateGiga4Fps223220", 11), ("rateGiga5Fps372030", 12), ("rateGiga6Fps520840", 13), ("rateGiga7Fps744050", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressLimit.setStatus('current')
if mibBuilder.loadTexts: ingressLimit.setDescription('The ingress limit mode.')
security = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22))
userLoginSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1))
userLoginServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tacacs", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLoginServer.setStatus('current')
if mibBuilder.loadTexts: userLoginServer.setDescription('Set user login server option.')
tacacsServerSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 2))
tacacsLoginAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthServer.setStatus('current')
if mibBuilder.loadTexts: tacacsLoginAuthServer.setDescription('Set Tacacs+ Server IP Address/Domain name.')
tacacsLoginAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthPort.setStatus('current')
if mibBuilder.loadTexts: tacacsLoginAuthPort.setDescription('Set Tacacs+ Port.')
tacacsLoginAuthSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthSharedKey.setStatus('current')
if mibBuilder.loadTexts: tacacsLoginAuthSharedKey.setDescription('Set Tacacs+ Shared Key.')
tacacsLoginAuthAuthType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("ascii", 0), ("pap", 1), ("chap", 2), ("mschap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthAuthType.setStatus('current')
if mibBuilder.loadTexts: tacacsLoginAuthAuthType.setDescription('Set Tacacs+ Shared Key.')
tacacsLoginAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: tacacsLoginAuthTimeout.setDescription('Set Tacacs+ Shared Key.')
radiusServerSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 3))
radiusLoginAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthServer.setStatus('current')
if mibBuilder.loadTexts: radiusLoginAuthServer.setDescription('Set Radius Server IP Address/Domain name.')
radiusLoginAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthPort.setStatus('current')
if mibBuilder.loadTexts: radiusLoginAuthPort.setDescription('Set Radius Port.')
radiusLoginAuthSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthSharedKey.setStatus('current')
if mibBuilder.loadTexts: radiusLoginAuthSharedKey.setDescription('Set Radius Shared Key.')
radiusLoginAuthAuthType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("eap-md5", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthAuthType.setStatus('current')
if mibBuilder.loadTexts: radiusLoginAuthAuthType.setDescription('Set Radius Shared Key.')
radiusLoginAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusLoginAuthTimeout.setDescription('Set Radius Shared Key.')
portAccessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2))
staticPortLock = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 1))
staticPortLockAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockAddress.setStatus('current')
if mibBuilder.loadTexts: staticPortLockAddress.setDescription('The static port lock address.')
staticPortLockPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockPort.setStatus('current')
if mibBuilder.loadTexts: staticPortLockPort.setDescription('The port of the static port lock address.')
staticPortLockStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockStatus.setStatus('current')
if mibBuilder.loadTexts: staticPortLockStatus.setDescription('The status is active to indicate normal.\n            Use createAndGo to create new on multiple SET.')
dot1x = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2))
dataBaseOption = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("radiuslocal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataBaseOption.setStatus('current')
if mibBuilder.loadTexts: dataBaseOption.setDescription('Set IEEE 802.1X database option.')
dot1xReauthEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xReauthEnable.setStatus('current')
if mibBuilder.loadTexts: dot1xReauthEnable.setDescription('Enable/Disable IEEE 802.1X Re-authentication.')
dot1xReauthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xReauthPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xReauthPeriod.setDescription('Set IEEE 802.1X Re-authentication Period.')
dot1xSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 7), )
if mibBuilder.loadTexts: dot1xSettingTable.setStatus('current')
if mibBuilder.loadTexts: dot1xSettingTable.setDescription('IEEE 802.1X Port Setting Table.')
dot1xSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 7, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: dot1xSettingEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xSettingEntry.setDescription('IEEE 802.1X Port Setting Entry.')
enableDot1X = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableDot1X.setStatus('current')
if mibBuilder.loadTexts: enableDot1X.setDescription('Enable/Disable IEEE 802.1X.')
dot1xReauthTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 8), )
if mibBuilder.loadTexts: dot1xReauthTable.setStatus('current')
if mibBuilder.loadTexts: dot1xReauthTable.setDescription('IEEE 802.1X Re-authentication Table.')
dot1xReauthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 8, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "dot1xReauthPortIndex"))
if mibBuilder.loadTexts: dot1xReauthEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xReauthEntry.setDescription('IEEE 802.1X Re-authentication Entry.')
dot1xReauthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xReauthPortIndex.setStatus('current')
if mibBuilder.loadTexts: dot1xReauthPortIndex.setDescription('IEEE 802.1X Enabled Port Index.')
dot1xReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xReauth.setStatus('current')
if mibBuilder.loadTexts: dot1xReauth.setDescription('Reauth IEEE 802.1X.')
dot1xRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9))
dot1xSameAsAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSame", 0), ("same", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xSameAsAuthServer.setStatus('current')
if mibBuilder.loadTexts: dot1xSameAsAuthServer.setDescription('Set Radius Server IP Address/Domain name.')
dot1x1stRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x1stRadiusServer.setStatus('current')
if mibBuilder.loadTexts: dot1x1stRadiusServer.setDescription('Set Radius Server IP Address/Domain name.')
dot1x1stRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x1stRadiusPort.setStatus('current')
if mibBuilder.loadTexts: dot1x1stRadiusPort.setDescription('Set Radius Port.')
dot1x1stRadiusSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x1stRadiusSharedKey.setStatus('current')
if mibBuilder.loadTexts: dot1x1stRadiusSharedKey.setDescription('Set Radius Shared Key.')
dot1x2ndRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x2ndRadiusServer.setStatus('current')
if mibBuilder.loadTexts: dot1x2ndRadiusServer.setDescription('Set Radius Server IP Address/Domain name.')
dot1x2ndRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x2ndRadiusPort.setStatus('current')
if mibBuilder.loadTexts: dot1x2ndRadiusPort.setDescription('Set Radius Port.')
dot1x2ndRadiusSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x2ndRadiusSharedKey.setStatus('current')
if mibBuilder.loadTexts: dot1x2ndRadiusSharedKey.setDescription('Set Radius Shared Key.')
portAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 3), )
if mibBuilder.loadTexts: portAccessControlTable.setStatus('current')
if mibBuilder.loadTexts: portAccessControlTable.setDescription('The Port Access Control table.')
portAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 3, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portAccessControlAddress"))
if mibBuilder.loadTexts: portAccessControlEntry.setStatus('current')
if mibBuilder.loadTexts: portAccessControlEntry.setDescription('The Port Access Control table entry.')
portAccessControlAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAccessControlAddress.setStatus('current')
if mibBuilder.loadTexts: portAccessControlAddress.setDescription('The MAC address which is static locked or IEEE 802.1X authorized.')
portAccessControlPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAccessControlPortNo.setStatus('current')
if mibBuilder.loadTexts: portAccessControlPortNo.setDescription('The port number that the Port Access Control address resides.')
portAccessControlAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("staticLock", 1), ("authorized", 2), ("unAuthorized", 3), ("authorizing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAccessControlAccessStatus.setStatus('current')
if mibBuilder.loadTexts: portAccessControlAccessStatus.setDescription('The access status of the Port Access Control address.')
portAccessControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portAccessControlStatus.setStatus('current')
if mibBuilder.loadTexts: portAccessControlStatus.setDescription('The status is active to indicate normal.\n            Use createAndGo to create new on multiple SET.\n            Use createAndWait to create new on one SET all then active.\n            Use destroy to delete this row.')
accessibleIP = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 30))
enableAccessibleIP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAccessibleIP.setStatus('current')
if mibBuilder.loadTexts: enableAccessibleIP.setDescription('Enable the accessible IP address list.')
accessibleIpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 30, 2), )
if mibBuilder.loadTexts: accessibleIpTable.setStatus('current')
if mibBuilder.loadTexts: accessibleIpTable.setDescription('accessibleIP.')
accessibleIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 30, 2, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "accessibleIpAddress"))
if mibBuilder.loadTexts: accessibleIpEntry.setStatus('current')
if mibBuilder.loadTexts: accessibleIpEntry.setDescription('Accessible IP address entry.')
accessibleIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 30, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessibleIpAddress.setStatus('current')
if mibBuilder.loadTexts: accessibleIpAddress.setDescription('Accessible IP address')
accessibleIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 30, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessibleIpNetMask.setStatus('current')
if mibBuilder.loadTexts: accessibleIpNetMask.setDescription('Accessible IP netmask.')
accessibleIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessibleIpStatus.setStatus('current')
if mibBuilder.loadTexts: accessibleIpStatus.setDescription('The status is active to indicate normal.\n            Use createAndGo to create new on multiple SET.\n            Use createAndWait to create new on one SET all then active.\n            Use destroy to delete this row.')
sysFileUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 31))
tftpServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 31, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServer.setStatus('current')
if mibBuilder.loadTexts: tftpServer.setDescription('The TFTP Server name(IP Address)')
firmwarePathName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 31, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwarePathName.setStatus('current')
if mibBuilder.loadTexts: firmwarePathName.setDescription('The path name of firmware file in the TFTP Server')
logPathName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 31, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logPathName.setStatus('current')
if mibBuilder.loadTexts: logPathName.setDescription('The path name of log file in the TFTP Server')
confPathName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 31, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confPathName.setStatus('current')
if mibBuilder.loadTexts: confPathName.setDescription('The path name of configuration file in the TFTP Server')
tftpUpdate = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 31, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("importFirmware", 1), ("importConfig", 2), ("exportConfig", 3), ("exportLog", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tftpUpdate.setStatus('current')
if mibBuilder.loadTexts: tftpUpdate.setDescription('')
timeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32))
sysDateTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDateTime.setStatus('current')
if mibBuilder.loadTexts: sysDateTime.setDescription('The date time of system')
calibratePeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calibratePeriod.setStatus('current')
if mibBuilder.loadTexts: calibratePeriod.setDescription('The period (seconds) that calibrate with time server')
timeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer1.setStatus('current')
if mibBuilder.loadTexts: timeServer1.setDescription('The first time server')
timeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer2.setStatus('current')
if mibBuilder.loadTexts: timeServer2.setDescription('The second time server')
daylightSaving = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5))
startMonth = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("na", 0), ("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startMonth.setStatus('current')
if mibBuilder.loadTexts: startMonth.setDescription('Setting Start Month of Daylight Saving time')
startWeek = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("na", 0), ("week1", 1), ("week2", 2), ("week3", 3), ("week4", 4), ("weeklast", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startWeek.setStatus('current')
if mibBuilder.loadTexts: startWeek.setDescription('Setting Start Week of Daylight Saving time')
startDay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("na", 0), ("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startDay.setStatus('current')
if mibBuilder.loadTexts: startDay.setDescription('Setting Start Day of Daylight Saving time')
startHour = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startHour.setStatus('current')
if mibBuilder.loadTexts: startHour.setDescription('Setting Start Hour of Daylight Saving time')
endMonth = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("na", 0), ("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endMonth.setStatus('current')
if mibBuilder.loadTexts: endMonth.setDescription('Setting End Month of Daylight Saving time')
endWeek = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("na", 0), ("week1", 1), ("week2", 2), ("week3", 3), ("week4", 4), ("weeklast", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endWeek.setStatus('current')
if mibBuilder.loadTexts: endWeek.setDescription('Setting End Week of Daylight Saving time')
endDay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("na", 0), ("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endDay.setStatus('current')
if mibBuilder.loadTexts: endDay.setDescription('Setting End Day of Daylight Saving time')
endHour = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endHour.setStatus('current')
if mibBuilder.loadTexts: endHour.setDescription('Setting End Hour of Daylight Saving time')
offsetHours = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: offsetHours.setStatus('current')
if mibBuilder.loadTexts: offsetHours.setDescription('Setting Offset Hours of Daylight Saving time')
enableNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableNTPServer.setStatus('current')
if mibBuilder.loadTexts: enableNTPServer.setDescription('This enable NTP Server.')
timeProtocolOption = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("sntp", 1), ("ntp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeProtocolOption.setStatus('current')
if mibBuilder.loadTexts: timeProtocolOption.setDescription('Time Protocol.')
dipSwitchSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 34))
dipSwitchEnableTurboRing = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 34, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dipSwitchEnableTurboRing.setStatus('current')
if mibBuilder.loadTexts: dipSwitchEnableTurboRing.setDescription('Enable TurboRing Dip Switch functions')
dipSwitchTurboRingPole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 34, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dipSwitchTurboRingPole.setStatus('current')
if mibBuilder.loadTexts: dipSwitchTurboRingPole.setDescription('The TurboRing Pole status of Dip switch.')
dipSwitchRingCouplingPole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 34, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dipSwitchRingCouplingPole.setStatus('current')
if mibBuilder.loadTexts: dipSwitchRingCouplingPole.setDescription('The Ring Coupling Pole status of Dip switch.')
dipSwitchRingMasterPole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 34, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dipSwitchRingMasterPole.setStatus('current')
if mibBuilder.loadTexts: dipSwitchRingMasterPole.setDescription('The Ring Master Pole status of Dip switch.')
backupMediaSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 35))
backupMediaAutoLoad = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 35, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupMediaAutoLoad.setStatus('current')
if mibBuilder.loadTexts: backupMediaAutoLoad.setDescription('Enable Abc-01 backupMedia configuration PowerOn Auto Load functions')
enableWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableWarmStart.setStatus('current')
if mibBuilder.loadTexts: enableWarmStart.setDescription('Enable to restart MOXA ethernet switch.')
syslogSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 37))
syslogServer1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 37, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer1.setStatus('current')
if mibBuilder.loadTexts: syslogServer1.setDescription('The syslog server 1')
syslogServer1port = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 37, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer1port.setStatus('current')
if mibBuilder.loadTexts: syslogServer1port.setDescription('The syslog server 1 port')
syslogServer2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 37, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer2.setStatus('current')
if mibBuilder.loadTexts: syslogServer2.setDescription('The syslog server 2')
syslogServer2port = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 37, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer2port.setStatus('current')
if mibBuilder.loadTexts: syslogServer2port.setDescription('The syslog server 2 port')
syslogServer3 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 37, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer3.setStatus('current')
if mibBuilder.loadTexts: syslogServer3.setDescription('The syslog server 3')
syslogServer3port = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 37, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer3port.setStatus('current')
if mibBuilder.loadTexts: syslogServer3port.setDescription('The syslog server 3 port')
dhcpRelayAgentSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39))
dhcpServer1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer1.setStatus('current')
if mibBuilder.loadTexts: dhcpServer1.setDescription('The dhcp Relay Agent Server 1.')
dhcpServer2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer2.setStatus('current')
if mibBuilder.loadTexts: dhcpServer2.setDescription('The dhcp Relay Agent Server 2.')
dhcpServer3 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer3.setStatus('current')
if mibBuilder.loadTexts: dhcpServer3.setDescription('The dhcp Relay Agent Server 3.')
dhcpServer4 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer4.setStatus('current')
if mibBuilder.loadTexts: dhcpServer4.setDescription('The dhcp Relay Agent Server 4.')
option82Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 5))
enableOption82 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableOption82.setStatus('current')
if mibBuilder.loadTexts: enableOption82.setDescription('Enable DHCP Option 82')
option82Type = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ip", 0), ("mac", 1), ("client-id", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: option82Type.setStatus('current')
if mibBuilder.loadTexts: option82Type.setDescription('Option 82 Type selector ')
option82Value = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: option82Value.setStatus('current')
if mibBuilder.loadTexts: option82Value.setDescription('Option 82 Type Value')
option82ValueDisplay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: option82ValueDisplay.setStatus('current')
if mibBuilder.loadTexts: option82ValueDisplay.setDescription('Option 82 Type Value Display')
dhcpFunctionTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 6), )
if mibBuilder.loadTexts: dhcpFunctionTable.setStatus('current')
if mibBuilder.loadTexts: dhcpFunctionTable.setDescription('DHCP Function Table.')
dhcpFunctionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 6, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "dhcpPortIndex"))
if mibBuilder.loadTexts: dhcpFunctionEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpFunctionEntry.setDescription('DHCP Function Table Entry.')
dhcpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPortIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpPortIndex.setDescription('The DHCP Port Index.')
circuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitID.setStatus('current')
if mibBuilder.loadTexts: circuitID.setDescription('The Circuit ID.')
option82Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: option82Enable.setStatus('current')
if mibBuilder.loadTexts: option82Enable.setDescription('This enable option 82 of the port.')
poeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40))
poePortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3), )
if mibBuilder.loadTexts: poePortTable.setStatus('current')
if mibBuilder.loadTexts: poePortTable.setDescription('Poe Port Function Table.')
poePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "poePortIndex"))
if mibBuilder.loadTexts: poePortEntry.setStatus('current')
if mibBuilder.loadTexts: poePortEntry.setDescription('Poe Port Function Table Entry.')
poePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortIndex.setStatus('current')
if mibBuilder.loadTexts: poePortIndex.setDescription('PoE port index.')
poePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortEnable.setStatus('current')
if mibBuilder.loadTexts: poePortEnable.setDescription('PoE port Enable.')
poePowerOutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("highPower", 1), ("force", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePowerOutputMode.setStatus('current')
if mibBuilder.loadTexts: poePowerOutputMode.setDescription('PoE port Power Output Mode.')
powerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLimit.setStatus('current')
if mibBuilder.loadTexts: powerLimit.setDescription('PoE Port Power Budget')
pdfailure = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdfailure.setStatus('current')
if mibBuilder.loadTexts: pdfailure.setDescription('PD check Enable per port.')
pdipaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdipaddr.setStatus('current')
if mibBuilder.loadTexts: pdipaddr.setDescription('PD ip address.')
pdPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdPollingInterval.setStatus('current')
if mibBuilder.loadTexts: pdPollingInterval.setDescription('PD check interval')
poeporttimetabling = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeporttimetabling.setStatus('current')
if mibBuilder.loadTexts: poeporttimetabling.setDescription('PoE port timetabling')
poeTimeTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 5), )
if mibBuilder.loadTexts: poeTimeTable.setStatus('current')
if mibBuilder.loadTexts: poeTimeTable.setDescription('PoE Time Table.')
poeTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 5, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "poeTPortIndex"), (0, "MOXA-EDSP510A8POE-MIB", "poeWeekDay"))
if mibBuilder.loadTexts: poeTimeEntry.setStatus('current')
if mibBuilder.loadTexts: poeTimeEntry.setDescription('PoE Time Table Entry.')
poeTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeTPortIndex.setStatus('current')
if mibBuilder.loadTexts: poeTPortIndex.setDescription('port Index for time table.')
poeWeekDay = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeWeekDay.setStatus('current')
if mibBuilder.loadTexts: poeWeekDay.setDescription('day index for a week.')
poeDayEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeDayEnable.setStatus('current')
if mibBuilder.loadTexts: poeDayEnable.setDescription('Enable or not for one day.')
poeDayStart = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeDayStart.setStatus('current')
if mibBuilder.loadTexts: poeDayStart.setDescription('PoE Port Start Time')
poeDayStop = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeDayStop.setStatus('current')
if mibBuilder.loadTexts: poeDayStop.setDescription('PoE Port Stop Time')
poeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 6), )
if mibBuilder.loadTexts: poeStatusTable.setStatus('current')
if mibBuilder.loadTexts: poeStatusTable.setDescription('PoE Status Table.')
poeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 6, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "poePortIndex"))
if mibBuilder.loadTexts: poeStatusEntry.setStatus('current')
if mibBuilder.loadTexts: poeStatusEntry.setDescription('PoE Status Table Entry.')
poePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortStatus.setStatus('current')
if mibBuilder.loadTexts: poePortStatus.setDescription('PoE port Status.')
poePortConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortConsumption.setStatus('current')
if mibBuilder.loadTexts: poePortConsumption.setDescription('PoE port Consumption')
poePortVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortVoltage.setStatus('current')
if mibBuilder.loadTexts: poePortVoltage.setDescription('PoE port Voltage')
poePortCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrent.setStatus('current')
if mibBuilder.loadTexts: poePortCurrent.setDescription('PoE port Current')
ieee1588Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41))
ptpv1Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 1))
enablePtpv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePtpv1.setStatus('current')
if mibBuilder.loadTexts: enablePtpv1.setDescription('This enable the PTP function.')
clockModev1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1BC", 0), ("v2E2E2stepTC", 1), ("v2E2E1stepTC", 2), ("v2P2PTC", 3), ("v2E2EBC", 4), ("v2P2PBC", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockModev1.setStatus('current')
if mibBuilder.loadTexts: clockModev1.setDescription('the clock mode of the PTP clock.')
syncIntervalv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("oneSec", 0), ("twoSec", 1), ("fourSec", 2), ("eightSec", 3), ("sixteenSec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncIntervalv1.setStatus('current')
if mibBuilder.loadTexts: syncIntervalv1.setDescription('the logSyncInterval of the PTP clock.')
subDomainNamev1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("dflt", 0), ("alt1", 1), ("alt2", 2), ("alt3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subDomainNamev1.setStatus('current')
if mibBuilder.loadTexts: subDomainNamev1.setDescription('The subdomain name of the PTP clock.')
preferMasterv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferMasterv1.setStatus('current')
if mibBuilder.loadTexts: preferMasterv1.setDescription('This enable the PTP prefer master function.')
ptpv2Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2))
enablePtp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePtp.setStatus('current')
if mibBuilder.loadTexts: enablePtp.setDescription('This enable the PTP function.')
clockMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1BC", 0), ("v2E2E2stepTC", 1), ("v2E2E1stepTC", 2), ("v2P2PTC", 3), ("v2E2EBC", 4), ("v2P2PBC", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockMode.setStatus('current')
if mibBuilder.loadTexts: clockMode.setDescription('the clock mode of the PTP clock.')
transport = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ieee802dot3", 0), ("ipv4", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transport.setStatus('current')
if mibBuilder.loadTexts: transport.setDescription('the transport mode of the PTP clock.')
syncInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-3, -2, -1, 0, 1))).clone(namedValues=NamedValues(("t128msec", -3), ("t256msec", -2), ("t512msec", -1), ("t1sec", 0), ("t2sec", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncInterval.setStatus('current')
if mibBuilder.loadTexts: syncInterval.setDescription('the logSyncInterval of the PTP clock.')
logMinDelayReqInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1sec", 0), ("t2sec", 1), ("t4sec", 2), ("t8sec", 3), ("t16sec", 4), ("t32sec", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMinDelayReqInterval.setStatus('current')
if mibBuilder.loadTexts: logMinDelayReqInterval.setDescription('the logMinDelayReqInterval of the PTP clock.')
logMinPdelayReqInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t512msec", -1), ("t1sec", 0), ("t2sec", 1), ("t4sec", 2), ("t8sec", 3), ("t16sec", 4), ("t32sec", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMinPdelayReqInterval.setStatus('current')
if mibBuilder.loadTexts: logMinPdelayReqInterval.setDescription('the logMinPdelayReqInterval of the PTP clock.')
logAnnounceInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("t1sec", 0), ("t2sec", 1), ("t4sec", 2), ("t8sec", 3), ("t16sec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logAnnounceInterval.setStatus('current')
if mibBuilder.loadTexts: logAnnounceInterval.setDescription('the logAnnounceInterval of the PTP clock.')
announceReceiptTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: announceReceiptTimeout.setStatus('current')
if mibBuilder.loadTexts: announceReceiptTimeout.setDescription('the announceReceiptTimeout of the PTP clock.')
priority1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priority1.setStatus('current')
if mibBuilder.loadTexts: priority1.setDescription('the priority1 of the PTP clock.')
priority2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priority2.setStatus('current')
if mibBuilder.loadTexts: priority2.setDescription('the priority2 of the PTP clock.')
clockClass = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockClass.setStatus('current')
if mibBuilder.loadTexts: clockClass.setDescription('the clockClass of the PTP clock.')
domainNumber = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("dflt", 0), ("alt1", 1), ("alt2", 2), ("alt3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainNumber.setStatus('current')
if mibBuilder.loadTexts: domainNumber.setDescription('The domain number of the PTP clock.')
localUtcOffset = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUtcOffset.setStatus('current')
if mibBuilder.loadTexts: localUtcOffset.setDescription('the UTC offset of the local PTP clock.')
localUtcOffsetValid = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUtcOffsetValid.setStatus('current')
if mibBuilder.loadTexts: localUtcOffsetValid.setDescription('the UTC offset valid of the local PTP clock.')
localLeap59 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localLeap59.setStatus('current')
if mibBuilder.loadTexts: localLeap59.setDescription('the leap59 of the local PTP clock.')
localLeap61 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localLeap61.setStatus('current')
if mibBuilder.loadTexts: localLeap61.setDescription('the leap61 of the local PTP clock.')
localPtpTimescale = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("arb", 0), ("ptp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localPtpTimescale.setStatus('current')
if mibBuilder.loadTexts: localPtpTimescale.setDescription('the timescale of the local PTP clock.')
localArbTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localArbTime.setStatus('current')
if mibBuilder.loadTexts: localArbTime.setDescription('the ARB time of the local PTP clock.')
ptpv1Status = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 3))
offsetToMasterv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: offsetToMasterv1.setStatus('current')
if mibBuilder.loadTexts: offsetToMasterv1.setDescription('The offset to master for nsec.')
meanPathDelayv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meanPathDelayv1.setStatus('current')
if mibBuilder.loadTexts: meanPathDelayv1.setDescription('The mean path delay of the PTP clock.')
grandMasterUuidv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 3, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandMasterUuidv1.setStatus('current')
if mibBuilder.loadTexts: grandMasterUuidv1.setDescription('The grand master UUID address of the PTP clock.')
parentUuidv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 3, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parentUuidv1.setStatus('current')
if mibBuilder.loadTexts: parentUuidv1.setDescription('The parent master UUID address of the PTP clock.')
clockStratumv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockStratumv1.setStatus('current')
if mibBuilder.loadTexts: clockStratumv1.setDescription('The clock stratum of the PTP clock.')
clockIdentifierv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockIdentifierv1.setStatus('current')
if mibBuilder.loadTexts: clockIdentifierv1.setDescription('The clock identifier of the PTP clock.')
ptpv2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4))
offsetToMaster = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: offsetToMaster.setStatus('current')
if mibBuilder.loadTexts: offsetToMaster.setDescription('The offset to master for nsec.')
meanPathDelay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meanPathDelay.setStatus('current')
if mibBuilder.loadTexts: meanPathDelay.setDescription('The mean path delay of the PTP clock.')
parentIdentity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parentIdentity.setStatus('current')
if mibBuilder.loadTexts: parentIdentity.setDescription('The parent identity of the PTP clock.')
grandmasterIdentity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterIdentity.setStatus('current')
if mibBuilder.loadTexts: grandmasterIdentity.setDescription('The grandmaster identity of the PTP clock.')
grandmasterClockClass = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterClockClass.setStatus('current')
if mibBuilder.loadTexts: grandmasterClockClass.setDescription('The grandmaster clockClass of the PTP clock.')
grandmasterClockAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterClockAccuracy.setStatus('current')
if mibBuilder.loadTexts: grandmasterClockAccuracy.setDescription('The grandmaster clockAccuracy of the PTP clock.')
grandmasterPriority1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterPriority1.setStatus('current')
if mibBuilder.loadTexts: grandmasterPriority1.setDescription('The grandmaster priority1 of the PTP clock.')
grandmasterPriority2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterPriority2.setStatus('current')
if mibBuilder.loadTexts: grandmasterPriority2.setDescription('The grandmaster priority2 of the PTP clock.')
stepsRemoved = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stepsRemoved.setStatus('current')
if mibBuilder.loadTexts: stepsRemoved.setDescription('The steps removed of the PTP clock.')
currentUtcOffset = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentUtcOffset.setStatus('current')
if mibBuilder.loadTexts: currentUtcOffset.setDescription('The current utc offset of the PTP clock.')
currentUtcOffsetValid = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentUtcOffsetValid.setStatus('current')
if mibBuilder.loadTexts: currentUtcOffsetValid.setDescription('The current utc offset valid flag of the PTP clock.')
leap59 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leap59.setStatus('current')
if mibBuilder.loadTexts: leap59.setDescription('The leap59 of the PTP clock.')
leap61 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leap61.setStatus('current')
if mibBuilder.loadTexts: leap61.setDescription('The leap61 of the PTP clock.')
ptpTimescale = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpTimescale.setStatus('current')
if mibBuilder.loadTexts: ptpTimescale.setDescription('The ptp timescale of the PTP clock.')
timesource = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timesource.setStatus('current')
if mibBuilder.loadTexts: timesource.setDescription('The timesource of the PTP clock.')
ptpPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 5), )
if mibBuilder.loadTexts: ptpPortTable.setStatus('current')
if mibBuilder.loadTexts: ptpPortTable.setDescription('The ptp port table.')
ptpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 5, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "ptpPortIndex"))
if mibBuilder.loadTexts: ptpPortEntry.setStatus('current')
if mibBuilder.loadTexts: ptpPortEntry.setDescription('The ptp port entry.')
ptpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpPortIndex.setStatus('current')
if mibBuilder.loadTexts: ptpPortIndex.setDescription('The ptp port index.')
ptpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptpPortEnable.setStatus('current')
if mibBuilder.loadTexts: ptpPortEnable.setDescription('This enable the ptp port.')
ptpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ptpInitializing", 0), ("ptpFaulty", 1), ("ptpDisabled", 2), ("ptpListening", 3), ("ptpPreMaster", 4), ("ptpMaster", 5), ("ptpPassive", 6), ("ptpUncalibrated", 7), ("ptpSlave", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpPortStatus.setStatus('current')
if mibBuilder.loadTexts: ptpPortStatus.setDescription('This port status of the PTP clock.')
varconfigChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("configChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varconfigChangeTrap.setStatus('current')
if mibBuilder.loadTexts: varconfigChangeTrap.setDescription('The configuration has been changed.')
configChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0, 1)).setObjects(("MOXA-EDSP510A8POE-MIB", "varconfigChangeTrap"))
if mibBuilder.loadTexts: configChangeTrap.setStatus('current')
if mibBuilder.loadTexts: configChangeTrap.setDescription('The configuration has been changed.')
varpower1Trap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on2off", 2), ("off2on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varpower1Trap.setStatus('current')
if mibBuilder.loadTexts: varpower1Trap.setDescription('The power on/off changed.')
power1Trap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0, 2)).setObjects(("MOXA-EDSP510A8POE-MIB", "varpower1Trap"))
if mibBuilder.loadTexts: power1Trap.setStatus('current')
if mibBuilder.loadTexts: power1Trap.setDescription('The power on/off changed.')
varpower2Trap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on2off", 2), ("off2on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varpower2Trap.setStatus('current')
if mibBuilder.loadTexts: varpower2Trap.setDescription('The power on/off changed.')
power2Trap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0, 3)).setObjects(("MOXA-EDSP510A8POE-MIB", "varpower2Trap"))
if mibBuilder.loadTexts: power2Trap.setStatus('current')
if mibBuilder.loadTexts: power2Trap.setDescription('The power on/off changed.')
vartrafficOverloadTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vartrafficOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: vartrafficOverloadTrap.setDescription("The ethernet port's traffic loading exceeds the pre-defined value.")
trafficOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0, 4)).setObjects(("MOXA-EDSP510A8POE-MIB", "vartrafficOverloadTrap"))
if mibBuilder.loadTexts: trafficOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: trafficOverloadTrap.setDescription("The ethernet port's traffic loading exceeds the pre-defined value.")
varredundancyTopologyChangedTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("topologyChanged", 2), ("topologyChangedTurboChainHead", 3), ("topologyChangedTurboChainTail", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varredundancyTopologyChangedTrap.setStatus('current')
if mibBuilder.loadTexts: varredundancyTopologyChangedTrap.setDescription('The redundancy topology has been changed.')
redundancyTopologyChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0, 5)).setObjects(("MOXA-EDSP510A8POE-MIB", "varredundancyTopologyChangedTrap"))
if mibBuilder.loadTexts: redundancyTopologyChangedTrap.setStatus('current')
if mibBuilder.loadTexts: redundancyTopologyChangedTrap.setDescription('The redundancy topology has been changed.')
varturboRingCouplingPortChangedTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("couplingPortChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varturboRingCouplingPortChangedTrap.setStatus('current')
if mibBuilder.loadTexts: varturboRingCouplingPortChangedTrap.setDescription('The coupling path of Turbo Ring has been changed.')
turboRingCouplingPortChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0, 6)).setObjects(("MOXA-EDSP510A8POE-MIB", "varturboRingCouplingPortChangedTrap"))
if mibBuilder.loadTexts: turboRingCouplingPortChangedTrap.setStatus('current')
if mibBuilder.loadTexts: turboRingCouplingPortChangedTrap.setDescription('The coupling path of Turbo Ring has been changed.')
varturboRingMasterChangedTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ringMasterChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varturboRingMasterChangedTrap.setStatus('current')
if mibBuilder.loadTexts: varturboRingMasterChangedTrap.setDescription('The master of Turbo Ring has been changed.')
turboRingMasterChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0, 7)).setObjects(("MOXA-EDSP510A8POE-MIB", "varturboRingMasterChangedTrap"))
if mibBuilder.loadTexts: turboRingMasterChangedTrap.setStatus('current')
if mibBuilder.loadTexts: turboRingMasterChangedTrap.setDescription('The master of Turbo Ring has been changed.')
varPoEWarningTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("pdOverCurrent", 1), ("pdCheckFail", 2), ("pdPowerOn", 3), ("pdPowerOff", 4), ("exceedSystemThreshold", 5), ("pseFetBad", 6), ("pseOverTemperature", 7), ("pseVeeUvlo", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varPoEWarningTrap.setStatus('current')
if mibBuilder.loadTexts: varPoEWarningTrap.setDescription('The POE warning message.')
diagnosis = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 42))
lldpSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 42, 1))
enableLLDP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 42, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableLLDP.setStatus('current')
if mibBuilder.loadTexts: enableLLDP.setDescription('This enable the LLDP function.')
lldpMSGInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 42, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMSGInterval.setStatus('current')
if mibBuilder.loadTexts: lldpMSGInterval.setDescription('The LLDP message transmit interval.')
industrialProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 47))
eipSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 47, 1))
modbusTCPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 47, 2))
enableEtherNetIP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 47, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableEtherNetIP.setStatus('current')
if mibBuilder.loadTexts: enableEtherNetIP.setDescription('This enable the EtherNet/IP function.')
enableModbusTCP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 47, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableModbusTCP.setStatus('current')
if mibBuilder.loadTexts: enableModbusTCP.setDescription('This enable the Modbus TCP function.')
garpSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 45))
leaveAllTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 45, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: leaveAllTime.setStatus('current')
if mibBuilder.loadTexts: leaveAllTime.setDescription('Leaveall Time (ms).')
leaveTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 45, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: leaveTime.setStatus('current')
if mibBuilder.loadTexts: leaveTime.setDescription('Leave Time (ms).')
joinTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 45, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: joinTime.setStatus('current')
if mibBuilder.loadTexts: joinTime.setDescription('Join Time (ms).')
enableFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableFactoryDefault.setStatus('current')
if mibBuilder.loadTexts: enableFactoryDefault.setDescription('Reset all EtherDevice switch settings to factory default values')
eventlog = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46))
eventlogTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1), )
if mibBuilder.loadTexts: eventlogTable.setStatus('current')
if mibBuilder.loadTexts: eventlogTable.setDescription('The table of eventlog.')
eventlogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "eventlogIndex"))
if mibBuilder.loadTexts: eventlogEntry.setStatus('current')
if mibBuilder.loadTexts: eventlogEntry.setDescription('The table entry of eventlog.')
eventlogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogIndex.setStatus('current')
if mibBuilder.loadTexts: eventlogIndex.setDescription('The index of eventlog entry.')
eventlogBootup = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogBootup.setStatus('current')
if mibBuilder.loadTexts: eventlogBootup.setDescription('The reboot count of the system.')
eventlogDate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogDate.setStatus('current')
if mibBuilder.loadTexts: eventlogDate.setDescription('The date of the event occurred.')
eventlogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogTime.setStatus('current')
if mibBuilder.loadTexts: eventlogTime.setDescription('The time of the event occurred.')
eventlogUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogUptime.setStatus('current')
if mibBuilder.loadTexts: eventlogUptime.setDescription('The time of the event occurred after booting up.')
eventlogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogEvent.setStatus('current')
if mibBuilder.loadTexts: eventlogEvent.setDescription('The event which occurred in the system.')
eventlogClear = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventlogClear.setStatus('current')
if mibBuilder.loadTexts: eventlogClear.setDescription('To clear the eventlog, set value 1 to this field.')
cpuLoading5s = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoading5s.setStatus('current')
if mibBuilder.loadTexts: cpuLoading5s.setDescription('CPU Loading for the past 5 seconds in %.')
cpuLoading30s = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoading30s.setStatus('current')
if mibBuilder.loadTexts: cpuLoading30s.setDescription('CPU Loading for the past 30 seconds in %.')
cpuLoading300s = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoading300s.setStatus('current')
if mibBuilder.loadTexts: cpuLoading300s.setDescription('CPU Loading for the past 5 minutes in %.')
totalMemory = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalMemory.setStatus('current')
if mibBuilder.loadTexts: totalMemory.setDescription('Total size of System RAM.')
freeMemory = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMemory.setStatus('current')
if mibBuilder.loadTexts: freeMemory.setDescription('Total size of free dynamic memory')
usedMemory = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usedMemory.setStatus('current')
if mibBuilder.loadTexts: usedMemory.setDescription('Total size of used dynamic memory')
memoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryUsage.setStatus('current')
if mibBuilder.loadTexts: memoryUsage.setDescription('The usage of memory size in %.')
loopProtection = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopProtection.setStatus('current')
if mibBuilder.loadTexts: loopProtection.setDescription('This enable the Loop Protection function.')
mibBuilder.exportSymbols("MOXA-EDSP510A8POE-MIB", portDisableMode=portDisableMode, daylightSaving=daylightSaving, trunkSettingTable=trunkSettingTable, turboChainPort1=turboChainPort1, staticMulticastAddress=staticMulticastAddress, portDisableModeEntry=portDisableModeEntry, turboChainRole=turboChainRole, portbaseVlanSettingEntry=portbaseVlanSettingEntry, numberOfPorts=numberOfPorts, commRedundancy=commRedundancy, switchModel=switchModel, cpuLoading300s=cpuLoading300s, qosPortEntry=qosPortEntry, portFDXFlowCtrl=portFDXFlowCtrl, meanPathDelay=meanPathDelay, enableNTPServer=enableNTPServer, varpower1Trap=varpower1Trap, portDisableModePeriod=portDisableModePeriod, couplingMode=couplingMode, backupMediaSetting=backupMediaSetting, cosMappedPriority=cosMappedPriority, PYSNMP_MODULE_ID=edsp510a8poe, emailService=emailService, snmpReadCommunity=snmpReadCommunity, clockMode=clockMode, emailWarningEventPortTrafficDuration=emailWarningEventPortTrafficDuration, dot1xReauthEntry=dot1xReauthEntry, emailWarningEventPortLinkOff=emailWarningEventPortLinkOff, gmrpFixedPorts=gmrpFixedPorts, turboRingMasterChangedTrap=turboRingMasterChangedTrap, tacacsLoginAuthTimeout=tacacsLoginAuthTimeout, turboRingControlPort=turboRingControlPort, relayWarningTable=relayWarningTable, snmpInformTimeout=snmpInformTimeout, spanningTree=spanningTree, gmrpSettingTable=gmrpSettingTable, calibratePeriod=calibratePeriod, parentIdentity=parentIdentity, eventlogTime=eventlogTime, gmrpTable=gmrpTable, eventlogEntry=eventlogEntry, poeSetting=poeSetting, ingressLimit=ingressLimit, poeStatusTable=poeStatusTable, tosMappingTable=tosMappingTable, emailWarningMailServer=emailWarningMailServer, vlanPortSettingTable=vlanPortSettingTable, priority1=priority1, trunkSettingIndex=trunkSettingIndex, vlanEntry=vlanEntry, spanningTreeMaxAge=spanningTreeMaxAge, monitorDiEntry=monitorDiEntry, queuingMechanism=queuingMechanism, syslogSetting=syslogSetting, relayWarningTurboRingBreak=relayWarningTurboRingBreak, dot1xReauthTable=dot1xReauthTable, emailWarningEventPortEntry=emailWarningEventPortEntry, pdfailure=pdfailure, fixedMulticastQuerierPorts=fixedMulticastQuerierPorts, enablePtpv1=enablePtpv1, multicastFastForwarding=multicastFastForwarding, staticMulticastStatus=staticMulticastStatus, moxa=moxa, option82Enable=option82Enable, grandmasterIdentity=grandmasterIdentity, spanningTreePortStatus=spanningTreePortStatus, staticPortLockStatus=staticPortLockStatus, monitorLinkStatus=monitorLinkStatus, dhcpRetryPeriods=dhcpRetryPeriods, enableSpanningTree=enableSpanningTree, localUtcOffset=localUtcOffset, emailWarningEventPortLinkOn=emailWarningEventPortLinkOn, enableGvrp=enableGvrp, spanningTreeRoot=spanningTreeRoot, portVlanType=portVlanType, ptpPortTable=ptpPortTable, emailWarningEventAuthFail=emailWarningEventAuthFail, enableLLDP=enableLLDP, rdnt2ndPortRing2=rdnt2ndPortRing2, dot1x2ndRadiusServer=dot1x2ndRadiusServer, portAccessControlPortNo=portAccessControlPortNo, portbaseVlanSettingTable=portbaseVlanSettingTable, qosPortTable=qosPortTable, offsetHours=offsetHours, timeServer1=timeServer1, emailWarningThirdEmailAddr=emailWarningThirdEmailAddr, portDesc=portDesc, grandmasterPriority1=grandmasterPriority1, eventlogTable=eventlogTable, staticPortLockAddress=staticPortLockAddress, pdipaddr=pdipaddr, masterSetupRing2=masterSetupRing2, staticMulticastPorts=staticMulticastPorts, portEnable=portEnable, diRelayWarningTable=diRelayWarningTable, turboChainPort2Status=turboChainPort2Status, emailWarning=emailWarning, syncInterval=syncInterval, couplingEnable=couplingEnable, vlanTable=vlanTable, portAccessControlEntry=portAccessControlEntry, leap61=leap61, emailWarningEventPortTable=emailWarningEventPortTable, priority2=priority2, relayWarningLinkChanged=relayWarningLinkChanged, power2Trap=power2Trap, option82Setting=option82Setting, ringEnableRing1=ringEnableRing1, accessibleIpEntry=accessibleIpEntry, emailWarningEventPortRxTrafficThreshold=emailWarningEventPortRxTrafficThreshold, accessibleIpAddress=accessibleIpAddress, lldpSetting=lldpSetting, monitorPortEntry=monitorPortEntry, poeWeekDay=poeWeekDay, dot1xReauthPeriod=dot1xReauthPeriod, portEntry=portEntry, relayWarningPower1OffStatus=relayWarningPower1OffStatus, localArbTime=localArbTime, syslogServer2=syslogServer2, ptpv2Status=ptpv2Status, gmrpMulticastGroup=gmrpMulticastGroup, monitorFDXFlowCtrl=monitorFDXFlowCtrl, startHour=startHour, monitorDirection=monitorDirection, modbusTCPSetting=modbusTCPSetting, spanningTreeEntry=spanningTreeEntry, startDay=startDay, dot1x1stRadiusServer=dot1x1stRadiusServer, logMinDelayReqInterval=logMinDelayReqInterval, enableEtherNetIP=enableEtherNetIP, relayWarningTrafficOverload=relayWarningTrafficOverload, emailWarningFirstEmailAddr=emailWarningFirstEmailAddr, dnsServer1IpAddr=dnsServer1IpAddr, poeTPortIndex=poeTPortIndex, relayWarningRelayContact=relayWarningRelayContact, switchIpAddr=switchIpAddr, relayWarningTrafficOverloadStatus=relayWarningTrafficOverloadStatus, ptpPortEnable=ptpPortEnable, emailWarningEventPowerOn2Off=emailWarningEventPowerOn2Off, turboRingPortTable=turboRingPortTable, poePortIndex=poePortIndex, varturboRingMasterChangedTrap=varturboRingMasterChangedTrap, monitorTxTraffic=monitorTxTraffic, ptpv1Setting=ptpv1Setting, timesource=timesource, emailWarningEventDiTable=emailWarningEventDiTable, rdnt1stPortRing2=rdnt1stPortRing2, lowPriLimitRate=lowPriLimitRate, syslogServer1port=syslogServer1port, syslogServer3port=syslogServer3port, leaveTime=leaveTime, ageTime=ageTime, grandmasterClockClass=grandmasterClockClass, relayWarningTurboRingBreakStatus=relayWarningTurboRingBreakStatus, dipSwitchEnableTurboRing=dipSwitchEnableTurboRing, turboRingPortDesignatedBridge=turboRingPortDesignatedBridge, joinedHybridPorts=joinedHybridPorts, poePortStatus=poePortStatus, vlan=vlan, lineSwapRecovery=lineSwapRecovery, localPtpTimescale=localPtpTimescale, turboChainPort2PartnerBridge=turboChainPort2PartnerBridge, overrideRelayWarningSetting=overrideRelayWarningSetting, poePortTable=poePortTable, offsetToMaster=offsetToMaster, emailWarningEventPowerOff2On=emailWarningEventPowerOff2On, emailWarningEventServerColdStart=emailWarningEventServerColdStart, setDevIpPresentBy=setDevIpPresentBy, emailWarningEventDiEntry=emailWarningEventDiEntry, staticPortLock=staticPortLock, snmpInformRetries=snmpInformRetries, backupMediaAutoLoad=backupMediaAutoLoad, emailWarningEventType=emailWarningEventType, enableDot1X=enableDot1X, gmrpLearnedPorts=gmrpLearnedPorts, varPoEWarningTrap=varPoEWarningTrap, portTrunking=portTrunking, poePowerOutputMode=poePowerOutputMode, dot1x1stRadiusPort=dot1x1stRadiusPort, trunkType=trunkType, trunkPort=trunkPort, cpuLoading30s=cpuLoading30s, emailWarningEventTopologyChanged=emailWarningEventTopologyChanged, emailWarningEventPortTrafficOverload=emailWarningEventPortTrafficOverload, learnedMulticastQuerierPorts=learnedMulticastQuerierPorts, radiusLoginAuthSharedKey=radiusLoginAuthSharedKey, trapServerAddr=trapServerAddr, endHour=endHour, enablePtp=enablePtp, grandMasterUuidv1=grandMasterUuidv1, varturboRingCouplingPortChangedTrap=varturboRingCouplingPortChangedTrap, qosClassification=qosClassification, diIndex=diIndex, activeProtocolOfRedundancy=activeProtocolOfRedundancy, emailWarningEventDiInputOff2On=emailWarningEventDiInputOff2On, vlanType=vlanType, mirroringPort=mirroringPort, usedMemory=usedMemory, inspectCos=inspectCos, snmpInformEnable=snmpInformEnable, poePortConsumption=poePortConsumption, emailWarningEventConfigChange=emailWarningEventConfigChange, coupling2ndPort=coupling2ndPort, limitMode=limitMode, multicastFiltering=multicastFiltering, spanningTreeIndex=spanningTreeIndex, enableAccessibleIP=enableAccessibleIP, setDevIpTable=setDevIpTable, dipSwitchTurboRingPole=dipSwitchTurboRingPole, cpuLoading5s=cpuLoading5s, trunkMemberPorts=trunkMemberPorts, spanningTreePortEdge=spanningTreePortEdge, tftpUpdate=tftpUpdate, turboRingCouplingPortStatus=turboRingCouplingPortStatus, brokenStatusRing1=brokenStatusRing1, trap2ServerAddr=trap2ServerAddr, parentUuidv1=parentUuidv1, diInputStatus=diInputStatus, tftpServer=tftpServer, domainNumber=domainNumber, transport=transport, dot1x2ndRadiusSharedKey=dot1x2ndRadiusSharedKey, sfpVoltage=sfpVoltage, inspectTos=inspectTos, tosMappedPriority=tosMappedPriority, managementVlanId=managementVlanId, setDevIpIndex=setDevIpIndex, sysDateTime=sysDateTime, staticMulticast=staticMulticast, radiusLoginAuthServer=radiusLoginAuthServer, gmrpSettingEntry=gmrpSettingEntry, protocolOfRedundancySetup=protocolOfRedundancySetup, rdnt2ndPortRing1=rdnt2ndPortRing1, dot1xReauthPortIndex=dot1xReauthPortIndex, tosMapping=tosMapping, dot1xReauthEnable=dot1xReauthEnable, monitorDiTable=monitorDiTable, portAccessControlTable=portAccessControlTable, ptpPortIndex=ptpPortIndex, poeTimeEntry=poeTimeEntry, turboRingV2Coupling=turboRingV2Coupling, enableWarmStart=enableWarmStart, radiusServerSetting=radiusServerSetting, vlanId=vlanId, coupling2ndPortStatus=coupling2ndPortStatus, option82Value=option82Value, querierQueryInterval=querierQueryInterval, ieee1588Setting=ieee1588Setting, poeDayStart=poeDayStart, gmrpEntry=gmrpEntry, vlanPortSettingEntry=vlanPortSettingEntry, masterStatusRing1=masterStatusRing1, vartrafficOverloadTrap=vartrafficOverloadTrap, portAccessControlStatus=portAccessControlStatus)
mibBuilder.exportSymbols("MOXA-EDSP510A8POE-MIB", endMonth=endMonth, clockIdentifierv1=clockIdentifierv1, relayWarningDiInputChangedStatus=relayWarningDiInputChangedStatus, turboChain=turboChain, portName=portName, consoleLoginMode=consoleLoginMode, spanningTreeBridgePriority=spanningTreeBridgePriority, sfpTxPower=sfpTxPower, spanningTreePortPriority=spanningTreePortPriority, preferMasterv1=preferMasterv1, enableGlobalIgmpSnooping=enableGlobalIgmpSnooping, radiusLoginAuthPort=radiusLoginAuthPort, dot1xRadius=dot1xRadius, startWeek=startWeek, dhcpFunctionEntry=dhcpFunctionEntry, brokenStatusRing2=brokenStatusRing2, redundancyTopologyChangedTrap=redundancyTopologyChangedTrap, tacacsLoginAuthSharedKey=tacacsLoginAuthSharedKey, rateLimiting=rateLimiting, eventlog=eventlog, option82ValueDisplay=option82ValueDisplay, sfpRXPower=sfpRXPower, setDevIpCurrentIpofDevice=setDevIpCurrentIpofDevice, tacacsServerSetting=tacacsServerSetting, meanPathDelayv1=meanPathDelayv1, diRelayWarningEntry=diRelayWarningEntry, monitorAutoMDI=monitorAutoMDI, setDevIpEntry=setDevIpEntry, tacacsLoginAuthServer=tacacsLoginAuthServer, designatedMasterRing2=designatedMasterRing2, eipSetting=eipSetting, cosTag=cosTag, dot1x2ndRadiusPort=dot1x2ndRadiusPort, currentUtcOffset=currentUtcOffset, poePortCurrent=poePortCurrent, currentUtcOffsetValid=currentUtcOffsetValid, ptpPortEntry=ptpPortEntry, staticMulticastEntry=staticMulticastEntry, dipSwitchSetting=dipSwitchSetting, staticPortLockPort=staticPortLockPort, poePortEntry=poePortEntry, enableModbusTCP=enableModbusTCP, timeSetting=timeSetting, networkSetting=networkSetting, dot1xSettingEntry=dot1xSettingEntry, syslogServer2port=syslogServer2port, cosMappingEntry=cosMappingEntry, turboRingPortStatus=turboRingPortStatus, enableFactoryDefault=enableFactoryDefault, userLoginSetting=userLoginSetting, varconfigChangeTrap=varconfigChangeTrap, radiusLoginAuthTimeout=radiusLoginAuthTimeout, option82Type=option82Type, coupling1stPort=coupling1stPort, rdnt2ndPortStatusRing1=rdnt2ndPortStatusRing1, leap59=leap59, leaveAllTime=leaveAllTime, turboRingRdntPort2=turboRingRdntPort2, turboChainPort2=turboChainPort2, spanningTreePortCost=spanningTreePortCost, portRelayWarningTable=portRelayWarningTable, trunkTable=trunkTable, grandmasterClockAccuracy=grandmasterClockAccuracy, dot1xSettingTable=dot1xSettingTable, eventlogEvent=eventlogEvent, rateLimitingMode=rateLimitingMode, timeProtocolOption=timeProtocolOption, relayWarningTrafficDuration=relayWarningTrafficDuration, ptpPortStatus=ptpPortStatus, igmpSnooping=igmpSnooping, relayWarning=relayWarning, trunkIndex=trunkIndex, turboRing=turboRing, gmrp=gmrp, enableQuerier=enableQuerier, stepsRemoved=stepsRemoved, joinTime=joinTime, logAnnounceInterval=logAnnounceInterval, normalModeRateLimitingIngressEntry=normalModeRateLimitingIngressEntry, enableGMRP=enableGMRP, dipSwitchRingMasterPole=dipSwitchRingMasterPole, trunkSettingEntry=trunkSettingEntry, rdnt1stPortStatusRing1=rdnt1stPortStatusRing1, portFixedVidUntag=portFixedVidUntag, trafficOverloadTrap=trafficOverloadTrap, igmpSnoopingSettingEntry=igmpSnoopingSettingEntry, turboRingControlPortStatus=turboRingControlPortStatus, varredundancyTopologyChangedTrap=varredundancyTopologyChangedTrap, igmpSnoopingSettingTable=igmpSnoopingSettingTable, eventlogClear=eventlogClear, logMinPdelayReqInterval=logMinPdelayReqInterval, trunkEntry=trunkEntry, portTable=portTable, highPriLimitRate=highPriLimitRate, varpower2Trap=varpower2Trap, accessibleIpStatus=accessibleIpStatus, monitorSFPTable=monitorSFPTable, poePortEnable=poePortEnable, mibNotificationsPrefix=mibNotificationsPrefix, accessibleIpNetMask=accessibleIpNetMask, dhcpFunctionTable=dhcpFunctionTable, swMgmt=swMgmt, ringIndexRing1=ringIndexRing1, turboRingMaster=turboRingMaster, ringIndexRing2=ringIndexRing2, joinedTrunkPorts=joinedTrunkPorts, clockModev1=clockModev1, portAccessControlAccessStatus=portAccessControlAccessStatus, power2InputStatus=power2InputStatus, setDevIpDedicatedIp=setDevIpDedicatedIp, turboChainPort1Status=turboChainPort1Status, dataBaseOption=dataBaseOption, masterStatusRing2=masterStatusRing2, lldpMSGInterval=lldpMSGInterval, memoryUsage=memoryUsage, PortList=PortList, dhcpRetryTimes=dhcpRetryTimes, syslogServer3=syslogServer3, emailWarningEventDiInputOn2Off=emailWarningEventDiInputOn2Off, offsetToMasterv1=offsetToMasterv1, radiusLoginAuthAuthType=radiusLoginAuthAuthType, masterSetupRing1=masterSetupRing1, snmpTrapCommunity=snmpTrapCommunity, turboRingRdntPort1=turboRingRdntPort1, dhcpServer2=dhcpServer2, grandmasterPriority2=grandmasterPriority2, ptpv2Setting=ptpv2Setting, portForbiddenVid=portForbiddenVid, relayWarningPower2OffStatus=relayWarningPower2OffStatus, accessibleIP=accessibleIP, dhcpServer3=dhcpServer3, dnsServer2IpAddr=dnsServer2IpAddr, timeServer2=timeServer2, accessibleIpTable=accessibleIpTable, enableTelnetConsole=enableTelnetConsole, poeStatusEntry=poeStatusEntry, portMDI=portMDI, defaultGateway=defaultGateway, turboRingPortIndex=turboRingPortIndex, eventlogIndex=eventlogIndex, garpSetting=garpSetting, turboRingCouplingPortChangedTrap=turboRingCouplingPortChangedTrap, emailWarningFourthEmailAddr=emailWarningFourthEmailAddr, emailWarningEventServerWarmStart=emailWarningEventServerWarmStart, syncIntervalv1=syncIntervalv1, powerLimit=powerLimit, endWeek=endWeek, portFixedVid=portFixedVid, poeDayStop=poeDayStop, dhcpServer4=dhcpServer4, relayWarningDiInputChanged=relayWarningDiInputChanged, rdnt1stPortStatusRing2=rdnt1stPortStatusRing2, sfpPort=sfpPort, turboRingCouplingPort=turboRingCouplingPort, circuitID=circuitID, portbaseVlanMemberPorts=portbaseVlanMemberPorts, poePortVoltage=poePortVoltage, subDomainNamev1=subDomainNamev1, turboRingBrokenStatus=turboRingBrokenStatus, enableAutoIpConfig=enableAutoIpConfig, totalMemory=totalMemory, dhcpPortIndex=dhcpPortIndex, portbaseVlanSettingIndex=portbaseVlanSettingIndex, ptpv1Status=ptpv1Status, portPriority=portPriority, monitorPortTable=monitorPortTable, designatedMasterRing1=designatedMasterRing1, confPathName=confPathName, mirroring=mirroring, cosMappingTable=cosMappingTable, dhcpServer1=dhcpServer1, userLoginServer=userLoginServer, dot1x1stRadiusSharedKey=dot1x1stRadiusSharedKey, tosClass=tosClass, eventlogDate=eventlogDate, dot1xSameAsAuthServer=dot1xSameAsAuthServer, trafficPrioritization=trafficPrioritization, staticMulticastTable=staticMulticastTable, poeporttimetabling=poeporttimetabling, ringEnableRing2=ringEnableRing2, relayWarningPower2Off=relayWarningPower2Off, tacacsLoginAuthPort=tacacsLoginAuthPort, targetPort=targetPort, firmwarePathName=firmwarePathName, localLeap61=localLeap61, freeMemory=freeMemory, tacacsLoginAuthAuthType=tacacsLoginAuthAuthType, setDeviceIp=setDeviceIp, ptpTimescale=ptpTimescale, monitorTraffic=monitorTraffic, mediumPriLimitRate=mediumPriLimitRate, portDisableModeTable=portDisableModeTable, enableWebConfig=enableWebConfig, coupling1stPortStatus=coupling1stPortStatus, snmpTrap2Community=snmpTrap2Community, portAccessControl=portAccessControl, sfpModelName=sfpModelName, localUtcOffsetValid=localUtcOffsetValid, monitor=monitor, sfpTemperature=sfpTemperature, syslogServer1=syslogServer1, switchIpMask=switchIpMask, turboRingV2=turboRingV2, webTimeout=webTimeout, spanningTreeTable=spanningTreeTable, configChangeTrap=configChangeTrap, localLeap59=localLeap59, relayAlarmIndex=relayAlarmIndex, security=security, portRelayWarningEntry=portRelayWarningEntry, monitorSFPEntry=monitorSFPEntry, clockStratumv1=clockStratumv1, dhcpRelayAgentSetting=dhcpRelayAgentSetting, egressLimit=egressLimit, turboRingMasterSetup=turboRingMasterSetup, portIndex=portIndex, clockClass=clockClass, dipSwitchRingCouplingPole=dipSwitchRingCouplingPole, turboRingPortDesignatedPort=turboRingPortDesignatedPort, portSetting=portSetting, startMonth=startMonth, joinedAccessPorts=joinedAccessPorts, rdnt2ndPortStatusRing2=rdnt2ndPortStatusRing2, loopProtection=loopProtection, enableIgmpSnooping=enableIgmpSnooping, monitorRxTraffic=monitorRxTraffic, industrialEthernet=industrialEthernet, relayWarningLinkChangedStatus=relayWarningLinkChangedStatus, rdnt1stPortRing1=rdnt1stPortRing1, enableOption82=enableOption82, poeTimeTable=poeTimeTable, endDay=endDay, normalModeRateLimitingIngressTable=normalModeRateLimitingIngressTable, swTraps=swTraps, industrialProtocol=industrialProtocol, relayWarningRxTrafficThreshold=relayWarningRxTrafficThreshold, normalPriLimitRate=normalPriLimitRate, sysFileUpdate=sysFileUpdate, diagnosis=diagnosis, dot1x=dot1x, eventlogUptime=eventlogUptime, turboRingPortEntry=turboRingPortEntry, announceReceiptTimeout=announceReceiptTimeout, logPathName=logPathName, monitorSpeed=monitorSpeed, emailWarningSecondEmailAddr=emailWarningSecondEmailAddr, power1InputStatus=power1InputStatus, turboRingV2Ring2=turboRingV2Ring2, trunkStatus=trunkStatus, relayWarningEntry=relayWarningEntry, edsp510a8poe=edsp510a8poe, portDefaultVid=portDefaultVid, eventlogBootup=eventlogBootup, turboRingEnableCoupling=turboRingEnableCoupling)
mibBuilder.exportSymbols("MOXA-EDSP510A8POE-MIB", emailWarningSMTPPort=emailWarningSMTPPort, turboChainPort1PartnerBridge=turboChainPort1PartnerBridge, dot1xReauth=dot1xReauth, firmwareVersion=firmwareVersion, spanningTreeForwardingDelay=spanningTreeForwardingDelay, portSpeed=portSpeed, spanningTreeHelloTime=spanningTreeHelloTime, turboRingV2Ring1=turboRingV2Ring1, cosMapping=cosMapping, pdPollingInterval=pdPollingInterval, power1Trap=power1Trap, poeDayEnable=poeDayEnable, relayWarningPower1Off=relayWarningPower1Off, portAccessControlAddress=portAccessControlAddress, tosMappingEntry=tosMappingEntry, turboRingDesignatedMaster=turboRingDesignatedMaster)
