#
# PySNMP MIB module ATEN-PE-CFG (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/aten/ATEN-PE-CFG_int.mib
# Produced by pysmi-1.1.12 at Tue Jun  4 10:05:50 2024
# On host fv-az801-864 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
KeyChange, = mibBuilder.importSymbols("SNMP-USER-BASED-SM-MIB", "KeyChange")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, iso, NotificationType, enterprises, MibIdentifier, Integer32, NotificationType, Bits, Gauge32, Counter32, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "iso", "NotificationType", "enterprises", "MibIdentifier", "Integer32", "NotificationType", "Bits", "Gauge32", "Counter32", "IpAddress", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
aten = ModuleIdentity((1, 3, 6, 1, 4, 1, 21317))
aten.setRevisions(('2013-10-31 11:10',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: aten.setRevisionsDescriptions(('updated mib to pass smilint level 3',))
if mibBuilder.loadTexts: aten.setLastUpdated('201310311110Z')
if mibBuilder.loadTexts: aten.setOrganization('ATEN')
if mibBuilder.loadTexts: aten.setContactInfo('Aten, Inc.')
if mibBuilder.loadTexts: aten.setDescription('ATEN PE MIB')
atenProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1))
overip = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3))
poweroverip = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2))
pe = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2))
userManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2))
device = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1))
doorSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 16))
pop = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 17))
cap = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 18))
outlet = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2))
bank = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3))
deviceManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4))
dashBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 4))
servicePorts = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 5))
ipv4config = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6))
eventNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7))
devicesnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1))
syslog = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 2))
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3))
configurationNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 9))
dateTime = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8))
timeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 1))
manualInput = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 2))
networkTime = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3))
devicesecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5))
loginFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 1))
workingMode = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 2))
accountPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 3))
loginRestriction = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4))
ipFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2))
macFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 3))
authentication = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5))
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1))
modelName = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelName.setStatus('current')
if mibBuilder.loadTexts: modelName.setDescription('Indicate PE device model name.')
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setStatus('current')
if mibBuilder.loadTexts: deviceName.setDescription('The name of PE device.\n\t\tstring length: 1~39  \n\t\tNOTE: Input string as /empty to set this object to NULL. \n\t\t')
deviceValueTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 3), )
if mibBuilder.loadTexts: deviceValueTable.setStatus('current')
if mibBuilder.loadTexts: deviceValueTable.setDescription("Device value table. This table displays device's current, voltage, power and\n\t\t power dissipation.\n\t\t")
deviceValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 3, 1), ).setIndexNames((0, "ATEN-PE-CFG", "deviceValueIndex"))
if mibBuilder.loadTexts: deviceValueEntry.setStatus('current')
if mibBuilder.loadTexts: deviceValueEntry.setDescription('Single deviceValue entry containing device info.')
deviceValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceValueIndex.setStatus('current')
if mibBuilder.loadTexts: deviceValueIndex.setDescription('Index of deviceValue.')
inputMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputMaxVoltage.setStatus('current')
if mibBuilder.loadTexts: inputMaxVoltage.setDescription('Device input Voltage value. unit:(V)    \n        If the device does not support this OID, we show value 0.\n        ')
inputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputMaxCurrent.setStatus('current')
if mibBuilder.loadTexts: inputMaxCurrent.setDescription('Device input Current value. unit:(A)\n        If the device does not support this OID, we show value 0.')
powerCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerCapacity.setStatus('current')
if mibBuilder.loadTexts: powerCapacity.setDescription('Device power Capacity value.unit:(VA)\n        If the device does not support this OID, we show value 0.')
devicePowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerFactor.setStatus('current')
if mibBuilder.loadTexts: devicePowerFactor.setDescription('Device power Factor value.\n        If the device does not support this OID, it returns: not-support.')
deviceOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 5), )
if mibBuilder.loadTexts: deviceOutletStatusTable.setStatus('current')
if mibBuilder.loadTexts: deviceOutletStatusTable.setDescription('Device outlet status value table.')
deviceOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 5, 1), ).setIndexNames((0, "ATEN-PE-CFG", "deviceOutletStatusIndex"))
if mibBuilder.loadTexts: deviceOutletStatusEntry.setStatus('current')
if mibBuilder.loadTexts: deviceOutletStatusEntry.setDescription('Single deviceOutletStatus entry containing device info.')
deviceOutletStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceOutletStatusIndex.setStatus('current')
if mibBuilder.loadTexts: deviceOutletStatusIndex.setDescription('Index of deviceOutletStatus')
displayOutletStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("fault", 4), ("noauth", 5), ("not-support", 6), ("pop", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: displayOutletStatus.setStatus('current')
if mibBuilder.loadTexts: displayOutletStatus.setDescription('Display outlet status.')
deviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6), )
if mibBuilder.loadTexts: deviceConfigTable.setStatus('current')
if mibBuilder.loadTexts: deviceConfigTable.setDescription('Device configuration table')
deviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1), ).setIndexNames((0, "ATEN-PE-CFG", "deviceConfigIndex"))
if mibBuilder.loadTexts: deviceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: deviceConfigEntry.setDescription('Single deviceConfig entry containing device info.')
deviceConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceConfigIndex.setStatus('current')
if mibBuilder.loadTexts: deviceConfigIndex.setDescription('Index of deviceConfig')
deviceMinCurMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMinCurMT.setStatus('current')
if mibBuilder.loadTexts: deviceMinCurMT.setDescription('Display or set device minimum electric current measurement threshold.\n        Example: range 0.0~32.0 represents 0~320.\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
deviceMaxCurMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMaxCurMT.setStatus('current')
if mibBuilder.loadTexts: deviceMaxCurMT.setDescription('Display or set device maximum electric current measurement threshold.  \n        Example: range 0.0~32.0 represents 0~320 \n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
deviceMinVolMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(900, 2600), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMinVolMT.setStatus('current')
if mibBuilder.loadTexts: deviceMinVolMT.setDescription('Display or set device minimum voltage measurement threshold. \n        Exapmple: range 90.0~260.0 represents 900~2600\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
deviceMaxVolMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(900, 2600), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMaxVolMT.setStatus('current')
if mibBuilder.loadTexts: deviceMaxVolMT.setDescription('Display or set device maximum voltage measurement threshold. \n        Example: range 90.0~260.0 represents 900~2600\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
deviceMinPMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMinPMT.setStatus('current')
if mibBuilder.loadTexts: deviceMinPMT.setDescription('Display or set device minimum power measurement threshold. \n        Example: range 0.0 ~ 9999.9 represents 0~99999\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
deviceMaxPMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMaxPMT.setStatus('current')
if mibBuilder.loadTexts: deviceMaxPMT.setDescription('Display or set device maximum power measurement threshold. \n        Example: range 0.0 ~ 9999.9 represents 0~99999\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
deviceMaxPDMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 999990), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMaxPDMT.setStatus('current')
if mibBuilder.loadTexts: deviceMaxPDMT.setDescription('Display or set device maximum power dissipation measurement threshold. \n        Example: range 0.0 ~ 99999.0 represents 0~999990\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
deviceSensorTresholdTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7), )
if mibBuilder.loadTexts: deviceSensorTresholdTable.setStatus('current')
if mibBuilder.loadTexts: deviceSensorTresholdTable.setDescription('Device environment value table')
deviceSensorTresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1), ).setIndexNames((0, "ATEN-PE-CFG", "deviceSensorTresholdIndex"))
if mibBuilder.loadTexts: deviceSensorTresholdEntry.setStatus('current')
if mibBuilder.loadTexts: deviceSensorTresholdEntry.setDescription("Device's sensor Environment entry containing sensor info.")
deviceSensorTresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSensorTresholdIndex.setStatus('current')
if mibBuilder.loadTexts: deviceSensorTresholdIndex.setDescription('Index of sensor number')
sensorMinTempMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200, 600), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMinTempMT.setStatus('current')
if mibBuilder.loadTexts: sensorMinTempMT.setDescription('Display or set sensor minimum temperature measurement threshold. \n        Example: range -20.0 ~ 60.0 represents -200~600\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
sensorMaxTempMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200, 600), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMaxTempMT.setStatus('current')
if mibBuilder.loadTexts: sensorMaxTempMT.setDescription('Display or set sensor maximum temperature measurement threshold. \n        Example: range -20.0 ~ 60.0 represents -200~600\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
sensorMinHumMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(150, 950), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMinHumMT.setStatus('current')
if mibBuilder.loadTexts: sensorMinHumMT.setDescription('Display or set sensor minimum humidity measurement threshold. \n        Example: range 15.0 ~ 95.0 represents 150~950\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
sensorMaxHumMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(150, 950), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMaxHumMT.setStatus('current')
if mibBuilder.loadTexts: sensorMaxHumMT.setDescription('Display or set sensor maximum humidity measurement threshold. \n        Example: range 15.0 ~ 95.0 represents 150~950\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
sensorMinPressMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2500, 2500), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMinPressMT.setStatus('current')
if mibBuilder.loadTexts: sensorMinPressMT.setDescription('Display or set sensor minimum pressure measurement threshold. \n        Example: range -250.0 ~ 250.0 represents -2500 ~ 2500\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
sensorMaxPressMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2500, 2500), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMaxPressMT.setStatus('current')
if mibBuilder.loadTexts: sensorMaxPressMT.setDescription('Display or set sensor maximum pressure measurement threshold. \n        Example: range -250.0 ~ 250.0 represents -2500 ~ 2500\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
deviceOutletControl = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("nostatus", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceOutletControl.setStatus('current')
if mibBuilder.loadTexts: deviceOutletControl.setDescription(' This function is used for all outlet ports control.\n          Set off(1) to turn off for all outlet ports.\n          Set on(2) to turn on for all outlet ports.\n          Get this object always return nostatus(3), because there is no device status.\n        \t\n        ')
deviceOutletReboot = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceOutletReboot.setStatus('current')
if mibBuilder.loadTexts: deviceOutletReboot.setDescription(' This function is used for all outlet ports to reboot.\n          Only when outlet status is ON can do outlet reboot action to all ports.\n          Set yes(2) to reboot all outlet ports.\n          Get this object always return no(1).\n\t\t')
switchable = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("mix", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchable.setStatus('current')
if mibBuilder.loadTexts: switchable.setDescription(' Outlet is switchable or not.')
perportreading = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perportreading.setStatus('current')
if mibBuilder.loadTexts: perportreading.setDescription(' Outlet is per-port reading or not.')
sensornumber = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensornumber.setStatus('current')
if mibBuilder.loadTexts: sensornumber.setDescription(' Sensor number.')
outletnumber = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletnumber.setStatus('current')
if mibBuilder.loadTexts: outletnumber.setDescription(' Outlet number.')
banknumber = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: banknumber.setStatus('current')
if mibBuilder.loadTexts: banknumber.setDescription(' Bank number.')
doorSensorStatus = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("close", 0), ("open", 1), ("not-attached", 2), ("not-support", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorStatus.setStatus('current')
if mibBuilder.loadTexts: doorSensorStatus.setDescription(" Display door sensor status.\n      \t  close(0) represents door close.\n\t  open(1) represents door open.\n\t  not-attached(2) represents door sensor don't attach to device.")
doorSensorType = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notinstalled", 0), ("photo", 1), ("inductiveproximity", 2), ("reed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorSensorType.setStatus('current')
if mibBuilder.loadTexts: doorSensorType.setDescription('Door Sensor Type Selection')
enablePOPmode = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePOPmode.setStatus('current')
if mibBuilder.loadTexts: enablePOPmode.setDescription(' Enable/Disable POP mode.')
popThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 17, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: popThreshold.setStatus('current')
if mibBuilder.loadTexts: popThreshold.setDescription(' (-1)means default value same as Bank Max Current 16 A.\n          \n          Example: range 0.0~32.0 represents 0~320\n          You can define the POP threshold or set as default(-1) value.')
enableOutletPOPmode = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-support", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableOutletPOPmode.setStatus('current')
if mibBuilder.loadTexts: enableOutletPOPmode.setDescription(' Enable/Disable Outlet POP mode.')
enableLIFOPOPmode = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-support", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableLIFOPOPmode.setStatus('current')
if mibBuilder.loadTexts: enableLIFOPOPmode.setDescription(' Enable/Disable LIFO POP mode.')
enablePriorityPOPmode = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-support", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePriorityPOPmode.setStatus('current')
if mibBuilder.loadTexts: enablePriorityPOPmode.setDescription(' Enable/Disable Priority POP mode.')
enableCAPmode = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableCAPmode.setStatus('current')
if mibBuilder.loadTexts: enableCAPmode.setDescription(' Enable/Disable CAP mode.')
outletCAPTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 18, 2), )
if mibBuilder.loadTexts: outletCAPTable.setStatus('current')
if mibBuilder.loadTexts: outletCAPTable.setDescription('Outlet CAP table')
outletCAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 18, 2, 1), ).setIndexNames((0, "ATEN-PE-CFG", "outletCAPIndex"))
if mibBuilder.loadTexts: outletCAPEntry.setStatus('current')
if mibBuilder.loadTexts: outletCAPEntry.setDescription('Outlet CAP entry containing CAP info.')
outletCAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCAPIndex.setStatus('current')
if mibBuilder.loadTexts: outletCAPIndex.setDescription("Index of outlet's CAP configuration")
outletCAPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCAPPriority.setStatus('current')
if mibBuilder.loadTexts: outletCAPPriority.setDescription('Display or set the CAP Priority of outlet.\n\t\tPriority 0 means this outlet does not support this OID.')
outletInitMode = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-delaytime", 1), ("delaytime", 2), ("not-support", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletInitMode.setStatus('current')
if mibBuilder.loadTexts: outletInitMode.setDescription('choose outlet init mode you want.')
deviceIntegerValueTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 99), )
if mibBuilder.loadTexts: deviceIntegerValueTable.setStatus('current')
if mibBuilder.loadTexts: deviceIntegerValueTable.setDescription("Device value table. This table displays device's current, voltage, power and\n\t\t power dissipation.\n\t\t")
deviceIntegerValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 99, 1), ).setIndexNames((0, "ATEN-PE-CFG", "deviceIntegerValueIndex"))
if mibBuilder.loadTexts: deviceIntegerValueEntry.setStatus('current')
if mibBuilder.loadTexts: deviceIntegerValueEntry.setDescription('Single deviceValue entry containing device info.')
deviceIntegerValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 99, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntegerValueIndex.setStatus('current')
if mibBuilder.loadTexts: deviceIntegerValueIndex.setDescription('Index of deviceValue.')
deviceIntegerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 99, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntegerCurrent.setStatus('current')
if mibBuilder.loadTexts: deviceIntegerCurrent.setDescription('Device electric current value.\n         This value indicates that 1,000 times.\n         If the device does not support this OID, it returns value -2000000.')
deviceIntegerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 99, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntegerVoltage.setStatus('current')
if mibBuilder.loadTexts: deviceIntegerVoltage.setDescription('Device voltage value.\n        This value indicates that 1,000 times.\n        If the device does not support this OID, it returns value -2000000.')
deviceIntegerPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 99, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntegerPower.setStatus('current')
if mibBuilder.loadTexts: deviceIntegerPower.setDescription('Device power value.\n        This value indicates that 1,000 times.  \n        If the device does not support this OID, it returns value -2000000.')
deviceIntegerPowerDissipation = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 99, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntegerPowerDissipation.setStatus('current')
if mibBuilder.loadTexts: deviceIntegerPowerDissipation.setDescription('Device power dissipation value.\n        This value indicates that 1,000 times.\n        If the device does not support this OID, it returns value -2000000.')
sensorIntegerValueTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 100), )
if mibBuilder.loadTexts: sensorIntegerValueTable.setStatus('current')
if mibBuilder.loadTexts: sensorIntegerValueTable.setDescription("Device's sensor value table. This table displays sensor's temperature, humidity and\n\t\t pressure.\n\t\t")
sensorIntegerValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 100, 1), ).setIndexNames((0, "ATEN-PE-CFG", "sensorIntegerValueIndex"))
if mibBuilder.loadTexts: sensorIntegerValueEntry.setStatus('current')
if mibBuilder.loadTexts: sensorIntegerValueEntry.setDescription("Single device's sensor value entry containing device info.")
sensorIntegerValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorIntegerValueIndex.setStatus('current')
if mibBuilder.loadTexts: sensorIntegerValueIndex.setDescription('Index of sensor number.')
sensorIntegerTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 100, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorIntegerTemperature.setStatus('current')
if mibBuilder.loadTexts: sensorIntegerTemperature.setDescription("Sensor's Temperature value.\n        This value indicates that 1,000 times.\n        If this measurement value is not available, it returns value -1000000.\n        If the device does not support this OID, it returns value -2000000.")
sensorIntegerHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 100, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorIntegerHumidity.setStatus('current')
if mibBuilder.loadTexts: sensorIntegerHumidity.setDescription("Sensor's Humidity value.\n        This value indicates that 1,000 times.\n        If this measurement value is not available, it returns value -1000000.\n        If the device does not support this OID, it returns value -2000000.")
sensorIntegerPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 100, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorIntegerPressure.setStatus('current')
if mibBuilder.loadTexts: sensorIntegerPressure.setDescription("Sensor's Pressure value.\n        This value indicates that 1,000 times.\n        If this measurement value is not available, it returns value -1000000.\n        If the device does not support this OID, it returns value -2000000.")
outletValueTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: outletValueTable.setStatus('current')
if mibBuilder.loadTexts: outletValueTable.setDescription('Display total outlet value table')
outletValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "ATEN-PE-CFG", "outletValueIndex"))
if mibBuilder.loadTexts: outletValueEntry.setStatus('current')
if mibBuilder.loadTexts: outletValueEntry.setDescription('Single outletValue entry containing outlet info.')
outletValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletValueIndex.setStatus('current')
if mibBuilder.loadTexts: outletValueIndex.setDescription('Index of outlet number')
outletMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletMaxCurrent.setStatus('current')
if mibBuilder.loadTexts: outletMaxCurrent.setDescription('Outlet Max Current value. unit: (A).\n        If the device does not support this OID, we show value 0.\n        ')
outletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPowerFactor.setStatus('current')
if mibBuilder.loadTexts: outletPowerFactor.setDescription('Outlet Power Factor value.\n        If the device does not support this OID, it returns: not-support.')
outlet1Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet1Status.setStatus('current')
if mibBuilder.loadTexts: outlet1Status.setDescription("Display and control outlet 1 status. Can't set pending status.")
outlet2Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet2Status.setStatus('current')
if mibBuilder.loadTexts: outlet2Status.setDescription("Display and control outlet 2 status. Can't set pending status.")
outlet3Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet3Status.setStatus('current')
if mibBuilder.loadTexts: outlet3Status.setDescription("Display and control outlet 3 status. Can't set pending status.")
outlet4Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet4Status.setStatus('current')
if mibBuilder.loadTexts: outlet4Status.setDescription("Display and control outlet 4 status. Can't set pending status.")
outlet5Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet5Status.setStatus('current')
if mibBuilder.loadTexts: outlet5Status.setDescription("Display and control outlet 5 status. Can't set pending status.")
outlet6Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet6Status.setStatus('current')
if mibBuilder.loadTexts: outlet6Status.setDescription("Display and control outlet 6 status. Can't set pending status.")
outlet7Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet7Status.setStatus('current')
if mibBuilder.loadTexts: outlet7Status.setDescription("Display and control outlet 7 status. Can't set pending status.")
outlet8Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet8Status.setStatus('current')
if mibBuilder.loadTexts: outlet8Status.setDescription("Display and control outlet 8 status. Can't set pending status.")
outlet9Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet9Status.setStatus('current')
if mibBuilder.loadTexts: outlet9Status.setDescription("Display and control outlet 9 status. Can't set pending status.")
outlet10Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet10Status.setStatus('current')
if mibBuilder.loadTexts: outlet10Status.setDescription("Display and control outlet 10 status. Can't set pending status.")
outlet11Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet11Status.setStatus('current')
if mibBuilder.loadTexts: outlet11Status.setDescription("Display and control outlet 11 status. Can't set pending status.")
outlet12Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet12Status.setStatus('current')
if mibBuilder.loadTexts: outlet12Status.setDescription("Display and control outlet 12 status. Can't set pending status.")
outlet13Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet13Status.setStatus('current')
if mibBuilder.loadTexts: outlet13Status.setDescription("Display and control outlet 13 status. Can't set pending status.")
outlet14Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet14Status.setStatus('current')
if mibBuilder.loadTexts: outlet14Status.setDescription("Display and control outlet 14 status. Can't set pending status.")
outlet15Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet15Status.setStatus('current')
if mibBuilder.loadTexts: outlet15Status.setDescription("Display and control outlet 15 status. Can't set pending status.")
outlet16Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet16Status.setStatus('current')
if mibBuilder.loadTexts: outlet16Status.setDescription("Display and control outlet 16 status. Can't set pending status.")
outlet17Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet17Status.setStatus('current')
if mibBuilder.loadTexts: outlet17Status.setDescription("Display and control outlet 17 status. Can't set pending status.")
outlet18Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet18Status.setStatus('current')
if mibBuilder.loadTexts: outlet18Status.setDescription("Display and control outlet 18 status. Can't set pending status.")
outlet19Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet19Status.setStatus('current')
if mibBuilder.loadTexts: outlet19Status.setDescription("Display and control outlet 19 status. Can't set pending status.")
outlet20Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet20Status.setStatus('current')
if mibBuilder.loadTexts: outlet20Status.setDescription("Display and control outlet 20 status. Can't set pending status.")
outlet21Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet21Status.setStatus('current')
if mibBuilder.loadTexts: outlet21Status.setDescription("Display and control outlet 21 status. Can't set pending status.")
outlet22Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet22Status.setStatus('current')
if mibBuilder.loadTexts: outlet22Status.setDescription("Display and control outlet 22 status. Can't set pending status.")
outlet23Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet23Status.setStatus('current')
if mibBuilder.loadTexts: outlet23Status.setDescription("Display and control outlet 23 status. Can't set pending status.")
outlet24Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet24Status.setStatus('current')
if mibBuilder.loadTexts: outlet24Status.setDescription("Display and control outlet 24 status. Can't set pending status.")
outlet25Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet25Status.setStatus('current')
if mibBuilder.loadTexts: outlet25Status.setDescription("Display and control outlet 25 status. Can't set pending status.")
outlet26Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet26Status.setStatus('current')
if mibBuilder.loadTexts: outlet26Status.setDescription("Display and control outlet 26 status. Can't set pending status.")
outlet27Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet27Status.setStatus('current')
if mibBuilder.loadTexts: outlet27Status.setDescription("Display and control outlet 27 status. Can't set pending status.")
outlet28Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet28Status.setStatus('current')
if mibBuilder.loadTexts: outlet28Status.setDescription("Display and control outlet 28 status. Can't set pending status.")
outlet29Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet29Status.setStatus('current')
if mibBuilder.loadTexts: outlet29Status.setDescription("Display and control outlet 29 status. Can't set pending status.")
outlet30Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet30Status.setStatus('current')
if mibBuilder.loadTexts: outlet30Status.setDescription("Display and control outlet 30 status. Can't set pending status.")
outlet31Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet31Status.setStatus('current')
if mibBuilder.loadTexts: outlet31Status.setDescription("Display and control outlet 31 status. Can't set pending status.")
outlet32Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet32Status.setStatus('current')
if mibBuilder.loadTexts: outlet32Status.setDescription("Display and control outlet 32 status. Can't set pending status.")
outlet33Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet33Status.setStatus('current')
if mibBuilder.loadTexts: outlet33Status.setDescription("Display and control outlet 33 status. Can't set pending status.")
outlet34Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet34Status.setStatus('current')
if mibBuilder.loadTexts: outlet34Status.setDescription("Display and control outlet 34 status. Can't set pending status.")
outlet35Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet35Status.setStatus('current')
if mibBuilder.loadTexts: outlet35Status.setDescription("Display and control outlet 35 status. Can't set pending status.")
outlet36Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet36Status.setStatus('current')
if mibBuilder.loadTexts: outlet36Status.setDescription("Display and control outlet 36 status. Can't set pending status.")
outlet37Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet37Status.setStatus('current')
if mibBuilder.loadTexts: outlet37Status.setDescription("Display and control outlet 37 status. Can't set pending status.")
outlet38Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet38Status.setStatus('current')
if mibBuilder.loadTexts: outlet38Status.setDescription("Display and control outlet 38 status. Can't set pending status.")
outlet39Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet39Status.setStatus('current')
if mibBuilder.loadTexts: outlet39Status.setDescription("Display and control outlet 39 status. Can't set pending status.")
outlet40Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet40Status.setStatus('current')
if mibBuilder.loadTexts: outlet40Status.setDescription("Display and control outlet 40 status. Can't set pending status.")
outlet41Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet41Status.setStatus('current')
if mibBuilder.loadTexts: outlet41Status.setDescription("Display and control outlet 41 status. Can't set pending status.")
outlet42Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet42Status.setStatus('current')
if mibBuilder.loadTexts: outlet42Status.setDescription("Display and control outlet 42 status. Can't set pending status.")
outletSwitchableTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 70), )
if mibBuilder.loadTexts: outletSwitchableTable.setStatus('current')
if mibBuilder.loadTexts: outletSwitchableTable.setDescription('\n\t\t')
outletSwitchableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 70, 1), ).setIndexNames((0, "ATEN-PE-CFG", "outletSwitchableIndex"))
if mibBuilder.loadTexts: outletSwitchableEntry.setStatus('current')
if mibBuilder.loadTexts: outletSwitchableEntry.setDescription('')
outletSwitchableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 70, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchableIndex.setStatus('current')
if mibBuilder.loadTexts: outletSwitchableIndex.setDescription('Index of outlet number.\n        ')
outletSwitchable = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 70, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchable.setStatus('current')
if mibBuilder.loadTexts: outletSwitchable.setDescription('\n        ')
outletIntegerValueTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 99), )
if mibBuilder.loadTexts: outletIntegerValueTable.setStatus('current')
if mibBuilder.loadTexts: outletIntegerValueTable.setDescription('Display total outlet value table')
outletIntegerValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 99, 1), ).setIndexNames((0, "ATEN-PE-CFG", "outletIntegerValueIndex"))
if mibBuilder.loadTexts: outletIntegerValueEntry.setStatus('current')
if mibBuilder.loadTexts: outletIntegerValueEntry.setDescription('Single outletValue entry containing outlet info.')
outletIntegerValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 99, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletIntegerValueIndex.setStatus('current')
if mibBuilder.loadTexts: outletIntegerValueIndex.setDescription('Index of outlet number.\n        ')
outletIntegerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 99, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletIntegerCurrent.setStatus('current')
if mibBuilder.loadTexts: outletIntegerCurrent.setDescription('Outlet electric current value.\n        This value indicates that 1,000 times.\n        If the device does not support this OID, it returns value -2000000.')
outletIntegerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 99, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletIntegerVoltage.setStatus('current')
if mibBuilder.loadTexts: outletIntegerVoltage.setDescription('Outlet voltage value.\n        This value indicates that 1,000 times.\n        If the device does not support this OID, it returns value -2000000.')
outletIntegerPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 99, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletIntegerPower.setStatus('current')
if mibBuilder.loadTexts: outletIntegerPower.setDescription('Outlet power value.\n        This value indicates that 1,000 times.\n        If the device does not support this OID, it returns value -2000000.')
outletIntegerPowerDissipation = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 99, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletIntegerPowerDissipation.setStatus('current')
if mibBuilder.loadTexts: outletIntegerPowerDissipation.setDescription('Outlet power dissipation value.\n        This value indicates that 1,000 times.\n        If the device does not support this OID, it returns value -2000000.')
outletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10), )
if mibBuilder.loadTexts: outletConfigTable.setStatus('current')
if mibBuilder.loadTexts: outletConfigTable.setDescription('Outlet configuration table')
outletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1), ).setIndexNames((0, "ATEN-PE-CFG", "outletConfigIndex"))
if mibBuilder.loadTexts: outletConfigEntry.setStatus('current')
if mibBuilder.loadTexts: outletConfigEntry.setDescription('Outlet Config entry containing outlet info.')
outletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletConfigIndex.setStatus('current')
if mibBuilder.loadTexts: outletConfigIndex.setDescription('Index of outlet number')
outletName = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletName.setStatus('current')
if mibBuilder.loadTexts: outletName.setDescription('Display or set the name of outlet.   \n        If the device does not support this OID, we show n/a.\n        string length: 0~15\n        NOTE: Input string as /empty to set this object to NULL.\n        ')
outletConfirmation = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("noauth", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletConfirmation.setStatus('current')
if mibBuilder.loadTexts: outletConfirmation.setDescription('Display or set the confirmation of outlet.')
outletOnDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 999), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletOnDelayTime.setStatus('current')
if mibBuilder.loadTexts: outletOnDelayTime.setDescription('Display or set the ON delay time of outlet.\n        When this model does not support the OID, we show value -1. ')
outletOffDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 999), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletOffDelayTime.setStatus('current')
if mibBuilder.loadTexts: outletOffDelayTime.setDescription('Display or set the OFF delay time of outlet.\n        When this model does not support the OID, we show value -1. ')
outletShutdownMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("kill-the-power", 1), ("wake-on-lan", 2), ("after-ac-back", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletShutdownMethod.setStatus('current')
if mibBuilder.loadTexts: outletShutdownMethod.setDescription('Display or set the shutdown mehtod of outlet.')
outletMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMAC.setStatus('current')
if mibBuilder.loadTexts: outletMAC.setDescription('Display or set the MAC address of ShutdownMethod.\n        If the device does not support this OID, we show n/a.\n        string length: 12\n        ')
outletMinCurMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMinCurMT.setStatus('current')
if mibBuilder.loadTexts: outletMinCurMT.setDescription('Display or set the outlet minimum electric current measurment threshold. \n         Example: range 0.0 ~16.0 rerpresnts 0~160\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
outletMaxCurMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMaxCurMT.setStatus('current')
if mibBuilder.loadTexts: outletMaxCurMT.setDescription('Display or set the outlet maximum electric current measurment threshold. \n         Example: range 0.0 ~16.0 represents 0~160\n         NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
outletMinVolMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(900, 2600), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMinVolMT.setStatus('current')
if mibBuilder.loadTexts: outletMinVolMT.setDescription('Display or set the outlet minimum voltage measurment threshold. \n        Example: range 90.0 ~260.0 represents 900~2600\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
outletMaxVolMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(900, 2600), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMaxVolMT.setStatus('current')
if mibBuilder.loadTexts: outletMaxVolMT.setDescription('Display or set the outlet maximum voltage measurment threshold. \n        Example: range 90.0 ~260.0 represents 900~2600\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
outletMinPMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMinPMT.setStatus('current')
if mibBuilder.loadTexts: outletMinPMT.setDescription('Display or set the outlet minimum power measurment threshold.\n        Example: range 0.0 ~ 9999.9 represents 0~99999\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
outletMaxPMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMaxPMT.setStatus('current')
if mibBuilder.loadTexts: outletMaxPMT.setDescription('Display or set the outlet maximum power measurment threshold.\n        Example: range 0.0 ~ 9999.9 represents 0~99999\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
outletMaxPDMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 999990), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMaxPDMT.setStatus('current')
if mibBuilder.loadTexts: outletMaxPDMT.setDescription('Display or set the outlet maximum power dissipation measurment threshold.\n        Example: range 0.0 ~ 99999.0 represents 0~999990\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
breakerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 1), )
if mibBuilder.loadTexts: breakerStatusTable.setStatus('current')
if mibBuilder.loadTexts: breakerStatusTable.setDescription('Display total bank value table')
breakerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 1, 1), ).setIndexNames((0, "ATEN-PE-CFG", "breakerStatusIndex"))
if mibBuilder.loadTexts: breakerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: breakerStatusEntry.setDescription('Single bankValue entry containing bank info.')
breakerStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerStatusIndex.setStatus('current')
if mibBuilder.loadTexts: breakerStatusIndex.setDescription('Index of breaker number.')
breakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("not-support", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerStatus.setStatus('current')
if mibBuilder.loadTexts: breakerStatus.setDescription('Breaker status.')
bankValueTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 2), )
if mibBuilder.loadTexts: bankValueTable.setStatus('current')
if mibBuilder.loadTexts: bankValueTable.setDescription('Display total bank value table')
bankValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 2, 1), ).setIndexNames((0, "ATEN-PE-CFG", "bankValueIndex"))
if mibBuilder.loadTexts: bankValueEntry.setStatus('current')
if mibBuilder.loadTexts: bankValueEntry.setDescription('Single bankValue entry containing bank info.')
bankValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankValueIndex.setStatus('current')
if mibBuilder.loadTexts: bankValueIndex.setDescription('Index of bank number')
bankMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankMaxCurrent.setStatus('current')
if mibBuilder.loadTexts: bankMaxCurrent.setDescription('The Bank Max Current value. unit: (A)\n        EC1000:0A~320A\n        ')
bankAttachStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noattached", 1), ("attached", 2), ("error", 3), ("noexisted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankAttachStatus.setStatus('current')
if mibBuilder.loadTexts: bankAttachStatus.setDescription('The status of Energy sensor Bank attached status.')
bankPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankPowerFactor.setStatus('current')
if mibBuilder.loadTexts: bankPowerFactor.setDescription('Bank Power Factor value.\n        If the device does not support this OID, it returns: not-support.')
bankConfigTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3), )
if mibBuilder.loadTexts: bankConfigTable.setStatus('current')
if mibBuilder.loadTexts: bankConfigTable.setDescription('Bank configuration table')
bankConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1), ).setIndexNames((0, "ATEN-PE-CFG", "bankConfigIndex"))
if mibBuilder.loadTexts: bankConfigEntry.setStatus('current')
if mibBuilder.loadTexts: bankConfigEntry.setDescription('Bank Config entry containing Bank info.')
bankConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankConfigIndex.setStatus('current')
if mibBuilder.loadTexts: bankConfigIndex.setDescription('Index of bank number')
bankName = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankName.setStatus('current')
if mibBuilder.loadTexts: bankName.setDescription('Display or set the name of bank.\n        When this model does not support the OID, we show n/a.\n        string length: 0~15\n        NOTE: Input string as /empty to set this object to NULL.\n        ')
bankMinCurMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankMinCurMT.setStatus('current')
if mibBuilder.loadTexts: bankMinCurMT.setDescription('Display or set the outlet minimum electric current measurment threshold. \n        Example: range 0.0 ~16.0 rerpresnts 0~160\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
bankMaxCurMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankMaxCurMT.setStatus('current')
if mibBuilder.loadTexts: bankMaxCurMT.setDescription('Display or set the outlet maximum electric current measurment threshold. \n        Example: range 0.0 ~16.0 represents 0~160\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
bankMinVolMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(900, 2600), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankMinVolMT.setStatus('current')
if mibBuilder.loadTexts: bankMinVolMT.setDescription('Display or set the outlet minimum voltage measurment threshold. \n        Example: range 90.0 ~260.0 represents 900~2600\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
bankMaxVolMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(900, 2600), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankMaxVolMT.setStatus('current')
if mibBuilder.loadTexts: bankMaxVolMT.setDescription('Display or set the outlet maximum voltage measurment threshold. \n        Example: range 90.0 ~260.0 represents 900~2600\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
bankMinPMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankMinPMT.setStatus('current')
if mibBuilder.loadTexts: bankMinPMT.setDescription('Display or set the outlet minimum power measurment threshold.\n        Example: range 0.0 ~ 9999.9 represents 0~99999\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
bankMaxPMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankMaxPMT.setStatus('current')
if mibBuilder.loadTexts: bankMaxPMT.setDescription('Display or set the outlet maximum power measurment threshold.\n        Example: range 0.0 ~ 9999.9 represents 0~99999\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
bankMaxPDMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 999990), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankMaxPDMT.setStatus('current')
if mibBuilder.loadTexts: bankMaxPDMT.setDescription('Display or set the outlet maximum power dissipation measurment threshold.\n        Example: range 0.0 ~ 99999.0 represents 0~999990\n        NOTICE: Minimum threshold should be smaller than maximum threshold.\n        Empty value: -3000.\n        If the device does not support this OID, it returns value -2000000.')
bankControlTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 4), )
if mibBuilder.loadTexts: bankControlTable.setStatus('current')
if mibBuilder.loadTexts: bankControlTable.setDescription('Bank Control table')
bankControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 4, 1), ).setIndexNames((0, "ATEN-PE-CFG", "bankControlIndex"))
if mibBuilder.loadTexts: bankControlEntry.setStatus('current')
if mibBuilder.loadTexts: bankControlEntry.setDescription('Bank control entry.')
bankControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankControlIndex.setStatus('current')
if mibBuilder.loadTexts: bankControlIndex.setDescription('Index of bank number')
bankControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("reboot", 3), ("nostatus", 4), ("not-support", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankControlStatus.setStatus('current')
if mibBuilder.loadTexts: bankControlStatus.setDescription(' This function is used for outlet control of bank.\n          Set off(1) to turn off for outlet control of bank.\n          Set on(2) to turn on for all outlet control of bank.\n          Set reboot(3) to turn on for outlet control of bank.\n          Get this object always return nostatus(3), because there is no bank status.\n        ')
bankIntegerValueTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 99), )
if mibBuilder.loadTexts: bankIntegerValueTable.setStatus('current')
if mibBuilder.loadTexts: bankIntegerValueTable.setDescription('Display total bank value table')
bankIntegerValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 99, 1), ).setIndexNames((0, "ATEN-PE-CFG", "bankIntegerValueIndex"))
if mibBuilder.loadTexts: bankIntegerValueEntry.setStatus('current')
if mibBuilder.loadTexts: bankIntegerValueEntry.setDescription('Single bankValue entry containing bank info.')
bankIntegerValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 99, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankIntegerValueIndex.setStatus('current')
if mibBuilder.loadTexts: bankIntegerValueIndex.setDescription('Index of bank number.\n        ')
bankIntegerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 99, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankIntegerCurrent.setStatus('current')
if mibBuilder.loadTexts: bankIntegerCurrent.setDescription('Bank electric current value.\n        This value indicates that 1,000 times.\n        If this measurement value is not available, it returns value -1000000.\n        If the device does not support this OID, it returns value -2000000.')
bankIntegerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 99, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankIntegerVoltage.setStatus('current')
if mibBuilder.loadTexts: bankIntegerVoltage.setDescription('Bank voltage value.\n        This value indicates that 1,000 times. \n        \n        We put this OID to write access type for user to set the reference voltage on EC1000 model.\n        And the setting should be the numbers. You can set 0 to clear the setting.\n\n        If this measurement value is not available, it returns value -1000000.\n        If the device does not support this OID, it returns value -2000000.')
bankIntegerPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 99, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankIntegerPower.setStatus('current')
if mibBuilder.loadTexts: bankIntegerPower.setDescription('Bank power value.\n        This value indicates that 1,000 times.\n        If this measurement value is not available, it returns value -1000000.\n        If the device does not support this OID, it returns value -2000000.')
bankIntegerPowerDissipation = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 99, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankIntegerPowerDissipation.setStatus('current')
if mibBuilder.loadTexts: bankIntegerPowerDissipation.setDescription('Bank power dissipation value.\n        This value indicates that 1,000 times.\n        If this measurement value is not available, it returns value -1000000.\n        If the device does not support this OID, it returns value -2000000.')
deviceMAC = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMAC.setStatus('current')
if mibBuilder.loadTexts: deviceMAC.setDescription('Display device MAC address.')
deviceIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIPv4.setStatus('current')
if mibBuilder.loadTexts: deviceIPv4.setDescription('Display device IP address.')
deviceFWversion = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFWversion.setStatus('current')
if mibBuilder.loadTexts: deviceFWversion.setDescription('Display device FW version.')
dashboardRow = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dashboardRow.setStatus('current')
if mibBuilder.loadTexts: dashboardRow.setDescription("Display or set device's dashboard row number.")
dashboardColumn = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dashboardColumn.setStatus('current')
if mibBuilder.loadTexts: dashboardColumn.setDescription("Display or set device's dashboard column number.")
dashboardRackName = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dashboardRackName.setStatus('current')
if mibBuilder.loadTexts: dashboardRackName.setDescription("Display or set device's dashboard rack name.\n\t\tstring length: 1~32\n\t\tNOTE: Input string as /empty to set this object to NULL. \n\t\t")
httpPort = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPort.setStatus('current')
if mibBuilder.loadTexts: httpPort.setDescription('Display or set the HTTP port of PE device.')
httpsPort = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsPort.setStatus('current')
if mibBuilder.loadTexts: httpsPort.setDescription('Display or set the HTTPs port of PE device.')
httpsOnlyEnable = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsOnlyEnable.setStatus('current')
if mibBuilder.loadTexts: httpsOnlyEnable.setDescription('Enable to use Webpage HTTPs only or disable to use Webpage HTTP/HTTPs')
staticIPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticIPEnabled.setStatus('current')
if mibBuilder.loadTexts: staticIPEnabled.setDescription('Display or set IPv4 address automatically or not')
fixedIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fixedIPv4.setStatus('current')
if mibBuilder.loadTexts: fixedIPv4.setDescription('Display or set fixed IPv4 address')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
if mibBuilder.loadTexts: subnetMask.setDescription('Display or set subnet mask address')
gateway = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gateway.setStatus('current')
if mibBuilder.loadTexts: gateway.setDescription('Display or set gateway address')
staticDNSEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDNSEnabled.setStatus('current')
if mibBuilder.loadTexts: staticDNSEnabled.setDescription('Display or set DNS address automatically or not')
dnsPreferIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsPreferIPv4.setStatus('current')
if mibBuilder.loadTexts: dnsPreferIPv4.setDescription('Display or set prefer DNS address')
dnsAlternateIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsAlternateIPv4.setStatus('current')
if mibBuilder.loadTexts: dnsAlternateIPv4.setDescription('Display or set alternate DNS address')
trapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapEnabled.setStatus('current')
if mibBuilder.loadTexts: trapEnabled.setDescription('Indicates if this trap entry is enabled or not.\n        You should set the username/auth-password/priv-password first, when choosing snmpv3.\n\t\tYou should set the community string first, when choosing snmpv1/v2c.')
trapVersion = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapVersion.setStatus('current')
if mibBuilder.loadTexts: trapVersion.setDescription(' Choose SNMP Trap version to send trap.\n\tYou should set the username/auth-password/priv-password first, when choosing snmpv3.\n\tYou should set the community string first, when choosing snmpv1/v2c.')
snmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3), )
if mibBuilder.loadTexts: snmpTrapTable.setStatus('current')
if mibBuilder.loadTexts: snmpTrapTable.setDescription('PE SNMP agent trap setup table. If users want to use trap, \n\t\tthey must set enable trap, ip and community first.')
snmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1), ).setIndexNames((0, "ATEN-PE-CFG", "trapReceiverNumber"))
if mibBuilder.loadTexts: snmpTrapEntry.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntry.setDescription('Single trap entry containing trap receiver info.')
trapReceiverNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapReceiverNumber.setStatus('current')
if mibBuilder.loadTexts: trapReceiverNumber.setDescription('Index of trap receiver')
trapReceiverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapReceiverIPAddress.setStatus('current')
if mibBuilder.loadTexts: trapReceiverIPAddress.setDescription('Trap receiver IP address')
trapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapPort.setStatus('current')
if mibBuilder.loadTexts: trapPort.setDescription('NMS trap port to be used by agent to send trap')
trapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCommunity.setStatus('current')
if mibBuilder.loadTexts: trapCommunity.setDescription('If use SNMPv1/v2c to receive trap should set this Community string.\n        MAX string length: 20\n        NOTE: Input string as /empty to set this object to NULL.\n        ')
trapUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapUsername.setStatus('current')
if mibBuilder.loadTexts: trapUsername.setDescription('If use SNMPv3 to receive trap should set this string.\n        NOTE: Input string as /empty to set this object to NULL.\n        MAX string length: 20\n        ')
trapAuthpassword = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAuthpassword.setStatus('current')
if mibBuilder.loadTexts: trapAuthpassword.setDescription('If use SNMPv3 to receive trap should set this string.\n        MAX string length: 20\n        NOTE: Input string as /empty to set this object to NULL.\n        ')
trapPrivpassword = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapPrivpassword.setStatus('current')
if mibBuilder.loadTexts: trapPrivpassword.setDescription('If use SNMPv3 to receive trap should set this string.\n        MAX string length: 20\n        NOTE: Input string as /empty to set this object to NULL.\n        ')
sysLogServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogServerEnabled.setStatus('current')
if mibBuilder.loadTexts: sysLogServerEnabled.setDescription('Display or set syslog server address automatically or not')
sysLogServerIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogServerIPv4.setStatus('current')
if mibBuilder.loadTexts: sysLogServerIPv4.setDescription('Display or set syslog server address')
sysLogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogServerPort.setStatus('current')
if mibBuilder.loadTexts: sysLogServerPort.setDescription('Display or set syslog server port')
smtpServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerEnabled.setStatus('current')
if mibBuilder.loadTexts: smtpServerEnabled.setDescription('Display or set SMTP server enable status.')
smtpServerName = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerName.setStatus('current')
if mibBuilder.loadTexts: smtpServerName.setDescription('Display or set a SMTP server name.\n        NOTE: Input string as /empty to set this object to NULL.\n        ')
smtpAuthEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: smtpAuthEnabled.setDescription('Display or set authentication of SMTP server.')
smtpAccountName = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpAccountName.setStatus('current')
if mibBuilder.loadTexts: smtpAccountName.setDescription("Display or set a user's name of SMTP server.\n        NOTE: Input string as /empty to set this object to NULL.\n        ")
smtpAccountPwd = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpAccountPwd.setStatus('current')
if mibBuilder.loadTexts: smtpAccountPwd.setDescription("Display or set a user's password of SMTP server.\n        NOTE: Input string as /empty to set this object to NULL.\n        ")
smtpMailFrom = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpMailFrom.setStatus('current')
if mibBuilder.loadTexts: smtpMailFrom.setDescription('Display or set a mail of SMTP server.\n        NOTE: Input string as /empty to set this object to NULL.\n        ')
smtpMailTo = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpMailTo.setStatus('current')
if mibBuilder.loadTexts: smtpMailTo.setDescription('Display or set a mail of SMTP server.\n        NOTE: Input string as /empty to set this object to NULL.\n        ')
configurationNotifyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationNotifyEnabled.setStatus('current')
if mibBuilder.loadTexts: configurationNotifyEnabled.setDescription(' ')
configurationNotifyTrapMSG = NotificationType((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 9, 2))
if mibBuilder.loadTexts: configurationNotifyTrapMSG.setStatus('current')
if mibBuilder.loadTexts: configurationNotifyTrapMSG.setDescription(' ')
timeZoneSetting = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZoneSetting.setStatus('current')
if mibBuilder.loadTexts: timeZoneSetting.setDescription("Display or set the time zone of PE device.\n\t\t (0) [GMT-12:00] Eniwetok Kwajalein\n         (1) [GMT-11:00] Midway Island Samoa\n         (2) [GMT-10:00] Hawaii\n         (3) [GMT-09:00] Alaska\n         (4) [GMT-08:00] Pacific Time (US & Canada); Tijuana\n         (5) [GMT-07:00] Mountain Time (US & Canada)\n         (6) [GMT-07:00] Arizona\n         (7) [GMT-06:00] Central Time (US & Canada)\n         (8) [GMT-06:00] Mexico City\n         (9) [GMT-06:00] Saskatchewan\n         (10)[GMT-06:00] Central America\n         (11)[GMT-05:00] Eastern Time (US & Canada)\n         (12)[GMT-05:00] Indiana (East)\n         (13)[GMT-05:00] Bogota Lima Quito\n         (14)[GMT-04:00] Atlantic Time (Canada)\n         (15)[GMT-04:00] Caracas La Paz\n         (16)[GMT-04:00] Santiago\n         (17)[GMT-03:30] Newfoundland\n         (18)[GMT-03:00] Buenos Aires Georgetown\n         (19)[GMT-03:00] Brasilia\n         (20)[GMT-03:00] Greenland\n         (21)[GMT-02:00] Mid-Atlantic\n         (22)[GMT-01:00] Azores\n         (23)[GMT-01:00] Cape Verde Is\n         (24)[GMT]       Casablanca Monrovia\n         (25)[GMT]       Greenwich Mean Time: Dublin Edinburgh Lisbon London\n         (26)[GMT+01:00] Amsterdam Copenhagen Madrid Paris Vilnius\n         (27)[GMT+01:00] West Central Africa\n         (28)[GMT+01:00] Belgrade Sarajevo Skopje Sofija Zagreb\n         (29)[GMT+01:00] Bratislava Budapest Ljubljana Prague Warsaw\n         (30)[GMT+01:00] Brussels Berlin Bern Rome Stockholm Vienna\n         (31)[GMT+02:00] Cairo\n         (32)[GMT+02:00] Harare Pretoria\n         (33)[GMT+02:00] Jerusalem\n         (34)[GMT+02:00] Bucharest\n         (35)[GMT+02:00] Helsinki Riga Tallinn\n         (36)[GMT+02:00] Athens Istanbul Minsk\n         (37)[GMT+03:00] Kuwait Riyadh\n         (38)[GMT+03:00] Nairobi\n         (39)[GMT+03:00] Baghdad\n         (40)[GMT+03:00] Moscow St. Petersburg Volgograd\n         (41)[GMT+03:30] Tehran\n         (42)[GMT+04:00] Abu Dhabi Muscat\n         (43)[GMT+04:00] Baku Tbilisi Yerevan\n         (44)[GMT+04:30] Kabul\n         (45)[GMT+05:00] Islamabad Karachi Tashkent\n         (46)[GMT+05:00] Ekaterinburg\n         (47)[GMT+05:30] Calcutta Chennai Mumbai New Delhi\n         (48)[GMT+05:45] Kathmandu\n         (49)[GMT+06:00] Astana Dhaka\n         (50)[GMT+06:00] Sri Jayawardenepura\n         (51)[GMT+06:00] Almaty Novosibirsk\n         (52)[GMT+06:30] Rangoon\n         (53)[GMT+07:00] Bangkok Hanoi Jakarta\n         (54)[GMT+07:00] Krasnoyarsk\n         (55)[GMT+08:00] Beijing Chongqing Hong Kong Urumqi\n         (56)[GMT+08:00] Perth\n         (57)[GMT+08:00] Kuala Lumpur Singapore\n         (58)[GMT+08:00] Taipei\n         (59)[GMT+08:00] Irkutsk Ulaan Bataar\n         (60)[GMT+09:00] Osaka Sapporo Tokyo\n         (61)[GMT+09:00] Seoul\n         (62)[GMT+09:00] Yakutsk\n         (63)[GMT+09:30] Darwin\n         (64)[GMT+09:30] Adelaide\n         (65)[GMT+10:00] Canberra Melbourne Sydney\n         (66)[GMT+10:00] Brisbane\n         (67)[GMT+10:00] Guam Port Moresby\n         (68)[GMT+10:00] Hobart\n         (69)[GMT+10:00] Vladivostok\n         (70)[GMT+11:00] Magadan Solomon Is New Caledonia\n         (71)[GMT+12:00] Fiji Kamchatka Marshall Is.\n         (72)[GMT+12:00] Auckland Wellington\n         (73)[GMT+13:00] Nuku'alofa\n\t\t")
dstEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dstEnabled.setStatus('current')
if mibBuilder.loadTexts: dstEnabled.setDescription('Display or set daylight savings time .')
dateSetting = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateSetting.setStatus('current')
if mibBuilder.loadTexts: dateSetting.setDescription('Display or set date in a manual way.(This is Greenwich Mean Time, GMT)\n         string length: 10\n\t\t This value format must match the following form:\n\t\t YYYY-MM-DD\n\t\t ex. 2011-01-01\n\t\t Note: range of year: 2000-2099\n\t\t \t   range of month: 01-12\n\t\t \t   range of day: 01-31\n\t\t')
timeSetting = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSetting.setStatus('current')
if mibBuilder.loadTexts: timeSetting.setDescription('Display or set time in a manual way.(This is Greenwich Mean Time, GMT)\n         string length: 8\n\t\t This value format must match the following form:\n\t\t HH:MM:SS\n\t\t ex. 02:02:02\n\t\t Note: range of hour: 00-24\n\t\t \t   range of minute: 00-60\n\t\t \t   range of second: 00-60\n\n\t\t')
autoAdjustEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoAdjustEnabled.setStatus('current')
if mibBuilder.loadTexts: autoAdjustEnabled.setDescription('Display or set date time useing auto adjustment way.')
preferNTP = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferNTP.setStatus('current')
if mibBuilder.loadTexts: preferNTP.setDescription('Display or set prefer NTP server.\n        AU | ntp1.cs.mu.OZ.AU(0),  \n\tAU | ntp0.cs.mu.OZ.AU(1),                        \n\tBE | ntp2.oma.be(2),                             \n\tBE | ntp1.oma.be(3),                           \n\tBR | ntps1.pads.ufrj.br(4),                      \n\tCH | swisstime.ethz.ch(5),                       \n\tCL | ntp.shoa.cl(6),                           \n\tCZ | ntp.nic.cz(7),                              \n\tDE | ntp.stairweb.de(8),                       \n\tDE | ntps1-0.cs.tu-berlin.de(9),                \t\t\t\t\t\n\tDE | ptbtime1.ptb.de(10),                       \t\t\t\t\t\n\tDE | ntp1.fau.de(11),                           \t\t\t\t\t  \n\tDE | ptbtime2.ptb.de(12),                       \t\t\t\t\t  \n\tDE | time1.one4vision.de(13),                   \t\t\t\t\t\n\tDE | rustime01.rus.uni-stuttgart.de(14),        \t\t\t\t\t\n\tDE | ntp.probe-networks.de(15),                 \t\t\t\t\t\n\tDE | ntp2.fau.de(16),                           \t\t\t\t\t  \n\tES | hora.roa.es(17),                           \t\t\t\t\t  \n\tHK | stdtime.gov.hk(18),                        \t\t\t\t\t\n\tIE | ntp-galway.hea.net(19),                    \t\t\t\t\t  \n\tIT | ntp1.inrim.it(20),                         \t\t\t\t\t  \n\tIT | ntp2.inrim.it(21),                         \t\t\t\t\t\n\tJP | clock.tl.fukuoka-u.ac.jp(22),              \t\t\t\t\t\n\tJP | ntp.nict.jp(23),                           \t\t\t\t\t\n\tJP | clock.nc.fukuoka-u.ac.jp(24),              \t\t\t\t\t\n\tKR | ntp.xbsd.kr(25),                           \t\t\t\t\t\n\tMX | cronos.cenam.mx(26),                       \t\t\t\t\t  \n\tNL | ntp0.nl.uu.net(27),                        \t\t\t\t\t  \n\tNL | ntp1.nl.uu.net(28),                        \t\t\t\t\t\n\tNL | ntp.remco.org(29),                         \t\t\t\t\t  \n\tNL | ntp0.nl.net(30),                           \t\t\t\t\t  \n\tPL | vega.cbk.poznan.pl(31),                  \t\t\t\t\n\tPL | ntp.ntp-servers.com(32),                 \t\t\t\t\n\tRO | ntp3.usv.ro(33),                         \t\t\t\t  \n\tRO | ntp2.usv.ro(34),                         \t\t\t\t  \n\tRU | ntp1.vniiftri.ru; ntp1.imvp.ru(35),      \t\t\t\t\n\tRU | ntp2.vniiftri.ru; ntp2.imvp.ru(36),      \t\t\t\t\n\tSE | ntp1.mmo.netnod.se(37),                  \t\t\t\t  \n\tSE | ntp1.sth.netnod.se(38),                  \t\t\t\t  \n\tSE | ntp2.mmo.netnod.se(39),                  \t\t\t\t\n\tSE | ntp2.sth.netnod.se(40),                  \t\t\t\t\n\tSE | time2.stupi.se(41),                      \t\t\t\t  \n\tSE | ntp1.sp.se(42),                          \t\t\t\t  \n\tSE | timehost.lysator.liu.se(43),             \t\t\t\t\n\tSI | ntp.mostovna.com(44),                    \t\t\t\t\n\tUS CA | timekeeper.isi.edu(45),               \t\t\t\t\n\tUS CA | clock.sjc.he.net(46),                 \t\t\t\t\n\tUS CA | nist1.symmetricom.com(47),            \t\t\t\t\n\tUS CA | clock.via.net(48),                    \t\t\t\t\n\tUS CA | nist1.aol-ca.truetime.com(49),        \t\t\t\t\n\tUS CA | clock.isc.org(50),                    \t\t\t\t\n\tUS CA | clepsydra.dec.com(51),                \t\t\t\t  \n\tUS CA | gps.layer42.net(52),                  \t\t\t\t  \n\tUS CA | time.no-such-agency.net(53),          \t\t\t\t\n\tUS CA | nist1-sj.WiTime.net(54),              \t\t\t\t\n\tUS CA | clock.fmt.he.net(55),                 \t\t\t\t\n\tUS CO | time-b.timefreq.bldrdoc.gov(56),      \t\t\t\t\n\tUS CO | time-a.timefreq.bldrdoc.gov(57),      \t\t\t\t\n\tUS CO | utcnist.colorado.edu(58),             \t\t\t\t\n\tUS CO | time-c.timefreq.bldrdoc.gov(59),      \t\t\t\t\n\tUS DE | rackety.udel.edu(60),                 \t\t\t\t\n\tUS DE | mizbeaver.udel.edu(61),               \t\t\t\t\n\tUS GA | nist1.columbiacountyga.gov(62),       \t\t\t\t\n\tUS IL | ntp.your.org(63),                     \t\t\t\t\n\tUS MA | bonehed.lcs.mit.edu(64),              \t\t\t\t\n\tUS MA | time.keneli.org(65),                  \t\t\t\t\n\tUS MA | ntp0.broad.mit.edu(66),               \t\t\t\t\n\tUS MD | time-a.nist.gov(67),                  \t\t\t\t\n\tUS MD | time-b.nist.gov(68),                  \t\t\t\t  \n\tUS MI | nist.netservicesgroup.com(69),        \t\t\t\t  \n\tUS NY | nist1-ny.WiTime.net(70),              \t\t\t\t\n\tUS NY | clock.nyc.he.net(71),                 \t\t\t\t\n\tUS UT | time.xmission.com(72),                \t\t\t\t\n\tUS VA | nist1-dc.WiTime.net(73),              \t\t\t\t\n\tUS VA | nist1.aol-va.truetime.com(74),        \t\t\t\t\n\tUS WA | time-nw.nist.gov(75),                 \t\t\t\t\n\tFR | utp.univ-lyon1.fr(76),                   \t\t\t\t  \n\tFR | ntp-sop.inria.fr(77),                    \t\t\t\t  \n\tFR | ntp.tuxfamily.net(78),                   \t\t\t\t\n\tUK | bear.zoo.bt.co.uk(79)                    \n\t')
preferServerIPenable = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferServerIPenable.setStatus('current')
if mibBuilder.loadTexts: preferServerIPenable.setDescription('Enable or disable prefer custom server IP.')
preferNTPIp = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferNTPIp.setStatus('current')
if mibBuilder.loadTexts: preferNTPIp.setDescription('Display or set prefer NTP server IP.')
alternateNtpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateNtpEnabled.setStatus('current')
if mibBuilder.loadTexts: alternateNtpEnabled.setDescription('Display or set date time using alternate NTP server.')
alternateNtp = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateNtp.setStatus('current')
if mibBuilder.loadTexts: alternateNtp.setDescription('Display or set alternative NTP server.\n        AU | ntp1.cs.mu.OZ.AU(0),  \n\tAU | ntp0.cs.mu.OZ.AU(1),                        \n\tBE | ntp2.oma.be(2),                             \n\tBE | ntp1.oma.be(3),                           \n\tBR | ntps1.pads.ufrj.br(4),                      \n\tCH | swisstime.ethz.ch(5),                       \n\tCL | ntp.shoa.cl(6),                           \n\tCZ | ntp.nic.cz(7),                              \n\tDE | ntp.stairweb.de(8),                       \n\tDE | ntps1-0.cs.tu-berlin.de(9),                \t\t\t\t\t\n\tDE | ptbtime1.ptb.de(10),                       \t\t\t\t\t\n\tDE | ntp1.fau.de(11),                           \t\t\t\t\t  \n\tDE | ptbtime2.ptb.de(12),                       \t\t\t\t\t  \n\tDE | time1.one4vision.de(13),                   \t\t\t\t\t\n\tDE | rustime01.rus.uni-stuttgart.de(14),        \t\t\t\t\t\n\tDE | ntp.probe-networks.de(15),                 \t\t\t\t\t\n\tDE | ntp2.fau.de(16),                           \t\t\t\t\t  \n\tES | hora.roa.es(17),                           \t\t\t\t\t  \n\tHK | stdtime.gov.hk(18),                        \t\t\t\t\t\n\tIE | ntp-galway.hea.net(19),                    \t\t\t\t\t  \n\tIT | ntp1.inrim.it(20),                         \t\t\t\t\t  \n\tIT | ntp2.inrim.it(21),                         \t\t\t\t\t\n\tJP | clock.tl.fukuoka-u.ac.jp(22),              \t\t\t\t\t\n\tJP | ntp.nict.jp(23),                           \t\t\t\t\t\n\tJP | clock.nc.fukuoka-u.ac.jp(24),              \t\t\t\t\t\n\tKR | ntp.xbsd.kr(25),                           \t\t\t\t\t\n\tMX | cronos.cenam.mx(26),                       \t\t\t\t\t  \n\tNL | ntp0.nl.uu.net(27),                        \t\t\t\t\t  \n\tNL | ntp1.nl.uu.net(28),                        \t\t\t\t\t\n\tNL | ntp.remco.org(29),                         \t\t\t\t\t  \n\tNL | ntp0.nl.net(30),                           \t\t\t\t\t  \n\tPL | vega.cbk.poznan.pl(31),                  \t\t\t\t\n\tPL | ntp.ntp-servers.com(32),                 \t\t\t\t\n\tRO | ntp3.usv.ro(33),                         \t\t\t\t  \n\tRO | ntp2.usv.ro(34),                         \t\t\t\t  \n\tRU | ntp1.vniiftri.ru; ntp1.imvp.ru(35),      \t\t\t\t\n\tRU | ntp2.vniiftri.ru; ntp2.imvp.ru(36),      \t\t\t\t\n\tSE | ntp1.mmo.netnod.se(37),                  \t\t\t\t  \n\tSE | ntp1.sth.netnod.se(38),                  \t\t\t\t  \n\tSE | ntp2.mmo.netnod.se(39),                  \t\t\t\t\n\tSE | ntp2.sth.netnod.se(40),                  \t\t\t\t\n\tSE | time2.stupi.se(41),                      \t\t\t\t  \n\tSE | ntp1.sp.se(42),                          \t\t\t\t  \n\tSE | timehost.lysator.liu.se(43),             \t\t\t\t\n\tSI | ntp.mostovna.com(44),                    \t\t\t\t\n\tUS CA | timekeeper.isi.edu(45),               \t\t\t\t\n\tUS CA | clock.sjc.he.net(46),                 \t\t\t\t\n\tUS CA | nist1.symmetricom.com(47),            \t\t\t\t\n\tUS CA | clock.via.net(48),                    \t\t\t\t\n\tUS CA | nist1.aol-ca.truetime.com(49),        \t\t\t\t\n\tUS CA | clock.isc.org(50),                    \t\t\t\t\n\tUS CA | clepsydra.dec.com(51),                \t\t\t\t  \n\tUS CA | gps.layer42.net(52),                  \t\t\t\t  \n\tUS CA | time.no-such-agency.net(53),          \t\t\t\t\n\tUS CA | nist1-sj.WiTime.net(54),              \t\t\t\t\n\tUS CA | clock.fmt.he.net(55),                 \t\t\t\t\n\tUS CO | time-b.timefreq.bldrdoc.gov(56),      \t\t\t\t\n\tUS CO | time-a.timefreq.bldrdoc.gov(57),      \t\t\t\t\n\tUS CO | utcnist.colorado.edu(58),             \t\t\t\t\n\tUS CO | time-c.timefreq.bldrdoc.gov(59),      \t\t\t\t\n\tUS DE | rackety.udel.edu(60),                 \t\t\t\t\n\tUS DE | mizbeaver.udel.edu(61),               \t\t\t\t\n\tUS GA | nist1.columbiacountyga.gov(62),       \t\t\t\t\n\tUS IL | ntp.your.org(63),                     \t\t\t\t\n\tUS MA | bonehed.lcs.mit.edu(64),              \t\t\t\t\n\tUS MA | time.keneli.org(65),                  \t\t\t\t\n\tUS MA | ntp0.broad.mit.edu(66),               \t\t\t\t\n\tUS MD | time-a.nist.gov(67),                  \t\t\t\t\n\tUS MD | time-b.nist.gov(68),                  \t\t\t\t  \n\tUS MI | nist.netservicesgroup.com(69),        \t\t\t\t  \n\tUS NY | nist1-ny.WiTime.net(70),              \t\t\t\t\n\tUS NY | clock.nyc.he.net(71),                 \t\t\t\t\n\tUS UT | time.xmission.com(72),                \t\t\t\t\n\tUS VA | nist1-dc.WiTime.net(73),              \t\t\t\t\n\tUS VA | nist1.aol-va.truetime.com(74),        \t\t\t\t\n\tUS WA | time-nw.nist.gov(75),                 \t\t\t\t\n\tFR | utp.univ-lyon1.fr(76),                   \t\t\t\t  \n\tFR | ntp-sop.inria.fr(77),                    \t\t\t\t  \n\tFR | ntp.tuxfamily.net(78),                   \t\t\t\t\n\tUK | bear.zoo.bt.co.uk(79) \n        ')
alternateServerIPenable = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateServerIPenable.setStatus('current')
if mibBuilder.loadTexts: alternateServerIPenable.setDescription('Enable or disable alternate custom server IP.')
alternateNtpIp = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateNtpIp.setStatus('current')
if mibBuilder.loadTexts: alternateNtpIp.setDescription('Display or set alternative NTP server IP.')
adjustTimeEveryDays = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adjustTimeEveryDays.setStatus('current')
if mibBuilder.loadTexts: adjustTimeEveryDays.setDescription('Display or set frequency of adjustment in days.')
loginAllowTimes = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginAllowTimes.setStatus('current')
if mibBuilder.loadTexts: loginAllowTimes.setDescription('Display or set time of login faliure.')
loginTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginTimeOut.setStatus('current')
if mibBuilder.loadTexts: loginTimeOut.setDescription('Display or set login time out.')
icmpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpEnabled.setStatus('current')
if mibBuilder.loadTexts: icmpEnabled.setDescription('Display or set status of ICMP.')
minUserNameLen = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minUserNameLen.setStatus('current')
if mibBuilder.loadTexts: minUserNameLen.setDescription('Display or set minimum length of user name.')
minUserPwdLen = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minUserPwdLen.setStatus('current')
if mibBuilder.loadTexts: minUserPwdLen.setDescription('Display or set minimum length of user password.\n        ')
upperCaseEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upperCaseEnabled.setStatus('current')
if mibBuilder.loadTexts: upperCaseEnabled.setDescription('Display or set one upper case rule in user password.')
lowerCaseEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowerCaseEnabled.setStatus('current')
if mibBuilder.loadTexts: lowerCaseEnabled.setDescription('Display or set one lower case rule in user password.')
numberEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numberEnabled.setStatus('current')
if mibBuilder.loadTexts: numberEnabled.setDescription('Display or set one number rule in user password.')
disableDuplicateLogin = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disableDuplicateLogin.setStatus('current')
if mibBuilder.loadTexts: disableDuplicateLogin.setDescription('Display or set status of disabled duplicate login rule.')
loginString = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginString.setStatus('current')
if mibBuilder.loadTexts: loginString.setDescription('Display or set a login string.\n        string length: 0~32\n        NOTE: Input string as /empty to set this object to NULL. \n        ')
ipFilterEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterEnabled.setStatus('current')
if mibBuilder.loadTexts: ipFilterEnabled.setDescription('Display or set status of ip filter.')
ipFilterRule = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterRule.setStatus('current')
if mibBuilder.loadTexts: ipFilterRule.setDescription('Display or set status of ip filter rule.')
ipFilterTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2, 3), )
if mibBuilder.loadTexts: ipFilterTable.setStatus('current')
if mibBuilder.loadTexts: ipFilterTable.setDescription('A list of restricted ip.')
ipFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2, 3, 1), ).setIndexNames((0, "ATEN-PE-CFG", "ipFilterIndex"))
if mibBuilder.loadTexts: ipFilterEntry.setStatus('current')
if mibBuilder.loadTexts: ipFilterEntry.setDescription("Status and parameter values for a PE's restricted IP.")
ipFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilterIndex.setStatus('current')
if mibBuilder.loadTexts: ipFilterIndex.setDescription('The value of index for the ip filter.\n\t\t')
ipFilterFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterFrom.setStatus('current')
if mibBuilder.loadTexts: ipFilterFrom.setDescription('A set of restricted ip.\n\t\t ex. 192.168.0.1\n\t\t  \n\t\t Note: Users must follow in order to set the ip address. \n\t\t Note: To clear the settings to set the ip 0.0.0.0\n\t\t')
ipFilterTo = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterTo.setStatus('current')
if mibBuilder.loadTexts: ipFilterTo.setDescription('A set of restricted ip.\n\t\t ex. 192.168.0.255 \n\t\t \n\t\t Note: Users must follow in order to set the ip address. \n\t\t Note: To clear the settings to set the ip 0.0.0.0\n\t\t')
macFilterEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterEnabled.setStatus('current')
if mibBuilder.loadTexts: macFilterEnabled.setDescription('Display or set status of mac filter.')
macFilterRule = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterRule.setStatus('current')
if mibBuilder.loadTexts: macFilterRule.setDescription('Display or set status of mac filter rule.')
macFilterTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 3, 3), )
if mibBuilder.loadTexts: macFilterTable.setStatus('current')
if mibBuilder.loadTexts: macFilterTable.setDescription('A list of restricted mac.')
macFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 3, 3, 1), ).setIndexNames((0, "ATEN-PE-CFG", "macFilterIndex"))
if mibBuilder.loadTexts: macFilterEntry.setStatus('current')
if mibBuilder.loadTexts: macFilterEntry.setDescription("Status and parameter values for a PE's restricted MAC.")
macFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFilterIndex.setStatus('current')
if mibBuilder.loadTexts: macFilterIndex.setDescription('The value of index for the mac filter.\n\t\t')
macFilterSet = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 3, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterSet.setStatus('current')
if mibBuilder.loadTexts: macFilterSet.setDescription('A set of restricted mac.\n\t\t string length: 12\n\t\t ex. 004854655511\n\t\t \n\t\t Note: Users must follow in order to set the MAC address. \n\t\t Note: To clear the settings to set the MAC 000000000000\n\t\t')
radiusEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusEnabled.setStatus('current')
if mibBuilder.loadTexts: radiusEnabled.setDescription('Display or set status of RADIUS server.')
preferRadiusIp = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferRadiusIp.setStatus('current')
if mibBuilder.loadTexts: preferRadiusIp.setDescription('Display or set prefer RADIUS server IP.')
preferRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferRadiusPort.setStatus('current')
if mibBuilder.loadTexts: preferRadiusPort.setDescription('Display or set prefer RADIUS server port.')
alternateRadiusIp = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateRadiusIp.setStatus('current')
if mibBuilder.loadTexts: alternateRadiusIp.setDescription('Display or set alternative RADIUS server IP.')
alternateRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateRadiusPort.setStatus('current')
if mibBuilder.loadTexts: alternateRadiusPort.setDescription('Display or set alternative RADIUS server port.')
radiusTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusTimeOut.setStatus('current')
if mibBuilder.loadTexts: radiusTimeOut.setDescription('Display or set time out of authentication using RADIUS server.\n\t\t The unit is sec.\n\t\t')
radiusRetry = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusRetry.setStatus('current')
if mibBuilder.loadTexts: radiusRetry.setDescription('Display or set retry times of authentication using RADIUS server.')
radiusSecret = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecret.setStatus('current')
if mibBuilder.loadTexts: radiusSecret.setDescription('Display or set shared secret of RADIUS server.\n\t\t string length: 6~15\n\t\t At least 6 characters.\n\t\t NOTE: Input string as /empty to set this object to NULL.\n\t\t')
usrListTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1), )
if mibBuilder.loadTexts: usrListTable.setStatus('current')
if mibBuilder.loadTexts: usrListTable.setDescription('A list of user. The number of user is\n            given by the value of usrcfgNumber.')
usrListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1), ).setIndexNames((0, "ATEN-PE-CFG", "usrIndex"))
if mibBuilder.loadTexts: usrListEntry.setStatus('current')
if mibBuilder.loadTexts: usrListEntry.setDescription('Status and parameter values for a pe8208 user.')
usrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usrIndex.setStatus('current')
if mibBuilder.loadTexts: usrIndex.setDescription('The value of usrIndex for the user. We have 1 administrator and 8 users.\n\t\t The index 9 will be the administrator.\n\t\t')
usrType = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("administrator", 1), ("user", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usrType.setStatus('current')
if mibBuilder.loadTexts: usrType.setDescription("The user's type.")
usrName = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrName.setStatus('current')
if mibBuilder.loadTexts: usrName.setDescription('A textual string containing name of the user.\n\t\t   string length: 1~16\n\t\t   ')
usrPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPassword.setStatus('current')
if mibBuilder.loadTexts: usrPassword.setDescription('A textual string containing password of the user.\n\t\t   string length: 1~16\n\t\t   ')
usrPort1Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort1Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort1Auth.setDescription("Display or set this user's outlet 1 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort2Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort2Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort2Auth.setDescription("Display or set this user's outlet 2 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort3Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort3Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort3Auth.setDescription("Display or set this user's outlet 3 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort4Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort4Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort4Auth.setDescription("Display or set this user's outlet 4 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort5Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort5Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort5Auth.setDescription("Display or set this user's outlet 5 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort6Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort6Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort6Auth.setDescription("Dispaly or set this user's outlet 6 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort7Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort7Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort7Auth.setDescription("Display or set this user's outlet 7 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort8Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort8Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort8Auth.setDescription("Display or set this user's outlet 8 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrEnable.setStatus('current')
if mibBuilder.loadTexts: usrEnable.setDescription('Display or set this user is enable or not')
usrPort9Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort9Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort9Auth.setDescription("Display or set this user's outlet 9 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort10Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort10Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort10Auth.setDescription("Display or set this user's outlet 10 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort11Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort11Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort11Auth.setDescription("Display or set this user's outlet 11 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort12Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort12Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort12Auth.setDescription("Display or set this user's outlet 12 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort13Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort13Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort13Auth.setDescription("Display or set this user's outlet 13 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort14Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort14Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort14Auth.setDescription("Display or set this user's outlet 14 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort15Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort15Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort15Auth.setDescription("Display or set this user's outlet 15 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort16Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort16Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort16Auth.setDescription("Display or set this user's outlet 16 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort17Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort17Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort17Auth.setDescription("Display or set this user's outlet 17 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort18Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort18Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort18Auth.setDescription("Display or set this user's outlet 18 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort19Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort19Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort19Auth.setDescription("Display or set this user's outlet 19 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort20Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort20Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort20Auth.setDescription("Display or set this user's outlet 20 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort21Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort21Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort21Auth.setDescription("Display or set this user's outlet 21 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort22Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort22Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort22Auth.setDescription("Display or set this user's outlet 22 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort23Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort23Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort23Auth.setDescription("Display or set this user's outlet 23 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort24Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort24Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort24Auth.setDescription("Display or set this user's outlet 24 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort25Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort25Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort25Auth.setDescription("Display or set this user's outlet 25 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort26Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort26Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort26Auth.setDescription("Display or set this user's outlet 26 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort27Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort27Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort27Auth.setDescription("Display or set this user's outlet 27 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort28Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort28Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort28Auth.setDescription("Display or set this user's outlet 28 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort29Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort29Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort29Auth.setDescription("Display or set this user's outlet 29 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort30Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort30Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort30Auth.setDescription("Display or set this user's outlet 30 authority.\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort31Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort31Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort31Auth.setDescription("Display or set this user's outlet 31 authority\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort32Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort32Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort32Auth.setDescription("Display or set this user's outlet 32 authority\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort33Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort33Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort33Auth.setDescription("Display or set this user's outlet 33 authority\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort34Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort34Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort34Auth.setDescription("Display or set this user's outlet 34 authority\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort35Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort35Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort35Auth.setDescription("Display or set this user's outlet 35 authority\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort36Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort36Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort36Auth.setDescription("Display or set this user's outlet 36 authority\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort37Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort37Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort37Auth.setDescription("Display or set this user's outlet 37 authority\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort38Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort38Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort38Auth.setDescription("Display or set this user's outlet 38 authority\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort39Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort39Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort39Auth.setDescription("Display or set this user's outlet 39 authority\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort40Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort40Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort40Auth.setDescription("Display or set this user's outlet 40 authority\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort41Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort41Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort41Auth.setDescription("Display or set this user's outlet 41 authority\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
usrPort42Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort42Auth.setStatus('current')
if mibBuilder.loadTexts: usrPort42Auth.setDescription("Display or set this user's outlet 42 authority\n\t\tPort in the pe of series represents outlet.\n\t\tPort in the Energy monitor of series represents a bank or a pdu.")
customTrapMSG = NotificationType((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 5))
if mibBuilder.loadTexts: customTrapMSG.setStatus('current')
if mibBuilder.loadTexts: customTrapMSG.setDescription('Display custom trap message.')
rebootDevice = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootDevice.setStatus('current')
if mibBuilder.loadTexts: rebootDevice.setDescription('Reboot PE Device')
mibBuilder.exportSymbols("ATEN-PE-CFG", pe=pe, outlet31Status=outlet31Status, outletIntegerPower=outletIntegerPower, outlet20Status=outlet20Status, bankControlIndex=bankControlIndex, sensorMaxPressMT=sensorMaxPressMT, usrListEntry=usrListEntry, outlet35Status=outlet35Status, outlet12Status=outlet12Status, outlet13Status=outlet13Status, outletValueIndex=outletValueIndex, usrPort27Auth=usrPort27Auth, outletSwitchable=outletSwitchable, outlet17Status=outlet17Status, usrPort32Auth=usrPort32Auth, deviceValueEntry=deviceValueEntry, bankMaxCurMT=bankMaxCurMT, outlet42Status=outlet42Status, preferServerIPenable=preferServerIPenable, syslog=syslog, deviceSensorTresholdEntry=deviceSensorTresholdEntry, outletnumber=outletnumber, smtpAccountPwd=smtpAccountPwd, outletSwitchableTable=outletSwitchableTable, bankMaxPMT=bankMaxPMT, bankIntegerValueTable=bankIntegerValueTable, fixedIPv4=fixedIPv4, gateway=gateway, outlet19Status=outlet19Status, dateTime=dateTime, outlet18Status=outlet18Status, usrPort39Auth=usrPort39Auth, bankPowerFactor=bankPowerFactor, outlet11Status=outlet11Status, usrPassword=usrPassword, deviceIntegerVoltage=deviceIntegerVoltage, deviceManagement=deviceManagement, usrPort5Auth=usrPort5Auth, outletPowerFactor=outletPowerFactor, icmpEnabled=icmpEnabled, outletConfigEntry=outletConfigEntry, outlet32Status=outlet32Status, macFilterRule=macFilterRule, outletOnDelayTime=outletOnDelayTime, control=control, overip=overip, inputMaxVoltage=inputMaxVoltage, ipFilterEnabled=ipFilterEnabled, outletSwitchableEntry=outletSwitchableEntry, outlet9Status=outlet9Status, outlet30Status=outlet30Status, dstEnabled=dstEnabled, macFilterEntry=macFilterEntry, outletMaxPDMT=outletMaxPDMT, httpPort=httpPort, alternateNtpIp=alternateNtpIp, alternateNtpEnabled=alternateNtpEnabled, timeSetting=timeSetting, outletValueTable=outletValueTable, outlet10Status=outlet10Status, outlet40Status=outlet40Status, macFilterSet=macFilterSet, outletMAC=outletMAC, minUserNameLen=minUserNameLen, subnetMask=subnetMask, accountPolicy=accountPolicy, sensorIntegerTemperature=sensorIntegerTemperature, bank=bank, outletCAPEntry=outletCAPEntry, trapReceiverIPAddress=trapReceiverIPAddress, usrPort36Auth=usrPort36Auth, outlet28Status=outlet28Status, doorSensorType=doorSensorType, outlet14Status=outlet14Status, usrPort31Auth=usrPort31Auth, adjustTimeEveryDays=adjustTimeEveryDays, outletMaxCurrent=outletMaxCurrent, bankIntegerVoltage=bankIntegerVoltage, outletMinVolMT=outletMinVolMT, radiusTimeOut=radiusTimeOut, dnsPreferIPv4=dnsPreferIPv4, outlet7Status=outlet7Status, loginFailures=loginFailures, smtpAuthEnabled=smtpAuthEnabled, breakerStatusIndex=breakerStatusIndex, dashboardRow=dashboardRow, deviceName=deviceName, macFilterIndex=macFilterIndex, cap=cap, autoAdjustEnabled=autoAdjustEnabled, workingMode=workingMode, devicePowerFactor=devicePowerFactor, outletCAPIndex=outletCAPIndex, deviceConfigEntry=deviceConfigEntry, dnsAlternateIPv4=dnsAlternateIPv4, upperCaseEnabled=upperCaseEnabled, outlet34Status=outlet34Status, preferNTPIp=preferNTPIp, outletConfirmation=outletConfirmation, outletIntegerCurrent=outletIntegerCurrent, deviceIPv4=deviceIPv4, outletInitMode=outletInitMode, usrPort6Auth=usrPort6Auth, alternateRadiusIp=alternateRadiusIp, snmpTrapEntry=snmpTrapEntry, outlet15Status=outlet15Status, enableLIFOPOPmode=enableLIFOPOPmode, usrPort18Auth=usrPort18Auth, displayOutletStatus=displayOutletStatus, usrPort19Auth=usrPort19Auth, smtpMailTo=smtpMailTo, popThreshold=popThreshold, configurationNotifyEnabled=configurationNotifyEnabled, ipv4config=ipv4config, deviceSensorTresholdIndex=deviceSensorTresholdIndex, usrPort30Auth=usrPort30Auth, bankIntegerValueIndex=bankIntegerValueIndex, bankMinCurMT=bankMinCurMT, poweroverip=poweroverip, devicesecurity=devicesecurity, usrPort35Auth=usrPort35Auth, outlet4Status=outlet4Status, outlet6Status=outlet6Status, outletMinCurMT=outletMinCurMT, usrPort34Auth=usrPort34Auth, dashBoard=dashBoard, deviceIntegerPower=deviceIntegerPower, httpsOnlyEnable=httpsOnlyEnable, outlet25Status=outlet25Status, bankMinPMT=bankMinPMT, usrPort41Auth=usrPort41Auth, smtp=smtp, PYSNMP_MODULE_ID=aten, macFilterEnabled=macFilterEnabled, preferNTP=preferNTP, outlet23Status=outlet23Status, ipFilterTo=ipFilterTo, bankConfigIndex=bankConfigIndex, outlet22Status=outlet22Status, sysLogServerEnabled=sysLogServerEnabled, usrPort4Auth=usrPort4Auth, outlet16Status=outlet16Status, deviceValueTable=deviceValueTable, outlet36Status=outlet36Status, pop=pop, smtpAccountName=smtpAccountName, outletConfigTable=outletConfigTable, deviceMaxPMT=deviceMaxPMT, outletMaxCurMT=outletMaxCurMT, outletMaxPMT=outletMaxPMT, lowerCaseEnabled=lowerCaseEnabled, breakerStatus=breakerStatus, servicePorts=servicePorts, alternateNtp=alternateNtp, sensorMinTempMT=sensorMinTempMT, usrPort42Auth=usrPort42Auth, snmpTrapTable=snmpTrapTable, bankIntegerPowerDissipation=bankIntegerPowerDissipation, outletShutdownMethod=outletShutdownMethod, trapCommunity=trapCommunity, inputMaxCurrent=inputMaxCurrent, networkTime=networkTime, outlet1Status=outlet1Status, sensorMinHumMT=sensorMinHumMT, dashboardRackName=dashboardRackName, configurationNotifyTrapMSG=configurationNotifyTrapMSG, bankConfigTable=bankConfigTable, bankControlStatus=bankControlStatus, usrPort24Auth=usrPort24Auth, alternateRadiusPort=alternateRadiusPort, deviceMaxPDMT=deviceMaxPDMT, usrPort16Auth=usrPort16Auth, enableCAPmode=enableCAPmode, bankAttachStatus=bankAttachStatus, bankMaxPDMT=bankMaxPDMT, smtpServerName=smtpServerName, bankMaxCurrent=bankMaxCurrent, usrPort2Auth=usrPort2Auth, outlet27Status=outlet27Status, outletConfigIndex=outletConfigIndex, timeZone=timeZone, deviceIntegerValueTable=deviceIntegerValueTable, configurationNotification=configurationNotification, usrPort14Auth=usrPort14Auth, macFilter=macFilter, trapPort=trapPort, usrPort40Auth=usrPort40Auth, usrPort25Auth=usrPort25Auth, outletIntegerValueTable=outletIntegerValueTable, trapEnabled=trapEnabled, loginTimeOut=loginTimeOut, outlet3Status=outlet3Status, ipFilterRule=ipFilterRule, trapUsername=trapUsername, deviceIntegerCurrent=deviceIntegerCurrent, aten=aten, doorSensor=doorSensor, eventNotification=eventNotification, outlet38Status=outlet38Status, usrPort9Auth=usrPort9Auth, rebootDevice=rebootDevice, deviceMaxVolMT=deviceMaxVolMT, enablePOPmode=enablePOPmode, loginAllowTimes=loginAllowTimes, outletName=outletName, bankIntegerCurrent=bankIntegerCurrent, authentication=authentication, outlet33Status=outlet33Status, sensorIntegerPressure=sensorIntegerPressure, usrPort38Auth=usrPort38Auth, usrPort21Auth=usrPort21Auth, deviceMAC=deviceMAC, outletIntegerVoltage=outletIntegerVoltage, radiusRetry=radiusRetry, doorSensorStatus=doorSensorStatus, sensorIntegerValueIndex=sensorIntegerValueIndex, usrPort13Auth=usrPort13Auth, bankConfigEntry=bankConfigEntry, preferRadiusPort=preferRadiusPort, usrPort11Auth=usrPort11Auth, switchable=switchable, bankMaxVolMT=bankMaxVolMT, outletSwitchableIndex=outletSwitchableIndex, usrPort22Auth=usrPort22Auth, sysLogServerIPv4=sysLogServerIPv4, radiusSecret=radiusSecret, outletIntegerValueIndex=outletIntegerValueIndex, deviceMinCurMT=deviceMinCurMT, usrPort17Auth=usrPort17Auth, usrPort28Auth=usrPort28Auth, manualInput=manualInput, deviceMaxCurMT=deviceMaxCurMT, outletOffDelayTime=outletOffDelayTime, minUserPwdLen=minUserPwdLen, trapPrivpassword=trapPrivpassword, deviceOutletReboot=deviceOutletReboot, usrPort33Auth=usrPort33Auth, device=device, outlet37Status=outlet37Status, outletCAPPriority=outletCAPPriority, usrListTable=usrListTable, bankName=bankName, loginRestriction=loginRestriction, loginString=loginString, bankValueTable=bankValueTable, banknumber=banknumber, usrPort8Auth=usrPort8Auth, customTrapMSG=customTrapMSG, breakerStatusTable=breakerStatusTable, radiusEnabled=radiusEnabled, bankControlEntry=bankControlEntry, ipFilter=ipFilter, trapReceiverNumber=trapReceiverNumber, usrPort1Auth=usrPort1Auth)
mibBuilder.exportSymbols("ATEN-PE-CFG", deviceOutletStatusIndex=deviceOutletStatusIndex, deviceConfigTable=deviceConfigTable, sensorMaxHumMT=sensorMaxHumMT, modelName=modelName, radius=radius, sensorIntegerValueTable=sensorIntegerValueTable, staticDNSEnabled=staticDNSEnabled, deviceOutletStatusEntry=deviceOutletStatusEntry, outlet39Status=outlet39Status, outlet26Status=outlet26Status, macFilterTable=macFilterTable, sensorIntegerValueEntry=sensorIntegerValueEntry, outletIntegerValueEntry=outletIntegerValueEntry, userManagement=userManagement, outlet8Status=outlet8Status, dateSetting=dateSetting, devicesnmp=devicesnmp, sensorMinPressMT=sensorMinPressMT, deviceFWversion=deviceFWversion, httpsPort=httpsPort, deviceConfigIndex=deviceConfigIndex, usrIndex=usrIndex, bankControlTable=bankControlTable, bankMinVolMT=bankMinVolMT, atenProducts=atenProducts, usrPort7Auth=usrPort7Auth, bankIntegerValueEntry=bankIntegerValueEntry, enableOutletPOPmode=enableOutletPOPmode, outletCAPTable=outletCAPTable, outletValueEntry=outletValueEntry, smtpServerEnabled=smtpServerEnabled, numberEnabled=numberEnabled, ipFilterTable=ipFilterTable, outletMinPMT=outletMinPMT, outlet=outlet, deviceMinVolMT=deviceMinVolMT, sensorIntegerHumidity=sensorIntegerHumidity, outlet41Status=outlet41Status, deviceOutletControl=deviceOutletControl, usrPort37Auth=usrPort37Auth, outlet24Status=outlet24Status, bankValueIndex=bankValueIndex, outletMaxVolMT=outletMaxVolMT, outlet29Status=outlet29Status, usrType=usrType, perportreading=perportreading, outletIntegerPowerDissipation=outletIntegerPowerDissipation, sensornumber=sensornumber, deviceIntegerPowerDissipation=deviceIntegerPowerDissipation, usrPort3Auth=usrPort3Auth, preferRadiusIp=preferRadiusIp, usrPort26Auth=usrPort26Auth, usrPort29Auth=usrPort29Auth, sysLogServerPort=sysLogServerPort, deviceIntegerValueIndex=deviceIntegerValueIndex, outlet5Status=outlet5Status, usrPort15Auth=usrPort15Auth, deviceValueIndex=deviceValueIndex, usrName=usrName, smtpMailFrom=smtpMailFrom, sensorMaxTempMT=sensorMaxTempMT, deviceMinPMT=deviceMinPMT, timeZoneSetting=timeZoneSetting, usrPort10Auth=usrPort10Auth, disableDuplicateLogin=disableDuplicateLogin, trapAuthpassword=trapAuthpassword, trapVersion=trapVersion, dashboardColumn=dashboardColumn, ipFilterIndex=ipFilterIndex, ipFilterEntry=ipFilterEntry, enablePriorityPOPmode=enablePriorityPOPmode, usrPort20Auth=usrPort20Auth, outlet2Status=outlet2Status, usrEnable=usrEnable, deviceOutletStatusTable=deviceOutletStatusTable, powerCapacity=powerCapacity, ipFilterFrom=ipFilterFrom, breakerStatusEntry=breakerStatusEntry, deviceIntegerValueEntry=deviceIntegerValueEntry, outlet21Status=outlet21Status, bankValueEntry=bankValueEntry, usrPort12Auth=usrPort12Auth, config=config, usrPort23Auth=usrPort23Auth, bankIntegerPower=bankIntegerPower, deviceSensorTresholdTable=deviceSensorTresholdTable, alternateServerIPenable=alternateServerIPenable, staticIPEnabled=staticIPEnabled)
