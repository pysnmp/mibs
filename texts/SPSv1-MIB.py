#
# PySNMP MIB module SPSv1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/bladeshelter/SPSv1-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:05:31 2024
# On host fv-az1121-719 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, NotificationType, Gauge32, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, iso, MibIdentifier, Unsigned32, enterprises, Counter32, TimeTicks, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "Gauge32", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "iso", "MibIdentifier", "Unsigned32", "enterprises", "Counter32", "TimeTicks", "Integer32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
powertek = MibIdentifier((1, 3, 6, 1, 4, 1, 42610))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1))
pdu = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4))
sps = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4))
pduObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1))
pduTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2))
pduIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 1))
pduNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2))
pduSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3))
pduSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4))
pduEmail = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5))
pduPwrMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6))
pduEnvMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7))
pduIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduIdentAgentSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: pduIdentAgentSoftwareVersion.setDescription('The firmware version of the device.')
pduIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduIdentSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pduIdentSerialNumber.setDescription('A Model of this device.')
pduNetworkTcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1))
pduNetworkTcpipDhcpControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipDhcpControl.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkTcpipDhcpControl.setDescription('Enable/disable DHCP protocol')
pduNetworkTcpipIpv4 = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 2))
pduNetworkTcpipIpv4Address = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv4Address.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkTcpipIpv4Address.setDescription('The ip address that NMS can identify the managed device.')
pduNetworkTcpipIpv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv4Gateway.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkTcpipIpv4Gateway.setDescription('The default gateway that allow device managed through routers.')
pduNetworkTcpipIpv4Subnet = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv4Subnet.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkTcpipIpv4Subnet.setDescription('Internet address subnet mask')
pduNetworkTcpipIpv4PrimaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv4PrimaryDNS.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkTcpipIpv4PrimaryDNS.setDescription('Internet address of Primary DNS Server')
pduNetworkTcpipIpv4SecondaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv4SecondaryDNS.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkTcpipIpv4SecondaryDNS.setDescription('Internet address of Secondary DNS')
pduNetworkTcpipIpv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3))
pduNetworkTcpipIpv6Control = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv6Control.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkTcpipIpv6Control.setDescription('Enable/disable IPv6 protocol')
pduNetworkTcpipIpv6AutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv6AutoConfig.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkTcpipIpv6AutoConfig.setDescription('IPv6 Auto-config or Maual setting')
pduNetworkTcpipIpv6Address = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNetworkTcpipIpv6Address.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkTcpipIpv6Address.setDescription('The ipv6 address that NMS can identify the managed device.')
pduNetworkTcpipIpv6Prefix = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNetworkTcpipIpv6Prefix.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkTcpipIpv6Prefix.setDescription('The prefix length for ipv6 address.')
pduNetworkTcpipIpv6Router = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNetworkTcpipIpv6Router.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkTcpipIpv6Router.setDescription('The default gateway that allow device managed through routers.')
pduNetworkTcpipIpv6PrimaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv6PrimaryDNS.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkTcpipIpv6PrimaryDNS.setDescription('Internet address of Primary DNS Server')
pduNetworkTcpipIpv6SecondaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv6SecondaryDNS.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkTcpipIpv6SecondaryDNS.setDescription('Internet address of Secondary DNS')
pduNetworkSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2))
pduNetworkSecurityControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecurityControl.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkSecurityControl.setDescription('Enable/disable Network Access Protection')
pduNetworkSecuritySsh = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 2))
pduNetworkSecuritySshControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySshControl.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkSecuritySshControl.setDescription('Enable/disable SSH Access Protection')
pduNetworkSecuritySshInterval = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneMinute", 1), ("fiveMinutes", 2), ("tenMinutes", 3), ("thirtyMinutes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySshInterval.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkSecuritySshInterval.setDescription('Detecting Interval of SSH Access Protection')
pduNetworkSecuritySshFailTimes = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("five", 1), ("ten", 2), ("twenty", 3), ("thirty", 4), ("hundred", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySshFailTimes.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkSecuritySshFailTimes.setDescription('Unsuccessful attempts of SSH Access Protection')
pduNetworkSecuritySshBlock = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fiveMinutes", 1), ("thirtyMinutes", 2), ("oneHour", 3), ("oneDay", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySshBlock.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkSecuritySshBlock.setDescription('Block Time of SSH Access Protection')
pduNetworkSecuritySnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 3))
pduNetworkSecuritySnmpControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySnmpControl.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkSecuritySnmpControl.setDescription('Enable/disable SNMP Access Protection')
pduNetworkSecuritySnmpInterval = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneMinute", 1), ("fiveMinutes", 2), ("tenMinutes", 3), ("thirtyMinutes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySnmpInterval.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkSecuritySnmpInterval.setDescription('Detecting Interval of SNMP Access Protection')
pduNetworkSecuritySnmpFailTimes = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("five", 1), ("ten", 2), ("twenty", 3), ("thirty", 4), ("hundred", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySnmpFailTimes.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkSecuritySnmpFailTimes.setDescription('Unsuccessful attempts of SNMP Access Protection')
pduNetworkSecuritySnmpBlock = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fiveMinutes", 1), ("thirtyMinutes", 2), ("oneHour", 3), ("oneDay", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySnmpBlock.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkSecuritySnmpBlock.setDescription('Block Time of SNMP Access Protection')
pduNetworkSecurityHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 4))
pduNetworkSecurityHttpControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecurityHttpControl.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkSecurityHttpControl.setDescription('Enable/disable HTTP Access Protection')
pduNetworkSecurityHttpInterval = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneMinute", 1), ("fiveMinutes", 2), ("tenMinutes", 3), ("thirtyMinutes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecurityHttpInterval.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkSecurityHttpInterval.setDescription('Detecting Interval of HTTP Access Protection')
pduNetworkSecurityHttpFailTimes = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("five", 1), ("ten", 2), ("twenty", 3), ("thirty", 4), ("hundred", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecurityHttpFailTimes.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkSecurityHttpFailTimes.setDescription('Unsuccessful attempts of HTTP Access Protection')
pduNetworkSecurityHttpBlock = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fiveMinutes", 1), ("thirtyMinutes", 2), ("oneHour", 3), ("oneDay", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecurityHttpBlock.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkSecurityHttpBlock.setDescription('Block Time of HTTP Access Protection')
pduNetworkService = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3))
pduNetworkServiceSsh = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 1))
pduNetworkServiceSshControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceSshControl.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkServiceSshControl.setDescription('Enable/disable SSH Server Service')
pduNetworkServiceSshPort = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceSshPort.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkServiceSshPort.setDescription('The Port Number of SSH Server Service')
pduNetworkServiceSsl = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 2))
pduNetworkServiceSslControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceSslControl.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkServiceSslControl.setDescription('Enable/disable HTTPs Server Service')
pduNetworkServiceSslPort = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceSslPort.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkServiceSslPort.setDescription('The Port Number of HTTPs Server Service')
pduNetworkServiceSslForce = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceSslForce.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkServiceSslForce.setDescription('Force use HTTPs Server Service only.')
pduNetworkServicePingControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServicePingControl.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkServicePingControl.setDescription('Enable/disable to response to PING request.')
pduNetworkServiceRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 4))
pduNetworkServiceRadiusControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceRadiusControl.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkServiceRadiusControl.setDescription('Enable/disable RADIUS Client Service')
pduNetworkServiceRadiusIp = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceRadiusIp.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkServiceRadiusIp.setDescription('The IP Address of RADIUS Client Service')
pduNetworkServiceRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceRadiusPort.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkServiceRadiusPort.setDescription('The Port Number of RADIUS Client Service')
pduNetworkServiceRadiusSecretKey = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceRadiusSecretKey.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkServiceRadiusSecretKey.setDescription('The Secret Key of RADIUS Client Service')
pduNetworkServiceRadiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceRadiusTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkServiceRadiusTimeout.setDescription('The Timeout Interval of RADIUS Client Service in seconds')
pduNetworkServiceRadiusRetry = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceRadiusRetry.setStatus('mandatory')
if mibBuilder.loadTexts: pduNetworkServiceRadiusRetry.setDescription('The Retry Times of RADIUS Client Service')
pduSystemName = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemName.setDescription('The name of system.')
pduSystemContact = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemContact.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemContact.setDescription('The contact of system.')
pduSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemLocation.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemLocation.setDescription('The location of system.')
pduSystemLogInterval = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemLogInterval.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemLogInterval.setDescription('The Log Interval of device')
pduSystemWebRefresh = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemWebRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemWebRefresh.setDescription('The Web Refresh Interval of device')
pduSystemTime = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6))
pduSystemTimeDisplay = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduSystemTimeDisplay.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemTimeDisplay.setDescription('The date/time in agent')
pduSystemTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77))).clone(namedValues=NamedValues(("gMT-1200InternationalDateLineWest", 1), ("gMT-1200Eniwetok-Kwajalein", 2), ("gMT-1100MidwayIsland-Samoa", 3), ("gMT-1000Hawaii", 4), ("gMT-0900Alaska", 5), ("gMT-0800PacificTime-Tijuana", 6), ("gMT-0700Arizona-MountainTime", 7), ("gMT-0700Chihuahua-LaPaz-Mazatlan", 8), ("gMT-0700MountainTime", 9), ("gMT-0600CentralAmerica", 10), ("gMT-0600CentralTime", 11), ("gMT-0600Guadalajara-MexicoCity-Monterrey", 12), ("gMT-0600Saskatchewan", 13), ("gMT-0500Bogota-Lima-Quito", 14), ("gMT-0500EasternTime", 15), ("gMT-0500Indiana", 16), ("gMT-0400AtlanticTime", 17), ("gMT-0400Caracas-LaPaz", 18), ("gMT-0400Santiago", 19), ("gMT-0330Newfoundland", 20), ("gMT-0300Brasilia", 21), ("gMT-0300BuenosAires-Georgetown", 22), ("gMT-0300Greenland", 23), ("gMT-0200Mid-Atlantic", 24), ("gMT-0100Azores", 25), ("gMT-0100CapeVerdeIs", 26), ("gMT-0000Casablanca-Monrovia", 27), ("gMT-0000GreenwichMeanTime-Dublin-Edinburgh-Lisbon-London", 28), ("gMT0100Amsterdam-Berlin-Bern-Rome-Stockholm-Vienna", 29), ("gMT0100Belgrade-Bratislava-Budapest-Ljubljana-Prague", 30), ("gMT0100Brussels-Copenhagen-Madrid-Paris", 31), ("gMT0100Sarajevo-Skopje-Warsaw-Zagreb", 32), ("gMT0100WestCentralAfrica", 33), ("gMT0200Athens-Istanbul-Minsk", 34), ("gMT0200Bucharest", 35), ("gMT0200Cairo", 36), ("gMT0200Harare-Pretoria", 37), ("gMT0200Helsinki-Kyiv-Riga-Sofia-Tallinn-Vilnius", 38), ("gMT0200Jerusalem", 39), ("gMT0300Baghdad", 40), ("gMT0300Kuwait-Riyadh", 41), ("gMT0300Moscow-StPetersburg-Volgograd", 42), ("gMT0300Nairobi", 43), ("gMT0330Tehran", 44), ("gMT0400AbuDhabi-Muscat", 45), ("gMT0400Baku-Tbilisi-Yerevan", 46), ("gMT0430Kabul", 47), ("gMT0500Ekaterinburg", 48), ("gMT0500Islamabad-Karachi-Tashkent", 49), ("gMT0530Bombay-Calcutta", 50), ("gMT0530Chennai-Kolkata-Mumbai-NewDelhi", 51), ("gMT0545Kathmandu", 52), ("gMT0600Almaty-Novosibirsk", 53), ("gMT0600Astana-Dhaka", 54), ("gMT0600SriJayawardenepura", 55), ("gMT0630Rangoon", 56), ("gMT0700Bangkok-Hanoi-Jakarta", 57), ("gMT0700Krasnoyarsk", 58), ("gMT0800Beijing-Chongqing-HongKong-Urumqi", 59), ("gMT0800Irkutsk-UlaanBataar", 60), ("gMT0800KualaLumpur-Singapore", 61), ("gMT0800Perth", 62), ("gMT0800Taipei", 63), ("gMT0900Osaka-Sapporo-Tokyo", 64), ("gMT0900Seoul", 65), ("gMT0900Yakutsk", 66), ("gMT0930Adelaide", 67), ("gMT0930Darwin", 68), ("gMT1000Brisbane", 69), ("gMT1000Canberra-Melbourne-Sydney", 70), ("gMT1000Guam-PortMoresby", 71), ("gMT1000Hobart", 72), ("gMT1000Vladivostok", 73), ("gMT1100Magadan-SolomonIs-NewCaledonia", 74), ("gMT1200Auckland-Wellington", 75), ("gMT1200Fiji-Kamchatka-MarshallIs", 76), ("gMT1300NukuAlofa", 77)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemTimeZone.setDescription('Time Zone to use when synchronize with NTP server.')
pduSystemTimeFormat = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mmddyyyy", 1), ("ddmmyyyy", 2), ("yyyymmdd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeFormat.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemTimeFormat.setDescription('Date Format')
pduSystemTimeSetting = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twentyFourHrFormat", 1), ("twelveHrFormat", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeSetting.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemTimeSetting.setDescription('Time Setting')
pduSystemTimeDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeDayLightSaving.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemTimeDayLightSaving.setDescription('Enable/disable the Day Light Saving when synchronize with NTP server.')
pduSystemTimeManual = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 6))
pduSystemTimeManualDate = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeManualDate.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemTimeManualDate.setDescription('The date in agent, format is (dd/mm/yyyy)')
pduSystemTimeManualTime = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeManualTime.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemTimeManualTime.setDescription('The time in agent, format is (hh:mm:ss)')
pduSystemTimeNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 7))
pduSystemTimeNtpControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeNtpControl.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemTimeNtpControl.setDescription('Enable or disable the agent to synchronize date/time with NTP server.')
pduSystemTimeNtpServer = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeNtpServer.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemTimeNtpServer.setDescription('The ip address of NTP server.')
pduSystemTimeNtpSyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeNtpSyncInterval.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemTimeNtpSyncInterval.setDescription('The Sync Interval with NTP server.')
pduSystemTimeNtpSyncUnit = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("day", 1), ("month", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeNtpSyncUnit.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemTimeNtpSyncUnit.setDescription('The Unit of Sync Interval')
pduSystemResetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nothing", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemResetToDefault.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemResetToDefault.setDescription('Reset the parameter of PDU to default.')
pduSystemReboot = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nothing", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemReboot.setStatus('mandatory')
if mibBuilder.loadTexts: pduSystemReboot.setDescription('Reboot the system of PDU.')
pduSnmpControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSnmpControl.setStatus('mandatory')
if mibBuilder.loadTexts: pduSnmpControl.setDescription('Enable/disable SNMP protocol.')
pduSnmpPort = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSnmpPort.setStatus('mandatory')
if mibBuilder.loadTexts: pduSnmpPort.setDescription('The UDP port for SNMP.')
pduSnmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSnmpVersion.setStatus('mandatory')
if mibBuilder.loadTexts: pduSnmpVersion.setDescription('Set SNMP version.')
pduSnmpTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 4), )
if mibBuilder.loadTexts: pduSnmpTrapsReceiversTable.setStatus('mandatory')
if mibBuilder.loadTexts: pduSnmpTrapsReceiversTable.setDescription('A list of managers to send traps to.  The number of\n                 entries is given by the value of pduSnmpNumTrapReceivers')
pduSnmpTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 4, 1), ).setIndexNames((0, "SPSv1-MIB", "trapsIndex"))
if mibBuilder.loadTexts: pduSnmpTrapsReceiversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduSnmpTrapsReceiversEntry.setDescription('The managers to send traps to.')
trapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapsIndex.setDescription('The index to a trap receiver entry.')
trapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsReceiverAddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapsReceiverAddr.setDescription('The IP address of the manager to send a trap to.')
receiverEventLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverEventLevel.setStatus('mandatory')
if mibBuilder.loadTexts: receiverEventLevel.setDescription('The severity level of traps to be received by this manager.')
receiverSnmpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverSnmpVer.setStatus('mandatory')
if mibBuilder.loadTexts: receiverSnmpVer.setDescription('The SNMP Trap version of trap receivers.')
receiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverDescription.setStatus('mandatory')
if mibBuilder.loadTexts: receiverDescription.setDescription('Description of trap receivers')
pduEmailServer = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEmailServer.setStatus('mandatory')
if mibBuilder.loadTexts: pduEmailServer.setDescription('The address of Email server.')
pduEmailPort = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEmailPort.setStatus('mandatory')
if mibBuilder.loadTexts: pduEmailPort.setDescription('The UDP port for Email Server.')
pduEmailSenderEmail = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEmailSenderEmail.setStatus('mandatory')
if mibBuilder.loadTexts: pduEmailSenderEmail.setDescription("The sender's Email address")
pduEmailPrefix = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEmailPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: pduEmailPrefix.setDescription('The prefix string of mail subject')
pduEmailAuthControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEmailAuthControl.setStatus('mandatory')
if mibBuilder.loadTexts: pduEmailAuthControl.setDescription('Enable/disable SMTP Authentication.')
pduEmailAuthUsername = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEmailAuthUsername.setStatus('mandatory')
if mibBuilder.loadTexts: pduEmailAuthUsername.setDescription('The user name of SMTP Authentication')
pduEmailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEmailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: pduEmailAuthPassword.setDescription('The password of SMTP Authentication')
pduEmailReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 8), )
if mibBuilder.loadTexts: pduEmailReceiversTable.setStatus('mandatory')
if mibBuilder.loadTexts: pduEmailReceiversTable.setDescription('A list of managers to send email notification to.')
pduEmailReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 8, 1), ).setIndexNames((0, "SPSv1-MIB", "mailRecvIndex"))
if mibBuilder.loadTexts: pduEmailReceiversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduEmailReceiversEntry.setDescription('The managers to send email notification to.')
mailRecvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mailRecvIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mailRecvIndex.setDescription('The index to a email notification receiver entry.')
mailRecvReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailRecvReceiverAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mailRecvReceiverAddr.setDescription('The Email address of the manager to send a email notification to.')
mailRecvEmailType = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("events", 2), ("status", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailRecvEmailType.setStatus('mandatory')
if mibBuilder.loadTexts: mailRecvEmailType.setDescription('The Email Type of email notification receivers.')
mailRecvEventLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailRecvEventLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mailRecvEventLevel.setDescription('The severity level of email notification to be received by this manager.')
mailRecvDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailRecvDescription.setStatus('mandatory')
if mibBuilder.loadTexts: mailRecvDescription.setDescription('Description of email notification receivers')
pduPwrMonitoringInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1))
pduPwrMonitoringInletNum = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPwrMonitoringInletNum.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringInletNum.setDescription('The number of Inlet.')
pduPwrMonitoringInletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2), )
if mibBuilder.loadTexts: pduPwrMonitoringInletStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringInletStatusTable.setDescription('A list to display status of Inlet.')
pduPwrMonitoringInletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1), ).setIndexNames((0, "SPSv1-MIB", "inletIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringInletStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringInletStatusEntry.setDescription('A list to display status of Inlet.')
inletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletIndex.setStatus('mandatory')
if mibBuilder.loadTexts: inletIndex.setDescription('The index to Inlet status entry.')
inletPowerAll = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 2), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPowerAll.setStatus('mandatory')
if mibBuilder.loadTexts: inletPowerAll.setDescription('The total power of inlet.')
inletResetFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletResetFrom.setStatus('mandatory')
if mibBuilder.loadTexts: inletResetFrom.setDescription('The reset date of inlet.')
inletEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 4), Integer32()).setUnits('KWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: inletEnergy.setDescription('The total energy of inlet.')
inletStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatus.setDescription('The Status of inlet.')
inletCurrPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 6), Integer32()).setUnits('0.01A').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCurrPhase1.setStatus('mandatory')
if mibBuilder.loadTexts: inletCurrPhase1.setDescription('The phase1 current of inlet.')
inletCurrPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 7), Integer32()).setUnits('0.01A').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCurrPhase2.setStatus('mandatory')
if mibBuilder.loadTexts: inletCurrPhase2.setDescription('The phase2 current of inlet.')
inletCurrPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 8), Integer32()).setUnits('0.01A').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCurrPhase3.setStatus('mandatory')
if mibBuilder.loadTexts: inletCurrPhase3.setDescription('The phase3 current of inlet.')
inletVoltPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 9), Integer32()).setUnits('0.1V').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletVoltPhase1.setStatus('mandatory')
if mibBuilder.loadTexts: inletVoltPhase1.setDescription('The phase1 voltage of inlet.')
inletVoltPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 10), Integer32()).setUnits('0.1V').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletVoltPhase2.setStatus('mandatory')
if mibBuilder.loadTexts: inletVoltPhase2.setDescription('The phase2 voltage of inlet.')
inletVoltPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 11), Integer32()).setUnits('0.1V').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletVoltPhase3.setStatus('mandatory')
if mibBuilder.loadTexts: inletVoltPhase3.setDescription('The phase3 voltage of inlet.')
inletPwrFactorPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 12), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPwrFactorPhase1.setStatus('mandatory')
if mibBuilder.loadTexts: inletPwrFactorPhase1.setDescription('The phase1 power factor of inlet.')
inletPwrFactorPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 13), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPwrFactorPhase2.setStatus('mandatory')
if mibBuilder.loadTexts: inletPwrFactorPhase2.setDescription('The phase2 power factor of inlet.')
inletPwrFactorPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 14), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPwrFactorPhase3.setStatus('mandatory')
if mibBuilder.loadTexts: inletPwrFactorPhase3.setDescription('The phase3 power factor of inlet.')
inletPowerPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 15), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPowerPhase1.setStatus('mandatory')
if mibBuilder.loadTexts: inletPowerPhase1.setDescription('The phase1 power of inlet.')
inletPowerPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 16), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPowerPhase2.setStatus('mandatory')
if mibBuilder.loadTexts: inletPowerPhase2.setDescription('The phase2 power of inlet.')
inletPowerPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 17), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPowerPhase3.setStatus('mandatory')
if mibBuilder.loadTexts: inletPowerPhase3.setDescription('The phase3 power of inlet.')
inletStatusPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusPhase1.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusPhase1.setDescription('The phase1 status of inlet.')
inletStatusPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusPhase2.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusPhase2.setDescription('The phase2 status of inlet.')
inletStatusPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusPhase3.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusPhase3.setDescription('The phase3 status of inlet.')
pduPwrMonitoringInletCfgTable = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3), )
if mibBuilder.loadTexts: pduPwrMonitoringInletCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringInletCfgTable.setDescription('A list to configure thresholds of inlet.')
pduPwrMonitoringInletCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1), ).setIndexNames((0, "SPSv1-MIB", "inletCfgIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringInletCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringInletCfgEntry.setDescription('A list to configure thresholds of inlet.')
inletCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgIndex.setDescription('The index to inlet configuration entry.')
inletCfgLoadCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 2), Integer32()).setUnits('0.1kW').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgLoadCritical.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgLoadCritical.setDescription('The Critical Threshold of inlet load.')
inletCfgLoadWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 3), Integer32()).setUnits('0.1kW').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgLoadWarning.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgLoadWarning.setDescription('The Warning Threshold of inlet load.')
inletCfgCurrCritPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 4), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgCurrCritPhase1.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgCurrCritPhase1.setDescription('The Critical Threshold of pahse1 current of inlet.')
inletCfgCurrCritPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 5), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgCurrCritPhase2.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgCurrCritPhase2.setDescription('The Critical Threshold of pahse2 current of inlet.')
inletCfgCurrCritPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 6), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgCurrCritPhase3.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgCurrCritPhase3.setDescription('The Critical Threshold of pahse3 current of inlet.')
inletCfgCurrWarnPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 7), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgCurrWarnPhase1.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgCurrWarnPhase1.setDescription('The Warning Threshold of pahse1 current of inlet.')
inletCfgCurrWarnPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 8), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgCurrWarnPhase2.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgCurrWarnPhase2.setDescription('The Warning Threshold of pahse2 current of inlet.')
inletCfgCurrWarnPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 9), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgCurrWarnPhase3.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgCurrWarnPhase3.setDescription('The Warning Threshold of pahse3 current of inlet.')
inletCfgVoltCritPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 10), Integer32()).setUnits('0.1V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgVoltCritPhase1.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgVoltCritPhase1.setDescription('The Critical Threshold of pahse1 voltage of inlet.')
inletCfgVoltCritPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 11), Integer32()).setUnits('0.1V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgVoltCritPhase2.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgVoltCritPhase2.setDescription('The Critical Threshold of pahse2 voltage of inlet.')
inletCfgVoltCritPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 12), Integer32()).setUnits('0.1V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgVoltCritPhase3.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgVoltCritPhase3.setDescription('The Critical Threshold of pahse3 voltage of inlet.')
inletCfgVoltWarnPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 13), Integer32()).setUnits('0.1V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgVoltWarnPhase1.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgVoltWarnPhase1.setDescription('The Warning Threshold of pahse1 voltage of inlet.')
inletCfgVoltWarnPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 14), Integer32()).setUnits('0.1V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgVoltWarnPhase2.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgVoltWarnPhase2.setDescription('The Warning Threshold of pahse2 voltage of inlet.')
inletCfgVoltWarnPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 15), Integer32()).setUnits('0.1V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgVoltWarnPhase3.setStatus('mandatory')
if mibBuilder.loadTexts: inletCfgVoltWarnPhase3.setDescription('The Warning Threshold of pahse3 voltage of inlet.')
pduPwrMonitoringOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2))
pduPwrMonitoringOutletPduA = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1))
pduPwrMonitoringOutletNumPduA = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPwrMonitoringOutletNumPduA.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletNumPduA.setDescription('The number of PduA Outlet.')
pduPwrMonitoringOutletStatusTablePduA = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusTablePduA.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusTablePduA.setDescription('A list to display status of PduA outlet.')
pduPwrMonitoringOutletStatusPduAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1), ).setIndexNames((0, "SPSv1-MIB", "outletPduAIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusPduAEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusPduAEntry.setDescription('A list to display status of PduA outlet.')
outletPduAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduAIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduAIndex.setDescription('The index to outlet status of PduA.')
outletPduAState = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduAState.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduAState.setDescription('The state of PduA outlet.')
outletPduACurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 3), Integer32()).setUnits('0.01A').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduACurrent.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduACurrent.setDescription('The current of PduA outlet.')
outletPduAPwrFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 4), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduAPwrFactor.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduAPwrFactor.setDescription('The power factor of PduA outlet.')
outletPduAPower = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 5), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduAPower.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduAPower.setDescription('The power of PduA outlet.')
outletPduAEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 6), Integer32()).setUnits('KWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduAEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduAEnergy.setDescription('The energy of PduA outlet.')
outletPduAResetFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduAResetFrom.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduAResetFrom.setDescription('The reset date of PduA outlet.')
outletPduAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduAStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduAStatus.setDescription('The status of PduA outlet.')
pduPwrMonitoringOutletCfgTablePduA = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgTablePduA.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgTablePduA.setDescription('A list to display configuration of PduA outlet.')
pduPwrMonitoringOutletCfgPduAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCfgPduAIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgPduAEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgPduAEntry.setDescription('A list to display configuration of PduA outlet.')
outletCfgPduAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCfgPduAIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduAIndex.setDescription('The index to outlet configuration of PduA.')
outletCfgPduAName = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduAName.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduAName.setDescription('The name for outlet of PduA.')
outletCfgPduADelayOnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduADelayOnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduADelayOnStatus.setDescription('The Delay On status of PduA outlet.')
outletCfgPduADelayOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 4), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduADelayOnTime.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduADelayOnTime.setDescription('The Delay On time of PduA outlet.')
outletCfgPduADelayOffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduADelayOffStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduADelayOffStatus.setDescription('The Delay Off status of PduA outlet.')
outletCfgPduADelayOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduADelayOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduADelayOffTime.setDescription('The Delay Off time of PduA outlet.')
outletCfgPduAReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduAReboot.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduAReboot.setDescription('The Delay On reboot duration of PduA outlet.')
outletCfgPduAOverCurrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 8), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduAOverCurrCritical.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduAOverCurrCritical.setDescription('The Critical Threshold of current of PduA outlet.')
outletCfgPduAOverCurrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 9), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduAOverCurrWarning.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduAOverCurrWarning.setDescription('The Warning Threshold of current of PduA outlet.')
outletCfgPduAOverPwrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 10), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduAOverPwrCritical.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduAOverPwrCritical.setDescription('The Critical Threshold of power of PduA outlet.')
outletCfgPduAOverPwrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 11), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduAOverPwrWarning.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduAOverPwrWarning.setDescription('The Warning Threshold of power of PduA outlet.')
pduPwrMonitoringOutletCtlTablePduA = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 4), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlTablePduA.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlTablePduA.setDescription('A list to display control of PduA outlet.')
pduPwrMonitoringOutletCtlPduAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 4, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCtlPduAIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlPduAEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlPduAEntry.setDescription('A list to display control of PduA outlet.')
outletCtlPduAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCtlPduAIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletCtlPduAIndex.setDescription('The index to outlet control of PduA.')
outletCtlPduAControl = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("immediateOn", 1), ("delayedOn", 2), ("immediateOff", 3), ("delayedOff", 4), ("immediateCycle", 5), ("delayedCycle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCtlPduAControl.setStatus('mandatory')
if mibBuilder.loadTexts: outletCtlPduAControl.setDescription('The control-type of PduA outlet.')
pduPwrMonitoringOutletPduB = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2))
pduPwrMonitoringOutletNumPduB = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPwrMonitoringOutletNumPduB.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletNumPduB.setDescription('The number of PduB Outlet.')
pduPwrMonitoringOutletStatusTablePduB = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusTablePduB.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusTablePduB.setDescription('A list to display status of PduB outlet.')
pduPwrMonitoringOutletStatusPduBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1), ).setIndexNames((0, "SPSv1-MIB", "outletPduBIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusPduBEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusPduBEntry.setDescription('A list to display status of PduB outlet.')
outletPduBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduBIndex.setDescription('The index to outlet status of PduB.')
outletPduBState = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBState.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduBState.setDescription('The state of PduB outlet.')
outletPduBCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 3), Integer32()).setUnits('0.01A').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduBCurrent.setDescription('The current of PduB outlet.')
outletPduBPwrFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 4), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBPwrFactor.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduBPwrFactor.setDescription('The power factor of PduB outlet.')
outletPduBPower = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 5), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBPower.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduBPower.setDescription('The power of PduB outlet.')
outletPduBEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 6), Integer32()).setUnits('KWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduBEnergy.setDescription('The energy of PduB outlet.')
outletPduBResetFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBResetFrom.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduBResetFrom.setDescription('The reset date of PduB outlet.')
outletPduBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduBStatus.setDescription('The status of PduB outlet.')
pduPwrMonitoringOutletCfgTablePduB = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgTablePduB.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgTablePduB.setDescription('A list to display configuration of PduB outlet.')
pduPwrMonitoringOutletCfgPduBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCfgPduBIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgPduBEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgPduBEntry.setDescription('A list to display configuration of PduB outlet.')
outletCfgPduBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCfgPduBIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduBIndex.setDescription('The index to outlet configuration of PduB.')
outletCfgPduBName = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBName.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduBName.setDescription('The name for outlet of PduB.')
outletCfgPduBDelayOnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBDelayOnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduBDelayOnStatus.setDescription('The Delay On status of PduB outlet.')
outletCfgPduBDelayOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 4), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBDelayOnTime.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduBDelayOnTime.setDescription('The Delay On time of PduB outlet.')
outletCfgPduBDelayOffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBDelayOffStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduBDelayOffStatus.setDescription('The Delay Off status of PduB outlet.')
outletCfgPduBDelayOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBDelayOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduBDelayOffTime.setDescription('The Delay Off time of PduB outlet.')
outletCfgPduBReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBReboot.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduBReboot.setDescription('The Delay On reboot duration of PduB outlet.')
outletCfgPduBOverCurrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 8), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBOverCurrCritical.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduBOverCurrCritical.setDescription('The Critical Threshold of current of PduB outlet.')
outletCfgPduBOverCurrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 9), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBOverCurrWarning.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduBOverCurrWarning.setDescription('The Warning Threshold of current of PduB outlet.')
outletCfgPduBOverPwrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 10), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBOverPwrCritical.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduBOverPwrCritical.setDescription('The Critical Threshold of power of PduB outlet.')
outletCfgPduBOverPwrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 11), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBOverPwrWarning.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduBOverPwrWarning.setDescription('The Warning Threshold of power of PduB outlet.')
pduPwrMonitoringOutletCtlTablePduB = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 4), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlTablePduB.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlTablePduB.setDescription('A list to display control of PduB outlet.')
pduPwrMonitoringOutletCtlPduBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 4, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCtlPduBIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlPduBEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlPduBEntry.setDescription('A list to display control of PduB outlet.')
outletCtlPduBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCtlPduBIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletCtlPduBIndex.setDescription('The index to outlet control of PduB.')
outletCtlPduBControl = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("immediateOn", 1), ("delayedOn", 2), ("immediateOff", 3), ("delayedOff", 4), ("immediateCycle", 5), ("delayedCycle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCtlPduBControl.setStatus('mandatory')
if mibBuilder.loadTexts: outletCtlPduBControl.setDescription('The control-type of PduB outlet.')
pduPwrMonitoringOutletPduC = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3))
pduPwrMonitoringOutletNumPduC = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPwrMonitoringOutletNumPduC.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletNumPduC.setDescription('The number of PduC Outlet.')
pduPwrMonitoringOutletStatusTablePduC = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusTablePduC.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusTablePduC.setDescription('A list to display status of PduC outlet.')
pduPwrMonitoringOutletStatusPduCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1), ).setIndexNames((0, "SPSv1-MIB", "outletPduCIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusPduCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusPduCEntry.setDescription('A list to display status of PduC outlet.')
outletPduCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduCIndex.setDescription('The index to outlet status of PduC.')
outletPduCState = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCState.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduCState.setDescription('The state of PduC outlet.')
outletPduCCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 3), Integer32()).setUnits('0.01A').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduCCurrent.setDescription('The current of PduC outlet.')
outletPduCPwrFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 4), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCPwrFactor.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduCPwrFactor.setDescription('The power factor of PduC outlet.')
outletPduCPower = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 5), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCPower.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduCPower.setDescription('The power of PduC outlet.')
outletPduCEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 6), Integer32()).setUnits('KWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduCEnergy.setDescription('The energy of PduC outlet.')
outletPduCResetFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCResetFrom.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduCResetFrom.setDescription('The reset date of PduC outlet.')
outletPduCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduCStatus.setDescription('The status of PduC outlet.')
pduPwrMonitoringOutletCfgTablePduC = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgTablePduC.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgTablePduC.setDescription('A list to display configuration of PduC outlet.')
pduPwrMonitoringOutletCfgPduCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCfgPduCIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgPduCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgPduCEntry.setDescription('A list to display configuration of PduC outlet.')
outletCfgPduCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCfgPduCIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduCIndex.setDescription('The index to outlet configuration of PduC.')
outletCfgPduCName = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCName.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduCName.setDescription('The name for outlet of PduC.')
outletCfgPduCDelayOnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCDelayOnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduCDelayOnStatus.setDescription('The Delay On status of PduC outlet.')
outletCfgPduCDelayOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 4), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCDelayOnTime.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduCDelayOnTime.setDescription('The Delay On time of PduC outlet.')
outletCfgPduCDelayOffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCDelayOffStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduCDelayOffStatus.setDescription('The Delay Off status of PduC outlet.')
outletCfgPduCDelayOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCDelayOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduCDelayOffTime.setDescription('The Delay Off time of PduC outlet.')
outletCfgPduCReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCReboot.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduCReboot.setDescription('The Delay On reboot duration of PduC outlet.')
outletCfgPduCOverCurrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 8), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCOverCurrCritical.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduCOverCurrCritical.setDescription('The Critical Threshold of current of PduC outlet.')
outletCfgPduCOverCurrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 9), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCOverCurrWarning.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduCOverCurrWarning.setDescription('The Warning Threshold of current of PduC outlet.')
outletCfgPduCOverPwrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 10), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCOverPwrCritical.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduCOverPwrCritical.setDescription('The Critical Threshold of power of PduC outlet.')
outletCfgPduCOverPwrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 11), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCOverPwrWarning.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduCOverPwrWarning.setDescription('The Warning Threshold of power of PduC outlet.')
pduPwrMonitoringOutletCtlTablePduC = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 4), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlTablePduC.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlTablePduC.setDescription('A list to display control of PduC outlet.')
pduPwrMonitoringOutletCtlPduCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 4, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCtlPduCIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlPduCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlPduCEntry.setDescription('A list to display control of PduC outlet.')
outletCtlPduCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCtlPduCIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletCtlPduCIndex.setDescription('The index to outlet control of PduC.')
outletCtlPduCControl = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("immediateOn", 1), ("delayedOn", 2), ("immediateOff", 3), ("delayedOff", 4), ("immediateCycle", 5), ("delayedCycle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCtlPduCControl.setStatus('mandatory')
if mibBuilder.loadTexts: outletCtlPduCControl.setDescription('The control-type of PduC outlet.')
pduPwrMonitoringOutletPduD = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4))
pduPwrMonitoringOutletNumPduD = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPwrMonitoringOutletNumPduD.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletNumPduD.setDescription('The number of PduD Outlet.')
pduPwrMonitoringOutletStatusTablePduD = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusTablePduD.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusTablePduD.setDescription('A list to display status of PduD outlet.')
pduPwrMonitoringOutletStatusPduDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1), ).setIndexNames((0, "SPSv1-MIB", "outletPduDIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusPduDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusPduDEntry.setDescription('A list to display status of PduD outlet.')
outletPduDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduDIndex.setDescription('The index to outlet status of PduD.')
outletPduDState = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDState.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduDState.setDescription('The state of PduD outlet.')
outletPduDCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 3), Integer32()).setUnits('0.01A').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduDCurrent.setDescription('The current of PduD outlet.')
outletPduDPwrFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 4), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDPwrFactor.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduDPwrFactor.setDescription('The power factor of PduD outlet.')
outletPduDPower = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 5), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDPower.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduDPower.setDescription('The power of PduD outlet.')
outletPduDEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 6), Integer32()).setUnits('KWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduDEnergy.setDescription('The energy of PduD outlet.')
outletPduDResetFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDResetFrom.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduDResetFrom.setDescription('The reset date of PduD outlet.')
outletPduDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outletPduDStatus.setDescription('The status of PduD outlet.')
pduPwrMonitoringOutletCfgTablePduD = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgTablePduD.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgTablePduD.setDescription('A list to display configuration of PduD outlet.')
pduPwrMonitoringOutletCfgPduDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCfgPduDIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgPduDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgPduDEntry.setDescription('A list to display configuration of PduD outlet.')
outletCfgPduDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCfgPduDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduDIndex.setDescription('The index to outlet configuration of PduD.')
outletCfgPduDName = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDName.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduDName.setDescription('The name for outlet of PduD.')
outletCfgPduDDelayOnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDDelayOnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduDDelayOnStatus.setDescription('The Delay On status of PduD outlet.')
outletCfgPduDDelayOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 4), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDDelayOnTime.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduDDelayOnTime.setDescription('The Delay On time of PduD outlet.')
outletCfgPduDDelayOffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDDelayOffStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduDDelayOffStatus.setDescription('The Delay Off status of PduD outlet.')
outletCfgPduDDelayOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDDelayOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduDDelayOffTime.setDescription('The Delay Off time of PduD outlet.')
outletCfgPduDReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDReboot.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduDReboot.setDescription('The Delay On reboot duration of PduD outlet.')
outletCfgPduDOverCurrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 8), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDOverCurrCritical.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduDOverCurrCritical.setDescription('The Critical Threshold of current of PduD outlet.')
outletCfgPduDOverCurrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 9), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDOverCurrWarning.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduDOverCurrWarning.setDescription('The Warning Threshold of current of PduD outlet.')
outletCfgPduDOverPwrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 10), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDOverPwrCritical.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduDOverPwrCritical.setDescription('The Critical Threshold of power of PduD outlet.')
outletCfgPduDOverPwrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 11), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDOverPwrWarning.setStatus('mandatory')
if mibBuilder.loadTexts: outletCfgPduDOverPwrWarning.setDescription('The Warning Threshold of power of PduD outlet.')
pduPwrMonitoringOutletCtlTablePduD = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 4), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlTablePduD.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlTablePduD.setDescription('A list to display control of PduD outlet.')
pduPwrMonitoringOutletCtlPduDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 4, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCtlPduDIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlPduDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlPduDEntry.setDescription('A list to display control of PduD outlet.')
outletCtlPduDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCtlPduDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletCtlPduDIndex.setDescription('The index to outlet control of PduD.')
outletCtlPduDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("immediateOn", 1), ("delayedOn", 2), ("immediateOff", 3), ("delayedOff", 4), ("immediateCycle", 5), ("delayedCycle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCtlPduDControl.setStatus('mandatory')
if mibBuilder.loadTexts: outletCtlPduDControl.setDescription('The control-type of PduD outlet.')
pduEnvMonitoringStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 1))
pduEnvMonitoringTemp = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 1, 1), Integer32()).setUnits('degC').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduEnvMonitoringTemp.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringTemp.setDescription('The temperature of EMD.')
pduEnvMonitoringHumi = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 1, 2), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduEnvMonitoringHumi.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringHumi.setDescription('The humidity of EMD.')
pduEnvMonitoringTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduEnvMonitoringTempAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringTempAlarm.setDescription('The temperature status of EMD.')
pduEnvMonitoringHumiAlarm = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduEnvMonitoringHumiAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringHumiAlarm.setDescription('The humidity status of EMD.')
pduEnvMonitoringCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2))
pduEnvMonitoringControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringControl.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringControl.setDescription('Enable/disable the EMD.')
pduEnvMonitoringTempHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 2), Integer32()).setUnits('degC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringTempHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringTempHighCritical.setDescription('The High Critical Threshold of temperature of EMD.')
pduEnvMonitoringTempHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 3), Integer32()).setUnits('degC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringTempHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringTempHighWarning.setDescription('The High Warning Threshold of temperature of EMD.')
pduEnvMonitoringTempLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 4), Integer32()).setUnits('degC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringTempLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringTempLowCritical.setDescription('The Low Critical Threshold of temperature of EMD.')
pduEnvMonitoringTempLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 5), Integer32()).setUnits('degC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringTempLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringTempLowWarning.setDescription('The Low Warning Threshold of temperature of EMD.')
pduEnvMonitoringTempHystersis = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 6), Integer32()).setUnits('degC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringTempHystersis.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringTempHystersis.setDescription('The Hystersis of Temperature of EMD.')
pduEnvMonitoringTempOffset = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 7), Integer32()).setUnits('degC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringTempOffset.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringTempOffset.setDescription('The Offset of Temperature of EMD.')
pduEnvMonitoringHumiHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 8), Integer32()).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringHumiHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringHumiHighCritical.setDescription('The High Crtitcal Threshold of humidity of EMD.')
pduEnvMonitoringHumiHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 9), Integer32()).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringHumiHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringHumiHighWarning.setDescription('The High Warning Threshold of humidity of EMD.')
pduEnvMonitoringHumiLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 10), Integer32()).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringHumiLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringHumiLowCritical.setDescription('The Low Crtitcal Threshold of humidity of EMD.')
pduEnvMonitoringHumiLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 11), Integer32()).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringHumiLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringHumiLowWarning.setDescription('The Low Warning Threshold of humidity of EMD.')
pduEnvMonitoringHumiHystersis = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 12), Integer32()).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringHumiHystersis.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringHumiHystersis.setDescription('The Hystersis of Humidity of EMD.')
pduEnvMonitoringHumiOffset = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 13), Integer32()).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringHumiOffset.setStatus('mandatory')
if mibBuilder.loadTexts: pduEnvMonitoringHumiOffset.setDescription('The Ofset of Humidity of EMD.')
pduSystemColdBoot = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,1))
if mibBuilder.loadTexts: pduSystemColdBoot.setDescription('Informational: Cold boot.')
pduSystemWarmBoot = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,2))
if mibBuilder.loadTexts: pduSystemWarmBoot.setDescription('Informational: Warm boot.')
pduSystemRestart = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,3))
if mibBuilder.loadTexts: pduSystemRestart.setDescription('Informational: System restart.')
pduResetToDefault = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,4))
if mibBuilder.loadTexts: pduResetToDefault.setDescription('Informational: Parameters reset to default.')
pduFirmUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,5))
if mibBuilder.loadTexts: pduFirmUpgrade.setDescription('Informational: Firmware upgrade.')
pduSystemLogClear = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,6))
if mibBuilder.loadTexts: pduSystemLogClear.setDescription('Informational: System log cleared.')
pduEventlogClear = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,7))
if mibBuilder.loadTexts: pduEventlogClear.setDescription('Informational: Event log cleared.')
pduInletHistoryClear = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,8))
if mibBuilder.loadTexts: pduInletHistoryClear.setDescription('Informational: Inlet history log cleared.')
pduOutletHistoryClear = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,9))
if mibBuilder.loadTexts: pduOutletHistoryClear.setDescription('Informational: Outlet history log cleared.')
pduSystemTimeChangeUser = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,10))
if mibBuilder.loadTexts: pduSystemTimeChangeUser.setDescription('Informational: Time changed by user.')
pduSystemTimeChangeNtp = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,11))
if mibBuilder.loadTexts: pduSystemTimeChangeNtp.setDescription('Informational: Time synced with NTP server.')
pduSystemTimeChangeRtc = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,12))
if mibBuilder.loadTexts: pduSystemTimeChangeRtc.setDescription('Informational: Time changed by RTC.')
pduMailTestPass = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,13))
if mibBuilder.loadTexts: pduMailTestPass.setDescription('Informational: Test mail pass.')
pduMailTestFail = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,14))
if mibBuilder.loadTexts: pduMailTestFail.setDescription('Informational: Test mail failed.')
pduMailSentPass = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,15))
if mibBuilder.loadTexts: pduMailSentPass.setDescription('Informational: Mail sent successfully.')
pduMailSentFail = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,16))
if mibBuilder.loadTexts: pduMailSentFail.setDescription('Informational: Mail sent failed.')
pduSystemCfgChange = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,17))
if mibBuilder.loadTexts: pduSystemCfgChange.setDescription('Informational: Parameter changed.')
pduSystemParamImport = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,18))
if mibBuilder.loadTexts: pduSystemParamImport.setDescription('Informational: Import XML configuration.')
pduInletCommLost = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,19))
if mibBuilder.loadTexts: pduInletCommLost.setDescription('Informational: Inlet communication lost.')
pduInletCommRestore = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,20))
if mibBuilder.loadTexts: pduInletCommRestore.setDescription('Informational: Inlet communication restore.')
pduOutletCommLost = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,21))
if mibBuilder.loadTexts: pduOutletCommLost.setDescription('Informational: Outlet communication lost.')
pduOutletCommRestore = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,22))
if mibBuilder.loadTexts: pduOutletCommRestore.setDescription('Informational: Outlet communication restore')
pduOutletOnUser = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,23))
if mibBuilder.loadTexts: pduOutletOnUser.setDescription('Informational: Outlet turned on by user.')
pduOutletOnSchedule = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,24))
if mibBuilder.loadTexts: pduOutletOnSchedule.setDescription('Informational: Outlet turned on by schedule.')
pduOutletOffUser = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,25))
if mibBuilder.loadTexts: pduOutletOffUser.setDescription('Informational: Outlet turned off by user.')
pduOutletOffSchedule = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,26))
if mibBuilder.loadTexts: pduOutletOffSchedule.setDescription('Informational: Outlet turned off by schedule.')
pduOutletRebootUser = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,27))
if mibBuilder.loadTexts: pduOutletRebootUser.setDescription('Informational: Outlet reboot by user.')
pduOutletRebootSchedule = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,28))
if mibBuilder.loadTexts: pduOutletRebootSchedule.setDescription('Informational: Outlet reboot by schedule.')
pduInletEnergyReset = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,29))
if mibBuilder.loadTexts: pduInletEnergyReset.setDescription('Informational: Inlet energy reset.')
pduOutletEnergyReset = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,30))
if mibBuilder.loadTexts: pduOutletEnergyReset.setDescription('Informational: Outlet energy reset.')
pduSetUser = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,31))
if mibBuilder.loadTexts: pduSetUser.setDescription('Informational: Assign outlet to user.')
pduDeletUser = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,32))
if mibBuilder.loadTexts: pduDeletUser.setDescription('Informational: Delete user.')
pduUpgradeInletSuccess = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,33))
if mibBuilder.loadTexts: pduUpgradeInletSuccess.setDescription('Informational: Inlet upgrade successfully.')
pduUpgradeInletFail = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,34))
if mibBuilder.loadTexts: pduUpgradeInletFail.setDescription('Informational: Inlet upgrade fail.')
pduUpgradeOutletSuccess = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,35))
if mibBuilder.loadTexts: pduUpgradeOutletSuccess.setDescription('Informational: Outlet upgrade successfully.')
pduUpgradeOutletFail = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,36))
if mibBuilder.loadTexts: pduUpgradeOutletFail.setDescription('Informational: Outlet upgrade fail.')
pduEmdTempHighWarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,101))
if mibBuilder.loadTexts: pduEmdTempHighWarnToNormal.setDescription('Informational: Temperature had returned from high warning to normal.')
pduEmdTempHighWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,102))
if mibBuilder.loadTexts: pduEmdTempHighWarn.setDescription('Warning: Temperature was higher than high warning set point.')
pduEmdTempLowWarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,103))
if mibBuilder.loadTexts: pduEmdTempLowWarnToNormal.setDescription('Informational: Temperature had returned from low warning to normal.')
pduEmdTempLowWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,104))
if mibBuilder.loadTexts: pduEmdTempLowWarn.setDescription('Warning: Temperature was lower than low warning set point.')
pduEmdTempHighCritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,105))
if mibBuilder.loadTexts: pduEmdTempHighCritToWarn.setDescription('Informational: Temperature had returned from high critical to high warning.')
pduEmdTempHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,106))
if mibBuilder.loadTexts: pduEmdTempHighCritical.setDescription('Critical: Temperature was higher than high critical set point.')
pduEmdTempLowCritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,107))
if mibBuilder.loadTexts: pduEmdTempLowCritToWarn.setDescription('Informational: Temperature had returned from low critical to low warning.')
pduEmdTempLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,108))
if mibBuilder.loadTexts: pduEmdTempLowCritical.setDescription('Critical: Temperature was lower than low critical set point.')
pduEmdHumiHighWarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,109))
if mibBuilder.loadTexts: pduEmdHumiHighWarnToNormal.setDescription('Informational: Humidity had returned from high warning to normal.')
pduEmdHumiHighWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,110))
if mibBuilder.loadTexts: pduEmdHumiHighWarn.setDescription('Warning: Humidity was higher than high warning set point.')
pduEmdHumiLowWarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,111))
if mibBuilder.loadTexts: pduEmdHumiLowWarnToNormal.setDescription('Informational: Humidity had returned from low warning to normal.')
pduEmdHumiLowWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,112))
if mibBuilder.loadTexts: pduEmdHumiLowWarn.setDescription('Warning: Humidity was lower than low warning set point.')
pduEmdHumiHighCritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,113))
if mibBuilder.loadTexts: pduEmdHumiHighCritToWarn.setDescription('Informational: Humidity had returned from high critical to high warning.')
pduEmdHumiHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,114))
if mibBuilder.loadTexts: pduEmdHumiHighCritical.setDescription('Critical: Humidity was higher than high critical set point.')
pduEmdHumiLowCritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,115))
if mibBuilder.loadTexts: pduEmdHumiLowCritToWarn.setDescription('Informational: Humidity had returned from low critical to low warning.')
pduEmdHumiLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,116))
if mibBuilder.loadTexts: pduEmdHumiLowCritical.setDescription('Critical: Humidity was lower than low critical set point.')
pduEmdAlarm1NotActive = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,117))
if mibBuilder.loadTexts: pduEmdAlarm1NotActive.setDescription('Informational: Alarm-1 became inactive.')
pduEmdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,118))
if mibBuilder.loadTexts: pduEmdAlarm1Active.setDescription('Warning: Alarm-1 became active.')
pduEmdAlarm2NotActive = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,119))
if mibBuilder.loadTexts: pduEmdAlarm2NotActive.setDescription('Informational: Alarm-2 became inactive.')
pduEmdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,120))
if mibBuilder.loadTexts: pduEmdAlarm2Active.setDescription('Warning: Alarm-2 became active.')
pduRs485Online = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,121))
if mibBuilder.loadTexts: pduRs485Online.setDescription('Informational: RS485 Sensor was online.')
pduRs485Offline = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,122))
if mibBuilder.loadTexts: pduRs485Offline.setDescription('Warning: RS485 Sensor was offline.')
pduInletLoadCritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,123))
if mibBuilder.loadTexts: pduInletLoadCritToWarn.setDescription('Informational: Inlet load had returned from critical to warning.')
pduInletLoadCritical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,124))
if mibBuilder.loadTexts: pduInletLoadCritical.setDescription('Critical: Inlet load was higher than critical set point.')
pduInletLoadWarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,125))
if mibBuilder.loadTexts: pduInletLoadWarnToNormal.setDescription('Informational: Inlet load had returned from warning to normal.')
pduInletLoadWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,126))
if mibBuilder.loadTexts: pduInletLoadWarn.setDescription('Warning: Inlet load was higher than warning set point.')
pduInletCurrPhase1CritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,127))
if mibBuilder.loadTexts: pduInletCurrPhase1CritToWarn.setDescription('Informational: Inlet phase1 current had returned from critical to warning.')
pduInletCurrPhase1Critical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,128))
if mibBuilder.loadTexts: pduInletCurrPhase1Critical.setDescription('Critical: Inlet phase1 current was higher than critical set point.')
pduInletCurrPhase1WarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,129))
if mibBuilder.loadTexts: pduInletCurrPhase1WarnToNormal.setDescription('Informational: Inlet phase1 current had returned from warning to normal.')
pduInletCurrPhase1Warn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,130))
if mibBuilder.loadTexts: pduInletCurrPhase1Warn.setDescription('Warning: Inlet phase1 current was higher than warning set point.')
pduInletCurrPhase2CritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,131))
if mibBuilder.loadTexts: pduInletCurrPhase2CritToWarn.setDescription('Informational: Inlet phase2 current had returned from critical to warning.')
pduInletCurrPhase2Critical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,132))
if mibBuilder.loadTexts: pduInletCurrPhase2Critical.setDescription('Critical: Inlet phase2 current was higher than critical set point.')
pduInletCurrPhase2WarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,133))
if mibBuilder.loadTexts: pduInletCurrPhase2WarnToNormal.setDescription('Informational: Inlet phase2 current had returned from warning to normal.')
pduInletCurrPhase2Warn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,134))
if mibBuilder.loadTexts: pduInletCurrPhase2Warn.setDescription('Warning: Inlet phase2 current was higher than warning set point.')
pduInletCurrPhase3CritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,135))
if mibBuilder.loadTexts: pduInletCurrPhase3CritToWarn.setDescription('Informational: Inlet phase3 current had returned from critical to warning.')
pduInletCurrPhase3Critical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,136))
if mibBuilder.loadTexts: pduInletCurrPhase3Critical.setDescription('Critical: Inlet phase3 current was higher than critical set point.')
pduInletCurrPhase3WarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,137))
if mibBuilder.loadTexts: pduInletCurrPhase3WarnToNormal.setDescription('Informational: Inlet phase3 current had returned from warning to normal.')
pduInletCurrPhase3Warn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,138))
if mibBuilder.loadTexts: pduInletCurrPhase3Warn.setDescription('Warning: Inlet phase3 current had returned from critical to warning.')
pduInletVoltPhase1CritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,139))
if mibBuilder.loadTexts: pduInletVoltPhase1CritToWarn.setDescription('Informational: Inlet phase1 voltage had returned from critical to warning.')
pduInletVoltPhase1Critical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,140))
if mibBuilder.loadTexts: pduInletVoltPhase1Critical.setDescription('Critical: Inlet phase1 voltage was higher than critical set point.')
pduInletVoltPhase1WarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,141))
if mibBuilder.loadTexts: pduInletVoltPhase1WarnToNormal.setDescription('Informational: Inlet phase1 voltage had returned from warning to normal.')
pduInletVoltPhase1Warn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,142))
if mibBuilder.loadTexts: pduInletVoltPhase1Warn.setDescription('Warning: Inlet phase1 voltage was higher than warning set point.')
pduInletVoltPhase2CritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,143))
if mibBuilder.loadTexts: pduInletVoltPhase2CritToWarn.setDescription('Informational: Inlet phase2 voltage had returned from critical to warning.')
pduInletVoltPhase2Critical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,144))
if mibBuilder.loadTexts: pduInletVoltPhase2Critical.setDescription('Critical: Inlet phase2 voltage was higher than critical set point.')
pduInletVoltPhase2WarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,145))
if mibBuilder.loadTexts: pduInletVoltPhase2WarnToNormal.setDescription('Informational: Inlet phase2 voltage had returned from warning to normal.')
pduInletVoltPhase2Warn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,146))
if mibBuilder.loadTexts: pduInletVoltPhase2Warn.setDescription('Warning: Inlet phase2 voltage was higher than warning set point.')
pduInletVoltPhase3CritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,147))
if mibBuilder.loadTexts: pduInletVoltPhase3CritToWarn.setDescription('Informational: Inlet phase3 voltage had returned from critical to warning.')
pduInletVoltPhase3Critical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,148))
if mibBuilder.loadTexts: pduInletVoltPhase3Critical.setDescription('Critical: Inlet phase3 voltage was higher than critical set point.')
pduInletVoltPhase3WarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,149))
if mibBuilder.loadTexts: pduInletVoltPhase3WarnToNormal.setDescription('Informational: Inlet phase3 voltage had returned from warning to normal.')
pduInletVoltPhase3Warn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,150))
if mibBuilder.loadTexts: pduInletVoltPhase3Warn.setDescription('Warning: Inlet phase3 voltage was higher than warning set point.')
pduOutletCurrCritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,151))
if mibBuilder.loadTexts: pduOutletCurrCritToWarn.setDescription('Informational: Outlet current had returned from critical to warning.')
pduOutletCurrCritical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,152))
if mibBuilder.loadTexts: pduOutletCurrCritical.setDescription('Critical: Outlet current was higher than critical set point.')
pduOutletCurrWarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,153))
if mibBuilder.loadTexts: pduOutletCurrWarnToNormal.setDescription('Informational: Outlet current had returned from warning to normal.')
pduOutletCurrWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,154))
if mibBuilder.loadTexts: pduOutletCurrWarn.setDescription('Warning: Outlet current was higher than warning set point.')
pduOutletPwrCritTOWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,155))
if mibBuilder.loadTexts: pduOutletPwrCritTOWarn.setDescription('Informational: Outlet power had returned from critical to warning.')
pduOutletPwrCritical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,156))
if mibBuilder.loadTexts: pduOutletPwrCritical.setDescription('Critical: Outlet power was higher than critical set point.')
pduOutletPwrWarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,157))
if mibBuilder.loadTexts: pduOutletPwrWarnToNormal.setDescription('Informational: Outlet power had returned from warning to normal.')
pduOutletPwrWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,158))
if mibBuilder.loadTexts: pduOutletPwrWarn.setDescription('Warning: Outlet power was higher than warning set point.')
pduAlarm1Disabled = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,159))
if mibBuilder.loadTexts: pduAlarm1Disabled.setDescription('Informational: Alarm-1 became disabled.')
pduAlarm2Disabled = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,160))
if mibBuilder.loadTexts: pduAlarm2Disabled.setDescription('Informational: Alarm-2 became disabled.')
mibBuilder.exportSymbols("SPSv1-MIB", outletCfgPduCReboot=outletCfgPduCReboot, pduMailSentPass=pduMailSentPass, outletPduBEnergy=outletPduBEnergy, pduOutletRebootSchedule=pduOutletRebootSchedule, pduEmailServer=pduEmailServer, pduNetworkTcpipIpv6Prefix=pduNetworkTcpipIpv6Prefix, outletPduBCurrent=outletPduBCurrent, pduPwrMonitoringOutletCfgTablePduB=pduPwrMonitoringOutletCfgTablePduB, pduEmdHumiHighCritToWarn=pduEmdHumiHighCritToWarn, pduPwrMonitoringOutletStatusPduCEntry=pduPwrMonitoringOutletStatusPduCEntry, pduSystemLogClear=pduSystemLogClear, receiverDescription=receiverDescription, inletCfgLoadCritical=inletCfgLoadCritical, outletCfgPduBOverCurrCritical=outletCfgPduBOverCurrCritical, pduPwrMonitoringOutletStatusTablePduA=pduPwrMonitoringOutletStatusTablePduA, pduInletVoltPhase2WarnToNormal=pduInletVoltPhase2WarnToNormal, outletCfgPduAOverPwrWarning=outletCfgPduAOverPwrWarning, outletPduAResetFrom=outletPduAResetFrom, pduSystemContact=pduSystemContact, pduPwrMonitoringOutletNumPduC=pduPwrMonitoringOutletNumPduC, inletPwrFactorPhase2=inletPwrFactorPhase2, pduSystem=pduSystem, pduInletCurrPhase3Warn=pduInletCurrPhase3Warn, pduEnvMonitoringTempHystersis=pduEnvMonitoringTempHystersis, outletCtlPduBIndex=outletCtlPduBIndex, pduOutletCurrCritToWarn=pduOutletCurrCritToWarn, pduPwrMonitoringInletCfgEntry=pduPwrMonitoringInletCfgEntry, pduNetworkTcpipIpv4=pduNetworkTcpipIpv4, pduPwrMonitoringInletCfgTable=pduPwrMonitoringInletCfgTable, pduInletLoadWarnToNormal=pduInletLoadWarnToNormal, pduNetworkTcpip=pduNetworkTcpip, pduNetworkTcpipIpv6AutoConfig=pduNetworkTcpipIpv6AutoConfig, pduNetworkService=pduNetworkService, pduEnvMonitoring=pduEnvMonitoring, inletResetFrom=inletResetFrom, pduNetwork=pduNetwork, inletCfgVoltCritPhase1=inletCfgVoltCritPhase1, outletCtlPduDIndex=outletCtlPduDIndex, pduInletLoadWarn=pduInletLoadWarn, pduNetworkServiceSslForce=pduNetworkServiceSslForce, pduEmdTempHighWarn=pduEmdTempHighWarn, outletCfgPduDDelayOnTime=outletCfgPduDDelayOnTime, pduNetworkServiceRadiusTimeout=pduNetworkServiceRadiusTimeout, pduTraps=pduTraps, pduEmdTempLowCritToWarn=pduEmdTempLowCritToWarn, inletCurrPhase3=inletCurrPhase3, outletCfgPduCDelayOffTime=outletCfgPduCDelayOffTime, pduOutletPwrCritical=pduOutletPwrCritical, pduInletCurrPhase1Critical=pduInletCurrPhase1Critical, pduNetworkSecurityHttpControl=pduNetworkSecurityHttpControl, outletPduBState=outletPduBState, pduNetworkSecurityHttpBlock=pduNetworkSecurityHttpBlock, inletStatusPhase2=inletStatusPhase2, pduNetworkServiceRadiusRetry=pduNetworkServiceRadiusRetry, outletPduCState=outletPduCState, inletCfgCurrWarnPhase1=inletCfgCurrWarnPhase1, inletCfgCurrCritPhase1=inletCfgCurrCritPhase1, pduPwrMonitoringOutletCfgTablePduC=pduPwrMonitoringOutletCfgTablePduC, pduPwrMonitoringInlet=pduPwrMonitoringInlet, pduNetworkSecuritySsh=pduNetworkSecuritySsh, pduEnvMonitoringHumiAlarm=pduEnvMonitoringHumiAlarm, pduEmailReceiversTable=pduEmailReceiversTable, pduNetworkTcpipIpv6PrimaryDNS=pduNetworkTcpipIpv6PrimaryDNS, pduSystemReboot=pduSystemReboot, pduEnvMonitoringTempOffset=pduEnvMonitoringTempOffset, pduEmdAlarm1NotActive=pduEmdAlarm1NotActive, pduPwrMonitoringOutletCtlTablePduA=pduPwrMonitoringOutletCtlTablePduA, pduInletVoltPhase3Critical=pduInletVoltPhase3Critical, pduNetworkTcpipIpv4Gateway=pduNetworkTcpipIpv4Gateway, pduEmdHumiLowWarn=pduEmdHumiLowWarn, pduNetworkSecuritySnmpInterval=pduNetworkSecuritySnmpInterval, inletCfgLoadWarning=inletCfgLoadWarning, sps=sps, mailRecvEmailType=mailRecvEmailType, pduEnvMonitoringHumiHighWarning=pduEnvMonitoringHumiHighWarning, pduNetworkTcpipIpv4PrimaryDNS=pduNetworkTcpipIpv4PrimaryDNS, pduUpgradeOutletFail=pduUpgradeOutletFail, pduEnvMonitoringHumiLowCritical=pduEnvMonitoringHumiLowCritical, pduPwrMonitoringOutletCtlPduAEntry=pduPwrMonitoringOutletCtlPduAEntry, outletPduDPwrFactor=outletPduDPwrFactor, pduInletVoltPhase3WarnToNormal=pduInletVoltPhase3WarnToNormal, inletPowerAll=inletPowerAll, pduSystemName=pduSystemName, pduSystemTimeSetting=pduSystemTimeSetting, outletCfgPduDReboot=outletCfgPduDReboot, inletVoltPhase2=inletVoltPhase2, pduEnvMonitoringTempAlarm=pduEnvMonitoringTempAlarm, outletPduCEnergy=outletPduCEnergy, pduEmdHumiHighCritical=pduEmdHumiHighCritical, pduSystemTimeDayLightSaving=pduSystemTimeDayLightSaving, pduInletCurrPhase2Warn=pduInletCurrPhase2Warn, pduInletEnergyReset=pduInletEnergyReset, pduEmdAlarm2Active=pduEmdAlarm2Active, pduPwrMonitoringOutletCtlPduDEntry=pduPwrMonitoringOutletCtlPduDEntry, pduNetworkServiceRadiusControl=pduNetworkServiceRadiusControl, pduEnvMonitoringControl=pduEnvMonitoringControl, pduObjects=pduObjects, pduNetworkServiceRadiusIp=pduNetworkServiceRadiusIp, inletCfgIndex=inletCfgIndex, pduEmdAlarm1Active=pduEmdAlarm1Active, outletCfgPduDOverCurrWarning=outletCfgPduDOverCurrWarning, pduPwrMonitoringOutletCfgPduDEntry=pduPwrMonitoringOutletCfgPduDEntry, inletPwrFactorPhase1=inletPwrFactorPhase1, pduNetworkServiceSslPort=pduNetworkServiceSslPort, pduInletVoltPhase3CritToWarn=pduInletVoltPhase3CritToWarn, inletIndex=inletIndex, pduNetworkSecuritySnmpBlock=pduNetworkSecuritySnmpBlock, pduPwrMonitoringOutletCtlPduBEntry=pduPwrMonitoringOutletCtlPduBEntry, pduSystemTimeChangeRtc=pduSystemTimeChangeRtc, pduOutletOffUser=pduOutletOffUser, pduInletCurrPhase2Critical=pduInletCurrPhase2Critical, pduOutletEnergyReset=pduOutletEnergyReset, pduSystemTimeNtpSyncUnit=pduSystemTimeNtpSyncUnit, outletCfgPduCDelayOffStatus=outletCfgPduCDelayOffStatus, outletCfgPduBDelayOffStatus=outletCfgPduBDelayOffStatus, pduSnmpPort=pduSnmpPort, pduSystemTimeDisplay=pduSystemTimeDisplay, outletPduCPwrFactor=outletPduCPwrFactor, pduEmdTempHighCritToWarn=pduEmdTempHighCritToWarn, pduNetworkSecuritySshBlock=pduNetworkSecuritySshBlock, pduInletCurrPhase2WarnToNormal=pduInletCurrPhase2WarnToNormal, outletPduDCurrent=outletPduDCurrent, pduIdent=pduIdent, outletCtlPduCIndex=outletCtlPduCIndex, pduEventlogClear=pduEventlogClear, inletCfgCurrWarnPhase3=inletCfgCurrWarnPhase3, outletPduACurrent=outletPduACurrent, pduOutletOnUser=pduOutletOnUser, outletPduBResetFrom=outletPduBResetFrom, pduSystemTimeNtpControl=pduSystemTimeNtpControl, outletCfgPduCDelayOnTime=outletCfgPduCDelayOnTime, outletCfgPduDOverPwrWarning=outletCfgPduDOverPwrWarning, pduInletCurrPhase3Critical=pduInletCurrPhase3Critical, pduEnvMonitoringTempHighWarning=pduEnvMonitoringTempHighWarning, pduSystemRestart=pduSystemRestart, pduSystemCfgChange=pduSystemCfgChange, pduInletCurrPhase1WarnToNormal=pduInletCurrPhase1WarnToNormal, outletCfgPduDDelayOffTime=outletCfgPduDDelayOffTime, pduEnvMonitoringTempHighCritical=pduEnvMonitoringTempHighCritical, pduPwrMonitoringOutletCfgPduAEntry=pduPwrMonitoringOutletCfgPduAEntry, pduNetworkTcpipIpv6=pduNetworkTcpipIpv6, pduSystemTime=pduSystemTime, pduPwrMonitoringInletNum=pduPwrMonitoringInletNum, trapsReceiverAddr=trapsReceiverAddr, outletCfgPduCIndex=outletCfgPduCIndex, pduEnvMonitoringStatus=pduEnvMonitoringStatus, inletPowerPhase3=inletPowerPhase3, outletPduAEnergy=outletPduAEnergy, outletCfgPduCOverCurrCritical=outletCfgPduCOverCurrCritical, outletCfgPduDName=outletCfgPduDName, pduNetworkSecuritySnmpFailTimes=pduNetworkSecuritySnmpFailTimes, pduNetworkServiceRadiusPort=pduNetworkServiceRadiusPort, pduEmailSenderEmail=pduEmailSenderEmail, pduPwrMonitoringOutletCtlPduCEntry=pduPwrMonitoringOutletCtlPduCEntry, outletCfgPduDOverCurrCritical=outletCfgPduDOverCurrCritical, pduPwrMonitoringOutletPduC=pduPwrMonitoringOutletPduC, pduUpgradeInletFail=pduUpgradeInletFail, outletCfgPduAName=outletCfgPduAName, pduPwrMonitoringOutletNumPduD=pduPwrMonitoringOutletNumPduD, pduInletVoltPhase2CritToWarn=pduInletVoltPhase2CritToWarn, pduNetworkServiceSsl=pduNetworkServiceSsl, inletCfgVoltCritPhase3=inletCfgVoltCritPhase3, pduPwrMonitoringOutletCfgPduBEntry=pduPwrMonitoringOutletCfgPduBEntry, pduPwrMonitoringOutletCtlTablePduC=pduPwrMonitoringOutletCtlTablePduC, pduAlarm1Disabled=pduAlarm1Disabled, outletPduDStatus=outletPduDStatus, pduNetworkTcpipDhcpControl=pduNetworkTcpipDhcpControl, inletCurrPhase1=inletCurrPhase1, pduEnvMonitoringTemp=pduEnvMonitoringTemp, outletPduDEnergy=outletPduDEnergy, inletCfgVoltCritPhase2=inletCfgVoltCritPhase2, pduNetworkSecuritySshControl=pduNetworkSecuritySshControl, outletPduCStatus=outletPduCStatus, pduPwrMonitoringOutletPduD=pduPwrMonitoringOutletPduD, pduInletCurrPhase1Warn=pduInletCurrPhase1Warn, pduInletCurrPhase3WarnToNormal=pduInletCurrPhase3WarnToNormal, outletCtlPduCControl=outletCtlPduCControl, pduOutletHistoryClear=pduOutletHistoryClear, pduNetworkServiceSslControl=pduNetworkServiceSslControl, pduSnmpControl=pduSnmpControl, pduSystemTimeChangeNtp=pduSystemTimeChangeNtp, pduResetToDefault=pduResetToDefault, pduNetworkSecurityHttpInterval=pduNetworkSecurityHttpInterval, pduEmailAuthPassword=pduEmailAuthPassword, outletCtlPduBControl=outletCtlPduBControl, pduNetworkSecuritySnmpControl=pduNetworkSecuritySnmpControl, pduSystemWebRefresh=pduSystemWebRefresh, pduInletVoltPhase1Warn=pduInletVoltPhase1Warn, outletCfgPduBOverPwrWarning=outletCfgPduBOverPwrWarning, pduEmailAuthControl=pduEmailAuthControl, pduSystemLocation=pduSystemLocation, pduInletVoltPhase1WarnToNormal=pduInletVoltPhase1WarnToNormal, inletCfgCurrCritPhase3=inletCfgCurrCritPhase3, pduPwrMonitoringOutletStatusPduAEntry=pduPwrMonitoringOutletStatusPduAEntry, pduIdentSerialNumber=pduIdentSerialNumber, pduEmailAuthUsername=pduEmailAuthUsername, pduPwrMonitoringOutletStatusTablePduD=pduPwrMonitoringOutletStatusTablePduD, pduInletCurrPhase3CritToWarn=pduInletCurrPhase3CritToWarn, pduEmdHumiHighWarn=pduEmdHumiHighWarn, pduDeletUser=pduDeletUser, pduPwrMonitoringOutletCfgPduCEntry=pduPwrMonitoringOutletCfgPduCEntry, pduNetworkServiceRadiusSecretKey=pduNetworkServiceRadiusSecretKey, trapsIndex=trapsIndex, outletCtlPduAIndex=outletCtlPduAIndex, inletCfgCurrCritPhase2=inletCfgCurrCritPhase2, outletCtlPduAControl=outletCtlPduAControl, outletCfgPduDIndex=outletCfgPduDIndex, pduNetworkSecuritySshFailTimes=pduNetworkSecuritySshFailTimes, outletPduAPwrFactor=outletPduAPwrFactor, outletCfgPduBReboot=outletCfgPduBReboot, pduPwrMonitoringOutletCfgTablePduA=pduPwrMonitoringOutletCfgTablePduA, pduInletLoadCritical=pduInletLoadCritical, pduFirmUpgrade=pduFirmUpgrade, outletCfgPduDOverPwrCritical=outletCfgPduDOverPwrCritical, pduIdentAgentSoftwareVersion=pduIdentAgentSoftwareVersion, pduPwrMonitoringOutletPduA=pduPwrMonitoringOutletPduA, pduPwrMonitoring=pduPwrMonitoring, pduNetworkTcpipIpv4Address=pduNetworkTcpipIpv4Address, pduPwrMonitoringOutletCfgTablePduD=pduPwrMonitoringOutletCfgTablePduD, mailRecvIndex=mailRecvIndex, pduSnmpTrapsReceiversTable=pduSnmpTrapsReceiversTable, pduNetworkServicePingControl=pduNetworkServicePingControl, outletCfgPduBDelayOnTime=outletCfgPduBDelayOnTime, pduPwrMonitoringOutletStatusTablePduB=pduPwrMonitoringOutletStatusTablePduB, pduSystemColdBoot=pduSystemColdBoot, outletPduBIndex=outletPduBIndex, pduInletVoltPhase3Warn=pduInletVoltPhase3Warn, pduInletCurrPhase2CritToWarn=pduInletCurrPhase2CritToWarn, outletPduAIndex=outletPduAIndex, pduInletVoltPhase1CritToWarn=pduInletVoltPhase1CritToWarn, pduInletLoadCritToWarn=pduInletLoadCritToWarn, pduNetworkSecurityHttpFailTimes=pduNetworkSecurityHttpFailTimes, outletPduAPower=outletPduAPower, pduOutletPwrWarnToNormal=pduOutletPwrWarnToNormal, outletCtlPduDControl=outletCtlPduDControl, outletCfgPduADelayOffStatus=outletCfgPduADelayOffStatus, pduMailTestFail=pduMailTestFail, pduSystemParamImport=pduSystemParamImport, inletEnergy=inletEnergy, pduUpgradeInletSuccess=pduUpgradeInletSuccess, pduSystemTimeManual=pduSystemTimeManual, pduUpgradeOutletSuccess=pduUpgradeOutletSuccess, outletCfgPduBDelayOnStatus=outletCfgPduBDelayOnStatus, inletVoltPhase1=inletVoltPhase1, pduOutletPwrWarn=pduOutletPwrWarn, pduSystemTimeManualDate=pduSystemTimeManualDate, outletCfgPduBOverPwrCritical=outletCfgPduBOverPwrCritical, outletCfgPduCName=outletCfgPduCName, outletCfgPduCDelayOnStatus=outletCfgPduCDelayOnStatus, pduEnvMonitoringTempLowCritical=pduEnvMonitoringTempLowCritical, pduPwrMonitoringOutletStatusPduBEntry=pduPwrMonitoringOutletStatusPduBEntry, pduOutletCommLost=pduOutletCommLost, product=product, mailRecvDescription=mailRecvDescription)
mibBuilder.exportSymbols("SPSv1-MIB", inletStatusPhase1=inletStatusPhase1, pduEnvMonitoringHumiOffset=pduEnvMonitoringHumiOffset, outletPduDIndex=outletPduDIndex, pduEmdAlarm2NotActive=pduEmdAlarm2NotActive, pduSystemTimeManualTime=pduSystemTimeManualTime, outletCfgPduDDelayOffStatus=outletCfgPduDDelayOffStatus, pduNetworkTcpipIpv6SecondaryDNS=pduNetworkTcpipIpv6SecondaryDNS, pduSystemTimeNtp=pduSystemTimeNtp, outletCfgPduBIndex=outletCfgPduBIndex, pduInletVoltPhase2Critical=pduInletVoltPhase2Critical, pduOutletOnSchedule=pduOutletOnSchedule, inletStatusPhase3=inletStatusPhase3, outletPduAStatus=outletPduAStatus, mailRecvReceiverAddr=mailRecvReceiverAddr, pduEmdTempLowCritical=pduEmdTempLowCritical, pduOutletCurrWarn=pduOutletCurrWarn, pduNetworkTcpipIpv6Address=pduNetworkTcpipIpv6Address, pduEmdHumiLowWarnToNormal=pduEmdHumiLowWarnToNormal, pduOutletRebootUser=pduOutletRebootUser, pduNetworkSecurityHttp=pduNetworkSecurityHttp, inletPwrFactorPhase3=inletPwrFactorPhase3, pduPwrMonitoringInletStatusTable=pduPwrMonitoringInletStatusTable, powertek=powertek, mailRecvEventLevel=mailRecvEventLevel, inletCfgVoltWarnPhase3=inletCfgVoltWarnPhase3, inletPowerPhase1=inletPowerPhase1, outletPduDPower=outletPduDPower, pduSnmpVersion=pduSnmpVersion, pduNetworkTcpipIpv6Router=pduNetworkTcpipIpv6Router, pduNetworkServiceSshPort=pduNetworkServiceSshPort, pduPwrMonitoringInletStatusEntry=pduPwrMonitoringInletStatusEntry, outletPduCCurrent=outletPduCCurrent, pduEmdTempLowWarnToNormal=pduEmdTempLowWarnToNormal, outletPduBPwrFactor=outletPduBPwrFactor, pduSystemTimeNtpServer=pduSystemTimeNtpServer, outletCfgPduBOverCurrWarning=outletCfgPduBOverCurrWarning, pduNetworkSecuritySshInterval=pduNetworkSecuritySshInterval, outletCfgPduADelayOnTime=outletCfgPduADelayOnTime, pduInletHistoryClear=pduInletHistoryClear, pduEmdTempLowWarn=pduEmdTempLowWarn, inletCfgVoltWarnPhase2=inletCfgVoltWarnPhase2, pduInletVoltPhase2Warn=pduInletVoltPhase2Warn, outletCfgPduAIndex=outletCfgPduAIndex, pduNetworkTcpipIpv6Control=pduNetworkTcpipIpv6Control, pduPwrMonitoringOutlet=pduPwrMonitoringOutlet, outletPduCResetFrom=outletPduCResetFrom, pduInletCommRestore=pduInletCommRestore, outletPduCIndex=outletPduCIndex, outletCfgPduCOverPwrWarning=outletCfgPduCOverPwrWarning, pduEnvMonitoringHumi=pduEnvMonitoringHumi, pduNetworkServiceSshControl=pduNetworkServiceSshControl, pduSnmpTrapsReceiversEntry=pduSnmpTrapsReceiversEntry, pduAlarm2Disabled=pduAlarm2Disabled, pduEmailReceiversEntry=pduEmailReceiversEntry, pduSystemLogInterval=pduSystemLogInterval, pduSystemWarmBoot=pduSystemWarmBoot, pduMailSentFail=pduMailSentFail, outletPduBPower=outletPduBPower, pduNetworkSecuritySnmp=pduNetworkSecuritySnmp, pduPwrMonitoringOutletStatusTablePduC=pduPwrMonitoringOutletStatusTablePduC, outletCfgPduADelayOffTime=outletCfgPduADelayOffTime, pduPwrMonitoringOutletStatusPduDEntry=pduPwrMonitoringOutletStatusPduDEntry, pdu=pdu, pduPwrMonitoringOutletNumPduA=pduPwrMonitoringOutletNumPduA, pduEmailPort=pduEmailPort, pduOutletCurrWarnToNormal=pduOutletCurrWarnToNormal, pduEmail=pduEmail, pduPwrMonitoringOutletNumPduB=pduPwrMonitoringOutletNumPduB, pduNetworkTcpipIpv4SecondaryDNS=pduNetworkTcpipIpv4SecondaryDNS, outletCfgPduBName=outletCfgPduBName, pduEnvMonitoringHumiHighCritical=pduEnvMonitoringHumiHighCritical, pduOutletCommRestore=pduOutletCommRestore, inletStatus=inletStatus, pduPwrMonitoringOutletCtlTablePduB=pduPwrMonitoringOutletCtlTablePduB, pduSystemTimeZone=pduSystemTimeZone, pduRs485Online=pduRs485Online, pduNetworkServiceRadius=pduNetworkServiceRadius, outletPduDResetFrom=outletPduDResetFrom, pduEnvMonitoringTempLowWarning=pduEnvMonitoringTempLowWarning, pduEmdTempHighWarnToNormal=pduEmdTempHighWarnToNormal, outletCfgPduBDelayOffTime=outletCfgPduBDelayOffTime, outletCfgPduADelayOnStatus=outletCfgPduADelayOnStatus, pduEnvMonitoringHumiHystersis=pduEnvMonitoringHumiHystersis, pduEmdHumiLowCritToWarn=pduEmdHumiLowCritToWarn, outletCfgPduAReboot=outletCfgPduAReboot, pduSystemTimeChangeUser=pduSystemTimeChangeUser, outletCfgPduCOverCurrWarning=outletCfgPduCOverCurrWarning, pduEmailPrefix=pduEmailPrefix, pduMailTestPass=pduMailTestPass, inletPowerPhase2=inletPowerPhase2, outletCfgPduAOverCurrWarning=outletCfgPduAOverCurrWarning, pduInletCurrPhase1CritToWarn=pduInletCurrPhase1CritToWarn, pduInletVoltPhase1Critical=pduInletVoltPhase1Critical, inletCurrPhase2=inletCurrPhase2, outletPduDState=outletPduDState, outletCfgPduAOverCurrCritical=outletCfgPduAOverCurrCritical, pduEnvMonitoringHumiLowWarning=pduEnvMonitoringHumiLowWarning, outletPduBStatus=outletPduBStatus, receiverEventLevel=receiverEventLevel, pduSystemTimeFormat=pduSystemTimeFormat, pduEmdHumiLowCritical=pduEmdHumiLowCritical, pduOutletPwrCritTOWarn=pduOutletPwrCritTOWarn, pduPwrMonitoringOutletPduB=pduPwrMonitoringOutletPduB, pduEmdHumiHighWarnToNormal=pduEmdHumiHighWarnToNormal, pduSNMP=pduSNMP, pduEmdTempHighCritical=pduEmdTempHighCritical, outletCfgPduAOverPwrCritical=outletCfgPduAOverPwrCritical, pduOutletOffSchedule=pduOutletOffSchedule, pduNetworkSecurity=pduNetworkSecurity, inletCfgCurrWarnPhase2=inletCfgCurrWarnPhase2, pduInletCommLost=pduInletCommLost, inletVoltPhase3=inletVoltPhase3, outletPduCPower=outletPduCPower, pduSetUser=pduSetUser, pduSystemResetToDefault=pduSystemResetToDefault, inletCfgVoltWarnPhase1=inletCfgVoltWarnPhase1, pduNetworkSecurityControl=pduNetworkSecurityControl, pduEnvMonitoringCfg=pduEnvMonitoringCfg, outletCfgPduCOverPwrCritical=outletCfgPduCOverPwrCritical, outletCfgPduDDelayOnStatus=outletCfgPduDDelayOnStatus, pduOutletCurrCritical=pduOutletCurrCritical, receiverSnmpVer=receiverSnmpVer, pduPwrMonitoringOutletCtlTablePduD=pduPwrMonitoringOutletCtlTablePduD, pduRs485Offline=pduRs485Offline, pduNetworkServiceSsh=pduNetworkServiceSsh, pduSystemTimeNtpSyncInterval=pduSystemTimeNtpSyncInterval, pduNetworkTcpipIpv4Subnet=pduNetworkTcpipIpv4Subnet, outletPduAState=outletPduAState)
