#
# PySNMP MIB module IEEE8021-Q-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/output/asn1/IEEE8021-Q-BRIDGE-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:21:13 2024
# On host fv-az525-771 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ieee8021BridgeBasePortEntry, ieee8021BridgeBasePort, ieee8021BridgeBasePortComponentId = mibBuilder.importSymbols("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortEntry", "ieee8021BridgeBasePort", "ieee8021BridgeBasePortComponentId")
IEEE8021VlanIndexOrWildcard, IEEE8021PbbComponentIdentifier, IEEE8021PortAcceptableFrameTypes, IEEE8021VlanIndex, IEEE8021BridgePortNumberOrZero, ieee802dot1mibs, IEEE8021BridgePortNumber = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021VlanIndexOrWildcard", "IEEE8021PbbComponentIdentifier", "IEEE8021PortAcceptableFrameTypes", "IEEE8021VlanIndex", "IEEE8021BridgePortNumberOrZero", "ieee802dot1mibs", "IEEE8021BridgePortNumber")
VlanId, PortList = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId", "PortList")
TimeFilter, = mibBuilder.importSymbols("RMON2-MIB", "TimeFilter")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, MibIdentifier, Bits, NotificationType, IpAddress, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, ObjectIdentity, Gauge32, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "Bits", "NotificationType", "IpAddress", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "ObjectIdentity", "Gauge32", "ModuleIdentity", "Counter64")
TruthValue, RowStatus, MacAddress, TextualConvention, DisplayString, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "MacAddress", "TextualConvention", "DisplayString", "StorageType")
ieee8021QBridgeMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 4))
ieee8021QBridgeMib.setRevisions(('2011-12-12 00:00', '2011-02-27 00:00', '2008-10-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021QBridgeMib.setRevisionsDescriptions(('Addition of the VID Translation MIB Subtree for 802.1aq', 'Minor edits to contact information etc. as part of \n          2011 revision of IEEE Std 802.1Q.', 'Initial version, derived from RFC 4363.',))
if mibBuilder.loadTexts: ieee8021QBridgeMib.setLastUpdated('201112120000Z')
if mibBuilder.loadTexts: ieee8021QBridgeMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021QBridgeMib.setContactInfo('  WG-URL: http://grouper.ieee.org/groups/802/1/index.html\n         WG-EMail: stds-802-1@ieee.org\n\n          Contact: David Levi \n           Postal: C/O IEEE 802.1 Working Group\n                   IEEE Standards Association\n                   445 Hoes Lane\n                   P.O. Box 1331\n                   Piscataway\n                   NJ 08855-1331\n                   USA\n           E-mail: STDS-802-1-L@LISTSERV.IEEE.ORG')
if mibBuilder.loadTexts: ieee8021QBridgeMib.setDescription('The VLAN Bridge MIB module for managing Virtual Bridged\n        Local Area Networks, as defined by IEEE 802.1Q-2011.\n\n        This MIB module is derived from the IETF Q-BRIDGE-MIB\n        from RFC 4363.\n\n        Unless otherwise indicated, the references in this MIB\n        module are to IEEE 802.1Q-2010.\n\n        Copyright (C) IEEE.\n        This version of this MIB module is part of IEEE802.1Q;\n        see the draft itself for full legal notices.')
ieee8021QBridgeMibObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 4, 1))
ieee8021QBridgeBase = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 4, 1, 1))
ieee8021QBridgeTp = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 4, 1, 2))
ieee8021QBridgeStatic = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 4, 1, 3))
ieee8021QBridgeVlan = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 4, 1, 4))
ieee8021QBridgeProtocol = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 4, 1, 5))
ieee8021QBridgeVIDX = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 4, 1, 6))
ieee8021QBridgeTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 1, 1), )
if mibBuilder.loadTexts: ieee8021QBridgeTable.setReference('12.4')
if mibBuilder.loadTexts: ieee8021QBridgeTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTable.setDescription('A table that contains generic information about every\n        VLAN bridge.')
ieee8021QBridgeEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 1, 1, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeComponentId"))
if mibBuilder.loadTexts: ieee8021QBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeEntry.setDescription('A list of objects containing information for each VLAN bridge.')
ieee8021QBridgeComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 1, 1, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021QBridgeComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeComponentId.setDescription('The component identifier is used to distinguish between the\n        multiple virtual bridge instances within a PBB.  In simple\n        situations where there is only a single component the default\n        value is 1.')
ieee8021QBridgeVlanVersionNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeVlanVersionNumber.setReference('12.10.1.1')
if mibBuilder.loadTexts: ieee8021QBridgeVlanVersionNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanVersionNumber.setDescription('The version number of IEEE 802.1Q that this device\n        supports.  Reported as 1 by VLAN Bridges that support\n        only SST operation, and reported as 2 by VLAN Bridges\n        that support MST operation.')
ieee8021QBridgeMaxVlanId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 1, 1, 1, 3), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeMaxVlanId.setReference('9.6')
if mibBuilder.loadTexts: ieee8021QBridgeMaxVlanId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeMaxVlanId.setDescription('The maximum IEEE 802.1Q VLAN-ID that this device\n        supports.')
ieee8021QBridgeMaxSupportedVlans = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 1, 1, 1, 4), Unsigned32()).setUnits('vlans').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeMaxSupportedVlans.setReference('12.10.1.1')
if mibBuilder.loadTexts: ieee8021QBridgeMaxSupportedVlans.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeMaxSupportedVlans.setDescription('The maximum number of IEEE 802.1Q VLANs that this\n        device supports.')
ieee8021QBridgeNumVlans = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 1, 1, 1, 5), Gauge32()).setUnits('vlans').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeNumVlans.setReference('12.7.1.1')
if mibBuilder.loadTexts: ieee8021QBridgeNumVlans.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeNumVlans.setDescription('The current number of IEEE 802.1Q VLANs that are\n        configured in this device.')
ieee8021QBridgeMvrpEnabledStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 1, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021QBridgeMvrpEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeMvrpEnabledStatus.setDescription('The administrative status requested by management for\n        MVRP.  The value true(1) indicates that MVRP should\n        be enabled on this device, on all ports for which it has\n        not been specifically disabled.  When false(2), MVRP\n        is disabled on all ports, and all MVRP packets will be\n        forwarded transparently.  This object affects all MVRP\n        Applicant and Registrar state machines.  A transition\n        from false(2) to true(1) will cause a reset of all\n        MVRP state machines on all ports.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021QBridgeCVlanPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 1, 2), )
if mibBuilder.loadTexts: ieee8021QBridgeCVlanPortTable.setReference('12.16.1.1.3 h4), 12.16.2.1/2,\n                 12.13.1.1, 12.13.1.2, 12.15.2.1, 12.15.2.2')
if mibBuilder.loadTexts: ieee8021QBridgeCVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeCVlanPortTable.setDescription('This table provides the capability to create and delete\n        customer VLAN ports.  Entries in this table must be\n        persistent over power up restart/reboot.')
ieee8021QBridgeCVlanPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 1, 2, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeCVlanPortComponentId"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeCVlanPortNumber"))
if mibBuilder.loadTexts: ieee8021QBridgeCVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeCVlanPortEntry.setDescription('A list of objects containing information for each VLAN bridge.')
ieee8021QBridgeCVlanPortComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 1, 2, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021QBridgeCVlanPortComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeCVlanPortComponentId.setDescription('The componentcontaining the customer VLAN port represented\n        by this row.')
ieee8021QBridgeCVlanPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 1, 2, 1, 2), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021QBridgeCVlanPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeCVlanPortNumber.setDescription('The customer VLAN port number represented by this row.')
ieee8021QBridgeCVlanPortRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeCVlanPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeCVlanPortRowStatus.setDescription('This indicates the status of the entry, and is used to create\n        and delete entries in this table.  Each entry in this table that\n        is valid will have a corresponding entry in the\n        ieee8021BridgeBasePortTable whose value for\n        ieee8021BridgeBasePortType is customerVlanPort(2).  The\n        corresponding value of ieee8021BridgeBasePortIfIndex must\n        be set at the time the value of this object transitions\n        to valid(1).\n\n        Entries in this table must be persistent across\n        reinitializations of the management system.')
ieee8021QBridgeFdbTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 1), )
if mibBuilder.loadTexts: ieee8021QBridgeFdbTable.setReference('12.7.1')
if mibBuilder.loadTexts: ieee8021QBridgeFdbTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeFdbTable.setDescription('A table that contains configuration and control\n        information for each Filtering Database currently\n        operating on this device.  Entries in this table appear\n        automatically when VLANs are assigned FDB IDs in the\n        ieee8021QBridgeVlanCurrentTable.')
ieee8021QBridgeFdbEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 1, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeFdbComponentId"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeFdbId"))
if mibBuilder.loadTexts: ieee8021QBridgeFdbEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeFdbEntry.setDescription('Information about a specific Filtering Database.')
ieee8021QBridgeFdbComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 1, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021QBridgeFdbComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeFdbComponentId.setDescription('The component identifier is used to distinguish between the\n        multiple virtual bridge instances within a PBB.  In simple\n        situations where there is only a single component the default\n        value is 1.')
ieee8021QBridgeFdbId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: ieee8021QBridgeFdbId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeFdbId.setDescription('The identity of this Filtering Database.')
ieee8021QBridgeFdbDynamicCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 1, 1, 3), Gauge32()).setUnits('database entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeFdbDynamicCount.setReference('12.7.1.1.3')
if mibBuilder.loadTexts: ieee8021QBridgeFdbDynamicCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeFdbDynamicCount.setDescription('The current number of dynamic entries in this\n        Filtering Database.')
ieee8021QBridgeFdbLearnedEntryDiscards = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 1, 1, 4), Counter64()).setUnits('database entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeFdbLearnedEntryDiscards.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeFdbLearnedEntryDiscards.setDescription('The total number of Filtering Database entries that\n        have been or would have been learned, but have been\n        discarded due to a lack of storage space in the\n        Filtering Database.  If this counter is increasing, it\n        indicates that the Filtering Database is regularly\n        becoming full (a condition that has unpleasant\n        performance effects on the subnetwork).  If this counter\n        has a significant value but is not presently increasing,\n        it indicates that the problem has been occurring but is\n        not persistent.\n\n        Discontinuities in the value of the counter can occur\n        at re-initialization of the management system.')
ieee8021QBridgeFdbAgingTime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021QBridgeFdbAgingTime.setReference('12.7.1.2')
if mibBuilder.loadTexts: ieee8021QBridgeFdbAgingTime.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeFdbAgingTime.setDescription('The timeout period in seconds for aging out\n        dynamically-learned forwarding information.\n        802.1D-1998 recommends a default of 300 seconds.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021QBridgeTpFdbTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 2), )
if mibBuilder.loadTexts: ieee8021QBridgeTpFdbTable.setReference('12.7.1')
if mibBuilder.loadTexts: ieee8021QBridgeTpFdbTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTpFdbTable.setDescription('A table that contains information about unicast entries\n        for which the device has forwarding and/or filtering\n        information.  This information is used by the\n        transparent bridging function in determining how to\n        propagate a received frame.')
ieee8021QBridgeTpFdbEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 2, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeFdbComponentId"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeFdbId"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeTpFdbAddress"))
if mibBuilder.loadTexts: ieee8021QBridgeTpFdbEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTpFdbEntry.setDescription('Information about a specific unicast MAC address for\n        which the device has some forwarding and/or filtering\n        information.')
ieee8021QBridgeTpFdbAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: ieee8021QBridgeTpFdbAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTpFdbAddress.setDescription('A unicast MAC address for which the device has\n        forwarding and/or filtering information.')
ieee8021QBridgeTpFdbPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 2, 1, 2), IEEE8021BridgePortNumberOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeTpFdbPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTpFdbPort.setDescription("Either the value '0', or the port number of the port on\n        which a frame having a source address equal to the value\n        of the corresponding instance of ieee8021QBridgeTpFdbAddress has\n        been seen.  A value of '0' indicates that the port\n        number has not been learned but that the device does\n        have some forwarding/filtering information about this\n        address (e.g., in the ieee8021QBridgeStaticUnicastTable).\n        Implementors are encouraged to assign the port value to\n        this object whenever it is learned, even for addresses\n        for which the corresponding value of ieee8021QBridgeTpFdbStatus is\n        not learned(3).")
ieee8021QBridgeTpFdbStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeTpFdbStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTpFdbStatus.setDescription("The status of this entry.  The meanings of the values\n        are:\n            other(1) - none of the following.  This may include\n                the case where some other MIB object (not the\n                corresponding instance of ieee8021QBridgeTpFdbPort, nor an\n                entry in the ieee8021QBridgeStaticUnicastTable) is being\n                used to determine if and how frames addressed to\n                the value of the corresponding instance of\n                ieee8021QBridgeTpFdbAddress are being forwarded.\n            invalid(2) - this entry is no longer valid (e.g., it\n                was learned but has since aged out), but has not\n                yet been flushed from the table.\n            learned(3) - the value of the corresponding instance\n                of ieee8021QBridgeTpFdbPort was learned and is being used.\n            self(4) - the value of the corresponding instance of\n                ieee8021QBridgeTpFdbAddress represents one of the device's\n                addresses.  The corresponding instance of\n                ieee8021QBridgeTpFdbPort indicates which of the device's\n                ports has this address.\n            mgmt(5) - the value of the corresponding instance of\n                ieee8021QBridgeTpFdbAddress is also the value of an\n                existing instance of ieee8021QBridgeStaticUnicastAddress.")
ieee8021QBridgeTpGroupTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 3), )
if mibBuilder.loadTexts: ieee8021QBridgeTpGroupTable.setReference('12.7.4')
if mibBuilder.loadTexts: ieee8021QBridgeTpGroupTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTpGroupTable.setDescription('A table containing filtering information for VLANs\n        configured into the bridge by (local or network)\n        management, or learned dynamically, specifying the set of\n        ports to which frames received on a VLAN for this FDB\n        and containing a specific Group destination address are\n        allowed to be forwarded.')
ieee8021QBridgeTpGroupEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 3, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanCurrentComponentId"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanIndex"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeTpGroupAddress"))
if mibBuilder.loadTexts: ieee8021QBridgeTpGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTpGroupEntry.setDescription('Filtering information configured into the bridge by\n        management, or learned dynamically, specifying the set of\n        ports to which frames received on a VLAN and containing\n        a specific Group destination address are allowed to be\n        forwarded.  The subset of these ports learned dynamically\n        is also provided.')
ieee8021QBridgeTpGroupAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: ieee8021QBridgeTpGroupAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTpGroupAddress.setDescription("The destination Group MAC address in a frame to which\n        this entry's filtering information applies.")
ieee8021QBridgeTpGroupEgressPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeTpGroupEgressPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTpGroupEgressPorts.setDescription('The complete set of ports, in this VLAN, to which\n        frames destined for this Group MAC address are currently\n        being explicitly forwarded.  This does not include ports\n        for which this address is only implicitly forwarded, in\n        the ieee8021QBridgeForwardAllPorts list.')
ieee8021QBridgeTpGroupLearnt = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 3, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeTpGroupLearnt.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTpGroupLearnt.setDescription('The subset of ports in ieee8021QBridgeTpGroupEgressPorts that\n        were learned by MMRP or some other dynamic mechanism, in\n        this Filtering database.')
ieee8021QBridgeForwardAllTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 4), )
if mibBuilder.loadTexts: ieee8021QBridgeForwardAllTable.setReference('12.7.2, 12.7.7')
if mibBuilder.loadTexts: ieee8021QBridgeForwardAllTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeForwardAllTable.setDescription('A table containing forwarding information for each\n        VLAN, specifying the set of ports to which forwarding of\n        all multicasts applies, configured statically by\n        management or dynamically by MMRP.  An entry appears in\n        this table for all VLANs that are currently\n        instantiated.')
ieee8021QBridgeForwardAllEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 4, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanCurrentComponentId"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeForwardAllVlanIndex"))
if mibBuilder.loadTexts: ieee8021QBridgeForwardAllEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeForwardAllEntry.setDescription('Forwarding information for a VLAN, specifying the set\n        of ports to which all multicasts should be forwarded,\n        configured statically by management or dynamically by\n        MMRP.')
ieee8021QBridgeForwardAllVlanIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 4, 1, 1), IEEE8021VlanIndexOrWildcard())
if mibBuilder.loadTexts: ieee8021QBridgeForwardAllVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeForwardAllVlanIndex.setDescription('The VLAN-ID or other identifier referring to this VLAN.')
ieee8021QBridgeForwardAllPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 4, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeForwardAllPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeForwardAllPorts.setDescription('The complete set of ports in this VLAN to which all\n        multicast group-addressed frames are to be forwarded.\n        This includes ports for which this need has been\n        determined dynamically by MMRP, or configured statically\n        by management.')
ieee8021QBridgeForwardAllStaticPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 4, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021QBridgeForwardAllStaticPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeForwardAllStaticPorts.setDescription('The set of ports configured by management in this VLAN\n        to which all multicast group-addressed frames are to be\n        forwarded.  Ports entered in this list will also appear\n        in the complete set shown by ieee8021QBridgeForwardAllPorts.  This\n        value will be restored after the device is reset.  This\n        only applies to ports that are members of the VLAN,\n        defined by ieee8021QBridgeVlanCurrentEgressPorts.  A port may not\n        be added in this set if it is already a member of the\n        set of ports in ieee8021QBridgeForwardAllForbiddenPorts.  The\n        default value is a string of ones of appropriate length,\n        to indicate the standard behaviour of using basic\n        filtering services, i.e., forward all multicasts to all\n        ports.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021QBridgeForwardAllForbiddenPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 4, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021QBridgeForwardAllForbiddenPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeForwardAllForbiddenPorts.setDescription('The set of ports configured by management in this VLAN\n        for which the Service Requirement attribute Forward All\n        Multicast Groups may not be dynamically registered by\n        MMRP.  This value will be restored after the device is\n        reset.  A port may not be added in this set if it is\n        already a member of the set of ports in\n        ieee8021QBridgeForwardAllStaticPorts.  The default value is a\n        string of zeros of appropriate length.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021QBridgeForwardUnregisteredTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 5), )
if mibBuilder.loadTexts: ieee8021QBridgeForwardUnregisteredTable.setReference('12.7.2, 12.7.7')
if mibBuilder.loadTexts: ieee8021QBridgeForwardUnregisteredTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeForwardUnregisteredTable.setDescription('A table containing forwarding information for each\n        VLAN, specifying the set of ports to which forwarding of\n        multicast group-addressed frames for which no\n        more specific forwarding information applies.  This is\n        configured statically by management and determined\n        dynamically by MMRP.  An entry appears in this table for\n        all VLANs that are currently instantiated.')
ieee8021QBridgeForwardUnregisteredEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 5, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanCurrentComponentId"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeForwardUnregisteredVlanIndex"))
if mibBuilder.loadTexts: ieee8021QBridgeForwardUnregisteredEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeForwardUnregisteredEntry.setDescription('Forwarding information for a VLAN, specifying the set\n        of ports to which all multicasts for which there is no\n        more specific forwarding information shall be forwarded.\n        This is configured statically by management or\n        dynamically by MMRP.')
ieee8021QBridgeForwardUnregisteredVlanIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 5, 1, 1), IEEE8021VlanIndexOrWildcard())
if mibBuilder.loadTexts: ieee8021QBridgeForwardUnregisteredVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeForwardUnregisteredVlanIndex.setDescription('The VLAN-ID or other identifier referring to this VLAN.')
ieee8021QBridgeForwardUnregisteredPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 5, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeForwardUnregisteredPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeForwardUnregisteredPorts.setDescription('The complete set of ports in this VLAN to which\n        multicast group-addressed frames for which there is no\n        more specific forwarding information will be forwarded.\n        This includes ports for which this need has been\n        determined dynamically by MMRP, or configured statically\n        by management.')
ieee8021QBridgeForwardUnregisteredStaticPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 5, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021QBridgeForwardUnregisteredStaticPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeForwardUnregisteredStaticPorts.setDescription('The set of ports configured by management, in this\n        VLAN, to which multicast group-addressed frames for\n        which there is no more specific forwarding information\n        are to be forwarded.  Ports entered in this list will\n        also appear in the complete set shown by\n        ieee8021QBridgeForwardUnregisteredPorts.  This value will be\n        restored after the device is reset.  A port may not be\n        added in this set if it is already a member of the set\n        of ports in ieee8021QBridgeForwardUnregisteredForbiddenPorts.  The\n        default value is a string of zeros of appropriate\n        length, although this has no effect with the default\n        value of ieee8021QBridgeForwardAllStaticPorts.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021QBridgeForwardUnregisteredForbiddenPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 2, 5, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021QBridgeForwardUnregisteredForbiddenPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeForwardUnregisteredForbiddenPorts.setDescription('The set of ports configured by management in this VLAN\n        for which the Service Requirement attribute Forward\n        Unregistered Multicast Groups may not be dynamically\n        registered by MMRP.  This value will be restored after\n        the device is reset.  A port may not be added in this\n        set if it is already a member of the set of ports in\n        ieee8021QBridgeForwardUnregisteredStaticPorts.  The default value\n        is a string of zeros of appropriate length.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021QBridgeStaticUnicastTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 1), )
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastTable.setReference('802.1D 7.9.1, 14.7.6.1; \n                 802.1Q 12.7.7, 8.8.1')
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastTable.setDescription('A table containing filtering information for Unicast\n        MAC addresses for each Filtering Database, configured\n        into the device by (local or network) management\n        specifying the set of ports to which frames received\n        from specific ports and containing specific unicast\n        destination addresses are allowed to be forwarded.  \n        Entries are valid for unicast addresses only.\n\n        Two modes of operation are supported by this table. When\n        the receive port index is non-zero, this table is\n        supporting an 802.1D filtering database as specified in\n        14.7.6.1.  If the receive port is zero, the\n        table is operating as specified in 802.1Q \n        8.8.1 and 12.7.7.  An agent must at least \n        support the 802.1Q mode of operation.')
ieee8021QBridgeStaticUnicastEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 1, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeStaticUnicastComponentId"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeStaticUnicastVlanIndex"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeStaticUnicastAddress"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeStaticUnicastReceivePort"))
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastEntry.setDescription('Filtering information configured into the device by\n        (local or network) management specifying the set of\n        ports to which frames received from a specific port and\n        containing a specific unicast destination address are\n        allowed to be forwarded.')
ieee8021QBridgeStaticUnicastComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 1, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastComponentId.setDescription('The component identifier is used to distinguish between the\n        multiple virtual bridge instances within a PBB.  In simple\n        situations where there is only a single component the default\n        value is 1.')
ieee8021QBridgeStaticUnicastVlanIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 1, 1, 2), IEEE8021VlanIndexOrWildcard())
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastVlanIndex.setDescription('The Vlan to which this entry applies.')
ieee8021QBridgeStaticUnicastAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 1, 1, 3), MacAddress())
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastAddress.setDescription("The destination MAC address in a frame to which this\n        entry's filtering information applies.  This object must\n        take the value of a unicast address.")
ieee8021QBridgeStaticUnicastReceivePort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 1, 1, 4), IEEE8021BridgePortNumberOrZero())
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastReceivePort.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastReceivePort.setDescription("Either the value '0' or the port number of the port\n        from which a frame must be received in order for this\n        entry's filtering information to apply.  A value of zero\n        indicates that this entry applies on all ports of the\n        device for which there is no other applicable entry. An\n        implementation is required to support the '0' value and\n        may optionally support non-zero values for this column.")
ieee8021QBridgeStaticUnicastStaticEgressPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 1, 1, 5), PortList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastStaticEgressPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastStaticEgressPorts.setDescription('The set of ports to which frames received from a\n        specific port and destined for a specific unicast address\n        must be forwarded, regardless of\n        any dynamic information, e.g., from MMRP.  A port may not\n        be added in this set if it is already a member of the\n        set of ports in ieee8021QBridgeStaticUnicastForbiddenEgressPorts.\n        The default value of this object is a string of ones of\n        appropriate length.')
ieee8021QBridgeStaticUnicastForbiddenEgressPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 1, 1, 6), PortList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastForbiddenEgressPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastForbiddenEgressPorts.setDescription('The set of ports to which frames received from a\n        specific port and destined for a specific unicast\n        MAC address must not be forwarded, regardless\n        of any dynamic information, e.g., from MMRP.  A port may\n        not be added in this set if it is already a member of the\n        set of ports in ieee8021QBridgeStaticUnicastStaticEgressPorts.\n        The default value of this object is a string of zeros of\n        appropriate length.')
ieee8021QBridgeStaticUnicastStorageType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 1, 1, 7), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastStorageType.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastStorageType.setDescription('The storage type for this conceptual row.  If this object\n        has a value of permanent(4), then no other objects are\n        required to be able to be modified.')
ieee8021QBridgeStaticUnicastRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticUnicastRowStatus.setDescription('This object indicates the status of this entry, and is used\n        to create/delete entries in the table.\n\n        An entry of this table may be set to active without setting\n        any other columns of the table.  Also, other columns of this\n        table may be set while the value of this object is active(1).')
ieee8021QBridgeStaticMulticastTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 2), )
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastTable.setReference('12.7.7, 8.8.1')
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastTable.setDescription('A table containing filtering information for Multicast\n        and Broadcast MAC addresses for each VLAN, configured\n        into the device by (local or network) management\n        specifying the set of ports to which frames received\n        from specific ports and containing specific Multicast\n        and Broadcast destination addresses are allowed to be\n        forwarded.  A value of zero in this table (as the port\n        number from which frames with a specific destination\n        address are received) is used to specify all ports for\n        which there is no specific entry in this table for that\n        particular destination address.  Entries are valid for\n        Multicast and Broadcast addresses only.')
ieee8021QBridgeStaticMulticastEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 2, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanCurrentComponentId"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanIndex"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeStaticMulticastAddress"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeStaticMulticastReceivePort"))
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastEntry.setDescription('Filtering information configured into the device by\n        (local or network) management specifying the set of\n        ports to which frames received from this specific port\n        for this VLAN and containing this Multicast or Broadcast\n        destination address are allowed to be forwarded.')
ieee8021QBridgeStaticMulticastAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastAddress.setDescription("The destination MAC address in a frame to which this\n        entry's filtering information applies.  This object must\n        take the value of a Multicast or Broadcast address.")
ieee8021QBridgeStaticMulticastReceivePort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 2, 1, 2), IEEE8021BridgePortNumberOrZero())
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastReceivePort.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastReceivePort.setDescription("Either the value '0' or the port number of the port\n        from which a frame must be received in order for this\n        entry's filtering information to apply.  A value of zero\n        indicates that this entry applies on all ports of the\n        device for which there is no other applicable entry. An\n        implementation is required to support the '0' value and\n        may optionally support non-zero values for this column.")
ieee8021QBridgeStaticMulticastStaticEgressPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 2, 1, 3), PortList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastStaticEgressPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastStaticEgressPorts.setDescription('The set of ports to which frames received from a\n        specific port and destined for a specific Multicast or\n        Broadcast MAC address must be forwarded, regardless of\n        any dynamic information, e.g., from MMRP.  A port may not\n        be added in this set if it is already a member of the\n        set of ports in ieee8021QBridgeStaticMulticastForbiddenEgressPorts.\n        The default value of this object is a string of ones of\n        appropriate length.')
ieee8021QBridgeStaticMulticastForbiddenEgressPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 2, 1, 4), PortList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastForbiddenEgressPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastForbiddenEgressPorts.setDescription('The set of ports to which frames received from a\n        specific port and destined for a specific Multicast or\n        Broadcast MAC address must not be forwarded, regardless\n        of any dynamic information, e.g., from MMRP.  A port may\n        not be added in this set if it is already a member of the\n        set of ports in ieee8021QBridgeStaticMulticastStaticEgressPorts.\n        The default value of this object is a string of zeros of\n        appropriate length.')
ieee8021QBridgeStaticMulticastStorageType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 2, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastStorageType.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastStorageType.setDescription('The storage type for this conceptual row.  If this object\n        has a value of permanent(4), then no other objects are\n        required to be able to be modified.')
ieee8021QBridgeStaticMulticastRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 3, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeStaticMulticastRowStatus.setDescription('This object indicates the status of this entry, and is used\n        to create/delete entries in the table.\n\n        An entry of this table may be set to active without setting\n        any other columns of the table.  Also, other columns of this\n        table may be set while the value of this object is active(1).')
ieee8021QBridgeVlanNumDeletes = MibScalar((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 1), Counter64()).setUnits('vlan deletions').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeVlanNumDeletes.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanNumDeletes.setDescription('The number of times a VLAN entry has been deleted from\n        the ieee8021QBridgeVlanCurrentTable (for any reason).\n        If an entry is deleted, then inserted, and then deleted,\n        this counter will be incremented by 2.  Discontinuities\n        in this value can only occur at a reboot.')
ieee8021QBridgeVlanCurrentTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 2), )
if mibBuilder.loadTexts: ieee8021QBridgeVlanCurrentTable.setReference('12.10.2')
if mibBuilder.loadTexts: ieee8021QBridgeVlanCurrentTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanCurrentTable.setDescription('A table containing current configuration information\n        for each VLAN currently configured into the device by\n        (local or network) management, or dynamically created\n        as a result of MVRP requests received.')
ieee8021QBridgeVlanCurrentEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 2, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanTimeMark"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanCurrentComponentId"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanIndex"))
if mibBuilder.loadTexts: ieee8021QBridgeVlanCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanCurrentEntry.setDescription('Information for a VLAN configured into the device by\n        (local or network) management, or dynamically created\n        as a result of MVRP requests received.')
ieee8021QBridgeVlanTimeMark = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 2, 1, 1), TimeFilter())
if mibBuilder.loadTexts: ieee8021QBridgeVlanTimeMark.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanTimeMark.setDescription('A TimeFilter for this entry.  See the TimeFilter\n        textual convention to see how this works.')
ieee8021QBridgeVlanCurrentComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 2, 1, 2), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021QBridgeVlanCurrentComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanCurrentComponentId.setDescription('The component identifier is used to distinguish between the\n        multiple virtual bridge instances within a PBB.  In simple\n        situations where there is only a single component the default\n        value is 1.')
ieee8021QBridgeVlanIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 2, 1, 3), IEEE8021VlanIndex())
if mibBuilder.loadTexts: ieee8021QBridgeVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanIndex.setDescription('The VLAN-ID or other identifier referring to this VLAN.')
ieee8021QBridgeVlanFdbId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeVlanFdbId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanFdbId.setDescription('The Filtering Database used by this VLAN.  This is one\n        of the ieee8021QBridgeFdbId values in the ieee8021QBridgeFdbTable.\n        This value is allocated automatically by the device whenever\n        the VLAN is created: either dynamically by MVRP, or by\n        management, in ieee8021QBridgeVlanStaticTable.  Allocation of this\n        value follows the learning constraints defined for this\n        VLAN in ieee8021QBridgeLearningConstraintsTable.')
ieee8021QBridgeVlanCurrentEgressPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 2, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeVlanCurrentEgressPorts.setReference('12.10.2.1')
if mibBuilder.loadTexts: ieee8021QBridgeVlanCurrentEgressPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanCurrentEgressPorts.setDescription('The set of ports that are transmitting traffic for\n        this VLAN as either tagged or untagged frames.')
ieee8021QBridgeVlanCurrentUntaggedPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 2, 1, 6), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeVlanCurrentUntaggedPorts.setReference('12.10.2.1')
if mibBuilder.loadTexts: ieee8021QBridgeVlanCurrentUntaggedPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanCurrentUntaggedPorts.setDescription('The set of ports that are transmitting traffic for\n        this VLAN as untagged frames.')
ieee8021QBridgeVlanStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("dynamicMvrp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeVlanStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStatus.setDescription('This object indicates the status of this entry.\n            other(1) - this entry is currently in use, but the\n                conditions under which it will remain so differ\n                from the following values.\n            permanent(2) - this entry, corresponding to an entry\n                in ieee8021QBridgeVlanStaticTable, is currently in use and\n                will remain so after the next reset of the\n                device.  The port lists for this entry include\n                ports from the equivalent ieee8021QBridgeVlanStaticTable\n                entry and ports learned dynamically.\n            dynamicMvrp(3) - this entry is currently in use\n                and will remain so until removed by MVRP.  There\n                is no static entry for this VLAN, and it will be\n                removed when the last port leaves the VLAN.')
ieee8021QBridgeVlanCreationTime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeVlanCreationTime.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanCreationTime.setDescription('The value of sysUpTime when this VLAN was created.')
ieee8021QBridgeVlanStaticTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 3), )
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticTable.setReference('12.7.5')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticTable.setDescription('A table containing static configuration information for\n        each VLAN configured into the device by (local or\n        network) management.  All entries are persistent and will\n        be restored after the device is reset.')
ieee8021QBridgeVlanStaticEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 3, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanStaticComponentId"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanStaticVlanIndex"))
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticEntry.setDescription('Static information for a VLAN configured into the\n        device by (local or network) management.')
ieee8021QBridgeVlanStaticComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 3, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticComponentId.setDescription('The component identifier is used to distinguish between the\n        multiple virtual bridge instances within a PBB.  In simple\n        situations where there is only a single component the default\n        value is 1.')
ieee8021QBridgeVlanStaticVlanIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 3, 1, 2), IEEE8021VlanIndex())
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticVlanIndex.setDescription('The VLAN-ID or other identifier referring to this VLAN.')
ieee8021QBridgeVlanStaticName = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticName.setReference('12.10.2.1')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticName.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticName.setDescription('An administratively assigned string, which may be used\n        to identify the VLAN.')
ieee8021QBridgeVlanStaticEgressPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 3, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticEgressPorts.setReference('12.7.7.3, 11.2.3.2.3')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticEgressPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticEgressPorts.setDescription('The set of ports that are permanently assigned to the\n        egress list for this VLAN by management.  Changes to a\n        bit in this object affect the per-port, per-VLAN\n        Registrar control for Registration Fixed for the\n        relevant MVRP state machine on each port.  A port may\n        not be added in this set if it is already a member of\n        the set of ports in ieee8021QBridgeVlanForbiddenEgressPorts.  The\n        default value of this object is a string of zeros of\n        appropriate length, indicating not fixed.')
ieee8021QBridgeVlanForbiddenEgressPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 3, 1, 5), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeVlanForbiddenEgressPorts.setReference('12.7.7.3, 11.2.3.2.3')
if mibBuilder.loadTexts: ieee8021QBridgeVlanForbiddenEgressPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanForbiddenEgressPorts.setDescription('The set of ports that are prohibited by management\n        from being included in the egress list for this VLAN.\n        Changes to this object that cause a port to be included\n        or excluded affect the per-port, per-VLAN Registrar\n        control for Registration Forbidden for the relevant MVRP\n        state machine on each port.  A port may not be added in\n        this set if it is already a member of the set of ports\n        in ieee8021QBridgeVlanStaticEgressPorts.  The default value of\n        this object is a string of zeros of appropriate length,\n        excluding all ports from the forbidden set.')
ieee8021QBridgeVlanStaticUntaggedPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 3, 1, 6), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticUntaggedPorts.setReference('12.10.2.1')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticUntaggedPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticUntaggedPorts.setDescription('The set of ports that should transmit egress packets\n        for this VLAN as untagged.  The default value of this\n        object for the default VLAN (ieee8021QBridgeVlanIndex = 1) is a string\n        of appropriate length including all ports.  There is no\n        specified default for other VLANs.  If a device agent cannot\n        support the set of ports being set, then it will reject the\n        set operation with an error.  For example, a\n        manager might attempt to set more than one VLAN to be untagged\n        on egress where the device does not support this IEEE 802.1Q\n        option.')
ieee8021QBridgeVlanStaticRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticRowStatus.setDescription('This object indicates the status of this entry, and is used\n        to create/delete entries.  Any object in an entry of this table\n        may be modified while the value of the corresponding instance\n        of this object is active(1).')
ieee8021QBridgeNextFreeLocalVlanTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 4), )
if mibBuilder.loadTexts: ieee8021QBridgeNextFreeLocalVlanTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeNextFreeLocalVlanTable.setDescription('A table that contains information about the next free VLAN\n        value for a statically configured VLAN bridge.')
ieee8021QBridgeNextFreeLocalVlanEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 4, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeNextFreeLocalVlanComponentId"))
if mibBuilder.loadTexts: ieee8021QBridgeNextFreeLocalVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeNextFreeLocalVlanEntry.setDescription('The next free VLAN value for a statically configured VLAN bridge')
ieee8021QBridgeNextFreeLocalVlanComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 4, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021QBridgeNextFreeLocalVlanComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeNextFreeLocalVlanComponentId.setDescription('The component identifier is used to distinguish between the\n        multiple virtual bridge instances within a PBB.  In simple\n        situations where there is only a single component the default\n        value is 1.')
ieee8021QBridgeNextFreeLocalVlanIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4096, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeNextFreeLocalVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeNextFreeLocalVlanIndex.setDescription('The next available value for ieee8021QBridgeVlanIndex of a local\n        VLAN entry in ieee8021QBridgeVlanStaticTable.  This will report\n        values >=4096 if a new Local VLAN may be created or else\n        the value 0 if this is not possible.\n\n        A row creation operation in this table for an entry with a local\n        VlanIndex value may fail if the current value of this object\n        is not used as the index.  Even if the value read is used,\n        there is no guarantee that it will still be the valid index\n        when the create operation is attempted; another manager may\n        have already got in during the intervening time interval.\n        In this case, ieee8021QBridgeNextFreeLocalVlanIndex should be re-read\n        and the creation re-tried with the new value.\n\n        This value will automatically change when the current value is\n        used to create a new row.')
ieee8021QBridgePortVlanTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 5), )
if mibBuilder.loadTexts: ieee8021QBridgePortVlanTable.setReference('12.10.1')
if mibBuilder.loadTexts: ieee8021QBridgePortVlanTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePortVlanTable.setDescription('A table containing per-port control and status\n        information for VLAN configuration in the device.')
ieee8021QBridgePortVlanEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 5, 1), )
ieee8021BridgeBasePortEntry.registerAugmentions(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgePortVlanEntry"))
ieee8021QBridgePortVlanEntry.setIndexNames(*ieee8021BridgeBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: ieee8021QBridgePortVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePortVlanEntry.setDescription('Information controlling VLAN configuration for a port\n        on the device.  This is indexed by ieee8021BridgeBasePort.')
ieee8021QBridgePvid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 5, 1, 1), IEEE8021VlanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021QBridgePvid.setReference('12.10.1.1')
if mibBuilder.loadTexts: ieee8021QBridgePvid.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePvid.setDescription('The PVID, the VLAN-ID assigned to untagged frames or\n        Priority-Tagged frames received on this port.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021QBridgePortAcceptableFrameTypes = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 5, 1, 2), IEEE8021PortAcceptableFrameTypes().clone('admitAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021QBridgePortAcceptableFrameTypes.setReference('12.10.1.3')
if mibBuilder.loadTexts: ieee8021QBridgePortAcceptableFrameTypes.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePortAcceptableFrameTypes.setDescription('When this is admitTagged(3), the device will\n        discard untagged frames or Priority-Tagged frames\n        received on this port.  When admitAll(1), untagged\n        frames or Priority-Tagged frames received on this port\n        will be accepted and assigned to a VID based on the\n        PVID and VID Set for this port.\n\n        This control does not affect VLAN-independent Bridge\n        Protocol Data Unit (BPDU) frames, such as MVRP and\n        Spanning Tree Protocol (STP).  It does affect VLAN-\n        dependent BPDU frames, such as MMRP.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021QBridgePortIngressFiltering = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 5, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021QBridgePortIngressFiltering.setReference('12.10.1.4')
if mibBuilder.loadTexts: ieee8021QBridgePortIngressFiltering.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePortIngressFiltering.setDescription('When this is true(1), the device will discard incoming\n        frames for VLANs that do not include this Port in its\n        Member set.  When false(2), the port will accept all\n        incoming frames.\n\n        This control does not affect VLAN-independent BPDU\n        frames, such as MVRP and STP.  It does affect VLAN-\n        dependent BPDU frames, such as MMRP.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021QBridgePortMvrpEnabledStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 5, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021QBridgePortMvrpEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePortMvrpEnabledStatus.setDescription('The state of MVRP operation on this port.  The value\n        true(1) indicates that MVRP is enabled on this port,\n        as long as ieee8021QBridgeMvrpEnabledStatus is also enabled\n        for this device.  When false(2) but\n        ieee8021QBridgeMvrpEnabledStatus is still\n        enabled for the device, MVRP is disabled on this port:\n        any MVRP packets received will be silently discarded, and\n        no MVRP registrations will be propagated from other\n        ports.  This object affects all MVRP Applicant and\n        Registrar state machines on this port.  A transition\n        from false(2) to true(1) will cause a reset of all\n        MVRP state machines on this port.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021QBridgePortMvrpFailedRegistrations = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 5, 1, 5), Counter64()).setUnits('failed MVRP registrations').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgePortMvrpFailedRegistrations.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePortMvrpFailedRegistrations.setDescription('The total number of failed MVRP registrations, for any\n        reason, on this port.\n\n        Discontinuities in the value of the counter can occur\n        at re-initialization of the management system, and at\n        other times as indicated by the value of\n        ifCounterDiscontinuityTime object of the associated\n        interface (if any).')
ieee8021QBridgePortMvrpLastPduOrigin = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 5, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgePortMvrpLastPduOrigin.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePortMvrpLastPduOrigin.setDescription('The Source MAC Address of the last MVRP message\n        received on this port.')
ieee8021QBridgePortRestrictedVlanRegistration = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 5, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021QBridgePortRestrictedVlanRegistration.setReference('11.2.3.2.3, 12.10.1.7.')
if mibBuilder.loadTexts: ieee8021QBridgePortRestrictedVlanRegistration.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePortRestrictedVlanRegistration.setDescription('The state of Restricted VLAN Registration on this port.\n         If the value of this control is true(1), then creation\n         of a new dynamic VLAN entry is permitted only if there\n         is a Static VLAN Registration Entry for the VLAN concerned,\n         in which the Registrar Administrative Control value for\n         this port is Normal Registration.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021QBridgePortVlanStatisticsTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 6), )
if mibBuilder.loadTexts: ieee8021QBridgePortVlanStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePortVlanStatisticsTable.setDescription('A table containing per-port, per-VLAN statistics for\n        traffic received.')
ieee8021QBridgePortVlanStatisticsEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 6, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanIndex"))
if mibBuilder.loadTexts: ieee8021QBridgePortVlanStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePortVlanStatisticsEntry.setDescription('Traffic statistics for a VLAN on an interface.')
ieee8021QBridgeTpVlanPortInFrames = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 6, 1, 1), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeTpVlanPortInFrames.setReference('12.6.1.1.3(a)')
if mibBuilder.loadTexts: ieee8021QBridgeTpVlanPortInFrames.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTpVlanPortInFrames.setDescription('The number of valid frames received by this port from\n        its segment that were classified as belonging to this\n        VLAN.  Note that a frame received on this port is\n        counted by this object if and only if it is for a\n        protocol being processed by the local forwarding process\n        for this VLAN.  This object includes received bridge\n        management frames classified as belonging to this VLAN\n        (e.g., MMRP, but not MVRP or STP.\n\n        Discontinuities in the value of the counter can occur\n        at re-initialization of the management system, and at\n        other times as indicated by the value of\n        ifCounterDiscontinuityTime object of the associated\n        interface (if any).')
ieee8021QBridgeTpVlanPortOutFrames = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 6, 1, 2), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeTpVlanPortOutFrames.setReference('12.6.1.1.3(d)')
if mibBuilder.loadTexts: ieee8021QBridgeTpVlanPortOutFrames.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTpVlanPortOutFrames.setDescription('The number of valid frames transmitted by this port to\n        its segment from the local forwarding process for this\n        VLAN.  This includes bridge management frames originated\n        by this device that are classified as belonging to this\n        VLAN (e.g., MMRP, but not MVRP or STP).\n\n        Discontinuities in the value of the counter can occur\n        at re-initialization of the management system, and at\n        other times as indicated by the value of\n        ifCounterDiscontinuityTime object of the associated\n        interface (if any).')
ieee8021QBridgeTpVlanPortInDiscards = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 6, 1, 3), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeTpVlanPortInDiscards.setReference('12.6.1.1.3')
if mibBuilder.loadTexts: ieee8021QBridgeTpVlanPortInDiscards.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTpVlanPortInDiscards.setDescription('The number of valid frames received by this port from\n        its segment that were classified as belonging to this\n        VLAN and that were discarded due to VLAN-related reasons.\n        Specifically, the IEEE 802.1Q counters for Discard\n        Inbound and Discard on Ingress Filtering.\n\n        Discontinuities in the value of the counter can occur\n        at re-initialization of the management system, and at\n        other times as indicated by the value of\n        ifCounterDiscontinuityTime object of the associated\n        interface (if any).')
ieee8021QBridgeLearningConstraintsTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 8), )
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsTable.setReference('12.10.3.1')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsTable.setDescription('A table containing learning constraints for sets of\n        Shared and Independent VLANs.  Entries in this table are\n        persistent and are preserved across reboots.')
ieee8021QBridgeLearningConstraintsEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 8, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeLearningConstraintsComponentId"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeLearningConstraintsVlan"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeLearningConstraintsSet"))
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsEntry.setDescription('A learning constraint defined for a VLAN.')
ieee8021QBridgeLearningConstraintsComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 8, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsComponentId.setDescription('The component identifier is used to distinguish between the\n        multiple virtual bridge instances within a PBB.  In simple\n        situations where there is only a single component the default\n        value is 1.')
ieee8021QBridgeLearningConstraintsVlan = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 8, 1, 2), IEEE8021VlanIndex())
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsVlan.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsVlan.setDescription('The index of the row in ieee8021QBridgeVlanCurrentTable for the\n        VLAN constrained by this entry.')
ieee8021QBridgeLearningConstraintsSet = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsSet.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsSet.setDescription('The identity of the constraint set to which\n        ieee8021QBridgeLearningConstraintsVlan belongs.  These values may\n        be chosen by the management station.')
ieee8021QBridgeLearningConstraintsType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("independent", 1), ("shared", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsType.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsType.setDescription('The type of constraint this entry defines.\n            independent(1) - the VLAN, ieee8021QBridgeLearningConstraintsVlan,\n                uses a filtering database independent from all\n                other VLANs in the same set, defined by\n                ieee8021QBridgeLearningConstraintsSet.\n            shared(2) - the VLAN, ieee8021QBridgeLearningConstraintsVlan,\n                shares the same filtering database as all other VLANs\n                in the same set, defined by\n                ieee8021QBridgeLearningConstraintsSet.')
ieee8021QBridgeLearningConstraintsStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsStatus.setDescription('The status of this entry.  Any object in an entry of this table\n        may be modified while the value of the corresponding instance\n        of this object is active(1).')
ieee8021QBridgeLearningConstraintDefaultsTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 9), )
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintDefaultsTable.setReference('12.10.3.1')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintDefaultsTable.setDescription('A table containing learning constraints for sets of\n        Shared and Independent VLANs.')
ieee8021QBridgeLearningConstraintDefaultsEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 9, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeLearningConstraintDefaultsComponentId"))
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintDefaultsEntry.setDescription('A learning constraint defined for a VLAN.')
ieee8021QBridgeLearningConstraintDefaultsComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 9, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintDefaultsComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintDefaultsComponentId.setDescription('The component identifier is used to distinguish between the\n        multiple virtual bridge instances within a PBB.  In simple\n        situations where there is only a single component the default\n        value is 1.')
ieee8021QBridgeLearningConstraintDefaultsSet = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintDefaultsSet.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintDefaultsSet.setDescription('The identity of the constraint set to which a VLAN\n        belongs, if there is not an explicit entry for that VLAN\n        in ieee8021QBridgeLearningConstraintsTable.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021QBridgeLearningConstraintDefaultsType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("independent", 1), ("shared", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintDefaultsType.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintDefaultsType.setDescription('The type of constraint set to which a VLAN belongs, if\n        there is not an explicit entry for that VLAN in\n        ieee8021QBridgeLearningConstraintsTable.  The types are as defined\n        for ieee8021QBridgeLearningConstraintsType.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021QBridgeProtocolGroupTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 5, 1), )
if mibBuilder.loadTexts: ieee8021QBridgeProtocolGroupTable.setReference('12.10.1')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolGroupTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolGroupTable.setDescription('A table that contains mappings from Protocol\n         Templates to Protocol Group Identifiers used for\n         Port-and-Protocol-based VLAN Classification.\n\n         Entries in this table must be persistent over power\n         up restart/reboot.')
ieee8021QBridgeProtocolGroupEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 5, 1, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeProtocolGroupComponentId"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeProtocolTemplateFrameType"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeProtocolTemplateProtocolValue"))
if mibBuilder.loadTexts: ieee8021QBridgeProtocolGroupEntry.setReference('12.10.1.1.3 d)')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolGroupEntry.setDescription('A mapping from a Protocol Template to a Protocol\n         Group Identifier.')
ieee8021QBridgeProtocolGroupComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 5, 1, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021QBridgeProtocolGroupComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolGroupComponentId.setDescription('The component identifier is used to distinguish between the\n        multiple virtual bridge instances within a PBB.  In simple\n        situations where there is only a single component the default\n        value is 1.')
ieee8021QBridgeProtocolTemplateFrameType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernet", 1), ("rfc1042", 2), ("snap8021H", 3), ("snapOther", 4), ("llcOther", 5))))
if mibBuilder.loadTexts: ieee8021QBridgeProtocolTemplateFrameType.setReference('12.10.1.8')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolTemplateFrameType.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolTemplateFrameType.setDescription("The data-link encapsulation format or the\n         'detagged_frame_type' in a Protocol Template.")
ieee8021QBridgeProtocolTemplateProtocolValue = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(2, 2), ValueSizeConstraint(5, 5), )))
if mibBuilder.loadTexts: ieee8021QBridgeProtocolTemplateProtocolValue.setReference('12.10.1.8')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolTemplateProtocolValue.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolTemplateProtocolValue.setDescription("The identification of the protocol above the data-link\n         layer in a Protocol Template.  Depending on the\n         frame type, the octet string will have one of the\n         following values:\n\n         For 'ethernet', 'rfc1042' and 'snap8021H',\n             this is the 16-bit (2-octet) IEEE 802.3 Type Field.\n         For 'snapOther',\n             this is the 40-bit (5-octet) PID.\n         For 'llcOther',\n             this is the 2-octet IEEE 802.2 Link Service Access\n             Point (LSAP) pair: first octet for Destination Service\n             Access Point (DSAP) and second octet for Source Service\n             Access Point (SSAP).")
ieee8021QBridgeProtocolGroupId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeProtocolGroupId.setReference('12.10.1.8')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolGroupId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolGroupId.setDescription('Represents a group of protocols that are associated\n         together when assigning a VID to a frame.')
ieee8021QBridgeProtocolGroupRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 5, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeProtocolGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolGroupRowStatus.setDescription('This object indicates the status of this entry.')
ieee8021QBridgeProtocolPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 5, 2), )
if mibBuilder.loadTexts: ieee8021QBridgeProtocolPortTable.setReference('12.10.1')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolPortTable.setDescription('A table that contains VID sets used for\n         Port-and-Protocol-based VLAN Classification.')
ieee8021QBridgeProtocolPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 5, 2, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeProtocolPortGroupId"))
if mibBuilder.loadTexts: ieee8021QBridgeProtocolPortEntry.setReference('12.10.1.1.3 c)')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolPortEntry.setDescription('A VID set for a port.')
ieee8021QBridgeProtocolPortGroupId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ieee8021QBridgeProtocolPortGroupId.setReference('12.10.1.2')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolPortGroupId.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolPortGroupId.setDescription('Designates a group of protocols in the Protocol\n         Group Database.')
ieee8021QBridgeProtocolPortGroupVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 5, 2, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeProtocolPortGroupVid.setReference('12.10.1.2')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolPortGroupVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolPortGroupVid.setDescription('The VID associated with a group of protocols for\n         each port.')
ieee8021QBridgeProtocolPortRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 5, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeProtocolPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeProtocolPortRowStatus.setDescription('This object indicates the status of this entry.')
ieee8021QBridgeVIDXTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 6, 1), )
if mibBuilder.loadTexts: ieee8021QBridgeVIDXTable.setReference('12.10.1.8 ')
if mibBuilder.loadTexts: ieee8021QBridgeVIDXTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVIDXTable.setDescription('This table is used to configure the VID Translation\n        Table defined in 12.10.1.8 and 6.9.  The Bridge VID\n        Translation Table is used to implement a mapping between a\n        local VID, and a relay VID, used by the filtering and\n        forwarding process.  Each row in this table is indexed by\n        component, port, and local VID value and a value to be used\n        for the specified VID as specified in (6.9).  Entries in\n        this table must be persistent over power up restart/reboot.')
ieee8021QBridgeVIDXEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 6, 1, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVIDXLocalVid"))
if mibBuilder.loadTexts: ieee8021QBridgeVIDXEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVIDXEntry.setDescription('An entry for the S-VID translation table which includes \n        both the Local and Relay S-VIDs.')
ieee8021QBridgeVIDXLocalVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 6, 1, 1, 1), VlanId())
if mibBuilder.loadTexts: ieee8021QBridgeVIDXLocalVid.setReference('12.10.1.8.1, 12.10.1.8.2 ')
if mibBuilder.loadTexts: ieee8021QBridgeVIDXLocalVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVIDXLocalVid.setDescription('The Local VID after translation received at the ISS or EISS.')
ieee8021QBridgeVIDXRelayVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 6, 1, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeVIDXRelayVid.setReference('12.10.1.8.1, 12.10.1.8.2 ')
if mibBuilder.loadTexts: ieee8021QBridgeVIDXRelayVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVIDXRelayVid.setDescription('The Relay VID received before translation received at ISS or EISS.')
ieee8021QBridgeVIDXRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeVIDXRowStatus.setReference('12.10.1.8.1, 12.10.1.8.2 ')
if mibBuilder.loadTexts: ieee8021QBridgeVIDXRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVIDXRowStatus.setDescription('This indicates the status of an entry in this table,\n        and is used to create/delete entries. It is an \n        implementation specific decision as to whether \n        any column in this table may be set while the \n        corresponding instance of this object is valid(1).')
ieee8021QBridgeEgressVidXTable = MibTable((1, 3, 111, 2, 802, 1, 1, 4, 1, 6, 2), )
if mibBuilder.loadTexts: ieee8021QBridgeEgressVidXTable.setReference('12.10.1.9, 6.9')
if mibBuilder.loadTexts: ieee8021QBridgeEgressVidXTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeEgressVidXTable.setDescription('This table is used to configure the VID Translation\n        Table defined in 12.10.1.9 and 6.9.  The Bridge VID\n        Egress Translation Table is used to implement a mapping between a\n        relay VID, and a local VID, used by the filtering and\n        forwarding process.  Each row in this table is indexed by\n        component, port, and relay VID value and a value to be used\n        for the specified local VID as specified in (6.9).  Entries in\n        this table must be persistent over power up restart/reboot.')
ieee8021QBridgeEgressVidXEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 4, 1, 6, 2, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021BridgeBaseEgressPortComponentId"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021BridgeEgressBasePort"), (0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeEgressVidXRelayVid"))
if mibBuilder.loadTexts: ieee8021QBridgeEgressVidXEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeEgressVidXEntry.setDescription('An entry for the Egress VID translation table which includes \n        both the relay and local IDs between which the PNP or CNP\n        translates.')
ieee8021QBridgeEgressVidXRelayVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 6, 2, 1, 1), VlanId())
if mibBuilder.loadTexts: ieee8021QBridgeEgressVidXRelayVid.setReference('12.10.1.9.1, 12.10.1.9.2 ')
if mibBuilder.loadTexts: ieee8021QBridgeEgressVidXRelayVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeEgressVidXRelayVid.setDescription('The Relay VID after translation transmitted to the \n         ISS or EISS.')
ieee8021QBridgeEgressVidXLocalVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 6, 2, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeEgressVidXLocalVid.setReference('12.10.1.9.1, 12.10.1.9.2 ')
if mibBuilder.loadTexts: ieee8021QBridgeEgressVidXLocalVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeEgressVidXLocalVid.setDescription('The Local VID before translation transmitted to the \n         ISS or EISS.')
ieee8021QBridgeEgressVidXRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 4, 1, 6, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021QBridgeEgressVidXRowStatus.setReference('12.10.1.9.1, 12.10.1.9.2 ')
if mibBuilder.loadTexts: ieee8021QBridgeEgressVidXRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeEgressVidXRowStatus.setDescription('This indicates the status of an entry in this table,\n        and is used to create/delete entries. It is an \n        implementation specific decision as to whether \n        any column in this table may be set while the \n        corresponding instance of this object is valid(1).')
ieee8021QBridgeConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 4, 2))
ieee8021QBridgeGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 4, 2, 1))
ieee8021QBridgeCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 4, 2, 2))
ieee8021QBridgeBaseGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 1)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanVersionNumber"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeMaxVlanId"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeMaxSupportedVlans"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeNumVlans"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeMvrpEnabledStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeBaseGroup = ieee8021QBridgeBaseGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeBaseGroup.setDescription('A collection of objects providing device-level control\n        and status information for the Virtual LAN bridge\n        services.')
ieee8021QBridgeFdbUnicastGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 2)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeFdbDynamicCount"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeFdbLearnedEntryDiscards"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeFdbAgingTime"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeTpFdbPort"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeTpFdbStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeFdbUnicastGroup = ieee8021QBridgeFdbUnicastGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeFdbUnicastGroup.setDescription('A collection of objects providing information about all\n        unicast addresses, learned dynamically or statically\n        configured by management, in each Filtering Database.')
ieee8021QBridgeFdbMulticastGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 3)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeTpGroupEgressPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeTpGroupLearnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeFdbMulticastGroup = ieee8021QBridgeFdbMulticastGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeFdbMulticastGroup.setDescription('A collection of objects providing information about all\n        multicast addresses, learned dynamically or statically\n        configured by management, in each Filtering Database.')
ieee8021QBridgeServiceRequirementsGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 4)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeForwardAllPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeForwardAllStaticPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeForwardAllForbiddenPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeForwardUnregisteredPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeForwardUnregisteredStaticPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeForwardUnregisteredForbiddenPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeServiceRequirementsGroup = ieee8021QBridgeServiceRequirementsGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeServiceRequirementsGroup.setDescription('A collection of objects providing information about\n        service requirements, learned dynamically or statically\n        configured by management, in each Filtering Database.')
ieee8021QBridgeFdbStaticGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 5)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeStaticUnicastStaticEgressPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeStaticUnicastForbiddenEgressPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeStaticUnicastStorageType"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeStaticUnicastRowStatus"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeStaticMulticastStaticEgressPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeStaticMulticastForbiddenEgressPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeStaticMulticastStorageType"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeStaticMulticastRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeFdbStaticGroup = ieee8021QBridgeFdbStaticGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeFdbStaticGroup.setDescription('A collection of objects providing information about\n        unicast and multicast addresses statically configured by\n        management, in each Filtering Database or VLAN.')
ieee8021QBridgeVlanGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 6)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanNumDeletes"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanFdbId"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanCurrentEgressPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanCurrentUntaggedPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanStatus"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanCreationTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeVlanGroup = ieee8021QBridgeVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanGroup.setDescription('A collection of objects providing information about\n        all VLANs currently configured on this device.')
ieee8021QBridgeVlanStaticGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 7)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanStaticName"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanStaticEgressPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanForbiddenEgressPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanStaticUntaggedPorts"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanStaticRowStatus"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeNextFreeLocalVlanIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeVlanStaticGroup = ieee8021QBridgeVlanStaticGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStaticGroup.setDescription('A collection of objects providing information about\n        VLANs statically configured by management.')
ieee8021QBridgeVlanStatisticsGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 8)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeTpVlanPortInFrames"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeTpVlanPortOutFrames"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeTpVlanPortInDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeVlanStatisticsGroup = ieee8021QBridgeVlanStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVlanStatisticsGroup.setDescription('A collection of objects providing per-port packet\n        statistics for all VLANs currently configured on this\n        device.')
ieee8021QBridgeLearningConstraintsGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 9)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeLearningConstraintsType"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeLearningConstraintsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeLearningConstraintsGroup = ieee8021QBridgeLearningConstraintsGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintsGroup.setDescription('A collection of objects defining the Filtering Database\n        constraints all VLANs have with each other.')
ieee8021QBridgeLearningConstraintDefaultGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 10)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeLearningConstraintDefaultsSet"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeLearningConstraintDefaultsType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeLearningConstraintDefaultGroup = ieee8021QBridgeLearningConstraintDefaultGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeLearningConstraintDefaultGroup.setDescription('A collection of objects defining the default Filtering\n        Database constraints for VLANs that have no specific\n        constraints defined.')
ieee8021QBridgeClassificationDeviceGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 11)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeProtocolGroupId"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeProtocolGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeClassificationDeviceGroup = ieee8021QBridgeClassificationDeviceGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeClassificationDeviceGroup.setDescription('VLAN classification information for the bridge.')
ieee8021QBridgeClassificationPortGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 12)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeProtocolPortGroupVid"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeProtocolPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeClassificationPortGroup = ieee8021QBridgeClassificationPortGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeClassificationPortGroup.setDescription('VLAN classification information for individual ports.')
ieee8021QBridgePortGroup2 = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 13)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgePvid"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgePortAcceptableFrameTypes"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgePortIngressFiltering"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgePortMvrpEnabledStatus"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgePortMvrpFailedRegistrations"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgePortMvrpLastPduOrigin"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgePortRestrictedVlanRegistration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgePortGroup2 = ieee8021QBridgePortGroup2.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePortGroup2.setDescription('A collection of objects providing port-level VLAN\n        control and status information for all ports.')
ieee8021QBridgeCVlanPortGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 14)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeCVlanPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeCVlanPortGroup = ieee8021QBridgeCVlanPortGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeCVlanPortGroup.setDescription('Objects used to create/delete customer VLAN ports.')
ieee8021QBridgeVIDXGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 15)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVIDXRelayVid"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVIDXRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeVIDXGroup = ieee8021QBridgeVIDXGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeVIDXGroup.setDescription('Ingress or Ingress/Egress VID translation for \n        individual ports.')
ieee8021QBridgeEgressVIDXGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 4, 2, 1, 16)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeEgressVidXLocalVid"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeEgressVidXRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeEgressVIDXGroup = ieee8021QBridgeEgressVIDXGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeEgressVIDXGroup.setDescription('Egress VID translation for individual ports.')
ieee8021QBridgeCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 4, 2, 2, 1)).setObjects(("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeBaseGroup"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanGroup"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanStaticGroup"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgePortGroup2"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeFdbUnicastGroup"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeFdbMulticastGroup"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeServiceRequirementsGroup"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeFdbStaticGroup"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanStatisticsGroup"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeLearningConstraintsGroup"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeLearningConstraintDefaultGroup"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeClassificationDeviceGroup"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeClassificationPortGroup"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeCVlanPortGroup"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVIDXGroup"), ("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeEgressVIDXGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeCompliance = ieee8021QBridgeCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeCompliance.setDescription('The compliance statement for device support of Virtual\n        LAN Bridge services.')
mibBuilder.exportSymbols("IEEE8021-Q-BRIDGE-MIB", ieee8021QBridgeTpFdbPort=ieee8021QBridgeTpFdbPort, ieee8021QBridgeStaticUnicastComponentId=ieee8021QBridgeStaticUnicastComponentId, ieee8021QBridgeVlanCurrentUntaggedPorts=ieee8021QBridgeVlanCurrentUntaggedPorts, ieee8021QBridgeTpFdbEntry=ieee8021QBridgeTpFdbEntry, ieee8021QBridgeEgressVidXLocalVid=ieee8021QBridgeEgressVidXLocalVid, ieee8021QBridgeVlanStaticUntaggedPorts=ieee8021QBridgeVlanStaticUntaggedPorts, ieee8021QBridgeLearningConstraintsSet=ieee8021QBridgeLearningConstraintsSet, ieee8021QBridgeTpFdbTable=ieee8021QBridgeTpFdbTable, ieee8021QBridgeVlanIndex=ieee8021QBridgeVlanIndex, ieee8021QBridgeClassificationPortGroup=ieee8021QBridgeClassificationPortGroup, ieee8021QBridgeTpGroupEgressPorts=ieee8021QBridgeTpGroupEgressPorts, ieee8021QBridgeVlanFdbId=ieee8021QBridgeVlanFdbId, ieee8021QBridgeFdbTable=ieee8021QBridgeFdbTable, ieee8021QBridgeEgressVidXEntry=ieee8021QBridgeEgressVidXEntry, ieee8021QBridgePortVlanStatisticsEntry=ieee8021QBridgePortVlanStatisticsEntry, ieee8021QBridgeStaticMulticastTable=ieee8021QBridgeStaticMulticastTable, ieee8021QBridgeForwardAllVlanIndex=ieee8021QBridgeForwardAllVlanIndex, ieee8021QBridgeMib=ieee8021QBridgeMib, ieee8021QBridgeProtocolPortEntry=ieee8021QBridgeProtocolPortEntry, ieee8021QBridgeTp=ieee8021QBridgeTp, ieee8021QBridgeTpVlanPortInDiscards=ieee8021QBridgeTpVlanPortInDiscards, PYSNMP_MODULE_ID=ieee8021QBridgeMib, ieee8021QBridgeCVlanPortNumber=ieee8021QBridgeCVlanPortNumber, ieee8021QBridgeLearningConstraintsStatus=ieee8021QBridgeLearningConstraintsStatus, ieee8021QBridgeFdbEntry=ieee8021QBridgeFdbEntry, ieee8021QBridgeLearningConstraintsType=ieee8021QBridgeLearningConstraintsType, ieee8021QBridgeVlanStaticVlanIndex=ieee8021QBridgeVlanStaticVlanIndex, ieee8021QBridgeProtocolGroupTable=ieee8021QBridgeProtocolGroupTable, ieee8021QBridgeProtocolTemplateFrameType=ieee8021QBridgeProtocolTemplateFrameType, ieee8021QBridgeMibObjects=ieee8021QBridgeMibObjects, ieee8021QBridgeNextFreeLocalVlanTable=ieee8021QBridgeNextFreeLocalVlanTable, ieee8021QBridgePortAcceptableFrameTypes=ieee8021QBridgePortAcceptableFrameTypes, ieee8021QBridgeNumVlans=ieee8021QBridgeNumVlans, ieee8021QBridgeBaseGroup=ieee8021QBridgeBaseGroup, ieee8021QBridgeStaticMulticastForbiddenEgressPorts=ieee8021QBridgeStaticMulticastForbiddenEgressPorts, ieee8021QBridgeVlanTimeMark=ieee8021QBridgeVlanTimeMark, ieee8021QBridgeLearningConstraintDefaultsSet=ieee8021QBridgeLearningConstraintDefaultsSet, ieee8021QBridgeVlanStatisticsGroup=ieee8021QBridgeVlanStatisticsGroup, ieee8021QBridgeStaticUnicastForbiddenEgressPorts=ieee8021QBridgeStaticUnicastForbiddenEgressPorts, ieee8021QBridgeLearningConstraintsComponentId=ieee8021QBridgeLearningConstraintsComponentId, ieee8021QBridgeEgressVIDXGroup=ieee8021QBridgeEgressVIDXGroup, ieee8021QBridgeTpVlanPortOutFrames=ieee8021QBridgeTpVlanPortOutFrames, ieee8021QBridgeProtocolPortGroupId=ieee8021QBridgeProtocolPortGroupId, ieee8021QBridgeVIDXLocalVid=ieee8021QBridgeVIDXLocalVid, ieee8021QBridgeTpGroupAddress=ieee8021QBridgeTpGroupAddress, ieee8021QBridgeStaticUnicastEntry=ieee8021QBridgeStaticUnicastEntry, ieee8021QBridgeStaticUnicastStorageType=ieee8021QBridgeStaticUnicastStorageType, ieee8021QBridgeCVlanPortEntry=ieee8021QBridgeCVlanPortEntry, ieee8021QBridgeLearningConstraintDefaultsType=ieee8021QBridgeLearningConstraintDefaultsType, ieee8021QBridgeLearningConstraintDefaultsComponentId=ieee8021QBridgeLearningConstraintDefaultsComponentId, ieee8021QBridgeVlanNumDeletes=ieee8021QBridgeVlanNumDeletes, ieee8021QBridgeClassificationDeviceGroup=ieee8021QBridgeClassificationDeviceGroup, ieee8021QBridgeFdbMulticastGroup=ieee8021QBridgeFdbMulticastGroup, ieee8021QBridgeTpGroupTable=ieee8021QBridgeTpGroupTable, ieee8021QBridgeProtocolGroupComponentId=ieee8021QBridgeProtocolGroupComponentId, ieee8021QBridgePortMvrpLastPduOrigin=ieee8021QBridgePortMvrpLastPduOrigin, ieee8021QBridgeVIDXGroup=ieee8021QBridgeVIDXGroup, ieee8021QBridgeForwardAllForbiddenPorts=ieee8021QBridgeForwardAllForbiddenPorts, ieee8021QBridgeVlanStatus=ieee8021QBridgeVlanStatus, ieee8021QBridgeTpVlanPortInFrames=ieee8021QBridgeTpVlanPortInFrames, ieee8021QBridgeVlanStaticComponentId=ieee8021QBridgeVlanStaticComponentId, ieee8021QBridgeEgressVidXRelayVid=ieee8021QBridgeEgressVidXRelayVid, ieee8021QBridgePvid=ieee8021QBridgePvid, ieee8021QBridgeProtocolGroupEntry=ieee8021QBridgeProtocolGroupEntry, ieee8021QBridgeFdbAgingTime=ieee8021QBridgeFdbAgingTime, ieee8021QBridgeVlanCurrentTable=ieee8021QBridgeVlanCurrentTable, ieee8021QBridgePortIngressFiltering=ieee8021QBridgePortIngressFiltering, ieee8021QBridgeMaxVlanId=ieee8021QBridgeMaxVlanId, ieee8021QBridgeTable=ieee8021QBridgeTable, ieee8021QBridgeStaticUnicastTable=ieee8021QBridgeStaticUnicastTable, ieee8021QBridgeForwardUnregisteredPorts=ieee8021QBridgeForwardUnregisteredPorts, ieee8021QBridgePortGroup2=ieee8021QBridgePortGroup2, ieee8021QBridgeForwardAllPorts=ieee8021QBridgeForwardAllPorts, ieee8021QBridgeProtocolPortTable=ieee8021QBridgeProtocolPortTable, ieee8021QBridgeVlanStaticName=ieee8021QBridgeVlanStaticName, ieee8021QBridgeForwardUnregisteredVlanIndex=ieee8021QBridgeForwardUnregisteredVlanIndex, ieee8021QBridgeLearningConstraintsVlan=ieee8021QBridgeLearningConstraintsVlan, ieee8021QBridgeVIDXRowStatus=ieee8021QBridgeVIDXRowStatus, ieee8021QBridgeEgressVidXTable=ieee8021QBridgeEgressVidXTable, ieee8021QBridgePortVlanStatisticsTable=ieee8021QBridgePortVlanStatisticsTable, ieee8021QBridgeStaticMulticastStorageType=ieee8021QBridgeStaticMulticastStorageType, ieee8021QBridgeProtocolGroupId=ieee8021QBridgeProtocolGroupId, ieee8021QBridgeProtocol=ieee8021QBridgeProtocol, ieee8021QBridgeFdbId=ieee8021QBridgeFdbId, ieee8021QBridgeForwardAllStaticPorts=ieee8021QBridgeForwardAllStaticPorts, ieee8021QBridgeForwardUnregisteredEntry=ieee8021QBridgeForwardUnregisteredEntry, ieee8021QBridgeLearningConstraintsGroup=ieee8021QBridgeLearningConstraintsGroup, ieee8021QBridgeLearningConstraintDefaultGroup=ieee8021QBridgeLearningConstraintDefaultGroup, ieee8021QBridgeEgressVidXRowStatus=ieee8021QBridgeEgressVidXRowStatus, ieee8021QBridgeFdbUnicastGroup=ieee8021QBridgeFdbUnicastGroup, ieee8021QBridgeStaticUnicastRowStatus=ieee8021QBridgeStaticUnicastRowStatus, ieee8021QBridgeLearningConstraintDefaultsTable=ieee8021QBridgeLearningConstraintDefaultsTable, ieee8021QBridgeVlanCurrentComponentId=ieee8021QBridgeVlanCurrentComponentId, ieee8021QBridgeTpGroupEntry=ieee8021QBridgeTpGroupEntry, ieee8021QBridgeProtocolGroupRowStatus=ieee8021QBridgeProtocolGroupRowStatus, ieee8021QBridgeVIDXTable=ieee8021QBridgeVIDXTable, ieee8021QBridgePortVlanEntry=ieee8021QBridgePortVlanEntry, ieee8021QBridgeVIDXRelayVid=ieee8021QBridgeVIDXRelayVid, ieee8021QBridgeStatic=ieee8021QBridgeStatic, ieee8021QBridgeFdbComponentId=ieee8021QBridgeFdbComponentId, ieee8021QBridgeStaticMulticastEntry=ieee8021QBridgeStaticMulticastEntry, ieee8021QBridgeVlanCurrentEgressPorts=ieee8021QBridgeVlanCurrentEgressPorts, ieee8021QBridgeVlanGroup=ieee8021QBridgeVlanGroup, ieee8021QBridgeServiceRequirementsGroup=ieee8021QBridgeServiceRequirementsGroup, ieee8021QBridgeMaxSupportedVlans=ieee8021QBridgeMaxSupportedVlans, ieee8021QBridgeForwardAllEntry=ieee8021QBridgeForwardAllEntry, ieee8021QBridgeVlanStaticEgressPorts=ieee8021QBridgeVlanStaticEgressPorts, ieee8021QBridgeLearningConstraintDefaultsEntry=ieee8021QBridgeLearningConstraintDefaultsEntry, ieee8021QBridgeConformance=ieee8021QBridgeConformance, ieee8021QBridgePortVlanTable=ieee8021QBridgePortVlanTable, ieee8021QBridgeVIDXEntry=ieee8021QBridgeVIDXEntry, ieee8021QBridgeComponentId=ieee8021QBridgeComponentId, ieee8021QBridgeVIDX=ieee8021QBridgeVIDX, ieee8021QBridgeCVlanPortRowStatus=ieee8021QBridgeCVlanPortRowStatus, ieee8021QBridgeEntry=ieee8021QBridgeEntry, ieee8021QBridgeVlanCreationTime=ieee8021QBridgeVlanCreationTime, ieee8021QBridgeStaticUnicastReceivePort=ieee8021QBridgeStaticUnicastReceivePort, ieee8021QBridgeCVlanPortGroup=ieee8021QBridgeCVlanPortGroup, ieee8021QBridgeForwardUnregisteredStaticPorts=ieee8021QBridgeForwardUnregisteredStaticPorts, ieee8021QBridgeVlanForbiddenEgressPorts=ieee8021QBridgeVlanForbiddenEgressPorts, ieee8021QBridgeVlan=ieee8021QBridgeVlan, ieee8021QBridgeFdbDynamicCount=ieee8021QBridgeFdbDynamicCount, ieee8021QBridgeBase=ieee8021QBridgeBase, ieee8021QBridgeFdbStaticGroup=ieee8021QBridgeFdbStaticGroup, ieee8021QBridgeStaticUnicastStaticEgressPorts=ieee8021QBridgeStaticUnicastStaticEgressPorts, ieee8021QBridgeNextFreeLocalVlanComponentId=ieee8021QBridgeNextFreeLocalVlanComponentId, ieee8021QBridgeVlanCurrentEntry=ieee8021QBridgeVlanCurrentEntry, ieee8021QBridgeVlanStaticTable=ieee8021QBridgeVlanStaticTable, ieee8021QBridgeStaticUnicastVlanIndex=ieee8021QBridgeStaticUnicastVlanIndex, ieee8021QBridgeTpGroupLearnt=ieee8021QBridgeTpGroupLearnt, ieee8021QBridgeNextFreeLocalVlanEntry=ieee8021QBridgeNextFreeLocalVlanEntry, ieee8021QBridgeGroups=ieee8021QBridgeGroups, ieee8021QBridgeProtocolPortRowStatus=ieee8021QBridgeProtocolPortRowStatus, ieee8021QBridgeStaticMulticastReceivePort=ieee8021QBridgeStaticMulticastReceivePort, ieee8021QBridgeForwardUnregisteredForbiddenPorts=ieee8021QBridgeForwardUnregisteredForbiddenPorts, ieee8021QBridgeTpFdbAddress=ieee8021QBridgeTpFdbAddress, ieee8021QBridgeMvrpEnabledStatus=ieee8021QBridgeMvrpEnabledStatus, ieee8021QBridgeCVlanPortComponentId=ieee8021QBridgeCVlanPortComponentId, ieee8021QBridgeStaticMulticastAddress=ieee8021QBridgeStaticMulticastAddress, ieee8021QBridgeVlanStaticRowStatus=ieee8021QBridgeVlanStaticRowStatus, ieee8021QBridgeVlanStaticGroup=ieee8021QBridgeVlanStaticGroup, ieee8021QBridgeForwardUnregisteredTable=ieee8021QBridgeForwardUnregisteredTable, ieee8021QBridgeStaticUnicastAddress=ieee8021QBridgeStaticUnicastAddress, ieee8021QBridgePortRestrictedVlanRegistration=ieee8021QBridgePortRestrictedVlanRegistration, ieee8021QBridgeCompliance=ieee8021QBridgeCompliance, ieee8021QBridgeLearningConstraintsTable=ieee8021QBridgeLearningConstraintsTable, ieee8021QBridgePortMvrpFailedRegistrations=ieee8021QBridgePortMvrpFailedRegistrations, ieee8021QBridgeCompliances=ieee8021QBridgeCompliances, ieee8021QBridgeCVlanPortTable=ieee8021QBridgeCVlanPortTable, ieee8021QBridgeNextFreeLocalVlanIndex=ieee8021QBridgeNextFreeLocalVlanIndex, ieee8021QBridgeLearningConstraintsEntry=ieee8021QBridgeLearningConstraintsEntry, ieee8021QBridgeFdbLearnedEntryDiscards=ieee8021QBridgeFdbLearnedEntryDiscards, ieee8021QBridgePortMvrpEnabledStatus=ieee8021QBridgePortMvrpEnabledStatus, ieee8021QBridgeStaticMulticastStaticEgressPorts=ieee8021QBridgeStaticMulticastStaticEgressPorts, ieee8021QBridgeProtocolPortGroupVid=ieee8021QBridgeProtocolPortGroupVid, ieee8021QBridgeProtocolTemplateProtocolValue=ieee8021QBridgeProtocolTemplateProtocolValue, ieee8021QBridgeTpFdbStatus=ieee8021QBridgeTpFdbStatus, ieee8021QBridgeForwardAllTable=ieee8021QBridgeForwardAllTable, ieee8021QBridgeVlanStaticEntry=ieee8021QBridgeVlanStaticEntry, ieee8021QBridgeVlanVersionNumber=ieee8021QBridgeVlanVersionNumber, ieee8021QBridgeStaticMulticastRowStatus=ieee8021QBridgeStaticMulticastRowStatus)
