#
# PySNMP MIB module SAF-INTEGRAW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/saf/SAF-INTEGRAW-MIB
# Produced by pysmi-1.1.12 at Tue May 28 12:53:43 2024
# On host fv-az847-244 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
pointToPoint, = mibBuilder.importSymbols("SAF-ENTERPRISE", "pointToPoint")
safIntegra, = mibBuilder.importSymbols("SAF-INTEGRA-MIB", "safIntegra")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, Gauge32, MibIdentifier, ObjectIdentity, ModuleIdentity, Integer32, iso, Bits, Unsigned32, IpAddress, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "Gauge32", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Integer32", "iso", "Bits", "Unsigned32", "IpAddress", "Counter32", "TimeTicks")
DateAndTime, DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention", "PhysAddress")
integraW = ModuleIdentity((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2))
integraW.setRevisions(('2016-05-11 00:00', '2015-09-17 00:00', '2015-09-15 00:00', '2015-08-12 00:00', '2015-07-29 00:00', '2015-05-29 00:00', '2015-05-20 00:00', '2015-04-21 00:00', '2015-04-14 00:00', '2015-03-24 00:00', '2015-02-04 00:00', '2015-01-20 00:00', '2015-01-08 00:00', '2015-01-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: integraW.setRevisionsDescriptions(('Rx Level State added', 'Conformance updated', 'Local/remote IP address, mask, gateway OIDs added', 'Syntax error fixes', 'No modem distortion data is available on Integra-W', 'No carrier offset and modem temp. data are available on Integra-W', 'Public Release 1.04.\n                Radio PLL status, free physical memory, CPU idle objects added', 'Public Release 1.03.\n                Added OIDs for modem signal quality and distortion', 'Descriptions updated', 'Public Release 1.02.\n                Removed integraWifLinkUpDownTrapEnable OID', 'Syntax fix for integraWmodemRadialMse', 'Small typographic error fix', 'Public Release 1.01. Syntax & units fixed', 'Public Release 1.0',))
if mibBuilder.loadTexts: integraW.setLastUpdated('201605110000Z')
if mibBuilder.loadTexts: integraW.setOrganization('SAF Tehnika')
if mibBuilder.loadTexts: integraW.setContactInfo('SAF Tehnika technical support\n                <techsupport>')
if mibBuilder.loadTexts: integraW.setDescription('SAF IntegraW radio management base')
integraWtimestamp = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtimestamp.setStatus('current')
if mibBuilder.loadTexts: integraWtimestamp.setDescription('Last data update time')
integraWradio = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2))
integraWradioTxPower = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 1), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraWradioTxPower.setStatus('current')
if mibBuilder.loadTexts: integraWradioTxPower.setDescription('Output power of radio transmitter')
integraWradioTxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 2), Integer32()).setUnits('kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraWradioTxFrequency.setStatus('current')
if mibBuilder.loadTexts: integraWradioTxFrequency.setDescription('Frequency of radio transmitter')
integraWradioRxLevel = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWradioRxLevel.setStatus('current')
if mibBuilder.loadTexts: integraWradioRxLevel.setDescription('Level of the received signal')
integraWradioSide = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("low", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWradioSide.setStatus('current')
if mibBuilder.loadTexts: integraWradioSide.setDescription('Radio side: Low/High')
integraWradioTxMute = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWradioTxMute.setStatus('current')
if mibBuilder.loadTexts: integraWradioTxMute.setDescription("Status of 'Tx mute'\n       1 - Tx is muted,\n       2 - Tx is not muted.\n                      3 - Status information unavailable")
integraWradioDuplexShift = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 6), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWradioDuplexShift.setStatus('current')
if mibBuilder.loadTexts: integraWradioDuplexShift.setDescription('Utilized duplex shift in kHz')
integraWradioRxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 7), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWradioRxFrequency.setStatus('current')
if mibBuilder.loadTexts: integraWradioRxFrequency.setDescription('Frequency of radio receiver')
integraWradioTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 8), Integer32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWradioTemperature.setStatus('current')
if mibBuilder.loadTexts: integraWradioTemperature.setDescription('Radio module temperature *10 Celsius')
integraWradioTxMuteDuration = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraWradioTxMuteDuration.setStatus('current')
if mibBuilder.loadTexts: integraWradioTxMuteDuration.setDescription('Time remaning for Tx to be muted in seconds.\n                    To turn mute on send number of seconds between 10 and MAX.\n                    To turn mute off send 0.\n                    GET will retrieve remaining duration for mute or \n                    0 if Tx mute is turned off.')
integraWradioRangesTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 10), )
if mibBuilder.loadTexts: integraWradioRangesTable.setStatus('current')
if mibBuilder.loadTexts: integraWradioRangesTable.setDescription('Network interface port status data.')
integraWradioRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 10, 1), ).setIndexNames((0, "SAF-INTEGRAW-MIB", "integraWradioRangeEntryIndex"))
if mibBuilder.loadTexts: integraWradioRangeEntry.setStatus('current')
if mibBuilder.loadTexts: integraWradioRangeEntry.setDescription('An entry containing network physical port status info.')
integraWradioRangeEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWradioRangeEntryIndex.setStatus('current')
if mibBuilder.loadTexts: integraWradioRangeEntryIndex.setDescription('A unique value, greater than zero, for each range \n                      entry. Starts with 1 and is equal to a number of all range \n                      parameters.')
integraWradioRangeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWradioRangeDescr.setStatus('current')
if mibBuilder.loadTexts: integraWradioRangeDescr.setDescription("'Minimal' and 'maximal' labels")
integraWradioRangeTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 10, 1, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWradioRangeTxPower.setStatus('current')
if mibBuilder.loadTexts: integraWradioRangeTxPower.setDescription('Output power ranges for integraWradio transmitter')
integraWradioRangeTxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 10, 1, 4), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWradioRangeTxFrequency.setStatus('current')
if mibBuilder.loadTexts: integraWradioRangeTxFrequency.setDescription('Frequency ranges for integraWradio transmitter')
integraWradioPLL = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWradioPLL.setStatus('current')
if mibBuilder.loadTexts: integraWradioPLL.setDescription('PLL state of local-oscillator generator')
integraWradioRxLevelState = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("low", 2), ("high", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWradioRxLevelState.setStatus('current')
if mibBuilder.loadTexts: integraWradioRxLevelState.setDescription('Received signal level state')
integraWmodem = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 3))
integraWmodemAcquireStatus = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acquireInProgress", 1), ("acquireLocked", 2), ("acquireFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWmodemAcquireStatus.setStatus('current')
if mibBuilder.loadTexts: integraWmodemAcquireStatus.setDescription('This is the current status of modem data acquire\n                           when queried modem status.\n                           For detailed info use modemAcquireLastStatusDetails.')
integraWmodemMse = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 3, 2), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWmodemMse.setStatus('current')
if mibBuilder.loadTexts: integraWmodemMse.setDescription('Current MSE value (floating point value multiplied by 10)')
integraWmodemFecLoad = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWmodemFecLoad.setStatus('current')
if mibBuilder.loadTexts: integraWmodemFecLoad.setDescription('Decoder stress or FEC load value (floating point in textual representation)')
integraWmodemSyncLoss = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("locked", 1), ("unlocked", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWmodemSyncLoss.setStatus('current')
if mibBuilder.loadTexts: integraWmodemSyncLoss.setDescription('Modem synchronization status')
integraWmodemBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 3, 6), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWmodemBandwidth.setStatus('current')
if mibBuilder.loadTexts: integraWmodemBandwidth.setDescription('Signal bandwidth')
integraWmodemModulation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWmodemModulation.setStatus('current')
if mibBuilder.loadTexts: integraWmodemModulation.setDescription('Modulation (preferred)')
integraWmodemRxModulation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWmodemRxModulation.setStatus('current')
if mibBuilder.loadTexts: integraWmodemRxModulation.setDescription('Current (actual) Rx Modulation')
integraWmodemTxModulation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWmodemTxModulation.setStatus('current')
if mibBuilder.loadTexts: integraWmodemTxModulation.setDescription('Current (actual) Tx Modulation')
integraWmodemRxCapacity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 3, 10), Integer32()).setUnits('kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWmodemRxCapacity.setStatus('current')
if mibBuilder.loadTexts: integraWmodemRxCapacity.setDescription('Rx ethernet capacity in kilobits per second')
integraWmodemTxCapacity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 3, 11), Integer32()).setUnits('kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWmodemTxCapacity.setStatus('current')
if mibBuilder.loadTexts: integraWmodemTxCapacity.setDescription('Tx ethernet capacity in kilobits per second')
integraWmodemAcmEngine = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWmodemAcmEngine.setStatus('current')
if mibBuilder.loadTexts: integraWmodemAcmEngine.setDescription('ACM engine status')
integraWmodemSignalQuality = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 3, 14), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWmodemSignalQuality.setStatus('current')
if mibBuilder.loadTexts: integraWmodemSignalQuality.setDescription('Modem signal quality in %')
integraWsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 4))
integraWsysCPUtemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 4, 2), Integer32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWsysCPUtemperature.setStatus('current')
if mibBuilder.loadTexts: integraWsysCPUtemperature.setDescription('System CPU temperature *10 Celsius')
integraWsysLicenseExpire = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 4, 3), Gauge32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWsysLicenseExpire.setStatus('current')
if mibBuilder.loadTexts: integraWsysLicenseExpire.setDescription('License expires after number of seconds. \n                           In the case of -1, check licenseGenStatus status')
integraWsysLicenseGenStatus = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("expired", 2), ("unknown", 3), ("unlimitedTime", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWsysLicenseGenStatus.setStatus('current')
if mibBuilder.loadTexts: integraWsysLicenseGenStatus.setDescription('License General status.')
integraWsysPSUvoltage = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 4, 5), Integer32()).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWsysPSUvoltage.setStatus('current')
if mibBuilder.loadTexts: integraWsysPSUvoltage.setDescription('Power voltage in mV')
integraWsysPSUcurrent = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 4, 6), Integer32()).setUnits('mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWsysPSUcurrent.setStatus('current')
if mibBuilder.loadTexts: integraWsysPSUcurrent.setDescription('Power current in mA')
integraWsysPSUpower = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 4, 7), Integer32()).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWsysPSUpower.setStatus('current')
if mibBuilder.loadTexts: integraWsysPSUpower.setDescription('Power consumption in mW')
integraWsysBoardTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 4, 8), Integer32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWsysBoardTemperature.setStatus('current')
if mibBuilder.loadTexts: integraWsysBoardTemperature.setDescription('System temperature *10 Celsius')
integraWsysFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 4, 9), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWsysFreeMemory.setStatus('current')
if mibBuilder.loadTexts: integraWsysFreeMemory.setDescription('System free memory *10 %')
integraWsysCPUidle = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 4, 10), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWsysCPUidle.setStatus('current')
if mibBuilder.loadTexts: integraWsysCPUidle.setDescription('System CPU idle *10 %')
integraWethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5))
integraWifStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1), )
if mibBuilder.loadTexts: integraWifStatusTable.setStatus('current')
if mibBuilder.loadTexts: integraWifStatusTable.setDescription('Network interface port status data.')
integraWifPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1), ).setIndexNames((0, "SAF-INTEGRAW-MIB", "integraWifPortStatIndex"))
if mibBuilder.loadTexts: integraWifPortEntry.setStatus('current')
if mibBuilder.loadTexts: integraWifPortEntry.setDescription('An entry containing network physical port status info.')
integraWifPortStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortStatIndex.setStatus('current')
if mibBuilder.loadTexts: integraWifPortStatIndex.setDescription('A unique value, greater than zero, for each physical\n                      network interface. It is recommended that\n                      values are assigned contiguously starting from 1.')
integraWifPortStatDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortStatDescr.setStatus('current')
if mibBuilder.loadTexts: integraWifPortStatDescr.setDescription('Physical network interface description.\n                      LAN1 is electrical, LAN2 and LAN3 are SFP\n                      and WAN is radio port.')
integraWifPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortType.setStatus('current')
if mibBuilder.loadTexts: integraWifPortType.setDescription("The type of interface, distinguished according to\n                      the physical/link protocol(s) immediately `below'\n                      the network layer in the protocol stack.")
integraWifPortMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1, 4), Integer32()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortMtu.setStatus('current')
if mibBuilder.loadTexts: integraWifPortMtu.setDescription('Maximum transmission unit value in bytes.')
integraWifPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1, 5), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortSpeed.setStatus('current')
if mibBuilder.loadTexts: integraWifPortSpeed.setDescription('Link speed in bits per second.')
integraWifPortPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortPhysAddress.setStatus('current')
if mibBuilder.loadTexts: integraWifPortPhysAddress.setDescription("The interface's address at the protocol layer\n                      immediately `below' the network layer in the\n                      protocol stack.  For interfaces which do not have\n                      such an address (e.g., a serial line), this object\n                      should contain an octet string of zero length.")
integraWifPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: integraWifPortAdminStatus.setDescription('Desired state of network interfaces. Interfaces\n                      can be enabled(1), disabled(2), unknown(3) (no info received).')
integraWifPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: integraWifPortOperStatus.setDescription('Actual state of interfaces. Link can be up(1),\n                      down(2) or in unknown(3) state.')
integraWifPortLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortLastChange.setStatus('current')
if mibBuilder.loadTexts: integraWifPortLastChange.setDescription('This parameter value is always 0 at the moment.')
integraWifPortAutoneg = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortAutoneg.setStatus('current')
if mibBuilder.loadTexts: integraWifPortAutoneg.setDescription('Auto-negotiation status. Unknown means no info was received.')
integraWifPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortDuplex.setStatus('current')
if mibBuilder.loadTexts: integraWifPortDuplex.setDescription('Duplex status for the interface.')
integraWifPortSyncEthActive = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortSyncEthActive.setStatus('current')
if mibBuilder.loadTexts: integraWifPortSyncEthActive.setDescription('Synchronous Ethernet status.\n                      Can be active(1) or inactive(0).')
integraWifPortSyncEthPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortSyncEthPrio.setStatus('current')
if mibBuilder.loadTexts: integraWifPortSyncEthPrio.setDescription('Synchronous Ethernet priority.')
integraWifPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortFlowControl.setStatus('current')
if mibBuilder.loadTexts: integraWifPortFlowControl.setDescription('Flow control status.')
integraWifStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2), )
if mibBuilder.loadTexts: integraWifStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: integraWifStatisticsTable.setDescription('Network interface port statistics data.')
integraWifPortStcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1), ).setIndexNames((0, "SAF-INTEGRAW-MIB", "integraWifPortStcIndex"))
if mibBuilder.loadTexts: integraWifPortStcEntry.setStatus('current')
if mibBuilder.loadTexts: integraWifPortStcEntry.setDescription('An entry containing network physical port statistics counter data.')
integraWifPortStcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortStcIndex.setStatus('current')
if mibBuilder.loadTexts: integraWifPortStcIndex.setDescription('A unique value, greater than zero, for each physical\n                      network interface. It is recommended that\n                      values are assigned contiguously starting from 1.')
integraWifPortStcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifPortStcDescr.setStatus('current')
if mibBuilder.loadTexts: integraWifPortStcDescr.setDescription('Physical network interface description.\n                      LAN1 is electrical, LAN2 and LAN3 are SFP,\n                      WAN is radio port and MNG is internal management interface.')
integraWifTimePassed = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 3), TimeTicks()).setUnits('s/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWifTimePassed.setStatus('current')
if mibBuilder.loadTexts: integraWifTimePassed.setDescription('Statistics collection time.')
integraWrxDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 4), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxDetected.setStatus('current')
if mibBuilder.loadTexts: integraWrxDetected.setDescription('Detected ingoing packets counter.')
integraWrxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 5), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxDropped.setStatus('current')
if mibBuilder.loadTexts: integraWrxDropped.setDescription('Dropped ingoing packets counter.')
integraWtxDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 6), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxDetected.setStatus('current')
if mibBuilder.loadTexts: integraWtxDetected.setDescription('Detected outgoing packets counter.')
integraWtxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 7), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxDropped.setStatus('current')
if mibBuilder.loadTexts: integraWtxDropped.setDescription('Dropped outgoing packets counter.')
integraWrxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 8), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxBytes.setStatus('current')
if mibBuilder.loadTexts: integraWrxBytes.setDescription('Ingoing bytes counter.')
integraWtxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 9), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxBytes.setStatus('current')
if mibBuilder.loadTexts: integraWtxBytes.setDescription('Outgoing bytes counter.')
integraWrx64Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 10), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrx64Frames.setStatus('current')
if mibBuilder.loadTexts: integraWrx64Frames.setDescription('')
integraWrx65to127Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 11), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrx65to127Frames.setStatus('current')
if mibBuilder.loadTexts: integraWrx65to127Frames.setDescription('')
integraWrx128to255Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 12), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrx128to255Frames.setStatus('current')
if mibBuilder.loadTexts: integraWrx128to255Frames.setDescription('')
integraWrx256to511Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 13), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrx256to511Frames.setStatus('current')
if mibBuilder.loadTexts: integraWrx256to511Frames.setDescription('')
integraWrx512to1023Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 14), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrx512to1023Frames.setStatus('current')
if mibBuilder.loadTexts: integraWrx512to1023Frames.setDescription('')
integraWrx1024toMaxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 15), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrx1024toMaxFrames.setStatus('current')
if mibBuilder.loadTexts: integraWrx1024toMaxFrames.setDescription('')
integraWrxUsizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 16), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxUsizeFrames.setStatus('current')
if mibBuilder.loadTexts: integraWrxUsizeFrames.setDescription('')
integraWrxOsizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 17), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxOsizeFrames.setStatus('current')
if mibBuilder.loadTexts: integraWrxOsizeFrames.setDescription('')
integraWtx64Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 18), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtx64Frames.setStatus('current')
if mibBuilder.loadTexts: integraWtx64Frames.setDescription('')
integraWtx65to127Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 19), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtx65to127Frames.setStatus('current')
if mibBuilder.loadTexts: integraWtx65to127Frames.setDescription('')
integraWtx128to255Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 20), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtx128to255Frames.setStatus('current')
if mibBuilder.loadTexts: integraWtx128to255Frames.setDescription('')
integraWtx256to511Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 21), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtx256to511Frames.setStatus('current')
if mibBuilder.loadTexts: integraWtx256to511Frames.setDescription('')
integraWtx512to1023Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 22), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtx512to1023Frames.setStatus('current')
if mibBuilder.loadTexts: integraWtx512to1023Frames.setDescription('')
integraWtx1024toMaxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 23), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtx1024toMaxFrames.setStatus('current')
if mibBuilder.loadTexts: integraWtx1024toMaxFrames.setDescription('')
integraWtxUsizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 24), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxUsizeFrames.setStatus('current')
if mibBuilder.loadTexts: integraWtxUsizeFrames.setDescription('')
integraWtxOsizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 25), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxOsizeFrames.setStatus('current')
if mibBuilder.loadTexts: integraWtxOsizeFrames.setDescription('')
integraWrxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 26), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxGoodFrames.setStatus('current')
if mibBuilder.loadTexts: integraWrxGoodFrames.setDescription('')
integraWrxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 27), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxErrors.setStatus('current')
if mibBuilder.loadTexts: integraWrxErrors.setDescription('')
integraWrxFifoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 28), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxFifoErr.setStatus('current')
if mibBuilder.loadTexts: integraWrxFifoErr.setDescription('')
integraWrxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 29), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxCRCErrors.setStatus('current')
if mibBuilder.loadTexts: integraWrxCRCErrors.setDescription('')
integraWrxBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 30), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxBcastFrames.setStatus('current')
if mibBuilder.loadTexts: integraWrxBcastFrames.setDescription('')
integraWrxMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 31), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxMcastFrames.setStatus('current')
if mibBuilder.loadTexts: integraWrxMcastFrames.setDescription('')
integraWrxCntrlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 32), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxCntrlFrames.setStatus('current')
if mibBuilder.loadTexts: integraWrxCntrlFrames.setDescription('')
integraWrxLenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 33), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxLenErrors.setStatus('current')
if mibBuilder.loadTexts: integraWrxLenErrors.setDescription('')
integraWrxVlanFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 34), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxVlanFrames.setStatus('current')
if mibBuilder.loadTexts: integraWrxVlanFrames.setDescription('')
integraWrxPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 35), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxPauseFrames.setStatus('current')
if mibBuilder.loadTexts: integraWrxPauseFrames.setDescription('')
integraWrxOpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 36), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxOpErrors.setStatus('current')
if mibBuilder.loadTexts: integraWrxOpErrors.setDescription('')
integraWrxFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 37), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWrxFrameErrors.setStatus('current')
if mibBuilder.loadTexts: integraWrxFrameErrors.setDescription('')
integraWtxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 38), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxGoodFrames.setStatus('current')
if mibBuilder.loadTexts: integraWtxGoodFrames.setDescription('')
integraWtxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 39), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxErrors.setStatus('current')
if mibBuilder.loadTexts: integraWtxErrors.setDescription('')
integraWtxFifoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 40), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxFifoErr.setStatus('current')
if mibBuilder.loadTexts: integraWtxFifoErr.setDescription('')
integraWtxBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 41), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxBcastFrames.setStatus('current')
if mibBuilder.loadTexts: integraWtxBcastFrames.setDescription('')
integraWtxMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 42), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxMcastFrames.setStatus('current')
if mibBuilder.loadTexts: integraWtxMcastFrames.setDescription('')
integraWtxUrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 43), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxUrunErrors.setStatus('current')
if mibBuilder.loadTexts: integraWtxUrunErrors.setDescription('')
integraWtxCntrlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 44), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxCntrlFrames.setStatus('current')
if mibBuilder.loadTexts: integraWtxCntrlFrames.setDescription('')
integraWtxVlanFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 45), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxVlanFrames.setStatus('current')
if mibBuilder.loadTexts: integraWtxVlanFrames.setDescription('')
integraWtxPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 46), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxPauseFrames.setStatus('current')
if mibBuilder.loadTexts: integraWtxPauseFrames.setDescription('')
integraWtxSingleCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 47), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxSingleCollisions.setStatus('current')
if mibBuilder.loadTexts: integraWtxSingleCollisions.setDescription('')
integraWtxMultiCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 48), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxMultiCollisions.setStatus('current')
if mibBuilder.loadTexts: integraWtxMultiCollisions.setDescription('')
integraWtxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 49), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxDeferred.setStatus('current')
if mibBuilder.loadTexts: integraWtxDeferred.setDescription('')
integraWtxLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 50), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxLateCollisions.setStatus('current')
if mibBuilder.loadTexts: integraWtxLateCollisions.setDescription('')
integraWtxExcessCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 51), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxExcessCollisions.setStatus('current')
if mibBuilder.loadTexts: integraWtxExcessCollisions.setDescription('')
integraWtxExcessDeferral = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 52), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxExcessDeferral.setStatus('current')
if mibBuilder.loadTexts: integraWtxExcessDeferral.setDescription('')
integraWtxAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 53), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxAlignErrors.setStatus('current')
if mibBuilder.loadTexts: integraWtxAlignErrors.setDescription('')
integraWtxCarrierErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 54), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxCarrierErrors.setStatus('current')
if mibBuilder.loadTexts: integraWtxCarrierErrors.setDescription('')
integraWtxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 5, 2, 1, 55), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWtxCollisions.setStatus('current')
if mibBuilder.loadTexts: integraWtxCollisions.setDescription('')
integraWexecuteConfig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraWexecuteConfig.setStatus('current')
if mibBuilder.loadTexts: integraWexecuteConfig.setDescription('This object can only be set to 1.\n                           It initiates new running configuration \n                           applying using values, that have been set before.\n                           Setting it when no new changes are available\n                           will do nothing and return an error.\n                           GET will return 0 if there were no errors,\n                           while executing configuration or will return\n                           a bitmask, that shows which SET requests have failed.\n                           Those failed requests will be shown bit wise\n                           from LSB as follows:\n                           BIT0 radioTxMuteDuration\n                           BIT1 radioTxFrequency\n                           BIT2 radioTxPower')
integraWneedStore = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWneedStore.setStatus('current')
if mibBuilder.loadTexts: integraWneedStore.setDescription('This object shows if there is unsaved,\n                           but executed (running) configuration.\n                           Unsaved changes will be lost after\n                           device reboot. Unsaved entities are shown\n                           bit wise, starting from LSB as follows:\n                           BIT0 Aggregation\n                           BIT1 Event log\n                           BIT2 Modem\n                           BIT3 Network\n                           BIT4 Performance\n                           BIT5 Radio\n                           BIT6 SNMP\n                           BIT7 Synchronous Ethernet\n                           BIT8 System')
integraWstoreConfig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("store", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraWstoreConfig.setStatus('current')
if mibBuilder.loadTexts: integraWstoreConfig.setDescription('This object can only be set to 1.\n                           It initiates saving of running configuration.\n                           It will only work if there are unsaved,\n                           but executed (running) changes (configuration).\n                           Setting it when no new running configuration\n                           is available will do nothing and return an error.')
integraWnetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 9))
integraWnetCfgIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 9, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraWnetCfgIPaddress.setStatus('current')
if mibBuilder.loadTexts: integraWnetCfgIPaddress.setDescription('Local IP address')
integraWnetCfgIPmask = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraWnetCfgIPmask.setStatus('current')
if mibBuilder.loadTexts: integraWnetCfgIPmask.setDescription('Local IP mask')
integraWnetCfgIPgateway = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 9, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraWnetCfgIPgateway.setStatus('current')
if mibBuilder.loadTexts: integraWnetCfgIPgateway.setDescription("IP gateway\n                          Send '0' or '255.255.255.255' to clear.")
integraWnetCfgRemoteIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 9, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraWnetCfgRemoteIPaddress.setStatus('current')
if mibBuilder.loadTexts: integraWnetCfgRemoteIPaddress.setDescription('Remote IP address')
integraWConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 10))
integraWCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 10, 1))
integraWCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 10, 1, 1)).setObjects(("SAF-INTEGRAW-MIB", "integraWMiscGroup"), ("SAF-INTEGRAW-MIB", "integraWRadioGroup"), ("SAF-INTEGRAW-MIB", "integraWModemGroup"), ("SAF-INTEGRAW-MIB", "integraWSystemGroup"), ("SAF-INTEGRAW-MIB", "integraWEthernetGeneralGroup"), ("SAF-INTEGRAW-MIB", "integraWEthernetMiiPortGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraWCompliance = integraWCompliance.setStatus('current')
if mibBuilder.loadTexts: integraWCompliance.setDescription('The compliance statement for SNMP engine which\n                 implements the SAF Tehnika Integra-W device.')
integraWGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 10, 2))
integraWMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 10, 2, 1)).setObjects(("SAF-INTEGRAW-MIB", "integraWtimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraWMiscGroup = integraWMiscGroup.setStatus('current')
if mibBuilder.loadTexts: integraWMiscGroup.setDescription('misc data')
integraWRadioGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 10, 2, 2)).setObjects(("SAF-INTEGRAW-MIB", "integraWradioTxPower"), ("SAF-INTEGRAW-MIB", "integraWradioTxFrequency"), ("SAF-INTEGRAW-MIB", "integraWradioRxLevel"), ("SAF-INTEGRAW-MIB", "integraWradioSide"), ("SAF-INTEGRAW-MIB", "integraWradioTxMute"), ("SAF-INTEGRAW-MIB", "integraWradioDuplexShift"), ("SAF-INTEGRAW-MIB", "integraWradioRxFrequency"), ("SAF-INTEGRAW-MIB", "integraWradioTemperature"), ("SAF-INTEGRAW-MIB", "integraWradioTxMuteDuration"), ("SAF-INTEGRAW-MIB", "integraWradioRangeEntryIndex"), ("SAF-INTEGRAW-MIB", "integraWradioRangeDescr"), ("SAF-INTEGRAW-MIB", "integraWradioRangeTxPower"), ("SAF-INTEGRAW-MIB", "integraWradioRangeTxFrequency"), ("SAF-INTEGRAW-MIB", "integraWradioPLL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraWRadioGroup = integraWRadioGroup.setStatus('current')
if mibBuilder.loadTexts: integraWRadioGroup.setDescription('Radio group.')
integraWModemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 10, 2, 3)).setObjects(("SAF-INTEGRAW-MIB", "integraWmodemAcquireStatus"), ("SAF-INTEGRAW-MIB", "integraWmodemMse"), ("SAF-INTEGRAW-MIB", "integraWmodemFecLoad"), ("SAF-INTEGRAW-MIB", "integraWmodemSyncLoss"), ("SAF-INTEGRAW-MIB", "integraWmodemBandwidth"), ("SAF-INTEGRAW-MIB", "integraWmodemModulation"), ("SAF-INTEGRAW-MIB", "integraWmodemRxModulation"), ("SAF-INTEGRAW-MIB", "integraWmodemTxModulation"), ("SAF-INTEGRAW-MIB", "integraWmodemRxCapacity"), ("SAF-INTEGRAW-MIB", "integraWmodemTxCapacity"), ("SAF-INTEGRAW-MIB", "integraWmodemAcmEngine"), ("SAF-INTEGRAW-MIB", "integraWmodemSignalQuality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraWModemGroup = integraWModemGroup.setStatus('current')
if mibBuilder.loadTexts: integraWModemGroup.setDescription('Modem group.')
integraWSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 10, 2, 4)).setObjects(("SAF-INTEGRAW-MIB", "integraWsysCPUtemperature"), ("SAF-INTEGRAW-MIB", "integraWsysLicenseExpire"), ("SAF-INTEGRAW-MIB", "integraWsysLicenseGenStatus"), ("SAF-INTEGRAW-MIB", "integraWsysPSUvoltage"), ("SAF-INTEGRAW-MIB", "integraWsysPSUcurrent"), ("SAF-INTEGRAW-MIB", "integraWsysPSUpower"), ("SAF-INTEGRAW-MIB", "integraWsysBoardTemperature"), ("SAF-INTEGRAW-MIB", "integraWsysFreeMemory"), ("SAF-INTEGRAW-MIB", "integraWsysCPUidle"), ("SAF-INTEGRAW-MIB", "integraWexecuteConfig"), ("SAF-INTEGRAW-MIB", "integraWneedStore"), ("SAF-INTEGRAW-MIB", "integraWstoreConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraWSystemGroup = integraWSystemGroup.setStatus('current')
if mibBuilder.loadTexts: integraWSystemGroup.setDescription('System group.')
integraWEthernetGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 10, 2, 5)).setObjects(("SAF-INTEGRAW-MIB", "integraWifPortStatIndex"), ("SAF-INTEGRAW-MIB", "integraWifPortStatDescr"), ("SAF-INTEGRAW-MIB", "integraWifPortType"), ("SAF-INTEGRAW-MIB", "integraWifPortMtu"), ("SAF-INTEGRAW-MIB", "integraWifPortSpeed"), ("SAF-INTEGRAW-MIB", "integraWifPortPhysAddress"), ("SAF-INTEGRAW-MIB", "integraWifPortAdminStatus"), ("SAF-INTEGRAW-MIB", "integraWifPortOperStatus"), ("SAF-INTEGRAW-MIB", "integraWifPortLastChange"), ("SAF-INTEGRAW-MIB", "integraWifPortAutoneg"), ("SAF-INTEGRAW-MIB", "integraWifPortDuplex"), ("SAF-INTEGRAW-MIB", "integraWifPortSyncEthActive"), ("SAF-INTEGRAW-MIB", "integraWifPortSyncEthPrio"), ("SAF-INTEGRAW-MIB", "integraWifPortFlowControl"), ("SAF-INTEGRAW-MIB", "integraWifPortStcIndex"), ("SAF-INTEGRAW-MIB", "integraWifPortStcDescr"), ("SAF-INTEGRAW-MIB", "integraWifTimePassed"), ("SAF-INTEGRAW-MIB", "integraWnetCfgIPaddress"), ("SAF-INTEGRAW-MIB", "integraWnetCfgIPmask"), ("SAF-INTEGRAW-MIB", "integraWnetCfgIPgateway"), ("SAF-INTEGRAW-MIB", "integraWnetCfgRemoteIPaddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraWEthernetGeneralGroup = integraWEthernetGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: integraWEthernetGeneralGroup.setDescription('A collection to objects, providing info applicable to\n               all network interfaces.')
integraWEthernetMiiPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 2, 10, 2, 6)).setObjects(("SAF-INTEGRAW-MIB", "integraWrxDetected"), ("SAF-INTEGRAW-MIB", "integraWrxDropped"), ("SAF-INTEGRAW-MIB", "integraWtxDetected"), ("SAF-INTEGRAW-MIB", "integraWtxDropped"), ("SAF-INTEGRAW-MIB", "integraWrxBytes"), ("SAF-INTEGRAW-MIB", "integraWtxBytes"), ("SAF-INTEGRAW-MIB", "integraWrx64Frames"), ("SAF-INTEGRAW-MIB", "integraWrx65to127Frames"), ("SAF-INTEGRAW-MIB", "integraWrx128to255Frames"), ("SAF-INTEGRAW-MIB", "integraWrx256to511Frames"), ("SAF-INTEGRAW-MIB", "integraWrx512to1023Frames"), ("SAF-INTEGRAW-MIB", "integraWrx1024toMaxFrames"), ("SAF-INTEGRAW-MIB", "integraWrxUsizeFrames"), ("SAF-INTEGRAW-MIB", "integraWrxOsizeFrames"), ("SAF-INTEGRAW-MIB", "integraWtx64Frames"), ("SAF-INTEGRAW-MIB", "integraWtx65to127Frames"), ("SAF-INTEGRAW-MIB", "integraWtx128to255Frames"), ("SAF-INTEGRAW-MIB", "integraWtx256to511Frames"), ("SAF-INTEGRAW-MIB", "integraWtx512to1023Frames"), ("SAF-INTEGRAW-MIB", "integraWtx1024toMaxFrames"), ("SAF-INTEGRAW-MIB", "integraWtxUsizeFrames"), ("SAF-INTEGRAW-MIB", "integraWtxOsizeFrames"), ("SAF-INTEGRAW-MIB", "integraWrxGoodFrames"), ("SAF-INTEGRAW-MIB", "integraWrxErrors"), ("SAF-INTEGRAW-MIB", "integraWrxFifoErr"), ("SAF-INTEGRAW-MIB", "integraWrxCRCErrors"), ("SAF-INTEGRAW-MIB", "integraWrxBcastFrames"), ("SAF-INTEGRAW-MIB", "integraWrxMcastFrames"), ("SAF-INTEGRAW-MIB", "integraWrxCntrlFrames"), ("SAF-INTEGRAW-MIB", "integraWrxLenErrors"), ("SAF-INTEGRAW-MIB", "integraWrxVlanFrames"), ("SAF-INTEGRAW-MIB", "integraWrxPauseFrames"), ("SAF-INTEGRAW-MIB", "integraWrxOpErrors"), ("SAF-INTEGRAW-MIB", "integraWrxFrameErrors"), ("SAF-INTEGRAW-MIB", "integraWtxGoodFrames"), ("SAF-INTEGRAW-MIB", "integraWtxErrors"), ("SAF-INTEGRAW-MIB", "integraWtxFifoErr"), ("SAF-INTEGRAW-MIB", "integraWtxBcastFrames"), ("SAF-INTEGRAW-MIB", "integraWtxMcastFrames"), ("SAF-INTEGRAW-MIB", "integraWtxUrunErrors"), ("SAF-INTEGRAW-MIB", "integraWtxCntrlFrames"), ("SAF-INTEGRAW-MIB", "integraWtxVlanFrames"), ("SAF-INTEGRAW-MIB", "integraWtxPauseFrames"), ("SAF-INTEGRAW-MIB", "integraWtxSingleCollisions"), ("SAF-INTEGRAW-MIB", "integraWtxMultiCollisions"), ("SAF-INTEGRAW-MIB", "integraWtxDeferred"), ("SAF-INTEGRAW-MIB", "integraWtxLateCollisions"), ("SAF-INTEGRAW-MIB", "integraWtxExcessCollisions"), ("SAF-INTEGRAW-MIB", "integraWtxExcessDeferral"), ("SAF-INTEGRAW-MIB", "integraWtxAlignErrors"), ("SAF-INTEGRAW-MIB", "integraWtxCarrierErrors"), ("SAF-INTEGRAW-MIB", "integraWtxCollisions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraWEthernetMiiPortGroup = integraWEthernetMiiPortGroup.setStatus('current')
if mibBuilder.loadTexts: integraWEthernetMiiPortGroup.setDescription('A collection of objects, providing info applicable \n               only to MII group interfaces.')
mibBuilder.exportSymbols("SAF-INTEGRAW-MIB", integraWifPortStatIndex=integraWifPortStatIndex, integraWCompliances=integraWCompliances, integraWtxVlanFrames=integraWtxVlanFrames, integraWrx512to1023Frames=integraWrx512to1023Frames, integraWGroups=integraWGroups, integraWifPortType=integraWifPortType, integraWifPortSyncEthActive=integraWifPortSyncEthActive, integraWtxExcessDeferral=integraWtxExcessDeferral, integraWsysPSUcurrent=integraWsysPSUcurrent, integraWtxCarrierErrors=integraWtxCarrierErrors, integraWrxDetected=integraWrxDetected, integraWifPortLastChange=integraWifPortLastChange, integraWradioDuplexShift=integraWradioDuplexShift, integraWradioRangeDescr=integraWradioRangeDescr, integraWifPortOperStatus=integraWifPortOperStatus, integraWtx65to127Frames=integraWtx65to127Frames, integraWradioSide=integraWradioSide, integraWtxFifoErr=integraWtxFifoErr, integraWrxOsizeFrames=integraWrxOsizeFrames, integraWifPortStatDescr=integraWifPortStatDescr, integraWmodemSyncLoss=integraWmodemSyncLoss, integraWifPortAutoneg=integraWifPortAutoneg, integraWnetCfgIPgateway=integraWnetCfgIPgateway, integraWrxFifoErr=integraWrxFifoErr, integraWradioRxFrequency=integraWradioRxFrequency, integraWrxFrameErrors=integraWrxFrameErrors, integraWtxAlignErrors=integraWtxAlignErrors, integraWifPortMtu=integraWifPortMtu, integraWMiscGroup=integraWMiscGroup, integraWifPortDuplex=integraWifPortDuplex, integraWrxCRCErrors=integraWrxCRCErrors, integraWtxPauseFrames=integraWtxPauseFrames, integraWrx65to127Frames=integraWrx65to127Frames, integraWifStatusTable=integraWifStatusTable, integraWtxDetected=integraWtxDetected, integraWtxBcastFrames=integraWtxBcastFrames, integraWrx128to255Frames=integraWrx128to255Frames, integraWtxMultiCollisions=integraWtxMultiCollisions, integraWifPortPhysAddress=integraWifPortPhysAddress, integraWtx256to511Frames=integraWtx256to511Frames, integraWifPortSpeed=integraWifPortSpeed, integraWtxBytes=integraWtxBytes, integraWradio=integraWradio, integraWmodemAcmEngine=integraWmodemAcmEngine, integraWtxOsizeFrames=integraWtxOsizeFrames, integraWCompliance=integraWCompliance, integraWrxPauseFrames=integraWrxPauseFrames, integraWethernet=integraWethernet, integraWEthernetGeneralGroup=integraWEthernetGeneralGroup, integraWtxErrors=integraWtxErrors, integraWsysCPUidle=integraWsysCPUidle, integraWtxCollisions=integraWtxCollisions, integraWrxOpErrors=integraWrxOpErrors, integraWradioRangesTable=integraWradioRangesTable, integraWsysPSUpower=integraWsysPSUpower, integraWRadioGroup=integraWRadioGroup, integraWrxVlanFrames=integraWrxVlanFrames, integraWmodemModulation=integraWmodemModulation, integraWradioTxMute=integraWradioTxMute, integraWsysPSUvoltage=integraWsysPSUvoltage, integraWtxUsizeFrames=integraWtxUsizeFrames, integraWifPortStcDescr=integraWifPortStcDescr, integraWradioRangeEntryIndex=integraWradioRangeEntryIndex, integraWsysLicenseGenStatus=integraWsysLicenseGenStatus, integraWmodemTxModulation=integraWmodemTxModulation, integraWifStatisticsTable=integraWifStatisticsTable, integraWstoreConfig=integraWstoreConfig, integraWsysBoardTemperature=integraWsysBoardTemperature, integraWsystem=integraWsystem, integraWtxMcastFrames=integraWtxMcastFrames, integraWifPortFlowControl=integraWifPortFlowControl, integraWtx512to1023Frames=integraWtx512to1023Frames, integraWradioRangeEntry=integraWradioRangeEntry, integraWrxLenErrors=integraWrxLenErrors, integraWneedStore=integraWneedStore, integraWmodemAcquireStatus=integraWmodemAcquireStatus, integraWradioRangeTxPower=integraWradioRangeTxPower, integraWtxCntrlFrames=integraWtxCntrlFrames, integraWnetCfgRemoteIPaddress=integraWnetCfgRemoteIPaddress, integraWifPortEntry=integraWifPortEntry, integraWifPortSyncEthPrio=integraWifPortSyncEthPrio, integraWrxBcastFrames=integraWrxBcastFrames, integraWnetCfgIPmask=integraWnetCfgIPmask, integraWrxUsizeFrames=integraWrxUsizeFrames, integraWSystemGroup=integraWSystemGroup, integraWsysLicenseExpire=integraWsysLicenseExpire, integraWifPortAdminStatus=integraWifPortAdminStatus, integraWModemGroup=integraWModemGroup, integraWmodemTxCapacity=integraWmodemTxCapacity, integraWexecuteConfig=integraWexecuteConfig, integraWmodemMse=integraWmodemMse, integraWradioRxLevel=integraWradioRxLevel, integraWmodemFecLoad=integraWmodemFecLoad, integraWrx64Frames=integraWrx64Frames, integraWrx1024toMaxFrames=integraWrx1024toMaxFrames, integraWtxExcessCollisions=integraWtxExcessCollisions, integraWrxGoodFrames=integraWrxGoodFrames, integraWifPortStcEntry=integraWifPortStcEntry, integraWrxMcastFrames=integraWrxMcastFrames, integraWradioRxLevelState=integraWradioRxLevelState, integraWmodemRxModulation=integraWmodemRxModulation, integraWtxDropped=integraWtxDropped, PYSNMP_MODULE_ID=integraW, integraWtxGoodFrames=integraWtxGoodFrames, integraWnetCfgIPaddress=integraWnetCfgIPaddress, integraWtx1024toMaxFrames=integraWtx1024toMaxFrames, integraWradioTxPower=integraWradioTxPower, integraWtxSingleCollisions=integraWtxSingleCollisions, integraWtxLateCollisions=integraWtxLateCollisions, integraWsysFreeMemory=integraWsysFreeMemory, integraWrxBytes=integraWrxBytes, integraWtx64Frames=integraWtx64Frames, integraWConformance=integraWConformance, integraWradioTxMuteDuration=integraWradioTxMuteDuration, integraWmodemSignalQuality=integraWmodemSignalQuality, integraWnetCfg=integraWnetCfg, integraWtimestamp=integraWtimestamp, integraWmodemBandwidth=integraWmodemBandwidth, integraWsysCPUtemperature=integraWsysCPUtemperature, integraWmodemRxCapacity=integraWmodemRxCapacity, integraWradioRangeTxFrequency=integraWradioRangeTxFrequency, integraWradioTemperature=integraWradioTemperature, integraWifTimePassed=integraWifTimePassed, integraWEthernetMiiPortGroup=integraWEthernetMiiPortGroup, integraWrxErrors=integraWrxErrors, integraWrxCntrlFrames=integraWrxCntrlFrames, integraW=integraW, integraWmodem=integraWmodem, integraWtxDeferred=integraWtxDeferred, integraWradioPLL=integraWradioPLL, integraWrxDropped=integraWrxDropped, integraWifPortStcIndex=integraWifPortStcIndex, integraWradioTxFrequency=integraWradioTxFrequency, integraWtxUrunErrors=integraWtxUrunErrors, integraWrx256to511Frames=integraWrx256to511Frames, integraWtx128to255Frames=integraWtx128to255Frames)
