#
# PySNMP MIB module ROOMALERT11E-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/avtech/ROOMALERT11E-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:36:35 2024
# On host fv-az973-242 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, enterprises, ModuleIdentity, MibIdentifier, Counter64, TimeTicks, Gauge32, iso, Unsigned32, ObjectIdentity, Counter32, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "enterprises", "ModuleIdentity", "MibIdentifier", "Counter64", "TimeTicks", "Gauge32", "iso", "Unsigned32", "ObjectIdentity", "Counter32", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
avtech = MibIdentifier((1, 3, 6, 1, 4, 1, 20916))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1))
roomalert11E = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 3))
sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 3, 2))
thresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3))
channel1 = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1))
channel2 = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 2))
channel3 = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 3))
channel4 = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 4))
channels = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1))
channels1 = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 1))
channels2 = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 2))
channels3 = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 3))
channels4 = MibIdentifier((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 4))
sensor1_1 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("sensor1-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor1_1.setStatus('mandatory')
if mibBuilder.loadTexts: sensor1_1.setDescription('The reading for internal switch sensor 1 (0 = OPEN, 1 = CLOSED).')
sensor1_2 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("sensor1-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor1_2.setStatus('mandatory')
if mibBuilder.loadTexts: sensor1_2.setDescription('The reading for internal switch sensor 2 (0 = OPEN, 1 = CLOSED).')
sensor1_3 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("sensor1-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor1_3.setStatus('mandatory')
if mibBuilder.loadTexts: sensor1_3.setDescription('The reading for internal switch sensor 3 (0 = OPEN, 1 = CLOSED).')
sensor1_4 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("sensor1-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor1_4.setStatus('mandatory')
if mibBuilder.loadTexts: sensor1_4.setDescription('The reading for internal switch sensor 4 (0 = OPEN, 1 = CLOSED).')
sensor1_5 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("sensor1-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor1_5.setStatus('mandatory')
if mibBuilder.loadTexts: sensor1_5.setDescription('The reading for internal switch sensor 5 (0 = OPEN, 1 = CLOSED).')
sensor1_6 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("sensor1-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor1_6.setStatus('mandatory')
if mibBuilder.loadTexts: sensor1_6.setDescription('The reading for internal switch sensor 6 (0 = OPEN, 1 = CLOSED).')
sensor1_7 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("sensor1-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor1_7.setStatus('mandatory')
if mibBuilder.loadTexts: sensor1_7.setDescription('The reading for internal switch sensor 7 (0 = OPEN, 1 = CLOSED).')
sensor1_8 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("sensor1-8").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor1_8.setStatus('mandatory')
if mibBuilder.loadTexts: sensor1_8.setDescription('The reading for internal switch sensor 8 (0 = OPEN, 1 = CLOSED).')
switch_label_1 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 9), OctetString()).setLabel("switch-label-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: switch_label_1.setStatus('mandatory')
if mibBuilder.loadTexts: switch_label_1.setDescription('The label for switch sensor 1')
switch_label_2 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 10), OctetString()).setLabel("switch-label-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: switch_label_2.setStatus('mandatory')
if mibBuilder.loadTexts: switch_label_2.setDescription('The label for switch sensor 2')
switch_label_3 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 11), OctetString()).setLabel("switch-label-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: switch_label_3.setStatus('mandatory')
if mibBuilder.loadTexts: switch_label_3.setDescription('The label for switch sensor 3')
switch_label_4 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 12), OctetString()).setLabel("switch-label-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: switch_label_4.setStatus('mandatory')
if mibBuilder.loadTexts: switch_label_4.setDescription('The label for switch sensor 4')
switch_label_5 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 13), OctetString()).setLabel("switch-label-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: switch_label_5.setStatus('mandatory')
if mibBuilder.loadTexts: switch_label_5.setDescription('The label for switch sensor 5')
switch_label_6 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 14), OctetString()).setLabel("switch-label-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: switch_label_6.setStatus('mandatory')
if mibBuilder.loadTexts: switch_label_6.setDescription('The label for switch sensor 6')
switch_label_7 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 15), OctetString()).setLabel("switch-label-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: switch_label_7.setStatus('mandatory')
if mibBuilder.loadTexts: switch_label_7.setDescription('The label for switch sensor 7')
switch_label_8 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 1, 16), OctetString()).setLabel("switch-label-8").setMaxAccess("readonly")
if mibBuilder.loadTexts: switch_label_8.setStatus('mandatory')
if mibBuilder.loadTexts: switch_label_8.setDescription('The label for switch sensor 8')
sensor2_1 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor2-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor2_1.setStatus('mandatory')
if mibBuilder.loadTexts: sensor2_1.setDescription('The reading for sensor 2-1. If a temp or temp/humidity sensor is connected, value will be current temperature in Celsius.')
sensor2_2 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor2-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor2_2.setStatus('mandatory')
if mibBuilder.loadTexts: sensor2_2.setDescription('The reading for sensor 2-2. If a temp or temp/humidity sensor is connected, value will be current temperature in Fahrenheit.')
sensor2_3 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor2-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor2_3.setStatus('mandatory')
if mibBuilder.loadTexts: sensor2_3.setDescription('The reading for sensor 2-3. If temp/humidity sensor is connected, value will be current %RH.')
sensor2_4 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor2-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor2_4.setStatus('mandatory')
if mibBuilder.loadTexts: sensor2_4.setDescription('The reading for sensor 2-4. If temp/humidity sensor is connected, value will be current Heat Index in Fahrenheit.')
sensor2_5 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor2-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor2_5.setStatus('mandatory')
if mibBuilder.loadTexts: sensor2_5.setDescription('The reading for sensor 2-5. If temp/humidity sensor is connected, value will be current Heat Index in Celsius.')
sensor2_6_label = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 2, 6), OctetString()).setLabel("sensor2-6-label").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor2_6_label.setStatus('mandatory')
if mibBuilder.loadTexts: sensor2_6_label.setDescription('The label of this sensor')
sensor3_1 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor3-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor3_1.setStatus('mandatory')
if mibBuilder.loadTexts: sensor3_1.setDescription('The reading for sensor 3-1. If a temp or temp/humidity sensor is connected, value will be current temperature in Celsius.')
sensor3_2 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor3-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor3_2.setStatus('mandatory')
if mibBuilder.loadTexts: sensor3_2.setDescription('The reading for sensor 3-2. If a temp or temp/humidity sensor is connected, value will be current temperature in Fahrenheit.')
sensor3_3 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor3-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor3_3.setStatus('mandatory')
if mibBuilder.loadTexts: sensor3_3.setDescription('The reading for sensor 3-3. If temp/humidity sensor is connected, value will be current %RH.')
sensor3_4 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor3-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor3_4.setStatus('mandatory')
if mibBuilder.loadTexts: sensor3_4.setDescription('The reading for sensor 3-4. If temp/humidity sensor is connected, value will be current Heat Index in Fahrenheit.')
sensor3_5 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor3-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor3_5.setStatus('mandatory')
if mibBuilder.loadTexts: sensor3_5.setDescription('The reading for sensor 3-5. If temp/humidity sensor is connected, value will be current Heat Index in Celsius.')
sensor3_6_label = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 3, 6), OctetString()).setLabel("sensor3-6-label").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor3_6_label.setStatus('mandatory')
if mibBuilder.loadTexts: sensor3_6_label.setDescription('The label of this sensor')
sensor4_1 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor4-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4_1.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4_1.setDescription('The reading for sensor 4-1. If a temp or temp/humidity sensor is connected, value will be current temperature in Celsius.')
sensor4_2 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor4-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4_2.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4_2.setDescription('The reading for sensor 4-2. If a temp or temp/humidity sensor is connected, value will be current temperature in Fahrenheit.')
sensor4_3 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor4-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4_3.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4_3.setDescription('The reading for sensor 4-3. If temp/humidity sensor is connected, value will be current %RH.')
sensor4_4 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor4-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4_4.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4_4.setDescription('The reading for sensor 4-4. If temp/humidity sensor is connected, value will be current Heat Index in Fahrenheit.')
sensor4_5 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("sensor4-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4_5.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4_5.setDescription('The reading for sensor 4-5. If temp/humidity sensor is connected, value will be current Heat Index in Celsius.')
sensor4_6_label = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 1, 4, 6), OctetString()).setLabel("sensor4-6-label").setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4_6_label.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4_6_label.setDescription('The label of this sensor')
alarm1 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarm1.setStatus('mandatory')
if mibBuilder.loadTexts: alarm1.setDescription('Alarm for sensor channel 1. The binary equivalent of the decimal number displayed will indicate which switch sensors are currently in an alarm state (0 = sensor ok, 1 = sensor in alarm state). For example, if switch sensors 1 and 4 are in alarm state, the value displayed will be 9, which equals 00001001 in binary.')
alarm2 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarm2.setStatus('mandatory')
if mibBuilder.loadTexts: alarm2.setDescription('Alarm for sensor channel 2. If a digital temperature/humidity or digital temperature sensor is connected to this channel, 0 = sensor ok, 1 = high temp alarm, 2 = low temp alarm, 3 = humidity alarm. If a Switch Sensor Expansion box is connected, the binary equivalent of the decimal number displayed will indicate which switch sensors are currently in an alarm state (0 = sensor ok, 1 = sensor in alarm state). For example, if switch sensors 1 and 4 are in alarm state, the value displayed will be 9, which equals 00001001 in binary.')
alarm3 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarm3.setStatus('mandatory')
if mibBuilder.loadTexts: alarm3.setDescription('Alarm for sensor channel 3. If a digital temperature/humidity or digital temperature sensor is connected to this channel, 0 = sensor ok, 1 = high temp alarm, 2 = low temp alarm, 3 = humidity alarm. If a Switch Sensor Expansion box is connected, the binary equivalent of the decimal number displayed will indicate which switch sensors are currently in an alarm state (0 = sensor ok, 1 = sensor in alarm state). For example, if switch sensors 1 and 4 are in alarm state, the value displayed will be 9, which equals 00001001 in binary.')
alarm4 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarm4.setStatus('mandatory')
if mibBuilder.loadTexts: alarm4.setDescription('Alarm for sensor channel 4. If a digital temperature/humidity or digital temperature sensor is connected to this channel, 0 = sensor ok, 1 = high temp alarm, 2 = low temp alarm, 3 = humidity alarm. If a Switch Sensor Expansion box is connected, the binary equivalent of the decimal number displayed will indicate which switch sensors are currently in an alarm state (0 = sensor ok, 1 = sensor in alarm state). For example, if switch sensors 1 and 4 are in alarm state, the value displayed will be 9, which equals 00001001 in binary.')
alarmMessage1 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 2, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMessage1.setStatus('mandatory')
if mibBuilder.loadTexts: alarmMessage1.setDescription('Alarm Message from sensor channel 1 (Internal)')
alarmMessage2 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 2, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMessage2.setStatus('mandatory')
if mibBuilder.loadTexts: alarmMessage2.setDescription('Alarm Message from sensor channel 2 (External)')
alarmMessage3 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 2, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMessage3.setStatus('mandatory')
if mibBuilder.loadTexts: alarmMessage3.setDescription('Alarm Message from sensor channel 3 (External)')
alarmMessage4 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 2, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMessage4.setStatus('mandatory')
if mibBuilder.loadTexts: alarmMessage4.setDescription('Alarm Message from sensor channel 4 (External)')
threshold1_1 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold1-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold1_1.setStatus('mandatory')
if mibBuilder.loadTexts: threshold1_1.setDescription('Threshold 1 defined for Channel 1')
threshold1_2 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold1-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold1_2.setStatus('mandatory')
if mibBuilder.loadTexts: threshold1_2.setDescription('Threshold 2 defined for Channel 1')
threshold1_3 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold1-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold1_3.setStatus('mandatory')
if mibBuilder.loadTexts: threshold1_3.setDescription('Threshold 3 defined for Channel 1')
threshold1_4 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold1-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold1_4.setStatus('mandatory')
if mibBuilder.loadTexts: threshold1_4.setDescription('Threshold 4 defined for Channel 1')
threshold1_5 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold1-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold1_5.setStatus('mandatory')
if mibBuilder.loadTexts: threshold1_5.setDescription('Threshold 5 defined for Channel 1')
threshold1_6 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold1-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold1_6.setStatus('mandatory')
if mibBuilder.loadTexts: threshold1_6.setDescription('Threshold 6 defined for Channel 1')
threshold1_7 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold1-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold1_7.setStatus('mandatory')
if mibBuilder.loadTexts: threshold1_7.setDescription('Threshold 7 defined for Channel 1')
threshold1_8 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold1-8").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold1_8.setStatus('mandatory')
if mibBuilder.loadTexts: threshold1_8.setDescription('Threshold 8 defined for Channel 1')
threshold2_1 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold2-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold2_1.setStatus('mandatory')
if mibBuilder.loadTexts: threshold2_1.setDescription('Threshold 1 defined for Channel 2')
threshold2_2 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold2-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold2_2.setStatus('mandatory')
if mibBuilder.loadTexts: threshold2_2.setDescription('Threshold 2 defined for Channel 2')
threshold2_3 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold2-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold2_3.setStatus('mandatory')
if mibBuilder.loadTexts: threshold2_3.setDescription('Threshold 3 defined for Channel 2')
threshold2_4 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold2-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold2_4.setStatus('mandatory')
if mibBuilder.loadTexts: threshold2_4.setDescription('Threshold 4 defined for Channel 2')
threshold3_1 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold3-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold3_1.setStatus('mandatory')
if mibBuilder.loadTexts: threshold3_1.setDescription('Threshold 1 defined for Channel 3')
threshold3_2 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold3-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold3_2.setStatus('mandatory')
if mibBuilder.loadTexts: threshold3_2.setDescription('Threshold 2 defined for Channel 3')
threshold3_3 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold3-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold3_3.setStatus('mandatory')
if mibBuilder.loadTexts: threshold3_3.setDescription('Threshold 3 defined for Channel 3')
threshold3_4 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold3-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold3_4.setStatus('mandatory')
if mibBuilder.loadTexts: threshold3_4.setDescription('Threshold 4 defined for Channel 3')
threshold4_1 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold4-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold4_1.setStatus('mandatory')
if mibBuilder.loadTexts: threshold4_1.setDescription('Threshold 1 defined for Channel 4')
threshold4_2 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold4-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold4_2.setStatus('mandatory')
if mibBuilder.loadTexts: threshold4_2.setDescription('Threshold 2 defined for Channel 4')
threshold4_3 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold4-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold4_3.setStatus('mandatory')
if mibBuilder.loadTexts: threshold4_3.setDescription('Threshold 3 defined for Channel 4')
threshold4_4 = MibScalar((1, 3, 6, 1, 4, 1, 20916, 1, 3, 3, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("threshold4-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: threshold4_4.setStatus('mandatory')
if mibBuilder.loadTexts: threshold4_4.setDescription('Threshold 4 defined for Channel 4')
tempAlarm1_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,1)).setLabel("tempAlarm1-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage2"), ("ROOMALERT11E-MIB", "sensor2_1"), ("ROOMALERT11E-MIB", "sensor2_2"), ("ROOMALERT11E-MIB", "sensor2_1"))
if mibBuilder.loadTexts: tempAlarm1_11e.setDescription('A tempAlarm1 trap signifies that the current\n\t\t\ttemperature on external sensor 1 is outside the \n\t\t\tdefined high or low threshold.')
room_alert_11E_SNMP_trap = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,2)).setLabel("room-alert-11E-SNMP-trap").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "alarmMessage2"), ("ROOMALERT11E-MIB", "alarmMessage3"), ("ROOMALERT11E-MIB", "alarmMessage4"))
if mibBuilder.loadTexts: room_alert_11E_SNMP_trap.setDescription('A Room Alert 11E SNMP Trap indicates that an alarm\n\t\t\tcondition has occurred on the sensor inidcated\n\t\t\tby the alarmMessage variable.')
tempAlarm2_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,3)).setLabel("tempAlarm2-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage3"), ("ROOMALERT11E-MIB", "sensor3_1"), ("ROOMALERT11E-MIB", "sensor3_2"), ("ROOMALERT11E-MIB", "sensor3_1"))
if mibBuilder.loadTexts: tempAlarm2_11e.setDescription('A tempAlarm2 trap signifies that the current\n\t\t\ttemperature on external sensor 2 is outside the \n\t\t\tdefined high or low threshold.')
tempClear2_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,4)).setLabel("tempClear2-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage3"), ("ROOMALERT11E-MIB", "sensor3_1"), ("ROOMALERT11E-MIB", "sensor3_2"), ("ROOMALERT11E-MIB", "sensor3_1"))
if mibBuilder.loadTexts: tempClear2_11e.setDescription('A tempClear2 trap signifies that the current\n\t\t\ttemperature on external sensor 2 has returned to\n\t\t\ta normal condition and is within the defined \n\t\t\thigh or low threshold.')
tempAlarm3_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,5)).setLabel("tempAlarm3-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage4"), ("ROOMALERT11E-MIB", "sensor4_1"), ("ROOMALERT11E-MIB", "sensor4_2"), ("ROOMALERT11E-MIB", "sensor4_1"))
if mibBuilder.loadTexts: tempAlarm3_11e.setDescription('A tempAlarm3 trap signifies that the current\n\t\t\ttemperature on external sensor 3 is outside the \n\t\t\tdefined high or low threshold.')
tempClear3_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,6)).setLabel("tempClear3-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage4"), ("ROOMALERT11E-MIB", "sensor4_1"), ("ROOMALERT11E-MIB", "sensor4_2"), ("ROOMALERT11E-MIB", "sensor4_1"))
if mibBuilder.loadTexts: tempClear3_11e.setDescription('A tempClear3 trap signifies that the current\n\t\t\ttemperature on external sensor 3 has returned to\n\t\t\ta normal condition and is within the defined \n\t\t\thigh or low threshold.')
humidityAlarm1_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,7)).setLabel("humidityAlarm1-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage2"), ("ROOMALERT11E-MIB", "sensor2_1"), ("ROOMALERT11E-MIB", "sensor2_2"), ("ROOMALERT11E-MIB", "sensor2_3"))
if mibBuilder.loadTexts: humidityAlarm1_11e.setDescription('A humidityAlarm1 trap signifies that the current\n\t\t\thumidity on external sensor 1 is outside the \n\t\t\tdefined high or low threshold.')
humidityClear1_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,8)).setLabel("humidityClear1-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage2"), ("ROOMALERT11E-MIB", "sensor2_1"), ("ROOMALERT11E-MIB", "sensor2_2"), ("ROOMALERT11E-MIB", "sensor2_3"))
if mibBuilder.loadTexts: humidityClear1_11e.setDescription('A humidityClear1 trap signifies that the current\n\t\t\thumidity on external sensor 1 has returned to\n\t\t\ta normal condition and is within the defined \n\t\t\thigh or low threshold.')
humidityAlarm2_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,9)).setLabel("humidityAlarm2-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage3"), ("ROOMALERT11E-MIB", "sensor3_1"), ("ROOMALERT11E-MIB", "sensor3_2"), ("ROOMALERT11E-MIB", "sensor3_3"))
if mibBuilder.loadTexts: humidityAlarm2_11e.setDescription('A humidityAlarm2 trap signifies that the current\n\t\t\thumidity on external sensor 2 is outside the \n\t\t\tdefined high or low threshold.')
humidityClear2_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,10)).setLabel("humidityClear2-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage3"), ("ROOMALERT11E-MIB", "sensor3_1"), ("ROOMALERT11E-MIB", "sensor3_2"), ("ROOMALERT11E-MIB", "sensor3_3"))
if mibBuilder.loadTexts: humidityClear2_11e.setDescription('A humidityClear2 trap signifies that the current\n\t\t\thumidity on external sensor 2 has returned to\n\t\t\ta normal condition and is within the defined \n\t\t\thigh or low threshold.')
humidityAlarm3_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,11)).setLabel("humidityAlarm3-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage4"), ("ROOMALERT11E-MIB", "sensor4_1"), ("ROOMALERT11E-MIB", "sensor4_2"), ("ROOMALERT11E-MIB", "sensor4_3"))
if mibBuilder.loadTexts: humidityAlarm3_11e.setDescription('A humidityAlarm3 trap signifies that the current\n\t\t\thumidity on external sensor 3 is outside the \n\t\t\tdefined high or low threshold.')
humidityClear3_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,12)).setLabel("humidityClear3-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage4"), ("ROOMALERT11E-MIB", "sensor4_1"), ("ROOMALERT11E-MIB", "sensor4_2"), ("ROOMALERT11E-MIB", "sensor4_3"))
if mibBuilder.loadTexts: humidityClear3_11e.setDescription('A humidityClear3 trap signifies that the current\n\t\t\thumidity on external sensor 3 has returned to\n\t\t\ta normal condition and is within the defined \n\t\t\thigh or low threshold.')
switchAlarm1_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,13)).setLabel("switchAlarm1-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_1"), ("ROOMALERT11E-MIB", "sensor1_1"), ("ROOMALERT11E-MIB", "sensor1_1"))
if mibBuilder.loadTexts: switchAlarm1_11e.setDescription('A switchAlarm1 trap signifies that switch sensor 1\n\t\t\tis in an alarm state.')
switchClear1_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,14)).setLabel("switchClear1-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_1"), ("ROOMALERT11E-MIB", "sensor1_1"), ("ROOMALERT11E-MIB", "sensor1_1"))
if mibBuilder.loadTexts: switchClear1_11e.setDescription('A switchClear1 trap signifies that the switch sensor 1\n\t\t\thas returned to a normal state.')
switchAlarm2_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,15)).setLabel("switchAlarm2-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_2"), ("ROOMALERT11E-MIB", "sensor1_2"), ("ROOMALERT11E-MIB", "sensor1_2"))
if mibBuilder.loadTexts: switchAlarm2_11e.setDescription('A switchAlarm2 trap signifies that switch sensor 2\n\t\t\tis in an alarm state.')
switchClear2_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,16)).setLabel("switchClear2-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_2"), ("ROOMALERT11E-MIB", "sensor1_2"), ("ROOMALERT11E-MIB", "sensor1_2"))
if mibBuilder.loadTexts: switchClear2_11e.setDescription('A switchClear2 trap signifies that the switch sensor 2\n\t\t\thas returned to a normal state.')
switchAlarm3_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,17)).setLabel("switchAlarm3-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_3"), ("ROOMALERT11E-MIB", "sensor1_3"), ("ROOMALERT11E-MIB", "sensor1_3"))
if mibBuilder.loadTexts: switchAlarm3_11e.setDescription('A switchAlarm1 trap signifies that switch sensor 1\n\t\t\tis in an alarm state.')
switchClear3_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,18)).setLabel("switchClear3-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_3"), ("ROOMALERT11E-MIB", "sensor1_3"), ("ROOMALERT11E-MIB", "sensor1_3"))
if mibBuilder.loadTexts: switchClear3_11e.setDescription('A switchClear3 trap signifies that the switch sensor 3\n\t\t\thas returned to a normal state.')
switchAlarm4_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,19)).setLabel("switchAlarm4-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_4"), ("ROOMALERT11E-MIB", "sensor1_4"), ("ROOMALERT11E-MIB", "sensor1_4"))
if mibBuilder.loadTexts: switchAlarm4_11e.setDescription('A switchAlarm4 trap signifies that switch sensor 4\n\t\t\tis in an alarm state.')
switchClear4_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,20)).setLabel("switchClear4-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_4"), ("ROOMALERT11E-MIB", "sensor1_4"), ("ROOMALERT11E-MIB", "sensor1_4"))
if mibBuilder.loadTexts: switchClear4_11e.setDescription('A switchClear4 trap signifies that the switch sensor 4\n\t\t\thas returned to a normal state.')
switchAlarm5_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,21)).setLabel("switchAlarm5-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_5"), ("ROOMALERT11E-MIB", "sensor1_5"), ("ROOMALERT11E-MIB", "sensor1_5"))
if mibBuilder.loadTexts: switchAlarm5_11e.setDescription('A switchAlarm5 trap signifies that switch sensor 5\n\t\t\tis in an alarm state.')
switchClear5_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,22)).setLabel("switchClear5-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_5"), ("ROOMALERT11E-MIB", "sensor1_5"), ("ROOMALERT11E-MIB", "sensor1_5"))
if mibBuilder.loadTexts: switchClear5_11e.setDescription('A switchClear5 trap signifies that the switch sensor 5\n\t\t\thas returned to a normal state.')
switchAlarm6_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,23)).setLabel("switchAlarm6-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_6"), ("ROOMALERT11E-MIB", "sensor1_6"), ("ROOMALERT11E-MIB", "sensor1_6"))
if mibBuilder.loadTexts: switchAlarm6_11e.setDescription('A switchAlarm6 trap signifies that switch sensor 6\n\t\t\tis in an alarm state.')
switchClear6_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,24)).setLabel("switchClear6-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_6"), ("ROOMALERT11E-MIB", "sensor1_6"), ("ROOMALERT11E-MIB", "sensor1_6"))
if mibBuilder.loadTexts: switchClear6_11e.setDescription('A switchClear6 trap signifies that the switch sensor 6\n\t\t\thas returned to a normal state.')
switchAlarm7_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,25)).setLabel("switchAlarm7-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_7"), ("ROOMALERT11E-MIB", "sensor1_7"), ("ROOMALERT11E-MIB", "sensor1_7"))
if mibBuilder.loadTexts: switchAlarm7_11e.setDescription('A switchAlarm7 trap signifies that switch sensor 7\n\t\t\tis in an alarm state.')
switchClear7_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,26)).setLabel("switchClear7-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_7"), ("ROOMALERT11E-MIB", "sensor1_7"), ("ROOMALERT11E-MIB", "sensor1_7"))
if mibBuilder.loadTexts: switchClear7_11e.setDescription('A switchClear7 trap signifies that the switch sensor 7\n\t\t\thas returned to a normal state.')
switchAlarm8_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,27)).setLabel("switchAlarm8-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_8"), ("ROOMALERT11E-MIB", "sensor1_8"), ("ROOMALERT11E-MIB", "sensor1_8"))
if mibBuilder.loadTexts: switchAlarm8_11e.setDescription('A switchAlarm8 trap signifies that switch sensor 8\n\t\t\tis in an alarm state.')
switchClear8_11e = NotificationType((1, 3, 6, 1, 4, 1, 20916, 1, 3) + (0,28)).setLabel("switchClear8-11e").setObjects(("ROOMALERT11E-MIB", "alarmMessage1"), ("ROOMALERT11E-MIB", "sensor1_8"), ("ROOMALERT11E-MIB", "sensor1_8"), ("ROOMALERT11E-MIB", "sensor1_8"))
if mibBuilder.loadTexts: switchClear8_11e.setDescription('A switchClear8 trap signifies that the switch sensor 8\n\t\t\thas returned to a normal state.')
mibBuilder.exportSymbols("ROOMALERT11E-MIB", switchClear8_11e=switchClear8_11e, channel4=channel4, sensor1_2=sensor1_2, threshold3_4=threshold3_4, humidityAlarm3_11e=humidityAlarm3_11e, switchAlarm4_11e=switchAlarm4_11e, sensor1_1=sensor1_1, switchAlarm8_11e=switchAlarm8_11e, switchAlarm7_11e=switchAlarm7_11e, products=products, threshold3_3=threshold3_3, threshold3_2=threshold3_2, threshold2_1=threshold2_1, humidityClear1_11e=humidityClear1_11e, switchAlarm5_11e=switchAlarm5_11e, switch_label_3=switch_label_3, switchClear6_11e=switchClear6_11e, sensor4_5=sensor4_5, sensor2_3=sensor2_3, sensor3_6_label=sensor3_6_label, switchAlarm1_11e=switchAlarm1_11e, sensor4_4=sensor4_4, alarmMessage1=alarmMessage1, sensor2_2=sensor2_2, sensors=sensors, tempAlarm3_11e=tempAlarm3_11e, switch_label_8=switch_label_8, switch_label_4=switch_label_4, sensor1_3=sensor1_3, threshold1_1=threshold1_1, threshold4_2=threshold4_2, tempClear3_11e=tempClear3_11e, humidityClear3_11e=humidityClear3_11e, sensor2_1=sensor2_1, threshold4_1=threshold4_1, sensor1_4=sensor1_4, threshold2_3=threshold2_3, alarm1=alarm1, sensor4_3=sensor4_3, tempAlarm2_11e=tempAlarm2_11e, alarmMessage4=alarmMessage4, tempAlarm1_11e=tempAlarm1_11e, switchClear1_11e=switchClear1_11e, threshold1_8=threshold1_8, channels3=channels3, sensor2_5=sensor2_5, sensor3_4=sensor3_4, switch_label_2=switch_label_2, switch_label_1=switch_label_1, sensor3_1=sensor3_1, threshold1_7=threshold1_7, channels4=channels4, alarm4=alarm4, avtech=avtech, switchClear3_11e=switchClear3_11e, alarmMessage2=alarmMessage2, switchClear4_11e=switchClear4_11e, sensor3_5=sensor3_5, threshold4_3=threshold4_3, sensor4_1=sensor4_1, alarmMessage3=alarmMessage3, tempClear2_11e=tempClear2_11e, sensor2_4=sensor2_4, channels1=channels1, humidityAlarm2_11e=humidityAlarm2_11e, channels=channels, sensor1_7=sensor1_7, switch_label_5=switch_label_5, channels2=channels2, threshold1_5=threshold1_5, sensor1_5=sensor1_5, threshold1_6=threshold1_6, roomalert11E=roomalert11E, channel1=channel1, room_alert_11E_SNMP_trap=room_alert_11E_SNMP_trap, switchClear2_11e=switchClear2_11e, humidityClear2_11e=humidityClear2_11e, sensor2_6_label=sensor2_6_label, switchAlarm2_11e=switchAlarm2_11e, threshold3_1=threshold3_1, threshold2_4=threshold2_4, threshold2_2=threshold2_2, sensor3_3=sensor3_3, switch_label_6=switch_label_6, switchClear5_11e=switchClear5_11e, channel3=channel3, alarm3=alarm3, sensor4_6_label=sensor4_6_label, switchAlarm3_11e=switchAlarm3_11e, channel2=channel2, traps=traps, threshold1_3=threshold1_3, switchAlarm6_11e=switchAlarm6_11e, sensor1_6=sensor1_6, threshold1_4=threshold1_4, switchClear7_11e=switchClear7_11e, sensor1_8=sensor1_8, threshold1_2=threshold1_2, sensor4_2=sensor4_2, threshold4_4=threshold4_4, thresholds=thresholds, alarm2=alarm2, switch_label_7=switch_label_7, sensor3_2=sensor3_2, humidityAlarm1_11e=humidityAlarm1_11e)
