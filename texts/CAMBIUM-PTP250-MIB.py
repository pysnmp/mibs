#
# PySNMP MIB module CAMBIUM-PTP250-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cambium/CAMBIUM-PTP250-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:05:25 2024
# On host fv-az883-299 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, iso, NotificationType, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, ModuleIdentity, enterprises, Counter32, Unsigned32, IpAddress, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "NotificationType", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "ModuleIdentity", "enterprises", "Counter32", "Unsigned32", "IpAddress", "Gauge32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cambium = ModuleIdentity((1, 3, 6, 1, 4, 1, 17713))
cambium.setRevisions(('2012-12-07 09:35', '2011-10-18 10:47',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cambium.setRevisionsDescriptions(('PTP250-02-13: \n      \tsNMPTrapVersion moved into the sNMPTrapTable.', 'PTP250-02-00',))
if mibBuilder.loadTexts: cambium.setLastUpdated('201212070935Z')
if mibBuilder.loadTexts: cambium.setOrganization('Cambium Networks')
if mibBuilder.loadTexts: cambium.setContactInfo('Post:   Bill Jones\n                 Cambium Networks Ltd.\n                 Unit B2,\n                 Linhay Business Park,\n                 Eastern Road,\n                 Ashburton,\n                 Devon.\n                 TQ13 7UP\n                 United Kingdom\n         Phone:  +44 (0) 1364 655 500\n         Email:  bill.jones@cambiumnetworks.com')
if mibBuilder.loadTexts: cambium.setDescription('MIB for PTP250')
ptp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1))
ptmp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 2))
ptp250 = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250, 1))
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250, 2))
licence = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250, 3))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250, 4))
phyStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250, 5))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250, 6))
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250, 7))
snmpControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250, 8))
ntp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250, 9))
versions = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250, 10))
pubStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250, 11))
ptpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250, 98))
ptpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250, 99))
ptpTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 250, 99, 0))
ptpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 17713, 250, 97)).setObjects(("CAMBIUM-PTP250-MIB", "configurationGroup"), ("CAMBIUM-PTP250-MIB", "ethernetGroup"), ("CAMBIUM-PTP250-MIB", "licenceGroup"), ("CAMBIUM-PTP250-MIB", "managementGroup"), ("CAMBIUM-PTP250-MIB", "phyStatusGroup"), ("CAMBIUM-PTP250-MIB", "alarmsGroup"), ("CAMBIUM-PTP250-MIB", "smtpGroup"), ("CAMBIUM-PTP250-MIB", "snmpControlGroup"), ("CAMBIUM-PTP250-MIB", "ntpGroup"), ("CAMBIUM-PTP250-MIB", "versionsGroup"), ("CAMBIUM-PTP250-MIB", "pubStatsGroup"), ("CAMBIUM-PTP250-MIB", "notificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ptpCompliance = ptpCompliance.setStatus('current')
if mibBuilder.loadTexts: ptpCompliance.setDescription('The compliance statement for the Cambium Networks PTP MIB')
configurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 250, 98, 5)).setObjects(("CAMBIUM-PTP250-MIB", "iPAddress"), ("CAMBIUM-PTP250-MIB", "subnetMask"), ("CAMBIUM-PTP250-MIB", "gatewayIPAddress"), ("CAMBIUM-PTP250-MIB", "masterSlaveMode"), ("CAMBIUM-PTP250-MIB", "maximumTransmitPower"), ("CAMBIUM-PTP250-MIB", "antennaGain"), ("CAMBIUM-PTP250-MIB", "cableLoss"), ("CAMBIUM-PTP250-MIB", "channelBandwidth"), ("CAMBIUM-PTP250-MIB", "remoteIPAddress"), ("CAMBIUM-PTP250-MIB", "remoteMACAddress"), ("CAMBIUM-PTP250-MIB", "linkName"), ("CAMBIUM-PTP250-MIB", "siteName"), ("CAMBIUM-PTP250-MIB", "band"), ("CAMBIUM-PTP250-MIB", "configuredModulationMode"), ("CAMBIUM-PTP250-MIB", "configuredRange"), ("CAMBIUM-PTP250-MIB", "channelSelection"), ("CAMBIUM-PTP250-MIB", "vlanTagging"), ("CAMBIUM-PTP250-MIB", "vlanId"), ("CAMBIUM-PTP250-MIB", "vlanPriority"), ("CAMBIUM-PTP250-MIB", "fixedModMode"), ("CAMBIUM-PTP250-MIB", "dualPayload"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configurationGroup = configurationGroup.setStatus('current')
if mibBuilder.loadTexts: configurationGroup.setDescription('The configuration object group.')
ethernetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 250, 98, 6)).setObjects(("CAMBIUM-PTP250-MIB", "dataPortAutoNegotiation"), ("CAMBIUM-PTP250-MIB", "dataPortAutoNegAdvertisement"), ("CAMBIUM-PTP250-MIB", "dataPortStatus"), ("CAMBIUM-PTP250-MIB", "dataPortSpeedAndDuplex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetGroup = ethernetGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetGroup.setDescription('The ethernet object group.')
licenceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 250, 98, 8)).setObjects(("CAMBIUM-PTP250-MIB", "regionCode"), ("CAMBIUM-PTP250-MIB", "productVariant"), ("CAMBIUM-PTP250-MIB", "productName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    licenceGroup = licenceGroup.setStatus('current')
if mibBuilder.loadTexts: licenceGroup.setDescription('The licence object group.')
managementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 250, 98, 9)).setObjects(("CAMBIUM-PTP250-MIB", "installArmState"), ("CAMBIUM-PTP250-MIB", "tFTPServerIPAddress"), ("CAMBIUM-PTP250-MIB", "tFTPServerPortNumber"), ("CAMBIUM-PTP250-MIB", "tFTPSoftwareUpgradeFileName"), ("CAMBIUM-PTP250-MIB", "tFTPSoftwareUpgradeStatus"), ("CAMBIUM-PTP250-MIB", "tFTPSoftwareUpgradeStatusText"), ("CAMBIUM-PTP250-MIB", "tFTPSoftwareUpgradeStatusAdditionalText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    managementGroup = managementGroup.setStatus('current')
if mibBuilder.loadTexts: managementGroup.setDescription('The management object group.')
phyStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 250, 98, 12)).setObjects(("CAMBIUM-PTP250-MIB", "receivePower"), ("CAMBIUM-PTP250-MIB", "vectorError"), ("CAMBIUM-PTP250-MIB", "transmitPower"), ("CAMBIUM-PTP250-MIB", "linkLoss"), ("CAMBIUM-PTP250-MIB", "currentChannel"), ("CAMBIUM-PTP250-MIB", "extendedChannel"), ("CAMBIUM-PTP250-MIB", "receiveModulationMode"), ("CAMBIUM-PTP250-MIB", "transmitModulationMode"), ("CAMBIUM-PTP250-MIB", "currentFreqMHz"), ("CAMBIUM-PTP250-MIB", "extendedFreqMHz"), ("CAMBIUM-PTP250-MIB", "signalStrengthRatio"), ("CAMBIUM-PTP250-MIB", "searchState"), ("CAMBIUM-PTP250-MIB", "noiseFloor"), ("CAMBIUM-PTP250-MIB", "radarDetectChannel"), ("CAMBIUM-PTP250-MIB", "measuredRange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyStatusGroup = phyStatusGroup.setStatus('current')
if mibBuilder.loadTexts: phyStatusGroup.setDescription('The phyStatus object group.')
alarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 250, 98, 13)).setObjects(("CAMBIUM-PTP250-MIB", "noWirelessChannelAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmsGroup = alarmsGroup.setStatus('current')
if mibBuilder.loadTexts: alarmsGroup.setDescription('The alarms object group.')
smtpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 250, 98, 15)).setObjects(("CAMBIUM-PTP250-MIB", "sMTPServerIPAddress"), ("CAMBIUM-PTP250-MIB", "sMTPServerPortNumber"), ("CAMBIUM-PTP250-MIB", "sMTPSourceEmailAddress"), ("CAMBIUM-PTP250-MIB", "sMTPDestinationEmailAddress"), ("CAMBIUM-PTP250-MIB", "sMTPEnabledMessages"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smtpGroup = smtpGroup.setStatus('current')
if mibBuilder.loadTexts: smtpGroup.setDescription('The smtp object group.')
snmpControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 250, 98, 16)).setObjects(("CAMBIUM-PTP250-MIB", "sNMPCommunityTableNumber"), ("CAMBIUM-PTP250-MIB", "sNMPTrapTableNumber"), ("CAMBIUM-PTP250-MIB", "sNMPEnabledTraps"), ("CAMBIUM-PTP250-MIB", "sNMPTrapIPAddress"), ("CAMBIUM-PTP250-MIB", "sNMPTrapPortNumber"), ("CAMBIUM-PTP250-MIB", "sNMPCommunityString"), ("CAMBIUM-PTP250-MIB", "sNMPCommunityAccess"), ("CAMBIUM-PTP250-MIB", "sNMPCommunityOid"), ("CAMBIUM-PTP250-MIB", "sNMPTrapCommunity"), ("CAMBIUM-PTP250-MIB", "sNMPTrapVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpControlGroup = snmpControlGroup.setStatus('current')
if mibBuilder.loadTexts: snmpControlGroup.setDescription('The snmpControl object group.')
ntpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 250, 98, 17)).setObjects(("CAMBIUM-PTP250-MIB", "nTPState"), ("CAMBIUM-PTP250-MIB", "nTPPollInterval"), ("CAMBIUM-PTP250-MIB", "nTPSync"), ("CAMBIUM-PTP250-MIB", "nTPLastSync"), ("CAMBIUM-PTP250-MIB", "systemClock"), ("CAMBIUM-PTP250-MIB", "timeZone"), ("CAMBIUM-PTP250-MIB", "nTPServerIp"), ("CAMBIUM-PTP250-MIB", "nTPServerPortNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpGroup = ntpGroup.setStatus('current')
if mibBuilder.loadTexts: ntpGroup.setDescription('The ntp object group.')
versionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 250, 98, 19)).setObjects(("CAMBIUM-PTP250-MIB", "softwareVersion"), ("CAMBIUM-PTP250-MIB", "hardwareVersion"), ("CAMBIUM-PTP250-MIB", "bootVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    versionsGroup = versionsGroup.setStatus('current')
if mibBuilder.loadTexts: versionsGroup.setDescription('The versions object group.')
pubStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 250, 98, 20)).setObjects(("CAMBIUM-PTP250-MIB", "receiveDataRate"), ("CAMBIUM-PTP250-MIB", "transmitDataRate"), ("CAMBIUM-PTP250-MIB", "aggregateDataRate"), ("CAMBIUM-PTP250-MIB", "wirelessLinkStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pubStatsGroup = pubStatsGroup.setStatus('current')
if mibBuilder.loadTexts: pubStatsGroup.setDescription('The pubStats object group.')
notificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 17713, 250, 98, 99)).setObjects(("CAMBIUM-PTP250-MIB", "dataPortStatusTrap"), ("CAMBIUM-PTP250-MIB", "installArmStateTrap"), ("CAMBIUM-PTP250-MIB", "noWirelessChannelAvailableTrap"), ("CAMBIUM-PTP250-MIB", "linkStatusTrap"), ("CAMBIUM-PTP250-MIB", "radarDetectTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    notificationsGroup = notificationsGroup.setStatus('current')
if mibBuilder.loadTexts: notificationsGroup.setDescription('The notifications group.')
sNMPCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 250, 8, 2), )
if mibBuilder.loadTexts: sNMPCommunityTable.setStatus('current')
if mibBuilder.loadTexts: sNMPCommunityTable.setDescription('SNMP community string configuration table.')
sNMPCommunityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 250, 8, 2, 1), ).setIndexNames((0, "CAMBIUM-PTP250-MIB", "sNMPCommunityTableIndex"))
if mibBuilder.loadTexts: sNMPCommunityTableEntry.setStatus('current')
if mibBuilder.loadTexts: sNMPCommunityTableEntry.setDescription('Table SNMPCommunityTable')
sNMPTrapTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 250, 8, 4), )
if mibBuilder.loadTexts: sNMPTrapTable.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTable.setDescription('SNMP trap configuration table.')
sNMPTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 250, 8, 4, 1), ).setIndexNames((0, "CAMBIUM-PTP250-MIB", "sNMPTrapTableIndex"))
if mibBuilder.loadTexts: sNMPTrapTableEntry.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTableEntry.setDescription('Table SNMPTrapTable')
iPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPAddress.setStatus('current')
if mibBuilder.loadTexts: iPAddress.setDescription('Internet protocol (IP) address. This address is used by \n             the family of Internet protocols to uniquely identify \n             the unit on a network.')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
if mibBuilder.loadTexts: subnetMask.setDescription('A subnet allows the flow of network traffic between \n             hosts to be segregated based on a network \n             configuration. By organizing hosts into \n             logical groups, subnetting can improve network \n             security and performance.')
gatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayIPAddress.setStatus('current')
if mibBuilder.loadTexts: gatewayIPAddress.setDescription('The IP address of a computer on the current network that \n             is currently acting as a network gateway. A gateway \n             acts as an entrance / exit to packets from / to \n             other networks.')
remoteMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteMACAddress.setStatus('current')
if mibBuilder.loadTexts: remoteMACAddress.setDescription('MAC address of the PTP wireless unit forming the other \n             end of the PTP link')
masterSlaveMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("slave", 0), ("master", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: masterSlaveMode.setStatus('current')
if mibBuilder.loadTexts: masterSlaveMode.setDescription('The PTP wireless link operates using a master and slave \n             relationship')
maximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumTransmitPower.setStatus('current')
if mibBuilder.loadTexts: maximumTransmitPower.setDescription('Maximum transmit power the wireless unit is permitted to \n             use when establishing and maintaining the wireless \n             link')
antennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 610))).setMaxAccess("readonly")
if mibBuilder.loadTexts: antennaGain.setStatus('current')
if mibBuilder.loadTexts: antennaGain.setDescription('Antenna Gain. Expressed in 10ths of dBi. NB: This \n             attribute is ignored for variants with an \n             integral antenna.')
cableLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLoss.setStatus('current')
if mibBuilder.loadTexts: cableLoss.setDescription('Loss in the cable between the ODU and the antenna. \n             Expressed in 10ths of dB. NB: This attribute is \n             ignored for variants with an integral antenna.')
channelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bw20MHz", 0), ("bw40MHz", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelBandwidth.setStatus('current')
if mibBuilder.loadTexts: channelBandwidth.setDescription('The selected bandwidth of the transmit and \n             receive radio channels')
remoteIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteIPAddress.setStatus('current')
if mibBuilder.loadTexts: remoteIPAddress.setDescription('IP Address of the peer wireless unit')
linkName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkName.setStatus('current')
if mibBuilder.loadTexts: linkName.setDescription('Name of the PTP link allocated by the System \n             Administrator. Used to establish a \n             connection with the correct PTP wireless unit \n             at the other end of the link. NOTE: The link name MUST \n             be the same at both ends of the PTP link.')
siteName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteName.setStatus('current')
if mibBuilder.loadTexts: siteName.setDescription('This field contains a user-provided description of the \n             site name together with any additional notes')
configuredModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("modBpskHalf", 0), ("modQpskHalf", 1), ("modQpskThreeQuarters", 2), ("mod16QamHalf", 3), ("mod16QamThreeQuarters", 4), ("mod64QamTwoThirds", 5), ("mod64QamThreeQuarters", 6), ("mod64QamFiveSixths", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configuredModulationMode.setStatus('current')
if mibBuilder.loadTexts: configuredModulationMode.setDescription('The fixed modulation mode or maximum adaptive modulation mode \n             to be used by the wireless link')
band = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unset", 0), ("freq5400MHz", 1), ("freq5800MHz", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: band.setStatus('current')
if mibBuilder.loadTexts: band.setDescription('The frequency band to be \n             used by the wireless link')
configuredRange = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configuredRange.setStatus('current')
if mibBuilder.loadTexts: configuredRange.setDescription('Configured distance between the two peer wireless units\n             expressed in hundredths of a kilometer.')
channelSelection = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 16), Bits().clone(namedValues=NamedValues(("channum100", 0), ("channum104", 1), ("channum108", 2), ("channum112", 3), ("channum116", 4), ("channum120", 5), ("channum124", 6), ("channum128", 7), ("channum132", 8), ("channum136", 9), ("channum140", 10), ("channum149", 11), ("channum153", 12), ("channum157", 13), ("channum161", 14), ("channum165", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelSelection.setStatus('current')
if mibBuilder.loadTexts: channelSelection.setDescription('The channels selected for use by the user. The\n              current channel will be selected from this list.')
vlanTagging = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTagging.setStatus('current')
if mibBuilder.loadTexts: vlanTagging.setDescription('Whether or not to use VLAN tagging for management.')
vlanId = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanId.setStatus('current')
if mibBuilder.loadTexts: vlanId.setDescription('VLAN ID for management.')
vlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPriority.setStatus('current')
if mibBuilder.loadTexts: vlanPriority.setDescription('VLAN priority for management.')
fixedModMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fixedModMode.setStatus('current')
if mibBuilder.loadTexts: fixedModMode.setDescription('If disabled, allows automatic modulation mode selection.')
dualPayload = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualPayload.setStatus('current')
if mibBuilder.loadTexts: dualPayload.setDescription('If enabled, allows dual payload modulation modes to be selected.')
dataPortAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: dataPortAutoNegotiation.setDescription('This controls whether the local Ethernet interface \n             configuration is automatically negotiated \n             or forced.')
dataPortAutoNegAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 2, 2), Bits().clone(namedValues=NamedValues(("negInvalid", 0), ("neg10MbpsHalfDuplex", 1), ("neg10MbpsFullDuplex", 2), ("neg100MbpsHalfDuplex", 3), ("neg100MbpsFullDuplex", 4), ("neg1000MbpsFullDuplex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortAutoNegAdvertisement.setStatus('current')
if mibBuilder.loadTexts: dataPortAutoNegAdvertisement.setDescription('This sets the different Ethernet configurations that \n             will be advertised during auto negotiation.')
dataPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortStatus.setStatus('current')
if mibBuilder.loadTexts: dataPortStatus.setDescription('Current status of the Ethernet link. NB: a change of \n             state may generate an SNMP trap and/or SMTP email \n             alert')
dataPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("speed1000MbpsFullDuplex", 0), ("speed100MbpsFullDuplex", 1), ("speed100MbpsHalfDuplex", 2), ("speed10MbpsFullDuplex", 3), ("speed10MbpsHalfDuplex", 4), ("speedUnknown6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortSpeedAndDuplex.setStatus('current')
if mibBuilder.loadTexts: dataPortSpeedAndDuplex.setDescription('The current speed and duplex of the Ethernet link')
regionCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: regionCode.setStatus('current')
if mibBuilder.loadTexts: regionCode.setDescription('The region code prohibits the wireless unit from \n             operating outside the regulated limits.\n             NB: a change of state may generate an SNMP trap \n             and/or SMTP email alert')
productVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("ptpXX400Full", 0), ("ptpXX400Deprecated1", 1), ("ptpXX400Deprecated2", 2), ("ptpXX400Lite", 3), ("spare1", 4), ("ptpXX300", 5), ("spare2", 6), ("spare3", 7), ("ptpXX500FullDeprecated", 8), ("ptpXX500LiteDeprecated", 9), ("ptpXX500", 10), ("ptpXX600Lite", 11), ("ptpXX600Full", 12), ("spare5", 13), ("spare6", 14), ("ptp800", 15), ("ptp250", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVariant.setStatus('current')
if mibBuilder.loadTexts: productVariant.setDescription('The product variant')
productName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('current')
if mibBuilder.loadTexts: productName.setDescription('Name of the product variant')
installArmState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disarmed", 0), ("armed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installArmState.setStatus('current')
if mibBuilder.loadTexts: installArmState.setDescription('Indicates if the unit is being installed. NB: a change \n             of state may generate an SNMP trap and/or SMTP email \n             alert')
tFTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 4, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: tFTPServerIPAddress.setDescription('IP address of the TFTP Server from which the TFTP \n             Software Upgrade File Name will be retrieved')
tFTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: tFTPServerPortNumber.setDescription('The port number of the TFTP Server from which the TFTP \n             Software Upgrade File Name will be retrieved')
tFTPSoftwareUpgradeFileName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeFileName.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeFileName.setDescription('Filename of the Software Upgrade to be loaded from the \n             TFTP Server')
tFTPSoftwareUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("uploadinprogress", 1), ("uploadsuccessfulprogrammingFLASH", 2), ("upgradesuccessfulreboottorunthenewsoftwareimage", 3), ("upgradefailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatus.setDescription('The current status of the TFTP Software upgrade process')
tFTPSoftwareUpgradeStatusText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusText.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusText.setDescription('Descriptive text describing the status of the TFTP \n             Software upgrade process, including any error \n             details')
tFTPSoftwareUpgradeStatusAdditionalText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusAdditionalText.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusAdditionalText.setDescription('Any additional text describing the status of the TFTP \n             Software upgrade process, including any error \n             details')
receivePower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receivePower.setStatus('current')
if mibBuilder.loadTexts: receivePower.setDescription('Receive power expressed in tenths of a dBm')
vectorError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vectorError.setStatus('current')
if mibBuilder.loadTexts: vectorError.setDescription("The vector error measurement compares the received \n             signal's IQ modulation characteristics to an \n             ideal signal to determine the composite error \n             vector magnitude. The value represented by this \n             attribute is the average vector error over the \n             previous second expressed in tenths of a dB")
transmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitPower.setStatus('current')
if mibBuilder.loadTexts: transmitPower.setDescription('Transmit power expressed in tenths of a dBm')
linkLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLoss.setStatus('current')
if mibBuilder.loadTexts: linkLoss.setDescription('The wireless link loss expressed in tenths of a dB')
currentChannel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentChannel.setStatus('current')
if mibBuilder.loadTexts: currentChannel.setDescription('Current active channel')
extendedChannel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendedChannel.setStatus('current')
if mibBuilder.loadTexts: extendedChannel.setDescription('Current extended channel in 40MHz mode')
receiveModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("acquisition", 0), ("modBpskHalfSingle", 1), ("modQpskHalfSingle", 2), ("modQpskThreeQuartersSingle", 3), ("mod16QamHalfSingle", 4), ("mod16QamThreeQuartersSingle", 5), ("mod64QamTwoThirdsSingle", 6), ("mod64QamThreeQuartersSingle", 7), ("mod64QamFiveSixthsSingle", 8), ("modBpskHalfDual", 9), ("modQpskHalfDual", 10), ("modQpskThreeQuartersDual", 11), ("mod16QamHalfDual", 12), ("mod16QamThreeQuartersDual", 13), ("mod64QamTwoThirdsDual", 14), ("mod64QamThreeQuartersDual", 15), ("mod64QamFiveSixthsDual", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulationMode.setStatus('current')
if mibBuilder.loadTexts: receiveModulationMode.setDescription('Current active receive modulation mode')
transmitModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("acquisition", 0), ("modBpskHalfSingle", 1), ("modQpskHalfSingle", 2), ("modQpskThreeQuartersSingle", 3), ("mod16QamHalfSingle", 4), ("mod16QamThreeQuartersSingle", 5), ("mod64QamTwoThirdsSingle", 6), ("mod64QamThreeQuartersSingle", 7), ("mod64QamFiveSixthsSingle", 8), ("modBpskHalfDual", 9), ("modQpskHalfDual", 10), ("modQpskThreeQuartersDual", 11), ("mod16QamHalfDual", 12), ("mod16QamThreeQuartersDual", 13), ("mod64QamTwoThirdsDual", 14), ("mod64QamThreeQuartersDual", 15), ("mod64QamFiveSixthsDual", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitModulationMode.setStatus('current')
if mibBuilder.loadTexts: transmitModulationMode.setDescription('Current active transmit modulation mode')
currentFreqMHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFreqMHz.setStatus('current')
if mibBuilder.loadTexts: currentFreqMHz.setDescription('Current channel frequency expressed in integer MHz')
extendedFreqMHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendedFreqMHz.setStatus('current')
if mibBuilder.loadTexts: extendedFreqMHz.setDescription('Extended channel frequency expressed in integer MHz')
signalStrengthRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalStrengthRatio.setStatus('current')
if mibBuilder.loadTexts: signalStrengthRatio.setDescription('Signal strength ratio (Vertical / Horizontal) : the \n             number of dB larger the Vertical antenna input is \n             than the Horizontal antenna input expressed in \n             tenths of a dB')
searchState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 0), ("registering", 1), ("acquiring", 2), ("searching", 3), ("radarCAC", 4), ("initialising", 5), ("noChannels", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: searchState.setStatus('current')
if mibBuilder.loadTexts: searchState.setDescription("Search status of the wireless unit. 'Registering' means \n             that the unit has locked to an OFDM signal, and the \n             wireless link is up. 'Searching' means that no \n             wireless signal has been detected. 'Acquiring' \n             means that a wireless signal has been detected, but \n             the unit has not locked to an OFDM signal.")
noiseFloor = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiseFloor.setStatus('current')
if mibBuilder.loadTexts: noiseFloor.setDescription('Noise floor expressed in tenths of a dBm')
radarDetectChannel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: radarDetectChannel.setStatus('current')
if mibBuilder.loadTexts: radarDetectChannel.setDescription('Channel on which Radar has been detected.\n\t\t(Note that this variable is accessible-for-notify only).')
measuredRange = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 5, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measuredRange.setStatus('current')
if mibBuilder.loadTexts: measuredRange.setDescription('Measured distance between the two peer wireless units\n             expressed in tenths of Km.')
noWirelessChannelAvailable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("noWirelessChannelAvailable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: noWirelessChannelAvailable.setStatus('current')
if mibBuilder.loadTexts: noWirelessChannelAvailable.setDescription('Spectrum Management was unable to locate a suitable \n             wireless channel to operate on')
sMTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 7, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sMTPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: sMTPServerIPAddress.setDescription('IP address of the SMTP server')
sMTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sMTPServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: sMTPServerPortNumber.setDescription('Port number of the SMTP server')
sMTPSourceEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sMTPSourceEmailAddress.setStatus('current')
if mibBuilder.loadTexts: sMTPSourceEmailAddress.setDescription("The 'from' email address used when constructing the \n             automatically generated e-mail message")
sMTPDestinationEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sMTPDestinationEmailAddress.setStatus('current')
if mibBuilder.loadTexts: sMTPDestinationEmailAddress.setDescription("The 'to' email address used when constructing the \n             automatically generated e-mail message")
sMTPEnabledMessages = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 7, 5), Bits().clone(namedValues=NamedValues(("dataPortUpDown", 0), ("wirelessLinkUpDown", 1), ("coldStart", 2), ("radarDetect", 3), ("installArmState", 4), ("noChannelAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sMTPEnabledMessages.setStatus('current')
if mibBuilder.loadTexts: sMTPEnabledMessages.setDescription('This controls which SMTP messages the unit will send')
sNMPCommunityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPCommunityTableNumber.setStatus('current')
if mibBuilder.loadTexts: sNMPCommunityTableNumber.setDescription('Number of entries in the sNMPCommunityTable.')
sNMPTrapTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapTableNumber.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTableNumber.setDescription('Number of entries in the sNMPTrapTable.')
sNMPEnabledTraps = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 8, 6), Bits().clone(namedValues=NamedValues(("dataPortUpDown", 0), ("wirelessLinkUpDown", 1), ("coldStart", 2), ("radarDetect", 3), ("installArmState", 4), ("noChannelAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPEnabledTraps.setStatus('current')
if mibBuilder.loadTexts: sNMPEnabledTraps.setDescription('This controls which SNMP Traps the unit will send')
sNMPCommunityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 250, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sNMPCommunityTableIndex.setStatus('current')
if mibBuilder.loadTexts: sNMPCommunityTableIndex.setDescription('SNMP community value, used to index the SNMPCommunityTable.')
sNMPCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 250, 8, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPCommunityString.setStatus('current')
if mibBuilder.loadTexts: sNMPCommunityString.setDescription('The community string for this entry')
sNMPCommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 250, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("readOnly", 0), ("readWrite", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPCommunityAccess.setStatus('current')
if mibBuilder.loadTexts: sNMPCommunityAccess.setDescription('Whether this community allows read-only or read-write access')
sNMPCommunityOid = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 250, 8, 2, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPCommunityOid.setStatus('current')
if mibBuilder.loadTexts: sNMPCommunityOid.setDescription("The OID at which the root of this community's subtree starts")
sNMPTrapTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 250, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sNMPTrapTableIndex.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTableIndex.setDescription('SNMP trap value, used to index the SNMPTrapTable.')
sNMPTrapIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 250, 8, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapIPAddress.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapIPAddress.setDescription('The IP address to which all SNMP Traps are sent.')
sNMPTrapPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 250, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapPortNumber.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapPortNumber.setDescription('Destination port for SNMP Traps (default=162). A value \n             of 0 will disable the trap receiver.')
sNMPTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 250, 8, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapCommunity.setDescription('The community string for this trap entry')
sNMPTrapVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 250, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("v1", 0), ("v2c", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapVersion.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapVersion.setDescription('The SNMP protocol version for this trap entry')
nTPState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nTPState.setStatus('current')
if mibBuilder.loadTexts: nTPState.setDescription('NTP control state')
nTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 43200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nTPPollInterval.setStatus('current')
if mibBuilder.loadTexts: nTPPollInterval.setDescription('The NTP server polling interval')
nTPSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noSync", 0), ("inSync", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nTPSync.setStatus('current')
if mibBuilder.loadTexts: nTPSync.setDescription('If NTP Sync fails then check the server settings in the \n             Remote Management page, or disable NTP')
nTPLastSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nTPLastSync.setStatus('current')
if mibBuilder.loadTexts: nTPLastSync.setDescription('Last NTP sync time')
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemClock.setStatus('current')
if mibBuilder.loadTexts: systemClock.setDescription('System clock presented as local time')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50))).clone(namedValues=NamedValues(("gmtMinus1200", 0), ("gmtMinus1130", 1), ("gmtMinus1100", 2), ("gmtMinus1030", 3), ("gmtMinus1000", 4), ("gmtMinus0930", 5), ("gmtMinus0900", 6), ("gmtMinus0830", 7), ("gmtMinus0800", 8), ("gmtMinus0730", 9), ("gmtMinus0700", 10), ("gmtMinus0630", 11), ("gmtMinus0600", 12), ("gmtMinus0530", 13), ("gmtMinus0500", 14), ("gmtMinus0430", 15), ("gmtMinus0400", 16), ("gmtMinus0330", 17), ("gmtMinus0300", 18), ("gmtMinus0230", 19), ("gmtMinus0200", 20), ("gmtMinus0130", 21), ("gmtMinus0100", 22), ("gmtMinus0030", 23), ("gmtZero", 24), ("gmtPlus0030", 25), ("gmtPlus0100", 26), ("gmtPlus0130", 27), ("gmtPlus0200", 28), ("gmtPlus0230", 29), ("gmtPlus0300", 30), ("gmtPlus0330", 31), ("gmtPlus0400", 32), ("gmtPlus0430", 33), ("gmtPlus0500", 34), ("gmtPlus0530", 35), ("gmtPlus0600", 36), ("gmtPlus0630", 37), ("gmtPlus0700", 38), ("gmtPlus0730", 39), ("gmtPlus0800", 40), ("gmtPlus0830", 41), ("gmtPlus0900", 42), ("gmtPlus0930", 43), ("gmtPlus1000", 44), ("gmtPlus1030", 45), ("gmtPlus1100", 46), ("gmtPlus1130", 47), ("gmtPlus1200", 48), ("gmtPlus1230", 49), ("gmtPlus1300", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeZone.setStatus('current')
if mibBuilder.loadTexts: timeZone.setDescription('Time zone offsets from Greenwich Mean Time (GMT)')
nTPServerIp = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 9, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nTPServerIp.setStatus('current')
if mibBuilder.loadTexts: nTPServerIp.setDescription('Specifies the NTP server IP address.')
nTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 9, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nTPServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: nTPServerPortNumber.setDescription('Port number of the NTP server')
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
if mibBuilder.loadTexts: softwareVersion.setDescription('Current software version')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hardwareVersion.setDescription('Hardware platform version')
bootVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersion.setStatus('current')
if mibBuilder.loadTexts: bootVersion.setDescription('Boot code software version')
receiveDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveDataRate.setStatus('current')
if mibBuilder.loadTexts: receiveDataRate.setDescription('Average data rate over the last one second interval \n             (tenths of Mbps)')
transmitDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitDataRate.setStatus('current')
if mibBuilder.loadTexts: transmitDataRate.setDescription('Average data rate over the last one second interval \n             (tenths of Mbps)')
aggregateDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateDataRate.setStatus('current')
if mibBuilder.loadTexts: aggregateDataRate.setDescription('Average data rate over the last one second interval \n             (tenths of Mbps)')
wirelessLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 250, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatus.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatus.setDescription('Current status of the wireless link')
dataPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 250, 99, 0, 1)).setObjects(("CAMBIUM-PTP250-MIB", "dataPortStatus"))
if mibBuilder.loadTexts: dataPortStatusTrap.setStatus('current')
if mibBuilder.loadTexts: dataPortStatusTrap.setDescription('Status of the Ethernet link has changed.')
installArmStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 250, 99, 0, 2)).setObjects(("CAMBIUM-PTP250-MIB", "installArmState"))
if mibBuilder.loadTexts: installArmStateTrap.setStatus('current')
if mibBuilder.loadTexts: installArmStateTrap.setDescription('Unit install arm state has changed')
noWirelessChannelAvailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 250, 99, 0, 3)).setObjects(("CAMBIUM-PTP250-MIB", "noWirelessChannelAvailable"))
if mibBuilder.loadTexts: noWirelessChannelAvailableTrap.setStatus('current')
if mibBuilder.loadTexts: noWirelessChannelAvailableTrap.setDescription('Wireless channel availability has changed')
linkStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 250, 99, 0, 4)).setObjects(("CAMBIUM-PTP250-MIB", "wirelessLinkStatus"))
if mibBuilder.loadTexts: linkStatusTrap.setStatus('current')
if mibBuilder.loadTexts: linkStatusTrap.setDescription('Wireless link status has changed')
radarDetectTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 250, 99, 0, 5)).setObjects(("CAMBIUM-PTP250-MIB", "radarDetectChannel"))
if mibBuilder.loadTexts: radarDetectTrap.setStatus('current')
if mibBuilder.loadTexts: radarDetectTrap.setDescription('Radar has been detected on one or more channels')
mibBuilder.exportSymbols("CAMBIUM-PTP250-MIB", ptpCompliance=ptpCompliance, receivePower=receivePower, iPAddress=iPAddress, sNMPTrapTableNumber=sNMPTrapTableNumber, linkName=linkName, sMTPDestinationEmailAddress=sMTPDestinationEmailAddress, nTPServerIp=nTPServerIp, masterSlaveMode=masterSlaveMode, productName=productName, sNMPTrapIPAddress=sNMPTrapIPAddress, systemClock=systemClock, currentFreqMHz=currentFreqMHz, ntp=ntp, alarmsGroup=alarmsGroup, dataPortAutoNegotiation=dataPortAutoNegotiation, hardwareVersion=hardwareVersion, radarDetectTrap=radarDetectTrap, signalStrengthRatio=signalStrengthRatio, sMTPSourceEmailAddress=sMTPSourceEmailAddress, nTPState=nTPState, bootVersion=bootVersion, antennaGain=antennaGain, alarms=alarms, managementGroup=managementGroup, licence=licence, remoteIPAddress=remoteIPAddress, sNMPTrapTableEntry=sNMPTrapTableEntry, management=management, tFTPSoftwareUpgradeStatusAdditionalText=tFTPSoftwareUpgradeStatusAdditionalText, receiveDataRate=receiveDataRate, vlanTagging=vlanTagging, dataPortSpeedAndDuplex=dataPortSpeedAndDuplex, sNMPCommunityAccess=sNMPCommunityAccess, sMTPServerIPAddress=sMTPServerIPAddress, installArmState=installArmState, sNMPCommunityTableIndex=sNMPCommunityTableIndex, sNMPTrapTableIndex=sNMPTrapTableIndex, gatewayIPAddress=gatewayIPAddress, pubStatsGroup=pubStatsGroup, maximumTransmitPower=maximumTransmitPower, searchState=searchState, licenceGroup=licenceGroup, currentChannel=currentChannel, timeZone=timeZone, ethernetGroup=ethernetGroup, band=band, versions=versions, productVariant=productVariant, wirelessLinkStatus=wirelessLinkStatus, cambium=cambium, cableLoss=cableLoss, noiseFloor=noiseFloor, configuration=configuration, sNMPCommunityString=sNMPCommunityString, sNMPTrapCommunity=sNMPTrapCommunity, nTPSync=nTPSync, ptpGroups=ptpGroups, channelBandwidth=channelBandwidth, vlanPriority=vlanPriority, installArmStateTrap=installArmStateTrap, ptmp=ptmp, vlanId=vlanId, channelSelection=channelSelection, versionsGroup=versionsGroup, sNMPCommunityTableEntry=sNMPCommunityTableEntry, sNMPTrapPortNumber=sNMPTrapPortNumber, sMTPEnabledMessages=sMTPEnabledMessages, configuredRange=configuredRange, nTPPollInterval=nTPPollInterval, measuredRange=measuredRange, phyStatus=phyStatus, sNMPTrapTable=sNMPTrapTable, transmitModulationMode=transmitModulationMode, transmitDataRate=transmitDataRate, configuredModulationMode=configuredModulationMode, snmpControl=snmpControl, dataPortStatusTrap=dataPortStatusTrap, PYSNMP_MODULE_ID=cambium, noWirelessChannelAvailable=noWirelessChannelAvailable, sNMPEnabledTraps=sNMPEnabledTraps, ptp=ptp, dualPayload=dualPayload, dataPortAutoNegAdvertisement=dataPortAutoNegAdvertisement, vectorError=vectorError, smtp=smtp, fixedModMode=fixedModMode, notificationsGroup=notificationsGroup, sMTPServerPortNumber=sMTPServerPortNumber, smtpGroup=smtpGroup, linkLoss=linkLoss, ntpGroup=ntpGroup, noWirelessChannelAvailableTrap=noWirelessChannelAvailableTrap, dataPortStatus=dataPortStatus, tFTPServerIPAddress=tFTPServerIPAddress, siteName=siteName, ptpTrapPrefix=ptpTrapPrefix, remoteMACAddress=remoteMACAddress, nTPLastSync=nTPLastSync, phyStatusGroup=phyStatusGroup, radarDetectChannel=radarDetectChannel, linkStatusTrap=linkStatusTrap, sNMPCommunityTableNumber=sNMPCommunityTableNumber, snmpControlGroup=snmpControlGroup, receiveModulationMode=receiveModulationMode, tFTPServerPortNumber=tFTPServerPortNumber, tFTPSoftwareUpgradeFileName=tFTPSoftwareUpgradeFileName, nTPServerPortNumber=nTPServerPortNumber, sNMPTrapVersion=sNMPTrapVersion, softwareVersion=softwareVersion, tFTPSoftwareUpgradeStatusText=tFTPSoftwareUpgradeStatusText, extendedFreqMHz=extendedFreqMHz, sNMPCommunityTable=sNMPCommunityTable, configurationGroup=configurationGroup, regionCode=regionCode, tFTPSoftwareUpgradeStatus=tFTPSoftwareUpgradeStatus, subnetMask=subnetMask, extendedChannel=extendedChannel, transmitPower=transmitPower, ethernet=ethernet, ptpTraps=ptpTraps, pubStats=pubStats, aggregateDataRate=aggregateDataRate, ptp250=ptp250, sNMPCommunityOid=sNMPCommunityOid)
