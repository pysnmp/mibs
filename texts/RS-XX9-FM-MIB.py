#
# PySNMP MIB module RS-XX9-FM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-FM-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 10:05:24 2024
# On host fv-az1427-100 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
commonNotificationAlarmClass, = mibBuilder.importSymbols("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass")
rsXx9Fm, rsXx9MibModule = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9Fm", "rsXx9MibModule")
NotificationPriority, NotificationMask, IndexTransmitter, NotificationState, SwitchOnOff, IndexAB = mibBuilder.importSymbols("RS-XX9-TC-MIB", "NotificationPriority", "NotificationMask", "IndexTransmitter", "NotificationState", "SwitchOnOff", "IndexAB")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Bits, NotificationType, Integer32, Gauge32, Counter32, ObjectIdentity, Counter64, TimeTicks, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "NotificationType", "Integer32", "Gauge32", "Counter32", "ObjectIdentity", "Counter64", "TimeTicks", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
rsXx9FmMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 11))
rsXx9FmMibModule.setRevisions(('2012-11-20 08:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsXx9FmMibModule.setRevisionsDescriptions(('Preliminary revision',))
if mibBuilder.loadTexts: rsXx9FmMibModule.setLastUpdated('201211200800Z')
if mibBuilder.loadTexts: rsXx9FmMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
if mibBuilder.loadTexts: rsXx9FmMibModule.setContactInfo('Rohde & Schwarz GmbH & Co. KG\n\t\t\t\tBroadcasting Division\n\t\t\t\t\n\t\t\t\tMuehldorfstrasse 15\n\t\t\t\t81671 Munich\n\t\t\t\tGermany\n\t\t\t\t\n\t\t\t\tcustomersupport@rohde-schwarz.com')
if mibBuilder.loadTexts: rsXx9FmMibModule.setDescription('This MIB defines FM specific objects\n\t\t\t\tof XX9000 transmitting systems from Rohde & Schwarz.\n\t\t\t\t\n\t\t\t\tThe following MIBs are related to this:\n\t\t\t\t- RS-COMMON-MIB         - mandatory for this MIB\n\t\t\t\t- RS-XX9-SMI-MIB        - mandatory for this MIB\n\t\t\t\t- RS-XX9-TC-MIB         - mandatory for this MIB\n\t\t\t\t- RS-XX9-COMMON-MIB     - mandatory for this MIB')
class FmPilotSyncSource(TextualConvention, Integer32):
    description = 'Reference source for pilot synchronization.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("off", 1), ("aesUserBits", 2), ("aesStartFrame", 3), ("aesSB", 4), ("ext1PPS", 5))

class FmSoundMode(TextualConvention, Integer32):
    description = 'The sound mode for AF and AES inputs.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("monoL", 1), ("monoR", 2), ("monoLpR", 3), ("stereo", 4))

rsXx9FmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 0))
fmAudioInputPrimary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-FM-MIB", "fmInpStNotificationPriority"), ("RS-XX9-FM-MIB", "fmInpStNotificationState"))
if mibBuilder.loadTexts: fmAudioInputPrimary.setStatus('current')
if mibBuilder.loadTexts: fmAudioInputPrimary.setDescription('State of primary input.\n\t\t\t\t\n\t\t\t\tPossible values:\n\t\t\t\tok(5) - if the selectet physical input(s)\n\t\t\t\t        (via fmInpGenSetupMainSource and fmInpGenSetupMainSoundMode)\n\t\t\t\t        is ok\n\t\t\t\totherwise\n\t\t\t\toff(2) - if fmInpGenSetupInputMonitoring is off(1) or\n\t\t\t\t         activeIfRfOn(3) and the exciter is switched off\n\t\t\t\t         or if txInpAutoActiveInput is input2(3) and txInpAutoIfReseveFails is nothing(1)\n\t\t\t\totherwise\n\t\t\t\twarning(4) - if txInpAutoActiveInput is input1(2) and txInpAutoForceExciterChangeover is off(2)\n\t\t\t\t             or if txInpAutoActiveInput is input2(3) and txInpAutoIfReseveFails is warn(2)\n\t\t\t\totherwise\n\t\t\t\tfault(3)\n\t\t\t\t\n\t\t\t\tNotification class: fault')
fmAudioInputSecondary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-FM-MIB", "fmInpStNotificationPriority"), ("RS-XX9-FM-MIB", "fmInpStNotificationState"))
if mibBuilder.loadTexts: fmAudioInputSecondary.setStatus('current')
if mibBuilder.loadTexts: fmAudioInputSecondary.setDescription('State of secondary input.\n\t\t\t\t\n\t\t\t\tPossible values:\n\t\t\t\tok(5) - if fmInpGenSetupReserveSource is not none(1)\n\t\t\t\t        and the selectet physical input(s)\n\t\t\t\t        (via fmInpGenSetupReserveSource and fmInpGenSetupReserveSoundMode)\n\t\t\t\t        is ok\n\t\t\t\totherwise\n\t\t\t\toff(2) - if fmInpGenSetupReserveSource is none(1) and txInpAutoActiveInput is input1(2)\n\t\t\t\t         or fmInpGenSetupInputMonitoring is off(1) or\n\t\t\t\t         activeIfRfOn(3) and the exciter is switched off\n\t\t\t\t         or if txInpAutoActiveInput is input1(2) and txInpAutoIfReseveFails is nothing(1)\n\t\t\t\totherwise\n\t\t\t\twarning(4) - if txInpAutoActiveInput is input2(3) and txInpAutoForceExciterChangeover is off(2)\n\t\t\t\t             or if txInpAutoActiveInput is input1(2) and txInpAutoIfReseveFails is warn(2)\n\t\t\t\totherwise\n\t\t\t\tfault(3)\n\t\t\t\t\n\t\t\t\tNotification class: fault')
fmAfLeft = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 0, 3)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-FM-MIB", "fmInpStNotificationPriority"), ("RS-XX9-FM-MIB", "fmInpStNotificationState"))
if mibBuilder.loadTexts: fmAfLeft.setStatus('current')
if mibBuilder.loadTexts: fmAfLeft.setDescription('Left AF input state.\n\t\t\t\t\n\t\t\t\tPossible values:\n\t\t\t\tok(5) - if fmAfStateLeftCurrentLevelPercent is bigger than fmAfSetupThresholdPercent\n\t\t\t\totherwise\n\t\t\t\tfault(3)\n\t\t\t\t\n\t\t\t\tNotification class: fault')
fmAfRight = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 0, 4)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-FM-MIB", "fmInpStNotificationPriority"), ("RS-XX9-FM-MIB", "fmInpStNotificationState"))
if mibBuilder.loadTexts: fmAfRight.setStatus('current')
if mibBuilder.loadTexts: fmAfRight.setDescription('Right AF input state.\n\t\t\t\t\n\t\t\t\tPossible values:\n\t\t\t\tok(5) - if fmAfStateRightCurrentLevelPercent is bigger than fmAfSetupThresholdPercent\n\t\t\t\totherwise\n\t\t\t\tfault(3)\n\t\t\t\t\n\t\t\t\tNotification class: fault')
fmMpx1 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 0, 5)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-FM-MIB", "fmInpStNotificationPriority"), ("RS-XX9-FM-MIB", "fmInpStNotificationState"))
if mibBuilder.loadTexts: fmMpx1.setStatus('current')
if mibBuilder.loadTexts: fmMpx1.setDescription('MPx 1 input state.\n\t\t\t\t\n\t\t\t\tPossible values:\n\t\t\t\toff(2) - if fmDataSetupOperationMode.1 is on(1)\n\t\t\t\totherwise\n\t\t\t\tok(5) - if fmMpxAux1StateCurrentLevelPercent is bigger than fmMpxSetupThresholdPercent.1\n\t\t\t\totherwise\n\t\t\t\tfault(3)\n\t\t\t\t\n\t\t\t\tNotification class: fault')
fmMpx2 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 0, 6)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-FM-MIB", "fmInpStNotificationPriority"), ("RS-XX9-FM-MIB", "fmInpStNotificationState"))
if mibBuilder.loadTexts: fmMpx2.setStatus('current')
if mibBuilder.loadTexts: fmMpx2.setDescription('MPx 2 input state.\n\t\t\t\t\n\t\t\t\tPossible values:\n\t\t\t\toff(2) - if fmDataSetupOperationMode.2 is on(1)\n\t\t\t\totherwise\n\t\t\t\tok(5) - if fmMpxAux2StateCurrentLevelPercent is bigger than fmMpxSetupThresholdPercent.2\n\t\t\t\totherwise\n\t\t\t\tfault(3)\n\t\t\t\t\n\t\t\t\tNotification class: fault')
fmAesLeft = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 0, 7)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-FM-MIB", "fmInpStNotificationPriority"), ("RS-XX9-FM-MIB", "fmInpStNotificationState"))
if mibBuilder.loadTexts: fmAesLeft.setStatus('current')
if mibBuilder.loadTexts: fmAesLeft.setDescription('Left AES input state.\n\t\t\t\t\n\t\t\t\tPossible values:\n\t\t\t\tok(5) - if fmAesStateLeftCurrentLevelPercent is bigger than fmAesSetupThresholdPercent\n\t\t\t\t        and fmAesStateAudio, fmAesStateParityBiphase, fmAesStateClock are true(1)\n\t\t\t\t        and fmAesStatePcm, fmAesStateChannel are ok(2)\n\t\t\t\totherwise\n\t\t\t\tfault(3)\n\t\t\t\t\n\t\t\t\tNotification class: fault')
fmAesRight = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 0, 8)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-FM-MIB", "fmInpStNotificationPriority"), ("RS-XX9-FM-MIB", "fmInpStNotificationState"))
if mibBuilder.loadTexts: fmAesRight.setStatus('current')
if mibBuilder.loadTexts: fmAesRight.setDescription('Right AES input state.\n\t\t\t\t\n\t\t\t\tPossible values:\n\t\t\t\tok(5) - if fmAesStateRightCurrentLevelPercent is bigger than fmAesSetupThresholdPercent\n\t\t\t\t        and fmAesStateAudio, fmAesStateParityBiphase, fmAesStateClock are true(1)\n\t\t\t\t        and fmAesStatePcm, fmAesStateChannel are ok(2)\n\t\t\t\totherwise\n\t\t\t\tfault(3)\n\t\t\t\t\n\t\t\t\tNotification class: fault')
fmAux1Input = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 0, 9)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-FM-MIB", "fmInpStNotificationPriority"), ("RS-XX9-FM-MIB", "fmInpStNotificationState"))
if mibBuilder.loadTexts: fmAux1Input.setStatus('current')
if mibBuilder.loadTexts: fmAux1Input.setDescription('Aux 1 input state.\n\t\t\t\t\n\t\t\t\tPossible values:\n\t\t\t\toff(2) - if fmDataSetupOperationMode.1 is off(2)\n\t\t\t\totherwise\n\t\t\t\tok(5) - if fmMpxAux1StateCurrentLevelPercent is bigger than fmDataSetupThresholdPercent\n\t\t\t\totherwise\n\t\t\t\tfault(3)\n\t\t\t\t\n\t\t\t\tNotification class: warning')
fmAux2Input = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 0, 10)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-FM-MIB", "fmInpStNotificationPriority"), ("RS-XX9-FM-MIB", "fmInpStNotificationState"))
if mibBuilder.loadTexts: fmAux2Input.setStatus('current')
if mibBuilder.loadTexts: fmAux2Input.setDescription('Aux 2 input state.\n\t\t\t\t\n\t\t\t\tPossible values:\n\t\t\t\toff(2) - if fmDataSetupOperationMode.2 is off(2)\n\t\t\t\totherwise\n\t\t\t\tok(5) - if fmMpxAux2StateCurrentLevelPercent is bigger than fmDataSetupThresholdPercent\n\t\t\t\totherwise\n\t\t\t\tfault(3)\n\t\t\t\t\n\t\t\t\tNotification class: warning')
rsXx9FmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1))
fmInput = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1))
fmInputStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1))
fmInpStNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 1), )
if mibBuilder.loadTexts: fmInpStNotificationTable.setStatus('current')
if mibBuilder.loadTexts: fmInpStNotificationTable.setDescription('The context information/configuration for the\n\t\t\t\tFM input status notifications.')
fmInpStNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-FM-MIB", "fmInpStNotificationTxIdx"), (0, "RS-XX9-FM-MIB", "fmInpStNotificationExcIdx"), (0, "RS-XX9-FM-MIB", "fmInpStNotificationIdx"))
if mibBuilder.loadTexts: fmInpStNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: fmInpStNotificationEntry.setDescription('An entry in the fmInpStNotificationTable.')
fmInpStNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: fmInpStNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: fmInpStNotificationTxIdx.setDescription('The transmitter index.')
fmInpStNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: fmInpStNotificationExcIdx.setStatus('current')
if mibBuilder.loadTexts: fmInpStNotificationExcIdx.setDescription('This index distinguishes the exiters.\n\t\t\t\tNecessary if you have dual drive transmitters.')
fmInpStNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: fmInpStNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: fmInpStNotificationIdx.setDescription('The notification number as below rsXx9FmNotifications.\n\t\t\t\tThis is a helper column and therefore not-accessible.')
fmInpStNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("fmAudioInputPrimary", 1), ("fmAudioInputSecondary", 2), ("fmAfLeft", 3), ("fmAfRight", 4), ("fmMpx1", 5), ("fmMpx2", 6), ("fmAesLeft", 7), ("fmAesRight", 8), ("fmAux1Input", 9), ("fmAux2Input", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmInpStNotificationName.setStatus('current')
if mibBuilder.loadTexts: fmInpStNotificationName.setDescription('The notification number as an enumeration.\n\t\t\t\tThe enumeration correlates with the notifications under rsXx9FmNotifications.')
fmInpStNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmInpStNotificationMask.setStatus('current')
if mibBuilder.loadTexts: fmInpStNotificationMask.setDescription('See textual convention for details.')
fmInpStNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmInpStNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: fmInpStNotificationPriority.setDescription('See textual convention for details.')
fmInpStNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmInpStNotificationState.setStatus('current')
if mibBuilder.loadTexts: fmInpStNotificationState.setDescription('See textual convention for details.')
fmAfStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 2), )
if mibBuilder.loadTexts: fmAfStateTable.setStatus('current')
if mibBuilder.loadTexts: fmAfStateTable.setDescription('FM AF input state values.')
fmAfStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 2, 1), ).setIndexNames((0, "RS-XX9-FM-MIB", "fmInpStNotificationTxIdx"), (0, "RS-XX9-FM-MIB", "fmInpStNotificationExcIdx"))
if mibBuilder.loadTexts: fmAfStateEntry.setStatus('current')
if mibBuilder.loadTexts: fmAfStateEntry.setDescription('An entry in the fmAfStateTable.')
fmAfStateLeftCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 2, 1, 1), Integer32()).setUnits('1/10 dBu').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAfStateLeftCurrentLevel.setStatus('current')
if mibBuilder.loadTexts: fmAfStateLeftCurrentLevel.setDescription('Current level on left AF input in dBu.')
fmAfStateLeftCurrentLevelPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 2, 1, 2), Unsigned32()).setUnits('per thousand').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAfStateLeftCurrentLevelPercent.setStatus('current')
if mibBuilder.loadTexts: fmAfStateLeftCurrentLevelPercent.setDescription('Current level on left AF input in o/oo relating to the\n\t\t\t\tnominal value.')
fmAfStateRightCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 2, 1, 3), Integer32()).setUnits('1/10 dBu').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAfStateRightCurrentLevel.setStatus('current')
if mibBuilder.loadTexts: fmAfStateRightCurrentLevel.setDescription('Current level on right AF input in dBu.')
fmAfStateRightCurrentLevelPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 2, 1, 4), Unsigned32()).setUnits('per thousand').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAfStateRightCurrentLevelPercent.setStatus('current')
if mibBuilder.loadTexts: fmAfStateRightCurrentLevelPercent.setDescription('Current level on right AF input in o/oo relating to the\n\t\t\t\tnominal value.')
fmDigitalAudioStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 3), )
if mibBuilder.loadTexts: fmDigitalAudioStateTable.setStatus('current')
if mibBuilder.loadTexts: fmDigitalAudioStateTable.setDescription('FM digital audio input state values.')
fmDigitalAudioStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 3, 1), )
fmAfStateEntry.registerAugmentions(("RS-XX9-FM-MIB", "fmDigitalAudioStateEntry"))
fmDigitalAudioStateEntry.setIndexNames(*fmAfStateEntry.getIndexNames())
if mibBuilder.loadTexts: fmDigitalAudioStateEntry.setStatus('current')
if mibBuilder.loadTexts: fmDigitalAudioStateEntry.setDescription('An entry in the fmDigitalAudioStateTable.')
fmAesStateLeftCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 3, 1, 1), Integer32()).setUnits('1/10 dBFs').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAesStateLeftCurrentLevel.setStatus('current')
if mibBuilder.loadTexts: fmAesStateLeftCurrentLevel.setDescription('Current level on left AES input in dBFs.')
fmAesStateLeftCurrentLevelPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 3, 1, 2), Unsigned32()).setUnits('per thousand').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAesStateLeftCurrentLevelPercent.setStatus('current')
if mibBuilder.loadTexts: fmAesStateLeftCurrentLevelPercent.setDescription('Current level on left AES input in o/oo.')
fmAesStateRightCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 3, 1, 3), Integer32()).setUnits('1/10 dBFs').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAesStateRightCurrentLevel.setStatus('current')
if mibBuilder.loadTexts: fmAesStateRightCurrentLevel.setDescription('Current level on right AES input in dBFs.')
fmAesStateRightCurrentLevelPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 3, 1, 4), Unsigned32()).setUnits('per thousand').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAesStateRightCurrentLevelPercent.setStatus('current')
if mibBuilder.loadTexts: fmAesStateRightCurrentLevelPercent.setDescription('Current level on right AES input in o/oo.')
fmAesStateSampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 3, 1, 5), Unsigned32()).setUnits('1/10 kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAesStateSampleRate.setStatus('current')
if mibBuilder.loadTexts: fmAesStateSampleRate.setDescription('Current sample rate on AES input.')
fmAesStatePreemphasis = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAesStatePreemphasis.setStatus('current')
if mibBuilder.loadTexts: fmAesStatePreemphasis.setDescription('Detection of preemphasis on AES input.\n\t\t\t\t\n\t\t\t\tunknown(1) - fmAesStateChannel is not ok(2)')
fmAesStateAudio = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAesStateAudio.setStatus('current')
if mibBuilder.loadTexts: fmAesStateAudio.setDescription('Detection of audio content on AES input.')
fmAesStatePcm = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAesStatePcm.setStatus('current')
if mibBuilder.loadTexts: fmAesStatePcm.setDescription('Detection of invalid audio samples on AES input.\n\t\t\t\t\n\t\t\t\tunknown(1) - fmAesStateChannel is not ok(2)\n\t\t\t\tok(2)      - PCM audio samples are valid\n\t\t\t\twarning(3) - there are invalid PCM audio samples')
fmAesStateChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAesStateChannel.setStatus('current')
if mibBuilder.loadTexts: fmAesStateChannel.setDescription('Validity of channel on AES input.\n\t\t\t\t\n\t\t\t\tunknown(1) - fmAesStateAudio is false(2)\n\t\t\t\twarning(3) - channel CRC is invalid')
fmAesStateParityBiphase = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAesStateParityBiphase.setStatus('current')
if mibBuilder.loadTexts: fmAesStateParityBiphase.setDescription('Validity of AES/EBU frame on AES input.')
fmAesStateClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAesStateClock.setStatus('current')
if mibBuilder.loadTexts: fmAesStateClock.setDescription('Detection of valid clock on AES input.')
fmMpxAuxStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 4), )
if mibBuilder.loadTexts: fmMpxAuxStateTable.setStatus('current')
if mibBuilder.loadTexts: fmMpxAuxStateTable.setDescription('FM MPx input state values.')
fmMpxAuxStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 4, 1), )
fmAfStateEntry.registerAugmentions(("RS-XX9-FM-MIB", "fmMpxAuxStateEntry"))
fmMpxAuxStateEntry.setIndexNames(*fmAfStateEntry.getIndexNames())
if mibBuilder.loadTexts: fmMpxAuxStateEntry.setStatus('current')
if mibBuilder.loadTexts: fmMpxAuxStateEntry.setDescription('An entry in the fmMpxAuxStateTable.')
fmMpxAux1StateCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 4, 1, 1), Integer32()).setUnits('1/10 dBu').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmMpxAux1StateCurrentLevel.setStatus('current')
if mibBuilder.loadTexts: fmMpxAux1StateCurrentLevel.setDescription('Current level on MPx/Aux 1 input in dBu.')
fmMpxAux1StateCurrentLevelPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 4, 1, 2), Unsigned32()).setUnits('per thousand').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmMpxAux1StateCurrentLevelPercent.setStatus('current')
if mibBuilder.loadTexts: fmMpxAux1StateCurrentLevelPercent.setDescription('Current level on MPx/Aux 1 input in o/oo relating to the\n\t\t\t\tnominal value.')
fmMpxAux2StateCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 4, 1, 3), Integer32()).setUnits('1/10 dBu').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmMpxAux2StateCurrentLevel.setStatus('current')
if mibBuilder.loadTexts: fmMpxAux2StateCurrentLevel.setDescription('Current level on MPx/Aux 2 input in dBu.')
fmMpxAux2StateCurrentLevelPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 1, 4, 1, 4), Unsigned32()).setUnits('per thousand').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmMpxAux2StateCurrentLevelPercent.setStatus('current')
if mibBuilder.loadTexts: fmMpxAux2StateCurrentLevelPercent.setDescription('Current level on MPx/Aux 2 input in o/oo relating to the\n\t\t\t\tnominal value.')
fmInputSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2))
fmInputGeneralSetupTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 1), )
if mibBuilder.loadTexts: fmInputGeneralSetupTable.setStatus('current')
if mibBuilder.loadTexts: fmInputGeneralSetupTable.setDescription('Setup of logical inputs.')
fmInputGeneralSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 1, 1), ).setIndexNames((0, "RS-XX9-FM-MIB", "fmInpGenSetupTxIdx"), (0, "RS-XX9-FM-MIB", "fmInpGenSetupExcIdx"))
if mibBuilder.loadTexts: fmInputGeneralSetupEntry.setStatus('current')
if mibBuilder.loadTexts: fmInputGeneralSetupEntry.setDescription('An entry in the fmInputGeneralSetupTable.')
fmInpGenSetupTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: fmInpGenSetupTxIdx.setStatus('current')
if mibBuilder.loadTexts: fmInpGenSetupTxIdx.setDescription('The transmitter index.')
fmInpGenSetupExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: fmInpGenSetupExcIdx.setStatus('current')
if mibBuilder.loadTexts: fmInpGenSetupExcIdx.setDescription('This index distinguishes the exiters.\n\t\t\t\tNecessary if you have dual drive transmitters.')
fmInpGenSetupMainSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("af", 2), ("aes", 3), ("mpx1", 4), ("mpx2", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmInpGenSetupMainSource.setStatus('current')
if mibBuilder.loadTexts: fmInpGenSetupMainSource.setDescription('Assignment of physical input to main input.')
fmInpGenSetupMainSoundMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 1, 1, 4), FmSoundMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmInpGenSetupMainSoundMode.setStatus('current')
if mibBuilder.loadTexts: fmInpGenSetupMainSoundMode.setDescription('Configuration of mono/stereo-mode\n\t\t\t\tif fmInpGenSetupMainSource is af(2) or aes(3).')
fmInpGenSetupReserveSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("af", 2), ("aes", 3), ("mpx1", 4), ("mpx2", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmInpGenSetupReserveSource.setStatus('current')
if mibBuilder.loadTexts: fmInpGenSetupReserveSource.setDescription('Assignment of physical input to reserve input.')
fmInpGenSetupReserveSoundMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 1, 1, 6), FmSoundMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmInpGenSetupReserveSoundMode.setStatus('current')
if mibBuilder.loadTexts: fmInpGenSetupReserveSoundMode.setDescription('Configuration of mono/stereo-mode\n\t\t\t\tif fmInpGenSetupReserveSource is af(2) or aes(3).')
fmInpGenSetupInputMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alwaysOn", 2), ("activeIfRfOn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmInpGenSetupInputMonitoring.setStatus('current')
if mibBuilder.loadTexts: fmInpGenSetupInputMonitoring.setDescription('Enabling / disabling of monitoring of the audio input state:\n\t\t\t\toff(1)          - no monitoring\n\t\t\t\talwaysOn(2)     - always monitoring\n\t\t\t\tactiveIfRfOn(3) - monitoring if the transmitter is on')
fmInpGenSetupMpxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unbalanced", 1), ("balanced", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmInpGenSetupMpxMode.setStatus('current')
if mibBuilder.loadTexts: fmInpGenSetupMpxMode.setDescription('Select unbalanced(1) or balanced(2) MPx input.\n\t\t\t\tThis selection affects both MPx1 and MPx2.\n\t\t\t\t\n\t\t\t\tThe selection balanced(2) is possible only\n\t\t\t\tif the coder board revision is at least 04.00.')
fmAfSetupTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 2), )
if mibBuilder.loadTexts: fmAfSetupTable.setStatus('current')
if mibBuilder.loadTexts: fmAfSetupTable.setDescription('FM AF input setup parameters.')
fmAfSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 2, 1), )
fmInputGeneralSetupEntry.registerAugmentions(("RS-XX9-FM-MIB", "fmAfSetupEntry"))
fmAfSetupEntry.setIndexNames(*fmInputGeneralSetupEntry.getIndexNames())
if mibBuilder.loadTexts: fmAfSetupEntry.setStatus('current')
if mibBuilder.loadTexts: fmAfSetupEntry.setDescription('An entry in the fmAfSetupTable.')
fmAfSetupImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gt2kOhm", 1), ("sixhundredOhm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmAfSetupImpedance.setStatus('current')
if mibBuilder.loadTexts: fmAfSetupImpedance.setDescription('Setting of impedance on both AF inputs.')
fmAfSetupNominalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 120))).setUnits('1/10 dBu').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmAfSetupNominalLevel.setStatus('current')
if mibBuilder.loadTexts: fmAfSetupNominalLevel.setDescription('Nominal level for both AF inputs.')
fmAfSetupThresholdPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmAfSetupThresholdPercent.setStatus('current')
if mibBuilder.loadTexts: fmAfSetupThresholdPercent.setDescription('Setting of fault threshold for both AF inputs in o/oo\n\t\t\t\trelating to the nominal level.')
fmAfSetupOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmAfSetupOnTime.setStatus('current')
if mibBuilder.loadTexts: fmAfSetupOnTime.setDescription("Guard time for detecting 'input ok' for both AF inputs.")
fmAfSetupOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmAfSetupOffTime.setStatus('current')
if mibBuilder.loadTexts: fmAfSetupOffTime.setDescription("Guard time for detecting 'input fault' for both AF inputs.")
fmAfSetupThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 2, 1, 6), Integer32()).setUnits('1/10 dBu').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAfSetupThreshold.setStatus('current')
if mibBuilder.loadTexts: fmAfSetupThreshold.setDescription('The fault threshold for both AF inputs in dBu.')
fmDigitalAudioSetupTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 3), )
if mibBuilder.loadTexts: fmDigitalAudioSetupTable.setStatus('current')
if mibBuilder.loadTexts: fmDigitalAudioSetupTable.setDescription('FM digital audio input setup parameters.')
fmDigitalAudioSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 3, 1), )
fmInputGeneralSetupEntry.registerAugmentions(("RS-XX9-FM-MIB", "fmDigitalAudioSetupEntry"))
fmDigitalAudioSetupEntry.setIndexNames(*fmInputGeneralSetupEntry.getIndexNames())
if mibBuilder.loadTexts: fmDigitalAudioSetupEntry.setStatus('current')
if mibBuilder.loadTexts: fmDigitalAudioSetupEntry.setDescription('An entry in the fmDigitalAudioSetupTable.')
fmAesSetupNominalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-120, 0))).setUnits('1/10 dB FS').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmAesSetupNominalLevel.setStatus('current')
if mibBuilder.loadTexts: fmAesSetupNominalLevel.setDescription('Nominal level for AES input.')
fmAesSetupThresholdPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmAesSetupThresholdPercent.setStatus('current')
if mibBuilder.loadTexts: fmAesSetupThresholdPercent.setDescription('Setting of fault threshold for AES input in o/oo\n\t\t\t\trelating to the nominal level.')
fmAesSetupOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmAesSetupOnTime.setStatus('current')
if mibBuilder.loadTexts: fmAesSetupOnTime.setDescription("Guard time for detecting 'input ok' for AES input.")
fmAesSetupOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmAesSetupOffTime.setStatus('current')
if mibBuilder.loadTexts: fmAesSetupOffTime.setDescription("Guard time for detecting 'input fault' for AES input.")
fmAesSetupThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 3, 1, 5), Integer32()).setUnits('1/10 dB FS').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAesSetupThreshold.setStatus('current')
if mibBuilder.loadTexts: fmAesSetupThreshold.setDescription('The fault threshold for AES input in dB FS.')
fmMpxSetupTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 4), )
if mibBuilder.loadTexts: fmMpxSetupTable.setStatus('current')
if mibBuilder.loadTexts: fmMpxSetupTable.setDescription('FM MPx input setup parameters.')
fmMpxSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 4, 1), ).setIndexNames((0, "RS-XX9-FM-MIB", "fmInpGenSetupTxIdx"), (0, "RS-XX9-FM-MIB", "fmInpGenSetupExcIdx"), (0, "RS-XX9-FM-MIB", "fmMpxSetupInpIdx"))
if mibBuilder.loadTexts: fmMpxSetupEntry.setStatus('current')
if mibBuilder.loadTexts: fmMpxSetupEntry.setDescription('An entry in the fmMpxSetupTable.')
fmMpxSetupInpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mpx1", 1), ("mpx2", 2))))
if mibBuilder.loadTexts: fmMpxSetupInpIdx.setStatus('current')
if mibBuilder.loadTexts: fmMpxSetupInpIdx.setDescription('Selection of input MPX1 or MPX2.')
fmMpxSetupNominalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 160))).setUnits('1/10 dBu').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmMpxSetupNominalLevel.setStatus('current')
if mibBuilder.loadTexts: fmMpxSetupNominalLevel.setDescription('Nominal level for both MPx inputs.')
fmMpxSetupThresholdPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmMpxSetupThresholdPercent.setStatus('current')
if mibBuilder.loadTexts: fmMpxSetupThresholdPercent.setDescription('Setting of fault threshold for both MPx inputs in o/oo\n\t\t\t\trelating to the nominal level.')
fmMpxSetupOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmMpxSetupOnTime.setStatus('current')
if mibBuilder.loadTexts: fmMpxSetupOnTime.setDescription("Guard time for detecting 'input ok' for both MPx inputs.")
fmMpxSetupOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmMpxSetupOffTime.setStatus('current')
if mibBuilder.loadTexts: fmMpxSetupOffTime.setDescription("Guard time for detecting 'input fault' for both MPx inputs.")
fmMpxSetupThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 4, 1, 6), Integer32()).setUnits('1/10 dBu').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmMpxSetupThreshold.setStatus('current')
if mibBuilder.loadTexts: fmMpxSetupThreshold.setDescription('The fault threshold for both MPx inputs in dBu.')
fmDataInputSetupTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 5), )
if mibBuilder.loadTexts: fmDataInputSetupTable.setStatus('current')
if mibBuilder.loadTexts: fmDataInputSetupTable.setDescription('FM data input setup parameters.')
fmDataInputSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 5, 1), ).setIndexNames((0, "RS-XX9-FM-MIB", "fmInpGenSetupTxIdx"), (0, "RS-XX9-FM-MIB", "fmInpGenSetupExcIdx"), (0, "RS-XX9-FM-MIB", "fmDataSetupInpIdx"))
if mibBuilder.loadTexts: fmDataInputSetupEntry.setStatus('current')
if mibBuilder.loadTexts: fmDataInputSetupEntry.setDescription('An entry in the fmDataInputSetupTable.')
fmDataSetupInpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aux1", 1), ("aux2", 2))))
if mibBuilder.loadTexts: fmDataSetupInpIdx.setStatus('current')
if mibBuilder.loadTexts: fmDataSetupInpIdx.setDescription('Distinction between AUX1 and AUX2.')
fmDataSetupOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 5, 1, 2), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDataSetupOperationMode.setStatus('current')
if mibBuilder.loadTexts: fmDataSetupOperationMode.setDescription('Switches data input on or off.')
fmDataSetupNominalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-180, -70))).setUnits('1/10 dBu').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDataSetupNominalLevel.setStatus('current')
if mibBuilder.loadTexts: fmDataSetupNominalLevel.setDescription('Nominal level for data input.')
fmDataSetupNominalDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setUnits('1/10 kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDataSetupNominalDeviation.setStatus('current')
if mibBuilder.loadTexts: fmDataSetupNominalDeviation.setDescription('Nominal deviation of data input.')
fmDataSetupThresholdPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDataSetupThresholdPercent.setStatus('current')
if mibBuilder.loadTexts: fmDataSetupThresholdPercent.setDescription('Setting of fault threshold for data input in o/oo\n\t\t\t\trelating to the nominal level.')
fmDataSetupOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDataSetupOnTime.setStatus('current')
if mibBuilder.loadTexts: fmDataSetupOnTime.setDescription("Guard time for detecting 'input ok' for data input.")
fmDataSetupOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDataSetupOffTime.setStatus('current')
if mibBuilder.loadTexts: fmDataSetupOffTime.setDescription("Guard time for detecting 'input fault' for data input.")
fmDataSetupLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 5, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDataSetupLabel.setStatus('current')
if mibBuilder.loadTexts: fmDataSetupLabel.setDescription('Labeling for the deployment of input.\n\t\t\t\t(For example: RDS or SCA.)')
fmDataSetupThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 1, 2, 5, 1, 9), Integer32()).setUnits('1/10 dBu').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDataSetupThreshold.setStatus('current')
if mibBuilder.loadTexts: fmDataSetupThreshold.setDescription('The fault threshold for data input in dBu.')
fmPilotTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 2), )
if mibBuilder.loadTexts: fmPilotTable.setStatus('current')
if mibBuilder.loadTexts: fmPilotTable.setDescription('Pilot parameters.')
fmPilotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 2, 1), ).setIndexNames((0, "RS-XX9-FM-MIB", "fmPilotTxIdx"), (0, "RS-XX9-FM-MIB", "fmPilotExcIdx"))
if mibBuilder.loadTexts: fmPilotEntry.setStatus('current')
if mibBuilder.loadTexts: fmPilotEntry.setDescription('An entry in the fmPilotTable.')
fmPilotTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 2, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: fmPilotTxIdx.setStatus('current')
if mibBuilder.loadTexts: fmPilotTxIdx.setDescription('The transmitter index.')
fmPilotExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 2, 1, 2), IndexAB())
if mibBuilder.loadTexts: fmPilotExcIdx.setStatus('current')
if mibBuilder.loadTexts: fmPilotExcIdx.setDescription('This index distinguishes the exiters.\n\t\t\t\tNecessary if you have dual drive transmitters.')
fmPilotOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 2, 1, 3), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmPilotOperationMode.setStatus('current')
if mibBuilder.loadTexts: fmPilotOperationMode.setDescription('Switches pilot of internal stereo coder on or off.')
fmPilotDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(200, 1000))).setUnits('1/100 kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmPilotDeviation.setStatus('current')
if mibBuilder.loadTexts: fmPilotDeviation.setDescription('Deviation of pilot for internal stereo coder.')
fmPreemphasisTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 3), )
if mibBuilder.loadTexts: fmPreemphasisTable.setStatus('current')
if mibBuilder.loadTexts: fmPreemphasisTable.setDescription('Preemphasis parameters.')
fmPreemphasisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 3, 1), )
fmPilotEntry.registerAugmentions(("RS-XX9-FM-MIB", "fmPreemphasisEntry"))
fmPreemphasisEntry.setIndexNames(*fmPilotEntry.getIndexNames())
if mibBuilder.loadTexts: fmPreemphasisEntry.setStatus('current')
if mibBuilder.loadTexts: fmPreemphasisEntry.setDescription('An entry in the fmPreemphasisTable.')
fmPreemphasisOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 3, 1, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmPreemphasisOperationMode.setStatus('current')
if mibBuilder.loadTexts: fmPreemphasisOperationMode.setDescription('Switches preemphasis on or off.')
fmPreemphasisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("microSec50", 1), ("microSec75", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmPreemphasisValue.setStatus('current')
if mibBuilder.loadTexts: fmPreemphasisValue.setDescription('Selection of time constant for preemphasis:\n\t\t\t\tmicroSec50(1) - 50 micro seconds\n\t\t\t\tmicroSec75(2) - 75 micro seconds')
fmDeviationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 4), )
if mibBuilder.loadTexts: fmDeviationTable.setStatus('current')
if mibBuilder.loadTexts: fmDeviationTable.setDescription('Deviation parameters.')
fmDeviationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 4, 1), )
fmPilotEntry.registerAugmentions(("RS-XX9-FM-MIB", "fmDeviationEntry"))
fmDeviationEntry.setIndexNames(*fmPilotEntry.getIndexNames())
if mibBuilder.loadTexts: fmDeviationEntry.setStatus('current')
if mibBuilder.loadTexts: fmDeviationEntry.setDescription('An entry in the fmDeviationTable.')
fmDeviationNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(400, 1500))).setUnits('1/10 kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDeviationNominal.setStatus('current')
if mibBuilder.loadTexts: fmDeviationNominal.setDescription('Deviation without pilot, RDS, SCA.')
fmDeviationCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 4, 1, 2), Unsigned32()).setUnits('1/10 kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDeviationCurrent.setStatus('current')
if mibBuilder.loadTexts: fmDeviationCurrent.setDescription('Current summary deviation.')
fmLimiterOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("clipperOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmLimiterOperationMode.setStatus('current')
if mibBuilder.loadTexts: fmLimiterOperationMode.setDescription('Switches limiter on or off.')
fmLimiterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(400, 1500))).setUnits('1/10 kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmLimiterThreshold.setStatus('current')
if mibBuilder.loadTexts: fmLimiterThreshold.setDescription('Threshold for limiter.')
fmLimiterActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 4, 1, 5), Integer32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmLimiterActivity.setStatus('current')
if mibBuilder.loadTexts: fmLimiterActivity.setDescription('Activity of limiter in percent.')
fmDeviationClipped = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 4, 1, 6), Unsigned32()).setUnits('1/10 kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDeviationClipped.setStatus('current')
if mibBuilder.loadTexts: fmDeviationClipped.setDescription('Activity of limiter in Hz.')
fmMPxPowerControlOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 4, 1, 7), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmMPxPowerControlOperationMode.setStatus('current')
if mibBuilder.loadTexts: fmMPxPowerControlOperationMode.setDescription('Switches MPx power control on or off.')
fmMPxPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 50))).setUnits('1/10 dBr').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmMPxPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: fmMPxPowerThreshold.setDescription('Threshold for MPx power.')
fmMPxPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 4, 1, 9), Integer32()).setUnits('1/10 dBr').setMaxAccess("readonly")
if mibBuilder.loadTexts: fmMPxPowerCurrent.setStatus('current')
if mibBuilder.loadTexts: fmMPxPowerCurrent.setDescription('Current MPx power.')
fmSyncTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 6), )
if mibBuilder.loadTexts: fmSyncTable.setStatus('current')
if mibBuilder.loadTexts: fmSyncTable.setDescription('Synchron FM parameters.')
fmSyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 6, 1), )
fmPilotEntry.registerAugmentions(("RS-XX9-FM-MIB", "fmSyncEntry"))
fmSyncEntry.setIndexNames(*fmPilotEntry.getIndexNames())
if mibBuilder.loadTexts: fmSyncEntry.setStatus('current')
if mibBuilder.loadTexts: fmSyncEntry.setDescription('An entry in the fmSyncTable.')
fmSyncPilotSyncSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 6, 1, 1), FmPilotSyncSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSyncPilotSyncSource.setStatus('current')
if mibBuilder.loadTexts: fmSyncPilotSyncSource.setDescription('Selection of reference for pilot synchronization.')
fmSyncPilotSyncSourceCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 6, 1, 2), FmPilotSyncSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSyncPilotSyncSourceCurrent.setStatus('current')
if mibBuilder.loadTexts: fmSyncPilotSyncSourceCurrent.setDescription('Current reference for pilot synchronization.')
fmSyncStaticDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999999))).setUnits('nano second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSyncStaticDelay.setStatus('current')
if mibBuilder.loadTexts: fmSyncStaticDelay.setDescription('MPx delay.')
fmSyncPilotPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('1/100 percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSyncPilotPhase.setStatus('current')
if mibBuilder.loadTexts: fmSyncPilotPhase.setDescription('Correction of pilot phase.')
rsXx9FmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 2))
rsXx9FmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 2, 1))
fmBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 2, 1, 1)).setObjects(("RS-XX9-FM-MIB", "fmObjBasic"), ("RS-XX9-FM-MIB", "fmObjInput"), ("RS-XX9-FM-MIB", "fmNotifyInput"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmBasicCompliance = fmBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: fmBasicCompliance.setDescription('The compliance statement for XX9000 FM encoding.')
rsXx9FmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 2, 2))
fmObjBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 2, 2, 1)).setObjects(("RS-XX9-FM-MIB", "fmPilotOperationMode"), ("RS-XX9-FM-MIB", "fmPilotDeviation"), ("RS-XX9-FM-MIB", "fmPreemphasisOperationMode"), ("RS-XX9-FM-MIB", "fmPreemphasisValue"), ("RS-XX9-FM-MIB", "fmDeviationNominal"), ("RS-XX9-FM-MIB", "fmDeviationCurrent"), ("RS-XX9-FM-MIB", "fmLimiterOperationMode"), ("RS-XX9-FM-MIB", "fmLimiterThreshold"), ("RS-XX9-FM-MIB", "fmLimiterActivity"), ("RS-XX9-FM-MIB", "fmDeviationClipped"), ("RS-XX9-FM-MIB", "fmMPxPowerControlOperationMode"), ("RS-XX9-FM-MIB", "fmMPxPowerThreshold"), ("RS-XX9-FM-MIB", "fmMPxPowerCurrent"), ("RS-XX9-FM-MIB", "fmSyncPilotSyncSource"), ("RS-XX9-FM-MIB", "fmSyncStaticDelay"), ("RS-XX9-FM-MIB", "fmSyncPilotPhase"), ("RS-XX9-FM-MIB", "fmSyncPilotSyncSourceCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmObjBasic = fmObjBasic.setStatus('current')
if mibBuilder.loadTexts: fmObjBasic.setDescription('General FM objects.')
fmObjInput = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 2, 2, 2)).setObjects(("RS-XX9-FM-MIB", "fmInpStNotificationName"), ("RS-XX9-FM-MIB", "fmInpStNotificationMask"), ("RS-XX9-FM-MIB", "fmInpStNotificationPriority"), ("RS-XX9-FM-MIB", "fmInpStNotificationState"), ("RS-XX9-FM-MIB", "fmAesStateLeftCurrentLevel"), ("RS-XX9-FM-MIB", "fmAesStateLeftCurrentLevelPercent"), ("RS-XX9-FM-MIB", "fmAesStateRightCurrentLevel"), ("RS-XX9-FM-MIB", "fmAesStateRightCurrentLevelPercent"), ("RS-XX9-FM-MIB", "fmAesStateSampleRate"), ("RS-XX9-FM-MIB", "fmAesStatePreemphasis"), ("RS-XX9-FM-MIB", "fmAesStateAudio"), ("RS-XX9-FM-MIB", "fmAesStateClock"), ("RS-XX9-FM-MIB", "fmAfSetupImpedance"), ("RS-XX9-FM-MIB", "fmAfSetupNominalLevel"), ("RS-XX9-FM-MIB", "fmAfSetupThreshold"), ("RS-XX9-FM-MIB", "fmAfSetupOnTime"), ("RS-XX9-FM-MIB", "fmAfSetupOffTime"), ("RS-XX9-FM-MIB", "fmAesSetupNominalLevel"), ("RS-XX9-FM-MIB", "fmAesSetupThreshold"), ("RS-XX9-FM-MIB", "fmAesSetupOnTime"), ("RS-XX9-FM-MIB", "fmAesSetupOffTime"), ("RS-XX9-FM-MIB", "fmMpxSetupNominalLevel"), ("RS-XX9-FM-MIB", "fmMpxSetupThreshold"), ("RS-XX9-FM-MIB", "fmMpxSetupOnTime"), ("RS-XX9-FM-MIB", "fmMpxSetupOffTime"), ("RS-XX9-FM-MIB", "fmDataSetupOperationMode"), ("RS-XX9-FM-MIB", "fmDataSetupNominalLevel"), ("RS-XX9-FM-MIB", "fmDataSetupNominalDeviation"), ("RS-XX9-FM-MIB", "fmDataSetupThreshold"), ("RS-XX9-FM-MIB", "fmDataSetupOnTime"), ("RS-XX9-FM-MIB", "fmInpGenSetupMainSource"), ("RS-XX9-FM-MIB", "fmInpGenSetupMainSoundMode"), ("RS-XX9-FM-MIB", "fmInpGenSetupReserveSource"), ("RS-XX9-FM-MIB", "fmInpGenSetupReserveSoundMode"), ("RS-XX9-FM-MIB", "fmDataSetupLabel"), ("RS-XX9-FM-MIB", "fmDataSetupOffTime"), ("RS-XX9-FM-MIB", "fmAesStateParityBiphase"), ("RS-XX9-FM-MIB", "fmAesStatePcm"), ("RS-XX9-FM-MIB", "fmDataSetupThresholdPercent"), ("RS-XX9-FM-MIB", "fmMpxSetupThresholdPercent"), ("RS-XX9-FM-MIB", "fmAesSetupThresholdPercent"), ("RS-XX9-FM-MIB", "fmAfSetupThresholdPercent"), ("RS-XX9-FM-MIB", "fmInpGenSetupInputMonitoring"), ("RS-XX9-FM-MIB", "fmInpGenSetupMpxMode"), ("RS-XX9-FM-MIB", "fmAesStateChannel"), ("RS-XX9-FM-MIB", "fmAfStateLeftCurrentLevel"), ("RS-XX9-FM-MIB", "fmAfStateLeftCurrentLevelPercent"), ("RS-XX9-FM-MIB", "fmAfStateRightCurrentLevel"), ("RS-XX9-FM-MIB", "fmAfStateRightCurrentLevelPercent"), ("RS-XX9-FM-MIB", "fmMpxAux1StateCurrentLevel"), ("RS-XX9-FM-MIB", "fmMpxAux1StateCurrentLevelPercent"), ("RS-XX9-FM-MIB", "fmMpxAux2StateCurrentLevel"), ("RS-XX9-FM-MIB", "fmMpxAux2StateCurrentLevelPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmObjInput = fmObjInput.setStatus('current')
if mibBuilder.loadTexts: fmObjInput.setDescription('FM input objects.')
fmNotifyInput = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11, 2, 2, 3)).setObjects(("RS-XX9-FM-MIB", "fmAudioInputPrimary"), ("RS-XX9-FM-MIB", "fmAudioInputSecondary"), ("RS-XX9-FM-MIB", "fmMpx1"), ("RS-XX9-FM-MIB", "fmMpx2"), ("RS-XX9-FM-MIB", "fmAesLeft"), ("RS-XX9-FM-MIB", "fmAesRight"), ("RS-XX9-FM-MIB", "fmAfLeft"), ("RS-XX9-FM-MIB", "fmAfRight"), ("RS-XX9-FM-MIB", "fmAux1Input"), ("RS-XX9-FM-MIB", "fmAux2Input"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmNotifyInput = fmNotifyInput.setStatus('current')
if mibBuilder.loadTexts: fmNotifyInput.setDescription('FM input notifications.')
mibBuilder.exportSymbols("RS-XX9-FM-MIB", fmMpxSetupOffTime=fmMpxSetupOffTime, fmInpGenSetupMainSource=fmInpGenSetupMainSource, fmPilotExcIdx=fmPilotExcIdx, fmDataSetupInpIdx=fmDataSetupInpIdx, fmMpxAux2StateCurrentLevelPercent=fmMpxAux2StateCurrentLevelPercent, fmAfSetupThreshold=fmAfSetupThreshold, fmDigitalAudioSetupTable=fmDigitalAudioSetupTable, fmAesSetupOffTime=fmAesSetupOffTime, fmDataSetupOffTime=fmDataSetupOffTime, fmSyncPilotSyncSource=fmSyncPilotSyncSource, fmSyncEntry=fmSyncEntry, rsXx9FmConformance=rsXx9FmConformance, fmAesStateSampleRate=fmAesStateSampleRate, fmDeviationNominal=fmDeviationNominal, fmSyncPilotPhase=fmSyncPilotPhase, fmAesStateAudio=fmAesStateAudio, fmMpxSetupThreshold=fmMpxSetupThreshold, fmInpStNotificationIdx=fmInpStNotificationIdx, fmInpStNotificationName=fmInpStNotificationName, fmPilotEntry=fmPilotEntry, fmInpStNotificationExcIdx=fmInpStNotificationExcIdx, fmDataSetupOnTime=fmDataSetupOnTime, fmMpxAuxStateTable=fmMpxAuxStateTable, fmDeviationEntry=fmDeviationEntry, fmAfLeft=fmAfLeft, fmAfStateEntry=fmAfStateEntry, fmPilotDeviation=fmPilotDeviation, fmInputGeneralSetupEntry=fmInputGeneralSetupEntry, PYSNMP_MODULE_ID=rsXx9FmMibModule, fmInpGenSetupInputMonitoring=fmInpGenSetupInputMonitoring, rsXx9FmCompliances=rsXx9FmCompliances, fmMpxSetupInpIdx=fmMpxSetupInpIdx, fmAux1Input=fmAux1Input, fmInpGenSetupMpxMode=fmInpGenSetupMpxMode, fmInpStNotificationMask=fmInpStNotificationMask, fmMpxAux2StateCurrentLevel=fmMpxAux2StateCurrentLevel, fmMpxSetupThresholdPercent=fmMpxSetupThresholdPercent, fmAfStateRightCurrentLevel=fmAfStateRightCurrentLevel, fmAfSetupImpedance=fmAfSetupImpedance, fmAesStateRightCurrentLevelPercent=fmAesStateRightCurrentLevelPercent, fmInputGeneralSetupTable=fmInputGeneralSetupTable, fmPreemphasisOperationMode=fmPreemphasisOperationMode, fmAfSetupOnTime=fmAfSetupOnTime, fmAesSetupThresholdPercent=fmAesSetupThresholdPercent, fmAfRight=fmAfRight, fmAfStateTable=fmAfStateTable, fmDigitalAudioStateTable=fmDigitalAudioStateTable, fmAesStatePcm=fmAesStatePcm, fmDigitalAudioStateEntry=fmDigitalAudioStateEntry, fmMpxAuxStateEntry=fmMpxAuxStateEntry, rsXx9FmMibModule=rsXx9FmMibModule, fmPilotTable=fmPilotTable, rsXx9FmGroups=rsXx9FmGroups, fmDeviationClipped=fmDeviationClipped, fmAfStateLeftCurrentLevelPercent=fmAfStateLeftCurrentLevelPercent, fmDataSetupNominalLevel=fmDataSetupNominalLevel, fmPreemphasisValue=fmPreemphasisValue, fmLimiterOperationMode=fmLimiterOperationMode, rsXx9FmObjects=rsXx9FmObjects, fmInpStNotificationState=fmInpStNotificationState, fmInpGenSetupExcIdx=fmInpGenSetupExcIdx, fmPreemphasisTable=fmPreemphasisTable, fmAfSetupOffTime=fmAfSetupOffTime, FmPilotSyncSource=FmPilotSyncSource, fmAfSetupNominalLevel=fmAfSetupNominalLevel, fmMpxSetupEntry=fmMpxSetupEntry, fmPreemphasisEntry=fmPreemphasisEntry, fmDeviationCurrent=fmDeviationCurrent, fmInput=fmInput, fmAesStateChannel=fmAesStateChannel, fmInpGenSetupMainSoundMode=fmInpGenSetupMainSoundMode, fmPilotTxIdx=fmPilotTxIdx, fmAesStateLeftCurrentLevel=fmAesStateLeftCurrentLevel, fmDigitalAudioSetupEntry=fmDigitalAudioSetupEntry, fmMpxAux1StateCurrentLevelPercent=fmMpxAux1StateCurrentLevelPercent, fmAfSetupTable=fmAfSetupTable, fmLimiterActivity=fmLimiterActivity, fmAesStateLeftCurrentLevelPercent=fmAesStateLeftCurrentLevelPercent, fmInpGenSetupTxIdx=fmInpGenSetupTxIdx, fmDeviationTable=fmDeviationTable, fmInpStNotificationTxIdx=fmInpStNotificationTxIdx, fmInpGenSetupReserveSoundMode=fmInpGenSetupReserveSoundMode, fmAfStateLeftCurrentLevel=fmAfStateLeftCurrentLevel, fmDataSetupLabel=fmDataSetupLabel, fmMpxSetupTable=fmMpxSetupTable, fmObjInput=fmObjInput, FmSoundMode=FmSoundMode, fmInputSetup=fmInputSetup, fmAesSetupNominalLevel=fmAesSetupNominalLevel, fmMpx1=fmMpx1, fmMPxPowerControlOperationMode=fmMPxPowerControlOperationMode, fmMpx2=fmMpx2, fmAesStateParityBiphase=fmAesStateParityBiphase, fmAudioInputPrimary=fmAudioInputPrimary, fmMpxSetupOnTime=fmMpxSetupOnTime, fmAesRight=fmAesRight, fmAesStateClock=fmAesStateClock, fmInpStNotificationTable=fmInpStNotificationTable, rsXx9FmNotifications=rsXx9FmNotifications, fmDataSetupThreshold=fmDataSetupThreshold, fmBasicCompliance=fmBasicCompliance, fmAfSetupEntry=fmAfSetupEntry, fmAesStateRightCurrentLevel=fmAesStateRightCurrentLevel, fmInputStatus=fmInputStatus, fmAesSetupOnTime=fmAesSetupOnTime, fmPilotOperationMode=fmPilotOperationMode, fmLimiterThreshold=fmLimiterThreshold, fmMPxPowerCurrent=fmMPxPowerCurrent, fmAudioInputSecondary=fmAudioInputSecondary, fmAesStatePreemphasis=fmAesStatePreemphasis, fmMpxAux1StateCurrentLevel=fmMpxAux1StateCurrentLevel, fmAesSetupThreshold=fmAesSetupThreshold, fmDataInputSetupEntry=fmDataInputSetupEntry, fmMPxPowerThreshold=fmMPxPowerThreshold, fmObjBasic=fmObjBasic, fmSyncStaticDelay=fmSyncStaticDelay, fmAfSetupThresholdPercent=fmAfSetupThresholdPercent, fmAfStateRightCurrentLevelPercent=fmAfStateRightCurrentLevelPercent, fmSyncTable=fmSyncTable, fmDataSetupThresholdPercent=fmDataSetupThresholdPercent, fmDataInputSetupTable=fmDataInputSetupTable, fmInpStNotificationEntry=fmInpStNotificationEntry, fmInpStNotificationPriority=fmInpStNotificationPriority, fmDataSetupOperationMode=fmDataSetupOperationMode, fmSyncPilotSyncSourceCurrent=fmSyncPilotSyncSourceCurrent, fmAux2Input=fmAux2Input, fmDataSetupNominalDeviation=fmDataSetupNominalDeviation, fmNotifyInput=fmNotifyInput, fmAesLeft=fmAesLeft, fmInpGenSetupReserveSource=fmInpGenSetupReserveSource, fmMpxSetupNominalLevel=fmMpxSetupNominalLevel)
