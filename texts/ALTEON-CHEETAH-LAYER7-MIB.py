#
# PySNMP MIB module ALTEON-CHEETAH-LAYER7-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alteonos/ALTEON-CHEETAH-LAYER7-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 11:36:54 2024
# On host fv-az842-370 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
aws_switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "aws-switch")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, Bits, Unsigned32, Counter64, ModuleIdentity, Counter32, IpAddress, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "Bits", "Unsigned32", "Counter64", "ModuleIdentity", "Counter32", "IpAddress", "Integer32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
layer7 = ModuleIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5))
layer7.setRevisions(('2004-09-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: layer7.setRevisionsDescriptions(('Added revision clause for SMIv2 compliance.',))
if mibBuilder.loadTexts: layer7.setLastUpdated('200409010000Z')
if mibBuilder.loadTexts: layer7.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: layer7.setContactInfo('Rekha Singamsetty\n                  Suresh Batchu\n\n                  Nortel Networks\n                  4655 Great America Parkway\n                  Santa Clara CA 95054\n\n                  +1 408 495 2400\n                  rrekha@nortelnetworks.com\n                  sbatchu@nortelnetworks.com')
if mibBuilder.loadTexts: layer7.setDescription('The MIB module for the Alteon OS layer 7 features.')
layer7Configs = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1))
layer7Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2))
layer7Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 3))
layer7Oper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 4))
urlCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1))
layer7GeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 2))
sdpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3))
slbUrlRedir = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1))
slbUrlBalance = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2))
slbUrlHttpMethods = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3))
urlStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1))
connPoolingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 2))
slbParsing = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 3, 1))
slbCurCfgUrlRedirNonGetOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirNonGetOrigSrv.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlRedirNonGetOrigSrv.setDescription('This is for controlling if the switch should redirect packet \n         to the origin server when HTTP non-GETs are detected.  \n\n         enabled(1) - Allow redirect traffic to the origin server\n         disabled(2)- redirect to a group of servers')
slbNewCfgUrlRedirNonGetOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirNonGetOrigSrv.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlRedirNonGetOrigSrv.setDescription('This is for controlling if the switch should redirect packet to \n         the origin server when HTTP non-GETs are detected.  \n\n         enabled(1) - Allow redirect traffic to the origin server\n         disabled(2)- redirect to a group of servers')
slbCurCfgUrlRedirCookieOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirCookieOrigSrv.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlRedirCookieOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the \n         origin server when user cookies are detected.  \n\n         enabled(1) - Allow redirect traffic to the origin server\n         disabled(2)- redirect to a group of servers')
slbNewCfgUrlRedirCookieOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirCookieOrigSrv.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlRedirCookieOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the \n         origin server when user cookies are detected.  \n\n         enabled(1) - Allow redirect traffic to the origin server\n         disabled(2)- redirect to a group of servers')
slbCurCfgUrlRedirNoCacheOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirNoCacheOrigSrv.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlRedirNoCacheOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the \n         origin server when no-cache header are detected.  \n\n         enabled(1) - Allow redirect traffic to the origin server\n         disabled(2)- redirect to a group of servers')
slbNewCfgUrlRedirNoCacheOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirNoCacheOrigSrv.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlRedirNoCacheOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the \n         origin server when no-cache header are detected.  \n\n         enabled(1) - Allow redirect traffic to the origin server\n         disabled(2)- redirect to a group of servers')
slbCurCfgUrlRedirUriHashLength = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirUriHashLength.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlRedirUriHashLength.setDescription('Specify the number of bytes in the URI will be used to hash \n         onto server')
slbNewCfgUrlRedirUriHashLength = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirUriHashLength.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlRedirUriHashLength.setDescription('Specify the number of bytes in the URI will be used to hash \n         onto server')
slbCurCfgUrlRedirHeader = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeader.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeader.setDescription('This is for controlling if the switch should redirect packet to the \n         cache server based on HTTP header.\n\n         enabled(1) - Redirect web traffic based on HTTP header\n         disabled(2)- Redirect web traffic based on URI')
slbNewCfgUrlRedirHeader = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeader.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeader.setDescription('This is for controlling if the switch should redirect packet to the \n         cache server based on HTTP header.\n\n         enabled(1) - Redirect web traffic based on HTTP header\n         disabled(2)- Redirect web traffic based on URI')
slbCurCfgUrlRedirHeaderName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeaderName.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeaderName.setDescription('The HTTP header name')
slbNewCfgUrlRedirHeaderName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeaderName.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeaderName.setDescription('The HTTP header name')
slbUrlLbPathTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbUrlLbPathTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbUrlLbPathTableMaxSize.setDescription('The maximum number of entries in SLB URL load balance table.')
slbCurCfgUrlLbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2), )
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTable.setDescription('The table of URL path for URL load balancing in the current_config.')
slbCurCfgUrlLbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "slbCurCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTableEntry.setDescription('Information about an URL path for URL load balancing.')
slbCurCfgUrlLbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathIndex.setDescription('The URL path table index.')
slbCurCfgUrlLbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathString.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathString.setDescription('The SLB string or ASCII/BINARY string for pattern matching .')
slbCurCfgUrlLbBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbBwmContract.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbBwmContract.setDescription('The BW contract for the path.')
slbCurCfgUrlLbPathHTTPHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathHTTPHeader.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathHTTPHeader.setDescription('The HTTP header for URL load balancing.')
slbCurCfgUrlLbPathHTTPHeaderValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathHTTPHeaderValue.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathHTTPHeaderValue.setDescription('The HTTP header value for URL load balancing.')
slbCurCfgUrlLbPathPatternStringType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathPatternStringType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathPatternStringType.setDescription('Type of pattern string (ASCII or binary or none).')
slbCurCfgUrlLbPathOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathOffset.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathOffset.setDescription('Offset from beginning of IP packet to start matching the\n\t pattern string.')
slbCurCfgUrlLbPathDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathDepth.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathDepth.setDescription('Depth of IP packet to search and match the pattern string.')
slbCurCfgUrlLbPathOper = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("eq", 1), ("gt", 2), ("lt", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathOper.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathOper.setDescription('Operation to be performed on the pattern match string.\n\t For ASCII pattern strings, only the equal (eq) operation\n\t is valid.')
slbNewCfgUrlLbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3), )
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTable.setDescription('The table of URL path for URL load balancing in the new_config.')
slbNewCfgUrlLbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "slbNewCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTableEntry.setDescription('Information about an URL path for URL load balancing.')
slbNewCfgUrlLbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathIndex.setDescription('The URL path table index.')
slbNewCfgUrlLbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathString.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathString.setDescription('The SLB string or ASCII/BINARY string for pattern matching .')
slbNewCfgUrlLbBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbBwmContract.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbBwmContract.setDescription('The BW contract for the load path.')
slbNewCfgUrlLbPathHTTPHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathHTTPHeader.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathHTTPHeader.setDescription('The HTTP header for URL load balancing.')
slbNewCfgUrlLbPathHTTPHeaderValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathHTTPHeaderValue.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathHTTPHeaderValue.setDescription('The HTTP header value for URL load balancing.')
slbNewCfgUrlLbPathPatternStringType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathPatternStringType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathPatternStringType.setDescription('Type of pattern string (ASCII or binary).')
slbNewCfgUrlLbPathOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathOffset.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathOffset.setDescription('Offset from beginning of IP packet to start matching the\n\t pattern string.')
slbNewCfgUrlLbPathDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDepth.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDepth.setDescription('Depth of IP packet to search and match the pattern string.')
slbNewCfgUrlLbPathOper = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("eq", 1), ("gt", 2), ("lt", 3), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathOper.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathOper.setDescription('Operation to be performed on the pattern match string.\n\t For ASCII pattern strings, only the equal (eq) operation\n\t is valid.')
slbNewCfgUrlLbPathDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDelete.setDescription('Action object to delete an URL Path.  When set to the value \n         of 2 (delete), the entire row is deleted. When read, other(1) is \n         returned. Setting the value to anything other than delete(2) \n         has no effect on the state of the row.')
slbCurCfgUrlLbErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbErrorMsg.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbErrorMsg.setDescription("Customize error message to send back to client when switch cannot \n         bind client's request to servers.")
slbNewCfgUrlLbErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbErrorMsg.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbErrorMsg.setDescription("Customize error message to send back to client when switch cannot \n         bind client's request to servers.")
slbCurCfgUrlLbCaseSensitiveStrMatch = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbCaseSensitiveStrMatch.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbCaseSensitiveStrMatch.setDescription('This is for controlling if the URL String matching is case sensitive or not.  \n\n         enabled(1) - URL String matching is case sensitive\n         disabled(2)- URL String matching is not case sensitive')
slbNewCfgUrlLbCaseSensitiveStrMatch = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbCaseSensitiveStrMatch.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbCaseSensitiveStrMatch.setDescription('This is for controlling if the URL String matching is case sensitive or not.  \n\n         enabled(1) - URL String matching is case sensitive\n         disabled(2)- URL String matching is not case sensitive')
slbUrlHttpMethodsTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbUrlHttpMethodsTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbUrlHttpMethodsTableMaxSize.setDescription('The maximum number of http method entries in layer7 processing engine.')
slbCurCfgUrlHttpMethodsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 2), )
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodsTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodsTable.setDescription('The http methods table in layer7 processing engine.')
slbCurCfgUrlHttpMethodsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "slbCurCfgUrlHttpMethodIndex"))
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodsTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodsTableEntry.setDescription('A row in the http methods table.')
slbCurCfgUrlHttpMethodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodIndex.setDescription('The http method table index.')
slbCurCfgUrlHttpMethodString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodString.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodString.setDescription('The http method string to process in layer7 engine.')
slbNewCfgUrlHttpMethodsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 3), )
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodsTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodsTable.setDescription('The http methods table in layer7 processing engine.')
slbNewCfgUrlHttpMethodsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "slbNewCfgUrlHttpMethodIndex"))
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodsTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodsTableEntry.setDescription('A row in the http methods table.')
slbNewCfgUrlHttpMethodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodIndex.setDescription('The http method table index.')
slbNewCfgUrlHttpMethodString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodString.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodString.setDescription('The http method string to process in layer7 engine.')
slbNewCfgUrlHttpMethodDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. \n         When read, other(1) is returned. Setting the value to anything \n         other than 2(delete) has no effect on the state of the row.')
layer7CurCfgDbindTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgDbindTimeout.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgDbindTimeout.setDescription('The timeout for incomplete delayed binding connections.')
layer7NewCfgDbindTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgDbindTimeout.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgDbindTimeout.setDescription('The timeout for incomplete delayed binding connections.')
slbSdpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSdpTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbSdpTableMaxSize.setDescription('The maximum number of SDP entries in layer7 processing engine.')
slbCurCfgSdpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 2), )
if mibBuilder.loadTexts: slbCurCfgSdpTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSdpTable.setDescription('The SDP table in layer7 processing engine.')
slbCurCfgSdpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "slbCurCfgSdpIndex"))
if mibBuilder.loadTexts: slbCurCfgSdpTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSdpTableEntry.setDescription('A row in the table.')
slbCurCfgSdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSdpIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSdpIndex.setDescription('The SDP table index.')
slbCurCfgSdpPrivAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSdpPrivAddr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSdpPrivAddr.setDescription('The private IP address of SDP entry.')
slbCurCfgSdpPublicAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSdpPublicAddr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSdpPublicAddr.setDescription('The public IP address of SDP entry.')
slbNewCfgSdpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 3), )
if mibBuilder.loadTexts: slbNewCfgSdpTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSdpTable.setDescription('The SDP table in layer7 processing engine.')
slbNewCfgSdpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "slbCurCfgSdpIndex"))
if mibBuilder.loadTexts: slbNewCfgSdpTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSdpTableEntry.setDescription('A row in the SDP table.')
slbNewCfgSdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgSdpIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSdpIndex.setDescription('The SDP table index.')
slbNewCfgSdpPrivAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSdpPrivAddr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSdpPrivAddr.setDescription('The private IP address of SDP entry.')
slbNewCfgSdpPublicAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSdpPublicAddr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSdpPublicAddr.setDescription('The public IP address of SDP entry.')
slbNewCfgSdpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSdpDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSdpDelete.setDescription('When set to the value of 2 (delete), the entire row is\n         deleted. When read, other(1) is returned. Setting the value\n         to anything other than 2(delete) has no effect on the state of the row.')
urlRedirStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1))
urlStatRedRedirs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedRedirs.setStatus('current')
if mibBuilder.loadTexts: urlStatRedRedirs.setDescription('The number of instances that the received packet matches the \n         specified URL expressions and redirected to specified group of \n         real servers.')
urlStatRedOrigSrvs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedOrigSrvs.setStatus('current')
if mibBuilder.loadTexts: urlStatRedOrigSrvs.setDescription('The number of instances that the received packet is sent to the \n         origin server due to mis-match with the specified URL expressions \n         or detecting of HTTP non-GETs,user cookies, and no-cache as users \n         configuration.')
urlStatRedNonGets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedNonGets.setStatus('current')
if mibBuilder.loadTexts: urlStatRedNonGets.setDescription('The number of instances that the received packet contains \n         none GETs(POST ,HEAD ,PUT..) methods.')
urlStatRedCookie = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedCookie.setStatus('current')
if mibBuilder.loadTexts: urlStatRedCookie.setDescription("The number of instances that the received packet contains\n         a 'Cookie: ' header.")
urlStatRedNoCache = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedNoCache.setStatus('current')
if mibBuilder.loadTexts: urlStatRedNoCache.setDescription('The number of instances that the received packet contains\n         a no-cache header value.')
urlStatRedStraightOrigSrvs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedStraightOrigSrvs.setStatus('current')
if mibBuilder.loadTexts: urlStatRedStraightOrigSrvs.setDescription('The number of HTTP requests forwarded straight to the origin server.')
urlStatRedRtspCacheSrvs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedRtspCacheSrvs.setStatus('current')
if mibBuilder.loadTexts: urlStatRedRtspCacheSrvs.setDescription('The number of RTSP requests redirected to the cache server.')
urlStatRedRtspOrigSrvs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedRtspOrigSrvs.setStatus('current')
if mibBuilder.loadTexts: urlStatRedRtspOrigSrvs.setDescription('The number of RTSP requests forwarded to the origin server.')
urlSlbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 2))
urlStatSlbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 2, 1), )
if mibBuilder.loadTexts: urlStatSlbPathTable.setStatus('current')
if mibBuilder.loadTexts: urlStatSlbPathTable.setDescription('The statistics table of instances that the URL path matched.')
urlStatSlbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 2, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "urlStatSlbPathIndex"))
if mibBuilder.loadTexts: urlStatSlbPathTableEntry.setStatus('current')
if mibBuilder.loadTexts: urlStatSlbPathTableEntry.setDescription('Information about the number of instances that are \n\t load-balanced due to match of a particular URL path.')
urlStatSlbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatSlbPathIndex.setStatus('current')
if mibBuilder.loadTexts: urlStatSlbPathIndex.setDescription('The URL path table index.')
urlStatSlbPathHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatSlbPathHits.setStatus('current')
if mibBuilder.loadTexts: urlStatSlbPathHits.setDescription('The number of instances that are load-balanced due to match of \n         the particular URL path.')
urlMaintStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3))
urlMaintStatClientReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatClientReset.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatClientReset.setDescription('The number of reset frames sent to the client by the switch during\n         client connection termination.')
urlMaintStatServerReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatServerReset.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatServerReset.setDescription('The number of reset frames sent to the server by the switch during\n         server connection termination.')
urlMaintStatConnSplicing = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatConnSplicing.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatConnSplicing.setDescription('The total number of connection swapping between different real\n         servers in supporting multiple HTTP/1.1 client requests.')
urlMaintStatHalfOpens = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatHalfOpens.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatHalfOpens.setDescription('The number of outstanding TCP connections have been half opened.\n\t This statistics is valid only when URL parsing has been turned on.\n\t It is incremented when the switch respond to TCP SYN packet and \n\t decremented upon receiving TCP SYN ACK packet from the requester.')
urlMaintStatSwitchRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatSwitchRetries.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatSwitchRetries.setDescription('The total number of switch retries to connect to the real server.')
urlMaintStatRandomEarlyDrops = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatRandomEarlyDrops.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatRandomEarlyDrops.setDescription('The total number of SYN frames dropped when the buffer is low.')
urlMaintStatReqTooLong = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatReqTooLong.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatReqTooLong.setDescription('The total number of GET requests that exceeded 4500 bytes.')
urlMaintStatInvalidHandshakes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatInvalidHandshakes.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatInvalidHandshakes.setDescription('The total number of dropped frames because of invalid 3-way \n         handshakes.')
urlMaintStatCurSPMemUnits = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatCurSPMemUnits.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatCurSPMemUnits.setDescription('The current available SP memory units.')
urlMaintStatCurSEQBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatCurSEQBufEntries.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatCurSEQBufEntries.setDescription('The number of outstanding sequence buffers used.')
urlMaintStatHighestSEQBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatHighestSEQBufEntries.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatHighestSEQBufEntries.setDescription('The highest number of sequence buffers ever used.')
urlMaintStatCurDataBufUse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatCurDataBufUse.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatCurDataBufUse.setDescription('The number of outstanding data buffers used.')
urlMaintStatHighestDataBufUse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatHighestDataBufUse.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatHighestDataBufUse.setDescription('The highest number of data buffers ever used.')
urlMaintStatCurSPBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatCurSPBufEntries.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatCurSPBufEntries.setDescription('The number of outstanding SP buffers used.')
urlMaintStatHighestSPBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatHighestSPBufEntries.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatHighestSPBufEntries.setDescription('The number of SP buffers ever used.')
urlMaintStatTotalNonZeroSEQAlloc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatTotalNonZeroSEQAlloc.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatTotalNonZeroSEQAlloc.setDescription('The total number of sequence buffer allocations with non zero length.')
urlMaintStatTotalSEQBufAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatTotalSEQBufAllocs.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatTotalSEQBufAllocs.setDescription('The total number of sequence buffer allocations.')
urlMaintStatTotalSEQBufFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatTotalSEQBufFrees.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatTotalSEQBufFrees.setDescription('The total number of sequence buffer freed.')
urlMaintStatTotalDataBufAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatTotalDataBufAllocs.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatTotalDataBufAllocs.setDescription('The total number of data buffers allocated to store client request.')
urlMaintStatTotalDataBufFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatTotalDataBufFrees.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatTotalDataBufFrees.setDescription('The total number of data buffers freed.')
urlMaintStatSeqBufAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatSeqBufAllocFails.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatSeqBufAllocFails.setDescription('The number of times sequence buffer allocation failed.')
urlMaintStatUBufAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatUBufAllocFails.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatUBufAllocFails.setDescription('The number of times URL data buffer allocation failed.')
urlMaintStatMaxSessPerBucket = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatMaxSessPerBucket.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatMaxSessPerBucket.setDescription('The maximum number of items(sessions) allowed in the session table\n         hash bucket chain.')
urlMaintStatMaxFramesPerSess = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatMaxFramesPerSess.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatMaxFramesPerSess.setDescription('The maximum number of frames to be buffered per session.')
urlMaintStatMaxBytesBuffered = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatMaxBytesBuffered.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatMaxBytesBuffered.setDescription('The maximum number of bytes buffered per session.')
urlMaintStatInvalidMethods = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatInvalidMethods.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatInvalidMethods.setDescription('The total number of invalid method hits.')
urlMaintStatAgedSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatAgedSessions.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatAgedSessions.setDescription('The total number of aged delayed binding sessions.')
urlMaintStatLowestSPMemUnits = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatLowestSPMemUnits.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatLowestSPMemUnits.setDescription('The lowest available SP memory units.')
urlSpMaintStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 4), )
if mibBuilder.loadTexts: urlSpMaintStatsTable.setStatus('current')
if mibBuilder.loadTexts: urlSpMaintStatsTable.setDescription('The table of URL SP maintenance statistics.')
urlSpMaintStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "urlSpMaintStatsSpIndex"))
if mibBuilder.loadTexts: urlSpMaintStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: urlSpMaintStatsTableEntry.setDescription('A row in the URL SP maintenance statistics table.')
urlSpMaintStatsSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlSpMaintStatsSpIndex.setStatus('current')
if mibBuilder.loadTexts: urlSpMaintStatsSpIndex.setDescription('The SP index.')
urlSpMaintStatsCurMemUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlSpMaintStatsCurMemUnits.setStatus('current')
if mibBuilder.loadTexts: urlSpMaintStatsCurMemUnits.setDescription('The number of memory units available.')
urlSpMaintStatsLowestMemUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlSpMaintStatsLowestMemUnits.setStatus('current')
if mibBuilder.loadTexts: urlSpMaintStatsLowestMemUnits.setDescription('The lowest number of memory units available.')
currOpenedServerConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currOpenedServerConns.setStatus('current')
if mibBuilder.loadTexts: currOpenedServerConns.setDescription('Specifies number of current opened server connections.')
activeServerConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeServerConns.setStatus('current')
if mibBuilder.loadTexts: activeServerConns.setDescription('Specifies number of active server connections.')
availServerConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availServerConns.setStatus('current')
if mibBuilder.loadTexts: availServerConns.setDescription('Specifies number of available server connections.')
agedOutClientConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agedOutClientConns.setStatus('current')
if mibBuilder.loadTexts: agedOutClientConns.setDescription('Specifies number of aged out client connection.')
agedOutServerConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agedOutServerConns.setStatus('current')
if mibBuilder.loadTexts: agedOutServerConns.setDescription('Specifies number of aged out server connection.')
slbParsingString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbParsingString.setStatus('current')
if mibBuilder.loadTexts: slbParsingString.setDescription('The SLB Cookie to parse of length 16 or 20 bytes and Cookie value should be in 0xXXXXXXXXXXXXXXXX format.')
slbParsingVip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbParsingVip.setStatus('current')
if mibBuilder.loadTexts: slbParsingVip.setDescription('The Virtual IP address from parsed SLB Cookie.')
slbParsingRip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbParsingRip.setStatus('current')
if mibBuilder.loadTexts: slbParsingRip.setDescription('The Real IP address from parsed SLB Cookie.')
slbParsingRport = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbParsingRport.setStatus('current')
if mibBuilder.loadTexts: slbParsingRport.setDescription('The Real Port Number from parsed SLB Cookie.')
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER7-MIB", slbNewCfgUrlRedirCookieOrigSrv=slbNewCfgUrlRedirCookieOrigSrv, slbCurCfgUrlLbCaseSensitiveStrMatch=slbCurCfgUrlLbCaseSensitiveStrMatch, slbNewCfgSdpPrivAddr=slbNewCfgSdpPrivAddr, slbNewCfgUrlLbPathTable=slbNewCfgUrlLbPathTable, urlSpMaintStatsLowestMemUnits=urlSpMaintStatsLowestMemUnits, activeServerConns=activeServerConns, slbNewCfgUrlLbBwmContract=slbNewCfgUrlLbBwmContract, urlMaintStatUBufAllocFails=urlMaintStatUBufAllocFails, slbCurCfgUrlHttpMethodsTableEntry=slbCurCfgUrlHttpMethodsTableEntry, slbNewCfgUrlHttpMethodsTable=slbNewCfgUrlHttpMethodsTable, layer7Stats=layer7Stats, slbNewCfgUrlLbPathString=slbNewCfgUrlLbPathString, urlMaintStatReqTooLong=urlMaintStatReqTooLong, urlStatRedOrigSrvs=urlStatRedOrigSrvs, slbCurCfgUrlHttpMethodIndex=slbCurCfgUrlHttpMethodIndex, slbCurCfgUrlLbErrorMsg=slbCurCfgUrlLbErrorMsg, urlMaintStatAgedSessions=urlMaintStatAgedSessions, layer7Info=layer7Info, slbNewCfgUrlLbPathTableEntry=slbNewCfgUrlLbPathTableEntry, urlMaintStatTotalDataBufAllocs=urlMaintStatTotalDataBufAllocs, slbNewCfgUrlRedirHeaderName=slbNewCfgUrlRedirHeaderName, urlMaintStatLowestSPMemUnits=urlMaintStatLowestSPMemUnits, slbCurCfgUrlRedirHeaderName=slbCurCfgUrlRedirHeaderName, slbCurCfgUrlRedirNonGetOrigSrv=slbCurCfgUrlRedirNonGetOrigSrv, urlMaintStatTotalDataBufFrees=urlMaintStatTotalDataBufFrees, slbCurCfgUrlLbPathOffset=slbCurCfgUrlLbPathOffset, slbNewCfgSdpTableEntry=slbNewCfgSdpTableEntry, urlMaintStatMaxSessPerBucket=urlMaintStatMaxSessPerBucket, urlMaintStatCurDataBufUse=urlMaintStatCurDataBufUse, slbCurCfgUrlLbPathHTTPHeaderValue=slbCurCfgUrlLbPathHTTPHeaderValue, urlMaintStatCurSPBufEntries=urlMaintStatCurSPBufEntries, availServerConns=availServerConns, urlMaintStatClientReset=urlMaintStatClientReset, slbParsingString=slbParsingString, slbNewCfgUrlLbPathPatternStringType=slbNewCfgUrlLbPathPatternStringType, layer7=layer7, slbNewCfgUrlHttpMethodsTableEntry=slbNewCfgUrlHttpMethodsTableEntry, slbCurCfgUrlLbPathTableEntry=slbCurCfgUrlLbPathTableEntry, slbCurCfgUrlLbPathOper=slbCurCfgUrlLbPathOper, urlMaintStatServerReset=urlMaintStatServerReset, slbUrlRedir=slbUrlRedir, slbCurCfgUrlRedirNoCacheOrigSrv=slbCurCfgUrlRedirNoCacheOrigSrv, slbNewCfgSdpDelete=slbNewCfgSdpDelete, urlStatRedRtspCacheSrvs=urlStatRedRtspCacheSrvs, urlStatRedRtspOrigSrvs=urlStatRedRtspOrigSrvs, urlStatRedNoCache=urlStatRedNoCache, slbParsingVip=slbParsingVip, slbUrlLbPathTableMaxSize=slbUrlLbPathTableMaxSize, slbNewCfgUrlLbPathOffset=slbNewCfgUrlLbPathOffset, urlMaintStatConnSplicing=urlMaintStatConnSplicing, urlMaintStatHighestSEQBufEntries=urlMaintStatHighestSEQBufEntries, agedOutServerConns=agedOutServerConns, slbCurCfgUrlRedirHeader=slbCurCfgUrlRedirHeader, slbCurCfgUrlHttpMethodsTable=slbCurCfgUrlHttpMethodsTable, slbSdpTableMaxSize=slbSdpTableMaxSize, slbParsingRip=slbParsingRip, urlMaintStatSeqBufAllocFails=urlMaintStatSeqBufAllocFails, urlMaintStatCurSPMemUnits=urlMaintStatCurSPMemUnits, slbNewCfgUrlRedirUriHashLength=slbNewCfgUrlRedirUriHashLength, slbNewCfgUrlLbPathDelete=slbNewCfgUrlLbPathDelete, slbNewCfgUrlLbPathDepth=slbNewCfgUrlLbPathDepth, urlCfg=urlCfg, urlStatSlbPathIndex=urlStatSlbPathIndex, connPoolingStats=connPoolingStats, slbCurCfgSdpPrivAddr=slbCurCfgSdpPrivAddr, slbNewCfgUrlRedirNoCacheOrigSrv=slbNewCfgUrlRedirNoCacheOrigSrv, slbNewCfgSdpTable=slbNewCfgSdpTable, urlMaintStatHighestDataBufUse=urlMaintStatHighestDataBufUse, slbNewCfgUrlLbPathIndex=slbNewCfgUrlLbPathIndex, urlStatRedNonGets=urlStatRedNonGets, urlSpMaintStatsSpIndex=urlSpMaintStatsSpIndex, layer7Configs=layer7Configs, slbNewCfgUrlLbErrorMsg=slbNewCfgUrlLbErrorMsg, urlMaintStatHighestSPBufEntries=urlMaintStatHighestSPBufEntries, urlRedirStats=urlRedirStats, layer7Oper=layer7Oper, slbCurCfgUrlLbPathString=slbCurCfgUrlLbPathString, slbCurCfgUrlRedirCookieOrigSrv=slbCurCfgUrlRedirCookieOrigSrv, urlMaintStats=urlMaintStats, slbCurCfgUrlLbPathIndex=slbCurCfgUrlLbPathIndex, urlStatSlbPathHits=urlStatSlbPathHits, slbNewCfgUrlHttpMethodString=slbNewCfgUrlHttpMethodString, urlMaintStatTotalSEQBufAllocs=urlMaintStatTotalSEQBufAllocs, slbNewCfgSdpPublicAddr=slbNewCfgSdpPublicAddr, slbNewCfgSdpIndex=slbNewCfgSdpIndex, slbNewCfgUrlLbPathOper=slbNewCfgUrlLbPathOper, slbNewCfgUrlRedirNonGetOrigSrv=slbNewCfgUrlRedirNonGetOrigSrv, urlStatRedStraightOrigSrvs=urlStatRedStraightOrigSrvs, slbCurCfgSdpPublicAddr=slbCurCfgSdpPublicAddr, slbCurCfgUrlLbPathDepth=slbCurCfgUrlLbPathDepth, urlSpMaintStatsTable=urlSpMaintStatsTable, slbUrlHttpMethodsTableMaxSize=slbUrlHttpMethodsTableMaxSize, slbCurCfgSdpTableEntry=slbCurCfgSdpTableEntry, urlStatSlbPathTable=urlStatSlbPathTable, urlMaintStatInvalidHandshakes=urlMaintStatInvalidHandshakes, slbCurCfgSdpTable=slbCurCfgSdpTable, PYSNMP_MODULE_ID=layer7, urlMaintStatTotalNonZeroSEQAlloc=urlMaintStatTotalNonZeroSEQAlloc, urlStats=urlStats, slbCurCfgUrlLbPathPatternStringType=slbCurCfgUrlLbPathPatternStringType, urlMaintStatCurSEQBufEntries=urlMaintStatCurSEQBufEntries, agedOutClientConns=agedOutClientConns, urlSpMaintStatsTableEntry=urlSpMaintStatsTableEntry, urlMaintStatInvalidMethods=urlMaintStatInvalidMethods, urlMaintStatMaxBytesBuffered=urlMaintStatMaxBytesBuffered, urlSlbStats=urlSlbStats, urlSpMaintStatsCurMemUnits=urlSpMaintStatsCurMemUnits, slbNewCfgUrlHttpMethodIndex=slbNewCfgUrlHttpMethodIndex, urlMaintStatHalfOpens=urlMaintStatHalfOpens, layer7NewCfgDbindTimeout=layer7NewCfgDbindTimeout, slbCurCfgSdpIndex=slbCurCfgSdpIndex, slbCurCfgUrlRedirUriHashLength=slbCurCfgUrlRedirUriHashLength, urlMaintStatMaxFramesPerSess=urlMaintStatMaxFramesPerSess, currOpenedServerConns=currOpenedServerConns, slbNewCfgUrlLbPathHTTPHeaderValue=slbNewCfgUrlLbPathHTTPHeaderValue, slbUrlHttpMethods=slbUrlHttpMethods, sdpCfg=sdpCfg, urlMaintStatRandomEarlyDrops=urlMaintStatRandomEarlyDrops, urlStatRedCookie=urlStatRedCookie, slbCurCfgUrlHttpMethodString=slbCurCfgUrlHttpMethodString, slbCurCfgUrlLbBwmContract=slbCurCfgUrlLbBwmContract, urlMaintStatSwitchRetries=urlMaintStatSwitchRetries, layer7GeneralCfg=layer7GeneralCfg, slbUrlBalance=slbUrlBalance, slbNewCfgUrlLbCaseSensitiveStrMatch=slbNewCfgUrlLbCaseSensitiveStrMatch, slbNewCfgUrlLbPathHTTPHeader=slbNewCfgUrlLbPathHTTPHeader, urlStatSlbPathTableEntry=urlStatSlbPathTableEntry, slbNewCfgUrlRedirHeader=slbNewCfgUrlRedirHeader, slbParsingRport=slbParsingRport, urlStatRedRedirs=urlStatRedRedirs, slbCurCfgUrlLbPathHTTPHeader=slbCurCfgUrlLbPathHTTPHeader, urlMaintStatTotalSEQBufFrees=urlMaintStatTotalSEQBufFrees, slbNewCfgUrlHttpMethodDelete=slbNewCfgUrlHttpMethodDelete, layer7CurCfgDbindTimeout=layer7CurCfgDbindTimeout, slbCurCfgUrlLbPathTable=slbCurCfgUrlLbPathTable, slbParsing=slbParsing)
