#
# PySNMP MIB module RS-XX9-LIQUID-COOLING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-LIQUID-COOLING-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 16:02:52 2024
# On host fv-az1205-935 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
commonNotificationAlarmClass, = mibBuilder.importSymbols("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass")
rsXx9MibModule, rsXx9LiquidCooling = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9MibModule", "rsXx9LiquidCooling")
SwitchOnOff, NotificationMask, NotificationState, NotificationPriority = mibBuilder.importSymbols("RS-XX9-TC-MIB", "SwitchOnOff", "NotificationMask", "NotificationState", "NotificationPriority")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, Counter64, Counter32, ModuleIdentity, MibIdentifier, Gauge32, Bits, IpAddress, NotificationType, Unsigned32, ObjectIdentity, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "Counter32", "ModuleIdentity", "MibIdentifier", "Gauge32", "Bits", "IpAddress", "NotificationType", "Unsigned32", "ObjectIdentity", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rsXx9LqMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 100))
rsXx9LqMibModule.setRevisions(('2015-11-30 17:00', '2015-08-20 15:00', '2015-06-23 12:00', '2015-02-27 15:00', '2014-12-22 16:00', '2013-10-07 12:00', '2013-01-31 13:00', '2012-05-11 08:00', '2012-01-26 08:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsXx9LqMibModule.setRevisionsDescriptions(('removed lqFStFanIdx from complianceStatement to be SMI compliant', 'extended CycleIdx from 8 to max 12 cycles\n                added compactCfgServiceMode', 'added compactCoolingConfigTable, lqStCompactCompensateMode, lqStCompactRelayState, lqStCompactPumpDesiredSpeed\n                added lqCfgAutoOn', 'updated description texts', 'updated description texts\n                ', 'extend liquid cooling cycle range from 1..2 to 1..8. \n                Up to 8 cooling cycles are now possible for each system.', 'lqStInletTemperatureFaultLimit,\n                lqStInletTemperatureWarningLimit\n                obsoleted', 'Initial revision', 'Preliminary release.',))
if mibBuilder.loadTexts: rsXx9LqMibModule.setLastUpdated('201511301700Z')
if mibBuilder.loadTexts: rsXx9LqMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
if mibBuilder.loadTexts: rsXx9LqMibModule.setContactInfo('Rohde & Schwarz GmbH & Co. KG\n                Broadcasting Division\n                \n                Muehldorfstrasse 15\n                81671 Munich\n                Germany\n                \n                customersupport@rohde-schwarz.com')
if mibBuilder.loadTexts: rsXx9LqMibModule.setDescription('This MIB defines liquid cooling specific objects\n                of XX9000 transmitting systems from Rohde & Schwarz.\n                \n                The following MIBs are related to this:\n                - RS-COMMON-MIB         - mandatory for this MIB.\n                - RS-XX9-SMI-MIB        - mandatory for this MIB.\n                - RS-XX9-TC-MIB         - mandatory for this MIB.\n                - RS-XX9-COMMON-MIB     - mandatory for this MIB.')
rsXx9LiquidCoolingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 0))
lqSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationPriority"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationState"))
if mibBuilder.loadTexts: lqSummary.setStatus('current')
if mibBuilder.loadTexts: lqSummary.setDescription('The cooling, assigned to this transmitter, reports a failure. \n                To get more information check the system logbook and the \n                shared system cooling.\n                \n                Possible values:\n                off(2)       -\n                fault(3)     - \n                warning(4)   - \n                ok(5)        - \n                \n                Notification class: fault')
lqFilterSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationPriority"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationState"))
if mibBuilder.loadTexts: lqFilterSummary.setStatus('current')
if mibBuilder.loadTexts: lqFilterSummary.setDescription('Indicates a polluted filter in cooling cycle. \n                Please clean the filter located to the pump unit.\n                \n                Possible values:\n                off(2)       -\n                warning(4)   - liquid filter is polluted\n                ok(5)        - liquid filter is clean\n                \n                Notification class: warning')
lqSensorsSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 0, 3)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationPriority"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationState"))
if mibBuilder.loadTexts: lqSensorsSummary.setStatus('current')
if mibBuilder.loadTexts: lqSensorsSummary.setDescription('Liquid cooling sensors\n                (inlet temperature, outlet temperature, pressure)\n                summary state.\n                \n                Possible values:\n                off(2)       -\n                fault(3)     - pressure sensor fault\n                warning(4)   - temperature sensor warning\n                ok(5)        - \n                \n                Notification class: warning')
lqSiteWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 0, 4)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationPriority"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationState"))
if mibBuilder.loadTexts: lqSiteWarning.setStatus('current')
if mibBuilder.loadTexts: lqSiteWarning.setDescription('Warnings from the site cooling system.\n                Applicable only if the appropriate signals from the site cooling system\n                are supplied via terminal x8000 of the mains distribution board (MDB).\n                \n                Possible values:\n                off(2)       -\n                warning(4)   - \n                ok(5)        - \n                \n                Notification class: warning')
lqSiteFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 0, 5)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationPriority"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationState"))
if mibBuilder.loadTexts: lqSiteFault.setStatus('current')
if mibBuilder.loadTexts: lqSiteFault.setDescription('Faults from the site cooling system.\n                Applicable only if the appropriate signals from the site cooling system\n                are supplied via terminal x8000 of the mains distribution board (MDB).\n                \n                Possible values:\n                off(2)     -\n                fault(3)   - \n                ok(5)      - \n                \n                Notification class: warning')
rsXx9LiquidCoolingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1))
lqStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1))
lqNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1), )
if mibBuilder.loadTexts: lqNotificationTable.setStatus('current')
if mibBuilder.loadTexts: lqNotificationTable.setDescription('The context information/configuration for the\n                liquid cooling status notifications.')
lqNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-LIQUID-COOLING-MIB", "lqNotificationCycleIdx"), (0, "RS-XX9-LIQUID-COOLING-MIB", "lqNotificationIdx"))
if mibBuilder.loadTexts: lqNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: lqNotificationEntry.setDescription('An entry in the lqNotificationTable.')
lqNotificationCycleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: lqNotificationCycleIdx.setStatus('current')
if mibBuilder.loadTexts: lqNotificationCycleIdx.setDescription('Liquid cooling cycle index.')
lqNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: lqNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: lqNotificationIdx.setDescription('The notification number as below rsXx9LiquidCoolingNotifications.\n                This is a helper column and therefore not-accessible.')
lqNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lqSummary", 1), ("lqFilterSummary", 2), ("lqSensorsSummary", 3), ("lqSiteWarning", 4), ("lqSiteFault", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqNotificationName.setStatus('current')
if mibBuilder.loadTexts: lqNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications\n                under rsXx9LiquidCoolingNotifications.')
lqNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqNotificationMask.setStatus('current')
if mibBuilder.loadTexts: lqNotificationMask.setDescription('See textual convention for details.')
lqNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: lqNotificationPriority.setDescription('See textual convention for details.')
lqNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqNotificationState.setStatus('current')
if mibBuilder.loadTexts: lqNotificationState.setDescription('See textual convention for details.')
lqStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2), )
if mibBuilder.loadTexts: lqStateTable.setStatus('current')
if mibBuilder.loadTexts: lqStateTable.setDescription('Liquid cooling state information.')
lqStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1), ).setIndexNames((0, "RS-XX9-LIQUID-COOLING-MIB", "lqNotificationCycleIdx"))
if mibBuilder.loadTexts: lqStateEntry.setStatus('current')
if mibBuilder.loadTexts: lqStateEntry.setDescription('An entry in the lqStateTable.')
lqStInletTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 2), Integer32()).setUnits('degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStInletTemperature.setStatus('current')
if mibBuilder.loadTexts: lqStInletTemperature.setDescription('Temperature of the pouring in coolant.')
lqStInletTemperatureSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 3), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStInletTemperatureSensor.setStatus('current')
if mibBuilder.loadTexts: lqStInletTemperatureSensor.setDescription('Indicates whether the inlet temperature sensor is working.\n                If a fault is displayed, please check the connection between\n                sensor and cooling interface which is located in TCE900 System Control.\n                fault(3) - sensor fault\n                ok(5)    - sensor is working.\n                ')
lqStInletTemperatureSumState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 4), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStInletTemperatureSumState.setStatus('current')
if mibBuilder.loadTexts: lqStInletTemperatureSumState.setDescription('Indicates whether the inlet temperature of coolant is \n                too high. If this problem is not caused by the ambient \n                air temperature of heat exchangers the pumps and the \n                fans of heat exchanger should be checked and the \n                filter should be cleaned.\n                \n                fault(3)   - exceeds fault limit\n                warning(4) - exceeds warning limit\n                ok(5)      - is ok\n                ')
lqStOutletTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 5), Integer32()).setUnits('degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStOutletTemperature.setStatus('current')
if mibBuilder.loadTexts: lqStOutletTemperature.setDescription('Temperature of coolant before going into heat exchanger.')
lqStOutletTemperatureSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStOutletTemperatureSensor.setStatus('current')
if mibBuilder.loadTexts: lqStOutletTemperatureSensor.setDescription(' Indicates the status of the temperature sensor at the outlet of the rack.')
lqStOutletTemperatureSumState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStOutletTemperatureSumState.setStatus('current')
if mibBuilder.loadTexts: lqStOutletTemperatureSumState.setDescription('Indicates whether the outlet temperature of coolant is too high. \n                If this problem is not caused by the ambient air temperature of \n                heat exchangers the pumps and the fans of heat exchanger \n                should be checked and the filter should be cleaned. \n                The display of this alarm disappears when the outlet \n                temperature is lower than the selected warning limit.\n                \n                off(2)\n                fault(3)   - exceeds fault limit\n                warning(4) - exceeds warning limit\n                ok(5)      - is ok')
lqStCoolantPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 8), Unsigned32()).setUnits('deci bar').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStCoolantPressure.setStatus('current')
if mibBuilder.loadTexts: lqStCoolantPressure.setDescription('Coolant pressure.')
lqStCoolantPressureSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 9), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStCoolantPressureSensor.setStatus('current')
if mibBuilder.loadTexts: lqStCoolantPressureSensor.setDescription('Coolant pressure sensor state.')
lqStCoolantPressureSumState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 10), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStCoolantPressureSumState.setStatus('current')
if mibBuilder.loadTexts: lqStCoolantPressureSumState.setDescription('Indicates whether the coolant pressure is too low. \n                If a fault is displayed the cooling equipment should \n                be checked for a leakage and the filter should be cleaned.\n                \n                Possible values:\n                off(2)       -\n                fault(3)     - sensor fault\n                warning(4)   - \n                ok(5)        - \n                ')
lqStInletTemperatureFaultLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 11), Integer32()).setUnits('degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStInletTemperatureFaultLimit.setStatus('obsolete')
if mibBuilder.loadTexts: lqStInletTemperatureFaultLimit.setDescription('If the outlet temperature sensor is defective\n                then an inlet temperature exceeding this value\n                will lead to an error.')
lqStInletTemperatureWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 12), Integer32()).setUnits('degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStInletTemperatureWarningLimit.setStatus('obsolete')
if mibBuilder.loadTexts: lqStInletTemperatureWarningLimit.setDescription('If the outlet temperature sensor is defective\n                then an inlet temperature exceeding this value\n                will lead to a warning.')
lqStCompactPumpDesiredSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStCompactPumpDesiredSpeed.setStatus('current')
if mibBuilder.loadTexts: lqStCompactPumpDesiredSpeed.setDescription('Description.')
lqPumpStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3), )
if mibBuilder.loadTexts: lqPumpStateTable.setStatus('current')
if mibBuilder.loadTexts: lqPumpStateTable.setDescription('pump state information')
lqPumpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1), ).setIndexNames((0, "RS-XX9-LIQUID-COOLING-MIB", "lqNotificationCycleIdx"), (0, "RS-XX9-LIQUID-COOLING-MIB", "lqPStPumpIdx"))
if mibBuilder.loadTexts: lqPumpStateEntry.setStatus('current')
if mibBuilder.loadTexts: lqPumpStateEntry.setDescription('An entry in the lqPumpStateTable.')
lqPStPumpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: lqPStPumpIdx.setStatus('current')
if mibBuilder.loadTexts: lqPStPumpIdx.setDescription('pump index')
lqPStCommunicationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 3), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqPStCommunicationState.setStatus('current')
if mibBuilder.loadTexts: lqPStCommunicationState.setDescription('State of communication between TCE and pump.')
lqPStSumState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 4), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqPStSumState.setStatus('current')
if mibBuilder.loadTexts: lqPStSumState.setDescription('pump summary state')
lqPStMotorBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 5), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqPStMotorBlocked.setStatus('current')
if mibBuilder.loadTexts: lqPStMotorBlocked.setDescription('Indicates whether the pump motor can run freely or is \n                mechanically blocked. To rectify this fault, the pump \n                must be disassembled and checked for foreign objects.\n                \n                off(2)\n                fault(3)   - blocked\n                ok(5)\n                ')
lqPStOperatingHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 6), Unsigned32()).setUnits('hour').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqPStOperatingHours.setStatus('current')
if mibBuilder.loadTexts: lqPStOperatingHours.setDescription('Operating hours of pump.')
lqPStType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqPStType.setStatus('current')
if mibBuilder.loadTexts: lqPStType.setDescription("Indicates the used pump type. The displayed type is identical to \n                the type specified on the type plate of the pump. The type \n                'Magna2: 40-100' should be used for transmitters with up to 6 \n                amplifiers.  The type 'Magna2: 32-120' should be used for \n                transmitters with more than 6 amplifiers. \n                ")
lqPStCurrentFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 8), Unsigned32()).setUnits('liter per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqPStCurrentFlowRate.setStatus('current')
if mibBuilder.loadTexts: lqPStCurrentFlowRate.setDescription('current flow rate of pump')
lqPStCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 9), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqPStCurrentSpeed.setStatus('current')
if mibBuilder.loadTexts: lqPStCurrentSpeed.setDescription('rotational speed of pump motor')
lqFanStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4), )
if mibBuilder.loadTexts: lqFanStateTable.setStatus('current')
if mibBuilder.loadTexts: lqFanStateTable.setDescription('fan state table')
lqFanStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1), ).setIndexNames((0, "RS-XX9-LIQUID-COOLING-MIB", "lqNotificationCycleIdx"), (0, "RS-XX9-LIQUID-COOLING-MIB", "lqFStFanIdx"))
if mibBuilder.loadTexts: lqFanStateEntry.setStatus('current')
if mibBuilder.loadTexts: lqFanStateEntry.setDescription('An entry in the lqFanStateTable.')
lqFStFanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: lqFStFanIdx.setStatus('current')
if mibBuilder.loadTexts: lqFStFanIdx.setDescription('fan index')
lqFStCommunicationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1, 2), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqFStCommunicationState.setStatus('current')
if mibBuilder.loadTexts: lqFStCommunicationState.setDescription('Indicates whether the assigned fan is correctly registered \n                on the fan communication bus.  If a fault is displayed the \n                corresponding task to re-register the fans on its \n                communication bus should be started.\n                \n                \n                Possible values:\n                off(2)       -\n                fault(3)     - not found\n                ok(5)        - installed\n                ')
lqFStSumState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1, 3), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqFStSumState.setStatus('current')
if mibBuilder.loadTexts: lqFStSumState.setDescription('fan summary state')
lqFStMotorBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1, 4), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqFStMotorBlocked.setStatus('current')
if mibBuilder.loadTexts: lqFStMotorBlocked.setDescription('Shows whether the fan motor is mechanical blocked.')
lqFStOperatingHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1, 5), Unsigned32()).setUnits('hour').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqFStOperatingHours.setStatus('current')
if mibBuilder.loadTexts: lqFStOperatingHours.setDescription('fan operating hours')
lqFStSupplyFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqFStSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: lqFStSupplyFailure.setDescription('Shows whether the fan is disconnected from power supply.')
lqFStCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1, 7), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqFStCurrentSpeed.setStatus('current')
if mibBuilder.loadTexts: lqFStCurrentSpeed.setDescription('rotational speed of fan motor')
lqConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2))
lqConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1), )
if mibBuilder.loadTexts: lqConfigTable.setStatus('current')
if mibBuilder.loadTexts: lqConfigTable.setDescription('Liquid cooling configuration.')
lqConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1), ).setIndexNames((0, "RS-XX9-LIQUID-COOLING-MIB", "lqCfgCycleIdx"))
if mibBuilder.loadTexts: lqConfigEntry.setStatus('current')
if mibBuilder.loadTexts: lqConfigEntry.setDescription('An entry in the lqConfigTable table.')
lqCfgCycleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: lqCfgCycleIdx.setStatus('current')
if mibBuilder.loadTexts: lqCfgCycleIdx.setDescription('Liquid cooling cycle index.')
lqCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("coolingRS", 1), ("coolingSite", 2), ("coolingRSsmall", 3), ("cooling8000", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgType.setStatus('current')
if mibBuilder.loadTexts: lqCfgType.setDescription('coolingRS(1)      - XX9 cooling system\n                coolingSite(2)    - already existing site cooling\n                coolingRSsmall(3) - small XX9 cooling system\n                cooling8000(4)    - legacy XX8000 cooling system')
lqCfgHeatExchangersPerRack = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgHeatExchangersPerRack.setStatus('current')
if mibBuilder.loadTexts: lqCfgHeatExchangersPerRack.setDescription('Number of heat exchangers per rack.')
lqCfgFansPerHeatExchanger = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgFansPerHeatExchanger.setStatus('current')
if mibBuilder.loadTexts: lqCfgFansPerHeatExchanger.setDescription('Number of fans per heat exchanger.')
lqCfgCoolantSetPointTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 65))).setUnits('degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgCoolantSetPointTemperature.setStatus('current')
if mibBuilder.loadTexts: lqCfgCoolantSetPointTemperature.setDescription('The nominal value of the coolant temperature\n                for fan control.')
lqCfgCoolantTemperatureFaultLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 65))).setUnits('degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgCoolantTemperatureFaultLimit.setStatus('current')
if mibBuilder.loadTexts: lqCfgCoolantTemperatureFaultLimit.setDescription('A coolant temperature exceeding this value\n                will lead to an error.')
lqCfgCoolantTemperatureWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 65))).setUnits('degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgCoolantTemperatureWarningLimit.setStatus('current')
if mibBuilder.loadTexts: lqCfgCoolantTemperatureWarningLimit.setDescription('A coolant temperature exceeding this value\n                will lead to a warning.')
lqCfgCoolantPressureFaultLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setUnits('deci bar').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgCoolantPressureFaultLimit.setStatus('current')
if mibBuilder.loadTexts: lqCfgCoolantPressureFaultLimit.setDescription('A coolant pressure equal or below this value\n                will lead to an error.')
lqCfgCoolantPressureWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setUnits('deci bar').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgCoolantPressureWarningLimit.setStatus('current')
if mibBuilder.loadTexts: lqCfgCoolantPressureWarningLimit.setDescription('A coolant pressure equal or below this value\n                will lead to a warning.')
lqCfgFanMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgFanMaxSpeed.setStatus('current')
if mibBuilder.loadTexts: lqCfgFanMaxSpeed.setDescription('You can diminish the fan speed for noise reduction.\n                But this may lead to an unwanted increase of\n                coolant temperature.')
lqCfgPumpsExtraFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setUnits('10 liter per minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgPumpsExtraFlowRate.setStatus('current')
if mibBuilder.loadTexts: lqCfgPumpsExtraFlowRate.setDescription('If the cooling system is used for further components\n                the flow rate can be increased in two steps.\n                ')
lqCfgAntiFreeze = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 12), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgAntiFreeze.setStatus('current')
if mibBuilder.loadTexts: lqCfgAntiFreeze.setDescription('Used to define whether or not the fans at the heat exchanger are \n                to switch off if the temperature drops well below the specified \n                temperature. \n                \n                off(2): The fans switch off. This setting is recommended in order \n                to reduce the energy consumption of the cooling system. \n                on(1): The fans continue to run even at low outside temperatures. \n                This setting is recommended if the risk of fan seizure due to \n                freezing is to be reduced. Note: Even if antifreeze mode is active, \n                the condensation protection function of the transmitter will still \n                switch off the fans at an inlet temperature below approx. +10 deg C. \n                The fans are designed in such a way that they are not damaged \n                if they seize up due to freezing.\n                ')
lqCfgAutoOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alwaysOn", 1), ("autoOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgAutoOn.setStatus('current')
if mibBuilder.loadTexts: lqCfgAutoOn.setDescription('If set to alwaysOn(1), the cooling system is switched on irrespective of whether or not the transmitter is on. \n                This setting should only be used when putting the system into operation. If the switch is set to autoOn(2), \n                the cooling system is switched on/off when the transmitter is switched on/off.\n                ')
compactCoolingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2), )
if mibBuilder.loadTexts: compactCoolingConfigTable.setStatus('current')
if mibBuilder.loadTexts: compactCoolingConfigTable.setDescription('Compact liquid cooling configuration.')
compactCoolingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1), ).setIndexNames((0, "RS-XX9-LIQUID-COOLING-MIB", "compactCfgCycleIdx"))
if mibBuilder.loadTexts: compactCoolingConfigEntry.setStatus('current')
if mibBuilder.loadTexts: compactCoolingConfigEntry.setDescription('An entry in the compactCoolingConfigTable table.')
compactCfgCycleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: compactCfgCycleIdx.setStatus('current')
if mibBuilder.loadTexts: compactCfgCycleIdx.setDescription('Integrated small cooling cycle index.')
compactCfgHeatExchangers = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgHeatExchangers.setStatus('current')
if mibBuilder.loadTexts: compactCfgHeatExchangers.setDescription('Number of heat exchangers.')
compactCfgFans = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgFans.setStatus('current')
if mibBuilder.loadTexts: compactCfgFans.setDescription('Number of fans per heat exchanger.')
compactCfgCoolantTemperatureFaultLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 65))).setUnits('degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgCoolantTemperatureFaultLimit.setStatus('current')
if mibBuilder.loadTexts: compactCfgCoolantTemperatureFaultLimit.setDescription('A coolant temperature exceeding this value\n                will lead to an error.')
compactCfgCoolantTemperatureWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 65))).setUnits('degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgCoolantTemperatureWarningLimit.setStatus('current')
if mibBuilder.loadTexts: compactCfgCoolantTemperatureWarningLimit.setDescription('A coolant temperature exceeding this value\n                will lead to a warning.')
compactCfgCoolantPressureFaultLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setUnits('deci bar').setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgCoolantPressureFaultLimit.setStatus('current')
if mibBuilder.loadTexts: compactCfgCoolantPressureFaultLimit.setDescription('A coolant pressure equal or below this value\n                will lead to an error.')
compactCfgCoolantPressureWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setUnits('deci bar').setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgCoolantPressureWarningLimit.setStatus('current')
if mibBuilder.loadTexts: compactCfgCoolantPressureWarningLimit.setDescription('A coolant pressure equal or below this value\n                will lead to a warning.')
compactCfgPumpsExtraFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setUnits('10 liter per minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgPumpsExtraFlowRate.setStatus('current')
if mibBuilder.loadTexts: compactCfgPumpsExtraFlowRate.setDescription('If the cooling system is used for further components\n                the flow rate can be increased in two steps.\n                ')
compactCfgAutoOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alwaysOn", 1), ("autoOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgAutoOn.setStatus('current')
if mibBuilder.loadTexts: compactCfgAutoOn.setDescription('If set to alwaysOn(1), the cooling system is switched on irrespective of whether or not the transmitter is on. \n                This setting should only be used when putting the system into operation. If the switch is set to autoOn(2), \n                the cooling system is switched on/off when the transmitter is switched on/off.\n                ')
compactCfgServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 10), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgServiceMode.setStatus('current')
if mibBuilder.loadTexts: compactCfgServiceMode.setDescription('Reduces cooling faults to warnings temporariliy. To keep the transmitter on air \n                when changing a pump the service mode should be activated. The service mode \n                deactivates itself after 5 hours or after a reboot of the system control unit. \n                ')
rsXx9LiquidCoolingConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2))
rsXx9LqCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 1))
lqRsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 1, 1)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqObjCommon"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqObjRS"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqNotifyCommon"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqNotifyRS"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lqRsCompliance = lqRsCompliance.setStatus('current')
if mibBuilder.loadTexts: lqRsCompliance.setDescription('The compliance statement for the XX9000 liquid cooling system\n                if lqCfgType is coolingRS(1).')
lqSiteCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 1, 2)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqObjCommon"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqNotifyCommon"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqNotifySite"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lqSiteCompliance = lqSiteCompliance.setStatus('current')
if mibBuilder.loadTexts: lqSiteCompliance.setDescription('The compliance statement for the XX9000 liquid cooling system\n                if lqCfgType is coolingSite(2).')
lqRsSmallCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 1, 3)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqObjCommon"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqNotifyCommon"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqObjSmall"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lqRsSmallCompliance = lqRsSmallCompliance.setStatus('current')
if mibBuilder.loadTexts: lqRsSmallCompliance.setDescription('The compliance statement for the XX9000 liquid cooling system\n                if lqCfgType is coolingRSsmall(3).')
lqCompactCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 1, 4)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqNotifyCommon"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9CompactCoolingObjs"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9CompactCoolingNotify"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lqCompactCompliance = lqCompactCompliance.setStatus('current')
if mibBuilder.loadTexts: lqCompactCompliance.setDescription('The compliance statement for the XX9000 compact liquid cooling system.\n                ISCooling has a maximum number of 2 Fans. ')
rsXx9LqGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2))
rsXx9LqObjCommon = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 1)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationName"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationMask"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationPriority"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgType"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgCoolantTemperatureFaultLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgAutoOn"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgCoolantTemperatureWarningLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperature"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperatureSensor"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperatureSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStOutletTemperature"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStOutletTemperatureSensor"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStOutletTemperatureSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStCoolantPressure"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStCoolantPressureSensor"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStCoolantPressureSumState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9LqObjCommon = rsXx9LqObjCommon.setStatus('current')
if mibBuilder.loadTexts: rsXx9LqObjCommon.setDescription('common (non ISC) liquid cooling objects')
rsXx9LqObjRS = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 2)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqPStCommunicationState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqPStSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqPStMotorBlocked"), ("RS-XX9-LIQUID-COOLING-MIB", "lqPStOperatingHours"), ("RS-XX9-LIQUID-COOLING-MIB", "lqPStType"), ("RS-XX9-LIQUID-COOLING-MIB", "lqPStCurrentFlowRate"), ("RS-XX9-LIQUID-COOLING-MIB", "lqPStCurrentSpeed"), ("RS-XX9-LIQUID-COOLING-MIB", "lqFStCommunicationState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqFStSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqFStMotorBlocked"), ("RS-XX9-LIQUID-COOLING-MIB", "lqFStOperatingHours"), ("RS-XX9-LIQUID-COOLING-MIB", "lqFStSupplyFailure"), ("RS-XX9-LIQUID-COOLING-MIB", "lqFStCurrentSpeed"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgHeatExchangersPerRack"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgFansPerHeatExchanger"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgCoolantSetPointTemperature"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgCoolantPressureFaultLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgCoolantPressureWarningLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgFanMaxSpeed"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgPumpsExtraFlowRate"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgAntiFreeze"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9LqObjRS = rsXx9LqObjRS.setStatus('current')
if mibBuilder.loadTexts: rsXx9LqObjRS.setDescription('Additional R&S liquid cooling objects')
rsXx9LqObjSmall = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 3)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqCfgCoolantPressureFaultLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgCoolantPressureWarningLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9LqObjSmall = rsXx9LqObjSmall.setStatus('current')
if mibBuilder.loadTexts: rsXx9LqObjSmall.setDescription('Additional objects for small liquid cooling.')
rsXx9LqNotifyCommon = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 4)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9LqNotifyCommon = rsXx9LqNotifyCommon.setStatus('current')
if mibBuilder.loadTexts: rsXx9LqNotifyCommon.setDescription('common liquid cooling notifications')
rsXx9LqNotifyRS = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 5)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqFilterSummary"), ("RS-XX9-LIQUID-COOLING-MIB", "lqSensorsSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9LqNotifyRS = rsXx9LqNotifyRS.setStatus('current')
if mibBuilder.loadTexts: rsXx9LqNotifyRS.setDescription('Additional R&S liquid cooling notifications')
rsXx9LqNotifySite = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 6)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqSiteWarning"), ("RS-XX9-LIQUID-COOLING-MIB", "lqSiteFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9LqNotifySite = rsXx9LqNotifySite.setStatus('current')
if mibBuilder.loadTexts: rsXx9LqNotifySite.setDescription('Additional site liquid cooling notifications')
rsXx9LqObjsObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 7)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperatureFaultLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperatureWarningLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9LqObjsObsoleted = rsXx9LqObjsObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: rsXx9LqObjsObsoleted.setDescription('Obsoleted objects.')
rsXx9CompactCoolingObjs = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 100)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqPStType"), ("RS-XX9-LIQUID-COOLING-MIB", "lqFStSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStCoolantPressureSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStCoolantPressureSensor"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStCoolantPressure"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStOutletTemperatureSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStOutletTemperatureSensor"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStOutletTemperature"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperatureSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperatureSensor"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperature"), ("RS-XX9-LIQUID-COOLING-MIB", "lqPStSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationName"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationMask"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationPriority"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationState"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgHeatExchangers"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgCoolantTemperatureFaultLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgCoolantTemperatureWarningLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgCoolantPressureFaultLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgCoolantPressureWarningLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgPumpsExtraFlowRate"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStCompactPumpDesiredSpeed"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgServiceMode"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgAutoOn"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgFans"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9CompactCoolingObjs = rsXx9CompactCoolingObjs.setStatus('current')
if mibBuilder.loadTexts: rsXx9CompactCoolingObjs.setDescription('Compact liquid cooling objects.')
rsXx9CompactCoolingNotify = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 200)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqSensorsSummary"), ("RS-XX9-LIQUID-COOLING-MIB", "lqSiteWarning"), ("RS-XX9-LIQUID-COOLING-MIB", "lqSiteFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9CompactCoolingNotify = rsXx9CompactCoolingNotify.setStatus('current')
if mibBuilder.loadTexts: rsXx9CompactCoolingNotify.setDescription('Compact liquid cooling notifications.')
mibBuilder.exportSymbols("RS-XX9-LIQUID-COOLING-MIB", rsXx9LiquidCoolingConformance=rsXx9LiquidCoolingConformance, lqNotificationMask=lqNotificationMask, rsXx9CompactCoolingNotify=rsXx9CompactCoolingNotify, rsXx9LqMibModule=rsXx9LqMibModule, rsXx9CompactCoolingObjs=rsXx9CompactCoolingObjs, lqFStCommunicationState=lqFStCommunicationState, lqStatus=lqStatus, lqCfgFanMaxSpeed=lqCfgFanMaxSpeed, compactCfgFans=compactCfgFans, rsXx9LiquidCoolingObjects=rsXx9LiquidCoolingObjects, compactCoolingConfigEntry=compactCoolingConfigEntry, lqCompactCompliance=lqCompactCompliance, lqFanStateEntry=lqFanStateEntry, lqNotificationPriority=lqNotificationPriority, compactCfgCycleIdx=compactCfgCycleIdx, rsXx9LqObjsObsoleted=rsXx9LqObjsObsoleted, lqNotificationState=lqNotificationState, lqStInletTemperature=lqStInletTemperature, lqFStCurrentSpeed=lqFStCurrentSpeed, lqConfigEntry=lqConfigEntry, lqPStCurrentSpeed=lqPStCurrentSpeed, lqStCompactPumpDesiredSpeed=lqStCompactPumpDesiredSpeed, compactCfgCoolantTemperatureWarningLimit=compactCfgCoolantTemperatureWarningLimit, lqCfgCoolantTemperatureWarningLimit=lqCfgCoolantTemperatureWarningLimit, lqSiteFault=lqSiteFault, lqSummary=lqSummary, lqCfgCoolantSetPointTemperature=lqCfgCoolantSetPointTemperature, lqSensorsSummary=lqSensorsSummary, lqPStSumState=lqPStSumState, lqCfgHeatExchangersPerRack=lqCfgHeatExchangersPerRack, lqCfgAntiFreeze=lqCfgAntiFreeze, lqFanStateTable=lqFanStateTable, compactCfgHeatExchangers=compactCfgHeatExchangers, lqStateTable=lqStateTable, lqStCoolantPressure=lqStCoolantPressure, lqStOutletTemperatureSumState=lqStOutletTemperatureSumState, lqNotificationCycleIdx=lqNotificationCycleIdx, lqNotificationEntry=lqNotificationEntry, lqFStFanIdx=lqFStFanIdx, PYSNMP_MODULE_ID=rsXx9LqMibModule, compactCfgCoolantPressureFaultLimit=compactCfgCoolantPressureFaultLimit, rsXx9LqCompliances=rsXx9LqCompliances, compactCfgCoolantTemperatureFaultLimit=compactCfgCoolantTemperatureFaultLimit, lqCfgType=lqCfgType, lqStInletTemperatureWarningLimit=lqStInletTemperatureWarningLimit, compactCfgPumpsExtraFlowRate=compactCfgPumpsExtraFlowRate, rsXx9LqGroups=rsXx9LqGroups, rsXx9LqObjRS=rsXx9LqObjRS, lqCfgAutoOn=lqCfgAutoOn, lqStateEntry=lqStateEntry, lqPStPumpIdx=lqPStPumpIdx, lqFStOperatingHours=lqFStOperatingHours, lqNotificationName=lqNotificationName, lqFStMotorBlocked=lqFStMotorBlocked, lqCfgCoolantPressureFaultLimit=lqCfgCoolantPressureFaultLimit, lqSiteWarning=lqSiteWarning, lqConfigTable=lqConfigTable, lqConfiguration=lqConfiguration, lqStOutletTemperature=lqStOutletTemperature, lqCfgPumpsExtraFlowRate=lqCfgPumpsExtraFlowRate, compactCfgAutoOn=compactCfgAutoOn, compactCfgCoolantPressureWarningLimit=compactCfgCoolantPressureWarningLimit, lqFStSumState=lqFStSumState, lqNotificationTable=lqNotificationTable, lqFilterSummary=lqFilterSummary, compactCfgServiceMode=compactCfgServiceMode, lqCfgCoolantPressureWarningLimit=lqCfgCoolantPressureWarningLimit, lqCfgFansPerHeatExchanger=lqCfgFansPerHeatExchanger, lqStInletTemperatureSensor=lqStInletTemperatureSensor, lqStCoolantPressureSensor=lqStCoolantPressureSensor, lqStInletTemperatureFaultLimit=lqStInletTemperatureFaultLimit, lqStCoolantPressureSumState=lqStCoolantPressureSumState, lqCfgCoolantTemperatureFaultLimit=lqCfgCoolantTemperatureFaultLimit, lqPStCommunicationState=lqPStCommunicationState, lqRsSmallCompliance=lqRsSmallCompliance, lqPumpStateEntry=lqPumpStateEntry, lqRsCompliance=lqRsCompliance, lqStInletTemperatureSumState=lqStInletTemperatureSumState, lqStOutletTemperatureSensor=lqStOutletTemperatureSensor, rsXx9LqObjCommon=rsXx9LqObjCommon, rsXx9LiquidCoolingNotifications=rsXx9LiquidCoolingNotifications, lqCfgCycleIdx=lqCfgCycleIdx, rsXx9LqNotifyCommon=rsXx9LqNotifyCommon, lqPStType=lqPStType, lqFStSupplyFailure=lqFStSupplyFailure, rsXx9LqNotifyRS=rsXx9LqNotifyRS, lqPStOperatingHours=lqPStOperatingHours, compactCoolingConfigTable=compactCoolingConfigTable, rsXx9LqObjSmall=rsXx9LqObjSmall, rsXx9LqNotifySite=rsXx9LqNotifySite, lqNotificationIdx=lqNotificationIdx, lqPumpStateTable=lqPumpStateTable, lqPStCurrentFlowRate=lqPStCurrentFlowRate, lqPStMotorBlocked=lqPStMotorBlocked, lqSiteCompliance=lqSiteCompliance)
