#
# PySNMP MIB module EQLACCESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/equallogic/EQLACCESS-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 13:05:27 2024
# On host fv-az1249-950 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
UTFString, eqlGroupId, eqlStorageGroupAdminAccountIndex = mibBuilder.importSymbols("EQLGROUP-MIB", "UTFString", "eqlGroupId", "eqlStorageGroupAdminAccountIndex")
eqliscsiVolumeIndex, eqliscsiLocalMemberId, ACLAppliesTo = mibBuilder.importSymbols("EQLVOLUME-MIB", "eqliscsiVolumeIndex", "eqliscsiLocalMemberId", "ACLAppliesTo")
equalLogic, = mibBuilder.importSymbols("EQUALLOGIC-SMI", "equalLogic")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, ObjectIdentity, MibIdentifier, NotificationType, Counter64, Counter32, Bits, TimeTicks, Gauge32, enterprises, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "ObjectIdentity", "MibIdentifier", "NotificationType", "Counter64", "Counter32", "Bits", "TimeTicks", "Gauge32", "enterprises", "IpAddress", "Integer32")
DisplayString, TextualConvention, RowStatus, TruthValue, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue", "RowPointer")
eqlAccessModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 12740, 24))
eqlAccessModule.setRevisions(('2012-05-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eqlAccessModule.setRevisionsDescriptions(('Initial revision',))
if mibBuilder.loadTexts: eqlAccessModule.setLastUpdated('201503171528Z')
if mibBuilder.loadTexts: eqlAccessModule.setOrganization('Dell Inc.')
if mibBuilder.loadTexts: eqlAccessModule.setContactInfo('Contact: Customer Support\n         Postal:  Dell Inc\n                  300 Innovative Way, Suite 301, Nashua, NH 03062\n         Tel:     +1 603-579-9762\n         E-mail:  US-NH-CS-TechnicalSupport@dell.com\n         WEB:     www.equallogic.com')
if mibBuilder.loadTexts: eqlAccessModule.setDescription('Dell Inc. Access Group information.\n\n        Copyright (c) 2012 by Dell, Inc. \n        \n        All rights reserved.  This software may not be copied, disclosed, \n        transferred, or used except in accordance with a license granted \n        by Dell, Inc.  This software embodies proprietary information \n        and trade secrets of Dell, Inc. \n        ')
eqlAccessObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 24, 1))
eqlAccessNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 24, 2))
eqlAccessConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 24, 3))
eqlAccessGroupTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 24, 1, 1), )
if mibBuilder.loadTexts: eqlAccessGroupTable.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupTable.setDescription('EqualLogic-Persistent\n      This table stores information for both access records and access \n      groups. This MIB table uses the same object to describe both. \n      Whether the object is an Access Group or Access Record is described \n      by its eqlAccessGroupType field.\n      TimeoutDelete:90')
eqlAccessGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 24, 1, 1, 1), ).setIndexNames((0, "EQLACCESS-MIB", "eqlAccessGroupIndex"))
if mibBuilder.loadTexts: eqlAccessGroupEntry.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupEntry.setDescription('An entry in the Access Group table.')
eqlAccessGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlAccessGroupIndex.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupIndex.setDescription('The index of the access group.')
eqlAccessGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupRowStatus.setDescription('Row status used to manage this row.')
eqlAccessGroupUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 1, 1, 3), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupUUID.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupUUID.setDescription('This field specifies a descriptive string that provides \n                     the UUID of the VMWare host used to create the Access Group.  \n                     The description can be up to 63 characters plus NULL.')
eqlAccessGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 1, 1, 4), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupName.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupName.setDescription('This field specifies a descriptive string that provides \n                     the name of the access group.  The description can be up \n                     to 31 characters plus NULL.')
eqlAccessGroupKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 1, 1, 5), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlAccessGroupKeyName.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupKeyName.setDescription('EQL-SECONDARY-KEY\n                     This field specifies the iSCSI profile sysprep version\n                     of eqlAccessGroupName. It is populated by the backend on a row-create.')
eqlAccessGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 1, 1, 6), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupDescription.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupDescription.setDescription('This field specifies a descriptive string that provides \n                     details of the access group.  The description can be up \n                     to 127 characters plus NULL.')
eqlAccessGroupAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupAdminKey.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupAdminKey.setDescription('This field specifies the unique key for identifying the administrator who owns this access group.')
eqlAccessGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("access-group", 1), ("access-record", 2))).clone('access-record')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupType.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupType.setDescription('This field describes whether the ACL is an access \n                     group or access record.')
eqlAccessGroupPrivacyFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("private", 2))).clone('private')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupPrivacyFlag.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupPrivacyFlag.setDescription('This field is used to mark if an access group is public\n                      (able to be used by any user) or private (only able to\n                      be used by the person who created it or group admin).')
eqlAccessGroupByTypeTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 24, 1, 2), )
if mibBuilder.loadTexts: eqlAccessGroupByTypeTable.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupByTypeTable.setDescription('Equallogic-Dynamic\n      This table displays information for access records and access groups,\n      like eqlAccessGroupTable, but partitioned by type (access-record, access-group),\n      which is part of the index (eqlAccessGroupType).')
eqlAccessGroupByTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 24, 1, 2, 1), ).setIndexNames((0, "EQLACCESS-MIB", "eqlAccessGroupType"), (0, "EQLACCESS-MIB", "eqlAccessGroupIndex"))
if mibBuilder.loadTexts: eqlAccessGroupByTypeEntry.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupByTypeEntry.setDescription('An entry in the Access Group By Type table.')
eqlAccessGroupByTypeUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 2, 1, 1), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupByTypeUUID.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupByTypeUUID.setDescription('This field specifies a descriptive string that provides \n                     the UUID of the VMWare host used to create the Access Group.  \n                     The description can be up to 63 characters plus NULL.')
eqlAccessGroupByTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 2, 1, 2), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupByTypeName.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupByTypeName.setDescription('This field specifies a descriptive string that provides \n                     the name of the access group.  The description can be up \n                     to 31 characters plus NULL.')
eqlAccessGroupByTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 2, 1, 3), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupByTypeDescription.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupByTypeDescription.setDescription('This field specifies a descriptive string that provides \n                     details of the access group.  The description can be up \n                     to 127 characters plus NULL.')
eqlAccessGroupByTypeAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupByTypeAdminKey.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupByTypeAdminKey.setDescription('This field specifies the unique key for identifying an access group.')
eqlAccessGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 24, 1, 3), )
if mibBuilder.loadTexts: eqlAccessGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupMemberTable.setDescription('EqualLogic-Persistent\n      This table represents a hierarchy of access groups via their corresonding\n      eqlAccessGroupIndex in the eqlAccessGroupTable.')
eqlAccessGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 24, 1, 3, 1), ).setIndexNames((0, "EQLACCESS-MIB", "eqlAccessGroupIndex"), (0, "EQLACCESS-MIB", "eqlAccessGroupChildIndex"))
if mibBuilder.loadTexts: eqlAccessGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupMemberEntry.setDescription('An entry in the Access Group Member table.')
eqlAccessGroupChildIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupChildIndex.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupChildIndex.setDescription('EQL-SECONDARY-KEY\n                     The eqlAccessGroupIndex in the eqlAccessGroupTable of the \n                     host access group which is associated with a cluster \n                     access group, which is defined by the index represented in \n                     eqlAccessGroupIndex of the full table index.')
eqlAccessGroupMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupMemberRowStatus.setDescription('Row status used to manage this row.')
eqlAccessPointTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 24, 1, 4), )
if mibBuilder.loadTexts: eqlAccessPointTable.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointTable.setDescription('EqualLogic-Persistent\n      This table stores stores information on all the configured access points.\n      One row for each access point that the PS-Admin creates.')
eqlAccessPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 24, 1, 4, 1), ).setIndexNames((0, "EQLACCESS-MIB", "eqlAccessGroupIndex"), (0, "EQLACCESS-MIB", "eqlAccessPointIndex"))
if mibBuilder.loadTexts: eqlAccessPointEntry.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointEntry.setDescription('An entry in the Access Point Table.')
eqlAccessPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlAccessPointIndex.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointIndex.setDescription('The index of the access point.')
eqlAccessPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointRowStatus.setDescription('Row status used to manage this row.')
eqlAccessPointInitiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 4, 1, 3), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 223))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessPointInitiatorName.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointInitiatorName.setDescription('The name of the iscsi initiator permitted to discover or login.')
eqlAccessPointInitiatorCHAPUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 4, 1, 4), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessPointInitiatorCHAPUserName.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointInitiatorCHAPUserName.setDescription('The 256 byte character name user name to be used for initiator \n                     authentication.')
eqlAccessPointDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 4, 1, 5), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessPointDescription.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointDescription.setDescription('This field specifies a descriptive string that provides \n                     details of the access group.  The description can be up \n                     to 127 characters plus NULL.')
eqlAccessPointAddrTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 24, 1, 5), )
if mibBuilder.loadTexts: eqlAccessPointAddrTable.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointAddrTable.setDescription('EqualLogic-Persistent\n      This table stores stores information on all the configured access points.\n      One row for each access point that the PS-Admin creates.')
eqlAccessPointAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 24, 1, 5, 1), ).setIndexNames((0, "EQLACCESS-MIB", "eqlAccessGroupIndex"), (0, "EQLACCESS-MIB", "eqlAccessPointIndex"), (0, "EQLACCESS-MIB", "eqlAccessPointAddrIndex"))
if mibBuilder.loadTexts: eqlAccessPointAddrEntry.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointAddrEntry.setDescription('An entry in the Access Point IP Address Table.')
eqlAccessPointAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlAccessPointAddrIndex.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointAddrIndex.setDescription('The index of the access point IP Address table.')
eqlAccessPointAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessPointAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointAddrRowStatus.setDescription('Row status used to manage this row.')
eqlAccessPointAddrInitiatorAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 5, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessPointAddrInitiatorAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointAddrInitiatorAddrType.setDescription('The IP version of the address of the initiator and corresponding wildcard\n                     allowed to access the target.')
eqlAccessPointAddrInitiatorAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 5, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessPointAddrInitiatorAddr.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointAddrInitiatorAddr.setDescription('The IP address of the initiator allowed to access the target.')
eqlAccessPointAddrInitiatorAddrWildcardType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 5, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessPointAddrInitiatorAddrWildcardType.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointAddrInitiatorAddrWildcardType.setDescription('The IP version of the address of the initiator and corresponding wildcard\n                     allowed to access the target.')
eqlAccessPointAddrInitiatorAddrWildcard = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 5, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessPointAddrInitiatorAddrWildcard.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointAddrInitiatorAddrWildcard.setDescription("The wildcard mask defines which portion of the eqlInitiatorAddress that\n                     does not have to match for the initiator to be permitted access to the volume.\n                     Type IPv4 mask is expressed in the form x.x.x.x, where x is 255 or 0.\n                     When x is 255, then that portion of the initiator's ip address must match.\n                     When x is 0, then that portion of the initiator's ip address does not have to match. ")
eqlAccessGroupObjectAssocTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 24, 1, 6), )
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocTable.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocTable.setDescription('EqualLogic-Persistent\n      This table stores stores information on all configured\n      Access Group to Object associations.\n      There is a row for each access group to volume association.')
eqlAccessGroupObjectAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 24, 1, 6, 1), ).setIndexNames((0, "EQLACCESS-MIB", "eqlAccessGroupIndex"), (0, "EQLACCESS-MIB", "eqlAccessGroupObjectAssocIndex"))
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocEntry.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocEntry.setDescription('An entry in the Access Group Object Association table.')
eqlAccessGroupObjectAssocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocIndex.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocIndex.setDescription('The index of the access group association table.')
eqlAccessGroupObjectAssocRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocRowStatus.setDescription('Row status used to manage this row.')
eqlAccessGroupObjectAssocOID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 6, 1, 3), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocOID.setReference('EQLVOLUME MIB')
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocOID.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocOID.setDescription('OID of the volume, folder, container, etc that this ACL is\n                     associated with.')
eqlAccessGroupObjectAssocFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 6, 1, 4), ACLAppliesTo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocFlag.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocFlag.setDescription('Flag that indicates type of object that the access group modifies.')
eqlAccessGroupObjectAssocCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vCenter", 1), ("gui", 2), ("cli", 3), ("other", 4))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocCreator.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupObjectAssocCreator.setDescription('This field identifies the creator of the Association.')
eqlAccessGroupVolumeAssocTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 24, 1, 7), )
if mibBuilder.loadTexts: eqlAccessGroupVolumeAssocTable.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupVolumeAssocTable.setDescription('EqualLogic-Dynamic\n      This table stores stores information on all configured\n      Volume to Access Group associations.\n      There is a row for each access group to volume association.')
eqlAccessGroupVolumeAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 24, 1, 7, 1), ).setIndexNames((0, "EQLACCESS-MIB", "eqlAccessGroupIndex"), (0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"), (0, "EQLVOLUME-MIB", "eqliscsiVolumeIndex"))
if mibBuilder.loadTexts: eqlAccessGroupVolumeAssocEntry.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupVolumeAssocEntry.setDescription('An entry in the Volume Access Group Association Table.')
eqlAccessGroupVolumeAssocFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 7, 1, 1), ACLAppliesTo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlAccessGroupVolumeAssocFlag.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupVolumeAssocFlag.setDescription('Flag that indicates type of object that the access group modifies.')
eqlAccessGroupVolumeAssocObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlAccessGroupVolumeAssocObjectIndex.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupVolumeAssocObjectIndex.setDescription('The index of the Access Group Object Association object in the \n\t             eqlAccessGroupObjectAssocTable.')
eqlVolumeAccessGroupAssocTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 24, 1, 8), )
if mibBuilder.loadTexts: eqlVolumeAccessGroupAssocTable.setStatus('current')
if mibBuilder.loadTexts: eqlVolumeAccessGroupAssocTable.setDescription('EqualLogic-Dynamic\n      This table shows information on access groups associated with a specific volume.\n      Each row reflects one association')
eqlVolumeAccessGroupAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 24, 1, 8, 1), ).setIndexNames((0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"), (0, "EQLVOLUME-MIB", "eqliscsiVolumeIndex"), (0, "EQLACCESS-MIB", "eqlAccessGroupIndex"))
if mibBuilder.loadTexts: eqlVolumeAccessGroupAssocEntry.setStatus('current')
if mibBuilder.loadTexts: eqlVolumeAccessGroupAssocEntry.setDescription('An entry in the Volume Access Group Association Table.')
eqlVolumeAccessGroupAssocFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 8, 1, 1), ACLAppliesTo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolumeAccessGroupAssocFlag.setStatus('current')
if mibBuilder.loadTexts: eqlVolumeAccessGroupAssocFlag.setDescription('Flag that indicates type of object that the access group modifies.')
eqlVolumeAccessGroupAssocObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolumeAccessGroupAssocObjectIndex.setStatus('current')
if mibBuilder.loadTexts: eqlVolumeAccessGroupAssocObjectIndex.setDescription('The index of the Access Group Object Association object in the \n\t             eqlAccessGroupObjectAssocTable.')
eqlAccessGroupSharedVolumeAssocTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 24, 1, 9), )
if mibBuilder.loadTexts: eqlAccessGroupSharedVolumeAssocTable.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupSharedVolumeAssocTable.setDescription('EqualLogic-Dynamic\n      This table stores stores information on all configured\n      Shared Volume to Access Group associations.\n      There is a row for each access group to shared volume association.')
eqlAccessGroupSharedVolumeAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 24, 1, 9, 1), ).setIndexNames((0, "EQLACCESS-MIB", "eqlAccessGroupIndex"), (0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"), (0, "EQLVOLUME-MIB", "eqliscsiVolumeIndex"))
if mibBuilder.loadTexts: eqlAccessGroupSharedVolumeAssocEntry.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupSharedVolumeAssocEntry.setDescription('An entry in the Volume Access Group Association Table.')
eqlAccessGroupSharedVolumeAssocFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 9, 1, 1), ACLAppliesTo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlAccessGroupSharedVolumeAssocFlag.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupSharedVolumeAssocFlag.setDescription('Flag that indicates type of object that the access group modifies.')
eqlAccessGroupSharedVolumeAssocObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlAccessGroupSharedVolumeAssocObjectIndex.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupSharedVolumeAssocObjectIndex.setDescription('The index of the Access Group Object Association object in the \n\t             eqlAccessGroupObjectAssocTable.')
eqlSharedVolumeAccessGroupAssocTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 24, 1, 10), )
if mibBuilder.loadTexts: eqlSharedVolumeAccessGroupAssocTable.setStatus('current')
if mibBuilder.loadTexts: eqlSharedVolumeAccessGroupAssocTable.setDescription('EqualLogic-Dynamic\n      This table shows information on access groups associated with a specific shared volume.\n      Each row reflects one association')
eqlSharedVolumeAccessGroupAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 24, 1, 10, 1), ).setIndexNames((0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"), (0, "EQLVOLUME-MIB", "eqliscsiVolumeIndex"), (0, "EQLACCESS-MIB", "eqlAccessGroupIndex"))
if mibBuilder.loadTexts: eqlSharedVolumeAccessGroupAssocEntry.setStatus('current')
if mibBuilder.loadTexts: eqlSharedVolumeAccessGroupAssocEntry.setDescription('An entry in the Volume Access Group Association Table.')
eqlSharedVolumeAccessGroupAssocFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 10, 1, 1), ACLAppliesTo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSharedVolumeAccessGroupAssocFlag.setStatus('current')
if mibBuilder.loadTexts: eqlSharedVolumeAccessGroupAssocFlag.setDescription('Flag that indicates type of object that the access group modifies.')
eqlSharedVolumeAccessGroupAssocObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSharedVolumeAccessGroupAssocObjectIndex.setStatus('current')
if mibBuilder.loadTexts: eqlSharedVolumeAccessGroupAssocObjectIndex.setDescription('The index of the Access Group Object Association object in the \n\t             eqlAccessGroupObjectAssocTable.')
eqlAdminAccountAccessGroupTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 24, 1, 11), )
if mibBuilder.loadTexts: eqlAdminAccountAccessGroupTable.setStatus('current')
if mibBuilder.loadTexts: eqlAdminAccountAccessGroupTable.setDescription('EqualLogic-Dynamic\n      This table shows information on admin account ownership for particular Access Groups.\n      Each row reflects one access group ownership.')
eqlAdminAccountAccessGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 24, 1, 11, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlStorageGroupAdminAccountIndex"), (0, "EQLACCESS-MIB", "eqlAccessGroupIndex"))
if mibBuilder.loadTexts: eqlAdminAccountAccessGroupEntry.setStatus('current')
if mibBuilder.loadTexts: eqlAdminAccountAccessGroupEntry.setDescription('An entry in the Admin Account Access Group Table.')
eqlAdminAccountAccessGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 11, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlAdminAccountAccessGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlAdminAccountAccessGroupRowStatus.setDescription('Row status used to manage this row.')
eqlAdminAccountAccessGroupAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-only", 1), ("read-write", 2))).clone('read-only')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlAdminAccountAccessGroupAccess.setStatus('current')
if mibBuilder.loadTexts: eqlAdminAccountAccessGroupAccess.setDescription('Administrative permission to the Access Group.')
eqlACLCountTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12), )
if mibBuilder.loadTexts: eqlACLCountTable.setStatus('current')
if mibBuilder.loadTexts: eqlACLCountTable.setDescription('EqualLogic-Dynamic\n      This table provides a count of the number of ACLs currently in the\n      system.  It is used by the front end to help with limit checking')
eqlACLCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"))
if mibBuilder.loadTexts: eqlACLCountEntry.setStatus('current')
if mibBuilder.loadTexts: eqlACLCountEntry.setDescription('An entry in the ACL Count table.')
eqlACLCountUserDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlACLCountUserDefined.setStatus('current')
if mibBuilder.loadTexts: eqlACLCountUserDefined.setDescription("Total number of User defined ACL's in the group.")
eqlACLCountMPIO = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlACLCountMPIO.setStatus('current')
if mibBuilder.loadTexts: eqlACLCountMPIO.setDescription("Total number of MPIO ACL's in the group.")
eqlACLCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlACLCountTotal.setStatus('current')
if mibBuilder.loadTexts: eqlACLCountTotal.setDescription("Total number of ACL's in the group.")
eqlMaxAccessGroupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMaxAccessGroupCount.setStatus('current')
if mibBuilder.loadTexts: eqlMaxAccessGroupCount.setDescription('Maximum number of Access Groups allowed in the group.')
eqlMaxAccessRecordCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMaxAccessRecordCount.setStatus('current')
if mibBuilder.loadTexts: eqlMaxAccessRecordCount.setDescription('Maximum number of Access Records allowed in the group.')
eqlMaxAccessPointCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMaxAccessPointCount.setStatus('current')
if mibBuilder.loadTexts: eqlMaxAccessPointCount.setDescription('Maximum number of Access Points allowed in the group.')
eqlMaxAccessPointIPAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMaxAccessPointIPAddrCount.setStatus('current')
if mibBuilder.loadTexts: eqlMaxAccessPointIPAddrCount.setDescription('Maximum number of Access Point IP Addresses allowed in the group.')
eqlMaxAssociationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMaxAssociationCount.setStatus('current')
if mibBuilder.loadTexts: eqlMaxAssociationCount.setDescription('Maximum number of Access Object to Volume associations allowed in the group.')
eqlAccessGroupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlAccessGroupCount.setStatus('current')
if mibBuilder.loadTexts: eqlAccessGroupCount.setDescription('Current number of Access Groups in the group.')
eqlAccessRecordCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlAccessRecordCount.setStatus('current')
if mibBuilder.loadTexts: eqlAccessRecordCount.setDescription('Current number of Access Records in the group.')
eqlAccessPointCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlAccessPointCount.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointCount.setDescription('Current number of Access Points in the group.')
eqlAccessPointIPAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlAccessPointIPAddrCount.setStatus('current')
if mibBuilder.loadTexts: eqlAccessPointIPAddrCount.setDescription('Current number of Access Point IP Addresses in the group.')
eqlAssociationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 12, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlAssociationCount.setStatus('current')
if mibBuilder.loadTexts: eqlAssociationCount.setDescription('Current number of Access Object to Volume associations in the group.')
eqlVolumeAccessGroupAssocCountTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 24, 1, 13), )
if mibBuilder.loadTexts: eqlVolumeAccessGroupAssocCountTable.setStatus('current')
if mibBuilder.loadTexts: eqlVolumeAccessGroupAssocCountTable.setDescription('EqualLogic-Dynamic\n      This table provides a count for the total number of access groups\n      and access records associated to a single volume.  Data is indexed by\n      volume.')
eqlVolumeAccessGroupAssocCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 24, 1, 13, 1), ).setIndexNames((0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"), (0, "EQLVOLUME-MIB", "eqliscsiVolumeIndex"))
if mibBuilder.loadTexts: eqlVolumeAccessGroupAssocCountEntry.setStatus('current')
if mibBuilder.loadTexts: eqlVolumeAccessGroupAssocCountEntry.setDescription('An entry in the ACL Association Count table.')
eqlVolumeAccessGroupAssocCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 13, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolumeAccessGroupAssocCount.setStatus('current')
if mibBuilder.loadTexts: eqlVolumeAccessGroupAssocCount.setDescription('Total count of access group associations for the volume.')
eqlVolumeAccessRecordAssocCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 24, 1, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolumeAccessRecordAssocCount.setStatus('current')
if mibBuilder.loadTexts: eqlVolumeAccessRecordAssocCount.setDescription('Total count of access record associations for the volume.')
mibBuilder.exportSymbols("EQLACCESS-MIB", eqlAccessPointAddrInitiatorAddrWildcardType=eqlAccessPointAddrInitiatorAddrWildcardType, eqlAccessGroupObjectAssocRowStatus=eqlAccessGroupObjectAssocRowStatus, eqlAccessGroupObjectAssocEntry=eqlAccessGroupObjectAssocEntry, eqlAccessConformance=eqlAccessConformance, eqlAccessGroupObjectAssocTable=eqlAccessGroupObjectAssocTable, eqlAccessPointTable=eqlAccessPointTable, eqlAccessGroupSharedVolumeAssocEntry=eqlAccessGroupSharedVolumeAssocEntry, eqlAccessPointAddrTable=eqlAccessPointAddrTable, eqlAccessGroupUUID=eqlAccessGroupUUID, eqlAccessPointAddrInitiatorAddrWildcard=eqlAccessPointAddrInitiatorAddrWildcard, eqlAdminAccountAccessGroupAccess=eqlAdminAccountAccessGroupAccess, eqlAccessGroupSharedVolumeAssocFlag=eqlAccessGroupSharedVolumeAssocFlag, eqlAccessGroupName=eqlAccessGroupName, eqlAccessGroupObjectAssocFlag=eqlAccessGroupObjectAssocFlag, eqlMaxAccessGroupCount=eqlMaxAccessGroupCount, eqlAccessGroupByTypeUUID=eqlAccessGroupByTypeUUID, eqlAccessGroupKeyName=eqlAccessGroupKeyName, eqlSharedVolumeAccessGroupAssocEntry=eqlSharedVolumeAccessGroupAssocEntry, eqlAccessGroupEntry=eqlAccessGroupEntry, eqlAccessGroupIndex=eqlAccessGroupIndex, eqlSharedVolumeAccessGroupAssocFlag=eqlSharedVolumeAccessGroupAssocFlag, eqlAccessGroupByTypeAdminKey=eqlAccessGroupByTypeAdminKey, eqlAdminAccountAccessGroupRowStatus=eqlAdminAccountAccessGroupRowStatus, eqlACLCountTable=eqlACLCountTable, eqlACLCountEntry=eqlACLCountEntry, eqlVolumeAccessGroupAssocObjectIndex=eqlVolumeAccessGroupAssocObjectIndex, eqlAccessPointAddrInitiatorAddr=eqlAccessPointAddrInitiatorAddr, eqlVolumeAccessGroupAssocCountEntry=eqlVolumeAccessGroupAssocCountEntry, eqlMaxAccessPointCount=eqlMaxAccessPointCount, eqlVolumeAccessGroupAssocTable=eqlVolumeAccessGroupAssocTable, eqlMaxAccessPointIPAddrCount=eqlMaxAccessPointIPAddrCount, eqlAccessPointAddrIndex=eqlAccessPointAddrIndex, eqlAccessPointInitiatorCHAPUserName=eqlAccessPointInitiatorCHAPUserName, eqlAccessGroupVolumeAssocFlag=eqlAccessGroupVolumeAssocFlag, eqlAccessNotifications=eqlAccessNotifications, eqlAccessGroupTable=eqlAccessGroupTable, eqlAccessGroupByTypeName=eqlAccessGroupByTypeName, eqlVolumeAccessGroupAssocFlag=eqlVolumeAccessGroupAssocFlag, eqlAccessGroupDescription=eqlAccessGroupDescription, eqlAccessPointRowStatus=eqlAccessPointRowStatus, eqlVolumeAccessGroupAssocEntry=eqlVolumeAccessGroupAssocEntry, eqlAccessGroupObjectAssocCreator=eqlAccessGroupObjectAssocCreator, eqlAccessPointCount=eqlAccessPointCount, eqlAccessGroupVolumeAssocTable=eqlAccessGroupVolumeAssocTable, eqlAdminAccountAccessGroupTable=eqlAdminAccountAccessGroupTable, eqlAccessGroupMemberRowStatus=eqlAccessGroupMemberRowStatus, eqlAccessPointDescription=eqlAccessPointDescription, eqlMaxAccessRecordCount=eqlMaxAccessRecordCount, eqlAccessObjects=eqlAccessObjects, eqlAccessGroupObjectAssocIndex=eqlAccessGroupObjectAssocIndex, eqlAccessModule=eqlAccessModule, PYSNMP_MODULE_ID=eqlAccessModule, eqlAccessGroupByTypeTable=eqlAccessGroupByTypeTable, eqlAccessPointAddrRowStatus=eqlAccessPointAddrRowStatus, eqlAccessGroupSharedVolumeAssocTable=eqlAccessGroupSharedVolumeAssocTable, eqlAccessPointAddrEntry=eqlAccessPointAddrEntry, eqlSharedVolumeAccessGroupAssocObjectIndex=eqlSharedVolumeAccessGroupAssocObjectIndex, eqlAccessPointAddrInitiatorAddrType=eqlAccessPointAddrInitiatorAddrType, eqlAccessGroupVolumeAssocEntry=eqlAccessGroupVolumeAssocEntry, eqlAccessGroupPrivacyFlag=eqlAccessGroupPrivacyFlag, eqlAccessRecordCount=eqlAccessRecordCount, eqlAccessGroupMemberEntry=eqlAccessGroupMemberEntry, eqlAccessPointInitiatorName=eqlAccessPointInitiatorName, eqlAccessGroupObjectAssocOID=eqlAccessGroupObjectAssocOID, eqlAccessPointIPAddrCount=eqlAccessPointIPAddrCount, eqlACLCountTotal=eqlACLCountTotal, eqlAccessPointIndex=eqlAccessPointIndex, eqlVolumeAccessRecordAssocCount=eqlVolumeAccessRecordAssocCount, eqlVolumeAccessGroupAssocCountTable=eqlVolumeAccessGroupAssocCountTable, eqlAccessGroupSharedVolumeAssocObjectIndex=eqlAccessGroupSharedVolumeAssocObjectIndex, eqlSharedVolumeAccessGroupAssocTable=eqlSharedVolumeAccessGroupAssocTable, eqlAccessPointEntry=eqlAccessPointEntry, eqlAdminAccountAccessGroupEntry=eqlAdminAccountAccessGroupEntry, eqlACLCountUserDefined=eqlACLCountUserDefined, eqlAssociationCount=eqlAssociationCount, eqlAccessGroupByTypeEntry=eqlAccessGroupByTypeEntry, eqlAccessGroupVolumeAssocObjectIndex=eqlAccessGroupVolumeAssocObjectIndex, eqlAccessGroupByTypeDescription=eqlAccessGroupByTypeDescription, eqlAccessGroupRowStatus=eqlAccessGroupRowStatus, eqlAccessGroupType=eqlAccessGroupType, eqlAccessGroupCount=eqlAccessGroupCount, eqlAccessGroupChildIndex=eqlAccessGroupChildIndex, eqlVolumeAccessGroupAssocCount=eqlVolumeAccessGroupAssocCount, eqlAccessGroupAdminKey=eqlAccessGroupAdminKey, eqlACLCountMPIO=eqlACLCountMPIO, eqlMaxAssociationCount=eqlMaxAssociationCount, eqlAccessGroupMemberTable=eqlAccessGroupMemberTable)
