#
# PySNMP MIB module ADVA-FSPR7-DEF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/ADVA-FSPR7-DEF-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:11:51 2024
# On host fv-az525-771 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
entityCrossConnFromSlotNo, entityDcnSlotNo, entityOpticalMuxShelfNo, entityEqptExtNo, entityContainerShelfNo, entityOpticalMuxSlotNo, entityCrossConnFromExtNo, entityShelfConnPortNo, entityCrossConnToClassName, entityShelfConnSlotNo, entityCrsOptLineToIndexNo3, entityEqptShelfNo, entityExternalPortExtNo, entityDcnClassName, entityCrossConnFromClassName, entityEqptClassName, entityExternalPortShelfNo, entityCrossConnClassName, entityDcnShelfNo, entityCrsOptLineToIndexNo4, entityExternalPortPortNo, entityOpticalMuxPortNo, entityCrossDcnSlotNo, entityFfpShelfNo, entityCrossDcnClassName, entityExternalPortClassName, entityCrsOptLineToClassName, entityFacilityShelfNo, entityOpticalMuxExtNo, entityEqptPortNo, entityOpticalMuxClassName, entityTerminPointIndexNo2, entityFfpExtNo, entityFfpPortNo, entityShelfConnExtNo, entityFacilityClassName, entityCrossDcnPortNo, entityCrsOptLineFromIndexNo2, entityTerminPointClassName, entityCrossDcnExtNo, entityCrsOptLineToIndexNo2, entityShelfConnShelfNo, entityEqptSlotNo, entityCrossConnFromPortNo, entityCrossConnToSlotNo, entityCrsOptLineClassName, entityCrsOptLineFromIndexNo4, entityConnectionClassName, entityCrossConnToShelfNo, entityExternalPortSlotNo, entityDcnExtNo, entityFfpClassName, entityTerminPointIndexNo4, entityTerminPointIndexNo3, entityCrsOptLineToIndexNo1, entityCrsOptLineFromIndexNo3, entityTerminPointIndexNo1, entityFacilitySlotNo, entityCrossDcnShelfNo, entityContainerPortNo, entityCrossConnToPortNo, entityDcnPortNo, entityFacilityExtNo, entityCrossConnFromShelfNo, entityFacilityPortNo, entityContainerSlotNo, entityCrossConnToExtNo, entityContainerClassName, entityOptLineClassName, entityFfpSlotNo, entityCrsOptLineFromIndexNo1, entityContainerExtNo, entityOptLineIndexNo1, entityCrsOptLineFromClassName, entityShelfConnClassName = mibBuilder.importSymbols("ADVA-FSPR7-MIB", "entityCrossConnFromSlotNo", "entityDcnSlotNo", "entityOpticalMuxShelfNo", "entityEqptExtNo", "entityContainerShelfNo", "entityOpticalMuxSlotNo", "entityCrossConnFromExtNo", "entityShelfConnPortNo", "entityCrossConnToClassName", "entityShelfConnSlotNo", "entityCrsOptLineToIndexNo3", "entityEqptShelfNo", "entityExternalPortExtNo", "entityDcnClassName", "entityCrossConnFromClassName", "entityEqptClassName", "entityExternalPortShelfNo", "entityCrossConnClassName", "entityDcnShelfNo", "entityCrsOptLineToIndexNo4", "entityExternalPortPortNo", "entityOpticalMuxPortNo", "entityCrossDcnSlotNo", "entityFfpShelfNo", "entityCrossDcnClassName", "entityExternalPortClassName", "entityCrsOptLineToClassName", "entityFacilityShelfNo", "entityOpticalMuxExtNo", "entityEqptPortNo", "entityOpticalMuxClassName", "entityTerminPointIndexNo2", "entityFfpExtNo", "entityFfpPortNo", "entityShelfConnExtNo", "entityFacilityClassName", "entityCrossDcnPortNo", "entityCrsOptLineFromIndexNo2", "entityTerminPointClassName", "entityCrossDcnExtNo", "entityCrsOptLineToIndexNo2", "entityShelfConnShelfNo", "entityEqptSlotNo", "entityCrossConnFromPortNo", "entityCrossConnToSlotNo", "entityCrsOptLineClassName", "entityCrsOptLineFromIndexNo4", "entityConnectionClassName", "entityCrossConnToShelfNo", "entityExternalPortSlotNo", "entityDcnExtNo", "entityFfpClassName", "entityTerminPointIndexNo4", "entityTerminPointIndexNo3", "entityCrsOptLineToIndexNo1", "entityCrsOptLineFromIndexNo3", "entityTerminPointIndexNo1", "entityFacilitySlotNo", "entityCrossDcnShelfNo", "entityContainerPortNo", "entityCrossConnToPortNo", "entityDcnPortNo", "entityFacilityExtNo", "entityCrossConnFromShelfNo", "entityFacilityPortNo", "entityContainerSlotNo", "entityCrossConnToExtNo", "entityContainerClassName", "entityOptLineClassName", "entityFfpSlotNo", "entityCrsOptLineFromIndexNo1", "entityContainerExtNo", "entityOptLineIndexNo1", "entityCrsOptLineFromClassName", "entityShelfConnClassName")
FspR7XfpDecisionThres, FspR7TxOffOnTm, FspR7TelemetryOutput, FspR7OpticalGroup, FspR7Baund, FspR7LLDPNeighbors, FspR7APSCommand, FspR7ChannelSpacing, FspR7OpticalInterfaceReach, FspR7ChannelIdentifier, FspR7ManualAuto, FspR7UntaggedFrames, FspR7TypeCrs, FspR7MuxMethod, FspR7Mapping, ApsType, FspR7BidirectionalChannel, FspR7TimDetMode, FspR7InvertTelemetryInputLogic, FspR7LacpMode, FspR7SingleFiberLocation, FspR7LineCoding, FspR7TrafficDirection, FspR7IpMode, FspR7TerminationMode, FspR7ChannelRangeInventory, FspR7OspfMode, FspR7FrameFormat, FspR7YesNo, FspR7RlsAction, FspR7TransmissionMode, FspR7ProtectionType, FspR7LLDPScope, FspR7FiberBrand, FspR7MonLevel, FspR7Unsigned32Caps, FspR7Bitrate, FspR7OscUsage, FspR7SnmpHexString, FspR7ErrorFwdMode, FspR7IPv6Type, FspR7NoYes, FspR7DispersionModes, FspR7EnableDisable, FspR7InterfaceCrossover, FspR7PsuOutputPower, FspR7PmReset, FspR7PathNode, FspR7DisableEnable, FspR7PortBehaviour, FspR7Topology, FspR7DhcpServer, FspR7LagPortType, FspR7LaneGroupInventory, FspR7CdCompensationRange, FspR7CpAuthType, FspR7TiltSet, FspR7ConnectorType, FspR7IpType, FspR7Gain, ApsRevertMode, FspR7AlsMode, FspR7FunctionCrs, FspR7AdminState, FspR7OpticalBand, FspR7DCFiberType, FspR7OpticalFiberType, FspR7PlugType, FspR7GainRange, FspR7PortMode, FspR7NumberOfChannels, FspR7TypeConnection, FspR7OtdrPeriod, FspR7PortRole, FspR7InterfaceType, FspR7MaxBitErrorRate, FspR7OpticalSubBand, FspR7Optimize, FspR7FecType, FspR7RoadmNumber, FspR7PlugMode, FspR7RowStatus, FspR7FlowControlMode, FspR7CdPostCompensationRange, FspR7DispersionCompensation, FspR7BERThreshold, FspR7DmsrmtOperation, FspR7SupplyType, FspR7Conn, FspR7SnmpLongString, FspR7PlugDataRate, FspR7ChannelBandwidth, FspR7DeploymentScenario, FspR7Acp, FspR7LacpTimeout, FspR7LaserDelayTimer, FspR7OpuPayloadType, FspR7GccUsage, FspR7VoaMode, CryptoFspR7EncryptionCommunication, FfpType, FspR7CapInventory, FspR7CodeGain, FspR7Length, FspR7EdfaOutputPowerRating, FspR7ApsFarEndModule = mibBuilder.importSymbols("ADVA-FSPR7-TC-MIB", "FspR7XfpDecisionThres", "FspR7TxOffOnTm", "FspR7TelemetryOutput", "FspR7OpticalGroup", "FspR7Baund", "FspR7LLDPNeighbors", "FspR7APSCommand", "FspR7ChannelSpacing", "FspR7OpticalInterfaceReach", "FspR7ChannelIdentifier", "FspR7ManualAuto", "FspR7UntaggedFrames", "FspR7TypeCrs", "FspR7MuxMethod", "FspR7Mapping", "ApsType", "FspR7BidirectionalChannel", "FspR7TimDetMode", "FspR7InvertTelemetryInputLogic", "FspR7LacpMode", "FspR7SingleFiberLocation", "FspR7LineCoding", "FspR7TrafficDirection", "FspR7IpMode", "FspR7TerminationMode", "FspR7ChannelRangeInventory", "FspR7OspfMode", "FspR7FrameFormat", "FspR7YesNo", "FspR7RlsAction", "FspR7TransmissionMode", "FspR7ProtectionType", "FspR7LLDPScope", "FspR7FiberBrand", "FspR7MonLevel", "FspR7Unsigned32Caps", "FspR7Bitrate", "FspR7OscUsage", "FspR7SnmpHexString", "FspR7ErrorFwdMode", "FspR7IPv6Type", "FspR7NoYes", "FspR7DispersionModes", "FspR7EnableDisable", "FspR7InterfaceCrossover", "FspR7PsuOutputPower", "FspR7PmReset", "FspR7PathNode", "FspR7DisableEnable", "FspR7PortBehaviour", "FspR7Topology", "FspR7DhcpServer", "FspR7LagPortType", "FspR7LaneGroupInventory", "FspR7CdCompensationRange", "FspR7CpAuthType", "FspR7TiltSet", "FspR7ConnectorType", "FspR7IpType", "FspR7Gain", "ApsRevertMode", "FspR7AlsMode", "FspR7FunctionCrs", "FspR7AdminState", "FspR7OpticalBand", "FspR7DCFiberType", "FspR7OpticalFiberType", "FspR7PlugType", "FspR7GainRange", "FspR7PortMode", "FspR7NumberOfChannels", "FspR7TypeConnection", "FspR7OtdrPeriod", "FspR7PortRole", "FspR7InterfaceType", "FspR7MaxBitErrorRate", "FspR7OpticalSubBand", "FspR7Optimize", "FspR7FecType", "FspR7RoadmNumber", "FspR7PlugMode", "FspR7RowStatus", "FspR7FlowControlMode", "FspR7CdPostCompensationRange", "FspR7DispersionCompensation", "FspR7BERThreshold", "FspR7DmsrmtOperation", "FspR7SupplyType", "FspR7Conn", "FspR7SnmpLongString", "FspR7PlugDataRate", "FspR7ChannelBandwidth", "FspR7DeploymentScenario", "FspR7Acp", "FspR7LacpTimeout", "FspR7LaserDelayTimer", "FspR7OpuPayloadType", "FspR7GccUsage", "FspR7VoaMode", "CryptoFspR7EncryptionCommunication", "FfpType", "FspR7CapInventory", "FspR7CodeGain", "FspR7Length", "FspR7EdfaOutputPowerRating", "FspR7ApsFarEndModule")
SonetTraceForm, fspR7, OtnPayloadType, SonetTimingSource, ApsDirection, VirtualContainerType, TimMode, ApsHoldoffTime, ProtectionMech, EnableState, OhTerminationLevel, OtnTcmLevel, EthDuplexMode, FspR7EquipmentType, LoopConfig = mibBuilder.importSymbols("ADVA-MIB", "SonetTraceForm", "fspR7", "OtnPayloadType", "SonetTimingSource", "ApsDirection", "VirtualContainerType", "TimMode", "ApsHoldoffTime", "ProtectionMech", "EnableState", "OhTerminationLevel", "OtnTcmLevel", "EthDuplexMode", "FspR7EquipmentType", "LoopConfig")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, IpAddress, Counter64, Integer32, ObjectIdentity, Gauge32, Counter32, Bits, MibIdentifier, ModuleIdentity, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "IpAddress", "Counter64", "Integer32", "ObjectIdentity", "Gauge32", "Counter32", "Bits", "MibIdentifier", "ModuleIdentity", "Unsigned32", "NotificationType")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
advaFspR7Def = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10))
advaFspR7Def.setRevisions(('2018-12-14 00:00', '2018-10-30 00:00', '2018-08-09 00:00', '2018-05-28 00:00', '2018-04-17 00:00', '2018-03-15 00:00', '2018-02-26 00:00', '2017-12-07 00:00', '2017-11-01 00:00', '2017-09-11 00:00', '2017-06-06 00:00', '2017-03-23 00:00', '2016-04-01 00:00', '2015-12-10 00:00', '2015-10-01 00:00', '2015-09-03 00:00', '2015-03-20 00:00', '2014-10-15 00:00', '2014-09-29 00:00', '2013-12-04 00:00', '2013-08-20 00:00', '2011-05-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: advaFspR7Def.setRevisionsDescriptions(('FSP3000 F7 Release 18.2.1 MIB.', 'FSP3000 F7 Release 18.1.2 MIB.', 'FSP3000 F7 Release 18.1.1 MIB.', 'FSP3000 F7 Release 17.2.2 MIB.', 'FSP3000 F7 Release 17.2.1 MIB.', 'FSP3000 F7 Release 17.1.2 MIB.', 'FSP3000 F7 Release 16.3.3 MIB.', 'FSP3000 F7 Release 17.1.1 MIB.', 'FSP3000 F7 Release 16.3.2 MIB.', 'FSP3000 F7 Release 16.3.1 MIB.', 'FSP3000 F7 Release 16.2.2 MIB.', 'FSP3000 F7 Release 16.2.1 MIB.', 'FSP3000 F7 Release 16.1.1 MIB.', 'FSP3000 F7 Release 15.2.1 MIB.', 'FSP3000 F7 Release 15.1.2 MIB.', 'FSP3000 F7 Release 15.1.1 MIB.', 'FSP3000 F7 Release 13.3.1 MIB.', 'FSP3000 F7 Release 13.2.2 MIB.', 'FSP3000 F7 Release 13.2.1 MIB.', 'FSP3000 F7 Release 12.2.1 MIB.', 'FSP3000 F7 Release 12.1.1 MIB.', 'FSP3000 F7 Release 11.2 MIB.',))
if mibBuilder.loadTexts: advaFspR7Def.setLastUpdated('201812140000Z')
if mibBuilder.loadTexts: advaFspR7Def.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: advaFspR7Def.setContactInfo('EMEA Support\n                  Phone : +49 89 89 0665 848\n                  Fax   : +49 89 89 0665 22848\n                  Email : support@advaoptical.com\n\n                  North American Support\n                  Phone : 886 442 ADVA (2382) (toll-free within the US, Canada and Mexico)\n                  Fax   : + 1 806 741 8529 (elsewhere)\n                  Email : support-usa@advaoptical.com\n\n                  Asia Pacific Support\n                  Phone : + 1 866 442 2382 (other toll-free numbers available in some countries)\n                  Email : support-asia@advaoptical.com')
if mibBuilder.loadTexts: advaFspR7Def.setDescription('This is a MIB definition for ADVA AG Optical Networking entity management.')
managementDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3))
specificMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2))
eqptMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3))
facilityMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4))
dcnMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5))
opticalMuxMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6))
shelfConnMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7))
envMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8))
containerMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 9))
opticalLineMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10))
performanceDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6))
performanceFacilityDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4))
performanceFacilityThresholdDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1))
featureSpecificDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7))
fiberMapDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1))
eciDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3))
changeServiceDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5))
protectionDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6))
crossConnectionDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6), )
if mibBuilder.loadTexts: crossConnectionDefTable.setStatus('current')
if mibBuilder.loadTexts: crossConnectionDefTable.setDescription('crossConnectionDefTable')
crossConnectionDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossConnFromShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnClassName"))
if mibBuilder.loadTexts: crossConnectionDefEntry.setStatus('current')
if mibBuilder.loadTexts: crossConnectionDefEntry.setDescription('Entry of crossConnectionDefTable')
crossConnectionDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 1), FspR7RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: crossConnectionDefRowStatus.setDescription('Cross Connection Default RowStatus.')
crossConnectionDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 2), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefAdmin.setStatus('current')
if mibBuilder.loadTexts: crossConnectionDefAdmin.setDescription('Cross Connection Default Adminstrative State.')
crossConnectionDefRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 3), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefRedLineState.setStatus('current')
if mibBuilder.loadTexts: crossConnectionDefRedLineState.setDescription('Cross Connection Default Red Lined State.')
crossConnectionDefConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 4), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefConn.setStatus('current')
if mibBuilder.loadTexts: crossConnectionDefConn.setDescription('Cross Connection Default Direction.')
crossConnectionDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefAlias.setStatus('current')
if mibBuilder.loadTexts: crossConnectionDefAlias.setDescription('Cross Connection Default Alias.')
crossConnectionDefPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 6), FspR7PathNode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefPathNode.setStatus('current')
if mibBuilder.loadTexts: crossConnectionDefPathNode.setDescription('Cross Connection Default Path Node.')
crossConnectionDefTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefTunnelAid.setStatus('current')
if mibBuilder.loadTexts: crossConnectionDefTunnelAid.setDescription('Cross Connection Default Tunnel AID.')
crossConnectionDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 8), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefType.setStatus('current')
if mibBuilder.loadTexts: crossConnectionDefType.setDescription('Cross Connection Default Type Facility.')
crossConnectionDefCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 9), FspR7FunctionCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefCrsFunction.setStatus('current')
if mibBuilder.loadTexts: crossConnectionDefCrsFunction.setDescription('Describes the Cross Connect Functionality')
crossOpticalLineDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7), )
if mibBuilder.loadTexts: crossOpticalLineDefTable.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineDefTable.setDescription('crossOpticalLineDefTable')
crossOpticalLineDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineClassName"))
if mibBuilder.loadTexts: crossOpticalLineDefEntry.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineDefEntry.setDescription('Entry of crossOpticalLineDefTable')
crossOpticalLineDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7, 1, 1), FspR7RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineDefRowStatus.setDescription('Cross Connection Default RowStatus.')
crossOpticalLineDefRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7, 1, 2), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineDefRedLineState.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineDefRedLineState.setDescription('Cross Optical Line Default Red Lined State.')
crossOpticalLineDefConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7, 1, 3), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineDefConn.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineDefConn.setDescription('Cross Optical Line Default Direction.')
crossOpticalLineDefCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7, 1, 4), FspR7TypeCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineDefCrsType.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineDefCrsType.setDescription('Cross Optical Line Default Type.')
crossOpticalLineDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineDefAlias.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineDefAlias.setDescription('Cross Optical Line Default Alias.')
crossOpticalLineDefTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineDefTunnelAid.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineDefTunnelAid.setDescription('Cross Optical Line Default Tunnel AID.')
endOfCrossOpticalLineDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfCrossOpticalLineDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfCrossOpticalLineDefTable.setDescription('')
crossDcnDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 9), )
if mibBuilder.loadTexts: crossDcnDefTable.setStatus('current')
if mibBuilder.loadTexts: crossDcnDefTable.setDescription('crossDcnDefTable')
crossDcnDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnClassName"))
if mibBuilder.loadTexts: crossDcnDefEntry.setStatus('current')
if mibBuilder.loadTexts: crossDcnDefEntry.setDescription('Entry of crossDcnDefTable')
crossDcnDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 9, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: crossDcnDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
crossDcnDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 9, 1, 2), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnDefType.setStatus('current')
if mibBuilder.loadTexts: crossDcnDefType.setDescription('Type of Cross-Connect')
crossDcnDefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 9, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnDefLink.setStatus('current')
if mibBuilder.loadTexts: crossDcnDefLink.setDescription('Address Identifier of PPPIP LINK Entity.')
crossDcnDefEcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 9, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnDefEcc.setStatus('current')
if mibBuilder.loadTexts: crossDcnDefEcc.setDescription('Address Identifier of ECC Entity.')
endOfCrossDcnDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfCrossDcnDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfCrossDcnDefTable.setDescription('')
endOfSpecificMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfSpecificMgmtDef.setStatus('current')
if mibBuilder.loadTexts: endOfSpecificMgmtDef.setDescription('')
shelfDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1), )
if mibBuilder.loadTexts: shelfDefTable.setStatus('current')
if mibBuilder.loadTexts: shelfDefTable.setDescription('shelfCapTable')
shelfDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: shelfDefEntry.setStatus('current')
if mibBuilder.loadTexts: shelfDefEntry.setDescription('Entry of shelfCapTable')
shelfDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: shelfDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
shelfDefPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 2), FspR7PsuOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefPsuOutputPower.setStatus('current')
if mibBuilder.loadTexts: shelfDefPsuOutputPower.setDescription('Maximum PSU Output Power')
shelfDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 3), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefType.setStatus('current')
if mibBuilder.loadTexts: shelfDefType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely\n        the number and allowed TYPE's of the provisionable dependent\n        entities (plugs, interfaces, modules)")
shelfDefRack = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefRack.setStatus('current')
if mibBuilder.loadTexts: shelfDefRack.setDescription('Rack Containing Shelf')
shelfDefSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 5), FspR7SupplyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefSupply.setStatus('current')
if mibBuilder.loadTexts: shelfDefSupply.setDescription('The kind of power supply - provisioned value')
shelfDefBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 6), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefBandProvision.setStatus('current')
if mibBuilder.loadTexts: shelfDefBandProvision.setDescription('Band Provision. Reference to BAND__INVENTORY.')
shelfDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 7), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefAdmin.setStatus('current')
if mibBuilder.loadTexts: shelfDefAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
shelfDefRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefRackNumber.setStatus('current')
if mibBuilder.loadTexts: shelfDefRackNumber.setDescription('Number of the Rack')
shelfDefRackOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 45))).setUnits('HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefRackOrder.setStatus('current')
if mibBuilder.loadTexts: shelfDefRackOrder.setDescription('Defines the position of the shelf in a rack, starting from the top or bottom for the rack depending on Shelf Order (COUNT__ORDER). Shelf Position is used with Shelf Order for the graphical rack view.')
shelfDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefAlias.setStatus('current')
if mibBuilder.loadTexts: shelfDefAlias.setDescription('User Applied Descriptor')
shelfDefSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefSlot.setStatus('current')
if mibBuilder.loadTexts: shelfDefSlot.setDescription('Slot Position')
shelfDefPowerSupplyProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 12), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefPowerSupplyProtection.setStatus('current')
if mibBuilder.loadTexts: shelfDefPowerSupplyProtection.setDescription('Power Supply Redundancy Configuration')
shelfDefAirFilterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 13), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefAirFilterClear.setStatus('current')
if mibBuilder.loadTexts: shelfDefAirFilterClear.setDescription('Operation to clear air filter replace condition and reset replacement count')
shelfDefAirFilterCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setUnits('month').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefAirFilterCycle.setStatus('current')
if mibBuilder.loadTexts: shelfDefAirFilterCycle.setDescription('Sets the replacement duration for the air filter replace time setting in months; a setting of 0 prevents the replacement warning alram from being raised')
endOfShelfDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfShelfDefTable.setDescription('')
fanDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 3), )
if mibBuilder.loadTexts: fanDefTable.setStatus('current')
if mibBuilder.loadTexts: fanDefTable.setDescription('fanCapTable')
fanDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: fanDefEntry.setStatus('current')
if mibBuilder.loadTexts: fanDefEntry.setDescription('Entry of fanCapTable')
fanDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 3, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: fanDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
fanDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 3, 1, 2), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDefAdmin.setStatus('current')
if mibBuilder.loadTexts: fanDefAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
fanDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 3, 1, 3), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDefType.setStatus('current')
if mibBuilder.loadTexts: fanDefType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely\n        the number and allowed TYPE's of the provisionable dependent\n        entities (plugs, interfaces, modules)")
fanDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 3, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDefAlias.setStatus('current')
if mibBuilder.loadTexts: fanDefAlias.setDescription('User Applied Descriptor')
fanDefOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 3, 1, 5), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDefOutputReset.setStatus('current')
if mibBuilder.loadTexts: fanDefOutputReset.setDescription('Has the same function as the HW switch at the UTM board')
endOfFanDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFanDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfFanDefTable.setDescription('')
plugDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5), )
if mibBuilder.loadTexts: plugDefTable.setStatus('current')
if mibBuilder.loadTexts: plugDefTable.setDescription('plugCapTable')
plugDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: plugDefEntry.setStatus('current')
if mibBuilder.loadTexts: plugDefEntry.setDescription('Entry of plugCapTable')
plugDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: plugDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
plugDefConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 2), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefConnector.setStatus('current')
if mibBuilder.loadTexts: plugDefConnector.setDescription('Connector')
plugDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 3), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefType.setStatus('current')
if mibBuilder.loadTexts: plugDefType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely\n        the number and allowed TYPE's of the provisionable dependent\n        entities (plugs, interfaces, modules)")
plugDefReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 4), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefReach.setStatus('current')
if mibBuilder.loadTexts: plugDefReach.setDescription('Reach')
plugDefLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefLoopbackAttenuation.setStatus('current')
if mibBuilder.loadTexts: plugDefLoopbackAttenuation.setDescription('Loop back attenuation used for Optojack SE plugs')
plugDefTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 6), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: plugDefTransmitChannel.setDescription('Channel')
plugDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefAlias.setStatus('current')
if mibBuilder.loadTexts: plugDefAlias.setDescription('User Applied Descriptor')
plugDefLaneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 8), FspR7LaneGroupInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefLaneGroup.setStatus('current')
if mibBuilder.loadTexts: plugDefLaneGroup.setDescription('Lane group to provision')
plugDefMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 9), FspR7PlugDataRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: plugDefMaxDataRate.setDescription('Rate')
plugDefThirdPartyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 10), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefThirdPartyUsage.setStatus('current')
if mibBuilder.loadTexts: plugDefThirdPartyUsage.setDescription('Usage of 3rd Party Plugs')
plugDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 11), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefAdmin.setStatus('current')
if mibBuilder.loadTexts: plugDefAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
plugDefBidirectionalChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 12), FspR7BidirectionalChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefBidirectionalChannel.setStatus('current')
if mibBuilder.loadTexts: plugDefBidirectionalChannel.setDescription('Bidirectional Channel Rates from Provisioning')
plugDefChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 13), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefChannelSpacingProvision.setStatus('current')
if mibBuilder.loadTexts: plugDefChannelSpacingProvision.setDescription('Channel Space Provision, reference to CHA-SPC__INVENTORY')
plugDefLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 14), FspR7Length()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefLength.setStatus('current')
if mibBuilder.loadTexts: plugDefLength.setDescription('Length')
plugDefPlugType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 15), FspR7PlugType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefPlugType.setStatus('current')
if mibBuilder.loadTexts: plugDefPlugType.setDescription('Plug Type')
plugDefPlugMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 16), FspR7PlugMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefPlugMode.setStatus('current')
if mibBuilder.loadTexts: plugDefPlugMode.setDescription('Plug Mode')
endOfPlugDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPlugDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfPlugDefTable.setDescription('')
moduleDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7), )
if mibBuilder.loadTexts: moduleDefTable.setStatus('current')
if mibBuilder.loadTexts: moduleDefTable.setDescription('moduleCapTable')
moduleDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: moduleDefEntry.setStatus('current')
if mibBuilder.loadTexts: moduleDefEntry.setDescription('Entry of moduleCapTable')
moduleDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: moduleDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
moduleDefPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 2), FspR7PsuOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefPsuOutputPower.setStatus('current')
if mibBuilder.loadTexts: moduleDefPsuOutputPower.setDescription('Maximum PSU Output Power')
moduleDefPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 3), FspR7EdfaOutputPowerRating()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefPower.setStatus('current')
if mibBuilder.loadTexts: moduleDefPower.setDescription('Optical Output Power Rating - Provision')
moduleDefReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 4), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefReach.setStatus('current')
if mibBuilder.loadTexts: moduleDefReach.setDescription('Reach')
moduleDefInitEqlz = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 5), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefInitEqlz.setStatus('current')
if mibBuilder.loadTexts: moduleDefInitEqlz.setDescription('Initiate Equalization')
moduleDefLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefLanAid.setStatus('current')
if mibBuilder.loadTexts: moduleDefLanAid.setDescription('AID of LAN')
moduleDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 7), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefType.setStatus('current')
if mibBuilder.loadTexts: moduleDefType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely\n        the number and allowed TYPE's of the provisionable dependent\n        entities (plugs, interfaces, modules)")
moduleDefMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 8), FspR7Mapping()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefMapping.setStatus('current')
if mibBuilder.loadTexts: moduleDefMapping.setDescription('Type of mapping; transparent or framing')
moduleDefGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 9), FspR7GainRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefGainRange.setStatus('current')
if mibBuilder.loadTexts: moduleDefGainRange.setDescription('EDFA gain range to provision')
moduleDefSfProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 10), FspR7SingleFiberLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefSfProvision.setStatus('current')
if mibBuilder.loadTexts: moduleDefSfProvision.setDescription('determines the location (A or B) for Single Fiber applications')
moduleDefCapabilityLevelProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 11), FspR7CapInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefCapabilityLevelProvision.setStatus('current')
if mibBuilder.loadTexts: moduleDefCapabilityLevelProvision.setDescription('Capability level provisioned')
moduleDefDCFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 12), FspR7DCFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefDCFiberType.setStatus('current')
if mibBuilder.loadTexts: moduleDefDCFiberType.setDescription('Dispersion Compensation Fibertype')
moduleDefChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 13), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefChannelsProvision.setStatus('current')
if mibBuilder.loadTexts: moduleDefChannelsProvision.setDescription('Number of channels supported by an entity')
moduleDefFiberDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 14), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefFiberDetect.setStatus('current')
if mibBuilder.loadTexts: moduleDefFiberDetect.setDescription('Fiber Detect')
moduleDefSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 15), FspR7SupplyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefSupply.setStatus('current')
if mibBuilder.loadTexts: moduleDefSupply.setDescription('The kind of power supply - provisioned value')
moduleDefGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 16), FspR7OpticalGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefGroup.setStatus('current')
if mibBuilder.loadTexts: moduleDefGroup.setDescription('The Group of 4 DWDM channels or the Group of 4 CWDM channels')
moduleDefDeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 17), FspR7DeploymentScenario()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefDeploy.setStatus('current')
if mibBuilder.loadTexts: moduleDefDeploy.setDescription('Describes how the card is applied related to a network scenario')
moduleDefLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefLagSysPrio.setStatus('current')
if mibBuilder.loadTexts: moduleDefLagSysPrio.setDescription('Link Aggregation Group Actor System Priority Part of LAG ID')
moduleDefTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 19), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: moduleDefTransmitChannel.setDescription('Channel')
moduleDefBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 20), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefBand.setStatus('current')
if mibBuilder.loadTexts: moduleDefBand.setDescription('The optical band of the module.')
moduleDefTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 21), FspR7TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefTrafficDirection.setStatus('current')
if mibBuilder.loadTexts: moduleDefTrafficDirection.setDescription('Traffic Direction')
moduleDefIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefIpAddr.setStatus('current')
if mibBuilder.loadTexts: moduleDefIpAddr.setDescription('IP Address assigned to LAN IP Interface')
moduleDefDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 23), FspR7DispersionCompensation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefDispersionCompensation.setStatus('current')
if mibBuilder.loadTexts: moduleDefDispersionCompensation.setDescription('Dispersion Compensation Value in km of SSMF fiber')
moduleDefActivateDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 24), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefActivateDetect.setStatus('current')
if mibBuilder.loadTexts: moduleDefActivateDetect.setDescription('Initialize Topology Detection')
moduleDefOscUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 25), FspR7OscUsage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefOscUsage.setStatus('current')
if mibBuilder.loadTexts: moduleDefOscUsage.setDescription('Select if and how the OSC is to be used on an amplifier')
moduleDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 26), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefAdmin.setStatus('current')
if mibBuilder.loadTexts: moduleDefAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
moduleDefScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 27), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefScrambling.setStatus('current')
if mibBuilder.loadTexts: moduleDefScrambling.setDescription('Configuration of scrambling functionality for Virtual Facilities')
moduleDefChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 28), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefChannelsNumber.setStatus('current')
if mibBuilder.loadTexts: moduleDefChannelsNumber.setDescription('Number of channels supported by an entity')
moduleDefChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 29), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefChannelSpacingProvision.setStatus('current')
if mibBuilder.loadTexts: moduleDefChannelSpacingProvision.setDescription('Channel Space Provision, reference to CHA-SPC__INVENTORY')
moduleDefMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 30), FspR7TransmissionMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefMode.setStatus('current')
if mibBuilder.loadTexts: moduleDefMode.setDescription('Mode of the module, determine operation or functionality')
moduleDefSubBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 31), FspR7OpticalSubBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefSubBandProvision.setStatus('current')
if mibBuilder.loadTexts: moduleDefSubBandProvision.setDescription('Subband - Provision')
moduleDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 32), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefAlias.setStatus('current')
if mibBuilder.loadTexts: moduleDefAlias.setDescription('User Applied Descriptor')
moduleDefFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 33), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefFiberType.setStatus('current')
if mibBuilder.loadTexts: moduleDefFiberType.setDescription('Fiber of Optical Interface - Provision, Reference to FIBER__INVENTORY')
moduleDefChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 34), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: moduleDefChannelSpacing.setDescription('ITU Grid channel spacing')
moduleDefOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 35), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefOutputReset.setStatus('current')
if mibBuilder.loadTexts: moduleDefOutputReset.setDescription('Has the same function as the HW switch at the UTM board')
moduleDefRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 36), FspR7RoadmNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefRoadmNumber.setStatus('current')
if mibBuilder.loadTexts: moduleDefRoadmNumber.setDescription('Number for ROADM module typically associated with a Network Fiber or Degree')
moduleDefTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 37), FspR7Topology()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefTopology.setStatus('current')
if mibBuilder.loadTexts: moduleDefTopology.setDescription('Shows the card topology in the NE')
moduleDefForceConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 38), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefForceConfig.setStatus('current')
if mibBuilder.loadTexts: moduleDefForceConfig.setDescription('Force cserver to send down configuration to module')
moduleDefMuxMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 39), FspR7MuxMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefMuxMethod.setStatus('current')
if mibBuilder.loadTexts: moduleDefMuxMethod.setDescription('Selection of mux method')
moduleDefNdpCleanup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 40), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefNdpCleanup.setStatus('current')
if mibBuilder.loadTexts: moduleDefNdpCleanup.setDescription('Cleanup Network Data Path allocation')
moduleDefRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 41), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefRstp.setStatus('current')
if mibBuilder.loadTexts: moduleDefRstp.setDescription('Rapid spanning tree protocol')
moduleDefRemoteReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 42), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefRemoteReset.setStatus('current')
if mibBuilder.loadTexts: moduleDefRemoteReset.setDescription('Remote reset of module. This parameter will be available only on SH9HU and SH1HUPF shelves.')
moduleDefPartner1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 43), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefPartner1.setStatus('current')
if mibBuilder.loadTexts: moduleDefPartner1.setDescription('External Protection Trigger Entity AID #1')
moduleDefPartner2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 44), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefPartner2.setStatus('current')
if mibBuilder.loadTexts: moduleDefPartner2.setDescription('External Protection Trigger Entity AID #2')
moduleDefPartner3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 45), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefPartner3.setStatus('current')
if mibBuilder.loadTexts: moduleDefPartner3.setDescription('External Protection Trigger Entity AID #3')
moduleDefPartner4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 46), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefPartner4.setStatus('current')
if mibBuilder.loadTexts: moduleDefPartner4.setDescription('External Protection Trigger Entity AID #4')
moduleDefAcp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 47), FspR7Acp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleDefAcp.setStatus('current')
if mibBuilder.loadTexts: moduleDefAcp.setDescription('APS communication partner')
endOfModuleDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfModuleDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfModuleDefTable.setDescription('')
endOfEqptMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEqptMgmtDef.setStatus('current')
if mibBuilder.loadTexts: endOfEqptMgmtDef.setDescription('')
physicalPortDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1), )
if mibBuilder.loadTexts: physicalPortDefTable.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTable.setDescription('physicalPortDefTable')
physicalPortDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: physicalPortDefEntry.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefEntry.setDescription('Entry of physicalPortDefTable')
physicalPortDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefRowStatus.setDescription('Physical Port Capability RowStatus.')
physicalPortDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefType.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefType.setDescription('Physical Port Capability Facility Type.')
physicalPortDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 3), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefAdmin.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefAdmin.setDescription('Physical Port Capability Adminstrative State.')
physicalPortDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefAlias.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefAlias.setDescription('User Applied Descriptor')
physicalPortDefAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 5), FspR7AlsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefAlsMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefAlsMode.setDescription('Determines the reaction in backward direction in response to a LOS\n        on the same Interface: on a Network Interface connected to the DWDM\n        this is a matter of laser safety')
physicalPortDefAutoThresReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 6), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefAutoThresReset.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefAutoThresReset.setDescription('Adaptive Threshold Control Reset')
physicalPortDefAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 7), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefAutonegotiation.setDescription('Auto Negotiation for the data rate')
physicalPortDefBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 8), FspR7PortBehaviour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefBehaviour.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefBehaviour.setDescription('Behavior or Port usage based on configuration/usage in the system regardless of faceplate designation')
physicalPortDefDispertionConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 9), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefDispertionConfig.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefDispertionConfig.setDescription('Chromatic Dispersion Compensation')
physicalPortDefDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50000, 50000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefDispersionSetting.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefDispersionSetting.setDescription('Chromatic Dispersion Compensation setting on module')
physicalPortDefDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 11), FspR7DispersionModes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefDispersionMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefDispersionMode.setDescription('Chromatic Dispersion Compensation Mode')
physicalPortDefChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 12), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefChannelProv.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefChannelProv.setDescription('Channel')
physicalPortDefWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 13), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefWdmRxChannel.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefWdmRxChannel.setDescription('Channel Number for the Receive Interface')
physicalPortDefCodeGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 14), FspR7CodeGain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefCodeGain.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefCodeGain.setDescription('Forward Error Correction Coding gain')
physicalPortDefXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 15), FspR7XfpDecisionThres()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefXfpDecisionThres.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefXfpDecisionThres.setDescription('XFP Decision threshold setting')
physicalPortDefDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 16), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefDisparityCorrection.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefDisparityCorrection.setDescription('Disparity correction')
physicalPortDefEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 17), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefEqlzAdmin.setDescription('Scheduled Equalization Administration')
physicalPortDefErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 18), FspR7ErrorFwdMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefErrorForwarding.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefErrorForwarding.setDescription('Determines the reaction in forward direction in response to a LOS on\n        the interface on the opposite side of the module: may override\n        this behaviour in the interests of laser safety.')
physicalPortDefFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 19), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefFecType.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefFecType.setDescription('Forward Error Correction (Only relevant where TYPE = OTU#)')
physicalPortDefFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 20), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefFarEndCommunication.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefFarEndCommunication.setDescription('Used for Optojack plugs; Communication to Far End Plug is observed')
physicalPortDefFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 21), FspR7FlowControlMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefFlowControl.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefFlowControl.setDescription('Flow Control mechanism')
physicalPortDefForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 22), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefForceLaserOn.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefForceLaserOn.setDescription('Laser Forced On')
physicalPortDefInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 23), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefInhibitSwitchToProt.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefInhibitSwitchToProt.setDescription('Inhibit Switch to protection facility. Inhibition blocks an automatic switch\n        to the protection facility. Valid only for the working facility.')
physicalPortDefInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 24), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefInhibitSwitchToWork.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefInhibitSwitchToWork.setDescription('Inhibit Switch to working facility. Inhibition blocks an automatic switch to the\n        working facility. Valid only for the protection facility.')
physicalPortDefLaneChannelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 25), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLaneChannelSetting.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefLaneChannelSetting.setDescription('Lane Channel Setting')
physicalPortDefLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 26), LoopConfig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLoopConfig.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefLoopConfig.setDescription('The configuration of the loopback function.\n        - noLoop:   no loop configuration on the interface.\n        - lineLoop: the incoming signal is looped to the outgoing\n        line on the interface. The incoming signal is sent in the\n        downstream direction and processed as normal.\n        - inwardLoop: the output signal is looped to the incoming line\n        on the interface. The looped signal is transmitted unchanged on\n        the optical output.')
physicalPortDefLaserDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 27), FspR7LaserDelayTimer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLaserDelayTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefLaserDelayTimer.setDescription('Relevant only when ERRFWD=LSROFF. Enables/disables the\n        possibility to delay turning off and on the laser.\n        This applies to the case when turning off the laser\n        is done  as an error forwarding mechanism.')
physicalPortDefLaserOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLaserOffTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefLaserOffTimer.setDescription('Delay before laser is swiched off')
physicalPortDefLaserOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLaserOnTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefLaserOnTimer.setDescription('Delay before laser is switched on')
physicalPortDefLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 30), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLaserOffDelayFunction.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefLaserOffDelayFunction.setDescription('A configuration request for the Laser Off Delay function. This function\n        delays turning off the laser as a consequent action to a defect.')
physicalPortDefAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 31), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefAutoPTassignment.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefAutoPTassignment.setDescription('Auto assignment of ODU PT')
physicalPortDefTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 32), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTributarySlotMethod.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTributarySlotMethod.setDescription('Tributary Slot assignment method')
physicalPortDefInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 33), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefInitiateEqualization.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefInitiateEqualization.setDescription('Initiate Equalization')
physicalPortDefLossAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 34), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLossAttenuation.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefLossAttenuation.setDescription('LOS Attenuation Finding in progress')
physicalPortDefOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
physicalPortDefDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 36), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefDataLayerPmReset.setDescription('Reset data-layer Performance registers')
physicalPortDefPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 37), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefPrbsPmReset.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefPrbsPmReset.setDescription('Reset PRBS PM counters')
physicalPortDefTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 38), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTestPrbsRcvMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTestPrbsRcvMode.setDescription('PRBS test pattern received')
physicalPortDefTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 39), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTestPrbsTrmtMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTestPrbsTrmtMode.setDescription('PRBS test pattern transmitted')
physicalPortDefSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 40), FspR7APSCommand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSwitchCommand.setDescription('The switch command action for this facility. A command resulting\n        in a switch event will also cause a change of the facility secondary state\n        and a corresponding condition. Addressed by this command is the active port,\n        the port to switch away from. Since this is a manual switch command, it will\n        not switch if other port suffers from a signalfailure or a signal degrade.')
physicalPortDefOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 41), FspR7OpuPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefOpuPayloadType.setDescription('OPU Payload Type Indicator')
physicalPortDefSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 42), FspR7BERThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresSonetLine.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegThresSonetLine.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
physicalPortDefSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresSdhMs.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegThresSdhMs.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n        Defined as percentage Background Block Errors (30% default) evaluated\n        over a defined period (SDPER-RS).')
physicalPortDefSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegThresOtu.setDescription('Background-Block-Error-Based Signal Degradation Definition for OTU')
physicalPortDefSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
physicalPortDefSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThreshold.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegThreshold.setDescription('Threshold for number of errors (CV or CV+DE) in one second')
physicalPortDefSigDegPcslThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPcslThreshold.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegPcslThreshold.setDescription('Block-Error-Based Degradation Definition for Physical Coding Sublayer')
physicalPortDefSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 48), FspR7BERThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegThresSonetSection.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
physicalPortDefSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresSdhSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegThresSdhSection.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n        Defined as percentage Background Block Errors (30% default) evaluated\n        over a defined period (SDPER-RS).')
physicalPortDefSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
physicalPortDefSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
physicalPortDefSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
physicalPortDefSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSignalDegradePeriod.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSignalDegradePeriod.setDescription('The measurement period in seconds used together with\n        the deployProvIfSigDegThresSdhRegSect based on the block error counting method.\n        The valid range is 2..10,\n        The default being 7.')
physicalPortDefSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 54), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
physicalPortDefSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOtu.setDescription('Integration Period for Signal degrade')
physicalPortDefSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodIntegration.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodIntegration.setDescription('Integration Period for Signal degrade')
physicalPortDefSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 57), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodSdhSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodSdhSection.setDescription('Provisionable Signal Degrade Integration Period for SDH')
physicalPortDefSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 58), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
physicalPortDefSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
physicalPortDefSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 60), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
physicalPortDefOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 61), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
physicalPortDefTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 62), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTcmALevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTcmALevel.setDescription('Activation of Tandem Connection Monitoring Instance A')
physicalPortDefTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 63), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTcmBLevel.setDescription('Activation of Tandem Connection Monitoring Instance B')
physicalPortDefTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 64), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
physicalPortDefTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 65), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTerminationLevel.setDescription('Highest signal level hardware removes then generates for transmission.')
physicalPortDefTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 66), SonetTimingSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimingSource.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTimingSource.setDescription('The timing source for this interface.\n        - internal: used in stand-alone, point-to-point topologies stand-alone (dedicated fiber operation).\n        - loopTiming: e.g. used in point-to-point via SONET network and feeder topologies. The default is\n        internal(1).')
physicalPortDefTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 67), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
physicalPortDefTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 68), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimModeOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTimModeOtu.setDescription('OTU Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
physicalPortDefTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 69), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimModeSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTimModeSonetSection.setDescription('SONET Section  Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
physicalPortDefTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 70), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTimModeOduTcmA.setDescription('TCM_A Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
physicalPortDefTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 71), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTimModeOduTcmB.setDescription('TCM_B Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
physicalPortDefTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 72), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTimModeOduTcmC.setDescription('TCM_C Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
physicalPortDefTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 73), SonetTraceForm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceFormSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceFormSonetSection.setDescription('Byte-Length of Trace Compared to Expected')
physicalPortDefTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 74), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceExpectedSonetSection.setDescription('Expected Sec/RS trace. NULL TRACE implies that no trace comparison is made.')
physicalPortDefTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 75), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSonetSection.setDescription('Sec/RS Trace to be Transmitted')
physicalPortDefTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 76), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOtu.setDescription('Expected SAPI part of the OTU trace (15 character). NULL TRACE implies that no trace comparison is made.')
physicalPortDefTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 77), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOtu.setDescription('The transmitted SAPI part of the OTU trace (15 character)')
physicalPortDefTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 78), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOtu.setDescription('The transmitted DAPI part of the OTU trace (15 character)')
physicalPortDefTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 79), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOtu.setDescription('The transmitted Operator Specific part of the OTU trace (32 character)')
physicalPortDefTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 80), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character). NULL TRACE implies that no trace comparison is made.')
physicalPortDefTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 81), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
physicalPortDefTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 82), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
physicalPortDefTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 83), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
physicalPortDefTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 84), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
physicalPortDefTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
physicalPortDefTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
physicalPortDefTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 87), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
physicalPortDefTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 88), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
physicalPortDefTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 89), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
physicalPortDefTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 90), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
physicalPortDefTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 91), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
physicalPortDefTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 92), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
physicalPortDefTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 93), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
physicalPortDefTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 94), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
physicalPortDefTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 95), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
physicalPortDefTurnupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 96), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTurnupConfig.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTurnupConfig.setDescription('Turnup Operation')
physicalPortDefTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 97), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTxOffDelay.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTxOffDelay.setDescription('Enable or disable TXOFFHOLD Period for Error Forwarding and LKDO-OFF Consequent Action.')
physicalPortDefVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 98), FspR7VoaMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefVoaMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefVoaMode.setDescription('VOA operating mode')
physicalPortDefVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 99), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
physicalPortDefLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLagPrio.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefLagPrio.setDescription('Part of ID. Port pri that defines standby.')
physicalPortDefMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 101), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefMaxFrameSize.setDescription('Max Frame Size')
physicalPortDefPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 102), OtnPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefPayload.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefPayload.setDescription('The PAYLOAD defines the transport service type of the payload')
physicalPortDefPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 103), FspR7PortMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefPortMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefPortMode.setDescription('Port Mode')
physicalPortDefPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 104), FspR7PortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefPortRole.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefPortRole.setDescription('ADVA cloud Port Roles')
physicalPortDefPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 105), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefPriority.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefPriority.setDescription('Default PCP in case UTAG is Enabled. The Prio may be remapped in the EVC.')
physicalPortDefPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 106), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefPvid.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefPvid.setDescription('Default VLAN ID (both STAG/CTAG mode) in case UTAG is enabled')
physicalPortDefStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 107), FspR7SnmpHexString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefStagType.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefStagType.setDescription('TAG type field')
physicalPortDefUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 108), FspR7UntaggedFrames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefUtag.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefUtag.setDescription('If untagged frames shall be enabled on this port or not.')
physicalPortDefVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 109), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefVethAid.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefVethAid.setDescription('Shows if PORT is a member in the LAG with the VETH AID')
physicalPortDefRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 110), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefRedLineState.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
physicalPortDefTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 111), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTunnelAid.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTunnelAid.setDescription('Tunnel AID')
physicalPortDefRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 112), FspR7DisableEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefRateLimit.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefRateLimit.setDescription('Selection to apply rate limit feature or not.')
physicalPortDefTxOffOnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 113), FspR7TxOffOnTm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTxOffOnTm.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTxOffOnTm.setDescription('Relevant only when ERRFWD=TXOFF. Enables/disables the\n        possibility to delay turning off and on the the transmitter.\n        This applies to the case when turning off the transmitter\n        is done  as an error forwarding mechanism.')
physicalPortDefTxOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 114), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTxOffTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTxOffTimer.setDescription('Delay before transmitter is swiched off')
physicalPortDefTxOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 115), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTxOnTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTxOnTimer.setDescription('Delay before transmitter is switched on')
physicalPortDefMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 116), FspR7TransmissionMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefMode.setDescription('Mode of the module, determine operation or functionality')
physicalPortDefMonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 117), FspR7MonLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefMonLevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefMonLevel.setDescription('Highest signal level of intrusive or non-intrusive monitoring. Hardware may monitor the signal one layer higher than Termination Level (TERM).')
physicalPortDefChannelPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 118), FspR7ChannelRangeInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefChannelPlan.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefChannelPlan.setDescription('Channel Range')
physicalPortDefOptimize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 119), FspR7Optimize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefOptimize.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefOptimize.setDescription('Optimizes port for either protection switch time or traffic regeneration operation')
physicalPortDefEncryptionChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 120), CryptoFspR7EncryptionCommunication()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefEncryptionChannel.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefEncryptionChannel.setDescription('Embedded Communication Channel used to support Encryption')
physicalPortDefLinkSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 121), FspR7DisableEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLinkSetup.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefLinkSetup.setDescription('Support RDMA over Converged Ethernet (RoCE)')
physicalPortDefCdCompensationRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 122), FspR7CdCompensationRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefCdCompensationRange.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefCdCompensationRange.setDescription('Chromatic Dispersion Compensation Goal')
physicalPortDefChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 123), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefChannelSpacing.setDescription('ITU Grid channel spacing')
physicalPortDefLLDPNeighborsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 124), FspR7LLDPNeighbors()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLLDPNeighborsRx.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefLLDPNeighborsRx.setDescription('LLDP Neighbors in Rx Direction')
physicalPortDefLLDPNeighborsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 125), FspR7LLDPNeighbors()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLLDPNeighborsTx.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefLLDPNeighborsTx.setDescription('LLDP Neighbors in Tx Direction')
physicalPortDefCdPostCompensationRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 126), FspR7CdPostCompensationRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefCdPostCompensationRange.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefCdPostCompensationRange.setDescription('CD Post Compensation Range\n        Range 1: [-22 ns/nm   to +6 ns/nm] or [-20 ns/nm to +2 ns/nm]\n        Range 2: [-72 ns/nm   to +6 ns/nm] or [-45 ns/nm to +5 ns/nm]\n        Range 3: [-120 ns/nm to +6 ns/nm]\n        Range 4: [-280 ns/nm to +6 ns/nm]')
physicalPortDefLaneChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 127), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLaneChannel1.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefLaneChannel1.setDescription('Lane Channel')
physicalPortDefLaneChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 128), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLaneChannel2.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefLaneChannel2.setDescription('Lane Channel')
physicalPortDefOpticalSetPointLane1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 129), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefOpticalSetPointLane1.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefOpticalSetPointLane1.setDescription('Optical Power Setpoint for Optical Transport Lane 1')
physicalPortDefOpticalSetPointLane2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 130), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefOpticalSetPointLane2.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefOpticalSetPointLane2.setDescription('Optical Power Setpoint for Optical Transport Lane 2')
physicalPortDefTerminationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 131), FspR7TerminationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTerminationMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTerminationMode.setDescription('FSP 3000 C Signal Termination Modes\n        Monitor or Terminate \tdescribes general signal handling at layer\n        Mux\t\tindicates if signal is multiplexed or demultiplexed at layer\n        Connect\t\tindicates support for Sub Network Connection (SNC), cross-connect')
physicalPortDefTimDetModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 132), FspR7TimDetMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimDetModeOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTimDetModeOtu.setDescription('OTU Trace Identifier Mismatch (TIM) strings compared to generate TIM defect.')
physicalPortDefTimActionOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 133), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimActionOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTimActionOtu.setDescription('Trace Identifier Mismatch (TIM) is reported as an alarm when detected. User selection allow traffic or AIS to be sent while the mismatch is present.')
physicalPortDefTraceExpectedDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 134), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedDapiOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceExpectedDapiOtu.setDescription('Expected DAPI part of the OTU trace (15 character). NULL TRACE implies that no trace comparison is made.')
physicalPortDefTraceExpectedOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 135), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOpspOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOpspOtu.setDescription('Expected OPSP part of the OTU trace (32 character). NULL TRACE implies that no trace comparison is made.')
physicalPortDefTimDetModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 136), FspR7TimDetMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimDetModeOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTimDetModeOdu.setDescription('ODU Trace Identifier Mismatch (TIM) strings compared to generate TIM defect.')
physicalPortDefTimActionOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 137), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimActionOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTimActionOdu.setDescription('Trace Identifier Mismatch (TIM) is reported as an alarm when detected. User selection allow traffic or AIS to be sent while the mismatch is present.')
physicalPortDefTraceExpectedDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 138), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedDapiOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceExpectedDapiOdu.setDescription('Expected DAPI part of the ODU trace (15 character). NULL TRACE implies that no trace comparison is made.')
physicalPortDefTraceExpectedOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 139), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOpspOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOpspOdu.setDescription('Expected OPSP part of the ODU trace (32 character). NULL TRACE implies that no trace comparison is made.')
physicalPortDefReportAisLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 140), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefReportAisLine.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefReportAisLine.setDescription('Whether AIS alarm (Line/MS) is reported or not.')
physicalPortDefReportSsfLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 141), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefReportSsfLine.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefReportSsfLine.setDescription('Whether SSF alarm (Line/MS) is reported or not.')
physicalPortDefReportSsfSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 142), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefReportSsfSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefReportSsfSection.setDescription('Whether SSF alarm (Section/RS) is reported or not.')
physicalPortDefDelayMeasurementOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 143), FspR7DmsrmtOperation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefDelayMeasurementOperation.setStatus('current')
if mibBuilder.loadTexts: physicalPortDefDelayMeasurementOperation.setDescription('Delay Measurement start')
virtualPortDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2), )
if mibBuilder.loadTexts: virtualPortDefTable.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTable.setDescription('virtualPortDefTable')
virtualPortDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: virtualPortDefEntry.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefEntry.setDescription('Entry of virtualPortDefTable')
virtualPortDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefRowStatus.setDescription('Virtual Port Capability RowStatus.')
virtualPortDefChannelBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 2), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefChannelBand.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefChannelBand.setDescription('Virtual Port Capability Channel Bandwidth.')
virtualPortDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefType.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefType.setDescription('Virtual Port Capability Facility Type.')
virtualPortDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefAlias.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefAlias.setDescription('Virtual Port Capability Alias.')
virtualPortDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 5), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefAdmin.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefAdmin.setDescription('Virtual Port Capability Adminstrative State.')
virtualPortDefEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 6), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefEqlzAdmin.setDescription('Virtual Port Capability Fiber Connection Attenuation.')
virtualPortDefInitEqlz = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 7), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefInitEqlz.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefInitEqlz.setDescription('Virtual Port Capability Initiate Equalization.')
virtualPortDefLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 8), FspR7LacpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefLacpMode.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefLacpMode.setDescription('Enable of LACP state machine')
virtualPortDefLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 9), FspR7LacpTimeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefLacpTimeout.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefLacpTimeout.setDescription('Timeout of the LACP')
virtualPortDefLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefLagActivePorts.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefLagActivePorts.setDescription('Number of active ports in the Link Aggregation Group')
virtualPortDefMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefMaxFrameSize.setDescription('Max Frame Size')
virtualPortDefPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 12), FspR7PortMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefPortMode.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefPortMode.setDescription('Port Mode')
virtualPortDefDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 13), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefDataLayerPmReset.setDescription('Reset data-layer Performance registers')
virtualPortDefPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 14), FspR7PortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefPortRole.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefPortRole.setDescription('ADVA cloud Port Roles')
virtualPortDefLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 15), FspR7LagPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefLagPortType.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefLagPortType.setDescription('Type/Speed of connected ports in the Link Aggregation Group')
virtualPortDefPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefPriority.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefPriority.setDescription('Default PCP in case UTAG is Enabled. The Prio may be remapped in the EVC.')
virtualPortDefPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefPvid.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefPvid.setDescription('Default VLAN ID (both STAG/CTAG mode) in case UTAG is enabled')
virtualPortDefRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 18), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefRevertiveMode.setDescription('Revertive Protection Switching')
virtualPortDefStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 19), FspR7SnmpHexString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefStagType.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefStagType.setDescription('TAG type field')
virtualPortDefUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 20), FspR7UntaggedFrames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefUtag.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefUtag.setDescription('If untagged frames shall be enabled on this port or not.')
virtualPortDefBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 21), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefBundle.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefBundle.setDescription('List of VC4/VC3/STS1/STS3c/STS24c/STS48c containers used in the BUNDLE')
virtualPortDefSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 22), FspR7APSCommand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefSwitchCommand.setDescription('The switch command action for this facility. A command resulting\n        in a switch event will also cause a change of the facility secondary state\n        and a corresponding condition. Addressed by this command is the active port,\n        the port to switch away from. Since this is a manual switch command, it will\n        not switch if other port suffers from a signalfailure or a signal degrade.')
virtualPortDefInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 23), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefInhibitSwitchToWork.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefInhibitSwitchToWork.setDescription('Inhibit Switch to working facility. Inhibition blocks an automatic switch to the\n        working facility. Valid only for the protection facility.')
virtualPortDefInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 24), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefInhibitSwitchToProt.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefInhibitSwitchToProt.setDescription('Inhibit Switch to protection facility. Inhibition blocks an automatic switch\n        to the protection facility. Valid only for the working facility.')
virtualPortDefOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefOduTribPortNo.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefOduTribPortNo.setDescription('ODU Tributary Port Number')
virtualPortDefOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 26), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefOduTribTimeSlottNo.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefOduTribTimeSlottNo.setDescription('ODU Tributary slot number. Multiple values can be entered as a string, separated by commas or given as a range.\n        For capabilities objects possible number of slots and valid range are displayed in a form:\n        [1,2,3,8][count: 1-1]\n        In first brackets valid slots are shown and in the second possible number of slots.')
virtualPortDefSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
virtualPortDefSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
virtualPortDefTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character). NULL TRACE implies that no trace comparison is made.')
virtualPortDefTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
virtualPortDefTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
virtualPortDefTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
virtualPortDefTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 33), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
virtualPortDefSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
virtualPortDefSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
virtualPortDefSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
virtualPortDefSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
virtualPortDefSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
virtualPortDefSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
virtualPortDefTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 40), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTcmALevel.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTcmALevel.setDescription('Activation of Tandem Connection Monitoring Instance A')
virtualPortDefTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 41), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTcmBLevel.setDescription('Activation of Tandem Connection Monitoring Instance B')
virtualPortDefTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 42), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
virtualPortDefTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
virtualPortDefTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
virtualPortDefTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
virtualPortDefTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
virtualPortDefTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 47), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTimModeOduTcmA.setDescription('TCM_A Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
virtualPortDefTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
virtualPortDefTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
virtualPortDefTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
virtualPortDefTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
virtualPortDefTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 52), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTimModeOduTcmB.setDescription('TCM_B Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
virtualPortDefTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
virtualPortDefTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
virtualPortDefTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
virtualPortDefTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 56), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
virtualPortDefTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 57), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTimModeOduTcmC.setDescription('TCM_C Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
virtualPortDefTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 58), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTerminationLevel.setDescription('Highest signal level hardware removes then generates for transmission.')
virtualPortDefLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 59), LoopConfig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefLoopConfig.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefLoopConfig.setDescription('External or Facility Loopback')
virtualPortDefVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 60), VirtualContainerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefVcType.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefVcType.setDescription('Virtual Container Group Type')
virtualPortDefCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 61), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefCir.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefCir.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
virtualPortDefOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 62), FspR7OpuPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefOpuPayloadType.setDescription('OPU Payload Type Indicator')
virtualPortDefOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 63), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
virtualPortDefRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 64), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefRedLineState.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
virtualPortDefTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 65), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTunnelAid.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTunnelAid.setDescription('Tunnel AID')
virtualPortDefOptSetDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefOptSetDeviation.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefOptSetDeviation.setDescription('Channel optical power delta from the port optical power set-point used for equalization (use is optional).')
virtualPortDefPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 67), OtnPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefPayload.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefPayload.setDescription('The PAYLOAD defines the transport service type of the payload')
virtualPortDefPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 68), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefPrbsPmReset.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefPrbsPmReset.setDescription('Reset PRBS PM counters')
virtualPortDefTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 69), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTestPrbsRcvMode.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTestPrbsRcvMode.setDescription('PRBS test pattern received')
virtualPortDefTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 70), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTestPrbsTrmtMode.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTestPrbsTrmtMode.setDescription('PRBS test pattern transmitted')
virtualPortDefTimDetModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 71), FspR7TimDetMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTimDetModeOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTimDetModeOdu.setDescription('ODU Trace Identifier Mismatch (TIM) strings compared to generate TIM defect.')
virtualPortDefTimActionOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 72), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTimActionOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTimActionOdu.setDescription('Trace Identifier Mismatch (TIM) is reported as an alarm when detected. User selection allow traffic or AIS to be sent while the mismatch is present.')
virtualPortDefTraceExpectedDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 73), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceExpectedDapiOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceExpectedDapiOdu.setDescription('Expected DAPI part of the ODU trace (15 character). NULL TRACE implies that no trace comparison is made.')
virtualPortDefTraceExpectedOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 74), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOpspOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOpspOdu.setDescription('Expected OPSP part of the ODU trace (32 character). NULL TRACE implies that no trace comparison is made.')
endOfVirtualPortDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfVirtualPortDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfVirtualPortDefTable.setDescription('')
lldpDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4), )
if mibBuilder.loadTexts: lldpDefTable.setStatus('current')
if mibBuilder.loadTexts: lldpDefTable.setDescription('lldpDefTable')
lldpDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: lldpDefEntry.setStatus('current')
if mibBuilder.loadTexts: lldpDefEntry.setDescription('Entry of lldpDefTable')
lldpDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: lldpDefRowStatus.setDescription('LLDP Capability RowStatus.')
lldpDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpDefType.setStatus('current')
if mibBuilder.loadTexts: lldpDefType.setDescription('LLDP Capability Facility Type.')
lldpDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpDefAlias.setStatus('current')
if mibBuilder.loadTexts: lldpDefAlias.setDescription('LLDP Capability Alias.')
lldpDefDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4, 1, 4), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpDefDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: lldpDefDataLayerPmReset.setDescription('Reset data-layer Performance registers')
lldpDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4, 1, 5), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpDefAdmin.setStatus('current')
if mibBuilder.loadTexts: lldpDefAdmin.setDescription('LLDP Capability Adminstrative State.')
lldpDefLLDPScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4, 1, 6), FspR7LLDPScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpDefLLDPScope.setStatus('current')
if mibBuilder.loadTexts: lldpDefLLDPScope.setDescription('Scope of LLDP propogation based on standard group MAC Addresses')
endOfLldpDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLldpDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfLldpDefTable.setDescription('')
endOfFacilityMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFacilityMgmtDef.setStatus('current')
if mibBuilder.loadTexts: endOfFacilityMgmtDef.setDescription('')
linkDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1), )
if mibBuilder.loadTexts: linkDefTable.setStatus('current')
if mibBuilder.loadTexts: linkDefTable.setDescription('linkCapTable')
linkDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: linkDefEntry.setStatus('current')
if mibBuilder.loadTexts: linkDefEntry.setDescription('Entry of linkCapTable')
linkDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: linkDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
linkDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefType.setStatus('current')
if mibBuilder.loadTexts: linkDefType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
linkDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 3), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefAdmin.setStatus('current')
if mibBuilder.loadTexts: linkDefAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
linkDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefAlias.setStatus('current')
if mibBuilder.loadTexts: linkDefAlias.setDescription('User Applied Descriptor')
linkDefAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefAuthString.setStatus('current')
if mibBuilder.loadTexts: linkDefAuthString.setDescription('OSPF Authentication Key/String depending on Authentication Type')
linkDefProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 6), FspR7NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefProxyArp.setStatus('current')
if mibBuilder.loadTexts: linkDefProxyArp.setDescription('If enabled then ARP requests for FENDIP (coming in on another interface in the same subnet as FENDIP) will be replied too.')
linkDefOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 7), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefOspf.setStatus('current')
if mibBuilder.loadTexts: linkDefOspf.setDescription('OSPF Routing (Dynamic)')
linkDefBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 8), FspR7Baund()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefBaud.setStatus('current')
if mibBuilder.loadTexts: linkDefBaud.setDescription('Baud rate of the serial interface')
linkDefAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 9), FspR7CpAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefAuthType.setStatus('current')
if mibBuilder.loadTexts: linkDefAuthType.setDescription('OSPF Authentication Type')
linkDefIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 10), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefIpType.setStatus('current')
if mibBuilder.loadTexts: linkDefIpType.setDescription('Type of IP configuration')
linkDefMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefMetric.setStatus('current')
if mibBuilder.loadTexts: linkDefMetric.setDescription('Routing Metric')
linkDefAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefAreaAid.setStatus('current')
if mibBuilder.loadTexts: linkDefAreaAid.setDescription('OSPF Area AID')
linkDefNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefNearEndIp.setStatus('current')
if mibBuilder.loadTexts: linkDefNearEndIp.setDescription('IP Address assigned to PPP Termination Point on Near-End NE. Defaults to System IP address')
linkDefBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 13702))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefBitrate.setStatus('current')
if mibBuilder.loadTexts: linkDefBitrate.setDescription('Maximum provisioned bit rate for PPP/IP Link of transmitter for an ECC')
linkDefIPv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 15), FspR7IPv6Type()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefIPv6Type.setStatus('current')
if mibBuilder.loadTexts: linkDefIPv6Type.setDescription('Type of IPv6 configuration')
linkDefNendIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefNendIPv6.setStatus('current')
if mibBuilder.loadTexts: linkDefNendIPv6.setDescription('IPv6 Address assigned to PPP Termination Point on Near-End NE.')
linkDefMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1280, 1500))).setUnits('Byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefMtu.setStatus('current')
if mibBuilder.loadTexts: linkDefMtu.setDescription('Maximum Transmission Unit')
linkDefHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefHelloInterval.setStatus('current')
if mibBuilder.loadTexts: linkDefHelloInterval.setDescription('Hello Interval')
linkDefDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefDeadInterval.setStatus('current')
if mibBuilder.loadTexts: linkDefDeadInterval.setDescription('Dead Interval')
linkDefRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: linkDefRetransmitInterval.setDescription('Retransmit Interval')
linkDefFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefFarEndIp.setStatus('current')
if mibBuilder.loadTexts: linkDefFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default is set by NE System on LINK establishment if FENDIPACPT = Y')
linkDefFendLogicalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefFendLogicalIpAddr.setStatus('current')
if mibBuilder.loadTexts: linkDefFendLogicalIpAddr.setDescription('Far End Logical Interface IP')
endOfLinkDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLinkDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfLinkDefTable.setDescription('')
scDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3), )
if mibBuilder.loadTexts: scDefTable.setStatus('current')
if mibBuilder.loadTexts: scDefTable.setDescription('scCapTable')
scDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: scDefEntry.setStatus('current')
if mibBuilder.loadTexts: scDefEntry.setDescription('Entry of scCapTable')
scDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: scDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
scDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefType.setStatus('current')
if mibBuilder.loadTexts: scDefType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
scDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 3), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAdmin.setStatus('current')
if mibBuilder.loadTexts: scDefAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
scDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAlias.setStatus('current')
if mibBuilder.loadTexts: scDefAlias.setDescription('User Applied Descriptor')
scDefAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAuthString.setStatus('current')
if mibBuilder.loadTexts: scDefAuthString.setDescription('OSPF Authentication Key/String depending on Authentication Type')
scDefOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 6), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefOspf.setStatus('current')
if mibBuilder.loadTexts: scDefOspf.setDescription('OSPF Routing (Dynamic)')
scDefAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 7), FspR7CpAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAuthType.setStatus('current')
if mibBuilder.loadTexts: scDefAuthType.setDescription('OSPF Authentication Type')
scDefIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 8), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefIpType.setStatus('current')
if mibBuilder.loadTexts: scDefIpType.setDescription('Type of IP configuration')
scDefMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefMetric.setStatus('current')
if mibBuilder.loadTexts: scDefMetric.setDescription('Routing Metric')
scDefAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAreaAid.setStatus('current')
if mibBuilder.loadTexts: scDefAreaAid.setDescription('OSPF Area AID')
scDefAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 11), FspR7AlsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAlsMode.setStatus('current')
if mibBuilder.loadTexts: scDefAlsMode.setDescription('Determines the reaction in backward direction in response to a LOS\n        on the same Interface: on a Network Interface connected to the DWDM\n        this is a matter of laser safety')
scDefSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 12), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefSigDegThresReceiver.setStatus('current')
if mibBuilder.loadTexts: scDefSigDegThresReceiver.setDescription('Signal Degrade Threshold on Receiver. Reported as ATTRMT-SDHT to far end.')
scDefAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 13), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: scDefAutonegotiation.setDescription('Auto Negotiation for the data rate')
scDefBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 14), FspR7Bitrate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefBitrate.setStatus('current')
if mibBuilder.loadTexts: scDefBitrate.setDescription('Provisioned data rate')
scDefDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 15), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefDuplex.setStatus('current')
if mibBuilder.loadTexts: scDefDuplex.setDescription('Duplex Mode (provision), available when Auto Negoiation is Disable (AUTONEG=DISABLE)')
scDefAttGradientTh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 990))).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAttGradientTh.setStatus('current')
if mibBuilder.loadTexts: scDefAttGradientTh.setDescription("Attenuation Gradient Threshold on Receive Fiber. Applies to both\n        TRMT and RCV directions; but threshold violation is reported for\n        each direction separately by the 'tapping' alarms: INTRUDE-RCV\n        and INTRUDE-TRMT.")
scDefIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefIpAddr.setStatus('current')
if mibBuilder.loadTexts: scDefIpAddr.setDescription('IP Address assigned to LAN IP Interface')
scDefLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefLanAid.setStatus('current')
if mibBuilder.loadTexts: scDefLanAid.setDescription('AID of LAN')
scDefIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefIpMask.setStatus('current')
if mibBuilder.loadTexts: scDefIpMask.setDescription('IP MASK assigned to LAN IP Interface')
scDefDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 20), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: scDefDataLayerPmReset.setDescription('Reset data-layer Performance registers')
scDefPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefPriority.setStatus('current')
if mibBuilder.loadTexts: scDefPriority.setDescription('Priority')
scDefIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefIPv6.setStatus('current')
if mibBuilder.loadTexts: scDefIPv6.setDescription('IPv6 Address')
scDefIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefIPv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: scDefIPv6PrefixLen.setDescription('IPv6 Subnet Prefix Length')
scDefIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 24), FspR7IpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefIpMode.setStatus('current')
if mibBuilder.loadTexts: scDefIpMode.setDescription('IP Mode of Operation either IPv4 only or IPv4 and IPv6. When operation supports IPv6, it is used for addresses external to the network.')
scDefGatewayProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 25), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefGatewayProxyArp.setStatus('current')
if mibBuilder.loadTexts: scDefGatewayProxyArp.setDescription('Gateway node serves as an ARP proxy')
scDefMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1280, 1500))).setUnits('Byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefMtu.setStatus('current')
if mibBuilder.loadTexts: scDefMtu.setDescription('Maximum Transmission Unit')
scDefHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefHelloInterval.setStatus('current')
if mibBuilder.loadTexts: scDefHelloInterval.setDescription('Hello Interval')
scDefDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefDeadInterval.setStatus('current')
if mibBuilder.loadTexts: scDefDeadInterval.setDescription('Dead Interval')
scDefRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: scDefRetransmitInterval.setDescription('Retransmit Interval')
scDefDhcpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 30), FspR7DhcpServer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefDhcpServer.setStatus('current')
if mibBuilder.loadTexts: scDefDhcpServer.setDescription('Determines DHCP Server/Client mode of the NCU')
scDefDhcpStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 31), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefDhcpStartAddr.setStatus('current')
if mibBuilder.loadTexts: scDefDhcpStartAddr.setDescription('DHCP Start Address')
scDefDhcpStopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 32), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefDhcpStopAddr.setStatus('current')
if mibBuilder.loadTexts: scDefDhcpStopAddr.setDescription('DHCP Stop Address')
scDefDhcpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 33), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefDhcpMask.setStatus('current')
if mibBuilder.loadTexts: scDefDhcpMask.setDescription('DHCP Mask')
scDefFrcdLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 34), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefFrcdLogin.setStatus('current')
if mibBuilder.loadTexts: scDefFrcdLogin.setDescription('Directs web browser to the NED login page when enabled and user is not currently logged in.')
scDefMdix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 35), FspR7InterfaceCrossover()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefMdix.setStatus('current')
if mibBuilder.loadTexts: scDefMdix.setDescription('Medium-dependent interface crossover')
endOfScDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfScDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfScDefTable.setDescription('')
lanDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5), )
if mibBuilder.loadTexts: lanDefTable.setStatus('current')
if mibBuilder.loadTexts: lanDefTable.setDescription('lanCapTable')
lanDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: lanDefEntry.setStatus('current')
if mibBuilder.loadTexts: lanDefEntry.setDescription('Entry of lanCapTable')
lanDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: lanDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
lanDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefType.setStatus('current')
if mibBuilder.loadTexts: lanDefType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
lanDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 3), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefAdmin.setStatus('current')
if mibBuilder.loadTexts: lanDefAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
lanDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefAlias.setStatus('current')
if mibBuilder.loadTexts: lanDefAlias.setDescription('User Applied Descriptor')
lanDefAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefAuthString.setStatus('current')
if mibBuilder.loadTexts: lanDefAuthString.setDescription('OSPF Authentication Key/String depending on Authentication Type')
lanDefOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 6), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefOspf.setStatus('current')
if mibBuilder.loadTexts: lanDefOspf.setDescription('OSPF Routing (Dynamic)')
lanDefAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 7), FspR7CpAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefAuthType.setStatus('current')
if mibBuilder.loadTexts: lanDefAuthType.setDescription('OSPF Authentication Type')
lanDefIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 8), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefIpType.setStatus('current')
if mibBuilder.loadTexts: lanDefIpType.setDescription('Type of IP configuration')
lanDefMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefMetric.setStatus('current')
if mibBuilder.loadTexts: lanDefMetric.setDescription('Routing Metric')
lanDefAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefAreaAid.setStatus('current')
if mibBuilder.loadTexts: lanDefAreaAid.setDescription('OSPF Area AID')
lanDefIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefIpAddr.setStatus('current')
if mibBuilder.loadTexts: lanDefIpAddr.setDescription('IP Address assigned to LAN IP Interface')
lanDefIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefIpMask.setStatus('current')
if mibBuilder.loadTexts: lanDefIpMask.setDescription('IP MASK assigned to LAN IP Interface')
lanDefPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefPriority.setStatus('current')
if mibBuilder.loadTexts: lanDefPriority.setDescription('Priority')
lanDefIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefIPv6.setStatus('current')
if mibBuilder.loadTexts: lanDefIPv6.setDescription('IPv6 Address')
lanDefIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefIPv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: lanDefIPv6PrefixLen.setDescription('IPv6 Subnet Prefix Length')
lanDefIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 16), FspR7IpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefIpMode.setStatus('current')
if mibBuilder.loadTexts: lanDefIpMode.setDescription('IP Mode of Operation either IPv4 only or IPv4 and IPv6. When operation supports IPv6, it is used for addresses external to the network.')
lanDefMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1280, 1500))).setUnits('Byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefMtu.setStatus('current')
if mibBuilder.loadTexts: lanDefMtu.setDescription('Maximum Transmission Unit')
lanDefHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefHelloInterval.setStatus('current')
if mibBuilder.loadTexts: lanDefHelloInterval.setDescription('Hello Interval')
lanDefDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefDeadInterval.setStatus('current')
if mibBuilder.loadTexts: lanDefDeadInterval.setDescription('Dead Interval')
lanDefRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: lanDefRetransmitInterval.setDescription('Retransmit Interval')
lanDefDhcpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 21), FspR7DhcpServer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefDhcpServer.setStatus('current')
if mibBuilder.loadTexts: lanDefDhcpServer.setDescription('Determines DHCP Server/Client mode of the NCU')
lanDefDhcpStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefDhcpStartAddr.setStatus('current')
if mibBuilder.loadTexts: lanDefDhcpStartAddr.setDescription('DHCP Start Address')
lanDefDhcpStopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefDhcpStopAddr.setStatus('current')
if mibBuilder.loadTexts: lanDefDhcpStopAddr.setDescription('DHCP Stop Address')
lanDefDhcpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefDhcpMask.setStatus('current')
if mibBuilder.loadTexts: lanDefDhcpMask.setDescription('DHCP Mask')
lanDefFrcdLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 25), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefFrcdLogin.setStatus('current')
if mibBuilder.loadTexts: lanDefFrcdLogin.setDescription('Directs web browser to the NED login page when enabled and user is not currently logged in.')
endOfLanDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLanDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfLanDefTable.setDescription('')
eccDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7), )
if mibBuilder.loadTexts: eccDefTable.setStatus('current')
if mibBuilder.loadTexts: eccDefTable.setDescription('eccCapTable (Embedded Communication Channel)')
eccDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: eccDefEntry.setStatus('current')
if mibBuilder.loadTexts: eccDefEntry.setDescription('Entry of eccCapTable')
eccDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: eccDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
eccDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccDefType.setStatus('current')
if mibBuilder.loadTexts: eccDefType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
eccDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1, 3), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccDefAdmin.setStatus('current')
if mibBuilder.loadTexts: eccDefAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
eccDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccDefAlias.setStatus('current')
if mibBuilder.loadTexts: eccDefAlias.setDescription('User Applied Descriptor')
eccDefLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccDefLanAid.setStatus('current')
if mibBuilder.loadTexts: eccDefLanAid.setDescription('AID of LAN')
eccDefExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccDefExternalVid.setStatus('current')
if mibBuilder.loadTexts: eccDefExternalVid.setDescription('External VID')
eccDefGccUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1, 7), FspR7GccUsage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccDefGccUsage.setStatus('current')
if mibBuilder.loadTexts: eccDefGccUsage.setDescription('GCC Usage')
endOfEccDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEccDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfEccDefTable.setDescription('')
endOfDcnMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDcnMgmtDef.setStatus('current')
if mibBuilder.loadTexts: endOfDcnMgmtDef.setDescription('')
opticalMuxDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1), )
if mibBuilder.loadTexts: opticalMuxDefTable.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefTable.setDescription('opticalCapTable')
opticalMuxDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: opticalMuxDefEntry.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefEntry.setDescription('Entry of opticalCapTable')
opticalMuxDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
opticalMuxDefPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(115, 138))).setUnits('0.2 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefPumpPower.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefPumpPower.setDescription('Total raman pump power')
opticalMuxDefInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 3), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefInhibitSwitchToWork.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefInhibitSwitchToWork.setDescription('Inhibit Switch to Working. Inhibition blocks a switchInhibit Switch to Protection facility. Inhibition blocksInhibit Switch to Working. Inhibition blocks a switch\n        switch to the Protection facility (protection path).Inhibit Switch to Protection facility. Inhibition blocks\n        switch to the Protection facility (protection path).\n        to the Working facility (working path).\n        to the Working facility (working path).\n        Applicable only for the Working facility in ACT state.\n        Applicable only for the Working facility in ACT state.\n        Applicable for the Protection facility in ACT state.\n        Applicable for the Protection facility in ACT state.')
opticalMuxDefForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 4), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefForceLaserOn.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefForceLaserOn.setDescription('Laser Forced On')
opticalMuxDefAseTabCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 5), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefAseTabCreation.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefAseTabCreation.setDescription('ASE Table creation in process')
opticalMuxDefOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
opticalMuxDefInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 7), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefInitiateEqualization.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefInitiateEqualization.setDescription('Initiate Equalization')
opticalMuxDefTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 0))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefTilt.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
opticalMuxDefOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 50))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefOscOpticalSetpoint.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefOscOpticalSetpoint.setDescription('Sets the OSC optical power')
opticalMuxDefOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefOffset.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefOffset.setDescription('Sets the offset for the mean optical power for power equalization in ROADM')
opticalMuxDefSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 11), FspR7APSCommand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefSwitchCommand.setDescription('The switch command action for this facility. A command resulting\n        in a switch event will also cause a change of the facility secondary state\n        and a corresponding condition. Addressed by this command is the active port,\n        the port to switch away from. Since this is a manual switch command, it will\n        not switch if other port suffers from a signalfailure or a signal degrade.')
opticalMuxDefAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 12), FspR7AlsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefAlsMode.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefAlsMode.setDescription('Determines the reaction in backward direction in response to a LOS\n        on the same Interface: on a Network Interface connected to the DWDM\n        this is a matter of laser safety')
opticalMuxDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 13), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefType.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
opticalMuxDefAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 990))).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefAttenuationGradient.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefAttenuationGradient.setDescription("Attenuation Gradient Threshold on Receive Fiber. Applies to both TRMT and RCV directions; but threshold violation is reported for each direction separately by the 'tapping' alarms: INTRUDE-RCV and INTRUDE-TRMT.")
opticalMuxDefInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 15), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefInhibitSwitchToProt.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefInhibitSwitchToProt.setDescription('Inhibit Switch to Working. Inhibition blocks a switchInhibit Switch to Protection facility. Inhibition blocksInhibit Switch to Working. Inhibition blocks a switch')
opticalMuxDefVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefVariableGain.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefVariableGain.setDescription('Variable Gain of EDFA')
opticalMuxDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 17), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefAdmin.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
opticalMuxDefTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 18), FspR7OtdrPeriod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefTimePeriod.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefTimePeriod.setDescription('NONE - OTDR measurement disabled otherwise the OTDR duration in minutes.')
opticalMuxDefSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 19), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefSigDegThresReceiver.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefSigDegThresReceiver.setDescription('Signal Degrade Threshold on Receiver. Reported as ATTRMT-SDHT to far end.')
opticalMuxDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefAlias.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefAlias.setDescription('User Applied Descriptor')
opticalMuxDefDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 21), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefDataLayerPmReset.setDescription('Reset data-layer Performance registers')
opticalMuxDefGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 22), FspR7Gain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefGain.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefGain.setDescription('Gain')
opticalMuxDefEdfaPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 23), FspR7EdfaOutputPowerRating()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefEdfaPwrOut.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefEdfaPwrOut.setDescription('Optical Output Power Rating - Provision')
opticalMuxDefVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
opticalMuxDefFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 25), FspR7FiberBrand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefFiberBrand.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefFiberBrand.setDescription('Brand of fiber present in the fiber plant')
opticalMuxDefTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 26), FspR7TiltSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefTiltSet.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefTiltSet.setDescription('Tilt setting as discrete values versus a range')
opticalMuxDefForceFwdAsePilotOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 27), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefForceFwdAsePilotOn.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefForceFwdAsePilotOn.setDescription('Force the BWD Raman pilot on to allow building of FWD Raman ASE Table')
opticalMuxDefBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 28), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefBandProvision.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefBandProvision.setDescription('Band Provision. Reference to BAND__INVENTORY.')
opticalMuxDefOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefOffsetHigh.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefOffsetHigh.setDescription('Sets the high level offset for power equalization in CCM')
opticalMuxDefOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefOffsetLow.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefOffsetLow.setDescription('Sets the low level offset for power equalization in CCM')
opticalMuxDefOptUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 31), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefOptUpdate.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefOptUpdate.setDescription('This parameter is used to operate/trigger OPT PM update; it triggers the entity to update its current OPT PM value, which can be retrieved via GET function.')
opticalMuxDefVariableGainNtoR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefVariableGainNtoR.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefVariableGainNtoR.setDescription('Variable Gain of EDFA (N to R)')
opticalMuxDefVariableGainRtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefVariableGainRtoN.setStatus('current')
if mibBuilder.loadTexts: opticalMuxDefVariableGainRtoN.setDescription('Variable Gain of EDFA (R to N)')
endOfOpticalMuxDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfOpticalMuxDefTable.setDescription('')
endOfOpticalMuxMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxMgmtDef.setStatus('current')
if mibBuilder.loadTexts: endOfOpticalMuxMgmtDef.setDescription('')
shelfConnDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1), )
if mibBuilder.loadTexts: shelfConnDefTable.setStatus('current')
if mibBuilder.loadTexts: shelfConnDefTable.setDescription('shelfConnCapTable')
shelfConnDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"))
if mibBuilder.loadTexts: shelfConnDefEntry.setStatus('current')
if mibBuilder.loadTexts: shelfConnDefEntry.setDescription('Entry of shelfConnCapTable')
shelfConnDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: shelfConnDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
shelfConnDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 2), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefAdmin.setStatus('current')
if mibBuilder.loadTexts: shelfConnDefAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
shelfConnDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefAlias.setStatus('current')
if mibBuilder.loadTexts: shelfConnDefAlias.setDescription('User Applied Descriptor')
shelfConnDefFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 4), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefFacilityType.setStatus('current')
if mibBuilder.loadTexts: shelfConnDefFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
shelfConnDefDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 5), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: shelfConnDefDataLayerPmReset.setDescription('Reset data-layer Performance registers')
shelfConnDefAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 6), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: shelfConnDefAutonegotiation.setDescription('Auto Negotiation for the data rate')
shelfConnDefBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 7), FspR7Bitrate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefBitrate.setStatus('current')
if mibBuilder.loadTexts: shelfConnDefBitrate.setDescription('Provisioned data rate')
shelfConnDefDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 8), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefDuplex.setStatus('current')
if mibBuilder.loadTexts: shelfConnDefDuplex.setDescription('Duplex Mode (provision), available when Auto Negoiation is Disable (AUTONEG=DISABLE)')
shelfConnDefMdix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 9), FspR7InterfaceCrossover()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefMdix.setStatus('current')
if mibBuilder.loadTexts: shelfConnDefMdix.setDescription('Medium-dependent interface crossover')
endOfShelfConnDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfConnDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfShelfConnDefTable.setDescription('')
endOfShelfConnMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfConnMgmtDef.setStatus('current')
if mibBuilder.loadTexts: endOfShelfConnMgmtDef.setDescription('')
envPortDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1), )
if mibBuilder.loadTexts: envPortDefTable.setStatus('current')
if mibBuilder.loadTexts: envPortDefTable.setDescription('envPortCapTable')
envPortDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: envPortDefEntry.setStatus('current')
if mibBuilder.loadTexts: envPortDefEntry.setDescription('Entry of envPortCapTable')
envPortDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: envPortDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
envPortDefTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1, 1, 2), FspR7TelemetryOutput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortDefTelemetry.setStatus('current')
if mibBuilder.loadTexts: envPortDefTelemetry.setDescription('Telemetry interface output provision')
envPortDefFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortDefFacilityType.setStatus('current')
if mibBuilder.loadTexts: envPortDefFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
envPortDefTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortDefTifAlarmType.setStatus('current')
if mibBuilder.loadTexts: envPortDefTifAlarmType.setDescription('Telemetry interface alarm type')
envPortDefTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortDefTifAlarmMessage.setStatus('current')
if mibBuilder.loadTexts: envPortDefTifAlarmMessage.setDescription('Telemetry interface alarm message')
envPortDefInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1, 1, 6), FspR7InvertTelemetryInputLogic()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortDefInvertTifInputLogic.setStatus('current')
if mibBuilder.loadTexts: envPortDefInvertTifInputLogic.setDescription('Change telemetry interface input logic')
endOfEnvPortDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEnvPortDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfEnvPortDefTable.setDescription('')
endOfEnvMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEnvMgmtDef.setStatus('current')
if mibBuilder.loadTexts: endOfEnvMgmtDef.setDescription('')
containerDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 9, 1), )
if mibBuilder.loadTexts: containerDefTable.setStatus('current')
if mibBuilder.loadTexts: containerDefTable.setDescription('containerCapTable')
containerDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 9, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"))
if mibBuilder.loadTexts: containerDefEntry.setStatus('current')
if mibBuilder.loadTexts: containerDefEntry.setDescription('Entry of containerCapTable')
containerDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: containerDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
containerDefFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 9, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerDefFacilityType.setStatus('current')
if mibBuilder.loadTexts: containerDefFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
endOfContainerDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainerDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfContainerDefTable.setDescription('')
endOfContainerMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 9, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainerMgmtDef.setStatus('current')
if mibBuilder.loadTexts: endOfContainerMgmtDef.setDescription('')
opticalLineDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1), )
if mibBuilder.loadTexts: opticalLineDefTable.setStatus('current')
if mibBuilder.loadTexts: opticalLineDefTable.setDescription('opticalLineCapTable')
opticalLineDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineClassName"))
if mibBuilder.loadTexts: opticalLineDefEntry.setStatus('current')
if mibBuilder.loadTexts: opticalLineDefEntry.setDescription('Entry of opticalLineCapTable')
opticalLineDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: opticalLineDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
opticalLineDefTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineDefTxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: opticalLineDefTxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to\n        transmitter of this interface. If there is loss of signal\n        then line attenuation is -65535. The value -255 will be\n        returned if the value isn't available.")
opticalLineDefRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineDefRxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: opticalLineDefRxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to receiver\n        of this interface. If there is loss of signal then ine\n        attenuation is -65535. The value -255 will be returned if\n        the value isn't available.")
opticalLineDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineDefAlias.setStatus('current')
if mibBuilder.loadTexts: opticalLineDefAlias.setDescription('User Applied Descriptor')
opticalLineDefFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineDefFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: opticalLineDefFarEndLocation.setDescription('FEND Location')
opticalLineDefFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('km').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineDefFiberLength.setStatus('current')
if mibBuilder.loadTexts: opticalLineDefFiberLength.setDescription('Fiber length between 2 remote NEs')
opticalLineDefChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1, 7), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineDefChannelBandwith.setStatus('current')
if mibBuilder.loadTexts: opticalLineDefChannelBandwith.setDescription('Channel Bandwidth')
endOfOpticalLineDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalLineDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfOpticalLineDefTable.setDescription('')
endOfOpticalLineMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalLineMgmtDef.setStatus('current')
if mibBuilder.loadTexts: endOfOpticalLineMgmtDef.setDescription('')
optThresholdConfigDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 1), )
if mibBuilder.loadTexts: optThresholdConfigDefTable.setStatus('current')
if mibBuilder.loadTexts: optThresholdConfigDefTable.setDescription('optThresholdConfigCapTable')
optThresholdConfigDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: optThresholdConfigDefEntry.setStatus('current')
if mibBuilder.loadTexts: optThresholdConfigDefEntry.setDescription('Entry of optThresholdConfigCapTable')
optThresholdConfigDefLowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 300))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optThresholdConfigDefLowConfig.setStatus('current')
if mibBuilder.loadTexts: optThresholdConfigDefLowConfig.setDescription('Configurable threshold of the Optical Power Transmitted (output)')
optThresholdConfigDefHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 300))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optThresholdConfigDefHighConfig.setStatus('current')
if mibBuilder.loadTexts: optThresholdConfigDefHighConfig.setDescription('Configurable high threshold of the Optical Power Transmitted (output)')
oprThresholdConfigDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 2), )
if mibBuilder.loadTexts: oprThresholdConfigDefTable.setStatus('current')
if mibBuilder.loadTexts: oprThresholdConfigDefTable.setDescription('oprThresholdConfigCapTable')
oprThresholdConfigDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: oprThresholdConfigDefEntry.setStatus('current')
if mibBuilder.loadTexts: oprThresholdConfigDefEntry.setDescription('Entry of oprThresholdConfigCapTable')
oprThresholdConfigDefLowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-450, 260))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprThresholdConfigDefLowConfig.setStatus('current')
if mibBuilder.loadTexts: oprThresholdConfigDefLowConfig.setDescription('Optical Input Power Received')
oprThresholdConfigDefHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-450, 270))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprThresholdConfigDefHighConfig.setStatus('current')
if mibBuilder.loadTexts: oprThresholdConfigDefHighConfig.setDescription('Optical Input Power Received')
endOfOprThresholdConfigDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOprThresholdConfigDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfOprThresholdConfigDefTable.setDescription('')
endOfPerformanceFacilityThresholdDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPerformanceFacilityThresholdDef.setStatus('current')
if mibBuilder.loadTexts: endOfPerformanceFacilityThresholdDef.setDescription('')
terminationPointDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 1), )
if mibBuilder.loadTexts: terminationPointDefTable.setStatus('current')
if mibBuilder.loadTexts: terminationPointDefTable.setDescription('terminationPointCapTable')
terminationPointDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"))
if mibBuilder.loadTexts: terminationPointDefEntry.setStatus('current')
if mibBuilder.loadTexts: terminationPointDefEntry.setDescription('Entry of terminationPointCapTable')
terminationPointDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: terminationPointDefRowStatus.setDescription('Physical Termination Point Capability RowStatus.')
terminationPointDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 1, 1, 2), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointDefAdmin.setStatus('current')
if mibBuilder.loadTexts: terminationPointDefAdmin.setDescription('Physical Termination Point Capability Adminstrative State.')
terminationPointDefFiberDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 1, 1, 3), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointDefFiberDetect.setStatus('current')
if mibBuilder.loadTexts: terminationPointDefFiberDetect.setDescription('Physical Termination Point Capability Fiber Detect.')
terminationPointDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointDefAlias.setStatus('current')
if mibBuilder.loadTexts: terminationPointDefAlias.setDescription('Physical Termination Point Capabillity Alias.')
connectionDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 2), )
if mibBuilder.loadTexts: connectionDefTable.setStatus('current')
if mibBuilder.loadTexts: connectionDefTable.setDescription('connectionCapTable')
connectionDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityConnectionClassName"))
if mibBuilder.loadTexts: connectionDefEntry.setStatus('current')
if mibBuilder.loadTexts: connectionDefEntry.setDescription('Entry of connectionCapTable')
connectionDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 2, 1, 1), FspR7RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: connectionDefRowStatus.setDescription('Physical Connection Default RowStatus.')
connectionDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 2, 1, 2), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionDefType.setStatus('current')
if mibBuilder.loadTexts: connectionDefType.setDescription('Physical Connection Default Type.')
endOfConnectionDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfConnectionDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfConnectionDefTable.setDescription('')
endOfFiberMapDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFiberMapDef.setStatus('current')
if mibBuilder.loadTexts: endOfFiberMapDef.setDescription('')
externalPortDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1), )
if mibBuilder.loadTexts: externalPortDefTable.setStatus('current')
if mibBuilder.loadTexts: externalPortDefTable.setDescription('externalPortDef')
externalPortDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalPortDefEntry.setStatus('current')
if mibBuilder.loadTexts: externalPortDefEntry.setDescription('Entry of externalPortDef')
externalPortDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 1), FspR7RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: externalPortDefRowStatus.setDescription('RowStatus')
externalPortDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefType.setStatus('current')
if mibBuilder.loadTexts: externalPortDefType.setDescription('.')
externalPortDefTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 3), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: externalPortDefTransmitChannel.setDescription('.')
externalPortDefChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 4), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefChannelBandwith.setStatus('current')
if mibBuilder.loadTexts: externalPortDefChannelBandwith.setDescription('.')
externalPortDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefAlias.setStatus('current')
if mibBuilder.loadTexts: externalPortDefAlias.setDescription('.')
externalPortDefFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: externalPortDefFarEndLocation.setDescription('.')
externalPortDefBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 7), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefBitrate.setStatus('current')
if mibBuilder.loadTexts: externalPortDefBitrate.setDescription('.')
externalPortDefFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 8), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefFecType.setStatus('current')
if mibBuilder.loadTexts: externalPortDefFecType.setDescription('.')
externalPortDefLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 9), FspR7LineCoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefLineCoding.setStatus('current')
if mibBuilder.loadTexts: externalPortDefLineCoding.setDescription('.')
externalPortDefFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 10), FspR7FrameFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefFrameFormat.setStatus('current')
if mibBuilder.loadTexts: externalPortDefFrameFormat.setDescription('.')
externalPortDefOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9900, 600))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefOpticalPowerTx.setStatus('current')
if mibBuilder.loadTexts: externalPortDefOpticalPowerTx.setDescription('.')
externalPortDefOsnrTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 58))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefOsnrTransmit.setStatus('current')
if mibBuilder.loadTexts: externalPortDefOsnrTransmit.setDescription('.')
externalPortDefPmdTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefPmdTransmit.setStatus('current')
if mibBuilder.loadTexts: externalPortDefPmdTransmit.setDescription('.')
externalPortDefChromDisperTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefChromDisperTx.setStatus('current')
if mibBuilder.loadTexts: externalPortDefChromDisperTx.setDescription('.')
externalPortDefMinOsnrRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 58))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefMinOsnrRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortDefMinOsnrRcv.setDescription('.')
externalPortDefMinOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefMinOptPowerRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortDefMinOptPowerRcv.setDescription('.')
externalPortDefMaxOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefMaxOptPowerRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortDefMaxOptPowerRcv.setDescription('.')
externalPortDefMaxPmdRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefMaxPmdRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortDefMaxPmdRcv.setDescription('.')
externalPortDefMinChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefMinChromDisperRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortDefMinChromDisperRcv.setDescription('.')
externalPortDefMaxChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefMaxChromDisperRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortDefMaxChromDisperRcv.setDescription('.')
externalPortDefMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 21), FspR7MaxBitErrorRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefMaxBitErrorRate.setStatus('current')
if mibBuilder.loadTexts: externalPortDefMaxBitErrorRate.setDescription('.')
externalPortDefSourceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefSourceProfile.setStatus('current')
if mibBuilder.loadTexts: externalPortDefSourceProfile.setDescription('.')
endOfExternalPortDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfExternalPortDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfExternalPortDefTable.setDescription('')
externalOmDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 3), )
if mibBuilder.loadTexts: externalOmDefTable.setStatus('current')
if mibBuilder.loadTexts: externalOmDefTable.setDescription('externalOmDef')
externalOmDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalOmDefEntry.setStatus('current')
if mibBuilder.loadTexts: externalOmDefEntry.setDescription('Entry of externalOmDef')
externalOmDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 3, 1, 1), FspR7RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalOmDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: externalOmDefRowStatus.setDescription('RowStatus')
externalOmDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 3, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalOmDefType.setStatus('current')
if mibBuilder.loadTexts: externalOmDefType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
externalOmDefHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalOmDefHostName.setStatus('current')
if mibBuilder.loadTexts: externalOmDefHostName.setDescription('Host Device Name')
externalVchDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5), )
if mibBuilder.loadTexts: externalVchDefTable.setStatus('current')
if mibBuilder.loadTexts: externalVchDefTable.setDescription('externalVchDef')
externalVchDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalVchDefEntry.setStatus('current')
if mibBuilder.loadTexts: externalVchDefEntry.setDescription('Entry of externalVchDef')
externalVchDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 1), FspR7RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: externalVchDefRowStatus.setDescription('RowStatus')
externalVchDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefType.setStatus('current')
if mibBuilder.loadTexts: externalVchDefType.setDescription('.')
externalVchDefTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 3), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: externalVchDefTransmitChannel.setDescription('.')
externalVchDefChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 4), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefChannelBandwith.setStatus('current')
if mibBuilder.loadTexts: externalVchDefChannelBandwith.setDescription('.')
externalVchDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefAlias.setStatus('current')
if mibBuilder.loadTexts: externalVchDefAlias.setDescription('.')
externalVchDefFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: externalVchDefFarEndLocation.setDescription('.')
externalVchDefBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 7), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefBitrate.setStatus('current')
if mibBuilder.loadTexts: externalVchDefBitrate.setDescription('.')
externalVchDefFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 8), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefFecType.setStatus('current')
if mibBuilder.loadTexts: externalVchDefFecType.setDescription('.')
externalVchDefLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 9), FspR7LineCoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefLineCoding.setStatus('current')
if mibBuilder.loadTexts: externalVchDefLineCoding.setDescription('.')
externalVchDefFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 10), FspR7FrameFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefFrameFormat.setStatus('current')
if mibBuilder.loadTexts: externalVchDefFrameFormat.setDescription('.')
externalVchDefOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9900, 600))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefOpticalPowerTx.setStatus('current')
if mibBuilder.loadTexts: externalVchDefOpticalPowerTx.setDescription('.')
externalVchDefOsnrTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 58))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefOsnrTransmit.setStatus('current')
if mibBuilder.loadTexts: externalVchDefOsnrTransmit.setDescription('.')
externalVchDefPmdTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefPmdTransmit.setStatus('current')
if mibBuilder.loadTexts: externalVchDefPmdTransmit.setDescription('.')
externalVchDefChromDisperTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefChromDisperTx.setStatus('current')
if mibBuilder.loadTexts: externalVchDefChromDisperTx.setDescription('.')
externalVchDefMinOsnrRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 58))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefMinOsnrRcv.setStatus('current')
if mibBuilder.loadTexts: externalVchDefMinOsnrRcv.setDescription('.')
externalVchDefMinOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefMinOptPowerRcv.setStatus('current')
if mibBuilder.loadTexts: externalVchDefMinOptPowerRcv.setDescription('.')
externalVchDefMaxOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefMaxOptPowerRcv.setStatus('current')
if mibBuilder.loadTexts: externalVchDefMaxOptPowerRcv.setDescription('.')
externalVchDefMaxPmdRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefMaxPmdRcv.setStatus('current')
if mibBuilder.loadTexts: externalVchDefMaxPmdRcv.setDescription('.')
externalVchDefMinChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefMinChromDisperRcv.setStatus('current')
if mibBuilder.loadTexts: externalVchDefMinChromDisperRcv.setDescription('.')
externalVchDefMaxChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefMaxChromDisperRcv.setStatus('current')
if mibBuilder.loadTexts: externalVchDefMaxChromDisperRcv.setDescription('.')
externalVchDefMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 21), FspR7MaxBitErrorRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefMaxBitErrorRate.setStatus('current')
if mibBuilder.loadTexts: externalVchDefMaxBitErrorRate.setDescription('.')
externalVchDefSourceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefSourceProfile.setStatus('current')
if mibBuilder.loadTexts: externalVchDefSourceProfile.setDescription('.')
endOfEciDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEciDef.setStatus('current')
if mibBuilder.loadTexts: endOfEciDef.setDescription('')
changePhysicalPortServiceDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1), )
if mibBuilder.loadTexts: changePhysicalPortServiceDefTable.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTable.setDescription('')
changePhysicalPortServiceDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: changePhysicalPortServiceDefEntry.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefEntry.setDescription('')
changePhysicalPortServiceDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
changePhysicalPortServiceDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefType.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
changePhysicalPortServiceDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 3), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefAdmin.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefAdmin.setDescription('Administrative State is displayed in the GUI and Craft. Transition to Unassigend requires the entity to be deleted.')
changePhysicalPortServiceDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefAlias.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefAlias.setDescription('User Applied Descriptor')
changePhysicalPortServiceDefAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 5), FspR7AlsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefAlsMode.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefAlsMode.setDescription('Determines the reaction in backward direction in response to a LOS\n        on the same Interface: on a Network Interface connected to the DWDM\n        this is a matter of laser safety')
changePhysicalPortServiceDefBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 6), FspR7PortBehaviour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefBehaviour.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefBehaviour.setDescription('Behavior or Port usage based on configuration/usage in the system regardless of faceplate designation')
changePhysicalPortServiceDefDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50000, 50000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefDispersionSetting.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefDispersionSetting.setDescription('Chromatic Dispersion Compensation setting on module')
changePhysicalPortServiceDefDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 8), FspR7DispersionModes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefDispersionMode.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefDispersionMode.setDescription('Chromatic Dispersion Compensation Mode')
changePhysicalPortServiceDefChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefChannelProv.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefChannelProv.setDescription('Channel')
changePhysicalPortServiceDefWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 10), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefWdmRxChannel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefWdmRxChannel.setDescription('Channel Number for the Receive Interface')
changePhysicalPortServiceDefCodeGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 11), FspR7CodeGain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefCodeGain.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefCodeGain.setDescription('Forward Error Correction Coding gain')
changePhysicalPortServiceDefXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 12), FspR7XfpDecisionThres()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefXfpDecisionThres.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefXfpDecisionThres.setDescription('XFP Decision threshold setting')
changePhysicalPortServiceDefDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 13), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefDisparityCorrection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefDisparityCorrection.setDescription('Disparity correction')
changePhysicalPortServiceDefEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 14), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefEqlzAdmin.setDescription('Scheduled Equalization Administration')
changePhysicalPortServiceDefErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 15), FspR7ErrorFwdMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefErrorForwarding.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefErrorForwarding.setDescription('Determines the reaction in forward direction in response to a LOS on\n        the interface on the opposite side of the module: may override\n        this behaviour in the interests of laser safety.')
changePhysicalPortServiceDefFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 16), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefFecType.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefFecType.setDescription('Forward Error Correction (Only relevant where TYPE = OTU#)')
changePhysicalPortServiceDefFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 17), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefFarEndCommunication.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefFarEndCommunication.setDescription('Used for Optojack plugs; Communication to Far End Plug is observed')
changePhysicalPortServiceDefFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 18), FspR7FlowControlMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefFlowControl.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefFlowControl.setDescription('Flow Control mechanism')
changePhysicalPortServiceDefLaneChannelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 19), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaneChannelSetting.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaneChannelSetting.setDescription('Lane Channel Setting')
changePhysicalPortServiceDefLaserDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 20), FspR7LaserDelayTimer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaserDelayTimer.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaserDelayTimer.setDescription('Relevant only when ERRFWD=LSROFF. Enables/disables the\n        possibility to delay turning off and on the laser.\n        This applies to the case when turning off the laser\n        is done  as an error forwarding mechanism.')
changePhysicalPortServiceDefLaserOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaserOffTimer.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaserOffTimer.setDescription('Delay before laser is swiched off')
changePhysicalPortServiceDefLaserOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaserOnTimer.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaserOnTimer.setDescription('Delay before laser is switched on')
changePhysicalPortServiceDefLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 23), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaserOffDelayFunction.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaserOffDelayFunction.setDescription('A configuration request for the Laser Off Delay function. This function\n        delays turning off the laser as a consequent action to a defect.')
changePhysicalPortServiceDefAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 24), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefAutoPTassignment.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefAutoPTassignment.setDescription('Auto assignment of ODU PT')
changePhysicalPortServiceDefTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 25), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTributarySlotMethod.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTributarySlotMethod.setDescription('Tributary Slot assignment method')
changePhysicalPortServiceDefOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
changePhysicalPortServiceDefOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 27), FspR7OpuPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefOpuPayloadType.setDescription('OPU Payload Type Indicator')
changePhysicalPortServiceDefSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 28), FspR7BERThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresSonetLine.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresSonetLine.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
changePhysicalPortServiceDefSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresSdhMs.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresSdhMs.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n        Defined as percentage Background Block Errors (30% default) evaluated\n        over a defined period (SDPER-RS).')
changePhysicalPortServiceDefSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOtu.setDescription('Background-Block-Error-Based Signal Degradation Definition for OTU')
changePhysicalPortServiceDefSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
changePhysicalPortServiceDefSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThreshold.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThreshold.setDescription('Threshold for number of errors (CV or CV+DE) in one second')
changePhysicalPortServiceDefSigDegPcslThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPcslThreshold.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPcslThreshold.setDescription('Block-Error-Based Degradation Definition for Physical Coding Sublayer')
changePhysicalPortServiceDefSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 34), FspR7BERThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresSonetSection.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
changePhysicalPortServiceDefSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresSdhSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresSdhSection.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n        Defined as percentage Background Block Errors (30% default) evaluated\n        over a defined period (SDPER-RS).')
changePhysicalPortServiceDefSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
changePhysicalPortServiceDefSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
changePhysicalPortServiceDefSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
changePhysicalPortServiceDefSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSignalDegradePeriod.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSignalDegradePeriod.setDescription('The measurement period in seconds used together with\n        the deployProvIfSigDegThresSdhRegSect based on the block error counting method.\n        The valid range is 2..10,\n        The default being 7.')
changePhysicalPortServiceDefSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
changePhysicalPortServiceDefSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOtu.setDescription('Integration Period for Signal degrade')
changePhysicalPortServiceDefSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodIntegration.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodIntegration.setDescription('Integration Period for Signal degrade')
changePhysicalPortServiceDefSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodSdhSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodSdhSection.setDescription('Provisionable Signal Degrade Integration Period for SDH')
changePhysicalPortServiceDefSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
changePhysicalPortServiceDefSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
changePhysicalPortServiceDefSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
changePhysicalPortServiceDefOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 47), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
changePhysicalPortServiceDefTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 48), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTcmALevel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTcmALevel.setDescription('Activation of Tandem Connection Monitoring Instance A')
changePhysicalPortServiceDefTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 49), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTcmBLevel.setDescription('Activation of Tandem Connection Monitoring Instance B')
changePhysicalPortServiceDefTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 50), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
changePhysicalPortServiceDefTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 51), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTerminationLevel.setDescription('Highest signal level hardware removes then generates for transmission.')
changePhysicalPortServiceDefTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 52), SonetTimingSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimingSource.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimingSource.setDescription('The timing source for this interface.\n        - internal: used in stand-alone, point-to-point topologies stand-alone (dedicated fiber operation).\n        - loopTiming: e.g. used in point-to-point via SONET network and feeder topologies. The default is\n        internal(1).')
changePhysicalPortServiceDefTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 53), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
changePhysicalPortServiceDefTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 54), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOtu.setDescription('OTU Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
changePhysicalPortServiceDefTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 55), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeSonetSection.setDescription('SONET Section  Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
changePhysicalPortServiceDefTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 56), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOduTcmA.setDescription('TCM_A Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
changePhysicalPortServiceDefTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 57), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOduTcmB.setDescription('TCM_B Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
changePhysicalPortServiceDefTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 58), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOduTcmC.setDescription('TCM_C Trace Identifier Mismatch (TIM) detection/action for TIM defect.')
changePhysicalPortServiceDefTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 59), SonetTraceForm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceFormSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceFormSonetSection.setDescription('Byte-Length of Trace Compared to Expected')
changePhysicalPortServiceDefTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedSonetSection.setDescription('Expected Sec/RS trace. NULL TRACE implies that no trace comparison is made.')
changePhysicalPortServiceDefTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSonetSection.setDescription('Sec/RS Trace to be Transmitted')
changePhysicalPortServiceDefTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 62), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOtu.setDescription('Expected SAPI part of the OTU trace (15 character). NULL TRACE implies that no trace comparison is made.')
changePhysicalPortServiceDefTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOtu.setDescription('The transmitted SAPI part of the OTU trace (15 character)')
changePhysicalPortServiceDefTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOtu.setDescription('The transmitted DAPI part of the OTU trace (15 character)')
changePhysicalPortServiceDefTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOtu.setDescription('The transmitted Operator Specific part of the OTU trace (32 character)')
changePhysicalPortServiceDefTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character). NULL TRACE implies that no trace comparison is made.')
changePhysicalPortServiceDefTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 67), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
changePhysicalPortServiceDefTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
changePhysicalPortServiceDefTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
changePhysicalPortServiceDefTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
changePhysicalPortServiceDefTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
changePhysicalPortServiceDefTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 72), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
changePhysicalPortServiceDefTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 73), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
changePhysicalPortServiceDefTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 74), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
changePhysicalPortServiceDefTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 75), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
changePhysicalPortServiceDefTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 76), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
changePhysicalPortServiceDefTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 77), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
changePhysicalPortServiceDefTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 78), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
changePhysicalPortServiceDefTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 79), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
changePhysicalPortServiceDefTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 80), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
changePhysicalPortServiceDefTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 81), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
changePhysicalPortServiceDefTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 82), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTxOffDelay.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefTxOffDelay.setDescription('Enable or disable TXOFFHOLD Period for Error Forwarding and LKDO-OFF Consequent Action.')
changePhysicalPortServiceDefVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 83), FspR7VoaMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefVoaMode.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefVoaMode.setDescription('VOA operating mode')
changePhysicalPortServiceDefVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 84), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
changePhysicalPortServiceDefMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 85), FspR7TransmissionMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefMode.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefMode.setDescription('Mode of the module, determine operation or functionality')
changePhysicalPortServiceDefMonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 86), FspR7MonLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefMonLevel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefMonLevel.setDescription('Highest signal level of intrusive or non-intrusive monitoring. Hardware may monitor the signal one layer higher than Termination Level (TERM).')
changePhysicalPortServiceDefOptimize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 87), FspR7Optimize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefOptimize.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefOptimize.setDescription('Optimizes port for either protection switch time or traffic regeneration operation')
changePhysicalPortServiceDefLinkSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 88), FspR7DisableEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefLinkSetup.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefLinkSetup.setDescription('Support RDMA over Converged Ethernet (RoCE)')
changePhysicalPortServiceDefChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 89), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceDefChannelSpacing.setDescription('ITU Grid channel spacing')
endOfChangePhysicalPortServiceDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfChangePhysicalPortServiceDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfChangePhysicalPortServiceDefTable.setDescription('')
endOfChangeServiceDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfChangeServiceDef.setStatus('current')
if mibBuilder.loadTexts: endOfChangeServiceDef.setDescription('')
ffpDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2), )
if mibBuilder.loadTexts: ffpDefTable.setStatus('current')
if mibBuilder.loadTexts: ffpDefTable.setDescription('FfpDefTable')
ffpDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFfpShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFfpSlotNo"), (0, "ADVA-FSPR7-MIB", "entityFfpPortNo"), (0, "ADVA-FSPR7-MIB", "entityFfpExtNo"), (0, "ADVA-FSPR7-MIB", "entityFfpClassName"))
if mibBuilder.loadTexts: ffpDefEntry.setStatus('current')
if mibBuilder.loadTexts: ffpDefEntry.setDescription('Entry of FfpDefTable')
ffpDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: ffpDefRowStatus.setDescription('RowStatus')
ffpDefCreationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 2), FfpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefCreationMethod.setStatus('current')
if mibBuilder.loadTexts: ffpDefCreationMethod.setDescription('Type of protection (normal/forced)')
ffpDefSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 3), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefSDswitching.setStatus('current')
if mibBuilder.loadTexts: ffpDefSDswitching.setDescription('This state controls whether the switch criteria for the APS group will\n        include the Signal Degrade alarm.')
ffpDefHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 4), ApsHoldoffTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: ffpDefHoldOffTime.setDescription('This value controls the switch delay (0 to 10 seconds in\n        100ms steps) for the protection group. Changing the hold-off\n        time when the timer is active will not affect the active\n        timer. The change will take effect the next time the timer\n        is active.')
ffpDefProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 5), ProtectionMech()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefProtectionMech.setStatus('current')
if mibBuilder.loadTexts: ffpDefProtectionMech.setDescription('The protection type of this protection group.')
ffpDefWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefWorkingAid.setStatus('current')
if mibBuilder.loadTexts: ffpDefWorkingAid.setDescription('AID of working port involved in the protection group.')
ffpDefProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefProtectionAid.setStatus('current')
if mibBuilder.loadTexts: ffpDefProtectionAid.setDescription('(Protection AID) AID of protection entity involved in the protection group.')
ffpDefSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 8), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefSignalDegradeSwitching.setStatus('current')
if mibBuilder.loadTexts: ffpDefSignalDegradeSwitching.setDescription('Switch Trigger Additionally on Signal Degrade Link Detection')
ffpDefSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 9), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefSignalFailureSwitching.setStatus('current')
if mibBuilder.loadTexts: ffpDefSignalFailureSwitching.setDescription('Switch Trigger on Signal Failure Link Detection')
ffpDefFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefFarEndIp.setStatus('current')
if mibBuilder.loadTexts: ffpDefFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default\n        is set by NE System on LINK establishment if FENDIPACPT = Y')
ffpDefPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefPeerAid.setStatus('current')
if mibBuilder.loadTexts: ffpDefPeerAid.setDescription('AID of Protection Partner involved in the protection group.')
ffpDefApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 12), ApsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefApsType.setStatus('current')
if mibBuilder.loadTexts: ffpDefApsType.setDescription('The type of APS implemented in this protection group.')
ffpDefRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 13), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefRevertMode.setStatus('current')
if mibBuilder.loadTexts: ffpDefRevertMode.setDescription('Revertive Protection Switching')
ffpDefWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 12))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: ffpDefWaitToRestore.setDescription('Wait to Restore Timer value')
ffpDefDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 15), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefDirection.setStatus('current')
if mibBuilder.loadTexts: ffpDefDirection.setDescription("Indicates whether the APS function is 'unidirectional' (single-ended)\n        or 'bidirectional' (dual-ended).")
ffpDefProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 16), FspR7ProtectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefProtectionType.setStatus('current')
if mibBuilder.loadTexts: ffpDefProtectionType.setDescription('')
ffpDefApsFarEndModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 17), FspR7ApsFarEndModule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefApsFarEndModule.setStatus('current')
if mibBuilder.loadTexts: ffpDefApsFarEndModule.setDescription('This value is the far end module type(10tcc10g or other).')
endOfFfpDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFfpDefTable.setStatus('current')
if mibBuilder.loadTexts: endOfFfpDefTable.setDescription('')
endOfProtectionDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfProtectionDef.setStatus('current')
if mibBuilder.loadTexts: endOfProtectionDef.setDescription('')
mibBuilder.exportSymbols("ADVA-FSPR7-DEF-MIB", changePhysicalPortServiceDefTraceTransmitOpspOduTcmB=changePhysicalPortServiceDefTraceTransmitOpspOduTcmB, externalOmDefRowStatus=externalOmDefRowStatus, crossConnectionDefAdmin=crossConnectionDefAdmin, opticalMuxDefInhibitSwitchToProt=opticalMuxDefInhibitSwitchToProt, scDefIpAddr=scDefIpAddr, virtualPortDefRowStatus=virtualPortDefRowStatus, crossConnectionDefAlias=crossConnectionDefAlias, plugDefConnector=plugDefConnector, virtualPortDefSigDegThresOduTcmB=virtualPortDefSigDegThresOduTcmB, externalOmDefEntry=externalOmDefEntry, changePhysicalPortServiceDefSigDegPeriodIntegration=changePhysicalPortServiceDefSigDegPeriodIntegration, moduleDefOutputReset=moduleDefOutputReset, containerDefRowStatus=containerDefRowStatus, moduleDefDCFiberType=moduleDefDCFiberType, plugDefType=plugDefType, virtualPortDefTcmBLevel=virtualPortDefTcmBLevel, opticalMuxDefOffsetHigh=opticalMuxDefOffsetHigh, moduleDefFiberType=moduleDefFiberType, endOfFanDefTable=endOfFanDefTable, scDefHelloInterval=scDefHelloInterval, performanceDef=performanceDef, virtualPortDefAlias=virtualPortDefAlias, plugDefBidirectionalChannel=plugDefBidirectionalChannel, opticalMuxDefForceFwdAsePilotOn=opticalMuxDefForceFwdAsePilotOn, externalPortDefBitrate=externalPortDefBitrate, optThresholdConfigDefTable=optThresholdConfigDefTable, externalVchDefChannelBandwith=externalVchDefChannelBandwith, physicalPortDefFecType=physicalPortDefFecType, physicalPortDefTraceTransmitOpspOduTcmC=physicalPortDefTraceTransmitOpspOduTcmC, changeServiceDef=changeServiceDef, physicalPortDefTraceTransmitDapiOduTcmA=physicalPortDefTraceTransmitDapiOduTcmA, physicalPortDefLoopConfig=physicalPortDefLoopConfig, physicalPortDefTestPrbsTrmtMode=physicalPortDefTestPrbsTrmtMode, moduleDefChannelsProvision=moduleDefChannelsProvision, physicalPortDefTimModeOduTcmB=physicalPortDefTimModeOduTcmB, virtualPortDefTraceExpectedOduTcmA=virtualPortDefTraceExpectedOduTcmA, crossDcnDefEcc=crossDcnDefEcc, externalPortDefMaxOptPowerRcv=externalPortDefMaxOptPowerRcv, crossOpticalLineDefCrsType=crossOpticalLineDefCrsType, virtualPortDefSigDegPeriodOduTcmC=virtualPortDefSigDegPeriodOduTcmC, eccDefGccUsage=eccDefGccUsage, endOfEccDefTable=endOfEccDefTable, lanDefDhcpMask=lanDefDhcpMask, physicalPortDefCodeGain=physicalPortDefCodeGain, opticalMuxDefTilt=opticalMuxDefTilt, changePhysicalPortServiceDefSigDegPeriodSdhSection=changePhysicalPortServiceDefSigDegPeriodSdhSection, physicalPortDefTraceTransmitSapiOduTcmB=physicalPortDefTraceTransmitSapiOduTcmB, virtualPortDefTraceTransmitOpspOduTcmB=virtualPortDefTraceTransmitOpspOduTcmB, opticalMuxDefPumpPower=opticalMuxDefPumpPower, physicalPortDefPvid=physicalPortDefPvid, terminationPointDefRowStatus=terminationPointDefRowStatus, externalVchDefSourceProfile=externalVchDefSourceProfile, moduleDefTransmitChannel=moduleDefTransmitChannel, plugDefEntry=plugDefEntry, lanDefAdmin=lanDefAdmin, physicalPortDefSigDegThresOtu=physicalPortDefSigDegThresOtu, moduleDefChannelSpacing=moduleDefChannelSpacing, virtualPortDefSigDegThresOduTcmC=virtualPortDefSigDegThresOduTcmC, terminationPointDefEntry=terminationPointDefEntry, changePhysicalPortServiceDefTimingSource=changePhysicalPortServiceDefTimingSource, scDefAuthType=scDefAuthType, scDefMdix=scDefMdix, terminationPointDefAlias=terminationPointDefAlias, externalPortDefSourceProfile=externalPortDefSourceProfile, virtualPortDefLacpMode=virtualPortDefLacpMode, externalVchDefType=externalVchDefType, virtualPortDefTraceTransmitOpspOduTcmA=virtualPortDefTraceTransmitOpspOduTcmA, changePhysicalPortServiceDefSigDegPeriodOduTcmC=changePhysicalPortServiceDefSigDegPeriodOduTcmC, scDefRetransmitInterval=scDefRetransmitInterval, lanDefIPv6=lanDefIPv6, opticalLineDefAlias=opticalLineDefAlias, crossConnectionDefConn=crossConnectionDefConn, opticalMuxDefInitiateEqualization=opticalMuxDefInitiateEqualization, endOfOpticalLineDefTable=endOfOpticalLineDefTable, plugDefLength=plugDefLength, externalVchDefChromDisperTx=externalVchDefChromDisperTx, plugDefAlias=plugDefAlias, moduleDefBand=moduleDefBand, lanDefDhcpStopAddr=lanDefDhcpStopAddr, changePhysicalPortServiceDefTraceTransmitSapiOduTcmB=changePhysicalPortServiceDefTraceTransmitSapiOduTcmB, virtualPortDefCir=virtualPortDefCir, physicalPortDefCdCompensationRange=physicalPortDefCdCompensationRange, physicalPortDefXfpDecisionThres=physicalPortDefXfpDecisionThres, moduleDefForceConfig=moduleDefForceConfig, physicalPortDefReportAisLine=physicalPortDefReportAisLine, ffpDefDirection=ffpDefDirection, managementDef=managementDef, endOfSpecificMgmtDef=endOfSpecificMgmtDef, moduleDefLagSysPrio=moduleDefLagSysPrio, virtualPortDefSigDegThresOduTcmA=virtualPortDefSigDegThresOduTcmA, linkDefType=linkDefType, physicalPortDefTraceTransmitDapiOduTcmB=physicalPortDefTraceTransmitDapiOduTcmB, endOfChangeServiceDef=endOfChangeServiceDef, moduleDefPsuOutputPower=moduleDefPsuOutputPower, opticalLineDefRxLineAttenuation=opticalLineDefRxLineAttenuation, virtualPortDefTraceExpectedOpspOdu=virtualPortDefTraceExpectedOpspOdu, opticalMuxDefVariableGainNtoR=opticalMuxDefVariableGainNtoR, changePhysicalPortServiceDefFlowControl=changePhysicalPortServiceDefFlowControl, lldpDefAlias=lldpDefAlias, plugDefTransmitChannel=plugDefTransmitChannel, virtualPortDefPortRole=virtualPortDefPortRole, externalVchDefEntry=externalVchDefEntry, physicalPortDefTimModeOduTcmA=physicalPortDefTimModeOduTcmA, shelfDefAirFilterCycle=shelfDefAirFilterCycle, changePhysicalPortServiceDefOpuPayloadType=changePhysicalPortServiceDefOpuPayloadType, moduleDefRemoteReset=moduleDefRemoteReset, physicalPortDefLaserOffDelayFunction=physicalPortDefLaserOffDelayFunction, shelfConnDefRowStatus=shelfConnDefRowStatus, physicalPortDefRowStatus=physicalPortDefRowStatus, scDefLanAid=scDefLanAid, physicalPortDefTerminationMode=physicalPortDefTerminationMode, crossDcnDefRowStatus=crossDcnDefRowStatus, physicalPortDefTraceTransmitOpspOduTcmA=physicalPortDefTraceTransmitOpspOduTcmA, virtualPortDefTraceTransmitOpspOdu=virtualPortDefTraceTransmitOpspOdu, externalVchDefTransmitChannel=externalVchDefTransmitChannel, externalVchDefMaxOptPowerRcv=externalVchDefMaxOptPowerRcv, scDefPriority=scDefPriority, opticalMuxDefOscOpticalSetpoint=opticalMuxDefOscOpticalSetpoint, changePhysicalPortServiceDefTraceTransmitSapiOduTcmC=changePhysicalPortServiceDefTraceTransmitSapiOduTcmC, changePhysicalPortServiceDefSignalDegradePeriod=changePhysicalPortServiceDefSignalDegradePeriod, virtualPortDefLoopConfig=virtualPortDefLoopConfig, opticalMuxDefForceLaserOn=opticalMuxDefForceLaserOn, plugDefChannelSpacingProvision=plugDefChannelSpacingProvision, physicalPortDefTcmALevel=physicalPortDefTcmALevel, scDefDataLayerPmReset=scDefDataLayerPmReset, oprThresholdConfigDefLowConfig=oprThresholdConfigDefLowConfig, physicalPortDefAlsMode=physicalPortDefAlsMode, scDefRowStatus=scDefRowStatus, opticalMuxDefFiberBrand=opticalMuxDefFiberBrand, lanDefFrcdLogin=lanDefFrcdLogin, physicalPortDefTraceTransmitOpspOtu=physicalPortDefTraceTransmitOpspOtu, physicalPortDefInhibitSwitchToProt=physicalPortDefInhibitSwitchToProt, linkDefAuthString=linkDefAuthString, facilityMgmtDef=facilityMgmtDef, linkDefDeadInterval=linkDefDeadInterval, lanDefIpMask=lanDefIpMask, shelfDefAlias=shelfDefAlias, physicalPortDefPortRole=physicalPortDefPortRole, shelfConnDefMdix=shelfConnDefMdix, virtualPortDefTraceTransmitDapiOdu=virtualPortDefTraceTransmitDapiOdu, changePhysicalPortServiceDefTraceTransmitSonetSection=changePhysicalPortServiceDefTraceTransmitSonetSection, scDefAreaAid=scDefAreaAid, plugDefRowStatus=plugDefRowStatus, moduleDefAcp=moduleDefAcp, endOfVirtualPortDefTable=endOfVirtualPortDefTable, shelfDefRackOrder=shelfDefRackOrder, scDefIpMask=scDefIpMask, linkDefMtu=linkDefMtu, oprThresholdConfigDefHighConfig=oprThresholdConfigDefHighConfig, externalVchDefPmdTransmit=externalVchDefPmdTransmit, changePhysicalPortServiceDefTraceTransmitDapiOduTcmC=changePhysicalPortServiceDefTraceTransmitDapiOduTcmC, envPortDefInvertTifInputLogic=envPortDefInvertTifInputLogic, physicalPortDefSigDegThresSonetSection=physicalPortDefSigDegThresSonetSection, physicalPortDefAutonegotiation=physicalPortDefAutonegotiation, changePhysicalPortServiceDefTcmBLevel=changePhysicalPortServiceDefTcmBLevel, changePhysicalPortServiceDefLinkSetup=changePhysicalPortServiceDefLinkSetup, endOfModuleDefTable=endOfModuleDefTable, physicalPortDefTraceTransmitDapiOduTcmC=physicalPortDefTraceTransmitDapiOduTcmC, physicalPortDefSigDegPeriodOduTcmC=physicalPortDefSigDegPeriodOduTcmC, physicalPortDefTributarySlotMethod=physicalPortDefTributarySlotMethod, physicalPortDefOpticalSetPointLane1=physicalPortDefOpticalSetPointLane1, externalPortDefEntry=externalPortDefEntry, virtualPortDefSwitchCommand=virtualPortDefSwitchCommand, physicalPortDefSigDegPeriodSdhSection=physicalPortDefSigDegPeriodSdhSection, terminationPointDefTable=terminationPointDefTable, physicalPortDefCdPostCompensationRange=physicalPortDefCdPostCompensationRange, changePhysicalPortServiceDefTraceTransmitSapiOdu=changePhysicalPortServiceDefTraceTransmitSapiOdu, lanDefDeadInterval=lanDefDeadInterval, oprThresholdConfigDefEntry=oprThresholdConfigDefEntry, physicalPortDefAdmin=physicalPortDefAdmin, lanDefMtu=lanDefMtu, externalPortDefMinChromDisperRcv=externalPortDefMinChromDisperRcv, moduleDefType=moduleDefType, opticalMuxDefSigDegThresReceiver=opticalMuxDefSigDegThresReceiver, externalVchDefMinChromDisperRcv=externalVchDefMinChromDisperRcv, virtualPortDefPvid=virtualPortDefPvid, externalOmDefType=externalOmDefType, physicalPortDefTimingSource=physicalPortDefTimingSource, changePhysicalPortServiceDefAlsMode=changePhysicalPortServiceDefAlsMode, physicalPortDefTraceTransmitSapiOtu=physicalPortDefTraceTransmitSapiOtu, physicalPortDefChannelProv=physicalPortDefChannelProv, physicalPortDefUtag=physicalPortDefUtag, virtualPortDefPrbsPmReset=virtualPortDefPrbsPmReset, virtualPortDefTraceExpectedDapiOdu=virtualPortDefTraceExpectedDapiOdu, physicalPortDefVoaMode=physicalPortDefVoaMode, virtualPortDefInhibitSwitchToWork=virtualPortDefInhibitSwitchToWork, externalVchDefLineCoding=externalVchDefLineCoding, moduleDefSubBandProvision=moduleDefSubBandProvision, lanDefAuthString=lanDefAuthString, shelfDefPsuOutputPower=shelfDefPsuOutputPower, lanDefRowStatus=lanDefRowStatus, physicalPortDefLaneChannel2=physicalPortDefLaneChannel2, lldpDefDataLayerPmReset=lldpDefDataLayerPmReset, lldpDefAdmin=lldpDefAdmin, shelfConnMgmtDef=shelfConnMgmtDef, changePhysicalPortServiceDefEntry=changePhysicalPortServiceDefEntry, physicalPortDefEntry=physicalPortDefEntry, crossConnectionDefRowStatus=crossConnectionDefRowStatus, scDefDhcpStartAddr=scDefDhcpStartAddr, changePhysicalPortServiceDefEqlzAdmin=changePhysicalPortServiceDefEqlzAdmin, physicalPortDefRedLineState=physicalPortDefRedLineState, envPortDefTable=envPortDefTable, changePhysicalPortServiceDefAutoPTassignment=changePhysicalPortServiceDefAutoPTassignment, endOfConnectionDefTable=endOfConnectionDefTable, shelfDefBandProvision=shelfDefBandProvision, linkDefIpType=linkDefIpType, physicalPortDefTraceExpectedOtu=physicalPortDefTraceExpectedOtu, changePhysicalPortServiceDefSigDegThresOduTcmB=changePhysicalPortServiceDefSigDegThresOduTcmB, performanceFacilityThresholdDef=performanceFacilityThresholdDef, externalVchDefOsnrTransmit=externalVchDefOsnrTransmit, changePhysicalPortServiceDefFecType=changePhysicalPortServiceDefFecType, physicalPortDefTimDetModeOtu=physicalPortDefTimDetModeOtu, crossConnectionDefCrsFunction=crossConnectionDefCrsFunction, moduleDefSfProvision=moduleDefSfProvision, endOfShelfConnDefTable=endOfShelfConnDefTable, plugDefPlugType=plugDefPlugType, moduleDefMode=moduleDefMode, moduleDefRoadmNumber=moduleDefRoadmNumber, externalVchDefMinOptPowerRcv=externalVchDefMinOptPowerRcv, scDefDhcpServer=scDefDhcpServer, physicalPortDefOpuPayloadType=physicalPortDefOpuPayloadType, fanDefType=fanDefType, changePhysicalPortServiceDefSigDegPeriodOdu=changePhysicalPortServiceDefSigDegPeriodOdu, endOfEnvMgmtDef=endOfEnvMgmtDef, shelfDefPowerSupplyProtection=shelfDefPowerSupplyProtection, externalVchDefFecType=externalVchDefFecType, physicalPortDefSigDegThreshold=physicalPortDefSigDegThreshold, linkDefBaud=linkDefBaud, physicalPortDefTraceTransmitSonetSection=physicalPortDefTraceTransmitSonetSection, optThresholdConfigDefHighConfig=optThresholdConfigDefHighConfig, externalPortDefFecType=externalPortDefFecType, physicalPortDefSigDegThresSdhSection=physicalPortDefSigDegThresSdhSection, shelfDefRack=shelfDefRack, externalVchDefMinOsnrRcv=externalVchDefMinOsnrRcv, ffpDefSDswitching=ffpDefSDswitching, moduleDefTrafficDirection=moduleDefTrafficDirection, physicalPortDefTraceExpectedOduTcmA=physicalPortDefTraceExpectedOduTcmA, endOfChangePhysicalPortServiceDefTable=endOfChangePhysicalPortServiceDefTable, ffpDefApsFarEndModule=ffpDefApsFarEndModule, physicalPortDefWdmRxChannel=physicalPortDefWdmRxChannel, envPortDefTifAlarmMessage=envPortDefTifAlarmMessage, opticalMuxDefVoaSetpoint=opticalMuxDefVoaSetpoint, eqptMgmtDef=eqptMgmtDef, fanDefAlias=fanDefAlias, connectionDefRowStatus=connectionDefRowStatus, changePhysicalPortServiceDefChannelProv=changePhysicalPortServiceDefChannelProv, changePhysicalPortServiceDefOptimize=changePhysicalPortServiceDefOptimize, physicalPortDefLaneChannel1=physicalPortDefLaneChannel1, specificMgmtDef=specificMgmtDef, scDefAlias=scDefAlias, opticalMuxDefType=opticalMuxDefType, ffpDefProtectionMech=ffpDefProtectionMech, moduleDefInitEqlz=moduleDefInitEqlz, virtualPortDefTcmCLevel=virtualPortDefTcmCLevel)
mibBuilder.exportSymbols("ADVA-FSPR7-DEF-MIB", virtualPortDefOptSetDeviation=virtualPortDefOptSetDeviation, terminationPointDefAdmin=terminationPointDefAdmin, opticalMuxDefAlias=opticalMuxDefAlias, changePhysicalPortServiceDefTraceExpectedOtu=changePhysicalPortServiceDefTraceExpectedOtu, opticalMuxDefEdfaPwrOut=opticalMuxDefEdfaPwrOut, opticalMuxDefSwitchCommand=opticalMuxDefSwitchCommand, virtualPortDefTable=virtualPortDefTable, virtualPortDefTraceTransmitSapiOdu=virtualPortDefTraceTransmitSapiOdu, physicalPortDefTraceTransmitSapiOdu=physicalPortDefTraceTransmitSapiOdu, externalVchDefBitrate=externalVchDefBitrate, changePhysicalPortServiceDefTimModeSonetSection=changePhysicalPortServiceDefTimModeSonetSection, moduleDefFiberDetect=moduleDefFiberDetect, connectionDefTable=connectionDefTable, virtualPortDefTimModeOduTcmC=virtualPortDefTimModeOduTcmC, lanDefPriority=lanDefPriority, eciDef=eciDef, endOfLldpDefTable=endOfLldpDefTable, linkDefRetransmitInterval=linkDefRetransmitInterval, changePhysicalPortServiceDefSigDegThresOtu=changePhysicalPortServiceDefSigDegThresOtu, ffpDefProtectionAid=ffpDefProtectionAid, moduleDefTopology=moduleDefTopology, externalVchDefOpticalPowerTx=externalVchDefOpticalPowerTx, endOfExternalPortDefTable=endOfExternalPortDefTable, opticalLineDefRowStatus=opticalLineDefRowStatus, endOfFfpDefTable=endOfFfpDefTable, virtualPortDefEqlzAdmin=virtualPortDefEqlzAdmin, endOfEnvPortDefTable=endOfEnvPortDefTable, virtualPortDefTraceExpectedOduTcmB=virtualPortDefTraceExpectedOduTcmB, virtualPortDefLagActivePorts=virtualPortDefLagActivePorts, moduleDefChannelsNumber=moduleDefChannelsNumber, externalPortDefLineCoding=externalPortDefLineCoding, physicalPortDefDelayMeasurementOperation=physicalPortDefDelayMeasurementOperation, opticalMuxDefTimePeriod=opticalMuxDefTimePeriod, endOfEciDef=endOfEciDef, opticalLineMgmtDef=opticalLineMgmtDef, physicalPortDefTraceTransmitDapiOtu=physicalPortDefTraceTransmitDapiOtu, physicalPortDefFarEndCommunication=physicalPortDefFarEndCommunication, physicalPortDefMaxFrameSize=physicalPortDefMaxFrameSize, changePhysicalPortServiceDefTraceTransmitSapiOduTcmA=changePhysicalPortServiceDefTraceTransmitSapiOduTcmA, shelfConnDefTable=shelfConnDefTable, virtualPortDefSigDegPeriodOduTcmB=virtualPortDefSigDegPeriodOduTcmB, lanDefAuthType=lanDefAuthType, changePhysicalPortServiceDefOtnStuffing=changePhysicalPortServiceDefOtnStuffing, virtualPortDefTraceTransmitOpspOduTcmC=virtualPortDefTraceTransmitOpspOduTcmC, moduleDefAdmin=moduleDefAdmin, physicalPortDefTestPrbsRcvMode=physicalPortDefTestPrbsRcvMode, virtualPortDefTraceExpectedOdu=virtualPortDefTraceExpectedOdu, lldpDefLLDPScope=lldpDefLLDPScope, physicalPortDefTimActionOtu=physicalPortDefTimActionOtu, externalVchDefMaxPmdRcv=externalVchDefMaxPmdRcv, scDefTable=scDefTable, endOfShelfDefTable=endOfShelfDefTable, physicalPortDefSigDegThresOduTcmB=physicalPortDefSigDegThresOduTcmB, externalPortDefOsnrTransmit=externalPortDefOsnrTransmit, linkDefNendIPv6=linkDefNendIPv6, moduleDefRowStatus=moduleDefRowStatus, physicalPortDefTcmCLevel=physicalPortDefTcmCLevel, scDefDuplex=scDefDuplex, shelfDefRackNumber=shelfDefRackNumber, physicalPortDefSigDegPeriodOdu=physicalPortDefSigDegPeriodOdu, physicalPortDefSigDegPeriodOduTcmA=physicalPortDefSigDegPeriodOduTcmA, linkDefMetric=linkDefMetric, opticalLineDefTxLineAttenuation=opticalLineDefTxLineAttenuation, changePhysicalPortServiceDefTimModeOduTcmA=changePhysicalPortServiceDefTimModeOduTcmA, virtualPortDefTraceTransmitSapiOduTcmA=virtualPortDefTraceTransmitSapiOduTcmA, lanDefIpType=lanDefIpType, endOfContainerDefTable=endOfContainerDefTable, physicalPortDefChannelSpacing=physicalPortDefChannelSpacing, moduleDefPartner2=moduleDefPartner2, opticalMuxDefOpticalSetPoint=opticalMuxDefOpticalSetPoint, virtualPortDefRevertiveMode=virtualPortDefRevertiveMode, changePhysicalPortServiceDefType=changePhysicalPortServiceDefType, eccDefLanAid=eccDefLanAid, lanDefMetric=lanDefMetric, physicalPortDefPriority=physicalPortDefPriority, physicalPortDefTimDetModeOdu=physicalPortDefTimDetModeOdu, changePhysicalPortServiceDefVoaMode=changePhysicalPortServiceDefVoaMode, opticalMuxDefRowStatus=opticalMuxDefRowStatus, externalPortDefRowStatus=externalPortDefRowStatus, scDefType=scDefType, fanDefEntry=fanDefEntry, changePhysicalPortServiceDefSigDegPcslThreshold=changePhysicalPortServiceDefSigDegPcslThreshold, containerDefFacilityType=containerDefFacilityType, moduleDefScrambling=moduleDefScrambling, physicalPortDefLaneChannelSetting=physicalPortDefLaneChannelSetting, changePhysicalPortServiceDefChannelSpacing=changePhysicalPortServiceDefChannelSpacing, physicalPortDefTimModeOduTcmC=physicalPortDefTimModeOduTcmC, virtualPortDefSigDegThresOdu=virtualPortDefSigDegThresOdu, changePhysicalPortServiceDefTraceTransmitDapiOduTcmB=changePhysicalPortServiceDefTraceTransmitDapiOduTcmB, physicalPortDefOpticalSetPoint=physicalPortDefOpticalSetPoint, changePhysicalPortServiceDefSigDegThresOdu=changePhysicalPortServiceDefSigDegThresOdu, virtualPortDefTerminationLevel=virtualPortDefTerminationLevel, externalPortDefChromDisperTx=externalPortDefChromDisperTx, virtualPortDefTimModeOdu=virtualPortDefTimModeOdu, physicalPortDefTraceExpectedDapiOtu=physicalPortDefTraceExpectedDapiOtu, endOfPlugDefTable=endOfPlugDefTable, opticalMuxDefAttenuationGradient=opticalMuxDefAttenuationGradient, opticalMuxDefVariableGain=opticalMuxDefVariableGain, endOfShelfConnMgmtDef=endOfShelfConnMgmtDef, externalPortDefOpticalPowerTx=externalPortDefOpticalPowerTx, scDefDhcpMask=scDefDhcpMask, physicalPortDefTxOffOnTm=physicalPortDefTxOffOnTm, scDefGatewayProxyArp=scDefGatewayProxyArp, shelfConnDefDataLayerPmReset=shelfConnDefDataLayerPmReset, changePhysicalPortServiceDefBehaviour=changePhysicalPortServiceDefBehaviour, lanDefAlias=lanDefAlias, opticalMuxDefTable=opticalMuxDefTable, endOfContainerMgmtDef=endOfContainerMgmtDef, changePhysicalPortServiceDefFarEndCommunication=changePhysicalPortServiceDefFarEndCommunication, physicalPortDefSwitchCommand=physicalPortDefSwitchCommand, physicalPortDefSigDegThresOduTcmC=physicalPortDefSigDegThresOduTcmC, scDefIpType=scDefIpType, externalPortDefMinOsnrRcv=externalPortDefMinOsnrRcv, endOfLinkDefTable=endOfLinkDefTable, linkDefAlias=linkDefAlias, changePhysicalPortServiceDefTraceExpectedOdu=changePhysicalPortServiceDefTraceExpectedOdu, moduleDefNdpCleanup=moduleDefNdpCleanup, lanDefType=lanDefType, virtualPortDefTraceTransmitSapiOduTcmC=virtualPortDefTraceTransmitSapiOduTcmC, opticalMuxDefAdmin=opticalMuxDefAdmin, changePhysicalPortServiceDefDisparityCorrection=changePhysicalPortServiceDefDisparityCorrection, moduleDefActivateDetect=moduleDefActivateDetect, changePhysicalPortServiceDefTraceExpectedOduTcmC=changePhysicalPortServiceDefTraceExpectedOduTcmC, crossConnectionDefPathNode=crossConnectionDefPathNode, crossConnectionDefEntry=crossConnectionDefEntry, physicalPortDefReportSsfSection=physicalPortDefReportSsfSection, shelfDefSupply=shelfDefSupply, physicalPortDefBehaviour=physicalPortDefBehaviour, virtualPortDefInhibitSwitchToProt=virtualPortDefInhibitSwitchToProt, ffpDefWaitToRestore=ffpDefWaitToRestore, virtualPortDefOtnStuffing=virtualPortDefOtnStuffing, physicalPortDefSigDegThresOduTcmA=physicalPortDefSigDegThresOduTcmA, physicalPortDefErrorForwarding=physicalPortDefErrorForwarding, physicalPortDefTraceExpectedOpspOdu=physicalPortDefTraceExpectedOpspOdu, endOfProtectionDef=endOfProtectionDef, physicalPortDefSigDegThresSdhMs=physicalPortDefSigDegThresSdhMs, shelfConnDefEntry=shelfConnDefEntry, envPortDefRowStatus=envPortDefRowStatus, plugDefTable=plugDefTable, shelfDefTable=shelfDefTable, moduleDefPartner1=moduleDefPartner1, moduleDefOscUsage=moduleDefOscUsage, moduleDefChannelSpacingProvision=moduleDefChannelSpacingProvision, fiberMapDef=fiberMapDef, physicalPortDefTraceExpectedOduTcmB=physicalPortDefTraceExpectedOduTcmB, containerMgmtDef=containerMgmtDef, changePhysicalPortServiceDefTraceTransmitDapiOduTcmA=changePhysicalPortServiceDefTraceTransmitDapiOduTcmA, changePhysicalPortServiceDefLaserDelayTimer=changePhysicalPortServiceDefLaserDelayTimer, changePhysicalPortServiceDefTxOffDelay=changePhysicalPortServiceDefTxOffDelay, shelfDefAdmin=shelfDefAdmin, physicalPortDefDispersionMode=physicalPortDefDispersionMode, opticalMuxDefBandProvision=opticalMuxDefBandProvision, virtualPortDefTimModeOduTcmA=virtualPortDefTimModeOduTcmA, physicalPortDefTxOffTimer=physicalPortDefTxOffTimer, scDefSigDegThresReceiver=scDefSigDegThresReceiver, lldpDefRowStatus=lldpDefRowStatus, changePhysicalPortServiceDefMonLevel=changePhysicalPortServiceDefMonLevel, changePhysicalPortServiceDefTcmALevel=changePhysicalPortServiceDefTcmALevel, changePhysicalPortServiceDefSigDegThreshold=changePhysicalPortServiceDefSigDegThreshold, endOfLanDefTable=endOfLanDefTable, moduleDefIpAddr=moduleDefIpAddr, endOfOpticalMuxDefTable=endOfOpticalMuxDefTable, containerDefTable=containerDefTable, externalVchDefFarEndLocation=externalVchDefFarEndLocation, moduleDefMapping=moduleDefMapping, changePhysicalPortServiceDefTraceExpectedOduTcmB=changePhysicalPortServiceDefTraceExpectedOduTcmB, shelfConnDefAdmin=shelfConnDefAdmin, virtualPortDefInitEqlz=virtualPortDefInitEqlz, virtualPortDefTraceTransmitSapiOduTcmB=virtualPortDefTraceTransmitSapiOduTcmB, physicalPortDefSigDegPeriodIntegration=physicalPortDefSigDegPeriodIntegration, virtualPortDefTimModeOduTcmB=virtualPortDefTimModeOduTcmB, changePhysicalPortServiceDefSigDegThresSonetSection=changePhysicalPortServiceDefSigDegThresSonetSection, moduleDefMuxMethod=moduleDefMuxMethod, eccDefType=eccDefType, virtualPortDefSigDegPeriodOduTcmA=virtualPortDefSigDegPeriodOduTcmA, ffpDefProtectionType=ffpDefProtectionType, physicalPortDefMonLevel=physicalPortDefMonLevel, crossOpticalLineDefAlias=crossOpticalLineDefAlias, physicalPortDefSigDegPeriodOtu=physicalPortDefSigDegPeriodOtu, scDefFrcdLogin=scDefFrcdLogin, shelfDefType=shelfDefType, physicalPortDefEqlzAdmin=physicalPortDefEqlzAdmin, physicalPortDefTraceFormSonetSection=physicalPortDefTraceFormSonetSection, externalPortDefType=externalPortDefType, physicalPortDefStagType=physicalPortDefStagType, changePhysicalPortServiceDefTraceTransmitOpspOtu=changePhysicalPortServiceDefTraceTransmitOpspOtu, crossConnectionDefTunnelAid=crossConnectionDefTunnelAid, envPortDefFacilityType=envPortDefFacilityType, eccDefTable=eccDefTable, envPortDefTifAlarmType=envPortDefTifAlarmType, ffpDefRowStatus=ffpDefRowStatus, physicalPortDefTraceExpectedOduTcmC=physicalPortDefTraceExpectedOduTcmC, changePhysicalPortServiceDefCodeGain=changePhysicalPortServiceDefCodeGain, plugDefLaneGroup=plugDefLaneGroup, changePhysicalPortServiceDefTimModeOtu=changePhysicalPortServiceDefTimModeOtu, crossDcnDefType=crossDcnDefType, physicalPortDefLLDPNeighborsTx=physicalPortDefLLDPNeighborsTx, opticalMuxDefAseTabCreation=opticalMuxDefAseTabCreation, physicalPortDefLossAttenuation=physicalPortDefLossAttenuation, changePhysicalPortServiceDefSigDegPeriodOduTcmA=changePhysicalPortServiceDefSigDegPeriodOduTcmA, moduleDefEntry=moduleDefEntry, physicalPortDefTunnelAid=physicalPortDefTunnelAid, lanDefRetransmitInterval=lanDefRetransmitInterval, linkDefAreaAid=linkDefAreaAid, shelfDefSlot=shelfDefSlot, endOfEqptMgmtDef=endOfEqptMgmtDef, physicalPortDefChannelPlan=physicalPortDefChannelPlan, virtualPortDefStagType=virtualPortDefStagType, scDefBitrate=scDefBitrate, physicalPortDefTraceExpectedDapiOdu=physicalPortDefTraceExpectedDapiOdu, virtualPortDefTcmALevel=virtualPortDefTcmALevel, connectionDefType=connectionDefType, ffpDefPeerAid=ffpDefPeerAid, externalPortDefMaxBitErrorRate=externalPortDefMaxBitErrorRate, virtualPortDefTunnelAid=virtualPortDefTunnelAid, externalPortDefFarEndLocation=externalPortDefFarEndLocation, externalPortDefAlias=externalPortDefAlias, plugDefPlugMode=plugDefPlugMode, physicalPortDefDataLayerPmReset=physicalPortDefDataLayerPmReset, changePhysicalPortServiceDefWdmRxChannel=changePhysicalPortServiceDefWdmRxChannel, externalPortDefChannelBandwith=externalPortDefChannelBandwith, plugDefLoopbackAttenuation=plugDefLoopbackAttenuation, ffpDefCreationMethod=ffpDefCreationMethod, virtualPortDefDataLayerPmReset=virtualPortDefDataLayerPmReset, ffpDefApsType=ffpDefApsType, opticalMuxDefInhibitSwitchToWork=opticalMuxDefInhibitSwitchToWork, envMgmtDef=envMgmtDef, opticalMuxDefEntry=opticalMuxDefEntry, crossDcnDefLink=crossDcnDefLink, physicalPortDefLaserOnTimer=physicalPortDefLaserOnTimer, physicalPortDefTraceTransmitSapiOduTcmA=physicalPortDefTraceTransmitSapiOduTcmA, eccDefEntry=eccDefEntry, scDefIPv6PrefixLen=scDefIPv6PrefixLen, changePhysicalPortServiceDefLaserOnTimer=changePhysicalPortServiceDefLaserOnTimer, physicalPortDefTraceTransmitOpspOduTcmB=physicalPortDefTraceTransmitOpspOduTcmB, physicalPortDefSignalDegradePeriod=physicalPortDefSignalDegradePeriod, endOfOprThresholdConfigDefTable=endOfOprThresholdConfigDefTable, physicalPortDefSigDegThresSonetLine=physicalPortDefSigDegThresSonetLine, linkDefFarEndIp=linkDefFarEndIp, shelfConnDefFacilityType=shelfConnDefFacilityType, ffpDefTable=ffpDefTable, changePhysicalPortServiceDefTimModeOduTcmC=changePhysicalPortServiceDefTimModeOduTcmC, physicalPortDefRateLimit=physicalPortDefRateLimit, physicalPortDefPayload=physicalPortDefPayload, scDefIpMode=scDefIpMode, fanDefTable=fanDefTable, ffpDefSignalFailureSwitching=ffpDefSignalFailureSwitching, lanDefOspf=lanDefOspf, eccDefRowStatus=eccDefRowStatus, lanDefDhcpServer=lanDefDhcpServer, physicalPortDefTraceTransmitSapiOduTcmC=physicalPortDefTraceTransmitSapiOduTcmC, physicalPortDefVethAid=physicalPortDefVethAid, changePhysicalPortServiceDefSigDegThresOduTcmC=changePhysicalPortServiceDefSigDegThresOduTcmC, changePhysicalPortServiceDefSigDegPeriodOduTcmB=changePhysicalPortServiceDefSigDegPeriodOduTcmB)
mibBuilder.exportSymbols("ADVA-FSPR7-DEF-MIB", physicalPortDefDisparityCorrection=physicalPortDefDisparityCorrection, linkDefOspf=linkDefOspf, changePhysicalPortServiceDefRowStatus=changePhysicalPortServiceDefRowStatus, changePhysicalPortServiceDefTraceTransmitOpspOdu=changePhysicalPortServiceDefTraceTransmitOpspOdu, scDefAdmin=scDefAdmin, lanDefHelloInterval=lanDefHelloInterval, opticalLineDefTable=opticalLineDefTable, scDefAutonegotiation=scDefAutonegotiation, virtualPortDefMaxFrameSize=virtualPortDefMaxFrameSize, opticalMuxDefGain=opticalMuxDefGain, virtualPortDefLagPortType=virtualPortDefLagPortType, dcnMgmtDef=dcnMgmtDef, changePhysicalPortServiceDefLaserOffDelayFunction=changePhysicalPortServiceDefLaserOffDelayFunction, linkDefEntry=linkDefEntry, scDefAuthString=scDefAuthString, physicalPortDefTxOffDelay=physicalPortDefTxOffDelay, moduleDefPower=moduleDefPower, ffpDefEntry=ffpDefEntry, physicalPortDefDispersionSetting=physicalPortDefDispersionSetting, physicalPortDefSigDegPeriodOduTcmB=physicalPortDefSigDegPeriodOduTcmB, endOfScDefTable=endOfScDefTable, moduleDefDispersionCompensation=moduleDefDispersionCompensation, changePhysicalPortServiceDefAlias=changePhysicalPortServiceDefAlias, physicalPortDefTraceExpectedOpspOtu=physicalPortDefTraceExpectedOpspOtu, physicalPortDefAlias=physicalPortDefAlias, opticalLineDefFarEndLocation=opticalLineDefFarEndLocation, physicalPortDefEncryptionChannel=physicalPortDefEncryptionChannel, virtualPortDefChannelBand=virtualPortDefChannelBand, virtualPortDefOpuPayloadType=virtualPortDefOpuPayloadType, lanDefIPv6PrefixLen=lanDefIPv6PrefixLen, physicalPortDefLagPrio=physicalPortDefLagPrio, scDefMtu=scDefMtu, crossOpticalLineDefRowStatus=crossOpticalLineDefRowStatus, changePhysicalPortServiceDefTraceTransmitDapiOdu=changePhysicalPortServiceDefTraceTransmitDapiOdu, externalPortDefMaxPmdRcv=externalPortDefMaxPmdRcv, moduleDefRstp=moduleDefRstp, scDefAttGradientTh=scDefAttGradientTh, changePhysicalPortServiceDefTributarySlotMethod=changePhysicalPortServiceDefTributarySlotMethod, physicalPortDefOpticalSetPointLane2=physicalPortDefOpticalSetPointLane2, changePhysicalPortServiceDefTraceExpectedSonetSection=changePhysicalPortServiceDefTraceExpectedSonetSection, physicalPortDefTraceExpectedOdu=physicalPortDefTraceExpectedOdu, virtualPortDefPriority=virtualPortDefPriority, changePhysicalPortServiceDefSigDegThresSdhMs=changePhysicalPortServiceDefSigDegThresSdhMs, changePhysicalPortServiceDefTcmCLevel=changePhysicalPortServiceDefTcmCLevel, performanceFacilityDef=performanceFacilityDef, virtualPortDefLacpTimeout=virtualPortDefLacpTimeout, terminationPointDefFiberDetect=terminationPointDefFiberDetect, moduleDefSupply=moduleDefSupply, physicalPortDefTcmBLevel=physicalPortDefTcmBLevel, physicalPortDefTraceExpectedSonetSection=physicalPortDefTraceExpectedSonetSection, physicalPortDefLinkSetup=physicalPortDefLinkSetup, endOfPerformanceFacilityThresholdDef=endOfPerformanceFacilityThresholdDef, opticalMuxDefOptUpdate=opticalMuxDefOptUpdate, changePhysicalPortServiceDefXfpDecisionThres=changePhysicalPortServiceDefXfpDecisionThres, physicalPortDefTimActionOdu=physicalPortDefTimActionOdu, advaFspR7Def=advaFspR7Def, moduleDefPartner3=moduleDefPartner3, virtualPortDefTraceTransmitDapiOduTcmC=virtualPortDefTraceTransmitDapiOduTcmC, moduleDefDeploy=moduleDefDeploy, changePhysicalPortServiceDefLaneChannelSetting=changePhysicalPortServiceDefLaneChannelSetting, ffpDefFarEndIp=ffpDefFarEndIp, opticalLineDefEntry=opticalLineDefEntry, lldpDefType=lldpDefType, externalPortDefTransmitChannel=externalPortDefTransmitChannel, physicalPortDefTraceTransmitOpspOdu=physicalPortDefTraceTransmitOpspOdu, physicalPortDefOtnStuffing=physicalPortDefOtnStuffing, physicalPortDefSigDegThresOdu=physicalPortDefSigDegThresOdu, opticalMuxDefDataLayerPmReset=opticalMuxDefDataLayerPmReset, externalPortDefMinOptPowerRcv=externalPortDefMinOptPowerRcv, scDefDeadInterval=scDefDeadInterval, lanDefDhcpStartAddr=lanDefDhcpStartAddr, opticalMuxDefTiltSet=opticalMuxDefTiltSet, opticalLineDefChannelBandwith=opticalLineDefChannelBandwith, moduleDefGainRange=moduleDefGainRange, virtualPortDefTestPrbsRcvMode=virtualPortDefTestPrbsRcvMode, endOfFiberMapDef=endOfFiberMapDef, linkDefRowStatus=linkDefRowStatus, changePhysicalPortServiceDefTimModeOdu=changePhysicalPortServiceDefTimModeOdu, crossOpticalLineDefConn=crossOpticalLineDefConn, changePhysicalPortServiceDefDispersionMode=changePhysicalPortServiceDefDispersionMode, protectionDef=protectionDef, changePhysicalPortServiceDefTraceFormSonetSection=changePhysicalPortServiceDefTraceFormSonetSection, physicalPortDefTraceTransmitDapiOdu=physicalPortDefTraceTransmitDapiOdu, envPortDefEntry=envPortDefEntry, linkDefFendLogicalIpAddr=linkDefFendLogicalIpAddr, virtualPortDefPortMode=virtualPortDefPortMode, physicalPortDefTimModeSonetSection=physicalPortDefTimModeSonetSection, lldpDefEntry=lldpDefEntry, endOfDcnMgmtDef=endOfDcnMgmtDef, crossDcnDefTable=crossDcnDefTable, changePhysicalPortServiceDefDispersionSetting=changePhysicalPortServiceDefDispersionSetting, changePhysicalPortServiceDefSigDegPeriodOtu=changePhysicalPortServiceDefSigDegPeriodOtu, physicalPortDefLaserOffTimer=physicalPortDefLaserOffTimer, eccDefAlias=eccDefAlias, endOfCrossOpticalLineDefTable=endOfCrossOpticalLineDefTable, changePhysicalPortServiceDefSigDegThresSdhSection=changePhysicalPortServiceDefSigDegThresSdhSection, externalOmDefTable=externalOmDefTable, physicalPortDefTimModeOtu=physicalPortDefTimModeOtu, shelfConnDefAutonegotiation=shelfConnDefAutonegotiation, optThresholdConfigDefLowConfig=optThresholdConfigDefLowConfig, physicalPortDefLLDPNeighborsRx=physicalPortDefLLDPNeighborsRx, externalVchDefMaxChromDisperRcv=externalVchDefMaxChromDisperRcv, fanDefAdmin=fanDefAdmin, physicalPortDefForceLaserOn=physicalPortDefForceLaserOn, crossConnectionDefTable=crossConnectionDefTable, physicalPortDefMode=physicalPortDefMode, changePhysicalPortServiceDefErrorForwarding=changePhysicalPortServiceDefErrorForwarding, virtualPortDefRedLineState=virtualPortDefRedLineState, oprThresholdConfigDefTable=oprThresholdConfigDefTable, physicalPortDefAutoPTassignment=physicalPortDefAutoPTassignment, ffpDefRevertMode=ffpDefRevertMode, lldpDefTable=lldpDefTable, scDefEntry=scDefEntry, externalPortDefTable=externalPortDefTable, changePhysicalPortServiceDefTraceTransmitDapiOtu=changePhysicalPortServiceDefTraceTransmitDapiOtu, plugDefAdmin=plugDefAdmin, externalPortDefPmdTransmit=externalPortDefPmdTransmit, physicalPortDefTxOnTimer=physicalPortDefTxOnTimer, virtualPortDefTimActionOdu=virtualPortDefTimActionOdu, scDefMetric=scDefMetric, containerDefEntry=containerDefEntry, shelfConnDefDuplex=shelfConnDefDuplex, externalOmDefHostName=externalOmDefHostName, opticalLineDefFiberLength=opticalLineDefFiberLength, shelfConnDefBitrate=shelfConnDefBitrate, physicalPortDefPortMode=physicalPortDefPortMode, virtualPortDefVcType=virtualPortDefVcType, featureSpecificDef=featureSpecificDef, shelfConnDefAlias=shelfConnDefAlias, linkDefProxyArp=linkDefProxyArp, physicalPortDefTurnupConfig=physicalPortDefTurnupConfig, linkDefAuthType=linkDefAuthType, crossOpticalLineDefTunnelAid=crossOpticalLineDefTunnelAid, endOfCrossDcnDefTable=endOfCrossDcnDefTable, linkDefNearEndIp=linkDefNearEndIp, moduleDefGroup=moduleDefGroup, opticalMuxDefOffsetLow=opticalMuxDefOffsetLow, virtualPortDefTraceExpectedOduTcmC=virtualPortDefTraceExpectedOduTcmC, changePhysicalPortServiceDefOpticalSetPoint=changePhysicalPortServiceDefOpticalSetPoint, endOfFacilityMgmtDef=endOfFacilityMgmtDef, moduleDefReach=moduleDefReach, changePhysicalPortServiceDefTraceTransmitSapiOtu=changePhysicalPortServiceDefTraceTransmitSapiOtu, opticalMuxMgmtDef=opticalMuxMgmtDef, externalVchDefMaxBitErrorRate=externalVchDefMaxBitErrorRate, crossDcnDefEntry=crossDcnDefEntry, crossOpticalLineDefTable=crossOpticalLineDefTable, ffpDefHoldOffTime=ffpDefHoldOffTime, externalPortDefFrameFormat=externalPortDefFrameFormat, plugDefReach=plugDefReach, changePhysicalPortServiceDefTimModeOduTcmB=changePhysicalPortServiceDefTimModeOduTcmB, fanDefOutputReset=fanDefOutputReset, externalVchDefTable=externalVchDefTable, linkDefAdmin=linkDefAdmin, changePhysicalPortServiceDefVoaSetpoint=changePhysicalPortServiceDefVoaSetpoint, crossOpticalLineDefRedLineState=crossOpticalLineDefRedLineState, virtualPortDefBundle=virtualPortDefBundle, scDefDhcpStopAddr=scDefDhcpStopAddr, opticalMuxDefOffset=opticalMuxDefOffset, optThresholdConfigDefEntry=optThresholdConfigDefEntry, opticalMuxDefVariableGainRtoN=opticalMuxDefVariableGainRtoN, scDefOspf=scDefOspf, changePhysicalPortServiceDefTerminationLevel=changePhysicalPortServiceDefTerminationLevel, lanDefIpAddr=lanDefIpAddr, endOfOpticalMuxMgmtDef=endOfOpticalMuxMgmtDef, shelfDefEntry=shelfDefEntry, physicalPortDefAutoThresReset=physicalPortDefAutoThresReset, eccDefAdmin=eccDefAdmin, virtualPortDefEntry=virtualPortDefEntry, virtualPortDefPayload=virtualPortDefPayload, physicalPortDefFlowControl=physicalPortDefFlowControl, moduleDefPartner4=moduleDefPartner4, lanDefAreaAid=lanDefAreaAid, linkDefBitrate=linkDefBitrate, virtualPortDefTestPrbsTrmtMode=virtualPortDefTestPrbsTrmtMode, crossConnectionDefType=crossConnectionDefType, changePhysicalPortServiceDefMode=changePhysicalPortServiceDefMode, externalPortDefMaxChromDisperRcv=externalPortDefMaxChromDisperRcv, externalVchDefFrameFormat=externalVchDefFrameFormat, virtualPortDefTimDetModeOdu=virtualPortDefTimDetModeOdu, lanDefEntry=lanDefEntry, changePhysicalPortServiceDefAdmin=changePhysicalPortServiceDefAdmin, virtualPortDefTraceTransmitDapiOduTcmB=virtualPortDefTraceTransmitDapiOduTcmB, physicalPortDefInitiateEqualization=physicalPortDefInitiateEqualization, changePhysicalPortServiceDefTraceTransmitOpspOduTcmC=changePhysicalPortServiceDefTraceTransmitOpspOduTcmC, physicalPortDefDispertionConfig=physicalPortDefDispertionConfig, plugDefThirdPartyUsage=plugDefThirdPartyUsage, changePhysicalPortServiceDefTable=changePhysicalPortServiceDefTable, linkDefIPv6Type=linkDefIPv6Type, physicalPortDefOptimize=physicalPortDefOptimize, envPortDefTelemetry=envPortDefTelemetry, opticalMuxDefAlsMode=opticalMuxDefAlsMode, lanDefTable=lanDefTable, scDefAlsMode=scDefAlsMode, physicalPortDefInhibitSwitchToWork=physicalPortDefInhibitSwitchToWork, physicalPortDefVoaSetpoint=physicalPortDefVoaSetpoint, externalVchDefAlias=externalVchDefAlias, shelfDefAirFilterClear=shelfDefAirFilterClear, physicalPortDefTerminationLevel=physicalPortDefTerminationLevel, moduleDefLanAid=moduleDefLanAid, plugDefMaxDataRate=plugDefMaxDataRate, physicalPortDefPrbsPmReset=physicalPortDefPrbsPmReset, fanDefRowStatus=fanDefRowStatus, scDefIPv6=scDefIPv6, PYSNMP_MODULE_ID=advaFspR7Def, virtualPortDefOduTribTimeSlottNo=virtualPortDefOduTribTimeSlottNo, physicalPortDefTimModeOdu=physicalPortDefTimModeOdu, changePhysicalPortServiceDefTraceTransmitOpspOduTcmA=changePhysicalPortServiceDefTraceTransmitOpspOduTcmA, changePhysicalPortServiceDefTraceExpectedOduTcmA=changePhysicalPortServiceDefTraceExpectedOduTcmA, moduleDefCapabilityLevelProvision=moduleDefCapabilityLevelProvision, physicalPortDefLaserDelayTimer=physicalPortDefLaserDelayTimer, ffpDefSignalDegradeSwitching=ffpDefSignalDegradeSwitching, physicalPortDefTable=physicalPortDefTable, shelfDefRowStatus=shelfDefRowStatus, virtualPortDefOduTribPortNo=virtualPortDefOduTribPortNo, physicalPortDefReportSsfLine=physicalPortDefReportSsfLine, virtualPortDefType=virtualPortDefType, lanDefIpMode=lanDefIpMode, changePhysicalPortServiceDefSigDegThresSonetLine=changePhysicalPortServiceDefSigDegThresSonetLine, connectionDefEntry=connectionDefEntry, virtualPortDefAdmin=virtualPortDefAdmin, virtualPortDefSigDegPeriodOdu=virtualPortDefSigDegPeriodOdu, moduleDefAlias=moduleDefAlias, changePhysicalPortServiceDefSigDegThresOduTcmA=changePhysicalPortServiceDefSigDegThresOduTcmA, moduleDefTable=moduleDefTable, virtualPortDefUtag=virtualPortDefUtag, crossOpticalLineDefEntry=crossOpticalLineDefEntry, virtualPortDefTraceTransmitDapiOduTcmA=virtualPortDefTraceTransmitDapiOduTcmA, ffpDefWorkingAid=ffpDefWorkingAid, externalVchDefRowStatus=externalVchDefRowStatus, endOfOpticalLineMgmtDef=endOfOpticalLineMgmtDef, changePhysicalPortServiceDefLaserOffTimer=changePhysicalPortServiceDefLaserOffTimer, linkDefTable=linkDefTable, linkDefHelloInterval=linkDefHelloInterval, physicalPortDefSigDegPcslThreshold=physicalPortDefSigDegPcslThreshold, eccDefExternalVid=eccDefExternalVid, crossConnectionDefRedLineState=crossConnectionDefRedLineState, physicalPortDefType=physicalPortDefType)
