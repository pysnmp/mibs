#
# PySNMP MIB module IEEE8021-EVBB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/IEEE8021-EVBB-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:01:24 2024
# On host fv-az1773-903 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ieee802dot1mibs, IEEE8021PbbComponentIdentifierOrZero, IEEE8021PbbComponentIdentifier, IEEE8021BridgePortNumberOrZero, IEEE8021BridgePortNumber = mibBuilder.importSymbols("IEEE8021-TC-MIB", "ieee802dot1mibs", "IEEE8021PbbComponentIdentifierOrZero", "IEEE8021PbbComponentIdentifier", "IEEE8021BridgePortNumberOrZero", "IEEE8021BridgePortNumber")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, ObjectIdentity, Counter32, Unsigned32, Counter64, MibIdentifier, TimeTicks, Gauge32, Bits, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Counter32", "Unsigned32", "Counter64", "MibIdentifier", "TimeTicks", "Gauge32", "Bits", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress")
MacAddress, TruthValue, DisplayString, TextualConvention, TimeInterval, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "DisplayString", "TextualConvention", "TimeInterval", "RowStatus")
ieee8021BridgeEvbMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 100))
ieee8021BridgeEvbMib.setRevisions(('2010-10-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021BridgeEvbMib.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: ieee8021BridgeEvbMib.setLastUpdated('201010250000Z')
if mibBuilder.loadTexts: ieee8021BridgeEvbMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021BridgeEvbMib.setContactInfo('  WG-URL: http://grouper.ieee.org/groups/802/1/index.html\n         WG-EMail: stds-802-1@ieee.org\n\n          Contact: <TBD>\n           Postal: C/O IEEE 802.1 Working Group\n                   IEEE Standards Association\n                   445 Hoes Lane\n                   P.O. Box 1331\n                   Piscataway\n                   NJ 08855-1331\n                   USA\n           E-mail: STDS-802-1-L@LISTSERV.IEEE.ORG')
if mibBuilder.loadTexts: ieee8021BridgeEvbMib.setDescription('The EVB MIB module for managing devices that support\n        Ethernet Virtual Bridging.\n\n        Unless otherwise indicated, the references in this MIB\n        module are to IEEE Std 802.1Q-2010.\n\n        Copyright (C) IEEE.\n        This version of this MIB module is part of IEEE802.1Q;\n        see the draft itself for full legal notices.')
ieee8021BridgeEvbNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 100, 0))
ieee8021BridgeEvbObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 100, 1))
ieee8021BridgeEvbConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 100, 2))
class IEEE8021BridgeEvbTLVTC(TextualConvention, Bits):
    description = 'EVB TLV structure.'
    status = 'current'
    namedValues = NamedValues(("vdpCapable", 0), ("ecpCapable", 1), ("ecpRTE", 2), ("vdpTimerCapable", 3), ("reflectiveRelayCap", 14), ("stdForwardingCap", 15))

ieee8021BridgeEvbConfig = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 100, 1, 1))
ieee8021BridgeEvbSysMACAddress = MibScalar((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysMACAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysMACAddress.setDescription('The evbSysMACAddress is any single MAC which uniquely identifies the system. \n This MAC may be chosen to be one of the MAC used to identify each component of the system')
ieee8021BridgeEvbSysName = MibScalar((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysName.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysName.setDescription('The evbSysName is a string which may to set by management to identify this system.')
ieee8021BridgeEvbSysType = MibScalar((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("evbBridge", 1), ("evbStation", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysType.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysType.setDescription('The evbSysType determines if this is an EVB Bridge or EVB station.')
ieee8021BridgeEvbSysNumExternalPorts = MibScalar((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysNumExternalPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysNumExternalPorts.setDescription('TBD')
ieee8021BridgeEvbSysEvbLldpEnables = MibScalar((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 5), Bits().clone(namedValues=NamedValues(("evbTLVEnable", 0), ("autoEvbLLDPTLV", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpEnables.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpEnables.setDescription('This object is used to initialize the S-Channel\n                  interface table entry.')
ieee8021BridgeEvbSysEvbLldpDfltMode = MibScalar((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 6), IEEE8021BridgeEvbTLVTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpDfltMode.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpDfltMode.setDescription('The value of this object is used as the initial \n                  value for the  ieee8021BridgeEvbCAPLldpAdminCap.')
ieee8021BridgeEvbSysEvbLldpNumVsisSup = MibScalar((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpNumVsisSup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpNumVsisSup.setDescription('This is the total number of VSIs\n                 which this system may support and is used to fill out \n                 the EVB TLV field for Number VSIs Supported ')
ieee8021BridgeEvbSysNumCorErComps = MibScalar((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysNumCorErComps.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysNumCorErComps.setDescription('TBD')
ieee8021BridgeEvbSysNumSComps = MibScalar((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysNumSComps.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysNumSComps.setDescription('TBD')
ieee8021BridgeEvbECPACkTimer = MibScalar((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbECPACkTimer.setReference('D.2.8, 44.3.7.1')
if mibBuilder.loadTexts: ieee8021BridgeEvbECPACkTimer.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbECPACkTimer.setDescription('A value indicating the  Bridge Proposed ECP ackTimer.')
ieee8021BridgeEvbECPMaxRetires = MibScalar((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbECPMaxRetires.setReference('D.2.8, 44.3.7.6')
if mibBuilder.loadTexts: ieee8021BridgeEvbECPMaxRetires.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbECPMaxRetires.setDescription('A value indicating the Bridge ECP maxRetries. ')
ieee8021BridgeEvbSysVdpDfltRsrcWaitDelay = MibScalar((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltRsrcWaitDelay.setReference('D.2.8, 42.2.6.8')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltRsrcWaitDelay.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltRsrcWaitDelay.setDescription('A value indicating the  Bridge Resource VDP Timeout.')
ieee8021BridgeEvbSysVdpDfltReinitKeepAlive = MibScalar((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltReinitKeepAlive.setReference('D.2.8, 42.2.6.7')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltReinitKeepAlive.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltReinitKeepAlive.setDescription('A value indicating the Bridge Proposed VDP Keep Alive Timeout.')
ieee8021BridgeEvbPhyPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 14), )
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortTable.setReference('12.24.4')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortTable.setDescription('A table that contains .')
ieee8021BridgeEvbPhyPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 14, 1), ).setIndexNames((0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPhyPort"))
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortEntry.setDescription('A list of objects containing EVB port type objects.\n         \n        Creation of an entry in this table will implicitly also\n        create a corresponding entry in the ieee8021BridgeBasePortTable.')
ieee8021BridgeEvbPhyPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 14, 1, 1), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPort.setReference('12.24')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPort.setDescription('The external port.')
ieee8021BridgeEvbPhyPortMacAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 14, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortMacAddress.setReference('12.4.1.1.3a')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortMacAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortMacAddress.setDescription('TBD')
ieee8021BridgeEvbPhyPortTypeCap = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 14, 1, 3), Bits().clone(namedValues=NamedValues(("customerVlanPort", 0), ("providerNetworkPort", 1), ("customerNetworkPort", 2), ("customerEdgePort", 3), ("customerBackbonePort", 4), ("virtualInstancePort", 5), ("dBridgePort", 6), ("serverEdgePort", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortTypeCap.setReference('12.4')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortTypeCap.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortTypeCap.setDescription('TBD')
ieee8021BridgeEvbPhyPortType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("customerVlanPort", 1), ("uplinkAccessPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortType.setReference('12.24')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortType.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortType.setDescription('The port type for this portIndex.')
ieee8021BridgeEvbPhyPortToComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 14, 1, 5), IEEE8021PbbComponentIdentifierOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortToComponentId.setReference('12.4')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortToComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortToComponentId.setDescription('The component ID that this EVB port belongs to.')
ieee8021BridgeEvbPhyPortToInternalPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 14, 1, 6), IEEE8021BridgePortNumberOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortToInternalPort.setReference('12.24')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortToInternalPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortToInternalPort.setDescription('The internal port number to which this externel/physical port maps to.')
ieee8021BridgeEvbPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 15), )
if mibBuilder.loadTexts: ieee8021BridgeEvbPortTable.setReference('12.24.4')
if mibBuilder.loadTexts: ieee8021BridgeEvbPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPortTable.setDescription('A table that contains .')
ieee8021BridgeEvbPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 15, 1), ).setIndexNames((0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPortComponentId"), (0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPort"))
if mibBuilder.loadTexts: ieee8021BridgeEvbPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPortEntry.setDescription('A list of objects containing EVB port type objects.\n           \n          Creation of an entry in this table will implicitly also\n          create a corresponding entry in the ieee8021BridgeBasePortTable.')
ieee8021BridgeEvbPortComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 15, 1, 1), IEEE8021PbbComponentIdentifierOrZero())
if mibBuilder.loadTexts: ieee8021BridgeEvbPortComponentId.setReference('12.4')
if mibBuilder.loadTexts: ieee8021BridgeEvbPortComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPortComponentId.setDescription('The component ID that this EVB port belongs to.')
ieee8021BridgeEvbPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 15, 1, 2), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021BridgeEvbPort.setReference('12.24')
if mibBuilder.loadTexts: ieee8021BridgeEvbPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPort.setDescription('The port number of the port for which this entry\n      contains EVB management information.')
ieee8021BridgeEvbPortType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cVlanBridgePort", 1), ("stationFacingBridgePort", 2), ("uplinkAccessPort", 3), ("sChannelAccessPort", 4), ("uplinkRelayPort", 5), ("edgeRelayPort", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbPortType.setReference('12.24')
if mibBuilder.loadTexts: ieee8021BridgeEvbPortType.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPortType.setDescription('The port type for this portIndex.')
ieee8021BridgeEvbPortRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 1, 15, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPortRowStatus.setDescription('RowStatus for this table.')
ieee8021BridgeEvbVSIDBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 100, 1, 2))
ieee8021BridgeEvbVSIDBTable = MibTable((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1), )
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBTable.setReference('12.24.4')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBTable.setDescription('A table that contains database of the active Virtual Station Interfaces.')
ieee8021BridgeEvbVSIDBEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1), ).setIndexNames((0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPhyPort"), (0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVsiSvid"), (0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIID"))
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBEntry.setDescription('A list of objects containing database of the active Virtual Station Interfaces.')
ieee8021BridgeEvbVsiSvid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiSvid.setReference('42.2.2.7')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiSvid.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiSvid.setDescription('The Svid to identify the S-Channel interface.')
ieee8021BridgeEvbVSIID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16))
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIID.setReference('42.2.2.7')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIID.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIID.setDescription('This object specifies the VSIID that uniquely identifies the VSI in the DCN ')
ieee8021BridgeEvbVSIComponentID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 3), IEEE8021PbbComponentIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIComponentID.setReference('12.24.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIComponentID.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIComponentID.setDescription('TBD')
ieee8021BridgeEvbVSIPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 4), IEEE8021BridgePortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIPortNumber.setReference('12.24.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIPortNumber.setDescription('TBD')
ieee8021BridgeEvbVSITimeSinceCreate = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSITimeSinceCreate.setReference('42')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSITimeSinceCreate.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSITimeSinceCreate.setDescription('This object specifies the time since creation ')
ieee8021BridgeEvbVsiVdpOperCmd = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("preAssociate", 1), ("preAssociateWithRsrcReservation", 2), ("associate", 3), ("deAssociate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiVdpOperCmd.setReference('42.2.2.1')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiVdpOperCmd.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiVdpOperCmd.setDescription('This object identifies the type of TLV.')
ieee8021BridgeEvbVsiOperRevert = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperRevert.setReference('42.2.2.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperRevert.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperRevert.setDescription('TBD')
ieee8021BridgeEvbVsiOperHard = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperHard.setReference('42.2.2.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperHard.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperHard.setDescription('TBD')
ieee8021BridgeEvbVsiOperReason = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 9), Bits().clone(namedValues=NamedValues(("success", 0), ("invalidFormat", 1), ("insufficientResources", 2), ("otherfailure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperReason.setReference('42.2.2.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperReason.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperReason.setDescription('This object indicates the outcome of a request.')
ieee8021BridgeEvbVSIMgrID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMgrID.setReference('42.2.2.3')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMgrID.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMgrID.setDescription('This object identifies the VSI Manager with a database that holds the detailed \n      VSI type and or instance definitions.')
ieee8021BridgeEvbVSIType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIType.setReference(' 42.2.2.4')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIType.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIType.setDescription(' The VTID is an integer value used to identify a pre-configured set of\n      controls and attributes that are associated with a set of VSIs.')
ieee8021BridgeEvbVSITypeVersion = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSITypeVersion.setReference('42.2.2.5')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSITypeVersion.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSITypeVersion.setDescription('The VSI Type Version is an integer identifier designating the expected/desired VTID version. \n      The VTID version allows a VSI Manager Database to contain multiple versions of a \n      given VSI Type, allowing smooth migration to newer VSI types.')
ieee8021BridgeEvbVSIMvFormat = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("basic", 0), ("partial", 1), ("vlanOnly", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMvFormat.setReference('42.2.2.7')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMvFormat.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMvFormat.setDescription('This object specifies the MAC/VLAN format.\n      basic   - Basic MAC/VLAN format\n      partial - Partial MAC/VLAN format\n      vlanOnly - Vlan-only MAC/VLAN format\n      ')
ieee8021BridgeEvbVSINumMACs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSINumMACs.setReference('42.2.2.8')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSINumMACs.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSINumMACs.setDescription('This object specifies the the number of MAC address/VLAN ID pairs contained in \n      the repeated protion of the MAC/VLANs field in the VDP TLV.')
ieee8021BridgeEvbVDPMachineState = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("preAssociate", 1), ("preAssociateWithRsrcReservation", 2), ("associate", 3), ("deAssociate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPMachineState.setReference('42.2.6.16')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPMachineState.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPMachineState.setDescription('This object specifies the VDP state machine. ')
ieee8021BridgeEvbVDPCommandsSucceeded = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandsSucceeded.setReference('42.2.6')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandsSucceeded.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandsSucceeded.setDescription('This object specifies the VDP number of successful commands since creation.')
ieee8021BridgeEvbVDPCommandsFailed = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandsFailed.setReference('42.2.6')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandsFailed.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandsFailed.setDescription('This object specifies the VDP number of failed commands since creation ')
ieee8021BridgeEvbVDPCommandReverts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandReverts.setReference('42.2.6')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandReverts.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandReverts.setDescription('This object specifies the VDP command reverts since creation  ')
ieee8021BridgeEvbVSIDBMacTable = MibTable((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 2), )
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBMacTable.setReference('12.24.4')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBMacTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBMacTable.setDescription('A table that contains database of the active Virtual Station Interfaces.')
ieee8021BridgeEvbVSIDBMacEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 2, 1), ).setIndexNames((0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPhyPort"), (0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVsiSvid"), (0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIID"), (0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbGroupID"), (0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIMac"), (0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIVlanId"))
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBMacEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBMacEntry.setDescription('A list of objects containing database of the MAC/VLANs associated with\n        Virtual Station Interfaces.')
ieee8021BridgeEvbGroupID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ieee8021BridgeEvbGroupID.setReference('42.2.2.8')
if mibBuilder.loadTexts: ieee8021BridgeEvbGroupID.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbGroupID.setDescription('Group ID')
ieee8021BridgeEvbVSIMac = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMac.setReference('12.24.4.1.3 k')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMac.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMac.setDescription('The mac-address part of the MAC/VLANs for a VSI.')
ieee8021BridgeEvbVSIVlanId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 2, 2, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIVlanId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIVlanId.setDescription('The Vlan ID part of the MAC/VLANs for a VSI.')
ieee8021BridgeEvbSChannelObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 100, 1, 4))
ieee8021BridgeEvbUAPConfigTable = MibTable((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 1), )
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigTable.setReference('12.24.4.1 ')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigTable.setDescription('A table that contains  configuration parameters for UAP.')
ieee8021BridgeEvbUAPConfigEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 1, 1), ).setIndexNames((0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPhyPort"))
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigEntry.setDescription('A list of objects containing information to configure the attributes for UAP.')
ieee8021BridgeEvbUAPComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 1, 1, 1), IEEE8021PbbComponentIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPComponentId.setDescription('The ComponentID of the port for the UAP.')
ieee8021BridgeEvbUAPPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 1, 1, 2), IEEE8021BridgePortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPPort.setDescription('The port number of the port for the UAP.')
ieee8021BridgeEvbUAPSchCdcpAdminEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchCdcpAdminEnable.setReference('43.1.5.4')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchCdcpAdminEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchCdcpAdminEnable.setDescription('Administrative staus of CDCP.')
ieee8021BridgeEvbUAPSchAdminCDCPRole = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cdcpRoleB", 1), ("cdcpRoleS", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPRole.setReference('43.1.5.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPRole.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPRole.setDescription("The administratively configured value for the local \n      port's role parameter. The value of AdminRole is not reflected in \n      the S-channel TLV. The AdminRole may take the value S or B. S indicates\n      the sender is unwilling to accept S-channels configuration \n      (mode, # channels supported, channel index) from its neighbor and \n      that the sender is willing to accept SVID assignments from the neighbor. \n      Stations usually take the S role.B indicates the sender is willing to accept \n      S-channels configuration (mode, # channels supported, channel index) \n      from its neighbor and that the sender is willing do the best it can to fill \n      the SVID assignments from the neighbor. Bridges usually take the B role.")
ieee8021BridgeEvbUAPSchAdminCDCPChanCap = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 167))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPChanCap.setReference('43.1.5.1')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPChanCap.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPChanCap.setDescription('The administratively configured value for the Number of \n      Channels supported parameter. This value is included as \n      the ChnCap parameter in the S-channel TLV.')
ieee8021BridgeEvbUAPSchOperCDCPChanCap = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 167))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchOperCDCPChanCap.setReference('43.1.5.10')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchOperCDCPChanCap.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchOperCDCPChanCap.setDescription('The operational value for the Number of \n      Channels supported parameter. This value is included as \n      the ChnCap parameter in the S-channel TLV.')
ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolLow = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 1, 1, 7), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolLow.setReference('43.1.5.9')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolLow.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolLow.setDescription('Determines the lowest S-VIDs available for assignment by CDCP.')
ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolHigh = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 1, 1, 8), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolHigh.setReference('43.1.5.9')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolHigh.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolHigh.setDescription('Determines the highest S-VIDs available for assignment by CDCP.')
ieee8021BridgeEvbUAPSchOperState = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("notRunning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchOperState.setReference('43.1.5.18')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchOperState.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchOperState.setDescription('The current runnning state of CDCP.')
ieee8021BridgeEvbSchCdcpRemoteEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSchCdcpRemoteEnabled.setReference('43.1.5.17')
if mibBuilder.loadTexts: ieee8021BridgeEvbSchCdcpRemoteEnabled.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSchCdcpRemoteEnabled.setDescription('CDCP state for the remote S-channel.')
ieee8021BridgeEvbSchCdcpRemoteRole = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cdcpRoleB", 1), ("cdcpRoleS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSchCdcpRemoteRole.setReference('43.1.5.15')
if mibBuilder.loadTexts: ieee8021BridgeEvbSchCdcpRemoteRole.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSchCdcpRemoteRole.setDescription("The  value for the remote\n      port's role parameter.")
ieee8021BridgeEvbUAPConfigRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigRowStatus.setDescription('RowStatus for creating a UAP table entry.')
ieee8021BridgeEvbCAPConfigTable = MibTable((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2), )
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPConfigTable.setReference('12.24.4.2 ')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPConfigTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPConfigTable.setDescription('A table that contains  configuration information for \n      the S-Channel Access Ports (CAP).')
ieee8021BridgeEvbCAPConfigEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1), ).setIndexNames((0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPhyPort"), (0, "IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVsiSvid"))
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPConfigEntry.setDescription('A list of objects containing information for the S-Channel Access Ports (CAP)')
ieee8021BridgeEvbCAPComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 1), IEEE8021PbbComponentIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPComponentId.setDescription('Component ID for S-channel Access Port.')
ieee8021BridgeEvbCAPPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 2), IEEE8021BridgePortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPPort.setDescription('Port number for the S-Channel Access Port.')
ieee8021BridgeEvbCAPSChannelID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPSChannelID.setReference('43.1.5.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPSChannelID.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPSChannelID.setDescription('S-Channel ID (SCID) for this CAP.')
ieee8021BridgeEvbCAPAssociateSBPCompID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 6), IEEE8021PbbComponentIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPAssociateSBPCompID.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPAssociateSBPCompID.setDescription('Component ID of the Server Edge Port to be \n      associated with the CAP.')
ieee8021BridgeEvbCAPAssociateSBPPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 7), IEEE8021BridgePortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPAssociateSBPPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPAssociateSBPPort.setDescription('Port number of the Server Edge Port to be \n      associated with the CAP.')
ieee8021BridgeEvbCAPLldpAdminEnables = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 8), Bits().clone(namedValues=NamedValues(("evbTLVEnable", 0), ("autoEvbLLDPTLV", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPLldpAdminEnables.setReference('D.2.8, 41')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPLldpAdminEnables.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPLldpAdminEnables.setDescription('To use manual or auto configuration for EVB LLDP TLV.\n             In manual operation the system may exchange the EVB\n             TLV however does not use the information supplied to set\n             the operating parameters for RR, ECP and VDP.The default\n             value for the ieee8021BridgeEvbSysEvbLldpEnables is LLDP\n             on and manual off.')
ieee8021BridgeEvbCAPLldpAdminCap = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 9), IEEE8021BridgeEvbTLVTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPLldpAdminCap.setReference('D.2.8, 41')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPLldpAdminCap.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPLldpAdminCap.setDescription('EVB current configured capabilities.')
ieee8021BridgeEvbCAPLldpOperMode = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 10), IEEE8021BridgeEvbTLVTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPLldpOperMode.setReference('D.2.8, 41')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPLldpOperMode.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPLldpOperMode.setDescription('EVB current operational capabilities.')
ieee8021BridgeEvbCAPEcpAdminAckTimerInit = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 11), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpAdminAckTimerInit.setReference('D.2.8, 44.3.7.1')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpAdminAckTimerInit.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpAdminAckTimerInit.setDescription('The initial value used to initialize ackTimer \n                   (44.3.6.1).')
ieee8021BridgeEvbCAPEcpOperAckTimerInit = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 12), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpOperAckTimerInit.setReference('D.2.8, 44.3.7.1')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpOperAckTimerInit.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpOperAckTimerInit.setDescription('The initial value used to initialize ackTimer \n                   (44.3.6.1).')
ieee8021BridgeEvbCAPEcpAdminMaxTries = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpAdminMaxTries.setReference('D.2.8, 44.3.7.6')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpAdminMaxTries.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpAdminMaxTries.setDescription('This integer variable defines the maximum number\n                   of times that the ECP transmit state machine will\n                   retry a transmission if no ACK is received.')
ieee8021BridgeEvbCAPEcpOperMaxRetries = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpOperMaxRetries.setReference('D.2.8, 44.3.7.6')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpOperMaxRetries.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpOperMaxRetries.setDescription('This integer variable defines the maximum number\n                   of times that the ECP transmit state machine will\n                   retry a transmission if no ACK is received.')
ieee8021BridgeEvbCAPEcpTxFrameCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpTxFrameCount.setReference('44')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpTxFrameCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpTxFrameCount.setDescription('TBD.')
ieee8021BridgeEvbCAPEcpTxRetryCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpTxRetryCount.setReference('44')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpTxRetryCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpTxRetryCount.setDescription('TBD.')
ieee8021BridgeEvbCAPEcpTxFailures = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpTxFailures.setReference('44')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpTxFailures.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpTxFailures.setDescription('TBD.')
ieee8021BridgeEvbCAPEcpRxFrameCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpRxFrameCount.setReference('44')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpRxFrameCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPEcpRxFrameCount.setDescription('TBD.')
ieee8021BridgeEvbCAPVdpOperRsrcWaitDelay = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 19), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPVdpOperRsrcWaitDelay.setReference('D.2.8, 42.2.6.8')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPVdpOperRsrcWaitDelay.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPVdpOperRsrcWaitDelay.setDescription('The value used to initialize the waitWhile timer\n                   (42.2.5.1) by the EVBCB VDP state machine when the\n                    state machine is waiting for a response. ')
ieee8021BridgeEvbCAPVdpOperRespWaitDelay = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 20), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPVdpOperRespWaitDelay.setReference('D.2.8, 42.2.6.10')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPVdpOperRespWaitDelay.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPVdpOperRespWaitDelay.setDescription('The value used to initialize the waitWhile timer \n                    (42.2.5.1) by the station VDP state machine when\n                    the state machine is waiting for a response.')
ieee8021BridgeEvbCAPVdpOperReinitKeepAlive = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 21), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPVdpOperReinitKeepAlive.setReference(' D.2.8, 42.2.6.7')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPVdpOperReinitKeepAlive.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPVdpOperReinitKeepAlive.setDescription('The value used to initialize the waitWhile timer \n                   (42.2.5.1) by the station VDP state machine in order\n                   to determine when to transmit a keep alive message.')
ieee8021BridgeEvbCAPVdpOperToutKeepAlive = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 22), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPVdpOperToutKeepAlive.setReference('D.2.8, 42.2.6.14')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPVdpOperToutKeepAlive.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPVdpOperToutKeepAlive.setDescription('The value used to initialize the waitWhile timer\n                   (42.2.5.1) by the EVBCB VDP state machine n order to\n                   determine when to transmit a keep alive message.')
ieee8021BridgeEvbCAPRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 100, 1, 4, 2, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPRowStatus.setDescription('RowStatus to create/destroy this table.')
ieee8021BridgeEvbGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 100, 2, 1))
ieee8021BridgeEvbCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 100, 2, 2))
ieee8021BridgeEvbConfigGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 100, 2, 1, 1)).setObjects(("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSysMACAddress"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSysName"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSysType"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSysNumExternalPorts"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSysEvbLldpEnables"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSysEvbLldpDfltMode"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSysEvbLldpNumVsisSup"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSysNumCorErComps"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSysNumSComps"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbECPACkTimer"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbECPMaxRetires"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSysVdpDfltRsrcWaitDelay"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSysVdpDfltReinitKeepAlive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbConfigGroup = ieee8021BridgeEvbConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbConfigGroup.setDescription('The collection of objects used to represent a EVB management objects.')
ieee8021BridgeEvbPhyPortGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 100, 2, 1, 2)).setObjects(("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPhyPortMacAddress"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPhyPortTypeCap"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPhyPortType"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPhyPortToComponentId"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPhyPortToInternalPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbPhyPortGroup = ieee8021BridgeEvbPhyPortGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPhyPortGroup.setDescription('The collection of objects used to represent external ports.')
ieee8021BridgeEvbPortGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 100, 2, 1, 3)).setObjects(("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPortType"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbPortGroup = ieee8021BridgeEvbPortGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbPortGroup.setDescription('The collection of objects used to represent a EVB management objects.')
ieee8021BridgeEvbVSIDBGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 100, 2, 1, 4)).setObjects(("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIComponentID"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIPortNumber"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSITimeSinceCreate"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVsiVdpOperCmd"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVsiOperRevert"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVsiOperHard"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVsiOperReason"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIMgrID"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIType"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSITypeVersion"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIMvFormat"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSINumMACs"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVDPMachineState"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVDPCommandsSucceeded"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVDPCommandsFailed"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVDPCommandReverts"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbVSIDBGroup = ieee8021BridgeEvbVSIDBGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBGroup.setDescription('The collection of objects used to represent a EVB VSI DB table.')
ieee8021BridgeEvbUAPGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 100, 2, 1, 5)).setObjects(("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbUAPComponentId"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbUAPPort"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbUAPSchCdcpAdminEnable"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbUAPSchAdminCDCPRole"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbUAPSchAdminCDCPChanCap"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbUAPSchOperCDCPChanCap"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolLow"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolHigh"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbUAPSchOperState"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSchCdcpRemoteEnabled"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSchCdcpRemoteRole"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbUAPConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbUAPGroup = ieee8021BridgeEvbUAPGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPGroup.setDescription('The collection of objects used to represent a EVB UAP table.')
ieee8021BridgeEvbCAPConfigGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 100, 2, 1, 6)).setObjects(("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPComponentId"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPPort"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPSChannelID"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPAssociateSBPCompID"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPAssociateSBPPort"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPLldpAdminEnables"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPLldpAdminCap"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPLldpOperMode"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPEcpAdminAckTimerInit"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPEcpOperAckTimerInit"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPEcpAdminMaxTries"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPEcpOperMaxRetries"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPEcpTxFrameCount"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPEcpTxRetryCount"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPEcpTxFailures"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPEcpRxFrameCount"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPVdpOperRsrcWaitDelay"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPVdpOperReinitKeepAlive"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbCAPConfigGroup = ieee8021BridgeEvbCAPConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPConfigGroup.setDescription('The collection of objects used to represent a EVB CAP management objects.')
ieee8021BridgeEvbbCAPConfigGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 100, 2, 1, 7)).setObjects(("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPVdpOperToutKeepAlive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbbCAPConfigGroup = ieee8021BridgeEvbbCAPConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbbCAPConfigGroup.setDescription('The collection of objects used to represent a EVBB CAP management objects.')
ieee8021BridgeEvbsCAPConfigGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 100, 2, 1, 8)).setObjects(("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPVdpOperRespWaitDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbsCAPConfigGroup = ieee8021BridgeEvbsCAPConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbsCAPConfigGroup.setDescription('The collection of objects used to represent a EVBS CAP management objects.')
ieee8021BridgeEvbbCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 100, 2, 2, 1)).setObjects(("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbConfigGroup"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPhyPortGroup"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPortGroup"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIDBGroup"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbUAPGroup"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPConfigGroup"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbbCAPConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbbCompliance = ieee8021BridgeEvbbCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbbCompliance.setDescription('The compliance statement for devices supporting EVBB\n        as defined in IEEE 802.1Qbg.')
ieee8021BridgeEvbsCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 100, 2, 2, 2)).setObjects(("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbConfigGroup"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPhyPortGroup"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbPortGroup"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIDBGroup"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbUAPGroup"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbCAPConfigGroup"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbsCAPConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbsCompliance = ieee8021BridgeEvbsCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbsCompliance.setDescription('The compliance statement for devices supporting EVBS\n        as defined in IEEE 802.1Qbg.')
mibBuilder.exportSymbols("IEEE8021-EVBB-MIB", ieee8021BridgeEvbCAPEcpTxFrameCount=ieee8021BridgeEvbCAPEcpTxFrameCount, ieee8021BridgeEvbUAPPort=ieee8021BridgeEvbUAPPort, ieee8021BridgeEvbVsiSvid=ieee8021BridgeEvbVsiSvid, ieee8021BridgeEvbPhyPortTypeCap=ieee8021BridgeEvbPhyPortTypeCap, ieee8021BridgeEvbUAPComponentId=ieee8021BridgeEvbUAPComponentId, ieee8021BridgeEvbPortEntry=ieee8021BridgeEvbPortEntry, ieee8021BridgeEvbVSIDBTable=ieee8021BridgeEvbVSIDBTable, ieee8021BridgeEvbVsiOperRevert=ieee8021BridgeEvbVsiOperRevert, ieee8021BridgeEvbbCAPConfigGroup=ieee8021BridgeEvbbCAPConfigGroup, ieee8021BridgeEvbCompliances=ieee8021BridgeEvbCompliances, ieee8021BridgeEvbConfigGroup=ieee8021BridgeEvbConfigGroup, ieee8021BridgeEvbPhyPortToComponentId=ieee8021BridgeEvbPhyPortToComponentId, ieee8021BridgeEvbbCompliance=ieee8021BridgeEvbbCompliance, ieee8021BridgeEvbCAPEcpAdminMaxTries=ieee8021BridgeEvbCAPEcpAdminMaxTries, ieee8021BridgeEvbCAPEcpAdminAckTimerInit=ieee8021BridgeEvbCAPEcpAdminAckTimerInit, ieee8021BridgeEvbPhyPortGroup=ieee8021BridgeEvbPhyPortGroup, ieee8021BridgeEvbCAPConfigTable=ieee8021BridgeEvbCAPConfigTable, ieee8021BridgeEvbSChannelObjects=ieee8021BridgeEvbSChannelObjects, ieee8021BridgeEvbVSIType=ieee8021BridgeEvbVSIType, ieee8021BridgeEvbUAPConfigEntry=ieee8021BridgeEvbUAPConfigEntry, ieee8021BridgeEvbSysVdpDfltReinitKeepAlive=ieee8021BridgeEvbSysVdpDfltReinitKeepAlive, ieee8021BridgeEvbPortComponentId=ieee8021BridgeEvbPortComponentId, ieee8021BridgeEvbSysEvbLldpDfltMode=ieee8021BridgeEvbSysEvbLldpDfltMode, ieee8021BridgeEvbVSIMvFormat=ieee8021BridgeEvbVSIMvFormat, ieee8021BridgeEvbCAPVdpOperRsrcWaitDelay=ieee8021BridgeEvbCAPVdpOperRsrcWaitDelay, ieee8021BridgeEvbVSIDBObjects=ieee8021BridgeEvbVSIDBObjects, ieee8021BridgeEvbPhyPortTable=ieee8021BridgeEvbPhyPortTable, ieee8021BridgeEvbVSITimeSinceCreate=ieee8021BridgeEvbVSITimeSinceCreate, ieee8021BridgeEvbVSIDBMacTable=ieee8021BridgeEvbVSIDBMacTable, ieee8021BridgeEvbCAPComponentId=ieee8021BridgeEvbCAPComponentId, ieee8021BridgeEvbSysType=ieee8021BridgeEvbSysType, ieee8021BridgeEvbCAPLldpOperMode=ieee8021BridgeEvbCAPLldpOperMode, ieee8021BridgeEvbCAPVdpOperToutKeepAlive=ieee8021BridgeEvbCAPVdpOperToutKeepAlive, ieee8021BridgeEvbVDPCommandsFailed=ieee8021BridgeEvbVDPCommandsFailed, ieee8021BridgeEvbVSIVlanId=ieee8021BridgeEvbVSIVlanId, ieee8021BridgeEvbMib=ieee8021BridgeEvbMib, ieee8021BridgeEvbGroups=ieee8021BridgeEvbGroups, ieee8021BridgeEvbVSIComponentID=ieee8021BridgeEvbVSIComponentID, ieee8021BridgeEvbVDPCommandReverts=ieee8021BridgeEvbVDPCommandReverts, ieee8021BridgeEvbVsiOperReason=ieee8021BridgeEvbVsiOperReason, ieee8021BridgeEvbVSIDBGroup=ieee8021BridgeEvbVSIDBGroup, ieee8021BridgeEvbVDPCommandsSucceeded=ieee8021BridgeEvbVDPCommandsSucceeded, ieee8021BridgeEvbCAPVdpOperReinitKeepAlive=ieee8021BridgeEvbCAPVdpOperReinitKeepAlive, ieee8021BridgeEvbVSIPortNumber=ieee8021BridgeEvbVSIPortNumber, ieee8021BridgeEvbPortRowStatus=ieee8021BridgeEvbPortRowStatus, ieee8021BridgeEvbECPACkTimer=ieee8021BridgeEvbECPACkTimer, ieee8021BridgeEvbCAPConfigEntry=ieee8021BridgeEvbCAPConfigEntry, ieee8021BridgeEvbVSIDBEntry=ieee8021BridgeEvbVSIDBEntry, IEEE8021BridgeEvbTLVTC=IEEE8021BridgeEvbTLVTC, ieee8021BridgeEvbVSIMac=ieee8021BridgeEvbVSIMac, ieee8021BridgeEvbSysMACAddress=ieee8021BridgeEvbSysMACAddress, ieee8021BridgeEvbUAPConfigTable=ieee8021BridgeEvbUAPConfigTable, ieee8021BridgeEvbCAPLldpAdminEnables=ieee8021BridgeEvbCAPLldpAdminEnables, ieee8021BridgeEvbCAPPort=ieee8021BridgeEvbCAPPort, ieee8021BridgeEvbCAPLldpAdminCap=ieee8021BridgeEvbCAPLldpAdminCap, ieee8021BridgeEvbUAPConfigRowStatus=ieee8021BridgeEvbUAPConfigRowStatus, ieee8021BridgeEvbSysVdpDfltRsrcWaitDelay=ieee8021BridgeEvbSysVdpDfltRsrcWaitDelay, ieee8021BridgeEvbSysNumCorErComps=ieee8021BridgeEvbSysNumCorErComps, ieee8021BridgeEvbCAPEcpOperMaxRetries=ieee8021BridgeEvbCAPEcpOperMaxRetries, ieee8021BridgeEvbsCAPConfigGroup=ieee8021BridgeEvbsCAPConfigGroup, ieee8021BridgeEvbPhyPortToInternalPort=ieee8021BridgeEvbPhyPortToInternalPort, ieee8021BridgeEvbCAPAssociateSBPPort=ieee8021BridgeEvbCAPAssociateSBPPort, ieee8021BridgeEvbUAPGroup=ieee8021BridgeEvbUAPGroup, ieee8021BridgeEvbPhyPortMacAddress=ieee8021BridgeEvbPhyPortMacAddress, ieee8021BridgeEvbCAPVdpOperRespWaitDelay=ieee8021BridgeEvbCAPVdpOperRespWaitDelay, ieee8021BridgeEvbPhyPortType=ieee8021BridgeEvbPhyPortType, ieee8021BridgeEvbVSIDBMacEntry=ieee8021BridgeEvbVSIDBMacEntry, ieee8021BridgeEvbPortGroup=ieee8021BridgeEvbPortGroup, ieee8021BridgeEvbVSITypeVersion=ieee8021BridgeEvbVSITypeVersion, ieee8021BridgeEvbSchCdcpRemoteEnabled=ieee8021BridgeEvbSchCdcpRemoteEnabled, ieee8021BridgeEvbVsiVdpOperCmd=ieee8021BridgeEvbVsiVdpOperCmd, ieee8021BridgeEvbUAPSchOperState=ieee8021BridgeEvbUAPSchOperState, ieee8021BridgeEvbConformance=ieee8021BridgeEvbConformance, ieee8021BridgeEvbConfig=ieee8021BridgeEvbConfig, ieee8021BridgeEvbSysEvbLldpEnables=ieee8021BridgeEvbSysEvbLldpEnables, ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolLow=ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolLow, ieee8021BridgeEvbCAPRowStatus=ieee8021BridgeEvbCAPRowStatus, ieee8021BridgeEvbVSINumMACs=ieee8021BridgeEvbVSINumMACs, ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolHigh=ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolHigh, ieee8021BridgeEvbVsiOperHard=ieee8021BridgeEvbVsiOperHard, ieee8021BridgeEvbObjects=ieee8021BridgeEvbObjects, ieee8021BridgeEvbPhyPortEntry=ieee8021BridgeEvbPhyPortEntry, ieee8021BridgeEvbPortType=ieee8021BridgeEvbPortType, ieee8021BridgeEvbSchCdcpRemoteRole=ieee8021BridgeEvbSchCdcpRemoteRole, ieee8021BridgeEvbUAPSchCdcpAdminEnable=ieee8021BridgeEvbUAPSchCdcpAdminEnable, ieee8021BridgeEvbUAPSchOperCDCPChanCap=ieee8021BridgeEvbUAPSchOperCDCPChanCap, ieee8021BridgeEvbUAPSchAdminCDCPChanCap=ieee8021BridgeEvbUAPSchAdminCDCPChanCap, ieee8021BridgeEvbECPMaxRetires=ieee8021BridgeEvbECPMaxRetires, ieee8021BridgeEvbCAPEcpRxFrameCount=ieee8021BridgeEvbCAPEcpRxFrameCount, ieee8021BridgeEvbUAPSchAdminCDCPRole=ieee8021BridgeEvbUAPSchAdminCDCPRole, ieee8021BridgeEvbsCompliance=ieee8021BridgeEvbsCompliance, PYSNMP_MODULE_ID=ieee8021BridgeEvbMib, ieee8021BridgeEvbPortTable=ieee8021BridgeEvbPortTable, ieee8021BridgeEvbCAPAssociateSBPCompID=ieee8021BridgeEvbCAPAssociateSBPCompID, ieee8021BridgeEvbVDPMachineState=ieee8021BridgeEvbVDPMachineState, ieee8021BridgeEvbCAPEcpTxRetryCount=ieee8021BridgeEvbCAPEcpTxRetryCount, ieee8021BridgeEvbVSIID=ieee8021BridgeEvbVSIID, ieee8021BridgeEvbSysNumExternalPorts=ieee8021BridgeEvbSysNumExternalPorts, ieee8021BridgeEvbCAPEcpOperAckTimerInit=ieee8021BridgeEvbCAPEcpOperAckTimerInit, ieee8021BridgeEvbNotifications=ieee8021BridgeEvbNotifications, ieee8021BridgeEvbPort=ieee8021BridgeEvbPort, ieee8021BridgeEvbGroupID=ieee8021BridgeEvbGroupID, ieee8021BridgeEvbVSIMgrID=ieee8021BridgeEvbVSIMgrID, ieee8021BridgeEvbCAPSChannelID=ieee8021BridgeEvbCAPSChannelID, ieee8021BridgeEvbSysName=ieee8021BridgeEvbSysName, ieee8021BridgeEvbCAPConfigGroup=ieee8021BridgeEvbCAPConfigGroup, ieee8021BridgeEvbSysNumSComps=ieee8021BridgeEvbSysNumSComps, ieee8021BridgeEvbPhyPort=ieee8021BridgeEvbPhyPort, ieee8021BridgeEvbSysEvbLldpNumVsisSup=ieee8021BridgeEvbSysEvbLldpNumVsisSup, ieee8021BridgeEvbCAPEcpTxFailures=ieee8021BridgeEvbCAPEcpTxFailures)
