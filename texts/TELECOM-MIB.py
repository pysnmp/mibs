#
# PySNMP MIB module TELECOM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eaton/TELECOM-MIB
# Produced by pysmi-1.1.12 at Thu Nov 28 02:57:02 2024
# On host fv-az885-149 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, Bits, NotificationType, IpAddress, TimeTicks, Gauge32, Counter32, NotificationType, MibIdentifier, Counter64, Unsigned32, iso, enterprises, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "Bits", "NotificationType", "IpAddress", "TimeTicks", "Gauge32", "Counter32", "NotificationType", "MibIdentifier", "Counter64", "Unsigned32", "iso", "enterprises", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class PositiveInteger(TextualConvention, Integer32):
    description = 'This data type is a non-zero and non-negative value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class NonNegativeInteger(TextualConvention, Integer32):
    description = 'This data type is a non-negative value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

ppc = MibIdentifier((1, 3, 6, 1, 4, 1, 935))
device = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10))
matAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2))
matObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 1))
matTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 2))
matController = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 1))
matInverter = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2))
matSts = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3))
matDryContact = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 4))
matConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5))
matTrapTargets = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6))
matConSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: matConSerialNum.setDescription('Controller serial number.')
matConName = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConName.setStatus('mandatory')
if mibBuilder.loadTexts: matConName.setDescription('Power system name.')
matConWarningState = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConWarningState.setStatus('mandatory')
if mibBuilder.loadTexts: matConWarningState.setDescription("The values indicate the unrestored traps.\nFor example,\nif 'Controller Battery Low' and 'Controller temperature High'\nthe agent send\nthe trap 85 and trap 87 to\nNMS,\nso the value of matConWarningState should be '85,87'.\nAnd then the two events restored, the value of matConWarningState\nshould change to empty.")
matConTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: matConTemperature.setDescription('Temperature of the controller, the unit is 0.1 degree.')
matAgentSoftwareVerison = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matAgentSoftwareVerison.setStatus('mandatory')
if mibBuilder.loadTexts: matAgentSoftwareVerison.setDescription('The Network Management Card software/firmware version.')
matInvModuleNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvModuleNum.setStatus('mandatory')
if mibBuilder.loadTexts: matInvModuleNum.setDescription('The number of Inverter modules.')
matInvTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2), )
if mibBuilder.loadTexts: matInvTable.setStatus('mandatory')
if mibBuilder.loadTexts: matInvTable.setDescription('This table list Inverter message.')
matInvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1), ).setIndexNames((0, "TELECOM-MIB", "matInvModuleIndex"))
if mibBuilder.loadTexts: matInvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: matInvEntry.setDescription('An entry containing information applicable to a particular Inverter module.')
matInvModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: matInvModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: matInvModuleIndex.setDescription('The index of Inverter module.')
matInvSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: matInvSerialNum.setDescription('Module serial number.')
matInvFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: matInvFirmwareVersion.setDescription('Firmware version.')
matInvHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: matInvHardwareVersion.setDescription('Hardware version.')
matInvWarningState = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvWarningState.setStatus('mandatory')
if mibBuilder.loadTexts: matInvWarningState.setDescription("The values indicate the unrestored traps.\nFor example,\nif 'Inverter fault' and 'Inverter Over-loading'\nthe agent send\nthe trap 1 and trap 3 to\nNMS,\nso the value of matConWarningState should be '1,3'.\nAnd then the two events restored, the value of matConWarningState\nshould change to empty.")
matInvOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: matInvOutputVoltage.setDescription('Inverter Output Voltage, the unit is 0.1 Volt.')
matInvOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvOutputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: matInvOutputCurrent.setDescription('Inverter Output Current, unit is 0.1 amp.')
matInvBatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 8), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvBatteryVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: matInvBatteryVoltage.setDescription('Inverter Battery voltage, the unit is 0.1 Volt.')
matInvOutputFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 9), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvOutputFreq.setStatus('mandatory')
if mibBuilder.loadTexts: matInvOutputFreq.setDescription('Output frequency, the unit is 0.1 Hz.')
matInvOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 10), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: matInvOutputPower.setDescription('Output power, the unit is VA.')
matInvPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 11), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvPowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: matInvPowerLimit.setDescription('Power Limit Status of Inverter module, the unit is percent.')
matInvRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 12), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvRunTime.setStatus('mandatory')
if mibBuilder.loadTexts: matInvRunTime.setDescription('Run time, the unit is Hour.')
matInvTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: matInvTemperature.setDescription('Temperature of the inverter, the unit is 0.1 degree.')
matInvLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 14), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvLineVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: matInvLineVoltage.setDescription('Line voltage of 3.5K, the unit is 0.1 Volt.')
matInvLineFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 15), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvLineFreq.setStatus('mandatory')
if mibBuilder.loadTexts: matInvLineFreq.setDescription('Line frequency of 3.5K, the unit is 0.1 Hz.')
matInvMbsPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("transfer", 1), ("normal", 2), ("bypass", 3), ("invalid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvMbsPosition.setStatus('mandatory')
if mibBuilder.loadTexts: matInvMbsPosition.setDescription('MBS position of 3.5K.')
matInvRunMode = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("powerOn", 1), ("standby", 2), ("bypass", 3), ("line", 4), ("battery", 5), ("fault", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvRunMode.setStatus('mandatory')
if mibBuilder.loadTexts: matInvRunMode.setDescription('Currently run mode of 3.5K.')
matInvPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("batteryMode", 1), ("lineMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvPriority.setStatus('mandatory')
if mibBuilder.loadTexts: matInvPriority.setDescription('Priority of 3.5K.')
matConfInvOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 19), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConfInvOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvOutputVoltage.setDescription('Rating Output voltage, the unit is 0.1 Volt.')
matConfInvInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 20), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConfInvInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvInputVoltage.setDescription('Rating Input voltage, the unit is 0.1 Volt.')
matConfInvOutputVoltHighLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 21), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConfInvOutputVoltHighLoss.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvOutputVoltHighLoss.setDescription('Output High Loss voltage, the unit is 0.1 Volt.')
matConfInvOutputVoltLowLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 22), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConfInvOutputVoltLowLoss.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvOutputVoltLowLoss.setDescription('Output Low loss voltage, the unit is 0.1 Volt.')
matConfInvOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 23), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConfInvOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvOutputPower.setDescription('Rating output power, the unit is VA.')
matConfInvOutputFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 24), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConfInvOutputFreq.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvOutputFreq.setDescription('Rating output frequency, the unit is 0.1 Hz.')
matInvPhaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singlePhase", 1), ("threePhase", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvPhaseType.setStatus('mandatory')
if mibBuilder.loadTexts: matInvPhaseType.setDescription('Phase type.')
matInvOnOffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shutdown", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matInvOnOffStatus.setStatus('mandatory')
if mibBuilder.loadTexts: matInvOnOffStatus.setDescription('Inverter module On/Off status.')
matStsModuleNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsModuleNum.setStatus('mandatory')
if mibBuilder.loadTexts: matStsModuleNum.setDescription('The number of STS modules.')
matStsTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2), )
if mibBuilder.loadTexts: matStsTable.setStatus('mandatory')
if mibBuilder.loadTexts: matStsTable.setDescription('This table list STS message.')
matStsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1), ).setIndexNames((0, "TELECOM-MIB", "matStsModuleIndex"))
if mibBuilder.loadTexts: matStsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: matStsEntry.setDescription('An entry containing information applicable to a particular STS module.')
matStsModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: matStsModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: matStsModuleIndex.setDescription('The index of STS module.')
matStsModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: matStsModuleType.setDescription('Module type, 050 represent 50A, 100 represent 100A.')
matStsSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: matStsSerialNum.setDescription('Module serial number.')
matStsFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: matStsFirmwareVersion.setDescription('Firmware version.')
matStsHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: matStsHardwareVersion.setDescription('Hardware version.')
matStsWarningState = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsWarningState.setStatus('mandatory')
if mibBuilder.loadTexts: matStsWarningState.setDescription("The values indicate the unrestored traps.\nFor example,\nif 'STS running in fault mode' and 'STS fan fault'\nthe agent send\nthe trap 59 and trap 61 to\nNMS,\nso the value of matConWarningState should be '59,61'.\nAnd then the two events restored, the value of matConWarningState\nshould change to empty.")
matStsMainInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsMainInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: matStsMainInputVoltage.setDescription('STS Mains I/P voltage, the unit is 0.1 Volts.')
matStsMainInputFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 8), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsMainInputFreq.setStatus('mandatory')
if mibBuilder.loadTexts: matStsMainInputFreq.setDescription('STS Mains I/P frequency, the unit is 0.1 Hz.')
matStsInvInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 9), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsInvInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: matStsInvInputVoltage.setDescription('STS INV I/P voltage, the unit is 0.1 volts.')
matStsInvInputFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 10), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsInvInputFreq.setStatus('mandatory')
if mibBuilder.loadTexts: matStsInvInputFreq.setDescription('STS INV I/P frequency, the unit is 0.1 Hz.')
matStsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 11), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: matStsOutputVoltage.setDescription('STS O/P voltage, the unit is 0.1 volts.')
matStsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 12), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsOutputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: matStsOutputCurrent.setDescription('STS O/P Current, the unit is 0.1 amp.')
matStsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 13), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: matStsOutputPower.setDescription('STS O/P Power, the unit is VA.')
matStsOutputFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 14), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsOutputFreq.setStatus('mandatory')
if mibBuilder.loadTexts: matStsOutputFreq.setDescription('STS O/P frequency, the unit is 0.1 Hz.')
matStsRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 15), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsRuntime.setStatus('mandatory')
if mibBuilder.loadTexts: matStsRuntime.setDescription('STS Runtime, the unit is Hour.')
matStsTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: matStsTemperature.setDescription("STS module's Temperature, the unit is 0.1 degree.")
matStsMbsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normalPosition", 1), ("issPosition", 2), ("ibpPosition", 3), ("mssPosition", 4), ("mbpPosition", 5), ("mbsError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsMbsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: matStsMbsStatus.setDescription('STS MBS status.')
matStsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onLine", 1), ("offLine", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: matStsStatus.setDescription('STS status.')
matStsRunningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inverter", 1), ("mains", 2), ("noOutput", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsRunningMode.setStatus('mandatory')
if mibBuilder.loadTexts: matStsRunningMode.setDescription('STS Running Mode.')
matStsMainHighLossVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 20), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsMainHighLossVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: matStsMainHighLossVoltage.setDescription('STS Main high loss voltage, the unit is 0.1 volts.')
matStsMainLowLossVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 21), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsMainLowLossVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: matStsMainLowLossVoltage.setDescription('STS Main low loss voltag, the unit is 0.1 volts.')
matStsInvHighLossVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 22), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsInvHighLossVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: matStsInvHighLossVoltage.setDescription('STS Inverter high loss voltage, the unit is 0.1 volts.')
matStsInvLosLossVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 23), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsInvLosLossVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: matStsInvLosLossVoltage.setDescription('STS Inverter low loss voltage, the unit is 0.1 volts.')
matDryContactNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matDryContactNum.setStatus('mandatory')
if mibBuilder.loadTexts: matDryContactNum.setDescription('The number of dry contact.')
matDryContactTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 4, 2), )
if mibBuilder.loadTexts: matDryContactTable.setStatus('mandatory')
if mibBuilder.loadTexts: matDryContactTable.setDescription('This table list dry contact message.')
matDryContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 4, 2, 1), ).setIndexNames((0, "TELECOM-MIB", "matDryContactIndex"))
if mibBuilder.loadTexts: matDryContactEntry.setStatus('mandatory')
if mibBuilder.loadTexts: matDryContactEntry.setDescription('An entry containing information of one dry contact.')
matDryContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 4, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: matDryContactIndex.setStatus('mandatory')
if mibBuilder.loadTexts: matDryContactIndex.setDescription('The index of dry contact.')
matDryContactString = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matDryContactString.setStatus('mandatory')
if mibBuilder.loadTexts: matDryContactString.setDescription("format: xx xx xx xx xx xx xx xx xx xx,\nxx: alarm code. If the configured alarm is less than 10, then fill the position with '--' to instead 'xx'.\nAlarm code:\nInverter fault\t0x01(for 3.5Kva system and 1.5Kva system),\nInverter over load\t0x02(for 3.5Kva system and 1.5Kva system),\nInverter fan fault\t0x03(for 3.5Kva system and 1.5Kva system),\nInverter power limit\t0x04(for 3.5Kva system and 1.5Kva system),\nInverter DC input Abnormal\t0x05(for 3.5Kva system and 1.5Kva system),\nInverter low volt off\t0x06(for 3.5Kva system and 1.5Kva system),\nInverter lost\t0x07(for 3.5Kva system and 1.5Kva system),\nInverter Mains unavailable\t0x19(for 3.5Kva system),\nInverter Maintenance Bypass\t0x1A(for 3.5Kva system),\nInverter Output\t0x1B(for 3.5Kva system),\nSTS Inv unavailable\t0x2A(for 1.5Kva system),\nSTS Main unavailable\t0x2B(for 1.5Kva system),\nSTS Output overload\t0x2C(for 1.5Kva system),\nSTS OP Short circuit\t0x2D(for 1.5Kva system),\nSTS K1 Relay open\t0x23(for 1.5Kva system),\nSTS SCR1 short\t0x24(for 1.5Kva system),\nSTS SCR2 short\t0x25(for 1.5Kva system),\nSTS INV Bypass Mode\t0x2F(for 1.5Kva system),\nSTS Over temperature\t0x30(for 1.5Kva system),\nSTS MBS Abnormal\t0x31(for 1.5Kva system),\nSTS Fan Lock\t0x27(for 1.5Kva system),\nSTS Fault Mode\t0x26(for 1.5Kva system),\nSTS Eeprom Fault\t0x28(for 1.5Kva system),\nSPS Power Fail\t0x32(for 1.5Kva system),\nSTS Output abnormal\t0x34(for 1.5Kva system),\nSTS Maintenance Bypass\t0x35(for 1.5Kva system),\nSTS Output\t0x36(for 1.5Kva system),\nController temperature high\t0x42(for 3.5Kva system and 1.5Kva system),\nController eeprom fail\t0x43(for 3.5Kva system and 1.5Kva system),\nController CAN Bus Off\t0x45(for 3.5Kva system and 1.5Kva system)")
matConfInvSysOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 1), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysOutputFreq.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvSysOutputFreq.setDescription('Inverter system output frequency, can be 500 or 600, the unit is 0.1 Hz.')
matConfInvSysOutputVolt = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 2), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysOutputVolt.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvSysOutputVolt.setDescription('Inverter system output voltage, can be 1100, 1150,1200,2080,2200,2300,2400.\nThe unit is 0.1 Volt.')
matConfInvSysOutputVoltHighLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 3), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysOutputVoltHighLoss.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvSysOutputVoltHighLoss.setDescription('Output voltage high loss of Inverter System, the unit is 0.1 Volt.\nThis value depends on matConfInvSysOutputVolt, the least significant\ndigit must be zero, see table:\nmatConfInvSysOutputVolt(0.1V) Range(0.1V)\n1100\t1170-1270,\n1150\t1220-1320,\n1200 1270-1380,\n2080 2200-2400,\n2200 2330-2520,\n2300 2440-2640,\n2400 2540-2760')
matConfInvSysOutputVoltLowLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 4), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysOutputVoltLowLoss.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvSysOutputVoltLowLoss.setDescription('Output Voltage Low Loss of inverter System, the unit is 0.1 volt.\nThis value depends on matConfInvSysOutputVolt, the least significant\ndigit must be zero, see table:\nmatConfInvSysOutputVolt(0.1V) Range(0.1V)\n1100\t890-1050,\n1150\t930-1100,\n1200 1000-1140,\n2080 1760-1980,\n2200 1760-2090,\n2300 1850-2180,\n2400 1930-2280')
matConfInvSysInputVolt = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 5), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysInputVolt.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvSysInputVolt.setDescription('Inverter System Input Voltage, the unit is 0.1 Volt.\nThis value depends on matConfInvInputVoltage:\nmatConfInvInputVoltage(0.1V)=480: Range(400-440),\nmatConfInvInputVoltage(0.1V)=600: Range(500-550)')
matConfInvSysPowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 6), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysPowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvSysPowerLimit.setDescription('Inverter System Power Limited level, format: xxx, range: 50 to 100, the unit is percent.')
matConfInvSysLineVoltHighLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 7), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysLineVoltHighLoss.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvSysLineVoltHighLoss.setDescription('High loss for line voltage of 3.5k inverter module, the unit is 0.1 volt.\nThis value depends on matConfInvSysOutputVolt, the least significant\ndigit must be zero, see table:\nmatConfInvSysOutputVolt(0.1V) Range(0.1V)\n2080 2180-2650,\n2200 2300-2650,\n2300 2400-2650,\n2400 2500-2650')
matConfInvSysLineVoltLowLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 8), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysLineVoltLowLoss.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvSysLineVoltLowLoss.setDescription('Low loss for line voltage of 3.5k inverter module, the unit is 0.1 volt.\nThis value depends on matConfInvSysOutputVolt, the least significant\ndigit must be zero, see table:\nmatConfInvSysOutputVolt(0.1V) Range(0.1V)\n2080 1850-1980,\n2200 1850-2100,\n2300 1850-2200,\n2400 1850-2300')
matConfInvSysPriority = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("batteryMode", 1), ("lineMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysPriority.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvSysPriority.setDescription('Priority for 3.5K inverter module.')
matConfInvSysFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalSpeed", 1), ("fullSpeed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: matConfInvSysFanSpeed.setDescription('Inverter System fan speed.')
matConfStsAcVoltHighLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 11), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfStsAcVoltHighLoss.setStatus('mandatory')
if mibBuilder.loadTexts: matConfStsAcVoltHighLoss.setDescription('STS Module AC Voltage High Loss Volt, the unit is 0.1 volt.\nThis value depends on matConfInvSysOutputVolt, the least significant\ndigit must be zero, see table:\nmatConfInvSysOutputVolt(0.1V) Range(0.1V)\n1100\t1170-1270,\n1150\t1220-1320,\n1200 1270-1380,\n2080 2200-2400,\n2200 2330-2520,\n2300 2440-2640,\n2400 2540-2760')
matConfStsAcVoltLowLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 12), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfStsAcVoltLowLoss.setStatus('mandatory')
if mibBuilder.loadTexts: matConfStsAcVoltLowLoss.setDescription('STS Module AC Voltage Low Loss Volt, the unit is 0.1 volt.\nThis value depends on matConfInvSysOutputVolt, the least significant\ndigit must be zero, see table:\nmatConfInvSysOutputVolt(0.1V) Range(0.1V)\n1100\t890-1050,\n1150\t930-1100,\n1200 1000-1140,\n2080 1760-1980,\n2200 1760-2090,\n2300 1850-2180,\n2400 1930-2280')
matConfStsIpvVoltHighLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 13), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfStsIpvVoltHighLoss.setStatus('mandatory')
if mibBuilder.loadTexts: matConfStsIpvVoltHighLoss.setDescription('STS module Inverter IPV High Loss Volt, the unit is 0.1 volt.\nThis value depends on matConfInvSysOutputVolt, the least significant\ndigit must be zero, see table:\nmatConfInvSysOutputVolt(0.1V) Range(0.1V)\n1100\t1170-1270,\n1150\t1220-1320,\n1200 1270-1380,\n2080 2200-2400,\n2200 2330-2520,\n2300 2440-2640,\n2400 2540-2760')
matConfStsIpvVoltLowLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 14), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfStsIpvVoltLowLoss.setStatus('mandatory')
if mibBuilder.loadTexts: matConfStsIpvVoltLowLoss.setDescription('STS module Inverter IPV low Loss Volt, the unit is 0.1 volt.\nThis value depends on matConfInvSysOutputVolt, the least significant\ndigit must be zero, see table:\nmatConfInvSysOutputVolt(0.1V) Range(0.1V)\n1100\t890-1050,\n1150\t930-1100,\n1200 1000-1140,\n2080 1760-1980,\n2200 1760-2090,\n2300 1850-2180,\n2400 1930-2280')
matConfStsPriority = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onLine", 1), ("offLine", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfStsPriority.setStatus('mandatory')
if mibBuilder.loadTexts: matConfStsPriority.setDescription('STS output priority.')
matConfStsFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalSpeed", 1), ("fullSpeed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfStsFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: matConfStsFanSpeed.setDescription('STS fan speed.')
matTrapTargetsNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matTrapTargetsNum.setStatus('mandatory')
if mibBuilder.loadTexts: matTrapTargetsNum.setDescription('The number of trap targets.')
matTrapTargetsTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2), )
if mibBuilder.loadTexts: matTrapTargetsTable.setStatus('mandatory')
if mibBuilder.loadTexts: matTrapTargetsTable.setDescription("This table list the managers'IP to send traps to.")
matTrapTargetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2, 1), ).setIndexNames((0, "TELECOM-MIB", "matTrapTargetsIndex"))
if mibBuilder.loadTexts: matTrapTargetsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: matTrapTargetsEntry.setDescription('An entry containing information of one trap target.')
matTrapTargetsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: matTrapTargetsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: matTrapTargetsIndex.setDescription('The index to a trap receiver entry')
matTrapTargetsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matTrapTargetsAddress.setStatus('mandatory')
if mibBuilder.loadTexts: matTrapTargetsAddress.setDescription('The IP address of the manager to send a trap to.')
matTrapTargetsCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matTrapTargetsCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: matTrapTargetsCommunity.setDescription('The community name to use in the trap when\nsent to the manager.')
matTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("matTrap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matTrapType.setStatus('mandatory')
if mibBuilder.loadTexts: matTrapType.setDescription('The type of trap to be received by the manager.')
matTrapSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("observe", 1), ("major", 2), ("critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matTrapSeverityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: matTrapSeverityLevel.setDescription('The severity level of traps to be received by this manager.')
matTrapTargetsDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matTrapTargetsDesc.setStatus('mandatory')
if mibBuilder.loadTexts: matTrapTargetsDesc.setDescription('Description of trap receivers')
matInvFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,1)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvFault.setDescription('MAJOR: Inverter fault.')
matReturnFromInvFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,2)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvFault.setDescription('OBSERVE: Return from Inverter fault.')
matInvOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,3)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvOverLoad.setDescription('MAJOR: Inverter Over-loading.')
matReturnFromInvOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,4)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvOverLoad.setDescription('OBSERVE: Return from Inverter Over-loading.')
matInvFanFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,5)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvFanFault.setDescription('MAJOR: Inverter Fan fault.')
matReturnFromInvFanFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,6)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvFanFault.setDescription('OBSERVE: Return from Inverter Fan fault.')
matInvTempPowerLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,7)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvTempPowerLimit.setDescription('MAJOR: Inverter power limit.')
matReturnFromInvTempPowerLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,8)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvTempPowerLimit.setDescription('OBSERVE: Return from Inverter power limit.')
matInvInputAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,9)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvInputAbnormal.setDescription('MAJOR: Inverter input abnormal.')
matReturnFromInvInputAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,10)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvInputAbnormal.setDescription('OBSERVEReturn from Inverter input abnormal.')
matInvLowInputShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,11)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvLowInputShutdown.setDescription('MAJOR: Inverter shut down due to low input voltage.')
matReturnFromInvLowInputShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,12)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvLowInputShutdown.setDescription('OBSERVE: Return from Inverter shut down due to low input voltage.')
matInvNotRespond = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,13)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvNotRespond.setDescription('CRITICAL: Inverter disconnected.')
matReturnFromInvNotRespond = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,14)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvNotRespond.setDescription('OBSERVE: Inverter connected.')
matInvBusVoltageOverLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,15)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvBusVoltageOverLimit.setDescription('CRITICAL: Inverter Bus voltage over the maximal level.')
matReturnFromInvBusVoltOverLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,16)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvBusVoltOverLimit.setDescription('OBSERVE: Return from Inverter Bus voltage over the maximal level.')
matInvBusVoltageUnderLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,17)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvBusVoltageUnderLimit.setDescription('CRITICAL: Inverter Bus volt under the minimal level.')
matReturnFromInvBusVoltUnderLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,18)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvBusVoltUnderLimit.setDescription('OBSERVE: Return from Inverter Bus volt under the minimal level.')
matInvBusSoftFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,19)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvBusSoftFail.setDescription('CRITICAL: Inverter Bus Soft Start Fail.')
matReturnFromInvBusSoftFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,20)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvBusSoftFail.setDescription('OBSERVE: Return from Inverter Bus Soft Start Fail.')
matInvOutputShort = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,21)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvOutputShort.setDescription('CRITICAL: Inverter Output Short.')
matReturnFromInvOutputShort = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,22)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvOutputShort.setDescription('OBSERVE: Return from Inverter Output Short.')
matInvOutputVoltLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,23)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvOutputVoltLow.setDescription('CRITICAL: Inverter output voltage low.')
matReturnFromInvOutputVoltLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,24)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvOutputVoltLow.setDescription('OBSERVE: Return from Inverter output voltage low.')
matInvOutputVoltHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,25)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvOutputVoltHigh.setDescription('CRITICAL: Inverter output voltage high.')
matReturnFromInvOutputVoltHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,26)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvOutputVoltHigh.setDescription('OBSERVE: Return from Inverter output voltage high.')
matInvTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,27)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvTemperatureHigh.setDescription('CRITICAL: Inverter Temperature High.')
matReturnFromInvTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,28)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvTemperatureHigh.setDescription('OBSERVE: Return from Inverter Temperature High.')
matInvNegativePowerProtect = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,29)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvNegativePowerProtect.setDescription('CRITICAL: Inverter negative power protection.')
matReturnFromInvNegativePowerProtect = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,30)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvNegativePowerProtect.setDescription('OBSERVE: Return from Inverter negative power protection.')
matInvPulseFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,31)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvPulseFault.setDescription('CRITICAL: Inverter Sync Pulse Fault.')
matReturnFromInvPulseFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,32))
if mibBuilder.loadTexts: matReturnFromInvPulseFault.setDescription('OBSERVE: Return from Inverter Sync Pulse Fault.')
matInvEPOShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,33)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvEPOShutdown.setDescription('CRITICAL: Inverter EPO shutdown.')
matReturnFromInvEPOShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,34)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvEPOShutdown.setDescription('OBSERVE: Return from Inverter EPO shutdown.')
matInvSoftStartFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,35)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvSoftStartFail.setDescription('CRITICAL: Inverter soft start fail.')
matReturnFromInvSoftStartFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,36)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvSoftStartFail.setDescription('OBSERVE: Return from Inverter soft start fail.')
matInvEEPROMFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,37)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvEEPROMFault.setDescription('MAJOR: Inverter EEPROM fault.')
matReturnFromInvEEPROMFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,38)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvEEPROMFault.setDescription('OBSERVE: Return from Inverter EEPROM fault.')
matInvBypassSCRShort = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,39)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvBypassSCRShort.setDescription('CRITICAL: Inverter Bypass SCR Short.')
matReturnFromInvBypassSCRShort = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,40)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvBypassSCRShort.setDescription('OBSERVE: Return from Inverter Bypass SCR Short.')
matInvMBSPosError = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,41)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvMBSPosError.setDescription('CRITICAL: Inverter MBS Position Error.')
matReturnFromInvMBSPosError = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,42)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvMBSPosError.setDescription('OBSERVE: Return from Inverter MBS Position Error.')
matInvBackfeedRelayOpen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,43)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvBackfeedRelayOpen.setDescription('CRITICAL: Inverter Backfeed Relay Open.')
matReturnFromInvBackfeedRelayOpen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,44)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvBackfeedRelayOpen.setDescription('OBSERVE: Return from Inverter Backfeed Relay Open.')
matInvHardwareError = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,45)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvHardwareError.setDescription('CRITICAL: Inverter Hardware Detection Error.')
matReturnFromInvHardwareError = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,46)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvHardwareError.setDescription('OBSERVE: Return from Inverter Hardware Detection Error.')
matInvMainUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,47)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvMainUnavailable.setDescription('MAJOR: Inverter Mains Unavailable.')
matReturnFromInvMainUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,48)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvMainUnavailable.setDescription('OBSERVE: Return from Inverter Mains Unavailable.')
matInvMaintenaceBypass = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,49)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matInvMaintenaceBypass.setDescription('MAJOR: Inverter Maintenance Bypass.')
matReturnFromInvMaintenaceBypass = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,50)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
if mibBuilder.loadTexts: matReturnFromInvMaintenaceBypass.setDescription('OBSERVE: Return from Inverter Maintenance Bypass.')
matStsBypassUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,51)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsBypassUnavailable.setDescription('MAJOR: STS Bypass unavailable.')
matReturnFromStsBypassUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,52)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsBypassUnavailable.setDescription('OBSERVE: Return from STS Bypass unavailable.')
matStsBackfeedRelayOpen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,53)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsBackfeedRelayOpen.setDescription('MAJOR: STS Back-feed relay open.')
matReturnFromStsBackfeedRelayOpen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,54)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsBackfeedRelayOpen.setDescription('OBSERVE: Return from STS Back-feed relay open.')
matStsScr1ShortCurcuit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,55)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsScr1ShortCurcuit.setDescription('CRITICAL: STS SCR1 short circuit.')
matReturnFromStsScr1ShortCurcuit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,56)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsScr1ShortCurcuit.setDescription('OBSERVE: Return from STS SCR1 short circuit.')
matStsScr2ShortCurcuit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,57)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsScr2ShortCurcuit.setDescription('CRITICAL: STS SCR2 short circuit.')
matReturnFromStsScr2ShortCurcuit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,58)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsScr2ShortCurcuit.setDescription('OBSERVE: Return from STS SCR2 short circuit.')
matStsFaultMode = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,59)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsFaultMode.setDescription('CRITICAL: STS running in fault mode.')
matReturnFromStsFaultMode = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,60)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsFaultMode.setDescription('OBSERVE: Return from STS running in fault mode.')
matStsFanFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,61)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsFanFault.setDescription('MAJOR: STS fan fault.')
matReturnFromStsFanFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,62)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsFanFault.setDescription('OBSERVE: Return from STS fan fault.')
matStsEEPROMFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,63)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsEEPROMFault.setDescription('MAJOR: STS EEPROM fault.')
matReturnFromStsEEPROMFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,64)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsEEPROMFault.setDescription('OBSERVE: Return from STS EEPROM fault.')
matStsInvFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,65)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsInvFail.setDescription('MAJOR: STS Inverter unavailable.')
matReturnFromStsInvFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,66)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsInvFail.setDescription('OBSERVE: Return from STS Inverter unavailable.')
matStsMainsFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,67)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsMainsFail.setDescription('MAJOR: STS Mains unavailable.')
matReturnFromStsMainFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,68)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsMainFail.setDescription('OBSERVE: Return from STS Mains unavailable.')
matStsOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,69)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsOverLoad.setDescription('MAJOR: STS Output over load.')
matReturnFromStsOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,70)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsOverLoad.setDescription('OBSERVE: Return from STS Output over load.')
matStsOutputShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,71)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsOutputShortCircuit.setDescription('CRITICAL: STS Output short circuit.')
matReturnFromStsOutputShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,72)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsOutputShortCircuit.setDescription('OBSERVE: Return from STS Output short circuit.')
matStsInvBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,73)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsInvBypassMode.setDescription('CRITICAL: STS Inverter bypass mode.')
matReturnFromStsInvBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,74)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsInvBypassMode.setDescription('OBSERVE: Return from STS Inverter bypass mode.')
matStsTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,75)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsTemperatureHigh.setDescription('MAJOR: STS temperature high.')
matReturnFromStsTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,76)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsTemperatureHigh.setDescription('OBSERVE: Return from STS temperature high.')
matStsMBSPosFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,77)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsMBSPosFault.setDescription('CRITICAL: STS MBS in abnormal position.')
matReturnFromStsMBSPosFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,78)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsMBSPosFault.setDescription('OBSERVE: Return from STS MBS in abnormal position.')
matStsControlPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,79)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsControlPowerFail.setDescription('CRITICAL: STS Control power fail.')
matReturnFromStsControlPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,80)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsControlPowerFail.setDescription('OBSERVE: Return from STS Control power fail.')
matStsNotRespond = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,81)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsNotRespond.setDescription('CRITICAL: STS disconnected.')
matReturnFromStsNotRespond = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,82)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsNotRespond.setDescription('OBSERVE: STS connected.')
matStsOutputAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,83)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsOutputAbnormal.setDescription('MAJOR: STS Output abnormal.')
matReturnFromStsOutputAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,84)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsOutputAbnormal.setDescription('OBSERVE: Return from STS Output abnormal.')
matStsMaintenanceBypass = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,85)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matStsMaintenanceBypass.setDescription('MAJOR: STS Maintenance Bypass.')
matReturnFromStsMaintenanceBypass = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,86)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
if mibBuilder.loadTexts: matReturnFromStsMaintenanceBypass.setDescription('OBSERVE: Return from STS Maintenance Bypass.')
matConBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,87)).setObjects(("TELECOM-MIB", "matConSerialNum"))
if mibBuilder.loadTexts: matConBatteryLow.setDescription('CRITICAL: Controller Battery Low.')
matReturnFromConBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,88)).setObjects(("TELECOM-MIB", "matConSerialNum"))
if mibBuilder.loadTexts: matReturnFromConBatteryLow.setDescription('OBSERVE: Return from Controller Battery Low.')
matConTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,89)).setObjects(("TELECOM-MIB", "matConSerialNum"))
if mibBuilder.loadTexts: matConTemperatureHigh.setDescription('CRITICAL: Controller temperature High.')
matReturnFromConTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,90)).setObjects(("TELECOM-MIB", "matConSerialNum"))
if mibBuilder.loadTexts: matReturnFromConTemperatureHigh.setDescription('OBSERVE: Return from Controller temperature High.')
matConEEPROMFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,91)).setObjects(("TELECOM-MIB", "matConSerialNum"))
if mibBuilder.loadTexts: matConEEPROMFault.setDescription('MAJOR: Controller EEPROM fault.')
matReturnFromConEEPROMFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,92)).setObjects(("TELECOM-MIB", "matConSerialNum"))
if mibBuilder.loadTexts: matReturnFromConEEPROMFault.setDescription('OBSERVE: Return from Controller EEPROM fault.')
matConBatteryVoltHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,93)).setObjects(("TELECOM-MIB", "matConSerialNum"))
if mibBuilder.loadTexts: matConBatteryVoltHigh.setDescription('CRITICAL: Controller Battery voltage high.')
matReturnFromConBatteryVoltHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,94)).setObjects(("TELECOM-MIB", "matConSerialNum"))
if mibBuilder.loadTexts: matReturnFromConBatteryVoltHigh.setDescription('OBSERVE: Return from Controller Battery voltage high.')
matConCanBusOff = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,95)).setObjects(("TELECOM-MIB", "matConSerialNum"))
if mibBuilder.loadTexts: matConCanBusOff.setDescription('CRITICAL: Controller CAN bus off.')
matReturnFromConCanBusOff = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,96)).setObjects(("TELECOM-MIB", "matConSerialNum"))
if mibBuilder.loadTexts: matReturnFromConCanBusOff.setDescription('OBSERVE: Return from Controller CAN bus off.')
matConCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,97)).setObjects(("TELECOM-MIB", "matConSerialNum"))
if mibBuilder.loadTexts: matConCommunicationLost.setDescription('CRITICAL: Controller communication lost.')
matReturnFromCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,98)).setObjects(("TELECOM-MIB", "matConSerialNum"))
if mibBuilder.loadTexts: matReturnFromCommunicationLost.setDescription('OBSERVE: Return from Controller communication lost.')
mibBuilder.exportSymbols("TELECOM-MIB", matInvModuleNum=matInvModuleNum, matTraps=matTraps, matInvRunTime=matInvRunTime, matTrapTargetsNum=matTrapTargetsNum, matTrapTargetsTable=matTrapTargetsTable, matReturnFromInvInputAbnormal=matReturnFromInvInputAbnormal, matConEEPROMFault=matConEEPROMFault, matReturnFromInvHardwareError=matReturnFromInvHardwareError, matInvPowerLimit=matInvPowerLimit, matConfStsAcVoltHighLoss=matConfStsAcVoltHighLoss, matConfInvSysPriority=matConfInvSysPriority, matReturnFromInvFault=matReturnFromInvFault, matReturnFromConBatteryLow=matReturnFromConBatteryLow, matStsWarningState=matStsWarningState, matInvLineVoltage=matInvLineVoltage, matInvFanFault=matInvFanFault, matConfInvSysFanSpeed=matConfInvSysFanSpeed, matConfInvSysOutputVolt=matConfInvSysOutputVolt, matConfStsIpvVoltLowLoss=matConfStsIpvVoltLowLoss, matInvPulseFault=matInvPulseFault, matStsBypassUnavailable=matStsBypassUnavailable, matReturnFromStsTemperatureHigh=matReturnFromStsTemperatureHigh, matReturnFromStsScr1ShortCurcuit=matReturnFromStsScr1ShortCurcuit, matReturnFromInvMaintenaceBypass=matReturnFromInvMaintenaceBypass, matDryContactNum=matDryContactNum, matInvBypassSCRShort=matInvBypassSCRShort, matReturnFromInvMBSPosError=matReturnFromInvMBSPosError, matInvHardwareError=matInvHardwareError, matTrapTargetsDesc=matTrapTargetsDesc, matInvWarningState=matInvWarningState, matReturnFromStsFaultMode=matReturnFromStsFaultMode, matInvMBSPosError=matInvMBSPosError, matReturnFromStsMBSPosFault=matReturnFromStsMBSPosFault, matConfInvOutputPower=matConfInvOutputPower, matReturnFromInvOutputShort=matReturnFromInvOutputShort, matConfStsIpvVoltHighLoss=matConfStsIpvVoltHighLoss, matStsOutputShortCircuit=matStsOutputShortCircuit, matStsFanFault=matStsFanFault, matStsMainLowLossVoltage=matStsMainLowLossVoltage, matStsTemperatureHigh=matStsTemperatureHigh, matStsInvInputVoltage=matStsInvInputVoltage, matReturnFromInvPulseFault=matReturnFromInvPulseFault, matStsRunningMode=matStsRunningMode, matInvLowInputShutdown=matInvLowInputShutdown, device=device, matStsInvInputFreq=matStsInvInputFreq, matConfStsPriority=matConfStsPriority, matAgentSoftwareVerison=matAgentSoftwareVerison, matReturnFromInvBusSoftFail=matReturnFromInvBusSoftFail, matDryContactTable=matDryContactTable, matInverter=matInverter, matStsInvLosLossVoltage=matStsInvLosLossVoltage, matInvHardwareVersion=matInvHardwareVersion, matInvSoftStartFail=matInvSoftStartFail, matReturnFromInvNegativePowerProtect=matReturnFromInvNegativePowerProtect, matReturnFromInvMainUnavailable=matReturnFromInvMainUnavailable, NonNegativeInteger=NonNegativeInteger, matStsOutputPower=matStsOutputPower, matReturnFromInvBusVoltUnderLimit=matReturnFromInvBusVoltUnderLimit, matConfInvSysLineVoltLowLoss=matConfInvSysLineVoltLowLoss, matInvBatteryVoltage=matInvBatteryVoltage, matInvBackfeedRelayOpen=matInvBackfeedRelayOpen, matStsControlPowerFail=matStsControlPowerFail, matInvInputAbnormal=matInvInputAbnormal, matTrapType=matTrapType, matConfig=matConfig, matStsInvBypassMode=matStsInvBypassMode, matTrapTargetsIndex=matTrapTargetsIndex, matStsMainInputFreq=matStsMainInputFreq, matStsSerialNum=matStsSerialNum, matConfInvSysOutputFreq=matConfInvSysOutputFreq, matAgent=matAgent, matTrapSeverityLevel=matTrapSeverityLevel, matReturnFromConEEPROMFault=matReturnFromConEEPROMFault, matStsMainHighLossVoltage=matStsMainHighLossVoltage, matReturnFromInvBusVoltOverLimit=matReturnFromInvBusVoltOverLimit, matStsRuntime=matStsRuntime, matInvTempPowerLimit=matInvTempPowerLimit, matReturnFromInvLowInputShutdown=matReturnFromInvLowInputShutdown, matStsMBSPosFault=matStsMBSPosFault, matReturnFromStsControlPowerFail=matReturnFromStsControlPowerFail, matStsTemperature=matStsTemperature, matConfStsAcVoltLowLoss=matConfStsAcVoltLowLoss, matReturnFromStsInvFail=matReturnFromStsInvFail, matInvMainUnavailable=matInvMainUnavailable, matInvMaintenaceBypass=matInvMaintenaceBypass, matReturnFromInvSoftStartFail=matReturnFromInvSoftStartFail, matInvOutputVoltLow=matInvOutputVoltLow, matStsBackfeedRelayOpen=matStsBackfeedRelayOpen, matConfInvSysOutputVoltLowLoss=matConfInvSysOutputVoltLowLoss, matStsOutputCurrent=matStsOutputCurrent, matReturnFromStsInvBypassMode=matReturnFromStsInvBypassMode, matReturnFromStsOutputShortCircuit=matReturnFromStsOutputShortCircuit, matReturnFromStsMaintenanceBypass=matReturnFromStsMaintenanceBypass, matReturnFromInvOverLoad=matReturnFromInvOverLoad, matStsFaultMode=matStsFaultMode, matStsInvHighLossVoltage=matStsInvHighLossVoltage, matReturnFromInvOutputVoltHigh=matReturnFromInvOutputVoltHigh, matStsScr1ShortCurcuit=matStsScr1ShortCurcuit, matConfStsFanSpeed=matConfStsFanSpeed, matReturnFromConTemperatureHigh=matReturnFromConTemperatureHigh, matConTemperature=matConTemperature, matConfInvOutputVoltLowLoss=matConfInvOutputVoltLowLoss, matConBatteryLow=matConBatteryLow, matStsHardwareVersion=matStsHardwareVersion, matStsMaintenanceBypass=matStsMaintenanceBypass, matObjects=matObjects, matDryContactEntry=matDryContactEntry, matReturnFromInvNotRespond=matReturnFromInvNotRespond, matSts=matSts, matReturnFromInvEPOShutdown=matReturnFromInvEPOShutdown, matStsModuleIndex=matStsModuleIndex, matTrapTargetsEntry=matTrapTargetsEntry, matReturnFromInvTemperatureHigh=matReturnFromInvTemperatureHigh, matReturnFromStsFanFault=matReturnFromStsFanFault, ppc=ppc, matDryContactIndex=matDryContactIndex, matStsOutputFreq=matStsOutputFreq, matReturnFromInvBackfeedRelayOpen=matReturnFromInvBackfeedRelayOpen, matDryContactString=matDryContactString, matConfInvSysPowerLimit=matConfInvSysPowerLimit, matInvMbsPosition=matInvMbsPosition, matReturnFromInvBypassSCRShort=matReturnFromInvBypassSCRShort, matStsTable=matStsTable, matReturnFromInvFanFault=matReturnFromInvFanFault, matInvNegativePowerProtect=matInvNegativePowerProtect, matStsStatus=matStsStatus, matReturnFromStsEEPROMFault=matReturnFromStsEEPROMFault, matInvPhaseType=matInvPhaseType, matConfInvInputVoltage=matConfInvInputVoltage, matInvFault=matInvFault, matReturnFromInvEEPROMFault=matReturnFromInvEEPROMFault, matInvTemperatureHigh=matInvTemperatureHigh, matInvOutputShort=matInvOutputShort, matInvOutputVoltage=matInvOutputVoltage, matStsFirmwareVersion=matStsFirmwareVersion, matConTemperatureHigh=matConTemperatureHigh, matConCommunicationLost=matConCommunicationLost, matConSerialNum=matConSerialNum, matInvOutputCurrent=matInvOutputCurrent, matReturnFromStsScr2ShortCurcuit=matReturnFromStsScr2ShortCurcuit, matReturnFromStsMainFail=matReturnFromStsMainFail, matInvOutputPower=matInvOutputPower, matStsNotRespond=matStsNotRespond, matInvEEPROMFault=matInvEEPROMFault, matInvPriority=matInvPriority, matTrapTargetsAddress=matTrapTargetsAddress, matInvOutputVoltHigh=matInvOutputVoltHigh, matReturnFromStsOverLoad=matReturnFromStsOverLoad, matStsModuleNum=matStsModuleNum, matConfInvOutputVoltHighLoss=matConfInvOutputVoltHighLoss, matInvRunMode=matInvRunMode, matConfInvOutputFreq=matConfInvOutputFreq, matConfInvOutputVoltage=matConfInvOutputVoltage, matInvTable=matInvTable, matInvModuleIndex=matInvModuleIndex, matInvBusVoltageOverLimit=matInvBusVoltageOverLimit, matConWarningState=matConWarningState, matStsEntry=matStsEntry, matInvSerialNum=matInvSerialNum, matInvOnOffStatus=matInvOnOffStatus, matStsOutputAbnormal=matStsOutputAbnormal, matReturnFromStsBackfeedRelayOpen=matReturnFromStsBackfeedRelayOpen, matStsOutputVoltage=matStsOutputVoltage, matTrapTargets=matTrapTargets, matConfInvSysInputVolt=matConfInvSysInputVolt, matReturnFromStsOutputAbnormal=matReturnFromStsOutputAbnormal, matStsMbsStatus=matStsMbsStatus, matInvEPOShutdown=matInvEPOShutdown, matStsInvFail=matStsInvFail, matConCanBusOff=matConCanBusOff, matStsMainsFail=matStsMainsFail, matConName=matConName, matInvTemperature=matInvTemperature, matStsOverLoad=matStsOverLoad, matReturnFromCommunicationLost=matReturnFromCommunicationLost, matController=matController, matInvOverLoad=matInvOverLoad, matDryContact=matDryContact, matStsModuleType=matStsModuleType, matStsScr2ShortCurcuit=matStsScr2ShortCurcuit, matTrapTargetsCommunity=matTrapTargetsCommunity, matReturnFromStsBypassUnavailable=matReturnFromStsBypassUnavailable, matInvBusVoltageUnderLimit=matInvBusVoltageUnderLimit, matInvFirmwareVersion=matInvFirmwareVersion, matInvLineFreq=matInvLineFreq, matReturnFromInvOutputVoltLow=matReturnFromInvOutputVoltLow, matInvBusSoftFail=matInvBusSoftFail, matReturnFromStsNotRespond=matReturnFromStsNotRespond, matInvOutputFreq=matInvOutputFreq, matConBatteryVoltHigh=matConBatteryVoltHigh, PositiveInteger=PositiveInteger, matReturnFromInvTempPowerLimit=matReturnFromInvTempPowerLimit, matConfInvSysLineVoltHighLoss=matConfInvSysLineVoltHighLoss, matReturnFromConCanBusOff=matReturnFromConCanBusOff, matConfInvSysOutputVoltHighLoss=matConfInvSysOutputVoltHighLoss, matInvNotRespond=matInvNotRespond, matInvEntry=matInvEntry, matStsEEPROMFault=matStsEEPROMFault, matReturnFromConBatteryVoltHigh=matReturnFromConBatteryVoltHigh, matStsMainInputVoltage=matStsMainInputVoltage)
