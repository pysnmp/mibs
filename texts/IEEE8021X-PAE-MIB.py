#
# PySNMP MIB module IEEE8021X-PAE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/IEEE8021X-PAE-MIB
# Produced by pysmi-1.1.12 at Tue Sep 10 10:26:08 2024
# On host fv-az1432-991 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
SecySCI, = mibBuilder.importSymbols("IEEE8021-SECY-MIB", "SecySCI")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, TimeTicks, iso, ObjectIdentity, MibIdentifier, Unsigned32, Integer32, Counter32, IpAddress, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "TimeTicks", "iso", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Integer32", "Counter32", "IpAddress", "Counter64", "NotificationType")
MacAddress, TextualConvention, TruthValue, DisplayString, RowStatus, TimeInterval, RowPointer, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "TruthValue", "DisplayString", "RowStatus", "TimeInterval", "RowPointer", "TimeStamp")
ieee8021XPaeMIB = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 15))
ieee8021XPaeMIB.setRevisions(('2017-10-28 14:57', '2014-04-10 16:19', '2009-10-01 16:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021XPaeMIB.setRevisionsDescriptions(('Published as part of IEEE 802.1Xck.\n         Minor DESCRIPTION clarifications as required by resolution\n         of maintenance items 154, 155, 157 (see 802.1 maintenance\n         process discussion). Added ieee8021XPaeEapolGroupMAC Address.', 'Update published as part of IEEE 802.1Xbx (Amendment to\n        IEEE 802.1X-2010)', 'Initial version of this MIB module.  Published as part of\n        IEEE P802.1X (Revision of IEEE Standard 802.1X-2009)',))
if mibBuilder.loadTexts: ieee8021XPaeMIB.setLastUpdated('201710281457Z')
if mibBuilder.loadTexts: ieee8021XPaeMIB.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021XPaeMIB.setContactInfo(' WG-URL: http://grouper.ieee802.org/1\n        WG-EMail: stds-802-1-L@ieee.org\n        Contact: IEEE 802.1 Working Group Chair\n        Postal: C/O IEEE 802.1 Working Group\n                IEEE Standards Association\n                445 Hoes Lane\n                P.O. Box 1331\n                Piscataway\n                NJ 08855-1331\n                USA\n                E-mail: STDS-802-1-L@LISTSERV.IEEE.ORG')
if mibBuilder.loadTexts: ieee8021XPaeMIB.setDescription("The MIB module for managing the Port Access Entity (PAE)\n        functions of IEEE 802.1X (Revision of 802.1X-2004).\n        The PAE functions managed are summarized in Figure 12-3 of\n        IEEE 802.1X and include EAPOL PACP support for authentication\n        (EAP Supplicant and/or Authenticator), MACsec Key Agreement\n        (MKA), EAPOL, and transmission and reception of network\n        announcements.\n\n        The following acronyms and definitions are used in this MIB.\n\n        AN : Association Number, a number that is concatenated with a\n            MACsec Secure Channel Identifier to identify a Secure\n            Association (SA).\n\n        Announcer : EAPOL-Announcement transmission functionality.\n\n        Authenticator : An entity that facilitates authentication of\n            other entities attached to the same LAN.\n\n        CA : secure Connectivity Association: A security relationship,\n            established and maintained by key agreement protocols, that\n            comprises a fully connected subset of the service access\n            points in stations attached to a single LAN that are to be\n            supported by MACsec.\n\n        CAK : secure Connectivity Association Key, a secret key\n            possessed by members of a given CA.\n\n        CKN : secure Connectivity Association Key Name (CKN), a text\n            that identifies a CAK.\n\n        Common Port : An instance of the MAC Internal Sublayer Service\n            used by the SecY or PAC to provide transmission and\n            reception of frames for both the Controlled and\n            Uncontrolled Ports.\n\n        Controlled Port : The access point used to provide the secure\n            MAC Service to a client of a PAC or SecY.\n\n        CP state machine : Controlled Port state machine is capable of\n            controlling a SecY or a PAC.  The CP supports\n            interoperability with unauthenticated systems that are not\n            port-based network access control capable, or that lack \n            MKA.  When the access controlled port is supported by a\n            SecY, the CP is capable of controlling the SecY so as to\n            provide unsecured connectivity to systems that implement a\n            PAC.\n\n        EAP : Extensible Authentication Protocol, RFC3748.\n\n        EAPOL : EAP over LANs.\n\n        KaY : Key Agreement Entity, a PAE entity responsible for MKA.\n\n        Key Server : Elected by MKA, to transport a succession of SAKs,\n            for use by MACsec, to the other member(s) of a CA.\n\n        KMD : Key Management Domain, a string identifying systems that\n             share cached CAKs.\n\n        Listener : The role is to receive the network announcement\n            parameters in the authentication process.\n\n        Logon Process : The Logon Process is responsible for the\n            managing the use of authentication credentials, for\n            initiating use of the PAE's Supplicant and or Authenticator\n            functionality, for deriving CAK, CKN tuples from PAE\n            results, for maintaining PSKs (Pre-Sharing Keys), and for\n            managing MKA instances.  In the absence of successful\n            authentication, key agreement, or support for MAC Security,\n            the Logon Process determines whether the CP state machine\n            should provide unauthenticated connectivity or\n            authenticated but unsecured connectivity.\n\n        MKA : MACsec Key Agreement protocol allows PAEs, each\n            associated with a port that is an authenticated member of a\n            secure connectivity association (CA) or a potential CA, to\n            discover other PAEs attached to the same LAN, to confirm\n            mutual possession of a CAK and hence to prove a past mutual\n            authentication, to agree the secret keys (SAKs) used by\n            MACsec for symmetric shared key cryptography, and to ensure\n            that the data protected by MACsec has not been delayed.\n\n        MKPDU : MACsec Key Agreement Protocol Data Unit.\n\n        MPDU : MAC Protocol Data Unit.\n\n        NID : Network Identity, a UTF-8 string identifying an network\n             or network service.\n\n        PAE : Port Access Entity, the protocol entity associated with a\n             Port.  It can support the protocol functionality\n             associated with the Authenticator, the Supplicant, or\n             both.\n\n        PAC : Port Access Controller, a protocol-less shim that\n             provides control over frame transmission and reception by\n             clients attached to its Controlled Port, and uses the MAC\n             Service provided by a Common Port.  The access control\n             decision is made by the PAE, typically taking into\n             account the success or failure of mutual authentication\n             and authorization of the PAE's peer(s), and is\n             communicated by the PAE using the LMI to set the PAC's\n             Controlled Port enabled/disable.  Two different interfaces\n             'Controlled Port' and 'Uncontrolled Port', are associated\n             with a PAC, and that for each instance of a PAC, two\n             ifTable rows (one for each interface) run on top of an\n             ifTable row representing the 'Common Port' interface,\n             such as a row with ifType = 'ethernetCsmacd(6)'.\n\n             For example :\n            -----------------------------------------------------------\n            |                            |                            |\n            |   Controlled Port          |   Uncontrolled Port        |\n            |      Interface             |      Interface             |\n            |    (ifEntry = j)           |     (ifEntry = k)          |\n            | (ifType =                  | (ifType =                  |\n            |  macSecControlledIF(231))  |  macSecUncontrolledIF(232))|\n            |                            |                            |\n            |---------------------------------------------------------|\n            |                                                         |\n            |                    Physical Interface                   |\n            |                      (ifEntry = i)                      |\n            |                (ifType = ethernetCsmacd(6))             |\n            |_________________________________________________________|\n                        i, j, k are ifIndex to indicate\n                       an interface stack in the ifTable.\n                        Figure : PAC Interface Stack\n\n             The 'Controlled Port' is the service point to provide one\n             instance of the secure MAC service in a PAC.  The\n             'Uncontrolled Port' is the service point to provide one\n             instance of the insecure MAC service in a PAC.\n\n        PACP : Port Access Controller Protocol.\n\n        Port Identifier : A 16-bit identifier that uniquely identifies each of\n        \ta system's transmit SCs that uses the same MAC address as a\n        \tcomponent of its SCI.\n\n        Real Port : Indicates the PAE is for a real port.  A port that\n            is not created on demand by the mechanisms specified in\n            this standard, but that can transmit and receive frames for\n            one or more virtual ports.\n\n        SC : Secure Channel, a security relationship used to provide\n            security guarantees for frames transmitted from one member\n            of a CA to the others.  An SC is supported by a sequence of\n            SAs thus allowing the periodic use of fresh keys without\n            terminating the relationship.\n\n        SA : Secure Association, a security relationship that provides\n            security guarantees for frames transmitted from one member\n            of a CA to the others. Each SA is supported by a single\n            secret key, or a single set of keys where the cryptographic\n            operations used to protect one frame require more than one\n            key. \n\n        SAK : Secure Association key, the secret key used by an SA.\n\n        SCI : Secure Channel Identifier, a unique identifier for a secure \n        \tchannel, comprising a MAC Address and a Port Identifier.\n\n        secured connectivity : Data transfer between two or 'Controlled\n            Ports' that is protected by MACsec.\n\n        SecY : MAC Security Entity, the entity that operates the MAC\n            Security protocol within a system.\n\n        Supplicant : An entity at one end of a point-to-point LAN\n            segment that seeks to be authenticated by an Authenticator\n            attached to the other end of that link.\n            \n        Suspension: Temporary suspension of MKA operation to facilitate\n            in-service control plane software upgrades without\n            disrupting existing secure connectivity.\n\n        Uncontrolled Port : The access point used to provide the\n            insecure MAC Service to a client of a SecY or PAC.\n\n        Virtual Port : Indicates the PAE is for a virtual port.  A MAC\n            Service or Internal Sublayer service access point that is\n            created on demand.  Virtual ports can be used to provide\n            separate secure connectivity associations over the same\n            LAN.")
class Ieee8021XPaeCKN(TextualConvention, OctetString):
    reference = 'IEEE 802.1X Clause 5.4, Clause 9.3.1, Clause 6.2'
    description = 'This textual convention indicates the CAK name to identify\n        the Connectivity Association Key (CAK) which is the root key\n        in the MACsec Key Agreement key hierarchy.  All potential\n        members of the CA use the same CKN.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 16)

class Ieee8021XPaeCKNOrNull(TextualConvention, OctetString):
    reference = 'IEEE 802.1X Clause 5.4, Clause 9.3.1, Clause 6.2'
    description = 'This textual convention indicates the CAK name to identify\n        the Connectivity Association Key (CAK) which is the root key\n        in the MACsec Key Agreement key hierarchy.  All potential\n        members of the CA use the same CKN.\n\n        If this is a zero length value, then the NULL string means\n        CKN information is applicable.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class Ieee8021XPaeKMD(TextualConvention, OctetString):
    reference = 'IEEE 802.1X Clause 12.6'
    description = "This textual convention indicates a Key Management Domain\n        (KMD).\n\n        KMD is a string of UTF-8 characters that names the transmitting\n        authenticator's key management domain."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 253)

class Ieee8021XPaeNID(TextualConvention, OctetString):
    reference = 'IEEE 802.1X Clause 12.6, Clause 10.1'
    description = 'This textual convention indicates a Network Identifier (NID).\n\n        Each network is identified by a NID, a UTF-8 string used by\n        network attached systems to select a network profile.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 100)

class Ieee8021XPaeNIDOrNull(TextualConvention, OctetString):
    reference = 'IEEE 802.1X Clause 12.6, Clause 10.1'
    description = 'This textual convention indicates a Network Identifier (NID).\n\n        Each network is identified by a NID, a UTF-8 string used by\n        network attached systems to select a network profile.\n\n        If this is a zero length value, then the NULL string for\n        NID information is applicable.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 100)

class Ieee8021XMkaKeyServerPriority(TextualConvention, OctetString):
    reference = 'IEEE 802.1X Clause 9.5, Table 9-2'
    description = "This textual convention indicates a Key Server priority\n        information.\n\n        Each MKA participant encodes a Key Server Priority, an 8-bit\n        integer, in each MKPDU.  Each participant selects the live\n        participant advertising the highest priority as its Key Server\n        provided that participant has not selected another as its Key\n        Server or is unwilling to act as the Key Server.  If a Key\n        Server cannot be selected SAKs are not distributed.  In the\n        event of a tie for highest priority Key Server, the member with\n        the highest priority SCI is chosen.  For consistency with other\n        uses of the SCI's MAC Address component as a priority,\n        numerically lower values of the Key Server Priority and SCI are\n        accorded the highest priority.  The Table 9-2 contains\n        recommendations for the use of priority values for various\n        system roles. Participants that will never act as a Key Server\n        should advertise priority 0xFF."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 1)
    fixedLength = 1

class Ieee8021XMkaMI(TextualConvention, OctetString):
    reference = 'IEEE 802.1X Clause 9.4.2'
    description = 'This textual convention indicates a Member Identifier (MI).\n\n        The MI is a 96-bit random value chosen when the MKA Instance\n        begins, used with a 32-bit MN to protect against replay attacks\n        and to record liveliness in the Live Peer List or potential\n        liveliness in the Potential Peer List. If the MN wraps, a new\n        random MI value is chosen and the MN begins again at 1.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(12, 12)
    fixedLength = 12

class Ieee8021XMkaMN(TextualConvention, Unsigned32):
    reference = 'IEEE 802.1X Clause 9.4.2'
    description = 'This textual convention indicates a Member Number (MN).\n\n        The MN is a 32-bit value which begins at 1 and increases for\n        each MKPDU transmitted.  It is used with the MI to protect\n        against replay attacks and to record liveliness in the Live\n        Peers List or potential liveliness in the Potential Peer List.\n        If the MN wraps, a new random MI value is chosen and the MN\n        begins again at a value of 1.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2147483648)

class Ieee8021XMkaKN(TextualConvention, Unsigned32):
    reference = 'IEEE 802.1X Clause 9.8'
    description = 'This textual convention indicates a Key Number (KN) used in\n        MKA.\n\n        The MN is a 32-bit integer assigned by that Key Server\n        (sequentially, beginning with 1).'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2147483648)

class Ieee8021XPaeNIDCapabilites(TextualConvention, Bits):
    reference = 'IEEE 802.1X Clause 10.1, Table 11-8'
    description = 'This textual convention indicates the combinations of\n        authentication and protection capabilities supported for a\n        NID. Any set of these combinations can be supported.'
    status = 'current'
    namedValues = NamedValues(("eap", 0), ("eapMka", 1), ("eapMkaMacSec", 2), ("mka", 3), ("mkaMacSec", 4), ("higherLayer", 5), ("higherLayerFallback", 6), ("vendorSpecific", 7))

class Ieee8021XPaeNIDAccessStatus(TextualConvention, Integer32):
    reference = 'IEEE 802.1X Clause 10.1, Table 11-8'
    description = "This textual convention indicates the transmitter's\n        Controlled Port operational status and current level of\n        access resulting from authentication and the consequent\n        authorization controls applied by that port's clients.\n\n        'noAccess' : Other than to authentication services, and to\n            services announced as available in the absence of\n            authentication (unauthenticated).\n\n        'remedialAccess' : The access granted is severely limited,\n            possibly to remedial services.\n\n        'restrictedAccess' : The Controlled Port is operational, but\n            restrictions have been applied by the network that can\n            limit access to some resources.\n\n        'expectedAccess' : The Controlled Port is operational, and\n            access provided is as expected for successful\n            authentication and authorization for the NID."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("noAccess", 0), ("remedialAccess", 1), ("restrictedAccess", 2), ("expectedAccess", 3))

class Ieee8021XPaeNIDUnauthenticatedStatus(TextualConvention, Integer32):
    reference = 'IEEE 802.1X Clause 10.1, Table 11-8'
    description = "This textual convention indicates the access capabilities of\n        the port's clients without authentication.\n\n        'noAccess' : Other than to authentication services (see\n            Ieee8021XPaeNIDCapabilites information.\n\n        'fallbackAccess' : Limited access can be provided after\n            authentication failure.\n\n        'limitedAccess' : Immediate limited access is available\n            without authentication.\n\n        'openAccess' : Immediate access is available without\n            authentication."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("noAccess", 0), ("fallbackAccess", 1), ("limitedAccess", 2), ("openAccess", 3))

ieee8021XPaeMIBNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 15, 0))
ieee8021XPaeMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 15, 1))
ieee8021XPaeMIBConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 15, 2))
ieee8021XPaeSystem = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 15, 1, 1))
ieee8021XPaeLogon = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 15, 1, 2))
ieee8021XPaeAuthenticator = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 15, 1, 3))
ieee8021XPaeSupplicant = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 15, 1, 4))
ieee8021XPaeEapol = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 15, 1, 5))
ieee8021XPaeKaY = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 15, 1, 6))
ieee8021XPaeNetworkIdentifier = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 15, 1, 7))
ieee8021XPaeSysAccessControl = MibScalar((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XPaeSysAccessControl.setReference('IEEE 802.1X Clause 12.9.1, Figure 12-3 PAE\n            System.systemAccessControl')
if mibBuilder.loadTexts: ieee8021XPaeSysAccessControl.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeSysAccessControl.setDescription("This object enables or disables port-based network access\n        control for all the system's ports.  Setting this control\n        object to 'false' causes the following actions :\n            . Deletes any virtual ports previously instantiated.\n            . Terminates authentication exchanges and MKA instances'\n              operation.\n            . Each real port PAE behaves as if no virtual ports\n              created.\n            . All the PAEs' Supplicant, Authenticator, and KaY are\n              disabled.\n            . Logon Process(es) behave as if the object\n              ieee8021XNidUnauthAllowed was 'immediate'.\n            . Announcements can be transmitted, both periodically and\n              in response to announcement requests (conveyed by\n              EAPOL-Starts or EAPOL-Announcement-Reqs) but are sent\n              with a single NULL NID.\n            . Objects announcementAccessStatus and announceAccessStatus\n              have the 'noAccess' value, announcementAccessRequested is\n              'false', object announcementUnauthAccess has the\n              'openAccess' value.\n\n        The control variable settings for each real port PAE in the\n        ieee8021XPaePortTable are unaffected, and will be used once the\n        object is set to 'true'.\n\n        This configured value for this object shall be stored in\n        persistent memory and remain unchanged across a\n        re-initialization of the management system of the entity.")
ieee8021XPaeSysAnnouncements = MibScalar((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XPaeSysAnnouncements.setReference('IEEE 802.1X Clause 12.9.1, Figure 12-3 PAE\n             System.systemAnnouncements')
if mibBuilder.loadTexts: ieee8021XPaeSysAnnouncements.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeSysAnnouncements.setDescription("Setting this control object to 'false' causes each PAE in this\n        system to behave as if the PAE's Announcement functionality is \n        disabled.  The independent controls for each PAE apply if\n        this object is 'true'.\n\n        This configured value for this object shall be stored in\n        persistent memory and remain unchanged across a\n        re-initialization of the management system of the entity.")
ieee8021XPaeSysEapolVersion = MibScalar((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaeSysEapolVersion.setReference('IEEE 802.1X Clause 12.9.1, Clause 11.3, Figure 12-3 PAE\n             System.eapolProtocolVersion')
if mibBuilder.loadTexts: ieee8021XPaeSysEapolVersion.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeSysEapolVersion.setDescription('The EAPOL protocol version for this system.')
ieee8021XPaeSysMkaVersion = MibScalar((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaeSysMkaVersion.setReference('IEEE 802.1X Clause 12.9.1')
if mibBuilder.loadTexts: ieee8021XPaeSysMkaVersion.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeSysMkaVersion.setDescription('The MKA protocol version for this system.')
ieee8021XPaePortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5), )
if mibBuilder.loadTexts: ieee8021XPaePortTable.setReference('802.1X Clause 12.9.2, Figure 12-3 PAE')
if mibBuilder.loadTexts: ieee8021XPaePortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortTable.setDescription('A table of system level information for each port supported by\n        the Port Access Entity.  An entry appears in this table for\n        each port of this system.\n\n        For the writeable objects in this table, the configured value\n        shall be stored in persistent memory and remain unchanged\n        across a re-initialization of the management system of the\n        entity.')
ieee8021XPaePortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1), ).setIndexNames((0, "IEEE8021X-PAE-MIB", "ieee8021XPaePortNumber"))
if mibBuilder.loadTexts: ieee8021XPaePortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortEntry.setDescription("The Port number, protocol version, and\n        initialization control for a Port.\n\n         If the PAE has been dynamically instantiated to support an\n         existing or potential virtual port, the Uncontrolled Port\n         interface and Controlled Port interface are allocated by the\n         real port's PAE.")
ieee8021XPaePortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021XPaePortNumber.setReference('802.1X Clause 12.9.2, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortNumber.setDescription("An interface index indicates the port number associated with\n        this port.  Each PAE is uniquely identified by a port number.\n        The port number used is unique amongst all port numbers for\n        the system, and directly or indirectly identifies the\n        Uncontrolled Port that supports the PAE.\n\n        If the PAE indicates a real port, ieee8021XPaePortType object\n        in the same row is 'realPort', the port number shall be the\n        same as the ieee8021XPaeCommonPortNumber object in the same row\n        for the associated PAC or SecY.\n\n        If the PAE indicates a virtual port, ieee8021XPaePortType\n        object in the same row is 'virtualPort', this port number\n        should be the same as the uncontrolledPortNumber object in the\n        same row for the associated PAC or SecY.")
ieee8021XPaePortType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("realPort", 1), ("virtualPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortType.setReference('802.1X Clause 12.9.2, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortType.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortType.setDescription('The port type of the PAE.\n\n        realPort(1) : indicates the PAE is for a real port.\n\n        virtualPort(2) : indicates the PAE is for a virtual port.')
ieee8021XPaeControlledPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaeControlledPortNumber.setReference('802.1X Clause 12.9.2, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaeControlledPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeControlledPortNumber.setDescription("An interface index indicates the port number associated with\n        PAC or SecY's Controlled Port.")
ieee8021XPaeUncontrolledPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaeUncontrolledPortNumber.setReference('802.1X Clause 12.9.2, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaeUncontrolledPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeUncontrolledPortNumber.setDescription("An interface index indicates the port number associated with\n        PAC or SecY's Uncontrolled Port.  If the PAE supports a\n        real port, this port number can be the same as the\n        ieee8021XPaeCommonPortNumber object in the same row, otherwise\n        it shall not be the same.")
ieee8021XPaeCommonPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaeCommonPortNumber.setReference('802.1X Clause 12.9.2, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaeCommonPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeCommonPortNumber.setDescription("An interface index indicates the port number associated with\n        PAC or SecY's 'Common Port'.  All the virtual ports created\n        for a given real port share the same 'Common Port' and\n        ieee8021XPaeCommonPortNumber in the same row.")
ieee8021XPaePortInitialize = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XPaePortInitialize.setReference('802.1X Clause 12.9.3, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortInitialize.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortInitialize.setDescription("The initialization control for this Port. Setting this object\n        'true' causes the Port to be reinitialized, terminating (and\n        potentially restarting) authentication exchanges and MKA\n        operation.\n\n        If the port is a real port, any virtual ports previously\n        instantiated are deleted.  Virtual ports can be reinstantiated\n        through normal protocol operation.\n\n        The object value reverts to 'false' once initialization\n        has completed.")
ieee8021XPaePortCapabilities = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 7), Bits().clone(namedValues=NamedValues(("suppImplemented", 0), ("authImplemented", 1), ("mkaImplemented", 2), ("macsecImplemented", 3), ("announcementsImplemented", 4), ("listenerImplemented", 5), ("virtualPortsImplemented", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortCapabilities.setReference('802.1X Clause 12.9.2, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortCapabilities.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortCapabilities.setDescription("The capabilities of this PAE port.\n\n        'suppImplemented' : A PACP EAP supplicant functions are\n            implemented in this PAE if this bit is on.\n\n        'authImplemented' : A PACP EAP authenticator functions are\n            implemented in this PAE if this bit is on.\n\n        'mkaImplemented' : The KaY MKA functions are implemented\n            in this PAE if this bit is on.\n\n        'macsecImplemented' : The MACsec functions in the\n            Controlled Port are implemented in this PAE if this\n            bit is on.\n\n        'announcementsImplemented' : The EAPOL announcement can be\n            sent in this PAE if this bit is on.\n\n        'listenerImplemented' : This PAE can receive EAPOL announcement\n            if this bit is on.\n\n        'virtualPortsImplemented' : Virtual Port functions are\n            implemented in this PAE if this bit is on.")
ieee8021XPaePortVirtualPortsEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XPaePortVirtualPortsEnable.setReference('802.1X Clause 12.8.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortVirtualPortsEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortVirtualPortsEnable.setDescription("Enable or disable to Virtual Ports function for this Real Port\n        PAE, the object ieee8021XPaePortType in the same row has the\n        value 'realPort'.  If this PAE is not a Real Port, this object\n        should be read only and returns 'false'.\n\n        This object will be read only and returns 'false' if the value\n        of the object ieee8021XPaePortCapabilities in the same row has\n        the bit 'virtualPortsImplemented' off.")
ieee8021XPaePortMaxVirtualPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortMaxVirtualPorts.setReference('802.1X Clause 12.9.2, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortMaxVirtualPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortMaxVirtualPorts.setDescription('The maximum number of virtual ports can be supported in this\n        port.')
ieee8021XPaePortCurrentVirtualPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortCurrentVirtualPorts.setReference('802.1X Clause 12.9.2, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortCurrentVirtualPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortCurrentVirtualPorts.setDescription('The current number of virtual ports is running in this port.')
ieee8021XPaePortVirtualPortStart = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortVirtualPortStart.setReference('802.1X Clause 12.7, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortVirtualPortStart.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortVirtualPortStart.setDescription("This object will be 'true' if the virtual port is created by\n        receipt of an EAPOL-Start packet.")
ieee8021XPaePortVirtualPortPeerMAC = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortVirtualPortPeerMAC.setReference('802.1X Clause 12.7, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortVirtualPortPeerMAC.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortVirtualPortPeerMAC.setDescription("The source MAC address of the received EAPOL-Start if\n        ieee8021XPaePortVirtualPortStart is set 'true'.\n\n        If ieee8021XPaePortVirtualPortStart is not 'true' in the same\n        row, the value of this object should be 00-00-00-00-00-00.")
ieee8021XPaePortLogonEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XPaePortLogonEnable.setReference('802.1X Clause 12.5, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortLogonEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortLogonEnable.setDescription('Enable or disable to transmit network announcement\n        information.')
ieee8021XPaePortAuthenticatorEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortAuthenticatorEnable.setReference("802.1X Clause 8.4 'enabled', Figure 12-3")
if mibBuilder.loadTexts: ieee8021XPaePortAuthenticatorEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortAuthenticatorEnable.setDescription("True if the Authenticator is enabled.\n\n        This object is read only. It returns 'false' if the value\n        of the object ieee8021XPaePortCapabilities in the same row has\n        the bit 'authImplemented' Off, or if the local control variable\n        'enable' has not been set by the Logon Process.")
ieee8021XPaePortSupplicantEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortSupplicantEnable.setReference("802.1X Clause 8.4 'enabled', Figure 12-3")
if mibBuilder.loadTexts: ieee8021XPaePortSupplicantEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortSupplicantEnable.setDescription("True if the Suppplicant is enabled.\n        \n        This object is read only. It returns 'false' if the PAE lacks \n        supplicant functionality (ieee8021XPaePortCapabilities in the \n        same row has the bit 'suppImplemented' off), or if the local \n        control variable'enable' has not been set by the Logon Process \n        (perhaps because the supplicant is designed to authenticate a \n        human user and that user is not present).")
ieee8021XPaePortKayMkaEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XPaePortKayMkaEnable.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortKayMkaEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortKayMkaEnable.setDescription("Enable or disable the MKA protocol function in this PAE.\n\n        This object will be read only and returns 'false' if the value\n        of the object ieee8021XPaePortCapabilities in the same row has\n        the bit 'mkaImplemented' off.")
ieee8021XPaePortAnnouncerEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XPaePortAnnouncerEnable.setReference('802.1X Clause 10.4, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortAnnouncerEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortAnnouncerEnable.setDescription("Enable or disable the network Announcer function in this PAE.\n\n        This object will be read only and returns 'false' if the value\n        of the object ieee8021XPaePortCapabilities in the same row has\n        the bit 'announcementsImplemented' off.")
ieee8021XPaePortListenerEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XPaePortListenerEnable.setReference('802.1X Clause 10.4, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortListenerEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortListenerEnable.setDescription("Enable or disable the network Listener function in this PAE.\n\n        This object will be read only and returns 'false' if the value\n        of the object ieee8021XPaePortCapabilities in the same row has\n        the bit 'listenerImplemented' off.")
ieee8021XPaeEapolGroupMAC = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 5, 1, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaeEapolGroupMAC.setReference('802.1X Clause 12.9, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaeEapolGroupMAC.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeEapolGroupMAC.setDescription('The destination Group MAC Address used by this PAE when\n        transmitting EAPOL frames.')
ieee8021XPacPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 6), )
if mibBuilder.loadTexts: ieee8021XPacPortTable.setReference('IEEE 802.1X Clause 6.4, Clause 14')
if mibBuilder.loadTexts: ieee8021XPacPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPacPortTable.setDescription("A table of system level information for each interface\n        supported by PAC.\n\n        This table will be instantiated if the value of the object\n        ieee8021XPaePortCapabilities in the corresponding entry of the\n        ieee8021XPaePortTable has the bit 'macsecImplemented' off.\n\n        For the writeable objects in this table, the configured value\n        shall be stored in persistent memory and remain unchanged\n        across a re-initialization of the management system of the\n        entity.")
ieee8021XPacPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 6, 1), ).setIndexNames((0, "IEEE8021X-PAE-MIB", "ieee8021XPacPortControlledPortNumber"))
if mibBuilder.loadTexts: ieee8021XPacPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPacPortEntry.setDescription('An entry containing PAC management information applicable to\n        a particular interface.')
ieee8021XPacPortControlledPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021XPacPortControlledPortNumber.setReference('IEEE 802.1X Clause 6.4')
if mibBuilder.loadTexts: ieee8021XPacPortControlledPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPacPortControlledPortNumber.setDescription("The index to identify the 'Controlled Port' interface for a PAC.")
ieee8021XPacPortAdminPt2PtMAC = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceTrue", 1), ("forceFalse", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XPacPortAdminPt2PtMAC.setReference('IEEE 802.1X Clause 6.4')
if mibBuilder.loadTexts: ieee8021XPacPortAdminPt2PtMAC.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPacPortAdminPt2PtMAC.setDescription("An object to control the service connectivity to at most one\n        other system.  The ieee8021XPacPortOperPt2PtMAC indicates\n        operational status of the service connectivity for this PAC.\n\n        'forceTrue' : allows only one service connection to the\n                       other system.\n\n        'forceFalse' : no restriction on the number of service\n                        connections to the other systems.\n\n        'auto' : means the service connectivity is determined by the\n                  service providing entity.")
ieee8021XPacPortOperPt2PtMAC = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 1, 6, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPacPortOperPt2PtMAC.setReference('IEEE 802.1X Clause 6.4')
if mibBuilder.loadTexts: ieee8021XPacPortOperPt2PtMAC.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPacPortOperPt2PtMAC.setDescription("An object to reflect the current service connectivity status.\n\n        'true' : means the service connectivity of this PAC\n             Controlled Port provides at most one other system.\n\n        'false' : means the service connectivity of this PAC could\n             provide more than one other system.")
ieee8021XPaePortLogonTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 1), )
if mibBuilder.loadTexts: ieee8021XPaePortLogonTable.setReference('802.1X Clause 12.5, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortLogonTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortLogonTable.setDescription("A table of system level information for each port to support\n        the Logon Process(es) status information.\n\n        This table will be instantiated if the object\n        ieee8021XPaePortLogonEnable in the corresponding entry of the\n        ieee8021XPaePortTable is 'true'.")
ieee8021XPaePortLogonEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 1, 1), ).setIndexNames((0, "IEEE8021X-PAE-MIB", "ieee8021XPaePortNumber"))
if mibBuilder.loadTexts: ieee8021XPaePortLogonEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortLogonEntry.setDescription('An entry contains Logon Process status information for the\n        PAE.')
ieee8021XPaePortLogonConnectStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pending", 1), ("unauthenticated", 2), ("authenticated", 3), ("secure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortLogonConnectStatus.setReference('802.1X Clause 12.3, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortLogonConnectStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortLogonConnectStatus.setDescription("The Logon Process sets this variable to one of the following\n        values, to indicate to the CP state machine if, and how,\n        connectivity is to be provided through the Controlled Port :\n\n        'pending' : Prevent connectivity by disabling the\n            Controlled Port of this PAE.\n\n        'unauthenticated' : Provide unsecured connectivity, enabling\n            the Controlled Port of this PAE.\n\n        'authenticated' : Provide unsecured connectivity but with\n            authentication, enabling Controlled Port of this PAE.\n\n        'secure' : Provide secure connectivity, using SAKs provided by\n            the KaY (when available) and enabling Controlled Port when\n            those keys are installed and in use.")
ieee8021XPaePortPortValid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortPortValid.setReference('802.1X Clause 12.3, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortPortValid.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortPortValid.setDescription("This object will be set 'true' if Controlled Port communication\n        is secured as specified by the MACsec.")
ieee8021XPaePortSessionTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 2), )
if mibBuilder.loadTexts: ieee8021XPaePortSessionTable.setReference('802.1X Clause 12.5.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortSessionTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortSessionTable.setDescription("A table of system level information for each port to support\n        Logon Process(es) session information.  This table maintains\n        session statistics for its associated Controlled Port,\n        suitable for communication to a RADIUS or other AAA server at\n        the end of a session for accounting purpose.\n\n        This table will be instantiated if the object\n        ieee8021XPaePortLogonEnable in the corresponding entry of the\n        ieee8021XPaePortTable is 'true'.")
ieee8021XPaePortSessionEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 2, 1), ).setIndexNames((0, "IEEE8021X-PAE-MIB", "ieee8021XPaeSessionControlledPortNumber"))
if mibBuilder.loadTexts: ieee8021XPaePortSessionEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortSessionEntry.setDescription("An entry contains Logon Process session information for the\n        PAE.  A session, an entry, begins when the operation of\n        Controlled Port becomes 'true' and ends when it becomes\n        'false'.\n\n        The counts of frames and octets can be derived from those\n        maintained to support from Interface MIB counters for the\n        SecY's or the PAC's Controlled Port, but differs in that the\n        counts are zeroed when the session begins.")
ieee8021XPaeSessionControlledPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021XPaeSessionControlledPortNumber.setReference('802.1X Clause 12.5.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaeSessionControlledPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeSessionControlledPortNumber.setDescription("The index to identify the 'Controlled Port' interface's session\n        information for a PAE.")
ieee8021XPaePortSessionOctetsRx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 2, 1, 2), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortSessionOctetsRx.setReference('802.1X Clause 12.5.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortSessionOctetsRx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortSessionOctetsRx.setDescription('The number of octets received in this session of this PAE.\n\n        Discontinuities in the value of this counter can occur at\n        re-initialization of the management system, and at\n        other times as indicated by the value of\n        ieee8021XPaePortSessionStartTime.')
ieee8021XPaePortSessionOctetsTx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 2, 1, 3), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortSessionOctetsTx.setReference('802.1X Clause 12.5.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortSessionOctetsTx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortSessionOctetsTx.setDescription('The number of octets transmitted in this session of this PAE.\n\n        Discontinuities in the value of this counter can occur at\n        re-initialization of the management system, and at\n        other times as indicated by the value of\n        ieee8021XPaePortSessionStartTime.')
ieee8021XPaePortSessionPktsRx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 2, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortSessionPktsRx.setReference('802.1X Clause 12.5.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortSessionPktsRx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortSessionPktsRx.setDescription('The number of packets received in this session of this PAE.\n\n        Discontinuities in the value of this counter can occur at\n        re-initialization of the management system, and at\n        other times as indicated by the value of\n        ieee8021XPaePortSessionStartTime.')
ieee8021XPaePortSessionPktsTx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 2, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortSessionPktsTx.setReference('802.1X Clause 12.5.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortSessionPktsTx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortSessionPktsTx.setDescription('The number of packets transmitted in this session of this PAE.\n\n        Discontinuities in the value of this counter can occur at\n        re-initialization of the management system, and at\n        other times as indicated by the value of\n        ieee8021XPaePortSessionStartTime.')
ieee8021XPaePortSessionId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 2, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(3, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortSessionId.setReference('802.1X Clause 12.5.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortSessionId.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortSessionId.setDescription("The session identifier for this session of the PAE.  A UTF-8\n        string, uniquely identifying the session within the context of\n        the PAE's system.")
ieee8021XPaePortSessionStartTime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortSessionStartTime.setReference('802.1X Clause 12.5.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortSessionStartTime.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortSessionStartTime.setDescription('The starting time of this session.')
ieee8021XPaePortSessionIntervalTime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 2, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortSessionIntervalTime.setReference('802.1X Clause 12.5.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortSessionIntervalTime.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortSessionIntervalTime.setDescription('The duration time of the session has been last.')
ieee8021XPaePortSessionTerminate = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("macOperFailed", 1), ("sysAccessDisableOrPortInit", 2), ("receiveEapolLogOff", 3), ("eapReauthFailure", 4), ("mkaFailure", 5), ("newSessionBegin", 6), ("notTerminateYet", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortSessionTerminate.setReference('802.1X Clause 12.5.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortSessionTerminate.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortSessionTerminate.setDescription("The reason for the session termination, one of the following :\n\n        'macOperFailed' : 'Common Port' for this PAE is not\n            operational.\n\n        'sysAccessDisableOrPortInit' : The ieee8021XPaeSysAccessControl\n            object is set to 'false' or initialization process of this\n            PAE is invoked.\n\n        'receiveEapolLogOff' : The PAE has received EAPOL-Logoff\n            frame.\n\n        'eapReauthFailure' : EAP reauthentication has failed.\n\n        'mkaFailure' : MKA failure or other MKA termination.\n\n        'newSessionBegin' : New session beginning.\n\n        'notTerminateYet' : Not Terminated Yet.")
ieee8021XPaePortSessionUserName = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 2, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XPaePortSessionUserName.setReference('802.1X Clause 12.5.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XPaePortSessionUserName.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaePortSessionUserName.setDescription('The session user name for this session in the PAE.  A UTF-8\n        string, representing the identity of the peer Supplicant.\n\n        If no such information, zero length string will return.')
ieee8021XLogonNIDTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 3), )
if mibBuilder.loadTexts: ieee8021XLogonNIDTable.setReference('802.1X Clause 12.5, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XLogonNIDTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XLogonNIDTable.setDescription('The Logon Process may use Network Identities (NIDs) to manage\n        its use of authentication credentials, cached CAKs, and\n        announcements.  This table provides the NID information for\n        Logon Process.\n\n        For the writeable objects in this table, the configured value\n        shall be stored in persistent memory and remain unchanged\n        across a re-initialization of the management system of the\n        entity.')
ieee8021XLogonNIDEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 3, 1), ).setIndexNames((0, "IEEE8021X-PAE-MIB", "ieee8021XPaePortNumber"))
if mibBuilder.loadTexts: ieee8021XLogonNIDEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XLogonNIDEntry.setDescription('An entry provides the NID information for a Logon Process.')
ieee8021XLogonNIDConnectedNID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 3, 1, 1), Ieee8021XPaeNID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XLogonNIDConnectedNID.setReference('802.1X Clause 12.5, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XLogonNIDConnectedNID.setStatus('current')
if mibBuilder.loadTexts: ieee8021XLogonNIDConnectedNID.setDescription('The NID associated with the current connectivity (possibly\n        unauthenticated) provided by the operation of the CP state\n        machine.\n\n        This object can differ from both the ieee8021XLogonNIDSelectedNID and\n        the ieee8021XLogonNIDRequestedNID objects in the same row if\n        authenticated connectivity (either secure or unsecured) has\n        already been established, and EAP authentication and MKA\n        operation for both of the latter have not met the necessary\n        conditions (as specified by the control variables unauthAllowed\n        and unsecureAllowed).')
ieee8021XLogonNIDRequestedNID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 3, 1, 2), Ieee8021XPaeNIDOrNull()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XLogonNIDRequestedNID.setReference('802.1X Clause 12.5, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XLogonNIDRequestedNID.setStatus('current')
if mibBuilder.loadTexts: ieee8021XLogonNIDRequestedNID.setDescription("The NID marked as access requested in announcements, as\n        determined from EAPOL-Start frames.  The default of this object\n        is as the configured value of object ieee8021XLogonNIDSelectedNID.\n\n        This object information provides context for the PAE's EAP\n        Authenticator.  If no EAPOL-Start frame has been received since\n        the PAE's 'Common Port' became operational, or the last\n        EAPOL-Start frame received for the port did not contain a\n        requested NID, the object will take on the value of the object\n        ieee8021XLogonNIDSelectedNID in the same row.")
ieee8021XLogonNIDSelectedNID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 2, 3, 1, 3), Ieee8021XPaeNIDOrNull()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XLogonNIDSelectedNID.setReference('802.1X Clause 12.5, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XLogonNIDSelectedNID.setStatus('current')
if mibBuilder.loadTexts: ieee8021XLogonNIDSelectedNID.setDescription("The NID currently configured for use by an access 'Controlled\n        Port' when transmitting EAPOL-Start frames.  The default of\n        this object is empty string.\n\n        This object may be either explicitly configured by management\n        or determined by the PAE using NID selection algorithms.  If no\n        authentication is in progress, and the current connectivity is\n        terminated and then starts again, ieee8021XLogonNIDConnectedNID will\n        take on the value of ieee8021XLogonNIDRequestedNID (though a PAE\n        NID's election algorithm, if used, can subsequently select\n        another NID).")
ieee8021XAuthenticatorTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 3, 1), )
if mibBuilder.loadTexts: ieee8021XAuthenticatorTable.setReference('802.1X Clause 8, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAuthenticatorTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAuthenticatorTable.setDescription("A table that contains the configuration objects for the\n        Authenticator PAE associated with each port.  This table will\n        be instantiated if the object ieee8021XPaePortAuthenticatorEnable in\n        the corresponding entry of the ieee8021XPaePortTable is 'true'.\n\n        For the writeable objects in this table, the configured value\n        shall be stored in persistent memory and remain unchanged\n        across a re-initialization of the management system of the\n        entity.")
ieee8021XAuthenticatorEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 3, 1, 1), ).setIndexNames((0, "IEEE8021X-PAE-MIB", "ieee8021XPaePortNumber"))
if mibBuilder.loadTexts: ieee8021XAuthenticatorEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAuthenticatorEntry.setDescription('An entry that contains the Authenticator configuration objects\n        for the PAE.')
ieee8021XAuthPaeAuthenticate = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XAuthPaeAuthenticate.setReference('IEEE 802.1X Clause 8, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAuthPaeAuthenticate.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAuthPaeAuthenticate.setDescription("This object will be set 'true' by the PAE authenticator to\n        request authentication, and if this object is 'true',\n        reauthentication is allowed.\n\n        This object will be 'false' while the PAE authenticator revokes\n        authentication.")
ieee8021XAuthPaeAuthenticated = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XAuthPaeAuthenticated.setReference('IEEE 802.1X Clause 8, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAuthPaeAuthenticated.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAuthPaeAuthenticated.setDescription("This object will be set 'true' by PACP if the PAE authenticator\n        currently authenticated, and 'false' if the authentication\n        fails or is revoked.")
ieee8021XAuthPaeFailed = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XAuthPaeFailed.setReference('IEEE 802.1X Clause 8, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAuthPaeFailed.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAuthPaeFailed.setDescription("This object will be set 'true' by PACP if the authentication\n        has failed or has been terminated.  The cause could be a\n        failure returned by EAP, either immediately or following a\n        reauthentication, an excessive number of attempts to\n        authenticate (either immediately or upon reauthentication), or\n        the authenticator deasserting authenticate, the object\n        authPaeAuthenticate in the same row is 'false'.  The PACP\n        will set the object authPaeAuthenticated false as well as\n        setting the object 'true'.")
ieee8021XAuthPaeReAuthEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 3, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XAuthPaeReAuthEnabled.setReference('IEEE 802.1X Clause 8.9, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAuthPaeReAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAuthPaeReAuthEnabled.setDescription("This object is set 'true' if PACP should initiate\n        reauthentication periodically, 'false' otherwise.")
ieee8021XAuthPaeQuietPeriod = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XAuthPaeQuietPeriod.setReference('IEEE 802.1X Clause 8.6, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAuthPaeQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAuthPaeQuietPeriod.setDescription('This object indicates a waiting period after a failed\n        authentication attempt, before another attempt is permitted.')
ieee8021XAuthPaeReauthPeriod = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XAuthPaeReauthPeriod.setReference('IEEE 802.1X Clause 8.6, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAuthPaeReauthPeriod.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAuthPaeReauthPeriod.setDescription('This object indicates the time period of the reauthentication\n        to the supplicant.')
ieee8021XAuthPaeRetryMax = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 3, 1, 1, 7), Unsigned32().clone(2)).setUnits('times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XAuthPaeRetryMax.setReference('IEEE 802.1X Clause 8.9, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAuthPaeRetryMax.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAuthPaeRetryMax.setDescription('The maximum number of authentication attempts before failure is\n        reported to the Logon Process, and the authPaeQuietPeriod \n        timer imposed before further attempts are permitted.')
ieee8021XAuthPaeRetryCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 3, 1, 1, 8), Gauge32()).setUnits('times').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XAuthPaeRetryCount.setReference('IEEE 802.1X Clause 8.9')
if mibBuilder.loadTexts: ieee8021XAuthPaeRetryCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAuthPaeRetryCount.setDescription('The count of the number of authentication attempts.')
ieee8021XSupplicantTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 4, 1), )
if mibBuilder.loadTexts: ieee8021XSupplicantTable.setReference('802.1X Clause 8, Figure 8-6, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XSupplicantTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XSupplicantTable.setDescription('A table that contains the configuration objects for the\n        Supplicant PAE associated with each port.\n\n        For the writeable objects in this table, the configured value\n        shall be stored in persistent memory and remain unchanged\n        across a re-initialization of the management system of the\n        entity.')
ieee8021XSupplicantEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 4, 1, 1), ).setIndexNames((0, "IEEE8021X-PAE-MIB", "ieee8021XPaePortNumber"))
if mibBuilder.loadTexts: ieee8021XSupplicantEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XSupplicantEntry.setDescription('The configuration information for an Supplicant PAE.')
ieee8021XSuppPaeAuthenticate = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 4, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XSuppPaeAuthenticate.setReference('IEEE 802.1X Clause 8.4, Figure 8-6, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XSuppPaeAuthenticate.setStatus('current')
if mibBuilder.loadTexts: ieee8021XSuppPaeAuthenticate.setDescription("This object will be set 'true' by the PAE supplicant to request\n        authentication, and if this object is 'true', reauthentication\n        is allowed.\n\n        This object will be 'false' while the PAE supplicant revokes\n        authentication.")
ieee8021XSuppPaeAuthenticated = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 4, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XSuppPaeAuthenticated.setReference('IEEE 802.1X Clause 8.4, Figure 8-6, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XSuppPaeAuthenticated.setStatus('current')
if mibBuilder.loadTexts: ieee8021XSuppPaeAuthenticated.setDescription("This object will be set 'true' by PACP if the PAE supplicant\n        currently authenticated, and 'false' if the authentication\n        fails or is revoked.")
ieee8021XSuppPaeFailed = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 4, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XSuppPaeFailed.setReference('IEEE 802.1X Clause 8.4, Figure 8-6, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XSuppPaeFailed.setStatus('current')
if mibBuilder.loadTexts: ieee8021XSuppPaeFailed.setDescription("This object will be set 'true' by PACP if the authentication\n        has failed or has been terminated.  The cause could be a\n        failure returned by EAP, either immediately or following a\n        reauthentication, an excessive number of attempts to\n        authenticate (either immediately or upon reauthentication), or\n        the supplicant deasserting authenticate, the object\n        ieee8021XSuppPaeAuthenticate in the same row is 'false'.  The PACP\n        will set the object ieee8021XSuppPaeAuthenticated false as well as\n        setting the object 'true'.")
ieee8021XSuppPaeHelloPeriod = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 4, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XSuppPaeHelloPeriod.setReference('IEEE 802.1X Clause 8.6, Figure 8-6, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XSuppPaeHelloPeriod.setStatus('current')
if mibBuilder.loadTexts: ieee8021XSuppPaeHelloPeriod.setDescription('This object indicated a waiting time period after a failed\n        authentication attempt, before another attempt is permitted.')
ieee8021XSuppPaeRetryMax = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 4, 1, 1, 5), Unsigned32().clone(2)).setUnits('times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XSuppPaeRetryMax.setReference('IEEE 802.1X Clause 8.7, Figure 8-6, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XSuppPaeRetryMax.setStatus('current')
if mibBuilder.loadTexts: ieee8021XSuppPaeRetryMax.setDescription('The maximum number of authentication attempts before failure is\n        reported to the Logon Process, and the ieee8021XSuppPaeHelloPeriod\n        timer imposed before further attempts are permitted.')
ieee8021XSuppPaeRetryCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 4, 1, 1, 6), Gauge32()).setUnits('times').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XSuppPaeRetryCount.setReference('IEEE 802.1X Clause 8.7, Figure 8-6, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XSuppPaeRetryCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021XSuppPaeRetryCount.setDescription('The count of the number of authentication attempts.')
ieee8021XEapolStatsTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1), )
if mibBuilder.loadTexts: ieee8021XEapolStatsTable.setReference('802.1X Clause 12.8, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolStatsTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolStatsTable.setDescription('A table in system level contains the EAPOL statistics and\n        diagnostics information supported by PAE.')
ieee8021XEapolStatsEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1), ).setIndexNames((0, "IEEE8021X-PAE-MIB", "ieee8021XPaePortNumber"))
if mibBuilder.loadTexts: ieee8021XEapolStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolStatsEntry.setDescription('An entry contains the EAPOL statistics and diagnostics\n        information for a PAE.')
ieee8021XEapolInvalidFramesRx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolInvalidFramesRx.setReference('802.1X Clause 12.8.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolInvalidFramesRx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolInvalidFramesRx.setDescription('The number of invalid EAPOL frames of any type that have been\n        received by this PAE.')
ieee8021XEapolEapLengthErrorFramesRx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 2), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolEapLengthErrorFramesRx.setReference('802.1X Clause 12.8.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolEapLengthErrorFramesRx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolEapLengthErrorFramesRx.setDescription('The number of EAPOL frames that the Packet Body Length does not\n        match a Packet Body that is contained within the octets of the\n        received EAPOL MPDU in this PAE.')
ieee8021XEapolAnnouncementFramesRx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolAnnouncementFramesRx.setReference('802.1X Clause 12.8.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolAnnouncementFramesRx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolAnnouncementFramesRx.setDescription('The number of EAPOL-Announcement frames that have been received\n        by this PAE.')
ieee8021XEapolAnnouncementReqFramesRx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolAnnouncementReqFramesRx.setReference('802.1X Clause 12.8.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolAnnouncementReqFramesRx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolAnnouncementReqFramesRx.setDescription('The number of EAPOL-Announcement-Req frames that have been\n        received by this PAE.')
ieee8021XEapolPortUnavailableFramesRx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolPortUnavailableFramesRx.setReference('802.1X Clause 12.8.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolPortUnavailableFramesRx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolPortUnavailableFramesRx.setDescription('The number of EAPOL frames that are discarded because their\n        processing would require the creation of a virtual port, for\n        which there are inadequate or constrained resources, or an\n        existing virtual port and no such port currently exists.  If\n        virtual port is not supported, this object should be always 0.')
ieee8021XEapolStartFramesRx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolStartFramesRx.setReference('802.1X Clause 12.8.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolStartFramesRx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolStartFramesRx.setDescription('The number of EAPOL-Start frames that have been received by\n        this PAE.')
ieee8021XEapolEapFramesRx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolEapFramesRx.setReference('802.1X Clause 12.8.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolEapFramesRx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolEapFramesRx.setDescription('The number of EAPOL-EAP frames that have been received by\n        this PAE.')
ieee8021XEapolLogoffFramesRx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolLogoffFramesRx.setReference('802.1X Clause 12.8.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolLogoffFramesRx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolLogoffFramesRx.setDescription('The number of EAPOL-Logoff frames that have been received by\n        this PAE.')
ieee8021XEapolMkNoCknFramesRx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolMkNoCknFramesRx.setReference('802.1X Clause 12.8.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolMkNoCknFramesRx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolMkNoCknFramesRx.setDescription('The number of MKPDUs received with MKA not enabled or CKN not\n        recognized in this PAE.')
ieee8021XEapolMkInvalidFramesRx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 10), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolMkInvalidFramesRx.setReference('802.1X Clause 12.8.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolMkInvalidFramesRx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolMkInvalidFramesRx.setDescription('The number of MKPDUs failing in message authentication on\n        receipt process in this PAE.')
ieee8021XEapolLastRxFrameVersion = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolLastRxFrameVersion.setReference('802.1X Clause 12.8.2, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolLastRxFrameVersion.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolLastRxFrameVersion.setDescription('The version of last received EAPOL frame by this PAE.')
ieee8021XEapolLastRxFrameSource = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolLastRxFrameSource.setReference('802.1X Clause 12.8.2, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolLastRxFrameSource.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolLastRxFrameSource.setDescription('The source MAC address of last received EAPOL frame by this\n        PAE.')
ieee8021XEapolSuppEapFramesTx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 13), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolSuppEapFramesTx.setReference('802.1X Clause 12.8.3, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolSuppEapFramesTx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolSuppEapFramesTx.setDescription('The number of EAPOL-EAP frames that have been transmitted by\n        the supplicant of this PAE.')
ieee8021XEapolLogoffFramesTx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 14), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolLogoffFramesTx.setReference('802.1X Clause 12.8.3, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolLogoffFramesTx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolLogoffFramesTx.setDescription('The number of EAPOL-Logoff frames that have been transmitted by\n        this PAE.')
ieee8021XEapolAnnouncementFramesTx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 15), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolAnnouncementFramesTx.setReference('802.1X Clause 12.8.3, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolAnnouncementFramesTx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolAnnouncementFramesTx.setDescription('The number of EAPOL-Announcement frames that have been\n        transmitted by this PAE.')
ieee8021XEapolAnnouncementReqFramesTx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 16), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolAnnouncementReqFramesTx.setReference('802.1X Clause 12.8.3, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolAnnouncementReqFramesTx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolAnnouncementReqFramesTx.setDescription('The number of EAPOL-Announcement-Req frames that have been\n        transmitted by this PAE.')
ieee8021XEapolStartFramesTx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 17), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolStartFramesTx.setReference('802.1X Clause 12.8.3, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolStartFramesTx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolStartFramesTx.setDescription('The number of EAPOL-Start frames that have been transmitted by\n        this PAE.')
ieee8021XEapolAuthEapFramesTx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 18), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolAuthEapFramesTx.setReference('802.1X Clause 12.8.3, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolAuthEapFramesTx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolAuthEapFramesTx.setDescription('The number of EAPOL-EAP frames that have been transmitted by\n        the authenticator of this PAE.')
ieee8021XEapolMkaFramesTx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 5, 1, 1, 19), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XEapolMkaFramesTx.setReference('802.1X Clause 12.8.3, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XEapolMkaFramesTx.setStatus('current')
if mibBuilder.loadTexts: ieee8021XEapolMkaFramesTx.setDescription('The number of EAPOL-MKA frames with no CKN information that\n        have been transmitted by this PAE.')
ieee8021XKayMkaTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1), )
if mibBuilder.loadTexts: ieee8021XKayMkaTable.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaTable.setDescription("A table of system level information for each interface\n        supported by the KaY (Key Agreement Entity).  This table will\n        be instantiated if the object ieee8021XPaePortKayMkaEnable in\n        the corresponding entry of the ieee8021XPaePortTable is 'true'.\n\n        The following terms are used to identify roles within the MKA\n        protocol or protocol scenarios and the MIB description :\n\n        participant : An instance of MKA, transmitting and receiving\n            frames protected by keys derived from a single CAK, and\n            operating with positive intent, obeying the protocol.\n\n        member: A participant that possesses the CAK that can be used\n            to prove liveness and to obtain membership in the CA under\n            discussion.\n\n        actor: The participant under discussion, usually in the KaY\n            being described.\n\n        partners: Participants or members attached to the same LAN as\n            the actor, excluding the actor.\n\n        principal actor: The actor controlling the PAC or SecY\n            associated with the KaY.\n\n        Each participant selects the live participant advertising the\n        highest priority as its key server provided that participant\n        has not selected another as its key server or is unwilling to\n        act as the key server.  If a key server cannot be selected SAKs\n        are not distributed.  In the event of a tie for highest\n        priority key server, the member with the highest priority SCI\n        is chosen.  For consistency with other uses of the SCI's MAC\n        Address component as a priority, numerically lower values of\n        the key server priority and SCI are accorded the highest\n        priority.\n\n        For the writeable objects in this table, the configured value\n        shall be stored in persistent memory and remain unchanged\n        across a re-initialization of the management system of the\n        entity.")
ieee8021XKayMkaEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1), ).setIndexNames((0, "IEEE8021X-PAE-MIB", "ieee8021XPaePortNumber"))
if mibBuilder.loadTexts: ieee8021XKayMkaEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaEntry.setDescription('An entry containing KaY MKA management information applicable\n        to a particular interface.')
ieee8021XKayMkaActive = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaActive.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaActive.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaActive.setDescription("This object will be 'true' if there is at least one MKA active\n        actor, transmitting MKPDUs")
ieee8021XKayMkaAuthenticated = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaAuthenticated.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaAuthenticated.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaAuthenticated.setDescription("This object will be 'true' if the principal actor,\n        i.e. the actor controlling the PAC or SecY associated with\n        the KaY, has determined that Controlled Port communication\n        communication should proceed without MACsec.")
ieee8021XKayMkaSecured = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaSecured.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaSecured.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaSecured.setDescription("This object will be 'true' if the principal actor has\n        determined that communication should use MACsec.")
ieee8021XKayMkaFailed = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaFailed.setReference('IEEE 802.1X Clause 9.16, Table 9-3, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaFailed.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaFailed.setDescription("This object will be 'true' if the object\n        ieee8021XKayMkaSecured in\n        the same row is 'false' and MKA Life Time has elapsed since an\n        MKA participant was last created.")
ieee8021XKayMkaActorSCI = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 5), SecySCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaActorSCI.setReference('IEEE 802.1X Clause 9.16, Figure 12-3\n         IEEE 802.1AE Clause 7.1.2, 10.7.1')
if mibBuilder.loadTexts: ieee8021XKayMkaActorSCI.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaActorSCI.setDescription("The SCI assigned by the system to the port, applies to all the\n        port's MKA actors.")
ieee8021XKayMkaActorsPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 6), Ieee8021XMkaKeyServerPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XKayMkaActorsPriority.setReference('IEEE 802.1X Clause 9.16, Table 9-2, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaActorsPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaActorsPriority.setDescription("The Key Server priority for all the port's MKA actors.  Each\n        participant encodes a key server priority, an 8-bit integer, in\n        each MKPDU.")
ieee8021XKayMkaKeyServerPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 7), Ieee8021XMkaKeyServerPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaKeyServerPriority.setReference('IEEE 802.1X Clause 9.16, Table 9-2, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaKeyServerPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaKeyServerPriority.setDescription('The priority of the elected Key Server through MKA in the CA.')
ieee8021XKayMkaKeyServerSCI = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 8), SecySCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaKeyServerSCI.setReference('IEEE 802.1X Clause 9.16, Figure 12-3\n         IEEE 802.1AE Clause 7.1.2, 10.7.1')
if mibBuilder.loadTexts: ieee8021XKayMkaKeyServerSCI.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaKeyServerSCI.setDescription('The SCI for key server for the MKA principal actor.  The length\n        of this object is 0 if there is no principal actor, or that\n        actor has no live peers.  This object matches the\n        ieee8021XKayMkaActorSCI object in the same row if the actor is\n        the key server.')
ieee8021XKayAllowedJoinGroup = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayAllowedJoinGroup.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayAllowedJoinGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayAllowedJoinGroup.setDescription("This object will be 'true' if the KaY will accept Group CAKs\n        distributed by MKA protocol.")
ieee8021XKayAllowedFormGroup = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayAllowedFormGroup.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayAllowedFormGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayAllowedFormGroup.setDescription("This object will be 'true' if the KaY will attempt to use\n        point-to-point CAKs to distribute a group CAK, if it is the\n        Key Server for the MKA instances for all the point-to-point CAKs.")
ieee8021XKayCreateNewGroup = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XKayCreateNewGroup.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayCreateNewGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayCreateNewGroup.setDescription("This object is set 'true' if a new Group CAK is to be\n        distributed if the KaY is the Key Server for the MKA instances\n        for all the point-to-point CAKs.  This object will be set 'false'\n        by the KaY when distribution is complete.")
ieee8021XKayMacSecCapability = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noMACsec", 0), ("macSecCapability1", 1), ("macSecCapability2", 2), ("macSecCapability3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMacSecCapability.setReference('IEEE 802.1X Clause 9.6.1, Clause 9.16, Figure 12-3, Table 11-6')
if mibBuilder.loadTexts: ieee8021XKayMacSecCapability.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMacSecCapability.setDescription("This object indicates whether MACsec is implemented, and if so\n        whether the implementation provides integrity protection only,\n        integrity and integrity with confidentiality, or integrity and\n        integrity with confidentiality with a selectable confidentiality offset\n        of 0, 30, or 50 octets (see IEEE Std 802.1AE).\n\n        'noMACsec' : the MACsec is not implemented.\n\n        'macSecCapability1' :  capable in 'integrity protection without\n             confidentiality'.\n\n        'macSecCapability2' :  capable in 'integrity protection without\n             confidentiality' and integrity protection and confidentiali\n              with a confidentiality offset 0',.\n\n        'macSecCapability3' :  capable in 'integrity protection without\n             confidentiality' and integrity protection and confidentiali\n              with a confidentiality offset 0, 30 or 50'.")
ieee8021XKayMacSecDesired = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XKayMacSecDesired.setReference('IEEE 802.1X Clause 9.6.1, Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMacSecDesired.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMacSecDesired.setDescription("This object will be set 'true' if the MKA participants desire\n        the use of MACsec to protect frames with this KaY.")
ieee8021XKayMacSecProtect = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMacSecProtect.setReference('IEEE 802.1X Clause 9.6.1, Clause 9.16, Figure 12-2,\n         Figure 12-3, IEEE 802.1AE IEEE8021-SECY-MIB')
if mibBuilder.loadTexts: ieee8021XKayMacSecProtect.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMacSecProtect.setDescription("The status of the MACsec protection function for this KaY.\n\n        'true' : then the status of the MACsec protection function will\n            be as object secyIfProtectFramesEnable object configured\n            in the IEEE8021-SECY-MIB.\n        'false' : then the MACsec protection function is disabled by\n            this KaY.")
ieee8021XKayMacSecReplayProtect = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMacSecReplayProtect.setReference('IEEE 802.1X Clause 9.6.1, Clause 9.16, Figure 12-2,\n         Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMacSecReplayProtect.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMacSecReplayProtect.setDescription("The status of the MACsec replay protection function for this\n        KaY.\n\n        'true' : then the status of the MACsec replay protection\n            function will be as secyIfReplayProtectEnable object\n            configured in the IEEE8021-SECY-MIB.\n        'false' : then the MACsec replay protection function is\n            disabled by this KaY.")
ieee8021XKayMacSecValidate = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMacSecValidate.setReference('IEEE 802.1X Clause 9.6.1, Clause 9.16, Figure 12-2,\n         Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMacSecValidate.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMacSecValidate.setDescription("The status of the MACsec validation function for this KaY.\n\n        'true' : then the status of the MACsec validation function\n            will be as secyIfValidateFrames object configured in the\n            IEEE8021-SECY-MIB.\n        'false' : then the MACsec validation function is enabled but\n            only for checking without filtering out invalid frames by\n            the SecY.")
ieee8021XKayMacSecConfidentialityOffset = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 30), ValueRangeConstraint(50, 50), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XKayMacSecConfidentialityOffset.setReference('IEEE 802.1X Clause 9.7.1, Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMacSecConfidentialityOffset.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMacSecConfidentialityOffset.setDescription('The confidentiality protection offset options for the selected\n        cipher suite in the MACsec.  If the cipher suite does not have\n        this capability, the configured value of the object will not\n        apply to the cipher suite.')
ieee8021XKayMkaTxKN = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 18), Ieee8021XMkaKN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaTxKN.setReference('IEEE 802.1X Clause 9.8, Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaTxKN.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaTxKN.setDescription('The key number assigned by the key server to the SAK currently\n        being used for transmission.  This object will be 0 if MACsec\n        is not being used or the key number is not available yet.')
ieee8021XKayMkaTxAN = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 19), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaTxAN.setReference('IEEE 802.1X Clause 9.9, Clause 9.16, Figure 12-3,\n         IEEE8021-SECY-MIB')
if mibBuilder.loadTexts: ieee8021XKayMkaTxAN.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaTxAN.setDescription('The AN assigned by the key server for use with the key number\n        for transmission.\n\n        This row pointer will point to an entry in the secyTxSATable\n        which the secyTxSCEncodingSA object also points to in the\n        IEEE8021-SECY-MIB.\n\n        If MACsec is not in use or the AN is not identified yet, the\n        value of this object shall be set to the OBJECT IDENTIFIER\n        { 0 0 }.')
ieee8021XKayMkaRxKN = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 20), Ieee8021XMkaKN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaRxKN.setReference('IEEE 802.1X Clause 9.8, Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaRxKN.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaRxKN.setDescription('The key number assigned by the key server to the oldest SAK\n        currently being used for reception.  It is the same as the key\n        number for transmission if a single SAK is currently in use.\n        This object will be 0 if MACsec is not being used or the key\n        number is not available yet.')
ieee8021XKayMkaRxAN = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 21), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaRxAN.setReference('IEEE 802.1X Clause 9.6.1, Clause 9.16, Figure 12-3,\n         IEEE8021-SECY-MIB')
if mibBuilder.loadTexts: ieee8021XKayMkaRxAN.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaRxAN.setDescription('The AN assigned by the key server for use with the key number\n        for reception.  It is the same as AN for transmission if a\n        single SAK is currently in use.\n\n        This row pointer will point to an entry in the secyRxSATable\n        which the secyRxSCCurrentSA object also points to in the\n        IEEE8021-SECY-MIB.\n\n        If MACsec is not in use or the AN is not identified yet, the\n        value of this object shall be set to the OBJECT IDENTIFIER\n        { 0 0 }.')
ieee8021XKayMkaSuspendFor = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XKayMkaSuspendFor.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaSuspendFor.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaSuspendFor.setDescription("Set by management to a non-zero number of seconds between 1\n        and MKA Suspension Limit to initiate a suspension (9.18) of\n        that duration (if the KaY's principal actor is the Key\n        Server) or to request a suspension (otherwise)")
ieee8021XKayMkaSuspendOnRequest = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XKayMkaSuspendOnRequest.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaSuspendOnRequest.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaSuspendOnRequest.setDescription("The status of the suspendOnRequest function for this KaY.\n        'true' : then the KaY's principal actor will initiate a\n        suspension if it is the Key Server and another participant\n        has requested a suspension by transmitting a non-zero value\n        of its suspendFor parameter\n        'false' : then the KaY will not initiate a suspension on\n        request from another participant.")
ieee8021XKayMkaSuspendedWhile = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021XKayMkaSuspendedWhile.setReference('IEEE 802.1X Clause 5.11.4, Clause 9.16, Clause 9.18.5,\n               Clause 9.18.6, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaSuspendedWhile.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaSuspendedWhile.setDescription('Read by management to determine if a suspension is in\n        progress and to discover the remaining duration of that\n        suspension. May be set directly to coordinate in-service\n        upgrades.')
ieee8021XKayMkaParticipantTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 2), )
if mibBuilder.loadTexts: ieee8021XKayMkaParticipantTable.setReference('IEEE 802.1X Clause 9.14, Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaParticipantTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaParticipantTable.setDescription('A table for each MKA participant supported by the KaY MKA\n        entity.\n\n        For the writeable objects in this table, the configured value\n        shall be stored in persistent memory and remain unchanged\n        across a re-initialization of the management system of the\n        entity.')
ieee8021XKayMkaParticipantEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 2, 1), ).setIndexNames((0, "IEEE8021X-PAE-MIB", "ieee8021XPaePortNumber"), (0, "IEEE8021X-PAE-MIB", "ieee8021XKayMkaPartCKN"))
if mibBuilder.loadTexts: ieee8021XKayMkaParticipantEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaParticipantEntry.setDescription('An entry containing KaY MKA management information applicable\n        to a MKA participant.')
ieee8021XKayMkaPartCKN = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 2, 1, 1), Ieee8021XPaeCKN())
if mibBuilder.loadTexts: ieee8021XKayMkaPartCKN.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPartCKN.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPartCKN.setDescription('The CKN information for this MKA participant.')
ieee8021XKayMkaPartKMD = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 2, 1, 2), Ieee8021XPaeKMD()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021XKayMkaPartKMD.setReference('IEEE 802.1X Clause 9.16, Clause 12.6, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPartKMD.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPartKMD.setDescription('The KMD information for this MKA participant.')
ieee8021XKayMkaPartNID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 2, 1, 3), Ieee8021XPaeNID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021XKayMkaPartNID.setReference('IEEE 802.1X Clause 9.16, Clause 12.6, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPartNID.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPartNID.setDescription('The NID information for this MKA participant.')
ieee8021XKayMkaPartCached = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 2, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021XKayMkaPartCached.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPartCached.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPartCached.setDescription("This object is set 'true' by the KaY if the participant's\n        parameters are cached.  If this object is 'true', this object\n        can be set 'false' cleared by management to remove the\n        participant's parameters from the cache.")
ieee8021XKayMkaPartActive = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaPartActive.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPartActive.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPartActive.setDescription("This object is set 'true' if the participant is active, i.e. is\n        currently transmitting periodic MKPDUs.")
ieee8021XKayMkaPartRetain = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 2, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021XKayMkaPartRetain.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPartRetain.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPartRetain.setDescription("This object is set 'true' to retain the participant in the\n        cache, even if the KaY would normally remove it (due to lack\n        of use for example)")
ieee8021XKayMkaPartActivateControl = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("disabled", 2), ("onOperUp", 3), ("always", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021XKayMkaPartActivateControl.setReference('IEEE 802.1X Clause 9.14, Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPartActivateControl.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPartActivateControl.setDescription("This object is for controlling the participant's behavior when\n        the participant is activated.\n        \n        'default' : the participant is from cached entries created by\n            the KaY as part of normal operation, without explicit\n            management, and is activated according to the\n            implementation dependent policies of the KaY.\n\n        'disabled' : the participant allows the cache information to\n            be retained, but disabled for indefinite period.\n\n        'onOperUp' : causing the participant to be activated when the\n            PAE's 'Uncontrolled Port' becomes operational and when the\n            PAE resumes following suspension.\n\n        'always' : causing the participant to remain active all the\n            time, even in the continued absence of partners.\n\n        If the object changed to disabled(1) or onOperUp(3), the\n        participant ceases operation immediately and receipt of MKPDUs\n        with a matching CKN during a subsequent period of twice MKA\n        lifetime will not cause the participant to become active once\n        more.")
ieee8021XKayMkaPartPrincipal = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaPartPrincipal.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPartPrincipal.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPartPrincipal.setDescription("This object is set 'true' if the participant is currently the\n        principal actor.")
ieee8021XKayMkaPartDistCKN = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 2, 1, 9), Ieee8021XPaeCKNOrNull()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaPartDistCKN.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPartDistCKN.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPartDistCKN.setDescription("The CKN for the last CAK distributed either by the actor or one\n        of its partners.  Empty string for this object will be provided if\n        this participant has not been used to distribute a CAK or the\n        participant is not active, i.e. the object\n        ieee8021XKayMkaPartActive in the same row is 'false'.")
ieee8021XKayMkaPartRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021XKayMkaPartRowStatus.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPartRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPartRowStatus.setDescription("The object to create the parameters for the supported\n        participant information in the system.\n\n        If the participant information is from downloaded policies,\n        this object is 'active'.")
ieee8021XKayMkaPeerListTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 3), )
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListTable.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListTable.setDescription('A table containing the lists of Live Peers and Potential Peers,\n        for all MKA instances for which the KaY is active.')
ieee8021XKayMkaPeerListEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 3, 1), ).setIndexNames((0, "IEEE8021X-PAE-MIB", "ieee8021XPaePortNumber"), (0, "IEEE8021X-PAE-MIB", "ieee8021XKayMkaPartCKN"), (0, "IEEE8021X-PAE-MIB", "ieee8021XKayMkaPeerListMI"))
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListEntry.setDescription('A table entry for one of the peers for one of the MKA\n        instances for which this KaY is an active participant.')
ieee8021XKayMkaPeerListMI = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 3, 1, 1), Ieee8021XMkaMI())
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListMI.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListMI.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListMI.setDescription("The peer entry's MI information in the peer list of this active\n        participant in MKA protocol.")
ieee8021XKayMkaPeerListMN = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 3, 1, 2), Ieee8021XMkaMN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListMN.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListMN.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListMN.setDescription("The peer entry's latest MN information in the peer list of this\n        active participant in MKA protocol.")
ieee8021XKayMkaPeerListType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("livePeerList", 1), ("potentialPeerList", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListType.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListType.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListType.setDescription("The peer entry's type in the peer list of this active\n        participant in MKA protocol.\n\n        'livePeerList' : the peer entry is in the Live Peer List.\n\n        'potentialPeerList' : the peer entry is in the Potential\n            Peer List.")
ieee8021XKayMkaPeerListSCI = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 6, 3, 1, 4), SecySCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListSCI.setReference('IEEE 802.1X Clause 9.16, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListSCI.setStatus('current')
if mibBuilder.loadTexts: ieee8021XKayMkaPeerListSCI.setDescription('The SCI information of the peer entry in the peer list of this\n        active participant in MKA protocol.')
ieee8021XNidConfigTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 1), )
if mibBuilder.loadTexts: ieee8021XNidConfigTable.setReference('802.1X Clause 8, Figure 8-6, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XNidConfigTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XNidConfigTable.setDescription('A table that contains the configuration objects for the network\n        announcement information for the Logon Process.\n\n        The detail operation of the Logon Process can vary depending on\n        the port-based network access control applications, and on the\n        capabilities supported by that implementation including, for\n        example, network discovery and roaming.  This table specifies\n        control variables that facilitate behaviors that are\n        potentially useful in a range of applications.  Implementations\n        may use and augment the variables specified, or may use\n        variables specific to the implementation.\n\n        For the writeable objects in this table, the configured value\n        shall be stored in persistent memory and remain unchanged\n        across a re-initialization of the management system of the\n        entity.')
ieee8021XNidConfigEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 1, 1), ).setIndexNames((1, "IEEE8021X-PAE-MIB", "ieee8021XNidNID"))
if mibBuilder.loadTexts: ieee8021XNidConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XNidConfigEntry.setDescription('An entry contains network announcement parameters for a NID.')
ieee8021XNidNID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 1, 1, 1), Ieee8021XPaeNID())
if mibBuilder.loadTexts: ieee8021XNidNID.setReference('802.1X Clause 12.5, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XNidNID.setStatus('current')
if mibBuilder.loadTexts: ieee8021XNidNID.setDescription('The network identifier to identify NID configuration in the\n        PAE.')
ieee8021XNidUseEap = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediate", 2), ("mkaFail", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021XNidUseEap.setReference('802.1X Clause 12.5, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XNidUseEap.setStatus('current')
if mibBuilder.loadTexts: ieee8021XNidUseEap.setDescription("Determines when the Logon Process will initiate EAP, if the\n        Supplicant and or Authenticator are enabled, and takes one of\n        the following values:\n\n        'never' : Never.\n\n        'immediate' : Immediately, concurrently with the use of MKA\n            with any cached CAK(s).\n\n        'mkaFail' : Not until MKA has failed, if a prior CAK has been\n            cached.")
ieee8021XNidUnauthAllowed = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediate", 2), ("authFail", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021XNidUnauthAllowed.setReference('802.1X Clause 12.5, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XNidUnauthAllowed.setStatus('current')
if mibBuilder.loadTexts: ieee8021XNidUnauthAllowed.setDescription("Determines when the Logon Process will tell the CP state\n        machine to provide unauthenticated connectivity, and takes one\n        of the following values:\n\n        'never' : Never.\n\n        'immediate' : Immediately, independently of any current or\n            future attempts to authenticate using the PAE or MKA.\n\n        'authFail' : Not until an attempt has been made to\n            authenticate using EAP, unless neither the Supplicant nor\n            the Authenticator is enabled, and MKA has attempted to use\n            any cached CAK (unless the KaY is not enabled).")
ieee8021XNidUnsecuredAllowed = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("never", 1), ("immediate", 2), ("mkaFail", 3), ("mkaServer", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021XNidUnsecuredAllowed.setReference('802.1X Clause 12.5, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XNidUnsecuredAllowed.setStatus('current')
if mibBuilder.loadTexts: ieee8021XNidUnsecuredAllowed.setDescription("Determines when the Logon Process will tell the CP state\n        machine to provide authenticated but unsecured connectivity,\n        takes one of the following values:\n\n        'never' : Never.\n\n        'immediate' : Immediately, to provide connectivity\n            concurrently with the use of MKA with any CAK acquired\n            through EAP.\n\n        'mkaFail' : Not until MKA has failed, or is not enabled.\n\n        'mkaServer' : Only if directed by the MKA server.")
ieee8021XNidUnauthenticatedAccess = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 1, 1, 5), Ieee8021XPaeNIDUnauthenticatedStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021XNidUnauthenticatedAccess.setReference('802.1X Clause 12.5, Clause 10.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XNidUnauthenticatedAccess.setStatus('current')
if mibBuilder.loadTexts: ieee8021XNidUnauthenticatedAccess.setDescription("The configured access capability of the port's clients without\n        authentication in this NID.")
ieee8021XNidAccessCapabilities = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 1, 1, 6), Ieee8021XPaeNIDCapabilites()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021XNidAccessCapabilities.setReference('802.1X Clause 12.5, Clause 10.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XNidAccessCapabilities.setStatus('current')
if mibBuilder.loadTexts: ieee8021XNidAccessCapabilities.setDescription('The authentication and protection capabilities supported for\n        the NID.')
ieee8021XNidKMD = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 1, 1, 7), Ieee8021XPaeKMD()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021XNidKMD.setReference('802.1X Clause 10.4, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XNidKMD.setStatus('current')
if mibBuilder.loadTexts: ieee8021XNidKMD.setDescription('The configured KMD information for this NID.')
ieee8021XNidRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021XNidRowStatus.setReference('802.1X Clause 10.4, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XNidRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021XNidRowStatus.setDescription("The object to create the parameters for the supported Network\n        Announcement information in the system.\n\n        If the Network Announcement information of the entry is from\n        downloaded policies, this object is 'active'.")
ieee8021XAnnounceTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 2), )
if mibBuilder.loadTexts: ieee8021XAnnounceTable.setReference('802.1X Clause 8, Figure 8-6, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAnnounceTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnounceTable.setDescription("A table contains the status information that the Announcers\n        announce in the network announcement of the PAE system.\n\n        This table will be instantiated if the object\n        ieee8021XPaePortAnnouncerEnable in the corresponding entry of\n        the ieee8021XPaePortTable is 'true'.")
ieee8021XAnnounceEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 2, 1), ).setIndexNames((0, "IEEE8021X-PAE-MIB", "ieee8021XPaePortNumber"), (1, "IEEE8021X-PAE-MIB", "ieee8021XAnnounceNID"))
if mibBuilder.loadTexts: ieee8021XAnnounceEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnounceEntry.setDescription("An entry contains an Announcer's status information.")
ieee8021XAnnounceNID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 2, 1, 1), Ieee8021XPaeNID())
if mibBuilder.loadTexts: ieee8021XAnnounceNID.setReference('802.1X Clause 10.4, Clause 12.5, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAnnounceNID.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnounceNID.setDescription('The NID information to identify a transmitting network\n        announcement for the PAE.')
ieee8021XAnnounceAccessStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 2, 1, 2), Ieee8021XPaeNIDAccessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XAnnounceAccessStatus.setReference('802.1X Clause 10.4, Clause 10.1, Clause 12.5, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAnnounceAccessStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnounceAccessStatus.setDescription('The object information reflects connectivity as a result of\n        authentication attempts of this NID for this Announcer.')
ieee8021XAnnouncementTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 3), )
if mibBuilder.loadTexts: ieee8021XAnnouncementTable.setReference('802.1X Clause 10.4, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAnnouncementTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnouncementTable.setDescription("A table contains the status information that the Listeners\n        receive in the network announcement of the PAE system.\n\n        This table will be instantiated if the object\n        ieee8021XPaePortListenerEnable in the corresponding entry of the\n        ieee8021XPaePortTable is 'true'.")
ieee8021XAnnouncementEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 3, 1), ).setIndexNames((0, "IEEE8021X-PAE-MIB", "ieee8021XPaePortNumber"), (1, "IEEE8021X-PAE-MIB", "ieee8021XAnnouncementNID"))
if mibBuilder.loadTexts: ieee8021XAnnouncementEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnouncementEntry.setDescription("An entry contains a Listener's status information.")
ieee8021XAnnouncementNID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 3, 1, 1), Ieee8021XPaeNID())
if mibBuilder.loadTexts: ieee8021XAnnouncementNID.setReference('802.1X Clause 10.4, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAnnouncementNID.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnouncementNID.setDescription('The NID information to identify a received network announcement\n        for the PAE.')
ieee8021XAnnouncementKMD = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 3, 1, 2), Ieee8021XPaeKMD()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XAnnouncementKMD.setReference('802.1X Clause 10.4, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAnnouncementKMD.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnouncementKMD.setDescription('The KMD information for this received network announcement of\n        the PAE.')
ieee8021XAnnouncementSpecific = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XAnnouncementSpecific.setReference('802.1X Clause 10.1, 10.4, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAnnouncementSpecific.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnouncementSpecific.setDescription('This object indicates the received announcement information was\n        specific to the receiving PAE, not generic for all systems attached\n        to the LAN.')
ieee8021XAnnouncementAccessStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 3, 1, 4), Ieee8021XPaeNIDAccessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XAnnouncementAccessStatus.setReference('802.1X Clause 10.4, Clause 10.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAnnouncementAccessStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnouncementAccessStatus.setDescription('The object information reflects connectivity as a result of\n        authentication attempts for this received network announcement\n        of the PAE.')
ieee8021XAnnouncementAccessRequested = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XAnnouncementAccessRequested.setReference('802.1X Clause 10.4, Clause 10.1, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAnnouncementAccessRequested.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnouncementAccessRequested.setDescription('The authenticated access has been requested for this particular\n        NID or not.')
ieee8021XAnnouncementUnauthAccess = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 3, 1, 6), Ieee8021XPaeNIDUnauthenticatedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XAnnouncementUnauthAccess.setReference('802.1X Clause 10.1, Clause 12.5, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAnnouncementUnauthAccess.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnouncementUnauthAccess.setDescription("The access capability of the port's clients without\n        authentication in this received network announcement of the\n        PAE.\n\n        'openAccess', 'limitedAccess' should not be returned if the\n        object ieee8021XNidUnauthAllowed is 'immediate'.")
ieee8021XAnnouncementCapabilities = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 3, 1, 7), Ieee8021XPaeNIDCapabilites()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XAnnouncementCapabilities.setReference('802.1X Clause 10.1, Clause 12.5, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAnnouncementCapabilities.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnouncementCapabilities.setDescription('The announcement capabilities of this received network\n        announcement for this PAE.')
ieee8021XAnnouncementCipherSuitesTable = MibTable((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 4), )
if mibBuilder.loadTexts: ieee8021XAnnouncementCipherSuitesTable.setReference('802.1X Clause 10.4, Clause 11.13.3, Figure 11-21, Figure 12-3')
if mibBuilder.loadTexts: ieee8021XAnnouncementCipherSuitesTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnouncementCipherSuitesTable.setDescription("A table contains the Cipher Suites information that the Listeners\n        receive in the network announcement of the PAE system.\n\n        This table will be instantiated if the object\n        ieee8021XPaePortListenerEnable in the corresponding entry of the\n        ieee8021XPaePortTable is 'true'.")
ieee8021XAnnouncementCipherSuitesEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 4, 1), ).setIndexNames((0, "IEEE8021X-PAE-MIB", "ieee8021XPaePortNumber"), (0, "IEEE8021X-PAE-MIB", "ieee8021XAnnouncementNID"), (0, "IEEE8021X-PAE-MIB", "ieee8021XAnnouncementCipherSuite"))
if mibBuilder.loadTexts: ieee8021XAnnouncementCipherSuitesEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnouncementCipherSuitesEntry.setDescription('An entry contains the Cipher Suite information which a Listener has\n        reveived from network announcement.')
ieee8021XAnnouncementCipherSuite = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8))
if mibBuilder.loadTexts: ieee8021XAnnouncementCipherSuite.setReference('802.1X Clause 10.4, Figure 12-3, 802.1AE-2006 Clause 14')
if mibBuilder.loadTexts: ieee8021XAnnouncementCipherSuite.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnouncementCipherSuite.setDescription('The identifier for the announced cipher suite.  This is a\n        global unique 64-bit (EUI-64) identifier to identify a cipher\n        suite.')
ieee8021XAnnouncementCipherCapability = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 15, 1, 7, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021XAnnouncementCipherCapability.setReference('802.1X Clause 11.13.3, Figure 11-21')
if mibBuilder.loadTexts: ieee8021XAnnouncementCipherCapability.setStatus('current')
if mibBuilder.loadTexts: ieee8021XAnnouncementCipherCapability.setDescription('The capability of a Cipher Suite received from the network\n        announcement by the Listener.\n\n        A 2 octets Cipher Suite dependent implementation capability field\n        precedes each Cipher Suite reference number. If the Cipher Suite,\n        ieee8021XAnnouncementCipherSuite, identifies the Default Cipher\n        Suite (specified in IEEE Std 802.1AE), the two least significant\n        bits of the implementation capability field encode the MACsec\n        Capability parameter specified in Table 11-7 and the fourteen more\n        significant bits are as 0 and ignored on receipt.')
ieee8021XPaeCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 15, 2, 1))
ieee8021XPaeGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 15, 2, 2))
ieee8021XPaeCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 15, 2, 1, 1)).setObjects(("IEEE8021X-PAE-MIB", "ieee8021XPaeSystemGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeLogonGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeEapolStatsGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPacGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeAuthConfigGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeSuppConfigGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeKaYMkaGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeNetworkIdentifierGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeAnnouncerGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeListenerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021XPaeCompliance = ieee8021XPaeCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeCompliance.setDescription('The compliance statement for device support of\n        Port Access Control.')
ieee8021XPaeV2Compliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 15, 2, 1, 2)).setObjects(("IEEE8021X-PAE-MIB", "ieee8021XPaeSystemGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeLogonGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeEapolStatsGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPacGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeAuthConfigGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeSuppConfigGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeKaYMkaGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeNetworkIdentifierGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeAnnouncerGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeListenerGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeKaYIsupgradeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021XPaeV2Compliance = ieee8021XPaeV2Compliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeV2Compliance.setDescription('The compliance statement for device support of\n        Port Access Control as specified in 802.1X-2010\n        amended by 802.1Xbx.')
ieee8021XPaeSystemGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 15, 2, 2, 1)).setObjects(("IEEE8021X-PAE-MIB", "ieee8021XPaeSysAccessControl"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeSysAnnouncements"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeSysEapolVersion"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeSysMkaVersion"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortType"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeControlledPortNumber"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeUncontrolledPortNumber"), ("IEEE8021X-PAE-MIB", "ieee8021XPaeCommonPortNumber"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortInitialize"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortCapabilities"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortVirtualPortsEnable"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortMaxVirtualPorts"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortCurrentVirtualPorts"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortVirtualPortStart"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortVirtualPortPeerMAC"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortLogonEnable"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortAuthenticatorEnable"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortSupplicantEnable"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortKayMkaEnable"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortAnnouncerEnable"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortListenerEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021XPaeSystemGroup = ieee8021XPaeSystemGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeSystemGroup.setDescription('A collection of objects providing system information for a PAE\n        system and a PAE port status and control information.')
ieee8021XPacGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 15, 2, 2, 2)).setObjects(("IEEE8021X-PAE-MIB", "ieee8021XPacPortAdminPt2PtMAC"), ("IEEE8021X-PAE-MIB", "ieee8021XPacPortOperPt2PtMAC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021XPacGroup = ieee8021XPacGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPacGroup.setDescription('A collection of objects providing information of a PAC in the\n        system.')
ieee8021XPaeLogonGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 15, 2, 2, 3)).setObjects(("IEEE8021X-PAE-MIB", "ieee8021XPaePortLogonConnectStatus"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortPortValid"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortSessionOctetsRx"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortSessionOctetsTx"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortSessionPktsRx"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortSessionPktsTx"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortSessionId"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortSessionStartTime"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortSessionIntervalTime"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortSessionTerminate"), ("IEEE8021X-PAE-MIB", "ieee8021XPaePortSessionUserName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021XPaeLogonGroup = ieee8021XPaeLogonGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeLogonGroup.setDescription('A collection of objects providing information of a Logon\n        Process in the system.')
ieee8021XPaeAuthConfigGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 15, 2, 2, 4)).setObjects(("IEEE8021X-PAE-MIB", "ieee8021XAuthPaeAuthenticate"), ("IEEE8021X-PAE-MIB", "ieee8021XAuthPaeAuthenticated"), ("IEEE8021X-PAE-MIB", "ieee8021XAuthPaeFailed"), ("IEEE8021X-PAE-MIB", "ieee8021XAuthPaeReAuthEnabled"), ("IEEE8021X-PAE-MIB", "ieee8021XAuthPaeQuietPeriod"), ("IEEE8021X-PAE-MIB", "ieee8021XAuthPaeReauthPeriod"), ("IEEE8021X-PAE-MIB", "ieee8021XAuthPaeRetryMax"), ("IEEE8021X-PAE-MIB", "ieee8021XAuthPaeRetryCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021XPaeAuthConfigGroup = ieee8021XPaeAuthConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeAuthConfigGroup.setDescription('A collection of objects providing configuration information of\n        an Authenticator in the system.')
ieee8021XPaeSuppConfigGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 15, 2, 2, 5)).setObjects(("IEEE8021X-PAE-MIB", "ieee8021XSuppPaeAuthenticate"), ("IEEE8021X-PAE-MIB", "ieee8021XSuppPaeAuthenticated"), ("IEEE8021X-PAE-MIB", "ieee8021XSuppPaeFailed"), ("IEEE8021X-PAE-MIB", "ieee8021XSuppPaeHelloPeriod"), ("IEEE8021X-PAE-MIB", "ieee8021XSuppPaeRetryMax"), ("IEEE8021X-PAE-MIB", "ieee8021XSuppPaeRetryCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021XPaeSuppConfigGroup = ieee8021XPaeSuppConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeSuppConfigGroup.setDescription('A collection of objects providing configuration information of\n        a Supplicant in the system.')
ieee8021XPaeEapolStatsGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 15, 2, 2, 6)).setObjects(("IEEE8021X-PAE-MIB", "ieee8021XEapolInvalidFramesRx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolEapLengthErrorFramesRx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolAnnouncementFramesRx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolAnnouncementReqFramesRx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolPortUnavailableFramesRx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolStartFramesRx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolEapFramesRx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolLogoffFramesRx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolMkNoCknFramesRx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolMkInvalidFramesRx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolLastRxFrameVersion"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolLastRxFrameSource"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolSuppEapFramesTx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolLogoffFramesTx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolAnnouncementFramesTx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolAnnouncementReqFramesTx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolStartFramesTx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolAuthEapFramesTx"), ("IEEE8021X-PAE-MIB", "ieee8021XEapolMkaFramesTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021XPaeEapolStatsGroup = ieee8021XPaeEapolStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeEapolStatsGroup.setDescription('A collection of objects providing counters and diagnostic\n        information for the EAPOL in the system.')
ieee8021XPaeKaYMkaGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 15, 2, 2, 7)).setObjects(("IEEE8021X-PAE-MIB", "ieee8021XKayMkaActive"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaAuthenticated"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaSecured"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaFailed"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaActorSCI"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaActorsPriority"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaKeyServerPriority"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaKeyServerSCI"), ("IEEE8021X-PAE-MIB", "ieee8021XKayAllowedJoinGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XKayAllowedFormGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XKayCreateNewGroup"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMacSecCapability"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMacSecDesired"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMacSecProtect"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMacSecReplayProtect"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMacSecValidate"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMacSecConfidentialityOffset"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaTxKN"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaTxAN"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaRxKN"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaRxAN"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaPartKMD"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaPartNID"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaPartCached"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaPartActive"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaPartRetain"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaPartActivateControl"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaPartPrincipal"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaPartDistCKN"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaPartRowStatus"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaPeerListMN"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaPeerListType"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaPeerListSCI"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021XPaeKaYMkaGroup = ieee8021XPaeKaYMkaGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeKaYMkaGroup.setDescription('A collection of objects providing monitoring and controlling\n        information of a KaY MKA in the system.')
ieee8021XPaeNetworkIdentifierGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 15, 2, 2, 8)).setObjects(("IEEE8021X-PAE-MIB", "ieee8021XLogonNIDConnectedNID"), ("IEEE8021X-PAE-MIB", "ieee8021XLogonNIDRequestedNID"), ("IEEE8021X-PAE-MIB", "ieee8021XLogonNIDSelectedNID"), ("IEEE8021X-PAE-MIB", "ieee8021XNidUseEap"), ("IEEE8021X-PAE-MIB", "ieee8021XNidUnauthAllowed"), ("IEEE8021X-PAE-MIB", "ieee8021XNidUnsecuredAllowed"), ("IEEE8021X-PAE-MIB", "ieee8021XNidUnauthenticatedAccess"), ("IEEE8021X-PAE-MIB", "ieee8021XNidAccessCapabilities"), ("IEEE8021X-PAE-MIB", "ieee8021XNidKMD"), ("IEEE8021X-PAE-MIB", "ieee8021XNidRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021XPaeNetworkIdentifierGroup = ieee8021XPaeNetworkIdentifierGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeNetworkIdentifierGroup.setDescription('A collection of objects providing monitoring and controlling\n        information of an NID in the system.')
ieee8021XPaeAnnouncerGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 15, 2, 2, 9)).setObjects(("IEEE8021X-PAE-MIB", "ieee8021XAnnounceAccessStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021XPaeAnnouncerGroup = ieee8021XPaeAnnouncerGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeAnnouncerGroup.setDescription('A collection of objects providing status information for\n        an Announcer in the system.')
ieee8021XPaeListenerGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 15, 2, 2, 10)).setObjects(("IEEE8021X-PAE-MIB", "ieee8021XAnnouncementKMD"), ("IEEE8021X-PAE-MIB", "ieee8021XAnnouncementSpecific"), ("IEEE8021X-PAE-MIB", "ieee8021XAnnouncementAccessStatus"), ("IEEE8021X-PAE-MIB", "ieee8021XAnnouncementAccessRequested"), ("IEEE8021X-PAE-MIB", "ieee8021XAnnouncementUnauthAccess"), ("IEEE8021X-PAE-MIB", "ieee8021XAnnouncementCapabilities"), ("IEEE8021X-PAE-MIB", "ieee8021XAnnouncementCipherCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021XPaeListenerGroup = ieee8021XPaeListenerGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeListenerGroup.setDescription('A collection of objects providing status information for\n        a Listener in the system.')
ieee8021XPaeKaYIsupgradeGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 15, 2, 2, 11)).setObjects(("IEEE8021X-PAE-MIB", "ieee8021XKayMkaSuspendFor"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaSuspendOnRequest"), ("IEEE8021X-PAE-MIB", "ieee8021XKayMkaSuspendedWhile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021XPaeKaYIsupgradeGroup = ieee8021XPaeKaYIsupgradeGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeKaYIsupgradeGroup.setDescription('A collection of objects providing monitoring and control\n        for MKA support of in-service upgrades.')
ieee8021XPaeSystemAddGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 15, 2, 2, 12)).setObjects(("IEEE8021X-PAE-MIB", "ieee8021XPaeEapolGroupMAC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021XPaeSystemAddGroup = ieee8021XPaeSystemAddGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021XPaeSystemAddGroup.setDescription('Objects previously overlooked, added by maintenance.')
mibBuilder.exportSymbols("IEEE8021X-PAE-MIB", ieee8021XEapolLastRxFrameVersion=ieee8021XEapolLastRxFrameVersion, ieee8021XPaeEapol=ieee8021XPaeEapol, Ieee8021XMkaMI=Ieee8021XMkaMI, ieee8021XAuthPaeRetryMax=ieee8021XAuthPaeRetryMax, ieee8021XEapolEapLengthErrorFramesRx=ieee8021XEapolEapLengthErrorFramesRx, ieee8021XAnnouncementCipherSuite=ieee8021XAnnouncementCipherSuite, ieee8021XPaePortSessionPktsTx=ieee8021XPaePortSessionPktsTx, ieee8021XKayMkaSecured=ieee8021XKayMkaSecured, ieee8021XEapolMkaFramesTx=ieee8021XEapolMkaFramesTx, ieee8021XKayMkaPartRetain=ieee8021XKayMkaPartRetain, ieee8021XPaePortSessionOctetsRx=ieee8021XPaePortSessionOctetsRx, ieee8021XSuppPaeAuthenticated=ieee8021XSuppPaeAuthenticated, ieee8021XPaeNetworkIdentifier=ieee8021XPaeNetworkIdentifier, ieee8021XAnnouncementAccessRequested=ieee8021XAnnouncementAccessRequested, ieee8021XKayMkaSuspendOnRequest=ieee8021XKayMkaSuspendOnRequest, Ieee8021XPaeNIDOrNull=Ieee8021XPaeNIDOrNull, ieee8021XKayMkaPeerListSCI=ieee8021XKayMkaPeerListSCI, ieee8021XKayMacSecDesired=ieee8021XKayMacSecDesired, ieee8021XKayMkaParticipantEntry=ieee8021XKayMkaParticipantEntry, ieee8021XPacGroup=ieee8021XPacGroup, ieee8021XPacPortTable=ieee8021XPacPortTable, Ieee8021XMkaKeyServerPriority=Ieee8021XMkaKeyServerPriority, ieee8021XPaeSysMkaVersion=ieee8021XPaeSysMkaVersion, ieee8021XPaeSessionControlledPortNumber=ieee8021XPaeSessionControlledPortNumber, ieee8021XEapolLastRxFrameSource=ieee8021XEapolLastRxFrameSource, ieee8021XPaePortInitialize=ieee8021XPaePortInitialize, ieee8021XPaePortNumber=ieee8021XPaePortNumber, ieee8021XKayMkaRxKN=ieee8021XKayMkaRxKN, ieee8021XAuthPaeRetryCount=ieee8021XAuthPaeRetryCount, Ieee8021XPaeCKN=Ieee8021XPaeCKN, ieee8021XEapolEapFramesRx=ieee8021XEapolEapFramesRx, ieee8021XKayMkaPartActivateControl=ieee8021XKayMkaPartActivateControl, ieee8021XEapolLogoffFramesRx=ieee8021XEapolLogoffFramesRx, ieee8021XEapolAnnouncementFramesTx=ieee8021XEapolAnnouncementFramesTx, ieee8021XPaeLogon=ieee8021XPaeLogon, ieee8021XAuthPaeReAuthEnabled=ieee8021XAuthPaeReAuthEnabled, ieee8021XAnnouncementKMD=ieee8021XAnnouncementKMD, ieee8021XNidUnauthenticatedAccess=ieee8021XNidUnauthenticatedAccess, ieee8021XKayMkaPeerListMI=ieee8021XKayMkaPeerListMI, ieee8021XKayMacSecConfidentialityOffset=ieee8021XKayMacSecConfidentialityOffset, ieee8021XAuthPaeAuthenticated=ieee8021XAuthPaeAuthenticated, ieee8021XPaePortLogonEntry=ieee8021XPaePortLogonEntry, ieee8021XKayMkaTxKN=ieee8021XKayMkaTxKN, ieee8021XAuthPaeReauthPeriod=ieee8021XAuthPaeReauthPeriod, Ieee8021XPaeNID=Ieee8021XPaeNID, ieee8021XKayMkaTable=ieee8021XKayMkaTable, ieee8021XEapolMkNoCknFramesRx=ieee8021XEapolMkNoCknFramesRx, ieee8021XEapolAnnouncementReqFramesRx=ieee8021XEapolAnnouncementReqFramesRx, ieee8021XKayMkaTxAN=ieee8021XKayMkaTxAN, ieee8021XPaeKaY=ieee8021XPaeKaY, ieee8021XAuthenticatorEntry=ieee8021XAuthenticatorEntry, ieee8021XPacPortOperPt2PtMAC=ieee8021XPacPortOperPt2PtMAC, ieee8021XPaePortLogonTable=ieee8021XPaePortLogonTable, ieee8021XPaeKaYIsupgradeGroup=ieee8021XPaeKaYIsupgradeGroup, ieee8021XPaeMIBConformance=ieee8021XPaeMIBConformance, ieee8021XPaePortMaxVirtualPorts=ieee8021XPaePortMaxVirtualPorts, Ieee8021XMkaKN=Ieee8021XMkaKN, ieee8021XPaePortSessionPktsRx=ieee8021XPaePortSessionPktsRx, ieee8021XAnnounceEntry=ieee8021XAnnounceEntry, ieee8021XSupplicantEntry=ieee8021XSupplicantEntry, ieee8021XPaePortType=ieee8021XPaePortType, ieee8021XKayMkaFailed=ieee8021XKayMkaFailed, ieee8021XNidUseEap=ieee8021XNidUseEap, ieee8021XPaePortSessionId=ieee8021XPaePortSessionId, ieee8021XPaePortEntry=ieee8021XPaePortEntry, ieee8021XPaeSysAnnouncements=ieee8021XPaeSysAnnouncements, ieee8021XPaeEapolGroupMAC=ieee8021XPaeEapolGroupMAC, ieee8021XSuppPaeRetryCount=ieee8021XSuppPaeRetryCount, ieee8021XKayMkaPartDistCKN=ieee8021XKayMkaPartDistCKN, ieee8021XPaePortVirtualPortStart=ieee8021XPaePortVirtualPortStart, ieee8021XPacPortEntry=ieee8021XPacPortEntry, ieee8021XPaePortPortValid=ieee8021XPaePortPortValid, ieee8021XPaeSysEapolVersion=ieee8021XPaeSysEapolVersion, ieee8021XNidUnauthAllowed=ieee8021XNidUnauthAllowed, ieee8021XKayMkaAuthenticated=ieee8021XKayMkaAuthenticated, ieee8021XPaePortSessionIntervalTime=ieee8021XPaePortSessionIntervalTime, ieee8021XKayAllowedJoinGroup=ieee8021XKayAllowedJoinGroup, ieee8021XPaePortAnnouncerEnable=ieee8021XPaePortAnnouncerEnable, ieee8021XKayMkaPeerListEntry=ieee8021XKayMkaPeerListEntry, ieee8021XAnnounceAccessStatus=ieee8021XAnnounceAccessStatus, ieee8021XPaeAuthConfigGroup=ieee8021XPaeAuthConfigGroup, ieee8021XPaePortLogonConnectStatus=ieee8021XPaePortLogonConnectStatus, ieee8021XKayMkaEntry=ieee8021XKayMkaEntry, ieee8021XPaePortCurrentVirtualPorts=ieee8021XPaePortCurrentVirtualPorts, Ieee8021XPaeNIDUnauthenticatedStatus=Ieee8021XPaeNIDUnauthenticatedStatus, ieee8021XEapolStatsTable=ieee8021XEapolStatsTable, Ieee8021XPaeNIDAccessStatus=Ieee8021XPaeNIDAccessStatus, ieee8021XPaePortSessionUserName=ieee8021XPaePortSessionUserName, ieee8021XPaePortLogonEnable=ieee8021XPaePortLogonEnable, ieee8021XPaePortSupplicantEnable=ieee8021XPaePortSupplicantEnable, ieee8021XKayMkaPartCKN=ieee8021XKayMkaPartCKN, ieee8021XPaeAuthenticator=ieee8021XPaeAuthenticator, ieee8021XKayMkaRxAN=ieee8021XKayMkaRxAN, ieee8021XKayMkaPartCached=ieee8021XKayMkaPartCached, ieee8021XKayMkaPeerListMN=ieee8021XKayMkaPeerListMN, ieee8021XNidConfigEntry=ieee8021XNidConfigEntry, ieee8021XNidAccessCapabilities=ieee8021XNidAccessCapabilities, Ieee8021XPaeKMD=Ieee8021XPaeKMD, ieee8021XPaeEapolStatsGroup=ieee8021XPaeEapolStatsGroup, ieee8021XAnnouncementSpecific=ieee8021XAnnouncementSpecific, ieee8021XPaePortVirtualPortPeerMAC=ieee8021XPaePortVirtualPortPeerMAC, ieee8021XPaeKaYMkaGroup=ieee8021XPaeKaYMkaGroup, ieee8021XEapolAnnouncementFramesRx=ieee8021XEapolAnnouncementFramesRx, ieee8021XPaePortSessionTable=ieee8021XPaePortSessionTable, ieee8021XPaePortVirtualPortsEnable=ieee8021XPaePortVirtualPortsEnable, ieee8021XKayMkaActorsPriority=ieee8021XKayMkaActorsPriority, ieee8021XEapolAuthEapFramesTx=ieee8021XEapolAuthEapFramesTx, ieee8021XPaeMIBObjects=ieee8021XPaeMIBObjects, ieee8021XPaePortSessionTerminate=ieee8021XPaePortSessionTerminate, ieee8021XLogonNIDEntry=ieee8021XLogonNIDEntry, ieee8021XKayMkaKeyServerSCI=ieee8021XKayMkaKeyServerSCI, ieee8021XKayCreateNewGroup=ieee8021XKayCreateNewGroup, ieee8021XSuppPaeAuthenticate=ieee8021XSuppPaeAuthenticate, ieee8021XKayMkaPartActive=ieee8021XKayMkaPartActive, ieee8021XPaeGroups=ieee8021XPaeGroups, ieee8021XAnnouncementTable=ieee8021XAnnouncementTable, ieee8021XEapolStartFramesTx=ieee8021XEapolStartFramesTx, ieee8021XPaeUncontrolledPortNumber=ieee8021XPaeUncontrolledPortNumber, ieee8021XAnnouncementUnauthAccess=ieee8021XAnnouncementUnauthAccess, ieee8021XPaeMIBNotifications=ieee8021XPaeMIBNotifications, ieee8021XKayAllowedFormGroup=ieee8021XKayAllowedFormGroup, ieee8021XPaeListenerGroup=ieee8021XPaeListenerGroup, ieee8021XNidRowStatus=ieee8021XNidRowStatus, ieee8021XKayMkaActorSCI=ieee8021XKayMkaActorSCI, ieee8021XKayMkaPeerListTable=ieee8021XKayMkaPeerListTable, ieee8021XNidKMD=ieee8021XNidKMD, ieee8021XEapolLogoffFramesTx=ieee8021XEapolLogoffFramesTx, ieee8021XPaePortCapabilities=ieee8021XPaePortCapabilities, ieee8021XLogonNIDTable=ieee8021XLogonNIDTable, ieee8021XKayMkaActive=ieee8021XKayMkaActive, ieee8021XPaePortSessionOctetsTx=ieee8021XPaePortSessionOctetsTx, ieee8021XAnnouncementCipherSuitesTable=ieee8021XAnnouncementCipherSuitesTable, ieee8021XSupplicantTable=ieee8021XSupplicantTable, ieee8021XAnnouncementCipherCapability=ieee8021XAnnouncementCipherCapability, ieee8021XPaeControlledPortNumber=ieee8021XPaeControlledPortNumber, ieee8021XKayMkaSuspendFor=ieee8021XKayMkaSuspendFor, ieee8021XPaePortSessionStartTime=ieee8021XPaePortSessionStartTime, ieee8021XPaeCommonPortNumber=ieee8021XPaeCommonPortNumber, ieee8021XPaeMIB=ieee8021XPaeMIB, ieee8021XLogonNIDConnectedNID=ieee8021XLogonNIDConnectedNID, PYSNMP_MODULE_ID=ieee8021XPaeMIB, Ieee8021XPaeCKNOrNull=Ieee8021XPaeCKNOrNull, ieee8021XSuppPaeHelloPeriod=ieee8021XSuppPaeHelloPeriod, ieee8021XPaeSupplicant=ieee8021XPaeSupplicant, ieee8021XPacPortAdminPt2PtMAC=ieee8021XPacPortAdminPt2PtMAC, ieee8021XAnnouncementCipherSuitesEntry=ieee8021XAnnouncementCipherSuitesEntry, ieee8021XLogonNIDRequestedNID=ieee8021XLogonNIDRequestedNID, ieee8021XAnnounceNID=ieee8021XAnnounceNID, ieee8021XKayMkaParticipantTable=ieee8021XKayMkaParticipantTable, ieee8021XAuthPaeQuietPeriod=ieee8021XAuthPaeQuietPeriod, ieee8021XAuthPaeAuthenticate=ieee8021XAuthPaeAuthenticate, ieee8021XPaePortAuthenticatorEnable=ieee8021XPaePortAuthenticatorEnable, ieee8021XEapolInvalidFramesRx=ieee8021XEapolInvalidFramesRx, ieee8021XAnnouncementAccessStatus=ieee8021XAnnouncementAccessStatus, ieee8021XKayMacSecValidate=ieee8021XKayMacSecValidate, ieee8021XPaeCompliance=ieee8021XPaeCompliance, ieee8021XKayMkaPartRowStatus=ieee8021XKayMkaPartRowStatus, ieee8021XNidUnsecuredAllowed=ieee8021XNidUnsecuredAllowed, ieee8021XAnnouncementNID=ieee8021XAnnouncementNID, ieee8021XPaeSystem=ieee8021XPaeSystem, ieee8021XLogonNIDSelectedNID=ieee8021XLogonNIDSelectedNID, ieee8021XSuppPaeFailed=ieee8021XSuppPaeFailed, ieee8021XPaePortSessionEntry=ieee8021XPaePortSessionEntry, ieee8021XAnnouncementEntry=ieee8021XAnnouncementEntry, ieee8021XKayMacSecReplayProtect=ieee8021XKayMacSecReplayProtect, ieee8021XPaeSystemGroup=ieee8021XPaeSystemGroup, ieee8021XKayMkaSuspendedWhile=ieee8021XKayMkaSuspendedWhile, ieee8021XPaeAnnouncerGroup=ieee8021XPaeAnnouncerGroup, ieee8021XEapolAnnouncementReqFramesTx=ieee8021XEapolAnnouncementReqFramesTx, ieee8021XEapolMkInvalidFramesRx=ieee8021XEapolMkInvalidFramesRx, ieee8021XEapolSuppEapFramesTx=ieee8021XEapolSuppEapFramesTx, ieee8021XAuthenticatorTable=ieee8021XAuthenticatorTable, ieee8021XKayMkaKeyServerPriority=ieee8021XKayMkaKeyServerPriority, ieee8021XEapolStatsEntry=ieee8021XEapolStatsEntry, Ieee8021XPaeNIDCapabilites=Ieee8021XPaeNIDCapabilites, ieee8021XPaeSysAccessControl=ieee8021XPaeSysAccessControl, ieee8021XKayMacSecProtect=ieee8021XKayMacSecProtect, ieee8021XKayMkaPartKMD=ieee8021XKayMkaPartKMD, ieee8021XKayMkaPeerListType=ieee8021XKayMkaPeerListType, ieee8021XPaePortKayMkaEnable=ieee8021XPaePortKayMkaEnable, ieee8021XPaePortListenerEnable=ieee8021XPaePortListenerEnable, ieee8021XKayMkaPartPrincipal=ieee8021XKayMkaPartPrincipal, ieee8021XNidNID=ieee8021XNidNID, ieee8021XKayMkaPartNID=ieee8021XKayMkaPartNID, ieee8021XPaeSuppConfigGroup=ieee8021XPaeSuppConfigGroup, ieee8021XSuppPaeRetryMax=ieee8021XSuppPaeRetryMax, Ieee8021XMkaMN=Ieee8021XMkaMN, ieee8021XPaeSystemAddGroup=ieee8021XPaeSystemAddGroup, ieee8021XPaePortTable=ieee8021XPaePortTable, ieee8021XPaeCompliances=ieee8021XPaeCompliances, ieee8021XEapolPortUnavailableFramesRx=ieee8021XEapolPortUnavailableFramesRx, ieee8021XKayMacSecCapability=ieee8021XKayMacSecCapability, ieee8021XPaeNetworkIdentifierGroup=ieee8021XPaeNetworkIdentifierGroup, ieee8021XPacPortControlledPortNumber=ieee8021XPacPortControlledPortNumber, ieee8021XEapolStartFramesRx=ieee8021XEapolStartFramesRx, ieee8021XPaeLogonGroup=ieee8021XPaeLogonGroup, ieee8021XNidConfigTable=ieee8021XNidConfigTable, ieee8021XAnnounceTable=ieee8021XAnnounceTable, ieee8021XPaeV2Compliance=ieee8021XPaeV2Compliance, ieee8021XAuthPaeFailed=ieee8021XAuthPaeFailed, ieee8021XAnnouncementCapabilities=ieee8021XAnnouncementCapabilities)
