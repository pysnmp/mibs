#
# PySNMP MIB module APRADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/oracle/APRADIUS-MIB
# Produced by pysmi-1.1.12 at Wed May 29 08:05:24 2024
# On host fv-az1024-251 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, Unsigned32, ModuleIdentity, iso, NotificationType, Integer32, MibIdentifier, TimeTicks, Counter32, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "Unsigned32", "ModuleIdentity", "iso", "NotificationType", "Integer32", "MibIdentifier", "TimeTicks", "Counter32", "Gauge32", "Bits")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
apRadiusServerModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 18))
apRadiusServerModule.setRevisions(('2014-06-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apRadiusServerModule.setRevisionsDescriptions(('Updated Organization and Contact info.',))
if mibBuilder.loadTexts: apRadiusServerModule.setLastUpdated('201406260000Z')
if mibBuilder.loadTexts: apRadiusServerModule.setOrganization('Oracle Communications')
if mibBuilder.loadTexts: apRadiusServerModule.setContactInfo('           \tCustomer Service\r\n\t\t \tPostal:\t\tOracle Communications\r\n\t\t\t\t\t100 Crosby Drive \r\n\t\t\t\t\tBedford, MA 01730\r\n\t\t\t\t\tUS\r\n\t\t    \tTel:\t\t1-800-633-0738\r\n\t\t\tUrl:\t\twww.oracle.com\r\n\t\t \tE-mail:\t\tsupport@oracle.com')
if mibBuilder.loadTexts: apRadiusServerModule.setDescription('The Net-Net RADIUS MIB for Oracle Communications Acme Packet SBCs')
apRadiusServerMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1))
apRadiusServerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1), )
if mibBuilder.loadTexts: apRadiusServerStatsTable.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerStatsTable.setDescription('The table of RADIUS statistics per RADIUS server.')
apRadiusServerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1), ).setIndexNames((0, "APRADIUS-MIB", "apRadiusServerAddressType"), (0, "APRADIUS-MIB", "apRadiusServerAddress"))
if mibBuilder.loadTexts: apRadiusServerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerStatsEntry.setDescription('RADIUS negotiation statistics for an RADIUS server.')
apRadiusServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerAddressType.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerAddressType.setDescription('IPAddress type of the RADIUS server')
apRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerAddress.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerAddress.setDescription('IPAddress of  the RADIUS server')
apRadiusServerRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerRoundTripTime.setDescription('Average Round Trip Time for response on this RADIUS Server')
apRadiusServerMalformedAccessResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerMalformedAccessResponse.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerMalformedAccessResponse.setDescription('The count of Malformed Access Response on this RADIUS Server')
apRadiusServerAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerAccessRequests.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerAccessRequests.setDescription('The count of Access Requests on this RADIUS Server')
apRadiusServerDisconnectRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerDisconnectRequests.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerDisconnectRequests.setDescription('The count of Disconnect Requests on this RADIUS Server')
apRadiusServerDisconnectACKs = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerDisconnectACKs.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerDisconnectACKs.setDescription('The count of Disconnect ACKs on this RADIUS Server')
apRadiusServerDisconnectNACks = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerDisconnectNACks.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerDisconnectNACks.setDescription('The count of Disconnect NACKs on this RADIUS Server')
apRadiusServerBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerBadAuthenticators.setDescription('The count of Bad Authenticators on this RADIUS Server')
apRadiusServerAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerAccessRetransmissions.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerAccessRetransmissions.setDescription('The count of Access Retransmissions on this RADIUS Server')
apRadiusServerAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerAccessAccepts.setDescription('The count of Access Accepts on this RADIUS Server')
apRadiusServerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerTimeouts.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerTimeouts.setDescription('The count of Timeouts for response on this RADIUS Server')
apRadiusServerAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerAccessRejects.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerAccessRejects.setDescription('The count of Access Rejects on this RADIUS Server')
apRadiusServerUnknownPDUTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerUnknownPDUTypes.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerUnknownPDUTypes.setDescription('The count of Unknown PDU Types received on this RADIUS Server')
apRadiusServerAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 18, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusServerAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: apRadiusServerAccessChallenges.setDescription('The count of Access Challenges  on this RADIUS Server')
apRadiusServerConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 18, 2))
apRadiusObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 18, 2, 1))
apRadiusInterfaceStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 18, 2, 1, 1)).setObjects(("APRADIUS-MIB", "apRadiusServerRoundTripTime"), ("APRADIUS-MIB", "apRadiusServerMalformedAccessResponse"), ("APRADIUS-MIB", "apRadiusServerAccessRequests"), ("APRADIUS-MIB", "apRadiusServerDisconnectRequests"), ("APRADIUS-MIB", "apRadiusServerDisconnectACKs"), ("APRADIUS-MIB", "apRadiusServerDisconnectNACks"), ("APRADIUS-MIB", "apRadiusServerBadAuthenticators"), ("APRADIUS-MIB", "apRadiusServerAccessRetransmissions"), ("APRADIUS-MIB", "apRadiusServerAccessAccepts"), ("APRADIUS-MIB", "apRadiusServerTimeouts"), ("APRADIUS-MIB", "apRadiusServerAccessRejects"), ("APRADIUS-MIB", "apRadiusServerUnknownPDUTypes"), ("APRADIUS-MIB", "apRadiusServerAccessChallenges"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apRadiusInterfaceStatsGroup = apRadiusInterfaceStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apRadiusInterfaceStatsGroup.setDescription('A collection of statistics for RADIUS server.')
mibBuilder.exportSymbols("APRADIUS-MIB", apRadiusServerDisconnectNACks=apRadiusServerDisconnectNACks, apRadiusServerModule=apRadiusServerModule, apRadiusServerStatsEntry=apRadiusServerStatsEntry, PYSNMP_MODULE_ID=apRadiusServerModule, apRadiusServerBadAuthenticators=apRadiusServerBadAuthenticators, apRadiusServerMIBObjects=apRadiusServerMIBObjects, apRadiusServerAccessRetransmissions=apRadiusServerAccessRetransmissions, apRadiusServerRoundTripTime=apRadiusServerRoundTripTime, apRadiusServerConformance=apRadiusServerConformance, apRadiusServerDisconnectACKs=apRadiusServerDisconnectACKs, apRadiusServerStatsTable=apRadiusServerStatsTable, apRadiusServerAddress=apRadiusServerAddress, apRadiusInterfaceStatsGroup=apRadiusInterfaceStatsGroup, apRadiusServerUnknownPDUTypes=apRadiusServerUnknownPDUTypes, apRadiusServerAccessAccepts=apRadiusServerAccessAccepts, apRadiusServerAccessRequests=apRadiusServerAccessRequests, apRadiusServerAccessRejects=apRadiusServerAccessRejects, apRadiusObjectGroups=apRadiusObjectGroups, apRadiusServerTimeouts=apRadiusServerTimeouts, apRadiusServerMalformedAccessResponse=apRadiusServerMalformedAccessResponse, apRadiusServerAccessChallenges=apRadiusServerAccessChallenges, apRadiusServerDisconnectRequests=apRadiusServerDisconnectRequests, apRadiusServerAddressType=apRadiusServerAddressType)
