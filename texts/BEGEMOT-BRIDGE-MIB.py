#
# PySNMP MIB module BEGEMOT-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/pfsense/BEGEMOT-BRIDGE-MIB
# Produced by pysmi-1.1.12 at Wed Dec  4 21:19:29 2024
# On host fv-az585-169 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
begemot, = mibBuilder.importSymbols("BEGEMOT-MIB", "begemot")
BridgeId, Timeout = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId", "Timeout")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
mib_2, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, iso, ModuleIdentity, Gauge32, ObjectIdentity, Counter64, Counter32, Bits, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "mib-2", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "iso", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Counter64", "Counter32", "Bits", "MibIdentifier", "NotificationType")
TruthValue, RowStatus, TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString", "MacAddress")
begemotBridge = ModuleIdentity((1, 3, 6, 1, 4, 1, 12325, 1, 205))
begemotBridge.setRevisions(('2007-08-06 00:00', '2006-11-21 00:00', '2006-07-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: begemotBridge.setRevisionsDescriptions(('Third revision adds begemotBridgeBasePortPrivate\n\t     object.', 'Second revision adds support for monitoring RSTP\n\t     specific variables.', 'Initial revision.',))
if mibBuilder.loadTexts: begemotBridge.setLastUpdated('200708060000Z')
if mibBuilder.loadTexts: begemotBridge.setOrganization('Sofia University St. Kliment Ohridski')
if mibBuilder.loadTexts: begemotBridge.setContactInfo('\t\tShteryana Shopova\n\n\t     Postal:\tFaculty of Mathematics and Informatics\n\t\t\t5 James Bourchier Blvd.\n\t\t\t1164 Sofia\n\t\t\tBulgaria\n\n\t     Fax:\t+359 2 687 180\n\n\t     E-Mail:\tsyrinx@FreeBSD.org')
if mibBuilder.loadTexts: begemotBridge.setDescription('The Begemot MIB for managing bridge interfaces.')
class BridgeIfName(TextualConvention, OctetString):
    description = 'Name of a bridge interface.'
    status = 'current'
    displayHint = '16a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 16)

class BridgeIfNameOrEmpty(TextualConvention, OctetString):
    description = 'Name of a bridge interface.'
    status = 'current'
    displayHint = '16a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class BridgePortId(TextualConvention, OctetString):
    description = "A port identifier that contains a bridge port's STP priority\n\tin the first octet and the port number in the second octet."
    status = 'current'
    displayHint = '1x.1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

begemotBridgeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 205, 0))
begemotBridgeBase = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1))
begemotBridgeStp = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2))
begemotBridgeTp = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3))
begemotBridgePf = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 205, 4))
begemotBridgeConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 205, 5))
begemotBridgeBaseTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 1), )
if mibBuilder.loadTexts: begemotBridgeBaseTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseTable.setDescription('A table that contains generic information for each\n\tbridge interface on the managed device.')
begemotBridgeBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 1, 1), ).setIndexNames((0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBaseName"))
if mibBuilder.loadTexts: begemotBridgeBaseEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseEntry.setDescription('A list of information for the bridge interfaces on\n\tthe managed device.')
begemotBridgeBaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 1, 1, 1), BridgeIfName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBaseName.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseName.setDescription('The name of the bridge interface for which this\n\tentry contains management information.')
begemotBridgeBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBaseAddress.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseAddress.setDescription('The MAC address of the bridge interface.')
begemotBridgeBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBaseNumPorts.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseNumPorts.setDescription('The number of ports, members of this bridge.')
begemotBridgeBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBaseType.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseType.setDescription('Indicates what type of bridging this bridge can\n\tperform.')
begemotBridgeBaseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: begemotBridgeBaseStatus.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseStatus.setDescription('Used to create/destroy bridge interfaces on the\n\tmanaged device.')
begemotBridgeBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2), )
if mibBuilder.loadTexts: begemotBridgeBasePortTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePortTable.setDescription('A table containing generic information about ports,\n\tmembers of each bridge interface.')
begemotBridgeBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1), ).setIndexNames((0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBaseName"), (0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBasePortIfIndex"))
if mibBuilder.loadTexts: begemotBridgeBasePortEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePortEntry.setDescription('A list of information about a specific port, member of\n\ta bridge interface.')
begemotBridgeBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBasePort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePort.setDescription('The system interface index of the interface corresponding\n\tto this port.')
begemotBridgeBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBasePortIfIndex.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePortIfIndex.setDescription('The value of the instance of the ifIndex object,\n\tdefined in IF-MIB, for the interface corresponding\n\tto this port.')
begemotBridgeBaseSpanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeBaseSpanEnabled.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseSpanEnabled.setDescription('The value of this objects reflects whether the port\n\tis a span port on the specified bridge interface.')
begemotBridgeBasePortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBasePortDelayExceededDiscards.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePortDelayExceededDiscards.setDescription('The number of frames discarded by this port due\n\tto excessive transit delay through the bridge.')
begemotBridgeBasePortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBasePortMtuExceededDiscards.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePortMtuExceededDiscards.setDescription('The number of frames discarded by this port due\n\tto an excessive size.')
begemotBridgeBasePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: begemotBridgeBasePortStatus.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePortStatus.setDescription('Used to control addition of member ports to or\n\tremoval of member ports from a specified bridge.')
begemotBridgeBasePortPrivate = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeBasePortPrivate.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePortPrivate.setDescription('The value of this objects reflects whether the port\n\thas a PRIVATE flag set. A port with this flags set\n\tcan only communicate with ports not having the\n\tPRIVATE flag set.')
begemotBridgeStpTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1), )
if mibBuilder.loadTexts: begemotBridgeStpTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpTable.setDescription('A table that contains Spanning Tree Protocol information\n\tfor each bridge interface on the managed device.')
begemotBridgeStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1), )
begemotBridgeBaseEntry.registerAugmentions(("BEGEMOT-BRIDGE-MIB", "begemotBridgeStpEntry"))
begemotBridgeStpEntry.setIndexNames(*begemotBridgeBaseEntry.getIndexNames())
if mibBuilder.loadTexts: begemotBridgeStpEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpEntry.setDescription('A list of information about the Spanning Tree Protocol\n\toperation on a bridge interface.')
begemotBridgeStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpProtocolSpecification.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpProtocolSpecification.setDescription("The Spanning Tree Protocol version being run on the\n\tbridge interface. The value 'decLb100(2)' indicates the\n\tDEC LANbridge 100 Spanning Tree protocol, 'ieee8021d(3)'\n\tindicates the bridge is running IEEE 802.1D STP\n\timplementation.")
begemotBridgeStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPriority.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPriority.setDescription('The priority value of the bridge interface forming the\n\tfirst two octets of the bridge identifier. Acceptable\n\tvalues are 0-61440, in steps of 4096.')
begemotBridgeStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 3), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpTimeSinceTopologyChange.setDescription('The time (in hundreds of a second) since a topology change\n\twas last detected by this bridge.')
begemotBridgeStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpTopChanges.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpTopChanges.setDescription('The number of times a topology change was detected by the\n\tbridge interface since the management entity was initialized\n\tor reset.')
begemotBridgeStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpDesignatedRoot.setDescription('The bridge identifier of the root of the spanning tree as\n\tcalculated by the Spanning Tree Protocol.')
begemotBridgeStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpRootCost.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpRootCost.setDescription('The cost of the path from this bridge to the root bridge.')
begemotBridgeStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpRootPort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpRootPort.setDescription('The port number of the port that offers the lowest\n\tcost path from this bridge to the root bridge of\n\tthe spanning tree. If this bridge is the root bridge,\n\tthis object shall have a value of zero.')
begemotBridgeStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 8), Timeout()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpMaxAge.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpMaxAge.setDescription('The maximum age of Spanning Tree Protocol information\n\treceived from the network on any port, before that\n\tinformation is discarded. This is the actual value that\n\tthe bridge is currently using.')
begemotBridgeStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 9), Timeout()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpHelloTime.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpHelloTime.setDescription('The amount of time between transmission of\n\tConfiguration BPDUs by this bridge on any port,\n\twhen it is the root of the spanning tree or is\n\ttrying to become so. This is the actual value that\n\tthis bridge is currently using.')
begemotBridgeStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 10), Integer32()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpHoldTime.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpHoldTime.setDescription('This time value determines the interval length\n\tduring which no more than two Configuration BPDUs\n\tshall be transmitted by this node, in units of\n\thundredths of a second.')
begemotBridgeStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 11), Timeout()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpForwardDelay.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpForwardDelay.setDescription('This value, measured in units of hundredths of a second\n\tdetermines how long a port will stay consecutively in the\n\tListening and Learning states before transitioning to\n\tForwarding state.\n\tThis is the actual value currently used by the bridge\n\tas opposed to begemotBridgeStpBridgeForwardDelay, which\n\tis the value this and all bridges participating in the\n\tspanning tree were to use, if this was the root bridge.')
begemotBridgeStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 12), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setUnits('centi-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpBridgeMaxAge.setDescription('The value that all bridges participating in the\n\tspanning tree would use for MaxAge if this bridge\n\twas the root of the spanning tree.')
begemotBridgeStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 13), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('centi-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpBridgeHelloTime.setDescription('The value that all bridges participating in the\n\tspanning tree would use for HelloTime if this\n\tbridge was the root of the spanning tree.')
begemotBridgeStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 14), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setUnits('centi-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpBridgeForwardDelay.setDescription('The value that all bridges participating in the\n\tspanning tree would use for ForwardDelay if this\n\tbridge was the root of the spanning tree.')
begemotBridgeStpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpVersion.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpVersion.setDescription("The version of Spanning Tree Protocol the bridge is\n\tcurrently running.  The value 'stpCompatible(0)'\n\tindicates the Spanning Tree Protocol specified in\n\tIEEE 802.1D-1998 and 'rstp(2)' indicates the Rapid\n\tSpanning Tree Protocol specified in IEEE 802.1w and\n\tclause 17 of 802.1D-2004.  The values are directly from\n\tthe IEEE standard.  New values may be defined as future\n\tversions of the protocol become available.\n\n\tThe value of this object MUST be retained across\n\treinitializations of the management system.")
begemotBridgeStpTxHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpTxHoldCount.setDescription('The value used by the Port Transmit state machine to limit\n\tthe maximum transmission rate of BPDUs on the bridge interface.\n\n\tThe value of this object MUST be retained across\n\treinitializations of the management system.')
begemotBridgeStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2), )
if mibBuilder.loadTexts: begemotBridgeStpPortTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortTable.setDescription('A table containing Spanning Tree Protocol information\n\tabout the members of each bridge interface.')
begemotBridgeStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1), ).setIndexNames((0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBaseName"), (0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBasePortIfIndex"))
if mibBuilder.loadTexts: begemotBridgeStpPortEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortEntry.setDescription('A list of Spanning Tree Protocol information about\n\ta specific member of a bridge interface.')
begemotBridgeStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPort.setDescription('The system interface index of the interface corresponding\n\tto this port, for which the management entity has Spanning\n\tTree Protocol information.')
begemotBridgeStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPortPriority.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortPriority.setDescription('The STP priority of this port that is contained in the first\n\toctet of its Port Identifier. The second octet contains the\n\tvalue of begemotBridgeStpPort.')
begemotBridgeStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortState.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortState.setDescription('The current state of the port as defined by the operation\n\tof the Spanning Tree Protocol. If the Spanning Tree Protocol\n\tis administratively disabled on the port, this object shall\n\thave value disabled(1). A value of broken(6) does not correspond\n\tto any legal state of a port, and if present should indicate\n\terror in the operation of either the Spanning Tree Protocol\n\timplementation running on the device or the management entity.')
begemotBridgeStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPortEnable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortEnable.setDescription('The administrative Spanning Tree Protocol state of the\n\tport - value of enabled(1) indicates that the port is\n\tparticipating in the Spanning Tree Protocol operation.')
begemotBridgeStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPortPathCost.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortPathCost.setDescription('The contribution of the path through this port, when the port\n\tis the Root Port, to the total cost of the path to the root\n\tbridge for this bridge.')
begemotBridgeStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedRoot.setDescription('The unique Bridge Identifier of the bridge recorded as the\n\troot in the Root Identifier parameter of Configuration BPDUs\n\ttransmitted by the Designated Bridge for the LAN to which\n\tthe port is attached.')
begemotBridgeStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedCost.setDescription('For a Designated port, the path cost (equal to the Root\n\tPath Cost of the bridge) offered to the LAN to which the\n\tport is attached otherwise the cost of the path to the Root\n\toffered by the Designated Port on the LAN to which this\n\tPort is attached.')
begemotBridgeStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedBridge.setDescription('The unique Bridge Identifier of the bridge to which the\n\tport belongs, in the case when the port is a designated\n\tport, otherwise the bridge believed to be the Designated\n\tBridge for the LAN to which this port is attached.')
begemotBridgeStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 9), BridgePortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedPort.setDescription('The Port Identifier of the Bridge port, on the Designated\n\tBridge, through which the Designated Bridge transmits the\n\tConfiguration Message information stored by this port.')
begemotBridgeStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortForwardTransitions.setDescription('The number of times this port has transitioned\n\tfrom the Learning state to the Forwarding state.')
begemotBridgeStpExtPortTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3), )
if mibBuilder.loadTexts: begemotBridgeStpExtPortTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpExtPortTable.setDescription('A table that contains port-specific Rapid Spanning Tree\n\tinformation for the bridge interface members.')
begemotBridgeStpExtPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3, 1), )
begemotBridgeStpPortEntry.registerAugmentions(("BEGEMOT-BRIDGE-MIB", "begemotBridgeStpExtPortEntry"))
begemotBridgeStpExtPortEntry.setIndexNames(*begemotBridgeStpPortEntry.getIndexNames())
if mibBuilder.loadTexts: begemotBridgeStpExtPortEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpExtPortEntry.setDescription('A list of Rapid Spanning Tree information maintained by\n\teach bridge interface member.')
begemotBridgeStpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortProtocolMigration.setDescription('When operating in RSTP (version 2) mode, writing true(1)\n\tto this object forces this port to transmit RSTP BPDUs.\n\tAny other operation on this object has no effect and\n\tit always returns false(2) when read.')
begemotBridgeStpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPortAdminEdgePort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortAdminEdgePort.setDescription("The administrative value of the Edge Port parameter. A\n\tvalue of true(1) indicates that this port should be\n\tassumed as an edge-port, and a value of false(2) indicates\n\tthat this port should be assumed as a non-edge-port.\n\tSetting this object will also cause the corresponding\n\tinstance of begemotBridgeStpPortOperEdgePort to change to\n\tthe same value.  Note that even when this object's value\n\tis true, the value of the corresponding instance of\n\tbegemotBridgeStpPortOperEdgePort can be false if a BPDU\n\thas been received.\n\n\tThe value of this object MUST be retained across\n\treinitializations of the management system.")
begemotBridgeStpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortOperEdgePort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortOperEdgePort.setDescription('The operational value of the Edge Port parameter. The\n\tobject is initialized to the value of the corresponding\n\tinstance of begemotBridgeStpPortAdminEdgePort. When the\n\tcorresponding instance of begemotBridgeStpPortAdminEdgePort\n\tis set, this object will be changed as well. This object\n\twill also be changed to false on reception of a BPDU.')
begemotBridgeStpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortAdminPointToPoint.setDescription('The administrative point-to-point status of the LAN segment\n\tattached to this port, using the enumeration values of the\n\tIEEE 802.1w clause.  A value of forceTrue(0) indicates\n\tthat this port should always be treated as if it is\n\tconnected to a point-to-point link. A value of\n\tforceFalse(1) indicates that this port should be treated as\n\thaving a shared media connection.  A value of auto(2)\n\tindicates that this port is considered to have a\n\tpoint-to-point link if it is an Aggregator and all of its\n\tmembers are aggregatable, or if the MAC entity\n\tis configured for full duplex operation, either through\n\tauto-negotiation or by management means.  Manipulating this\n\tobject changes the underlying adminPortToPortMAC.\n\n\tThe value of this object MUST be retained across\n\treinitializations of the management system.')
begemotBridgeStpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortOperPointToPoint.setDescription('The operational point-to-point status of the LAN segment\n\tattached to this port. It indicates whether a port is\n\tconsidered to have a point-to-point connection.\n\tIf adminPointToPointMAC is set to auto(2), then the value\n\tof operPointToPointMAC is determined in accordance with the\n\tspecific procedures defined for the MAC entity concerned,\n\tas defined in IEEE 802.1w, clause 6.5. The value is\n\tdetermined dynamically; that is, it is re-evaluated whenever\n\tthe value of adminPointToPointMAC changes, and whenever\n\tthe specific procedures defined for the MAC entity evaluates\n\ta change in its point-to-point status.')
begemotBridgeStpPortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPortAdminPathCost.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortAdminPathCost.setDescription("The administratively assigned value for the contribution\n\tof this port to the path cost of paths toward the spanning\n\ttree root.\n\n\tWriting a value of '0' assigns the automatically calculated\n\tdefault Path Cost value to the port. If the default Path\n\tCost is being used, this object returns '0' when read.\n\n\tThis complements the object begemotBridgeStpPortPathCost or\n\tbegemotBridgeStpPortPathCost32, which returns the operational\n\tvalue of the path cost.\n\n\tThe value of this object MUST be retained across\n\treinitializations of the management system.")
begemotBridgeTpTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 1), )
if mibBuilder.loadTexts: begemotBridgeTpTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpTable.setDescription('A table that contains information regarding transparent\n\tbridging for each bridge interface on the managed device.')
begemotBridgeTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 1, 1), )
begemotBridgeBaseEntry.registerAugmentions(("BEGEMOT-BRIDGE-MIB", "begemotBridgeTpEntry"))
begemotBridgeTpEntry.setIndexNames(*begemotBridgeBaseEntry.getIndexNames())
if mibBuilder.loadTexts: begemotBridgeTpEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpEntry.setDescription('A list of information regarding transparent bridging\n\ton a bridge interface.')
begemotBridgeTpLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpLearnedEntryDiscards.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpLearnedEntryDiscards.setDescription("The total number of Forwarding Database entries that would\n\thave been learnt, but have been discarded due to Forwarding\n\tAddress Table having reached it's maximum entries limit.")
begemotBridgeTpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeTpAgingTime.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpAgingTime.setDescription('The timeout period in seconds before aging out\n        dynamically learnt forwarding entries.')
begemotBridgeTpMaxAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeTpMaxAddresses.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpMaxAddresses.setDescription("The maximum number of entires that this bridge can\n\tlearn in it's Forwarding Address Table and use for\n\tmaking forwarding decisions.")
begemotBridgeTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 2), )
if mibBuilder.loadTexts: begemotBridgeTpFdbTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpFdbTable.setDescription('A table that contains information about unicast entries\n\tfor which the bridge interfaces have forwarding and/or\n\tfiltering information. This information is used by the\n\tbridge interfaces to make forwarding decisions.')
begemotBridgeTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 2, 1), ).setIndexNames((0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBaseName"), (0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeTpFdbAddress"))
if mibBuilder.loadTexts: begemotBridgeTpFdbEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpFdbEntry.setDescription('Information about a specific unicast MAC address\n\tfor which the bridge interface has some forwarding\n\tand/or filtering information.')
begemotBridgeTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpFdbAddress.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpFdbAddress.setDescription('A unicast MAC address for which the bridge has which the\n\tbridge interface has some forwarding and/or filtering\n\tinformation.')
begemotBridgeTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpFdbPort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpFdbPort.setDescription('The port number of the bridge port on which a frame having\n\ta source address equal to the value of the corresponding\n\tinstance of begemotBridgeTpFdbAddress has been seen.')
begemotBridgeTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpFdbStatus.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpFdbStatus.setDescription("The status of this entry.  The meanings of the\n\tvalues are:\n\t    other(1) - none of the following.\n\t    invalid(2) - this entry is no longer valid (e.g.,\n\t\tit was learned but has since aged out), but has\n\t\tnot yet been flushed from the table.\n\t    learned(3) - the value of the corresponding instance\n\t\tof begemotBridgeTpFdbPort was learned, and is being\n\t\tused.\n\t    self(4) - the value of the corresponding instance of\n\t\tbegemotBridgeTpFdbAddress represents one of the\n\t\tbridge's addresses.  The corresponding instance of\n\t\tbegemotBridgeTpFdbPort indicates which of the bridge's\n\t\tports has this address.\n\t    mgmt(5) - the value of the corresponding instance of\n\t\tbegemotBridgeTpFdbAddress has been added to the\n\t\tbridge's Forwarding Database by some management\n\t\tmeans.")
begemotBridgeTpPortTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 3), )
if mibBuilder.loadTexts: begemotBridgeTpPortTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpPortTable.setDescription('A table that contains information about every bridge port,\n\tmember of a bridge interface, associated with the transparent\n\tbridging function of the bridge.')
begemotBridgeTpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 3, 1), ).setIndexNames((0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBaseName"), (0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBasePortIfIndex"))
if mibBuilder.loadTexts: begemotBridgeTpPortEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpPortEntry.setDescription("A list of information about every bridge port, member of a\n\tbridge interface, associated with the bridge's transparent\n\tbridging function.")
begemotBridgeTpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpPort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpPort.setDescription('The system interface index of the port for which this entry\n\tcontains Transparent bridging management information.')
begemotBridgeTpPortMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 3, 1, 2), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpPortMaxInfo.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpPortMaxInfo.setDescription('The maximum size of the INFO (non-MAC) field that this port\n\twill receive or transmit.')
begemotBridgeTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 3, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpPortInFrames.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpPortInFrames.setDescription('The number of frames that have been received by this\n\tport from its segment.  Note that a frame received on the\n\tinterface corresponding to this port is only counted by\n\tthis object if and only if it is for a protocol being\n\tprocessed by the local bridging function, including\n\tbridge management frames.')
begemotBridgeTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 3, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpPortOutFrames.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpPortOutFrames.setDescription('The number of frames that have been transmitted by this\n\tport to its segment.  Note that a frame transmitted on\n\tthe interface corresponding to this port is only counted\n\tby this object if and only if it is for a protocol being\n\tprocessed by the local bridging function, including\n\tbridge management frames.')
begemotBridgeTpPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 3, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpPortInDiscards.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpPortInDiscards.setDescription('Count of received valid frames that were discarded\n\t(i.e., filtered) by the Forwarding Process.')
begemotBridgePfilStatus = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 205, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgePfilStatus.setStatus('current')
if mibBuilder.loadTexts: begemotBridgePfilStatus.setDescription('Indicates whether packet filtering by some firewall\n\tpackage is enabled on the bridge interface.')
begemotBridgePfilMembers = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 205, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgePfilMembers.setStatus('current')
if mibBuilder.loadTexts: begemotBridgePfilMembers.setDescription('A value of true(1) indicates that packet filtering is\n\tenabled on both incoming and outgoing bridge member\n\tinterfaces.')
begemotBridgePfilIpOnly = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 205, 4, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgePfilIpOnly.setStatus('current')
if mibBuilder.loadTexts: begemotBridgePfilIpOnly.setDescription('This value controls the handling of non-IP packets which\n\tare not passed on for further processing to a firewall\n\tpackage. A value of false(0) indicates that all non-IP\n\tEthernet frames are passed unconditionally.')
begemotBridgeLayer2PfStatus = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 205, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeLayer2PfStatus.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeLayer2PfStatus.setDescription('This value indicates whether layer2 filtering by a\n\tfirewall package is enabled for bridge interfaces.')
begemotBridgeDefaultBridgeIf = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 205, 5, 1), BridgeIfNameOrEmpty().clone('bridge0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeDefaultBridgeIf.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeDefaultBridgeIf.setDescription("The name of the bridge interface that will be managed\n\tvia objects in IETF BRIDGE-MIB (RFC4188). If the\n\tobject's value is set to an empty string, bridge interfaces\n\twill only be managed via objects in this MIB module.")
begemotBridgeDataUpdate = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 205, 5, 2), Timeout().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeDataUpdate.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeDataUpdate.setDescription('The maximum age in seconds of the cached data.')
begemotBridgeDataPoll = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 205, 5, 3), Timeout().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeDataPoll.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeDataPoll.setDescription('The polling rate of data when the module is idle.')
begemotBridgeNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 12325, 1, 205, 0, 1)).setObjects(("BEGEMOT-BRIDGE-MIB", "begemotBridgeBaseName"))
if mibBuilder.loadTexts: begemotBridgeNewRoot.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeNewRoot.setDescription("The begemotBridgeNewRoot trap indicates that one of the\n\tbridge interfaces on the sending agent's device has\n\tbecome the new root of the spanning tree topology it is\n\tparticipating in.")
begemotBridgeTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 12325, 1, 205, 0, 2)).setObjects(("BEGEMOT-BRIDGE-MIB", "begemotBridgeBaseName"))
if mibBuilder.loadTexts: begemotBridgeTopologyChange.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTopologyChange.setDescription('A begemotBridgeTopologyChange trap is send when a member\n\tport on one of the bridge interfaces, monitored by the agent,\n\ttransitions from the Learning state to the Forwarding state,\n\tor from the Forwarding state to the Blocking state. The trap\n\tis not sent if a begemotBridgeNewRoot trap is sent for the\n\tsame transition.')
mibBuilder.exportSymbols("BEGEMOT-BRIDGE-MIB", begemotBridgeStpPortOperEdgePort=begemotBridgeStpPortOperEdgePort, begemotBridgeStpDesignatedRoot=begemotBridgeStpDesignatedRoot, begemotBridgeBasePortDelayExceededDiscards=begemotBridgeBasePortDelayExceededDiscards, begemotBridgeStpEntry=begemotBridgeStpEntry, BridgeIfNameOrEmpty=BridgeIfNameOrEmpty, begemotBridgeStpPortAdminEdgePort=begemotBridgeStpPortAdminEdgePort, begemotBridgeStpExtPortEntry=begemotBridgeStpExtPortEntry, begemotBridgePf=begemotBridgePf, BridgeIfName=BridgeIfName, begemotBridgeStpVersion=begemotBridgeStpVersion, begemotBridgeBase=begemotBridgeBase, PYSNMP_MODULE_ID=begemotBridge, begemotBridgeStpMaxAge=begemotBridgeStpMaxAge, begemotBridgeBaseStatus=begemotBridgeBaseStatus, begemotBridgeBasePortPrivate=begemotBridgeBasePortPrivate, begemotBridgeStpPriority=begemotBridgeStpPriority, begemotBridgeTp=begemotBridgeTp, begemotBridgeTpPortMaxInfo=begemotBridgeTpPortMaxInfo, begemotBridgeStpPortDesignatedPort=begemotBridgeStpPortDesignatedPort, begemotBridgeStp=begemotBridgeStp, begemotBridge=begemotBridge, begemotBridgeBaseEntry=begemotBridgeBaseEntry, begemotBridgeTpPortOutFrames=begemotBridgeTpPortOutFrames, begemotBridgeStpHelloTime=begemotBridgeStpHelloTime, begemotBridgeStpRootPort=begemotBridgeStpRootPort, begemotBridgeTpLearnedEntryDiscards=begemotBridgeTpLearnedEntryDiscards, begemotBridgeBasePortEntry=begemotBridgeBasePortEntry, begemotBridgeStpPortAdminPathCost=begemotBridgeStpPortAdminPathCost, begemotBridgeStpPortDesignatedRoot=begemotBridgeStpPortDesignatedRoot, begemotBridgeTpFdbStatus=begemotBridgeTpFdbStatus, begemotBridgeStpPortOperPointToPoint=begemotBridgeStpPortOperPointToPoint, begemotBridgeBaseAddress=begemotBridgeBaseAddress, begemotBridgeStpPortDesignatedCost=begemotBridgeStpPortDesignatedCost, begemotBridgeStpRootCost=begemotBridgeStpRootCost, begemotBridgeStpPort=begemotBridgeStpPort, begemotBridgeStpPortForwardTransitions=begemotBridgeStpPortForwardTransitions, begemotBridgeStpPortProtocolMigration=begemotBridgeStpPortProtocolMigration, begemotBridgeTpPortInFrames=begemotBridgeTpPortInFrames, begemotBridgeStpTimeSinceTopologyChange=begemotBridgeStpTimeSinceTopologyChange, begemotBridgeNewRoot=begemotBridgeNewRoot, begemotBridgeStpPortAdminPointToPoint=begemotBridgeStpPortAdminPointToPoint, begemotBridgeBasePortMtuExceededDiscards=begemotBridgeBasePortMtuExceededDiscards, begemotBridgeBasePortStatus=begemotBridgeBasePortStatus, begemotBridgeStpPortPathCost=begemotBridgeStpPortPathCost, begemotBridgeStpTopChanges=begemotBridgeStpTopChanges, begemotBridgeStpForwardDelay=begemotBridgeStpForwardDelay, begemotBridgeTopologyChange=begemotBridgeTopologyChange, begemotBridgeDataUpdate=begemotBridgeDataUpdate, begemotBridgeTpAgingTime=begemotBridgeTpAgingTime, begemotBridgeStpPortEntry=begemotBridgeStpPortEntry, begemotBridgeBaseNumPorts=begemotBridgeBaseNumPorts, begemotBridgeTpEntry=begemotBridgeTpEntry, begemotBridgeTpMaxAddresses=begemotBridgeTpMaxAddresses, begemotBridgeStpExtPortTable=begemotBridgeStpExtPortTable, begemotBridgeBasePortIfIndex=begemotBridgeBasePortIfIndex, begemotBridgeBaseType=begemotBridgeBaseType, begemotBridgeBasePortTable=begemotBridgeBasePortTable, begemotBridgeStpProtocolSpecification=begemotBridgeStpProtocolSpecification, begemotBridgeStpBridgeForwardDelay=begemotBridgeStpBridgeForwardDelay, begemotBridgeTpPortEntry=begemotBridgeTpPortEntry, begemotBridgeStpBridgeHelloTime=begemotBridgeStpBridgeHelloTime, begemotBridgeTpFdbPort=begemotBridgeTpFdbPort, begemotBridgeBaseName=begemotBridgeBaseName, begemotBridgePfilIpOnly=begemotBridgePfilIpOnly, begemotBridgeTpFdbTable=begemotBridgeTpFdbTable, begemotBridgeTpPortTable=begemotBridgeTpPortTable, begemotBridgeBaseTable=begemotBridgeBaseTable, begemotBridgeStpTxHoldCount=begemotBridgeStpTxHoldCount, begemotBridgeDefaultBridgeIf=begemotBridgeDefaultBridgeIf, begemotBridgeStpHoldTime=begemotBridgeStpHoldTime, begemotBridgeTpFdbEntry=begemotBridgeTpFdbEntry, begemotBridgeStpPortTable=begemotBridgeStpPortTable, begemotBridgeTpTable=begemotBridgeTpTable, begemotBridgeBaseSpanEnabled=begemotBridgeBaseSpanEnabled, begemotBridgeTpFdbAddress=begemotBridgeTpFdbAddress, begemotBridgePfilStatus=begemotBridgePfilStatus, begemotBridgeNotifications=begemotBridgeNotifications, begemotBridgeStpTable=begemotBridgeStpTable, begemotBridgePfilMembers=begemotBridgePfilMembers, begemotBridgeStpBridgeMaxAge=begemotBridgeStpBridgeMaxAge, begemotBridgeDataPoll=begemotBridgeDataPoll, begemotBridgeTpPort=begemotBridgeTpPort, begemotBridgeConfigObjects=begemotBridgeConfigObjects, begemotBridgeTpPortInDiscards=begemotBridgeTpPortInDiscards, begemotBridgeStpPortDesignatedBridge=begemotBridgeStpPortDesignatedBridge, begemotBridgeStpPortPriority=begemotBridgeStpPortPriority, BridgePortId=BridgePortId, begemotBridgeStpPortState=begemotBridgeStpPortState, begemotBridgeStpPortEnable=begemotBridgeStpPortEnable, begemotBridgeLayer2PfStatus=begemotBridgeLayer2PfStatus, begemotBridgeBasePort=begemotBridgeBasePort)
