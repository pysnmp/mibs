#
# PySNMP MIB module ALPHA-RESOURCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alpha/ALPHA-RESOURCE-MIB
# Produced by pysmi-1.1.12 at Sat Jul  6 01:05:19 2024
# On host fv-az1532-138 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, ModuleIdentity, TimeTicks, MibIdentifier, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, iso, Gauge32, Bits, enterprises, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "TimeTicks", "MibIdentifier", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "iso", "Gauge32", "Bits", "enterprises", "NotificationType", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
alpha = ModuleIdentity((1, 3, 6, 1, 4, 1, 7309))
alpha.setRevisions(('2023-04-03 00:00', '2019-11-15 00:00', '2019-04-12 00:00', '2016-11-15 00:00', '2015-10-19 00:00', '2015-07-28 00:00', '2015-06-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alpha.setRevisionsDescriptions(('Updated the type of some index columns to be a string, matching the value type\n\t\t\tthat has been exposed for a long time.\n\t\t\t', 'Added the configurationChoiceList table to support the other configuration tables,\n\t\t\tallowing the ability to see what possible choices there are for choice values.\n\t\t\t', 'Added alert table and conformance group.\n\t\t\tTested with SimpleWeb: http://www.simpleweb.org      \n\t\t\tPassed highest level of compliance.  (level 6)\n\t\t\t', 'Added conformance group for alarms to follow MIB structure conformance rules. Tested with\n\t\t\tSimpleWeb: http://www.simpleweb.org      \n\t\t\tPassed highest level of compliance.  (level 6)\n\t\t\t', '\n\t\t\tAdded alarm table(s) to allow active polling of alarm states available in the Cordex HP.\n\t\t\t', '\n\t\t\tUpdated to follow MIB structure conformance rules.  Tested with \n\t\t\tSimpleWeb: http://www.simpleweb.org      \n\t\t\tPassed highest level of compliance.  (level 6)\n\t\t\t', 'General version, Cordex HP Controller',))
if mibBuilder.loadTexts: alpha.setLastUpdated('202304030000Z')
if mibBuilder.loadTexts: alpha.setOrganization('Alpha Technologies Ltd.')
if mibBuilder.loadTexts: alpha.setContactInfo('Alpha Technologies Ltd.\n\t\t\t 7700 Riverfront Gate\n\t\t\t Burnaby, BC  V5J 5M4\n\t\t\t Canada\n\n\t\t\t Tel: 1-604-436-5900\n\t\t\t Fax: 1-604-436-1233')
if mibBuilder.loadTexts: alpha.setDescription('This MIB defines the information block(s) available in system controllers.')
class ScaledNumber(TextualConvention, Integer32):
    description = '\n\tFixed point, 3 decimal places.\n\t'
    status = 'current'
    displayHint = 'd-3'

controller = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5))
controllerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 1))
resource = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2))
simple = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 3))
controllerInfoName = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerInfoName.setStatus('current')
if mibBuilder.loadTexts: controllerInfoName.setDescription('User configurable text name of the Controller.')
controllerInfoDescription = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerInfoDescription.setStatus('current')
if mibBuilder.loadTexts: controllerInfoDescription.setDescription('User configurable description of the Controller.')
controllerInfoSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerInfoSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: controllerInfoSoftwareVersion.setDescription('Software version of the Controller application.')
controllerInfoOperatingSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerInfoOperatingSystemVersion.setStatus('current')
if mibBuilder.loadTexts: controllerInfoOperatingSystemVersion.setDescription('Operating system version number.')
controllerInfoHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerInfoHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: controllerInfoHardwareVersion.setDescription('Hardware version number.')
controllerExtInfoTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 1, 100), )
if mibBuilder.loadTexts: controllerExtInfoTable.setStatus('current')
if mibBuilder.loadTexts: controllerExtInfoTable.setDescription('\n       \tController specific information table.\n       \t')
controllerExtInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 1, 100, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "controllerExtInfoIndex"))
if mibBuilder.loadTexts: controllerExtInfoEntry.setStatus('current')
if mibBuilder.loadTexts: controllerExtInfoEntry.setDescription('\n       \tEntries appear in this table for each possible alarm state.\n       \tThis table MUST be persistent across system reboots.\n       \t')
controllerExtInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 1, 100, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: controllerExtInfoIndex.setStatus('current')
if mibBuilder.loadTexts: controllerExtInfoIndex.setDescription('\n\t\tIncremental integer value for each instance of the .\n\t\t')
controllerExtInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 1, 100, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerExtInfoName.setStatus('current')
if mibBuilder.loadTexts: controllerExtInfoName.setDescription('\n\t    Name of the data value presented in the instance of the entry.\n\t    ')
controllerExtInfoStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 1, 100, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerExtInfoStringValue.setStatus('current')
if mibBuilder.loadTexts: controllerExtInfoStringValue.setDescription('\n\t    String value of the data field presented by the controller info entry.\n\t    ')
controllerExtInfoUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 1, 100, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerExtInfoUnit.setStatus('current')
if mibBuilder.loadTexts: controllerExtInfoUnit.setDescription('\n\t    Unit name of the numeric value of the controller info entry.\n\t    ')
controllerExtInfoNumberValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 1, 100, 1, 5), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerExtInfoNumberValue.setStatus('current')
if mibBuilder.loadTexts: controllerExtInfoNumberValue.setDescription('\n\t\tNumber value of the data field presented by the controller info entry.\n\t\t')
componentList = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1))
componentListCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentListCount.setStatus('current')
if mibBuilder.loadTexts: componentListCount.setDescription('\n\t\tThe number of available objects in componentList.\n\t\t')
componentListTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2), )
if mibBuilder.loadTexts: componentListTable.setStatus('current')
if mibBuilder.loadTexts: componentListTable.setDescription('\n       \tObject componentList describes the following:\n\t\t\n\t\t\tSystems ( DC System, AC System, Converter System, etc. )\n\t\t\tDevices ( ADIO, Rectifier, Converter, Inverter, etc. )\n       \t')
componentListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "componentListReference"))
if mibBuilder.loadTexts: componentListEntry.setStatus('current')
if mibBuilder.loadTexts: componentListEntry.setDescription('\n       \tEntry to the component list describing the available systems and devices\n       \twithin the Cordex controller.\n       \t\n       \tIndexing:\n       \t\n       \t1. Component type - please refer to componentListType\n       \t2. Snmp ID - please refer to componentListReference\n       \t       \t\t\n       \t\tConfigurable ID allow for component monitoring on a specific index if the \n       \t\tmethod of monitoring is locked on the index value.\n       \t')
componentListReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: componentListReference.setStatus('current')
if mibBuilder.loadTexts: componentListReference.setDescription('\n\t\tIndentification number assigned to the component.')
componentListStaticName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentListStaticName.setStatus('current')
if mibBuilder.loadTexts: componentListStaticName.setDescription('\n\t    Non-configurable name permanently assigned to the component.  Filtering on this data\n\t    value is possible and recommended due to its static nature.\n\t    ')
componentListConfiguredName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentListConfiguredName.setStatus('current')
if mibBuilder.loadTexts: componentListConfiguredName.setDescription('\n\t    User configurable name of the component. Filtering on this data value is not\n\t    recommended.\n\t    ')
componentListType = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: componentListType.setStatus('current')
if mibBuilder.loadTexts: componentListType.setDescription('\n\t\tThe type of the component based on power system terminology.\n\t\t\n      \t\t1  - Controller\n       \t\t2  - DC System\n       \t\t3  - ADIO\n       \t\t4  - Rectifier\n       \t\t5  - Converter\n       \t\t6  - Inverter\n       \t\t7  - BCMC\n       \t\t8  - T2S\n       \t\t9  - AC Input Bus\n       \t\t10 - Battery String\n       \t\t11 - Disconnect\n       \t\t12 - Load\n       \t\t13 - Shunt\n       \t\t14 - SNMP Destinations\n       \t\t15 - CAN Bus\n\t\t\t\n\t\t\tSee SNMP Integrators Guide for complete list www.alpha.ca\n\t\t')
componentListModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentListModelNumber.setStatus('current')
if mibBuilder.loadTexts: componentListModelNumber.setDescription('\n\t    Component model number where applicable.  This is available on component entries\n\t    which describes hardware modules.\n\t    ')
componentListSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentListSerialNumber.setStatus('current')
if mibBuilder.loadTexts: componentListSerialNumber.setDescription('\n\t    Serial number of the device only if the component is of physical device type.\n\t    ')
componentListSystemPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentListSystemPointer.setStatus('current')
if mibBuilder.loadTexts: componentListSystemPointer.setDescription('\n\t    Table entry reference to the component table of the system component that the\n\t    described item belongs to.\n\t    \n\t    Example:  A rectifier component will have a reference to the Rectifier System that it\n\t    belongs to.\n\t    ')
dataList = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2))
dataListCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataListCount.setStatus('current')
if mibBuilder.loadTexts: dataListCount.setDescription('The number of defined data fields available for query.')
dataListTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2, 2), )
if mibBuilder.loadTexts: dataListTable.setStatus('current')
if mibBuilder.loadTexts: dataListTable.setDescription('\n       \tTable of data fields available for query.  \n       \t')
dataListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "dataListReference"))
if mibBuilder.loadTexts: dataListEntry.setStatus('current')
if mibBuilder.loadTexts: dataListEntry.setDescription('\n       \tData field entry of available fields.  \n       \t\n       \tIndexes:\n       \t\n       \t\t1. componentListType - indicates which component can provide the field of \n       \t\t\t\t\t\t\t\t  interest.\n       \t\t2. dataListReference - the ID permanently assigned to the field.\n       \t')
dataListReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: dataListReference.setStatus('current')
if mibBuilder.loadTexts: dataListReference.setDescription('\n\t\tNon-configurable ID permanently assigned to the field entry.\n\t\t')
dataListName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataListName.setStatus('current')
if mibBuilder.loadTexts: dataListName.setDescription('\n\t    Non-configurable string name of the field represented in the entry.\n\t    ')
dataListType = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: dataListType.setStatus('current')
if mibBuilder.loadTexts: dataListType.setDescription('\n\t\tCanonical data type of the field entry.  \n\t\t\n\t\t0 - None  \n        1 - Numeric\n        2 - Boolean\n        3 - Time\n        4 - String\n        5 - Choice / Selected options     \n\t\t')
dataListUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataListUnit.setStatus('current')
if mibBuilder.loadTexts: dataListUnit.setDescription('\n\t    Unit type of the value represented by the entry.\n\t    ')
data = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 3))
dataCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCount.setStatus('current')
if mibBuilder.loadTexts: dataCount.setDescription('The number of defined data points available for query.')
dataTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 3, 2), )
if mibBuilder.loadTexts: dataTable.setStatus('current')
if mibBuilder.loadTexts: dataTable.setDescription('Table of data values associated to live data availabe from the Cordex HP controller.')
dataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 3, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "dataListReference"), (0, "ALPHA-RESOURCE-MIB", "componentListReference"))
if mibBuilder.loadTexts: dataEntry.setStatus('current')
if mibBuilder.loadTexts: dataEntry.setDescription('Conceptual row of data value for the referencing data field type and component that it belongs to.')
dataReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 3, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: dataReference.setStatus('current')
if mibBuilder.loadTexts: dataReference.setDescription('\n\t\tNon-configurable ID permanently assigned to the field entry.\n\t\t')
dataNumberValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 3, 2, 1, 2), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataNumberValue.setStatus('current')
if mibBuilder.loadTexts: dataNumberValue.setDescription('\n\t\tNumeric value of the data field.\n\t\t')
dataStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataStringValue.setStatus('current')
if mibBuilder.loadTexts: dataStringValue.setDescription('\n\t    String value of the data field.\n\t    ')
configurationList = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4))
configurationListCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationListCount.setStatus('current')
if mibBuilder.loadTexts: configurationListCount.setDescription('The number of defined configuration fields available for query.')
configurationListTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4, 2), )
if mibBuilder.loadTexts: configurationListTable.setStatus('current')
if mibBuilder.loadTexts: configurationListTable.setDescription('\n       \tTable of configuration entries.\n       \t')
configurationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "configurationListReference"))
if mibBuilder.loadTexts: configurationListEntry.setStatus('current')
if mibBuilder.loadTexts: configurationListEntry.setDescription('\n       \tConfiguration field entries available for GET and SET.\n       \t')
configurationListReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: configurationListReference.setStatus('current')
if mibBuilder.loadTexts: configurationListReference.setDescription('\n\t\tA numerical ID value permanently assigned to the configuration field.\n\t\t')
configurationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationListName.setStatus('current')
if mibBuilder.loadTexts: configurationListName.setDescription('\n\t    A non-configurable string name of the configuration field.\n\t    ')
configurationListType = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationListType.setStatus('current')
if mibBuilder.loadTexts: configurationListType.setDescription('\n\t\tConanical data type of the configuration field.    \n\t\t\n\t\t0 - Unknown  \n        1 - Numeric\n        2 - Boolean\n        3 - Time\n        4 - String\n        5 - Choice / Selected Options      \n\t\t')
configurationListUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationListUnit.setStatus('current')
if mibBuilder.loadTexts: configurationListUnit.setDescription('\n\t    Unit of the numeric value of the configuration field.\n\t    ')
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 5))
configurationCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationCount.setStatus('current')
if mibBuilder.loadTexts: configurationCount.setDescription('\n\t\tThe number of defined configuration points available for query.\n\t\t')
configurationTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 5, 2), )
if mibBuilder.loadTexts: configurationTable.setStatus('current')
if mibBuilder.loadTexts: configurationTable.setDescription('\n       \tTable of configuration entries.\n       \t')
configurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 5, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "configurationListReference"), (0, "ALPHA-RESOURCE-MIB", "componentListReference"))
if mibBuilder.loadTexts: configurationEntry.setStatus('current')
if mibBuilder.loadTexts: configurationEntry.setDescription('\n       \tConfiguration field entry.\n       \t')
configurationReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 5, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: configurationReference.setStatus('current')
if mibBuilder.loadTexts: configurationReference.setDescription('\n\t\tNon-configurable ID permanently assigned to the field entry.\n\t\t')
configurationNumberValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 5, 2, 1, 2), ScaledNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationNumberValue.setStatus('current')
if mibBuilder.loadTexts: configurationNumberValue.setDescription('\n\t\tNumbered value of the configuration referenced by the Configuration Type and the Component Reference.\n\t\t')
configurationStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationStringValue.setStatus('current')
if mibBuilder.loadTexts: configurationStringValue.setDescription('\n\t    String value of the configuration referenced by the Configuration Type and the Component Reference.\n\t    ')
commandList = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 6))
commandListCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commandListCount.setStatus('current')
if mibBuilder.loadTexts: commandListCount.setDescription('The number of defined data points available for query.')
commandListTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 6, 2), )
if mibBuilder.loadTexts: commandListTable.setStatus('current')
if mibBuilder.loadTexts: commandListTable.setDescription('\n       \tTable of commands available from the Cordex HP Controller.\n       \t')
commandListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 6, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "commandListReference"))
if mibBuilder.loadTexts: commandListEntry.setStatus('current')
if mibBuilder.loadTexts: commandListEntry.setDescription('\n       \tConceptual row of a command item in the Command List Table.\n       \t')
commandListReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 6, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: commandListReference.setStatus('current')
if mibBuilder.loadTexts: commandListReference.setDescription('\n\t\tReference value to identify available commands published by the Cordex HP Controller.\n\t\t')
commandListName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 6, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandListName.setStatus('current')
if mibBuilder.loadTexts: commandListName.setDescription('\n\t    Name of the command.\n\t    ')
command = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 7))
commandCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commandCount.setStatus('current')
if mibBuilder.loadTexts: commandCount.setDescription('The number of defined command points available for query.')
commandTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 7, 2), )
if mibBuilder.loadTexts: commandTable.setStatus('current')
if mibBuilder.loadTexts: commandTable.setDescription('\n       \tTable of command fields that are available in the Cordex HP Controller.\n       \t')
commandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 7, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "commandListReference"), (0, "ALPHA-RESOURCE-MIB", "componentListReference"))
if mibBuilder.loadTexts: commandEntry.setStatus('current')
if mibBuilder.loadTexts: commandEntry.setDescription('\n       \tConceptual row of the Command Table.\n       \t')
commandReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 7, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: commandReference.setStatus('current')
if mibBuilder.loadTexts: commandReference.setDescription('\n\t\tNon-configurable ID permanently assigned to the field entry.\n\t\t')
commandTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandTrigger.setStatus('current')
if mibBuilder.loadTexts: commandTrigger.setDescription('\n\t\tCommand field that is the trigger to send command referenced by the Command Type and the Component that it belongs to.\n\t\t')
alarmType = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 8))
alarmTypeCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTypeCount.setStatus('current')
if mibBuilder.loadTexts: alarmTypeCount.setDescription('The number of defined alarm points available for query.')
alarmTypeTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 8, 2), )
if mibBuilder.loadTexts: alarmTypeTable.setStatus('current')
if mibBuilder.loadTexts: alarmTypeTable.setDescription('\n       \tTable of alarms available from the Cordex HP Controller.\n       \t')
alarmTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 8, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "alarmTypeReference"))
if mibBuilder.loadTexts: alarmTypeEntry.setStatus('current')
if mibBuilder.loadTexts: alarmTypeEntry.setDescription('\n       \tConceptual row of a alarm item in the Alarm List Table.\n       \t')
alarmTypeReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 8, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: alarmTypeReference.setStatus('current')
if mibBuilder.loadTexts: alarmTypeReference.setDescription('\n\t\tReference value to identify available alarms published by the Cordex HP Controller.\n\t\t')
alarmTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 8, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTypeName.setStatus('current')
if mibBuilder.loadTexts: alarmTypeName.setDescription('\n\t    Name of the alarm.\n\t    ')
alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 9))
alarmCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCount.setStatus('current')
if mibBuilder.loadTexts: alarmCount.setDescription('The number of defined alarm points available for query.')
alarmTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 9, 2), )
if mibBuilder.loadTexts: alarmTable.setStatus('current')
if mibBuilder.loadTexts: alarmTable.setDescription('\n       \tTable of alarm fields that are available in the Cordex HP Controller.\n       \t')
alarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 9, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "alarmTypeReference"), (0, "ALPHA-RESOURCE-MIB", "componentListReference"))
if mibBuilder.loadTexts: alarmEntry.setStatus('current')
if mibBuilder.loadTexts: alarmEntry.setDescription('\n       \tConceptual row of the Alarm Table.\n       \t')
alarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 9, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmState.setStatus('current')
if mibBuilder.loadTexts: alarmState.setDescription('\n\t\tInteger representation of the state of the alarm and its priority level.\n\t\t0 - Normal\n\t\t1 - Warning\n\t\t2 - Minor\n\t\t3 - Major\n\t\t4 - Critical\n\t\t')
alert = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 10))
alertCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertCount.setStatus('current')
if mibBuilder.loadTexts: alertCount.setDescription('The number of defined alert points available for query. Alerts\n\t\tare indications of the state of modules. Alerts are not configurable\n\t\tand do not send notifications')
alertTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 10, 2), )
if mibBuilder.loadTexts: alertTable.setStatus('current')
if mibBuilder.loadTexts: alertTable.setDescription('\n       \tTable of active module alerts fields.\n       \t')
alertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 10, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"))
if mibBuilder.loadTexts: alertEntry.setStatus('current')
if mibBuilder.loadTexts: alertEntry.setDescription('\n       \tConceptual row of the Alert Table.\n       \t')
alertTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 10, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertTypeName.setStatus('current')
if mibBuilder.loadTexts: alertTypeName.setDescription('\n\t\tthe name of the alert\n\t\t')
configurationChoiceList = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 11))
configurationChoiceListCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationChoiceListCount.setStatus('current')
if mibBuilder.loadTexts: configurationChoiceListCount.setDescription('The number of defined configuration choices available for query.')
configurationChoiceListTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 11, 2), )
if mibBuilder.loadTexts: configurationChoiceListTable.setStatus('current')
if mibBuilder.loadTexts: configurationChoiceListTable.setDescription('\n       \tTable of configuration choices. To be used in conjuction with the configurationList and configuration tables.\n\t\tFor Choice type fields, this table will tell you what the possible values each Choice field can be set to.\n       \t')
configurationChoiceListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 11, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "configurationChoiceListReference"))
if mibBuilder.loadTexts: configurationChoiceListEntry.setStatus('current')
if mibBuilder.loadTexts: configurationChoiceListEntry.setDescription('\n       \tConfiguration choice entries available for GET.\n       \t')
configurationChoiceListReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 11, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: configurationChoiceListReference.setStatus('current')
if mibBuilder.loadTexts: configurationChoiceListReference.setDescription('\n\t\tA numerical ID value permanently assigned to the configuration field this Choice is a possible value for.\n\t\t')
configurationChoiceListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 11, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationChoiceListIndex.setStatus('current')
if mibBuilder.loadTexts: configurationChoiceListIndex.setDescription('\n\t\tThe numerical representation of this Choice. To configure a configuration field to this Choice, set the\n\t\tnumericalValue to this index.\n\t\t')
configurationChoiceListName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 11, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationChoiceListName.setStatus('current')
if mibBuilder.loadTexts: configurationChoiceListName.setDescription('\n\t    A non-configurable string name of this Choice.\n\t    ')
resourceConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100))
resourceCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1))
resourceCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 1)).setObjects(("ALPHA-RESOURCE-MIB", "alphaControllerGroup"), ("ALPHA-RESOURCE-MIB", "alphaComponentGroup"), ("ALPHA-RESOURCE-MIB", "alphaDataTypeGroup"), ("ALPHA-RESOURCE-MIB", "alphaDataGroup"), ("ALPHA-RESOURCE-MIB", "alphaConfigurationTypeGroup"), ("ALPHA-RESOURCE-MIB", "alphaConfigurationGroup"), ("ALPHA-RESOURCE-MIB", "alphaCommandTypeGroup"), ("ALPHA-RESOURCE-MIB", "alphaCommandGroup"), ("ALPHA-RESOURCE-MIB", "alphaAlarmGroup"), ("ALPHA-RESOURCE-MIB", "alphaAlertGroup"), ("ALPHA-RESOURCE-MIB", "alphaConfigurationChoicesGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resourceCompliance = resourceCompliance.setStatus('current')
if mibBuilder.loadTexts: resourceCompliance.setDescription('The compliance statement for systems supporting the Alpha Resource MIB.')
resourceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2))
alphaControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 1)).setObjects(("ALPHA-RESOURCE-MIB", "controllerInfoName"), ("ALPHA-RESOURCE-MIB", "controllerInfoDescription"), ("ALPHA-RESOURCE-MIB", "controllerInfoSoftwareVersion"), ("ALPHA-RESOURCE-MIB", "controllerInfoOperatingSystemVersion"), ("ALPHA-RESOURCE-MIB", "controllerInfoHardwareVersion"), ("ALPHA-RESOURCE-MIB", "controllerExtInfoName"), ("ALPHA-RESOURCE-MIB", "controllerExtInfoStringValue"), ("ALPHA-RESOURCE-MIB", "controllerExtInfoUnit"), ("ALPHA-RESOURCE-MIB", "controllerExtInfoNumberValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaControllerGroup = alphaControllerGroup.setStatus('current')
if mibBuilder.loadTexts: alphaControllerGroup.setDescription('Alpha controller data list group.')
alphaComponentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 2)).setObjects(("ALPHA-RESOURCE-MIB", "componentListCount"), ("ALPHA-RESOURCE-MIB", "componentListStaticName"), ("ALPHA-RESOURCE-MIB", "componentListConfiguredName"), ("ALPHA-RESOURCE-MIB", "componentListModelNumber"), ("ALPHA-RESOURCE-MIB", "componentListSerialNumber"), ("ALPHA-RESOURCE-MIB", "componentListSystemPointer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaComponentGroup = alphaComponentGroup.setStatus('current')
if mibBuilder.loadTexts: alphaComponentGroup.setDescription('Component data list group.')
alphaDataTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 3)).setObjects(("ALPHA-RESOURCE-MIB", "dataListCount"), ("ALPHA-RESOURCE-MIB", "dataListName"), ("ALPHA-RESOURCE-MIB", "dataListUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaDataTypeGroup = alphaDataTypeGroup.setStatus('current')
if mibBuilder.loadTexts: alphaDataTypeGroup.setDescription('Data type list group.')
alphaDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 4)).setObjects(("ALPHA-RESOURCE-MIB", "dataCount"), ("ALPHA-RESOURCE-MIB", "dataNumberValue"), ("ALPHA-RESOURCE-MIB", "dataStringValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaDataGroup = alphaDataGroup.setStatus('current')
if mibBuilder.loadTexts: alphaDataGroup.setDescription('Data list group.')
alphaConfigurationTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 5)).setObjects(("ALPHA-RESOURCE-MIB", "configurationListCount"), ("ALPHA-RESOURCE-MIB", "configurationListName"), ("ALPHA-RESOURCE-MIB", "configurationListType"), ("ALPHA-RESOURCE-MIB", "configurationListUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaConfigurationTypeGroup = alphaConfigurationTypeGroup.setStatus('current')
if mibBuilder.loadTexts: alphaConfigurationTypeGroup.setDescription('Configuration type list group.')
alphaConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 6)).setObjects(("ALPHA-RESOURCE-MIB", "configurationCount"), ("ALPHA-RESOURCE-MIB", "configurationStringValue"), ("ALPHA-RESOURCE-MIB", "configurationNumberValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaConfigurationGroup = alphaConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: alphaConfigurationGroup.setDescription('Configuration list group.')
alphaCommandTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 7)).setObjects(("ALPHA-RESOURCE-MIB", "commandListCount"), ("ALPHA-RESOURCE-MIB", "commandListName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaCommandTypeGroup = alphaCommandTypeGroup.setStatus('current')
if mibBuilder.loadTexts: alphaCommandTypeGroup.setDescription('Command type list group.')
alphaCommandGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 8)).setObjects(("ALPHA-RESOURCE-MIB", "commandCount"), ("ALPHA-RESOURCE-MIB", "commandTrigger"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaCommandGroup = alphaCommandGroup.setStatus('current')
if mibBuilder.loadTexts: alphaCommandGroup.setDescription('Command list group.')
alphaAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 9)).setObjects(("ALPHA-RESOURCE-MIB", "alarmTypeCount"), ("ALPHA-RESOURCE-MIB", "alarmTypeName"), ("ALPHA-RESOURCE-MIB", "alarmCount"), ("ALPHA-RESOURCE-MIB", "alarmState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaAlarmGroup = alphaAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: alphaAlarmGroup.setDescription('Alarm list group.')
alphaAlertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 10)).setObjects(("ALPHA-RESOURCE-MIB", "alertCount"), ("ALPHA-RESOURCE-MIB", "alertTypeName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaAlertGroup = alphaAlertGroup.setStatus('current')
if mibBuilder.loadTexts: alphaAlertGroup.setDescription('Alert type list group.')
alphaConfigurationChoicesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 11)).setObjects(("ALPHA-RESOURCE-MIB", "configurationChoiceListCount"), ("ALPHA-RESOURCE-MIB", "configurationChoiceListIndex"), ("ALPHA-RESOURCE-MIB", "configurationChoiceListName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaConfigurationChoicesGroup = alphaConfigurationChoicesGroup.setStatus('current')
if mibBuilder.loadTexts: alphaConfigurationChoicesGroup.setDescription('Data type list group.')
mibBuilder.exportSymbols("ALPHA-RESOURCE-MIB", componentListEntry=componentListEntry, alphaConfigurationTypeGroup=alphaConfigurationTypeGroup, simple=simple, alarmEntry=alarmEntry, controllerExtInfoIndex=controllerExtInfoIndex, commandTrigger=commandTrigger, alphaAlarmGroup=alphaAlarmGroup, componentListConfiguredName=componentListConfiguredName, controllerInfoHardwareVersion=controllerInfoHardwareVersion, dataListReference=dataListReference, controllerInfo=controllerInfo, alphaAlertGroup=alphaAlertGroup, dataStringValue=dataStringValue, command=command, commandReference=commandReference, alphaConfigurationGroup=alphaConfigurationGroup, componentListStaticName=componentListStaticName, controllerExtInfoUnit=controllerExtInfoUnit, alphaConfigurationChoicesGroup=alphaConfigurationChoicesGroup, componentListType=componentListType, configurationChoiceList=configurationChoiceList, alertTable=alertTable, alertCount=alertCount, configurationCount=configurationCount, alarmCount=alarmCount, configurationListTable=configurationListTable, componentListCount=componentListCount, componentListModelNumber=componentListModelNumber, dataListUnit=dataListUnit, dataListEntry=dataListEntry, configurationChoiceListName=configurationChoiceListName, commandListEntry=commandListEntry, dataNumberValue=dataNumberValue, configurationListReference=configurationListReference, controllerInfoName=controllerInfoName, componentListReference=componentListReference, dataTable=dataTable, controllerExtInfoEntry=controllerExtInfoEntry, controllerInfoOperatingSystemVersion=controllerInfoOperatingSystemVersion, controllerExtInfoNumberValue=controllerExtInfoNumberValue, componentList=componentList, configurationListType=configurationListType, dataListTable=dataListTable, configurationReference=configurationReference, resource=resource, configurationChoiceListEntry=configurationChoiceListEntry, configuration=configuration, configurationListUnit=configurationListUnit, configurationListName=configurationListName, resourceCompliances=resourceCompliances, dataListCount=dataListCount, alertEntry=alertEntry, commandList=commandList, dataReference=dataReference, alarmTable=alarmTable, alarmTypeCount=alarmTypeCount, resourceGroups=resourceGroups, configurationChoiceListIndex=configurationChoiceListIndex, controllerExtInfoName=controllerExtInfoName, commandEntry=commandEntry, alert=alert, configurationTable=configurationTable, alarmTypeEntry=alarmTypeEntry, PYSNMP_MODULE_ID=alpha, alarmTypeTable=alarmTypeTable, dataCount=dataCount, alphaComponentGroup=alphaComponentGroup, componentListTable=componentListTable, configurationListEntry=configurationListEntry, configurationStringValue=configurationStringValue, commandListTable=commandListTable, data=data, commandListCount=commandListCount, dataListType=dataListType, commandListName=commandListName, alertTypeName=alertTypeName, commandCount=commandCount, configurationChoiceListTable=configurationChoiceListTable, commandTable=commandTable, alphaDataGroup=alphaDataGroup, alarmType=alarmType, alarmState=alarmState, dataEntry=dataEntry, configurationListCount=configurationListCount, ScaledNumber=ScaledNumber, configurationList=configurationList, configurationChoiceListCount=configurationChoiceListCount, controller=controller, alpha=alpha, controllerInfoSoftwareVersion=controllerInfoSoftwareVersion, dataList=dataList, resourceConformance=resourceConformance, controllerExtInfoTable=controllerExtInfoTable, controllerInfoDescription=controllerInfoDescription, alphaControllerGroup=alphaControllerGroup, componentListSystemPointer=componentListSystemPointer, alphaCommandTypeGroup=alphaCommandTypeGroup, alphaCommandGroup=alphaCommandGroup, configurationNumberValue=configurationNumberValue, alarm=alarm, dataListName=dataListName, componentListSerialNumber=componentListSerialNumber, alphaDataTypeGroup=alphaDataTypeGroup, alarmTypeReference=alarmTypeReference, alarmTypeName=alarmTypeName, configurationEntry=configurationEntry, resourceCompliance=resourceCompliance, commandListReference=commandListReference, configurationChoiceListReference=configurationChoiceListReference, controllerExtInfoStringValue=controllerExtInfoStringValue)
