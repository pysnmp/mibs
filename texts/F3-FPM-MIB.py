#
# PySNMP MIB module F3-FPM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-FPM-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 09:59:01 2024
# On host fv-az1251-884 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
VlanId, FlowSecState, CmPmIntervalType, CmPmBinAction, SecondaryState, PerfCounter64, OperationalState, VlanPriority, AdminState = mibBuilder.importSymbols("CM-COMMON-MIB", "VlanId", "FlowSecState", "CmPmIntervalType", "CmPmBinAction", "SecondaryState", "PerfCounter64", "OperationalState", "VlanPriority", "AdminState")
slotIndex, neIndex, shelfIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "slotIndex", "neIndex", "shelfIndex")
ShapingType, cmMPFlowIndex, cmEthernetNetPortIndex, FlowTagControl, PolicerAlgorithmType, cmMPFlowEntry, CmControlProtocolDispType, cmEthernetAccPortIndex, PolicerColorMode, CmActiveControlProtocolsType, FlowVlanActionType = mibBuilder.importSymbols("CM-FACILITY-MIB", "ShapingType", "cmMPFlowIndex", "cmEthernetNetPortIndex", "FlowTagControl", "PolicerAlgorithmType", "cmMPFlowEntry", "CmControlProtocolDispType", "cmEthernetAccPortIndex", "PolicerColorMode", "CmActiveControlProtocolsType", "FlowVlanActionType")
FlowLearningConfigAction, ProtectLearningControl, LearningAction = mibBuilder.importSymbols("F3-BRIDGE-MIB", "FlowLearningConfigAction", "ProtectLearningControl", "LearningAction")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, Gauge32, ModuleIdentity, ObjectIdentity, TimeTicks, Counter32, MibIdentifier, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "Gauge32", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Counter32", "MibIdentifier", "NotificationType", "Counter64")
TextualConvention, StorageType, DisplayString, TruthValue, DateAndTime, RowStatus, VariablePointer = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "StorageType", "DisplayString", "TruthValue", "DateAndTime", "RowStatus", "VariablePointer")
f3FpmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43))
f3FpmMIB.setRevisions(('2016-07-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3FpmMIB.setRevisionsDescriptions(('Notes from release 201607110000Z\n          (1) renamed the type FlowSecureState to FlowSecState\n         Notes from release 201607080000Z\n          (1) added f3AccFlowpointRefConnectGuardFlowObject, f3AccFlowpointSecureBlockingControl, and \n              f3AccFlowpointSecureState to f3AccFlowpointTable\n          (2) added f3NetFlowpointRefConnectGuardFlowObject, f3NetFlowpointSecureBlockingControl,\n               and f3NetFlowpointSecureState to f3NetFlowpoitTable\n          (3) added f3MPFlowRefConnectGuardFlowObject and f3MPFlowSecureState to f3MPFlowExtTable\n         Notes from release 201504210000Z,\n          (1) Ready for release FSP150CC 8.1.',))
if mibBuilder.loadTexts: f3FpmMIB.setLastUpdated('201607110000Z')
if mibBuilder.loadTexts: f3FpmMIB.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: f3FpmMIB.setContactInfo('        Jakub Nadolski\n                     ADVA Optical Networking, Inc.\n                Tel: +48 58 7716 421\n             E-mail: jnadolski@advaoptical.com\n             Postal: ul. Slaska 35\n                     81-310 Gdynia, Poland')
if mibBuilder.loadTexts: f3FpmMIB.setDescription('This module defines the Flow Point Model MIB definitions \n             used by the F3 product lines.  \n             Copyright (C) ADVA Optical Networking.')
f3FpmConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1))
f3FpmPerfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2))
f3FpmPerfNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 3))
f3FpmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4))
f3AccFlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1), )
if mibBuilder.loadTexts: f3AccFlowPointTable.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointTable.setDescription('A list of entries corresponding to Access Flow Point\n             for configuration purposes.')
f3AccFlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointIndex"))
if mibBuilder.loadTexts: f3AccFlowPointEntry.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointEntry.setDescription('A conceptual row in the f3AccFlowPointTable.\n             These entries represent an Access Flow Point.\n             If the Flow Point attached to a lag, the slotIndex should \n             be 255 (255 is used to identify the Flow Point belongs to lag), \n             and the cmEthernetAccPortIndex should be the f3LagIndex.')
f3AccFlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3AccFlowPointIndex.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointIndex.setDescription('The integer index value corresponding to an Flow Point.')
f3AccFlowPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointAlias.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointAlias.setDescription('This object allows SNMP management entities to provide a\n        circuit identifier with the Flow Point.')
f3AccFlowPointAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 3), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointAdminState.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointAdminState.setDescription('This object represents the Administrative State of the Flow Point.')
f3AccFlowPointOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointOperationalState.setDescription('This object represents the Operational State of the Flow Point.')
f3AccFlowPointSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointSecondaryState.setDescription('This object represents the Secondary State of the Flow Point.')
f3AccFlowPointAssociatedFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 6), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointAssociatedFlowId.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointAssociatedFlowId.setDescription('This object provides the association of an Flow with an Flow Point.')
f3AccFlowPointIngressMultiCOSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointIngressMultiCOSEnabled.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointIngressMultiCOSEnabled.setDescription('This object allows specification of ingress multiple COS\n       (Class of Service) Flow Point.')
f3AccFlowPointIngressCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointIngressCOS.setStatus('deprecated')
if mibBuilder.loadTexts: f3AccFlowPointIngressCOS.setDescription("This object allows specification of ingress COS \n       (Class of Service) Flow Point. \n\n       This attribute has been deprecated and is not supported. The\n       Ingress COS is determined from the flowpoint's associated\n       Priority Mapping Profle.")
f3AccFlowPointEgressShapingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 9), ShapingType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointEgressShapingType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointEgressShapingType.setDescription('This object allows specification of Shaping Type for Flow Point.\n        For 8.1.1 release, only flow-based Shaping Type is supported.')
f3AccFlowPointIngressVlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointIngressVlanMemberList.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointIngressVlanMemberList.setDescription('It allows specification of VLAN members of the Flow Point.\n        VLAN members are comma separated, of the form X-Y where X is the\n        VLAN Id and Y is the VLAN Priority. VLAN members can be of\n        the form X-* or X (vlan X with all priorities), *-Y (all vlans\n        with priority Y), and X1:X2 (range of vlans from X1 to X2, \n        all priorities). Members with specific VLAN Id and specific\n        VLAN Priority are not supported. Once the Flow Point is created,\n        this attribute can only be updated using f3AccFlowPointVlanMemberAction\n        and f3AccFlowPointVlanMemberActionVlan objects.')
f3AccFlowPointVlanMemberAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 11), FlowVlanActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointVlanMemberAction.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointVlanMemberAction.setDescription('This object allows to add or remove the VLAN members specified by\n        f3AccFlowPointVlanMemberActionVlan object. SNMP manager must first\n        configure the VLAN member to be added/removed in the object\n        f3AccFlowPointVlanMemberActionVlan and then should specify\n        f3AccFlowPointVlanMemberAction on whether to add/remove the specified\n        VLAN member.')
f3AccFlowPointVlanMemberActionVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointVlanMemberActionVlan.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointVlanMemberActionVlan.setDescription('This object allows adding/removing VLAN members to a Flow Point.\n        VLAN member is of the form X-Y where X is the VLAN Id and Y is\n        the VLAN Priority. VLAN members can be of the form X-* (vlan X \n        with all priorities), *-Y (all vlans with priority Y), and X1:X2 \n        (range of vlans from X1 to X2, all priorities). Members with \n        specific VLAN Id and specific VLAN Priority are not supported.\n        In order to add/remove VLAN member to a flow, user must specify\n        this object with appropriate VLAN and then \n        invoke f3AccFlowPointVlanMemberAction.')
f3AccFlowPointIngressUntaggedFrameEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointIngressUntaggedFrameEnabled.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointIngressUntaggedFrameEnabled.setDescription('This object allows to specify whether or not the Flow Point\n        supports untagged frame.')
f3AccFlowPointCTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 14), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointCTagControl.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCTagControl.setDescription("This object allows specification of the tag management \n        operation on the C-TAG.  Supported types are 'push', 'pushvid',\n        'swaptag', 'swapvid' and 'none'. If the type is 'push',\n        the VLAN Id (f3AccFlowPointCTagVlanId) and priority\n        (f3AccFlowPointCTagVlanPriority) are pushed onto the frame;\n        if the type is 'pushvid', only the VLAN Id (12 bits) is pushed,\n        the Priority is copied from incoming tag's priority;\n        if the type is 'swaptag', both VLAN Id and Priority (15 bits)\n        are swapped with the specified f3AccFlowPointCTagVlanId and \n        f3AccFlowPointCTagVlanPriority;\n        if the type is 'swapvid', only the VLAN Id (12 bits) are \n        swapped with the specified f3AccFlowPointCTagVlanId; \n        if the type is 'none', no C-TAG management is performed.")
f3AccFlowPointCTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 15), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointCTagVlanId.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCTagVlanId.setDescription("This object allows specification of the VLAN Id to\n        be pushed or swapped, based on the value of \n        f3AccFlowPointIngressCTagControl. It is applicable \n        for 'push', 'swaptag', 'swapvid' and 'pushvid' control types.")
f3AccFlowPointCTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 16), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointCTagVlanPriority.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCTagVlanPriority.setDescription("This object allows specification of the VLAN Priority to\n        be pushed or swapped, based on the value of f3AccFlowPointIngressCTagControl.\n        It is applicable for 'push' and 'swaptag' control types.")
f3AccFlowPointSTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 17), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointSTagControl.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointSTagControl.setDescription("This object allows specification of the tag management \n        operation on the S-TAG.  Supported types are 'push', 'pushvid',\n        'swaptag', 'swapvid' and 'none'. If the type is 'push', \n        the VLAN Id (f3AccFlowPointSTagVlanId) and priority\n        (f3AccFlowPointSTagVlanPriority) are pushed onto the frame;\n        if the type is 'pushvid', only the VLAN Id (12 bits) is pushed,\n        the Priority is copied from incoming tag's priority;\n        if the type is 'swaptag', both VLAN Id and Priority (15 bits) \n        are swapped with the specified f3AccFlowPointSTagVlanId and \n        f3AccFlowPointSTagVlanPriority;\n        if the type is 'swapvid', only the VLAN Id (12 bits) are \n        swapped with the specified f3AccFlowPointSTagVlanId; \n        if the type is 'none', no S-TAG management is performed.")
f3AccFlowPointSTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 18), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointSTagVlanId.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointSTagVlanId.setDescription("This object allows specification of the VLAN Id to\n        be pushed or swapped, based on the value of \n        f3AccFlowPointIngressSTagControl. It is applicable \n        for 'push', 'swaptag', 'swapvid' and 'pushvid' control types.")
f3AccFlowPointSTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 19), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointSTagVlanPriority.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointSTagVlanPriority.setDescription("This object allows specification of the VLAN Priority to\n        be pushed or swapped, based on the value of \n        f3AccFlowPointIngressSTagControl. It is applicable\n        for 'push' and 'swaptag' control types.")
f3AccFlowPointEgressOuterTagPrioMapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointEgressOuterTagPrioMapEnabled.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointEgressOuterTagPrioMapEnabled.setDescription('This object defines whether to use the Egress Prio \n        Mapping to swap the priority of outer tag. When Enabled,\n        it indicates that the operation specified in the \n        EgressPrioMapTable would be applied to Flow for specified COS.\n        When Disabled,the EgressPrioMapTable operations are ignored \n        for specified Flow COS.')
f3AccFlowPointEgressInnerTagPrioMapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 21), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointEgressInnerTagPrioMapEnabled.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointEgressInnerTagPrioMapEnabled.setDescription('This object defines whether to use the Egress Prio\n        Mapping to swap the priority of inner tag. When Enabled,\n        it indicates that the operation specified in the \n        EgressPrioMapTable would be applied to Flow for specified COS.\n        When Disabled, the EgressPrioMapTable operations are ignored\n        for specified Flow COS.')
f3AccFlowPointSESFramesLossThresholdRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointSESFramesLossThresholdRatio.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointSESFramesLossThresholdRatio.setDescription('This object is used to specify the frame-loss ratio \n        per flow that starts counting Severely Errored Seconds (SES) \n        on the flowpoint.\n        This functionality is applicable if the flowpoint is monitored\n        using the Y.1731 ESA functionality.')
f3AccFlowPointDefaultMemberEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointDefaultMemberEnabled.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointDefaultMemberEnabled.setDescription('Truth Value means that on this FP, the membership is all the tag\n        packets without match any other membership associated to the port.\n        Untagged means untagged flow. Default only care tagged flow.')
f3AccFlowPointMcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointMcastRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointMcastRateLimitEnabled.setDescription('Whether multicast packets need be limited per FP.')
f3AccFlowPointMcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 25), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointMcastRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointMcastRateLimitSpeedLo.setDescription('The rate limiting for multicast packets per FP. When\n        f3AccFlowPointMcastRateLimitEnabled and the value is 0,\n        it means all multicast frame are dropped. This objects\n        only represents low 32 bits.')
f3AccFlowPointMcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 26), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointMcastRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointMcastRateLimitSpeedHi.setDescription('The rate limiting for multicast packets per FP. When\n        f3AccFlowPointMcastRateLimitEnabled and the value is 0, \n        it means all multicast frame are dropped. This objects\n        only represents high 32 bits.')
f3AccFlowPointBcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 27), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointBcastRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointBcastRateLimitEnabled.setDescription('Whether broadcast packets need be limited per FP.')
f3AccFlowPointBcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 28), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointBcastRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointBcastRateLimitSpeedLo.setDescription('The rate limiting for broadcast packets per FP. When\n        f3AccFlowPointBcastRateLimitEnabled and the value is 0, \n        it means all multicast frame are dropped. This objects\n        only represents low 32 bits.')
f3AccFlowPointBcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 29), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointBcastRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointBcastRateLimitSpeedHi.setDescription('The rate limiting for broadcast packets per FP. When \n        f3AccFlowPointBcastRateLimitEnabled and the value is 0, \n        it means all multicast frame are dropped. This objects\n        only represents high 32 bits.')
f3AccFlowPointCombinedRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 30), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointCombinedRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCombinedRateLimitEnabled.setDescription('Whether broadcast and multicast packets need be limited per FP.')
f3AccFlowPointCombinedRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 31), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointCombinedRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCombinedRateLimitSpeedLo.setDescription('The rate limiting for broadcast and multicast packets per FP.\n        When f3AccFlowPointCombinedRateLimitEnabled is true and the value is 0, \n        it means all broadcast and multicast frame are dropped. This object\n        only represents low 32 bits.')
f3AccFlowPointCombinedRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 32), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointCombinedRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCombinedRateLimitSpeedHi.setDescription('The rate limiting for broadcast and multicast packets per FP.\n        When f3AccFlowPointCombinedRateLimitEnabled is true and the value is 0, \n        it means all broadcast and multicast frame are dropped. This object\n        only represents high 32 bits.')
f3AccFlowPointSplitHorizonGroupOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 33), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointSplitHorizonGroupOID.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointSplitHorizonGroupOID.setDescription('Specifies the Split-Horizon Group OID. If there is no SHG, the value is none.')
f3AccFlowPointLoopAvoidance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 34), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointLoopAvoidance.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointLoopAvoidance.setDescription('EID of this associated Loop Avoidance protocol entity.\n        A value of NONE indicates there is no loop avoidance protocol.\n        Currently ERP EID is filled when ELAN service is created.')
f3AccFlowPointHierarchicalCOSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 35), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointHierarchicalCOSEnabled.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHierarchicalCOSEnabled.setDescription('Enable or Disable Hierarchical COS shaping (flow shaping).')
f3AccFlowPointMaximumBWLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 36), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointMaximumBWLo.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointMaximumBWLo.setDescription('This attribute description the Flow Point maximum bandwidth.\n        This object only represents low 32 bits.')
f3AccFlowPointMaximumBWHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 37), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointMaximumBWHi.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointMaximumBWHi.setDescription('This attribute description the Flow Point maximum bandwidth.\n        This object only represents high 32 bits.')
f3AccFlowPointGuaranteedBWLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 38), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointGuaranteedBWLo.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointGuaranteedBWLo.setDescription('This attribute description the Flow Point guaranteed bandwidth.\n        This object only represents low 32 bits.')
f3AccFlowPointGuaranteedBWHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 39), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointGuaranteedBWHi.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointGuaranteedBWHi.setDescription('This attribute description the Flow Point guaranteed bandwidth.\n        This objects only represents high 32 bits.')
f3AccFlowPointAutoBandwidthConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 40), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointAutoBandwidthConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointAutoBandwidthConfigEnabled.setDescription('This object specifies the shaper bandwidth is automatically adjusted \n        by the system. For a single COS Flow Point, the shaper EIR bandwidth is \n        set to the maximum port bandwidth; the shaper CIR is set to the available \n        port bandwidth multiplied by the value of the f3AccFlowPointAutoCIRPercentage\n        object. For a Hierarchical-COS Flow Point, the f3AccFlowPointMaximumBWLo and\n        f3AccFlowPointMaximumBWHi are set to the maximum port bandwidth; \n        the f3AccFlowPointGuaranteedBWLo and f3AccFlowPointGuaranteedBWHi are set to \n        the available port bandwidth multiplied by the value of the \n        f3AccFlowPointAutoCIRPercentage object. The value of this object must be FALSE \n        when f3AccFlowPointIngressMultiCOSEnabled is TRUE and \n        f3AccFlowPointHierarchicalCOSEnabled is FALSE.')
f3AccFlowPointAutoCIRPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointAutoCIRPercentage.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointAutoCIRPercentage.setDescription('This object specifies the percentage of available shaper CIR to be assigned \n        to this Flow Point when f3AccFlowPointAutoBandwidthConfigEnabled is TRUE.')
f3AccFlowPointFrameFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 42), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointFrameFwdEnabled.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointFrameFwdEnabled.setDescription('When enabled Flow Point will forward frames it receives. When disabled, \n        the Flow Point will not forward frames it receives.')
f3AccFlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 43), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointStorageType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStorageType.setDescription('The type of storage configured for this entry.')
f3AccFlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 44), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFlowPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointRowStatus.setDescription('The status of this row.\n        An entry MUST NOT exist in the active state unless all\n        objects in the entry have an appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3AccFlowPointRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3AccFlowPointRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3AccFlowPointRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3AccFlowPointUsePortPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 45), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointUsePortPrioMapProfile.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointUsePortPrioMapProfile.setDescription("This indicates whether the flow point is using, if true, the port's \n         Priority Mapping Profile or, if false, is using its own\n         Priority Mapping Profile.")
f3AccFlowPointRefPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 46), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointRefPrioMapProfile.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointRefPrioMapProfile.setDescription('This object allows to set priority map profile.')
f3AccFlowpointRefConnectGuardFlowObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 47), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowpointRefConnectGuardFlowObject.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowpointRefConnectGuardFlowObject.setDescription('This object specifies Mac Sec flow object OID.')
f3AccFlowpointSecureBlockingControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 48), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowpointSecureBlockingControl.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowpointSecureBlockingControl.setDescription('This object can be used to enable/disable secure block.')
f3AccFlowpointSecureState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 1, 1, 49), FlowSecState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowpointSecureState.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowpointSecureState.setDescription('This object specifies the secure state of this flow.')
f3AccFpQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2), )
if mibBuilder.loadTexts: f3AccFpQosShaperTable.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperTable.setDescription('A list of entries corresponding to Access Flow Point \n        Quality of Service Shaper for configuration purposes.')
f3AccFpQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointIndex"), (0, "F3-FPM-MIB", "f3AccFpQosShaperIndex"))
if mibBuilder.loadTexts: f3AccFpQosShaperEntry.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperEntry.setDescription('A conceptual row in the f3AccFpQosShaperTable. \n        These entries represent an Access Flow Point Quality \n        of Service Shaper.')
f3AccFpQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: f3AccFpQosShaperIndex.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperIndex.setDescription('The unique integer index value corresponding to a Quality \n        of Service Shaper.')
f3AccFpQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1, 2), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosShaperAdminState.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperAdminState.setDescription('This object represents the Administrative State of a Shaper.')
f3AccFpQosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperOperationalState.setDescription('This object represents the Operational State of a Shaper.')
f3AccFpQosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperSecondaryState.setDescription('This object represents the Secondary State of the Shaper.')
f3AccFpQosShaperCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosShaperCIRLo.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperCIRLo.setDescription('This object represents the Commited Information Rate (CIR)\n        (Lower 32 bits) of the Shaper.')
f3AccFpQosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosShaperCIRHi.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperCIRHi.setDescription('This object represents the Commited Information Rate (CIR)\n        (Higher 32 bits) of the Shaper.')
f3AccFpQosShaperEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosShaperEIRLo.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperEIRLo.setDescription('This object represents the Excess Information Rate (EIR)\n        (Lower 32 bits) of a Shaper.')
f3AccFpQosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosShaperEIRHi.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperEIRHi.setDescription('This object represents the Excess Information Rate (EIR)\n        (Lower 32 bits) of a Shaper.')
f3AccFpQosShaperCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosShaperCBS.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperCBS.setDescription('This object represents the Commited Burst Size (CBS) \n        of a Shaper.')
f3AccFpQosShaperEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosShaperEBS.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperEBS.setDescription('This object represents the Excess Burst Size (EBS) \n        of a Shaper.')
f3AccFpQosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosShaperBufferSize.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperBufferSize.setDescription('This object represents the Buffer Size of the Shaper.')
f3AccFpQosShaperCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperCOS.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperCOS.setDescription('This object provides the COS (Class of Service) value for\n        the QOS Shaper.')
f3AccFpQosShaperStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1, 13), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosShaperStorageType.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperStorageType.setDescription('The type of storage configured for this entry.')
f3AccFpQosShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosShaperRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperRowStatus.setDescription('The status of this row.\n        An entry MUST NOT exist in the active state unless all\n        objects in the entry have an appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3AccFpQosShaperRowStatus supported are\n        createAndGo(4) and destroy(6). All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3AccFpQosShaperRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3AccFpQosShaperRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3AccFpQosPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3), )
if mibBuilder.loadTexts: f3AccFpQosPolicerTable.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerTable.setDescription('A list of entries corresponding to Access Flow Point\n        Quality of Service Policer for configuration purposes.')
f3AccFpQosPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointIndex"), (0, "F3-FPM-MIB", "f3AccFpQosPolicerIndex"))
if mibBuilder.loadTexts: f3AccFpQosPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerEntry.setDescription('A conceptual row in the f3AccFpQosPolicerTable. \n        These entries represent an Access Flow Point Quality\n        of Service Policer.')
f3AccFpQosPolicerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: f3AccFpQosPolicerIndex.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerIndex.setDescription('The unique integer index value corresponding to a Quality \n        of Service Policer.\n        The Policer Index represents the COS level. This\n        is applicable in case of a Multi COS Flow Point. Index 1\n        represents COS 0; Index 2 represents COS 1 and so on.')
f3AccFpQosPolicerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 2), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosPolicerAdminState.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerAdminState.setDescription('This object represents the Administrative State of a Policer.')
f3AccFpQosPolicerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerOperationalState.setDescription('This object represents the Operational State of a Policer.')
f3AccFpQosPolicerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerSecondaryState.setDescription('This object represents the Secondary State of a Policer.')
f3AccFpQosPolicerCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosPolicerCIRLo.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerCIRLo.setDescription('This object represents the Commited Information Rate (CIR)\n        (Lower 32 bits) of the Policer.')
f3AccFpQosPolicerCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosPolicerCIRHi.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerCIRHi.setDescription('This object represents the Commited Information Rate (CIR)\n        (Higher 32 bits) of the Policer.')
f3AccFpQosPolicerEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosPolicerEIRLo.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerEIRLo.setDescription('This object represents the Excess Information Rate (EIR)\n        (Lower 32 bits) of a Policer.')
f3AccFpQosPolicerEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosPolicerEIRHi.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerEIRHi.setDescription('This object represents the Excess Information Rate (EIR)\n        (Lower 32 bits) of a Policer.')
f3AccFpQosPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosPolicerCBS.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerCBS.setDescription('This object represents the Commited Burst Size (CBS) \n        of a Policer.')
f3AccFpQosPolicerEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosPolicerEBS.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerEBS.setDescription('This object represents the Excess Burst Size (EBS) \n        of a Policer.')
f3AccFpQosPolicerAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 11), PolicerAlgorithmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerAlgorithm.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerAlgorithm.setDescription("This object represents Policer algorithm as 'srTCM'\n        (Single Rate Triple Color Marking) or 'trTCM' \n        (Two Rate Triple Color Marking).")
f3AccFpQosPolicerColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 12), PolicerColorMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosPolicerColorMode.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerColorMode.setDescription("This object allows specification of Policer Color Mode as\n        'color-aware' or 'color-blind'.")
f3AccFpQosPolicerCouplingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosPolicerCouplingFlag.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerCouplingFlag.setDescription('This object allows specification of Policer Coupling Flag.\n        When coupling is enabled, tokens that would normally be \n        added to the C-bucket are passed to the E-bucket only once the CIR\n        bucket has reached its CBS level. Therefore under this condition\n        the E-bucket is being filled at the rate of CIR + EIR. \n        Normally the long term average of frames declared yellow is \n        bounded by the EIR. Coupling is a function to allow the \n        long term average of frames declared yellow to be bounded by \n        CIR + EIR. This allows a higher volume of yellow frames \n        to be delivered/received if the arrival of green marked frames \n        is low. Tokens from the E-bucket do NOT get passed to the \n        C-bucket once the EBS level has been reached.\n        Enabling coupling in combination with a provisioned EIR of 0 \n        allows for a single rate three color marking (srTCM) algorithm \n        to be established.  In this situation the E-bucket is filled at the \n        CIR rate in the case the C-bucket is filled to its CBS level.')
f3AccFpQosPolicerPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosPolicerPolicingEnabled.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerPolicingEnabled.setDescription('This object allows specification of Policer Policing.\n        When Policing is disabled, traffic policing is bypassed. \n        When Policing is enabled, traffic policing is applied.')
f3AccFpQosPolicerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 15), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosPolicerStorageType.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerStorageType.setDescription('The type of storage configured for this entry.')
f3AccFpQosPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 3, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AccFpQosPolicerRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerRowStatus.setDescription('The status of this row.\n        An entry MUST NOT exist in the active state unless all\n        objects in the entry have an appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3AccFpQosPolicerRowStatus supported are\n        createAndGo(4) and destroy(6). All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3AccFpQosPolicerRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3AccFpQosPolicerRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3MPFlowExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 4), )
if mibBuilder.loadTexts: f3MPFlowExtTable.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowExtTable.setDescription('This table extends cmMPFlowTable to provide configuration of maximum\n        forwarding table size.')
f3MPFlowExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 4, 1), )
cmMPFlowEntry.registerAugmentions(("F3-FPM-MIB", "f3MPFlowExtEntry"))
f3MPFlowExtEntry.setIndexNames(*cmMPFlowEntry.getIndexNames())
if mibBuilder.loadTexts: f3MPFlowExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowExtEntry.setDescription('A conceptual row in the f3MPFlowExtTable.')
f3MPFlowExtMaxFwdEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3MPFlowExtMaxFwdEntries.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowExtMaxFwdEntries.setDescription('This object allows configuring the maximum number of Forwarding Entires\n        for Forwarding Table of this MP Flow.')
f3MPFlowRefConnectGuardFlowObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 4, 1, 2), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3MPFlowRefConnectGuardFlowObject.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowRefConnectGuardFlowObject.setDescription('This object specifies Mac Sec flow object OID.')
f3MPFlowSecureState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 4, 1, 3), FlowSecState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowSecureState.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowSecureState.setDescription('This object specifies the secure state of the macsec flow.')
f3AccFlowPointCpdV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5), )
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Table.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Table.setDescription('A list of entries corresponding to Access Flow Point\n        Control Protocol Disposition V2.')
f3AccFlowPointCpdV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointCpdV2Index"))
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Entry.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Entry.setDescription('A conceptual row in the f3AccFlowPointCpdV2Table. \n        These entries represent a Control Protocol Disposition \n        filtering criteria on the Access Flow Point.')
f3AccFlowPointCpdV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Index.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Index.setDescription('Unique Index value to access the CPD row.')
f3AccFlowPointCpdV2IslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 2), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2IslDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2IslDispType.setDescription('Control Protocol Disposition for ISL (Inter Switch Link).\n        MAC Address (01:00:0C:00:00:00).')
f3AccFlowPointCpdV2PagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2PagpDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2PagpDispType.setDescription('Control Protocol Disposition for PAGP (Port Aggregation Protocol).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x104).')
f3AccFlowPointCpdV2UdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2UdldDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2UdldDispType.setDescription('Control Protocol Disposition for UDLD (Unidirectional Link Detection).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x111).')
f3AccFlowPointCpdV2CdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2CdpDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2CdpDispType.setDescription('Control Protocol Disposition for CDP (Cisco Discovery Protocol).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2000).')
f3AccFlowPointCpdV2VtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2VtpDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2VtpDispType.setDescription('Control Protocol Disposition for VTP (VLAN Trunking Protocol).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2003).')
f3AccFlowPointCpdV2DtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2DtpDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2DtpDispType.setDescription('Control Protocol Disposition for DTP (Dynamic Trunking).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2004).')
f3AccFlowPointCpdV2PvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2PvstpPlusDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2PvstpPlusDispType.setDescription('Control Protocol Disposition for Spanning Tree PVSTP+.\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x10B).')
f3AccFlowPointCpdV2UplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2UplinkFastDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2UplinkFastDispType.setDescription('Control Protocol Disposition for STP UplinkFast.\n        MAC Address (01:00:0C:CD:CD:CD), Ethertype(0x200A).')
f3AccFlowPointCpdV2VlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2VlanBridgeDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2VlanBridgeDispType.setDescription('Control Protocol Disposition for VLAN Bridge.\n        MAC Address (01:00:0C:CD:CD:CE), Ethertype(0x10C).')
f3AccFlowPointCpdV2L2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2L2PTDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2L2PTDispType.setDescription('Control Protocol Disposition for Layer 2 Protocol Tunnelling(L2PT).\n        MAC Address (01:00:0C:CD:CD:D0).')
f3AccFlowPointCpdV2BPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2BPDUDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2BPDUDispType.setDescription('Control Protocol Disposition for IEEE Spanning Tree(STP),\n        MSTP (Multiple Spanning Tree) and RSTP (Rapid Reconfiguration of\n        Spanning Tree). MAC Address (01:80:C2:00:00:00).')
f3AccFlowPointCpdV2PauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2PauseDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2PauseDispType.setDescription('Control Protocol Disposition for IEEE 802.3x Flow Control \n        (PAUSE frames).')
f3AccFlowPointCpdV2LACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2LACPDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2LACPDispType.setDescription('Control Protocol Disposition for 802.3ad Link Aggregation\n        Protocol.\n        MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(01).')
f3AccFlowPointCpdV2LACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2LACPMarkerDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2LACPMarkerDispType.setDescription('Control Protocol Disposition for IEEE 802.3ad Marker Protocol.\n        MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(02).')
f3AccFlowPointCpdV2EfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2EfmOamDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2EfmOamDispType.setDescription('Control Protocol Disposition for IEEE 802.3ah EFM OAM.\n        MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(03).')
f3AccFlowPointCpdV2SSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2SSMDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2SSMDispType.setDescription('Control Protocol Disposition for Sync Status Messages.\n        MAC Address (01:80:C2:00:00:02), Ethertype (0x19A7), Subtype(0A).')
f3AccFlowPointCpdV2PortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2PortAuthenDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2PortAuthenDispType.setDescription('Control Protocol Disposition for IEEE 802.1x Protocol.\n        MAC Address (01:80:C2:00:00:03), Ethertype (0x888E).')
f3AccFlowPointCpdV2LANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2LANBridgesDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2LANBridgesDispType.setDescription('Control Protocol Disposition for IEEE 802.1d LAN Bridge Managment.\n        MAC Address (01:80:C2:00:00:10).')
f3AccFlowPointCpdV2GMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2GMRPDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2GMRPDispType.setDescription('Control Protocol Disposition for GARP Multicast Registration\n        Protocol. MAC Address (01:80:C2:00:00:20).')
f3AccFlowPointCpdV2GVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2GVRPDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2GVRPDispType.setDescription('Control Protocol Disposition for GARP VLAN Registration\n        Protocol. MAC Address (01:80:C2:00:00:21).')
f3AccFlowPointCpdV2GARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2GARPDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2GARPDispType.setDescription('Group Disposition type which includes GARP Reserved \n        MAC Address from range 01:80:C2:00:00:22 to 01:80:C2:00:00:2F.')
f3AccFlowPointCpdV2ActiveControlProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 23), CmActiveControlProtocolsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2ActiveControlProtocols.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2ActiveControlProtocols.setDescription('List of Active Control Protocol Dispositions. Note that\n        if the Port Level Disposition control is set to PEER or \n        DISCARD, the flow level disposition is no longer active.\n        This object provides information on all the active\n        dispositions.')
f3AccFlowPointCpdV2ELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2ELMIDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2ELMIDispType.setDescription('ELMI (Ethernet Local Management Interface) Disposition type. \n        MAC Address 01:80:C2:00:00:07 and EtherType of 0x88EE.')
f3AccFlowPointCpdV2Mac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac00DispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac00DispType.setDescription('MAC Address 01:80:C2:00:00:00 Disposition type.')
f3AccFlowPointCpdV2Mac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac01DispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac01DispType.setDescription('MAC Address 01:80:C2:00:00:01 Disposition type.')
f3AccFlowPointCpdV2Mac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 27), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac02DispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac02DispType.setDescription('MAC Address 01:80:C2:00:00:02 Disposition type.')
f3AccFlowPointCpdV2Mac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac03DispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac03DispType.setDescription('MAC Address 01:80:C2:00:00:03 Disposition type.')
f3AccFlowPointCpdV2Mac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 29), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac04DispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac04DispType.setDescription('MAC Address 01:80:C2:00:00:04 Disposition type.')
f3AccFlowPointCpdV2Mac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 30), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac05DispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac05DispType.setDescription('MAC Address 01:80:C2:00:00:05 Disposition type.')
f3AccFlowPointCpdV2Mac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac06DispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac06DispType.setDescription('MAC Address 01:80:C2:00:00:06 Disposition type.')
f3AccFlowPointCpdV2Mac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac07DispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac07DispType.setDescription('MAC Address 01:80:C2:00:00:07 Disposition type.')
f3AccFlowPointCpdV2Mac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac08DispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac08DispType.setDescription('MAC Address 01:80:C2:00:00:08 Disposition type.')
f3AccFlowPointCpdV2Mac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac09DispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac09DispType.setDescription('MAC Address 01:80:C2:00:00:09 Disposition type.')
f3AccFlowPointCpdV2Mac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac0ADispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac0ADispType.setDescription('MAC Address 01:80:C2:00:00:0A Disposition type.')
f3AccFlowPointCpdV2Mac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac0BDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac0BDispType.setDescription('MAC Address 01:80:C2:00:00:0B Disposition type.')
f3AccFlowPointCpdV2Mac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac0CDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac0CDispType.setDescription('MAC Address 01:80:C2:00:00:0C Disposition type.')
f3AccFlowPointCpdV2Mac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac0DDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac0DDispType.setDescription('MAC Address 01:80:C2:00:00:0D Disposition type.')
f3AccFlowPointCpdV2Mac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac0EDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac0EDispType.setDescription('MAC Address 01:80:C2:00:00:0E Disposition type.')
f3AccFlowPointCpdV2Mac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac0FDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Mac0FDispType.setDescription('MAC Address 01:80:C2:00:00:0F Disposition type.')
f3AccFlowPointCpdV2NearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2NearestLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2NearestLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Nearest Bridge Disposition type.')
f3AccFlowPointCpdV2NonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2NonTpmrLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2NonTpmrLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Non-TPMR Bridge Disposition type.')
f3AccFlowPointCpdV2CustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 5, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointCpdV2CustomerLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2CustomerLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Customer Bridge Disposition type.')
f3AccFlowPointLearningConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 6), )
if mibBuilder.loadTexts: f3AccFlowPointLearningConfigTable.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointLearningConfigTable.setDescription('This table extends f3AccFlowPointTable to provide parameters for MAC Table control\n             configuration.')
f3AccFlowPointLearningConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 6, 1), )
f3AccFlowPointEntry.registerAugmentions(("F3-FPM-MIB", "f3AccFlowPointLearningConfigEntry"))
f3AccFlowPointLearningConfigEntry.setIndexNames(*f3AccFlowPointEntry.getIndexNames())
if mibBuilder.loadTexts: f3AccFlowPointLearningConfigEntry.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointLearningConfigEntry.setDescription('A conceptual row in the f3AccFlowPointLearningConfigTable.')
f3AccFlowPointLearningConfigLearningEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 6, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointLearningConfigLearningEnabled.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointLearningConfigLearningEnabled.setDescription('This object allows configuring Learning Control on this Flowpoint.')
f3AccFlowPointLearningConfigMaxFwdEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointLearningConfigMaxFwdEntries.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointLearningConfigMaxFwdEntries.setDescription('This object allows configuring the maximum number of Forwarding Entries \n          on this Flowpoint.')
f3AccFlowPointLearningConfigProtectLearningCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 6, 1, 3), ProtectLearningControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointLearningConfigProtectLearningCtrl.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointLearningConfigProtectLearningCtrl.setDescription('This object allows configuring Learning Control on this Flowpoint.')
f3AccFlowPointLearningConfigAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 6, 1, 4), FlowLearningConfigAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointLearningConfigAction.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointLearningConfigAction.setDescription('This objects allows performing user action on Flow Learning Table.')
f3NetFlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7), )
if mibBuilder.loadTexts: f3NetFlowPointTable.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointTable.setDescription('A list of entries corresponding to Network Flow Point\n             for configuration purposes.')
f3NetFlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointIndex"))
if mibBuilder.loadTexts: f3NetFlowPointEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointEntry.setDescription('A conceptual row in the f3NetFlowPointTable.\n             These entries represent an Network Flow Point.\n             If the Flow Point attached to a lag, the slotIndex should \n             be 255 (255 is used to identify the Flow Point belongs to lag), \n             and the cmEthernetNetPortIndex should be the f3LagIndex.')
f3NetFlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3NetFlowPointIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointIndex.setDescription('The integer index value corresponding to an Flow Point.')
f3NetFlowPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointAlias.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointAlias.setDescription('This object allows SNMP management entities to provide a\n        circuit identifier with the Flow Point.')
f3NetFlowPointAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 3), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointAdminState.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointAdminState.setDescription('This object represents the Administrative State of the Flow Point.')
f3NetFlowPointOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointOperationalState.setDescription('This object represents the Operational State of the Flow Point.')
f3NetFlowPointSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointSecondaryState.setDescription('This object represents the Secondary State of the Flow Point.')
f3NetFlowPointAssociatedFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 6), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointAssociatedFlowId.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointAssociatedFlowId.setDescription('This object provides the association of an Flow with an Flow Point.')
f3NetFlowPointIngressMultiCOSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointIngressMultiCOSEnabled.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointIngressMultiCOSEnabled.setDescription('This object allows specification of ingress multiple COS\n       (Class of Service) Flow Point.')
f3NetFlowPointIngressCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointIngressCOS.setStatus('deprecated')
if mibBuilder.loadTexts: f3NetFlowPointIngressCOS.setDescription("This object allows specification of ingress COS\n       (Class of Service) Flow Point.\n\n       This attribute has been deprecated and is not supported. The\n       Ingress COS is determined from the flowpoint's associated\n       Priority Mapping Profle.")
f3NetFlowPointEgressShapingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 9), ShapingType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointEgressShapingType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointEgressShapingType.setDescription('This object allows specification of Shaping Type for Flow Point.\n        For 8.1.1 release, only flow-based Shaping Type is supported.')
f3NetFlowPointIngressVlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointIngressVlanMemberList.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointIngressVlanMemberList.setDescription('It allows specification of VLAN members of the Flow Point.\n        VLAN members are comma separated, of the form X-Y where X is the\n        VLAN Id and Y is the VLAN Priority. VLAN members can be of\n        the form X-* or X (vlan X with all priorities), *-Y (all vlans\n        with priority Y), and X1:X2 (range of vlans from X1 to X2, \n        all priorities). Members with specific VLAN Id and specific\n        VLAN Priority are not supported. Once the Flow Point is created,\n        this attribute can only be updated using f3NetFlowPointVlanMemberAction\n        and f3NetFlowPointVlanMemberActionVlan objects.')
f3NetFlowPointVlanMemberAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 11), FlowVlanActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointVlanMemberAction.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointVlanMemberAction.setDescription('This object allows to add or remove the VLAN members specified by\n        f3NetFlowPointVlanMemberActionVlan object. SNMP manager must first\n        configure the VLAN member to be added/removed in the object\n        f3NetFlowPointVlanMemberActionVlan and then should specify\n        f3NetFlowPointVlanMemberAction on whether to add/remove the specified\n        VLAN member.')
f3NetFlowPointVlanMemberActionVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointVlanMemberActionVlan.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointVlanMemberActionVlan.setDescription('This object allows adding/removing VLAN members to a Flow Point.\n        VLAN member is of the form X-Y where X is the VLAN Id and Y is\n        the VLAN Priority. VLAN members can be of the form X-* (vlan X \n        with all priorities), *-Y (all vlans with priority Y), and X1:X2 \n        (range of vlans from X1 to X2, all priorities). Members with \n        specific VLAN Id and specific VLAN Priority are not supported.\n        In order to add/remove VLAN member to a flow, user must specify\n        this object with appropriate VLAN and then \n        invoke f3NetFlowPointVlanMemberAction.')
f3NetFlowPointIngressUntaggedFrameEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointIngressUntaggedFrameEnabled.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointIngressUntaggedFrameEnabled.setDescription('This object allows to specify whether or not the Flow Point\n        supports untagged frame.')
f3NetFlowPointCTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 14), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointCTagControl.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCTagControl.setDescription("This object allows specification of the tag management \n        operation on the C-TAG.  Supported types are 'push', 'pushvid',\n        'swaptag', 'swapvid' and 'none'. If the type is 'push',\n        the VLAN Id (f3NetFlowPointCTagVlanId) and priority\n        (f3NetFlowPointCTagVlanPriority) are pushed onto the frame;\n        if the type is 'pushvid', only the VLAN Id (12 bits) is pushed,\n        the Priority is copied from incoming tag's priority;\n        if the type is 'swaptag', both VLAN Id and Priority (15 bits)\n        are swapped with the specified f3NetFlowPointCTagVlanId and \n        f3NetFlowPointCTagVlanPriority;\n        if the type is 'swapvid', only the VLAN Id (12 bits) are \n        swapped with the specified f3NetFlowPointCTagVlanId; \n        if the type is 'none', no C-TAG management is performed.")
f3NetFlowPointCTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 15), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointCTagVlanId.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCTagVlanId.setDescription("This object allows specification of the VLAN Id to\n        be pushed or swapped, based on the value of \n        f3NetFlowPointIngressCTagControl. It is applicable \n        for 'push', 'swaptag', 'swapvid' and 'pushvid' control types.")
f3NetFlowPointCTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 16), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointCTagVlanPriority.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCTagVlanPriority.setDescription("This object allows specification of the VLAN Priority to\n        be pushed or swapped, based on the value of f3NetFlowPointIngressCTagControl.\n        It is applicable for 'push' and 'swaptag' control types.")
f3NetFlowPointSTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 17), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointSTagControl.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointSTagControl.setDescription("This object allows specification of the tag management \n        operation on the S-TAG.  Supported types are 'push', 'pushvid',\n        'swaptag', 'swapvid' and 'none'. If the type is 'push', \n        the VLAN Id (f3NetFlowPointSTagVlanId) and priority\n        (f3NetFlowPointSTagVlanPriority) are pushed onto the frame;\n        if the type is 'pushvid', only the VLAN Id (12 bits) is pushed,\n        the Priority is copied from incoming tag's priority;\n        if the type is 'swaptag', both VLAN Id and Priority (15 bits) \n        are swapped with the specified f3NetFlowPointSTagVlanId and \n        f3NetFlowPointSTagVlanPriority;\n        if the type is 'swapvid', only the VLAN Id (12 bits) are \n        swapped with the specified f3NetFlowPointSTagVlanId; \n        if the type is 'none', no S-TAG management is performed.")
f3NetFlowPointSTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 18), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointSTagVlanId.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointSTagVlanId.setDescription("This object allows specification of the VLAN Id to\n        be pushed or swapped, based on the value of \n        f3NetFlowPointIngressSTagControl. It is applicable \n        for 'push', 'swaptag', 'swapvid' and 'pushvid' control types.")
f3NetFlowPointSTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 19), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointSTagVlanPriority.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointSTagVlanPriority.setDescription("This object allows specification of the VLAN Priority to\n        be pushed or swapped, based on the value of \n        f3NetFlowPointIngressSTagControl. It is applicable\n        for 'push' and 'swaptag' control types.")
f3NetFlowPointEgressOuterTagPrioMapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointEgressOuterTagPrioMapEnabled.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointEgressOuterTagPrioMapEnabled.setDescription('This object defines whether to use the Egress Prio \n        Mapping to swap the priority of outer tag. When Enabled,\n        it indicates that the operation specified in the \n        EgressPrioMapTable would be applied to Flow for specified COS.\n        When Disabled,the EgressPrioMapTable operations are ignored \n        for specified Flow COS.')
f3NetFlowPointEgressInnerTagPrioMapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 21), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointEgressInnerTagPrioMapEnabled.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointEgressInnerTagPrioMapEnabled.setDescription('This object defines whether to use the Egress Prio\n        Mapping to swap the priority of inner tag. When Enabled,\n        it indicates that the operation specified in the \n        EgressPrioMapTable would be applied to Flow for specified COS.\n        When Disabled, the EgressPrioMapTable operations are ignored\n        for specified Flow COS.')
f3NetFlowPointSESFramesLossThresholdRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointSESFramesLossThresholdRatio.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointSESFramesLossThresholdRatio.setDescription('This object is used to specify the frame-loss ratio \n        per flow that starts counting Severely Errored Seconds (SES) \n        on the flowpoint.\n        This functionality is applicable if the flowpoint is monitored\n        using the Y.1731 ESA functionality.')
f3NetFlowPointDefaultMemberEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointDefaultMemberEnabled.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointDefaultMemberEnabled.setDescription('Truth Value means that on this FP, the membership is all the tag\n        packets without match any other membership associated to the port.\n        Untagged means untagged flow. Default only care tagged flow.')
f3NetFlowPointMcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointMcastRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointMcastRateLimitEnabled.setDescription('Whether multicast packets need be limited per FP.')
f3NetFlowPointMcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 25), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointMcastRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointMcastRateLimitSpeedLo.setDescription('The rate limiting for multicast packets per FP. When\n        f3NetFlowPointMcastRateLimitEnabled and the value is 0,\n        it means all multicast frame are dropped. This objects\n        only represents low 32 bits.')
f3NetFlowPointMcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 26), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointMcastRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointMcastRateLimitSpeedHi.setDescription('The rate limiting for multicast packets per FP. When\n        f3NetFlowPointMcastRateLimitEnabled and the value is 0, \n        it means all multicast frame are dropped. This objects\n        only represents high 32 bits.')
f3NetFlowPointBcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 27), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointBcastRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointBcastRateLimitEnabled.setDescription('Whether broadcast packets need be limited per FP.')
f3NetFlowPointBcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 28), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointBcastRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointBcastRateLimitSpeedLo.setDescription('The rate limiting for broadcast packets per FP. When\n        f3NetFlowPointBcastRateLimitEnabled and the value is 0, \n        it means all multicast frame are dropped. This objects\n        only represents low 32 bits.')
f3NetFlowPointBcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 29), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointBcastRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointBcastRateLimitSpeedHi.setDescription('The rate limiting for broadcast packets per FP. When \n        f3NetFlowPointBcastRateLimitEnabled and the value is 0, \n        it means all multicast frame are dropped. This objects\n        only represents high 32 bits.')
f3NetFlowPointCombinedRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 30), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointCombinedRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCombinedRateLimitEnabled.setDescription('Whether broadcast and multicast packets need be limited per FP.')
f3NetFlowPointCombinedRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 31), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointCombinedRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCombinedRateLimitSpeedLo.setDescription('The rate limiting for broadcast and multicast packets per FP.\n        When f3NetFlowPointCombinedRateLimitEnabled is true and the value is 0, \n        it means all broadcast and multicast frame are dropped. This object\n        only represents low 32 bits.')
f3NetFlowPointCombinedRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 32), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointCombinedRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCombinedRateLimitSpeedHi.setDescription('The rate limiting for broadcast and multicast packets per FP.\n        When f3NetFlowPointCombinedRateLimitEnabled is true and the value is 0, \n        it means all broadcast and multicast frame are dropped. This object\n        only represents high 32 bits.')
f3NetFlowPointSplitHorizonGroupOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 33), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointSplitHorizonGroupOID.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointSplitHorizonGroupOID.setDescription('Specifies the Split-Horizon Group OID. If there is no SHG, the value is none.')
f3NetFlowPointLoopAvoidance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 34), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointLoopAvoidance.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointLoopAvoidance.setDescription('EID of this associated Loop Avoidance protocol entity.\n        A value of NONE indicates there is no loop avoidance protocol.\n        Currently ERP EID is filled when ELAN service is created.')
f3NetFlowPointHierarchicalCOSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 35), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointHierarchicalCOSEnabled.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHierarchicalCOSEnabled.setDescription('Enable or Disable Hierarchical COS shaping (flow shaping).')
f3NetFlowPointMaximumBWLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 36), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointMaximumBWLo.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointMaximumBWLo.setDescription('This attribute description the Flow Point maximum bandwidth.\n        This object only represents low 32 bits.')
f3NetFlowPointMaximumBWHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 37), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointMaximumBWHi.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointMaximumBWHi.setDescription('This attribute description the Flow Point maximum bandwidth.\n        This object only represents high 32 bits.')
f3NetFlowPointGuaranteedBWLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 38), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointGuaranteedBWLo.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointGuaranteedBWLo.setDescription('This attribute description the Flow Point guaranteed bandwidth.\n        This object only represents low 32 bits.')
f3NetFlowPointGuaranteedBWHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 39), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointGuaranteedBWHi.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointGuaranteedBWHi.setDescription('This attribute description the Flow Point guaranteed bandwidth.\n        This objects only represents high 32 bits.')
f3NetFlowPointAutoBandwidthConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 40), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointAutoBandwidthConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointAutoBandwidthConfigEnabled.setDescription('This object specifies the shaper bandwidth is automatically adjusted \n        by the system. For a single COS Flow Point, the shaper EIR bandwidth is \n        set to the maximum port bandwidth; the shaper CIR is set to the available \n        port bandwidth multiplied by the value of the f3NetFlowPointAutoCIRPercentage\n        object. For a Hierarchical-COS Flow Point, the f3NetFlowPointMaximumBWLo and\n        f3NetFlowPointMaximumBWHi are set to the maximum port bandwidth; \n        the f3NetFlowPointGuaranteedBWLo and f3NetFlowPointGuaranteedBWHi are set to \n        the available port bandwidth multiplied by the value of the \n        f3NetFlowPointAutoCIRPercentage object. The value of this object must be FALSE \n        when f3NetFlowPointIngressMultiCOSEnabled is TRUE and \n        f3NetFlowPointHierarchicalCOSEnabled is FALSE.')
f3NetFlowPointAutoCIRPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointAutoCIRPercentage.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointAutoCIRPercentage.setDescription('This object specifies the percentage of available shaper CIR to be assigned \n        to this Flow Point when f3NetFlowPointAutoBandwidthConfigEnabled is TRUE.')
f3NetFlowPointFrameFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 42), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointFrameFwdEnabled.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointFrameFwdEnabled.setDescription('When enabled Flow Point will forward frames it receives. \n        When disabled, the Flow Point will not forward frames it receives.')
f3NetFlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 43), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointStorageType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStorageType.setDescription('The type of storage configured for this entry.')
f3NetFlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 44), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFlowPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointRowStatus.setDescription('The status of this row.\n        An entry MUST NOT exist in the active state unless all\n        objects in the entry have an appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3NetFlowPointRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3NetFlowPointRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3NetFlowPointRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3NetFlowPointUsePortPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 45), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointUsePortPrioMapProfile.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointUsePortPrioMapProfile.setDescription("This indicates whether the flow point is using, if true, the port's \n         Priority Mapping Profile or, if false, is using its own\n         Priority Mapping Profile.")
f3NetFlowPointRefPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 46), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointRefPrioMapProfile.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointRefPrioMapProfile.setDescription('This object allows to set priority map profile.')
f3NetFlowpointRefConnectGuardFlowObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 47), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowpointRefConnectGuardFlowObject.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowpointRefConnectGuardFlowObject.setDescription('This object specifies Mac Sec flow object OID.')
f3NetFlowpointSecureBlockingControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 48), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowpointSecureBlockingControl.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowpointSecureBlockingControl.setDescription('This object can be used to enable/disable secure block.')
f3NetFlowpointSecureState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 7, 1, 49), FlowSecState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowpointSecureState.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowpointSecureState.setDescription('This object specifies the secure state of this flow.')
f3NetFpQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8), )
if mibBuilder.loadTexts: f3NetFpQosShaperTable.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperTable.setDescription('A list of entries corresponding to Net Flow Point \n        Quality of Service Shaper for configuration purposes.')
f3NetFpQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointIndex"), (0, "F3-FPM-MIB", "f3NetFpQosShaperIndex"))
if mibBuilder.loadTexts: f3NetFpQosShaperEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperEntry.setDescription('A conceptual row in the f3NetFpQosShaperTable. \n        These entries represent an Net Flow Point Quality \n        of Service Shaper.')
f3NetFpQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: f3NetFpQosShaperIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperIndex.setDescription('The unique integer index value corresponding to a Quality \n        of Service Shaper.')
f3NetFpQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1, 2), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosShaperAdminState.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperAdminState.setDescription('This object represents the Administrative State of a Shaper.')
f3NetFpQosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperOperationalState.setDescription('This object represents the Operational State of a Shaper.')
f3NetFpQosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperSecondaryState.setDescription('This object represents the Secondary State of the Shaper.')
f3NetFpQosShaperCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosShaperCIRLo.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperCIRLo.setDescription('This object represents the Commited Information Rate (CIR)\n        (Lower 32 bits) of the Shaper.')
f3NetFpQosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosShaperCIRHi.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperCIRHi.setDescription('This object represents the Commited Information Rate (CIR)\n        (Higher 32 bits) of the Shaper.')
f3NetFpQosShaperEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosShaperEIRLo.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperEIRLo.setDescription('This object represents the Excess Information Rate (EIR)\n        (Lower 32 bits) of a Shaper.')
f3NetFpQosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosShaperEIRHi.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperEIRHi.setDescription('This object represents the Excess Information Rate (EIR)\n        (Lower 32 bits) of a Shaper.')
f3NetFpQosShaperCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosShaperCBS.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperCBS.setDescription('This object represents the Commited Burst Size (CBS) \n        of a Shaper.')
f3NetFpQosShaperEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosShaperEBS.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperEBS.setDescription('This object represents the Excess Burst Size (EBS) \n        of a Shaper.')
f3NetFpQosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosShaperBufferSize.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperBufferSize.setDescription('This object represents the Buffer Size of the Shaper.')
f3NetFpQosShaperCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperCOS.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperCOS.setDescription('This object provides the COS (Class of Service) value for\n        the QOS Shaper.')
f3NetFpQosShaperStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1, 13), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosShaperStorageType.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperStorageType.setDescription('The type of storage configured for this entry.')
f3NetFpQosShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 8, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosShaperRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperRowStatus.setDescription('The status of this row.\n        An entry MUST NOT exist in the active state unless all\n        objects in the entry have an appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3NetFpQosShaperRowStatus supported are\n        createAndGo(4) and destroy(6). All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3NetFpQosShaperRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3NetFpQosShaperRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3NetFpQosPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9), )
if mibBuilder.loadTexts: f3NetFpQosPolicerTable.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerTable.setDescription('A list of entries corresponding to Net Flow Point\n        Quality of Service Policer for configuration purposes.')
f3NetFpQosPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointIndex"), (0, "F3-FPM-MIB", "f3NetFpQosPolicerIndex"))
if mibBuilder.loadTexts: f3NetFpQosPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerEntry.setDescription('A conceptual row in the f3NetFpQosPolicerTable. \n        These entries represent an Net Flow Point Quality\n        of Service Policer.')
f3NetFpQosPolicerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: f3NetFpQosPolicerIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerIndex.setDescription('The unique integer index value corresponding to a Quality \n        of Service Policer.\n        The Policer Index represents the COS level. This\n        is applicable in case of a Multi COS Flow Point. Index 1\n        represents COS 0; Index 2 represents COS 1 and so on.')
f3NetFpQosPolicerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 2), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosPolicerAdminState.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerAdminState.setDescription('This object represents the Administrative State of a Policer.')
f3NetFpQosPolicerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerOperationalState.setDescription('This object represents the Operational State of a Policer.')
f3NetFpQosPolicerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerSecondaryState.setDescription('This object represents the Secondary State of a Policer.')
f3NetFpQosPolicerCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosPolicerCIRLo.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerCIRLo.setDescription('This object represents the Commited Information Rate (CIR)\n        (Lower 32 bits) of the Policer.')
f3NetFpQosPolicerCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosPolicerCIRHi.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerCIRHi.setDescription('This object represents the Commited Information Rate (CIR)\n        (Higher 32 bits) of the Policer.')
f3NetFpQosPolicerEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosPolicerEIRLo.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerEIRLo.setDescription('This object represents the Excess Information Rate (EIR)\n        (Lower 32 bits) of a Policer.')
f3NetFpQosPolicerEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosPolicerEIRHi.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerEIRHi.setDescription('This object represents the Excess Information Rate (EIR)\n        (Lower 32 bits) of a Policer.')
f3NetFpQosPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosPolicerCBS.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerCBS.setDescription('This object represents the Commited Burst Size (CBS) \n        of a Policer.')
f3NetFpQosPolicerEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosPolicerEBS.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerEBS.setDescription('This object represents the Excess Burst Size (EBS) \n        of a Policer.')
f3NetFpQosPolicerAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 11), PolicerAlgorithmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerAlgorithm.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerAlgorithm.setDescription("This object represents Policer algorithm as 'srTCM'\n        (Single Rate Triple Color Marking) or 'trTCM' \n        (Two Rate Triple Color Marking).")
f3NetFpQosPolicerColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 12), PolicerColorMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosPolicerColorMode.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerColorMode.setDescription("This object allows specification of Policer Color Mode as\n        'color-aware' or 'color-blind'.")
f3NetFpQosPolicerCouplingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosPolicerCouplingFlag.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerCouplingFlag.setDescription('This object allows specification of Policer Coupling Flag.\n        When coupling is enabled, tokens that would normally be \n        added to the C-bucket are passed to the E-bucket only once the CIR\n        bucket has reached its CBS level. Therefore under this condition\n        the E-bucket is being filled at the rate of CIR + EIR. \n        Normally the long term average of frames declared yellow is \n        bounded by the EIR. Coupling is a function to allow the \n        long term average of frames declared yellow to be bounded by \n        CIR + EIR. This allows a higher volume of yellow frames \n        to be delivered/received if the arrival of green marked frames \n        is low. Tokens from the E-bucket do NOT get passed to the \n        C-bucket once the EBS level has been reached.\n        Enabling coupling in combination with a provisioned EIR of 0 \n        allows for a single rate three color marking (srTCM) algorithm \n        to be established.  In this situation the E-bucket is filled at the \n        CIR rate in the case the C-bucket is filled to its CBS level.')
f3NetFpQosPolicerPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosPolicerPolicingEnabled.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerPolicingEnabled.setDescription('This object allows specification of Policer Policing.\n        When Policing is disabled, traffic policing is bypassed. \n        When Policing is enabled, traffic policing is applied.')
f3NetFpQosPolicerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 15), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosPolicerStorageType.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerStorageType.setDescription('The type of storage configured for this entry.')
f3NetFpQosPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 9, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetFpQosPolicerRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerRowStatus.setDescription('The status of this row.\n        An entry MUST NOT exist in the active state unless all\n        objects in the entry have an appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3NetFpQosPolicerRowStatus supported are\n        createAndGo(4) and destroy(6). All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3NetFpQosPolicerRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3NetFpQosPolicerRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3NetFlowPointCpdV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10), )
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Table.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Table.setDescription('A list of entries corresponding to Net Flow Point\n        Control Protocol Disposition V2.')
f3NetFlowPointCpdV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointCpdV2Index"))
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Entry.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Entry.setDescription('A conceptual row in the f3NetFlowPointCpdV2Table. \n        These entries represent a Control Protocol Disposition \n        filtering criteria on the Net Flow Point.')
f3NetFlowPointCpdV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Index.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Index.setDescription('Unique Index value to access the CPD row.')
f3NetFlowPointCpdV2IslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 2), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2IslDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2IslDispType.setDescription('Control Protocol Disposition for ISL (Inter Switch Link).\n        MAC Address (01:00:0C:00:00:00).')
f3NetFlowPointCpdV2PagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2PagpDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2PagpDispType.setDescription('Control Protocol Disposition for PAGP (Port Aggregation Protocol).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x104).')
f3NetFlowPointCpdV2UdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2UdldDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2UdldDispType.setDescription('Control Protocol Disposition for UDLD (Unidirectional Link Detection).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x111).')
f3NetFlowPointCpdV2CdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2CdpDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2CdpDispType.setDescription('Control Protocol Disposition for CDP (Cisco Discovery Protocol).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2000).')
f3NetFlowPointCpdV2VtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2VtpDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2VtpDispType.setDescription('Control Protocol Disposition for VTP (VLAN Trunking Protocol).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2003).')
f3NetFlowPointCpdV2DtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2DtpDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2DtpDispType.setDescription('Control Protocol Disposition for DTP (Dynamic Trunking).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2004).')
f3NetFlowPointCpdV2PvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2PvstpPlusDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2PvstpPlusDispType.setDescription('Control Protocol Disposition for Spanning Tree PVSTP+.\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x10B).')
f3NetFlowPointCpdV2UplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2UplinkFastDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2UplinkFastDispType.setDescription('Control Protocol Disposition for STP UplinkFast.\n        MAC Address (01:00:0C:CD:CD:CD), Ethertype(0x200A).')
f3NetFlowPointCpdV2VlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2VlanBridgeDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2VlanBridgeDispType.setDescription('Control Protocol Disposition for VLAN Bridge.\n        MAC Address (01:00:0C:CD:CD:CE), Ethertype(0x10C).')
f3NetFlowPointCpdV2L2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2L2PTDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2L2PTDispType.setDescription('Control Protocol Disposition for Layer 2 Protocol Tunnelling(L2PT).\n        MAC Address (01:00:0C:CD:CD:D0).')
f3NetFlowPointCpdV2BPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2BPDUDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2BPDUDispType.setDescription('Control Protocol Disposition for IEEE Spanning Tree(STP),\n        MSTP (Multiple Spanning Tree) and RSTP (Rapid Reconfiguration of\n        Spanning Tree). MAC Address (01:80:C2:00:00:00).')
f3NetFlowPointCpdV2PauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2PauseDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2PauseDispType.setDescription('Control Protocol Disposition for IEEE 802.3x Flow Control \n        (PAUSE frames).')
f3NetFlowPointCpdV2LACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2LACPDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2LACPDispType.setDescription('Control Protocol Disposition for 802.3ad Link Aggregation\n        Protocol.\n        MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(01).')
f3NetFlowPointCpdV2LACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2LACPMarkerDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2LACPMarkerDispType.setDescription('Control Protocol Disposition for IEEE 802.3ad Marker Protocol.\n        MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(02).')
f3NetFlowPointCpdV2EfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2EfmOamDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2EfmOamDispType.setDescription('Control Protocol Disposition for IEEE 802.3ah EFM OAM.\n        MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(03).')
f3NetFlowPointCpdV2SSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2SSMDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2SSMDispType.setDescription('Control Protocol Disposition for Sync Status Messages.\n        MAC Address (01:80:C2:00:00:02), Ethertype (0x19A7), Subtype(0A).')
f3NetFlowPointCpdV2PortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2PortAuthenDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2PortAuthenDispType.setDescription('Control Protocol Disposition for IEEE 802.1x Protocol.\n        MAC Address (01:80:C2:00:00:03), Ethertype (0x888E).')
f3NetFlowPointCpdV2LANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2LANBridgesDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2LANBridgesDispType.setDescription('Control Protocol Disposition for IEEE 802.1d LAN Bridge Managment.\n        MAC Address (01:80:C2:00:00:10).')
f3NetFlowPointCpdV2GMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2GMRPDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2GMRPDispType.setDescription('Control Protocol Disposition for GARP Multicast Registration\n        Protocol. MAC Address (01:80:C2:00:00:20).')
f3NetFlowPointCpdV2GVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2GVRPDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2GVRPDispType.setDescription('Control Protocol Disposition for GARP VLAN Registration\n        Protocol. MAC Address (01:80:C2:00:00:21).')
f3NetFlowPointCpdV2GARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2GARPDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2GARPDispType.setDescription('Group Disposition type which includes GARP Reserved \n        MAC Address from range 01:80:C2:00:00:22 to 01:80:C2:00:00:2F.')
f3NetFlowPointCpdV2ActiveControlProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 23), CmActiveControlProtocolsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2ActiveControlProtocols.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2ActiveControlProtocols.setDescription('List of Active Control Protocol Dispositions. Note that\n        if the Port Level Disposition control is set to PEER or \n        DISCARD, the flow level disposition is no longer active.\n        This object provides information on all the active\n        dispositions.')
f3NetFlowPointCpdV2ELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2ELMIDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2ELMIDispType.setDescription('ELMI (Ethernet Local Management Interface) Disposition type. \n        MAC Address 01:80:C2:00:00:07 and EtherType of 0x88EE.')
f3NetFlowPointCpdV2Mac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac00DispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac00DispType.setDescription('MAC Address 01:80:C2:00:00:00 Disposition type.')
f3NetFlowPointCpdV2Mac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac01DispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac01DispType.setDescription('MAC Address 01:80:C2:00:00:01 Disposition type.')
f3NetFlowPointCpdV2Mac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 27), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac02DispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac02DispType.setDescription('MAC Address 01:80:C2:00:00:02 Disposition type.')
f3NetFlowPointCpdV2Mac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac03DispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac03DispType.setDescription('MAC Address 01:80:C2:00:00:03 Disposition type.')
f3NetFlowPointCpdV2Mac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 29), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac04DispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac04DispType.setDescription('MAC Address 01:80:C2:00:00:04 Disposition type.')
f3NetFlowPointCpdV2Mac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 30), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac05DispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac05DispType.setDescription('MAC Address 01:80:C2:00:00:05 Disposition type.')
f3NetFlowPointCpdV2Mac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac06DispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac06DispType.setDescription('MAC Address 01:80:C2:00:00:06 Disposition type.')
f3NetFlowPointCpdV2Mac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac07DispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac07DispType.setDescription('MAC Address 01:80:C2:00:00:07 Disposition type.')
f3NetFlowPointCpdV2Mac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac08DispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac08DispType.setDescription('MAC Address 01:80:C2:00:00:08 Disposition type.')
f3NetFlowPointCpdV2Mac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac09DispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac09DispType.setDescription('MAC Address 01:80:C2:00:00:09 Disposition type.')
f3NetFlowPointCpdV2Mac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac0ADispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac0ADispType.setDescription('MAC Address 01:80:C2:00:00:0A Disposition type.')
f3NetFlowPointCpdV2Mac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac0BDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac0BDispType.setDescription('MAC Address 01:80:C2:00:00:0B Disposition type.')
f3NetFlowPointCpdV2Mac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac0CDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac0CDispType.setDescription('MAC Address 01:80:C2:00:00:0C Disposition type.')
f3NetFlowPointCpdV2Mac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac0DDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac0DDispType.setDescription('MAC Address 01:80:C2:00:00:0D Disposition type.')
f3NetFlowPointCpdV2Mac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac0EDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac0EDispType.setDescription('MAC Address 01:80:C2:00:00:0E Disposition type.')
f3NetFlowPointCpdV2Mac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac0FDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Mac0FDispType.setDescription('MAC Address 01:80:C2:00:00:0F Disposition type.')
f3NetFlowPointCpdV2NearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2NearestLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2NearestLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Nearest Bridge Disposition type.')
f3NetFlowPointCpdV2NonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2NonTpmrLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2NonTpmrLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Non-TPMR Bridge Disposition type.')
f3NetFlowPointCpdV2CustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 10, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointCpdV2CustomerLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2CustomerLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Customer Bridge Disposition type.')
f3NetFlowPointLearningConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 11), )
if mibBuilder.loadTexts: f3NetFlowPointLearningConfigTable.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointLearningConfigTable.setDescription('This table extends f3NetFlowPointTable to provide parameters for MAC Table control\n             configuration.')
f3NetFlowPointLearningConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 11, 1), )
f3NetFlowPointEntry.registerAugmentions(("F3-FPM-MIB", "f3NetFlowPointLearningConfigEntry"))
f3NetFlowPointLearningConfigEntry.setIndexNames(*f3NetFlowPointEntry.getIndexNames())
if mibBuilder.loadTexts: f3NetFlowPointLearningConfigEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointLearningConfigEntry.setDescription('A conceptual row in the f3NetFlowPointLearningConfigTable.')
f3NetFlowPointLearningConfigLearningEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 11, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointLearningConfigLearningEnabled.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointLearningConfigLearningEnabled.setDescription('This object allows configuring Learning Control on this Flowpoint.')
f3NetFlowPointLearningConfigMaxFwdEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 11, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointLearningConfigMaxFwdEntries.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointLearningConfigMaxFwdEntries.setDescription('This object allows configuring the maximum number of Forwarding Entries \n          on this Flowpoint.')
f3NetFlowPointLearningConfigProtectLearningCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 11, 1, 3), ProtectLearningControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointLearningConfigProtectLearningCtrl.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointLearningConfigProtectLearningCtrl.setDescription('This object allows configuring Learning Control on this Flowpoint.')
f3NetFlowPointLearningConfigAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 1, 11, 1, 4), FlowLearningConfigAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointLearningConfigAction.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointLearningConfigAction.setDescription('This objects allows performing user action on Flow Learning Table.')
f3AccFlowPointStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1), )
if mibBuilder.loadTexts: f3AccFlowPointStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsTable.setDescription('A collection of FlowPoint statistics.  \n             These reflect the current data.')
f3AccFlowPointStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointStatsIndex"))
if mibBuilder.loadTexts: f3AccFlowPointStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsEntry.setDescription('A conceptual row in the f3AccFlowPointStatsTable.\n             Entries exist in this table for each FlowPoint.')
f3AccFlowPointStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Access Ethernet Flowpoint statistics entry.\n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
f3AccFlowPointStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3AccFlowPointStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsValid.setDescription('Indicates the validity of the bin.')
f3AccFlowPointStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsAction.setDescription('Allows the Manager to clear the bin.')
f3AccFlowPointStatsL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsL2CPFD.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded.')
f3AccFlowPointStatsABRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsABRRx.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsABRRx.setDescription('The average bit rate.')
f3AccFlowPointStatsABRRLRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsABRRLRx.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsABRRLRx.setDescription('The average bit rate, rate limited.')
f3AccFlowPointStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsUAS.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsUAS.setDescription('The number of Unavailable Seconds (UAS).')
f3AccFlowPointStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsSES.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsSES.setDescription('The number of Severely Errored Seconds (ES).')
f3AccFlowPointStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsFMG.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsFMG.setDescription('The number of Frames Marked Green.')
f3AccFlowPointStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsFMY.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsFMY.setDescription('The number of Frames Marked Yellow.')
f3AccFlowPointStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsFMRD.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsFMRD.setDescription('The number of Frames Marked Red and Discarded.')
f3AccFlowPointStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsFTD.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsFTD.setDescription('The number of Frames Tail Dropped.')
f3AccFlowPointStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsBytesIn.setDescription('The number of Bytes In in the ingress direction.')
f3AccFlowPointStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsBytesOut.setDescription('The number of Bytes Out in the ingress direction.')
f3AccFlowPointStatsIBRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsIBRMax.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsIBRMax.setDescription('Instantaneous Bit Rate Maximum.')
f3AccFlowPointStatsIBRRlMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsIBRRlMax.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsIBRRlMax.setDescription('Instantaneous Bit Rate Maximum - Rate Limited.')
f3AccFlowPointStatsIBRMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsIBRMin.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsIBRMin.setDescription('Instantaneous Bit Rate Minimum.')
f3AccFlowPointStatsIBRRlMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsIBRRlMin.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsIBRRlMin.setDescription('Instantaneous Bit Rate Minimum - Rate Limited.')
f3AccFlowPointStatsIBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsIBR.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsIBR.setDescription('Instantaneous Bit Rate Minimum.')
f3AccFlowPointStatsIBRRl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsIBRRl.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsIBRRl.setDescription('Instantaneous Bit Rate Minimum - Rate Limited.')
f3AccFlowPointStatsFBCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsFBCD.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsFBCD.setDescription('The number of Frames Dropped - Broadcast Rate Limit.')
f3AccFlowPointStatsFMCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsFMCD.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsFMCD.setDescription('The number of Frames Dropped - Multicast Rate Limit.')
f3AccFlowPointStatsFdRxFb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsFdRxFb.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsFdRxFb.setDescription('The number of Frames Dropped RX - Flowpoint Blocked.')
f3AccFlowPointStatsFdTxFb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsFdTxFb.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsFdTxFb.setDescription('The number of Frames Dropped TX - Flowpoint Blocked.')
f3AccFlowPointStatsFdicd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsFdicd.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsFdicd.setDescription('The number of Frames Dropped - Ingress COS Disabled.')
f3AccFlowPointStatsNumLearnTableFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 1, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointStatsNumLearnTableFlushes.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointStatsNumLearnTableFlushes.setDescription('The number of learning table flushes.')
f3NetFlowPointStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2), )
if mibBuilder.loadTexts: f3NetFlowPointStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsTable.setDescription('A collection of FlowPoint statistics.  \n             These reflect the current data.')
f3NetFlowPointStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointStatsIndex"))
if mibBuilder.loadTexts: f3NetFlowPointStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsEntry.setDescription('A conceptual row in the f3NetFlowPointStatsTable.\n             Entries exist in this table for each FlowPoint.')
f3NetFlowPointStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Access Ethernet Flowpoint statistics entry.\n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
f3NetFlowPointStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3NetFlowPointStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsValid.setDescription('Indicates the validity of the bin.')
f3NetFlowPointStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsAction.setDescription('Allows the Manager to clear the bin.')
f3NetFlowPointStatsL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsL2CPFD.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded.')
f3NetFlowPointStatsABRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsABRRx.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsABRRx.setDescription('The average bit rate.')
f3NetFlowPointStatsABRRLRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsABRRLRx.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsABRRLRx.setDescription('The average bit rate, rate limited.')
f3NetFlowPointStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsUAS.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsUAS.setDescription('The number of Unavailable Seconds (UAS).')
f3NetFlowPointStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsSES.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsSES.setDescription('The number of Severely Errored Seconds (ES).')
f3NetFlowPointStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsFMG.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsFMG.setDescription('The number of Frames Marked Green.')
f3NetFlowPointStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsFMY.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsFMY.setDescription('The number of Frames Marked Yellow.')
f3NetFlowPointStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsFMRD.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsFMRD.setDescription('The number of Frames Marked Red and Discarded.')
f3NetFlowPointStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsFTD.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsFTD.setDescription('The number of Frames Tail Dropped.')
f3NetFlowPointStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsBytesIn.setDescription('The number of Bytes In in the ingress direction.')
f3NetFlowPointStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsBytesOut.setDescription('The number of Bytes Out in the ingress direction.')
f3NetFlowPointStatsIBRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsIBRMax.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsIBRMax.setDescription('Instantaneous Bit Rate Maximum.')
f3NetFlowPointStatsIBRRlMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsIBRRlMax.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsIBRRlMax.setDescription('Instantaneous Bit Rate Maximum - Rate Limited.')
f3NetFlowPointStatsIBRMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsIBRMin.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsIBRMin.setDescription('Instantaneous Bit Rate Minimum.')
f3NetFlowPointStatsIBRRlMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsIBRRlMin.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsIBRRlMin.setDescription('Instantaneous Bit Rate Minimum - Rate Limited.')
f3NetFlowPointStatsIBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsIBR.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsIBR.setDescription('Instantaneous Bit Rate Minimum.')
f3NetFlowPointStatsIBRRl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsIBRRl.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsIBRRl.setDescription('Instantaneous Bit Rate Minimum - Rate Limited.')
f3NetFlowPointStatsFBCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsFBCD.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsFBCD.setDescription('The number of Frames Dropped - Broadcast Rate Limit.')
f3NetFlowPointStatsFMCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsFMCD.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsFMCD.setDescription('The number of Frames Dropped - Multicast Rate Limit.')
f3NetFlowPointStatsFdRxFb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsFdRxFb.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsFdRxFb.setDescription('The number of Frames Dropped RX - Flowpoint Blocked.')
f3NetFlowPointStatsFdTxFb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsFdTxFb.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsFdTxFb.setDescription('The number of Frames Dropped TX - Flowpoint Blocked.')
f3NetFlowPointStatsFdicd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsFdicd.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsFdicd.setDescription('The number of Frames Dropped - Ingress COS Disabled.')
f3NetFlowPointStatsNumLearnTableFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 2, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointStatsNumLearnTableFlushes.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointStatsNumLearnTableFlushes.setDescription('The number of learning table flushes.')
f3AccFlowPointHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3), )
if mibBuilder.loadTexts: f3AccFlowPointHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryTable.setDescription('A collection of FlowPoint statistics.  \n             These reflect the history data.')
f3AccFlowPointHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointStatsIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointHistoryIndex"))
if mibBuilder.loadTexts: f3AccFlowPointHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryEntry.setDescription('A conceptual row in the f3AccFlowPointHistoryTable.\n             Entries exist in this table for each FlowPoint.')
f3AccFlowPointHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Access Ethernet Flowpoint History statistics entry.\n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
f3AccFlowPointHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryTime.setDescription('Indicates the time of history bin creation.')
f3AccFlowPointHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryValid.setDescription('Indicates the validity of the bin.')
f3AccFlowPointHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3AccFlowPointHistoryL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryL2CPFD.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded.')
f3AccFlowPointHistoryABRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryABRRx.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryABRRx.setDescription('The average bit rate.')
f3AccFlowPointHistoryABRRLRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryABRRLRx.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryABRRLRx.setDescription('The average bit rate, rate limited.')
f3AccFlowPointHistoryUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryUAS.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryUAS.setDescription('The number of Unavailable Seconds (UAS).')
f3AccFlowPointHistorySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistorySES.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistorySES.setDescription('The number of Severely Errored Seconds (ES).')
f3AccFlowPointHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryFMG.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryFMG.setDescription('The number of Frames Marked Green.')
f3AccFlowPointHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryFMY.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryFMY.setDescription('The number of Frames Marked Yellow.')
f3AccFlowPointHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryFMRD.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryFMRD.setDescription('The number of Frames Marked Red and Discarded.')
f3AccFlowPointHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryFTD.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryFTD.setDescription('The number of Frames Tail Dropped.')
f3AccFlowPointHistoryBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryBytesIn.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryBytesIn.setDescription('The number of Bytes In in the ingress direction.')
f3AccFlowPointHistoryBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryBytesOut.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryBytesOut.setDescription('The number of Bytes Out in the ingress direction.')
f3AccFlowPointHistoryIBRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryIBRMax.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryIBRMax.setDescription('Instantaneous Bit Rate Maximum.')
f3AccFlowPointHistoryIBRRlMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryIBRRlMax.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryIBRRlMax.setDescription('Instantaneous Bit Rate Maximum - Rate Limited.')
f3AccFlowPointHistoryIBRMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryIBRMin.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryIBRMin.setDescription('Instantaneous Bit Rate Minimum.')
f3AccFlowPointHistoryIBRRlMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryIBRRlMin.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryIBRRlMin.setDescription('Instantaneous Bit Rate Minimum - Rate Limited.')
f3AccFlowPointHistoryIBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryIBR.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryIBR.setDescription('Instantaneous Bit Rate Minimum.')
f3AccFlowPointHistoryIBRRl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryIBRRl.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryIBRRl.setDescription('Instantaneous Bit Rate Minimum - Rate Limited.')
f3AccFlowPointHistoryFBCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryFBCD.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryFBCD.setDescription('The number of Frames Dropped - Broadcast Rate Limit.')
f3AccFlowPointHistoryFMCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryFMCD.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryFMCD.setDescription('The number of Frames Dropped - Multicast Rate Limit.')
f3AccFlowPointHistoryFdRxFb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryFdRxFb.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryFdRxFb.setDescription('The number of Frames Dropped RX - Flowpoint Blocked.')
f3AccFlowPointHistoryFdTxFb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryFdTxFb.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryFdTxFb.setDescription('The number of Frames Dropped TX - Flowpoint Blocked.')
f3AccFlowPointHistoryFdicd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryFdicd.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryFdicd.setDescription('The number of Frames Dropped - Ingress COS Disabled.')
f3AccFlowPointHistoryNumLearnTableFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 3, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointHistoryNumLearnTableFlushes.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointHistoryNumLearnTableFlushes.setDescription('The number of learning table flushes.')
f3NetFlowPointHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4), )
if mibBuilder.loadTexts: f3NetFlowPointHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryTable.setDescription('A collection of FlowPoint statistics.  \n             These reflect the history data.')
f3NetFlowPointHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointStatsIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointHistoryIndex"))
if mibBuilder.loadTexts: f3NetFlowPointHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryEntry.setDescription('A conceptual row in the f3NetFlowPointHistoryTable.\n             Entries exist in this table for each FlowPoint.')
f3NetFlowPointHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Access Ethernet Flowpoint History statistics entry.\n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
f3NetFlowPointHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryTime.setDescription('Indicates the time of history bin creation.')
f3NetFlowPointHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryValid.setDescription('Indicates the validity of the bin.')
f3NetFlowPointHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3NetFlowPointHistoryL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryL2CPFD.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded.')
f3NetFlowPointHistoryABRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryABRRx.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryABRRx.setDescription('The average bit rate.')
f3NetFlowPointHistoryABRRLRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryABRRLRx.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryABRRLRx.setDescription('The average bit rate, rate limited.')
f3NetFlowPointHistoryUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryUAS.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryUAS.setDescription('The number of Unavailable Seconds (UAS).')
f3NetFlowPointHistorySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistorySES.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistorySES.setDescription('The number of Severely Errored Seconds (ES).')
f3NetFlowPointHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryFMG.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryFMG.setDescription('The number of Frames Marked Green.')
f3NetFlowPointHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryFMY.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryFMY.setDescription('The number of Frames Marked Yellow.')
f3NetFlowPointHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryFMRD.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryFMRD.setDescription('The number of Frames Marked Red and Discarded.')
f3NetFlowPointHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryFTD.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryFTD.setDescription('The number of Frames Tail Dropped.')
f3NetFlowPointHistoryBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryBytesIn.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryBytesIn.setDescription('The number of Bytes In in the ingress direction.')
f3NetFlowPointHistoryBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryBytesOut.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryBytesOut.setDescription('The number of Bytes Out in the ingress direction.')
f3NetFlowPointHistoryIBRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryIBRMax.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryIBRMax.setDescription('Instantaneous Bit Rate Maximum.')
f3NetFlowPointHistoryIBRRlMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryIBRRlMax.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryIBRRlMax.setDescription('Instantaneous Bit Rate Maximum - Rate Limited.')
f3NetFlowPointHistoryIBRMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryIBRMin.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryIBRMin.setDescription('Instantaneous Bit Rate Minimum.')
f3NetFlowPointHistoryIBRRlMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryIBRRlMin.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryIBRRlMin.setDescription('Instantaneous Bit Rate Minimum - Rate Limited.')
f3NetFlowPointHistoryIBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryIBR.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryIBR.setDescription('Instantaneous Bit Rate Minimum.')
f3NetFlowPointHistoryIBRRl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryIBRRl.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryIBRRl.setDescription('Instantaneous Bit Rate Minimum - Rate Limited.')
f3NetFlowPointHistoryFBCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryFBCD.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryFBCD.setDescription('The number of Frames Dropped - Broadcast Rate Limit.')
f3NetFlowPointHistoryFMCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryFMCD.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryFMCD.setDescription('The number of Frames Dropped - Multicast Rate Limit.')
f3NetFlowPointHistoryFdRxFb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryFdRxFb.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryFdRxFb.setDescription('The number of Frames Dropped RX - Flowpoint Blocked.')
f3NetFlowPointHistoryFdTxFb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryFdTxFb.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryFdTxFb.setDescription('The number of Frames Dropped TX - Flowpoint Blocked.')
f3NetFlowPointHistoryFdicd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryFdicd.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryFdicd.setDescription('The number of Frames Dropped - Ingress COS Disabled.')
f3NetFlowPointHistoryNumLearnTableFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 4, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointHistoryNumLearnTableFlushes.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointHistoryNumLearnTableFlushes.setDescription('The number of learning table flushes.')
f3AccFlowPointThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 5), )
if mibBuilder.loadTexts: f3AccFlowPointThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointThresholdTable.setDescription('A table of entries that allow manageability of Agg FlowPoint Thresholds.')
f3AccFlowPointThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointStatsIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointThresholdIndex"))
if mibBuilder.loadTexts: f3AccFlowPointThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointThresholdEntry.setDescription('A conceptual row in the f3AccFlowPointThresholdTable.')
f3AccFlowPointThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n         f3AccFlowPointThresholdTable.')
f3AccFlowPointThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 5, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointThresholdInterval.setDescription('The interval over which monitored value is\n         sampled and compared with the specified threshold.')
f3AccFlowPointThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 5, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointThresholdVariable.setDescription('The object identifier of the particular variable to be sampled.')
f3AccFlowPointThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3AccFlowPointThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 5, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFlowPointThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3AccFlowPointThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFlowPointThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointThresholdMonValue.setDescription('Monitored value corresponding to f3AccFlowPointThresholdVariable.')
f3NetFlowPointThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 6), )
if mibBuilder.loadTexts: f3NetFlowPointThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointThresholdTable.setDescription('A table of entries that allow manageability of Agg FlowPoint Thresholds.')
f3NetFlowPointThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointStatsIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointThresholdIndex"))
if mibBuilder.loadTexts: f3NetFlowPointThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointThresholdEntry.setDescription('A conceptual row in the f3NetFlowPointThresholdTable.')
f3NetFlowPointThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n         f3NetFlowPointThresholdTable.')
f3NetFlowPointThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 6, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointThresholdInterval.setDescription('The interval over which monitored value is\n         sampled and compared with the specified threshold.')
f3NetFlowPointThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 6, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointThresholdVariable.setDescription('The object identifier of the particular variable to be sampled.')
f3NetFlowPointThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3NetFlowPointThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 6, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFlowPointThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3NetFlowPointThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFlowPointThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointThresholdMonValue.setDescription('Monitored value corresponding to f3NetFlowPointThresholdVariable.')
f3MPFlowStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 7), )
if mibBuilder.loadTexts: f3MPFlowStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStatsTable.setDescription('A collection of MP Flow statistics.  \n             These reflect the current data.')
f3MPFlowStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmMPFlowIndex"), (0, "F3-FPM-MIB", "f3MPFlowStatsIndex"))
if mibBuilder.loadTexts: f3MPFlowStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStatsEntry.setDescription('A conceptual row in the f3MPFlowStatsTable.\n             Entries exist in this table for each MP Flow.')
f3MPFlowStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n             this MP Flow statistics entry. Index 1 corresponds to 15minute, \n             index 2 to 1 day and index 3 corresponds to rollover.')
f3MPFlowStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 7, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3MPFlowStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 7, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStatsValid.setDescription('Indicates the validity of the bin.')
f3MPFlowStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 7, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3MPFlowStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStatsAction.setDescription('Allows the Manager to clear the bin.')
f3MPFlowStatsFDStaticBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 7, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowStatsFDStaticBlock.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStatsFDStaticBlock.setDescription('Specifies current counter for number of frames discarded due to a \n          static entry in Mac Table.')
f3MPFlowStatsFDHairPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 7, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowStatsFDHairPin.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStatsFDHairPin.setDescription('Specifies current counter for number of frames discarded because \n          destination Port is the ingress flowpoint or destination Port is in the \n          same Split Horizon Group.')
f3MPFlowStatsMacTableDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 7, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowStatsMacTableDiscards.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStatsMacTableDiscards.setDescription('Specifies current counter for total number of MAC Table entries that have \n          been or would have been learned, but have been failed due to a lack of \n          storage space in the Filtering Database.')
f3MPFlowStatsFDProtLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 7, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowStatsFDProtLearn.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStatsFDProtLearn.setDescription('Specifies current counter for number \n          of frames dropped - protection learning.')
f3MPFlowHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 8), )
if mibBuilder.loadTexts: f3MPFlowHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowHistoryTable.setDescription('A collection of MP Flow statistics.  \n             These reflect the history data.')
f3MPFlowHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmMPFlowIndex"), (0, "F3-FPM-MIB", "f3MPFlowStatsIndex"), (0, "F3-FPM-MIB", "f3MPFlowHistoryIndex"))
if mibBuilder.loadTexts: f3MPFlowHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowHistoryEntry.setDescription('A conceptual row in the f3MPFlowHistoryTable.\n             Entries exist in this table for each MP Flow.')
f3MPFlowHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n             this MP Flow History statistics entry. Index 1 corresponds to 15minute, \n             index 2 to 1 day and index 3 corresponds to rollover.')
f3MPFlowHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 8, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowHistoryTime.setDescription('Indicates the time of history bin creation.')
f3MPFlowHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 8, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowHistoryValid.setDescription('Indicates the validity of the bin.')
f3MPFlowHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 8, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3MPFlowHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3MPFlowHistoryFDStaticBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 8, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowHistoryFDStaticBlock.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowHistoryFDStaticBlock.setDescription('Specifies history bin for number of frames discarded due to a \n          static entry in Mac Table.')
f3MPFlowHistoryFDHairPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 8, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowHistoryFDHairPin.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowHistoryFDHairPin.setDescription('Specifies history bin for number of frames discarded because \n          destination Port is the ingress flowpoint or destination Port is in the \n          same Split Horizon Group.')
f3MPFlowHistoryMacTableDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 8, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowHistoryMacTableDiscards.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowHistoryMacTableDiscards.setDescription('Specifies history bin for total number of MAC Table entries that have \n          been or would have been learned, but have been failed due to a lack of \n          storage space in the Filtering Database.')
f3MPFlowHistoryFDProtLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 8, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowHistoryFDProtLearn.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowHistoryFDProtLearn.setDescription('Specifies history bin for total number \n          of frames dropped - protection learning.')
f3MPFlowThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 9), )
if mibBuilder.loadTexts: f3MPFlowThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowThresholdTable.setDescription('A table of entries that allow manageability of MP Flow Thresholds.')
f3MPFlowThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmMPFlowIndex"), (0, "F3-FPM-MIB", "f3MPFlowStatsIndex"), (0, "F3-FPM-MIB", "f3MPFlowThresholdIndex"))
if mibBuilder.loadTexts: f3MPFlowThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowThresholdEntry.setDescription('A conceptual row in the f3MPFlowThresholdTable.')
f3MPFlowThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n         f3MPFlowThresholdTable.')
f3MPFlowThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 9, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowThresholdInterval.setDescription('The interval over which monitored value is\n         sampled and compared with the specified threshold.')
f3MPFlowThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 9, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowThresholdVariable.setDescription('The object identifier of the particular variable to be sampled.')
f3MPFlowThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 9, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3MPFlowThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3MPFlowThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 9, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3MPFlowThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3MPFlowThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowThresholdMonValue.setDescription('Monitored value corresponding to f3MPFlowThresholdVariable.')
f3AccFpQosShaperStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 10), )
if mibBuilder.loadTexts: f3AccFpQosShaperStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperStatsTable.setDescription('A collection of Acc FlowPoint QOS Shaper statistics.  \n             These reflect the current data.')
f3AccFpQosShaperStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointIndex"), (0, "F3-FPM-MIB", "f3AccFpQosShaperIndex"), (0, "F3-FPM-MIB", "f3AccFpQosShaperStatsIndex"))
if mibBuilder.loadTexts: f3AccFpQosShaperStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperStatsEntry.setDescription('A conceptual row in the f3AccFpQosShaperStatsTable.\n             Entries exist in this table for each FlowPoint QoS Shaper.')
f3AccFpQosShaperStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3AccFpQosShaperStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 10, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3AccFpQosShaperStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 10, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperStatsValid.setDescription('Indicates the validity of the bin.')
f3AccFpQosShaperStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 10, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFpQosShaperStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperStatsAction.setDescription('Allows the Manager to clear the bin.')
f3AccFpQosShaperStatsBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 10, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperStatsBT.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperStatsBT.setDescription('Bytes Transmitted.')
f3AccFpQosShaperStatsBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 10, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperStatsBTD.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperStatsBTD.setDescription('Bytes Tail Dropped.')
f3AccFpQosShaperStatsFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 10, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperStatsFD.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperStatsFD.setDescription('Frames Dequeued.')
f3AccFpQosShaperStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 10, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperStatsFTD.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperStatsFTD.setDescription('Frames Tail Dropped.')
f3AccFpQosShaperStatsABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 10, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperStatsABRRL.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperStatsABRRL.setDescription('Average Bit Rate - Rate Limited.')
f3AccFpQosShaperStatsBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 10, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperStatsBREDD.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperStatsBREDD.setDescription('Bytes Random Early Discard, Dropped.')
f3AccFpQosShaperStatsFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 10, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperStatsFREDD.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperStatsFREDD.setDescription('Frames Random Early Discard, Dropped.')
f3AccFpQosShaperHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 11), )
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryTable.setDescription('A collection of Acc FlowPoint QOS Shaper statistics.  \n             These reflect the history data.')
f3AccFpQosShaperHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointIndex"), (0, "F3-FPM-MIB", "f3AccFpQosShaperIndex"), (0, "F3-FPM-MIB", "f3AccFpQosShaperStatsIndex"), (0, "F3-FPM-MIB", "f3AccFpQosShaperHistoryIndex"))
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryEntry.setDescription('A conceptual row in the f3AccFpQosShaperHistoryTable.\n             Entries exist in this table for each FlowPoint QoS Shaper.')
f3AccFpQosShaperHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.')
f3AccFpQosShaperHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 11, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryTime.setDescription('Indicates the time of history bin creation.')
f3AccFpQosShaperHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 11, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryValid.setDescription('Indicates the validity of the bin.')
f3AccFpQosShaperHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 11, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3AccFpQosShaperHistoryBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 11, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryBT.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryBT.setDescription('Bytes Transmitted.')
f3AccFpQosShaperHistoryBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 11, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryBTD.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryBTD.setDescription('Bytes Tail Dropped.')
f3AccFpQosShaperHistoryFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 11, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryFD.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryFD.setDescription('Frames Dequeued.')
f3AccFpQosShaperHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 11, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryFTD.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryFTD.setDescription('Frames Tail Dropped.')
f3AccFpQosShaperHistoryABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 11, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryABRRL.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryABRRL.setDescription('Average Bit Rate - Rate Limited.')
f3AccFpQosShaperHistoryBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 11, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryBREDD.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryBREDD.setDescription('Bytes Random Early Discard, Dropped.')
f3AccFpQosShaperHistoryFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 11, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryFREDD.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperHistoryFREDD.setDescription('Frames Random Early Discard, Dropped.')
f3AccFpQosShaperThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 12), )
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdTable.setDescription('A table of entries that allow manageability of Acc FlowPoint\n             QoS Shaper Thresholds.')
f3AccFpQosShaperThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointIndex"), (0, "F3-FPM-MIB", "f3AccFpQosShaperIndex"), (0, "F3-FPM-MIB", "f3AccFpQosShaperStatsIndex"), (0, "F3-FPM-MIB", "f3AccFpQosShaperThresholdIndex"))
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdEntry.setDescription('A conceptual row in the f3AccFpQosShaperThresholdTable.')
f3AccFpQosShaperThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3AccFpQosShaperThresholdTable.')
f3AccFpQosShaperThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 12, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3AccFpQosShaperThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 12, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3AccFpQosShaperThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 12, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3AccFpQosShaperThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 12, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3AccFpQosShaperThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 12, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdMonValue.setDescription('Monitored value corresponding to f3AccFpQosShaperThresholdVariable.')
f3NetFpQosShaperStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 13), )
if mibBuilder.loadTexts: f3NetFpQosShaperStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperStatsTable.setDescription('A collection of Net FlowPoint QOS Shaper statistics.  \n             These reflect the current data.')
f3NetFpQosShaperStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointIndex"), (0, "F3-FPM-MIB", "f3NetFpQosShaperIndex"), (0, "F3-FPM-MIB", "f3NetFpQosShaperStatsIndex"))
if mibBuilder.loadTexts: f3NetFpQosShaperStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperStatsEntry.setDescription('A conceptual row in the f3NetFpQosShaperStatsTable.\n             Entries exist in this table for each FlowPoint QoS Shaper.')
f3NetFpQosShaperStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3NetFpQosShaperStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 13, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3NetFpQosShaperStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 13, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperStatsValid.setDescription('Indicates the validity of the bin.')
f3NetFpQosShaperStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 13, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFpQosShaperStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperStatsAction.setDescription('Allows the Manager to clear the bin.')
f3NetFpQosShaperStatsBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 13, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperStatsBT.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperStatsBT.setDescription('Bytes Transmitted.')
f3NetFpQosShaperStatsBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 13, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperStatsBTD.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperStatsBTD.setDescription('Bytes Tail Dropped.')
f3NetFpQosShaperStatsFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 13, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperStatsFD.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperStatsFD.setDescription('Frames Dequeued.')
f3NetFpQosShaperStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 13, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperStatsFTD.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperStatsFTD.setDescription('Frames Tail Dropped.')
f3NetFpQosShaperStatsABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 13, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperStatsABRRL.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperStatsABRRL.setDescription('Average Bit Rate - Rate Limited.')
f3NetFpQosShaperStatsBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 13, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperStatsBREDD.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperStatsBREDD.setDescription('Bytes Random Early Discard, Dropped.')
f3NetFpQosShaperStatsFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 13, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperStatsFREDD.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperStatsFREDD.setDescription('Frames Random Early Discard, Dropped.')
f3NetFpQosShaperHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 14), )
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryTable.setDescription('A collection of Net FlowPoint QOS Shaper statistics.  \n             These reflect the history data.')
f3NetFpQosShaperHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointIndex"), (0, "F3-FPM-MIB", "f3NetFpQosShaperIndex"), (0, "F3-FPM-MIB", "f3NetFpQosShaperStatsIndex"), (0, "F3-FPM-MIB", "f3NetFpQosShaperHistoryIndex"))
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryEntry.setDescription('A conceptual row in the f3NetFpQosShaperHistoryTable.\n             Entries exist in this table for each FlowPoint QoS Shaper.')
f3NetFpQosShaperHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.')
f3NetFpQosShaperHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 14, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryTime.setDescription('Indicates the time of history bin creation.')
f3NetFpQosShaperHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 14, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryValid.setDescription('Indicates the validity of the bin.')
f3NetFpQosShaperHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 14, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3NetFpQosShaperHistoryBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 14, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryBT.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryBT.setDescription('Bytes Transmitted.')
f3NetFpQosShaperHistoryBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 14, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryBTD.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryBTD.setDescription('Bytes Tail Dropped.')
f3NetFpQosShaperHistoryFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 14, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryFD.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryFD.setDescription('Frames Dequeued.')
f3NetFpQosShaperHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 14, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryFTD.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryFTD.setDescription('Frames Tail Dropped.')
f3NetFpQosShaperHistoryABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 14, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryABRRL.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryABRRL.setDescription('Average Bit Rate - Rate Limited.')
f3NetFpQosShaperHistoryBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 14, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryBREDD.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryBREDD.setDescription('Bytes Random Early Discard, Dropped.')
f3NetFpQosShaperHistoryFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 14, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryFREDD.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperHistoryFREDD.setDescription('Frames Random Early Discard, Dropped.')
f3NetFpQosShaperThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 15), )
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdTable.setDescription('A table of entries that allow manageability of Net FlowPoint\n             QoS Shaper Thresholds.')
f3NetFpQosShaperThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointIndex"), (0, "F3-FPM-MIB", "f3NetFpQosShaperIndex"), (0, "F3-FPM-MIB", "f3NetFpQosShaperStatsIndex"), (0, "F3-FPM-MIB", "f3NetFpQosShaperThresholdIndex"))
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdEntry.setDescription('A conceptual row in the f3NetFpQosShaperThresholdTable.')
f3NetFpQosShaperThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3NetFpQosShaperThresholdTable.')
f3NetFpQosShaperThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 15, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3NetFpQosShaperThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 15, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3NetFpQosShaperThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 15, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3NetFpQosShaperThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 15, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3NetFpQosShaperThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 15, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdMonValue.setDescription('Monitored value corresponding to f3NetFpQosShaperThresholdVariable.')
f3AccFpQosPolicerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 16), )
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsTable.setDescription('A collection of Acc FlowPoint QOS Policer statistics.  \n             These reflect the current data.')
f3AccFpQosPolicerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointIndex"), (0, "F3-FPM-MIB", "f3AccFpQosPolicerIndex"), (0, "F3-FPM-MIB", "f3AccFpQosPolicerStatsIndex"))
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsEntry.setDescription('A conceptual row in the f3AccFpQosPolicerStatsTable.\n             Entries exist in this table for each Acc FlowPoint QoS Policer.')
f3AccFpQosPolicerStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsIndex.setDescription('An integer index value used to uniquely identify\n            this QOS Policer statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3AccFpQosPolicerStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 16, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3AccFpQosPolicerStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 16, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsValid.setDescription('Indicates the validity of the bin.')
f3AccFpQosPolicerStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 16, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsAction.setDescription('Allows the Manager to clear the bin.')
f3AccFpQosPolicerStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 16, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsFMG.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsFMG.setDescription('Frames Marked Green.')
f3AccFpQosPolicerStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 16, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsFMY.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsFMY.setDescription('Frames Marked Yellow.')
f3AccFpQosPolicerStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 16, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsFMRD.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsFMRD.setDescription('Frames Marked Red and Discarded.')
f3AccFpQosPolicerStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 16, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsBytesIn.setDescription('Number of bytes received by the Policer.')
f3AccFpQosPolicerStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 16, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsBytesOut.setDescription('Number of bytes transmitted by the Policer.')
f3AccFpQosPolicerStatsABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 16, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsABR.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerStatsABR.setDescription('Average Bit Rate  on the Policer.')
f3AccFpQosPolicerHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 17), )
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryTable.setDescription('A collection of Acc FlowPoint QOS Policer statistics.  \n             These reflect the history data.')
f3AccFpQosPolicerHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointIndex"), (0, "F3-FPM-MIB", "f3AccFpQosPolicerIndex"), (0, "F3-FPM-MIB", "f3AccFpQosPolicerStatsIndex"), (0, "F3-FPM-MIB", "f3AccFpQosPolicerHistoryIndex"))
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryEntry.setDescription('A conceptual row in the f3AccFpQosPolicerHistoryTable.\n             Entries exist in this table for each Acc FlowPoint QoS Policer.')
f3AccFpQosPolicerHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Policer history entry.')
f3AccFpQosPolicerHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 17, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryTime.setDescription('Indicates the time of history bin creation.')
f3AccFpQosPolicerHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 17, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryValid.setDescription('Indicates the validity of the bin.')
f3AccFpQosPolicerHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 17, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3AccFpQosPolicerHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 17, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryFMG.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryFMG.setDescription('Frames Marked Green.')
f3AccFpQosPolicerHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 17, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryFMY.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryFMY.setDescription('Frames Marked Yellow.')
f3AccFpQosPolicerHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 17, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryFMRD.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryFMRD.setDescription('Frames Marked Red and Discarded.')
f3AccFpQosPolicerHistoryBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 17, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryBytesIn.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryBytesIn.setDescription('Number of bytes received by the Policer.')
f3AccFpQosPolicerHistoryBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 17, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryBytesOut.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryBytesOut.setDescription('Number of bytes transmitted by the Policer.')
f3AccFpQosPolicerHistoryABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 17, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryABR.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerHistoryABR.setDescription('Average Bit Rate  on the Policer.')
f3AccFpQosPolicerThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 18), )
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdTable.setDescription('A table of entries that allow manageability of QOS\n             Policer Thresholds.')
f3AccFpQosPolicerThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 18, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-FPM-MIB", "f3AccFlowPointIndex"), (0, "F3-FPM-MIB", "f3AccFpQosPolicerIndex"), (0, "F3-FPM-MIB", "f3AccFpQosPolicerStatsIndex"), (0, "F3-FPM-MIB", "f3AccFpQosPolicerThresholdIndex"))
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdEntry.setDescription('A conceptual row in the f3AccFpQosPolicerThresholdTable.')
f3AccFpQosPolicerThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3AccFpQosPolicerThresholdTable.')
f3AccFpQosPolicerThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 18, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3AccFpQosPolicerThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 18, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3AccFpQosPolicerThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 18, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3AccFpQosPolicerThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 18, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3AccFpQosPolicerThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 18, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdMonValue.setDescription('Monitored value corresponding to f3AccFpQosPolicerThresholdVariable.')
f3NetFpQosPolicerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 19), )
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsTable.setDescription('A collection of Net FlowPoint QOS Policer statistics.  \n             These reflect the current data.')
f3NetFpQosPolicerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointIndex"), (0, "F3-FPM-MIB", "f3NetFpQosPolicerIndex"), (0, "F3-FPM-MIB", "f3NetFpQosPolicerStatsIndex"))
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsEntry.setDescription('A conceptual row in the f3NetFpQosPolicerStatsTable.\n             Entries exist in this table for each Net FlowPoint QoS Policer.')
f3NetFpQosPolicerStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsIndex.setDescription('An integer index value used to uniquely identify\n            this QOS Policer statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3NetFpQosPolicerStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 19, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3NetFpQosPolicerStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 19, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsValid.setDescription('Indicates the validity of the bin.')
f3NetFpQosPolicerStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 19, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsAction.setDescription('Allows the Manager to clear the bin.')
f3NetFpQosPolicerStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 19, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsFMG.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsFMG.setDescription('Frames Marked Green.')
f3NetFpQosPolicerStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 19, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsFMY.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsFMY.setDescription('Frames Marked Yellow.')
f3NetFpQosPolicerStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 19, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsFMRD.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsFMRD.setDescription('Frames Marked Red and Discarded.')
f3NetFpQosPolicerStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 19, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsBytesIn.setDescription('Number of bytes received by the Policer.')
f3NetFpQosPolicerStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 19, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsBytesOut.setDescription('Number of bytes transmitted by the Policer.')
f3NetFpQosPolicerStatsABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 19, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsABR.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerStatsABR.setDescription('Average Bit Rate  on the Policer.')
f3NetFpQosPolicerHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 20), )
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryTable.setDescription('A collection of Net FlowPoint QOS Policer statistics.  \n             These reflect the history data.')
f3NetFpQosPolicerHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 20, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointIndex"), (0, "F3-FPM-MIB", "f3NetFpQosPolicerIndex"), (0, "F3-FPM-MIB", "f3NetFpQosPolicerStatsIndex"), (0, "F3-FPM-MIB", "f3NetFpQosPolicerHistoryIndex"))
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryEntry.setDescription('A conceptual row in the f3NetFpQosPolicerHistoryTable.\n             Entries exist in this table for each Net FlowPoint QoS Policer.')
f3NetFpQosPolicerHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Policer history entry.')
f3NetFpQosPolicerHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 20, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryTime.setDescription('Indicates the time of history bin creation.')
f3NetFpQosPolicerHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 20, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryValid.setDescription('Indicates the validity of the bin.')
f3NetFpQosPolicerHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 20, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3NetFpQosPolicerHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 20, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryFMG.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryFMG.setDescription('Frames Marked Green.')
f3NetFpQosPolicerHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 20, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryFMY.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryFMY.setDescription('Frames Marked Yellow.')
f3NetFpQosPolicerHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 20, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryFMRD.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryFMRD.setDescription('Frames Marked Red and Discarded.')
f3NetFpQosPolicerHistoryBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 20, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryBytesIn.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryBytesIn.setDescription('Number of bytes received by the Policer.')
f3NetFpQosPolicerHistoryBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 20, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryBytesOut.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryBytesOut.setDescription('Number of bytes transmitted by the Policer.')
f3NetFpQosPolicerHistoryABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 20, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryABR.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerHistoryABR.setDescription('Average Bit Rate  on the Policer.')
f3NetFpQosPolicerThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 21), )
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdTable.setDescription('A table of entries that allow manageability of QOS\n             Policer Thresholds.')
f3NetFpQosPolicerThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 21, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-FPM-MIB", "f3NetFlowPointIndex"), (0, "F3-FPM-MIB", "f3NetFpQosPolicerIndex"), (0, "F3-FPM-MIB", "f3NetFpQosPolicerStatsIndex"), (0, "F3-FPM-MIB", "f3NetFpQosPolicerThresholdIndex"))
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdEntry.setDescription('A conceptual row in the f3NetFpQosPolicerThresholdTable.')
f3NetFpQosPolicerThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n         f3NetFpQosPolicerThresholdTable.')
f3NetFpQosPolicerThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 21, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdInterval.setDescription('The interval over which monitored value is\n         sampled and compared with the specified threshold.')
f3NetFpQosPolicerThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 21, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdVariable.setDescription('The object identifier of the particular variable to be\n         sampled.')
f3NetFpQosPolicerThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 21, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3NetFpQosPolicerThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 21, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3NetFpQosPolicerThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 2, 21, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdMonValue.setDescription('Monitored value corresponding to f3NetFpQosPolicerThresholdVariable.')
f3AccFlowPointThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 3, 1)).setObjects(("F3-FPM-MIB", "f3AccFlowPointThresholdIndex"), ("F3-FPM-MIB", "f3AccFlowPointThresholdInterval"), ("F3-FPM-MIB", "f3AccFlowPointThresholdVariable"), ("F3-FPM-MIB", "f3AccFlowPointThresholdValueLo"), ("F3-FPM-MIB", "f3AccFlowPointThresholdValueHi"), ("F3-FPM-MIB", "f3AccFlowPointThresholdMonValue"))
if mibBuilder.loadTexts: f3AccFlowPointThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Ethernet Access Port FlowPoint is crossed.')
f3NetFlowPointThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 3, 2)).setObjects(("F3-FPM-MIB", "f3NetFlowPointThresholdIndex"), ("F3-FPM-MIB", "f3NetFlowPointThresholdInterval"), ("F3-FPM-MIB", "f3NetFlowPointThresholdVariable"), ("F3-FPM-MIB", "f3NetFlowPointThresholdValueLo"), ("F3-FPM-MIB", "f3NetFlowPointThresholdValueHi"), ("F3-FPM-MIB", "f3NetFlowPointThresholdMonValue"))
if mibBuilder.loadTexts: f3NetFlowPointThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Ethernet Network Port FlowPoint is crossed.')
f3MPFlowThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 3, 3)).setObjects(("F3-FPM-MIB", "f3MPFlowThresholdIndex"), ("F3-FPM-MIB", "f3MPFlowThresholdInterval"), ("F3-FPM-MIB", "f3MPFlowThresholdVariable"), ("F3-FPM-MIB", "f3MPFlowThresholdValueLo"), ("F3-FPM-MIB", "f3MPFlowThresholdValueHi"), ("F3-FPM-MIB", "f3MPFlowThresholdMonValue"))
if mibBuilder.loadTexts: f3MPFlowThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an MP Flow is crossed.')
f3AccFpQosShaperThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 3, 4)).setObjects(("F3-FPM-MIB", "f3AccFpQosShaperThresholdIndex"), ("F3-FPM-MIB", "f3AccFpQosShaperThresholdInterval"), ("F3-FPM-MIB", "f3AccFpQosShaperThresholdVariable"), ("F3-FPM-MIB", "f3AccFpQosShaperThresholdValueLo"), ("F3-FPM-MIB", "f3AccFpQosShaperThresholdValueHi"), ("F3-FPM-MIB", "f3AccFpQosShaperThresholdMonValue"))
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Acc FlowPoint QoS Shaper is crossed.')
f3NetFpQosShaperThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 3, 5)).setObjects(("F3-FPM-MIB", "f3NetFpQosShaperThresholdIndex"), ("F3-FPM-MIB", "f3NetFpQosShaperThresholdInterval"), ("F3-FPM-MIB", "f3NetFpQosShaperThresholdVariable"), ("F3-FPM-MIB", "f3NetFpQosShaperThresholdValueLo"), ("F3-FPM-MIB", "f3NetFpQosShaperThresholdValueHi"), ("F3-FPM-MIB", "f3NetFpQosShaperThresholdMonValue"))
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Net FlowPoint QoS Shaper is crossed.')
f3AccFpQosPolicerThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 3, 6)).setObjects(("F3-FPM-MIB", "f3AccFpQosPolicerThresholdIndex"), ("F3-FPM-MIB", "f3AccFpQosPolicerThresholdInterval"), ("F3-FPM-MIB", "f3AccFpQosPolicerThresholdVariable"), ("F3-FPM-MIB", "f3AccFpQosPolicerThresholdValueLo"), ("F3-FPM-MIB", "f3AccFpQosPolicerThresholdValueHi"), ("F3-FPM-MIB", "f3AccFpQosPolicerThresholdMonValue"))
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Acc FlowPoint QoS Policer is crossed.')
f3NetFpQosPolicerThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 3, 7)).setObjects(("F3-FPM-MIB", "f3NetFpQosPolicerThresholdIndex"), ("F3-FPM-MIB", "f3NetFpQosPolicerThresholdInterval"), ("F3-FPM-MIB", "f3NetFpQosPolicerThresholdVariable"), ("F3-FPM-MIB", "f3NetFpQosPolicerThresholdValueLo"), ("F3-FPM-MIB", "f3NetFpQosPolicerThresholdValueHi"), ("F3-FPM-MIB", "f3NetFpQosPolicerThresholdMonValue"))
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Net FlowPoint QoS Policer is crossed.')
f3FpmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 1))
f3FpmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2))
f3FpmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 1, 1)).setObjects(("F3-FPM-MIB", "f3AccFlowPointGroup"), ("F3-FPM-MIB", "f3AccFpQosShaperGroup"), ("F3-FPM-MIB", "f3AccFpQosPolicerGroup"), ("F3-FPM-MIB", "f3MPFlowExtGroup"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Group"), ("F3-FPM-MIB", "f3AccFlowPointLearningConfigGroup"), ("F3-FPM-MIB", "f3NetFlowPointGroup"), ("F3-FPM-MIB", "f3NetFpQosShaperGroup"), ("F3-FPM-MIB", "f3NetFpQosPolicerGroup"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Group"), ("F3-FPM-MIB", "f3NetFlowPointLearningConfigGroup"), ("F3-FPM-MIB", "f3AccFlowPointPerfGroup"), ("F3-FPM-MIB", "f3NetFlowPointPerfGroup"), ("F3-FPM-MIB", "f3MPFlowPerfGroup"), ("F3-FPM-MIB", "f3AccFpQosShaperPerfGroup"), ("F3-FPM-MIB", "f3NetFpQosShaperPerfGroup"), ("F3-FPM-MIB", "f3AccFpQosPolicerPerfGroup"), ("F3-FPM-MIB", "f3NetFpQosPolicerPerfGroup"), ("F3-FPM-MIB", "f3FpmPerfNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3FpmCompliance = f3FpmCompliance.setStatus('current')
if mibBuilder.loadTexts: f3FpmCompliance.setDescription('Describes the requirements for conformance to the F3-FPM-MIB compilance.')
f3AccFlowPointGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 1)).setObjects(("F3-FPM-MIB", "f3AccFlowPointAlias"), ("F3-FPM-MIB", "f3AccFlowPointAdminState"), ("F3-FPM-MIB", "f3AccFlowPointOperationalState"), ("F3-FPM-MIB", "f3AccFlowPointSecondaryState"), ("F3-FPM-MIB", "f3AccFlowPointAssociatedFlowId"), ("F3-FPM-MIB", "f3AccFlowPointIngressMultiCOSEnabled"), ("F3-FPM-MIB", "f3AccFlowPointIngressCOS"), ("F3-FPM-MIB", "f3AccFlowPointEgressShapingType"), ("F3-FPM-MIB", "f3AccFlowPointIngressVlanMemberList"), ("F3-FPM-MIB", "f3AccFlowPointVlanMemberAction"), ("F3-FPM-MIB", "f3AccFlowPointVlanMemberActionVlan"), ("F3-FPM-MIB", "f3AccFlowPointIngressUntaggedFrameEnabled"), ("F3-FPM-MIB", "f3AccFlowPointCTagControl"), ("F3-FPM-MIB", "f3AccFlowPointCTagVlanId"), ("F3-FPM-MIB", "f3AccFlowPointCTagVlanPriority"), ("F3-FPM-MIB", "f3AccFlowPointSTagControl"), ("F3-FPM-MIB", "f3AccFlowPointSTagVlanId"), ("F3-FPM-MIB", "f3AccFlowPointSTagVlanPriority"), ("F3-FPM-MIB", "f3AccFlowPointEgressOuterTagPrioMapEnabled"), ("F3-FPM-MIB", "f3AccFlowPointEgressInnerTagPrioMapEnabled"), ("F3-FPM-MIB", "f3AccFlowPointSESFramesLossThresholdRatio"), ("F3-FPM-MIB", "f3AccFlowPointDefaultMemberEnabled"), ("F3-FPM-MIB", "f3AccFlowPointMcastRateLimitEnabled"), ("F3-FPM-MIB", "f3AccFlowPointMcastRateLimitSpeedLo"), ("F3-FPM-MIB", "f3AccFlowPointMcastRateLimitSpeedHi"), ("F3-FPM-MIB", "f3AccFlowPointBcastRateLimitEnabled"), ("F3-FPM-MIB", "f3AccFlowPointBcastRateLimitSpeedLo"), ("F3-FPM-MIB", "f3AccFlowPointBcastRateLimitSpeedHi"), ("F3-FPM-MIB", "f3AccFlowPointCombinedRateLimitEnabled"), ("F3-FPM-MIB", "f3AccFlowPointCombinedRateLimitSpeedLo"), ("F3-FPM-MIB", "f3AccFlowPointCombinedRateLimitSpeedHi"), ("F3-FPM-MIB", "f3AccFlowPointSplitHorizonGroupOID"), ("F3-FPM-MIB", "f3AccFlowPointLoopAvoidance"), ("F3-FPM-MIB", "f3AccFlowPointHierarchicalCOSEnabled"), ("F3-FPM-MIB", "f3AccFlowPointMaximumBWLo"), ("F3-FPM-MIB", "f3AccFlowPointMaximumBWHi"), ("F3-FPM-MIB", "f3AccFlowPointGuaranteedBWLo"), ("F3-FPM-MIB", "f3AccFlowPointGuaranteedBWHi"), ("F3-FPM-MIB", "f3AccFlowPointAutoBandwidthConfigEnabled"), ("F3-FPM-MIB", "f3AccFlowPointAutoCIRPercentage"), ("F3-FPM-MIB", "f3AccFlowPointFrameFwdEnabled"), ("F3-FPM-MIB", "f3AccFlowPointStorageType"), ("F3-FPM-MIB", "f3AccFlowPointRowStatus"), ("F3-FPM-MIB", "f3AccFlowPointUsePortPrioMapProfile"), ("F3-FPM-MIB", "f3AccFlowPointRefPrioMapProfile"), ("F3-FPM-MIB", "f3AccFlowpointRefConnectGuardFlowObject"), ("F3-FPM-MIB", "f3AccFlowpointSecureBlockingControl"), ("F3-FPM-MIB", "f3AccFlowpointSecureState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3AccFlowPointGroup = f3AccFlowPointGroup.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointGroup.setDescription('A collection of Access Flow Point objects.')
f3AccFpQosShaperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 2)).setObjects(("F3-FPM-MIB", "f3AccFpQosShaperIndex"), ("F3-FPM-MIB", "f3AccFpQosShaperAdminState"), ("F3-FPM-MIB", "f3AccFpQosShaperOperationalState"), ("F3-FPM-MIB", "f3AccFpQosShaperSecondaryState"), ("F3-FPM-MIB", "f3AccFpQosShaperCIRLo"), ("F3-FPM-MIB", "f3AccFpQosShaperCIRHi"), ("F3-FPM-MIB", "f3AccFpQosShaperCBS"), ("F3-FPM-MIB", "f3AccFpQosShaperEIRLo"), ("F3-FPM-MIB", "f3AccFpQosShaperEIRHi"), ("F3-FPM-MIB", "f3AccFpQosShaperEBS"), ("F3-FPM-MIB", "f3AccFpQosShaperBufferSize"), ("F3-FPM-MIB", "f3AccFpQosShaperCOS"), ("F3-FPM-MIB", "f3AccFpQosShaperStorageType"), ("F3-FPM-MIB", "f3AccFpQosShaperRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3AccFpQosShaperGroup = f3AccFpQosShaperGroup.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperGroup.setDescription('A collection of Access Flow Point QoS Shaper objects.')
f3AccFpQosPolicerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 3)).setObjects(("F3-FPM-MIB", "f3AccFpQosPolicerAdminState"), ("F3-FPM-MIB", "f3AccFpQosPolicerOperationalState"), ("F3-FPM-MIB", "f3AccFpQosPolicerSecondaryState"), ("F3-FPM-MIB", "f3AccFpQosPolicerCIRLo"), ("F3-FPM-MIB", "f3AccFpQosPolicerCIRHi"), ("F3-FPM-MIB", "f3AccFpQosPolicerEIRLo"), ("F3-FPM-MIB", "f3AccFpQosPolicerEIRHi"), ("F3-FPM-MIB", "f3AccFpQosPolicerCBS"), ("F3-FPM-MIB", "f3AccFpQosPolicerEBS"), ("F3-FPM-MIB", "f3AccFpQosPolicerAlgorithm"), ("F3-FPM-MIB", "f3AccFpQosPolicerColorMode"), ("F3-FPM-MIB", "f3AccFpQosPolicerCouplingFlag"), ("F3-FPM-MIB", "f3AccFpQosPolicerStorageType"), ("F3-FPM-MIB", "f3AccFpQosPolicerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3AccFpQosPolicerGroup = f3AccFpQosPolicerGroup.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerGroup.setDescription('A collection of Access Flow Point QoS Policer objects.')
f3MPFlowExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 4)).setObjects(("F3-FPM-MIB", "f3MPFlowExtMaxFwdEntries"), ("F3-FPM-MIB", "f3MPFlowRefConnectGuardFlowObject"), ("F3-FPM-MIB", "f3MPFlowSecureState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3MPFlowExtGroup = f3MPFlowExtGroup.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowExtGroup.setDescription('A collection of MP Flow objects.')
f3AccFlowPointCpdV2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 5)).setObjects(("F3-FPM-MIB", "f3AccFlowPointCpdV2IslDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2PagpDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2UdldDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2CdpDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2VtpDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2DtpDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2PvstpPlusDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2UplinkFastDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2VlanBridgeDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2L2PTDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2BPDUDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2PauseDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2LACPDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2LACPMarkerDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2EfmOamDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2SSMDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2PortAuthenDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2LANBridgesDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2GMRPDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2GVRPDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2GARPDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2ActiveControlProtocols"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2ELMIDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac00DispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac01DispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac02DispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac03DispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac04DispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac05DispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac06DispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac07DispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac08DispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac09DispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac0ADispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac0BDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac0CDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac0DDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac0EDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2Mac0FDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2NearestLLDPDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2NonTpmrLLDPDispType"), ("F3-FPM-MIB", "f3AccFlowPointCpdV2CustomerLLDPDispType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3AccFlowPointCpdV2Group = f3AccFlowPointCpdV2Group.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointCpdV2Group.setDescription('A collection of Access Flow Point CDPV2 objects.')
f3AccFlowPointLearningConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 6)).setObjects(("F3-FPM-MIB", "f3AccFlowPointLearningConfigLearningEnabled"), ("F3-FPM-MIB", "f3AccFlowPointLearningConfigMaxFwdEntries"), ("F3-FPM-MIB", "f3AccFlowPointLearningConfigProtectLearningCtrl"), ("F3-FPM-MIB", "f3AccFlowPointLearningConfigAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3AccFlowPointLearningConfigGroup = f3AccFlowPointLearningConfigGroup.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointLearningConfigGroup.setDescription('A collection of Access Flowpoint Learning Config objects.')
f3NetFlowPointGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 7)).setObjects(("F3-FPM-MIB", "f3NetFlowPointAlias"), ("F3-FPM-MIB", "f3NetFlowPointAdminState"), ("F3-FPM-MIB", "f3NetFlowPointOperationalState"), ("F3-FPM-MIB", "f3NetFlowPointSecondaryState"), ("F3-FPM-MIB", "f3NetFlowPointAssociatedFlowId"), ("F3-FPM-MIB", "f3NetFlowPointIngressMultiCOSEnabled"), ("F3-FPM-MIB", "f3NetFlowPointIngressCOS"), ("F3-FPM-MIB", "f3NetFlowPointEgressShapingType"), ("F3-FPM-MIB", "f3NetFlowPointIngressVlanMemberList"), ("F3-FPM-MIB", "f3NetFlowPointVlanMemberAction"), ("F3-FPM-MIB", "f3NetFlowPointVlanMemberActionVlan"), ("F3-FPM-MIB", "f3NetFlowPointIngressUntaggedFrameEnabled"), ("F3-FPM-MIB", "f3NetFlowPointCTagControl"), ("F3-FPM-MIB", "f3NetFlowPointCTagVlanId"), ("F3-FPM-MIB", "f3NetFlowPointCTagVlanPriority"), ("F3-FPM-MIB", "f3NetFlowPointSTagControl"), ("F3-FPM-MIB", "f3NetFlowPointSTagVlanId"), ("F3-FPM-MIB", "f3NetFlowPointSTagVlanPriority"), ("F3-FPM-MIB", "f3NetFlowPointEgressOuterTagPrioMapEnabled"), ("F3-FPM-MIB", "f3NetFlowPointEgressInnerTagPrioMapEnabled"), ("F3-FPM-MIB", "f3NetFlowPointSESFramesLossThresholdRatio"), ("F3-FPM-MIB", "f3NetFlowPointDefaultMemberEnabled"), ("F3-FPM-MIB", "f3NetFlowPointMcastRateLimitEnabled"), ("F3-FPM-MIB", "f3NetFlowPointMcastRateLimitSpeedLo"), ("F3-FPM-MIB", "f3NetFlowPointMcastRateLimitSpeedHi"), ("F3-FPM-MIB", "f3NetFlowPointBcastRateLimitEnabled"), ("F3-FPM-MIB", "f3NetFlowPointBcastRateLimitSpeedLo"), ("F3-FPM-MIB", "f3NetFlowPointBcastRateLimitSpeedHi"), ("F3-FPM-MIB", "f3NetFlowPointCombinedRateLimitEnabled"), ("F3-FPM-MIB", "f3NetFlowPointCombinedRateLimitSpeedLo"), ("F3-FPM-MIB", "f3NetFlowPointCombinedRateLimitSpeedHi"), ("F3-FPM-MIB", "f3NetFlowPointSplitHorizonGroupOID"), ("F3-FPM-MIB", "f3NetFlowPointLoopAvoidance"), ("F3-FPM-MIB", "f3NetFlowPointHierarchicalCOSEnabled"), ("F3-FPM-MIB", "f3NetFlowPointMaximumBWLo"), ("F3-FPM-MIB", "f3NetFlowPointMaximumBWHi"), ("F3-FPM-MIB", "f3NetFlowPointGuaranteedBWLo"), ("F3-FPM-MIB", "f3NetFlowPointGuaranteedBWHi"), ("F3-FPM-MIB", "f3NetFlowPointAutoBandwidthConfigEnabled"), ("F3-FPM-MIB", "f3NetFlowPointAutoCIRPercentage"), ("F3-FPM-MIB", "f3NetFlowPointFrameFwdEnabled"), ("F3-FPM-MIB", "f3NetFlowPointStorageType"), ("F3-FPM-MIB", "f3NetFlowPointRowStatus"), ("F3-FPM-MIB", "f3NetFlowPointUsePortPrioMapProfile"), ("F3-FPM-MIB", "f3NetFlowPointRefPrioMapProfile"), ("F3-FPM-MIB", "f3NetFlowpointRefConnectGuardFlowObject"), ("F3-FPM-MIB", "f3NetFlowpointSecureBlockingControl"), ("F3-FPM-MIB", "f3NetFlowpointSecureState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3NetFlowPointGroup = f3NetFlowPointGroup.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointGroup.setDescription('A collection of Network Flow Point objects.')
f3NetFpQosShaperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 8)).setObjects(("F3-FPM-MIB", "f3NetFpQosShaperIndex"), ("F3-FPM-MIB", "f3NetFpQosShaperAdminState"), ("F3-FPM-MIB", "f3NetFpQosShaperOperationalState"), ("F3-FPM-MIB", "f3NetFpQosShaperSecondaryState"), ("F3-FPM-MIB", "f3NetFpQosShaperCIRLo"), ("F3-FPM-MIB", "f3NetFpQosShaperCIRHi"), ("F3-FPM-MIB", "f3NetFpQosShaperCBS"), ("F3-FPM-MIB", "f3NetFpQosShaperEIRLo"), ("F3-FPM-MIB", "f3NetFpQosShaperEIRHi"), ("F3-FPM-MIB", "f3NetFpQosShaperEBS"), ("F3-FPM-MIB", "f3NetFpQosShaperBufferSize"), ("F3-FPM-MIB", "f3NetFpQosShaperCOS"), ("F3-FPM-MIB", "f3NetFpQosShaperStorageType"), ("F3-FPM-MIB", "f3NetFpQosShaperRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3NetFpQosShaperGroup = f3NetFpQosShaperGroup.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperGroup.setDescription('A collection of Network Flow Point QoS Shaper objects.')
f3NetFpQosPolicerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 9)).setObjects(("F3-FPM-MIB", "f3NetFpQosPolicerAdminState"), ("F3-FPM-MIB", "f3NetFpQosPolicerOperationalState"), ("F3-FPM-MIB", "f3NetFpQosPolicerSecondaryState"), ("F3-FPM-MIB", "f3NetFpQosPolicerCIRLo"), ("F3-FPM-MIB", "f3NetFpQosPolicerCIRHi"), ("F3-FPM-MIB", "f3NetFpQosPolicerEIRLo"), ("F3-FPM-MIB", "f3NetFpQosPolicerEIRHi"), ("F3-FPM-MIB", "f3NetFpQosPolicerCBS"), ("F3-FPM-MIB", "f3NetFpQosPolicerEBS"), ("F3-FPM-MIB", "f3NetFpQosPolicerAlgorithm"), ("F3-FPM-MIB", "f3NetFpQosPolicerColorMode"), ("F3-FPM-MIB", "f3NetFpQosPolicerCouplingFlag"), ("F3-FPM-MIB", "f3NetFpQosPolicerStorageType"), ("F3-FPM-MIB", "f3NetFpQosPolicerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3NetFpQosPolicerGroup = f3NetFpQosPolicerGroup.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerGroup.setDescription('A collection of Network Flow Point QoS Policer objects.')
f3NetFlowPointCpdV2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 10)).setObjects(("F3-FPM-MIB", "f3NetFlowPointCpdV2IslDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2PagpDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2UdldDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2CdpDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2VtpDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2DtpDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2PvstpPlusDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2UplinkFastDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2VlanBridgeDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2L2PTDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2BPDUDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2PauseDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2LACPDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2LACPMarkerDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2EfmOamDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2SSMDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2PortAuthenDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2LANBridgesDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2GMRPDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2GVRPDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2GARPDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2ActiveControlProtocols"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2ELMIDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac00DispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac01DispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac02DispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac03DispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac04DispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac05DispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac06DispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac07DispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac08DispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac09DispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac0ADispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac0BDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac0CDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac0DDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac0EDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2Mac0FDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2NearestLLDPDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2NonTpmrLLDPDispType"), ("F3-FPM-MIB", "f3NetFlowPointCpdV2CustomerLLDPDispType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3NetFlowPointCpdV2Group = f3NetFlowPointCpdV2Group.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointCpdV2Group.setDescription('A collection of Network Flow Point CDPV2 objects.')
f3NetFlowPointLearningConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 11)).setObjects(("F3-FPM-MIB", "f3NetFlowPointLearningConfigLearningEnabled"), ("F3-FPM-MIB", "f3NetFlowPointLearningConfigMaxFwdEntries"), ("F3-FPM-MIB", "f3NetFlowPointLearningConfigProtectLearningCtrl"), ("F3-FPM-MIB", "f3NetFlowPointLearningConfigAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3NetFlowPointLearningConfigGroup = f3NetFlowPointLearningConfigGroup.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointLearningConfigGroup.setDescription('A collection of Network Flowpoint Learning Config objects.')
f3AccFlowPointPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 12)).setObjects(("F3-FPM-MIB", "f3AccFlowPointStatsIndex"), ("F3-FPM-MIB", "f3AccFlowPointStatsIntervalType"), ("F3-FPM-MIB", "f3AccFlowPointStatsValid"), ("F3-FPM-MIB", "f3AccFlowPointStatsAction"), ("F3-FPM-MIB", "f3AccFlowPointStatsL2CPFD"), ("F3-FPM-MIB", "f3AccFlowPointStatsABRRx"), ("F3-FPM-MIB", "f3AccFlowPointStatsABRRLRx"), ("F3-FPM-MIB", "f3AccFlowPointStatsUAS"), ("F3-FPM-MIB", "f3AccFlowPointStatsSES"), ("F3-FPM-MIB", "f3AccFlowPointStatsFMG"), ("F3-FPM-MIB", "f3AccFlowPointStatsFMY"), ("F3-FPM-MIB", "f3AccFlowPointStatsFMRD"), ("F3-FPM-MIB", "f3AccFlowPointStatsFTD"), ("F3-FPM-MIB", "f3AccFlowPointStatsBytesIn"), ("F3-FPM-MIB", "f3AccFlowPointStatsBytesOut"), ("F3-FPM-MIB", "f3AccFlowPointStatsIBRMax"), ("F3-FPM-MIB", "f3AccFlowPointStatsIBRRlMax"), ("F3-FPM-MIB", "f3AccFlowPointStatsIBRMin"), ("F3-FPM-MIB", "f3AccFlowPointStatsIBRRlMin"), ("F3-FPM-MIB", "f3AccFlowPointStatsIBR"), ("F3-FPM-MIB", "f3AccFlowPointStatsIBRRl"), ("F3-FPM-MIB", "f3AccFlowPointStatsFBCD"), ("F3-FPM-MIB", "f3AccFlowPointStatsFMCD"), ("F3-FPM-MIB", "f3AccFlowPointStatsFdRxFb"), ("F3-FPM-MIB", "f3AccFlowPointStatsFdTxFb"), ("F3-FPM-MIB", "f3AccFlowPointStatsFdicd"), ("F3-FPM-MIB", "f3AccFlowPointStatsNumLearnTableFlushes"), ("F3-FPM-MIB", "f3AccFlowPointHistoryIndex"), ("F3-FPM-MIB", "f3AccFlowPointHistoryTime"), ("F3-FPM-MIB", "f3AccFlowPointHistoryValid"), ("F3-FPM-MIB", "f3AccFlowPointHistoryAction"), ("F3-FPM-MIB", "f3AccFlowPointHistoryL2CPFD"), ("F3-FPM-MIB", "f3AccFlowPointHistoryABRRx"), ("F3-FPM-MIB", "f3AccFlowPointHistoryABRRLRx"), ("F3-FPM-MIB", "f3AccFlowPointHistoryUAS"), ("F3-FPM-MIB", "f3AccFlowPointHistorySES"), ("F3-FPM-MIB", "f3AccFlowPointHistoryFMG"), ("F3-FPM-MIB", "f3AccFlowPointHistoryFMY"), ("F3-FPM-MIB", "f3AccFlowPointHistoryFMRD"), ("F3-FPM-MIB", "f3AccFlowPointHistoryFTD"), ("F3-FPM-MIB", "f3AccFlowPointHistoryBytesIn"), ("F3-FPM-MIB", "f3AccFlowPointHistoryBytesOut"), ("F3-FPM-MIB", "f3AccFlowPointHistoryIBRMax"), ("F3-FPM-MIB", "f3AccFlowPointHistoryIBRRlMax"), ("F3-FPM-MIB", "f3AccFlowPointHistoryIBRMin"), ("F3-FPM-MIB", "f3AccFlowPointHistoryIBRRlMin"), ("F3-FPM-MIB", "f3AccFlowPointHistoryIBR"), ("F3-FPM-MIB", "f3AccFlowPointHistoryIBRRl"), ("F3-FPM-MIB", "f3AccFlowPointHistoryFBCD"), ("F3-FPM-MIB", "f3AccFlowPointHistoryFMCD"), ("F3-FPM-MIB", "f3AccFlowPointHistoryFdRxFb"), ("F3-FPM-MIB", "f3AccFlowPointHistoryFdTxFb"), ("F3-FPM-MIB", "f3AccFlowPointHistoryFdicd"), ("F3-FPM-MIB", "f3AccFlowPointHistoryNumLearnTableFlushes"), ("F3-FPM-MIB", "f3AccFlowPointThresholdIndex"), ("F3-FPM-MIB", "f3AccFlowPointThresholdInterval"), ("F3-FPM-MIB", "f3AccFlowPointThresholdVariable"), ("F3-FPM-MIB", "f3AccFlowPointThresholdValueLo"), ("F3-FPM-MIB", "f3AccFlowPointThresholdValueHi"), ("F3-FPM-MIB", "f3AccFlowPointThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3AccFlowPointPerfGroup = f3AccFlowPointPerfGroup.setStatus('current')
if mibBuilder.loadTexts: f3AccFlowPointPerfGroup.setDescription('A collection of Access Flowpoint Performance objects.')
f3NetFlowPointPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 13)).setObjects(("F3-FPM-MIB", "f3NetFlowPointStatsIndex"), ("F3-FPM-MIB", "f3NetFlowPointStatsIntervalType"), ("F3-FPM-MIB", "f3NetFlowPointStatsValid"), ("F3-FPM-MIB", "f3NetFlowPointStatsAction"), ("F3-FPM-MIB", "f3NetFlowPointStatsL2CPFD"), ("F3-FPM-MIB", "f3NetFlowPointStatsABRRx"), ("F3-FPM-MIB", "f3NetFlowPointStatsABRRLRx"), ("F3-FPM-MIB", "f3NetFlowPointStatsUAS"), ("F3-FPM-MIB", "f3NetFlowPointStatsSES"), ("F3-FPM-MIB", "f3NetFlowPointStatsFMG"), ("F3-FPM-MIB", "f3NetFlowPointStatsFMY"), ("F3-FPM-MIB", "f3NetFlowPointStatsFMRD"), ("F3-FPM-MIB", "f3NetFlowPointStatsFTD"), ("F3-FPM-MIB", "f3NetFlowPointStatsBytesIn"), ("F3-FPM-MIB", "f3NetFlowPointStatsBytesOut"), ("F3-FPM-MIB", "f3NetFlowPointStatsIBRMax"), ("F3-FPM-MIB", "f3NetFlowPointStatsIBRRlMax"), ("F3-FPM-MIB", "f3NetFlowPointStatsIBRMin"), ("F3-FPM-MIB", "f3NetFlowPointStatsIBRRlMin"), ("F3-FPM-MIB", "f3NetFlowPointStatsIBR"), ("F3-FPM-MIB", "f3NetFlowPointStatsIBRRl"), ("F3-FPM-MIB", "f3NetFlowPointStatsFBCD"), ("F3-FPM-MIB", "f3NetFlowPointStatsFMCD"), ("F3-FPM-MIB", "f3NetFlowPointStatsFdRxFb"), ("F3-FPM-MIB", "f3NetFlowPointStatsFdTxFb"), ("F3-FPM-MIB", "f3NetFlowPointStatsFdicd"), ("F3-FPM-MIB", "f3NetFlowPointStatsNumLearnTableFlushes"), ("F3-FPM-MIB", "f3NetFlowPointHistoryIndex"), ("F3-FPM-MIB", "f3NetFlowPointHistoryTime"), ("F3-FPM-MIB", "f3NetFlowPointHistoryValid"), ("F3-FPM-MIB", "f3NetFlowPointHistoryAction"), ("F3-FPM-MIB", "f3NetFlowPointHistoryL2CPFD"), ("F3-FPM-MIB", "f3NetFlowPointHistoryABRRx"), ("F3-FPM-MIB", "f3NetFlowPointHistoryABRRLRx"), ("F3-FPM-MIB", "f3NetFlowPointHistoryUAS"), ("F3-FPM-MIB", "f3NetFlowPointHistorySES"), ("F3-FPM-MIB", "f3NetFlowPointHistoryFMG"), ("F3-FPM-MIB", "f3NetFlowPointHistoryFMY"), ("F3-FPM-MIB", "f3NetFlowPointHistoryFMRD"), ("F3-FPM-MIB", "f3NetFlowPointHistoryFTD"), ("F3-FPM-MIB", "f3NetFlowPointHistoryBytesIn"), ("F3-FPM-MIB", "f3NetFlowPointHistoryBytesOut"), ("F3-FPM-MIB", "f3NetFlowPointHistoryIBRMax"), ("F3-FPM-MIB", "f3NetFlowPointHistoryIBRRlMax"), ("F3-FPM-MIB", "f3NetFlowPointHistoryIBRMin"), ("F3-FPM-MIB", "f3NetFlowPointHistoryIBRRlMin"), ("F3-FPM-MIB", "f3NetFlowPointHistoryIBR"), ("F3-FPM-MIB", "f3NetFlowPointHistoryIBRRl"), ("F3-FPM-MIB", "f3NetFlowPointHistoryFBCD"), ("F3-FPM-MIB", "f3NetFlowPointHistoryFMCD"), ("F3-FPM-MIB", "f3NetFlowPointHistoryFdRxFb"), ("F3-FPM-MIB", "f3NetFlowPointHistoryFdTxFb"), ("F3-FPM-MIB", "f3NetFlowPointHistoryFdicd"), ("F3-FPM-MIB", "f3NetFlowPointHistoryNumLearnTableFlushes"), ("F3-FPM-MIB", "f3NetFlowPointThresholdIndex"), ("F3-FPM-MIB", "f3NetFlowPointThresholdInterval"), ("F3-FPM-MIB", "f3NetFlowPointThresholdVariable"), ("F3-FPM-MIB", "f3NetFlowPointThresholdValueLo"), ("F3-FPM-MIB", "f3NetFlowPointThresholdValueHi"), ("F3-FPM-MIB", "f3NetFlowPointThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3NetFlowPointPerfGroup = f3NetFlowPointPerfGroup.setStatus('current')
if mibBuilder.loadTexts: f3NetFlowPointPerfGroup.setDescription('A collection of Network Flowpoint Performance objects.')
f3MPFlowPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 14)).setObjects(("F3-FPM-MIB", "f3MPFlowStatsIndex"), ("F3-FPM-MIB", "f3MPFlowStatsIntervalType"), ("F3-FPM-MIB", "f3MPFlowStatsValid"), ("F3-FPM-MIB", "f3MPFlowStatsAction"), ("F3-FPM-MIB", "f3MPFlowStatsFDStaticBlock"), ("F3-FPM-MIB", "f3MPFlowStatsFDHairPin"), ("F3-FPM-MIB", "f3MPFlowStatsMacTableDiscards"), ("F3-FPM-MIB", "f3MPFlowStatsFDProtLearn"), ("F3-FPM-MIB", "f3MPFlowHistoryIndex"), ("F3-FPM-MIB", "f3MPFlowHistoryTime"), ("F3-FPM-MIB", "f3MPFlowHistoryValid"), ("F3-FPM-MIB", "f3MPFlowHistoryAction"), ("F3-FPM-MIB", "f3MPFlowHistoryFDStaticBlock"), ("F3-FPM-MIB", "f3MPFlowHistoryFDHairPin"), ("F3-FPM-MIB", "f3MPFlowHistoryMacTableDiscards"), ("F3-FPM-MIB", "f3MPFlowHistoryFDProtLearn"), ("F3-FPM-MIB", "f3MPFlowThresholdIndex"), ("F3-FPM-MIB", "f3MPFlowThresholdInterval"), ("F3-FPM-MIB", "f3MPFlowThresholdVariable"), ("F3-FPM-MIB", "f3MPFlowThresholdValueLo"), ("F3-FPM-MIB", "f3MPFlowThresholdValueHi"), ("F3-FPM-MIB", "f3MPFlowThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3MPFlowPerfGroup = f3MPFlowPerfGroup.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowPerfGroup.setDescription('A collection of MP Flow Performance objects.')
f3AccFpQosShaperPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 15)).setObjects(("F3-FPM-MIB", "f3AccFpQosShaperStatsIndex"), ("F3-FPM-MIB", "f3AccFpQosShaperStatsIntervalType"), ("F3-FPM-MIB", "f3AccFpQosShaperStatsValid"), ("F3-FPM-MIB", "f3AccFpQosShaperStatsAction"), ("F3-FPM-MIB", "f3AccFpQosShaperStatsBT"), ("F3-FPM-MIB", "f3AccFpQosShaperStatsBTD"), ("F3-FPM-MIB", "f3AccFpQosShaperStatsFD"), ("F3-FPM-MIB", "f3AccFpQosShaperStatsFTD"), ("F3-FPM-MIB", "f3AccFpQosShaperStatsABRRL"), ("F3-FPM-MIB", "f3AccFpQosShaperStatsBREDD"), ("F3-FPM-MIB", "f3AccFpQosShaperStatsFREDD"), ("F3-FPM-MIB", "f3AccFpQosShaperHistoryIndex"), ("F3-FPM-MIB", "f3AccFpQosShaperHistoryTime"), ("F3-FPM-MIB", "f3AccFpQosShaperHistoryValid"), ("F3-FPM-MIB", "f3AccFpQosShaperHistoryAction"), ("F3-FPM-MIB", "f3AccFpQosShaperHistoryBT"), ("F3-FPM-MIB", "f3AccFpQosShaperHistoryBTD"), ("F3-FPM-MIB", "f3AccFpQosShaperHistoryFD"), ("F3-FPM-MIB", "f3AccFpQosShaperHistoryFTD"), ("F3-FPM-MIB", "f3AccFpQosShaperHistoryABRRL"), ("F3-FPM-MIB", "f3AccFpQosShaperHistoryBREDD"), ("F3-FPM-MIB", "f3AccFpQosShaperHistoryFREDD"), ("F3-FPM-MIB", "f3AccFpQosShaperThresholdIndex"), ("F3-FPM-MIB", "f3AccFpQosShaperThresholdInterval"), ("F3-FPM-MIB", "f3AccFpQosShaperThresholdVariable"), ("F3-FPM-MIB", "f3AccFpQosShaperThresholdValueLo"), ("F3-FPM-MIB", "f3AccFpQosShaperThresholdValueHi"), ("F3-FPM-MIB", "f3AccFpQosShaperThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3AccFpQosShaperPerfGroup = f3AccFpQosShaperPerfGroup.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosShaperPerfGroup.setDescription('A collection of Acc FlowPoint QoS Shaper Performance objects.')
f3NetFpQosShaperPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 16)).setObjects(("F3-FPM-MIB", "f3NetFpQosShaperStatsIndex"), ("F3-FPM-MIB", "f3NetFpQosShaperStatsIntervalType"), ("F3-FPM-MIB", "f3NetFpQosShaperStatsValid"), ("F3-FPM-MIB", "f3NetFpQosShaperStatsAction"), ("F3-FPM-MIB", "f3NetFpQosShaperStatsBT"), ("F3-FPM-MIB", "f3NetFpQosShaperStatsBTD"), ("F3-FPM-MIB", "f3NetFpQosShaperStatsFD"), ("F3-FPM-MIB", "f3NetFpQosShaperStatsFTD"), ("F3-FPM-MIB", "f3NetFpQosShaperStatsABRRL"), ("F3-FPM-MIB", "f3NetFpQosShaperStatsBREDD"), ("F3-FPM-MIB", "f3NetFpQosShaperStatsFREDD"), ("F3-FPM-MIB", "f3NetFpQosShaperHistoryIndex"), ("F3-FPM-MIB", "f3NetFpQosShaperHistoryTime"), ("F3-FPM-MIB", "f3NetFpQosShaperHistoryValid"), ("F3-FPM-MIB", "f3NetFpQosShaperHistoryAction"), ("F3-FPM-MIB", "f3NetFpQosShaperHistoryBT"), ("F3-FPM-MIB", "f3NetFpQosShaperHistoryBTD"), ("F3-FPM-MIB", "f3NetFpQosShaperHistoryFD"), ("F3-FPM-MIB", "f3NetFpQosShaperHistoryFTD"), ("F3-FPM-MIB", "f3NetFpQosShaperHistoryABRRL"), ("F3-FPM-MIB", "f3NetFpQosShaperHistoryBREDD"), ("F3-FPM-MIB", "f3NetFpQosShaperHistoryFREDD"), ("F3-FPM-MIB", "f3NetFpQosShaperThresholdIndex"), ("F3-FPM-MIB", "f3NetFpQosShaperThresholdInterval"), ("F3-FPM-MIB", "f3NetFpQosShaperThresholdVariable"), ("F3-FPM-MIB", "f3NetFpQosShaperThresholdValueLo"), ("F3-FPM-MIB", "f3NetFpQosShaperThresholdValueHi"), ("F3-FPM-MIB", "f3NetFpQosShaperThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3NetFpQosShaperPerfGroup = f3NetFpQosShaperPerfGroup.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosShaperPerfGroup.setDescription('A collection of Net FlowPoint QoS Shaper Performance objects.')
f3AccFpQosPolicerPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 17)).setObjects(("F3-FPM-MIB", "f3AccFpQosPolicerStatsIndex"), ("F3-FPM-MIB", "f3AccFpQosPolicerStatsIntervalType"), ("F3-FPM-MIB", "f3AccFpQosPolicerStatsValid"), ("F3-FPM-MIB", "f3AccFpQosPolicerStatsAction"), ("F3-FPM-MIB", "f3AccFpQosPolicerStatsFMG"), ("F3-FPM-MIB", "f3AccFpQosPolicerStatsFMY"), ("F3-FPM-MIB", "f3AccFpQosPolicerStatsFMRD"), ("F3-FPM-MIB", "f3AccFpQosPolicerStatsBytesIn"), ("F3-FPM-MIB", "f3AccFpQosPolicerStatsBytesOut"), ("F3-FPM-MIB", "f3AccFpQosPolicerStatsABR"), ("F3-FPM-MIB", "f3AccFpQosPolicerHistoryIndex"), ("F3-FPM-MIB", "f3AccFpQosPolicerHistoryTime"), ("F3-FPM-MIB", "f3AccFpQosPolicerHistoryValid"), ("F3-FPM-MIB", "f3AccFpQosPolicerHistoryAction"), ("F3-FPM-MIB", "f3AccFpQosPolicerHistoryFMG"), ("F3-FPM-MIB", "f3AccFpQosPolicerHistoryFMY"), ("F3-FPM-MIB", "f3AccFpQosPolicerHistoryFMRD"), ("F3-FPM-MIB", "f3AccFpQosPolicerHistoryBytesIn"), ("F3-FPM-MIB", "f3AccFpQosPolicerHistoryBytesOut"), ("F3-FPM-MIB", "f3AccFpQosPolicerHistoryABR"), ("F3-FPM-MIB", "f3AccFpQosPolicerThresholdIndex"), ("F3-FPM-MIB", "f3AccFpQosPolicerThresholdInterval"), ("F3-FPM-MIB", "f3AccFpQosPolicerThresholdVariable"), ("F3-FPM-MIB", "f3AccFpQosPolicerThresholdValueLo"), ("F3-FPM-MIB", "f3AccFpQosPolicerThresholdValueHi"), ("F3-FPM-MIB", "f3AccFpQosPolicerThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3AccFpQosPolicerPerfGroup = f3AccFpQosPolicerPerfGroup.setStatus('current')
if mibBuilder.loadTexts: f3AccFpQosPolicerPerfGroup.setDescription('A collection of Acc FlowPoint QoS Policer Performance objects.')
f3NetFpQosPolicerPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 18)).setObjects(("F3-FPM-MIB", "f3NetFpQosPolicerStatsIndex"), ("F3-FPM-MIB", "f3NetFpQosPolicerStatsIntervalType"), ("F3-FPM-MIB", "f3NetFpQosPolicerStatsValid"), ("F3-FPM-MIB", "f3NetFpQosPolicerStatsAction"), ("F3-FPM-MIB", "f3NetFpQosPolicerStatsFMG"), ("F3-FPM-MIB", "f3NetFpQosPolicerStatsFMY"), ("F3-FPM-MIB", "f3NetFpQosPolicerStatsFMRD"), ("F3-FPM-MIB", "f3NetFpQosPolicerStatsBytesIn"), ("F3-FPM-MIB", "f3NetFpQosPolicerStatsBytesOut"), ("F3-FPM-MIB", "f3NetFpQosPolicerStatsABR"), ("F3-FPM-MIB", "f3NetFpQosPolicerHistoryIndex"), ("F3-FPM-MIB", "f3NetFpQosPolicerHistoryTime"), ("F3-FPM-MIB", "f3NetFpQosPolicerHistoryValid"), ("F3-FPM-MIB", "f3NetFpQosPolicerHistoryAction"), ("F3-FPM-MIB", "f3NetFpQosPolicerHistoryFMG"), ("F3-FPM-MIB", "f3NetFpQosPolicerHistoryFMY"), ("F3-FPM-MIB", "f3NetFpQosPolicerHistoryFMRD"), ("F3-FPM-MIB", "f3NetFpQosPolicerHistoryBytesIn"), ("F3-FPM-MIB", "f3NetFpQosPolicerHistoryBytesOut"), ("F3-FPM-MIB", "f3NetFpQosPolicerHistoryABR"), ("F3-FPM-MIB", "f3NetFpQosPolicerThresholdIndex"), ("F3-FPM-MIB", "f3NetFpQosPolicerThresholdInterval"), ("F3-FPM-MIB", "f3NetFpQosPolicerThresholdVariable"), ("F3-FPM-MIB", "f3NetFpQosPolicerThresholdValueLo"), ("F3-FPM-MIB", "f3NetFpQosPolicerThresholdValueHi"), ("F3-FPM-MIB", "f3NetFpQosPolicerThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3NetFpQosPolicerPerfGroup = f3NetFpQosPolicerPerfGroup.setStatus('current')
if mibBuilder.loadTexts: f3NetFpQosPolicerPerfGroup.setDescription('A collection of Net FlowPoint QoS Policer Performance objects.')
f3FpmPerfNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 43, 4, 2, 19)).setObjects(("F3-FPM-MIB", "f3AccFlowPointThresholdCrossingAlert"), ("F3-FPM-MIB", "f3NetFlowPointThresholdCrossingAlert"), ("F3-FPM-MIB", "f3MPFlowThresholdCrossingAlert"), ("F3-FPM-MIB", "f3AccFpQosShaperThresholdCrossingAlert"), ("F3-FPM-MIB", "f3NetFpQosShaperThresholdCrossingAlert"), ("F3-FPM-MIB", "f3AccFpQosPolicerThresholdCrossingAlert"), ("F3-FPM-MIB", "f3NetFpQosPolicerThresholdCrossingAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3FpmPerfNotifGroup = f3FpmPerfNotifGroup.setStatus('current')
if mibBuilder.loadTexts: f3FpmPerfNotifGroup.setDescription('A collection of notifications related to FSP150CC\n             Threshold Crossing Alerts.')
mibBuilder.exportSymbols("F3-FPM-MIB", f3AccFlowPointHistoryBytesIn=f3AccFlowPointHistoryBytesIn, f3AccFlowPointCpdV2GVRPDispType=f3AccFlowPointCpdV2GVRPDispType, f3NetFlowPointCpdV2NearestLLDPDispType=f3NetFlowPointCpdV2NearestLLDPDispType, f3NetFlowPointThresholdIndex=f3NetFlowPointThresholdIndex, f3AccFlowPointEgressOuterTagPrioMapEnabled=f3AccFlowPointEgressOuterTagPrioMapEnabled, f3NetFpQosShaperHistoryFREDD=f3NetFpQosShaperHistoryFREDD, f3AccFpQosPolicerOperationalState=f3AccFpQosPolicerOperationalState, f3AccFlowPointEgressInnerTagPrioMapEnabled=f3AccFlowPointEgressInnerTagPrioMapEnabled, f3AccFlowPointHistoryBytesOut=f3AccFlowPointHistoryBytesOut, f3NetFlowPointLearningConfigGroup=f3NetFlowPointLearningConfigGroup, f3AccFpQosShaperGroup=f3AccFpQosShaperGroup, f3AccFlowPointThresholdMonValue=f3AccFlowPointThresholdMonValue, f3NetFlowPointHistoryEntry=f3NetFlowPointHistoryEntry, f3NetFpQosShaperBufferSize=f3NetFpQosShaperBufferSize, f3NetFpQosShaperThresholdValueHi=f3NetFpQosShaperThresholdValueHi, f3NetFlowPointHistoryFTD=f3NetFlowPointHistoryFTD, f3AccFlowPointSTagControl=f3AccFlowPointSTagControl, f3NetFpQosPolicerStatsTable=f3NetFpQosPolicerStatsTable, f3AccFpQosPolicerHistoryValid=f3AccFpQosPolicerHistoryValid, f3AccFlowPointCpdV2Mac03DispType=f3AccFlowPointCpdV2Mac03DispType, f3NetFpQosPolicerThresholdIndex=f3NetFpQosPolicerThresholdIndex, f3AccFlowPointCpdV2Mac0BDispType=f3AccFlowPointCpdV2Mac0BDispType, f3NetFlowPointStatsIntervalType=f3NetFlowPointStatsIntervalType, f3AccFlowPointCpdV2SSMDispType=f3AccFlowPointCpdV2SSMDispType, f3AccFpQosShaperBufferSize=f3AccFpQosShaperBufferSize, f3NetFpQosPolicerHistoryAction=f3NetFpQosPolicerHistoryAction, f3NetFlowPointCpdV2Entry=f3NetFlowPointCpdV2Entry, f3AccFlowPointHistoryEntry=f3AccFlowPointHistoryEntry, f3NetFlowPointIngressUntaggedFrameEnabled=f3NetFlowPointIngressUntaggedFrameEnabled, f3MPFlowStatsTable=f3MPFlowStatsTable, f3AccFlowPointMcastRateLimitSpeedHi=f3AccFlowPointMcastRateLimitSpeedHi, f3NetFpQosShaperThresholdTable=f3NetFpQosShaperThresholdTable, f3AccFlowPointMaximumBWHi=f3AccFlowPointMaximumBWHi, f3NetFlowPointLearningConfigTable=f3NetFlowPointLearningConfigTable, f3NetFpQosPolicerTable=f3NetFpQosPolicerTable, f3NetFlowPointCpdV2Mac02DispType=f3NetFlowPointCpdV2Mac02DispType, f3NetFlowPointCpdV2L2PTDispType=f3NetFlowPointCpdV2L2PTDispType, f3NetFlowPointCpdV2Mac09DispType=f3NetFlowPointCpdV2Mac09DispType, f3NetFlowPointStatsUAS=f3NetFlowPointStatsUAS, f3AccFlowPointUsePortPrioMapProfile=f3AccFlowPointUsePortPrioMapProfile, f3AccFlowPointSplitHorizonGroupOID=f3AccFlowPointSplitHorizonGroupOID, f3AccFpQosPolicerStatsBytesIn=f3AccFpQosPolicerStatsBytesIn, f3FpmCompliances=f3FpmCompliances, f3AccFlowPointHistoryTime=f3AccFlowPointHistoryTime, f3AccFlowPointIngressVlanMemberList=f3AccFlowPointIngressVlanMemberList, f3NetFpQosPolicerRowStatus=f3NetFpQosPolicerRowStatus, f3AccFlowPointHistoryFTD=f3AccFlowPointHistoryFTD, f3NetFlowPointStatsIBR=f3NetFlowPointStatsIBR, f3NetFlowPointThresholdEntry=f3NetFlowPointThresholdEntry, f3NetFpQosShaperPerfGroup=f3NetFpQosShaperPerfGroup, f3AccFlowPointStorageType=f3AccFlowPointStorageType, f3AccFlowPointCpdV2VtpDispType=f3AccFlowPointCpdV2VtpDispType, f3NetFlowPointEgressShapingType=f3NetFlowPointEgressShapingType, f3AccFlowPointAdminState=f3AccFlowPointAdminState, f3NetFpQosPolicerPerfGroup=f3NetFpQosPolicerPerfGroup, f3AccFpQosShaperHistoryFREDD=f3AccFpQosShaperHistoryFREDD, f3AccFpQosPolicerEntry=f3AccFpQosPolicerEntry, f3AccFlowPointSTagVlanId=f3AccFlowPointSTagVlanId, f3AccFpQosPolicerPerfGroup=f3AccFpQosPolicerPerfGroup, f3AccFlowPointHistoryFBCD=f3AccFlowPointHistoryFBCD, f3NetFlowPointHistoryFMG=f3NetFlowPointHistoryFMG, f3AccFpQosPolicerHistoryIndex=f3AccFpQosPolicerHistoryIndex, f3NetFpQosPolicerColorMode=f3NetFpQosPolicerColorMode, f3NetFpQosShaperHistoryIndex=f3NetFpQosShaperHistoryIndex, f3AccFpQosPolicerHistoryEntry=f3AccFpQosPolicerHistoryEntry, f3MPFlowHistoryFDProtLearn=f3MPFlowHistoryFDProtLearn, f3NetFpQosShaperCIRHi=f3NetFpQosShaperCIRHi, f3NetFlowPointStatsFMRD=f3NetFlowPointStatsFMRD, f3NetFlowPointCpdV2Group=f3NetFlowPointCpdV2Group, f3NetFpQosShaperGroup=f3NetFpQosShaperGroup, f3AccFpQosPolicerHistoryFMRD=f3AccFpQosPolicerHistoryFMRD, f3MPFlowStatsFDStaticBlock=f3MPFlowStatsFDStaticBlock, f3NetFpQosShaperStatsFREDD=f3NetFpQosShaperStatsFREDD, f3AccFpQosShaperHistoryTable=f3AccFpQosShaperHistoryTable, f3AccFlowPointGuaranteedBWLo=f3AccFlowPointGuaranteedBWLo, f3MPFlowSecureState=f3MPFlowSecureState, f3AccFlowPointOperationalState=f3AccFlowPointOperationalState, f3NetFpQosPolicerStatsAction=f3NetFpQosPolicerStatsAction, f3NetFlowPointStatsFMCD=f3NetFlowPointStatsFMCD, f3MPFlowHistoryEntry=f3MPFlowHistoryEntry, f3AccFlowPointStatsIBRMin=f3AccFlowPointStatsIBRMin, f3NetFpQosPolicerGroup=f3NetFpQosPolicerGroup, f3NetFlowPointDefaultMemberEnabled=f3NetFlowPointDefaultMemberEnabled, f3AccFpQosPolicerCBS=f3AccFpQosPolicerCBS, f3AccFlowPointLearningConfigGroup=f3AccFlowPointLearningConfigGroup, f3AccFpQosPolicerStatsEntry=f3AccFpQosPolicerStatsEntry, f3AccFpQosShaperPerfGroup=f3AccFpQosShaperPerfGroup, f3NetFpQosShaperStatsBTD=f3NetFpQosShaperStatsBTD, f3NetFpQosPolicerOperationalState=f3NetFpQosPolicerOperationalState, f3AccFlowPointStatsFdicd=f3AccFlowPointStatsFdicd, f3AccFpQosShaperStatsFREDD=f3AccFpQosShaperStatsFREDD, f3AccFlowPointTable=f3AccFlowPointTable, f3NetFlowPointCpdV2UplinkFastDispType=f3NetFlowPointCpdV2UplinkFastDispType, f3NetFpQosShaperHistoryBREDD=f3NetFpQosShaperHistoryBREDD, f3NetFpQosPolicerStatsFMG=f3NetFpQosPolicerStatsFMG, f3AccFpQosPolicerStatsFMRD=f3AccFpQosPolicerStatsFMRD, f3AccFlowPointHistoryFMRD=f3AccFlowPointHistoryFMRD, f3AccFlowPointStatsIBR=f3AccFlowPointStatsIBR, f3NetFpQosPolicerThresholdCrossingAlert=f3NetFpQosPolicerThresholdCrossingAlert, f3AccFlowPointStatsTable=f3AccFlowPointStatsTable, f3AccFlowPointThresholdIndex=f3AccFlowPointThresholdIndex, f3NetFpQosPolicerCBS=f3NetFpQosPolicerCBS, f3AccFpQosPolicerThresholdEntry=f3AccFpQosPolicerThresholdEntry, f3MPFlowExtGroup=f3MPFlowExtGroup, f3AccFlowPointCTagVlanId=f3AccFlowPointCTagVlanId, f3NetFlowPointHistoryIBRRlMax=f3NetFlowPointHistoryIBRRlMax, f3NetFlowPointCpdV2Mac05DispType=f3NetFlowPointCpdV2Mac05DispType, f3NetFpQosShaperStatsBT=f3NetFpQosShaperStatsBT, f3NetFlowPointStatsIBRRlMax=f3NetFlowPointStatsIBRRlMax, f3FpmPerfNotifGroup=f3FpmPerfNotifGroup, f3AccFlowPointEgressShapingType=f3AccFlowPointEgressShapingType, f3NetFlowPointGroup=f3NetFlowPointGroup, f3AccFpQosPolicerHistoryABR=f3AccFpQosPolicerHistoryABR, f3AccFlowpointSecureState=f3AccFlowpointSecureState, f3NetFlowPointCpdV2Mac08DispType=f3NetFlowPointCpdV2Mac08DispType, f3AccFpQosPolicerHistoryTime=f3AccFpQosPolicerHistoryTime, f3NetFlowPointCpdV2GARPDispType=f3NetFlowPointCpdV2GARPDispType, f3AccFpQosPolicerThresholdCrossingAlert=f3AccFpQosPolicerThresholdCrossingAlert, f3AccFpQosPolicerThresholdValueHi=f3AccFpQosPolicerThresholdValueHi, f3NetFlowPointStatsIndex=f3NetFlowPointStatsIndex, f3AccFlowPointHistorySES=f3AccFlowPointHistorySES, f3MPFlowExtEntry=f3MPFlowExtEntry, f3NetFpQosPolicerThresholdValueHi=f3NetFpQosPolicerThresholdValueHi, f3AccFlowPointVlanMemberActionVlan=f3AccFlowPointVlanMemberActionVlan, f3AccFlowPointHistoryFMCD=f3AccFlowPointHistoryFMCD, f3AccFlowPointThresholdEntry=f3AccFlowPointThresholdEntry, f3AccFlowPointLearningConfigMaxFwdEntries=f3AccFlowPointLearningConfigMaxFwdEntries, f3AccFlowPointHistoryABRRx=f3AccFlowPointHistoryABRRx, f3AccFlowPointCpdV2Mac0ADispType=f3AccFlowPointCpdV2Mac0ADispType, f3NetFlowPointLearningConfigMaxFwdEntries=f3NetFlowPointLearningConfigMaxFwdEntries, f3AccFlowPointHistoryFMY=f3AccFlowPointHistoryFMY, f3AccFlowPointStatsFMRD=f3AccFlowPointStatsFMRD, f3AccFpQosPolicerStatsABR=f3AccFpQosPolicerStatsABR, f3AccFpQosShaperThresholdIndex=f3AccFpQosShaperThresholdIndex, f3AccFlowPointStatsFdTxFb=f3AccFlowPointStatsFdTxFb, f3AccFpQosShaperThresholdMonValue=f3AccFpQosShaperThresholdMonValue, f3AccFpQosPolicerPolicingEnabled=f3AccFpQosPolicerPolicingEnabled, f3AccFpQosShaperStatsTable=f3AccFpQosShaperStatsTable, f3NetFlowPointCTagVlanId=f3NetFlowPointCTagVlanId, f3AccFlowPointHistoryNumLearnTableFlushes=f3AccFlowPointHistoryNumLearnTableFlushes, f3NetFlowPointCombinedRateLimitEnabled=f3NetFlowPointCombinedRateLimitEnabled, f3NetFlowPointStatsFdRxFb=f3NetFlowPointStatsFdRxFb, f3AccFpQosShaperStatsFD=f3AccFpQosShaperStatsFD, f3AccFpQosPolicerTable=f3AccFpQosPolicerTable, f3FpmConformance=f3FpmConformance, f3NetFlowPointIndex=f3NetFlowPointIndex, f3NetFlowPointStorageType=f3NetFlowPointStorageType, f3NetFlowPointIngressMultiCOSEnabled=f3NetFlowPointIngressMultiCOSEnabled, f3NetFlowPointHistoryIndex=f3NetFlowPointHistoryIndex, f3NetFpQosShaperEIRLo=f3NetFpQosShaperEIRLo, f3AccFlowPointCpdV2Mac06DispType=f3AccFlowPointCpdV2Mac06DispType, f3NetFlowPointCpdV2IslDispType=f3NetFlowPointCpdV2IslDispType, f3AccFpQosShaperHistoryABRRL=f3AccFpQosShaperHistoryABRRL, f3AccFlowpointRefConnectGuardFlowObject=f3AccFlowpointRefConnectGuardFlowObject, f3MPFlowThresholdEntry=f3MPFlowThresholdEntry, f3AccFlowPointHistoryFdRxFb=f3AccFlowPointHistoryFdRxFb, f3NetFlowPointThresholdCrossingAlert=f3NetFlowPointThresholdCrossingAlert, f3AccFlowPointStatsBytesOut=f3AccFlowPointStatsBytesOut, f3NetFpQosPolicerStatsFMY=f3NetFpQosPolicerStatsFMY, f3NetFlowPointHistoryIBRMax=f3NetFlowPointHistoryIBRMax, f3NetFlowPointStatsIBRRlMin=f3NetFlowPointStatsIBRRlMin, f3AccFlowPointHistoryTable=f3AccFlowPointHistoryTable, f3NetFlowPointHistoryFdRxFb=f3NetFlowPointHistoryFdRxFb, f3AccFlowPointRowStatus=f3AccFlowPointRowStatus, f3NetFlowPointCpdV2DtpDispType=f3NetFlowPointCpdV2DtpDispType, f3AccFpQosShaperHistoryBT=f3AccFpQosShaperHistoryBT, f3AccFlowPointCpdV2VlanBridgeDispType=f3AccFlowPointCpdV2VlanBridgeDispType, f3NetFlowPointCpdV2VlanBridgeDispType=f3NetFlowPointCpdV2VlanBridgeDispType, f3AccFlowPointIngressMultiCOSEnabled=f3AccFlowPointIngressMultiCOSEnabled, f3NetFpQosShaperHistoryBT=f3NetFpQosShaperHistoryBT, f3AccFlowPointThresholdCrossingAlert=f3AccFlowPointThresholdCrossingAlert, f3AccFlowPointCpdV2L2PTDispType=f3AccFlowPointCpdV2L2PTDispType, f3NetFlowPointStatsFMG=f3NetFlowPointStatsFMG, f3NetFpQosShaperCOS=f3NetFpQosShaperCOS, f3AccFpQosShaperThresholdVariable=f3AccFpQosShaperThresholdVariable, f3NetFlowPointHistoryValid=f3NetFlowPointHistoryValid, f3AccFpQosShaperCBS=f3AccFpQosShaperCBS, f3NetFlowPointStatsABRRx=f3NetFlowPointStatsABRRx, f3NetFlowPointStatsFBCD=f3NetFlowPointStatsFBCD, f3NetFpQosShaperOperationalState=f3NetFpQosShaperOperationalState, f3NetFlowPointCpdV2Mac0DDispType=f3NetFlowPointCpdV2Mac0DDispType, f3AccFlowPointCpdV2Table=f3AccFlowPointCpdV2Table, f3AccFlowPointHistoryFMG=f3AccFlowPointHistoryFMG, f3NetFlowPointCTagVlanPriority=f3NetFlowPointCTagVlanPriority, f3AccFpQosShaperStatsIndex=f3AccFpQosShaperStatsIndex, f3AccFlowPointHistoryUAS=f3AccFlowPointHistoryUAS, f3NetFlowPointGuaranteedBWHi=f3NetFlowPointGuaranteedBWHi, f3AccFlowPointRefPrioMapProfile=f3AccFlowPointRefPrioMapProfile, f3MPFlowExtTable=f3MPFlowExtTable, f3NetFlowPointThresholdValueLo=f3NetFlowPointThresholdValueLo, f3NetFlowPointLearningConfigProtectLearningCtrl=f3NetFlowPointLearningConfigProtectLearningCtrl, f3NetFlowPointHistoryFMY=f3NetFlowPointHistoryFMY, f3NetFlowPointSplitHorizonGroupOID=f3NetFlowPointSplitHorizonGroupOID, f3NetFlowPointCpdV2PauseDispType=f3NetFlowPointCpdV2PauseDispType, f3AccFpQosShaperThresholdTable=f3AccFpQosShaperThresholdTable, f3AccFpQosPolicerAdminState=f3AccFpQosPolicerAdminState, f3NetFlowPointUsePortPrioMapProfile=f3NetFlowPointUsePortPrioMapProfile, f3NetFlowPointHistoryFBCD=f3NetFlowPointHistoryFBCD, f3AccFpQosPolicerHistoryBytesOut=f3AccFpQosPolicerHistoryBytesOut, f3NetFlowPointThresholdVariable=f3NetFlowPointThresholdVariable, f3AccFlowPointMaximumBWLo=f3AccFlowPointMaximumBWLo, f3NetFpQosShaperIndex=f3NetFpQosShaperIndex, f3AccFlowPointStatsIBRRlMin=f3AccFlowPointStatsIBRRlMin, f3NetFlowPointStatsFTD=f3NetFlowPointStatsFTD, f3MPFlowStatsMacTableDiscards=f3MPFlowStatsMacTableDiscards, f3NetFpQosPolicerStatsValid=f3NetFpQosPolicerStatsValid, f3NetFpQosShaperStatsIntervalType=f3NetFpQosShaperStatsIntervalType, f3NetFlowPointStatsFdTxFb=f3NetFlowPointStatsFdTxFb, f3AccFpQosPolicerAlgorithm=f3AccFpQosPolicerAlgorithm, f3AccFlowPointThresholdInterval=f3AccFlowPointThresholdInterval, f3NetFlowpointSecureState=f3NetFlowpointSecureState, f3MPFlowThresholdMonValue=f3MPFlowThresholdMonValue, f3NetFlowPointCpdV2PvstpPlusDispType=f3NetFlowPointCpdV2PvstpPlusDispType, f3AccFlowPointCpdV2Group=f3AccFlowPointCpdV2Group, f3NetFpQosPolicerEntry=f3NetFpQosPolicerEntry, f3NetFpQosPolicerEBS=f3NetFpQosPolicerEBS, f3MPFlowHistoryFDStaticBlock=f3MPFlowHistoryFDStaticBlock, f3NetFpQosShaperStatsAction=f3NetFpQosShaperStatsAction, f3MPFlowThresholdInterval=f3MPFlowThresholdInterval, f3AccFlowPointHistoryIBRMin=f3AccFlowPointHistoryIBRMin, f3AccFlowPointCpdV2CustomerLLDPDispType=f3AccFlowPointCpdV2CustomerLLDPDispType, f3NetFpQosPolicerStatsABR=f3NetFpQosPolicerStatsABR, f3NetFlowPointSTagVlanPriority=f3NetFlowPointSTagVlanPriority, f3NetFlowPointStatsEntry=f3NetFlowPointStatsEntry, f3NetFlowPointBcastRateLimitSpeedLo=f3NetFlowPointBcastRateLimitSpeedLo, f3AccFlowPointMcastRateLimitEnabled=f3AccFlowPointMcastRateLimitEnabled, f3AccFlowPointThresholdVariable=f3AccFlowPointThresholdVariable, f3AccFlowPointThresholdValueLo=f3AccFlowPointThresholdValueLo, f3AccFpQosPolicerHistoryFMY=f3AccFpQosPolicerHistoryFMY, f3MPFlowThresholdTable=f3MPFlowThresholdTable, f3AccFlowPointFrameFwdEnabled=f3AccFlowPointFrameFwdEnabled, f3NetFlowPointCombinedRateLimitSpeedHi=f3NetFlowPointCombinedRateLimitSpeedHi, f3AccFlowPointHistoryL2CPFD=f3AccFlowPointHistoryL2CPFD, f3NetFlowPointHistoryFdicd=f3NetFlowPointHistoryFdicd, PYSNMP_MODULE_ID=f3FpmMIB, f3NetFlowPointStatsNumLearnTableFlushes=f3NetFlowPointStatsNumLearnTableFlushes, f3AccFpQosShaperEntry=f3AccFpQosShaperEntry, f3AccFpQosPolicerIndex=f3AccFpQosPolicerIndex, f3NetFpQosPolicerAdminState=f3NetFpQosPolicerAdminState, f3AccFlowpointSecureBlockingControl=f3AccFlowpointSecureBlockingControl, f3AccFpQosPolicerHistoryAction=f3AccFpQosPolicerHistoryAction, f3AccFlowPointCpdV2UdldDispType=f3AccFlowPointCpdV2UdldDispType, f3NetFlowPointStatsTable=f3NetFlowPointStatsTable, f3AccFlowPointBcastRateLimitSpeedLo=f3AccFlowPointBcastRateLimitSpeedLo, f3AccFlowPointSTagVlanPriority=f3AccFlowPointSTagVlanPriority, f3NetFlowPointMcastRateLimitEnabled=f3NetFlowPointMcastRateLimitEnabled, f3AccFpQosPolicerCIRHi=f3AccFpQosPolicerCIRHi, f3MPFlowHistoryIndex=f3MPFlowHistoryIndex, f3AccFlowPointCpdV2Mac01DispType=f3AccFlowPointCpdV2Mac01DispType, f3NetFpQosPolicerIndex=f3NetFpQosPolicerIndex, f3NetFlowPointFrameFwdEnabled=f3NetFlowPointFrameFwdEnabled, f3FpmMIB=f3FpmMIB, f3AccFlowPointLearningConfigProtectLearningCtrl=f3AccFlowPointLearningConfigProtectLearningCtrl, f3AccFlowPointLearningConfigLearningEnabled=f3AccFlowPointLearningConfigLearningEnabled)
mibBuilder.exportSymbols("F3-FPM-MIB", f3AccFlowPointPerfGroup=f3AccFlowPointPerfGroup, f3NetFlowPointCpdV2PagpDispType=f3NetFlowPointCpdV2PagpDispType, f3NetFlowPointStatsAction=f3NetFlowPointStatsAction, f3AccFlowPointCTagVlanPriority=f3AccFlowPointCTagVlanPriority, f3NetFlowPointHistoryUAS=f3NetFlowPointHistoryUAS, f3NetFlowPointHistoryIBRRlMin=f3NetFlowPointHistoryIBRRlMin, f3NetFlowPointHistoryFMRD=f3NetFlowPointHistoryFMRD, f3MPFlowHistoryTime=f3MPFlowHistoryTime, f3AccFpQosPolicerSecondaryState=f3AccFpQosPolicerSecondaryState, f3AccFlowPointIngressUntaggedFrameEnabled=f3AccFlowPointIngressUntaggedFrameEnabled, f3NetFpQosShaperStorageType=f3NetFpQosShaperStorageType, f3NetFlowPointCpdV2CdpDispType=f3NetFlowPointCpdV2CdpDispType, f3NetFlowPointCpdV2PortAuthenDispType=f3NetFlowPointCpdV2PortAuthenDispType, f3AccFlowPointStatsBytesIn=f3AccFlowPointStatsBytesIn, f3NetFlowPointEgressOuterTagPrioMapEnabled=f3NetFlowPointEgressOuterTagPrioMapEnabled, f3NetFlowPointHistoryABRRLRx=f3NetFlowPointHistoryABRRLRx, f3AccFpQosShaperStatsAction=f3AccFpQosShaperStatsAction, f3NetFlowPointCpdV2VtpDispType=f3NetFlowPointCpdV2VtpDispType, f3NetFlowPointHistoryTime=f3NetFlowPointHistoryTime, f3NetFpQosPolicerThresholdInterval=f3NetFpQosPolicerThresholdInterval, f3AccFlowPointCpdV2Mac0EDispType=f3AccFlowPointCpdV2Mac0EDispType, f3NetFlowPointMcastRateLimitSpeedHi=f3NetFlowPointMcastRateLimitSpeedHi, f3AccFpQosShaperHistoryEntry=f3AccFpQosShaperHistoryEntry, f3NetFpQosShaperHistoryTime=f3NetFpQosShaperHistoryTime, f3MPFlowThresholdVariable=f3MPFlowThresholdVariable, f3AccFlowPointStatsFMCD=f3AccFlowPointStatsFMCD, f3NetFpQosPolicerHistoryFMG=f3NetFpQosPolicerHistoryFMG, f3NetFpQosPolicerThresholdEntry=f3NetFpQosPolicerThresholdEntry, f3NetFpQosPolicerCIRLo=f3NetFpQosPolicerCIRLo, f3NetFpQosShaperThresholdInterval=f3NetFpQosShaperThresholdInterval, f3AccFlowPointHistoryFdicd=f3AccFlowPointHistoryFdicd, f3NetFpQosShaperRowStatus=f3NetFpQosShaperRowStatus, f3AccFlowPointCpdV2NonTpmrLLDPDispType=f3AccFlowPointCpdV2NonTpmrLLDPDispType, f3NetFpQosPolicerThresholdVariable=f3NetFpQosPolicerThresholdVariable, f3AccFlowPointCpdV2Mac05DispType=f3AccFlowPointCpdV2Mac05DispType, f3NetFlowPointBcastRateLimitEnabled=f3NetFlowPointBcastRateLimitEnabled, f3AccFlowPointAutoBandwidthConfigEnabled=f3AccFlowPointAutoBandwidthConfigEnabled, f3AccFpQosPolicerThresholdValueLo=f3AccFpQosPolicerThresholdValueLo, f3FpmPerfNotifications=f3FpmPerfNotifications, f3AccFlowPointCpdV2Mac09DispType=f3AccFlowPointCpdV2Mac09DispType, f3NetFpQosPolicerSecondaryState=f3NetFpQosPolicerSecondaryState, f3AccFlowPointCpdV2Entry=f3AccFlowPointCpdV2Entry, f3NetFlowPointCpdV2Mac01DispType=f3NetFlowPointCpdV2Mac01DispType, f3NetFlowPointCpdV2EfmOamDispType=f3NetFlowPointCpdV2EfmOamDispType, f3NetFlowPointSESFramesLossThresholdRatio=f3NetFlowPointSESFramesLossThresholdRatio, f3NetFlowPointHistoryFMCD=f3NetFlowPointHistoryFMCD, f3NetFpQosShaperStatsEntry=f3NetFpQosShaperStatsEntry, f3AccFlowPointStatsNumLearnTableFlushes=f3AccFlowPointStatsNumLearnTableFlushes, f3MPFlowStatsIndex=f3MPFlowStatsIndex, f3AccFlowPointCombinedRateLimitSpeedLo=f3AccFlowPointCombinedRateLimitSpeedLo, f3AccFpQosPolicerStatsFMY=f3AccFpQosPolicerStatsFMY, f3NetFlowPointCpdV2Table=f3NetFlowPointCpdV2Table, f3NetFlowPointStatsABRRLRx=f3NetFlowPointStatsABRRLRx, f3NetFlowPointTable=f3NetFlowPointTable, f3NetFpQosShaperThresholdCrossingAlert=f3NetFpQosShaperThresholdCrossingAlert, f3AccFlowPointCpdV2CdpDispType=f3AccFlowPointCpdV2CdpDispType, f3NetFlowPointCpdV2LACPDispType=f3NetFlowPointCpdV2LACPDispType, f3AccFlowPointEntry=f3AccFlowPointEntry, f3MPFlowHistoryMacTableDiscards=f3MPFlowHistoryMacTableDiscards, f3AccFlowPointStatsFdRxFb=f3AccFlowPointStatsFdRxFb, f3AccFlowPointHistoryIBRMax=f3AccFlowPointHistoryIBRMax, f3AccFpQosPolicerGroup=f3AccFpQosPolicerGroup, f3NetFlowPointHistoryFdTxFb=f3NetFlowPointHistoryFdTxFb, f3NetFpQosShaperCBS=f3NetFpQosShaperCBS, f3NetFpQosPolicerEIRLo=f3NetFpQosPolicerEIRLo, f3NetFpQosPolicerThresholdTable=f3NetFpQosPolicerThresholdTable, f3MPFlowHistoryFDHairPin=f3MPFlowHistoryFDHairPin, f3AccFlowPointGuaranteedBWHi=f3AccFlowPointGuaranteedBWHi, f3NetFlowPointBcastRateLimitSpeedHi=f3NetFlowPointBcastRateLimitSpeedHi, f3MPFlowThresholdValueHi=f3MPFlowThresholdValueHi, f3AccFlowPointHistoryIBRRl=f3AccFlowPointHistoryIBRRl, f3AccFpQosShaperTable=f3AccFpQosShaperTable, f3AccFlowPointCpdV2Mac04DispType=f3AccFlowPointCpdV2Mac04DispType, f3NetFlowPointSTagControl=f3NetFlowPointSTagControl, f3AccFlowPointSecondaryState=f3AccFlowPointSecondaryState, f3NetFpQosShaperStatsABRRL=f3NetFpQosShaperStatsABRRL, f3AccFlowPointThresholdTable=f3AccFlowPointThresholdTable, f3FpmPerfObjects=f3FpmPerfObjects, f3AccFpQosShaperEIRLo=f3AccFpQosShaperEIRLo, f3AccFlowPointStatsIndex=f3AccFlowPointStatsIndex, f3NetFlowPointCpdV2Mac06DispType=f3NetFlowPointCpdV2Mac06DispType, f3NetFlowPointCpdV2Mac00DispType=f3NetFlowPointCpdV2Mac00DispType, f3AccFlowPointCpdV2Mac00DispType=f3AccFlowPointCpdV2Mac00DispType, f3NetFlowPointAdminState=f3NetFlowPointAdminState, f3AccFlowPointStatsAction=f3AccFlowPointStatsAction, f3AccFlowPointStatsIBRRlMax=f3AccFlowPointStatsIBRRlMax, f3NetFlowPointVlanMemberAction=f3NetFlowPointVlanMemberAction, f3AccFlowPointCombinedRateLimitSpeedHi=f3AccFlowPointCombinedRateLimitSpeedHi, f3NetFlowPointStatsL2CPFD=f3NetFlowPointStatsL2CPFD, f3AccFlowPointHistoryABRRLRx=f3AccFlowPointHistoryABRRLRx, f3NetFlowPointSTagVlanId=f3NetFlowPointSTagVlanId, f3NetFpQosPolicerStorageType=f3NetFpQosPolicerStorageType, f3NetFlowPointCpdV2Mac0ADispType=f3NetFlowPointCpdV2Mac0ADispType, f3NetFpQosShaperHistoryTable=f3NetFpQosShaperHistoryTable, f3AccFlowPointStatsValid=f3AccFlowPointStatsValid, f3AccFlowPointStatsEntry=f3AccFlowPointStatsEntry, f3NetFlowPointStatsBytesOut=f3NetFlowPointStatsBytesOut, f3NetFpQosPolicerHistoryTable=f3NetFpQosPolicerHistoryTable, f3NetFlowPointMcastRateLimitSpeedLo=f3NetFlowPointMcastRateLimitSpeedLo, f3AccFlowPointAutoCIRPercentage=f3AccFlowPointAutoCIRPercentage, f3NetFpQosPolicerHistoryFMY=f3NetFpQosPolicerHistoryFMY, f3AccFpQosShaperHistoryBREDD=f3AccFpQosShaperHistoryBREDD, f3AccFpQosPolicerStorageType=f3AccFpQosPolicerStorageType, f3MPFlowStatsValid=f3MPFlowStatsValid, f3NetFlowPointHistoryABRRx=f3NetFlowPointHistoryABRRx, f3NetFpQosPolicerThresholdMonValue=f3NetFpQosPolicerThresholdMonValue, f3AccFlowPointHistoryFdTxFb=f3AccFlowPointHistoryFdTxFb, f3NetFlowPointHistoryAction=f3NetFlowPointHistoryAction, f3AccFpQosShaperThresholdInterval=f3AccFpQosShaperThresholdInterval, f3NetFpQosShaperStatsFD=f3NetFpQosShaperStatsFD, f3AccFpQosShaperAdminState=f3AccFpQosShaperAdminState, f3NetFlowPointCpdV2Mac07DispType=f3NetFlowPointCpdV2Mac07DispType, f3AccFpQosShaperThresholdValueHi=f3AccFpQosShaperThresholdValueHi, f3NetFlowPointHistoryTable=f3NetFlowPointHistoryTable, f3AccFlowPointCpdV2Mac02DispType=f3AccFlowPointCpdV2Mac02DispType, f3NetFlowPointRowStatus=f3NetFlowPointRowStatus, f3AccFlowPointCpdV2PortAuthenDispType=f3AccFlowPointCpdV2PortAuthenDispType, f3NetFlowPointStatsBytesIn=f3NetFlowPointStatsBytesIn, f3NetFlowPointIngressVlanMemberList=f3NetFlowPointIngressVlanMemberList, f3AccFlowPointHierarchicalCOSEnabled=f3AccFlowPointHierarchicalCOSEnabled, f3NetFlowpointRefConnectGuardFlowObject=f3NetFlowpointRefConnectGuardFlowObject, f3NetFlowPointCpdV2BPDUDispType=f3NetFlowPointCpdV2BPDUDispType, f3NetFpQosShaperEBS=f3NetFpQosShaperEBS, f3AccFpQosShaperHistoryFD=f3AccFpQosShaperHistoryFD, f3AccFpQosPolicerThresholdMonValue=f3AccFpQosPolicerThresholdMonValue, f3AccFlowPointStatsIBRMax=f3AccFlowPointStatsIBRMax, f3AccFpQosPolicerCouplingFlag=f3AccFpQosPolicerCouplingFlag, f3AccFlowPointCombinedRateLimitEnabled=f3AccFlowPointCombinedRateLimitEnabled, f3MPFlowHistoryTable=f3MPFlowHistoryTable, f3NetFlowPointLearningConfigEntry=f3NetFlowPointLearningConfigEntry, f3AccFpQosPolicerStatsIndex=f3AccFpQosPolicerStatsIndex, f3NetFlowPointStatsFMY=f3NetFlowPointStatsFMY, f3NetFpQosPolicerHistoryTime=f3NetFpQosPolicerHistoryTime, f3MPFlowStatsFDHairPin=f3MPFlowStatsFDHairPin, f3NetFlowPointLearningConfigLearningEnabled=f3NetFlowPointLearningConfigLearningEnabled, f3NetFpQosShaperTable=f3NetFpQosShaperTable, f3AccFlowPointCpdV2Mac0CDispType=f3AccFlowPointCpdV2Mac0CDispType, f3NetFpQosPolicerStatsIndex=f3NetFpQosPolicerStatsIndex, f3NetFlowPointLoopAvoidance=f3NetFlowPointLoopAvoidance, f3AccFpQosShaperStatsValid=f3AccFpQosShaperStatsValid, f3NetFlowPointGuaranteedBWLo=f3NetFlowPointGuaranteedBWLo, f3NetFlowPointCpdV2Mac04DispType=f3NetFlowPointCpdV2Mac04DispType, f3AccFlowPointCpdV2LANBridgesDispType=f3AccFlowPointCpdV2LANBridgesDispType, f3AccFlowPointDefaultMemberEnabled=f3AccFlowPointDefaultMemberEnabled, f3MPFlowStatsAction=f3MPFlowStatsAction, f3MPFlowStatsEntry=f3MPFlowStatsEntry, f3FpmConfigObjects=f3FpmConfigObjects, f3NetFlowPointRefPrioMapProfile=f3NetFlowPointRefPrioMapProfile, f3MPFlowPerfGroup=f3MPFlowPerfGroup, f3NetFlowPointStatsValid=f3NetFlowPointStatsValid, f3AccFpQosPolicerThresholdTable=f3AccFpQosPolicerThresholdTable, f3AccFlowPointStatsUAS=f3AccFlowPointStatsUAS, f3NetFlowPointCpdV2Mac0FDispType=f3NetFlowPointCpdV2Mac0FDispType, f3AccFlowPointStatsSES=f3AccFlowPointStatsSES, f3AccFpQosPolicerHistoryFMG=f3AccFpQosPolicerHistoryFMG, f3AccFlowPointCpdV2NearestLLDPDispType=f3AccFlowPointCpdV2NearestLLDPDispType, f3NetFpQosShaperSecondaryState=f3NetFpQosShaperSecondaryState, f3AccFpQosShaperHistoryTime=f3AccFpQosShaperHistoryTime, f3NetFpQosPolicerHistoryBytesOut=f3NetFpQosPolicerHistoryBytesOut, f3NetFlowPointEgressInnerTagPrioMapEnabled=f3NetFlowPointEgressInnerTagPrioMapEnabled, f3NetFlowPointPerfGroup=f3NetFlowPointPerfGroup, f3AccFpQosShaperHistoryIndex=f3AccFpQosShaperHistoryIndex, f3NetFpQosShaperThresholdMonValue=f3NetFpQosShaperThresholdMonValue, f3AccFlowPointCTagControl=f3AccFlowPointCTagControl, f3NetFlowPointCpdV2ELMIDispType=f3NetFlowPointCpdV2ELMIDispType, f3NetFlowPointEntry=f3NetFlowPointEntry, f3AccFlowPointStatsFMG=f3AccFlowPointStatsFMG, f3NetFlowPointCpdV2CustomerLLDPDispType=f3NetFlowPointCpdV2CustomerLLDPDispType, f3AccFpQosShaperStatsIntervalType=f3AccFpQosShaperStatsIntervalType, f3AccFpQosShaperStorageType=f3AccFpQosShaperStorageType, f3AccFpQosShaperHistoryValid=f3AccFpQosShaperHistoryValid, f3NetFlowPointHistoryIBRMin=f3NetFlowPointHistoryIBRMin, f3NetFpQosShaperCIRLo=f3NetFpQosShaperCIRLo, f3NetFpQosPolicerHistoryValid=f3NetFpQosPolicerHistoryValid, f3AccFpQosPolicerStatsBytesOut=f3AccFpQosPolicerStatsBytesOut, f3NetFlowPointAutoBandwidthConfigEnabled=f3NetFlowPointAutoBandwidthConfigEnabled, f3NetFpQosShaperStatsValid=f3NetFpQosShaperStatsValid, f3AccFpQosShaperStatsFTD=f3AccFpQosShaperStatsFTD, f3AccFlowPointCpdV2Mac07DispType=f3AccFlowPointCpdV2Mac07DispType, f3NetFpQosPolicerHistoryABR=f3NetFpQosPolicerHistoryABR, f3AccFlowPointIngressCOS=f3AccFlowPointIngressCOS, f3NetFlowPointHistoryBytesIn=f3NetFlowPointHistoryBytesIn, f3AccFlowPointCpdV2BPDUDispType=f3AccFlowPointCpdV2BPDUDispType, f3AccFpQosShaperHistoryAction=f3AccFpQosShaperHistoryAction, f3NetFlowPointIngressCOS=f3NetFlowPointIngressCOS, f3NetFpQosPolicerStatsBytesOut=f3NetFpQosPolicerStatsBytesOut, f3AccFlowPointHistoryIBRRlMin=f3AccFlowPointHistoryIBRRlMin, f3AccFlowPointCpdV2LACPMarkerDispType=f3AccFlowPointCpdV2LACPMarkerDispType, f3NetFpQosShaperHistoryFTD=f3NetFpQosShaperHistoryFTD, f3AccFlowPointCpdV2GMRPDispType=f3AccFlowPointCpdV2GMRPDispType, f3AccFpQosShaperThresholdValueLo=f3AccFpQosShaperThresholdValueLo, f3MPFlowThresholdCrossingAlert=f3MPFlowThresholdCrossingAlert, f3AccFpQosPolicerThresholdVariable=f3AccFpQosPolicerThresholdVariable, f3MPFlowStatsIntervalType=f3MPFlowStatsIntervalType, f3AccFlowPointHistoryIBRRlMax=f3AccFlowPointHistoryIBRRlMax, f3AccFlowPointVlanMemberAction=f3AccFlowPointVlanMemberAction, f3NetFpQosPolicerStatsBytesIn=f3NetFpQosPolicerStatsBytesIn, f3NetFpQosPolicerAlgorithm=f3NetFpQosPolicerAlgorithm, f3NetFlowPointCpdV2GMRPDispType=f3NetFlowPointCpdV2GMRPDispType, f3NetFpQosShaperHistoryABRRL=f3NetFpQosShaperHistoryABRRL, f3NetFpQosShaperStatsFTD=f3NetFpQosShaperStatsFTD, f3NetFlowPointCpdV2Mac03DispType=f3NetFlowPointCpdV2Mac03DispType, f3AccFlowPointAlias=f3AccFlowPointAlias, f3AccFpQosPolicerColorMode=f3AccFpQosPolicerColorMode, f3AccFpQosPolicerCIRLo=f3AccFpQosPolicerCIRLo, f3AccFlowPointCpdV2Index=f3AccFlowPointCpdV2Index, f3AccFpQosShaperHistoryFTD=f3AccFpQosShaperHistoryFTD, f3AccFlowPointStatsFMY=f3AccFlowPointStatsFMY, f3NetFpQosShaperHistoryBTD=f3NetFpQosShaperHistoryBTD, f3NetFlowPointMaximumBWLo=f3NetFlowPointMaximumBWLo, f3NetFlowPointThresholdValueHi=f3NetFlowPointThresholdValueHi, f3AccFpQosPolicerStatsAction=f3AccFpQosPolicerStatsAction, f3AccFlowPointHistoryValid=f3AccFlowPointHistoryValid, f3AccFpQosShaperEIRHi=f3AccFpQosShaperEIRHi, f3AccFlowPointLearningConfigAction=f3AccFlowPointLearningConfigAction, f3AccFpQosPolicerThresholdIndex=f3AccFpQosPolicerThresholdIndex, f3AccFlowPointCpdV2ActiveControlProtocols=f3AccFlowPointCpdV2ActiveControlProtocols, f3AccFpQosPolicerStatsTable=f3AccFpQosPolicerStatsTable, f3NetFlowPointStatsIBRRl=f3NetFlowPointStatsIBRRl, f3NetFpQosPolicerHistoryIndex=f3NetFpQosPolicerHistoryIndex, f3AccFlowPointHistoryAction=f3AccFlowPointHistoryAction, f3NetFlowPointStatsSES=f3NetFlowPointStatsSES, f3AccFlowPointAssociatedFlowId=f3AccFlowPointAssociatedFlowId, f3NetFlowPointLearningConfigAction=f3NetFlowPointLearningConfigAction, f3AccFlowPointStatsL2CPFD=f3AccFlowPointStatsL2CPFD, f3AccFpQosShaperStatsBTD=f3AccFpQosShaperStatsBTD, f3NetFlowPointHistoryIBR=f3NetFlowPointHistoryIBR, f3AccFpQosPolicerStatsValid=f3AccFpQosPolicerStatsValid, f3NetFlowPointCpdV2LACPMarkerDispType=f3NetFlowPointCpdV2LACPMarkerDispType, f3MPFlowThresholdIndex=f3MPFlowThresholdIndex, f3NetFlowPointHistoryNumLearnTableFlushes=f3NetFlowPointHistoryNumLearnTableFlushes, f3NetFlowPointCpdV2NonTpmrLLDPDispType=f3NetFlowPointCpdV2NonTpmrLLDPDispType, f3NetFpQosShaperThresholdVariable=f3NetFpQosShaperThresholdVariable, f3AccFlowPointIndex=f3AccFlowPointIndex, f3NetFpQosPolicerHistoryBytesIn=f3NetFpQosPolicerHistoryBytesIn, f3NetFlowPointSecondaryState=f3NetFlowPointSecondaryState, f3NetFlowPointCpdV2GVRPDispType=f3NetFlowPointCpdV2GVRPDispType, f3FpmGroups=f3FpmGroups, f3AccFpQosShaperCIRLo=f3AccFpQosShaperCIRLo, f3AccFpQosPolicerEIRLo=f3AccFpQosPolicerEIRLo, f3NetFlowpointSecureBlockingControl=f3NetFlowpointSecureBlockingControl, f3AccFlowPointBcastRateLimitSpeedHi=f3AccFlowPointBcastRateLimitSpeedHi, f3NetFpQosPolicerStatsIntervalType=f3NetFpQosPolicerStatsIntervalType, f3NetFpQosPolicerHistoryFMRD=f3NetFpQosPolicerHistoryFMRD, f3NetFpQosPolicerHistoryEntry=f3NetFpQosPolicerHistoryEntry, f3AccFpQosShaperEBS=f3AccFpQosShaperEBS, f3AccFlowPointCpdV2DtpDispType=f3AccFlowPointCpdV2DtpDispType, f3NetFpQosShaperHistoryEntry=f3NetFpQosShaperHistoryEntry, f3AccFpQosPolicerHistoryBytesIn=f3AccFpQosPolicerHistoryBytesIn, f3AccFpQosShaperStatsBT=f3AccFpQosShaperStatsBT, f3NetFlowPointOperationalState=f3NetFlowPointOperationalState, f3AccFpQosShaperCIRHi=f3AccFpQosShaperCIRHi, f3AccFlowPointCpdV2GARPDispType=f3AccFlowPointCpdV2GARPDispType, f3NetFlowPointCpdV2Mac0CDispType=f3NetFlowPointCpdV2Mac0CDispType)
mibBuilder.exportSymbols("F3-FPM-MIB", f3NetFlowPointHierarchicalCOSEnabled=f3NetFlowPointHierarchicalCOSEnabled, f3NetFpQosPolicerStatsEntry=f3NetFpQosPolicerStatsEntry, f3AccFlowPointStatsABRRx=f3AccFlowPointStatsABRRx, f3NetFlowPointMaximumBWHi=f3NetFlowPointMaximumBWHi, f3AccFpQosShaperStatsBREDD=f3AccFpQosShaperStatsBREDD, f3NetFpQosShaperEntry=f3NetFpQosShaperEntry, f3NetFlowPointHistoryBytesOut=f3NetFlowPointHistoryBytesOut, f3MPFlowHistoryValid=f3MPFlowHistoryValid, f3NetFpQosShaperThresholdValueLo=f3NetFpQosShaperThresholdValueLo, f3NetFlowPointHistoryIBRRl=f3NetFlowPointHistoryIBRRl, f3AccFlowPointStatsIntervalType=f3AccFlowPointStatsIntervalType, f3NetFlowPointCpdV2LANBridgesDispType=f3NetFlowPointCpdV2LANBridgesDispType, f3AccFpQosPolicerThresholdInterval=f3AccFpQosPolicerThresholdInterval, f3AccFlowPointLoopAvoidance=f3AccFlowPointLoopAvoidance, f3NetFpQosShaperThresholdEntry=f3NetFpQosShaperThresholdEntry, f3AccFpQosShaperStatsABRRL=f3AccFpQosShaperStatsABRRL, f3AccFlowPointCpdV2Mac0FDispType=f3AccFlowPointCpdV2Mac0FDispType, f3AccFlowPointCpdV2ELMIDispType=f3AccFlowPointCpdV2ELMIDispType, f3NetFpQosShaperThresholdIndex=f3NetFpQosShaperThresholdIndex, f3NetFpQosShaperStatsBREDD=f3NetFpQosShaperStatsBREDD, f3AccFpQosPolicerStatsFMG=f3AccFpQosPolicerStatsFMG, f3NetFlowPointCpdV2ActiveControlProtocols=f3NetFlowPointCpdV2ActiveControlProtocols, f3NetFlowPointHistoryL2CPFD=f3NetFlowPointHistoryL2CPFD, f3AccFlowPointCpdV2EfmOamDispType=f3AccFlowPointCpdV2EfmOamDispType, f3FpmCompliance=f3FpmCompliance, f3NetFpQosShaperHistoryAction=f3NetFpQosShaperHistoryAction, f3NetFlowPointHistorySES=f3NetFlowPointHistorySES, f3AccFlowPointCpdV2Mac0DDispType=f3AccFlowPointCpdV2Mac0DDispType, f3AccFlowPointHistoryIBR=f3AccFlowPointHistoryIBR, f3NetFlowPointCpdV2Index=f3NetFlowPointCpdV2Index, f3AccFlowPointStatsFBCD=f3AccFlowPointStatsFBCD, f3AccFpQosShaperRowStatus=f3AccFpQosShaperRowStatus, f3AccFlowPointCpdV2PagpDispType=f3AccFlowPointCpdV2PagpDispType, f3AccFlowPointSESFramesLossThresholdRatio=f3AccFlowPointSESFramesLossThresholdRatio, f3AccFlowPointCpdV2LACPDispType=f3AccFlowPointCpdV2LACPDispType, f3NetFlowPointAlias=f3NetFlowPointAlias, f3AccFpQosPolicerEIRHi=f3AccFpQosPolicerEIRHi, f3AccFpQosPolicerRowStatus=f3AccFpQosPolicerRowStatus, f3NetFlowPointCpdV2Mac0EDispType=f3NetFlowPointCpdV2Mac0EDispType, f3AccFlowPointLearningConfigTable=f3AccFlowPointLearningConfigTable, f3AccFlowPointCpdV2PvstpPlusDispType=f3AccFlowPointCpdV2PvstpPlusDispType, f3AccFlowPointStatsFTD=f3AccFlowPointStatsFTD, f3AccFlowPointStatsABRRLRx=f3AccFlowPointStatsABRRLRx, f3NetFpQosShaperStatsTable=f3NetFpQosShaperStatsTable, f3NetFlowPointCombinedRateLimitSpeedLo=f3NetFlowPointCombinedRateLimitSpeedLo, f3AccFpQosShaperThresholdCrossingAlert=f3AccFpQosShaperThresholdCrossingAlert, f3AccFpQosShaperIndex=f3AccFpQosShaperIndex, f3AccFlowPointCpdV2IslDispType=f3AccFlowPointCpdV2IslDispType, f3MPFlowStatsFDProtLearn=f3MPFlowStatsFDProtLearn, f3NetFpQosPolicerCIRHi=f3NetFpQosPolicerCIRHi, f3AccFlowPointThresholdValueHi=f3AccFlowPointThresholdValueHi, f3NetFlowPointStatsIBRMin=f3NetFlowPointStatsIBRMin, f3MPFlowRefConnectGuardFlowObject=f3MPFlowRefConnectGuardFlowObject, f3AccFpQosShaperThresholdEntry=f3AccFpQosShaperThresholdEntry, f3AccFlowPointCpdV2Mac08DispType=f3AccFlowPointCpdV2Mac08DispType, f3AccFlowPointHistoryIndex=f3AccFlowPointHistoryIndex, f3AccFlowPointMcastRateLimitSpeedLo=f3AccFlowPointMcastRateLimitSpeedLo, f3NetFlowPointThresholdMonValue=f3NetFlowPointThresholdMonValue, f3NetFlowPointCpdV2Mac0BDispType=f3NetFlowPointCpdV2Mac0BDispType, f3NetFpQosPolicerThresholdValueLo=f3NetFpQosPolicerThresholdValueLo, f3NetFpQosPolicerPolicingEnabled=f3NetFpQosPolicerPolicingEnabled, f3MPFlowThresholdValueLo=f3MPFlowThresholdValueLo, f3AccFlowPointStatsIBRRl=f3AccFlowPointStatsIBRRl, f3AccFlowPointCpdV2PauseDispType=f3AccFlowPointCpdV2PauseDispType, f3MPFlowExtMaxFwdEntries=f3MPFlowExtMaxFwdEntries, f3NetFlowPointCTagControl=f3NetFlowPointCTagControl, f3AccFlowPointBcastRateLimitEnabled=f3AccFlowPointBcastRateLimitEnabled, f3AccFpQosShaperCOS=f3AccFpQosShaperCOS, f3AccFpQosShaperOperationalState=f3AccFpQosShaperOperationalState, f3NetFlowPointAssociatedFlowId=f3NetFlowPointAssociatedFlowId, f3AccFlowPointCpdV2UplinkFastDispType=f3AccFlowPointCpdV2UplinkFastDispType, f3AccFlowPointLearningConfigEntry=f3AccFlowPointLearningConfigEntry, f3NetFpQosShaperHistoryFD=f3NetFpQosShaperHistoryFD, f3AccFpQosShaperStatsEntry=f3AccFpQosShaperStatsEntry, f3NetFlowPointCpdV2SSMDispType=f3NetFlowPointCpdV2SSMDispType, f3NetFlowPointThresholdTable=f3NetFlowPointThresholdTable, f3AccFlowPointGroup=f3AccFlowPointGroup, f3NetFlowPointVlanMemberActionVlan=f3NetFlowPointVlanMemberActionVlan, f3NetFpQosPolicerStatsFMRD=f3NetFpQosPolicerStatsFMRD, f3AccFpQosPolicerEBS=f3AccFpQosPolicerEBS, f3NetFlowPointStatsFdicd=f3NetFlowPointStatsFdicd, f3NetFpQosPolicerEIRHi=f3NetFpQosPolicerEIRHi, f3AccFpQosPolicerStatsIntervalType=f3AccFpQosPolicerStatsIntervalType, f3AccFpQosShaperSecondaryState=f3AccFpQosShaperSecondaryState, f3NetFpQosShaperStatsIndex=f3NetFpQosShaperStatsIndex, f3NetFpQosPolicerCouplingFlag=f3NetFpQosPolicerCouplingFlag, f3NetFlowPointStatsIBRMax=f3NetFlowPointStatsIBRMax, f3AccFpQosPolicerHistoryTable=f3AccFpQosPolicerHistoryTable, f3NetFpQosShaperAdminState=f3NetFpQosShaperAdminState, f3NetFpQosShaperHistoryValid=f3NetFpQosShaperHistoryValid, f3MPFlowHistoryAction=f3MPFlowHistoryAction, f3NetFlowPointThresholdInterval=f3NetFlowPointThresholdInterval, f3NetFlowPointAutoCIRPercentage=f3NetFlowPointAutoCIRPercentage, f3NetFpQosShaperEIRHi=f3NetFpQosShaperEIRHi, f3AccFpQosShaperHistoryBTD=f3AccFpQosShaperHistoryBTD, f3NetFlowPointCpdV2UdldDispType=f3NetFlowPointCpdV2UdldDispType)
