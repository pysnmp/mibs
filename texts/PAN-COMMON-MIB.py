#
# PySNMP MIB module PAN-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/paloaltonetworks/PAN-COMMON-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:11:58 2024
# On host fv-az883-299 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
panModules, panCommonMib = mibBuilder.importSymbols("PAN-GLOBAL-REG", "panModules", "panCommonMib")
TcChassisType, = mibBuilder.importSymbols("PAN-GLOBAL-TC", "TcChassisType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Unsigned32, Bits, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, Integer32, TimeTicks, Counter64, Gauge32, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Bits", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "Integer32", "TimeTicks", "Counter64", "Gauge32", "iso", "MibIdentifier")
DisplayString, TruthValue, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TimeStamp", "TextualConvention")
panCommonMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 25461, 1, 1, 3))
panCommonMibModule.setRevisions(('2014-06-30 00:00', '2014-09-04 00:00', '2014-03-06 00:00', '2013-03-01 00:00', '2011-02-09 16:10',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: panCommonMibModule.setRevisionsDescriptions(('\n            Rev 2.3\n                        Added entries for Log Collector.', '\n            Rev 2.2\n                        Added entries for Wildfire content versions.\n                        Added entry for new platform PA 3060.', '\n\t\t\tRev 2.1\n                        Fixed a capitalization error with PanVsysEntry.', '\n\t\t\tRev 2.0\n                        Updated with panGlobalProtect and panVsysTable.', '\n\t\t\tRev 1.0\n\t\t\tInitial version of MIB module PAN-COMMON-MIB.',))
if mibBuilder.loadTexts: panCommonMibModule.setLastUpdated('201409040000Z')
if mibBuilder.loadTexts: panCommonMibModule.setOrganization('Palo Alto Networks')
if mibBuilder.loadTexts: panCommonMibModule.setContactInfo('\n\t\t\t\t\tCustomer Support\n\t\t\t\t\tPalo Alto Networks\n\t\t\t\t\t4401 Great America Pkwy\n\t\t\t\t\tSanta Clara, CA 95054-1211\n\n\t\t\t\t\t+1 866-898-9087\n\t\t\t\t\tsupport at paloaltonetworks dot com')
if mibBuilder.loadTexts: panCommonMibModule.setDescription("\n\t\t\tA MIB module containing definitions of managed objects\n\t\t\timplemented by all Palo Alto Networks' products.")
class FloatValue(TextualConvention, OctetString):
    description = ' This data type is used to represent Float values.'
    status = 'current'
    displayHint = 'd-2'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

panCommonConfMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 1))
if mibBuilder.loadTexts: panCommonConfMib.setStatus('current')
if mibBuilder.loadTexts: panCommonConfMib.setDescription('\n\t\t\tSub-tree for MIB conformance statements.')
panCommonObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2))
if mibBuilder.loadTexts: panCommonObjs.setStatus('current')
if mibBuilder.loadTexts: panCommonObjs.setDescription('\n\t\t\tSub-tree for common MIB objects.')
panCommonEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 3))
if mibBuilder.loadTexts: panCommonEvents.setStatus('current')
if mibBuilder.loadTexts: panCommonEvents.setDescription('\n\t\t\tSub-tree for common MIB events.')
panSys = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1))
if mibBuilder.loadTexts: panSys.setStatus('current')
if mibBuilder.loadTexts: panSys.setDescription('\n\t\t\tSub-tree for common system objects.')
panChassis = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 2))
if mibBuilder.loadTexts: panChassis.setStatus('current')
if mibBuilder.loadTexts: panChassis.setDescription('\n\t\t\tSub-tree for common chassis information.')
panSession = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3))
if mibBuilder.loadTexts: panSession.setStatus('current')
if mibBuilder.loadTexts: panSession.setDescription('\n\t\t\tSub-tree for common session information.')
panMgmt = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 4))
if mibBuilder.loadTexts: panMgmt.setStatus('current')
if mibBuilder.loadTexts: panMgmt.setDescription('\n\t\t\tSub-tree for common Management plane information.')
panGlobalProtect = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 5))
if mibBuilder.loadTexts: panGlobalProtect.setStatus('current')
if mibBuilder.loadTexts: panGlobalProtect.setDescription('\n\t\t\tSub-tree for common GlobalProtect information.')
panLogCollector = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6))
if mibBuilder.loadTexts: panLogCollector.setStatus('current')
if mibBuilder.loadTexts: panLogCollector.setDescription('\n\t\t\tSub-tree for common Log Collector information.')
panDeviceLogging = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7))
if mibBuilder.loadTexts: panDeviceLogging.setStatus('current')
if mibBuilder.loadTexts: panDeviceLogging.setDescription('\n            Sub-tree for common Device information.')
panSSLBroker = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 8))
if mibBuilder.loadTexts: panSSLBroker.setStatus('current')
if mibBuilder.loadTexts: panSSLBroker.setDescription('\n            Sub-tree to capture ssl broker statistics.')
panGlobalCounters = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19))
if mibBuilder.loadTexts: panGlobalCounters.setStatus('current')
if mibBuilder.loadTexts: panGlobalCounters.setDescription('\n            Sub-tree for common Global counters.')
panSysSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysSwVersion.setStatus('current')
if mibBuilder.loadTexts: panSysSwVersion.setDescription('Full software version. The first two components of the full\n\t\t\tversion are the major and minor versions. The third component\n\t\t\tindicates the maintenance release number and the fourth,\n\t\t\tthe build number.')
panSysHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysHwVersion.setStatus('current')
if mibBuilder.loadTexts: panSysHwVersion.setDescription('Hardware version of the unit.')
panSysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysSerialNumber.setStatus('current')
if mibBuilder.loadTexts: panSysSerialNumber.setDescription('The serial number of the unit. If not available,\n\t\t\tan empty string is returned.')
panSysTimeZoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysTimeZoneOffset.setStatus('current')
if mibBuilder.loadTexts: panSysTimeZoneOffset.setDescription("The offset in seconds from UTC of the system's time zone.\n\t\t\tValues are negative for locations west of UTC and positive\n\t\t\tfor locations east of UTC.")
panSysDaylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysDaylightSaving.setStatus('current')
if mibBuilder.loadTexts: panSysDaylightSaving.setDescription("Whether daylight savings are in currently in effect for the\n\t\t\tsystem's time zone.")
panSysVpnClientVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysVpnClientVersion.setStatus('current')
if mibBuilder.loadTexts: panSysVpnClientVersion.setDescription('Currently installed VPN client package version.  If\n\t\t\tpackage is not installed, 0.0.0 is returned.')
panSysAppVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysAppVersion.setStatus('current')
if mibBuilder.loadTexts: panSysAppVersion.setDescription('Currently installed application definition version.  If \n\t\t\tno application definition is found, 0 is returned.')
panSysAvVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysAvVersion.setStatus('current')
if mibBuilder.loadTexts: panSysAvVersion.setDescription('Currently installed antivirus version.  If no antivirus \n\t\t\tis found, 0 is returned.')
panSysThreatVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysThreatVersion.setStatus('current')
if mibBuilder.loadTexts: panSysThreatVersion.setDescription('Currently installed threat definition version.  If no\n\t\t\tthreat definition is found, 0 is returned.')
panSysUrlFilteringVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysUrlFilteringVersion.setStatus('current')
if mibBuilder.loadTexts: panSysUrlFilteringVersion.setDescription('Currently installed URL filtering version.  If no URL\n\t\t\tfiltering is installed, 0 is returned.')
panSysHAState = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysHAState.setStatus('current')
if mibBuilder.loadTexts: panSysHAState.setDescription('Current high-availability state.')
panSysHAPeerState = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysHAPeerState.setStatus('current')
if mibBuilder.loadTexts: panSysHAPeerState.setDescription('Current peer high-availability state.')
panSysHAMode = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysHAMode.setStatus('current')
if mibBuilder.loadTexts: panSysHAMode.setDescription('Current high-availability mode (disabled, \n\t\t\tactive-passive, or active-active).')
panSysUrlFilteringDatabase = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysUrlFilteringDatabase.setStatus('current')
if mibBuilder.loadTexts: panSysUrlFilteringDatabase.setDescription('Current installed URL filtering database\n\t\t\t(surfcontrol, brightcloud, etc)')
panSysGlobalProtectClientVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysGlobalProtectClientVersion.setStatus('current')
if mibBuilder.loadTexts: panSysGlobalProtectClientVersion.setDescription('Currently installed global-protect client package version. \n\t\t\tIf package is not installed, 0.0.0 is returned.')
panSysOpswatDatafileVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysOpswatDatafileVersion.setStatus('current')
if mibBuilder.loadTexts: panSysOpswatDatafileVersion.setDescription('Currently installed opswat database version. \n\t\t\tIf package is not installed, 0 is returned.')
panSysWildfireVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysWildfireVersion.setStatus('current')
if mibBuilder.loadTexts: panSysWildfireVersion.setDescription('Currently installed wildfire content version.  If no wildfire content \n                         is found, 0 is returned.')
panSysWildfirePrivateCloudVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysWildfirePrivateCloudVersion.setStatus('current')
if mibBuilder.loadTexts: panSysWildfirePrivateCloudVersion.setDescription('Currently installed wildfire private cloud content version.  If no wpc\n                        is found, 0 is returned.')
panSysAppReleaseDate = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysAppReleaseDate.setStatus('current')
if mibBuilder.loadTexts: panSysAppReleaseDate.setDescription('Currently installed application definition release date.  If \n                        no release date is found, unknown is returned.')
panSysThreatReleaseDate = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysThreatReleaseDate.setStatus('current')
if mibBuilder.loadTexts: panSysThreatReleaseDate.setDescription('Currently installed threat release date.  If\n                        no release date is found, unknown is returned.')
panSysAvReleaseDate = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysAvReleaseDate.setStatus('current')
if mibBuilder.loadTexts: panSysAvReleaseDate.setDescription('Currently installed antivirus release date.  If\n                        no release date is found, unknown is returned.')
panSysWfReleaseDate = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysWfReleaseDate.setStatus('current')
if mibBuilder.loadTexts: panSysWfReleaseDate.setDescription('Currently installed WildFire release date.  If\n                        no release date is found, unknown is returned.')
panChassisType = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panChassisType.setStatus('current')
if mibBuilder.loadTexts: panChassisType.setDescription('Chassis type for this Palo Alto device.')
panMSeriesMode = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panMSeriesMode.setStatus('current')
if mibBuilder.loadTexts: panMSeriesMode.setDescription('Series Mode for this Palo Alto device.')
panSessionUtilization = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionUtilization.setStatus('current')
if mibBuilder.loadTexts: panSessionUtilization.setDescription('Session table utilization percentage. Values should\n\t\t\tbe between 0 and 100.')
panSessionMax = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionMax.setStatus('current')
if mibBuilder.loadTexts: panSessionMax.setDescription('Total number of sessions supported.')
panSessionActive = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionActive.setStatus('current')
if mibBuilder.loadTexts: panSessionActive.setDescription('Total number of active sessions.')
panSessionActiveTcp = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionActiveTcp.setStatus('current')
if mibBuilder.loadTexts: panSessionActiveTcp.setDescription('Total number of active TCP sessions.')
panSessionActiveUdp = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionActiveUdp.setStatus('current')
if mibBuilder.loadTexts: panSessionActiveUdp.setDescription('Total number of active UDP sessions.')
panSessionActiveICMP = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionActiveICMP.setStatus('current')
if mibBuilder.loadTexts: panSessionActiveICMP.setDescription('Total number of active ICMP sessions.')
panSessionActiveSslProxy = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionActiveSslProxy.setStatus('current')
if mibBuilder.loadTexts: panSessionActiveSslProxy.setDescription('Total number of active SSL proxy sessions.')
panSessionSslProxyUtilization = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionSslProxyUtilization.setStatus('current')
if mibBuilder.loadTexts: panSessionSslProxyUtilization.setDescription('SSL proxy Session utilization percentage. Values should\n\t\t\tbe between 0 and 100.')
panVsysTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9), )
if mibBuilder.loadTexts: panVsysTable.setStatus('current')
if mibBuilder.loadTexts: panVsysTable.setDescription('VSYS table')
panZoneTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 10), )
if mibBuilder.loadTexts: panZoneTable.setStatus('current')
if mibBuilder.loadTexts: panZoneTable.setDescription('    \n            Sub-tree for the current active connectionsPerSecond (CPS) values\n            for each zone present.')
panIfTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 11), )
if mibBuilder.loadTexts: panIfTable.setStatus('current')
if mibBuilder.loadTexts: panIfTable.setDescription('    \n            Sub-tree for the current active connectionsPerSecond (CPS) values\n            for each interface present.')
panVsysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "panVsysId"))
if mibBuilder.loadTexts: panVsysEntry.setStatus('current')
if mibBuilder.loadTexts: panVsysEntry.setDescription("Entries are created when the Vsys's are added to the\n            entVsysTable.")
panVsysId = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panVsysId.setStatus('current')
if mibBuilder.loadTexts: panVsysId.setDescription('Vsys id')
panVsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panVsysName.setStatus('current')
if mibBuilder.loadTexts: panVsysName.setDescription('User assigned vsys name (empty string if not available)')
panVsysSessionUtilizationPct = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panVsysSessionUtilizationPct.setStatus('current')
if mibBuilder.loadTexts: panVsysSessionUtilizationPct.setDescription("Vsys utilization percentage, if session limit is configured.\n            If session limit is not configured, this value is '0'")
panVsysActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panVsysActiveSessions.setStatus('current')
if mibBuilder.loadTexts: panVsysActiveSessions.setDescription('Active sessions on this Vsys')
panVsysMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panVsysMaxSessions.setStatus('current')
if mibBuilder.loadTexts: panVsysMaxSessions.setDescription("Max sessions on this Vsys, if session limit is configured.\n            If session limit is not configured, this value is '0'")
panVsysActiveTcpCps = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panVsysActiveTcpCps.setStatus('current')
if mibBuilder.loadTexts: panVsysActiveTcpCps.setDescription('Number of active Tcp Connections per second for thie vSys.')
panVsysActiveUdpCps = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panVsysActiveUdpCps.setStatus('current')
if mibBuilder.loadTexts: panVsysActiveUdpCps.setDescription('Number of active Udp Connections per second for thie vSys.')
panVsysActiveOtherIpCps = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panVsysActiveOtherIpCps.setStatus('current')
if mibBuilder.loadTexts: panVsysActiveOtherIpCps.setDescription('Number of active Other IP Connections per second for thie vSys.')
panMgmtPanoramaConnected = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panMgmtPanoramaConnected.setStatus('current')
if mibBuilder.loadTexts: panMgmtPanoramaConnected.setDescription('Current Connection status to Panorama Server (connected, not-connected)')
panMgmtPanorama2Connected = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panMgmtPanorama2Connected.setStatus('current')
if mibBuilder.loadTexts: panMgmtPanorama2Connected.setDescription('Current Connection status to Panorama2 Server (connected, not-connected)')
panGPGatewayUtilization = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 5, 1))
if mibBuilder.loadTexts: panGPGatewayUtilization.setStatus('current')
if mibBuilder.loadTexts: panGPGatewayUtilization.setDescription('GlobalProtect gateway utilization')
panGPGWUtilizationPct = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panGPGWUtilizationPct.setStatus('current')
if mibBuilder.loadTexts: panGPGWUtilizationPct.setDescription('GlobalProtect Gateway utilization percentage')
panGPGWUtilizationMaxTunnels = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panGPGWUtilizationMaxTunnels.setStatus('current')
if mibBuilder.loadTexts: panGPGWUtilizationMaxTunnels.setDescription('Max tunnels allowed')
panGPGWUtilizationActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panGPGWUtilizationActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: panGPGWUtilizationActiveTunnels.setDescription('Number of active tunnels')
panDeviceLoggingLogRate = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 1))
if mibBuilder.loadTexts: panDeviceLoggingLogRate.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingLogRate.setDescription('\n            Sub-tree for Device Logging Rate statistics.')
panDeviceLoggingLogTypeStatTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 2), )
if mibBuilder.loadTexts: panDeviceLoggingLogTypeStatTable.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingLogTypeStatTable.setDescription('\n            Sub-tree for the statistics for different log types on the Device.')
panDeviceLoggingLogUsageTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 3), )
if mibBuilder.loadTexts: panDeviceLoggingLogUsageTable.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingLogUsageTable.setDescription('\n            Sub-tree for Log Usage and days retained for different log types on the Device.\n            Log Disk Usage is avaiable as MB (in use).')
panDeviceLoggingExtFwd = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 4))
if mibBuilder.loadTexts: panDeviceLoggingExtFwd.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingExtFwd.setDescription('\n            Sub-tree for tracking dropped logs as ther are forwarded from device.')
panDeviceLoggingCollectorConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 5), )
if mibBuilder.loadTexts: panDeviceLoggingCollectorConnectionTable.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingCollectorConnectionTable.setDescription('\n            Sub-tree for tracking various log collection entities connected to  device.')
panSSLBrokerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 8, 1), )
if mibBuilder.loadTexts: panSSLBrokerStatsTable.setStatus('current')
if mibBuilder.loadTexts: panSSLBrokerStatsTable.setDescription('Sub-tree for capturing ssl broker statistics and status.')
panSSLBrokerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 8, 1, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "index"))
if mibBuilder.loadTexts: panSSLBrokerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: panSSLBrokerStatsEntry.setDescription('Entry of ssl broker statistics and status.')
index = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: index.setStatus('current')
if mibBuilder.loadTexts: index.setDescription('Index of the ssl broker stats entry')
chainName = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chainName.setStatus('current')
if mibBuilder.loadTexts: chainName.setDescription('Name of ssl broker chain object')
avgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgLatency.setStatus('current')
if mibBuilder.loadTexts: avgLatency.setDescription('Average latency value')
sessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCount.setStatus('current')
if mibBuilder.loadTexts: sessionCount.setDescription('Number of active sessions')
panDeviceIncomingLogRate = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceIncomingLogRate.setStatus('current')
if mibBuilder.loadTexts: panDeviceIncomingLogRate.setDescription('The incoming rate in logs/s on the Device.')
panDeviceWriteLogRate = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceWriteLogRate.setStatus('current')
if mibBuilder.loadTexts: panDeviceWriteLogRate.setDescription('The write rate in logs/s on the Device.')
panDeviceLoggingLogTypeStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 2, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "panDeviceLoggingDevice"), (0, "PAN-COMMON-MIB", "panDeviceLoggingLogType"))
if mibBuilder.loadTexts: panDeviceLoggingLogTypeStatEntry.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingLogTypeStatEntry.setDescription('Entries are created when the panLcLogUsage are added to the panLcLogUsageTable.')
panDeviceLoggingDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingDevice.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingDevice.setDescription('Device Information (Name or Serial Number).')
panDeviceLoggingDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingDeviceIndex.setDescription('Index as mentioned in panDeviceLoggingCollectorConnection table.')
panDeviceLoggingLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingLogType.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingLogType.setDescription('Type of log.')
panDeviceLoggingLogLastLogCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingLogLastLogCreated.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingLogLastLogCreated.setDescription('Time of the last log creation.')
panDeviceLoggingLogLastLogFwded = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingLogLastLogFwded.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingLogLastLogFwded.setDescription('Time at which last log was forwarded.')
panDeviceLoggingLogLastSeqNumberFwded = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingLogLastSeqNumberFwded.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingLogLastSeqNumberFwded.setDescription('Sequence number of the last log that was forwarded.')
panDeviceLoggingLogLastSeqNumberAck = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingLogLastSeqNumberAck.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingLogLastSeqNumberAck.setDescription('Sequence number of the last log that was acknowledged.')
panDeviceLoggingLogTotalLogsFwded = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingLogTotalLogsFwded.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingLogTotalLogsFwded.setDescription('Total number of logs forwarded.')
panDeviceLoggingLogUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 3, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "panDeviceLoggingLogUsageLogType"))
if mibBuilder.loadTexts: panDeviceLoggingLogUsageEntry.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingLogUsageEntry.setDescription('Entries are created when the panDeviceLoggingLogUsage are added to the panDeviceLoggingLogUsageTable.')
panDeviceLoggingLogUsageLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingLogUsageLogType.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingLogUsageLogType.setDescription('Log type for Device. ')
panDeviceLoggingDiskUsageDiskSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingDiskUsageDiskSpace.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingDiskUsageDiskSpace.setDescription('Disk Usage (MB) for particular log type for Device. ')
panDeviceLoggingDiskUsageRetention = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingDiskUsageRetention.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingDiskUsageRetention.setDescription('Log Rentention for particular log type for Device. ')
panDeviceLoggingDiskQuotaPct = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingDiskQuotaPct.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingDiskQuotaPct.setDescription('Disk Quota percentage for particular log type for Device. ')
panDeviceLoggingDiskQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingDiskQuota.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingDiskQuota.setDescription('Disk Quota for particular log type for Device. ')
panDeviceLoggingExtFwdCount = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingExtFwdCount.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingExtFwdCount.setDescription('Total count for logs forwarded.')
panDeviceLoggingExtFwdQueueDrop = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingExtFwdQueueDrop.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingExtFwdQueueDrop.setDescription('Counter for logs dropped due to queue being full.')
panDeviceLoggingExtFwdStatsSendErr = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsSendErr.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsSendErr.setDescription('Counter for logs discarded due to sending error.')
panDeviceLoggingExtFwdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 4, 4), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsTable.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsTable.setDescription('This table shows the status of logs as they are forwarded via syslog, Traps, email and\n             http/https from this Device.')
panDeviceLoggingExtFwdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 4, 4, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "panDeviceLoggingExtFwdStatsTableType"))
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsEntry.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsEntry.setDescription('Entries are created when panDeviceLoggingExtFwdStats are added to panDeviceLoggingExtFwdStatsTable.')
panDeviceLoggingExtFwdStatsTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 4, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsTableType.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsTableType.setDescription('Name of method used to forward logs.')
panDeviceLoggingExtFwdStatsTableEnqueueCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 4, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsTableEnqueueCount.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsTableEnqueueCount.setDescription('Counter for number of logs enqueued.')
panDeviceLoggingExtFwdStatsTableSendCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 4, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsTableSendCount.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsTableSendCount.setDescription('Counter for number of logs sent.')
panDeviceLoggingExtFwdStatsTableDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 4, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsTableDropCount.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsTableDropCount.setDescription('Counter for number of logs dropped.')
panDeviceLoggingExtFwdStatsTableQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 4, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsTableQueueDepth.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsTableQueueDepth.setDescription('Counter for depth of queue.')
panDeviceLoggingExtFwdStatsTable1minAvgSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 4, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsTable1minAvgSendRate.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingExtFwdStatsTable1minAvgSendRate.setDescription('Counter for average send rate over 1 minute interval.')
panDeviceLoggingCollectorConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 5, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "panDeviceLoggingCollectorConnectionIP"))
if mibBuilder.loadTexts: panDeviceLoggingCollectorConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingCollectorConnectionEntry.setDescription('Entries are created when the panDeviceLogging are added to the panDeviceLoggingCollectorConnectionTable.')
panDeviceLoggingCollectorConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingCollectorConnectionType.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingCollectorConnectionType.setDescription('Type of log collection entity (CMS/LC).')
panDeviceLoggingCollectorConnectionIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingCollectorConnectionIP.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingCollectorConnectionIP.setDescription('IP of log collection entity (CMS/LC) for non-7K and Gryphon.\n             Will display connection ID for 7K and Gryphon.')
panDeviceLoggingCollectorConnectionHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingCollectorConnectionHostname.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingCollectorConnectionHostname.setDescription('Hostname of log collection entity (CMS/LC).')
panDeviceLoggingCollectorConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 7, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDeviceLoggingCollectorConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: panDeviceLoggingCollectorConnectionStatus.setDescription('Connection status of log collection entity (CMS/LC).')
panLcStat = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1))
if mibBuilder.loadTexts: panLcStat.setStatus('current')
if mibBuilder.loadTexts: panLcStat.setDescription('\n            Sub-tree for the Log collection statistics.')
panLcLogRate = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogRate.setStatus('current')
if mibBuilder.loadTexts: panLcLogRate.setDescription('The write rate in logs/s on the Log Collection')
panLcLogDuration = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2))
if mibBuilder.loadTexts: panLcLogDuration.setStatus('deprecated')
if mibBuilder.loadTexts: panLcLogDuration.setDescription('\n            Sub-tree for the Log Duration on the Log Collector. Log\n            Duration is Expressed in Days of storage.')
panLcDiskUsageTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 3), )
if mibBuilder.loadTexts: panLcDiskUsageTable.setStatus('deprecated')
if mibBuilder.loadTexts: panLcDiskUsageTable.setDescription('\n            Sub-tree for the Log Disk Usage on the Log Collector. Log\n            Disk Usage is available as MB in use.')
panLcLogUsageTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 4), )
if mibBuilder.loadTexts: panLcLogUsageTable.setStatus('current')
if mibBuilder.loadTexts: panLcLogUsageTable.setDescription('\n            Sub-tree for the Log Usage and data retention on the Log Collector(non localDB). \n            Log Disk Usage is available as MB in use.')
panLocalLogUsageTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 5), )
if mibBuilder.loadTexts: panLocalLogUsageTable.setStatus('current')
if mibBuilder.loadTexts: panLocalLogUsageTable.setDescription('\n            Sub-tree for the Log Usage and data retention on the Log Collector(localDB). \n            Log Disk Usage is available as MB in use.')
panLcDiskIOPSTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 6), )
if mibBuilder.loadTexts: panLcDiskIOPSTable.setStatus('current')
if mibBuilder.loadTexts: panLcDiskIOPSTable.setDescription('\n            Sub-tree for Log Disk I/O throughput on the Log Collector and Panorama.')
panLcLogDurationTraffic = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationTraffic.setStatus('deprecated')
if mibBuilder.loadTexts: panLcLogDurationTraffic.setDescription('The Log duration (in days) for the traffic logs on the Log Collector')
panLcLogDurationConfig = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationConfig.setStatus('deprecated')
if mibBuilder.loadTexts: panLcLogDurationConfig.setDescription('The Log duration (in days) for the config logs on the Log Collector')
panLcLogDurationSystem = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationSystem.setStatus('deprecated')
if mibBuilder.loadTexts: panLcLogDurationSystem.setDescription('The Log duration (in days) for the system logs on the Log Collector')
panLcLogDurationThreat = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationThreat.setStatus('deprecated')
if mibBuilder.loadTexts: panLcLogDurationThreat.setDescription('The Log duration (in days) for the threat logs on the Log Collector')
panLcLogDurationAppstat = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationAppstat.setStatus('deprecated')
if mibBuilder.loadTexts: panLcLogDurationAppstat.setDescription('The Log duration (in days) for the appstat logs on the Log Collector')
panLcLogDurationTrsum = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationTrsum.setStatus('deprecated')
if mibBuilder.loadTexts: panLcLogDurationTrsum.setDescription('The Log duration (in days) for the trsum logs on the Log Collector')
panLcLogDurationThsum = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationThsum.setStatus('deprecated')
if mibBuilder.loadTexts: panLcLogDurationThsum.setDescription('The Log duration (in days) for the thsum logs on the Log Collector')
panLcLogDurationEvent = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationEvent.setStatus('deprecated')
if mibBuilder.loadTexts: panLcLogDurationEvent.setDescription('The Log duration (in days) for the event logs on the Log Collector')
panLcLogDurationAlarm = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationAlarm.setStatus('deprecated')
if mibBuilder.loadTexts: panLcLogDurationAlarm.setDescription('The Log duration (in days) for the alarm logs on the Log Collector')
panLcLogDurationHipmatch = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationHipmatch.setStatus('deprecated')
if mibBuilder.loadTexts: panLcLogDurationHipmatch.setDescription('The Log duration (in days) for the hipmatch logs on the Log Collector')
panLcLogDurationUserid = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationUserid.setStatus('deprecated')
if mibBuilder.loadTexts: panLcLogDurationUserid.setDescription('The Log duration (in days) for the userid logs on the Log Collector')
panLcDiskUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 3, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "panLcDiskUsageId"))
if mibBuilder.loadTexts: panLcDiskUsageEntry.setStatus('deprecated')
if mibBuilder.loadTexts: panLcDiskUsageEntry.setDescription('Entries are created when the panLcDiskUsage are added to the\n            panLcDiskUsageTable.')
panLocalLogUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 5, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "panLcLogType"))
if mibBuilder.loadTexts: panLocalLogUsageEntry.setStatus('current')
if mibBuilder.loadTexts: panLocalLogUsageEntry.setDescription('Entries are created when the panLocalLogUsage are added to the panLocalLogUsageTable.')
panLocalLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLocalLogType.setStatus('current')
if mibBuilder.loadTexts: panLocalLogType.setDescription('Log type for Log Collector. ')
panLocalDiskUsageDiskSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLocalDiskUsageDiskSpace.setStatus('current')
if mibBuilder.loadTexts: panLocalDiskUsageDiskSpace.setDescription('Disk Usage (in MB) for particular log type for Log Collector. ')
panLocalDiskUsageRetention = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLocalDiskUsageRetention.setStatus('current')
if mibBuilder.loadTexts: panLocalDiskUsageRetention.setDescription('Log Rentention for particular log type for Log Collector. ')
panLocalDiskQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLocalDiskQuota.setStatus('current')
if mibBuilder.loadTexts: panLocalDiskQuota.setDescription('Disk Quota (in MB) for particular log type for Log Collector. ')
panLocalDiskQuotaPct = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLocalDiskQuotaPct.setStatus('current')
if mibBuilder.loadTexts: panLocalDiskQuotaPct.setDescription('Disk Quota Percentage for particular log type for Log Collector. ')
panLcDiskIOPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 6, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "panLcDiskIOPSId"))
if mibBuilder.loadTexts: panLcDiskIOPSEntry.setStatus('current')
if mibBuilder.loadTexts: panLcDiskIOPSEntry.setDescription('Entries are created when panLcDiskIOPSEntry are added to the panLcDiskIOPSTable.')
panLcDiskIOPSId = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcDiskIOPSId.setStatus('current')
if mibBuilder.loadTexts: panLcDiskIOPSId.setDescription('Disk number for Log Collector or Panorama. ')
panLcDiskIORead5min = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcDiskIORead5min.setStatus('current')
if mibBuilder.loadTexts: panLcDiskIORead5min.setDescription('Disk read rate over a span of 5 minute interval.')
panLcDiskIOWrite5min = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcDiskIOWrite5min.setStatus('current')
if mibBuilder.loadTexts: panLcDiskIOWrite5min.setDescription('Disk write rate over a span of 5 minute interval.')
panLcLogUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 4, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "panLcLogType"))
if mibBuilder.loadTexts: panLcLogUsageEntry.setStatus('current')
if mibBuilder.loadTexts: panLcLogUsageEntry.setDescription('Entries are created when the panLcLogUsage are added to the panLcLogUsageTable.')
panLcLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogType.setStatus('current')
if mibBuilder.loadTexts: panLcLogType.setDescription('Log type for Log Collector. ')
panLcDiskUsageDiskSpacePct = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcDiskUsageDiskSpacePct.setStatus('current')
if mibBuilder.loadTexts: panLcDiskUsageDiskSpacePct.setDescription('Disk Usage Percentage for particular log type for Log Collector\n             aggregated over all disks. ')
panLcDiskUsageRetention = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcDiskUsageRetention.setStatus('current')
if mibBuilder.loadTexts: panLcDiskUsageRetention.setDescription('Log Rentention for particular log type for Log Collector. ')
panLcDiskQuotaPct = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcDiskQuotaPct.setStatus('current')
if mibBuilder.loadTexts: panLcDiskQuotaPct.setDescription('Disk Quota Percentage for particular log type for Log Collector\n             aggregated over all disks. ')
panLcDiskUsageId = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcDiskUsageId.setStatus('deprecated')
if mibBuilder.loadTexts: panLcDiskUsageId.setDescription('The Log disk id')
panLcDiskUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcDiskUsage.setStatus('deprecated')
if mibBuilder.loadTexts: panLcDiskUsage.setDescription('The Log disk usage on the Log Collector')
panLcIsRedundancyMember = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcIsRedundancyMember.setStatus('current')
if mibBuilder.loadTexts: panLcIsRedundancyMember.setDescription('True value indicates this Log Collector is part of a Collector Group with Redundancy is enabled')
panLcLogFwdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 3), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogFwdStatsTable.setStatus('current')
if mibBuilder.loadTexts: panLcLogFwdStatsTable.setDescription('This table shows the status of logs as they are forwarded via syslog, Traps, email and \n             http/https from this Log Collector.')
panLcLogFwdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 3, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "panLcLogFwdStatsTableType"))
if mibBuilder.loadTexts: panLcLogFwdStatsEntry.setStatus('current')
if mibBuilder.loadTexts: panLcLogFwdStatsEntry.setDescription('Entries are created when panLcLogFwdStats are added to panLcLogFwdStatsTable.')
panLcLogFwdStatsTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogFwdStatsTableType.setStatus('current')
if mibBuilder.loadTexts: panLcLogFwdStatsTableType.setDescription('Name of method used to forward logs.')
panLcLogFwdStatsTableEnqueueCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogFwdStatsTableEnqueueCount.setStatus('current')
if mibBuilder.loadTexts: panLcLogFwdStatsTableEnqueueCount.setDescription('Counter for number of logs enqueued.')
panLcLogFwdStatsTableSendCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogFwdStatsTableSendCount.setStatus('current')
if mibBuilder.loadTexts: panLcLogFwdStatsTableSendCount.setDescription('Counter for number of logs sent.')
panLcLogFwdStatsTableDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogFwdStatsTableDropCount.setStatus('current')
if mibBuilder.loadTexts: panLcLogFwdStatsTableDropCount.setDescription('Counter for number of logs dropped.')
panLcLogFwdStatsTableQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogFwdStatsTableQueueDepth.setStatus('current')
if mibBuilder.loadTexts: panLcLogFwdStatsTableQueueDepth.setDescription('Counter for depth of queue.')
panLcLoggingConnectedDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 4), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLoggingConnectedDeviceTable.setStatus('current')
if mibBuilder.loadTexts: panLcLoggingConnectedDeviceTable.setDescription('This table shows the details of all devices logging to this Log Collector.')
panLcLoggingConnectedDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 4, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "panLcLoggingConnectedDeviceConnectionId"))
if mibBuilder.loadTexts: panLcLoggingConnectedDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: panLcLoggingConnectedDeviceEntry.setDescription('Entries are created when panLcLoggingConnectedDevice are added to panLcLoggingConnectedDeviceTable.')
panLcLoggingConnectedDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLoggingConnectedDeviceName.setStatus('current')
if mibBuilder.loadTexts: panLcLoggingConnectedDeviceName.setDescription('Name of the device being polled.')
panLcLoggingConnectedDeviceConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLoggingConnectedDeviceConnectionId.setStatus('current')
if mibBuilder.loadTexts: panLcLoggingConnectedDeviceConnectionId.setDescription('Connection id of the device being polled.')
panLcLoggingConnectedIdLogRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLoggingConnectedIdLogRate.setStatus('current')
if mibBuilder.loadTexts: panLcLoggingConnectedIdLogRate.setDescription('Logging rate for the connection.')
panLcLoggingDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 5), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLoggingDeviceTable.setStatus('current')
if mibBuilder.loadTexts: panLcLoggingDeviceTable.setDescription('This table shows the details of logs forwarded by devices logging to this Log Collector.')
panLcLoggingDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 5, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "panLcLoggingDeviceConnectionId"), (0, "PAN-COMMON-MIB", "panLcLoggingLogType"))
if mibBuilder.loadTexts: panLcLoggingDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: panLcLoggingDeviceEntry.setDescription('Entries are created when panLcLoggingDevice are added to panLcLoggingDeviceTable.')
panLcLoggingDeviceConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLoggingDeviceConnectionId.setStatus('current')
if mibBuilder.loadTexts: panLcLoggingDeviceConnectionId.setDescription('Connection id of the device being polled.')
panLcLoggingLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLoggingLogType.setStatus('current')
if mibBuilder.loadTexts: panLcLoggingLogType.setDescription('Log Type of the log being polled.')
panLcLogTypeLastLogRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 5, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogTypeLastLogRecd.setStatus('current')
if mibBuilder.loadTexts: panLcLogTypeLastLogRecd.setDescription('Time at which the last log was received.')
panLcLogTypeLastSeqNumRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogTypeLastSeqNumRecd.setStatus('current')
if mibBuilder.loadTexts: panLcLogTypeLastSeqNumRecd.setDescription('Last sequence number received for a type of log.')
panLcLogTypeLastLogGen = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 5, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogTypeLastLogGen.setStatus('current')
if mibBuilder.loadTexts: panLcLogTypeLastLogGen.setDescription('Time at which the last log was generated.')
panCommonEventObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 3, 1))
if mibBuilder.loadTexts: panCommonEventObjs.setStatus('current')
if mibBuilder.loadTexts: panCommonEventObjs.setDescription('\n\t\t\tBranch for objects meant only to be sent in event varbinds.')
panCommonEventEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 3, 2))
if mibBuilder.loadTexts: panCommonEventEvents.setStatus('current')
if mibBuilder.loadTexts: panCommonEventEvents.setDescription('\n\t\t\tBranch for the events themselves.')
panCommonEventEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 3, 2, 0))
if mibBuilder.loadTexts: panCommonEventEventsV2.setStatus('current')
if mibBuilder.loadTexts: panCommonEventEventsV2.setDescription('\n\t\t\tBranch for SNMPv2 events. The OIDs for SNMPv2 events should\n\t\t\thave a zero as the next-to-last sub-identifier (as specified\n\t\t\tin RFC1902).')
panCommonEventDescr = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 3, 1, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: panCommonEventDescr.setStatus('current')
if mibBuilder.loadTexts: panCommonEventDescr.setDescription('String that provides a textual description of the event.')
panCommonEventLog = NotificationType((1, 3, 6, 1, 4, 1, 25461, 2, 1, 3, 2, 0, 1)).setObjects(("PAN-COMMON-MIB", "panCommonEventDescr"))
if mibBuilder.loadTexts: panCommonEventLog.setStatus('current')
if mibBuilder.loadTexts: panCommonEventLog.setDescription('A config/system/firewall/threat log')
panAhoSw = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panAhoSw.setStatus('current')
if mibBuilder.loadTexts: panAhoSw.setDescription('The total usage of software for AHO')
panDfaSw = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDfaSw.setStatus('current')
if mibBuilder.loadTexts: panDfaSw.setDescription('The total number of dfa match using software')
panFlowHostServiceAllow = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowHostServiceAllow.setStatus('current')
if mibBuilder.loadTexts: panFlowHostServiceAllow.setDescription('Device management session allowed')
panHaPathmonSent = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panHaPathmonSent.setStatus('current')
if mibBuilder.loadTexts: panHaPathmonSent.setDescription('HA path-monitoring packets sent')
panAhoFpga = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panAhoFpga.setStatus('current')
if mibBuilder.loadTexts: panAhoFpga.setDescription('The total requests to FPGA for AHO')
panDfaFpga = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDfaFpga.setStatus('current')
if mibBuilder.loadTexts: panDfaFpga.setDescription('The total requests to FPGA for DFA')
panFpgaPkt = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFpgaPkt.setStatus('current')
if mibBuilder.loadTexts: panFpgaPkt.setDescription('The packets held because of requests to FPGA')
panGlobalCountersDOSCounters = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8))
if mibBuilder.loadTexts: panGlobalCountersDOSCounters.setStatus('current')
if mibBuilder.loadTexts: panGlobalCountersDOSCounters.setDescription('Sub-tree for Global DOS counters')
panGlobalCountersDropCounters = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9))
if mibBuilder.loadTexts: panGlobalCountersDropCounters.setStatus('current')
if mibBuilder.loadTexts: panGlobalCountersDropCounters.setDescription('Sub-tree for Global Drop counters')
panGlobalCountersIPFragmentationCounters = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 10))
if mibBuilder.loadTexts: panGlobalCountersIPFragmentationCounters.setStatus('current')
if mibBuilder.loadTexts: panGlobalCountersIPFragmentationCounters.setDescription('Sub-tree for Global IPFragmentation counters')
panGlobalCountersTCPState = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11))
if mibBuilder.loadTexts: panGlobalCountersTCPState.setStatus('current')
if mibBuilder.loadTexts: panGlobalCountersTCPState.setDescription('Sub-tree for Global TCPState counters')
panGlobalCountersTunnelInspect = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 12))
if mibBuilder.loadTexts: panGlobalCountersTunnelInspect.setStatus('current')
if mibBuilder.loadTexts: panGlobalCountersTunnelInspect.setDescription('Sub-tree for Global Tunnel (GRE, IPSEC and GTP) counters')
panFlowDosAgMaxSessLimit = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosAgMaxSessLimit.setStatus('current')
if mibBuilder.loadTexts: panFlowDosAgMaxSessLimit.setDescription('Session limit reached for aggregate profile, drop session')
panFlowDosBlkNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosBlkNumEntries.setStatus('current')
if mibBuilder.loadTexts: panFlowDosBlkNumEntries.setDescription('Number of entries in DOS block table')
panFlowDosClMaxSessLimit = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosClMaxSessLimit.setStatus('current')
if mibBuilder.loadTexts: panFlowDosClMaxSessLimit.setDescription('Session limit reached for classified profile, drop session')
panFlowDosClSyncookieAckErr = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosClSyncookieAckErr.setStatus('current')
if mibBuilder.loadTexts: panFlowDosClSyncookieAckErr.setDescription('TCP SYN cookies: Invalid ACKs received, classified profile')
panFlowDosClSyncookieAckRcv = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosClSyncookieAckRcv.setStatus('current')
if mibBuilder.loadTexts: panFlowDosClSyncookieAckRcv.setDescription('TCP SYN cookies: ACKs to cookies received, classified profile')
panFlowDosClSyncookieBlkDur = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosClSyncookieBlkDur.setStatus('current')
if mibBuilder.loadTexts: panFlowDosClSyncookieBlkDur.setDescription('Packets dropped: Flagged for blocking and under block duration for cl')
panFlowDosClSyncookieMax = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosClSyncookieMax.setStatus('current')
if mibBuilder.loadTexts: panFlowDosClSyncookieMax.setDescription('Packet dropped: SYN cookies maximum threshold reached, classified pro')
panFlowDosClSyncookieSent = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosClSyncookieSent.setStatus('current')
if mibBuilder.loadTexts: panFlowDosClSyncookieSent.setDescription('TCP SYN cookies: cookies sent, classified profile')
panFlowMeterVsysThrottle = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowMeterVsysThrottle.setStatus('current')
if mibBuilder.loadTexts: panFlowMeterVsysThrottle.setDescription('Session metering: sessions throttled by vsys configuration')
panFlowPolicyDeny = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowPolicyDeny.setStatus('current')
if mibBuilder.loadTexts: panFlowPolicyDeny.setDescription('Session setup: denied by policy')
panFlowPolicyNat = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowPolicyNat.setStatus('current')
if mibBuilder.loadTexts: panFlowPolicyNat.setDescription('Session setup: source NAT IP/port allocation error')
panFlowScanDrop = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowScanDrop.setStatus('current')
if mibBuilder.loadTexts: panFlowScanDrop.setDescription('Session setup: denied by scan detection')
panFlowDosDropIpBlocked = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosDropIpBlocked.setStatus('current')
if mibBuilder.loadTexts: panFlowDosDropIpBlocked.setDescription('Packets dropped: Flagged for blocking and under block duration by oth')
panFlowDosRedIcmp = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRedIcmp.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRedIcmp.setDescription("Packets dropped: Zone protection protocol 'icmp' RED")
panFlowDosRedIcmp6 = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRedIcmp6.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRedIcmp6.setDescription("Packets dropped: Zone protection protocol 'icmpv6' RED")
panFlowDosRedIp = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRedIp.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRedIp.setDescription("Packets dropped: Zone protection protocol 'other-ip' RED")
panFlowDosRedTcp = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRedTcp.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRedTcp.setDescription("Packets dropped: Zone protection protocol 'tcp-syn' RED")
panFlowDosRedUdp = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRedUdp.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRedUdp.setDescription("Packets dropped: Zone protection protocol 'udp' RED")
panFlowDosRuleAgBlkDur = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleAgBlkDur.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleAgBlkDur.setDescription('Packets dropped: Flagged for blocking and under block duration for ag')
panFlowDosRuleAgRedAct = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleAgRedAct.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleAgRedAct.setDescription('Packets dropped: Activate aggregate RED threshold reached, random ear')
panFlowDosRuleAgRedMax = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleAgRedMax.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleAgRedMax.setDescription('Packets dropped: Maximal aggregate RED threshold reached')
panFlowDosRuleDeny = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleDeny.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleDeny.setDescription('Packets dropped: Denied action by DoS policy')
panFlowDosRuleDrop = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleDrop.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleDrop.setDescription('Packets dropped: Rate limited or IP blocked')
panFlowDosRuleDropAggr = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleDropAggr.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleDropAggr.setDescription('Packets dropped: due to aggregate rate limiting')
panFlowDosRuleDropClBlkDur = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleDropClBlkDur.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleDropClBlkDur.setDescription('Packets dropped: Flagged for blocking and under block duration for cl')
panFlowDosRuleDropClRedAct = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleDropClRedAct.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleDropClRedAct.setDescription('Packets dropped: Activate classified RED threshold reached, random ea')
panFlowDosRuleDropClRedMax = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleDropClRedMax.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleDropClRedMax.setDescription('Packets dropped: Maximal classified RED threshold reached')
panFlowDosRuleDropClassified = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleDropClassified.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleDropClassified.setDescription('Packets dropped: due to classified rate limiting')
panFlowDosSyncookieBlkDur = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosSyncookieBlkDur.setStatus('current')
if mibBuilder.loadTexts: panFlowDosSyncookieBlkDur.setDescription('Packets dropped: Flagged for blocking and under block duration for ag')
panFlowDosSyncookieMax = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosSyncookieMax.setStatus('current')
if mibBuilder.loadTexts: panFlowDosSyncookieMax.setDescription('Packet dropped: SYN cookies maximum threshold reached, aggregate prof')
panFlowDosZoneRedAct = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosZoneRedAct.setStatus('current')
if mibBuilder.loadTexts: panFlowDosZoneRedAct.setDescription('Packets dropped: Activate zone RED threshold reached, random early dr')
panFlowDosZoneRedMax = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosZoneRedMax.setStatus('current')
if mibBuilder.loadTexts: panFlowDosZoneRedMax.setDescription('Packets dropped: Maximal zone RED threshold reached')
panFlowDosBlkSwEntries = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosBlkSwEntries.setStatus('current')
if mibBuilder.loadTexts: panFlowDosBlkSwEntries.setDescription('Number of entries in DOS Software block table')
panFlowDosBlkHwEntries = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosBlkHwEntries.setStatus('current')
if mibBuilder.loadTexts: panFlowDosBlkHwEntries.setDescription('Number of entries in DOS Hardware block table')
panFlowDosSyncookieNotTcpSyn = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosSyncookieNotTcpSyn.setStatus('current')
if mibBuilder.loadTexts: panFlowDosSyncookieNotTcpSyn.setDescription('TCP SYN cookies:TCP SYN cookie not SYN')
panFlowDosSyncookieNotTcpSynAck = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosSyncookieNotTcpSynAck.setStatus('current')
if mibBuilder.loadTexts: panFlowDosSyncookieNotTcpSynAck.setDescription('TCP SYN cookies:TCP SYN cookie not SYN-ACK')
panFlowDosPfIpspoof = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfIpspoof.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfIpspoof.setDescription("Packets dropped:Zone protection option 'discard-ip-spoof'")
panFlowDosPfIpfrag = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfIpfrag.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfIpfrag.setDescription("Packets dropped:Zone protection option 'discard-ip-frag'")
panFlowDosPfPing0 = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfPing0.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfPing0.setDescription("Packets dropped:Zone protection option 'discard-icmp-ping-zero-id'")
panFlowDosPfIcmpfrag = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfIcmpfrag.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfIcmpfrag.setDescription("Packets dropped:Zone protection option 'discard-icmp-frag'")
panFlowDosPfIcmplpkt = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfIcmplpkt.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfIcmplpkt.setDescription("Packets dropped:Zone protection option 'discard-icmp-large-packet'")
panFlowDosPfIcmperr = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfIcmperr.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfIcmperr.setDescription("Packets dropped:Zone protection option 'discard-icmp-error'")
panFlowDosPfNoreplyttl = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfNoreplyttl.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfNoreplyttl.setDescription("Packets dropped:Zone protection option 'suppress-icmp-timeexceeded'")
panFlowDosPfNoreplyneedfrag = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfNoreplyneedfrag.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfNoreplyneedfrag.setDescription("Packets dropped:Zone protection option 'suppress-icmp-needfrag'")
panFlowDosPfStrictsource = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfStrictsource.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfStrictsource.setDescription("Packets dropped:Zone protection option 'discard-strict-source-routing'")
panFlowDosPfLoosesource = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfLoosesource.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfLoosesource.setDescription("Packets dropped:Zone protection option 'discard-loose-source-routing'")
panFlowDosPfTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfTimestamp.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfTimestamp.setDescription("Packets dropped:Zone protection option 'discard-timestamp'")
panFlowDosPfRecordroute = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfRecordroute.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfRecordroute.setDescription("Packets dropped:Zone protection option 'discard-record-route'")
panFlowDosPfSecurity = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfSecurity.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfSecurity.setDescription("Packets dropped:Zone protection option 'discard-security'")
panFlowDosPfSatnetid = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfSatnetid.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfSatnetid.setDescription("Packets dropped:Zone protection option 'discard-stream-id'")
panFlowDosPfUnknown = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfUnknown.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfUnknown.setDescription("Packets dropped:Zone protection option 'discard-unknown-option'")
panFlowDosPfBadoption = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfBadoption.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfBadoption.setDescription("Packets dropped:Zone protection option 'discard-malformed-option'")
panFlowDosPfTcpoverlappingmismatch = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfTcpoverlappingmismatch.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfTcpoverlappingmismatch.setDescription("Packets dropped:Zone protection option 'discard-overlapping-tcp-segment-mismatch'")
panFlowDosPfStrictip = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfStrictip.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfStrictip.setDescription("Packets dropped:Zone protection option 'strict-ip-check'")
panFlowDosPfTcpsplithandshake = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfTcpsplithandshake.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfTcpsplithandshake.setDescription("Packets dropped:Zone protection option 'discard-tcp-split-handshake'")
panFlowDosPfTcpsyndata = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfTcpsyndata.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfTcpsyndata.setDescription("Packets dropped:Zone protection option 'discard-tcp-syn-with-data'")
panFlowDosPfTcpsynackdata = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPfTcpsynackdata.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPfTcpsynackdata.setDescription("Packets dropped:Zone protection option 'discard-tcp-synack-with-data'")
panFlowDosIp6Route0 = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIp6Route0.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIp6Route0.setDescription("Packets dropped:Zone protection option 'routing-header-0'")
panFlowDosIp6Route1 = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIp6Route1.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIp6Route1.setDescription("Packets dropped:Zone protection option 'routing-header-1'")
panFlowDosIp6Route3 = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIp6Route3.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIp6Route3.setDescription("Packets dropped:Zone protection option 'routing-header-3'")
panFlowDosIp6Route4to252 = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIp6Route4to252.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIp6Route4to252.setDescription("Packets dropped:Zone protection option 'routing-header-4-252'")
panFlowDosIp6Route253 = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIp6Route253.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIp6Route253.setDescription("Packets dropped:Zone protection option 'routing-header-253'")
panFlowDosIp6Route254 = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIp6Route254.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIp6Route254.setDescription("Packets dropped:Zone protection option 'routing-header-254'")
panFlowDosIp6Route255 = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIp6Route255.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIp6Route255.setDescription("Packets dropped:Zone protection option 'routing-header-255'")
panFlowDosIp6Ip4cmpt = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIp6Ip4cmpt.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIp6Ip4cmpt.setDescription("Packets dropped:Zone protection option 'ipv4-compatible-address'")
panFlowDosIp6Acast = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIp6Acast.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIp6Acast.setDescription("Packets dropped:Zone protection option 'anycast-source'")
panFlowDosIp6OptionsInvalidIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIp6OptionsInvalidIPv6.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIp6OptionsInvalidIPv6.setDescription("Packets dropped:Zone protection option 'options-invalid-ipv6-discard'")
panFlowDosIp6Icmpv6ErrorInvalid = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIp6Icmpv6ErrorInvalid.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIp6Icmpv6ErrorInvalid.setDescription("Packets dropped:Zone protection option 'icmpv6-too-big-small-mtu-discard'")
panFlowDosIp6NeedlessIpv6FragHdr = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIp6NeedlessIpv6FragHdr.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIp6NeedlessIpv6FragHdr.setDescription("Packets dropped:Zone protection option 'needless-fragment-hdr'")
panFlowDosIp6RsvdSet = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIp6RsvdSet.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIp6RsvdSet.setDescription("Packets dropped:Zone protection option 'reserved-field-set-discard'")
panFlowDosIPv6ExtHdrHopByHop = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIPv6ExtHdrHopByHop.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIPv6ExtHdrHopByHop.setDescription("Packets dropped:Zone protection option 'hop-by-hop-hdr'")
panFlowDosip6IPv6ExtHdrRouting = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosip6IPv6ExtHdrRouting.setStatus('current')
if mibBuilder.loadTexts: panFlowDosip6IPv6ExtHdrRouting.setDescription("Packets dropped:Zone protection option 'routing-hdr'")
panFlowDosIp6IPv6ExtHdrDestOpt = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosIp6IPv6ExtHdrDestOpt.setStatus('current')
if mibBuilder.loadTexts: panFlowDosIp6IPv6ExtHdrDestOpt.setDescription("Packets dropped:Zone protection option 'dest-option-hdr'")
panFlowDosPbpDrop = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosPbpDrop.setStatus('current')
if mibBuilder.loadTexts: panFlowDosPbpDrop.setDescription('Packets dropped:Dropped by packet buffer protection RED')
panFlowDosCurrSessIncrFailed = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosCurrSessIncrFailed.setStatus('current')
if mibBuilder.loadTexts: panFlowDosCurrSessIncrFailed.setDescription('Unable to increment current session count on session create')
panFlowDosCurrSessDecrFailed = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosCurrSessDecrFailed.setStatus('current')
if mibBuilder.loadTexts: panFlowDosCurrSessDecrFailed.setDescription('Unable to decrement current session count on session delete')
panFlowFwdL3TtlZero = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowFwdL3TtlZero.setStatus('current')
if mibBuilder.loadTexts: panFlowFwdL3TtlZero.setDescription('Packets dropped: IP TTL reaches zero')
panFlowMeterHostThrottle = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowMeterHostThrottle.setStatus('current')
if mibBuilder.loadTexts: panFlowMeterHostThrottle.setDescription('Session metering: sessions throttled by management session threshold')
panFlowHostServiceDeny = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowHostServiceDeny.setStatus('current')
if mibBuilder.loadTexts: panFlowHostServiceDeny.setDescription('Device management session denied')
panFlowHostServiceUnknown = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowHostServiceUnknown.setStatus('current')
if mibBuilder.loadTexts: panFlowHostServiceUnknown.setDescription('Session discarded: unknown application to control plane')
panPktAllocFailure = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panPktAllocFailure.setStatus('current')
if mibBuilder.loadTexts: panPktAllocFailure.setDescription('Packet allocation error')
panPktAllocFailureCos = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panPktAllocFailureCos.setStatus('current')
if mibBuilder.loadTexts: panPktAllocFailureCos.setDescription('Packet allocation error due to QoS control')
panSessionDiscard = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionDiscard.setStatus('current')
if mibBuilder.loadTexts: panSessionDiscard.setDescription('Session set to discard by security policy check')
panFlowIpfragFragErr = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 10, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowIpfragFragErr.setStatus('current')
if mibBuilder.loadTexts: panFlowIpfragFragErr.setDescription('Packet dropped: IP fragmentation error')
panFlowIpfragRecv = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 10, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowIpfragRecv.setStatus('current')
if mibBuilder.loadTexts: panFlowIpfragRecv.setDescription('IP fragments received')
panTcpAllocWqeFailed = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panTcpAllocWqeFailed.setStatus('current')
if mibBuilder.loadTexts: panTcpAllocWqeFailed.setDescription('wqe allocation failure in tcp')
panTcpDeny = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panTcpDeny.setStatus('current')
if mibBuilder.loadTexts: panTcpDeny.setDescription('session denied because of failure in tcp reassembly')
panTcpDropOutOfWnd = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panTcpDropOutOfWnd.setStatus('current')
if mibBuilder.loadTexts: panTcpDropOutOfWnd.setDescription('out-of-window packets dropped')
panTcpDropPacket = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panTcpDropPacket.setStatus('current')
if mibBuilder.loadTexts: panTcpDropPacket.setDescription('packets dropped because of failure in tcp reassembly')
panFlowActionClose = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowActionClose.setStatus('current')
if mibBuilder.loadTexts: panFlowActionClose.setDescription('TCP sessions closed via injecting RST')
panFlowActionReset = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowActionReset.setStatus('current')
if mibBuilder.loadTexts: panFlowActionReset.setDescription('TCP clients reset via responding RST')
panFlowTcpNonSyn = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowTcpNonSyn.setStatus('current')
if mibBuilder.loadTexts: panFlowTcpNonSyn.setDescription('Non-SYN TCP packets without session match')
panTcpExceedSegLimit = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panTcpExceedSegLimit.setStatus('current')
if mibBuilder.loadTexts: panTcpExceedSegLimit.setDescription('packets dropped due to the limitation on global tcp out-of-order pack')
panFlowTciGreDecapSuccess = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 12, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowTciGreDecapSuccess.setStatus('current')
if mibBuilder.loadTexts: panFlowTciGreDecapSuccess.setDescription('Total GRE sessions tunnel inspected')
panFlowTciGreDecapFailed = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 12, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowTciGreDecapFailed.setStatus('current')
if mibBuilder.loadTexts: panFlowTciGreDecapFailed.setDescription('Total GRE sessions for failed tunnel inspected')
panFlowTciGreDecapUnknown = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 12, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowTciGreDecapUnknown.setStatus('current')
if mibBuilder.loadTexts: panFlowTciGreDecapUnknown.setDescription('Total unknown tunnel inspection packets in GRE tunnel [passed|dropped]')
panFlowTciIpsecDecapSuccess = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 12, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowTciIpsecDecapSuccess.setStatus('current')
if mibBuilder.loadTexts: panFlowTciIpsecDecapSuccess.setDescription('Total Ipsec sessions tunnel inspected')
panFlowTciIpsecDecapFailed = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 12, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowTciIpsecDecapFailed.setStatus('current')
if mibBuilder.loadTexts: panFlowTciIpsecDecapFailed.setDescription('Total IPSEC sessions for failed tunnel inspected')
panFlowTciIpsecDecapUnknown = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 12, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowTciIpsecDecapUnknown.setStatus('current')
if mibBuilder.loadTexts: panFlowTciIpsecDecapUnknown.setDescription('Total unknown tunnel inspection packets in IPSEC tunnel [passed|dropped]')
panFlowTciGtpDecapSuccess = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 12, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowTciGtpDecapSuccess.setStatus('current')
if mibBuilder.loadTexts: panFlowTciGtpDecapSuccess.setDescription('Total GTP sessions tunnel inspected')
panFlowTciGtpDecapFailed = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 12, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowTciGtpDecapFailed.setStatus('current')
if mibBuilder.loadTexts: panFlowTciGtpDecapFailed.setDescription('Total GTP sessions for failed tunnel inspected')
panFlowTciGtpDecapUnknown = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 12, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowTciGtpDecapUnknown.setStatus('current')
if mibBuilder.loadTexts: panFlowTciGtpDecapUnknown.setDescription('Total unknown tunnel inspection packets in GTP tunnel[passed|dropped]')
panIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 11, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "ifIndex"))
if mibBuilder.loadTexts: panIfEntry.setStatus('current')
if mibBuilder.loadTexts: panIfEntry.setDescription('Entries are created when panIfCPS are added to the panIfCPSTable.')
ifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIndex.setStatus('current')
if mibBuilder.loadTexts: ifIndex.setDescription('Index of the interface')
ifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifDescr.setStatus('current')
if mibBuilder.loadTexts: ifDescr.setDescription('Description (name) of the interface')
panIfActiveTcpCps = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 11, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panIfActiveTcpCps.setStatus('current')
if mibBuilder.loadTexts: panIfActiveTcpCps.setDescription('Number of active TCP connections per second for this interface.')
panIfActiveUdpCps = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 11, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panIfActiveUdpCps.setStatus('current')
if mibBuilder.loadTexts: panIfActiveUdpCps.setDescription('Number of active UDP connections per second for this interface.')
panIfActiveOtherIpCps = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 11, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panIfActiveOtherIpCps.setStatus('current')
if mibBuilder.loadTexts: panIfActiveOtherIpCps.setDescription('Number of active Other IP connections per second for this interface.')
panZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 10, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "ifIndex"))
if mibBuilder.loadTexts: panZoneEntry.setStatus('current')
if mibBuilder.loadTexts: panZoneEntry.setDescription('Entries are created when panZoneCPS are added to the panZoneCPSTable.')
panZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panZoneName.setStatus('current')
if mibBuilder.loadTexts: panZoneName.setDescription('Zone name for the interface')
panZoneActiveTcpCps = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panZoneActiveTcpCps.setStatus('current')
if mibBuilder.loadTexts: panZoneActiveTcpCps.setDescription('Number of active TCP connections per second for this zone.')
panZoneActiveUdpCps = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panZoneActiveUdpCps.setStatus('current')
if mibBuilder.loadTexts: panZoneActiveUdpCps.setDescription('Number of active UDP connections per second for this zone.')
panZoneActiveOtherIpCps = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panZoneActiveOtherIpCps.setStatus('current')
if mibBuilder.loadTexts: panZoneActiveOtherIpCps.setDescription('Number of active Other IP connections per second for this zone.')
mibBuilder.exportSymbols("PAN-COMMON-MIB", panDeviceLogging=panDeviceLogging, panFlowDosRedIcmp6=panFlowDosRedIcmp6, panDeviceLoggingCollectorConnectionTable=panDeviceLoggingCollectorConnectionTable, panLcLogDurationTraffic=panLcLogDurationTraffic, panDfaFpga=panDfaFpga, panGlobalCountersTCPState=panGlobalCountersTCPState, panDeviceLoggingLogUsageTable=panDeviceLoggingLogUsageTable, panTcpAllocWqeFailed=panTcpAllocWqeFailed, panLocalLogUsageEntry=panLocalLogUsageEntry, panSysHAPeerState=panSysHAPeerState, panLcLogDurationHipmatch=panLcLogDurationHipmatch, panLcLogDurationEvent=panLcLogDurationEvent, panFlowDosAgMaxSessLimit=panFlowDosAgMaxSessLimit, panVsysEntry=panVsysEntry, panPktAllocFailureCos=panPktAllocFailureCos, panLcLogDurationAlarm=panLcLogDurationAlarm, panSysAvVersion=panSysAvVersion, panDeviceLoggingLogLastSeqNumberAck=panDeviceLoggingLogLastSeqNumberAck, index=index, panChassisType=panChassisType, panCommonEventLog=panCommonEventLog, panFpgaPkt=panFpgaPkt, panFlowDosPfTcpsynackdata=panFlowDosPfTcpsynackdata, panLcLoggingLogType=panLcLoggingLogType, panCommonEventObjs=panCommonEventObjs, panLcLoggingConnectedDeviceTable=panLcLoggingConnectedDeviceTable, panAhoFpga=panAhoFpga, panSysGlobalProtectClientVersion=panSysGlobalProtectClientVersion, panVsysActiveOtherIpCps=panVsysActiveOtherIpCps, panFlowDosClSyncookieBlkDur=panFlowDosClSyncookieBlkDur, panFlowDosRuleDeny=panFlowDosRuleDeny, panLocalDiskUsageDiskSpace=panLocalDiskUsageDiskSpace, panFlowFwdL3TtlZero=panFlowFwdL3TtlZero, panFlowActionClose=panFlowActionClose, panFlowTciGreDecapFailed=panFlowTciGreDecapFailed, panCommonEventDescr=panCommonEventDescr, panSysUrlFilteringVersion=panSysUrlFilteringVersion, panGlobalCountersDropCounters=panGlobalCountersDropCounters, panLocalDiskUsageRetention=panLocalDiskUsageRetention, panIfTable=panIfTable, panFlowTciIpsecDecapUnknown=panFlowTciIpsecDecapUnknown, panGPGWUtilizationMaxTunnels=panGPGWUtilizationMaxTunnels, panDeviceLoggingLogLastSeqNumberFwded=panDeviceLoggingLogLastSeqNumberFwded, panSysHAState=panSysHAState, panDeviceLoggingExtFwdQueueDrop=panDeviceLoggingExtFwdQueueDrop, panFlowDosRedTcp=panFlowDosRedTcp, panLcLogDurationThreat=panLcLogDurationThreat, panSessionActiveUdp=panSessionActiveUdp, panSysHwVersion=panSysHwVersion, panDeviceLoggingCollectorConnectionIP=panDeviceLoggingCollectorConnectionIP, panLcDiskIOPSEntry=panLcDiskIOPSEntry, panLcDiskUsageId=panLcDiskUsageId, panVsysActiveTcpCps=panVsysActiveTcpCps, panFlowDosPfTcpsyndata=panFlowDosPfTcpsyndata, panCommonObjs=panCommonObjs, panFlowDosSyncookieBlkDur=panFlowDosSyncookieBlkDur, panSysWildfirePrivateCloudVersion=panSysWildfirePrivateCloudVersion, panFlowDosIp6Ip4cmpt=panFlowDosIp6Ip4cmpt, panSessionActiveICMP=panSessionActiveICMP, panSSLBrokerStatsEntry=panSSLBrokerStatsEntry, panDeviceLoggingExtFwdCount=panDeviceLoggingExtFwdCount, panCommonConfMib=panCommonConfMib, panFlowDosRuleDropClBlkDur=panFlowDosRuleDropClBlkDur, panFlowDosIp6Route3=panFlowDosIp6Route3, panIfActiveTcpCps=panIfActiveTcpCps, panHaPathmonSent=panHaPathmonSent, panGlobalCountersIPFragmentationCounters=panGlobalCountersIPFragmentationCounters, panFlowTciIpsecDecapFailed=panFlowTciIpsecDecapFailed, panSessionActiveSslProxy=panSessionActiveSslProxy, panFlowDosBlkNumEntries=panFlowDosBlkNumEntries, panSession=panSession, panGPGatewayUtilization=panGPGatewayUtilization, panDeviceLoggingExtFwdStatsTableQueueDepth=panDeviceLoggingExtFwdStatsTableQueueDepth, panCommonEvents=panCommonEvents, panSysTimeZoneOffset=panSysTimeZoneOffset, panVsysTable=panVsysTable, panFlowTciGtpDecapUnknown=panFlowTciGtpDecapUnknown, panDeviceLoggingExtFwd=panDeviceLoggingExtFwd, panFlowDosRuleDrop=panFlowDosRuleDrop, panDeviceLoggingLogTotalLogsFwded=panDeviceLoggingLogTotalLogsFwded, panDeviceLoggingDiskQuota=panDeviceLoggingDiskQuota, panTcpDeny=panTcpDeny, panIfEntry=panIfEntry, panMSeriesMode=panMSeriesMode, panLcLoggingDeviceTable=panLcLoggingDeviceTable, panLcLogTypeLastSeqNumRecd=panLcLogTypeLastSeqNumRecd, panVsysActiveUdpCps=panVsysActiveUdpCps, panFlowPolicyDeny=panFlowPolicyDeny, panFlowDosRuleAgRedAct=panFlowDosRuleAgRedAct, panSessionDiscard=panSessionDiscard, panFlowHostServiceUnknown=panFlowHostServiceUnknown, panDeviceLoggingExtFwdStatsTable1minAvgSendRate=panDeviceLoggingExtFwdStatsTable1minAvgSendRate, panDeviceLoggingExtFwdStatsTableSendCount=panDeviceLoggingExtFwdStatsTableSendCount, panLcDiskIOPSId=panLcDiskIOPSId, panLcDiskIOPSTable=panLcDiskIOPSTable, panLcLogFwdStatsTableSendCount=panLcLogFwdStatsTableSendCount, panFlowDosIp6Route254=panFlowDosIp6Route254, panLcIsRedundancyMember=panLcIsRedundancyMember, panFlowDosPfPing0=panFlowDosPfPing0, panDeviceIncomingLogRate=panDeviceIncomingLogRate, sessionCount=sessionCount, panFlowDosPfStrictip=panFlowDosPfStrictip, panFlowDosPfSecurity=panFlowDosPfSecurity, panLcLogFwdStatsTableDropCount=panLcLogFwdStatsTableDropCount, panFlowDosPfTcpoverlappingmismatch=panFlowDosPfTcpoverlappingmismatch, panLcLoggingConnectedDeviceName=panLcLoggingConnectedDeviceName, panTcpExceedSegLimit=panTcpExceedSegLimit, panSSLBroker=panSSLBroker, panFlowDosPfNoreplyttl=panFlowDosPfNoreplyttl, panDeviceLoggingLogRate=panDeviceLoggingLogRate, panZoneName=panZoneName, panLcLogFwdStatsEntry=panLcLogFwdStatsEntry, panSessionActiveTcp=panSessionActiveTcp, panDeviceLoggingExtFwdStatsSendErr=panDeviceLoggingExtFwdStatsSendErr, panLcDiskIOWrite5min=panLcDiskIOWrite5min, panDeviceWriteLogRate=panDeviceWriteLogRate, panZoneEntry=panZoneEntry, panFlowDosPfTimestamp=panFlowDosPfTimestamp, panFlowDosRuleAgBlkDur=panFlowDosRuleAgBlkDur, panDeviceLoggingExtFwdStatsTableDropCount=panDeviceLoggingExtFwdStatsTableDropCount, panLcLogUsageTable=panLcLogUsageTable, panFlowDosRuleDropClassified=panFlowDosRuleDropClassified, panLcLogDurationThsum=panLcLogDurationThsum, panFlowMeterHostThrottle=panFlowMeterHostThrottle, panVsysActiveSessions=panVsysActiveSessions, panFlowDosPfStrictsource=panFlowDosPfStrictsource, panSysOpswatDatafileVersion=panSysOpswatDatafileVersion, panFlowDosSyncookieNotTcpSynAck=panFlowDosSyncookieNotTcpSynAck, panFlowDosIp6IPv6ExtHdrDestOpt=panFlowDosIp6IPv6ExtHdrDestOpt, panFlowDosPbpDrop=panFlowDosPbpDrop, panGlobalProtect=panGlobalProtect, panSysUrlFilteringDatabase=panSysUrlFilteringDatabase, panFlowDosPfRecordroute=panFlowDosPfRecordroute, panAhoSw=panAhoSw, PYSNMP_MODULE_ID=panCommonMibModule, panFlowDosSyncookieNotTcpSyn=panFlowDosSyncookieNotTcpSyn, panDeviceLoggingExtFwdStatsEntry=panDeviceLoggingExtFwdStatsEntry, panDeviceLoggingDiskUsageDiskSpace=panDeviceLoggingDiskUsageDiskSpace, panFlowDosPfTcpsplithandshake=panFlowDosPfTcpsplithandshake, panSessionUtilization=panSessionUtilization, panFlowDosRuleDropClRedAct=panFlowDosRuleDropClRedAct, panFlowDosPfIpspoof=panFlowDosPfIpspoof, panZoneActiveOtherIpCps=panZoneActiveOtherIpCps, panVsysMaxSessions=panVsysMaxSessions, panFlowTciGreDecapSuccess=panFlowTciGreDecapSuccess, panDeviceLoggingExtFwdStatsTableType=panDeviceLoggingExtFwdStatsTableType, panLcDiskUsageEntry=panLcDiskUsageEntry, panLcLogFwdStatsTableEnqueueCount=panLcLogFwdStatsTableEnqueueCount, panCommonEventEventsV2=panCommonEventEventsV2, panFlowDosSyncookieMax=panFlowDosSyncookieMax, panLcLoggingDeviceConnectionId=panLcLoggingDeviceConnectionId, panSysHAMode=panSysHAMode, panSysWildfireVersion=panSysWildfireVersion, panDeviceLoggingDiskQuotaPct=panDeviceLoggingDiskQuotaPct, panSysThreatVersion=panSysThreatVersion, panLcStat=panLcStat, panSysDaylightSaving=panSysDaylightSaving, panLcLogTypeLastLogRecd=panLcLogTypeLastLogRecd, panFlowDosRedIp=panFlowDosRedIp, panFlowDosPfNoreplyneedfrag=panFlowDosPfNoreplyneedfrag, panFlowDosIp6Route4to252=panFlowDosIp6Route4to252, panLcLoggingConnectedDeviceConnectionId=panLcLoggingConnectedDeviceConnectionId, panFlowDosIp6Route255=panFlowDosIp6Route255, panIfActiveUdpCps=panIfActiveUdpCps, panFlowDosIPv6ExtHdrHopByHop=panFlowDosIPv6ExtHdrHopByHop, panLcLogDurationTrsum=panLcLogDurationTrsum, panPktAllocFailure=panPktAllocFailure, panZoneActiveTcpCps=panZoneActiveTcpCps, panFlowIpfragRecv=panFlowIpfragRecv, panFlowScanDrop=panFlowScanDrop, panFlowDosIp6RsvdSet=panFlowDosIp6RsvdSet, chainName=chainName, panLcLogRate=panLcLogRate, panFlowDosCurrSessIncrFailed=panFlowDosCurrSessIncrFailed, panFlowDosRedIcmp=panFlowDosRedIcmp, panLcLoggingDeviceEntry=panLcLoggingDeviceEntry, panLocalLogType=panLocalLogType, panFlowDosIp6Icmpv6ErrorInvalid=panFlowDosIp6Icmpv6ErrorInvalid, panTcpDropPacket=panTcpDropPacket, panFlowDosPfLoosesource=panFlowDosPfLoosesource, panDeviceLoggingLogType=panDeviceLoggingLogType, panLcLogDurationAppstat=panLcLogDurationAppstat, panGPGWUtilizationPct=panGPGWUtilizationPct, panLcLogUsageEntry=panLcLogUsageEntry, panDfaSw=panDfaSw, panFlowDosRedUdp=panFlowDosRedUdp, panSysAppReleaseDate=panSysAppReleaseDate, avgLatency=avgLatency, panLocalDiskQuota=panLocalDiskQuota, panSysSwVersion=panSysSwVersion, panFlowTciGtpDecapSuccess=panFlowTciGtpDecapSuccess, panIfActiveOtherIpCps=panIfActiveOtherIpCps, panLcLogFwdStatsTable=panLcLogFwdStatsTable, panSessionSslProxyUtilization=panSessionSslProxyUtilization, panDeviceLoggingCollectorConnectionStatus=panDeviceLoggingCollectorConnectionStatus, panFlowDosPfSatnetid=panFlowDosPfSatnetid, panFlowDosClSyncookieAckRcv=panFlowDosClSyncookieAckRcv, panFlowTciIpsecDecapSuccess=panFlowTciIpsecDecapSuccess, panFlowDosIp6Route1=panFlowDosIp6Route1, panFlowDosZoneRedAct=panFlowDosZoneRedAct, FloatValue=FloatValue, panFlowDosPfUnknown=panFlowDosPfUnknown, panCommonEventEvents=panCommonEventEvents, panLcLoggingConnectedDeviceEntry=panLcLoggingConnectedDeviceEntry, ifDescr=ifDescr, panLcLoggingConnectedIdLogRate=panLcLoggingConnectedIdLogRate, panCommonMibModule=panCommonMibModule, panFlowDosIp6NeedlessIpv6FragHdr=panFlowDosIp6NeedlessIpv6FragHdr, panTcpDropOutOfWnd=panTcpDropOutOfWnd, panDeviceLoggingExtFwdStatsTable=panDeviceLoggingExtFwdStatsTable, panDeviceLoggingLogLastLogCreated=panDeviceLoggingLogLastLogCreated, panDeviceLoggingCollectorConnectionEntry=panDeviceLoggingCollectorConnectionEntry, panFlowTcpNonSyn=panFlowTcpNonSyn, panSysWfReleaseDate=panSysWfReleaseDate, panSysAppVersion=panSysAppVersion, panFlowDosZoneRedMax=panFlowDosZoneRedMax, panDeviceLoggingDevice=panDeviceLoggingDevice, panFlowDosPfIpfrag=panFlowDosPfIpfrag, panFlowDosIp6Route0=panFlowDosIp6Route0, panLcLogDurationSystem=panLcLogDurationSystem, panLcLogTypeLastLogGen=panLcLogTypeLastLogGen, panGlobalCountersTunnelInspect=panGlobalCountersTunnelInspect, panFlowDosClSyncookieAckErr=panFlowDosClSyncookieAckErr, panFlowDosClSyncookieSent=panFlowDosClSyncookieSent, panDeviceLoggingCollectorConnectionHostname=panDeviceLoggingCollectorConnectionHostname, panLcLogType=panLcLogType, panFlowDosip6IPv6ExtHdrRouting=panFlowDosip6IPv6ExtHdrRouting, panDeviceLoggingCollectorConnectionType=panDeviceLoggingCollectorConnectionType, ifIndex=ifIndex, panLocalLogUsageTable=panLocalLogUsageTable, panDeviceLoggingLogTypeStatTable=panDeviceLoggingLogTypeStatTable, panLcDiskUsage=panLcDiskUsage, panChassis=panChassis, panFlowDosClMaxSessLimit=panFlowDosClMaxSessLimit, panLcDiskIORead5min=panLcDiskIORead5min, panFlowMeterVsysThrottle=panFlowMeterVsysThrottle, panVsysId=panVsysId, panFlowDosPfIcmplpkt=panFlowDosPfIcmplpkt, panGPGWUtilizationActiveTunnels=panGPGWUtilizationActiveTunnels, panSysSerialNumber=panSysSerialNumber, panDeviceLoggingDiskUsageRetention=panDeviceLoggingDiskUsageRetention, panLcDiskQuotaPct=panLcDiskQuotaPct, panSysAvReleaseDate=panSysAvReleaseDate, panDeviceLoggingLogTypeStatEntry=panDeviceLoggingLogTypeStatEntry, panLcDiskUsageDiskSpacePct=panLcDiskUsageDiskSpacePct, panGlobalCountersDOSCounters=panGlobalCountersDOSCounters, panFlowDosBlkHwEntries=panFlowDosBlkHwEntries, panFlowDosIp6Route253=panFlowDosIp6Route253, panFlowDosIp6Acast=panFlowDosIp6Acast, panMgmt=panMgmt, panLcDiskUsageTable=panLcDiskUsageTable, panDeviceLoggingLogUsageEntry=panDeviceLoggingLogUsageEntry, panSysThreatReleaseDate=panSysThreatReleaseDate, panLocalDiskQuotaPct=panLocalDiskQuotaPct)
mibBuilder.exportSymbols("PAN-COMMON-MIB", panSessionMax=panSessionMax, panLcLogFwdStatsTableType=panLcLogFwdStatsTableType, panFlowPolicyNat=panFlowPolicyNat, panLcLogDurationConfig=panLcLogDurationConfig, panFlowDosRuleAgRedMax=panFlowDosRuleAgRedMax, panFlowDosRuleDropClRedMax=panFlowDosRuleDropClRedMax, panFlowDosPfIcmperr=panFlowDosPfIcmperr, panFlowDosIp6OptionsInvalidIPv6=panFlowDosIp6OptionsInvalidIPv6, panFlowHostServiceDeny=panFlowHostServiceDeny, panFlowIpfragFragErr=panFlowIpfragFragErr, panFlowTciGtpDecapFailed=panFlowTciGtpDecapFailed, panGlobalCounters=panGlobalCounters, panDeviceLoggingLogLastLogFwded=panDeviceLoggingLogLastLogFwded, panMgmtPanoramaConnected=panMgmtPanoramaConnected, panFlowDosPfIcmpfrag=panFlowDosPfIcmpfrag, panZoneActiveUdpCps=panZoneActiveUdpCps, panDeviceLoggingDeviceIndex=panDeviceLoggingDeviceIndex, panFlowDosPfBadoption=panFlowDosPfBadoption, panFlowHostServiceAllow=panFlowHostServiceAllow, panMgmtPanorama2Connected=panMgmtPanorama2Connected, panFlowDosRuleDropAggr=panFlowDosRuleDropAggr, panLcLogDuration=panLcLogDuration, panSysVpnClientVersion=panSysVpnClientVersion, panFlowDosClSyncookieMax=panFlowDosClSyncookieMax, panSessionActive=panSessionActive, panFlowDosBlkSwEntries=panFlowDosBlkSwEntries, panLcLogDurationUserid=panLcLogDurationUserid, panSys=panSys, panVsysName=panVsysName, panLcLogFwdStatsTableQueueDepth=panLcLogFwdStatsTableQueueDepth, panFlowDosDropIpBlocked=panFlowDosDropIpBlocked, panVsysSessionUtilizationPct=panVsysSessionUtilizationPct, panFlowTciGreDecapUnknown=panFlowTciGreDecapUnknown, panDeviceLoggingExtFwdStatsTableEnqueueCount=panDeviceLoggingExtFwdStatsTableEnqueueCount, panSSLBrokerStatsTable=panSSLBrokerStatsTable, panFlowActionReset=panFlowActionReset, panDeviceLoggingLogUsageLogType=panDeviceLoggingLogUsageLogType, panZoneTable=panZoneTable, panLcDiskUsageRetention=panLcDiskUsageRetention, panLogCollector=panLogCollector, panFlowDosCurrSessDecrFailed=panFlowDosCurrSessDecrFailed)
