#
# PySNMP MIB module F3-LAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-LAG-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 11:36:56 2024
# On host fv-az842-370 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
CmPmBinAction, = mibBuilder.importSymbols("CM-COMMON-MIB", "CmPmBinAction")
shelfIndex, neIndex, slotIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "shelfIndex", "neIndex", "slotIndex")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, Integer32, Bits, iso, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, ObjectIdentity, TimeTicks, Counter32, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "Bits", "iso", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "ObjectIdentity", "TimeTicks", "Counter32", "Counter64", "ModuleIdentity")
StorageType, RowStatus, VariablePointer, TruthValue, DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowStatus", "VariablePointer", "TruthValue", "DateAndTime", "DisplayString", "TextualConvention")
f3LagMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14))
f3LagMIB.setRevisions(('2016-04-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3LagMIB.setRevisionsDescriptions(('Notes from release 201604060000Z,\n              (i)  Updated description of f3LagMode\n              (ii) Added new objects f3LagFrameDistAlgorithm,\n                        f3LagDiscardWrongConversation\n     \n             Notes from release 201012160000Z,\n              (i)Added new object f3LagPortMember\n\n             Notes from release 201012140000Z,\n              (i) Added new objects f3LagCcmDefectDetectionEnabled,\n                        f3LagStatsAction, f3LagPortStatsAction\n              (ii)Updated description of f3LagRowStatus, f3LagPortRowStatus\n\n             Notes from release 201011030000Z,\n               Post review changes \n\n             Notes from release 200903160000Z\n             This release is applicable to the FSP150CM Aggregation 5.1 devices.\n\n             Notes from release 200803030000Z,\n             (1)MIB version ready for release FSP150CM Aggregation 5.1.',))
if mibBuilder.loadTexts: f3LagMIB.setLastUpdated('201604060000Z')
if mibBuilder.loadTexts: f3LagMIB.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: f3LagMIB.setContactInfo('        Polo Jiang\n                     ADVA Optical Networking, Inc.\n                Tel: +86 755 8621-7445\n             E-mail: pjiang@advaoptical.com\n             Postal: 518068  9/F, Xi Hai Ming Zhu, Building F, 1 Taoyuan Road,\n             \tNanshan District, Shenzhen, PRC')
if mibBuilder.loadTexts: f3LagMIB.setDescription('This module defines the vendor specific 802.3ad LAG MIB definitions used \n             by the FSP150CM 5.1 product lines, as extensions to the standard \n             IEEE 802.3ad (802.3-2005). \n             Copyright (C) ADVA Optical Networking.')
f3LagObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1))
f3LagConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 2))
class AggMode(TextualConvention, Integer32):
    description = 'Defines the LAG behavior. A LAG with mode\n            active-standby -  exhibits 1:1 protection behavior\n            loadsharing    -  exhibits port aggregation behavior\n         An active-standby LAG supports 0-2 member ports. One member is in Active \n         role while the other is in Standby role. A loadsharing LAG can have multiple\n         (0-x) member ports, where x is as follows.\n             x = 2 for GE112Pro, GE114Pro, GE206V (Network ports only)\n             x = 2 for XG210 Network ports, x = 10 for XG210 Access ports\n             x = 4 for XG116Pro, XG120Pro (10G ports)\n             x = 6 for XG116Pro GE ports\n             x = 10 for XG120Pro GE ports \n         In CM Aggregation Shelf, the loadsharing LAG can have 2-8 member ports.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active-standby", 1), ("loadsharing", 2))

class AggPortState(TextualConvention, Integer32):
    description = 'The AggPortState provides current state of the member port.\n         Active: the member port is ready for transporting and is in working now.\n         Standby: the member port is ready for transporting, but is not working now.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("standby", 2))

class LagFrameDistributionAlgorithmType(TextualConvention, Integer32):
    description = 'The frame distribution algorithm used by the LAG for transmitting frames\n         on the individual LAG member ports.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("activeStandby", 1), ("srcdstMacHash", 2), ("serviceAssignment", 3))

class LinkAssignMode(TextualConvention, Integer32):
    description = 'The link assignment mode used to designate a particular link for carrying\n         the service.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("auto", 1), ("provisionedLinkList", 2))

f3LagTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1), )
if mibBuilder.loadTexts: f3LagTable.setStatus('current')
if mibBuilder.loadTexts: f3LagTable.setDescription('A list of entries corresponding to the Link Aggregation Groups. \n             Entries can be created/deleted in this table by management\n             application action.')
f3LagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-LAG-MIB", "f3LagIndex"))
if mibBuilder.loadTexts: f3LagEntry.setStatus('current')
if mibBuilder.loadTexts: f3LagEntry.setDescription('An entry containing information applicable to a particular\n             security user.')
f3LagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: f3LagIndex.setReference('IEEE 802.3 Subclause 30.7.1.1.1')
if mibBuilder.loadTexts: f3LagIndex.setStatus('current')
if mibBuilder.loadTexts: f3LagIndex.setDescription('An integer index value used to uniquely identify this Lag.\n          It should be the Lag Logical index.')
f3LagIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LagIfIndex.setStatus('current')
if mibBuilder.loadTexts: f3LagIfIndex.setDescription('This object has the same value as ifIndex for \n             LAG logical Port.  An integer index value used to \n             uniquely identify this LAG logical Port.')
f3LagName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3LagName.setReference('IEEE 802.3 Subclause 30.7.1.1.3')
if mibBuilder.loadTexts: f3LagName.setStatus('current')
if mibBuilder.loadTexts: f3LagName.setDescription('This object allows SNMP management entities to name\n          the LAG aggregator.')
f3LagProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3LagProtocols.setStatus('current')
if mibBuilder.loadTexts: f3LagProtocols.setDescription('When this object is enabled, the LACP will run as 802.3ad defines; \n          When this object is disabled, LACP/LAMP protocols will not run and the \n         LAG member port is fixed to an assigned LAG aggregator. ')
f3LagLacpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3LagLacpControl.setStatus('current')
if mibBuilder.loadTexts: f3LagLacpControl.setDescription('Determines whether or not the Link Aggregation Control Protocol is enabled or disabled \n          for the LAG.  When disabled, the LAG shall ignore LACP frames for the purpose of \n          selecting the active link (port) and shall select its active link (port) solely upon \n          the status of the LAG member links (ports).  However, when disabled, the LACP protocol \n          shall remain active (i.e. LACP frames are transmitted when needed, etc.).')
f3LagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1, 1, 6), AggMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3LagMode.setStatus('current')
if mibBuilder.loadTexts: f3LagMode.setDescription('Defines the LAG behavior. A LAG with mode\n            active-standby -  exhibits 1:1 protection behavior\n            loadsharing    -  exhibits port aggregation behavior\n          An active-standby LAG supports 0-2 member ports. One member is in Active\n          role while the other is in Standby role. A loadsharing LAG can have multiple\n          (0-x) member ports, where x is as follows.\n             x = 2 for GE112Pro, GE114Pro, GE206V (Network ports only)\n             x = 2 for XG210 Network ports, x = 10 for XG210 Access ports\n             x = 4 for XG116Pro, XG120Pro (10G ports)\n             x = 6 for XG116Pro GE ports\n             x = 10 for XG120Pro GE ports\n          In CM Aggregation Shelf, the loadsharing LAG can have 2-8 member ports.')
f3LagCcmDefectsDetectionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3LagCcmDefectsDetectionEnabled.setStatus('current')
if mibBuilder.loadTexts: f3LagCcmDefectsDetectionEnabled.setDescription('This object allows for a LAG to use CCM defects DefRemoteCCM and DefRDICCM\n         as an indication of Signal Fail for the LAG member ports. \n         When enabled, a LAG member will stop carrying service frames when a\n         DefRemoteCCM or DefRDICCM is detected on a port level CFM DOWN MEP associated\n         with the LAG member port.  Please note that port level CFM DOWN MEPs need\n         to be created on LAG member ports for this feature to work.')
f3LagStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1, 1, 8), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3LagStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsAction.setDescription('Allows the Manager to clear the LAG level statistics (f3LagStatsTable).')
f3LagStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1, 1, 9), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3LagStorageType.setStatus('current')
if mibBuilder.loadTexts: f3LagStorageType.setDescription('The type of storage configured for this entry.')
f3LagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3LagRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3LagRowStatus.setDescription('The status of this row.\n          An entry MUST NOT exist in the active state unless all\n          objects in the entry have an appropriate value, as described\n          in the description clause for each writable object.\n\n          The values of f3LagRowStatus supported are\n          createAndGo(4) and destroy(6).  All mandatory attributes\n          must be specified in a single SNMP SET request with\n          f3LagRowStatus value as createAndGo(4).\n          Upon successful row creation, this object has a\n          value of active(1).\n\n          The f3LagRowStatus object may be modified if\n          the associated instance of this object is equal to active(1).')
f3LagIgnorePartnerColMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3LagIgnorePartnerColMaxDelay.setStatus('current')
if mibBuilder.loadTexts: f3LagIgnorePartnerColMaxDelay.setDescription('This object is used to configure LAG instance to ignore Collector Max Delay\n           value in the received LACP PDU. Setting this value to TRUE will result in \n           no hold-off timer to be started, regardless of the received Collector Max\n           Delay value.')
f3LagFrameDistAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1, 1, 12), LagFrameDistributionAlgorithmType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3LagFrameDistAlgorithm.setStatus('current')
if mibBuilder.loadTexts: f3LagFrameDistAlgorithm.setDescription('The frame distribution algorithm used by the LAG for transmitting frames\n           on the individual LAG member ports. For an active-standby LAG, this will \n           be active-standby. A loadsharing LAG will follow service-assignment frame\n           distribution. The srcdst-mac-hash method is not supported on CC-NIDS.')
f3LagDiscardWrongConversation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3LagDiscardWrongConversation.setStatus('current')
if mibBuilder.loadTexts: f3LagDiscardWrongConversation.setDescription('This object is used to control and identify whether frames received on a \n           LAG member port are to be discarded if the service associated with the \n           frame (ingress membership) does not match the service-to-link mapping of\n           the LAG Service Map.')
f3LagStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 2), )
if mibBuilder.loadTexts: f3LagStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsTable.setDescription('A list of entries corresponding to the LAG statistics. \n          Entries cannot be created in this table by management\n          application action.')
f3LagStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-LAG-MIB", "f3LagIndex"), (0, "F3-LAG-MIB", "f3LagStatsIndex"))
if mibBuilder.loadTexts: f3LagStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsEntry.setDescription('An entry containing information on the LAG logical \n             port statistics.')
f3LagStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: f3LagStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsIndex.setDescription('The unique identifier to access a unique row in the f3LagStatsTable.')
f3LagStatsOctetsTxOK = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LagStatsOctetsTxOK.setReference('IEEE 802.3 Subclause 30.7.1.1.17')
if mibBuilder.loadTexts: f3LagStatsOctetsTxOK.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsOctetsTxOK.setDescription('A count of the data and padding octets transmitted by this Aggregator on all \n          Aggregation Ports that are (or have been) members of the aggregation.')
f3LagStatsOctetsRxOK = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LagStatsOctetsRxOK.setReference('IEEE 802.3 Subclause 30.7.1.1.18')
if mibBuilder.loadTexts: f3LagStatsOctetsRxOK.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsOctetsRxOK.setDescription('A count of the data and padding octets received by this Aggregator, \n          from the Aggregation Ports that are (or have been) members of the aggregation.')
f3LagStatsFramesTxOK = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LagStatsFramesTxOK.setReference('IEEE 802.3 Subclause 30.7.1.1.19')
if mibBuilder.loadTexts: f3LagStatsFramesTxOK.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsFramesTxOK.setDescription('A count of the data frames transmitted by this Aggregator on all Aggregation \n          Ports that are (or have been) members of the aggregation.')
f3LagStatsFramesRxOK = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LagStatsFramesRxOK.setReference('IEEE 802.3 Subclause 30.7.1.1.20')
if mibBuilder.loadTexts: f3LagStatsFramesRxOK.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsFramesRxOK.setDescription('A count of the data frames received by this Aggregator, from the Aggregation Ports that are \n         (or have been) members of the aggregation.')
f3LagStatsMulticastFramesTxOK = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LagStatsMulticastFramesTxOK.setReference('IEEE 802.3 Subclause 30.7.1.1.21')
if mibBuilder.loadTexts: f3LagStatsMulticastFramesTxOK.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsMulticastFramesTxOK.setDescription('A count of the data frames transmitted by this Aggregator on all Aggregation Ports that are \n         (or have been) members of the aggregation, to a group destination address other than the \n         broadcast address.')
f3LagStatsMulticastFramesRxOK = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LagStatsMulticastFramesRxOK.setReference('IEEE 802.3 Subclause 30.7.1.1.22')
if mibBuilder.loadTexts: f3LagStatsMulticastFramesRxOK.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsMulticastFramesRxOK.setDescription('A count of the data frames received by this Aggregator, from the Aggregation Ports that are \n         (or have been) members of the aggregation, that were addressed to an active group address \n         other than the broadcast address.')
f3LagStatsBroadcastFramesTxOK = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LagStatsBroadcastFramesTxOK.setReference('IEEE 802.3 Subclause 30.7.1.1.23')
if mibBuilder.loadTexts: f3LagStatsBroadcastFramesTxOK.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsBroadcastFramesTxOK.setDescription('A count of the broadcast data frames transmitted by this Aggregator on all \n          Aggregation Ports that are (or have been) members of the aggregation.')
f3LagStatsBroadcastFramesRxOK = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LagStatsBroadcastFramesRxOK.setReference('IEEE 802.3 Subclause 30.7.1.1.24')
if mibBuilder.loadTexts: f3LagStatsBroadcastFramesRxOK.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsBroadcastFramesRxOK.setDescription('A count of the broadcast data frames received by this Aggregator, from the \n          Aggregation Ports that are (or have been) members of the aggregation.')
f3LagStatsFramesWithTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LagStatsFramesWithTxErrors.setReference('IEEE 802.3 Subclause 30.7.1.1.27')
if mibBuilder.loadTexts: f3LagStatsFramesWithTxErrors.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsFramesWithTxErrors.setDescription('A count of data frames requested to be transmitted by this Aggregator that experienced \n          transmission errors on ports that are (or have been) members of the aggregation.')
f3LagStatsFramesWithRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LagStatsFramesWithRxErrors.setReference('IEEE 802.3 Subclause 30.7.1.1.28')
if mibBuilder.loadTexts: f3LagStatsFramesWithRxErrors.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsFramesWithRxErrors.setDescription('A count of data frames discarded on reception by all ports that are (or have been) members of \n         the aggregation, or that were discarded by the Collection function of the Aggregator, or that \n         were discarded by the Aggregator due to the detection of an illegal Slow Protocols PDU.')
f3LagStatsUnknownProtocolFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LagStatsUnknownProtocolFrames.setReference('IEEE 802.3 Subclause 30.7.1.1.29')
if mibBuilder.loadTexts: f3LagStatsUnknownProtocolFrames.setStatus('current')
if mibBuilder.loadTexts: f3LagStatsUnknownProtocolFrames.setDescription('A count of data frames discarded on reception by all ports that are (or have been) members of \n         the aggregation, due to the detection of an unknown Slow Protocols PDU.')
f3LagPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 3), )
if mibBuilder.loadTexts: f3LagPortTable.setStatus('current')
if mibBuilder.loadTexts: f3LagPortTable.setDescription('A list of entries corresponding to the LAG member ports.\n             Entries can be created/deleted in this table by management\n             application action.')
f3LagPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-LAG-MIB", "f3LagIndex"), (0, "F3-LAG-MIB", "f3LagPortIndex"))
if mibBuilder.loadTexts: f3LagPortEntry.setStatus('current')
if mibBuilder.loadTexts: f3LagPortEntry.setDescription('An entry containing information applicable to a particular\n             security user.')
f3LagPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: f3LagPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3LagPortIndex.setDescription('The unique identifier for each Aggregation Port.')
f3LagPortMember = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 3, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3LagPortMember.setStatus('current')
if mibBuilder.loadTexts: f3LagPortMember.setDescription('This is the OID of the LAG member port.')
f3LagPortLacpForceOutOfSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 3, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3LagPortLacpForceOutOfSync.setStatus('current')
if mibBuilder.loadTexts: f3LagPortLacpForceOutOfSync.setDescription('A boolean value which enables or disables the port from participating as an active port \n          in the Link Aggregation Group, causing the link (port) to transmit OUT_OF_SYNC via LACP.')
f3LagPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 3, 1, 4), AggPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LagPortState.setStatus('current')
if mibBuilder.loadTexts: f3LagPortState.setDescription('This object can be used to show the current status of the member port.\n        Active: the member port is ready for transporting and is in working now.\n        Standby: the member port is ready for transporting, but is not working now.')
f3LagPortStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 3, 1, 5), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3LagPortStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3LagPortStatsAction.setDescription('Allows the Manager to clear the LAG Port level statistics (dot3adAggPortStatsTable).')
f3LagPortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 3, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3LagPortStorageType.setStatus('current')
if mibBuilder.loadTexts: f3LagPortStorageType.setDescription('The type of storage configured for this entry.')
f3LagPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3LagPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3LagPortRowStatus.setDescription('The status of this row.\n          An entry MUST NOT exist in the active state unless all\n          objects in the entry have an appropriate value, as described\n          in the description clause for each writable object.\n\n          The values of f3LagPortRowStatus supported are\n          createAndGo(4) and destroy(6).  All mandatory attributes\n          must be specified in a single SNMP SET request with\n          f3LagPortRowStatus value as createAndGo(4).\n          Upon successful row creation, this object has a\n          value of active(1).\n\n          The f3LagPortRowStatus object may be modified if\n          the associated instance of this object is equal to active(1).')
f3LagServiceMapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 4), )
if mibBuilder.loadTexts: f3LagServiceMapTable.setStatus('current')
if mibBuilder.loadTexts: f3LagServiceMapTable.setDescription('A list of entries corresponding to the LAG service map entry.\n             Entries can be created/deleted in this table by management\n             application action.')
f3LagServiceMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-LAG-MIB", "f3LagIndex"), (0, "F3-LAG-MIB", "f3LagServiceMapIndex"))
if mibBuilder.loadTexts: f3LagServiceMapEntry.setStatus('current')
if mibBuilder.loadTexts: f3LagServiceMapEntry.setDescription('An entry containing information applicable to a particular\n             security user.')
f3LagServiceMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: f3LagServiceMapIndex.setStatus('current')
if mibBuilder.loadTexts: f3LagServiceMapIndex.setDescription('The unique identifier for each entry/row in the Service Map.')
f3LagServiceMapServiceObj = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 4, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3LagServiceMapServiceObj.setStatus('current')
if mibBuilder.loadTexts: f3LagServiceMapServiceObj.setDescription('This is the OID of the LAG service object.')
f3LagServiceMapLinkAssignMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 4, 1, 3), LinkAssignMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3LagServiceMapLinkAssignMode.setStatus('current')
if mibBuilder.loadTexts: f3LagServiceMapLinkAssignMode.setDescription('The assign mode value.')
f3LagServiceMapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 4, 1, 4), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3LagServiceMapStorageType.setStatus('current')
if mibBuilder.loadTexts: f3LagServiceMapStorageType.setDescription('The type of storage configured for this entry.')
f3LagServiceMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3LagServiceMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3LagServiceMapRowStatus.setDescription('The status of this row.\n          An entry MUST NOT exist in the active state unless all\n          objects in the entry have an appropriate value, as described\n          in the description clause for each writable object.\n\n          The values of f3LagServiceMapRowStatus supported are\n          createAndGo(4) and destroy(6).  All mandatory attributes\n          must be specified in a single SNMP SET request with\n          f3LagServiceMapRowStatus value as createAndGo(4).\n          Upon successful row creation, this object has a\n          value of active(1).\n\n          The f3LagServiceMapRowStatus object may be modified if\n          the associated instance of this object is equal to active(1).')
f3LagServiceMapMemberLinkList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3LagServiceMapMemberLinkList.setStatus('current')
if mibBuilder.loadTexts: f3LagServiceMapMemberLinkList.setDescription('The member link list value, describe by ifindex value string split with comma.')
f3LagServiceMapCurrentMemberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LagServiceMapCurrentMemberLink.setStatus('current')
if mibBuilder.loadTexts: f3LagServiceMapCurrentMemberLink.setDescription('The current member link ifindex value.')
f3LagCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 2, 1))
f3LagGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 2, 2))
f3LagCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 2, 1, 1)).setObjects(("F3-LAG-MIB", "f3LagObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3LagCompliance = f3LagCompliance.setStatus('current')
if mibBuilder.loadTexts: f3LagCompliance.setDescription('Describes the requirements for conformance to the f3Lag\n             group.')
f3LagObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 14, 2, 2, 1)).setObjects(("F3-LAG-MIB", "f3LagIndex"), ("F3-LAG-MIB", "f3LagIfIndex"), ("F3-LAG-MIB", "f3LagName"), ("F3-LAG-MIB", "f3LagProtocols"), ("F3-LAG-MIB", "f3LagLacpControl"), ("F3-LAG-MIB", "f3LagMode"), ("F3-LAG-MIB", "f3LagCcmDefectsDetectionEnabled"), ("F3-LAG-MIB", "f3LagStatsAction"), ("F3-LAG-MIB", "f3LagStorageType"), ("F3-LAG-MIB", "f3LagRowStatus"), ("F3-LAG-MIB", "f3LagIgnorePartnerColMaxDelay"), ("F3-LAG-MIB", "f3LagFrameDistAlgorithm"), ("F3-LAG-MIB", "f3LagDiscardWrongConversation"), ("F3-LAG-MIB", "f3LagStatsIndex"), ("F3-LAG-MIB", "f3LagStatsOctetsTxOK"), ("F3-LAG-MIB", "f3LagStatsOctetsRxOK"), ("F3-LAG-MIB", "f3LagStatsFramesTxOK"), ("F3-LAG-MIB", "f3LagStatsFramesRxOK"), ("F3-LAG-MIB", "f3LagStatsMulticastFramesTxOK"), ("F3-LAG-MIB", "f3LagStatsMulticastFramesRxOK"), ("F3-LAG-MIB", "f3LagStatsBroadcastFramesTxOK"), ("F3-LAG-MIB", "f3LagStatsBroadcastFramesRxOK"), ("F3-LAG-MIB", "f3LagStatsFramesWithTxErrors"), ("F3-LAG-MIB", "f3LagStatsFramesWithRxErrors"), ("F3-LAG-MIB", "f3LagStatsUnknownProtocolFrames"), ("F3-LAG-MIB", "f3LagPortIndex"), ("F3-LAG-MIB", "f3LagPortMember"), ("F3-LAG-MIB", "f3LagPortLacpForceOutOfSync"), ("F3-LAG-MIB", "f3LagPortState"), ("F3-LAG-MIB", "f3LagPortStatsAction"), ("F3-LAG-MIB", "f3LagPortStorageType"), ("F3-LAG-MIB", "f3LagPortRowStatus"), ("F3-LAG-MIB", "f3LagServiceMapIndex"), ("F3-LAG-MIB", "f3LagServiceMapServiceObj"), ("F3-LAG-MIB", "f3LagServiceMapLinkAssignMode"), ("F3-LAG-MIB", "f3LagServiceMapStorageType"), ("F3-LAG-MIB", "f3LagServiceMapRowStatus"), ("F3-LAG-MIB", "f3LagServiceMapMemberLinkList"), ("F3-LAG-MIB", "f3LagServiceMapCurrentMemberLink"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3LagObjectGroup = f3LagObjectGroup.setStatus('current')
if mibBuilder.loadTexts: f3LagObjectGroup.setDescription('A collection of objects used to manage the f3Lag\n             group.')
mibBuilder.exportSymbols("F3-LAG-MIB", f3LagServiceMapStorageType=f3LagServiceMapStorageType, f3LagPortState=f3LagPortState, f3LagPortEntry=f3LagPortEntry, f3LagStatsIndex=f3LagStatsIndex, f3LagEntry=f3LagEntry, f3LagGroups=f3LagGroups, f3LagDiscardWrongConversation=f3LagDiscardWrongConversation, f3LagStatsAction=f3LagStatsAction, f3LagPortStorageType=f3LagPortStorageType, AggPortState=AggPortState, f3LagRowStatus=f3LagRowStatus, f3LagStatsTable=f3LagStatsTable, f3LagStorageType=f3LagStorageType, f3LagStatsFramesWithRxErrors=f3LagStatsFramesWithRxErrors, f3LagCompliance=f3LagCompliance, f3LagIndex=f3LagIndex, f3LagPortStatsAction=f3LagPortStatsAction, f3LagServiceMapServiceObj=f3LagServiceMapServiceObj, f3LagServiceMapEntry=f3LagServiceMapEntry, f3LagServiceMapTable=f3LagServiceMapTable, f3LagIfIndex=f3LagIfIndex, f3LagTable=f3LagTable, f3LagStatsMulticastFramesRxOK=f3LagStatsMulticastFramesRxOK, f3LagMode=f3LagMode, f3LagStatsBroadcastFramesRxOK=f3LagStatsBroadcastFramesRxOK, f3LagServiceMapIndex=f3LagServiceMapIndex, f3LagName=f3LagName, LinkAssignMode=LinkAssignMode, f3LagStatsEntry=f3LagStatsEntry, LagFrameDistributionAlgorithmType=LagFrameDistributionAlgorithmType, f3LagLacpControl=f3LagLacpControl, f3LagIgnorePartnerColMaxDelay=f3LagIgnorePartnerColMaxDelay, f3LagStatsFramesRxOK=f3LagStatsFramesRxOK, PYSNMP_MODULE_ID=f3LagMIB, f3LagPortTable=f3LagPortTable, f3LagPortLacpForceOutOfSync=f3LagPortLacpForceOutOfSync, f3LagMIB=f3LagMIB, f3LagObjectGroup=f3LagObjectGroup, AggMode=AggMode, f3LagStatsFramesWithTxErrors=f3LagStatsFramesWithTxErrors, f3LagPortIndex=f3LagPortIndex, f3LagCcmDefectsDetectionEnabled=f3LagCcmDefectsDetectionEnabled, f3LagPortRowStatus=f3LagPortRowStatus, f3LagObjects=f3LagObjects, f3LagStatsUnknownProtocolFrames=f3LagStatsUnknownProtocolFrames, f3LagServiceMapMemberLinkList=f3LagServiceMapMemberLinkList, f3LagFrameDistAlgorithm=f3LagFrameDistAlgorithm, f3LagCompliances=f3LagCompliances, f3LagServiceMapCurrentMemberLink=f3LagServiceMapCurrentMemberLink, f3LagConformance=f3LagConformance, f3LagProtocols=f3LagProtocols, f3LagServiceMapLinkAssignMode=f3LagServiceMapLinkAssignMode, f3LagStatsBroadcastFramesTxOK=f3LagStatsBroadcastFramesTxOK, f3LagPortMember=f3LagPortMember, f3LagServiceMapRowStatus=f3LagServiceMapRowStatus, f3LagStatsOctetsRxOK=f3LagStatsOctetsRxOK, f3LagStatsFramesTxOK=f3LagStatsFramesTxOK, f3LagStatsOctetsTxOK=f3LagStatsOctetsTxOK, f3LagStatsMulticastFramesTxOK=f3LagStatsMulticastFramesTxOK)
