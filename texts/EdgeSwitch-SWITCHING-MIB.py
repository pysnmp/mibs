#
# PySNMP MIB module EdgeSwitch-SWITCHING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/edgeswitch/EdgeSwitch-SWITCHING-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 10:56:07 2024
# On host fv-az1986-135 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
AgentLogSeverity, = mibBuilder.importSymbols("EdgeSwitch-LOGGING-MIB", "AgentLogSeverity")
AgentPortMask, fastPath = mibBuilder.importSymbols("EdgeSwitch-REF-MIB", "AgentPortMask", "fastPath")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
dot1qFdbId, VlanIndex, VlanId, dot1qVlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qFdbId", "VlanIndex", "VlanId", "dot1qVlanIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, iso, ModuleIdentity, TimeTicks, IpAddress, Unsigned32, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, Counter32, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "ModuleIdentity", "TimeTicks", "IpAddress", "Unsigned32", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "Counter32", "Gauge32", "Counter64")
TruthValue, TextualConvention, DisplayString, RowStatus, MacAddress, DateAndTime, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus", "MacAddress", "DateAndTime", "PhysAddress")
fastPathSwitching = ModuleIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1))
fastPathSwitching.setRevisions(('2014-04-09 00:00', '2013-11-08 00:00', '2013-10-15 00:00', '2013-09-10 00:00', '2013-07-05 00:00', '2013-01-29 00:00', '2013-01-07 00:00', '2013-01-04 00:00', '2011-09-19 00:00', '2010-12-19 00:00', '2009-11-19 00:00', '2010-01-14 00:00', '2009-07-23 00:00', '2009-07-07 00:00', '2009-02-11 00:00', '2007-05-23 00:00', '2003-11-21 00:00', '2003-02-06 18:35',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathSwitching.setRevisionsDescriptions(('Added group agentDynamicAuthorizationGroup to the agentConfigGroup to support\n           Dynamic Authorization.', 'Added object agentUserAccessLevel and deprecated the object agentUserAccessMode\n           in favor of agentUserAccessLevel.', 'Object support modifications for LinuxHost systems.\n           Modified objects in agentServicePortConfigGroup that are dependent on the\n           L7_FEAT_SERVICE_PORT_IPV6_CONFIG preprocessor flag.', 'Added object agentSnmpServerPortNum to agentSnmpConfigGroup.\n           Added object agentTelnetMgmtPortNum to agentTelnetConfigGroup.\n           Added object agentHTTPWebMgmtPortNum to agentHTTPConfigGroup.', 'Modified object description agentSwitchDVlanTagPrimaryTPid.', 'Modified objects in agentServicePortConfigGroup that are dependent on the\n           L7_FEAT_SERVICE_PORT_IPV4_CONFIG preprocessor flag.', 'Added agentTransferDownloadDigitalSignatureVerifySelect in agentTransferDownloadGroup\n           Updated agentTransferDownloadDataType and added agentDigitalSignatureConfigGroup to \n           configure image and script digital signature validation', 'Added objects agentSwitchMbufsTotal and agentSwitchMbufsUsed in the group\n           agentSwitchMbufGroup and added group agentSwitchMbufConfigGroup in the\n           group agentConfigGroup to support Mbuf utilization rising and falling\n           threshold configuration. Also added traps agentSwitchMbufRisingThresholdTrap\n           and agentSwitchMbufFallingThresholdTrap in the fastPathSwitchingTraps.', 'Add agentTransferUploadFilename,agentTransferUploadRemoteFilename,\n           agentTransferDownloadFilename length restrcted to 31 characters', 'Add agentSwitchCutThroughGroup', 'Add agentBufferUsageGroup', 'Added localization support.', 'Added CPU Utilization MIB', 'DVLAN changes', 'User can be created with user name extending upto 64 characters', 'Ubiquiti branding related changes.', 'Revisions made for new release.', 'Updated for release.',))
if mibBuilder.loadTexts: fastPathSwitching.setLastUpdated('201404090000Z')
if mibBuilder.loadTexts: fastPathSwitching.setOrganization('Broadcom Inc')
if mibBuilder.loadTexts: fastPathSwitching.setContactInfo('')
if mibBuilder.loadTexts: fastPathSwitching.setDescription('The Ubiquiti Private MIB for FastPath Switching')
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight\n        ports, with the first octet specifying ports 1 through\n        8, the second octet specifying ports 9 through 16, etc.\n        Within each octet, the most significant bit represents\n        the lowest numbered port, and the least significant bit\n        represents the highest numbered port.  Thus, each port\n        of the bridge is represented by a single bit within the\n        value of this object.  If that bit has a value of '1'\n        then that port is included in the set of ports; the port\n        is not included if its bit has a value of '0'."
    status = 'current'

class VlanList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight\n        vlans, with the first octet specifying vlans 1 through\n        8, the second octet specifying vlans 9 through 16, etc.\n        Within each octet, the most significant bit represents\n        the lowest numbered vlan, and the least significant bit\n        represents the highest numbered vlan.  Thus, each vlan\n        supported is represented by a single bit within the\n        value of this object.  If that bit has a value of '1'\n        then the associated port is in that vlan; the port is\n        not included if the vlans bit has a value of '0'."
    status = 'current'

class Ipv6Address(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 addresses.\n                This is a binary string of 16 octets in network\n                byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class Ipv6AddressPrefix(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 address\n               prefixes. This is a binary string of up to 16\n               octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class Ipv6AddressIfIdentifier(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 address\n               interface identifiers. This is a binary string\n                of up to 8 octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class Ipv6IfIndex(TextualConvention, Integer32):
    description = "A unique value, greater than zero for each\n               internetwork-layer interface in the managed\n               system. It is recommended that values are assigned\n               contiguously starting from 1. The value for each\n               internetwork-layer interface must remain constant\n               at least from one re-initialization of the entity's\n               network management system to the next\n\n\n\n\n               re-initialization."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class Ipv6IfIndexOrZero(TextualConvention, Integer32):
    description = 'This textual convention is an extension of the\n                 Ipv6IfIndex convention.  The latter defines\n                 a greater than zero value used to identify an IPv6\n                 interface in the managed system.  This extension\n                 permits the additional value of zero.  The value\n                 zero is object-specific and must therefore be\n                 defined as part of the description of any object\n                 which uses this syntax.  Examples of the usage of\n                 zero might include situations where interface was\n                 unknown, or when none or all interfaces need to be\n                 referenced.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class PortId(TextualConvention, OctetString):
    description = 'This data type is used to model port ids.\n           This is a binary string of 2 octets.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

agentInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1))
agentInventoryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1))
agentInventorySysDescription = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySysDescription.setStatus('current')
if mibBuilder.loadTexts: agentInventorySysDescription.setDescription("The switch's Inventory system description.  ")
agentInventoryMachineType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineType.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMachineType.setDescription('Type of the Machine used in the Switch ')
agentInventoryMachineModel = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineModel.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMachineModel.setDescription("The switch's Machine Model. ")
agentInventorySerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySerialNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventorySerialNumber.setDescription('Serial number of the switch.')
agentInventoryFRUNumber = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryFRUNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventoryFRUNumber.setDescription('FRU Number of the switch')
agentInventoryMaintenanceLevel = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMaintenanceLevel.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMaintenanceLevel.setDescription("The switch's Inventory Maintenance Level")
agentInventoryPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryPartNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventoryPartNumber.setDescription("The switch's Inventory Part Number")
agentInventoryManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryManufacturer.setStatus('current')
if mibBuilder.loadTexts: agentInventoryManufacturer.setDescription('Name of the Manufacturer of this unit')
agentInventoryBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentInventoryBurnedInMacAddress.setDescription('Burned-In MAC Address')
agentInventoryOperatingSystem = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryOperatingSystem.setStatus('current')
if mibBuilder.loadTexts: agentInventoryOperatingSystem.setDescription('Operating System running on this unit')
agentInventoryNetworkProcessingDevice = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryNetworkProcessingDevice.setStatus('current')
if mibBuilder.loadTexts: agentInventoryNetworkProcessingDevice.setDescription('Network Processing Device for this unit')
agentInventoryAdditionalPackages = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryAdditionalPackages.setStatus('current')
if mibBuilder.loadTexts: agentInventoryAdditionalPackages.setDescription('Lists additional functional packages available on this unit.')
agentInventorySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: agentInventorySoftwareVersion.setDescription('Lists the version of software loaded on this unit.')
agentInventoryHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: agentInventoryHardwareVersion.setDescription('Lists the version of hardware of this unit. This is a\n                     platform dependant string.')
agentTrapLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2))
agentTrapLogTotal = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotal.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTotal.setDescription('The total number of traps sent since last reset.')
agentTrapLogTotalSinceLastViewed = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotalSinceLastViewed.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTotalSinceLastViewed.setDescription('The number of traps sent since last viewed.')
agentTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2, 4), )
if mibBuilder.loadTexts: agentTrapLogTable.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTable.setDescription('Agent Trap Log')
agentTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2, 4, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentTrapLogIndex"))
if mibBuilder.loadTexts: agentTrapLogEntry.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogEntry.setDescription('Agent trap log entry')
agentTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogIndex.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogIndex.setDescription('Unique index of trap entry')
agentTrapLogSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogSystemTime.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogSystemTime.setDescription('System uptime when trap was sent.\n                     This entry shows how long the system has been up when the trap occurred.')
agentTrapLogTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTrap.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTrap.setDescription('Description of the trap sent.')
agentSupportedMibTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 3), )
if mibBuilder.loadTexts: agentSupportedMibTable.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibTable.setDescription('Supported MIB table')
agentSupportedMibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 3, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSupportedMibIndex"))
if mibBuilder.loadTexts: agentSupportedMibEntry.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibEntry.setDescription('Supported MIB entry')
agentSupportedMibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibIndex.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibIndex.setDescription('Unique index of the Supported MIB entry')
agentSupportedMibName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibName.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibName.setDescription('The name of the MIB (RFC or IEEE) that is supported.')
agentSupportedMibDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibDescription.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibDescription.setDescription('Description of the MIB (RFC or IEEE) that is supported.')
agentSwitchCpuProcessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4))
agentSwitchCpuProcessMemFree = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 1), Integer32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessMemFree.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessMemFree.setDescription(' The total memory free for utilization in KBytes.')
agentSwitchCpuProcessMemAvailable = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 2), Integer32().clone(2)).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessMemAvailable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessMemAvailable.setDescription('  The total memory available in KBytes.')
agentSwitchCpuProcessRisingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessRisingThreshold.setDescription('The CPU Rising utilization threshold in percentage. A zero percent \n                    threshold indicates CPU Utilization Notification feature is disabled. \n                    A notification is triggered when the total CPU utilization exceeds this \n                    threshold over the configured Rising threshold interval. \n                    If the Rising threshold is configured to be less than the Falling threshold, \n                    the Falling threshold is set equal to the Rising threshold.')
agentSwitchCpuProcessRisingThresholdInterval = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 86400), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessRisingThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessRisingThresholdInterval.setDescription('The CPU Rising threshold interval in seconds. \n                    The time interval is configured in multiples of 5 seconds. \n                    A zero Rising interval indicates CPU Utilization Notification feature is disabled.')
agentSwitchCpuProcessFallingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessFallingThreshold.setDescription("The CPU Falling utilization threshold in percentage. Configuration of this \n                    object value is optional. Value '0' is not allowed for configuration, \n                    if the Rising threshold is non-zero. If the Falling threshold is configured \n                    to be greater than the Rising threshold, the Rising threshold is set equal \n                    to the Falling threshold. If the Falling threshold is not configured, \n                    it takes the same value as the Rising threshold. \n                    A notification is triggered when the total CPU utilization \n                    falls below this threshold over the configured Falling threshold interval.")
agentSwitchCpuProcessFallingThresholdInterval = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 86400), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessFallingThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessFallingThresholdInterval.setDescription("The CPU Falling threshold interval in seconds. Configuration of this object \n                    value is optional. Value '0' is not allowed for configuration, \n                    if the Rising interval is non-zero. If the Falling interval \n                    is not configured, it takes the same value as the Rising interval. \n                    The time interval is configured in multiples of 5 seconds.")
agentSwitchCpuProcessFreeMemoryThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessFreeMemoryThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessFreeMemoryThreshold.setDescription('The CPU Free Memory threshold in kilobytes. A zero threshold value \n                    indicates the CPU Free Memory Notification feature is disabled. \n                    Notifications are triggered when the CPU Free Memory falls below the \n                    configured threshold and when it rises to 10% above the configured threshold.')
agentSwitchCpuProcessTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 8), )
if mibBuilder.loadTexts: agentSwitchCpuProcessTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessTable.setDescription(' A table of Task and cpu utilization.')
agentSwitchCpuProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 8, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchCpuProcessIndex"))
if mibBuilder.loadTexts: agentSwitchCpuProcessEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessEntry.setDescription('Represents entry for a Task Table.')
agentSwitchCpuProcessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchCpuProcessIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessIndex.setDescription('Unique index of process table')
agentSwitchCpuProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessName.setDescription('Name of the process')
agentSwitchCpuProcessPercentageUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessPercentageUtilization.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessPercentageUtilization.setDescription('CPU utilization per task in Percentage over a period of 5, 60, 300 seconds, \n                     and the Rising threshold period also in seconds, if configured.')
agentSwitchCpuProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessId.setDescription('Process ID')
agentSwitchCpuProcessTotalUtilization = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessTotalUtilization.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessTotalUtilization.setDescription('Total CPU utilization over a period of 5, 60, 300 seconds, \n                    and the Rising threshold period also in seconds, if configured.')
agentSwitchCpuCosQDropGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 6))
agentSwitchCpuCosQDropTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 6, 1), )
if mibBuilder.loadTexts: agentSwitchCpuCosQDropTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuCosQDropTable.setDescription('Table lists the number of packets dropped at each CoS queue for the CPU.')
agentSwitchCpuCosQDropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 6, 1, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchCpuCosQIndex"))
if mibBuilder.loadTexts: agentSwitchCpuCosQDropEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuCosQDropEntry.setDescription('Packet drop statistics for a CPU CoS queue.')
agentSwitchCpuCosQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentSwitchCpuCosQIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuCosQIndex.setDescription('Unique index of a CPU CoS queue.')
agentSwitchCpuCosQDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuCosQDrops.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuCosQDrops.setDescription('Number of packets dropped at this CPU CoS queue because \n                     the queue was full.')
agentSwitchMbufGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7))
agentSwitchMbufsTotal = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufsTotal.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufsTotal.setDescription('Total number of message buffers in the system.')
agentSwitchMbufsFree = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufsFree.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufsFree.setDescription('Number of message buffers currently available.')
agentSwitchMbufsUsed = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufsUsed.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufsUsed.setDescription('Number of message buffers currently in use.')
agentSwitchMbufTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 2), )
if mibBuilder.loadTexts: agentSwitchMbufTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufTable.setDescription('Table lists information about message buffer allocation for packets arriving at the CPU.')
agentSwitchMbufEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchMbufPrio"))
if mibBuilder.loadTexts: agentSwitchMbufEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufEntry.setDescription('Information on a specific class of message buffers.')
agentSwitchMbufPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentSwitchMbufPrio.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufPrio.setDescription('Message buffer priority.')
agentSwitchMbufClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufClassName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufClassName.setDescription('Name of this class of message buffer.')
agentSwitchMbufAllocAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufAllocAttempts.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufAllocAttempts.setDescription('Number of times the system tried to allocate a message \n                     buffer allocation of this class.')
agentSwitchMbufAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufAllocFails.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufAllocFails.setDescription('Number of message buffer allocation failures for this \n                     class of message buffer.')
agentConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2))
agentCLIConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1))
agentLoginSessionTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: agentLoginSessionTable.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionTable.setDescription("A table of the switch's login session")
agentLoginSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentLoginSessionIndex"))
if mibBuilder.loadTexts: agentLoginSessionEntry.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionEntry.setDescription('Login Session Entry')
agentLoginSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIndex.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionIndex.setDescription('Agent Login Session Index of the switch')
agentLoginSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionUserName.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionUserName.setDescription('Agent Login Session UserName of the switch')
agentLoginSessionIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: agentLoginSessionIPAddress.setDescription('Agent Login Session IP Address of the switch')
agentLoginSessionConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("serial", 1), ("telnet", 2), ("ssh", 3), ("http", 4), ("https", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionConnectionType.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionConnectionType.setDescription('Agent Login Session Connection Type of the switch')
agentLoginSessionIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIdleTime.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionIdleTime.setDescription('Agent Login Session Idle Time of the switch')
agentLoginSessionSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionSessionTime.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionSessionTime.setDescription('Agent Login Session Time of the switch')
agentLoginSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLoginSessionStatus.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionStatus.setDescription('Status of the user.\n                     active(1)    - This connection is active.\n                     destroy(6)   - Set to this value to disconnect this user.')
agentLoginSessionInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionInetAddressType.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionInetAddressType.setDescription('Type of address agentLoginSessionInetAddress is returning.\n                     Can be either unknown(0), ipv4(1), or ipv6 (2).  Will return\n                     unknown(0) in the case of a serial login.')
agentLoginSessionInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionInetAddress.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionInetAddress.setDescription('Inet Address of the connecting the user is logging in with.\n                     Will return a zero-length string in the case of a serial login.')
agentTelnetConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 2))
agentTelnetLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetLoginTimeout.setStatus('current')
if mibBuilder.loadTexts: agentTelnetLoginTimeout.setDescription('Telnet login timeout (minutes)\n\n                     Config telnet timeout  will set the telnet session timeout value.\n                     A session is active as long as the session has not remained idle for\n                     the value set. Specify a value from 1 to 160.\n                     Note: Changing the timeout value for active\n                     sessions does not become effective until the session is reaccessed.\n                     Any keystroke will also activate the new timeout duration.')
agentTelnetMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetMaxSessions.setStatus('current')
if mibBuilder.loadTexts: agentTelnetMaxSessions.setDescription('Maximum number of Telnet Sessions\n\n                     Config telnet maxsessions is an integer value that specifies the\n                     maximum number of telnet sessions that can be established.\n                     If the value is 0, no Telnet session can be established.')
agentTelnetAllowNewMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetAllowNewMode.setStatus('current')
if mibBuilder.loadTexts: agentTelnetAllowNewMode.setDescription('Allow new telnet sessions (enable or disable)\n                     Config telnet disable means that no new Telnet sessions are to be\n                     established. Any already established session remains active until\n                     the session is ended or an abnormal network error ends it.\n                     ')
agentTelnetMgmtPortNum = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetMgmtPortNum.setStatus('current')
if mibBuilder.loadTexts: agentTelnetMgmtPortNum.setDescription("Get/Set the TCP port number that the telnet server listens to for incoming\n                     requests. The port number is an integer value from 1 to 65535. Before setting\n                     this object, check your system (e.g. using 'netstat') to make sure the desired\n                     port number is not currently being used by any other service. The default\n                     value for this object is 23.\n\n                     Note that existing telnet login sessions are not affected by a change in value of\n                     this object, although establishment of any new telnet sessions must use the new \n                     port number.")
agentUserConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3))
agentUserConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserConfigCreate.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigCreate.setDescription("Create a new user.\n                     When set with a non-empty string, a new user with that name will be created.\n                     This object will only return an empty string.\n                     This string is limited to alpha-numeric strings (uncluding the '-' and '_' characters).")
agentUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: agentUserConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigTable.setDescription('User Config Table')
agentUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentUserIndex"))
if mibBuilder.loadTexts: agentUserConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigEntry.setDescription('User Config Entry')
agentUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentUserIndex.setStatus('current')
if mibBuilder.loadTexts: agentUserIndex.setDescription('Agent User Config Index')
agentUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserName.setStatus('current')
if mibBuilder.loadTexts: agentUserName.setDescription("Agent User Name.\n                     This string is limited to alpha-numeric strings (including the '-' and '_' characters).")
agentUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserPassword.setStatus('current')
if mibBuilder.loadTexts: agentUserPassword.setDescription('Agent User Password\n                     This object will return an empty string even if a password is set.')
agentUserAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("suspended", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAccessMode.setStatus('deprecated')
if mibBuilder.loadTexts: agentUserAccessMode.setDescription('Agent User Access Mode.\n                      This object is deprecated in favor of agentUserAccessLevel.')
agentUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserStatus.setStatus('current')
if mibBuilder.loadTexts: agentUserStatus.setDescription('Agent User Status.\n                     active(1)  - This user account is active.\n                     destroy(6) - Set to this value to remove this user account.')
agentUserAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hmacmd5", 2), ("hmacsha", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationType.setDescription('SNMPv3 User Authentication.  The user passsword must be set\n                     to a string greater than or equal to 8 characters for this to be\n                     set to anything but none(1).\n\n                     none(1)      - no authentication used\n                     hmacmd5(1)   - Use HMAC-MD5 authentication\n                     hmacsha(1)   - Use HMAC-SHA authentication')
agentUserEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserEncryptionType.setStatus('current')
if mibBuilder.loadTexts: agentUserEncryptionType.setDescription('SNMPv3 User Encryption\n                     Can not be set to des(2) if agentUserAuthenticationType is set to\n                     none(1).\n\n                     none(1) - no encryption used\n                     des(2)  - DES encryption used')
agentUserEncryptionPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserEncryptionPassword.setStatus('current')
if mibBuilder.loadTexts: agentUserEncryptionPassword.setDescription('SNMPv3 User Encryption Password\n                     This object will return an empty string even if a password is\n                     set. agentUserEncryptionType must be set to des(2) before this\n                     object can be configured.\n                     This object will return an empty string even if a password is set.')
agentUserLockoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUserLockoutStatus.setStatus('current')
if mibBuilder.loadTexts: agentUserLockoutStatus.setDescription('Displays whether the user account is locked due to excessive failed login attempts.')
agentUserPasswordExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUserPasswordExpireTime.setStatus('current')
if mibBuilder.loadTexts: agentUserPasswordExpireTime.setDescription("Date and time when the user's password expires (past or present).  Only valid when\n                      password aging is enabled.")
agentUserAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAccessLevel.setStatus('current')
if mibBuilder.loadTexts: agentUserAccessLevel.setDescription('Agent User Access Level. Supported values are 0, 1 and 15.')
agentSerialGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 5))
agentSerialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialTimeout.setStatus('current')
if mibBuilder.loadTexts: agentSerialTimeout.setDescription('agentSerialTimeout specifies the maximum connect time(in minutes)\n                     without console activity. A value of 0 indicates that a console can\n                     be connected indefinitely. The time range is 0 to 160. ')
agentSerialBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("baud-1200", 1), ("baud-2400", 2), ("baud-4800", 3), ("baud-9600", 4), ("baud-19200", 5), ("baud-38400", 6), ("baud-57600", 7), ("baud-115200", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialBaudrate.setStatus('current')
if mibBuilder.loadTexts: agentSerialBaudrate.setDescription(' agentSerialBaudrate specifies the current baud rate at which\n                       the serial port will try to connect. The available values\n                       are 1200, 2400, 4800, 9600, 19200, 38400,57600, and 115200 baud. ')
agentSerialCharacterSize = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialCharacterSize.setStatus('current')
if mibBuilder.loadTexts: agentSerialCharacterSize.setDescription('agentSerialCharacterSize  specifies the number of bits in\n                      a character. The number of bits is always 8.')
agentSerialHWFlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialHWFlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSerialHWFlowControlMode.setDescription('agentSerialHardwareFlowControl specifies whether hardware\n                      flow-control is enabled or disabled. Hardware Flow Control is\n                      always disabled.')
agentSerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialStopBits.setStatus('current')
if mibBuilder.loadTexts: agentSerialStopBits.setDescription(' agentSerialStopBits specifies the number of Stop bits per\n                      character. The number of Stop bits is always 1.')
agentSerialParityType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialParityType.setStatus('current')
if mibBuilder.loadTexts: agentSerialParityType.setDescription(' agentSerialParityType specifies the Parity Method used on\n                     the Serial Port. The Parity Method is always None. ')
agentPasswordManagementConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6))
agentPasswordManagementMinLength = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(8, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementMinLength.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementMinLength.setDescription('Minimum length for user passwords\n                     All new local user passwords must be at least this many characters in length.\n                     ')
agentPasswordManagementHistory = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementHistory.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementHistory.setDescription('The number of previous passwords to store for prevention of password reuse.\n                     This ensures that each user does not reuse passwords often.  A value of 0\n                     indicates that no previous passwords will be stored.\n                     ')
agentPasswordManagementAging = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementAging.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementAging.setDescription('The maximum time that user passwords are valid, in days, from the time the\n                     password is set.  Once a password expires, the user will be required to enter\n                     a new password following the first login after password expiration.\n                     A value of 0 indicates that passwords never expire.\n                     ')
agentPasswordManagementLockAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementLockAttempts.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementLockAttempts.setDescription("The number of allowable failed local authentication attempts before the user's\n                     account is locked.  A value of 0 indicates that user accounts will never be locked.\n                     ")
agentPasswordManagementPasswordStrengthCheck = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementPasswordStrengthCheck.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementPasswordStrengthCheck.setDescription('Configures Password Strength Check feature.')
agentPasswordManagementStrengthMinUpperCase = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinUpperCase.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinUpperCase.setDescription('The number of minimum allowable uppercase letters in a \n                      password. Minimum of 0 means no restriction on that set \n                      of characters.')
agentPasswordManagementStrengthMinLowerCase = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinLowerCase.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinLowerCase.setDescription('The number of minimum allowable lowercase letters in a \n                      password. Minimum of 0 means no restriction on that set \n                      of characters.')
agentPasswordManagementStrengthMinNumericNumbers = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinNumericNumbers.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinNumericNumbers.setDescription('The number of minimum allowable numeric numbers in a \n                      password. Minimum of 0 means no restriction on that set \n                      of characters.')
agentPasswordManagementStrengthMinSpecialCharacters = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinSpecialCharacters.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinSpecialCharacters.setDescription('The number of minimum allowable special characters in a \n                      password. Minimum of 0 means no restriction on that set \n                      of characters.')
agentPasswordManagementStrengthMaxConsecutiveCharacters = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMaxConsecutiveCharacters.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMaxConsecutiveCharacters.setDescription('The number of maximum consecutive characters can be \n                      present in a password. Maximum of 0 means disabling the \n                      restriction.')
agentPasswordManagementStrengthMaxRepeatedCharacters = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMaxRepeatedCharacters.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMaxRepeatedCharacters.setDescription('The number of maximum repeated characters can be present \n                      in a password. Maximum of 0 means disabling the \n                      restriction.')
agentPasswordManagementStrengthMinCharacterClasses = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinCharacterClasses.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinCharacterClasses.setDescription('The number of minimum allowable character classes in a \n                      password. Minimum of 0 means no restriction on that set \n                      of characters.')
agentPasswordMgmtLastPasswordSetResult = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPasswordMgmtLastPasswordSetResult.setStatus('current')
if mibBuilder.loadTexts: agentPasswordMgmtLastPasswordSetResult.setDescription('Retrieves the last password set Result.')
agentPasswordManagementStrengthExcludeKeywordTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 15), )
if mibBuilder.loadTexts: agentPasswordManagementStrengthExcludeKeywordTable.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthExcludeKeywordTable.setDescription('Represents Password strength restricted keywords from the configurable password.')
agentPasswordManagementStrengthExcludeKeywordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 15, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentPasswordMgmtStrengthExcludeKeyword"))
if mibBuilder.loadTexts: agentPasswordManagementStrengthExcludeKeywordEntry.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthExcludeKeywordEntry.setDescription('Represents Password strength restricted keywords from the configurable password.')
agentPasswordMgmtStrengthExcludeKeyword = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 15, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPasswordMgmtStrengthExcludeKeyword.setStatus('current')
if mibBuilder.loadTexts: agentPasswordMgmtStrengthExcludeKeyword.setDescription('Specifies the given keyword string restricted from the configurable password.')
agentPasswordMgmtStrengthExcludeKeywordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 15, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentPasswordMgmtStrengthExcludeKeywordStatus.setStatus('current')
if mibBuilder.loadTexts: agentPasswordMgmtStrengthExcludeKeywordStatus.setDescription('Create the Exclude Keyword Index and configure (Create or Destroy) the keyword to it.')
agentIASUserConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7))
agentIASUserConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserConfigCreate.setStatus('current')
if mibBuilder.loadTexts: agentIASUserConfigCreate.setDescription("Create a new user.\n                             When set with a non-empty string, a new user with that name will be created.\n                             This object will only return an empty string.\n                             This string is limited to alpha-numeric strings (including the '-' and '_' characters).")
agentIASUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7, 2), )
if mibBuilder.loadTexts: agentIASUserConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentIASUserConfigTable.setDescription('A table for dot1x Client details and associated functionality.')
agentIASUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentIASUserIndex"))
if mibBuilder.loadTexts: agentIASUserConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentIASUserConfigEntry.setDescription('Represents entry for port config table.')
agentIASUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)))
if mibBuilder.loadTexts: agentIASUserIndex.setStatus('current')
if mibBuilder.loadTexts: agentIASUserIndex.setDescription('IAS user config index. ')
agentIASUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserName.setStatus('current')
if mibBuilder.loadTexts: agentIASUserName.setDescription("IAS user name.\n                         This string is limited to alpha-numeric strings (including '-' and '_'\n                         characters). ")
agentIASUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserPassword.setStatus('current')
if mibBuilder.loadTexts: agentIASUserPassword.setDescription('IAS user password.')
agentIASUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserStatus.setStatus('current')
if mibBuilder.loadTexts: agentIASUserStatus.setDescription('IAS User Status.\n                             active(1)  - This user account is active.\n                             destroy(6) - Set to this value to remove this user account.')
agentCLIBannerMsgConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 8))
agentCLIBannerMessage = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCLIBannerMessage.setStatus('current')
if mibBuilder.loadTexts: agentCLIBannerMessage.setDescription("Banner message string.  To enter the banner message \n                     in multiple lines, separate each line by '\\r\\n'.\n                     The maximum printable characters is limited to 2000 characters.")
agentLagConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2))
agentLagConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagConfigCreate.setStatus('current')
if mibBuilder.loadTexts: agentLagConfigCreate.setDescription('Agent LAG Create.\n                     When this object is set with a non-empty string, a new LAG\n                     will be created if possible, with the entered string as its\n                     name.\n                     Get operation on this MIB object returns a null-value, as\n                     for the purpose of viewing the LAG name, the user should\n                     perform the traversal of agentLagSummaryConfigTable. For\n                     this reason the get operation on this object\n                     agentLagConfigCreate becomes insignificant.\n')
agentLagSummaryConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: agentLagSummaryConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryConfigTable.setDescription("A summary table of the switch's LAG config entries")
agentLagSummaryConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentLagSummaryLagIndex"))
if mibBuilder.loadTexts: agentLagSummaryConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryConfigEntry.setDescription("Switch's LAG config entry")
agentLagSummaryLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryLagIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryLagIndex.setDescription('Agent LAG IfIndex.\n\n                     This value corresponds with the LAG interface in the ifTable.')
agentLagSummaryName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryName.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryName.setDescription('Agent LAG Name.\n\n                     The associated name of the LAG used during creation. Duplicate names are not allowed.')
agentLagSummaryFlushTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryFlushTimer.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryFlushTimer.setDescription('Agent LAG FlushTimer.')
agentLagSummaryLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryLinkTrap.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryLinkTrap.setDescription('Agent LAG LinkTrap.\n\n                     Configures sending Link Up/Down traps when the LAG interface goes Up or Down.')
agentLagSummaryAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryAdminMode.setDescription('Agent LAG AdminMode.\n\n                     Administratively enables or disables this LAG interface.')
agentLagSummaryStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStpMode.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryStpMode.setDescription('Agent LAG StpMode\n\n                     Administratively enables or disables STP on this interface.')
agentLagSummaryAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryAddPort.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryAddPort.setDescription('Agent LAG AddPort.\n\n                     Set to a non 0 value to add a port to the LAG.  Values correspond to\n                     ifIndex values in the ifTable.\n\n                     Note: agentPortType for the port to be added must be full duplex\n                     and the same speed as previously added port(s), if any.')
agentLagSummaryDeletePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryDeletePort.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryDeletePort.setDescription('Agent LAG DeletePort.\n\n                     Set to a non 0 value to remove a port from the LAG.  Values correspond to\n                     ifIndex values in the ifTable.')
agentLagSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStatus.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryStatus.setDescription('Agent LAG Status.\n\n                     active(1)  - This LAG is enabled.\n                     destroy(6) - Set to this value to remove the LAG.')
agentLagSummaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryType.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryType.setDescription('Agent LAG Type.\n\n                     static(1)  - This LAG is staticly maintained.\n                     dynamic(2) - This LAG is dynamicly maintained.')
agentLagSummaryStaticCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStaticCapability.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryStaticCapability.setDescription('Agent LAG Static Capability\n\n                     enable(1) - Static capability is enabled for this LAG interface\n                     disable(2) - Static capability is disabled for this LAG interface')
agentLagSummaryHashOption = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryHashOption.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryHashOption.setDescription('LAG Hashing Option.\n\n                       Valid values correspond to\n\n                      1 (=Source MAC, VLAN, EtherType, and incoming port\n                             associated with the packet)\n                      2 (=Destination MAC, VLAN, EtherType, and incoming port\n                             associated with the packet)\n                      3 (=Source/Destination MAC, VLAN, EtherType, and incoming\n                             port associated with the packet)\n                      4 (=Source IP and Source TCP/UDP fields of the packet)\n                      5 (=Destination IP and Destination TCP/UDP Port fields\n                             of the packet)\n                      6 (=Source/Destination IP and source/destination TCP/UDP\n                             Port fields of the packet)\n                      7 (=Enhanced hashing mode)\n\n                      Support for particular options may vary by device.')
agentLagSummaryMinimumActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryMinimumActiveLinks.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryMinimumActiveLinks.setDescription(' Agent LAG Threshold.\n                     This configures the threshold(i.e minimum number of active ports)\n                     value for trunk port .')
agentLagSummaryLocalPreferenceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryLocalPreferenceMode.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryLocalPreferenceMode.setDescription("Agent LAG Local Preference Mode.\n\n                     Enables or disables the LAG interface's Local Preference Mode.")
agentLagSummaryMtuValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1518, 12288)).clone(1518)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryMtuValue.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryMtuValue.setDescription('Configures the MTU value for this LAG interface. The maximum value is\n                     dependent on the platform.')
agentLagSummaryPortCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryPortCounter.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryPortCounter.setDescription('LAG port flap counter.')
agentLagDetailedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 3), )
if mibBuilder.loadTexts: agentLagDetailedConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedConfigTable.setDescription("A detailed table of the switch's LAG config entries")
agentLagDetailedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 3, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentLagDetailedLagIndex"), (0, "EdgeSwitch-SWITCHING-MIB", "agentLagDetailedIfIndex"))
if mibBuilder.loadTexts: agentLagDetailedConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedConfigEntry.setDescription("Switch's LAG config entry")
agentLagDetailedLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedLagIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedLagIndex.setDescription('LAG index')
agentLagDetailedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedIfIndex.setDescription('LAG port index')
agentLagDetailedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortSpeed.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedPortSpeed.setDescription('LAG port speed.  See agentPortType for a description and list\n                      of valid values.')
agentLagDetailedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortStatus.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedPortStatus.setDescription('LAG port status.\n\n                     active(1)   - Actively participating in the LAG.\n                     inactive(2) - Not participating in the LAG.')
agentLagDetailedPortCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortCounter.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedPortCounter.setDescription('LAG port flap counter.')
agentLagConfigStaticCapability = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigStaticCapability.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagConfigStaticCapability.setDescription('Agent LAG Static Capability.\n                     Configures whether Static LAGs are supported on this device.')
agentLagConfigGroupHashOption = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigGroupHashOption.setStatus('current')
if mibBuilder.loadTexts: agentLagConfigGroupHashOption.setDescription('LAG Hashing Option.\n\n                       Valid values correspond to\n\n                      1 (=Source MAC, VLAN, EtherType, and incoming port\n                             associated with the packet)\n                      2 (=Destination MAC, VLAN, EtherType, and incoming port\n                             associated with the packet)\n                      3 (=Source/Destination MAC, VLAN, EtherType, and incoming\n                             port associated with the packet)\n                      4 (=Source IP and Source TCP/UDP fields of the packet)\n                      5 (=Destination IP and Destination TCP/UDP Port fields\n                             of the packet)\n                      6 (=Source/Destination IP and source/destination TCP/UDP\n                             Port fields of the packet)\n                      7 (=Enhanced hashing mode)\n\n                      Support for particular options may vary by device.\n\n                      In BCM 53115 device only options 1 to 3 are support and only\n                      MAC address associated with the packet is used. ')
agentLagClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOperation", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagClearCounters.setStatus('current')
if mibBuilder.loadTexts: agentLagClearCounters.setDescription('Clear LAG stats. Will always return 0 when read.')
agentNetworkConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3))
agentNetworkIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIPAddress.setDescription("The switch's network ip address")
agentNetworkSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentNetworkSubnetMask.setDescription("The switch's network subnet mask")
agentNetworkDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDefaultGateway.setDescription("The switch's network default gateway")
agentNetworkBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkBurnedInMacAddress.setDescription("The switch's network Burned-In MAC address")
agentNetworkLocalAdminMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 5), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkLocalAdminMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkLocalAdminMacAddress.setDescription("The switch's network locally administered MAC address")
agentNetworkMacAddressType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("burned-in", 1), ("local", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkMacAddressType.setStatus('current')
if mibBuilder.loadTexts: agentNetworkMacAddressType.setDescription("The switch's network Mac Address Type")
agentNetworkConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentNetworkConfigProtocol.setDescription("The switch's network config protocol")
agentNetworkConfigProtocolDhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOperation", 0), ("renew", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkConfigProtocolDhcpRenew.setStatus('current')
if mibBuilder.loadTexts: agentNetworkConfigProtocolDhcpRenew.setDescription("The switch's network config protocol dhcp is renewed. Will always return 0 when read.")
agentNetworkWebMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkWebMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentNetworkWebMode.setDescription("The switch's network config protocol on next bootup\n\n                     This object has been obsoleted by agentHTTPWebMode.")
agentNetworkJavaMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkJavaMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentNetworkJavaMode.setDescription('Configures the use of the Java interface through the Web.\n\n                     This object has been obsoleted by agentHTTPJavaMode.')
agentNetworkMgmtVlan = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkMgmtVlan.setStatus('current')
if mibBuilder.loadTexts: agentNetworkMgmtVlan.setDescription('The VLAN ID through which the switch can be managed using the\n                     agentNetworkIPAddress')
agentNetworkIpv6AdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIpv6AdminMode.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AdminMode.setDescription('The network port IPv6 administrative state')
agentNetworkIpv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 13), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIpv6Gateway.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6Gateway.setDescription('The network port IPv6 Gateway Address')
agentNetworkIpv6AddrTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 14), )
if mibBuilder.loadTexts: agentNetworkIpv6AddrTable.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrTable.setDescription('The list of IPv6 address prefixes\n                   for the network port.')
agentNetworkIpv6AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 14, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentNetworkIpv6AddrPrefix"))
if mibBuilder.loadTexts: agentNetworkIpv6AddrEntry.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrEntry.setDescription('An interface entry containing objects of\n                 a particular IPv6 address prefix')
agentNetworkIpv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 14, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefix.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefix.setDescription('The service port IPv6 Address Prefix')
agentNetworkIpv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefixLength.setDescription('The service port IPv6 Address Prefix Length')
agentNetworkIpv6AddrEuiFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkIpv6AddrEuiFlag.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrEuiFlag.setDescription('The service port IPv6 Eui Flag')
agentNetworkIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 14, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrStatus.setDescription('')
agentNetworkIpv6AddressAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIpv6AddressAutoConfig.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddressAutoConfig.setDescription('The ipv6 address autoconfig allows the device to perform IPv6\n                     stateless address auto-configuration to discover prefixes on the\n                     link and then to add the eui-64 based addresses to the network interface.')
agentNetworkIpv6ConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIpv6ConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6ConfigProtocol.setDescription("The switch's network IPv6 config protocol")
agentNetworkDhcp6ClientDuid = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6ClientDuid.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6ClientDuid.setDescription(' The DHCPv6 Client unique DUID. This value cannot be modified')
agentNetworkStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18))
agentNetworkDhcp6ADVERTISEMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6ADVERTISEMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6ADVERTISEMessagesReceived.setDescription(' The no. of DHCPv6 messages of type ADVERTISE that have been received by the DHCPv6\n       client on the network port.')
agentNetworkDhcp6REPLYMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6REPLYMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6REPLYMessagesReceived.setDescription(' The no. of DHCPv6 messages of type REPLY that have been received by the DHCPv6\n       client on the network port.')
agentNetworkDhcp6ADVERTISEMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6ADVERTISEMessagesDiscarded.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6ADVERTISEMessagesDiscarded.setDescription(' The no. of DHCPv6 messages of type ADVERTISE that have been discarded by the DHCPv6\n       client on the network port.')
agentNetworkDhcp6REPLYMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6REPLYMessagesDiscarded.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6REPLYMessagesDiscarded.setDescription(' The no. of DHCPv6 messages of type REPLY that have been discarded by the DHCPv6\n       client on the network port.')
agentNetworkDhcp6MalformedMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6MalformedMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6MalformedMessagesReceived.setDescription(' The no. of DHCPv6 messages received malformed by the DHCPv6 client on the network port.')
agentNetworkDhcp6SOLICITMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6SOLICITMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6SOLICITMessagesSent.setDescription(' The no. of DHCPv6 messages of type SOLICIT that have been sent by the DHCPv6\n       client on the network port.')
agentNetworkDhcp6REQUESTMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6REQUESTMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6REQUESTMessagesSent.setDescription(' The no. of DHCPv6 messages of type REQUEST that have been sent by the DHCPv6\n       client on the network port.')
agentNetworkDhcp6RENEWMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6RENEWMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6RENEWMessagesSent.setDescription(' The no. of DHCPv6 messages of type RENEW that have been sent by the DHCPv6\n       client on the network port.')
agentNetworkDhcp6REBINDMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6REBINDMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6REBINDMessagesSent.setDescription(' The no. of DHCPv6 messages of type REBIND that have been sent by the DHCPv6\n       client on the network port.')
agentNetworkDhcp6RELEASEMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6RELEASEMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6RELEASEMessagesSent.setDescription(' The no. of DHCPv6 messages of type RELEASE that have been sent by the DHCPv6\n       client on the network port.')
agentNetworkDhcp6StatsReset = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDhcp6StatsReset.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6StatsReset.setDescription('Clear the DHCPv6 Client statistics on the network port. A value of reset(1)\n            is used to reset the statistics. A read on this object will\n            always return the value none(0). The value none(0) cannot\n            be forcibly set by the administrator.')
agentServicePortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4))
agentServicePortIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIPAddress.setDescription("The switch's ServicePort ip address")
agentServicePortSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentServicePortSubnetMask.setDescription("The switch's ServicePort subnet mask")
agentServicePortDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDefaultGateway.setDescription("The switch's ServicePort default gateway")
agentServicePortBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentServicePortBurnedInMacAddress.setDescription("The switch's ServicePort Burned-In MAC address")
agentServicePortConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentServicePortConfigProtocol.setDescription("The switch's ServicePort config protocol")
agentServicePortProtocolDhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOperation", 0), ("renew", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortProtocolDhcpRenew.setStatus('current')
if mibBuilder.loadTexts: agentServicePortProtocolDhcpRenew.setDescription("The switch's ServicePort protocol dhcp is renewed. Will always return 0 when read.")
agentServicePortIpv6AdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIpv6AdminMode.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AdminMode.setDescription('The service port IPv6 administrative state')
agentServicePortIpv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 8), Ipv6AddressPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIpv6Gateway.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6Gateway.setDescription('The service port IPv6 Gateway Address')
agentServicePortIpv6AddrTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 9), )
if mibBuilder.loadTexts: agentServicePortIpv6AddrTable.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrTable.setDescription('The list of IPv6 address prefixes for the\n                   service port.')
agentServicePortIpv6AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 9, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentServicePortIpv6AddrPrefix"))
if mibBuilder.loadTexts: agentServicePortIpv6AddrEntry.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrEntry.setDescription('An interface entry containing objects of\n                  a particular IPv6 address prefix')
agentServicePortIpv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 9, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefix.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefix.setDescription('The service port IPv6 Address Prefix')
agentServicePortIpv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefixLength.setDescription('The service port IPv6 Address Prefix Length')
agentServicePortIpv6AddrEuiFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIpv6AddrEuiFlag.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrEuiFlag.setDescription('The service port IPv6 Eui Flag')
agentServicePortIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 9, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrStatus.setDescription('')
agentServicePortIpv6AddressAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIpv6AddressAutoConfig.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddressAutoConfig.setDescription('The ipv6 address autoconfig allows the device to perform IPv6\n                     stateless address auto-configuration to discover prefixes on the\n                     link and then to add the eui-64 based addresses to the serviceport interface.')
agentServicePortIpv6ConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("dhcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIpv6ConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6ConfigProtocol.setDescription('The service port IPv6 protocol configured on the switch.')
agentServicePortDhcp6ClientDuid = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6ClientDuid.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6ClientDuid.setDescription(' The DHCPv6 Client unique DUID. This value cannot be modified')
agentServicePortStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13))
agentServicePortDhcp6ADVERTISEMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6ADVERTISEMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6ADVERTISEMessagesReceived.setDescription(' The no. of DHCPv6 messages of type ADVERTISE that have been received by the DHCPv6 client on the service port.')
agentServicePortDhcp6REPLYMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REPLYMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6REPLYMessagesReceived.setDescription(' The no. of DHCPv6 messages of type REPLY that have been received by the DHCPv6 client on the service port.')
agentServicePortDhcp6ADVERTISEMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6ADVERTISEMessagesDiscarded.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6ADVERTISEMessagesDiscarded.setDescription(' The no. of DHCPv6 messages of type ADVERTISE that have been discarded by the DHCPv6 client on the service port.')
agentServicePortDhcp6REPLYMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REPLYMessagesDiscarded.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6REPLYMessagesDiscarded.setDescription(' The no. of DHCPv6 messages of type REPLY that have been discarded by the DHCPv6 client on the service port.')
agentServicePortDhcp6MalformedMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6MalformedMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6MalformedMessagesReceived.setDescription(' The no. of DHCPv6 messages received malformed by the DHCPv6 client on the service port.')
agentServicePortDhcp6SOLICITMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6SOLICITMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6SOLICITMessagesSent.setDescription(' The no. of DHCPv6 messages of type SOLICIT that have been sent by the DHCPv6 client on the service port.')
agentServicePortDhcp6REQUESTMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REQUESTMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6REQUESTMessagesSent.setDescription(' The no. of DHCPv6 messages of type REQUEST that have been sent by the DHCPv6 client on the service port.')
agentServicePortDhcp6RENEWMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6RENEWMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6RENEWMessagesSent.setDescription(' The no. of DHCPv6 messages of type RENEW that have been sent by the DHCPv6\n       client on the service port.')
agentServicePortDhcp6REBINDMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REBINDMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6REBINDMessagesSent.setDescription(' The no. of DHCPv6 messages of type REBIND that have been sent by the DHCPv6 client on the service port.')
agentServicePortDhcp6RELEASEMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6RELEASEMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6RELEASEMessagesSent.setDescription(' The no. of DHCPv6 messages of type RELEASE that have been sent by the DHCPv6 client on the service port.')
agentServicePortDhcp6StatsReset = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortDhcp6StatsReset.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6StatsReset.setDescription('Clear the DHCPv6 Client statistics on the service port. A value of reset(1)\n          is used to reset the statistics. A read on this object will\n          always return the value none(0). The value none(0) cannot\n          be forcibly set by the administrator.')
agentDhcpClientOptionsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 5))
agentVendorClassOptionConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 5, 1))
agentDhcpClientVendorClassIdMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpClientVendorClassIdMode.setStatus('current')
if mibBuilder.loadTexts: agentDhcpClientVendorClassIdMode.setDescription("This object indicates whether DHCP Vendor Classifier Id\n             Option (60) is enabled for DHCP Network Client.\n\n             If this object is set to 'true', DHCP Vendor Classifier Id mode\n             is enabled globally.\n\n             If this object is set to 'false', DHCP Vendor Classifier Id mode\n             is disabled globally.")
agentDhcpClientVendorClassIdString = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpClientVendorClassIdString.setStatus('current')
if mibBuilder.loadTexts: agentDhcpClientVendorClassIdString.setDescription('When this object is set with a non-empty string, the DHCP Vendor\n             Classifier Id Option (60) string is enabled for DHCP Network Client.')
agentSnmpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6))
agentSnmpCommunityCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityCreate.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityCreate.setDescription('Creates a new SNMP Community entry.\n                     Defaults: IPAddress  0.0.0.0\n                               IpMask     0.0.0.0\n                               AccessMode read-only\n                               Status     config')
agentSnmpCommunityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 2), )
if mibBuilder.loadTexts: agentSnmpCommunityConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityConfigTable.setDescription("A table of the switch's SNMP Config entries")
agentSnmpCommunityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSnmpCommunityIndex"))
if mibBuilder.loadTexts: agentSnmpCommunityConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityConfigEntry.setDescription("Switch's SNMP Config entry")
agentSnmpCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSnmpCommunityIndex.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityIndex.setDescription("The switch's Snmp Community Index")
agentSnmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityName.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityName.setDescription("The switch's Snmp Community Name\n                     This name identifies each SNMP community;\n                     the name can be up to 16 characters, and it is case-sensitive.\n                     Community names in the SNMP community must be unique.\n                     If you make multiple entries using the same community name,\n                     the first entry is kept and processed and all duplicate entries are ignored.\n                     ")
agentSnmpCommunityIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityIPAddress.setDescription("The switch's Snmp Community IP Address\n                     Client IP Address - This attribute is an IP address (or portion thereof)\n                     from which this device will accept SNMP packets with the associated\n                     community. The requesting entity's IP address is logical-ANDed with\n                     the Client IP Mask and the result must match the Client IP Address.\n                     Note: If the Client IP Mask is set\n                     to 0.0.0.0, a Client IP Address of 0.0.0.0 matches all IP addresses.\n                     ")
agentSnmpCommunityIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityIPMask.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityIPMask.setDescription("The switch's Snmp Community IP Mask\n                     Client IP Mask - This attribute is a mask to be logical-ANDed with the\n                     requesting entity's IP address before comparison with the Client IP Address.\n                     If the result matches with Client IP Address then the address is an\n                     authenticated IP address. For example, if the Client IP Address\n                     is 9.47.128.0 and the corresponding Client IP Mask is 255.255.255.0,\n                     a range of incoming IP addresses would match, that is, the incoming IP\n                     addresses could be a value in the following range: 9.47.128.0 to 9.47.128.255.\n                     To have a specific IP address be the only authenticated IP address, set the\n                     Client IP Address to the required IP address and set the Client IP Mask\n                     to 255.255.255.255.\n                     ")
agentSnmpCommunityAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-only", 1), ("read-write", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityAccessMode.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityAccessMode.setDescription("The switch's Snmp Community Access Mode\n                     Access Mode - This value can be read-only or read/write.\n                     A community with a read-only access allows for switch information to be\n                     displayed. A community with a read/write access allows for configuration\n                     changes to be made and for information to be displayed.\n                     ")
agentSnmpCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("config", 3), ("destroy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityStatus.setDescription("The switch's Snmp Community Status.\n\n                     active(1)        - This community is active, allowing SNMP managers associated\n                                        with this community to manage the switch according to its\n                                        access right.\n\n                     notInService(2)  - This community is not active; no SNMP requests using this\n                                        community will be accepted. In this case the SNMP manager\n                                        associated with this community cannot manage the switch until\n                                        the Status is changed back to active(1).\n\n                     config(3)        - The community Status must be set to this value in order to\n                                        configure it.  When creating a new community entry, initial\n                                        Status will be set to this value.\n\n                     destroy(4)       - Set to this value to remove the community from the agent.")
agentSnmpTrapReceiverCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverCreate.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverCreate.setDescription('Creates a new trap receiver entry.\n                     Defaults: IPAddress 0.0.0.0\n                               status    config')
agentSnmpTrapReceiverConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 4), )
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigTable.setDescription('Trap messages are sent across a network to an SNMP Network Manager.\n                     These messages alert the manager to events occurring within the switch\n                     or on the network. Up to six simultaneous trap receivers are supported.\n                     ')
agentSnmpTrapReceiverConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 4, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSnmpTrapReceiverIndex"))
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigEntry.setDescription("Switch's Snmp Trace Receiver Config entry")
agentSnmpTrapReceiverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSnmpTrapReceiverIndex.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverIndex.setDescription("The switch's Snmp Trap Receiver Index")
agentSnmpTrapReceiverCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverCommunityName.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverCommunityName.setDescription("The switch's Snmp Trap Receiver Community Name.\n                     This is the SNMP community name of the remote network manager;\n                     the name can be up to 16 characters, and is case-sensitive.\n                     ")
agentSnmpTrapReceiverAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("dns-v4", 3), ("dns-v6", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverAddressType.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverAddressType.setDescription('The type of the snmptrap reciever address.\n\n                     The agentSnmpTrapReceiverAddress object is intepreted within the \n                     context of agentSnmpTrapReceiverAddressType')
agentSnmpTrapReceiverAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 4, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverAddress.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverAddress.setDescription('The snmptrap reciever address.\n\n                     The type of this address is determined by the value of the\n                     agentSnmpTrapReceiverAddressType object.\n                     The values for agentSnmpTrapReceiverAddressType and\n                     agentSnmpTrapReceiverAddress must be consistent.')
agentSnmpTrapReceiverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: agentSnmpTrapReceiverIPAddress.setDescription('IP Address - Each IP address parameter is four integer numbers.\n                     The numbers range from 0 to 255.\n                     ')
agentSnmpTrapReceiverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("config", 3), ("destroy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverStatus.setDescription("The switch's Snmp Trap Reciever Status.\n                     active(1)        - This trap receiver is active, allowing SNMP Traps to\n                                        be sent to this receiver.\n\n                     notInService(2)  - This trap reciever is not active; no SNMP Traps will\n                                        be sent to this reciever until it's set back to active(1).\n\n\n                     config(3)        - The trap reciever Status must be set to this value in order\n                                        to configure it.  When creating a new trap receiver entry,\n                                        the Status will initially be set to this value.\n                                        Note: agentSnmpTrapReceiverIPAddress must be set to non-zero\n                                        before changing to active(1) or notInService(2).\n\n                     destroy(4)       - Set to this value to remove the trap receiver entry from\n                                        the agent.")
agentSnmpTrapReceiverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmpv1", 1), ("snmpv2c", 2))).clone('snmpv2c')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverVersion.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverVersion.setDescription('The version of trap sent to this Reciever.\n\n                     snmpv1(1)        - This will send a SNMPv1 trap.\n\n                     snmpv2c(2)       - This will send a SNMPv2c trap.')
agentSnmpTrapReceiverIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 4, 1, 6), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverIpv6Address.setStatus('obsolete')
if mibBuilder.loadTexts: agentSnmpTrapReceiverIpv6Address.setDescription('IPv6 Address  for SNMP receiver.')
agentSnmpTrapFlagsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 5))
agentSnmpAuthenticationTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpAuthenticationTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpAuthenticationTrapFlag.setDescription('Authentication Flag - Enable/Disable authentication Flag.')
agentSnmpLinkUpDownTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpLinkUpDownTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpLinkUpDownTrapFlag.setDescription('Link Up/Down Flag - Enable/Disable Link Up/Link Down traps for the\n                     entire switch. When set to Enable, the Link Up/Down traps will be\n                     sent only if the Link Trap flag setting associated with the port\n                     (Port Configuration Menu) is set to Enable.\n                     ')
agentSnmpMultipleUsersTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpMultipleUsersTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpMultipleUsersTrapFlag.setDescription('Multiple Users Flag - Enable/Disable Multiple User traps. When the value\n                     is set to Enable, a Multiple User Trap is sent whenever someone logs in\n                     to the terminal interface (EIA 232 or Telnet) and there is already an\n                     existing terminal interface session.\n                     ')
agentSnmpSpanningTreeTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpSpanningTreeTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpSpanningTreeTrapFlag.setDescription('Spanning Tree Flag - This flag enables the sending of new root traps and\n                     topology change notification traps.')
agentSnmpBroadcastStormTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpBroadcastStormTrapFlag.setStatus('obsolete')
if mibBuilder.loadTexts: agentSnmpBroadcastStormTrapFlag.setDescription('Broadcast Storm Flag - This flag enables or disables the broadcast\n                     storm trap. You must also enable Broadcast Storm Recovery Mode\n                     (see the Switch Configuration Menu). When this\n                     value is set to Enable and Broadcast Storm Recovery mode is set to Enable,\n                     the Broadcast Storm Start/End traps are sent when the switch enters and\n                     leaves Broadcast Storm Recovery.\n                     ')
agentSnmpTrapSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 6), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapSourceInterface.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapSourceInterface.setDescription('A source-interface selection on an Interface Index (like vlan based \n              routing interface, port based routing interface, loopback interface, \n              tunnel interface). A non-zero value indicates ifIndex for the \n              corresponding interface entry in the ifTable is selected.\n              A zero value indicates the source-interface un-selection.')
agentSnmpServerPortNum = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(161, 161), ValueRangeConstraint(1025, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpServerPortNum.setStatus('current')
if mibBuilder.loadTexts: agentSnmpServerPortNum.setDescription("Get/Set the UDP port number that the SNMP server listens to for incoming\n                     requests. The port number is an integer value from 1025 to 65535. Before setting\n                     this object, check your system (e.g. using 'netstat') to make sure the desired\n                     port number is not currently being used by any other service. The default\n                     value for this object is 161.\n\n                     Note that changing the value of this object may cause existing SNMP transactions\n                     to cease communicating with the device until the client applications are \n                     reconfigured to use the new port number.")
agentSpanningTreeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 7))
agentSpanningTreeMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSpanningTreeMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentSpanningTreeMode.setDescription("The switch's Spanning Tree Switch Status. This functionality is now \n                     handled by agentStpAdminMode")
agentSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8))
agentSwitchFdbAddressAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchFdbAddressAgingTimeout.setStatus('current')
if mibBuilder.loadTexts: agentSwitchFdbAddressAgingTimeout.setDescription('The address aging timeout.\n\n                      Specifies aging time in seconds (10 - 1000000) before a dynamic MAC address \n                      is erased from the Filtering Database. The default value is 300 seconds.')
agentSwitchAddressAgingTimeoutTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 4), )
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutTable.setStatus('deprecated')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutTable.setDescription("The switch's address aging timeout table. This functionality is now \n                      handled by agentSwitchFdbAddressAgingTimeout.")
agentSwitchAddressAgingTimeoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 4, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qFdbId"))
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutEntry.setStatus('deprecated')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutEntry.setDescription('Aging information about a specific Filtering Database.')
agentSwitchAddressAgingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeout.setDescription("The FDB entry's address aging timeout (in seconds)")
agentSwitchStaticMacFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 5), )
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringTable.setDescription("The switch's static Mac filtering table")
agentSwitchStaticMacFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 5, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchStaticMacFilteringVlanId"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchStaticMacFilteringAddress"))
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringEntry.setDescription('Per-port ingress/egress filter configuration based on VLAN Id and MAC address.')
agentSwitchStaticMacFilteringVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringVlanId.setDescription('The Static MAC Filter Vlan Id')
agentSwitchStaticMacFilteringAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringAddress.setDescription('The Static MAC Filter MAC address')
agentSwitchStaticMacFilteringSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 5, 1, 3), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringSourcePortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringSourcePortMask.setDescription('The Static MAC Filter source port mask.\n\n                     When setting this value, the system will ignore configuration for ports not\n                     between the first and last valid ports.  Configuration of any port numbers\n                     between this range that are not valid ports return a failure message, but will\n                     still apply configuration for valid ports.\n\n                     To obtain port numbers from interface numbers, use the objects\n                     agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable\n                     table.')
agentSwitchStaticMacFilteringDestPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 5, 1, 4), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringDestPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringDestPortMask.setDescription('The Static MAC Filter destination port mask.\n\n                     When setting this value, the system will ignore configuration for ports not\n                     between the first and last valid ports.  Configuration of any port numbers\n                     between this range that are not valid ports return a failure message, but will\n                     still apply configuration for valid ports.\n\n                     To obtain port numbers from interface numbers, use the objects\n                     agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable\n                     table.\n\n                     Configuring destination port mask for a unicast MAC filter is not supported on some platforms.')
agentSwitchStaticMacFilteringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringStatus.setDescription('The Static MAC Filter status.\n\n                     Supported values:\n                     active(1)      - valid entry\n                     createAndGo(4) - used to create a new entry\n                     destroy(6)     - removes the entry')
agentSwitchSnoopSSMGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34), )
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupTable.setDescription('The (conceptual) table listing the IP multicast Source Specific Multicast\n                        Groups for which there are members on a particular interface and VLAN.')
agentSwitchSnoopSSMGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopSSMGroupAddressType"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopSSMGroupIfIndex"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopSSMGroupVlanId"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopSSMGroupAddress"))
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupEntry.setDescription('An entry (conceptual row) in the agentSwitchSnoopSSMGroupTable.')
agentSwitchSnoopSSMGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34, 1, 1), InetAddressType())
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupAddressType.setDescription('The address type of the agentSwitchSnoopSSMGroupTable entry. This\n                       value applies to both the agentSwitchSnoopSSMGroupAddress and the\n                       agentSwitchSnoopSSMGroupLastReporter entries.')
agentSwitchSnoopSSMGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupAddress.setDescription('The IP multicast group address for which this entry\n                       contains information. The InetAddressType, e.g.\n                       IPv4 or IPv6, is identified by the\n                       agentSwitchSnoopSSMGroupAddressType variable in the agentSwitchSnoopSSMGroup\n                       table.')
agentSwitchSnoopSSMGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupIfIndex.setDescription('The interface for which this entry contains information\n                       for an IP multicast group address.')
agentSwitchSnoopSSMGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34, 1, 4), VlanIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupVlanId.setDescription('The VLAN for which this entry contains information\n                       for an IP multicast group address.')
agentSwitchSnoopSSMGroupLastReporter = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupLastReporter.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupLastReporter.setDescription('The IP address of the source of the last membership report\n                       received for this IP Multicast group address on this\n                       interface and VLAN. The InetAddressType, e.g.\n                       IPv4 or IPv6, is identified by the\n                       agentSwitchSnoopSSMGroupAddressType variable in the agentSwitchSnoopSSMGroup\n                       table.')
agentSwitchSnoopSSMGroupSourceFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupSourceFilterMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupSourceFilterMode.setDescription('The state in which the interface is currently set. The\n                       value indicates the relevance of the corresponding source\n                       list entries in the SrcList Table (agentSwitchSnoopSSMSrcListTable).')
agentSwitchSnoopSSMSrcListTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 35), )
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListTable.setDescription('The (conceptual) table listing the Source List entries\n                       corresponding to each VLAN, interface and SSM multicast group pair on\n                       a MGMD Snooping switch.')
agentSwitchSnoopSSMSrcListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 35, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListAddressType"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListIfIndex"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListVlanId"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListHostAddress"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListAddress"))
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListEntry.setDescription('An entry (conceptual row) in the agentSwitchSnoopSSMSrcListTable.')
agentSwitchSnoopSSMSrcListAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 35, 1, 1), InetAddressType())
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListAddressType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListAddressType.setDescription('The address type of the InetAddress variables in this\n                       table. This value applies to the agentSwitchSnoopSSMSrcListHostAddress\n                       and agentSwitchSnoopSSMSrcListAddress entries.')
agentSwitchSnoopSSMSrcListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 35, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListAddress.setDescription('The IP multicast group address for which this entry\n                       contains information.')
agentSwitchSnoopSSMSrcListIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 35, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListIfIndex.setDescription('The interface for which this entry contains information\n                       for an IP multicast group address.')
agentSwitchSnoopSSMSrcListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 35, 1, 4), VlanIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListVlanId.setDescription('The VLAN for which this entry contains information\n                       for an IP multicast group address.')
agentSwitchSnoopSSMSrcListHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 35, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListHostAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListHostAddress.setDescription('The host address to which this entry\n                       corresponds. The agentSwitchSnoopSSMGroupSourceFilterMode value for\n                       this Group address, interface and VLAN indicates whether this\n                       Host address is included or excluded.')
agentSwitchSnoopSSMFDBTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36), )
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBTable.setDescription('MGMD Snooping Source Specific Multicast\n                         Forwarding database Table.')
agentSwitchSnoopSSMFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopSSMFDBGroupAddressType"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopSSMFDBGroupAddress"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopSSMFDBSourceAddress"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopSSMFDBVlanIndex"))
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBEntry.setDescription('An entry is created by IGMP Snooping for each group learned in the VLAN.')
agentSwitchSnoopSSMFDBVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBVlanIndex.setDescription('This object indicates the VLAN in which the group is learned.')
agentSwitchSnoopSSMFDBGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36, 1, 2), InetAddressType())
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBGroupAddressType.setDescription('This object indicates IP multicast address type learned by MGMD Snooping.')
agentSwitchSnoopSSMFDBGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36, 1, 3), InetAddress())
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBGroupAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBGroupAddress.setDescription('This object indicates IP multicast address learned by MGMD Snooping.')
agentSwitchSnoopSSMFDBSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36, 1, 4), InetAddress())
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBSourceAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBSourceAddress.setDescription('This object indicates IP Source address learned by MGMD Snooping.')
agentSwitchSnoopSSMFDBIncludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36, 1, 5), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBIncludePortList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBIncludePortList.setDescription('This object indicates the set of ports on which MGMD\n                         Membership Reports are received for the group indicating\n                         interest to receive traffic sent to the group.')
agentSwitchSnoopSSMFDBExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36, 1, 6), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBExcludePortList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBExcludePortList.setDescription('This object indicates the set of ports on which MGMD\n                         Membership Reports are received for the group indicating\n                         interest to not to receive traffic sent to the group.')
agentSwitchStormControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12))
agentSwitchDot3FlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("symmetric", 1), ("asymmetric", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDot3FlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDot3FlowControlMode.setDescription('Config switchconfig flowcontrol allows you to enable or disable\n                     802.3x flow control for the switch. This value\n                     applies to only full-duplex mode ports. Enabling\n                     symmetric flow control allows the switch to send\n                     and receive pause frames. Enabling asymmetric\n                     flow control allows the switch to receive pause\n                     frames but it will not transmit pause frames.')
agentSwitchBroadcastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBroadcastControlMode.setDescription('The switch config broadcast allows you to enable or disable\n                     broadcast storm recovery mode. When you specify Enable for Broadcast\n                     Storm Recovery and the broadcast traffic on any Ethernet port exceeds\n                     the configured threshold, the switch blocks (discards) the broadcast\n                     traffic.')
agentSwitchBroadcastControlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBroadcastControlThreshold.setDescription('Configures the broadcast storm recovery threshold for this port\n                     as a percentage of port speed or as an absolute pps rate.')
agentSwitchBroadcastControlThresholdUnit = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBroadcastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of\n                     port speed or absolute packets per second.')
agentSwitchMulticastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMulticastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMulticastControlMode.setDescription('The switch config multicast allows you to enable or disable\n                     multicast storm recovery mode. When you specify Enable for multicast\n                     Storm Recovery and the multicast traffic on any Ethernet port exceeds\n                     the configured threshold, the switch blocks (discards) the multicast\n                     traffic.')
agentSwitchMulticastControlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMulticastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMulticastControlThreshold.setDescription('Configures the multicast storm recovery threshold for this port\n                     as a percentage of port speed or as an absolute pps rate.')
agentSwitchMulticastControlThresholdUnit = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMulticastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMulticastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of\n                     port speed or absolute packets per second.')
agentSwitchUnicastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUnicastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchUnicastControlMode.setDescription('The switch config unicast allows you to enable or disable\n                     unicast storm recovery mode. When you specify Enable for unicast\n                     Storm Recovery and the unknown unicast traffic on any Ethernet port exceeds\n                     the configured threshold, the switch blocks (discards) the unknown unicast\n                     traffic.')
agentSwitchUnicastControlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUnicastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchUnicastControlThreshold.setDescription('Configures the unicast storm recovery threshold for this port\n                     as a percentage of port speed or as an absolute pps rate.')
agentSwitchUnicastControlThresholdUnit = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUnicastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentSwitchUnicastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of\n                     port speed or absolute packets per second.')
agentSwitchSnoopingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6))
agentSwitchSnoopingCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingCfgTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingCfgTable.setDescription('A table of the IGMP/MLD Snooping Global configuration entries.')
agentSwitchSnoopingCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6, 1, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingCfgEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingCfgEntry.setDescription('Represents entry for Snooping switch Configuration.')
agentSwitchSnoopingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6, 1, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingProtocol.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingProtocol.setDescription('The protocol type of network protocol in use.')
agentSwitchSnoopingAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingAdminMode.setDescription('This enables or disables Snooping on the system. ')
agentSwitchSnoopingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6, 1, 1, 3), AgentPortMask().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingPortMask.setDescription('IGMP/MLD Snooping Port Mask.\n\n                     This allows configuration of IGMP/MLD Snooping on selected ports.\n                     IGMP/MLD Snooping cannot be enabled on an interface that has routing\n                     enabled, or is a member of a LAG.  If a port which has IGMP/MLD Snooping\n                     enabled becomes enabled for routing, or is enlisted as a member of a\n                     LAG, IGMP/MLD Snooping functionality will be disabled on that port.  IGMP/MLD\n                     Snooping functionality will be subsequently be reenabled if routing is\n                     disabled or LAG membership is removed from an interface that had previously\n                     had IGMP/MLD Snooping enabled.\n\n                     To obtain port numbers from interface numbers, use the objects\n                     agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable\n                     table.')
agentSwitchSnoopingMulticastControlFramesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingMulticastControlFramesProcessed.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingMulticastControlFramesProcessed.setDescription('Multicast Control Frames Processed by CPU.\n                     The number of multicast control frames that have been processed by the CPU.')
agentSwitchSnoopingProxyQuerierAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingProxyQuerierAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingProxyQuerierAdminMode.setDescription('This enables or disables IGMP/MLD Proxy Querier Mode on the system.\n                      If it is disabled then IGMP/MLD proxy query with source zero IP address is not sent in response to IGMP/MLD leave packet.')
agentSwitchSnoopingIntfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7))
agentSwitchSnoopingIntfTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingIntfTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfTable.setDescription('A table of the IGMP/MLD Snooping Interface configuration entries.')
agentSwitchSnoopingIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingIntfEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfEntry.setDescription('Represents entry for a IGMP/MLD Snooping Interface.')
agentSwitchSnoopingIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfIndex.setDescription('The port number to be selected. Each port maps to an interface.')
agentSwitchSnoopingIntfAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfAdminMode.setDescription('This enables or disables IGMP/MLD Snooping on a selected interface.')
agentSwitchSnoopingIntfGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfGroupMembershipInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfGroupMembershipInterval.setDescription('The amount of time in seconds that a switch will wait for a report\n                     from a particular group on the selected interface before deleting the\n                     interface from the entry. This value must be greater than\n                     agentSwitchSnoopingIntfMaxResponseTime.')
agentSwitchSnoopingIntfMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 4), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMaxResponseTime.setDescription('The amount of time in seconds a switch will wait after sending\n                     a query on the selected interface because it did not receive a report for\n                     a particular group in that interface.  This value must be less\n                     than agentSwitchSnoopingIntfGroupMembershipInterval. For IGMP Snooping,\n                     this value ranges from 1 to 25 and for MLD Snooping, this value\n                     ranges from 1 to 65.')
agentSwitchSnoopingIntfMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMRPExpirationTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMRPExpirationTime.setDescription('The amount of time in seconds that a switch will wait for a query to be\n                     received on the selected interface before the interface is removed from\n                     the list of interfaces with multicast routers attached.')
agentSwitchSnoopingIntfFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfFastLeaveAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfFastLeaveAdminMode.setDescription('This enables or disables IGMP/MLD Snooping on the selected interface.')
agentSwitchSnoopingIntfMulticastRouterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMulticastRouterMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMulticastRouterMode.setDescription('This enables or disables Multicast Routing on the selected interface.')
agentSwitchSnoopingIntfVlanIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 8), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfVlanIDs.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfVlanIDs.setDescription('This field lists all the VlanIDs which include the selected interface.')
agentSwitchSnoopingIntfProxyQuerierAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfProxyQuerierAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfProxyQuerierAdminMode.setDescription('This enables or disables IGMP/MLD Proxy Querier on the selected interface.\n                      If it is disabled then IGMP/MLD proxy query with source zero IP address is not sent in response to IGMP/MLD leave packet.')
agentSwitchSnoopingVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8))
agentSwitchSnoopingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanTable.setDescription('A table of the IGMP/MLD Snooping Vlan configuration entries.')
agentSwitchSnoopingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanEntry.setDescription('Represents entry for a IGMP/MLD Snooping Vlan.')
agentSwitchSnoopingVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanAdminMode.setDescription('This enables or disables IGMP/MLD Snooping on a selected Vlan interface.')
agentSwitchSnoopingVlanGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanGroupMembershipInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanGroupMembershipInterval.setDescription('The amount of time in seconds that a switch will wait for a report\n                     from a particular group on the selected vlan before deleting the\n                     interface participating in the vlan from the entry. This value must\n                     be greater than agentSwitchSnoopingIntfMaxResponseTime.')
agentSwitchSnoopingVlanMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1, 3), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMaxResponseTime.setDescription('The amount of time in seconds a switch will wait after sending\n                     a query on the selected vlan because it did not receive a report for\n                     a particular group in the interface participating in the vlan.\n                     This value must be less than\n                     agentSwitchSnoopingIntfGroupMembershipInterval. For IGMP Snooping,\n                     this value ranges from 1 to 25 and for MLD Snooping, this value\n                     ranges from 1 to 65.')
agentSwitchSnoopingVlanFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanFastLeaveAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanFastLeaveAdminMode.setDescription('This enables or disables IGMP/MLD Snooping on the selected vlan.')
agentSwitchSnoopingVlanMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMRPExpirationTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMRPExpirationTime.setDescription('The amount of time in seconds that a switch will wait for a query to be\n                     received on the selected interface participating in the vlan before the\n                     interface is removed from the list of interfaces with multicast routers\n                     attached. This parameter is configurable only for exisiting Vlans.')
agentSwitchSnoopingVlanReportSuppMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanReportSuppMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanReportSuppMode.setDescription('This enables or disables IGMP Snooping Report Suppression feature on the selected vlan.')
agentSwitchSnoopingVlanProxyQuerierAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanProxyQuerierAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanProxyQuerierAdminMode.setDescription('This enables or disables IGMP/MLD Proxy Querier on the selected vlan.\n                      If it is disabled then IGMP/MLD proxy query with source zero IP address is not sent in response to IGMP/MLD leave packet.')
agentSwitchVlanStaticMrouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 9))
agentSwitchVlanStaticMrouterTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 9, 1), )
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterTable.setDescription('A table of the IGMP/MLD Static Mrouter Configuration parameters.')
agentSwitchVlanStaticMrouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterEntry.setDescription('Represents entry for a IGMP/MLD Static Mrouter.')
agentSwitchVlanStaticMrouterAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterAdminMode.setDescription('This enables or disables IGMP/MLD Mrouter on a per-interface per-vlan basis.')
agentSwitchMFDBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10))
agentSwitchMFDBTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1), )
if mibBuilder.loadTexts: agentSwitchMFDBTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBTable.setDescription('The Multicast Forwarding Database table')
agentSwitchMFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchMFDBVlanId"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchMFDBMacAddress"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchMFDBProtocolType"))
if mibBuilder.loadTexts: agentSwitchMFDBEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBEntry.setDescription('Contains Forwarding and Filtering information per Vlan Index, MAC Address, and\n                     Component User.')
agentSwitchMFDBVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBVlanId.setDescription('Vlan Index for which this entry is associated with.')
agentSwitchMFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMacAddress.setDescription('A multicast MAC address for which the switch has forwarding and or\n                     filtering information.')
agentSwitchMFDBProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("gmrp", 2), ("igmp", 3), ("mld", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBProtocolType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBProtocolType.setDescription('The component that is responsible for this entry in the Multicast\n                     Forwarding Database.')
agentSwitchMFDBType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBType.setDescription('This displays the type of the entry.\n\n                     static(1)  - Entries configured by the end user\n                     dynamic(2) - Entries added as a result of a learning process or protocol')
agentSwitchMFDBDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBDescription.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBDescription.setDescription('Text description of this multicast table entry.')
agentSwitchMFDBForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1, 6), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBForwardingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBForwardingPortMask.setDescription('BitMask indicating which ports this entry indicates should be forwarded.\n\n                     To obtain port numbers from interface numbers, use the objects\n                     agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable\n                     table.')
agentSwitchMFDBFilteringPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1, 7), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBFilteringPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBFilteringPortMask.setDescription('BitMask indicating which ports this entry indicates should be filtered.\n\n                     To obtain port numbers from interface numbers, use the objects\n                     agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable\n                     table.')
agentSwitchMFDBSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 2), )
if mibBuilder.loadTexts: agentSwitchMFDBSummaryTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryTable.setDescription('The Multicast Forwarding Database Summary table')
agentSwitchMFDBSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchMFDBSummaryVlanId"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchMFDBSummaryMacAddress"))
if mibBuilder.loadTexts: agentSwitchMFDBSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryEntry.setDescription('Summarizes the forwarding ports for all components registered for all\n                     MFDB table entries with the same Vlan Index and MAC Address.')
agentSwitchMFDBSummaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryVlanId.setDescription('Vlan Index for which this entry is associated with.')
agentSwitchMFDBSummaryMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryMacAddress.setDescription('A multicast MAC address for which the switch has forwarding and or\n                     filtering information.')
agentSwitchMFDBSummaryForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 2, 1, 3), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryForwardingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryForwardingPortMask.setDescription('Port Mask indicating which ports this entry indicates should be forwarded.\n\n                     To obtain port numbers from interface numbers, use the objects\n                     agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable\n                     table.')
agentSwitchMFDBMaxTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMaxTableEntries.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMaxTableEntries.setDescription('This displays the maximum number of entries that can possibly be in\n                     the Multicast Forwarding Database table.')
agentSwitchMFDBMostEntriesUsed = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMostEntriesUsed.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMostEntriesUsed.setDescription('This displays the largest number of entries that have been present\n                     in the Multicast Forwarding Database table. This value is also known\n                     as the MFDB high-water mark.')
agentSwitchMFDBCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBCurrentEntries.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBCurrentEntries.setDescription('This displays the current number of entries in the Multicast\n                     Forwarding Database table.')
agentSwitchDVlanTagGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 11))
agentSwitchDVlanTagEthertype = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDVlanTagEthertype.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDVlanTagEthertype.setDescription('Configures the Double Vlan Tag Ethertype for the switch.\n          If this object is supported, ethertype cannot be configured per port.                      \n          Commonly used are the Ethertypes for vman tags (34984, or 0x88A8)                      \n          and dot1q tags (33024, or 0x8100).')
agentSwitchDVlanTagTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 11, 2), )
if mibBuilder.loadTexts: agentSwitchDVlanTagTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDVlanTagTable.setDescription('A table of entries specifying the ethertype (TPID) values.\n          This will let the user specify multiple ethertypes globally.')
agentSwitchDVlanTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 11, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchDVlanTagTPid"))
if mibBuilder.loadTexts: agentSwitchDVlanTagEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDVlanTagEntry.setDescription('A table entry specifying the ethertype (TPID) values.\n          Commonly used are the Ethertypes for vman tags (34984, or 0x88A8)                      \n          and dot1q tags (33024, or 0x8100).')
agentSwitchDVlanTagTPid = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: agentSwitchDVlanTagTPid.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDVlanTagTPid.setDescription('Ethertype value to identify incoming double tagged frames')
agentSwitchDVlanTagPrimaryTPid = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchDVlanTagPrimaryTPid.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDVlanTagPrimaryTPid.setDescription("Specifies if this TPID is primary TPID for the switch or not.\n          As the system needs one TPID to be active all the time, setting \n          the object to false doesn't modify/remove the entry. Adding another\n          entry and setting it to true overwrites the previous primary TPID.")
agentSwitchDVlanTagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 11, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchDVlanTagRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDVlanTagRowStatus.setDescription('Row status')
agentSwitchPortDVlanTagTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 11, 3), )
if mibBuilder.loadTexts: agentSwitchPortDVlanTagTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPortDVlanTagTable.setDescription('A table entries specifying the ethertype (TPID) values per port.')
agentSwitchPortDVlanTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 11, 3, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchPortDVlanTagInterfaceIfIndex"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchPortDVlanTagTPid"))
if mibBuilder.loadTexts: agentSwitchPortDVlanTagEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPortDVlanTagEntry.setDescription('A table entry specifying the ethertype (TPID) value for a port.')
agentSwitchPortDVlanTagInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchPortDVlanTagInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPortDVlanTagInterfaceIfIndex.setDescription('Port Id on to which the Ethertype value is mapped')
agentSwitchPortDVlanTagTPid = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: agentSwitchPortDVlanTagTPid.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPortDVlanTagTPid.setDescription('Ethertype value to identify incoming double tagged frames')
agentSwitchPortDVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchPortDVlanTagMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPortDVlanTagMode.setDescription('Controls the Double Vlan Tag mode on this port.')
agentSwitchPortDVlanTagCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 11, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchPortDVlanTagCustomerId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPortDVlanTagCustomerId.setDescription('Configures the Customer ID for the Double Vlan Tag for this port.')
agentSwitchPortDVlanTagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 11, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchPortDVlanTagRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPortDVlanTagRowStatus.setDescription('Row status')
agentSwitchVlanMacAssociationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 17))
agentSwitchVlanMacAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 17, 1), )
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationTable.setDescription("The switch's MAC To VLAN association table")
agentSwitchVlanMacAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 17, 1, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchVlanMacAssociationMacAddress"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchVlanMacAssociationVlanId"))
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationEntry.setDescription('VLAN to be assigned to untagged or priority tagged\n                     packets based on MAC address.')
agentSwitchVlanMacAssociationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 17, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationMacAddress.setDescription('The Mac address')
agentSwitchVlanMacAssociationVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 17, 1, 1, 2), VlanIndex())
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationVlanId.setDescription('The VLAN the Mac address assigned to')
agentSwitchVlanMacAssociationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 17, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationRowStatus.setDescription('The Mac to VLAN association row status.\n\n                     Supported values:\n                     active(1)      - valid entry\n                     createAndGo(4) - used to create a new entry\n                     destroy(6)     - removes the entry')
agentSwitchProtectedPortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 18))
agentSwitchProtectedPortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 18, 1), )
if mibBuilder.loadTexts: agentSwitchProtectedPortTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortTable.setDescription("The switch's protected port mapping table")
agentSwitchProtectedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 18, 1, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchProtectedPortGroupId"))
if mibBuilder.loadTexts: agentSwitchProtectedPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortEntry.setDescription('Protected ports assigned to groups.')
agentSwitchProtectedPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupId.setDescription('The group that this port belongs to')
agentSwitchProtectedPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 18, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupName.setDescription('The name of the group')
agentSwitchProtectedPortPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 18, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchProtectedPortPortList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortPortList.setDescription('The set of ports that are protected in this group')
agentSwitchVlanSubnetAssociationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 19))
agentSwitchVlanSubnetAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 19, 1), )
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationTable.setDescription("The switch's Subnet To VLAN association table")
agentSwitchVlanSubnetAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 19, 1, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchVlanSubnetAssociationIPAddress"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchVlanSubnetAssociationSubnetMask"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchVlanSubnetAssociationVlanId"))
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationEntry.setDescription('VLAN to be assigned to untagged or priority tagged\n                     packets based on IP address and Subnet Mask.')
agentSwitchVlanSubnetAssociationIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 19, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationIPAddress.setDescription('The ip address')
agentSwitchVlanSubnetAssociationSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 19, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationSubnetMask.setDescription('The subnet mask')
agentSwitchVlanSubnetAssociationVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 19, 1, 1, 3), VlanIndex())
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationVlanId.setDescription('The VLAN that the IP address and subnet mask assigned to')
agentSwitchVlanSubnetAssociationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 19, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationRowStatus.setDescription('The Subnet to VLAN association row status.\n\n                     Supported values:\n                     active(1)      - valid entry\n                     createAndGo(4) - used to create a new entry\n                     destroy(6)     - removes the entry')
agentSwitchSnoopingQuerierGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20))
agentSwitchSnoopingQuerierCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgTable.setDescription('A table of the IGMP/MLD Snooping Querier Global configuration entries.')
agentSwitchSnoopingQuerierCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 1, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgEntry.setDescription('Represents entry for Snooping Querier Configuration.')
agentSwitchSnoopingQuerierAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAdminMode.setDescription('This enables or disables Snooping Querier on the system. ')
agentSwitchSnoopingQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVersion.setDescription('This specifies the multicast protocol versions that are\n                      supported by the system.')
agentSwitchSnoopingQuerierAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 1, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAddress.setDescription('This specifies the default source ip address to be used\n                      while generating general queries.')
agentSwitchSnoopingQuerierQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierQueryInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierQueryInterval.setDescription('This specified the timer interval after which the system\n                      generates general queries.')
agentSwitchSnoopingQuerierExpiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierExpiryInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierExpiryInterval.setDescription('This specified the timer interval after which the detected\n                      other querier information is no longer valid.')
agentSwitchSnoopingQuerierVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2), )
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanTable.setDescription('A table of the Snooping Querier Vlan configuration entries.')
agentSwitchSnoopingQuerierVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanEntry.setDescription('Represents entry for a Snooping Querier configurable Vlan.')
agentSwitchSnoopingQuerierVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAdminMode.setDescription('This enables or disables Snooping Querier on a selected Vlan interface.')
agentSwitchSnoopingQuerierVlanOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("querier", 1), ("non-querier", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanOperMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanOperMode.setDescription('This specifies the current state of the Snooping Querier on a selected vlan interface')
agentSwitchSnoopingQuerierElectionParticipateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierElectionParticipateMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierElectionParticipateMode.setDescription('This enables or disables the Snooping Querier Election Participation mode. When enabled\n                      snooping querier switch will participate in querier election up on discovering another\n                      querier in the specified vlan. When disabled, up on discovering another querier, snooping\n                      querier moves to non-querier state.')
agentSwitchSnoopingQuerierVlanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAddress.setDescription('This specifies the default source ip address to be used while generating general queries on\n                      the specified vlan.')
agentSwitchSnoopingQuerierOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperVersion.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperVersion.setDescription('This specifies the multicast protocol version that is currently being used by the snooping\n                      switch for the specified vlan while generating query messages.')
agentSwitchSnoopingQuerierOperMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperMaxResponseTime.setDescription('The amount of time in seconds a switch will wait after sending\n                      a query on the selected vlan because it did not receive a report for\n                      a particular group in the interface participating in the vlan. This\n                      object is valid only when agentSwitchSnoopingQuerierOperVersion object\n                      is valid.\n                      (-1) - indicates that parameter is not available; \n                      ( 0) - indicates that response time is less then 1 second.')
agentSwitchSnoopingQuerierLastQuerierAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierAddress.setDescription("This specifies the last querier's ip address for the specified vlan.\n                      It represents the detected other multicast querier in the vlan. ")
agentSwitchSnoopingQuerierLastQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierVersion.setDescription('This specifies the multicast protocol version that is currently being used\n                      by the detected other multicast querier for the specified vlan.\n                      (-1) - indicates that parameter is not available.')
agentTransferConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9))
agentTransferUploadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1))
agentTransferUploadMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4), ("sftp", 5), ("scp", 6), ("usb", 7), ("ftp", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadMode.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadMode.setDescription('Transfer upload mode configures the mode to use when uploading from the\n                     switch. The mode is either X/Y/ZMODEM, TFTP, SFTP or SCP. X/Y/ZMODEM is\n                     valid only when the file transfer is initiated by the serial EIA 232 port.\n                     SFTP and SCP are only allowed if the SSH feature is present.\n                     Upload to USB is allowed only if the USB feature is present.\n                     ')
agentTransferUploadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerIP.setStatus('deprecated')
if mibBuilder.loadTexts: agentTransferUploadServerIP.setDescription('Transfer upload server IP configures the IP address of the server\n                     where the file is located. It is valid only when the Transfer Mode is\n                     TFTP, SFTP, or SCP. The address is 4 integer bytes ranging from 0 to 255.\n\n                     This object is deprecated in favour of agentTransferUploadServerAddress\n                     and agentTransferUploadServerAddressType.')
agentTransferUploadPath = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadPath.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadPath.setDescription('Transfer upload path configures the directory path where the file\n                     is to be uploaded to. The switch remembers the last file path used.\n                     ')
agentTransferUploadFilename = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadFilename.setDescription('Transfer upload filename configures the file name for the file being\n                     uploaded from the switch. It can be up to 31 alphanumeric characters.\n                     The switch remembers the last file name used.\n                     File path can be appended to the file name if the string is less than 17\n                     characters. Otherwise, the File Path field will need to be used and the\n                     File Name will be appended to the File Path as is. An example would be\n                     File Path set to c:\\tftp\\scripts\\ and File Name set to script2.scr.\n                     Note: File Name, File Path, and Server IP Address are applicable\n                     only if the Transfer Mode is TFTP, SFTP or SCP and object agentTransferUploadDataType\n                     is not set to type code.')
agentTransferUploadDataType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("config", 2), ("errorlog", 3), ("messagelog", 4), ("traplog", 5), ("clibanner", 6), ("code", 7), ("lang-pack", 8), ("cpuPktCapture", 9), ("startup-config", 10), ("backup-config", 11), ("factory-default-config", 12), ("config-script", 13), ("startuplog", 14), ("operationallog", 15), ("crash-log", 16), ("tech-support", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadDataType.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadDataType.setDescription('Transfer upload datatype configures the type of file to upload from the\n                     switch.\n                     The types for upload are:\n                        -       Configuration File\n                        -       Error log\n                        -       Message log\n                        -       Trap log\n                        -       Banner File\n                        -       Code\n                        -       Language Pack file\n                        -       Captured CPU packets file\n                        -       Startup Config file\n                        -       Backup Config file\n                        -       Factory Default Config file\n                        -       Config Script file\n                        -       Startup Log file\n                        -       Operational Log file\n                        -       Crash Log File\n                        -       Tech Support File\n                     ')
agentTransferUploadStart = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadStart.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadStart.setDescription('Transfer upload start will start an upload transfer.\n                     The agentTransferUploadMode object must not be set to xmodem(2),\n                         ymodem(3), or zmodem(4) to initiate a transfer via SNMP.')
agentTransferUploadStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferUploadStatus.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadStatus.setDescription('Indicates the current status of an upload transfer.')
agentTransferUploadServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerAddressType.setReference('RFC 3291')
if mibBuilder.loadTexts: agentTransferUploadServerAddressType.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadServerAddressType.setDescription('The type of the serverip address, as defined in the InetAddress MIB.\n\n                      The agentTransferUploadServerAddress object is intepreted within the\n                      context of agentTransferUploadServerAddressType')
agentTransferUploadServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerAddress.setReference('RFC 3291')
if mibBuilder.loadTexts: agentTransferUploadServerAddress.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadServerAddress.setDescription('Transfer upload serverip configures the IP address of the server\n                     where the file is to be uploaded to.It is valid only when the\n                     Transfer Mode is TFTP, SFTP or SCP.\n                     The type of this address is determined by the value of the\n                     agentTransferUploadServerAddressType object.\n                     The values for agentTransferUploadServerAddressType and\n                     agentTransferUploadServerAddress must be consistent.')
agentTransferUploadImagename = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadImagename.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadImagename.setDescription('Transfer upload image name. Sets the image to be uploaded as the specified\n                      name. Imagename cannot be set to unknown(1) option. When no name is set\n                      this object returns unknown(1) by default.\n                     Note: Imagename, File Name, File Path, and Server IP Address are applicable\n                     only if the Transfer Mode is TFTP, SFTP or SCP.')
agentTransferUploadUsername = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadUsername.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadUsername.setDescription('Username applicable to secure upload types, i.e., SFTP or SCP and FTP.\n                     ')
agentTransferUploadPassword = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadPassword.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadPassword.setDescription('Password applicable to secure upload types, i.e. SFTP or SCP and FTP.\n                     ')
agentTransferUploadRemoteFilename = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadRemoteFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadRemoteFilename.setDescription('Transfer upload remote filename configures the file name for the file being\n                     created remotely. It can be up to 31 alphanumeric characters.\n                     Note: File Name, File Path, and Server IP Address are applicable\n                     only if the Transfer Mode is TFTP, SFTP or SCP.')
agentTransferDownloadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2))
agentTransferDownloadMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4), ("sftp", 5), ("scp", 6), ("usb", 7), ("ftp", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadMode.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadMode.setDescription('Transfer download mode configures the mode to use when downloading\n                     to the switch. The mode is either X/Y/ZMODEM, TFTP, FTP, SFTP or SCP.\n                     X/Y/ZMODEM is valid only when the file transfer is initiated by \n                     the serial EIA 232 port.  SFTP and SCP\n                     are only allowed if the SSH feature is present.\n                     Download from USB is only allowed if the USB feature is present.\n                     ')
agentTransferDownloadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerIP.setStatus('deprecated')
if mibBuilder.loadTexts: agentTransferDownloadServerIP.setDescription('Transfer download serverip configures the IP address of the server\n                     where the file is located. It is valid only when the Transfer Mode is TFTP, SFTP or\n                     SCP.\n                     The address is 4 integer bytes ranging from 0 to 255.\n\n                     This object is deprecated in favour of agentTransferDownloadServerAddress\n                     and agentTransferDownloadServerAddressType.')
agentTransferDownloadPath = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadPath.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadPath.setDescription('Transfer download path configures the directory path where the\n                     file is located. The switch remembers the last file path used.\n                     ')
agentTransferDownloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadFilename.setDescription('Transfer download filename configures the file name for the file\n                     being downloaded to the switch. It can be up to 31 alphanumeric characters.\n                     The switch remembers the last file name used.\n                     File path can be appended to the file name if the string is less than 32\n                     characters. Otherwise, the File Path field will need to be used and the\n                     File Name will be appended to the File Path as is. An example would be\n                     File Path set to c:\\tftp\\scripts\\ and File Name set to script1.scr.\n                     Note: File Name, File Path, and Server IP Address are applicable\n                     only if the Transfer Mode is TFTP, SFTP or SCP and the object agentTransferDownloadDataType\n                     download type is not set to code')
agentTransferDownloadDataType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("code", 2), ("config", 3), ("sshkey-rsa1", 4), ("sshkey-rsa2", 5), ("sshkey-dsa", 6), ("sslpem-root", 7), ("sslpem-server", 8), ("sslpem-dhweak", 9), ("sslpem-dhstrong", 10), ("clibanner", 11), ("kernel", 12), ("tr069-acs-sslpem-root", 13), ("tr069-client-ssl-private-key", 14), ("tr069-client-ssl-cert", 15), ("lang-pack", 16), ("ias-users", 17), ("startup-config", 18), ("backup-config", 19), ("factory-default-config", 20), ("config-script", 21), ("publickey-image", 22), ("publickey-script", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadDataType.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadDataType.setDescription('Transfer download datatype configures the type of file to download to\n                     the switch.\n                     The types for download are:\n\n                     code               - Code File\n                     config             - Configuration File\n                     sshkey-rsa1        - SSH-1 RSA Key File\n                     sshkey-rsa2        - SSH-2 RSA Key PEM File\n                     sshkey-dsa         - SSH-2 DSA Key PEM File\n                     sslpem-root        - SSL Trusted Root Certificate PEM File\n                     sslpem-server      - SSL Server Certificate PEM File\n                     sslpem-dhweak      - SSL DH Weak Encryption Parameter PEM File\n                     sslpem-dhstrong    - SSL DH Strong Encryption Parameter PEM File\n                     cli-banner         - CLI Banner File\n                     kernel             - Kernel File\n                     lang-pack          - Language Pack File.\n                     Ias-users\t\t- IAS user file\n                     startup-config     - Startup Config File\n                     backup-config      - Backup Config File\n                     factory-default-config   - Factory Default Config File\n                     config-script      - Config Script File\n                     publickey-image    - Public key for image digital signature validation \n                     publickey-script   - Public key for script digital signature validation \n\n                     Note: SSH Key files can only be downloaded if SSH Server is administratively\n                     disabled, and there are no active SSH sessions.\n                     Kernel file can be downloaded only on raptor platform and linux operating system.\n                     Language pack file is used when NLS localization feature is available.\n                     ')
agentTransferDownloadStart = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadStart.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadStart.setDescription('Transfer download start will start an download transfer.\n                     The agentTransferDownloadMode object must not be set to xmodem(2),\n                         ymodem(3), or zmodem(4) to initiate a transfer via SNMP.')
agentTransferDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferDownloadStatus.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadStatus.setDescription('Indicates the current status of an download transfer.')
agentTransferDownloadServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerAddressType.setReference('RFC 3291')
if mibBuilder.loadTexts: agentTransferDownloadServerAddressType.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadServerAddressType.setDescription('The type of the serverip address, as defined in the InetAddress MIB.\n\n                      The agentTransferDownloadServerAddress object is intepreted within the\n                      context of agentTransferDownloadServerAddressType')
agentTransferDownloadServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerAddress.setReference('RFC 3291')
if mibBuilder.loadTexts: agentTransferDownloadServerAddress.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadServerAddress.setDescription('Transfer download serverip configures the IP address of the server\n                     where the file is to be downloaded from.It is valid only when the\n                     Transfer Mode is TFTP, SFTP, or SCP.\n                     The type of this address is determined by the value of the\n                     agentTransferDownloadServerAddressType object.\n                     The values for agentTransferDownloadServerAddressType and\n                     agentTransferDownloadServerAddress must be consistent.')
agentTransferDownloadImagename = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadImagename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadImagename.setDescription('Transfer download image name. Sets the downloaded image as the specified\n                      name. Imagename cannot be set to unknown(1) option. When no name is set\n                      this object returns unknown(1) by default.\n                     Note: Imagename, File Name, File Path, and Server IP Address are applicable\n                     only if the Transfer Mode is TFTP, SFTP or SCP.')
agentTransferDownloadUsername = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadUsername.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadUsername.setDescription('Username applicable to secure download types, i.e., SFTP or SCP and FTP.\n                     ')
agentTransferDownloadPassword = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadPassword.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadPassword.setDescription('Password applicable to secure download types, i.e. SFTP or SCP and FTP.\n                     ')
agentTransferDownloadRemoteFilename = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadRemoteFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadRemoteFilename.setDescription('Transfer download remote filename configures the file name for the file being\n          transferred from remote system. It can be up to 31 alphanumeric characters.')
agentTransferDownloadDigitalSignatureVerifySelect = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("verify", 1), ("noverify", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadDigitalSignatureVerifySelect.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadDigitalSignatureVerifySelect.setDescription('Set the option to perform Digital signature validation of downloading file\n                     The following options are supported\n                     none\t- Based on config option do the digital signature validation\n                     verify \t- Verify the digital signature of downloading file\n                     noverify \t- Do not verify the digital signature of downloading file')
agentImageConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 3))
agentImage1 = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentImage1.setStatus('current')
if mibBuilder.loadTexts: agentImage1.setDescription('The image1 software version .')
agentImage2 = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentImage2.setStatus('current')
if mibBuilder.loadTexts: agentImage2.setDescription('The image2 software version.')
agentActiveImage = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentActiveImage.setStatus('current')
if mibBuilder.loadTexts: agentActiveImage.setDescription('The active image name. image1 or image2.\n                      ')
agentNextActiveImage = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNextActiveImage.setStatus('obsolete')
if mibBuilder.loadTexts: agentNextActiveImage.setDescription('The next active image name.\n                      user assigns either image1 or image2. ')
agentPortMirroringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10))
agentMirroredPortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMirroredPortIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: agentMirroredPortIfIndex.setDescription('IfIndex of the mirrored port')
agentProbePortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProbePortIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: agentProbePortIfIndex.setDescription('IfIndex of the probe port')
agentPortMirroringMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirroringMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortMirroringMode.setDescription('Port mirroring mode:\n\n                     enable - enable mirroring mode\n                     disable - disable mirroring mode\n                     delete - clear MirroredPort and Probe Port configuration')
agentPortMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4), )
if mibBuilder.loadTexts: agentPortMirrorTable.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTable.setDescription('This table includes entries for each Port Mirroring session.')
agentPortMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentPortMirrorSessionNum"))
if mibBuilder.loadTexts: agentPortMirrorEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorEntry.setDescription('Provides configuration of a Port Mirroring session specifying the\n                     destination port, and the source Port Mask, providing a many-to-one\n                     mapping.')
agentPortMirrorSessionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentPortMirrorSessionNum.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorSessionNum.setDescription('The Session number of this mirroring entry.  The number of sessions is\n                     fixed, and is platform dependant.')
agentPortMirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorDestinationPort.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorDestinationPort.setDescription('The port which traffic from the mirrored ports will be sent to.')
agentPortMirrorSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 3), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorSourcePortMask.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorSourcePortMask.setDescription('The ports from which traffic will be sent to the destination port.\n                     The destination port can not be included in this list of ports.')
agentPortMirrorAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorAdminMode.setDescription('The status of this port mirroring session.\n\n                     enable(1)  - This session is active and all traffic from the source ports\n                                  will be mirrored to the destination port.\n                     disable(2) - This session is not active.\n                     delete(3)  - Remove the configuration for this Session')
agentPortMirrorSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4093), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorSourceVlan.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorSourceVlan.setDescription('The vlan from which traffic will be sent to the destination port.')
agentPortMirrorRemoteSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4093), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorRemoteSourceVlan.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorRemoteSourceVlan.setDescription('The remote vlan from which traffic will be sent to the destination port.')
agentPortMirrorRemoteDestinationVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4093), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorRemoteDestinationVlan.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorRemoteDestinationVlan.setDescription('The VLAN that forwards the network traffic to the destination switch.\n\n                     NOTE: In order to set value for the object, need to set values for \n                     agentPortMirrorRemoteDestinationVlan and agentPortMirrorReflectorPort\n                     objects simultaneously.')
agentPortMirrorReflectorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorReflectorPort.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorReflectorPort.setDescription('The port which traffic from the mirrored ports will be sent to in case of destination being remote VLAN.\n\n                     NOTE: In order to set value for the object, need to set values for \n                     agentPortMirrorRemoteDestinationVlan and agentPortMirrorReflectorPort\n                     objects simultaneously.')
agentPortMirrorIpAccessListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorIpAccessListNumber.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorIpAccessListNumber.setDescription('The IP access-list number attached to the port mirroring session.')
agentPortMirrorMacAccessListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorMacAccessListNumber.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorMacAccessListNumber.setDescription('The MAC access-list number attached to the port mirroring session.')
agentPortMirrorTypeTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 5), )
if mibBuilder.loadTexts: agentPortMirrorTypeTable.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeTable.setDescription("This table includes entries for each source port's direction of port mirroring.")
agentPortMirrorTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 5, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentPortMirrorSessionNum"), (0, "EdgeSwitch-SWITCHING-MIB", "agentPortMirrorTypeSourcePort"))
if mibBuilder.loadTexts: agentPortMirrorTypeEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeEntry.setDescription('Provides configuration of a Port Mirroring direction specifying the\n                     session of the port mirroring and source port')
agentPortMirrorTypeSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentPortMirrorTypeSourcePort.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeSourcePort.setDescription('The port from which traffic will be sent to the destination port.\n                      This port should be a source port in the corresponding session')
agentPortMirrorTypeType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tx", 1), ("rx", 2), ("txrx", 3))).clone('txrx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorTypeType.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeType.setDescription('The direction of the data to be mirrored on this source port.\n\n                     tx(1)  - The data that is transmitted from the source port.\n                     rx(2) - The data that is received on the source port.\n                     txrx(3)  - The data that is transmitted/received from/on the source port')
agentPortMirrorRemoteVlan = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorRemoteVlan.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortMirrorRemoteVlan.setDescription('The VLAN configured as RSPAN VLAN.')
agentPortMirrorRemoteVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 7), )
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanTable.setDescription('A table of the RSPAN VLAN config entries')
agentPortMirrorRemoteVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 7, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentPortMirrorRemoteVlanIndex"))
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanEntry.setDescription('RSPAN VLAN config entry')
agentPortMirrorRemoteVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 7, 1, 1), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanIndex.setDescription('The VLAN which is configured as a remote-span VLAN.')
agentPortMirrorRemoteVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanRowStatus.setDescription('The status of this entry.\n\n                 active(1)        - the VLAN is configured as a remote-span VLAN\n                 createAndGo(4)   - add the VLAN as a remote-span VLAN \n                 destroy(6)       - remove the VLAN from the list of Remote-span VLAN. \n\t\t                  RSPAN VLAN cannot be removed or changed while it is used with a Monitor session.')
agentDot3adAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 12), )
if mibBuilder.loadTexts: agentDot3adAggPortTable.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortTable.setDescription('This table provides 802.3ad link aggregation information for each\n                      physical port that is not available through the standard MIB.')
agentDot3adAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 12, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentDot3adAggPort"))
if mibBuilder.loadTexts: agentDot3adAggPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortEntry.setDescription('Information about a table entry.  The agentDot3adAggPort identifies\n                      the external interface number of the port.')
agentDot3adAggPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot3adAggPort.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPort.setDescription('ifIndex of this physical port')
agentDot3adAggPortLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot3adAggPortLACPMode.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortLACPMode.setDescription('Enable/disable 802.3ad LACP on this port')
agentSwitchportConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37), )
if mibBuilder.loadTexts: agentSwitchportConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportConfigTable.setDescription('')
agentSwitchportConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchportIntfIndex"))
if mibBuilder.loadTexts: agentSwitchportConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportConfigEntry.setDescription('')
agentSwitchportIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchportIntfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportIntfIndex.setDescription('The port or LAG number to be selected. Each port/LAG maps to an interface.')
agentSwitchportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2), ("general", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchportMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportMode.setDescription('Configure the VLAN membership mode of a port.')
agentSwitchportAccessVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 3), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchportAccessVlanID.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportAccessVlanID.setDescription('Configures the Access VLAN Id for the interface.')
agentSwitchportTrunkNativeVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 4), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchportTrunkNativeVlanID.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportTrunkNativeVlanID.setDescription('Configures the Native VLAN Id for the interface.')
agentSwitchportTrunkNativeVlanTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchportTrunkNativeVlanTagging.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportTrunkNativeVlanTagging.setDescription("Describes the Native VLAN tagging for the interface. \n                      'disable' mean that packets marked with Native VLAN are transmitted untagged from Trunk port. ")
agentSwitchportTrunkAllowedVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 6), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchportTrunkAllowedVlanList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportTrunkAllowedVlanList.setDescription('Configures the allowed VLAN list of Trunk switch interface.')
agentSwitchportGeneralUntaggedVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 7), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchportGeneralUntaggedVlanList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportGeneralUntaggedVlanList.setDescription('Shows the allowed untagged VLAN list of general switch interface.')
agentSwitchportGeneralTaggedVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 8), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchportGeneralTaggedVlanList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportGeneralTaggedVlanList.setDescription(' Shows the allowed tagged VLAN list of general switch interface.')
agentSwitchportGeneralForbiddenVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 9), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchportGeneralForbiddenVlanList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportGeneralForbiddenVlanList.setDescription('Shows the Forbidden VLAN list of general switch interface.')
agentSwitchportGeneralDynamicallyAddedVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 10), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchportGeneralDynamicallyAddedVlanList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportGeneralDynamicallyAddedVlanList.setDescription('Shows the list of dynamically added VLANs for general switch interface.')
agentPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13), )
if mibBuilder.loadTexts: agentPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigTable.setDescription("A table of the switch's physical port config entries")
agentPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentPortDot1dBasePort"))
if mibBuilder.loadTexts: agentPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigEntry.setDescription("Switch's physical port config entry")
agentPortDot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortDot1dBasePort.setStatus('current')
if mibBuilder.loadTexts: agentPortDot1dBasePort.setDescription('The port number of this port.')
agentPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentPortIfIndex.setDescription("The switch's Port IfIndex")
agentPortIanaType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIanaType.setStatus('current')
if mibBuilder.loadTexts: agentPortIanaType.setDescription("The switch's Port Type")
agentPortSTPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("fast", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSTPMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortSTPMode.setDescription("The switch's Port Spanning Tree Protocol Mode\n                      STP mode values are:\n\n                      dot1d (the default)\n                      fast, indicates you want to use the fast spanning tree mode\n                      off, indicates the STP mode is turned off for a particular port\n                      This object is only supported when the Dot1d Protocol is enabled.")
agentPortSTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("blocking", 1), ("listening", 2), ("learning", 3), ("forwarding", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortSTPState.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortSTPState.setDescription("The switch's Port Spanning Tree Protocol State.\n                      This object is only supported when the Dot1d Protocol is enabled.")
agentPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPortAdminMode.setDescription("The switch's Port Admin Mode")
agentPortPhysicalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("auto-negotiate", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-100fx", 6), ("full-100fx", 7), ("full-1000sx", 8), ("full-10gsx", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortPhysicalMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortPhysicalMode.setDescription("The switch's Port Speed Mode.  This is the configured physical mode.\n                      This object is read-only for gigabit ports")
agentPortPhysicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("auto-negotiate", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-100fx", 6), ("full-100fx", 7), ("full-1000sx", 8), ("full-10gsx", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortPhysicalStatus.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortPhysicalStatus.setDescription("The switch's Port Physical Speed Status.  This is the current actual speed.")
agentPortLinkTrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortLinkTrapMode.setStatus('current')
if mibBuilder.loadTexts: agentPortLinkTrapMode.setDescription('If enabled, link up and link down traps will be sent for this port.')
agentPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortClearStats.setStatus('current')
if mibBuilder.loadTexts: agentPortClearStats.setDescription('clear stats for this port only')
agentPortDefaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 11), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDefaultType.setReference('RFC 2668')
if mibBuilder.loadTexts: agentPortDefaultType.setStatus('current')
if mibBuilder.loadTexts: agentPortDefaultType.setDescription('This object identifies the default administrative port type,\n                  to be used in conjunction with the operational port type\n                  denoted by agentPortType.\n\n                  This object represents the administratively-configured type of\n                  the MAU.  If auto-negotiation is not enabled or is not\n                  implemented for this MAU, the value of this object determines\n                  the operational type of the MAU.  In this case, a set to this\n                  object will force the MAU into the specified operating mode.\n\n                  If auto-negotiation is implemented and enabled for this MAU,\n                  the operational type of the MAU is determined by auto-negotiation,\n                  and the value of this object denotes the type to which the MAU\n                  will automatically revert if/when auto-negotiation is later disabled.\n\n                  The valid values for this object are:\n\n                       dot3MauType10BaseTHD\n                       dot3MauType10BaseTFD\n                       dot3MauType100BaseTXHD\n                       dot3MauType100BaseTXFD\n                       dot3MauType100BaseFXFD\n                       dot3MauType1000BaseSXFD\n                       dot3MauType1000BaseTFD\n                       dot3MauType1000BaseXFD\n                       dot3MauType10GigBaseX\n                       agentPortType40GigBaseX')
agentPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortType.setReference('RFC 2668')
if mibBuilder.loadTexts: agentPortType.setStatus('current')
if mibBuilder.loadTexts: agentPortType.setDescription('This object identifies the port type.  An initial set of MAU types\n                  are defined in RFC 2668.  The assignment of OBJECT IDENTIFIERs to\n                  new types of MAUs is managed by the IANA.  If the MAU type is\n                  unknown, either a private object identifier, if one exists, or\n                  the object identifier\n\n                     unknownMauType OBJECT IDENTIFIER ::= { 0 0 }\n\n                  is returned.  Note that unknownMauType is a syntactically valid\n                  object identifier, and any conformant implementation of ASN.1 and\n                  the BER must be able to generate and recognize this value.\n\n                  This object represents the operational type of the MAU, as determined\n                  by either (1) the result of the auto-negotiation function or (2) if\n                  auto-negotiation is not enabled or is not implemented for this MAU,\n                  by the value of the object agentPortDefaultType, or (3) for the GigE card\n                  a value determined by the GBIC connected to the card.  In case (2), a\n                  set to the object agentPortDefaultType will force the MAU into the\n                  new operating mode.\n\n                  The valid values for this object are:\n\n                       dot3MauType10BaseTHD\n                       dot3MauType10BaseTFD\n                       dot3MauType100BaseTXHD\n                       dot3MauType100BaseTXFD\n                       dot3MauType100BaseFXFD\n                       dot3MauType1000BaseSXFD\n                       dot3MauType1000BaseTFD\n                       dot3MauType1000BaseXFD\n                       dot3MauType10GigBaseX\n                       agentPortType40GigBaseX')
agentPortAutoNegAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAutoNegAdminStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortAutoNegAdminStatus.setDescription('This object identifies the administration status of auto negotiation\n                  for this port.')
agentPortDot3FlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("symmetric", 1), ("asymmetric", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDot3FlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentPortDot3FlowControlMode.setDescription('Config flowcontrol allows you to enable or disable\n                     802.3x flow control for this port. This value\n                     applies to only full-duplex mode ports. Enabling\n                     symmetric flow control allows the port to send\n                     and receive pause frames. Enabling asymmetric\n                     flow control allows the port to receive pause\n                     frames but it will not transmit pause frames.')
agentPortDVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDVlanTagMode.setStatus('current')
if mibBuilder.loadTexts: agentPortDVlanTagMode.setDescription('Controls the Double Vlan Tag mode on this port.')
agentPortDVlanTagEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDVlanTagEthertype.setStatus('current')
if mibBuilder.loadTexts: agentPortDVlanTagEthertype.setDescription('Configures the Double Vlan Tag Ethertype for this port.\n                      If this object is supported, ethertype cannot be configured\n                      globally for the switch.\n\n                      Commonly used are the Ethertypes for vman tags (34984, or 0x88A8)\n                      and dot1q tags (33024, or 0x8100).')
agentPortDVlanTagCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDVlanTagCustomerId.setStatus('current')
if mibBuilder.loadTexts: agentPortDVlanTagCustomerId.setDescription('Configures the Customer ID for the Double Vlan Tag for this port.')
agentPortMaxFrameSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortMaxFrameSizeLimit.setStatus('current')
if mibBuilder.loadTexts: agentPortMaxFrameSizeLimit.setDescription('This object identifies the largest value that can be\n                     configured for agentPortMaxFrameSize')
agentPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: agentPortMaxFrameSize.setDescription('This object identifies the currently configured maximum frame size\n                     value for this port. The maximmum value that this object can be set\n                     to is the value of agentPortMaxFrameSizeLimit.  For Ethernet ports\n                     which support 802.1Q vlan tagging, the minimum value that this object\n                     can be set to is 1522')
agentPortBroadcastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBroadcastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentPortBroadcastControlMode.setDescription('If enabled, broadcast storm recovery will function on this port.\n                     When you specify Enable for Broadcast Storm Recovery and the broadcast\n                     traffic on this Ethernet port exceeds the configured threshold, the\n                     switch blocks (discards) the broadcast traffic.')
agentPortBroadcastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBroadcastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentPortBroadcastControlThreshold.setDescription('Configures the broadcast storm recovery threshold for this port\n                     as a percentage of port speed or as an absolute pps rate.')
agentPortMulticastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentPortMulticastControlMode.setDescription('If enabled, multicast storm recovery will function on this port.\n                     When you specify Enable for Multicast Storm Recovery and the multicast\n                     traffic on this Ethernet port exceeds the configured threshold, the\n                     switch blocks (discards) the multicast traffic.')
agentPortMulticastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentPortMulticastControlThreshold.setDescription('Configures the multicast storm recovery threshold for this port\n                     as a percentage of port speed or as an absolute pps rate.')
agentPortUnicastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortUnicastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentPortUnicastControlMode.setDescription('If enabled, unicast storm recovery will function on this port.\n                     When you specify Enable for Unicast Storm Recovery and the unknown unicast\n                     traffic on this Ethernet port exceeds the configured threshold, the\n                     switch blocks (discards) the unknown unicast traffic.')
agentPortUnicastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortUnicastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentPortUnicastControlThreshold.setDescription('Configures the unicast storm recovery threshold for this port\n                     as a percentage of port speed or as an absolute pps rate.')
agentPortBroadcastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBroadcastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentPortBroadcastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of\n                     port speed or absolute packets per second.')
agentPortMulticastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentPortMulticastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of\n                     port speed or absolute packets per second.')
agentPortUnicastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortUnicastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentPortUnicastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of\n                     port speed or absolute packets per second.')
agentPortVoiceVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("vlanid", 2), ("dot1p", 3), ("untagged", 4), ("disable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanMode.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanMode.setDescription('Describes and Configures the Port Voice VLAN Mode. This object\n                      can only be set to disable(5).')
agentPortVoiceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanID.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanID.setDescription('Describes and Configures the Port Voice VLAN ID\n                     if the Voice Vlan Mode is Vlan ID.')
agentPortVoiceVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanPriority.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanPriority.setDescription('Describes and Configures the Port Voice VLAN Priority\n                     if the Voice Vlan Mode is dot1p.  A value of 255 indicates\n                     that the priority is not configured.')
agentPortVoiceVlanDataPriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trust", 1), ("untrust", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanDataPriorityMode.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanDataPriorityMode.setDescription('Describes and Configures the Port Voice VLAN Data Priority Mode.')
agentPortVoiceVlanOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortVoiceVlanOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanOperationalStatus.setDescription('Describes the Port Voice VLAN Operational Status.')
agentPortVoiceVlanUntagged = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanUntagged.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanUntagged.setDescription('Describes and Configures the Port Voice VLAN tagging mode.')
agentPortVoiceVlanNoneMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanNoneMode.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanNoneMode.setDescription('Describes and Configures the Port Voice VLAN None mode.')
agentPortVoiceVlanDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanDSCP.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanDSCP.setDescription('Describes and Configures the Port Voice VLAN DSCP value.')
agentPortVoiceVlanAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanAuthMode.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanAuthMode.setDescription('Describes and Configures the Port Voice VLAN Authentication mode.\n                     Disable means authentication not required for voice devices when dot1x is enabled.')
agentPortDot3FlowControlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortDot3FlowControlOperStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortDot3FlowControlOperStatus.setDescription('This object identifies operational status of the flow control per port.')
agentPortSwitchportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("general", 3), ("host", 4), ("promiscuous", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSwitchportMode.setStatus('current')
if mibBuilder.loadTexts: agentPortSwitchportMode.setDescription('')
agentProtocolConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14))
agentProtocolGroupCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupCreate.setStatus('obsolete')
if mibBuilder.loadTexts: agentProtocolGroupCreate.setDescription('Set to non-empty string to create a Protocol-Based VLAN group.')
agentProtocolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 2), )
if mibBuilder.loadTexts: agentProtocolGroupTable.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupTable.setDescription("A table of the switch's Protocol-based VLAN entries")
agentProtocolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentProtocolGroupId"))
if mibBuilder.loadTexts: agentProtocolGroupEntry.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupEntry.setDescription("Switch's Protocol-based VLAN entry")
agentProtocolGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentProtocolGroupId.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupId.setDescription('Group identifier of the Protocol-based VLAN entry.')
agentProtocolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 2, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupName.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupName.setDescription('Group name of the Protocol-based VLAN entry.')
agentProtocolGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupVlanId.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupVlanId.setDescription('VLAN associated with the Protocol-based VLAN entry.  Set to 0 to remove.')
agentProtocolGroupProtocolIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupProtocolIP.setStatus('obsolete')
if mibBuilder.loadTexts: agentProtocolGroupProtocolIP.setDescription('The status of the IP protocol association with the Protocol-based VLAN entry.')
agentProtocolGroupProtocolARP = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupProtocolARP.setStatus('obsolete')
if mibBuilder.loadTexts: agentProtocolGroupProtocolARP.setDescription('The status of the ARP protocol association with the Protocol-based VLAN entry.')
agentProtocolGroupProtocolIPX = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupProtocolIPX.setStatus('obsolete')
if mibBuilder.loadTexts: agentProtocolGroupProtocolIPX.setDescription('The status of the IPX protocol association with the Protocol-based VLAN entry.')
agentProtocolGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentProtocolGroupStatus.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupStatus.setDescription('The status of the Protocol-based VLAN entry.\n\n                 active(1)  - this entry is active\n                 createAndGo(4) - used to create a new entry\n                 destroy(6) - remove this entry')
agentProtocolGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 3), )
if mibBuilder.loadTexts: agentProtocolGroupPortTable.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupPortTable.setDescription("A table of the switch's physical port config entries")
agentProtocolGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 3, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentProtocolGroupId"), (0, "EdgeSwitch-SWITCHING-MIB", "agentProtocolGroupPortIfIndex"))
if mibBuilder.loadTexts: agentProtocolGroupPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupPortEntry.setDescription("Switch's physical port config entry")
agentProtocolGroupPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentProtocolGroupPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupPortIfIndex.setDescription('The interface number of this instance.')
agentProtocolGroupPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentProtocolGroupPortStatus.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupPortStatus.setDescription('The status of this entry.\n\n                 active(1)        - the port is associated with this group\n                 createAndGo(4)   - add the port to this group\n                 createAndWait(5) - add the port to this group\n                 destroy(6)       - remove the port from this group')
agentProtocolGroupProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 4), )
if mibBuilder.loadTexts: agentProtocolGroupProtocolTable.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupProtocolTable.setDescription("A table of the switch's physical port config entries")
agentProtocolGroupProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 4, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentProtocolGroupId"), (0, "EdgeSwitch-SWITCHING-MIB", "agentProtocolGroupProtocolID"))
if mibBuilder.loadTexts: agentProtocolGroupProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupProtocolEntry.setDescription("Switch's physical port config entry")
agentProtocolGroupProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)))
if mibBuilder.loadTexts: agentProtocolGroupProtocolID.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupProtocolID.setDescription('The protocol ID of this instance. The value for IP is 2048 (0x0800), ARP is 2054 (0x0806) and IPX is 33079 (0x8137).\n                  Other protocol Ids in the range 1536 to 65535 can also be configured.')
agentProtocolGroupProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 14, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentProtocolGroupProtocolStatus.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupProtocolStatus.setDescription('The status of this entry.\n\n                 active(1)        - the port is associated with this group\n                 createAndGo(4)   - add the port to this group\n                 createAndWait(5) - add the port to this group\n                 destroy(6)       - remove the port from this group')
agentStpSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15))
agentStpConfigDigestKey = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpConfigDigestKey.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigDigestKey.setDescription('The MST configuration digest key.')
agentStpConfigFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpConfigFormatSelector.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigFormatSelector.setDescription('The MST configuration format selector. A value other than 0 (zero)\n                     indicates non-support for the IEEE 802.1s standard.')
agentStpConfigName = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpConfigName.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigName.setDescription('The MST configuration name of at most 32 characters.')
agentStpConfigRevision = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpConfigRevision.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigRevision.setDescription('The MST configuration revision. The default value is 1.')
agentStpForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("dot1w", 2), ("dot1s", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpForceVersion.setStatus('current')
if mibBuilder.loadTexts: agentStpForceVersion.setDescription('The MST configuration force protocol version. The default version is dot1s.')
agentStpAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentStpAdminMode.setDescription('The spanning tree operational status.\n\n                     enable(1)  - enables spanning tree operational status on the switch.\n                     disable(2) - disables spanning tree operational status on the switch.\n\n                     The default status is disabled.')
agentStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9), )
if mibBuilder.loadTexts: agentStpPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpPortTable.setDescription('STP port table.')
agentStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpPortEntry.setDescription('STP port entry.')
agentStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortState.setStatus('current')
if mibBuilder.loadTexts: agentStpPortState.setDescription('The administrative STP state for the port.\n\n                     enable(1)  - enables STP on the port.\n                     disable(2) - disables STP on the port.\n\n                     The default port STP state is enabled for the first 4095\n                     ports and disabled for any ports beyond.')
agentStpPortStatsMstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduRx.setDescription('The MSTP BPDUs received on a specific port.')
agentStpPortStatsMstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduTx.setDescription('The MSTP BPDUs sent from a specific port.')
agentStpPortStatsRstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduRx.setDescription('The RSTP BPDUs received on a specific port.')
agentStpPortStatsRstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduTx.setDescription('The RSTP BPDUs sent from a specific port.')
agentStpPortStatsStpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsStpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsStpBpduRx.setDescription('The STP BPDUs received on a specific port.')
agentStpPortStatsStpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsStpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsStpBpduTx.setDescription('The STP BPDUs sent from a specific port.')
agentStpPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortUpTime.setStatus('current')
if mibBuilder.loadTexts: agentStpPortUpTime.setDescription('Time since port was reset.\n                     It is displayed in days, hours, minutes, and seconds.')
agentStpPortMigrationCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortMigrationCheck.setStatus('current')
if mibBuilder.loadTexts: agentStpPortMigrationCheck.setDescription("Force the specified port to transmit RSTP or MSTP BPDU's.\n\n                     Supported values:\n                     false(0) - BPDUs are not to be transmitted.\n                     true(1)  - BPDUs are to be transmitted\n\n                     A non-zero value indicates that BPDUs are to be sent on the specified port.")
agentStpPortHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: agentStpPortHelloTime.setDescription('The spanning-tree hello time for the specified port.')
agentStpCstConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10))
agentStpCstHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstHelloTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstHelloTime.setDescription('The MSTP root port hello time for the CIST.')
agentStpCstMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstMaxAge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstMaxAge.setDescription('The MSTP root port max age for the CIST.')
agentStpCstRegionalRootId = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRegionalRootId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRegionalRootId.setDescription('The MSTP regional root identifier for the CIST.')
agentStpCstRegionalRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRegionalRootPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRegionalRootPathCost.setDescription('The MSTP regional root path cost for the CIST.')
agentStpCstRootFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRootFwdDelay.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRootFwdDelay.setDescription('The MSTP root port forward delay for the CIST.')
agentStpCstBridgeFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeFwdDelay.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeFwdDelay.setDescription('The MSTP bridge forward delay for the CIST. The default value is 15.')
agentStpCstBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeHelloTime.setDescription('The MSTP bridge hello time for the CIST. The default\n                      value is 2. According to IEEE 802.1Q-REV 2005 updating\n                      hello time is disallowed')
agentStpCstBridgeHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstBridgeHoldTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeHoldTime.setDescription('The MSTP bridge hold time for the CIST.')
agentStpCstBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeMaxAge.setDescription('The MSTP bridge max age for the CIST. The default value is 20.')
agentStpCstBridgeMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeMaxHops.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeMaxHops.setDescription('The MSTP bridge max hops for the CIST. The default value is 20.')
agentStpCstBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgePriority.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgePriority.setDescription('The MSTP bridge priority for the CIST. The default value is 32768.')
agentStpCstBridgeHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeHoldCount.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeHoldCount.setDescription('The MSTP bridge hold count for the CIST. This command sets the value of\n                      maximum bpdus that a bridge is allowed to send within a hello time window.\n                      The default value is 6.')
agentStpCstPortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11), )
if mibBuilder.loadTexts: agentStpCstPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortTable.setDescription('CIST port table.')
agentStpCstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpCstPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortEntry.setDescription('CIST port entry.')
agentStpCstPortOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortOperEdge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortOperEdge.setDescription('The MSTP operational status of a specific port for the CIST.')
agentStpCstPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortOperPointToPoint.setDescription('The MSTP operational point to point mac of a specific port for the CIST.')
agentStpCstPortTopologyChangeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortTopologyChangeAck.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortTopologyChangeAck.setDescription('The MSTP topology change acknowledge for a specific port in the CIST.')
agentStpCstPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortEdge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortEdge.setDescription('The administrative state of a specific port in CIST.\n\n                     enable(1)  - enables the port.\n                     disable(2) - disables the port.\n\n                     The default port state is disabled.')
agentStpCstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortForwardingState.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortForwardingState.setDescription('The MSTP forwarding state of a specific port in CIST.')
agentStpCstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 6), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortId.setDescription('The MSTP port identifier of a specific port in CIST.')
agentStpCstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortPathCost.setDescription('The MSTP port path cost in CIST. The default value will\n                     correspond to the recommendation specified in IEEE 802.1s Table 13-2\n                     which varies depending upon link speed.')
agentStpCstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortPriority.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortPriority.setDescription('The MSTP port priority in CIST. The priority is\n                     in the increments of 16. The default value is 128.')
agentStpCstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedBridgeId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedBridgeId.setDescription('The MSTP designated bridge ID of a specific port in CIST.')
agentStpCstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedCost.setDescription('The MSTP designated cost of a specific port in CIST.')
agentStpCstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 11), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedPortId.setDescription('The MSTP designated port ID of a specific port in CIST.')
agentStpCstExtPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstExtPortPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstExtPortPathCost.setDescription('The MSTP external port path cost in CIST. The default value varies depending upon the link speed.')
agentStpCstPortBpduGuardEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortBpduGuardEffect.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortBpduGuardEffect.setDescription('BPDU Guard Mode effect on the port.\n\n                     enable(1)  - BPDU Guard Mode is enabled on the port.\n                     disable(2) - BPDU Guard Mode is disabled on the port.')
agentStpCstPortBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortBpduFilter.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortBpduFilter.setDescription('This command sets BPDU Filter mode on the port.\n\n                     enable(1)  - BPDU Filter Mode is enabled on the port.\n                     disable(2) - BPDU Filter Mode is disabled on the port.')
agentStpCstPortBpduFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortBpduFlood.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortBpduFlood.setDescription('This command sets BPDU Flood mode on the port.\n\n                     enable(1)  - BPDU Flood Mode is enabled on the port.\n                     disable(2) - BPDU Flood Mode is disabled on the port.')
agentStpCstPortAutoEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortAutoEdge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortAutoEdge.setDescription('This command sets the auto-edge mode of the port which enables it\n                      to become an edge port if it does not see BPDUs for some duration.\n\n                     enable(1)  - enables the auto-edge mode for the port.\n                     disable(2) - disables the auto-edge mode for the port.\n\n                     The default auto-edge mode is enabled.')
agentStpCstPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortRootGuard.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortRootGuard.setDescription('This command sets a port to discard any superior information\n                      received by the port and thus protect against root of the device\n                      from changing.The port gets put into discarding state and does\n                      not forward any packets.\n\n                     enable(1)  - enables the root-guard mode for the port.\n                     disable(2) - disables the root-guard mode for the port.\n\n                     The default root-guard mode is disabled.')
agentStpCstPortTCNGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortTCNGuard.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortTCNGuard.setDescription('This command restricts the port from propagating any topology change\n                      information received through that port.\n\n                     enable(1)  - enables the tcn-guard mode for the port.\n                     disable(2) - disables the tcn-guard mode for the port.\n\n                     The default tcn-guard mode is disabled.')
agentStpCstPortLoopGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortLoopGuard.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortLoopGuard.setDescription('This command enables loop guard on this port. This setting applies\n                     to all Spanning Tree instances of which this port is a member.\n\n                     enable(1)  - enables the loop guard mode for the port.\n                     disable(2) - disables the loop guard mode for the port.\n\n                     The default loop-guard mode is disabled.')
agentStpMstTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12), )
if mibBuilder.loadTexts: agentStpMstTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTable.setDescription('MST table.')
agentStpMstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: agentStpMstEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstEntry.setDescription('MST entry.')
agentStpMstId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstId.setDescription('The MSTP instance ID.')
agentStpMstBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstBridgePriority.setStatus('current')
if mibBuilder.loadTexts: agentStpMstBridgePriority.setDescription('The MSTP bridge priority in a specific instance. The priority is\n                     in the increments of 4096. The recommended default value is 32768.')
agentStpMstBridgeIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstBridgeIdentifier.setStatus('current')
if mibBuilder.loadTexts: agentStpMstBridgeIdentifier.setDescription('The MSTP bridge identifier in a specific instance.')
agentStpMstDesignatedRootId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedRootId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedRootId.setDescription('The MSTP designated root bridge identifier in a specific instance.')
agentStpMstRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstRootPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRootPathCost.setDescription('The MSTP root path cost in a specific instance.')
agentStpMstRootPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstRootPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRootPortId.setDescription('The MSTP root port ID in a specific instance.')
agentStpMstTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTimeSinceTopologyChange.setDescription('The MSTP time since the last topology change in a specific instance.')
agentStpMstTopologyChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTopologyChangeCount.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTopologyChangeCount.setDescription('The MSTP count of topology changes in a specific instance.')
agentStpMstTopologyChangeParm = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTopologyChangeParm.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTopologyChangeParm.setDescription('The MSTP topology change parameter in a specific instance.')
agentStpMstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStpMstRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRowStatus.setDescription('The MSTP instance status.\n\n                     Supported values:\n                     active(1)      - valid instance.\n                     createAndGo(4) - used to create a new instance.\n                     destroy(6)     - removes an instance.')
agentStpMstPortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 13), )
if mibBuilder.loadTexts: agentStpMstPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortTable.setDescription('MST port table.')
agentStpMstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 13, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentStpMstId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpMstPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortEntry.setDescription('MST port entry.')
agentStpMstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortForwardingState.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortForwardingState.setDescription('The MSTP forwarding state of a specific port in a specific instance.')
agentStpMstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortId.setDescription('The MSTP port identifier of a specific port in a specific instance.')
agentStpMstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortPathCost.setDescription('The MSTP port path cost in a specific instance. The default value will\n                     correspond to the recommendation specified in IEEE 802.1s Table 13-2\n                     which varies depending upon link speed.')
agentStpMstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 13, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstPortPriority.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortPriority.setDescription('The MSTP port priority in a specific instance. The priority is\n                     in the increments of 16. The default value is 128.')
agentStpMstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedBridgeId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedBridgeId.setDescription('The MSTP designated bridge ID of a specific port in a specific instance.')
agentStpMstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 13, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedCost.setDescription('The MSTP designated cost of a specific port in a specific instance.')
agentStpMstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 13, 1, 7), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedPortId.setDescription('The MSTP designated port ID of a specific port in a specific instance.')
agentStpMstPortLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortLoopInconsistentState.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortLoopInconsistentState.setDescription('The loop inconsistent state of a specific port in a specific instance.\n                     This value can only report as true(1) when loop guard is enabled on the port\n                     and the port has transitioned from blocking state in this MST instance.')
agentStpMstPortTransitionsIntoLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortTransitionsIntoLoopInconsistentState.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortTransitionsIntoLoopInconsistentState.setDescription('The number of times this interface has transitioned into loop inconsistent state.')
agentStpMstPortTransitionsOutOfLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortTransitionsOutOfLoopInconsistentState.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortTransitionsOutOfLoopInconsistentState.setDescription('The number of times this interface has transitioned out of loop inconsistent state.')
agentStpMstVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 14), )
if mibBuilder.loadTexts: agentStpMstVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanTable.setDescription('MST VLAN table.')
agentStpMstVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 14, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentStpMstId"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: agentStpMstVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanEntry.setDescription('MST VLAN entry.')
agentStpMstVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 14, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStpMstVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanRowStatus.setDescription('The association status of an MSTP instance and a VLAN.\n\n                     Supported values:\n                     active(1)      - valid association between an MSTP instance and a VLAN.\n                     createAndGo(4) - used to create a new association between an MSTP instance and a VLAN.\n                     destroy(6)     - removes the association between an MSTP instance and a VLAN.')
agentStpBpduGuardMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpBpduGuardMode.setStatus('current')
if mibBuilder.loadTexts: agentStpBpduGuardMode.setDescription('The spanning tree BPDU Guard Mode.\n\n                     enable(1)  - enables BPDU Guard Mode on the switch.\n                     disable(2) - disables BPDU Guard Mode on the switch.\n\n                     The default status is disabled.')
agentStpBpduFilterDefault = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpBpduFilterDefault.setStatus('current')
if mibBuilder.loadTexts: agentStpBpduFilterDefault.setDescription('The spanning tree BPDU Filter Mode, it enables BPDU Filter on all\n                     edge ports.\n\n                     enable(1)  - enables BPDU Filter Mode on the switch.\n                     disable(2) - disables BPDU Filter Mode on the switch.\n\n                     The default status is disabled.')
agentAuthenticationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16))
agentAuthenticationListCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListCreate.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListCreate.setDescription('Authentication List Create\n                      If set to a non empty string, creates a new Authentication List for\n                      configuration.')
agentAuthenticationListTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2), )
if mibBuilder.loadTexts: agentAuthenticationListTable.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListTable.setDescription('Authentication List table.')
agentAuthenticationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentAuthenticationListIndex"))
if mibBuilder.loadTexts: agentAuthenticationListEntry.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListEntry.setDescription('Authentication List entry.')
agentAuthenticationListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentAuthenticationListIndex.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListIndex.setDescription('Authentication List Index\n                     Unique number used for indexing into this table.')
agentAuthenticationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthenticationListName.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListName.setDescription('Authentication List Name\n                     Unique name used to identify the Authentication List from other tables.')
agentAuthenticationListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod1.setDescription('Authentication List Method 1\n                      Configures the first authentication method to use when this list is\n                      specified.')
agentAuthenticationListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod2.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod2.setDescription('Authentication List Method 2\n                      Configures the second authentication method to use when this list is\n                      specified.')
agentAuthenticationListMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod3.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod3.setDescription('Authentication List Method 3\n                      Configures the third authentication method to use when this list is\n                      specified.')
agentAuthenticationListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListStatus.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListStatus.setDescription('The status of the Authentication List.\n\n                     Supported values:\n                     active(1)      - indicates a valid Authenticaiton List\n                     destroy(6)     - removes the Authentication List.')
agentAuthenticationListMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod4.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod4.setDescription('Authentication List Method 4\n                      Configures the fourth authentication method to use when this list is\n                      specified.')
agentAuthenticationListMethod5 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod5.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod5.setDescription('Authentication List Method 5\n                      Configures the fifth authentication method to use when this list is\n                      specified.')
agentUserConfigDefaultAuthenticationList = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserConfigDefaultAuthenticationList.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigDefaultAuthenticationList.setDescription('Default Authentication List\n                      This object configures which authentication list to use for users\n                      which do not have an Authentication List configured.  The list\n                      must be configured before setting.')
agentUserAuthenticationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 4), )
if mibBuilder.loadTexts: agentUserAuthenticationConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationConfigTable.setDescription('User Authentication Config Table')
agentUserAuthenticationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 4, 1), )
agentUserConfigEntry.registerAugmentions(("EdgeSwitch-SWITCHING-MIB", "agentUserAuthenticationConfigEntry"))
agentUserAuthenticationConfigEntry.setIndexNames(*agentUserConfigEntry.getIndexNames())
if mibBuilder.loadTexts: agentUserAuthenticationConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationConfigEntry.setDescription('User Authentication Config Entry')
agentUserAuthenticationList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAuthenticationList.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationList.setDescription('User Authentication List\n                      This object configures which authentication list to use for this\n                      user.  The list must be configured before setting.')
agentUserPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 5), )
if mibBuilder.loadTexts: agentUserPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserPortConfigTable.setDescription('User Port Config Table')
agentUserPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 5, 1), )
agentUserConfigEntry.registerAugmentions(("EdgeSwitch-SWITCHING-MIB", "agentUserPortConfigEntry"))
agentUserPortConfigEntry.setIndexNames(*agentUserConfigEntry.getIndexNames())
if mibBuilder.loadTexts: agentUserPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserPortConfigEntry.setDescription('User Port Config Entry')
agentUserPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 5, 1, 1), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserPortSecurity.setStatus('current')
if mibBuilder.loadTexts: agentUserPortSecurity.setDescription('User Port Port Security\n                      This object configures which ports the user has access to.\n                      Ports are indexed based on dot1dBasePort entries in\n                      dot1dBasePortTable.')
agentExecAccountingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20))
agentExecAccountingListCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListCreate.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListCreate.setDescription('ExecAccounting List Create\n                      if set to a non empty string, creates a new ExecAccounting List for\n                      configuration.')
agentExecAccountingListTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2), )
if mibBuilder.loadTexts: agentExecAccountingListTable.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListTable.setDescription('ExecAccounting Method List table.')
agentExecAccountingListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentExecAccountingListIndex"))
if mibBuilder.loadTexts: agentExecAccountingListEntry.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListEntry.setDescription('ExecAccounting Method List Entry.')
agentExecAccountingListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentExecAccountingListIndex.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListIndex.setDescription('ExecAccounting List Index\n                     Unique number used for indexing into this table.')
agentExecAccountingListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentExecAccountingListName.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListName.setDescription('                     Unique name used to identify the ExecAccounting List from other tables.')
agentExecAccountingMethodType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("start-stop", 1), ("stop-only", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingMethodType.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingMethodType.setDescription('ExecAccounting Method Type\n                      Configures the method type to use when this ExecAccounting list is\n                      specified.')
agentExecAccountingListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListMethod1.setDescription('ExecAccounting List Method 1\n                      Configures the authentication method to use when this list is specified.')
agentExecAccountingListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListMethod2.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListMethod2.setDescription('ExecAccounting List Method 2\n                      Configures the authentication method to use when this list is specified.')
agentExecAccountingListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListStatus.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListStatus.setDescription('The status of the ExecAccounting List.\n\n                     Supported values:\n                     active(1)      - indicates a valid ExecAccounting List\n                     destroy(6)     - removes the ExecAccounting List.')
agentCmdsAccountingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21))
agentCmdsAccountingListCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingListCreate.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListCreate.setDescription('CmdsAccounting List Create\n                      if set to a non empty string, creates a new CmdsAccounting List for\n                      configuration.')
agentCmdsAccountingListTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 2), )
if mibBuilder.loadTexts: agentCmdsAccountingListTable.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListTable.setDescription('CmdsAccounting Method List table.')
agentCmdsAccountingListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentCmdsAccountingListIndex"))
if mibBuilder.loadTexts: agentCmdsAccountingListEntry.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListEntry.setDescription('CmdsAccounting Method List Entry.')
agentCmdsAccountingListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentCmdsAccountingListIndex.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListIndex.setDescription('CmdsAccounting List Index\n                     Unique number used for indexing into this table.')
agentCmdsAccountingListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCmdsAccountingListName.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListName.setDescription('                     Unique name used to identify the CmdsAccounting List from other tables.')
agentCmdsAccountingMethodType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("start-stop", 1), ("stop-only", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingMethodType.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingMethodType.setDescription('CmdsAccounting Method Type\n                      Configures the method type to use when this CmdsAccounting list is\n                      specified.')
agentCmdsAccountingListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListMethod1.setDescription('CmdsAccounting List Method 1\n                      Configures the authentication method to use when this list is specified.')
agentCmdsAccountingListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingListStatus.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListStatus.setDescription('The status of the CmdsAccounting List.\n\n                     Supported values:\n                     active(1)      - indicates a valid CmdsAccounting List\n                     destroy(6)     - removes the CmdsAccounting List.')
agentClassOfServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 17))
agentClassOfServicePortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 17, 1), )
if mibBuilder.loadTexts: agentClassOfServicePortTable.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortTable.setDescription('A table that contains information about the 802.1p priority\n                     mapping to traffic class priority queue for every physical port.')
agentClassOfServicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 17, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "EdgeSwitch-SWITCHING-MIB", "agentClassOfServicePortPriority"))
if mibBuilder.loadTexts: agentClassOfServicePortEntry.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortEntry.setDescription('A 802.1p priority mapped to a traffic class priority queue.')
agentClassOfServicePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: agentClassOfServicePortPriority.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortPriority.setDescription('The Priority value determined for the received frame.\n                     This value is equivalent to the priority indicated in\n                     the tagged frame received, or one of the evaluated\n                     priorities, determined according to the media-type.\n\n                     For untagged frames received from Ethernet media, this\n                     value is equal to the dot1dPortDefaultUserPriority value\n                     for the ingress port.')
agentClassOfServicePortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClassOfServicePortClass.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortClass.setDescription('Traffic class priority queue the received frame is mapped to.')
agentHTTPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 18))
agentHTTPWebMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPWebMode.setStatus('current')
if mibBuilder.loadTexts: agentHTTPWebMode.setDescription('Configures the HTTP server admin mode')
agentHTTPJavaMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPJavaMode.setStatus('current')
if mibBuilder.loadTexts: agentHTTPJavaMode.setDescription('Configures the use of the Java interface through Web connections.')
agentHTTPMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 18, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPMaxSessions.setStatus('current')
if mibBuilder.loadTexts: agentHTTPMaxSessions.setDescription('Configures the maximum number of allowable HTTP sessions.  The default\n                      value is 16.')
agentHTTPHardTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 18, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPHardTimeout.setStatus('current')
if mibBuilder.loadTexts: agentHTTPHardTimeout.setDescription('Configures the hard timeout for HTTP sessions in hours.  The default\n                      value is 24 hours.')
agentHTTPSoftTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 18, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPSoftTimeout.setStatus('current')
if mibBuilder.loadTexts: agentHTTPSoftTimeout.setDescription('Configures the soft (activity) timeout for HTTP sessions in minutes.\n                      The default value is 5 minutes.')
agentHTTPWebMgmtPortNum = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 18, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(80, 80), ValueRangeConstraint(1025, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPWebMgmtPortNum.setStatus('current')
if mibBuilder.loadTexts: agentHTTPWebMgmtPortNum.setDescription("Get/Set the TCP port number that the HTTP server listens to for incoming\n                     requests. The port number is an integer value from 1025 to 65535. Before setting\n                     this object, check your system (e.g. using 'netstat') to make sure the desired\n                     port number is not currently being used by any other service. The default\n                     value for this object is 80.\n\n                     Note that existing HTTP login sessions are closed whenever this object value \n                     is changed. All new HTTP sessions must be established using the new \n                     port number.")
agentAutoInstallConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 19))
agentAutoinstallMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallMode.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallMode.setDescription('Enable/Disable Autoinstall on device.')
agentAutoinstallAutosaveMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallAutosaveMode.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallAutosaveMode.setDescription('Enable/Disable Auto Save of downloaded configuration on device.')
agentAutoinstallUnicastRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallUnicastRetryCount.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallUnicastRetryCount.setDescription('Sets number of unicast TFTP attempts for configuration file.')
agentAutoinstallStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 19, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAutoinstallStatus.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallStatus.setDescription('Display current Autoinstall status on device.')
agentAutoinstallAutoRebootMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallAutoRebootMode.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallAutoRebootMode.setDescription('Enable/Disable Auto Reboot after succesfull image update on device.')
agentAutoinstallOperationalMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 19, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallOperationalMode.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallOperationalMode.setDescription('Enable/Disable Autoinstall operational mode on device.')
agentCmdsAuthorizationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23))
agentCmdsAuthorizationListCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 20), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAuthorizationListCreate.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListCreate.setDescription("Command Authorization List Create.\n                       If set to a non empty string, creates a new\n                       Command Authorization List for configuration.\n                       List name must contain Alphanumeric characters including\n                       '-', '_', ' '.")
agentCmdsAuthorizationListTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2), )
if mibBuilder.loadTexts: agentCmdsAuthorizationListTable.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListTable.setDescription('Command Authorization Method List table.')
agentCmdsAuthorizationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentCmdsAuthorizationListIndex"))
if mibBuilder.loadTexts: agentCmdsAuthorizationListEntry.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListEntry.setDescription('Command Authorization Method List Entry.')
agentCmdsAuthorizationListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentCmdsAuthorizationListIndex.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListIndex.setDescription('Command Authorization List Index\n                     Unique number used for indexing into this table.')
agentCmdsAuthorizationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCmdsAuthorizationListName.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListName.setDescription(' Command Authorization List Name\n                     Unique name used to identify the Command Authorization \n                     List from other tables.')
agentCmdsAuthorizationListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAuthorizationListStatus.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListStatus.setDescription('The status of the CmdsAuthorization List.\n\n                     Supported values:\n                     active(1)      - indicates a valid CmdsAuthorization List\n                     destroy(6)     - removes the CmdsAuthorization List.')
agentCmdsAuthorizationListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAuthorizationListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListMethod1.setDescription('Command Authorization List Method1\n                      Configures the Command Authorization method to use when \n                      this list is specified.')
agentCmdsAuthorizationListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAuthorizationListMethod2.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListMethod2.setDescription('Command Authorization List Method2\n                      Configures the Command Authorization method to use when\n                      this list is specified.')
agentCmdsAuthorizationListMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAuthorizationListMethod3.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListMethod3.setDescription('Command Authorization List Method2\n                      Configures the Command Authorization method to use when\n                      this list is specified.')
agentExecAuthorizationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24))
agentExecAuthorizationListCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 20), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListCreate.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListCreate.setDescription("Exec Authorization List Create.\n                       If set to a non empty string, creates a new\n                       Exec Authorization List for configuration.\n                       List name must contain Alphanumeric characters including\n                       '-', '_', ' '.")
agentExecAuthorizationListTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2), )
if mibBuilder.loadTexts: agentExecAuthorizationListTable.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListTable.setDescription('Exec Authorization Method List table.')
agentExecAuthorizationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentExecAuthorizationListIndex"))
if mibBuilder.loadTexts: agentExecAuthorizationListEntry.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListEntry.setDescription('Exec Authorization Method List Entry.')
agentExecAuthorizationListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentExecAuthorizationListIndex.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListIndex.setDescription('Exec Authorization List Index\n                     Unique number used for indexing into this table.')
agentExecAuthorizationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentExecAuthorizationListName.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListName.setDescription(' Exec Authorization List Name\n                     Unique name used to identify the Exec Authorization \n                     List from other tables.')
agentExecAuthorizationListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListStatus.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListStatus.setDescription('The status of the ExecAuthorization List.\n\n                     Supported values:\n                     active(1)      - indicates a valid ExecAuthorization List\n                     destroy(6)     - removes the ExecAuthorization List.')
agentExecAuthorizationListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListMethod1.setDescription('Exec Authorization List Method1\n                      Configures the Exec Authorization method to use when \n                      this list is specified.')
agentExecAuthorizationListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListMethod2.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListMethod2.setDescription('Exec Authorization List Method2\n                      Configures the Exec Authorization method to use when\n                      this list is specified.')
agentExecAuthorizationListMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListMethod3.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListMethod3.setDescription('Exec Authorization List Method3\n                      Configures the Exec Authorization method to use when\n                      this list is specified.')
agentExecAuthorizationListMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListMethod4.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListMethod4.setDescription('Exec Authorization List Method4\n                      Configures the Exec Authorization method to use when\n                      this list is specified.')
agentSwitchMbufConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 25))
agentSwitchMbufRisingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 25, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMbufRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufRisingThreshold.setDescription('The Mbuf utilization rising threshold in percentage.\n                    A single notification (rising event) is generated when\n                    the total Mbuf utilization exceeds this threshold.\n\n                    After a rising event is generated, another such event\n                    will not be generated until the total Mbuf utilization\n                    falls below the agentSwitchMbufFallingThreshold and then\n                    exceeds the agentSwitchMbufRisingThreshold.')
agentSwitchMbufFallingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 25, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMbufFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufFallingThreshold.setDescription('The Mbuf utilization falling threshold in percentage. \n                    A single notification (falling event) is generated when \n                    the total Mbuf utilization falls below this threshold.\n\n                    After a falling event is generated, another such event\n                    will not be generated until the total Mbuf utilization\n                    exceeds the agentSwitchMbufRisingThreshold and then falls\n                    below the agentSwitchMbufFallingThreshold.')
agentSwitchMbufNotificationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 25, 3), AgentLogSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMbufNotificationSeverity.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufNotificationSeverity.setDescription('Severity level while notification is generated for rising\n                     and falling threshold.')
agentDigitalSignatureConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 26))
agentDigitalSignatureVerifyMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noverify", 0), ("image", 1), ("config", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDigitalSignatureVerifyMode.setStatus('current')
if mibBuilder.loadTexts: agentDigitalSignatureVerifyMode.setDescription('To configure the digital signature verify option for the downloading\n                     image and config files. The selected option is stored in config data.\n                      The following options are supported: \n                      \n                      noverify - no digital signature verification of image or config script file  \n                      image    - digital signature verification of image only \n                      config   - digital signature verification of config script only \n                      all      - digital signature verification of image and config script file')
agentSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3))
agentSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSaveConfig.setStatus('current')
if mibBuilder.loadTexts: agentSaveConfig.setDescription('enable(1) will initiate an configuration save to nvram.\n\n                     Status is returned by the object agentSaveConfigStatus.')
agentClearConfig = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearConfig.setStatus('current')
if mibBuilder.loadTexts: agentClearConfig.setDescription('clear config to factory defaults')
agentClearLoginSessions = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLoginSessions.setStatus('current')
if mibBuilder.loadTexts: agentClearLoginSessions.setDescription('close all telnet sessions')
agentClearPasswords = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearPasswords.setStatus('current')
if mibBuilder.loadTexts: agentClearPasswords.setDescription('reset passwords')
agentClearPortStats = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearPortStats.setStatus('current')
if mibBuilder.loadTexts: agentClearPortStats.setDescription('clear all port statistics')
agentClearSwitchStats = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearSwitchStats.setStatus('current')
if mibBuilder.loadTexts: agentClearSwitchStats.setDescription('clear all switch statistics')
agentClearTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearTrapLog.setStatus('current')
if mibBuilder.loadTexts: agentClearTrapLog.setDescription('clear trap log')
agentClearVlan = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearVlan.setStatus('current')
if mibBuilder.loadTexts: agentClearVlan.setDescription('clear vlan entries')
agentResetSystem = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentResetSystem.setStatus('current')
if mibBuilder.loadTexts: agentResetSystem.setDescription('Resets the switch.\n\n                      This object is not valid for stacking platforms.')
agentSaveConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInitiated", 1), ("savingInProcess", 2), ("savingComplete", 3), ("savingFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSaveConfigStatus.setStatus('current')
if mibBuilder.loadTexts: agentSaveConfigStatus.setDescription('Indicates the current status of an save configuration request.')
agentStartupConfigErase = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("erase", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStartupConfigErase.setStatus('current')
if mibBuilder.loadTexts: agentStartupConfigErase.setDescription('Erase the text-based configuration named startup-config\n                      stored in non-volatile memory.On read returns 0.')
agentFactoryDefaultsErase = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("erase", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFactoryDefaultsErase.setStatus('current')
if mibBuilder.loadTexts: agentFactoryDefaultsErase.setDescription('Erase the text-based configuration file named factory-defaults\n                      stored in non-volatile memory.On read returns 0.')
agentCableTesterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 4))
agentCableTesterStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("success", 2), ("failure", 3), ("uninitialized", 4))).clone('uninitialized')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCableTesterStatus.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterStatus.setDescription('Status of the Virtual Cable Tester\n                     active(1)        - cable testing is in progress.  Set to this value\n                                        to start the test.\n                     success(2)       - A successful test was performed.  Cannot be set.\n                     failure(3)       - A failure was encountered during the test.\n                                        Cannot be set.\n                     uninitialized(4) - No test has been performed yet. Cannot be set.')
agentCableTesterIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 4, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCableTesterIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterIfIndex.setDescription('Determines on which port to perform the cable test.  Limited to\n                     copper based ports.')
agentCableTesterCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("open", 2), ("short", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterCableStatus.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterCableStatus.setDescription('Indicates the results of the Cable Test.\n\n\n                     normal(1)        - The cable is working correctly.\n                     open(2)          - The cable is disconnected or there is a faulty\n                                        connector.\n                     short(3)         - There is an electrical short in the cable.\n                     unknown(4)       - No test has been performed yet, or a test is\n                                        currently in progress.')
agentCableTesterMinimumCableLength = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterMinimumCableLength.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterMinimumCableLength.setDescription('The estimated length of the cable in meters.  This value\n                     indicates the shortest length estimated.  This object will\n                     return 0 if agentCableTesterStatus is not success(2) or the cable\n                     length is unknown.')
agentCableTesterMaximumCableLength = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 4, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterMaximumCableLength.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterMaximumCableLength.setDescription('The estimated length of the cable in meters.  This value\n                     indicates the longest length estimated.  This object will\n                     return 0 if agentCableTesterStatus is not success(2) or the cable\n                     length is unknown.')
agentCableTesterCableFailureLocation = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterCableFailureLocation.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterCableFailureLocation.setDescription('The estimated distance in meters from the end of the cable to\n                     the failure location.  This object will return 0 if\n                     agentCableTesterStatus is not success(2).')
agentDaiConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21))
agentDaiSrcMacValidate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiSrcMacValidate.setStatus('current')
if mibBuilder.loadTexts: agentDaiSrcMacValidate.setDescription("This object indicates whether Sender MAC validation in the ARP\n             packets is enabled.\n\n             If this object is set to 'true', validation\n             is enabled.\n\n             If this object is set to 'false', validation\n             is disabled.")
agentDaiDstMacValidate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiDstMacValidate.setStatus('current')
if mibBuilder.loadTexts: agentDaiDstMacValidate.setDescription("This object indicates whether Target MAC validation in the ARP\n             Response packets is enabled.\n\n             If this object is set to 'true', validation\n             is enabled.\n\n             If this object is set to 'false', validation\n             is disabled.")
agentDaiIPValidate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiIPValidate.setStatus('current')
if mibBuilder.loadTexts: agentDaiIPValidate.setDescription("This object indicates whether IP address validation in the ARP\n             packets is enabled.\n\n             If this object is set to 'true', validation\n             is enabled.\n\n             If this object is set to 'false', validation\n             is disabled.")
agentDaiVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 4), )
if mibBuilder.loadTexts: agentDaiVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanConfigTable.setDescription('A table provides the mechanism to control Dynamic ARP\n            Inspection per VLAN. When a VLAN is created in a device\n            supporting this table, a corresponding entry of this table\n            will be added.')
agentDaiVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 4, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentDaiVlanIndex"))
if mibBuilder.loadTexts: agentDaiVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanConfigEntry.setDescription('A row instance contains the configuration for Dynamic\n             ARP Inspection at each existing VLAN.')
agentDaiVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDaiVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanIndex.setDescription('This object indicates the VLAN number on which Dynamic ARP\n                 Inspection feature is configured.')
agentDaiVlanDynArpInspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiVlanDynArpInspEnable.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanDynArpInspEnable.setDescription("This object indicates whether Dynamic ARP Inspection is\n             enabled in this VLAN.\n\n             If this object is set to 'true', Dynamic ARP Inspection\n             is enabled.\n\n             If this object is set to 'false', Dynamic ARP Inspection\n             is disabled.")
agentDaiVlanLoggingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 4, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiVlanLoggingEnable.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanLoggingEnable.setDescription("This object indicates whether the Dynamic ARP Inspection\n            logging is enabled on this VlAN.\n            If this object is set to 'true', Dynamic ARP Inspection\n            logging is enabled.\n            If this object is set to 'false', Dynamic ARP Inspection\n            loging is disabled.")
agentDaiVlanArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiVlanArpAclName.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanArpAclName.setDescription('This object indicates the ARP ACL name set for this VLAN.')
agentDaiVlanArpAclStaticFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiVlanArpAclStaticFlag.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanArpAclStaticFlag.setDescription("This object indicates whether the ARP ACL set for this\n            VLAN has static flag set.\n            If this object is set to 'true', static flag is enabled.\n            If this object is set to 'false', static flag is disabled.")
agentDaiStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiStatsReset.setStatus('current')
if mibBuilder.loadTexts: agentDaiStatsReset.setDescription('Clear the DAI statistics on all vlans. A value of reset(1)\n              is used to reset the statistics. A read on this object will\n              always return the value none(0). The value none(0) cannot\n              be forcibly set by the administrator.')
agentDaiVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 6), )
if mibBuilder.loadTexts: agentDaiVlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanStatsTable.setDescription('A table provides the mechanism to control Dynamic ARP\n            Inspection per VLAN. When a VLAN is created in a device\n            supporting this table, a corresponding entry of this table\n            will be added.')
agentDaiVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 6, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentDaiVlanStatsIndex"))
if mibBuilder.loadTexts: agentDaiVlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanStatsEntry.setDescription('A row instance contains the Dynamic ARP Inspection\n             statistics per VLAN.')
agentDaiVlanStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 6, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDaiVlanStatsIndex.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanStatsIndex.setDescription('This object indicates the VLAN number on which Dynamic ARP\n            Inspection statistics are retrieved.')
agentDaiVlanPktsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanPktsForwarded.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanPktsForwarded.setDescription('Number of valid ARP packets forwarded by DAI.')
agentDaiVlanPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanPktsDropped.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanPktsDropped.setDescription('Number of invalid ARP packets dropped by DAI.')
agentDaiVlanDhcpDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanDhcpDrops.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanDhcpDrops.setDescription('Number of ARP packets that were dropped by DAI as\n             there is no matching DHCP Snooping binding entry found.')
agentDaiVlanDhcpPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanDhcpPermits.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanDhcpPermits.setDescription('Number of ARP packets that were forwarded by DAI as\n             there is a matching DHCP Snooping binding entry found.')
agentDaiVlanAclDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanAclDrops.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanAclDrops.setDescription('Number of ARP packets that were dropped by DAI as\n             there is no matching ARP ACL rule found for this Vlan and\n             the static flag is set on this vlan.')
agentDaiVlanAclPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanAclPermits.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanAclPermits.setDescription('Number of ARP packets that were permitted by DAI as\n             there is a matching ARP ACL rule found for this Vlan.')
agentDaiVlanSrcMacFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanSrcMacFailures.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanSrcMacFailures.setDescription("Number of ARP packets that were dropped by DAI as the\n             sender mac address in ARP packet didn't match the source\n             mac in ethernet header.")
agentDaiVlanDstMacFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanDstMacFailures.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanDstMacFailures.setDescription("Number of ARP packets that were dropped by DAI as the\n             target mac address in ARP reply packet didn't match the\n             destination mac in ethernet header.")
agentDaiVlanIpValidFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanIpValidFailures.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanIpValidFailures.setDescription('Number of ARP packets that were dropped by DAI as the\n             sender IP address in ARP packet or target IP address in\n             ARP reply packet is invalid. Invalid addresses include\n             0.0.0.0, 255.255.255.255, IP multicast addresses,\n             class E addresses (240.0.0.0/4), loopback addresses (127.0.0.0/8).')
agentDaiIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 7), )
if mibBuilder.loadTexts: agentDaiIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDaiIfConfigTable.setDescription('A table provides the mechanism to configure the trust\n            state for Dynamic ARP Inspection purpose at each physical\n            interface capable of this feature.')
agentDaiIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDaiIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDaiIfConfigEntry.setDescription('A row instance contains the configuration for\n             Dynamic ARP Inspection at each physical\n             interface capable of this feature.')
agentDaiIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 7, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiIfTrustEnable.setStatus('current')
if mibBuilder.loadTexts: agentDaiIfTrustEnable.setDescription("This object indicates whether the interface is trusted for\n            Dynamic ARP Inspection purpose.\n\n            If this object is set to 'true', the interface is trusted.\n            ARP packets coming to this interface will be forwarded\n            without checking.\n\n            If this object is set to 'false', the interface is not\n            trusted. ARP packets coming to this interface will be\n            subjected to ARP inspection.")
agentDaiIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 300), )).clone(15)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiIfRateLimit.setStatus('current')
if mibBuilder.loadTexts: agentDaiIfRateLimit.setDescription('This object indicates rate limit value for Dynamic ARP\n             Inspection purpose. If the incoming rate of ARP packets\n             exceeds the value of this object for consecutively\n             burst interval seconds, ARP packets will be\n             dropped. Value of -1 indicates that there is no rate limit.')
agentDaiIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 21, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiIfBurstInterval.setStatus('current')
if mibBuilder.loadTexts: agentDaiIfBurstInterval.setDescription('This object indicates the burst interval value\n             for rate limiting purpose on this interface.')
agentArpAclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 22))
agentArpAclTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 22, 1), )
if mibBuilder.loadTexts: agentArpAclTable.setStatus('current')
if mibBuilder.loadTexts: agentArpAclTable.setDescription('A table of the ARP ACL entries')
agentArpAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 22, 1, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentArpAclName"))
if mibBuilder.loadTexts: agentArpAclEntry.setStatus('current')
if mibBuilder.loadTexts: agentArpAclEntry.setDescription('Represents entry for an ARP ACL')
agentArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 22, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclName.setStatus('current')
if mibBuilder.loadTexts: agentArpAclName.setDescription('Name of the ARP ACL, which must consist of 1 to 31 alphanumeric\n                      characters and uniquely identify this ARP ACL. This object must\n                      be set to complete a new ARP ACL row instance.')
agentArpAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 22, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentArpAclRowStatus.setDescription('The status of this conceptual row. Entries can not be deleted until all rows in\n                     arpAclRuleTable with corresponding values of arpAclIndex have been deleted.\n\n                     active(1)       - this ACL instance is active\n                     createAndGo(4)  - set to this value to create an instance\n                     destroy(6)      - set to this value to delete an instance')
agentArpAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 22, 2), )
if mibBuilder.loadTexts: agentArpAclRuleTable.setStatus('current')
if mibBuilder.loadTexts: agentArpAclRuleTable.setDescription('A table of the ARP ACL Rule entries')
agentArpAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 22, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentArpAclName"), (0, "EdgeSwitch-SWITCHING-MIB", "agentArpAclRuleMatchSenderIpAddr"), (0, "EdgeSwitch-SWITCHING-MIB", "agentArpAclRuleMatchSenderMacAddr"))
if mibBuilder.loadTexts: agentArpAclRuleEntry.setStatus('current')
if mibBuilder.loadTexts: agentArpAclRuleEntry.setDescription('Represents entry for a set of ARP ACL-match rules')
agentArpAclRuleMatchSenderIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 22, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclRuleMatchSenderIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentArpAclRuleMatchSenderIpAddr.setDescription('Sender IP address match value for the ARP ACL.')
agentArpAclRuleMatchSenderMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 22, 2, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclRuleMatchSenderMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentArpAclRuleMatchSenderMacAddr.setDescription('Sender MAC address match value for the ARP ACL.')
agentArpAclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 22, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentArpAclRuleRowStatus.setDescription('The status of this conceptual row.\n\n                     active(1)      - this ACL Rule is active\n                     createAndGo(4) - set to this value to create an instance\n                     destroy(6)     - set to this value to delete an instance')
agentDhcpSnoopingConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23))
agentDhcpSnoopingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingAdminMode.setDescription("This object indicates whether DHCP Snooping\n             is enabled globally.\n\n             If this object is set to 'true',admin mode\n             is enabled globally.\n\n             If this object is set to 'false',admin mode\n             is disabled globally.")
agentDhcpSnoopingVerifyMac = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingVerifyMac.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVerifyMac.setDescription("This object indicates whether source Mac address\n             in the received DHCP Message needs to be verified or not.\n\n             If this object is set to 'true',verifyMac\n             is enabled globally.\n\n             If this object is set to 'false',verifyMac\n             is disabled globally.")
agentDhcpSnoopingVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 3), )
if mibBuilder.loadTexts: agentDhcpSnoopingVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVlanConfigTable.setDescription('A table provides the mechanism to control DHCP SNOOPING\n             per VLAN. When a VLAN is created in a device\n            supporting this table, a corresponding entry of this table\n            will be added.')
agentDhcpSnoopingVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 3, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentDhcpSnoopingVlanIndex"))
if mibBuilder.loadTexts: agentDhcpSnoopingVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVlanConfigEntry.setDescription('A row instance contains the configuration for DHCP\n             SNOOPING at each existing VLAN.')
agentDhcpSnoopingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDhcpSnoopingVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVlanIndex.setDescription('This object indicates the VLAN number on which DHCP SNOOPING\n                 Inspection feature is configured.')
agentDhcpSnoopingVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingVlanEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVlanEnable.setDescription("This object indicates whether DHCP SNOOPING is\n             enabled in this VLAN.\n\n             If this object is set to 'true', DHCP SNOOPING\n             is enabled.\n\n             If this object is set to 'false', DHCP SNOOPING\n             is disabled.")
agentDhcpSnoopingIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 4), )
if mibBuilder.loadTexts: agentDhcpSnoopingIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfConfigTable.setDescription('A table provides the mechanism to configure the trust\n        state for DHCP snooping purpose at each physical\n        interface capable of this feature.')
agentDhcpSnoopingIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpSnoopingIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfConfigEntry.setDescription('A row instance contains the configuration for\n         DHCP snooping at each physical interface capable of this feature.')
agentDhcpSnoopingIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfTrustEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfTrustEnable.setDescription('This object indicates whether the interface is trusted for\n        DHCP snooping purpose.')
agentDhcpSnoopingIfLogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfLogEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfLogEnable.setDescription('This object indicates whether the Logging needs on DHCP snooping validations\n         or not')
agentDhcpSnoopingIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 300), )).clone(-1)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfRateLimit.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfRateLimit.setDescription('This object indicates rate limit value for DHCP\n             Snooping purpose. If the incoming rate of DHCP packets\n             exceeds the value of this object for consecutively\n             burst interval seconds, DHCP packets will be\n             dropped. Value of -1 indicates that there is no rate limit.')
agentDhcpSnoopingIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 15), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfBurstInterval.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfBurstInterval.setDescription('This object indicates the burst interval value\n             for rate limiting purpose on this interface. Value\n             of -1 indicates that there is no burst interval.')
agentIpsgIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 5), )
if mibBuilder.loadTexts: agentIpsgIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentIpsgIfConfigTable.setDescription('A table provides the mechanism to configure the IPSG\n         at each physical interface capable of this feature.')
agentIpsgIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentIpsgIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpsgIfConfigEntry.setDescription('A row instance contains the configuration for\n         IPSG at each physical interface capable of this feature.')
agentIpsgIfVerifySource = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpsgIfVerifySource.setStatus('current')
if mibBuilder.loadTexts: agentIpsgIfVerifySource.setDescription('This object indicates whether IP packets received on this interface\n        are filtered based on whether IP Source Guard considers the source IP address\n        to be a valid client address. Setting this variable to false automatically\n        sets agentIpsgIfPortSecurity to false.')
agentIpsgIfPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 5, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpsgIfPortSecurity.setStatus('current')
if mibBuilder.loadTexts: agentIpsgIfPortSecurity.setDescription('This object indicates whether IP packets received on this interface \n        are filtered based on whether IP Source Guard considers the source MAC address\n        to be a valid client address. The port security option cannot be enabled\n        unless agentIpsgIfVerifySource is also enabled. That is, MAC address filtering\n        cannot be done without also doing IP address filtering. But IP address filtering\n        can be done without MAC address filtering. Once the port security \n        option is enabled, it can only be disabled by disabling agentIpsgIfVerifySource.')
agentDhcpSnoopingStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingStatsReset.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingStatsReset.setDescription('Clear the DHCP snooping statistics on all ports. A value of reset(1)\n          is used to reset the statistics. A read on this object will\n          always return the value none(0). The value none(0) cannot\n          be forcibly set by the administrator.')
agentDhcpSnoopingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 7), )
if mibBuilder.loadTexts: agentDhcpSnoopingStatsTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingStatsTable.setDescription('A table provides the mechanism for statics of DHCP snooping.')
agentDhcpSnoopingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpSnoopingStatsEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingStatsEntry.setDescription('A row instance contains the DHCP snooping statistics per VLAN.')
agentDhcpSnoopingMacVerifyFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpSnoopingMacVerifyFailures.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingMacVerifyFailures.setDescription('This object indicates the number of failure verifications of client mac address with\n         source mac address')
agentDhcpSnoopingInvalidClientMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpSnoopingInvalidClientMessages.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingInvalidClientMessages.setDescription('This object indicates the number of invalid DHCP release, request and decline messages')
agentDhcpSnoopingInvalidServerMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpSnoopingInvalidServerMessages.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingInvalidServerMessages.setDescription('This object indicates the number of invalid DHCP server mesaages')
agentStaticIpsgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 8), )
if mibBuilder.loadTexts: agentStaticIpsgBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingTable.setDescription('A table of the IPSG static entries')
agentStaticIpsgBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 8, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentStaticIpsgBindingIfIndex"), (0, "EdgeSwitch-SWITCHING-MIB", "agentStaticIpsgBindingVlanId"), (0, "EdgeSwitch-SWITCHING-MIB", "agentStaticIpsgBindingIpAddr"), (0, "EdgeSwitch-SWITCHING-MIB", "agentStaticIpsgBindingMacAddr"))
if mibBuilder.loadTexts: agentStaticIpsgBindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingEntry.setDescription('Represents a binding in IPSG table')
agentStaticIpsgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 8, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingIfIndex.setDescription('Interface on which this IPSG binding is going to be added.')
agentStaticIpsgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 8, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingVlanId.setDescription(' VLAN to whcig this IPSG binding is going to be added.')
agentStaticIpsgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 8, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingIpAddr.setDescription('IP address match value for the IPSG Binding.')
agentStaticIpsgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 8, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingMacAddr.setDescription('MAC address match value for the IPSG Binding.')
agentStaticIpsgBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingRowStatus.setDescription('The status of this conceptual row.\n\n                     active(1)      - this IPSG Binding is active\n                     createAndGo(4) - set to this value to create an instance\n                     destroy(6)     - set to this value to delete an instance')
agentDynamicIpsgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 9), )
if mibBuilder.loadTexts: agentDynamicIpsgBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingTable.setDescription('A table of the IPSG dynamic entries')
agentDynamicIpsgBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 9, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentDynamicIpsgBindingIfIndex"), (0, "EdgeSwitch-SWITCHING-MIB", "agentDynamicIpsgBindingVlanId"), (0, "EdgeSwitch-SWITCHING-MIB", "agentDynamicIpsgBindingIpAddr"), (0, "EdgeSwitch-SWITCHING-MIB", "agentDynamicIpsgBindingMacAddr"))
if mibBuilder.loadTexts: agentDynamicIpsgBindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingEntry.setDescription('Represents a binding in IPSG table')
agentDynamicIpsgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingIfIndex.setDescription('Interface on which this IPSG binding is added.')
agentDynamicIpsgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 9, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingVlanId.setDescription(' VLAN to which this IPSG binding is going to be added.')
agentDynamicIpsgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingIpAddr.setDescription('Sender IP address match value for the IPSG Binding.')
agentDynamicIpsgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 9, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingMacAddr.setDescription('MAC address match value for the IPSG Binding.')
agentStaticDsBindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 10), )
if mibBuilder.loadTexts: agentStaticDsBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingTable.setDescription('A table of the DHCP SNOOPING static entries')
agentStaticDsBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 10, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentStaticDsBindingMacAddr"))
if mibBuilder.loadTexts: agentStaticDsBindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingEntry.setDescription('Represents a binding in DHCP SNOOPING table')
agentStaticDsBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 10, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingIfIndex.setDescription('Interface on which this DHCP SNOOPING binding is going to be added.')
agentStaticDsBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 10, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingVlanId.setDescription('VLAN to which this DHCP SNOOPING binding is going to be added.')
agentStaticDsBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 10, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingMacAddr.setDescription('MAC address match value for the DHCP SNOOPING Binding.')
agentStaticDsBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 10, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingIpAddr.setDescription('IP address match value for the DHCP SNOOPING Binding.')
agentStaticDsBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingRowStatus.setDescription('The status of this conceptual row.\n\n                     active(1)      - this DHCP SNOOPING Binding is active\n                     createAndGo(4) - set to this value to create an instance\n                     destroy(6)     - set to this value to delete an instance')
agentDynamicDsBindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 11), )
if mibBuilder.loadTexts: agentDynamicDsBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingTable.setDescription('A table of the DHCP SNOOPING Dynamic entries')
agentDynamicDsBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 11, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentDynamicDsBindingMacAddr"))
if mibBuilder.loadTexts: agentDynamicDsBindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingEntry.setDescription('Represents a binding in DHCP SNOOPING table')
agentDynamicDsBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 11, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingIfIndex.setDescription('Interface on which this DHCP SNOOPING binding is going to be added.')
agentDynamicDsBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 11, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingVlanId.setDescription(' VLAN to whcig this DHCP SNOOPING binding is going to be added.')
agentDynamicDsBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 11, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingMacAddr.setDescription('MAC address match value for the DHCP SNOOPING Binding.')
agentDynamicDsBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingIpAddr.setDescription('IP address match value for the DHCP SNOOPING Binding.')
agentDynamicDsBindingLeaseRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 11, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingLeaseRemainingTime.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingLeaseRemainingTime.setDescription('This specifies the period for which the DHCP SNOOPING Binding is valid.')
agentDhcpSnoopingRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingRemoteFileName.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingRemoteFileName.setDescription('This object indicates the file name on the remote machine\n             to save the DHCP Snooping bindings. This will be set only\n             when we have a valid remote IP.')
agentDhcpSnoopingRemoteIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingRemoteIpAddr.setDescription('This object indicates the IP address of the remote machine\n             to save the DHCP Snooping bindings. This will be set only\n             when we have a valid file name.')
agentDhcpSnoopingStoreInterval = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingStoreInterval.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingStoreInterval.setDescription('This object indicates the perodic time interval\n             to save the DHCP Snooping bindings.')
agentDhcpL2RelayConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24))
agentDhcpL2RelayAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayAdminMode.setDescription("This object indicates whether DHCP L2 Relay\n             is enabled globally.\n\n             If this object is set to 'true',admin mode\n             is enabled globally.\n\n             If this object is set to 'false',admin mode\n             is disabled globally.")
agentDhcpL2RelayIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 2), )
if mibBuilder.loadTexts: agentDhcpL2RelayIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayIfConfigTable.setDescription('A table provides the mechanism to enable/disable and configure\n         the trust state for DHCP L2Relay purpose at each physical\n        interface capable of this feature.')
agentDhcpL2RelayIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpL2RelayIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayIfConfigEntry.setDescription('A row instance contains the configuration for\n         DHCP L2 Relay at each physical interface capable of this feature.')
agentDhcpL2RelayIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayIfEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayIfEnable.setDescription('This object indicates whether the DHCP L2Relay is enabled\n         or not')
agentDhcpL2RelayIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayIfTrustEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayIfTrustEnable.setDescription('This object indicates whether the interface is trusted for\n        DHCP L2 Relay purpose.')
agentDhcpL2RelayVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 3), )
if mibBuilder.loadTexts: agentDhcpL2RelayVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayVlanConfigTable.setDescription('A table provides the mechanism to control DHCP L2 Relay\n             per VLAN. When a VLAN is created in a device\n            supporting this table, a corresponding entry of this table\n            will be added.')
agentDhcpL2RelayVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 3, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentDhcpL2RelayVlanIndex"))
if mibBuilder.loadTexts: agentDhcpL2RelayVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayVlanConfigEntry.setDescription('A row instance contains the configuration for DHCP\n             L2 Relay at each existing VLAN.')
agentDhcpL2RelayVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDhcpL2RelayVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayVlanIndex.setDescription('This object indicates the VLAN number on which DHCP L2 Relay\n                 feature is configured.')
agentDhcpL2RelayVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayVlanEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayVlanEnable.setDescription("This object indicates whether DHCP L2 Relay is\n             enabled in this VLAN.\n\n             If this object is set to 'true', DHCP L2 Relay\n             is enabled.\n\n             If this object is set to 'false', DHCP L2 Relay\n             is disabled.")
agentDhcpL2RelayCircuitIdVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 3, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayCircuitIdVlanEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayCircuitIdVlanEnable.setDescription("This object indicates whether DHCP CircuitId is\n             enabled for L2 relaying in this VLAN.\n\n             If this object is set to 'true', DHCP CircuitId\n             is enabled.\n\n             If this object is set to 'false', DHCP CircuitId\n             is disabled.")
agentDhcpL2RelayRemoteIdVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayRemoteIdVlanEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayRemoteIdVlanEnable.setDescription('When this object is set with a non-empty string, DHCP RemoteId is\n             enabled for L2 relaying in this VLAN.')
agentDhcpL2RelayStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayStatsReset.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayStatsReset.setDescription('Clear the DHCP L2Relay statistics on all ports. A value of reset(1)\n          is used to reset the statistics. A read on this object will\n          always return the value none(0). The value none(0) cannot\n          be forcibly set by the administrator.')
agentDhcpL2RelayStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 7), )
if mibBuilder.loadTexts: agentDhcpL2RelayStatsTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayStatsTable.setDescription('A table provides the mechanism for statics of DHCP L2 Relay.')
agentDhcpL2RelayStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpL2RelayStatsEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayStatsEntry.setDescription('A row instance contains the DHCP L2Relay statistics per interface.')
agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82.setDescription('This object indicates the number of DHCP server messages received with Option-82 field\n         on the untrusted interface.')
agentDhcpL2RelayUntrustedClntMsgsWithOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayUntrustedClntMsgsWithOptn82.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayUntrustedClntMsgsWithOptn82.setDescription('This object indicates the number of DHCP client messages received with Option-82 field\n         on the untrusted interface.')
agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82.setDescription('This object indicates the number of DHCP server messages received without Option-82 field\n         on the trusted interface.')
agentDhcpL2RelayTrustedClntMsgsWithoutOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayTrustedClntMsgsWithoutOptn82.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayTrustedClntMsgsWithoutOptn82.setDescription('This object indicates the number of DHCP client messages received without Option-82 field\n         on the trusted interface.')
agentSwitchVoiceVLANGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 25))
agentSwitchVoiceVLANAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchVoiceVLANAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVoiceVLANAdminMode.setDescription('This enables or disables Voice VLAN on the system.')
agentSwitchVoiceVlanDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 25, 2), )
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceTable.setDescription('A table of the Voice Vlan device entries.')
agentSwitchVoiceVlanDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 25, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchVoiceVlanInterfaceNum"), (0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchVoiceVlanDeviceMacAddress"))
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceEntry.setDescription('Represents entry for a Voice Device on the interface.')
agentSwitchVoiceVlanInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 25, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchVoiceVlanInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVoiceVlanInterfaceNum.setDescription('The interface number of this interface.')
agentSwitchVoiceVlanDeviceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 25, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceMacAddress.setDescription('The Voice Device Mac address')
agentSwitchAddressConflictGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26))
agentSwitchAddressConflictDetectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionStatus.setDescription("Displays if an address conflict was detected on the switch\n                     since the last reset of the status or the last conflict detection run. Set to 'true'\n                     if detected, 'false' otherwise.")
agentSwitchAddressConflictDetectionStatusReset = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionStatusReset.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionStatusReset.setDescription('Clear the last address conflict detection status in the switch.\n                     A value of reset(1) is used to reset the status. A read on this\n                     object always returns the value none (0). The value none (0) cannot\n                     be forcibly set by the administrator.')
agentSwitchLastConflictingIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchLastConflictingIPAddr.setStatus('current')
if mibBuilder.loadTexts: agentSwitchLastConflictingIPAddr.setDescription('The reported conflicting IP address on the switch since the last\n                     reset of the conflict detection status or the last conflict detection run.')
agentSwitchLastConflictingMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchLastConflictingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentSwitchLastConflictingMacAddr.setDescription('The MAC address of the host corresponding to the reported \n                     conflicting IP address on the switch since the last reset of\n                     the conflict detection status or the last conflict detection run.')
agentSwitchLastConflictReportedTime = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchLastConflictReportedTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchLastConflictReportedTime.setDescription("Time since the last address conflict was detected. It is displayed\n                     in days, hours, minutes and seconds. It is set to a valid value only\n                     when the conflict detection status is 'true'.")
agentSwitchConflictIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 6), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentSwitchConflictIPAddr.setStatus('current')
if mibBuilder.loadTexts: agentSwitchConflictIPAddr.setDescription("The IP address on the switch reported to have a conflict with\n                     another host's IP address.")
agentSwitchConflictMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 7), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentSwitchConflictMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentSwitchConflictMacAddr.setDescription('The MAC address of the host that has an IP address conflicting\n                     with the IP address on the switch.')
agentSwitchAddressConflictDetectionRun = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("run", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionRun.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionRun.setDescription('Trigger the action to run the active address conflict detection.\n                     A value of run(1) is used to issue the action command. A read on\n                     this object always returns the value none(0). The value none (0)\n                     cannot be forcibly set by the administrator.')
fastPathSwitchingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0))
multipleUsersTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 1))
if mibBuilder.loadTexts: multipleUsersTrap.setStatus('current')
if mibBuilder.loadTexts: multipleUsersTrap.setDescription('This trap is sent when more than one user is logged in with\n             administrative access.  Only applies to CLI interface.')
broadcastStormStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 2))
if mibBuilder.loadTexts: broadcastStormStartTrap.setStatus('obsolete')
if mibBuilder.loadTexts: broadcastStormStartTrap.setDescription('This trap is sent when a broadcast storm is detected.')
broadcastStormEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 3))
if mibBuilder.loadTexts: broadcastStormEndTrap.setStatus('obsolete')
if mibBuilder.loadTexts: broadcastStormEndTrap.setDescription('This trap is sent when a broadcast storm is no longer\n             detected.')
linkFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 4))
if mibBuilder.loadTexts: linkFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: linkFailureTrap.setDescription('')
vlanRequestFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 5)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRequestFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: vlanRequestFailureTrap.setDescription('')
vlanDeleteLastTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 6)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDeleteLastTrap.setStatus('current')
if mibBuilder.loadTexts: vlanDeleteLastTrap.setDescription('Trap is sent when attempting to delete the last configured VLAN\n             or the Default VLAN.')
vlanDefaultCfgFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 7)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setStatus('current')
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setDescription('Trap is sent if there are failures in resetting VLAN\n             configuration to defaults.')
vlanRestoreFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 8)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setDescription('')
fanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 9))
if mibBuilder.loadTexts: fanFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: fanFailureTrap.setDescription('')
stpInstanceNewRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 10)).setObjects(("EdgeSwitch-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setDescription('Trap is sent when this machine is a new STP Root when there is more\n             than one STP instance.')
stpInstanceTopologyChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 11)).setObjects(("EdgeSwitch-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setDescription('Trap is sent when there is a STP topology change when there is more\n             than one STP instance.')
powerSupplyStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 12))
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setStatus('obsolete')
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setDescription('')
failedUserLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 13))
if mibBuilder.loadTexts: failedUserLoginTrap.setStatus('current')
if mibBuilder.loadTexts: failedUserLoginTrap.setDescription('Trap is sent when a user fails to authenticate via the CLI or Web\n             interfaces.')
userLockoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 14))
if mibBuilder.loadTexts: userLockoutTrap.setStatus('current')
if mibBuilder.loadTexts: userLockoutTrap.setDescription('Trap is sent when a user account is locked due to consecutive failed login attempts via the CLI or Web\n             interfaces beyond the allowed limit.')
daiIntfErrorDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 15)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: daiIntfErrorDisabledTrap.setStatus('current')
if mibBuilder.loadTexts: daiIntfErrorDisabledTrap.setDescription('Trap is sent once an interface is error disabled by DAI when the\n              incoming packet rate exceeded configured rate limit during a\n              burst-interval.')
stpInstanceLoopInconsistentStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 16)).setObjects(("EdgeSwitch-SWITCHING-MIB", "agentStpMstId"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: stpInstanceLoopInconsistentStartTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceLoopInconsistentStartTrap.setDescription('Trap is sent when this port in this STP instance enters\n             loop inconsistent state upon failure to receive a BPDU.')
stpInstanceLoopInconsistentEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 17)).setObjects(("EdgeSwitch-SWITCHING-MIB", "agentStpMstId"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: stpInstanceLoopInconsistentEndTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceLoopInconsistentEndTrap.setDescription('Trap is sent when this port in this STP instance exits\n             loop inconsistent state upon reception of a BPDU.')
dhcpSnoopingIntfErrorDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 18)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dhcpSnoopingIntfErrorDisabledTrap.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingIntfErrorDisabledTrap.setDescription('Trap is sent once an interface is error disabled by DHCP Snooping when the\n              incoming packet rate exceeded configured rate limit during a\n              burst-interval.')
noStartupConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 19))
if mibBuilder.loadTexts: noStartupConfigTrap.setStatus('current')
if mibBuilder.loadTexts: noStartupConfigTrap.setDescription('Trap is sent when startup-config file exists and SSH is enabled.')
agentSwitchIpAddressConflictTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 20)).setObjects(("EdgeSwitch-SWITCHING-MIB", "agentSwitchConflictIPAddr"), ("EdgeSwitch-SWITCHING-MIB", "agentSwitchConflictMacAddr"))
if mibBuilder.loadTexts: agentSwitchIpAddressConflictTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpAddressConflictTrap.setDescription('IP address conflict trap signifies the reception of an ARP from\n              another host in the LAN that has conflicting IP address.')
agentSwitchCpuRisingThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 21)).setObjects(("EdgeSwitch-SWITCHING-MIB", "agentSwitchCpuProcessRisingThreshold"), ("EdgeSwitch-SWITCHING-MIB", "agentSwitchCpuProcessName"))
if mibBuilder.loadTexts: agentSwitchCpuRisingThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuRisingThresholdTrap.setDescription('Trap is sent when the total CPU utilization exceeds CPU Rising \n                    utilization threshold over the configured Rising threshold interval.')
agentSwitchCpuFallingThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 22)).setObjects(("EdgeSwitch-SWITCHING-MIB", "agentSwitchCpuProcessFallingThreshold"))
if mibBuilder.loadTexts: agentSwitchCpuFallingThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuFallingThresholdTrap.setDescription('Trap is sent when the total CPU utilization falls below CPU Falling \n                    utilization threshold over the configured falling threshold interval.')
agentSwitchCpuFreeMemBelowThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 23)).setObjects(("EdgeSwitch-SWITCHING-MIB", "agentSwitchCpuProcessFreeMemoryThreshold"))
if mibBuilder.loadTexts: agentSwitchCpuFreeMemBelowThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuFreeMemBelowThresholdTrap.setDescription('Trap is sent when CPU Free Memory falls below the configured threshold.')
agentSwitchCpuFreeMemAboveThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 24)).setObjects(("EdgeSwitch-SWITCHING-MIB", "agentSwitchCpuProcessFreeMemoryThreshold"))
if mibBuilder.loadTexts: agentSwitchCpuFreeMemAboveThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuFreeMemAboveThresholdTrap.setDescription('Trap is sent when CPU Free Memory rises to 10% above the configured threshold.')
topologyChangeInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 25)).setObjects(("EdgeSwitch-SWITCHING-MIB", "agentStpMstId"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: topologyChangeInitiatedTrap.setStatus('current')
if mibBuilder.loadTexts: topologyChangeInitiatedTrap.setDescription('Trap is sent once an interface gets a Topology change event\n              on a port.')
loopDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 26)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: loopDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: loopDetectedTrap.setDescription('Trap is sent once when switch STP detects a loop')
agentSwitchMbufRisingThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 27)).setObjects(("EdgeSwitch-SWITCHING-MIB", "agentSwitchMbufRisingThreshold"), ("EdgeSwitch-SWITCHING-MIB", "agentSwitchMbufsTotal"), ("EdgeSwitch-SWITCHING-MIB", "agentSwitchMbufsUsed"), ("EdgeSwitch-SWITCHING-MIB", "agentSwitchMbufsFree"))
if mibBuilder.loadTexts: agentSwitchMbufRisingThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufRisingThresholdTrap.setDescription('Trap is sent when the Mbuf utilization exceeds Rising\n                    utilization threshold.')
agentSwitchMbufFallingThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 28)).setObjects(("EdgeSwitch-SWITCHING-MIB", "agentSwitchMbufFallingThreshold"), ("EdgeSwitch-SWITCHING-MIB", "agentSwitchMbufsTotal"), ("EdgeSwitch-SWITCHING-MIB", "agentSwitchMbufsUsed"), ("EdgeSwitch-SWITCHING-MIB", "agentSwitchMbufsFree"))
if mibBuilder.loadTexts: agentSwitchMbufFallingThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufFallingThresholdTrap.setDescription('Trap is sent when the Mbuf utilization falls below Falling\n                    utilization threshold.')
agentSdmPreferConfigEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 27))
agentSdmPreferCurrentTemplate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dualIPv4andIPv6", 1), ("ipv4RoutingDefault", 2), ("ipv4DataCenter", 3), ("ipv4DataCenterPlus", 4), ("dualDataCenter", 5), ("dualMplsDataCenter", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSdmPreferCurrentTemplate.setStatus('current')
if mibBuilder.loadTexts: agentSdmPreferCurrentTemplate.setDescription(' Displays the current active SDM Template.')
agentSdmPreferNextTemplate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 27, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 0), ("dualIPv4andIPv6", 1), ("ipv4RoutingDefault", 2), ("ipv4DataCenter", 3), ("ipv4DataCenterPlus", 4), ("dualDataCenter", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSdmPreferNextTemplate.setStatus('current')
if mibBuilder.loadTexts: agentSdmPreferNextTemplate.setDescription(' Configures the next active template. It will be active only after the next reboot.\n         To revert to the default template after the next reboot, use the option default(0).')
agentSdmTemplateSummaryTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 28))
agentSdmTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 28, 1), )
if mibBuilder.loadTexts: agentSdmTemplateTable.setStatus('current')
if mibBuilder.loadTexts: agentSdmTemplateTable.setDescription('Displays Switch Database Management Template Information.')
agentSdmTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 28, 1, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSdmTemplateId"))
if mibBuilder.loadTexts: agentSdmTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: agentSdmTemplateEntry.setDescription('Information about a SDM Template table entry.')
agentSdmTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 28, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dualIPv4andIPv6", 1), ("ipv4RoutingDefault", 2), ("ipv4DataCenter", 3), ("ipv4DataCenterPlus", 4), ("dualDataCenter", 5))))
if mibBuilder.loadTexts: agentSdmTemplateId.setStatus('current')
if mibBuilder.loadTexts: agentSdmTemplateId.setDescription('The SDM Template type this instance is associated with.')
agentArpEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 28, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentArpEntries.setStatus('current')
if mibBuilder.loadTexts: agentArpEntries.setDescription('The maximum number of entries in the IPv4 Address Resolution Protocol (ARP) cache for routing interfaces.')
agentIPv4UnicastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 28, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv4UnicastRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIPv4UnicastRoutes.setDescription('The maximum number of IPv4 unicast forwarding table entries.')
agentIPv6NdpEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 28, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6NdpEntries.setStatus('current')
if mibBuilder.loadTexts: agentIPv6NdpEntries.setDescription('The maximum number of IPv6 Neighbor Discovery Protocol (NDP) cache entries.')
agentIPv6UnicastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 28, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6UnicastRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIPv6UnicastRoutes.setDescription('The maximum number of IPv6 unicast forwarding table entries.')
agentEcmpNextHops = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 28, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEcmpNextHops.setStatus('current')
if mibBuilder.loadTexts: agentEcmpNextHops.setDescription('The maximum number of Equal cost next hops that can be installed in the IPv4 and IPv6 unicast forwarding tables.')
agentIPv4MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 28, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv4MulticastRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIPv4MulticastRoutes.setDescription('The maximum number of IPv4 multicast forwarding table entries.')
agentIPv6MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 28, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6MulticastRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIPv6MulticastRoutes.setDescription('The maximum number of IPv6 multicast forwarding table entries.')
agentSwitchCutThroughGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 29))
agentSwitchCutThroughConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCutThroughConfigMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCutThroughConfigMode.setDescription('Mode changes are effective from the next reload of the Switch.\n                      The cut-through feature may not be present on all switches. Use\n                      - agentSwitchCutThroughRunningModeStatus - MIB to check if the feature is \n                      present on your switch.')
agentSwitchCutThroughRunningModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 29, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCutThroughRunningModeStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCutThroughRunningModeStatus.setDescription('This gives the current running mode of the cut-through feature on switch.\n                      Note that Mode changes are effective from the next reload of the Switch.\n                      so running mode may be different than the configured mode.\n                      A value of not-supported(3) means that the feature is not present on the\n                      switch.')
agentSwitchCutThroughConfiguredModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 29, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCutThroughConfiguredModeStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCutThroughConfiguredModeStatus.setDescription('This gives the configured mode of cut-through feature on switch. \n                      Note that Mode changes are effective from the next reload of the Switch.\n                      so running mode may be different than the configured mode.\n                      A value of not-supported(3) means that the feature is not present on the\n                      switch.')
agentPortTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 30))
agentPortType40GigBaseX = ObjectIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 30, 1))
if mibBuilder.loadTexts: agentPortType40GigBaseX.setStatus('current')
if mibBuilder.loadTexts: agentPortType40GigBaseX.setDescription('X PCS/PMA, unknown PMD. MAU MIB augmentation')
if mibBuilder.loadTexts: agentPortType40GigBaseX.setReference('')
agentPrivateVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31))
agentPrivateVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 1), )
if mibBuilder.loadTexts: agentPrivateVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanTable.setDescription('')
agentPrivateVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: agentPrivateVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanEntry.setDescription('')
agentPrivateVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("isolated", 2), ("community", 3), ("unconfigured", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanType.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanType.setDescription('Enables vlan for Private Vlan and configures private vlan type.')
agentPrivateVlanAssociate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 1, 1, 2), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanAssociate.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanAssociate.setDescription('This field lists all the VlanIDs which are associated with the selected vlan.\n                     If the selected vlan type is not primary(1), a zero-length bitmask is returned.')
agentPrivateVlanIntfAssocTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 2), )
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocTable.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocTable.setDescription('')
agentPrivateVlanIntfAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocEntry.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocEntry.setDescription('')
agentPrivateVlanIntfAssocHostPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocHostPrimary.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocHostPrimary.setDescription('Configures the primary host vlan association with the interface.\n                     This must be configured along with agentPrivateVlanIntfAssocHostSecondary before\n                     the association will be operational.\n\n                     NOTE: Both agentPrivateVlanIntfAssocHostPrimary and agentPrivateVlanIntfAssocHostSecondary \n                     objects must be specified at the same time.')
agentPrivateVlanIntfAssocHostSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocHostSecondary.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocHostSecondary.setDescription('Configures the secondary host vlan association with the interface.  \n                     This must be configured along with agentPrivateVlanIntfAssocHostPrimary before\n                     the association will be operational.\n\n                     NOTE: Both agentPrivateVlanIntfAssocHostPrimary and agentPrivateVlanIntfAssocHostSecondary \n                     objects must be specified at the same time.')
agentPrivateVlanIntfAssocPromiscuousPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocPromiscuousPrimary.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocPromiscuousPrimary.setDescription('Configures the primary promiscuous vlan association with the interface.\n                     This must be configured along with agentPrivateVlanIntfAssocPromiscuousSecondary before\n                     the association will be operational.')
agentPrivateVlanIntfAssocPromiscuousSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 2, 1, 4), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocPromiscuousSecondary.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocPromiscuousSecondary.setDescription('Configures the secondary promiscuous vlan association with the interface.\n                     This must be configured along with agentPrivateVlanIntfAssocPromiscuousPrimary before\n                     the association will be operational.')
agentPrivateVlanIntfAssocOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 2, 1, 5), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocOperational.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocOperational.setDescription('Shows the operational private vlans associated with the interface.')
agentSwitchPrivateGroupConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 32))
agentSwitchPrivateGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 32, 1), )
if mibBuilder.loadTexts: agentSwitchPrivateGroupTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPrivateGroupTable.setDescription("The switch's private group  mapping table")
agentSwitchPrivateGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 32, 1, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchPrivateGroupId"))
if mibBuilder.loadTexts: agentSwitchPrivateGroupEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPrivateGroupEntry.setDescription('Private groups assigned to ports.')
agentSwitchPrivateGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchPrivateGroupId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPrivateGroupId.setDescription('The private group id  that  port belongs to')
agentSwitchPrivateGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 32, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchPrivateGroupName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPrivateGroupName.setDescription('The name of the Private group')
agentSwitchPrivateGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolated", 1), ("community", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchPrivateGroupMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPrivateGroupMode.setDescription('The mode of port in private group is either isloated or community')
agentSwitchPrivateGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 32, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchPrivateGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPrivateGroupRowStatus.setDescription('Private Group VLAN can only be created through\n                      multiple variable bindings taking all the objects of\n                      of the AgentSwitchPrivateGroupEntry.\n                       Supported values:\n                     active(1)      - valid entry\n                     createAndGo(4) - used to create a new entry\n                     destroy(6)     - removes the entry ')
agentSwitchPrivateGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 32, 2), )
if mibBuilder.loadTexts: agentSwitchPrivateGroupPortTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPrivateGroupPortTable.setDescription("The switch's private group portlist mapping table")
agentSwitchPrivateGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 32, 2, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentSwitchPrivateGroupPortGroupId"))
if mibBuilder.loadTexts: agentSwitchPrivateGroupPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPrivateGroupPortEntry.setDescription('List of ports assigned to private groups.')
agentSwitchPrivateGroupPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 32, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchPrivateGroupPortGroupId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPrivateGroupPortGroupId.setDescription('The private group id  that  port belongs to')
agentSwitchPrivateGroupPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 32, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchPrivateGroupPortGroupName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPrivateGroupPortGroupName.setDescription('The name of the Private group ')
agentSwitchPrivateGroupPortPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 32, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchPrivateGroupPortPortList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchPrivateGroupPortPortList.setDescription('The list of ports in private group')
agentDhcpv6SnoopingConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33))
agentDhcpv6SnoopingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingAdminMode.setDescription("This object indicates whether DHCPv6 SNOOPING\n             is enabled globally.\n\n             If this object is set to 'true',admin mode\n             is enabled globally.\n\n             If this object is set to 'false',admin mode\n             is disabled globally.")
agentDhcpv6SnoopingVerifyMac = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingVerifyMac.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingVerifyMac.setDescription("This object indicates whether source Mac address\n             in the received dhcpv6 Message needs to be verified or not.\n\n             If this object is set to 'true',verifyMac\n             is enabled globally.\n\n             If this object is set to 'false',verifyMac\n             is disabled globally.")
agentDhcpv6SnoopingVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 3), )
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanConfigTable.setDescription('A table provides the mechanism to control DHCPv6 SNOOPING\n             per VLAN. When a VLAN is created in a device\n            supporting this table, a corresponding entry of this table\n            will be added.')
agentDhcpv6SnoopingVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 3, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentDhcpv6SnoopingVlanIndex"))
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanConfigEntry.setDescription('A row instance contains the configuration for dhcpv6\n             SNOOPING at each existing VLAN.')
agentDhcpv6SnoopingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanIndex.setDescription('This object indicates the VLAN number on which DHCPv6 SNOOPING\n                 Inspection feature is configured.')
agentDhcpv6SnoopingVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanEnable.setDescription("This object indicates whether DHCPv6 SNOOPING is\n             enabled in this VLAN.\n\n             If this object is set to 'true', DHCPv6 SNOOPING\n             is enabled.\n\n             If this object is set to 'false', DHCPv6 SNOOPING\n             is disabled.")
agentDhcpv6SnoopingIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 4), )
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfConfigTable.setDescription('A table provides the mechanism to configure the trust\n        state for DHCPv6 SNOOPING purpose at each physical\n        interface capable of this feature.')
agentDhcpv6SnoopingIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfConfigEntry.setDescription('A row instance contains the configuration for\n         DHCPv6 SNOOPING at each physical interface capable of this feature.')
agentDhcpv6SnoopingIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfTrustEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfTrustEnable.setDescription('This object indicates whether the interface is trusted for\n        DHCPv6 SNOOPING purpose.')
agentDhcpv6SnoopingIfLogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfLogEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfLogEnable.setDescription('This object indicates whether the Logging needs on DHCPv6 SNOOPING validations\n         or not')
agentDhcpv6SnoopingIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 300), )).clone(-1)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfRateLimit.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfRateLimit.setDescription('This object indicates rate limit value for dhcpv6\n             Snooping purpose. If the incoming rate of dhcpv6 packets\n             exceeds the value of this object for consecutively\n             burst interval seconds, dhcpv6 packets will be\n             dropped. Value of -1 indicates that there is no rate limit.')
agentDhcpv6SnoopingIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 15), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfBurstInterval.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfBurstInterval.setDescription('This object indicates the burst interval value\n             for rate limiting purpose on this interface. Value\n             of -1 indicates that there is no burst interval.')
agentIpv6sgIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 5), )
if mibBuilder.loadTexts: agentIpv6sgIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6sgIfConfigTable.setDescription('A table provides the mechanism to configure the IPSG\n         at each physical interface capable of this feature.')
agentIpv6sgIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentIpv6sgIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6sgIfConfigEntry.setDescription('A row instance contains the configuration for \n         IPSG at each physical interface capable of this feature.')
agentIpv6sgIfVerifySource = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6sgIfVerifySource.setStatus('current')
if mibBuilder.loadTexts: agentIpv6sgIfVerifySource.setDescription('This object indicates whether the interface is enabled for IPv6SG\n         to forward the data based up on source Ip address')
agentIpv6sgIfPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 5, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6sgIfPortSecurity.setStatus('current')
if mibBuilder.loadTexts: agentIpv6sgIfPortSecurity.setDescription('This object indicates whether the interface is enabled for IPv6SG\n         to forward the data based up on source mac address in fdb table')
agentDhcpv6SnoopingStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsReset.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsReset.setDescription('Clear the DHCPv6 SNOOPING statistics on all ports. A value of reset(1)\n          is used to reset the statistics. A read on this object will\n          always return the value none(0). The value none(0) cannot\n          be forcibly set by the administrator.')
agentDhcpv6SnoopingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 7), )
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsTable.setDescription('A table provides the mechanism for statics of DHCPv6 SNOOPING.')
agentDhcpv6SnoopingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsEntry.setDescription('A row instance contains the DHCPv6 SNOOPING statistics per VLAN.')
agentDhcpv6SnoopingMacVerifyFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpv6SnoopingMacVerifyFailures.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingMacVerifyFailures.setDescription('This object indicates the number of failure verifications of client mac address with\n         source mac address')
agentDhcpv6SnoopingInvalidClientMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpv6SnoopingInvalidClientMessages.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingInvalidClientMessages.setDescription('This object indicates the number of invalid dhcpv6 release, request and decline messages')
agentDhcpv6SnoopingInvalidServerMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpv6SnoopingInvalidServerMessages.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingInvalidServerMessages.setDescription('This object indicates the number of invalid dhcpv6 server mesaages')
agentStaticIpv6sgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 8), )
if mibBuilder.loadTexts: agentStaticIpv6sgBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpv6sgBindingTable.setDescription('A table of the IPv6SG static entries')
agentStaticIpv6sgBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 8, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentStaticIpv6sgBindingIfIndex"), (0, "EdgeSwitch-SWITCHING-MIB", "agentStaticIpv6sgBindingVlanId"), (0, "EdgeSwitch-SWITCHING-MIB", "agentStaticIpv6sgBindingIpAddr"), (0, "EdgeSwitch-SWITCHING-MIB", "agentStaticIpv6sgBindingMacAddr"))
if mibBuilder.loadTexts: agentStaticIpv6sgBindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpv6sgBindingEntry.setDescription('Represents a binding in IPv6SG table')
agentStaticIpv6sgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 8, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpv6sgBindingIfIndex.setDescription('Interface on which this IPv6SG binding is going to be added.')
agentStaticIpv6sgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 8, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpv6sgBindingVlanId.setDescription(' VLAN to which this IPv6SG binding is going to be added.')
agentStaticIpv6sgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 8, 1, 3), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpv6sgBindingIpAddr.setDescription('IPv6 address match value for the IPv6SG binding.')
agentStaticIpv6sgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 8, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpv6sgBindingMacAddr.setDescription('MAC address match value for the IPv6SG Binding.')
agentStaticIpv6sgBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpv6sgBindingRowStatus.setDescription('The status of this conceptual row.\n\n                     active(1)      - this IPv6SG Binding is active\n                     createAndGo(4) - set to this value to create an instance\n                     destroy(6)     - set to this value to delete an instance')
agentDynamicIpv6sgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 9), )
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingTable.setDescription('A table of the IPv6SG dynamic entries')
agentDynamicIpv6sgBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 9, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentDynamicIpv6sgBindingIfIndex"), (0, "EdgeSwitch-SWITCHING-MIB", "agentDynamicIpv6sgBindingVlanId"), (0, "EdgeSwitch-SWITCHING-MIB", "agentDynamicIpv6sgBindingIpAddr"), (0, "EdgeSwitch-SWITCHING-MIB", "agentDynamicIpv6sgBindingMacAddr"))
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingEntry.setDescription('Represents a binding in IPSG table')
agentDynamicIpv6sgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingIfIndex.setDescription('Interface on which this IPv6SG binding is added.')
agentDynamicIpv6sgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 9, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingVlanId.setDescription(' VLAN to which this IPv6SG binding is going to be added.')
agentDynamicIpv6sgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 9, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingIpAddr.setDescription('Sender IPv6 address match value for the IPv6SG binding.')
agentDynamicIpv6sgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 9, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingMacAddr.setDescription('MAC address match value for the IPv6SG Binding.')
agentStaticDsv6BindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 10), )
if mibBuilder.loadTexts: agentStaticDsv6BindingTable.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsv6BindingTable.setDescription('A table of the DHCPv6 SNOOPING static entries')
agentStaticDsv6BindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 10, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentStaticDsv6BindingMacAddr"))
if mibBuilder.loadTexts: agentStaticDsv6BindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsv6BindingEntry.setDescription('Represents a static binding in DHCPv6 SNOOPING table')
agentStaticDsv6BindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 10, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsv6BindingIfIndex.setDescription('Interface on which this static DHCPv6 SNOOPING binding is going to be added.')
agentStaticDsv6BindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 10, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsv6BindingVlanId.setDescription(' VLAN to which this static DHCPv6 SNOOPING binding is going to be added.')
agentStaticDsv6BindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 10, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsv6BindingMacAddr.setDescription('MAC address match value for the static DHCPv6 SNOOPING Binding.')
agentStaticDsv6BindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 10, 1, 4), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsv6BindingIpAddr.setDescription('IP address match value for the static DHCPv6 SNOOPING Binding.')
agentStaticDsv6BindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsv6BindingRowStatus.setDescription('The status of this conceptual row.\n\n                     active(1)      - this static DHCPv6 SNOOPING Binding is active\n                     createAndGo(4) - set to this value to create an instance\n                     destroy(6)     - set to this value to delete an instance')
agentDynamicDsv6BindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 11), )
if mibBuilder.loadTexts: agentDynamicDsv6BindingTable.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsv6BindingTable.setDescription('A table of the DHCPv6 SNOOPING Dynamic entries')
agentDynamicDsv6BindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 11, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentDynamicDsv6BindingMacAddr"))
if mibBuilder.loadTexts: agentDynamicDsv6BindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsv6BindingEntry.setDescription('Represents a dynamic binding in DHCPv6 SNOOPING table')
agentDynamicDsv6BindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 11, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsv6BindingIfIndex.setDescription('Interface on which this dynamic DHCPv6 SNOOPING binding is going to be added.')
agentDynamicDsv6BindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 11, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsv6BindingVlanId.setDescription(' VLAN to which this dynamic DHCPv6 SNOOPING binding is going to be added.')
agentDynamicDsv6BindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 11, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsv6BindingMacAddr.setDescription('MAC address match value for the dynamic DHCPv6 SNOOPING Binding.')
agentDynamicDsv6BindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 11, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsv6BindingIpAddr.setDescription('IP address match value for the dynamic DHCPv6 SNOOPING Binding.')
agentDynamicDsv6BindingLeaseRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 11, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingLeaseRemainingTime.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsv6BindingLeaseRemainingTime.setDescription('This specifies the period for which the dynamic DHCPv6 SNOOPING Binding is valid.')
agentDhcpv6SnoopingRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingRemoteFileName.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingRemoteFileName.setDescription('This object indicates the file name on the remote machine\n             to save the DHCPv6 Snooping bindings. This will be set only\n             when we have a valid remote IP.')
agentDhcpv6SnoopingRemoteIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingRemoteIpAddr.setDescription('This object indicates the IP address of the remote machine\n             to save the DHCPv6 Snooping bindings. This will be set only\n             when we have a valid file name.')
agentDhcpv6SnoopingStoreInterval = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingStoreInterval.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingStoreInterval.setDescription('This object indicates the perodic time interval\n             to save the DHCPv6 Snooping bindings.')
agentPvrstpSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15))
agentPvstpAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvstpAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPvstpAdminMode.setDescription('The per VLAN spanning tree operational status.\n\n                     enable(1)  - enables PVSTP on the switch.\n                     disable(2) - disables PVSTP on the switch.\n\n                     The default status is disabled.')
agentPvrstpAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpAdminMode.setDescription('The per VLAN rapid spanning tree operational status.\n\n                     enable(1)  - enables PVRSTP on the switch.\n                     disable(2) - disables PVRSTP on the switch.\n\n                     The default status is disabled.')
agentPvrstpUplinkFast = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpUplinkFast.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpUplinkFast.setDescription('Enables or disabled uplink fast feature when switch is in PVST mode.\n\n                     enable(1)  - enables UPLINK FAST  on the switch.\n                     disable(2) - disables UPLINK FAST  on the switch.\n\n                     The default status is disabled.')
agentPvrstpBackboneFast = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpBackboneFast.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpBackboneFast.setDescription('Enables or disabled backbone fast feature when switch is in PVST mode.\n\n                     enable(1)  - enables BACKBONE FAST on the switch.\n                     disable(2) - disables BACKBONE FAST on the switch.\n\n                     The default status is disabled.')
agentPvrstpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 5), )
if mibBuilder.loadTexts: agentPvrstpVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpVlanTable.setDescription('PVRSTP table containing PVRSTP per vlan entries.')
agentPvrstpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 5, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentPvrstpVlanTableIndex"))
if mibBuilder.loadTexts: agentPvrstpVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpVlanEntry.setDescription('PVRSTP vlan entry attributes.')
agentPvrstpVlanTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 5, 1, 1), VlanId())
if mibBuilder.loadTexts: agentPvrstpVlanTableIndex.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpVlanTableIndex.setDescription('Index to PVRSTP vlan entry in PVRSTP vlan table.')
agentPvrstpVlanRootPriSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpVlanRootPriSec.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpVlanRootPriSec.setDescription('The PVRSTP primary or secondary root for the VLAN instance.')
agentPvrstpVlanHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpVlanHelloTime.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpVlanHelloTime.setDescription('The PVRSTP hello time for the VLAN instance.')
agentPvrstpVlanFwdDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpVlanFwdDelayTime.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpVlanFwdDelayTime.setDescription('The PVRSTP forward delay for the VLAN instance.')
agentPvrstpVlanMaxAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpVlanMaxAgeTime.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpVlanMaxAgeTime.setDescription('The PVRSTP max age for the VLAN instance.')
agentPvrstpPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 6), )
if mibBuilder.loadTexts: agentPvrstpPortVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpPortVlanTable.setDescription('PVRSTP table containing PVRSTP per port per vlan entries.')
agentPvrstpPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 6, 1), ).setIndexNames((0, "EdgeSwitch-SWITCHING-MIB", "agentPvrstpPortIndex"), (0, "EdgeSwitch-SWITCHING-MIB", "agentPvrstpVlanIndex"))
if mibBuilder.loadTexts: agentPvrstpPortVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpPortVlanEntry.setDescription('PVRSTP port entry per vlan attributes.')
agentPvrstpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentPvrstpPortIndex.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpPortIndex.setDescription('Port index to PVRSTP port entry in PVRSTP port vlan table.')
agentPvrstpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: agentPvrstpVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpVlanIndex.setDescription('Vlan index to PVRSTP port entry in PVRSTP port vlan table.')
agentPvrstpPortVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpPortVlanPriority.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpPortVlanPriority.setDescription('PVRSTP port vlan priority is in the range of 0 to 240. \n            Port priority value should be a multiple of 16.')
agentPvrstpVlanCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 15, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpVlanCost.setStatus('current')
if mibBuilder.loadTexts: agentPvrstpVlanCost.setDescription('PVRSTP port vlan cost is in the range of 0 to 200000000 ,for 0 its Auto.')
mibBuilder.exportSymbols("EdgeSwitch-SWITCHING-MIB", agentSwitchMbufTable=agentSwitchMbufTable, agentDhcpSnoopingVlanIndex=agentDhcpSnoopingVlanIndex, agentDhcpSnoopingIfLogEnable=agentDhcpSnoopingIfLogEnable, agentSwitchVoiceVlanInterfaceNum=agentSwitchVoiceVlanInterfaceNum, agentSwitchPrivateGroupEntry=agentSwitchPrivateGroupEntry, agentLagSummaryLocalPreferenceMode=agentLagSummaryLocalPreferenceMode, agentNetworkIpv6AddrPrefixLength=agentNetworkIpv6AddrPrefixLength, agentStpCstDesignatedBridgeId=agentStpCstDesignatedBridgeId, agentPvrstpVlanMaxAgeTime=agentPvrstpVlanMaxAgeTime, agentDaiVlanConfigEntry=agentDaiVlanConfigEntry, agentDaiIfRateLimit=agentDaiIfRateLimit, agentSwitchSnoopSSMSrcListVlanId=agentSwitchSnoopSSMSrcListVlanId, agentDhcpv6SnoopingIfRateLimit=agentDhcpv6SnoopingIfRateLimit, agentSwitchAddressAgingTimeout=agentSwitchAddressAgingTimeout, agentSwitchSnoopingQuerierVlanEntry=agentSwitchSnoopingQuerierVlanEntry, agentDaiIPValidate=agentDaiIPValidate, agentSwitchProtectedPortEntry=agentSwitchProtectedPortEntry, agentSwitchMulticastControlThresholdUnit=agentSwitchMulticastControlThresholdUnit, agentSwitchSnoopingQuerierAdminMode=agentSwitchSnoopingQuerierAdminMode, agentArpAclRuleTable=agentArpAclRuleTable, agentSwitchMbufsFree=agentSwitchMbufsFree, agentNetworkJavaMode=agentNetworkJavaMode, agentSwitchMbufsTotal=agentSwitchMbufsTotal, agentStpConfigName=agentStpConfigName, agentDhcpL2RelayVlanEnable=agentDhcpL2RelayVlanEnable, agentSnmpTrapReceiverIPAddress=agentSnmpTrapReceiverIPAddress, PYSNMP_MODULE_ID=fastPathSwitching, agentSwitchMbufAllocAttempts=agentSwitchMbufAllocAttempts, agentLoginSessionInetAddress=agentLoginSessionInetAddress, agentProtocolGroupProtocolEntry=agentProtocolGroupProtocolEntry, agentStpCstPortBpduGuardEffect=agentStpCstPortBpduGuardEffect, agentStpMstBridgePriority=agentStpMstBridgePriority, agentPortMirrorReflectorPort=agentPortMirrorReflectorPort, agentSwitchSnoopingAdminMode=agentSwitchSnoopingAdminMode, agentSwitchSnoopingVlanAdminMode=agentSwitchSnoopingVlanAdminMode, agentTransferDownloadImagename=agentTransferDownloadImagename, agentPortMirrorRemoteVlan=agentPortMirrorRemoteVlan, agentDot3adAggPortTable=agentDot3adAggPortTable, agentPortUnicastControlThreshold=agentPortUnicastControlThreshold, agentInventoryFRUNumber=agentInventoryFRUNumber, agentSwitchCpuFreeMemBelowThresholdTrap=agentSwitchCpuFreeMemBelowThresholdTrap, agentHTTPConfigGroup=agentHTTPConfigGroup, agentArpAclGroup=agentArpAclGroup, agentSwitchStaticMacFilteringAddress=agentSwitchStaticMacFilteringAddress, agentSwitchMFDBSummaryVlanId=agentSwitchMFDBSummaryVlanId, agentTransferUploadGroup=agentTransferUploadGroup, agentStpMstEntry=agentStpMstEntry, agentSwitchCpuFallingThresholdTrap=agentSwitchCpuFallingThresholdTrap, agentAuthenticationListEntry=agentAuthenticationListEntry, agentSdmTemplateSummaryTable=agentSdmTemplateSummaryTable, agentTrapLogGroup=agentTrapLogGroup, agentNetworkIpv6AdminMode=agentNetworkIpv6AdminMode, agentCLIBannerMsgConfigGroup=agentCLIBannerMsgConfigGroup, agentLoginSessionSessionTime=agentLoginSessionSessionTime, agentProtocolGroupProtocolID=agentProtocolGroupProtocolID, agentStpCstPortRootGuard=agentStpCstPortRootGuard, agentArpAclRuleMatchSenderMacAddr=agentArpAclRuleMatchSenderMacAddr, agentSwitchPrivateGroupName=agentSwitchPrivateGroupName, agentAuthenticationListMethod5=agentAuthenticationListMethod5, agentSwitchportMode=agentSwitchportMode, agentSnmpTrapReceiverConfigTable=agentSnmpTrapReceiverConfigTable, agentAuthenticationGroup=agentAuthenticationGroup, agentSwitchSnoopingVlanGroupMembershipInterval=agentSwitchSnoopingVlanGroupMembershipInterval, agentDhcpSnoopingStoreInterval=agentDhcpSnoopingStoreInterval, agentSwitchMbufGroup=agentSwitchMbufGroup, agentPortVoiceVlanNoneMode=agentPortVoiceVlanNoneMode, agentStpMstPortForwardingState=agentStpMstPortForwardingState, agentPortType=agentPortType, agentPvrstpUplinkFast=agentPvrstpUplinkFast, agentTransferUploadStatus=agentTransferUploadStatus, agentExecAccountingListTable=agentExecAccountingListTable, agentSwitchVlanSubnetAssociationVlanId=agentSwitchVlanSubnetAssociationVlanId, agentSnmpTrapReceiverCommunityName=agentSnmpTrapReceiverCommunityName, agentPvrstpVlanTableIndex=agentPvrstpVlanTableIndex, agentTransferUploadServerAddressType=agentTransferUploadServerAddressType, agentLagSummaryAdminMode=agentLagSummaryAdminMode, agentInventorySoftwareVersion=agentInventorySoftwareVersion, agentPvrstpPortVlanEntry=agentPvrstpPortVlanEntry, agentAutoInstallConfigGroup=agentAutoInstallConfigGroup, agentPortMirrorMacAccessListNumber=agentPortMirrorMacAccessListNumber, agentStpPortMigrationCheck=agentStpPortMigrationCheck, agentStpSwitchConfigGroup=agentStpSwitchConfigGroup, agentSnmpConfigGroup=agentSnmpConfigGroup, agentSwitchMFDBDescription=agentSwitchMFDBDescription, agentTelnetMaxSessions=agentTelnetMaxSessions, agentStpPortStatsMstpBpduRx=agentStpPortStatsMstpBpduRx, agentStpPortHelloTime=agentStpPortHelloTime, agentSwitchVoiceVLANGroup=agentSwitchVoiceVLANGroup, agentCmdsAccountingListName=agentCmdsAccountingListName, agentNetworkWebMode=agentNetworkWebMode, agentProtocolGroupProtocolIP=agentProtocolGroupProtocolIP, agentClearLoginSessions=agentClearLoginSessions, agentSwitchSnoopSSMFDBExcludePortList=agentSwitchSnoopSSMFDBExcludePortList, agentSwitchCpuProcessTable=agentSwitchCpuProcessTable, agentStpPortStatsRstpBpduTx=agentStpPortStatsRstpBpduTx, agentDhcpL2RelayAdminMode=agentDhcpL2RelayAdminMode, agentServicePortConfigGroup=agentServicePortConfigGroup, agentAutoinstallMode=agentAutoinstallMode, multipleUsersTrap=multipleUsersTrap, agentLoginSessionStatus=agentLoginSessionStatus, agentSwitchVoiceVLANAdminMode=agentSwitchVoiceVLANAdminMode, agentUserStatus=agentUserStatus, agentStpCstDesignatedCost=agentStpCstDesignatedCost, agentSerialStopBits=agentSerialStopBits, agentNetworkDhcp6REBINDMessagesSent=agentNetworkDhcp6REBINDMessagesSent, agentSupportedMibName=agentSupportedMibName, agentNetworkDhcp6StatsReset=agentNetworkDhcp6StatsReset, agentServicePortIpv6AddrPrefixLength=agentServicePortIpv6AddrPrefixLength, agentLagSummaryType=agentLagSummaryType, agentSwitchMFDBMaxTableEntries=agentSwitchMFDBMaxTableEntries, agentExecAccountingListMethod2=agentExecAccountingListMethod2, agentPvrstpVlanIndex=agentPvrstpVlanIndex, agentNetworkConfigProtocolDhcpRenew=agentNetworkConfigProtocolDhcpRenew, agentLagSummaryStaticCapability=agentLagSummaryStaticCapability, agentAuthenticationListMethod4=agentAuthenticationListMethod4, agentPortVoiceVlanUntagged=agentPortVoiceVlanUntagged, agentStpMstTopologyChangeParm=agentStpMstTopologyChangeParm, agentDynamicDsBindingLeaseRemainingTime=agentDynamicDsBindingLeaseRemainingTime, agentInventoryMachineType=agentInventoryMachineType, Ipv6AddressPrefix=Ipv6AddressPrefix, agentSwitchMbufPrio=agentSwitchMbufPrio, agentAutoinstallOperationalMode=agentAutoinstallOperationalMode, VlanList=VlanList, agentLoginSessionConnectionType=agentLoginSessionConnectionType, agentSwitchFdbAddressAgingTimeout=agentSwitchFdbAddressAgingTimeout, agentSwitchVlanStaticMrouterGroup=agentSwitchVlanStaticMrouterGroup, agentStpCstBridgeHelloTime=agentStpCstBridgeHelloTime, agentPortVoiceVlanPriority=agentPortVoiceVlanPriority, fanFailureTrap=fanFailureTrap, agentStpMstTable=agentStpMstTable, agentHTTPHardTimeout=agentHTTPHardTimeout, agentDhcpv6SnoopingIfConfigEntry=agentDhcpv6SnoopingIfConfigEntry, agentDaiVlanSrcMacFailures=agentDaiVlanSrcMacFailures, agentSwitchPortDVlanTagEntry=agentSwitchPortDVlanTagEntry, agentStaticIpsgBindingTable=agentStaticIpsgBindingTable, agentDhcpL2RelayStatsReset=agentDhcpL2RelayStatsReset, agentStpCstBridgeFwdDelay=agentStpCstBridgeFwdDelay, agentStaticDsv6BindingRowStatus=agentStaticDsv6BindingRowStatus, agentStpMstPortLoopInconsistentState=agentStpMstPortLoopInconsistentState, agentExecAuthorizationListIndex=agentExecAuthorizationListIndex, fastPathSwitching=fastPathSwitching, agentStpCstPortLoopGuard=agentStpCstPortLoopGuard, PortId=PortId, agentProtocolGroupCreate=agentProtocolGroupCreate, agentLagDetailedLagIndex=agentLagDetailedLagIndex, agentSwitchSnoopingVlanTable=agentSwitchSnoopingVlanTable, agentSwitchMbufRisingThreshold=agentSwitchMbufRisingThreshold, agentSwitchVlanSubnetAssociationGroup=agentSwitchVlanSubnetAssociationGroup, agentServicePortSubnetMask=agentServicePortSubnetMask, agentPvrstpVlanEntry=agentPvrstpVlanEntry, agentSwitchUnicastControlMode=agentSwitchUnicastControlMode, agentSwitchportTrunkAllowedVlanList=agentSwitchportTrunkAllowedVlanList, agentStaticIpsgBindingVlanId=agentStaticIpsgBindingVlanId, agentPortUnicastControlThresholdUnit=agentPortUnicastControlThresholdUnit, agentIASUserStatus=agentIASUserStatus, agentCmdsAuthorizationListMethod2=agentCmdsAuthorizationListMethod2, agentPortDefaultType=agentPortDefaultType, agentDaiVlanPktsForwarded=agentDaiVlanPktsForwarded, agentFactoryDefaultsErase=agentFactoryDefaultsErase, agentServicePortIpv6AddrStatus=agentServicePortIpv6AddrStatus, agentNetworkBurnedInMacAddress=agentNetworkBurnedInMacAddress, agentStaticDsBindingTable=agentStaticDsBindingTable, agentDhcpSnoopingRemoteFileName=agentDhcpSnoopingRemoteFileName, agentDaiVlanArpAclStaticFlag=agentDaiVlanArpAclStaticFlag, fastPathSwitchingTraps=fastPathSwitchingTraps, agentSwitchPrivateGroupPortPortList=agentSwitchPrivateGroupPortPortList, agentServicePortIpv6AddressAutoConfig=agentServicePortIpv6AddressAutoConfig, agentPrivateVlanIntfAssocOperational=agentPrivateVlanIntfAssocOperational, agentDynamicIpsgBindingVlanId=agentDynamicIpsgBindingVlanId, agentPortVoiceVlanID=agentPortVoiceVlanID, agentSwitchSnoopingIntfFastLeaveAdminMode=agentSwitchSnoopingIntfFastLeaveAdminMode, agentDynamicDsBindingEntry=agentDynamicDsBindingEntry, agentSnmpTrapReceiverVersion=agentSnmpTrapReceiverVersion, agentIPv6MulticastRoutes=agentIPv6MulticastRoutes, agentSwitchSnoopingVlanEntry=agentSwitchSnoopingVlanEntry, agentSwitchMbufEntry=agentSwitchMbufEntry, agentPortMirroringMode=agentPortMirroringMode, agentPortMirrorTable=agentPortMirrorTable, vlanRestoreFailureTrap=vlanRestoreFailureTrap, agentUserName=agentUserName, agentInventoryGroup=agentInventoryGroup, agentDynamicIpv6sgBindingMacAddr=agentDynamicIpv6sgBindingMacAddr, agentSwitchSnoopingVlanFastLeaveAdminMode=agentSwitchSnoopingVlanFastLeaveAdminMode, agentLagSummaryFlushTimer=agentLagSummaryFlushTimer, agentArpAclRuleRowStatus=agentArpAclRuleRowStatus, agentProbePortIfIndex=agentProbePortIfIndex, agentStpMstTimeSinceTopologyChange=agentStpMstTimeSinceTopologyChange, stpInstanceNewRootTrap=stpInstanceNewRootTrap, agentStpMstPortTable=agentStpMstPortTable, agentClassOfServicePortEntry=agentClassOfServicePortEntry, agentStpMstDesignatedRootId=agentStpMstDesignatedRootId, agentExecAccountingMethodType=agentExecAccountingMethodType, agentSnmpCommunityIPAddress=agentSnmpCommunityIPAddress, agentInventorySysDescription=agentInventorySysDescription, agentIASUserPassword=agentIASUserPassword, agentTransferUploadStart=agentTransferUploadStart, agentTransferUploadPassword=agentTransferUploadPassword, agentCmdsAuthorizationGroup=agentCmdsAuthorizationGroup, agentSdmPreferNextTemplate=agentSdmPreferNextTemplate, agentPortPhysicalMode=agentPortPhysicalMode, agentStpPortEntry=agentStpPortEntry, agentDhcpv6SnoopingInvalidClientMessages=agentDhcpv6SnoopingInvalidClientMessages, agentTransferDownloadUsername=agentTransferDownloadUsername, agentSwitchVlanMacAssociationVlanId=agentSwitchVlanMacAssociationVlanId, agentProtocolGroupPortTable=agentProtocolGroupPortTable, agentStpCstBridgeMaxHops=agentStpCstBridgeMaxHops, agentPvrstpVlanTable=agentPvrstpVlanTable, agentSwitchConflictIPAddr=agentSwitchConflictIPAddr, agentSwitchMbufFallingThresholdTrap=agentSwitchMbufFallingThresholdTrap, agentSwitchSnoopingQuerierGroup=agentSwitchSnoopingQuerierGroup, agentServicePortDhcp6StatsReset=agentServicePortDhcp6StatsReset, agentSwitchCpuProcessMemFree=agentSwitchCpuProcessMemFree, agentDaiVlanStatsTable=agentDaiVlanStatsTable, agentInventoryOperatingSystem=agentInventoryOperatingSystem, agentPasswordManagementStrengthMinUpperCase=agentPasswordManagementStrengthMinUpperCase, agentPortMirrorEntry=agentPortMirrorEntry, agentPortMulticastControlThreshold=agentPortMulticastControlThreshold, agentProtocolGroupId=agentProtocolGroupId, agentPvrstpPortVlanPriority=agentPvrstpPortVlanPriority, agentSwitchMbufFallingThreshold=agentSwitchMbufFallingThreshold, agentPortSTPMode=agentPortSTPMode, agentUserPassword=agentUserPassword, agentSwitchportConfigEntry=agentSwitchportConfigEntry, agentNetworkIpv6AddrStatus=agentNetworkIpv6AddrStatus, agentSnmpTrapReceiverStatus=agentSnmpTrapReceiverStatus, agentStpConfigDigestKey=agentStpConfigDigestKey, agentNetworkDefaultGateway=agentNetworkDefaultGateway, agentSwitchCpuProcessRisingThreshold=agentSwitchCpuProcessRisingThreshold, agentServicePortDhcp6SOLICITMessagesSent=agentServicePortDhcp6SOLICITMessagesSent, agentSwitchSnoopSSMFDBGroupAddressType=agentSwitchSnoopSSMFDBGroupAddressType, agentSwitchSnoopingIntfMulticastRouterMode=agentSwitchSnoopingIntfMulticastRouterMode, agentSwitchSnoopingVlanReportSuppMode=agentSwitchSnoopingVlanReportSuppMode, agentPortConfigTable=agentPortConfigTable, agentProtocolGroupProtocolStatus=agentProtocolGroupProtocolStatus, agentDaiVlanDhcpPermits=agentDaiVlanDhcpPermits, agentDhcpv6SnoopingVerifyMac=agentDhcpv6SnoopingVerifyMac, agentServicePortDhcp6REPLYMessagesDiscarded=agentServicePortDhcp6REPLYMessagesDiscarded, agentSwitchConfigGroup=agentSwitchConfigGroup, agentInventoryHardwareVersion=agentInventoryHardwareVersion, agentCableTesterMinimumCableLength=agentCableTesterMinimumCableLength, agentStaticDsv6BindingVlanId=agentStaticDsv6BindingVlanId, agentPortMirrorTypeType=agentPortMirrorTypeType, agentStpMstPortPathCost=agentStpMstPortPathCost, agentDynamicDsBindingMacAddr=agentDynamicDsBindingMacAddr, agentSwitchMFDBProtocolType=agentSwitchMFDBProtocolType, agentPasswordManagementStrengthMinLowerCase=agentPasswordManagementStrengthMinLowerCase, agentSnmpTrapSourceInterface=agentSnmpTrapSourceInterface, agentSwitchCutThroughRunningModeStatus=agentSwitchCutThroughRunningModeStatus, agentStaticDsv6BindingIpAddr=agentStaticDsv6BindingIpAddr, agentSwitchMbufNotificationSeverity=agentSwitchMbufNotificationSeverity, agentServicePortConfigProtocol=agentServicePortConfigProtocol, agentSwitchVlanSubnetAssociationEntry=agentSwitchVlanSubnetAssociationEntry, agentPortMirrorRemoteDestinationVlan=agentPortMirrorRemoteDestinationVlan, agentStaticIpv6sgBindingIfIndex=agentStaticIpv6sgBindingIfIndex)
mibBuilder.exportSymbols("EdgeSwitch-SWITCHING-MIB", agentArpEntries=agentArpEntries, agentArpAclTable=agentArpAclTable, agentSdmPreferConfigEntry=agentSdmPreferConfigEntry, agentSnmpCommunityConfigEntry=agentSnmpCommunityConfigEntry, agentPortVoiceVlanAuthMode=agentPortVoiceVlanAuthMode, agentTelnetMgmtPortNum=agentTelnetMgmtPortNum, agentNetworkIpv6AddrTable=agentNetworkIpv6AddrTable, agentInventoryBurnedInMacAddress=agentInventoryBurnedInMacAddress, agentTrapLogTotal=agentTrapLogTotal, agentSpanningTreeConfigGroup=agentSpanningTreeConfigGroup, agentDynamicDsBindingTable=agentDynamicDsBindingTable, agentDynamicIpv6sgBindingTable=agentDynamicIpv6sgBindingTable, agentSwitchSnoopSSMSrcListTable=agentSwitchSnoopSSMSrcListTable, agentPortMaxFrameSizeLimit=agentPortMaxFrameSizeLimit, agentSwitchMFDBGroup=agentSwitchMFDBGroup, agentTransferDownloadServerAddressType=agentTransferDownloadServerAddressType, agentStpMstVlanEntry=agentStpMstVlanEntry, agentStpCstBridgeHoldCount=agentStpCstBridgeHoldCount, agentSwitchLastConflictReportedTime=agentSwitchLastConflictReportedTime, agentInventoryPartNumber=agentInventoryPartNumber, agentSwitchDVlanTagTable=agentSwitchDVlanTagTable, agentStpConfigRevision=agentStpConfigRevision, agentUserAccessMode=agentUserAccessMode, agentExecAuthorizationListStatus=agentExecAuthorizationListStatus, agentPortMirrorRemoteSourceVlan=agentPortMirrorRemoteSourceVlan, agentProtocolGroupName=agentProtocolGroupName, agentServicePortDhcp6RELEASEMessagesSent=agentServicePortDhcp6RELEASEMessagesSent, agentSwitchCpuCosQDropTable=agentSwitchCpuCosQDropTable, agentStpMstPortTransitionsOutOfLoopInconsistentState=agentStpMstPortTransitionsOutOfLoopInconsistentState, agentDhcpv6SnoopingIfLogEnable=agentDhcpv6SnoopingIfLogEnable, agentProtocolGroupEntry=agentProtocolGroupEntry, agentStaticDsBindingIfIndex=agentStaticDsBindingIfIndex, Ipv6Address=Ipv6Address, agentSwitchSnoopingQuerierQueryInterval=agentSwitchSnoopingQuerierQueryInterval, agentSwitchPrivateGroupRowStatus=agentSwitchPrivateGroupRowStatus, agentUserPasswordExpireTime=agentUserPasswordExpireTime, agentSpanningTreeMode=agentSpanningTreeMode, agentNetworkIpv6AddrEntry=agentNetworkIpv6AddrEntry, agentSwitchSnoopingIntfEntry=agentSwitchSnoopingIntfEntry, agentDynamicIpsgBindingEntry=agentDynamicIpsgBindingEntry, agentPortSwitchportMode=agentPortSwitchportMode, agentDynamicDsv6BindingTable=agentDynamicDsv6BindingTable, agentServicePortDhcp6REQUESTMessagesSent=agentServicePortDhcp6REQUESTMessagesSent, agentDhcpv6SnoopingRemoteIpAddr=agentDhcpv6SnoopingRemoteIpAddr, agentProtocolGroupProtocolIPX=agentProtocolGroupProtocolIPX, agentClassOfServiceGroup=agentClassOfServiceGroup, agentSwitchPrivateGroupPortGroupId=agentSwitchPrivateGroupPortGroupId, agentStpCstRegionalRootId=agentStpCstRegionalRootId, agentStpMstVlanRowStatus=agentStpMstVlanRowStatus, agentDhcpv6SnoopingStoreInterval=agentDhcpv6SnoopingStoreInterval, agentSnmpTrapReceiverAddress=agentSnmpTrapReceiverAddress, agentServicePortIPAddress=agentServicePortIPAddress, agentServicePortDhcp6ADVERTISEMessagesReceived=agentServicePortDhcp6ADVERTISEMessagesReceived, agentSwitchSnoopSSMSrcListHostAddress=agentSwitchSnoopSSMSrcListHostAddress, agentExecAuthorizationGroup=agentExecAuthorizationGroup, agentSnmpTrapReceiverConfigEntry=agentSnmpTrapReceiverConfigEntry, agentSwitchMulticastControlMode=agentSwitchMulticastControlMode, agentNextActiveImage=agentNextActiveImage, agentNetworkIpv6ConfigProtocol=agentNetworkIpv6ConfigProtocol, agentServicePortIpv6AdminMode=agentServicePortIpv6AdminMode, agentSwitchDVlanTagRowStatus=agentSwitchDVlanTagRowStatus, agentTransferUploadPath=agentTransferUploadPath, agentStpAdminMode=agentStpAdminMode, agentTrapLogTrap=agentTrapLogTrap, agentPasswordManagementAging=agentPasswordManagementAging, agentSwitchSnoopingMulticastControlFramesProcessed=agentSwitchSnoopingMulticastControlFramesProcessed, agentExecAuthorizationListMethod2=agentExecAuthorizationListMethod2, topologyChangeInitiatedTrap=topologyChangeInitiatedTrap, agentPvrstpVlanFwdDelayTime=agentPvrstpVlanFwdDelayTime, agentExecAuthorizationListMethod3=agentExecAuthorizationListMethod3, agentLoginSessionIndex=agentLoginSessionIndex, agentServicePortIpv6AddrEntry=agentServicePortIpv6AddrEntry, agentSnmpTrapReceiverIpv6Address=agentSnmpTrapReceiverIpv6Address, agentPasswordManagementStrengthMaxRepeatedCharacters=agentPasswordManagementStrengthMaxRepeatedCharacters, agentStaticIpsgBindingMacAddr=agentStaticIpsgBindingMacAddr, agentSwitchPortDVlanTagRowStatus=agentSwitchPortDVlanTagRowStatus, agentSwitchStaticMacFilteringDestPortMask=agentSwitchStaticMacFilteringDestPortMask, agentStpCstMaxAge=agentStpCstMaxAge, agentSwitchAddressConflictGroup=agentSwitchAddressConflictGroup, agentCmdsAuthorizationListMethod1=agentCmdsAuthorizationListMethod1, agentSwitchSnoopingQuerierAddress=agentSwitchSnoopingQuerierAddress, agentNetworkDhcp6ClientDuid=agentNetworkDhcp6ClientDuid, agentSwitchMFDBSummaryTable=agentSwitchMFDBSummaryTable, agentStaticIpv6sgBindingVlanId=agentStaticIpv6sgBindingVlanId, agentPortMirrorSessionNum=agentPortMirrorSessionNum, agentResetSystem=agentResetSystem, agentSwitchProtectedPortConfigGroup=agentSwitchProtectedPortConfigGroup, agentSnmpCommunityIndex=agentSnmpCommunityIndex, agentPrivateVlanIntfAssocPromiscuousSecondary=agentPrivateVlanIntfAssocPromiscuousSecondary, agentPortBroadcastControlThreshold=agentPortBroadcastControlThreshold, agentPrivateVlanIntfAssocPromiscuousPrimary=agentPrivateVlanIntfAssocPromiscuousPrimary, agentLoginSessionInetAddressType=agentLoginSessionInetAddressType, agentSwitchPortDVlanTagCustomerId=agentSwitchPortDVlanTagCustomerId, agentPortDVlanTagEthertype=agentPortDVlanTagEthertype, agentSwitchVoiceVlanDeviceTable=agentSwitchVoiceVlanDeviceTable, agentTelnetAllowNewMode=agentTelnetAllowNewMode, agentSwitchUnicastControlThresholdUnit=agentSwitchUnicastControlThresholdUnit, agentStpForceVersion=agentStpForceVersion, agentDynamicIpv6sgBindingIpAddr=agentDynamicIpv6sgBindingIpAddr, agentDynamicIpsgBindingMacAddr=agentDynamicIpsgBindingMacAddr, agentSwitchProtectedPortGroupName=agentSwitchProtectedPortGroupName, agentLoginSessionUserName=agentLoginSessionUserName, agentNetworkIpv6AddrPrefix=agentNetworkIpv6AddrPrefix, agentSnmpCommunityName=agentSnmpCommunityName, agentSupportedMibDescription=agentSupportedMibDescription, agentDhcpSnoopingIfRateLimit=agentDhcpSnoopingIfRateLimit, agentIpv6sgIfConfigEntry=agentIpv6sgIfConfigEntry, agentPasswordMgmtStrengthExcludeKeywordStatus=agentPasswordMgmtStrengthExcludeKeywordStatus, agentSwitchLastConflictingIPAddr=agentSwitchLastConflictingIPAddr, agentHTTPSoftTimeout=agentHTTPSoftTimeout, agentSerialCharacterSize=agentSerialCharacterSize, agentTransferDownloadFilename=agentTransferDownloadFilename, agentPortMirroringGroup=agentPortMirroringGroup, agentSwitchMFDBMostEntriesUsed=agentSwitchMFDBMostEntriesUsed, agentSwitchAddressAgingTimeoutTable=agentSwitchAddressAgingTimeoutTable, agentPortClearStats=agentPortClearStats, agentStaticDsv6BindingTable=agentStaticDsv6BindingTable, agentSwitchportIntfIndex=agentSwitchportIntfIndex, agentSwitchBroadcastControlThreshold=agentSwitchBroadcastControlThreshold, agentSwitchStaticMacFilteringTable=agentSwitchStaticMacFilteringTable, agentTransferDownloadStart=agentTransferDownloadStart, agentDhcpSnoopingStatsReset=agentDhcpSnoopingStatsReset, agentProtocolGroupPortStatus=agentProtocolGroupPortStatus, agentStpPortStatsMstpBpduTx=agentStpPortStatsMstpBpduTx, agentSwitchSnoopingQuerierVersion=agentSwitchSnoopingQuerierVersion, agentUserPortConfigTable=agentUserPortConfigTable, agentPasswordMgmtStrengthExcludeKeyword=agentPasswordMgmtStrengthExcludeKeyword, agentSupportedMibIndex=agentSupportedMibIndex, userLockoutTrap=userLockoutTrap, agentUserEncryptionPassword=agentUserEncryptionPassword, agentDhcpL2RelayVlanIndex=agentDhcpL2RelayVlanIndex, agentUserConfigEntry=agentUserConfigEntry, agentSwitchAddressConflictDetectionStatus=agentSwitchAddressConflictDetectionStatus, agentStpCstPortTable=agentStpCstPortTable, agentDhcpSnoopingVlanEnable=agentDhcpSnoopingVlanEnable, agentDhcpv6SnoopingStatsEntry=agentDhcpv6SnoopingStatsEntry, agentSwitchMFDBForwardingPortMask=agentSwitchMFDBForwardingPortMask, agentDaiVlanStatsEntry=agentDaiVlanStatsEntry, agentSwitchSnoopSSMFDBVlanIndex=agentSwitchSnoopSSMFDBVlanIndex, agentDhcpL2RelayIfConfigEntry=agentDhcpL2RelayIfConfigEntry, agentStpCstPortBpduFilter=agentStpCstPortBpduFilter, vlanDeleteLastTrap=vlanDeleteLastTrap, agentPortMirrorTypeEntry=agentPortMirrorTypeEntry, agentSwitchSnoopSSMGroupLastReporter=agentSwitchSnoopSSMGroupLastReporter, agentSwitchVlanMacAssociationMacAddress=agentSwitchVlanMacAssociationMacAddress, agentTransferUploadMode=agentTransferUploadMode, agentSwitchSnoopingIntfMaxResponseTime=agentSwitchSnoopingIntfMaxResponseTime, agentPortMirrorSourcePortMask=agentPortMirrorSourcePortMask, agentTransferDownloadMode=agentTransferDownloadMode, agentSnmpCommunityAccessMode=agentSnmpCommunityAccessMode, agentLagSummaryDeletePort=agentLagSummaryDeletePort, agentPortMulticastControlMode=agentPortMulticastControlMode, agentStpMstDesignatedBridgeId=agentStpMstDesignatedBridgeId, agentSaveConfig=agentSaveConfig, agentInventoryMachineModel=agentInventoryMachineModel, agentTransferDownloadPassword=agentTransferDownloadPassword, agentDaiVlanStatsIndex=agentDaiVlanStatsIndex, agentSwitchCpuProcessMemAvailable=agentSwitchCpuProcessMemAvailable, agentProtocolGroupProtocolARP=agentProtocolGroupProtocolARP, agentStpMstTopologyChangeCount=agentStpMstTopologyChangeCount, agentDhcpSnoopingInvalidServerMessages=agentDhcpSnoopingInvalidServerMessages, agentSwitchMFDBSummaryMacAddress=agentSwitchMFDBSummaryMacAddress, agentIpsgIfConfigEntry=agentIpsgIfConfigEntry, agentDaiVlanConfigTable=agentDaiVlanConfigTable, agentPvrstpBackboneFast=agentPvrstpBackboneFast, agentSnmpTrapReceiverAddressType=agentSnmpTrapReceiverAddressType, agentSwitchDVlanTagEntry=agentSwitchDVlanTagEntry, agentPortBroadcastControlThresholdUnit=agentPortBroadcastControlThresholdUnit, agentStpCstPortForwardingState=agentStpCstPortForwardingState, agentSwitchVoiceVlanDeviceEntry=agentSwitchVoiceVlanDeviceEntry, agentSwitchAddressAgingTimeoutEntry=agentSwitchAddressAgingTimeoutEntry, agentPrivateVlanEntry=agentPrivateVlanEntry, agentSwitchMFDBVlanId=agentSwitchMFDBVlanId, agentInventoryMaintenanceLevel=agentInventoryMaintenanceLevel, agentDhcpClientOptionsConfigGroup=agentDhcpClientOptionsConfigGroup, agentStaticDsBindingRowStatus=agentStaticDsBindingRowStatus, agentServicePortDhcp6ADVERTISEMessagesDiscarded=agentServicePortDhcp6ADVERTISEMessagesDiscarded, agentDhcpSnoopingRemoteIpAddr=agentDhcpSnoopingRemoteIpAddr, agentSwitchStormControlGroup=agentSwitchStormControlGroup, agentSwitchSnoopingCfgTable=agentSwitchSnoopingCfgTable, agentSwitchVlanSubnetAssociationRowStatus=agentSwitchVlanSubnetAssociationRowStatus, agentDhcpSnoopingInvalidClientMessages=agentDhcpSnoopingInvalidClientMessages, agentTransferDownloadServerIP=agentTransferDownloadServerIP, agentUserConfigDefaultAuthenticationList=agentUserConfigDefaultAuthenticationList, agentInventoryNetworkProcessingDevice=agentInventoryNetworkProcessingDevice, agentSwitchStaticMacFilteringSourcePortMask=agentSwitchStaticMacFilteringSourcePortMask, agentUserConfigTable=agentUserConfigTable, agentTransferUploadServerAddress=agentTransferUploadServerAddress, agentSwitchDVlanTagTPid=agentSwitchDVlanTagTPid, agentCmdsAccountingListCreate=agentCmdsAccountingListCreate, agentCmdsAuthorizationListName=agentCmdsAuthorizationListName, agentCableTesterIfIndex=agentCableTesterIfIndex, agentDaiVlanAclPermits=agentDaiVlanAclPermits, agentSwitchCpuCosQDropEntry=agentSwitchCpuCosQDropEntry, agentDaiIfConfigEntry=agentDaiIfConfigEntry, agentDynamicDsv6BindingVlanId=agentDynamicDsv6BindingVlanId, agentStpPortState=agentStpPortState, agentStpCstPortPathCost=agentStpCstPortPathCost, agentAuthenticationListCreate=agentAuthenticationListCreate, agentNetworkDhcp6ADVERTISEMessagesDiscarded=agentNetworkDhcp6ADVERTISEMessagesDiscarded, agentServicePortDefaultGateway=agentServicePortDefaultGateway, agentSnmpTrapReceiverIndex=agentSnmpTrapReceiverIndex, agentSwitchMFDBSummaryEntry=agentSwitchMFDBSummaryEntry, agentSwitchVlanSubnetAssociationIPAddress=agentSwitchVlanSubnetAssociationIPAddress, agentStpMstPortEntry=agentStpMstPortEntry, agentArpAclName=agentArpAclName, agentSwitchCpuProcessId=agentSwitchCpuProcessId, agentSwitchVlanMacAssociationEntry=agentSwitchVlanMacAssociationEntry, agentCmdsAuthorizationListMethod3=agentCmdsAuthorizationListMethod3, agentDaiVlanArpAclName=agentDaiVlanArpAclName, agentAuthenticationListMethod1=agentAuthenticationListMethod1, agentIASUserIndex=agentIASUserIndex, agentAuthenticationListMethod3=agentAuthenticationListMethod3, agentCLIConfigGroup=agentCLIConfigGroup, agentSwitchSnoopSSMGroupIfIndex=agentSwitchSnoopSSMGroupIfIndex, agentIASUserConfigEntry=agentIASUserConfigEntry, agentDhcpSnoopingVlanConfigEntry=agentDhcpSnoopingVlanConfigEntry, agentPortMirrorDestinationPort=agentPortMirrorDestinationPort, agentClassOfServicePortPriority=agentClassOfServicePortPriority, agentSwitchMbufAllocFails=agentSwitchMbufAllocFails, agentPasswordManagementConfigGroup=agentPasswordManagementConfigGroup, agentDhcpSnoopingAdminMode=agentDhcpSnoopingAdminMode, noStartupConfigTrap=noStartupConfigTrap, agentSwitchMFDBTable=agentSwitchMFDBTable, agentSwitchSnoopSSMFDBGroupAddress=agentSwitchSnoopSSMFDBGroupAddress, agentLagSummaryPortCounter=agentLagSummaryPortCounter, agentDaiVlanDynArpInspEnable=agentDaiVlanDynArpInspEnable, linkFailureTrap=linkFailureTrap, loopDetectedTrap=loopDetectedTrap, agentSwitchPrivateGroupPortGroupName=agentSwitchPrivateGroupPortGroupName, agentPvrstpVlanRootPriSec=agentPvrstpVlanRootPriSec, agentIASUserConfigCreate=agentIASUserConfigCreate, agentSwitchSnoopingQuerierCfgTable=agentSwitchSnoopingQuerierCfgTable, agentLagSummaryConfigEntry=agentLagSummaryConfigEntry, agentDaiStatsReset=agentDaiStatsReset, agentDhcpv6SnoopingMacVerifyFailures=agentDhcpv6SnoopingMacVerifyFailures, agentSwitchSnoopingQuerierCfgEntry=agentSwitchSnoopingQuerierCfgEntry, agentLoginSessionIPAddress=agentLoginSessionIPAddress, agentArpAclEntry=agentArpAclEntry, agentStpMstDesignatedCost=agentStpMstDesignatedCost, agentDhcpL2RelayIfConfigTable=agentDhcpL2RelayIfConfigTable, agentLoginSessionTable=agentLoginSessionTable, agentServicePortIpv6AddrEuiFlag=agentServicePortIpv6AddrEuiFlag, agentLagDetailedConfigTable=agentLagDetailedConfigTable, agentStaticIpv6sgBindingMacAddr=agentStaticIpv6sgBindingMacAddr, agentSwitchPrivateGroupConfigGroup=agentSwitchPrivateGroupConfigGroup, agentDynamicDsv6BindingIpAddr=agentDynamicDsv6BindingIpAddr, agentInventoryManufacturer=agentInventoryManufacturer, agentLagSummaryStpMode=agentLagSummaryStpMode, agentProtocolConfigGroup=agentProtocolConfigGroup, agentSnmpSpanningTreeTrapFlag=agentSnmpSpanningTreeTrapFlag, agentConfigGroup=agentConfigGroup, agentSwitchMFDBMacAddress=agentSwitchMFDBMacAddress, agentNetworkConfigGroup=agentNetworkConfigGroup)
mibBuilder.exportSymbols("EdgeSwitch-SWITCHING-MIB", agentExecAccountingListIndex=agentExecAccountingListIndex, agentSwitchUnicastControlThreshold=agentSwitchUnicastControlThreshold, agentProtocolGroupVlanId=agentProtocolGroupVlanId, agentLoginSessionIdleTime=agentLoginSessionIdleTime, agentSwitchPrivateGroupPortEntry=agentSwitchPrivateGroupPortEntry, agentSerialHWFlowControlMode=agentSerialHWFlowControlMode, agentSwitchportAccessVlanID=agentSwitchportAccessVlanID, agentStaticDsBindingMacAddr=agentStaticDsBindingMacAddr, agentSwitchDot3FlowControlMode=agentSwitchDot3FlowControlMode, agentSerialParityType=agentSerialParityType, agentNetworkDhcp6REPLYMessagesDiscarded=agentNetworkDhcp6REPLYMessagesDiscarded, agentServicePortDhcp6REBINDMessagesSent=agentServicePortDhcp6REBINDMessagesSent, agentIpv6sgIfConfigTable=agentIpv6sgIfConfigTable, agentLagSummaryLagIndex=agentLagSummaryLagIndex, agentNetworkDhcp6ADVERTISEMessagesReceived=agentNetworkDhcp6ADVERTISEMessagesReceived, agentNetworkIpv6Gateway=agentNetworkIpv6Gateway, agentPasswordManagementStrengthExcludeKeywordEntry=agentPasswordManagementStrengthExcludeKeywordEntry, agentDot3adAggPortEntry=agentDot3adAggPortEntry, agentDaiVlanAclDrops=agentDaiVlanAclDrops, agentStaticIpv6sgBindingTable=agentStaticIpv6sgBindingTable, agentPortMulticastControlThresholdUnit=agentPortMulticastControlThresholdUnit, agentSwitchSnoopingQuerierVlanOperMode=agentSwitchSnoopingQuerierVlanOperMode, agentSwitchStaticMacFilteringEntry=agentSwitchStaticMacFilteringEntry, agentUserConfigGroup=agentUserConfigGroup, broadcastStormEndTrap=broadcastStormEndTrap, agentStaticIpsgBindingEntry=agentStaticIpsgBindingEntry, agentIPv6NdpEntries=agentIPv6NdpEntries, agentSwitchSnoopingQuerierOperVersion=agentSwitchSnoopingQuerierOperVersion, agentSwitchPortDVlanTagTPid=agentSwitchPortDVlanTagTPid, agentPrivateVlanGroup=agentPrivateVlanGroup, agentLagClearCounters=agentLagClearCounters, agentStpMstVlanTable=agentStpMstVlanTable, agentTrapLogTotalSinceLastViewed=agentTrapLogTotalSinceLastViewed, agentPortMirrorRemoteVlanRowStatus=agentPortMirrorRemoteVlanRowStatus, agentTransferUploadFilename=agentTransferUploadFilename, agentCmdsAuthorizationListCreate=agentCmdsAuthorizationListCreate, agentSwitchCutThroughGroup=agentSwitchCutThroughGroup, agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82=agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82, agentSupportedMibTable=agentSupportedMibTable, agentServicePortDhcp6REPLYMessagesReceived=agentServicePortDhcp6REPLYMessagesReceived, PortList=PortList, agentSnmpLinkUpDownTrapFlag=agentSnmpLinkUpDownTrapFlag, agentExecAuthorizationListMethod4=agentExecAuthorizationListMethod4, agentUserLockoutStatus=agentUserLockoutStatus, agentProtocolGroupTable=agentProtocolGroupTable, agentPortType40GigBaseX=agentPortType40GigBaseX, agentDhcpv6SnoopingAdminMode=agentDhcpv6SnoopingAdminMode, agentDhcpv6SnoopingIfTrustEnable=agentDhcpv6SnoopingIfTrustEnable, agentPvrstpVlanCost=agentPvrstpVlanCost, agentPasswordManagementMinLength=agentPasswordManagementMinLength, agentUserPortConfigEntry=agentUserPortConfigEntry, agentPortVoiceVlanDSCP=agentPortVoiceVlanDSCP, agentStpCstPortOperEdge=agentStpCstPortOperEdge, agentExecAccountingListCreate=agentExecAccountingListCreate, agentExecAccountingListName=agentExecAccountingListName, agentNetworkDhcp6REPLYMessagesReceived=agentNetworkDhcp6REPLYMessagesReceived, agentPrivateVlanIntfAssocHostSecondary=agentPrivateVlanIntfAssocHostSecondary, agentSwitchSnoopingQuerierVlanAddress=agentSwitchSnoopingQuerierVlanAddress, agentIPv4UnicastRoutes=agentIPv4UnicastRoutes, agentStaticIpv6sgBindingEntry=agentStaticIpv6sgBindingEntry, agentServicePortIpv6Gateway=agentServicePortIpv6Gateway, agentDhcpSnoopingStatsTable=agentDhcpSnoopingStatsTable, agentIPv6UnicastRoutes=agentIPv6UnicastRoutes, agentSwitchSnoopSSMGroupSourceFilterMode=agentSwitchSnoopSSMGroupSourceFilterMode, agentNetworkStatsGroup=agentNetworkStatsGroup, agentStaticDsBindingEntry=agentStaticDsBindingEntry, agentSwitchCpuRisingThresholdTrap=agentSwitchCpuRisingThresholdTrap, agentSwitchSnoopSSMFDBSourceAddress=agentSwitchSnoopSSMFDBSourceAddress, agentPasswordManagementStrengthMinNumericNumbers=agentPasswordManagementStrengthMinNumericNumbers, agentProtocolGroupProtocolTable=agentProtocolGroupProtocolTable, agentInventorySerialNumber=agentInventorySerialNumber, agentImage2=agentImage2, agentSnmpCommunityStatus=agentSnmpCommunityStatus, agentCmdsAccountingListStatus=agentCmdsAccountingListStatus, agentLagConfigStaticCapability=agentLagConfigStaticCapability, agentStpMstPortTransitionsIntoLoopInconsistentState=agentStpMstPortTransitionsIntoLoopInconsistentState, agentSwitchMFDBFilteringPortMask=agentSwitchMFDBFilteringPortMask, agentStaticIpsgBindingIfIndex=agentStaticIpsgBindingIfIndex, agentExecAccountingGroup=agentExecAccountingGroup, agentDhcpv6SnoopingConfigGroup=agentDhcpv6SnoopingConfigGroup, agentSwitchSnoopingGroup=agentSwitchSnoopingGroup, agentStpCstPortTCNGuard=agentStpCstPortTCNGuard, agentSwitchSnoopSSMSrcListAddress=agentSwitchSnoopSSMSrcListAddress, agentSwitchVoiceVlanDeviceMacAddress=agentSwitchVoiceVlanDeviceMacAddress, agentLagSummaryName=agentLagSummaryName, agentDhcpv6SnoopingStatsTable=agentDhcpv6SnoopingStatsTable, agentIpsgIfConfigTable=agentIpsgIfConfigTable, agentExecAuthorizationListMethod1=agentExecAuthorizationListMethod1, agentIpv6sgIfPortSecurity=agentIpv6sgIfPortSecurity, agentSwitchPortDVlanTagInterfaceIfIndex=agentSwitchPortDVlanTagInterfaceIfIndex, agentLagDetailedPortCounter=agentLagDetailedPortCounter, agentSwitchVlanStaticMrouterTable=agentSwitchVlanStaticMrouterTable, agentPrivateVlanIntfAssocEntry=agentPrivateVlanIntfAssocEntry, agentSwitchCpuProcessIndex=agentSwitchCpuProcessIndex, agentLagDetailedPortSpeed=agentLagDetailedPortSpeed, agentDhcpClientVendorClassIdString=agentDhcpClientVendorClassIdString, daiIntfErrorDisabledTrap=daiIntfErrorDisabledTrap, agentAutoinstallAutosaveMode=agentAutoinstallAutosaveMode, agentPrivateVlanTable=agentPrivateVlanTable, agentSerialGroup=agentSerialGroup, agentSwitchSnoopSSMGroupEntry=agentSwitchSnoopSSMGroupEntry, agentPortMirrorRemoteVlanEntry=agentPortMirrorRemoteVlanEntry, agentDot3adAggPortLACPMode=agentDot3adAggPortLACPMode, agentStpCstRootFwdDelay=agentStpCstRootFwdDelay, agentSnmpBroadcastStormTrapFlag=agentSnmpBroadcastStormTrapFlag, agentSwitchportTrunkNativeVlanID=agentSwitchportTrunkNativeVlanID, agentAuthenticationListName=agentAuthenticationListName, agentDhcpSnoopingVlanConfigTable=agentDhcpSnoopingVlanConfigTable, agentSwitchSnoopingQuerierOperMaxResponseTime=agentSwitchSnoopingQuerierOperMaxResponseTime, agentSwitchSnoopingProtocol=agentSwitchSnoopingProtocol, agentSwitchCpuCosQDropGroup=agentSwitchCpuCosQDropGroup, agentPvrstpAdminMode=agentPvrstpAdminMode, agentNetworkIPAddress=agentNetworkIPAddress, agentDhcpL2RelayCircuitIdVlanEnable=agentDhcpL2RelayCircuitIdVlanEnable, agentSwitchportConfigTable=agentSwitchportConfigTable, agentPasswordManagementStrengthMinSpecialCharacters=agentPasswordManagementStrengthMinSpecialCharacters, agentInventoryAdditionalPackages=agentInventoryAdditionalPackages, agentTransferUploadUsername=agentTransferUploadUsername, agentStpMstId=agentStpMstId, agentSwitchSnoopingIntfIndex=agentSwitchSnoopingIntfIndex, agentLagDetailedConfigEntry=agentLagDetailedConfigEntry, agentStpCstPortOperPointToPoint=agentStpCstPortOperPointToPoint, agentDaiVlanIndex=agentDaiVlanIndex, agentPrivateVlanAssociate=agentPrivateVlanAssociate, agentPrivateVlanType=agentPrivateVlanType, agentTrapLogSystemTime=agentTrapLogSystemTime, agentPortUnicastControlMode=agentPortUnicastControlMode, agentPortMirrorTypeTable=agentPortMirrorTypeTable, agentEcmpNextHops=agentEcmpNextHops, agentPasswordManagementStrengthMinCharacterClasses=agentPasswordManagementStrengthMinCharacterClasses, agentSwitchSnoopingVlanGroup=agentSwitchSnoopingVlanGroup, agentLagSummaryMtuValue=agentLagSummaryMtuValue, agentServicePortDhcp6MalformedMessagesReceived=agentServicePortDhcp6MalformedMessagesReceived, agentSwitchSnoopSSMFDBIncludePortList=agentSwitchSnoopSSMFDBIncludePortList, agentPortAutoNegAdminStatus=agentPortAutoNegAdminStatus, agentSwitchAddressConflictDetectionStatusReset=agentSwitchAddressConflictDetectionStatusReset, agentTrapLogIndex=agentTrapLogIndex, agentStpPortStatsStpBpduTx=agentStpPortStatsStpBpduTx, agentPortDVlanTagCustomerId=agentPortDVlanTagCustomerId, agentDynamicDsBindingVlanId=agentDynamicDsBindingVlanId, agentPortLinkTrapMode=agentPortLinkTrapMode, agentSwitchSnoopSSMFDBEntry=agentSwitchSnoopSSMFDBEntry, agentTransferDownloadStatus=agentTransferDownloadStatus, agentPortVoiceVlanMode=agentPortVoiceVlanMode, agentProtocolGroupStatus=agentProtocolGroupStatus, agentSwitchStaticMacFilteringVlanId=agentSwitchStaticMacFilteringVlanId, agentSwitchportGeneralUntaggedVlanList=agentSwitchportGeneralUntaggedVlanList, agentUserEncryptionType=agentUserEncryptionType, agentPortDot3FlowControlOperStatus=agentPortDot3FlowControlOperStatus, agentImage1=agentImage1, agentExecAccountingListStatus=agentExecAccountingListStatus, agentDhcpv6SnoopingInvalidServerMessages=agentDhcpv6SnoopingInvalidServerMessages, agentLagSummaryConfigTable=agentLagSummaryConfigTable, agentPortTypeGroup=agentPortTypeGroup, agentStpPortStatsRstpBpduRx=agentStpPortStatsRstpBpduRx, agentLagSummaryStatus=agentLagSummaryStatus, agentCmdsAuthorizationListIndex=agentCmdsAuthorizationListIndex, agentDynamicDsv6BindingEntry=agentDynamicDsv6BindingEntry, agentSwitchVlanStaticMrouterEntry=agentSwitchVlanStaticMrouterEntry, agentTransferUploadRemoteFilename=agentTransferUploadRemoteFilename, Ipv6IfIndexOrZero=Ipv6IfIndexOrZero, agentUserAuthenticationConfigTable=agentUserAuthenticationConfigTable, agentDhcpv6SnoopingIfBurstInterval=agentDhcpv6SnoopingIfBurstInterval, agentAuthenticationListTable=agentAuthenticationListTable, agentStpCstBridgePriority=agentStpCstBridgePriority, agentDhcpL2RelayIfEnable=agentDhcpL2RelayIfEnable, agentDaiVlanDhcpDrops=agentDaiVlanDhcpDrops, agentSwitchProtectedPortPortList=agentSwitchProtectedPortPortList, agentIASUserName=agentIASUserName, agentClearVlan=agentClearVlan, agentSwitchPrivateGroupId=agentSwitchPrivateGroupId, agentPvrstpSwitchConfigGroup=agentPvrstpSwitchConfigGroup, agentDhcpL2RelayConfigGroup=agentDhcpL2RelayConfigGroup, agentIpsgIfPortSecurity=agentIpsgIfPortSecurity, agentDaiVlanLoggingEnable=agentDaiVlanLoggingEnable, agentSwitchSnoopingVlanMaxResponseTime=agentSwitchSnoopingVlanMaxResponseTime, agentSnmpCommunityConfigTable=agentSnmpCommunityConfigTable, agentHTTPMaxSessions=agentHTTPMaxSessions, agentPvrstpPortVlanTable=agentPvrstpPortVlanTable, agentSwitchSnoopingCfgEntry=agentSwitchSnoopingCfgEntry, broadcastStormStartTrap=broadcastStormStartTrap, vlanDefaultCfgFailureTrap=vlanDefaultCfgFailureTrap, agentSwitchBroadcastControlMode=agentSwitchBroadcastControlMode, agentSwitchProtectedPortTable=agentSwitchProtectedPortTable, agentPortDot3FlowControlMode=agentPortDot3FlowControlMode, agentStartupConfigErase=agentStartupConfigErase, agentTransferUploadServerIP=agentTransferUploadServerIP, agentHTTPWebMgmtPortNum=agentHTTPWebMgmtPortNum, agentStpMstDesignatedPortId=agentStpMstDesignatedPortId, agentSwitchStaticMacFilteringStatus=agentSwitchStaticMacFilteringStatus, agentDynamicIpsgBindingIpAddr=agentDynamicIpsgBindingIpAddr, agentSwitchCpuProcessEntry=agentSwitchCpuProcessEntry, agentStpCstPortId=agentStpCstPortId, agentSwitchIpAddressConflictTrap=agentSwitchIpAddressConflictTrap, agentCmdsAccountingListIndex=agentCmdsAccountingListIndex, agentStaticIpv6sgBindingIpAddr=agentStaticIpv6sgBindingIpAddr, agentStpMstRootPathCost=agentStpMstRootPathCost, agentUserIndex=agentUserIndex, agentDhcpL2RelayTrustedClntMsgsWithoutOptn82=agentDhcpL2RelayTrustedClntMsgsWithoutOptn82, Ipv6AddressIfIdentifier=Ipv6AddressIfIdentifier, agentSwitchCpuProcessTotalUtilization=agentSwitchCpuProcessTotalUtilization, agentNetworkDhcp6MalformedMessagesReceived=agentNetworkDhcp6MalformedMessagesReceived, agentPasswordManagementLockAttempts=agentPasswordManagementLockAttempts, agentPvstpAdminMode=agentPvstpAdminMode, agentTransferDownloadGroup=agentTransferDownloadGroup, agentPortMirrorIpAccessListNumber=agentPortMirrorIpAccessListNumber, agentCmdsAuthorizationListEntry=agentCmdsAuthorizationListEntry, agentPortVoiceVlanOperationalStatus=agentPortVoiceVlanOperationalStatus, agentAuthenticationListMethod2=agentAuthenticationListMethod2, agentSwitchPrivateGroupTable=agentSwitchPrivateGroupTable, agentServicePortDhcp6ClientDuid=agentServicePortDhcp6ClientDuid, agentTransferConfigGroup=agentTransferConfigGroup, agentDhcpSnoopingIfBurstInterval=agentDhcpSnoopingIfBurstInterval, agentTransferUploadImagename=agentTransferUploadImagename, agentAutoinstallUnicastRetryCount=agentAutoinstallUnicastRetryCount, agentTrapLogTable=agentTrapLogTable, agentPortMirrorSourceVlan=agentPortMirrorSourceVlan, agentStpPortUpTime=agentStpPortUpTime, agentNetworkMgmtVlan=agentNetworkMgmtVlan, agentDaiSrcMacValidate=agentDaiSrcMacValidate, agentMirroredPortIfIndex=agentMirroredPortIfIndex, agentSwitchSnoopingIntfProxyQuerierAdminMode=agentSwitchSnoopingIntfProxyQuerierAdminMode, agentPortDVlanTagMode=agentPortDVlanTagMode, agentDaiDstMacValidate=agentDaiDstMacValidate, agentStpMstPortId=agentStpMstPortId, agentNetworkSubnetMask=agentNetworkSubnetMask, agentStpBpduFilterDefault=agentStpBpduFilterDefault, agentDhcpv6SnoopingVlanConfigEntry=agentDhcpv6SnoopingVlanConfigEntry, agentPasswordManagementStrengthMaxConsecutiveCharacters=agentPasswordManagementStrengthMaxConsecutiveCharacters, agentSwitchSnoopingProxyQuerierAdminMode=agentSwitchSnoopingProxyQuerierAdminMode, agentPortVoiceVlanDataPriorityMode=agentPortVoiceVlanDataPriorityMode, agentDynamicIpsgBindingTable=agentDynamicIpsgBindingTable, agentDaiVlanPktsDropped=agentDaiVlanPktsDropped, agentCmdsAccountingMethodType=agentCmdsAccountingMethodType, agentUserPortSecurity=agentUserPortSecurity, agentPortMirrorTypeSourcePort=agentPortMirrorTypeSourcePort, agentUserAuthenticationList=agentUserAuthenticationList, agentCmdsAuthorizationListTable=agentCmdsAuthorizationListTable, agentNetworkLocalAdminMacAddress=agentNetworkLocalAdminMacAddress, agentStpCstPortEdge=agentStpCstPortEdge, agentSwitchProtectedPortGroupId=agentSwitchProtectedPortGroupId, agentSwitchSnoopingIntfAdminMode=agentSwitchSnoopingIntfAdminMode, agentExecAuthorizationListCreate=agentExecAuthorizationListCreate, agentUserAccessLevel=agentUserAccessLevel, agentStpConfigFormatSelector=agentStpConfigFormatSelector, agentStpPortStatsStpBpduRx=agentStpPortStatsStpBpduRx, agentPasswordManagementPasswordStrengthCheck=agentPasswordManagementPasswordStrengthCheck, agentIASUserConfigTable=agentIASUserConfigTable, agentPrivateVlanIntfAssocHostPrimary=agentPrivateVlanIntfAssocHostPrimary, agentTransferUploadDataType=agentTransferUploadDataType, agentDaiConfigGroup=agentDaiConfigGroup, agentSdmPreferCurrentTemplate=agentSdmPreferCurrentTemplate, agentClearTrapLog=agentClearTrapLog, agentSwitchSnoopSSMGroupTable=agentSwitchSnoopSSMGroupTable)
mibBuilder.exportSymbols("EdgeSwitch-SWITCHING-MIB", agentSdmTemplateEntry=agentSdmTemplateEntry, agentSwitchSnoopSSMFDBTable=agentSwitchSnoopSSMFDBTable, agentStaticIpv6sgBindingRowStatus=agentStaticIpv6sgBindingRowStatus, agentSwitchSnoopingVlanMRPExpirationTime=agentSwitchSnoopingVlanMRPExpirationTime, agentDhcpv6SnoopingVlanEnable=agentDhcpv6SnoopingVlanEnable, agentAutoinstallStatus=agentAutoinstallStatus, agentStaticDsv6BindingEntry=agentStaticDsv6BindingEntry, agentDhcpv6SnoopingVlanConfigTable=agentDhcpv6SnoopingVlanConfigTable, agentStpCstBridgeMaxAge=agentStpCstBridgeMaxAge, agentSwitchCpuFreeMemAboveThresholdTrap=agentSwitchCpuFreeMemAboveThresholdTrap, agentNetworkConfigProtocol=agentNetworkConfigProtocol, agentDaiIfTrustEnable=agentDaiIfTrustEnable, agentSwitchConflictMacAddr=agentSwitchConflictMacAddr, agentSaveConfigStatus=agentSaveConfigStatus, agentSwitchSnoopingQuerierElectionParticipateMode=agentSwitchSnoopingQuerierElectionParticipateMode, agentSwitchSnoopSSMSrcListAddressType=agentSwitchSnoopSSMSrcListAddressType, agentDaiIfConfigTable=agentDaiIfConfigTable, agentPortIanaType=agentPortIanaType, agentStpCstHelloTime=agentStpCstHelloTime, agentSwitchMFDBCurrentEntries=agentSwitchMFDBCurrentEntries, agentSnmpAuthenticationTrapFlag=agentSnmpAuthenticationTrapFlag, agentSwitchSnoopingPortMask=agentSwitchSnoopingPortMask, agentSwitchVlanStaticMrouterAdminMode=agentSwitchVlanStaticMrouterAdminMode, agentSwitchVlanSubnetAssociationSubnetMask=agentSwitchVlanSubnetAssociationSubnetMask, agentLagDetailedIfIndex=agentLagDetailedIfIndex, agentDynamicDsv6BindingLeaseRemainingTime=agentDynamicDsv6BindingLeaseRemainingTime, agentUserConfigCreate=agentUserConfigCreate, agentDot3adAggPort=agentDot3adAggPort, agentStaticDsBindingIpAddr=agentStaticDsBindingIpAddr, agentDynamicIpv6sgBindingIfIndex=agentDynamicIpv6sgBindingIfIndex, agentLagSummaryHashOption=agentLagSummaryHashOption, agentDhcpL2RelayUntrustedClntMsgsWithOptn82=agentDhcpL2RelayUntrustedClntMsgsWithOptn82, agentCableTesterStatus=agentCableTesterStatus, agentAuthenticationListStatus=agentAuthenticationListStatus, agentDhcpL2RelayStatsTable=agentDhcpL2RelayStatsTable, agentStpMstPortPriority=agentStpMstPortPriority, agentExecAccountingListEntry=agentExecAccountingListEntry, agentClearPortStats=agentClearPortStats, agentPortPhysicalStatus=agentPortPhysicalStatus, agentStpPortTable=agentStpPortTable, agentSwitchSnoopingQuerierVlanAdminMode=agentSwitchSnoopingQuerierVlanAdminMode, agentExecAuthorizationListEntry=agentExecAuthorizationListEntry, agentPortConfigEntry=agentPortConfigEntry, stpInstanceLoopInconsistentEndTrap=stpInstanceLoopInconsistentEndTrap, agentSwitchCpuProcessFreeMemoryThreshold=agentSwitchCpuProcessFreeMemoryThreshold, agentIASUserConfigGroup=agentIASUserConfigGroup, agentTrapLogEntry=agentTrapLogEntry, agentTransferDownloadDigitalSignatureVerifySelect=agentTransferDownloadDigitalSignatureVerifySelect, agentSwitchMFDBSummaryForwardingPortMask=agentSwitchMFDBSummaryForwardingPortMask, agentClearSwitchStats=agentClearSwitchStats, agentDynamicIpv6sgBindingVlanId=agentDynamicIpv6sgBindingVlanId, agentArpAclRuleMatchSenderIpAddr=agentArpAclRuleMatchSenderIpAddr, agentNetworkDhcp6SOLICITMessagesSent=agentNetworkDhcp6SOLICITMessagesSent, agentImageConfigGroup=agentImageConfigGroup, agentExecAuthorizationListName=agentExecAuthorizationListName, agentPasswordMgmtLastPasswordSetResult=agentPasswordMgmtLastPasswordSetResult, agentDhcpL2RelayRemoteIdVlanEnable=agentDhcpL2RelayRemoteIdVlanEnable, agentStpCstPortPriority=agentStpCstPortPriority, agentVendorClassOptionConfigGroup=agentVendorClassOptionConfigGroup, agentSwitchSnoopSSMSrcListEntry=agentSwitchSnoopSSMSrcListEntry, agentStpCstPortEntry=agentStpCstPortEntry, failedUserLoginTrap=failedUserLoginTrap, agentDhcpL2RelayVlanConfigTable=agentDhcpL2RelayVlanConfigTable, agentPasswordManagementStrengthExcludeKeywordTable=agentPasswordManagementStrengthExcludeKeywordTable, agentDhcpL2RelayVlanConfigEntry=agentDhcpL2RelayVlanConfigEntry, agentNetworkDhcp6RELEASEMessagesSent=agentNetworkDhcp6RELEASEMessagesSent, agentIpsgIfVerifySource=agentIpsgIfVerifySource, agentCmdsAuthorizationListStatus=agentCmdsAuthorizationListStatus, agentSwitchAddressConflictDetectionRun=agentSwitchAddressConflictDetectionRun, agentSwitchCutThroughConfiguredModeStatus=agentSwitchCutThroughConfiguredModeStatus, agentIpv6sgIfVerifySource=agentIpv6sgIfVerifySource, agentExecAuthorizationListTable=agentExecAuthorizationListTable, agentSwitchBroadcastControlThresholdUnit=agentSwitchBroadcastControlThresholdUnit, agentSystemGroup=agentSystemGroup, agentSwitchCpuProcessName=agentSwitchCpuProcessName, agentLagSummaryAddPort=agentLagSummaryAddPort, agentCmdsAccountingListMethod1=agentCmdsAccountingListMethod1, agentServicePortIpv6AddrPrefix=agentServicePortIpv6AddrPrefix, agentSwitchPrivateGroupMode=agentSwitchPrivateGroupMode, agentSwitchSnoopingIntfMRPExpirationTime=agentSwitchSnoopingIntfMRPExpirationTime, agentLagDetailedPortStatus=agentLagDetailedPortStatus, agentSwitchportGeneralTaggedVlanList=agentSwitchportGeneralTaggedVlanList, agentExecAccountingListMethod1=agentExecAccountingListMethod1, agentStpCstExtPortPathCost=agentStpCstExtPortPathCost, agentSwitchSnoopSSMGroupAddressType=agentSwitchSnoopSSMGroupAddressType, powerSupplyStatusChangeTrap=powerSupplyStatusChangeTrap, agentDaiVlanIpValidFailures=agentDaiVlanIpValidFailures, agentNetworkDhcp6RENEWMessagesSent=agentNetworkDhcp6RENEWMessagesSent, agentSwitchCpuCosQDrops=agentSwitchCpuCosQDrops, agentClassOfServicePortTable=agentClassOfServicePortTable, agentActiveImage=agentActiveImage, agentSerialBaudrate=agentSerialBaudrate, agentSwitchVlanMacAssociationGroup=agentSwitchVlanMacAssociationGroup, agentDigitalSignatureConfigGroup=agentDigitalSignatureConfigGroup, stpInstanceTopologyChangeTrap=stpInstanceTopologyChangeTrap, agentPortBroadcastControlMode=agentPortBroadcastControlMode, agentProtocolGroupPortIfIndex=agentProtocolGroupPortIfIndex, agentSwitchCutThroughConfigMode=agentSwitchCutThroughConfigMode, stpInstanceLoopInconsistentStartTrap=stpInstanceLoopInconsistentStartTrap, agentSwitchSnoopingVlanProxyQuerierAdminMode=agentSwitchSnoopingVlanProxyQuerierAdminMode, agentPortMirrorRemoteVlanTable=agentPortMirrorRemoteVlanTable, agentCLIBannerMessage=agentCLIBannerMessage, agentSwitchCpuProcessFallingThreshold=agentSwitchCpuProcessFallingThreshold, agentLagSummaryLinkTrap=agentLagSummaryLinkTrap, agentSwitchportGeneralDynamicallyAddedVlanList=agentSwitchportGeneralDynamicallyAddedVlanList, agentCmdsAccountingListEntry=agentCmdsAccountingListEntry, agentServicePortBurnedInMacAddress=agentServicePortBurnedInMacAddress, agentSwitchportTrunkNativeVlanTagging=agentSwitchportTrunkNativeVlanTagging, agentProtocolGroupPortEntry=agentProtocolGroupPortEntry, agentCmdsAccountingGroup=agentCmdsAccountingGroup, agentDaiVlanDstMacFailures=agentDaiVlanDstMacFailures, agentArpAclRuleEntry=agentArpAclRuleEntry, agentTransferDownloadPath=agentTransferDownloadPath, agentPvrstpPortIndex=agentPvrstpPortIndex, agentStpCstRegionalRootPathCost=agentStpCstRegionalRootPathCost, agentSnmpTrapFlagsConfigGroup=agentSnmpTrapFlagsConfigGroup, agentStpMstRootPortId=agentStpMstRootPortId, agentPortDot1dBasePort=agentPortDot1dBasePort, agentStpMstRowStatus=agentStpMstRowStatus, agentLoginSessionEntry=agentLoginSessionEntry, agentInfoGroup=agentInfoGroup, agentDhcpv6SnoopingStatsReset=agentDhcpv6SnoopingStatsReset, Ipv6IfIndex=Ipv6IfIndex, agentNetworkDhcp6REQUESTMessagesSent=agentNetworkDhcp6REQUESTMessagesSent, agentServicePortIpv6ConfigProtocol=agentServicePortIpv6ConfigProtocol, agentSwitchSnoopingQuerierVlanTable=agentSwitchSnoopingQuerierVlanTable, agentDhcpL2RelayIfTrustEnable=agentDhcpL2RelayIfTrustEnable, agentTransferDownloadServerAddress=agentTransferDownloadServerAddress, agentDynamicDsBindingIfIndex=agentDynamicDsBindingIfIndex, agentSnmpMultipleUsersTrapFlag=agentSnmpMultipleUsersTrapFlag, agentDhcpv6SnoopingRemoteFileName=agentDhcpv6SnoopingRemoteFileName, agentDhcpClientVendorClassIdMode=agentDhcpClientVendorClassIdMode, agentSwitchSnoopingQuerierLastQuerierAddress=agentSwitchSnoopingQuerierLastQuerierAddress, agentStaticDsBindingVlanId=agentStaticDsBindingVlanId, agentDhcpv6SnoopingVlanIndex=agentDhcpv6SnoopingVlanIndex, agentLagConfigCreate=agentLagConfigCreate, agentPortAdminMode=agentPortAdminMode, agentCableTesterGroup=agentCableTesterGroup, agentSwitchMFDBType=agentSwitchMFDBType, agentSwitchMbufClassName=agentSwitchMbufClassName, agentUserAuthenticationType=agentUserAuthenticationType, agentStaticDsv6BindingIfIndex=agentStaticDsv6BindingIfIndex, agentDhcpSnoopingMacVerifyFailures=agentDhcpSnoopingMacVerifyFailures, agentTransferDownloadRemoteFilename=agentTransferDownloadRemoteFilename, agentDynamicDsBindingIpAddr=agentDynamicDsBindingIpAddr, agentAutoinstallAutoRebootMode=agentAutoinstallAutoRebootMode, agentCableTesterCableFailureLocation=agentCableTesterCableFailureLocation, agentDigitalSignatureVerifyMode=agentDigitalSignatureVerifyMode, agentDaiIfBurstInterval=agentDaiIfBurstInterval, agentDhcpv6SnoopingIfConfigTable=agentDhcpv6SnoopingIfConfigTable, agentPortMirrorAdminMode=agentPortMirrorAdminMode, agentServicePortDhcp6RENEWMessagesSent=agentServicePortDhcp6RENEWMessagesSent, agentSwitchCpuProcessGroup=agentSwitchCpuProcessGroup, agentStpMstBridgeIdentifier=agentStpMstBridgeIdentifier, agentLagSummaryMinimumActiveLinks=agentLagSummaryMinimumActiveLinks, agentServicePortIpv6AddrTable=agentServicePortIpv6AddrTable, agentSwitchSnoopingIntfGroupMembershipInterval=agentSwitchSnoopingIntfGroupMembershipInterval, agentSwitchSnoopingQuerierExpiryInterval=agentSwitchSnoopingQuerierExpiryInterval, vlanRequestFailureTrap=vlanRequestFailureTrap, agentSwitchCpuProcessPercentageUtilization=agentSwitchCpuProcessPercentageUtilization, agentSwitchMbufRisingThresholdTrap=agentSwitchMbufRisingThresholdTrap, agentLagConfigGroupHashOption=agentLagConfigGroupHashOption, agentDynamicDsv6BindingIfIndex=agentDynamicDsv6BindingIfIndex, agentDhcpSnoopingIfConfigTable=agentDhcpSnoopingIfConfigTable, agentDynamicIpsgBindingIfIndex=agentDynamicIpsgBindingIfIndex, dhcpSnoopingIntfErrorDisabledTrap=dhcpSnoopingIntfErrorDisabledTrap, agentDynamicDsv6BindingMacAddr=agentDynamicDsv6BindingMacAddr, agentNetworkMacAddressType=agentNetworkMacAddressType, agentDhcpSnoopingVerifyMac=agentDhcpSnoopingVerifyMac, agentClassOfServicePortClass=agentClassOfServicePortClass, agentHTTPWebMode=agentHTTPWebMode, agentCableTesterCableStatus=agentCableTesterCableStatus, agentSwitchportGeneralForbiddenVlanList=agentSwitchportGeneralForbiddenVlanList, agentStpCstDesignatedPortId=agentStpCstDesignatedPortId, agentSwitchMbufConfigGroup=agentSwitchMbufConfigGroup, agentSwitchVlanMacAssociationTable=agentSwitchVlanMacAssociationTable, agentNetworkIpv6AddressAutoConfig=agentNetworkIpv6AddressAutoConfig, agentSwitchPrivateGroupPortTable=agentSwitchPrivateGroupPortTable, agentSwitchPortDVlanTagMode=agentSwitchPortDVlanTagMode, agentStpCstPortBpduFlood=agentStpCstPortBpduFlood, agentSdmTemplateId=agentSdmTemplateId, agentSwitchDVlanTagEthertype=agentSwitchDVlanTagEthertype, agentPasswordManagementHistory=agentPasswordManagementHistory, agentPortMaxFrameSize=agentPortMaxFrameSize, agentAuthenticationListIndex=agentAuthenticationListIndex, agentSwitchVlanMacAssociationRowStatus=agentSwitchVlanMacAssociationRowStatus, agentCmdsAccountingListTable=agentCmdsAccountingListTable, agentIPv4MulticastRoutes=agentIPv4MulticastRoutes, agentTelnetConfigGroup=agentTelnetConfigGroup, agentStpCstPortAutoEdge=agentStpCstPortAutoEdge, agentNetworkIpv6AddrEuiFlag=agentNetworkIpv6AddrEuiFlag, agentStpCstBridgeHoldTime=agentStpCstBridgeHoldTime, agentStaticIpsgBindingRowStatus=agentStaticIpsgBindingRowStatus, agentSwitchMFDBEntry=agentSwitchMFDBEntry, agentStaticIpsgBindingIpAddr=agentStaticIpsgBindingIpAddr, agentSnmpServerPortNum=agentSnmpServerPortNum, agentUserAuthenticationConfigEntry=agentUserAuthenticationConfigEntry, agentSwitchCpuCosQIndex=agentSwitchCpuCosQIndex, agentArpAclRowStatus=agentArpAclRowStatus, agentSwitchSnoopingQuerierLastQuerierVersion=agentSwitchSnoopingQuerierLastQuerierVersion, agentSwitchSnoopSSMGroupAddress=agentSwitchSnoopSSMGroupAddress, agentDhcpSnoopingIfConfigEntry=agentDhcpSnoopingIfConfigEntry, agentSnmpTrapReceiverCreate=agentSnmpTrapReceiverCreate, agentPortMirrorRemoteVlanIndex=agentPortMirrorRemoteVlanIndex, agentStpBpduGuardMode=agentStpBpduGuardMode, agentSnmpCommunityIPMask=agentSnmpCommunityIPMask, agentServicePortStatsGroup=agentServicePortStatsGroup, agentHTTPJavaMode=agentHTTPJavaMode, agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82=agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82, agentTransferDownloadDataType=agentTransferDownloadDataType, agentSwitchLastConflictingMacAddr=agentSwitchLastConflictingMacAddr, agentPvrstpVlanHelloTime=agentPvrstpVlanHelloTime, agentSwitchCpuProcessRisingThresholdInterval=agentSwitchCpuProcessRisingThresholdInterval, agentSwitchDVlanTagGroup=agentSwitchDVlanTagGroup, agentSdmTemplateTable=agentSdmTemplateTable, agentStpCstPortTopologyChangeAck=agentStpCstPortTopologyChangeAck, agentSwitchSnoopSSMSrcListIfIndex=agentSwitchSnoopSSMSrcListIfIndex, agentStaticDsv6BindingMacAddr=agentStaticDsv6BindingMacAddr, agentTelnetLoginTimeout=agentTelnetLoginTimeout, agentSwitchSnoopSSMGroupVlanId=agentSwitchSnoopSSMGroupVlanId, agentDynamicIpv6sgBindingEntry=agentDynamicIpv6sgBindingEntry, agentClearConfig=agentClearConfig, agentClearPasswords=agentClearPasswords, agentSwitchSnoopingIntfVlanIDs=agentSwitchSnoopingIntfVlanIDs, agentSupportedMibEntry=agentSupportedMibEntry, agentSwitchDVlanTagPrimaryTPid=agentSwitchDVlanTagPrimaryTPid, agentDhcpL2RelayStatsEntry=agentDhcpL2RelayStatsEntry, agentDhcpSnoopingConfigGroup=agentDhcpSnoopingConfigGroup, agentPortSTPState=agentPortSTPState, agentLagConfigGroup=agentLagConfigGroup, agentSwitchMulticastControlThreshold=agentSwitchMulticastControlThreshold, agentStpCstConfigGroup=agentStpCstConfigGroup, agentSnmpCommunityCreate=agentSnmpCommunityCreate, agentPortIfIndex=agentPortIfIndex, agentSwitchPortDVlanTagTable=agentSwitchPortDVlanTagTable, agentSwitchSnoopingIntfGroup=agentSwitchSnoopingIntfGroup, agentSwitchMbufsUsed=agentSwitchMbufsUsed, agentSwitchVlanSubnetAssociationTable=agentSwitchVlanSubnetAssociationTable, agentDhcpSnoopingIfTrustEnable=agentDhcpSnoopingIfTrustEnable, agentSwitchSnoopingIntfTable=agentSwitchSnoopingIntfTable, agentSerialTimeout=agentSerialTimeout, agentServicePortProtocolDhcpRenew=agentServicePortProtocolDhcpRenew, agentDhcpSnoopingStatsEntry=agentDhcpSnoopingStatsEntry, agentPrivateVlanIntfAssocTable=agentPrivateVlanIntfAssocTable, agentCableTesterMaximumCableLength=agentCableTesterMaximumCableLength, agentSwitchCpuProcessFallingThresholdInterval=agentSwitchCpuProcessFallingThresholdInterval)
