#
# PySNMP MIB module IEEE8021-CFM-V2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/IEEE8021-CFM-V2-MIB
# Produced by pysmi-1.1.12 at Sat Jul  6 01:04:28 2024
# On host fv-az1532-138 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
dot1agCfmGroups, Dot1agCfmMepIdOrZero, ieee8021CfmMaNetGroup, dot1agCfmMa, Dot1agCfmIdPermission, dot1agCfmMdRowStatus, dot1agCfmVlan, dot1agCfmMepDbGroup, dot1agCfmMepLbrBadMsdu, dot1agCfmDefaultMd, dot1agCfmNotificationsGroup, dot1agCfmCompliances, dot1agCfmMdIndex, dot1agCfmMaNetRowStatus, ieee8021CfmPbbTeExtensionGroup, dot1agCfmMepGroup, Dot1agCfmMDLevel, dot1agCfmMaIndex, dot1agCfmStack, dot1agCfmConfigErrorList, Dot1agCfmMDLevelOrNone, ieee8021CfmDefaultMdDefGroup, dot1agCfmMaMepListRowStatus, Dot1agCfmMhfCreation, ieee8021CfmPbbTeTrafficBitGroup, Dot1agCfmConfigErrors, Dot1agCfmMpDirection, dot1agCfmMdGroup, dot1agCfmMepRowStatus = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmGroups", "Dot1agCfmMepIdOrZero", "ieee8021CfmMaNetGroup", "dot1agCfmMa", "Dot1agCfmIdPermission", "dot1agCfmMdRowStatus", "dot1agCfmVlan", "dot1agCfmMepDbGroup", "dot1agCfmMepLbrBadMsdu", "dot1agCfmDefaultMd", "dot1agCfmNotificationsGroup", "dot1agCfmCompliances", "dot1agCfmMdIndex", "dot1agCfmMaNetRowStatus", "ieee8021CfmPbbTeExtensionGroup", "dot1agCfmMepGroup", "Dot1agCfmMDLevel", "dot1agCfmMaIndex", "dot1agCfmStack", "dot1agCfmConfigErrorList", "Dot1agCfmMDLevelOrNone", "ieee8021CfmDefaultMdDefGroup", "dot1agCfmMaMepListRowStatus", "Dot1agCfmMhfCreation", "ieee8021CfmPbbTeTrafficBitGroup", "Dot1agCfmConfigErrors", "Dot1agCfmMpDirection", "dot1agCfmMdGroup", "dot1agCfmMepRowStatus")
IEEE8021PbbComponentIdentifier, IEEE8021ServiceSelectorValueOrNone, IEEE8021ServiceSelectorValue, ieee802dot1mibs, IEEE8021ServiceSelectorType = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021PbbComponentIdentifier", "IEEE8021ServiceSelectorValueOrNone", "IEEE8021ServiceSelectorValue", "ieee802dot1mibs", "IEEE8021ServiceSelectorType")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, Counter32, Integer32, Counter64, MibIdentifier, ModuleIdentity, IpAddress, Unsigned32, NotificationType, TimeTicks, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Counter64", "MibIdentifier", "ModuleIdentity", "IpAddress", "Unsigned32", "NotificationType", "TimeTicks", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, MacAddress, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention", "RowStatus", "TruthValue")
ieee8021CfmV2Mib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 7))
ieee8021CfmV2Mib.setRevisions(('2018-06-28 00:00', '2014-12-15 00:00', '2011-02-27 00:00', '2008-11-18 00:00', '2008-10-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021CfmV2Mib.setRevisionsDescriptions(('Published as part of IEEE Std 802.1Q-2018.\n            Cross references updated and corrected.', 'Published as part of IEEE Std 802.1Q 2014 revision.\n            Cross references updated and corrected.', 'Minor edits to contact information etc. as part of \n          2011 revision of IEEE Std 802.1Q.', 'Added a new compliance clause for utilization by systems\n       that support CFM and PBB-TE.', 'The IEEE8021-CFM-V2-MIB Module contains objects that \n       replace those deprecated in the IEEE8021-CFM-MIB module.\n\n       This version is included in IEEE Std 802.1ap.',))
if mibBuilder.loadTexts: ieee8021CfmV2Mib.setLastUpdated('201806280000Z')
if mibBuilder.loadTexts: ieee8021CfmV2Mib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021CfmV2Mib.setContactInfo('WG-URL:   http://www.ieee802.org/1/\n        WG-EMail: stds-802-1-L@ieee.org \n\n        Contact:   IEEE 802.1 Working Group Chair\n           Postal: C/O IEEE 802.1 Working Group\n                   IEEE Standards Association\n                   445 Hoes Lane\n                   Piscataway\n                   NJ 08854\n                   USA\n           E-mail: STDS-802-1-L@IEEE.ORG\n       ')
if mibBuilder.loadTexts: ieee8021CfmV2Mib.setDescription('Connectivity Fault Management V2 module.\n\n       Unless otherwise indicated, the references in this MIB\n       module are to IEEE Std 802.1Q.\n\n       Copyright (C) IEEE (2018).\n       This version of this MIB module is part of IEEE Std 802.1Q;\n       see the draft itself for full legal notices.')
ieee8021CfmStackTable = MibTable((1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 2), )
if mibBuilder.loadTexts: ieee8021CfmStackTable.setReference('12.14.2')
if mibBuilder.loadTexts: ieee8021CfmStackTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmStackTable.setDescription('There is one CFM Stack table per Bridge. It permits\n        the retrieval of information about the Maintenance Points\n        configured on any given interface.\n       ')
ieee8021CfmStackEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 2, 1), ).setIndexNames((0, "IEEE8021-CFM-V2-MIB", "ieee8021CfmStackifIndex"), (0, "IEEE8021-CFM-V2-MIB", "ieee8021CfmStackServiceSelectorType"), (0, "IEEE8021-CFM-V2-MIB", "ieee8021CfmStackServiceSelectorOrNone"), (0, "IEEE8021-CFM-V2-MIB", "ieee8021CfmStackMdLevel"), (0, "IEEE8021-CFM-V2-MIB", "ieee8021CfmStackDirection"))
if mibBuilder.loadTexts: ieee8021CfmStackEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmStackEntry.setDescription('The Stack table entry')
ieee8021CfmStackifIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021CfmStackifIndex.setReference('12.14.2.1.2:a')
if mibBuilder.loadTexts: ieee8021CfmStackifIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmStackifIndex.setDescription('This object represents the  Bridge Port or aggregated port\n        on which MEPs or MHFs might be configured.\n\n        Upon a restart of the system, the system SHALL, if necessary,\n        change the value of this variable, and  rearrange the\n        ieee8021CfmStackTable, so that it indexes the entry in the\n        interface table with the same value of ifAlias that it\n        indexed before the system restart.  If no such entry exists,\n        then the system SHALL delete all entries in the\n        ieee8021CfmStackTable with the interface index.\n       ')
ieee8021CfmStackServiceSelectorType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 2, 1, 2), IEEE8021ServiceSelectorType())
if mibBuilder.loadTexts: ieee8021CfmStackServiceSelectorType.setReference('12.14.2.1.2:d, 22.1.7')
if mibBuilder.loadTexts: ieee8021CfmStackServiceSelectorType.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmStackServiceSelectorType.setDescription('Type of the Service Selector identifier indicated by ieee8021CfmStackServiceSelectorOrNone.\n        See textual convention IEEE8021ServiceSelectorType for details.\n       ')
ieee8021CfmStackServiceSelectorOrNone = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 2, 1, 3), IEEE8021ServiceSelectorValueOrNone())
if mibBuilder.loadTexts: ieee8021CfmStackServiceSelectorOrNone.setReference('12.14.2.1.2:d, 22.1.7')
if mibBuilder.loadTexts: ieee8021CfmStackServiceSelectorOrNone.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmStackServiceSelectorOrNone.setDescription('Service Selector identifier to which the MP is attached, or 0, if none.\n        See textual convention IEEE8021ServiceSelectorValue for details.\n       ')
ieee8021CfmStackMdLevel = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 2, 1, 4), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: ieee8021CfmStackMdLevel.setReference('12.14.2.1.2:b')
if mibBuilder.loadTexts: ieee8021CfmStackMdLevel.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmStackMdLevel.setDescription('MD Level of the Maintenance Point.')
ieee8021CfmStackDirection = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 2, 1, 5), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: ieee8021CfmStackDirection.setReference('12.14.2.1.2:c')
if mibBuilder.loadTexts: ieee8021CfmStackDirection.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmStackDirection.setDescription('Direction in which the MP faces on the Bridge Port')
ieee8021CfmStackMdIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CfmStackMdIndex.setReference('12.14.2.1.3:b')
if mibBuilder.loadTexts: ieee8021CfmStackMdIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmStackMdIndex.setDescription('The index of the Maintenance Domain in the ieee8021CfmMdTable\n        to which the MP is associated, or 0, if none.')
ieee8021CfmStackMaIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CfmStackMaIndex.setReference('12.14.2.1.3:c')
if mibBuilder.loadTexts: ieee8021CfmStackMaIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmStackMaIndex.setDescription('The index of the MA in the dot1agCfmMaNetTable and\n        ieee8021CfmMaCompTable to which the MP is associated, or 0, if\n        none.')
ieee8021CfmStackMepId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 2, 1, 8), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CfmStackMepId.setReference('12.14.2.1.3:d')
if mibBuilder.loadTexts: ieee8021CfmStackMepId.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmStackMepId.setDescription('If an MEP is configured, the MEPID, else 0')
ieee8021CfmStackMacAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 2, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CfmStackMacAddress.setReference('12.14.2.1.3:e')
if mibBuilder.loadTexts: ieee8021CfmStackMacAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmStackMacAddress.setDescription('MAC address of the MP.')
ieee8021CfmVlanTable = MibTable((1, 3, 111, 2, 802, 1, 1, 8, 1, 3, 2), )
if mibBuilder.loadTexts: ieee8021CfmVlanTable.setReference('12.14.3.1.3:a, 12.14.3.2.2:a, 12.14.5.3.2:c,\n        12.14.6.1.3:b, 22.1.5')
if mibBuilder.loadTexts: ieee8021CfmVlanTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmVlanTable.setDescription('This table defines the association of VIDs into VLANs.  There\n        is an entry in this table, for each component of the Bridge,\n        for each VID that is:\n            a) a VID belonging to a VLAN associated with more than\n               one VID; and\n            b) not the Primary VID of that VLAN.\n        The entry in this table contains the Primary VID of the VLAN.\n\n        By default, this table is empty, meaning that every VID is\n        the Primary VID of a single-VID VLAN.\n\n        VLANs that are associated with only one VID SHOULD NOT have\n        an entry in this table.\n\n        The writable objects in this table need to be persistent\n        upon reboot or restart of a device.\n       ')
ieee8021CfmVlanEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 8, 1, 3, 2, 1), ).setIndexNames((0, "IEEE8021-CFM-V2-MIB", "ieee8021CfmVlanComponentId"), (0, "IEEE8021-CFM-V2-MIB", "ieee8021CfmVlanSelector"))
if mibBuilder.loadTexts: ieee8021CfmVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmVlanEntry.setDescription('The VLAN table entry.')
ieee8021CfmVlanComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 3, 2, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021CfmVlanComponentId.setReference('12.3 l)')
if mibBuilder.loadTexts: ieee8021CfmVlanComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmVlanComponentId.setDescription('The Bridge component within the system to which the information\n        in this ieee8021CfmVlanEntry applies.  If the system is not a\n        Bridge, or if only one component is present in the Bridge, then\n        this variable (index) MUST be equal to 1.\n       ')
ieee8021CfmVlanSelector = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 3, 2, 1, 3), IEEE8021ServiceSelectorValue())
if mibBuilder.loadTexts: ieee8021CfmVlanSelector.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmVlanSelector.setDescription("This is a service ID belonging to a service that is associated\n        with more than one Service Selector identifiers, and this is not the Primary \n        Service ID of the service. The type of this Service Selector is the same\n        as the primary Service Selector's type defined by ieee8021CfmMaCompPrimarySelectorType \n        in the ieee8021CfmMaCompTable.\n       ")
ieee8021CfmVlanPrimarySelector = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 3, 2, 1, 5), IEEE8021ServiceSelectorValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CfmVlanPrimarySelector.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmVlanPrimarySelector.setDescription("This is the Primary Service selector for a Service that is associated\n        with more than one Service Selector identifiers. This value MUST not\n        equal the value of ieee8021CfmVlanSelector. The type of this Service Selector is the same\n        as the primary Service Selector's type defined by ieee8021CfmMaCompPrimarySelectorType \n        in the ieee8021CfmMaCompTable.\n       ")
ieee8021CfmVlanRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 3, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CfmVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmVlanRowStatus.setDescription('The status of the row.\n\n        The writable columns in a row cannot be changed if the row\n        is active. All columns MUST have a valid value before a row\n        can be activated.\n       ')
ieee8021CfmDefaultMdTable = MibTable((1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 5), )
if mibBuilder.loadTexts: ieee8021CfmDefaultMdTable.setReference('12.14.3')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdTable.setDescription("For each Bridge component, the Default MD Level Managed Object\n        controls MHF creation for VIDs that are not attached to a\n        specific Maintenance Association Managed Object, and Sender ID\n        TLV transmission by those MHFs.\n\n        For each Bridge Port, and for each VLAN ID whose data can\n        pass through that Bridge Port, an entry in this table is\n        used by the algorithm in 22.2.3 only if there is no\n        entry in the Maintenance Association table defining an MA\n        for the same VLAN ID and MD Level as this table's entry, and\n        on which MA an Up MEP is defined.  If there exists such an\n        MA, that MA's objects are used by the algorithm in\n        22.2.3 in place of this table entry's objects.  The\n        agent maintains the value of ieee8021CfmDefaultMdStatus to\n        indicate whether this entry is overridden by an MA.\n\n        When first initialized, the agent creates this table\n        automatically with entries for all VLAN IDs,\n        with the default values specified for each object.\n\n        After this initialization, the writable objects in this\n        table need to be persistent upon reboot or restart of a\n        device.\n       ")
ieee8021CfmDefaultMdEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 5, 1), ).setIndexNames((0, "IEEE8021-CFM-V2-MIB", "ieee8021CfmDefaultMdComponentId"), (0, "IEEE8021-CFM-V2-MIB", "ieee8021CfmDefaultMdPrimarySelectorType"), (0, "IEEE8021-CFM-V2-MIB", "ieee8021CfmDefaultMdPrimarySelector"))
if mibBuilder.loadTexts: ieee8021CfmDefaultMdEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdEntry.setDescription('The Default MD Level table entry.')
ieee8021CfmDefaultMdComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 5, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021CfmDefaultMdComponentId.setReference('12.3 l)')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdComponentId.setDescription('The Bridge component within the system to which the information\n        in this ieee8021CfmDefaultMdEntry applies.  If the system is not\n        a Bridge, or if only one component is present in the Bridge,\n        then this variable (index) MUST be equal to 1.\n       ')
ieee8021CfmDefaultMdPrimarySelectorType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 5, 1, 2), IEEE8021ServiceSelectorType())
if mibBuilder.loadTexts: ieee8021CfmDefaultMdPrimarySelectorType.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdPrimarySelectorType.setDescription('Type of the Primary Service Selector identifier indicated by \n        ieee8021CfmDefaultMdPrimarySelector. See textual\n        convention IEEE8021ServiceSelectorType for details.\n       ')
ieee8021CfmDefaultMdPrimarySelector = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 5, 1, 3), IEEE8021ServiceSelectorValue())
if mibBuilder.loadTexts: ieee8021CfmDefaultMdPrimarySelector.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdPrimarySelector.setDescription('Primary Service Selector identifier of a Service Instance with \n        no MA configured. See IEEE8021ServiceSelectorValue for details.\n       ')
ieee8021CfmDefaultMdStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CfmDefaultMdStatus.setReference('12.14.3.1.3:b')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdStatus.setDescription("State of this Default MD Level table entry.  True if there is\n        no entry in the Maintenance Association table defining an MA\n        for the same VLAN ID and MD Level as this table's entry, and\n        on which MA an Up MEP is defined, else false.\n       ")
ieee8021CfmDefaultMdLevel = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 5, 1, 5), Dot1agCfmMDLevelOrNone().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CfmDefaultMdLevel.setReference('12.14.3.1.3:c, 12.14.3.2.2:b')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdLevel.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdLevel.setDescription("A value indicating the MD Level at which MHFs are to be\n        created, and Sender ID TLV transmission by those MHFs is to\n        be controlled, for the VLAN to which this entry's objects\n        apply.\n       ")
ieee8021CfmDefaultMdMhfCreation = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 5, 1, 6), Dot1agCfmMhfCreation().clone('defMHFdefer')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CfmDefaultMdMhfCreation.setReference('12.14.3.1.3:d')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdMhfCreation.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdMhfCreation.setDescription('A value indicating if the Management entity can create MHFs\n        (MIP Half Function) for this VID at this MD Level.  If this\n        object has the value defMHFdefer, MHF creation for this VLAN\n        is controlled by ieee8021CfmDefaultMdDefMhfCreation.\n\n        The value of this variable is meaningless if the values of\n        ieee8021CfmDefaultMdStatus is false.\n       ')
ieee8021CfmDefaultMdIdPermission = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 5, 1, 7), Dot1agCfmIdPermission().clone('sendIdDefer')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CfmDefaultMdIdPermission.setReference('12.14.3.1.3:e')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdIdPermission.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdIdPermission.setDescription('Enumerated value indicating what, if anything, is to be\n        included in the Sender ID TLV (21.5.3) transmitted by MHFs\n        created by the Default Maintenance Domain.  If this object\n        has the value sendIdDefer, Sender ID TLV transmission for\n        this VLAN is controlled by ieee8021CfmDefaultMdDefIdPermission.\n\n        The value of this variable is meaningless if the values of\n        ieee8021CfmDefaultMdStatus is false.\n       ')
ieee8021CfmConfigErrorListTable = MibTable((1, 3, 111, 2, 802, 1, 1, 8, 1, 4, 2), )
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListTable.setReference('12.14.4')
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListTable.setDescription('The CFM Configuration Error List table provides a list of\n        Interfaces and VIDs that are incorrectly configured.\n       ')
ieee8021CfmConfigErrorListEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 8, 1, 4, 2, 1), ).setIndexNames((0, "IEEE8021-CFM-V2-MIB", "ieee8021CfmConfigErrorListSelectorType"), (0, "IEEE8021-CFM-V2-MIB", "ieee8021CfmConfigErrorListSelector"), (0, "IEEE8021-CFM-V2-MIB", "ieee8021CfmConfigErrorListIfIndex"))
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListEntry.setDescription('The Config Error List Table  entry')
ieee8021CfmConfigErrorListSelectorType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 4, 2, 1, 1), IEEE8021ServiceSelectorType())
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListSelectorType.setReference('12.14.4.1.2:a')
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListSelectorType.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListSelectorType.setDescription('Type of the Service Selector identifier indicated by\n        ieee8021CfmConfigErrorListSelector. See textual \n        convention IEEE8021ServiceSelectorType for details.\n       ')
ieee8021CfmConfigErrorListSelector = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 4, 2, 1, 2), IEEE8021ServiceSelectorValue())
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListSelector.setReference('12.14.4.1.2:a')
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListSelector.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListSelector.setDescription('The Service Selector Identifier of the Service with interfaces\n        in error. See IEEE8021ServiceSelectorValue for details.\n       ')
ieee8021CfmConfigErrorListIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 4, 2, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListIfIndex.setReference('12.14.4.1.2:b')
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListIfIndex.setDescription('This object is the IfIndex of the interface.\n\n        Upon a restart of the system, the system SHALL, if necessary,\n        change the value of this variable so that it indexes the\n        entry in the interface table with the same value of ifAlias\n        that it indexed before the system restart.  If no such\n        entry exists, then the system SHALL delete any entries in\n        ieee8021CfmConfigErrorListTable indexed by that\n        InterfaceIndex value.\n       ')
ieee8021CfmConfigErrorListErrorType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 4, 2, 1, 4), Dot1agCfmConfigErrors()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListErrorType.setReference('12.14.4.1.3:b')
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListErrorType.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListErrorType.setDescription('A vector of Boolean error conditions from 22.2.4, any of\n        which may be true:\n\n        0) CFMleak;\n        1) ConflictingVids;\n        2) ExcessiveLevels;\n        3) OverlappedLevels.\n       ')
ieee8021CfmMaCompTable = MibTable((1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 4), )
if mibBuilder.loadTexts: ieee8021CfmMaCompTable.setReference('18.2')
if mibBuilder.loadTexts: ieee8021CfmMaCompTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmMaCompTable.setDescription('The Maintenance Association table.  Each row in the table\n        represents an MA.  An MA is a set of MEPs, each configured\n        with a single service instance.\n\n        This is the part of the complete MA table that is variable\n        across the Bridges in a Maintenance Domain, or across the\n        components of a single Bridge.  That part of the MA table that\n        is constant across the Bridges and their components in a\n        Maintenance Domain is contained in the dot1agCfmMaNetTable.\n\n        This table uses three indices, first index is the\n        IEEE8021PbbComponentIdentifier that identifies the component\n        within the Bridge for which the information in the\n        ieee8021CfmMaCompEntry applies.  The second is the index of the\n        Maintenance Domain table.  The third index is the same as the\n        index of the ieee8021CfmMaNetEntry for the same MA.\n\n        The writable objects in this table need to be persistent\n        upon reboot or restart of a device.\n\n       ')
ieee8021CfmMaCompEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 4, 1), ).setIndexNames((0, "IEEE8021-CFM-V2-MIB", "ieee8021CfmMaComponentId"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"))
if mibBuilder.loadTexts: ieee8021CfmMaCompEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmMaCompEntry.setDescription('The MA table entry.')
ieee8021CfmMaComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 4, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021CfmMaComponentId.setReference('12.3 l)')
if mibBuilder.loadTexts: ieee8021CfmMaComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmMaComponentId.setDescription('The Bridge component within the system to which the information\n        in this ieee8021CfmMaCompEntry applies.  If the system is not a\n        Bridge, or if only one component is present in the Bridge, then\n        this variable (index) MUST be equal to 1.\n       ')
ieee8021CfmMaCompPrimarySelectorType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 4, 1, 2), IEEE8021ServiceSelectorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CfmMaCompPrimarySelectorType.setReference('12.14.6.1.3:b')
if mibBuilder.loadTexts: ieee8021CfmMaCompPrimarySelectorType.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmMaCompPrimarySelectorType.setDescription('Type of the Service Selector identifiers indicated by \n       ieee8021CfmMaCompPrimarySelectorOrNone. If the service \n       instance is defined by more than one Service Selector, this \n       parameter also indicates the type of the \n       ieee8021CfmVlanPrimarySelector and ieee8021CfmVlanSelector\n       in the ieee8021CfmVlanTable. \n       In Services instances made of multiple Service Selector\n       identifiers, ensures that the type of the Service selector\n       identifiers is the same. See textual convention \n        IEEE8021ServiceSelectorType for details.\n       ')
ieee8021CfmMaCompPrimarySelectorOrNone = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 4, 1, 3), IEEE8021ServiceSelectorValueOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CfmMaCompPrimarySelectorOrNone.setReference('12.14.6.1.3:b')
if mibBuilder.loadTexts: ieee8021CfmMaCompPrimarySelectorOrNone.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmMaCompPrimarySelectorOrNone.setDescription('Service Selector identifier to which the MP is attached,\n       or 0, if none. If the MA is associated with more than one\n       Service Selectors Identifiers, the ieee8021CfmVlanTable\n       lists them.\n       ')
ieee8021CfmMaCompMhfCreation = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 4, 1, 4), Dot1agCfmMhfCreation().clone('defMHFdefer')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CfmMaCompMhfCreation.setReference('12.14.6.1.3:c')
if mibBuilder.loadTexts: ieee8021CfmMaCompMhfCreation.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmMaCompMhfCreation.setDescription('Indicates if the Management entity can create MHFs (MIP Half\n        Function) for this MA.\n       ')
ieee8021CfmMaCompIdPermission = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 4, 1, 5), Dot1agCfmIdPermission().clone('sendIdDefer')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CfmMaCompIdPermission.setReference('12.14.6.1.3:d')
if mibBuilder.loadTexts: ieee8021CfmMaCompIdPermission.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmMaCompIdPermission.setDescription('Enumerated value indicating what, if anything, is to be\n        included in the Sender ID TLV (21.5.3) transmitted by MPs\n        configured in this MA.\n       ')
ieee8021CfmMaCompNumberOfVids = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 4, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CfmMaCompNumberOfVids.setReference('12.14.6.1.3:b')
if mibBuilder.loadTexts: ieee8021CfmMaCompNumberOfVids.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmMaCompNumberOfVids.setDescription('The number of VIDs associated with the MA.\n       ')
ieee8021CfmMaCompRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CfmMaCompRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmMaCompRowStatus.setDescription('The status of the row.\n\n        The writable columns in a row cannot be changed if the row\n        is active. All columns MUST have a valid value before a row\n        can be activated.\n       ')
ieee8021CfmStackGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 8, 2, 2, 12)).setObjects(("IEEE8021-CFM-V2-MIB", "ieee8021CfmStackMdIndex"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmStackMaIndex"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmStackMepId"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmStackMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CfmStackGroup = ieee8021CfmStackGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmStackGroup.setDescription('Objects for the Stack group.')
ieee8021CfmMaGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 8, 2, 2, 13)).setObjects(("IEEE8021-CFM-V2-MIB", "ieee8021CfmMaCompPrimarySelectorType"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmMaCompPrimarySelectorOrNone"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmMaCompMhfCreation"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmMaCompIdPermission"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmMaCompRowStatus"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmMaCompNumberOfVids"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CfmMaGroup = ieee8021CfmMaGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmMaGroup.setDescription('Objects for the MA group.')
ieee8021CfmDefaultMdGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 8, 2, 2, 14)).setObjects(("IEEE8021-CFM-V2-MIB", "ieee8021CfmDefaultMdStatus"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmDefaultMdLevel"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmDefaultMdMhfCreation"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmDefaultMdIdPermission"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CfmDefaultMdGroup = ieee8021CfmDefaultMdGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmDefaultMdGroup.setDescription('Objects for the Default MD Level group.')
ieee8021CfmVlanIdGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 8, 2, 2, 15)).setObjects(("IEEE8021-CFM-V2-MIB", "ieee8021CfmVlanPrimarySelector"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CfmVlanIdGroup = ieee8021CfmVlanIdGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmVlanIdGroup.setDescription('Objects for the VLAN ID group.')
ieee8021CfmConfigErrorListGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 8, 2, 2, 16)).setObjects(("IEEE8021-CFM-V2-MIB", "ieee8021CfmConfigErrorListErrorType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CfmConfigErrorListGroup = ieee8021CfmConfigErrorListGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmConfigErrorListGroup.setDescription('Objects for the CFM Configuration Error List Group.')
ieee8021CfmComplianceV2 = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 8, 2, 1, 2)).setObjects(("IEEE8021-CFM-V2-MIB", "ieee8021CfmStackGroup"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmMaGroup"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmDefaultMdGroup"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmConfigErrorListGroup"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmVlanIdGroup"), ("IEEE8021-CFM-MIB", "dot1agCfmMdGroup"), ("IEEE8021-CFM-MIB", "dot1agCfmMepGroup"), ("IEEE8021-CFM-MIB", "dot1agCfmMepDbGroup"), ("IEEE8021-CFM-MIB", "dot1agCfmNotificationsGroup"), ("IEEE8021-CFM-MIB", "ieee8021CfmDefaultMdDefGroup"), ("IEEE8021-CFM-MIB", "ieee8021CfmMaNetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CfmComplianceV2 = ieee8021CfmComplianceV2.setStatus('current')
if mibBuilder.loadTexts: ieee8021CfmComplianceV2.setDescription('The compliance statement for support of the CFM MIB module.')
dot1agCfmWithPbbTeCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 8, 2, 1, 3)).setObjects(("IEEE8021-CFM-V2-MIB", "ieee8021CfmStackGroup"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmMaGroup"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmDefaultMdGroup"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmConfigErrorListGroup"), ("IEEE8021-CFM-V2-MIB", "ieee8021CfmVlanIdGroup"), ("IEEE8021-CFM-MIB", "dot1agCfmMdGroup"), ("IEEE8021-CFM-MIB", "dot1agCfmMepGroup"), ("IEEE8021-CFM-MIB", "dot1agCfmMepDbGroup"), ("IEEE8021-CFM-MIB", "dot1agCfmNotificationsGroup"), ("IEEE8021-CFM-MIB", "ieee8021CfmDefaultMdDefGroup"), ("IEEE8021-CFM-MIB", "ieee8021CfmMaNetGroup"), ("IEEE8021-CFM-MIB", "ieee8021CfmPbbTeExtensionGroup"), ("IEEE8021-CFM-MIB", "ieee8021CfmPbbTeTrafficBitGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot1agCfmWithPbbTeCompliance = dot1agCfmWithPbbTeCompliance.setStatus('current')
if mibBuilder.loadTexts: dot1agCfmWithPbbTeCompliance.setDescription('The compliance statement for support of the CFM MIB for\n        systems that support PBB-TE.')
mibBuilder.exportSymbols("IEEE8021-CFM-V2-MIB", ieee8021CfmConfigErrorListSelectorType=ieee8021CfmConfigErrorListSelectorType, ieee8021CfmDefaultMdPrimarySelectorType=ieee8021CfmDefaultMdPrimarySelectorType, ieee8021CfmStackMacAddress=ieee8021CfmStackMacAddress, ieee8021CfmMaCompNumberOfVids=ieee8021CfmMaCompNumberOfVids, ieee8021CfmDefaultMdComponentId=ieee8021CfmDefaultMdComponentId, ieee8021CfmConfigErrorListSelector=ieee8021CfmConfigErrorListSelector, ieee8021CfmConfigErrorListGroup=ieee8021CfmConfigErrorListGroup, ieee8021CfmStackEntry=ieee8021CfmStackEntry, dot1agCfmWithPbbTeCompliance=dot1agCfmWithPbbTeCompliance, ieee8021CfmStackMdIndex=ieee8021CfmStackMdIndex, PYSNMP_MODULE_ID=ieee8021CfmV2Mib, ieee8021CfmComplianceV2=ieee8021CfmComplianceV2, ieee8021CfmStackServiceSelectorOrNone=ieee8021CfmStackServiceSelectorOrNone, ieee8021CfmDefaultMdEntry=ieee8021CfmDefaultMdEntry, ieee8021CfmStackGroup=ieee8021CfmStackGroup, ieee8021CfmVlanComponentId=ieee8021CfmVlanComponentId, ieee8021CfmVlanEntry=ieee8021CfmVlanEntry, ieee8021CfmMaCompPrimarySelectorType=ieee8021CfmMaCompPrimarySelectorType, ieee8021CfmVlanRowStatus=ieee8021CfmVlanRowStatus, ieee8021CfmDefaultMdStatus=ieee8021CfmDefaultMdStatus, ieee8021CfmMaCompRowStatus=ieee8021CfmMaCompRowStatus, ieee8021CfmStackTable=ieee8021CfmStackTable, ieee8021CfmDefaultMdTable=ieee8021CfmDefaultMdTable, ieee8021CfmDefaultMdMhfCreation=ieee8021CfmDefaultMdMhfCreation, ieee8021CfmConfigErrorListEntry=ieee8021CfmConfigErrorListEntry, ieee8021CfmMaCompMhfCreation=ieee8021CfmMaCompMhfCreation, ieee8021CfmConfigErrorListTable=ieee8021CfmConfigErrorListTable, ieee8021CfmConfigErrorListErrorType=ieee8021CfmConfigErrorListErrorType, ieee8021CfmStackMdLevel=ieee8021CfmStackMdLevel, ieee8021CfmMaCompPrimarySelectorOrNone=ieee8021CfmMaCompPrimarySelectorOrNone, ieee8021CfmDefaultMdIdPermission=ieee8021CfmDefaultMdIdPermission, ieee8021CfmConfigErrorListIfIndex=ieee8021CfmConfigErrorListIfIndex, ieee8021CfmDefaultMdPrimarySelector=ieee8021CfmDefaultMdPrimarySelector, ieee8021CfmMaCompEntry=ieee8021CfmMaCompEntry, ieee8021CfmStackServiceSelectorType=ieee8021CfmStackServiceSelectorType, ieee8021CfmVlanPrimarySelector=ieee8021CfmVlanPrimarySelector, ieee8021CfmMaGroup=ieee8021CfmMaGroup, ieee8021CfmDefaultMdGroup=ieee8021CfmDefaultMdGroup, ieee8021CfmStackMaIndex=ieee8021CfmStackMaIndex, ieee8021CfmVlanSelector=ieee8021CfmVlanSelector, ieee8021CfmDefaultMdLevel=ieee8021CfmDefaultMdLevel, ieee8021CfmStackDirection=ieee8021CfmStackDirection, ieee8021CfmV2Mib=ieee8021CfmV2Mib, ieee8021CfmVlanTable=ieee8021CfmVlanTable, ieee8021CfmStackMepId=ieee8021CfmStackMepId, ieee8021CfmVlanIdGroup=ieee8021CfmVlanIdGroup, ieee8021CfmMaCompTable=ieee8021CfmMaCompTable, ieee8021CfmStackifIndex=ieee8021CfmStackifIndex, ieee8021CfmMaCompIdPermission=ieee8021CfmMaCompIdPermission, ieee8021CfmMaComponentId=ieee8021CfmMaComponentId)
