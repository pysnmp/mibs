#
# PySNMP MIB module COLUBRIS-PUBLIC-ACCESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hpmsm/COLUBRIS-PUBLIC-ACCESS-MIB.my
# Produced by pysmi-1.1.12 at Mon Oct 28 02:10:31 2024
# On host fv-az1014-591 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
colubrisMgmtV2, = mibBuilder.importSymbols("COLUBRIS-SMI", "colubrisMgmtV2")
ColubrisSSIDOrNone, ColubrisNotificationEnable, ColubrisUsersAuthenticationType, ColubrisUsersAuthenticationMode, ColubrisSecurity, ColubrisPriorityQueue, ColubrisProfileIndexOrZero = mibBuilder.importSymbols("COLUBRIS-TC", "ColubrisSSIDOrNone", "ColubrisNotificationEnable", "ColubrisUsersAuthenticationType", "ColubrisUsersAuthenticationMode", "ColubrisSecurity", "ColubrisPriorityQueue", "ColubrisProfileIndexOrZero")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, Unsigned32, Counter32, iso, Gauge32, IpAddress, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "Unsigned32", "Counter32", "iso", "Gauge32", "IpAddress", "Integer32", "TimeTicks")
TextualConvention, DateAndTime, DisplayString, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString", "MacAddress", "TruthValue")
colubrisPublicAccessMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 8744, 5, 1))
if mibBuilder.loadTexts: colubrisPublicAccessMIB.setLastUpdated('200511040000Z')
if mibBuilder.loadTexts: colubrisPublicAccessMIB.setOrganization('Colubris Networks, Inc.')
if mibBuilder.loadTexts: colubrisPublicAccessMIB.setContactInfo('Colubris Networks\n                     Postal: 200 West Street Ste 300\n                             Waltham, Massachusetts 02451-1121\n                             UNITED STATES\n                     Phone:  +1 781 684 0001\n                     Fax:    +1 781 684 0009\n\n                     E-mail: cn-snmp@colubris.com')
if mibBuilder.loadTexts: colubrisPublicAccessMIB.setDescription('Colubris Networks Public Access MIB.')
colubrisPublicAccessMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1))
publicAccessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 1))
publicAccessDeviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 2))
publicAccessUsersGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3))
publicAccessNASPortsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 4))
publicAccessStatus = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessStatus.setStatus('current')
if mibBuilder.loadTexts: publicAccessStatus.setDescription('Identifies the current status of the authentication system.')
publicAccessStatusChangedCause = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessStatusChangedCause.setStatus('current')
if mibBuilder.loadTexts: publicAccessStatusChangedCause.setDescription('Identifies the last cause of a status change. Mostly\n                 used by the publicAccessStatusChanged trap.')
publicAccessDeviceUserName = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 253))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: publicAccessDeviceUserName.setStatus('current')
if mibBuilder.loadTexts: publicAccessDeviceUserName.setDescription('Specifies the username that the device uses when authenticating\n                 itself to a RADIUS server.')
publicAccessDeviceUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 230))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: publicAccessDeviceUserPassword.setStatus('current')
if mibBuilder.loadTexts: publicAccessDeviceUserPassword.setDescription('Specifies the password the device uses when authenticating\n                 to a RADIUS server. For security reasons, this should be set\n                 only if SNMP traffic is sent through a VPN tunnel. Reading this\n                 attribute will return an empty string.')
publicAccessDeviceSessionTimeoutAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: publicAccessDeviceSessionTimeoutAdminStatus.setStatus('current')
if mibBuilder.loadTexts: publicAccessDeviceSessionTimeoutAdminStatus.setDescription('Specifies the interval of time between two consecutive\n                 authentication attempts in minutes. At each successful\n                 authentication the device configuration is refreshed.\n                 This is not the time between RADIUS Access Request when\n                 an authentication is proceeding without answers. For\n                 that element, see the RADIUS Profile definition.')
publicAccessDeviceSessionTimeoutOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 2, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessDeviceSessionTimeoutOperStatus.setStatus('current')
if mibBuilder.loadTexts: publicAccessDeviceSessionTimeoutOperStatus.setDescription('Identifies the interval of time between two consecutive\n                 authentication attempts in seconds. At each successful\n                 authentication the device configuration is refreshed.\n                 This is not the time between RADIUS Access Request when\n                 an authentication is proceeding without answers. For\n                 that element, see the RADIUS Profile definition.')
publicAccessDeviceConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 2, 5), ColubrisUsersAuthenticationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessDeviceConfigMode.setStatus('current')
if mibBuilder.loadTexts: publicAccessDeviceConfigMode.setDescription('Identifies how configuration of the device is performed. This\n                 can be via locally configured settings on the device, or\n                 retrieved from a AAA server. If both options are enabled,\n                 the settings retrieved from the AAA server overwrite the\n                 local configuration settings.')
publicAccessDeviceAuthenProfileIndex = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 2, 6), ColubrisProfileIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessDeviceAuthenProfileIndex.setStatus('current')
if mibBuilder.loadTexts: publicAccessDeviceAuthenProfileIndex.setDescription("Identifies the AAA server profile to use to authenticate\n                 the device. This attribute only applies when\n                 publicAccessDeviceConfigMode is set to 'profile' or\n                 'localAndProfile'.\n                 When the special value zero is specified, no AAA\n                 server profile is selected.")
publicAccessDeviceAccountingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessDeviceAccountingEnabled.setStatus('current')
if mibBuilder.loadTexts: publicAccessDeviceAccountingEnabled.setDescription('Identifies if accounting information is generated by the\n                 device and sent to the AAA server. The device generate\n                 RADIUS accounting of type ON and OFF. This also covers accounting\n                 of all access-lists independently of where they are used.\n                 For accounting, the following status types are generated: START,\n                 INTERIM-UPDATE, and STOP. Accounting information is generated\n                 only if a valid AAA server profile is configured in the\n                 publicAccessDeviceAccountingProfileIndex attribute.')
publicAccessDeviceAccountingProfileIndex = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 2, 8), ColubrisProfileIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessDeviceAccountingProfileIndex.setStatus('current')
if mibBuilder.loadTexts: publicAccessDeviceAccountingProfileIndex.setDescription("Identifies the AAA server profile to use for device\n                 accounting. This attribute only applies when\n                 publicAccessDeviceAccountingEnabled is set to 'enable'.\n                 When the special value zero is specified, the\n                 value set inside publicAccessDeviceAuthenProfileIndex\n                 is used instead.")
publicAccessDeviceForceReconfiguration = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("forceReconfiguration", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: publicAccessDeviceForceReconfiguration.setStatus('current')
if mibBuilder.loadTexts: publicAccessDeviceForceReconfiguration.setDescription("Specify forceReconfiguration(1) to force the device to re-read\n                 the local configuration file or re-issue an authentication request\n                 to the AAA server, or both based on the value of the\n                 publicAccessDeviceConfigMode attribute.\n                 Reading this object always returns 'idle'. Re-issuing an\n                 authentication only applies if a valid AAA server profile is\n                 specified in publicAccessDeviceAuthenProfileIndex.")
publicAccessUsersMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUsersMaxCount.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersMaxCount.setDescription('Indicates the maximum number of concurrent authenticated users.')
publicAccessUsersCount = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUsersCount.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersCount.setDescription('Indicates the number of currently authenticated users.')
publicAccessUsersThreshold = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: publicAccessUsersThreshold.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersThreshold.setDescription('Specifies the trigger value for sending the\n                 publicAccessUsersThresholdTrap. When the number of users\n                 logged into the public access interface is equal to or exceeds\n                 this threshold value, a publicAccessUsersThresholdTrap is sent.\n                 The threshold value cannot exceed publicAccessUsersMaxCount\n                 or an error is returned. Set this to zero to disable\n                 sending of the publicAccessUsersThresholdTrap.')
publicAccessUsersSessionTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 4), ColubrisNotificationEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: publicAccessUsersSessionTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersSessionTrapEnabled.setDescription('When set to enable, the publicAccessUsersSessionStart and\n                 publicAccessUsersSessionStop traps are generated when a\n                 user session begins or ends.')
publicAccessUsersConfigTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 5), )
if mibBuilder.loadTexts: publicAccessUsersConfigTable.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersConfigTable.setDescription("Provides information on the user's authentication\n                 method. In tabular form to allow multiple instances on an\n                 agent.")
publicAccessUsersConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 5, 1), ).setIndexNames((0, "COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersConfigIndex"))
if mibBuilder.loadTexts: publicAccessUsersConfigEntry.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersConfigEntry.setDescription('An entry in the table.')
publicAccessUsersConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: publicAccessUsersConfigIndex.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersConfigIndex.setDescription('Index of a user profile in the publicAccessUsersConfigTable.')
publicAccessUsersConfigAuthenType = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 5, 1, 2), ColubrisUsersAuthenticationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUsersConfigAuthenType.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersConfigAuthenType.setDescription('Indicates the mechanism used to authenticate users.')
publicAccessUsersConfigAuthenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 5, 1, 3), ColubrisUsersAuthenticationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUsersConfigAuthenMode.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersConfigAuthenMode.setDescription('Specifies how the user authentication is performed.  It can\n                 be done with the local user list or via a AAA server profile.\n                 If both are enabled, the local user list is checked first.')
publicAccessUsersConfigAuthenProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 5, 1, 4), ColubrisProfileIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUsersConfigAuthenProfileIndex.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersConfigAuthenProfileIndex.setDescription("Specifies the AAA profile to use for user authentication when\n                 publicAccessUsersAuthenMode is set to 'profile' or 'localAndProfile'.")
publicAccessUsersConfigAuthenTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUsersConfigAuthenTimeout.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersConfigAuthenTimeout.setDescription("Logins are refused if the AAA server does not respond\n                 within this time period. Only applies when\n                 coVirtualApUserAccessAuthenMode is set to 'profile' or\n                 'localAndProfile' and when the users are authenticated via\n                 'HTML' or 'MAC' authentication.")
publicAccessUsersConfigAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUsersConfigAccountingEnabled.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersConfigAccountingEnabled.setDescription('Indicates if accounting information is generated by the\n                 device and sent to the AAA server for public access users.\n                 Accounting information is generated only if a valid AAA\n                 server profile is configured for\n                 publicAccessUsersAccountingProfileIndex.')
publicAccessUsersConfigAccountingProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 5, 1, 7), ColubrisProfileIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUsersConfigAccountingProfileIndex.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersConfigAccountingProfileIndex.setDescription('Identifies the AAA profile to send accounting to for\n                 public access users. When zero is specified, the\n                 value set inside publicAccessDeviceAuthenProfileIndex\n                 is used instead.')
publicAccessUsersConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 5, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUsersConfigInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersConfigInterfaceIndex.setDescription('Indicates the local interface on which these configuration\n                 parameters apply. This attribute is used with the\n                 publicAccessUsersConfigVirtualApProfileIndex to uniquely\n                 identify an entry in Virtual AP indexed tables.')
publicAccessUsersConfigVirtualApProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUsersConfigVirtualApProfileIndex.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersConfigVirtualApProfileIndex.setDescription("Indicates a user's VAP profile currently associated\n                 with these configuration parameters. This attribute is used\n                 with the publicAccessUsersConfigInterfaceIndex to uniquely\n                 identify an entry in Virtual AP indexed tables.")
publicAccessUserTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6), )
if mibBuilder.loadTexts: publicAccessUserTable.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserTable.setDescription('A table containing specific information for users authenticated\n                 by the authentication system. In tabular form to allow\n                 multiple instances on an agent.')
publicAccessUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1), ).setIndexNames((0, "COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserIndex"))
if mibBuilder.loadTexts: publicAccessUserEntry.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserEntry.setDescription('Information about a particular user that has been authenticated\n                 by the authentication system.\n                 publicAccessUserIndex - Uniquely identifies a user in the\n                                         table.')
publicAccessUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: publicAccessUserIndex.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserIndex.setDescription('Index of a user in the publicAccessUserTable.')
publicAccessUserAuthenType = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 2), ColubrisUsersAuthenticationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserAuthenType.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserAuthenType.setDescription('Indicates the mechanism used to authenticate the user.')
publicAccessUserAuthenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 3), ColubrisUsersAuthenticationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserAuthenMode.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserAuthenMode.setDescription('Specifies how user authentication is performed. It can\n                 be done using a local user list defined on the device\n                 or AAA server profile. If both modes are active the local\n                 user list is checked first.')
publicAccessUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unassigned", 0), ("connecting", 1), ("connected", 2), ("reconnecting", 3), ("disconnecting", 4), ("disconnected", 5), ("disconnectingAdministrative", 6), ("disconnectedAdministrative", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserState.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserState.setDescription('Indicates the current state of the user.')
publicAccessUserStationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserStationIpAddress.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserStationIpAddress.setDescription("Indicates the user's IP address.")
publicAccessUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserName.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserName.setDescription("Indicates the user's name.")
publicAccessUserSessionStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserSessionStartTime.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserSessionStartTime.setDescription('Indicates when this user session was started.')
publicAccessUserSessionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 8), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserSessionDuration.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserSessionDuration.setDescription("Indicates how long the user's session has been active.\n                 When this counter reaches its maximum value, it wraps\n                 around and starts increasing again from zero.")
publicAccessUserIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 9), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserIdleTime.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserIdleTime.setDescription("Indicates for how long the user's session has been idle.\n                 When this counter reaches its maximum value, it wraps\n                 around and starts increasing again from zero.")
publicAccessUserBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserBytesSent.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserBytesSent.setDescription('Indicates the total number of bytes sent by the user.\n                 When this counter reaches its maximum value, it wraps\n                 around and starts increasing again from zero.')
publicAccessUserBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserBytesReceived.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserBytesReceived.setDescription('Indicates the total number of bytes received by the user.\n                 When this counter reaches its maximum value, it wraps\n                 around and starts increasing again from zero.')
publicAccessUserPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserPacketsSent.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserPacketsSent.setDescription('Indicates the total number of IP packets sent by the user.\n                 When this counter reaches its maximum value, it wraps\n                 around and starts increasing again from zero.')
publicAccessUserPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserPacketsReceived.setDescription('Indicates the total number of IP packets received by the user.\n                 When this counter reaches its maximum value, it wraps\n                 around and starts increasing again from zero.')
publicAccessUserForceDisconnection = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("adminReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: publicAccessUserForceDisconnection.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserForceDisconnection.setDescription("Setting this attribute to 'adminReset' disconnects\n                 the user with a cause of ADMIN_RESET.\n                 Reading this variable always return 'idle'.")
publicAccessUserStationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserStationMacAddress.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserStationMacAddress.setDescription("Indicates the user's MAC Address.")
publicAccessUserApMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserApMacAddress.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserApMacAddress.setDescription("Indicates the user's Access Point MAC Address when Location-\n                 Aware is enabled or the Access Controller MAC Address.")
publicAccessUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserGroupName.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserGroupName.setDescription("Indicates the user's Access Point Group Name (ONLY when\n                 Location-aware is enabled and properly configured).\n                 If this information is not available, a zero-Length\n                 string is returned.")
publicAccessUserSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 18), ColubrisSSIDOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserSSID.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserSSID.setDescription("Indicates the user's Access Point SSID (ONLY when\n                 Location-aware is enabled and properly configured).\n                 If this information is not available, a zero-Length\n                 string is returned.")
publicAccessUserSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 19), ColubrisSecurity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserSecurity.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserSecurity.setDescription("Specifies the user's security mode.")
publicAccessUserPHYType = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("ieee802dot11a", 1), ("ieee802dot11b", 2), ("ieee802dot11g", 3), ("ieee802dot11n", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserPHYType.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserPHYType.setDescription("Specifies the user's radio type.")
publicAccessUserVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserVLAN.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserVLAN.setDescription('Specifies the VLAN currently assigned to the user.')
publicAccessUserApRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserApRadioIndex.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserApRadioIndex.setDescription('Indicates the radio to which this user is associated.\n                 The index 0 is reserved when location aware is not enabled\n                 or not properly configured. It means that the system\n                 could not determine on which interface the user is\n                 connected. Please note that this information is not\n                 related to the standard SNMP interface table. It is a\n                 proprietary index information on the Radios in Colubris\n                 devices.')
publicAccessUserConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserConfigIndex.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserConfigIndex.setDescription('Indicates the configuration profile in the\n                 publicAccessUsersConfigTable currently associated with\n                 this user. When location aware is not enabled or not properly\n                 configured, the first SSID of the first radio interface\n                 is used as the default configuration profile.')
publicAccessUserConnectedInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: publicAccessUserConnectedInterface.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserConnectedInterface.setDescription("Indicates the device's logical public interface to which\n                the user is connected. This will always be a string\n                containing 'br0'.")
publicAccessUserBytesSentDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserBytesSentDropped.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserBytesSentDropped.setDescription('Indicates the total number of bytes sent by the user and dropped due to rate limitation.\n                 When this counter reaches its maximum value, it wraps around and starts increasing\n                 again from zero.')
publicAccessUserBytesReceivedDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserBytesReceivedDropped.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserBytesReceivedDropped.setDescription('Indicates the total number of bytes received for the user and dropped due to rate limitation.\n                 When this counter reaches its maximum value, it wraps around and starts increasing\n                 again from zero.')
publicAccessUserPacketsSentDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserPacketsSentDropped.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserPacketsSentDropped.setDescription('Indicates the total number of packets sent by the user and dropped due to rate limitation.\n                 When this counter reaches its maximum value, it wraps around and starts increasing\n                 again from zero.')
publicAccessUserPacketsReceivedDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserPacketsReceivedDropped.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserPacketsReceivedDropped.setDescription('Indicates the total number of packets received for the user and dropped due to rate limitation.\n                 When this counter reaches its maximum value, it wraps around and starts increasing\n                 again from zero.')
publicAccessUserRateLimitationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserRateLimitationEnabled.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserRateLimitationEnabled.setDescription('Specifies if rate limitation is enabled for the user.')
publicAccessUserMaxTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserMaxTransmitRate.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserMaxTransmitRate.setDescription('Specifies the maximum transmit rate for the user.')
publicAccessUserMaxReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserMaxReceiveRate.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserMaxReceiveRate.setDescription('Specifies the maximum receive rate for the user.')
publicAccessUserBandwidthControlLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 32), ColubrisPriorityQueue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserBandwidthControlLevel.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserBandwidthControlLevel.setDescription("Specifies the user's bandwidth control level.")
publicAccessUserNASPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 6, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessUserNASPort.setStatus('current')
if mibBuilder.loadTexts: publicAccessUserNASPort.setDescription('Specifies the NAS-Port value assigned to the user.')
publicAccessUsersLoggedInTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 7), ColubrisNotificationEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: publicAccessUsersLoggedInTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersLoggedInTrapEnabled.setDescription('When set to enable, the publicAccessUsersLoggedInTrap is generated.')
publicAccessUsersLoggedInTrapInterval = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 3, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: publicAccessUsersLoggedInTrapInterval.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersLoggedInTrapInterval.setDescription('Interval between publicAccessUsersLoggedInTrap traps.\n                 Setting this to 0 will disable periodic sending of these traps.')
publicAccessNASPortCount = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessNASPortCount.setStatus('current')
if mibBuilder.loadTexts: publicAccessNASPortCount.setDescription('Indicates the number of NAS-Port supported.')
publicAccessNASPortTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 4, 2), )
if mibBuilder.loadTexts: publicAccessNASPortTable.setStatus('current')
if mibBuilder.loadTexts: publicAccessNASPortTable.setDescription('A table containing specific information for NAS-Port\n                 by the Access Controller. In tabular form to allow\n                 multiple instances on an agent.')
publicAccessNASPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 4, 2, 1), ).setIndexNames((0, "COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessNASPortIndex"))
if mibBuilder.loadTexts: publicAccessNASPortEntry.setStatus('current')
if mibBuilder.loadTexts: publicAccessNASPortEntry.setDescription('Information about a particular NAS-Port\n                 by Access Controller.\n                 publicAccessNASPortIndex - Uniquely identifies a NAS-Port in the\n                 table.')
publicAccessNASPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: publicAccessNASPortIndex.setStatus('current')
if mibBuilder.loadTexts: publicAccessNASPortIndex.setDescription('Index of a NAS-Port in the publicAccessNASPortTable.')
publicAccessNASPortUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 1, 1, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: publicAccessNASPortUserName.setStatus('current')
if mibBuilder.loadTexts: publicAccessNASPortUserName.setDescription("Indicates the user's name currently authenticated\n                 by the Access Controller on this NAS-Port.")
publicAccessMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 1, 2))
publicAccessMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 1, 2, 0))
publicAccessStatusChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8744, 5, 1, 2, 0, 1)).setObjects(("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessStatus"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessStatusChangedCause"))
if mibBuilder.loadTexts: publicAccessStatusChangedTrap.setStatus('current')
if mibBuilder.loadTexts: publicAccessStatusChangedTrap.setDescription('This notification is sent whenever the authentication system\n                 status changes (up or down).')
publicAccessUsersThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 8744, 5, 1, 2, 0, 2)).setObjects(("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersCount"))
if mibBuilder.loadTexts: publicAccessUsersThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersThresholdTrap.setDescription('This notification is sent whenever publicAccessUsersThreshold\n                 is exceeded.')
publicAccessUsersSessionStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 8744, 5, 1, 2, 0, 3)).setObjects(("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserName"))
if mibBuilder.loadTexts: publicAccessUsersSessionStartTrap.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersSessionStartTrap.setDescription('When a user successfully authenticate a trap is\n                 generated if the publicAccessUsersSessionTrapEnabled is set to\n                 True.')
publicAccessUsersSessionStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 8744, 5, 1, 2, 0, 4)).setObjects(("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserName"))
if mibBuilder.loadTexts: publicAccessUsersSessionStopTrap.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersSessionStopTrap.setDescription('When a user terminates their session a trap is generated\n                 if the publicAccessUsersSessionTrapEnabled is set to True.')
publicAccessUsersSessionFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 8744, 5, 1, 2, 0, 5)).setObjects(("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserName"))
if mibBuilder.loadTexts: publicAccessUsersSessionFailTrap.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersSessionFailTrap.setDescription('When a user authentication fails a trap is generated\n                 if the publicAccessUsersSessionTrapEnabled is set to True.')
publicAccessUsersLoggedInTrap = NotificationType((1, 3, 6, 1, 4, 1, 8744, 5, 1, 2, 0, 6)).setObjects(("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersCount"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserName"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserStationIpAddress"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserStationMacAddress"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserApMacAddress"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserConnectedInterface"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserSessionDuration"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserBytesReceived"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserBytesSent"))
if mibBuilder.loadTexts: publicAccessUsersLoggedInTrap.setStatus('current')
if mibBuilder.loadTexts: publicAccessUsersLoggedInTrap.setDescription('This is sent when a user is authenticated or periodically\n                 (see publicAccessUSersLoggedInTrapInterval)\n                 if the publicAccessUsersLoggedInTrapEnabled is set to True.')
colubrisPublicAccessMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 1, 3))
colubrisPublicAccessMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 1, 3, 1))
colubrisPublicAccessMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 1, 3, 2))
colubrisPublicAccessMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 8744, 5, 1, 3, 1, 1)).setObjects(("COLUBRIS-PUBLIC-ACCESS-MIB", "colubrisPublicAccessMIBGroup"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "colubrisPublicAccessUserMIBGroup"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "colubrisPublicAccessUserConfigMIBGroup"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "colubrisPublicAccessNotificationGroup"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "colubrisPublicAccessNASPortsMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisPublicAccessMIBCompliance = colubrisPublicAccessMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: colubrisPublicAccessMIBCompliance.setDescription('The compliance statement for entities which implement\n                 the Colubris Public Access MIB.')
colubrisPublicAccessMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 1, 3, 2, 1)).setObjects(("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessStatus"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessStatusChangedCause"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessDeviceUserName"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessDeviceUserPassword"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessDeviceSessionTimeoutAdminStatus"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessDeviceSessionTimeoutOperStatus"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessDeviceConfigMode"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessDeviceAuthenProfileIndex"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessDeviceAccountingEnabled"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessDeviceAccountingProfileIndex"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessDeviceForceReconfiguration"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersMaxCount"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersCount"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersThreshold"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersSessionTrapEnabled"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersLoggedInTrapEnabled"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersLoggedInTrapInterval"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessNASPortCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisPublicAccessMIBGroup = colubrisPublicAccessMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisPublicAccessMIBGroup.setDescription('A collection of objects providing control over the Public\n                 Access MIB.')
colubrisPublicAccessUserMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 1, 3, 2, 2)).setObjects(("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserAuthenType"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserAuthenMode"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserState"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserStationIpAddress"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserName"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserSessionStartTime"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserSessionDuration"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserIdleTime"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserBytesSent"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserBytesReceived"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserPacketsSent"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserPacketsReceived"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserForceDisconnection"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserStationMacAddress"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserApMacAddress"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserGroupName"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserSSID"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserSecurity"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserPHYType"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserVLAN"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserApRadioIndex"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserConfigIndex"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserConnectedInterface"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserBytesSentDropped"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserBytesReceivedDropped"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserPacketsSentDropped"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserPacketsReceivedDropped"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserRateLimitationEnabled"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserMaxTransmitRate"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserMaxReceiveRate"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserBandwidthControlLevel"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUserNASPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisPublicAccessUserMIBGroup = colubrisPublicAccessUserMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisPublicAccessUserMIBGroup.setDescription('A collection of objects providing the Public Access MIB\n                 capability.')
colubrisPublicAccessUserConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 1, 3, 2, 3)).setObjects(("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersConfigAuthenType"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersConfigAuthenMode"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersConfigAuthenProfileIndex"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersConfigAuthenTimeout"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersConfigAccountingEnabled"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersConfigAccountingProfileIndex"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersConfigInterfaceIndex"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersConfigVirtualApProfileIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisPublicAccessUserConfigMIBGroup = colubrisPublicAccessUserConfigMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisPublicAccessUserConfigMIBGroup.setDescription('A collection of objects providing the Public Access user\n                 configuration capability.')
colubrisPublicAccessNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 8744, 5, 1, 3, 2, 4)).setObjects(("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessStatusChangedTrap"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersThresholdTrap"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersSessionStartTrap"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersSessionStopTrap"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersSessionFailTrap"), ("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessUsersLoggedInTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisPublicAccessNotificationGroup = colubrisPublicAccessNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisPublicAccessNotificationGroup.setDescription('A collection of supported notifications.')
colubrisPublicAccessNASPortsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 1, 3, 2, 5)).setObjects(("COLUBRIS-PUBLIC-ACCESS-MIB", "publicAccessNASPortUserName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisPublicAccessNASPortsMIBGroup = colubrisPublicAccessNASPortsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisPublicAccessNASPortsMIBGroup.setDescription('A collection of objects providing the Public Access\n                 NAS Port MIB capability.')
mibBuilder.exportSymbols("COLUBRIS-PUBLIC-ACCESS-MIB", publicAccessDeviceUserName=publicAccessDeviceUserName, publicAccessUsersThresholdTrap=publicAccessUsersThresholdTrap, publicAccessUserSessionDuration=publicAccessUserSessionDuration, publicAccessUsersConfigAuthenTimeout=publicAccessUsersConfigAuthenTimeout, publicAccessMIBNotifications=publicAccessMIBNotifications, publicAccessUserBytesReceived=publicAccessUserBytesReceived, publicAccessUsersConfigAuthenProfileIndex=publicAccessUsersConfigAuthenProfileIndex, publicAccessNASPortEntry=publicAccessNASPortEntry, publicAccessUserPacketsSent=publicAccessUserPacketsSent, publicAccessUserStationMacAddress=publicAccessUserStationMacAddress, publicAccessUserApMacAddress=publicAccessUserApMacAddress, publicAccessUsersConfigAccountingEnabled=publicAccessUsersConfigAccountingEnabled, publicAccessUserStationIpAddress=publicAccessUserStationIpAddress, publicAccessUserPacketsReceived=publicAccessUserPacketsReceived, publicAccessGroup=publicAccessGroup, publicAccessUsersLoggedInTrapInterval=publicAccessUsersLoggedInTrapInterval, publicAccessUsersConfigIndex=publicAccessUsersConfigIndex, colubrisPublicAccessMIBGroups=colubrisPublicAccessMIBGroups, publicAccessNASPortsGroup=publicAccessNASPortsGroup, publicAccessUserBytesSentDropped=publicAccessUserBytesSentDropped, publicAccessUserSessionStartTime=publicAccessUserSessionStartTime, publicAccessUserName=publicAccessUserName, publicAccessUsersCount=publicAccessUsersCount, publicAccessStatusChangedTrap=publicAccessStatusChangedTrap, publicAccessUserPacketsSentDropped=publicAccessUserPacketsSentDropped, colubrisPublicAccessMIBCompliance=colubrisPublicAccessMIBCompliance, publicAccessUserIndex=publicAccessUserIndex, publicAccessUserBytesReceivedDropped=publicAccessUserBytesReceivedDropped, publicAccessUsersSessionTrapEnabled=publicAccessUsersSessionTrapEnabled, publicAccessNASPortIndex=publicAccessNASPortIndex, publicAccessUserRateLimitationEnabled=publicAccessUserRateLimitationEnabled, colubrisPublicAccessNotificationGroup=colubrisPublicAccessNotificationGroup, publicAccessDeviceUserPassword=publicAccessDeviceUserPassword, publicAccessUserPacketsReceivedDropped=publicAccessUserPacketsReceivedDropped, publicAccessUsersThreshold=publicAccessUsersThreshold, publicAccessUsersLoggedInTrap=publicAccessUsersLoggedInTrap, colubrisPublicAccessMIBGroup=colubrisPublicAccessMIBGroup, publicAccessUserGroupName=publicAccessUserGroupName, publicAccessNASPortUserName=publicAccessNASPortUserName, publicAccessUsersGroup=publicAccessUsersGroup, publicAccessUserState=publicAccessUserState, colubrisPublicAccessMIBCompliances=colubrisPublicAccessMIBCompliances, publicAccessUsersSessionStartTrap=publicAccessUsersSessionStartTrap, publicAccessUserMaxReceiveRate=publicAccessUserMaxReceiveRate, publicAccessUserSSID=publicAccessUserSSID, publicAccessUserIdleTime=publicAccessUserIdleTime, colubrisPublicAccessNASPortsMIBGroup=colubrisPublicAccessNASPortsMIBGroup, colubrisPublicAccessUserConfigMIBGroup=colubrisPublicAccessUserConfigMIBGroup, publicAccessStatusChangedCause=publicAccessStatusChangedCause, publicAccessUserConnectedInterface=publicAccessUserConnectedInterface, colubrisPublicAccessUserMIBGroup=colubrisPublicAccessUserMIBGroup, publicAccessUserApRadioIndex=publicAccessUserApRadioIndex, publicAccessDeviceAuthenProfileIndex=publicAccessDeviceAuthenProfileIndex, publicAccessUsersLoggedInTrapEnabled=publicAccessUsersLoggedInTrapEnabled, publicAccessUserMaxTransmitRate=publicAccessUserMaxTransmitRate, publicAccessUserNASPort=publicAccessUserNASPort, publicAccessUserSecurity=publicAccessUserSecurity, publicAccessUsersConfigAuthenType=publicAccessUsersConfigAuthenType, publicAccessUserConfigIndex=publicAccessUserConfigIndex, publicAccessUserPHYType=publicAccessUserPHYType, publicAccessDeviceGroup=publicAccessDeviceGroup, publicAccessUsersSessionStopTrap=publicAccessUsersSessionStopTrap, colubrisPublicAccessMIBObjects=colubrisPublicAccessMIBObjects, publicAccessUsersConfigTable=publicAccessUsersConfigTable, publicAccessUserBytesSent=publicAccessUserBytesSent, publicAccessDeviceSessionTimeoutAdminStatus=publicAccessDeviceSessionTimeoutAdminStatus, publicAccessUsersConfigInterfaceIndex=publicAccessUsersConfigInterfaceIndex, publicAccessUserVLAN=publicAccessUserVLAN, publicAccessUsersSessionFailTrap=publicAccessUsersSessionFailTrap, colubrisPublicAccessMIB=colubrisPublicAccessMIB, publicAccessDeviceSessionTimeoutOperStatus=publicAccessDeviceSessionTimeoutOperStatus, publicAccessUsersConfigAuthenMode=publicAccessUsersConfigAuthenMode, publicAccessUsersMaxCount=publicAccessUsersMaxCount, publicAccessDeviceAccountingProfileIndex=publicAccessDeviceAccountingProfileIndex, publicAccessUserAuthenMode=publicAccessUserAuthenMode, publicAccessStatus=publicAccessStatus, publicAccessUserTable=publicAccessUserTable, publicAccessDeviceConfigMode=publicAccessDeviceConfigMode, publicAccessNASPortCount=publicAccessNASPortCount, PYSNMP_MODULE_ID=colubrisPublicAccessMIB, publicAccessUsersConfigAccountingProfileIndex=publicAccessUsersConfigAccountingProfileIndex, publicAccessNASPortTable=publicAccessNASPortTable, publicAccessUsersConfigEntry=publicAccessUsersConfigEntry, colubrisPublicAccessMIBConformance=colubrisPublicAccessMIBConformance, publicAccessDeviceAccountingEnabled=publicAccessDeviceAccountingEnabled, publicAccessUsersConfigVirtualApProfileIndex=publicAccessUsersConfigVirtualApProfileIndex, publicAccessDeviceForceReconfiguration=publicAccessDeviceForceReconfiguration, publicAccessMIBNotificationPrefix=publicAccessMIBNotificationPrefix, publicAccessUserEntry=publicAccessUserEntry, publicAccessUserForceDisconnection=publicAccessUserForceDisconnection, publicAccessUserBandwidthControlLevel=publicAccessUserBandwidthControlLevel, publicAccessUserAuthenType=publicAccessUserAuthenType)
