#
# PySNMP MIB module COLUBRIS-TOOLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hpmsm/COLUBRIS-TOOLS-MIB.my
# Produced by pysmi-1.1.12 at Tue Dec  3 11:40:58 2024
# On host fv-az842-370 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
colubrisMgmtV2, = mibBuilder.importSymbols("COLUBRIS-SMI", "colubrisMgmtV2")
ColubrisNotificationEnable, = mibBuilder.importSymbols("COLUBRIS-TC", "ColubrisNotificationEnable")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Gauge32, ObjectIdentity, MibIdentifier, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, TimeTicks, Integer32, Counter32, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "ObjectIdentity", "MibIdentifier", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "TimeTicks", "Integer32", "Counter32", "IpAddress", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
colubrisToolsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 8744, 5, 12))
if mibBuilder.loadTexts: colubrisToolsMIB.setLastUpdated('200402200000Z')
if mibBuilder.loadTexts: colubrisToolsMIB.setOrganization('Colubris Networks, Inc.')
if mibBuilder.loadTexts: colubrisToolsMIB.setContactInfo('Colubris Networks\n                     Postal: 200 West Street Ste 300\n                             Waltham, Massachusetts 02451-1121\n                             UNITED STATES\n                     Phone:  +1 781 684 0001\n                     Fax:    +1 781 684 0009\n\n                     E-mail: cn-snmp@colubris.com')
if mibBuilder.loadTexts: colubrisToolsMIB.setDescription('Colubris Networks Tools MIB module.')
colubrisToolsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 12, 1))
traceToolConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 12, 1, 1))
traceInterface = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 12, 1, 1, 1), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceInterface.setStatus('current')
if mibBuilder.loadTexts: traceInterface.setDescription('Specifies the interface to apply the trace to.')
traceCaptureDestination = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceCaptureDestination.setStatus('current')
if mibBuilder.loadTexts: traceCaptureDestination.setDescription("Specifies if the traces shall be stored locally on the device\n                 or remotely on a distant system.\n\n                   'local': Stores the traces locally on the device.\n\n                   'remote': Stores the traces in a remote file specified\n                             by traceCaptureDestinationURL.")
traceCaptureDestinationURL = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 12, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceCaptureDestinationURL.setStatus('current')
if mibBuilder.loadTexts: traceCaptureDestinationURL.setDescription('Specifies the URL of the file that trace data will be sent to.\n                 If a valid URL is not defined, the trace data cannot be sent\n                 and will be discarded.')
traceTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 12, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999)).clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceTimeout.setStatus('current')
if mibBuilder.loadTexts: traceTimeout.setDescription('Specifies the amount of time the trace will capture data.\n                 Once this limit is reached, the trace automatically stops.')
traceNumberOfPackets = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 12, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999)).clone(100)).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceNumberOfPackets.setStatus('current')
if mibBuilder.loadTexts: traceNumberOfPackets.setDescription('Specifies the maximum number of packets (IP datagrams) the\n                 trace should capture. Once this limit is reached, the trace\n                 automatically stops.')
tracePacketSize = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 12, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(68, 4096)).clone(128)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tracePacketSize.setStatus('current')
if mibBuilder.loadTexts: tracePacketSize.setDescription('Specifies the maximum number of bytes to capture for each\n                 packet. The remaining data is discarded.')
traceCaptureFilter = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 12, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceCaptureFilter.setStatus('current')
if mibBuilder.loadTexts: traceCaptureFilter.setDescription('Specifies the packet filter to use to capture data.\n                 The filter expression has the same format and behavior\n                 as the expression parameter used by the well-known\n                 TCPDUMP command.')
traceCaptureStatus = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2))).clone('stop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceCaptureStatus.setStatus('current')
if mibBuilder.loadTexts: traceCaptureStatus.setDescription("IP Trace tool action trigger.\n\n                   'stop': Stops the trace tool from functioning. If any\n                           capture was previously started it will end up.\n                           if no capture was started, 'stop' has no effect.\n\n                   'start': Starts to capture the packets following the\n                            critera specified in the management tool and\n                            in this MIB.")
traceNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 12, 1, 1, 9), ColubrisNotificationEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: traceNotificationEnabled.setDescription('Specifies if IP trace notifications are generated.')
colubrisToolsMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 12, 2))
colubrisToolsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 12, 2, 0))
traceStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 8744, 5, 12, 2, 0, 1)).setObjects(("COLUBRIS-TOOLS-MIB", "traceCaptureStatus"))
if mibBuilder.loadTexts: traceStatusNotification.setStatus('current')
if mibBuilder.loadTexts: traceStatusNotification.setDescription('Sent when the user triggers the IP Trace tool either by starting\n                 a new trace or stopping an existing session.')
colubrisToolsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 12, 3))
colubrisToolsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 12, 3, 1))
colubrisToolsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 12, 3, 2))
colubrisToolsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 8744, 5, 12, 3, 1, 1)).setObjects(("COLUBRIS-TOOLS-MIB", "colubrisToolsMIBGroup"), ("COLUBRIS-TOOLS-MIB", "colubrisToolsNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisToolsMIBCompliance = colubrisToolsMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: colubrisToolsMIBCompliance.setDescription('The compliance statement for entities which implement\n                 the Colubris Networks Tools MIB.')
colubrisToolsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 12, 3, 2, 1)).setObjects(("COLUBRIS-TOOLS-MIB", "traceInterface"), ("COLUBRIS-TOOLS-MIB", "traceCaptureDestination"), ("COLUBRIS-TOOLS-MIB", "traceCaptureDestinationURL"), ("COLUBRIS-TOOLS-MIB", "traceTimeout"), ("COLUBRIS-TOOLS-MIB", "traceNumberOfPackets"), ("COLUBRIS-TOOLS-MIB", "tracePacketSize"), ("COLUBRIS-TOOLS-MIB", "traceCaptureFilter"), ("COLUBRIS-TOOLS-MIB", "traceCaptureStatus"), ("COLUBRIS-TOOLS-MIB", "traceNotificationEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisToolsMIBGroup = colubrisToolsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisToolsMIBGroup.setDescription('A collection of objects providing the Tools MIB capability.')
colubrisToolsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 8744, 5, 12, 3, 2, 2)).setObjects(("COLUBRIS-TOOLS-MIB", "traceStatusNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisToolsNotificationGroup = colubrisToolsNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisToolsNotificationGroup.setDescription('A collection of supported notifications.')
mibBuilder.exportSymbols("COLUBRIS-TOOLS-MIB", traceStatusNotification=traceStatusNotification, colubrisToolsMIBCompliances=colubrisToolsMIBCompliances, traceNumberOfPackets=traceNumberOfPackets, colubrisToolsMIBNotifications=colubrisToolsMIBNotifications, traceInterface=traceInterface, PYSNMP_MODULE_ID=colubrisToolsMIB, traceCaptureDestinationURL=traceCaptureDestinationURL, colubrisToolsMIBGroup=colubrisToolsMIBGroup, colubrisToolsMIBGroups=colubrisToolsMIBGroups, traceNotificationEnabled=traceNotificationEnabled, colubrisToolsMIB=colubrisToolsMIB, traceTimeout=traceTimeout, colubrisToolsMIBNotificationPrefix=colubrisToolsMIBNotificationPrefix, colubrisToolsMIBCompliance=colubrisToolsMIBCompliance, colubrisToolsMIBObjects=colubrisToolsMIBObjects, traceCaptureStatus=traceCaptureStatus, colubrisToolsNotificationGroup=colubrisToolsNotificationGroup, colubrisToolsMIBConformance=colubrisToolsMIBConformance, tracePacketSize=tracePacketSize, traceCaptureDestination=traceCaptureDestination, traceToolConfig=traceToolConfig, traceCaptureFilter=traceCaptureFilter)
