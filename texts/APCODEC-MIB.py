#
# PySNMP MIB module APCODEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/oracle/APCODEC-MIB
# Produced by pysmi-1.1.12 at Mon Oct  7 02:30:34 2024
# On host fv-az1986-495 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
ApPercentage, = mibBuilder.importSymbols("ACMEPACKET-TC", "ApPercentage")
apSigRealmStatsEntry, = mibBuilder.importSymbols("APSYSMGMT-MIB", "apSigRealmStatsEntry")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Integer32, Gauge32, NotificationType, Unsigned32, Counter32, Counter64, ModuleIdentity, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "Gauge32", "NotificationType", "Unsigned32", "Counter32", "Counter64", "ModuleIdentity", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "TimeTicks")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
apCodecModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 7))
apCodecModule.setRevisions(('2012-07-16 00:00', '2012-06-22 10:00', '2014-06-26 00:00', '2017-11-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apCodecModule.setRevisionsDescriptions(('Updated contact information.', ' adding global transcoding stats', 'Updated Organization and Contact info.', 'Added new MIB definitions for TCU Load Statistics.',))
if mibBuilder.loadTexts: apCodecModule.setLastUpdated('201711240000Z')
if mibBuilder.loadTexts: apCodecModule.setOrganization('Oracle Communications')
if mibBuilder.loadTexts: apCodecModule.setContactInfo('           \tCustomer Service\n\t\t \tPostal:\t\tOracle Communications\n\t\t\t\t\t100 Crosby Drive \n\t\t\t\t\tBedford, MA 01730\n\t\t\t\t\tUS\n\t\t    \tTel:\t\t1-800-633-0738\n\t\t\tUrl:\t\twww.oracle.com\n\t\t \tE-mail:\t\tsupport@oracle.com')
if mibBuilder.loadTexts: apCodecModule.setDescription('The codec and transcoding MIB for Oracle Communications Acme Packet SBCs')
apCodecMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1))
apCodecRealmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1), )
if mibBuilder.loadTexts: apCodecRealmStatsTable.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsTable.setDescription('The table of codec statistics per-realm.  The table provides\n\t\tadditional statistics augmenting the apSigRealmStatsTable.')
apCodecRealmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1), )
apSigRealmStatsEntry.registerAugmentions(("APCODEC-MIB", "apCodecRealmStatsEntry"))
apCodecRealmStatsEntry.setIndexNames(*apSigRealmStatsEntry.getIndexNames())
if mibBuilder.loadTexts: apCodecRealmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsEntry.setDescription('Additional per-realm statistics for codecs')
apCodecRealmCountOther = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountOther.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountOther.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to a codec not defined in this table.')
apCodecRealmCountPCMU = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountPCMU.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountPCMU.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the PCMU codec.')
apCodecRealmCountPCMA = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountPCMA.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountPCMA.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the PCMA codec.')
apCodecRealmCountG722 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG722.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG722.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the G722 codec.')
apCodecRealmCountG723 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG723.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG723.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the G723 codec.')
apCodecRealmCountG726_16 = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 6), Counter32()).setLabel("apCodecRealmCountG726-16").setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG726_16.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG726_16.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the G726-16 codec.')
apCodecRealmCountG726_24 = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 7), Counter32()).setLabel("apCodecRealmCountG726-24").setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG726_24.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG726_24.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the G726-24 codec.')
apCodecRealmCountG726_32 = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 8), Counter32()).setLabel("apCodecRealmCountG726-32").setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG726_32.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG726_32.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the G726-32 codec.')
apCodecRealmCountG726_40 = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 9), Counter32()).setLabel("apCodecRealmCountG726-40").setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG726_40.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG726_40.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the G726-40 codec.')
apCodecRealmCountG728 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG728.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG728.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the G728 codec.')
apCodecRealmCountG729 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG729.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG729.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the G729 codec.')
apCodecRealmCountGSM = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountGSM.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountGSM.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the GSM codec.')
apCodecRealmCountILBC = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountILBC.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountILBC.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the iLBC codec.')
apCodecRealmCountAMR = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountAMR.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountAMR.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the AMR codec.')
apCodecRealmCountEVRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountEVRC.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountEVRC.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the EVRC codec.')
apCodecRealmCountH261 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountH261.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountH261.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the H261 codec.')
apCodecRealmCountH263 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountH263.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountH263.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the H263 codec.')
apCodecRealmCountT38 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountT38.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountT38.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the T.38 codec.')
apCodecRealmCountAMRWB = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountAMRWB.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountAMRWB.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the AMR-WB codec.')
apCodecRealmCountEVRC0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountEVRC0.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountEVRC0.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the EVRC0 codec.')
apCodecRealmCountEVRC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountEVRC1.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountEVRC1.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the EVRC1 codec.')
apCodecRealmCountEVRCB = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountEVRCB.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountEVRCB.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the EVRCB codec.')
apCodecRealmCountEVRCB0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountEVRCB0.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountEVRCB0.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the EVRCB0 codec.')
apCodecRealmCountEVRCB1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountEVRCB1.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountEVRCB1.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the EVRCB1 codec.')
apCodecRealmCountOPUS = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountOPUS.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountOPUS.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the Opus codec.')
apCodecRealmCountSILK = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountSILK.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountSILK.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the SILK codec.')
apCodecRealmCountT140 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountT140.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountT140.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the T140 codec.')
apCodecRealmCountBAUDOT = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountBAUDOT.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountBAUDOT.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the BAUDOT codec.')
apCodecRealmCountH264 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountH264.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountH264.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the H264 codec.')
apCodecRealmCountEVRCNW = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountEVRCNW.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountEVRCNW.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the EVRCNW codec.')
apCodecRealmCountEVRCNW0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountEVRCNW0.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountEVRCNW0.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the EVRCNW0 codec.')
apCodecRealmCountEVRCNW1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountEVRCNW1.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountEVRCNW1.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the EVRCNW1 codec.')
apCodecRealmCountEVS = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountEVS.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountEVS.setDescription('The count of SDP media streams received in the realm\n\t\twhich negotiated to the EVS codec.')
apCodecTranscodingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2))
apCodecTranscodingRealmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 1), )
if mibBuilder.loadTexts: apCodecTranscodingRealmStatsTable.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingRealmStatsTable.setDescription('The table of transcoding statistics per-realm.  The table\n\t\tprovides additional statistics augmenting the\n\t\tapSigRealmStatsTable.')
apCodecTranscodingRealmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 1, 1), )
apSigRealmStatsEntry.registerAugmentions(("APCODEC-MIB", "apCodecTranscodingRealmStatsEntry"))
apCodecTranscodingRealmStatsEntry.setIndexNames(*apSigRealmStatsEntry.getIndexNames())
if mibBuilder.loadTexts: apCodecTranscodingRealmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingRealmStatsEntry.setDescription('Additional per-realm statistics for transcoding')
apCodecRealmSessionsTransparent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmSessionsTransparent.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmSessionsTransparent.setDescription('Number of sessions in the realm that did not use any\n\t\tDSP resources for transcoding or transrating.')
apCodecRealmSessionsTransrated = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmSessionsTransrated.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmSessionsTransrated.setDescription('Number of sessions in the realm that had a common\n\t\tcodec but used DSP resources to modify packetizaton rate.')
apCodecRealmSessionsTranscoded = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmSessionsTranscoded.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmSessionsTranscoded.setDescription('Number of sessions in the realm that had used DSP\n\t\tresources to transcode between codecs.')
class ApCodecDigitTypes(TextualConvention, Integer32):
    description = 'Digit types in codec transcoding'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 0), ("none", 1), ("inband", 2), ("rfc2833", 3), ("noneDual", 4), ("inbandTrans", 5), ("inbandDual", 6), ("rfc2833Trans", 7), ("rfc2833Dual", 8))

apCodecTranscodingResourceMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 2))
apCodecTranscodingResourcesTotal = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingResourcesTotal.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingResourcesTotal.setDescription('Total number of transcoding resources.')
apCodecTranscodingResourcesCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingResourcesCurrent.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingResourcesCurrent.setDescription('Number of transcoding resources currently in-use.')
apCodecTranscodingResourcesHigh = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingResourcesHigh.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingResourcesHigh.setDescription('The highest number of transcoding resources in-use in the past.')
apCodecTranscodingInUsePercentCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 2, 4), ApPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingInUsePercentCurrent.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingInUsePercentCurrent.setDescription('The percentage of transcoding resources currently in-use. \n\t\tThe algorithm considers actual resources the current codec transcoding consumed.')
apCodecTranscodingInUsePercentHigh = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 2, 5), ApPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingInUsePercentHigh.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingInUsePercentHigh.setDescription('The highest percentage number of transcoding resources in-use in the past.')
apCodecTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 3), )
if mibBuilder.loadTexts: apCodecTable.setStatus('current')
if mibBuilder.loadTexts: apCodecTable.setDescription('The table of supported codecs.')
apCodecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 3, 1), ).setIndexNames((0, "APCODEC-MIB", "apCodecIndex"))
if mibBuilder.loadTexts: apCodecEntry.setStatus('current')
if mibBuilder.loadTexts: apCodecEntry.setDescription('supported codec.')
apCodecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: apCodecIndex.setStatus('current')
if mibBuilder.loadTexts: apCodecIndex.setDescription('An integer for the sole purpose of indexing the codec entry.')
apCodecName = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecName.setStatus('current')
if mibBuilder.loadTexts: apCodecName.setDescription('The codec name.')
apCodecPairStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4), )
if mibBuilder.loadTexts: apCodecPairStatsTable.setStatus('current')
if mibBuilder.loadTexts: apCodecPairStatsTable.setDescription('The table of codec-pairs being supported.')
apCodecPairStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1), ).setIndexNames((0, "APCODEC-MIB", "apCodecPairAIndex"), (0, "APCODEC-MIB", "apCodecPairBIndex"), (0, "APCODEC-MIB", "apCodecPairAPValue"), (0, "APCODEC-MIB", "apCodecPairBPValue"), (0, "APCODEC-MIB", "apCodecPairADigitType"), (0, "APCODEC-MIB", "apCodecPairBDigitType"))
if mibBuilder.loadTexts: apCodecPairStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apCodecPairStatsEntry.setDescription('statistics per transcoding codec pair. In a codec pair, \n\t\tthe transcoding is two directional. To avoid duplication, \n\t\tthe rule is that the end point A is the one with \n\t\tsmaller or equal apCodecIndex.')
apCodecPairAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: apCodecPairAIndex.setStatus('current')
if mibBuilder.loadTexts: apCodecPairAIndex.setDescription('The index of the first codec in the pair.')
apCodecPairBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: apCodecPairBIndex.setStatus('current')
if mibBuilder.loadTexts: apCodecPairBIndex.setDescription('The index of the second codec in the pair.')
apCodecPairAPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: apCodecPairAPValue.setStatus('current')
if mibBuilder.loadTexts: apCodecPairAPValue.setDescription('The p value in the end point A. A value of zero\n\t    indicates the value is not provided.')
apCodecPairBPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: apCodecPairBPValue.setStatus('current')
if mibBuilder.loadTexts: apCodecPairBPValue.setDescription('The p value in the end point B. A value of zero\n\t    indicates the value is not provided.')
apCodecPairADigitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 5), ApCodecDigitTypes())
if mibBuilder.loadTexts: apCodecPairADigitType.setStatus('current')
if mibBuilder.loadTexts: apCodecPairADigitType.setDescription('The digit type index in the end point A.')
apCodecPairBDigitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 6), ApCodecDigitTypes())
if mibBuilder.loadTexts: apCodecPairBDigitType.setStatus('current')
if mibBuilder.loadTexts: apCodecPairBDigitType.setDescription('The digit type index in the end point B.')
apCodecPairTranscodingCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecPairTranscodingCurrent.setStatus('current')
if mibBuilder.loadTexts: apCodecPairTranscodingCurrent.setDescription('The number of transcodings for this codec-pair current in process.')
apCodecPairTranscodingHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecPairTranscodingHigh.setStatus('current')
if mibBuilder.loadTexts: apCodecPairTranscodingHigh.setDescription('The highest number of transcodings for this codec-pair in the past.')
apCodecTranscodingResourceUtilMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 5))
apCodecTranscodingLicensedTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingLicensedTotalSessions.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingLicensedTotalSessions.setDescription('Total number of active transcoded sessions')
apCodecTranscodingLicensedAMRSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingLicensedAMRSessions.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingLicensedAMRSessions.setDescription('Number of licensed AMR codec sessions')
apCodecTranscodingLicensedAMRWBSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingLicensedAMRWBSessions.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingLicensedAMRWBSessions.setDescription('Number of licensed AMR-WB codec sessions')
apCodecTranscodingLicensedEVRCSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingLicensedEVRCSessions.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingLicensedEVRCSessions.setDescription('Number of licensed EVRC codec sessions')
apCodecTranscodingLicensedEVRCBSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingLicensedEVRCBSessions.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingLicensedEVRCBSessions.setDescription('Number of licensed EVRCB codec sessions')
apCodecTranscodingLicensedOPUSSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 5, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingLicensedOPUSSessions.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingLicensedOPUSSessions.setDescription('Number of licensed OPUS codec sessions')
apCodecTranscodingLicensedSILKSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 5, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingLicensedSILKSessions.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingLicensedSILKSessions.setDescription('Number of licensed SILK codec sessions')
apCodecTranscodingLicensedEVSSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 5, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingLicensedEVSSessions.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingLicensedEVSSessions.setDescription('Number of licensed EVS codec sessions')
apCodecTranscodingDSPMIPSProtection = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 5, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingDSPMIPSProtection.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingDSPMIPSProtection.setDescription('Indication whether DSP MIPS protection is active or not')
apCodecTranscodingTCULoadStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 6), )
if mibBuilder.loadTexts: apCodecTranscodingTCULoadStatsTable.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingTCULoadStatsTable.setDescription('Transcoding module (TCM) load both in number of \n             sessions and percent loading')
apCodecTranscodingTCULoadStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 6, 1), ).setIndexNames((0, "APCODEC-MIB", "apCodecTranscodingTCUIndex"), (0, "APCODEC-MIB", "apCodecTranscodingTCMIndex"), (0, "APCODEC-MIB", "apCodecTranscodingDSPIndex"))
if mibBuilder.loadTexts: apCodecTranscodingTCULoadStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingTCULoadStatsEntry.setDescription('A table entry designed to hold Transcoding module (TCM) load')
apCodecTranscodingTCUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: apCodecTranscodingTCUIndex.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingTCUIndex.setDescription('An integer for the sole purpose of indexing the TCU in a system. \n             This index is persistent across reboots and therefore \n             may not necessarily be continuous')
apCodecTranscodingTCMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: apCodecTranscodingTCMIndex.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingTCMIndex.setDescription('An integer for the sole purpose of indexing the TCM within a TCU. \n             This index is persistent across reboots and therefore \n             may not necessarily be continuous')
apCodecTranscodingDSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: apCodecTranscodingDSPIndex.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingDSPIndex.setDescription('An integer for the sole purpose of indexing a DSP within a TCM. \n             This index is persistent across reboots and therefore \n             may not necessarily be continuous')
apCodecTranscodingSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingSessionCount.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingSessionCount.setDescription('Total number of sessions for a DSP')
apCodecTranscodingCurrentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 6, 1, 5), Gauge32()).setUnits('one hundredth').setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingCurrentLoad.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingCurrentLoad.setDescription('Current load in percentage for a DSP')
apCodecTranscodingPeakLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 6, 1, 6), Gauge32()).setUnits('one hundredth').setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingPeakLoad.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingPeakLoad.setDescription('Peak load in percentage for a DSP')
apCodecTranscodingDSPOverloaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 6, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingDSPOverloaded.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingDSPOverloaded.setDescription('Indication whether the DSP is overloaded or not')
apCodecNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 3))
apCodecNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 4))
apCodecNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 4, 0))
apCodecConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5))
apCodecCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 1))
apCodecGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2))
apCodecNotificationsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 3))
apCodecRealmStatsObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 1)).setObjects(("APCODEC-MIB", "apCodecRealmCountOther"), ("APCODEC-MIB", "apCodecRealmCountPCMU"), ("APCODEC-MIB", "apCodecRealmCountPCMA"), ("APCODEC-MIB", "apCodecRealmCountG722"), ("APCODEC-MIB", "apCodecRealmCountG723"), ("APCODEC-MIB", "apCodecRealmCountG726_16"), ("APCODEC-MIB", "apCodecRealmCountG726_24"), ("APCODEC-MIB", "apCodecRealmCountG726_32"), ("APCODEC-MIB", "apCodecRealmCountG726_40"), ("APCODEC-MIB", "apCodecRealmCountG728"), ("APCODEC-MIB", "apCodecRealmCountG729"), ("APCODEC-MIB", "apCodecRealmCountGSM"), ("APCODEC-MIB", "apCodecRealmCountILBC"), ("APCODEC-MIB", "apCodecRealmCountH261"), ("APCODEC-MIB", "apCodecRealmCountH263"), ("APCODEC-MIB", "apCodecRealmCountT38"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecRealmStatsObjectsGroup = apCodecRealmStatsObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsObjectsGroup.setDescription('A collection of objects providing realm codec statistics')
apCodecMediaProcessingObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 2)).setObjects(("APCODEC-MIB", "apCodecRealmSessionsTransparent"), ("APCODEC-MIB", "apCodecRealmSessionsTransrated"), ("APCODEC-MIB", "apCodecRealmSessionsTranscoded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecMediaProcessingObjectsGroup = apCodecMediaProcessingObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apCodecMediaProcessingObjectsGroup.setDescription('A collection of objects providing realm transcoding statistics')
apCodecRealmStatsObjectsGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 3)).setObjects(("APCODEC-MIB", "apCodecRealmCountAMR"), ("APCODEC-MIB", "apCodecRealmCountEVRC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecRealmStatsObjectsGroup2 = apCodecRealmStatsObjectsGroup2.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsObjectsGroup2.setDescription('A collection of objects providing additional realm codec statistics')
apCodecTranscodingStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 4)).setObjects(("APCODEC-MIB", "apCodecTranscodingResourcesTotal"), ("APCODEC-MIB", "apCodecTranscodingResourcesCurrent"), ("APCODEC-MIB", "apCodecTranscodingResourcesHigh"), ("APCODEC-MIB", "apCodecTranscodingInUsePercentCurrent"), ("APCODEC-MIB", "apCodecTranscodingInUsePercentHigh"), ("APCODEC-MIB", "apCodecName"), ("APCODEC-MIB", "apCodecPairTranscodingCurrent"), ("APCODEC-MIB", "apCodecPairTranscodingHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecTranscodingStatsGroup = apCodecTranscodingStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingStatsGroup.setDescription('A collection of objects providing additional codec statistics')
apCodecRealmStatsObjectsGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 5)).setObjects(("APCODEC-MIB", "apCodecRealmCountAMRWB"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecRealmStatsObjectsGroup3 = apCodecRealmStatsObjectsGroup3.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsObjectsGroup3.setDescription('A collection of objects providing additional realm codec statistics')
apCodecRealmStatsObjectsGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 6)).setObjects(("APCODEC-MIB", "apCodecRealmCountEVRC0"), ("APCODEC-MIB", "apCodecRealmCountEVRC1"), ("APCODEC-MIB", "apCodecRealmCountEVRCB"), ("APCODEC-MIB", "apCodecRealmCountEVRCB0"), ("APCODEC-MIB", "apCodecRealmCountEVRCB1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecRealmStatsObjectsGroup4 = apCodecRealmStatsObjectsGroup4.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsObjectsGroup4.setDescription('A collection of objects providing additional realm codec statistics')
apCodecRealmStatsObjectsGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 7)).setObjects(("APCODEC-MIB", "apCodecRealmCountOPUS"), ("APCODEC-MIB", "apCodecRealmCountSILK"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecRealmStatsObjectsGroup5 = apCodecRealmStatsObjectsGroup5.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsObjectsGroup5.setDescription('A collection of objects providing additional realm codec statistics')
apCodecRealmStatsObjectsGroup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 8)).setObjects(("APCODEC-MIB", "apCodecRealmCountT140"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecRealmStatsObjectsGroup6 = apCodecRealmStatsObjectsGroup6.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsObjectsGroup6.setDescription('A collection of objects providing additional realm codec statistics')
apCodecRealmStatsObjectsGroup7 = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 9)).setObjects(("APCODEC-MIB", "apCodecRealmCountBAUDOT"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecRealmStatsObjectsGroup7 = apCodecRealmStatsObjectsGroup7.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsObjectsGroup7.setDescription('A collection of objects providing additional realm codec statistics')
apCodecRealmStatsObjectsGroup8 = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 10)).setObjects(("APCODEC-MIB", "apCodecRealmCountH264"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecRealmStatsObjectsGroup8 = apCodecRealmStatsObjectsGroup8.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsObjectsGroup8.setDescription('A collection of objects providing additional realm codec statistics')
apCodecRealmStatsObjectsGroup9 = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 11)).setObjects(("APCODEC-MIB", "apCodecRealmCountEVRCNW"), ("APCODEC-MIB", "apCodecRealmCountEVRCNW0"), ("APCODEC-MIB", "apCodecRealmCountEVRCNW1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecRealmStatsObjectsGroup9 = apCodecRealmStatsObjectsGroup9.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsObjectsGroup9.setDescription('A collection of objects providing additional realm codec statistics')
apCodecRealmStatsObjectsGroup10 = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 12)).setObjects(("APCODEC-MIB", "apCodecRealmCountEVS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecRealmStatsObjectsGroup10 = apCodecRealmStatsObjectsGroup10.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsObjectsGroup10.setDescription('A collection of objects providing additional realm codec statistics')
apCodecTranscodingResourceUtilMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 13)).setObjects(("APCODEC-MIB", "apCodecTranscodingLicensedTotalSessions"), ("APCODEC-MIB", "apCodecTranscodingLicensedAMRSessions"), ("APCODEC-MIB", "apCodecTranscodingLicensedAMRWBSessions"), ("APCODEC-MIB", "apCodecTranscodingLicensedEVRCSessions"), ("APCODEC-MIB", "apCodecTranscodingLicensedEVRCBSessions"), ("APCODEC-MIB", "apCodecTranscodingLicensedOPUSSessions"), ("APCODEC-MIB", "apCodecTranscodingLicensedSILKSessions"), ("APCODEC-MIB", "apCodecTranscodingLicensedEVSSessions"), ("APCODEC-MIB", "apCodecTranscodingDSPMIPSProtection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecTranscodingResourceUtilMIBGroup = apCodecTranscodingResourceUtilMIBGroup.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingResourceUtilMIBGroup.setDescription('A collection of objects providing active transcoded sessions\n                 information for the different licensed codecs')
apCodecTranscodingTCULoadStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 14)).setObjects(("APCODEC-MIB", "apCodecTranscodingSessionCount"), ("APCODEC-MIB", "apCodecTranscodingCurrentLoad"), ("APCODEC-MIB", "apCodecTranscodingPeakLoad"), ("APCODEC-MIB", "apCodecTranscodingDSPOverloaded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecTranscodingTCULoadStatsGroup = apCodecTranscodingTCULoadStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingTCULoadStatsGroup.setDescription('A collection of objects providing the \n                 transcoding module load')
mibBuilder.exportSymbols("APCODEC-MIB", apCodecRealmCountEVRC=apCodecRealmCountEVRC, apCodecPairStatsTable=apCodecPairStatsTable, apCodecMIBObjects=apCodecMIBObjects, apCodecRealmStatsEntry=apCodecRealmStatsEntry, apCodecTranscodingLicensedEVRCBSessions=apCodecTranscodingLicensedEVRCBSessions, apCodecRealmStatsObjectsGroup4=apCodecRealmStatsObjectsGroup4, apCodecRealmSessionsTransrated=apCodecRealmSessionsTransrated, apCodecRealmCountSILK=apCodecRealmCountSILK, apCodecTranscodingResourceMIBObjects=apCodecTranscodingResourceMIBObjects, ApCodecDigitTypes=ApCodecDigitTypes, apCodecRealmSessionsTransparent=apCodecRealmSessionsTransparent, apCodecPairStatsEntry=apCodecPairStatsEntry, apCodecTranscodingTCULoadStatsGroup=apCodecTranscodingTCULoadStatsGroup, apCodecRealmSessionsTranscoded=apCodecRealmSessionsTranscoded, apCodecRealmCountT140=apCodecRealmCountT140, apCodecRealmCountBAUDOT=apCodecRealmCountBAUDOT, apCodecRealmCountH263=apCodecRealmCountH263, apCodecRealmStatsObjectsGroup6=apCodecRealmStatsObjectsGroup6, apCodecRealmStatsObjectsGroup5=apCodecRealmStatsObjectsGroup5, PYSNMP_MODULE_ID=apCodecModule, apCodecTranscodingResourceUtilMIBObjects=apCodecTranscodingResourceUtilMIBObjects, apCodecRealmCountILBC=apCodecRealmCountILBC, apCodecTranscodingTCULoadStatsEntry=apCodecTranscodingTCULoadStatsEntry, apCodecTranscodingTCMIndex=apCodecTranscodingTCMIndex, apCodecTranscodingInUsePercentHigh=apCodecTranscodingInUsePercentHigh, apCodecTranscodingDSPOverloaded=apCodecTranscodingDSPOverloaded, apCodecRealmStatsObjectsGroup10=apCodecRealmStatsObjectsGroup10, apCodecTranscodingDSPIndex=apCodecTranscodingDSPIndex, apCodecRealmCountEVRCNW=apCodecRealmCountEVRCNW, apCodecModule=apCodecModule, apCodecPairAIndex=apCodecPairAIndex, apCodecRealmCountAMR=apCodecRealmCountAMR, apCodecRealmStatsObjectsGroup3=apCodecRealmStatsObjectsGroup3, apCodecCompliances=apCodecCompliances, apCodecPairTranscodingCurrent=apCodecPairTranscodingCurrent, apCodecRealmCountAMRWB=apCodecRealmCountAMRWB, apCodecTranscodingPeakLoad=apCodecTranscodingPeakLoad, apCodecTranscodingRealmStatsEntry=apCodecTranscodingRealmStatsEntry, apCodecEntry=apCodecEntry, apCodecRealmCountGSM=apCodecRealmCountGSM, apCodecRealmCountEVRC1=apCodecRealmCountEVRC1, apCodecNotifications=apCodecNotifications, apCodecMediaProcessingObjectsGroup=apCodecMediaProcessingObjectsGroup, apCodecRealmCountEVRC0=apCodecRealmCountEVRC0, apCodecTranscodingMIBObjects=apCodecTranscodingMIBObjects, apCodecTranscodingDSPMIPSProtection=apCodecTranscodingDSPMIPSProtection, apCodecPairBDigitType=apCodecPairBDigitType, apCodecPairADigitType=apCodecPairADigitType, apCodecIndex=apCodecIndex, apCodecConformance=apCodecConformance, apCodecTranscodingLicensedEVSSessions=apCodecTranscodingLicensedEVSSessions, apCodecRealmCountG723=apCodecRealmCountG723, apCodecTranscodingInUsePercentCurrent=apCodecTranscodingInUsePercentCurrent, apCodecRealmStatsTable=apCodecRealmStatsTable, apCodecRealmCountG729=apCodecRealmCountG729, apCodecNotificationsGroups=apCodecNotificationsGroups, apCodecRealmCountEVRCB0=apCodecRealmCountEVRCB0, apCodecTranscodingResourcesCurrent=apCodecTranscodingResourcesCurrent, apCodecPairTranscodingHigh=apCodecPairTranscodingHigh, apCodecTranscodingLicensedEVRCSessions=apCodecTranscodingLicensedEVRCSessions, apCodecRealmCountG726_24=apCodecRealmCountG726_24, apCodecNotificationPrefix=apCodecNotificationPrefix, apCodecTranscodingStatsGroup=apCodecTranscodingStatsGroup, apCodecRealmCountEVRCNW0=apCodecRealmCountEVRCNW0, apCodecRealmCountEVRCB1=apCodecRealmCountEVRCB1, apCodecRealmCountPCMU=apCodecRealmCountPCMU, apCodecGroups=apCodecGroups, apCodecRealmCountH264=apCodecRealmCountH264, apCodecTranscodingLicensedOPUSSessions=apCodecTranscodingLicensedOPUSSessions, apCodecNotificationObjects=apCodecNotificationObjects, apCodecRealmCountG722=apCodecRealmCountG722, apCodecTranscodingLicensedSILKSessions=apCodecTranscodingLicensedSILKSessions, apCodecRealmStatsObjectsGroup9=apCodecRealmStatsObjectsGroup9, apCodecTranscodingTCULoadStatsTable=apCodecTranscodingTCULoadStatsTable, apCodecRealmCountOther=apCodecRealmCountOther, apCodecTranscodingResourcesTotal=apCodecTranscodingResourcesTotal, apCodecPairBIndex=apCodecPairBIndex, apCodecRealmStatsObjectsGroup=apCodecRealmStatsObjectsGroup, apCodecTranscodingSessionCount=apCodecTranscodingSessionCount, apCodecTable=apCodecTable, apCodecPairAPValue=apCodecPairAPValue, apCodecTranscodingLicensedTotalSessions=apCodecTranscodingLicensedTotalSessions, apCodecRealmCountG726_16=apCodecRealmCountG726_16, apCodecRealmCountH261=apCodecRealmCountH261, apCodecRealmCountEVRCB=apCodecRealmCountEVRCB, apCodecTranscodingResourcesHigh=apCodecTranscodingResourcesHigh, apCodecRealmCountG728=apCodecRealmCountG728, apCodecRealmCountG726_32=apCodecRealmCountG726_32, apCodecTranscodingLicensedAMRSessions=apCodecTranscodingLicensedAMRSessions, apCodecRealmCountEVRCNW1=apCodecRealmCountEVRCNW1, apCodecTranscodingRealmStatsTable=apCodecTranscodingRealmStatsTable, apCodecPairBPValue=apCodecPairBPValue, apCodecTranscodingCurrentLoad=apCodecTranscodingCurrentLoad, apCodecRealmStatsObjectsGroup7=apCodecRealmStatsObjectsGroup7, apCodecTranscodingTCUIndex=apCodecTranscodingTCUIndex, apCodecRealmCountPCMA=apCodecRealmCountPCMA, apCodecRealmCountT38=apCodecRealmCountT38, apCodecTranscodingResourceUtilMIBGroup=apCodecTranscodingResourceUtilMIBGroup, apCodecTranscodingLicensedAMRWBSessions=apCodecTranscodingLicensedAMRWBSessions, apCodecName=apCodecName, apCodecRealmStatsObjectsGroup2=apCodecRealmStatsObjectsGroup2, apCodecRealmStatsObjectsGroup8=apCodecRealmStatsObjectsGroup8, apCodecRealmCountOPUS=apCodecRealmCountOPUS, apCodecRealmCountEVS=apCodecRealmCountEVS, apCodecRealmCountG726_40=apCodecRealmCountG726_40)
