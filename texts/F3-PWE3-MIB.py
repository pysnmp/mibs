#
# PySNMP MIB module F3-PWE3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-PWE3-MIB
# Produced by pysmi-1.1.12 at Tue Jun 18 01:35:36 2024
# On host fv-az1446-447 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
IpVersion, PerfCounter64, VlanId, CmPmBinAction, CmPmIntervalType, IpPriorityMapMode, VlanPriority, AdminState, SecondaryState, OperationalState = mibBuilder.importSymbols("CM-COMMON-MIB", "IpVersion", "PerfCounter64", "VlanId", "CmPmBinAction", "CmPmIntervalType", "IpPriorityMapMode", "VlanPriority", "AdminState", "SecondaryState", "OperationalState")
neIndex, shelfIndex, slotIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "neIndex", "shelfIndex", "slotIndex")
cmEthernetAccPortIndex, cmEthernetNetPortIndex = mibBuilder.importSymbols("CM-FACILITY-MIB", "cmEthernetAccPortIndex", "cmEthernetNetPortIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, ObjectIdentity, TimeTicks, Unsigned32, Gauge32, MibIdentifier, IpAddress, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "TimeTicks", "Unsigned32", "Gauge32", "MibIdentifier", "IpAddress", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "Bits", "Counter32")
TextualConvention, VariablePointer, DateAndTime, TruthValue, RowStatus, StorageType, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "VariablePointer", "DateAndTime", "TruthValue", "RowStatus", "StorageType", "DisplayString", "MacAddress")
f3Pwe3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19))
f3Pwe3MIB.setRevisions(('2012-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3Pwe3MIB.setRevisionsDescriptions(('\n          Notes from release 201204030000Z\n            (i)Initial version\n         .',))
if mibBuilder.loadTexts: f3Pwe3MIB.setLastUpdated('201204030000Z')
if mibBuilder.loadTexts: f3Pwe3MIB.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: f3Pwe3MIB.setContactInfo('        Raghav Trivedi\n                     ADVA Optical Networking, Inc.\n                Tel: +1 972 759-1239\n             E-mail: rtrivedi@advaoptical.com\n             Postal: 2301 N. Greenville Ave. #300\n                     Richardson, TX USA 75082')
if mibBuilder.loadTexts: f3Pwe3MIB.setDescription('This module provides the F3 Pseudo Wire definitions used by \n             the F3 (FSP150CM/CC) product lines.  \n             Copyright (C) ADVA Optical Networking.')
f3Pwe3ConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1))
f3Pwe3PerformanceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2))
f3Pwe3PerformanceNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 3))
f3Pwe3Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 4))
class PWE3SatopDiscoveryType(TextualConvention, Integer32):
    description = 'Enumerations for PWE3 SATop Discovery Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dynamic", 1), ("static", 2))

class PWE3SatopEncapsulationType(TextualConvention, Integer32):
    description = 'Enumerations for PWE3 SATop Encapsulation Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("vlan-one-mpls-label", 1), ("vlan-two-mpls-label", 2), ("novlan-two-mpls-label", 3))

class PWE3SatopRTPTSUpdateFreqType(TextualConvention, Integer32):
    description = 'Enumerations for PWE3 SATop RTP Update Frequency.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("freq-8kHz", 1), ("freq-16kHz", 2), ("freq-32kHz", 3), ("freq-64kHz", 4), ("freq-128kHz", 5), ("freq-256kHz", 6), ("freq-512kHz", 7), ("freq-1024kHz", 8))

class PWE3SatopTransportMode(TextualConvention, Integer32):
    description = 'Enumerations for PWE3 SATop Transport Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("satop-e1", 1), ("satop-t1", 2), ("satop-octetalignt1", 3))

class MplsLabel(TextualConvention, Unsigned32):
    description = 'Definition of MPLS Label.  \n           The bits in network order (left-to-right) are, \n\n           Label(20-bits):QOS(3-bits):Bottom-of-Stack(1-bit):TTL(8-bits)\n\n           These constitute the 32-bit unsigned integer.'
    status = 'current'

f3Pwe3IdlePatternProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 1), )
if mibBuilder.loadTexts: f3Pwe3IdlePatternProfileTable.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3IdlePatternProfileTable.setDescription('A list of entries corresponding to the PWE3 Idle Pattern \n        Profile entities.')
f3Pwe3IdlePatternProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 1, 1), ).setIndexNames((0, "F3-PWE3-MIB", "f3Pwe3IdlePatternProfileIndex"))
if mibBuilder.loadTexts: f3Pwe3IdlePatternProfileEntry.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3IdlePatternProfileEntry.setDescription('An entry containing information applicable to a particular\n           PWE3 Idle Pattern Profile Entity.  These profiles are used\n           by PWE3 SAToP entities.')
f3Pwe3IdlePatternProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: f3Pwe3IdlePatternProfileIndex.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3IdlePatternProfileIndex.setDescription('Unique index value associated with the PWE3 Idle Pattern Profile.')
f3Pwe3IdlePatternProfileByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3IdlePatternProfileByte.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3IdlePatternProfileByte.setDescription('This object allows SNMP management entities to specify the \n           Idle Pattern Profile information.')
f3Pwe3ResyncProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 2), )
if mibBuilder.loadTexts: f3Pwe3ResyncProfileTable.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3ResyncProfileTable.setDescription('A list of entries corresponding to the PWE3 Resync Profile entities.')
f3Pwe3ResyncProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 2, 1), ).setIndexNames((0, "F3-PWE3-MIB", "f3Pwe3ResyncProfileIndex"))
if mibBuilder.loadTexts: f3Pwe3ResyncProfileEntry.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3ResyncProfileEntry.setDescription('An entry containing information applicable to a particular\n           PWE3 Resync Profile Entity.  These profiles are used\n           by PWE3 SAToP entities.')
f3Pwe3ResyncProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: f3Pwe3ResyncProfileIndex.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3ResyncProfileIndex.setDescription('Unique index value associated with the PWE3 Resync Profile.')
f3Pwe3ResyncProfileIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3ResyncProfileIncreaseFactor.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3ResyncProfileIncreaseFactor.setDescription('This object allows SNMP management entities to specify the \n           PWE3 Resync Profile Increase Factor.  This is used to define\n           the fill rate of the leaky bucket algorithm associated with the\n           Resync mechanism.')
f3Pwe3ResyncProfileDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3ResyncProfileDecreaseFactor.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3ResyncProfileDecreaseFactor.setDescription('This object allows SNMP management entities to specify the \n           PWE3 Resync Profile Decrease Factor.  This is used to define\n           the leak rate for the leaky bucket algorithm associated with\n           the Resync mechanism.')
f3Pwe3ResyncProfileResyncThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3ResyncProfileResyncThreshold.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3ResyncProfileResyncThreshold.setDescription('This object allows SNMP management entities to specify the \n           PWE3 Resync Profile Resync Threshold.  This is the threshold value\n           at which point the pseudo-wire connection is deemed out of \n           synchronization state.')
f3Pwe3LoopbackProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 3), )
if mibBuilder.loadTexts: f3Pwe3LoopbackProfileTable.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3LoopbackProfileTable.setDescription('A list of entries corresponding to the PWE3 Loopback Profile entities.')
f3Pwe3LoopbackProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 3, 1), ).setIndexNames((0, "F3-PWE3-MIB", "f3Pwe3LoopbackProfileIndex"))
if mibBuilder.loadTexts: f3Pwe3LoopbackProfileEntry.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3LoopbackProfileEntry.setDescription('An entry containing information applicable to a particular\n           PWE3 Loopback Profile Entity.  These profiles are used\n           by PWE3 T1/E1 interfaces.')
f3Pwe3LoopbackProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: f3Pwe3LoopbackProfileIndex.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3LoopbackProfileIndex.setDescription('Unique index value associated with the PWE3 Loopback Profile.')
f3Pwe3LoopbackProfileLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3LoopbackProfileLength.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3LoopbackProfileLength.setDescription('This object allows SNMP management entities to specify the \n           PWE3 Loopback Length.')
f3Pwe3LoopbackProfilePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3LoopbackProfilePattern.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3LoopbackProfilePattern.setDescription('This object allows SNMP management entities to specify the \n           PWE3 Loopback Pattern.')
f3Pwe3LoopbackProfileRepeatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3LoopbackProfileRepeatTime.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3LoopbackProfileRepeatTime.setDescription('This object allows SNMP management entities to specify the \n           PWE3 Loopback Profile Repeat Time (Duration).')
f3Pwe3LoopbackProfileClearLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3LoopbackProfileClearLength.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3LoopbackProfileClearLength.setDescription('This object allows SNMP management entities to specify the \n           Loopback PWE3 Clear Length.')
f3Pwe3LoopbackProfileClearPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3LoopbackProfileClearPattern.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3LoopbackProfileClearPattern.setDescription('This object allows SNMP management entities to specify the \n           PWE3 Loopback Clear Pattern.')
f3Pwe3LossProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 4), )
if mibBuilder.loadTexts: f3Pwe3LossProfileTable.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3LossProfileTable.setDescription('A list of entries corresponding to the PWE3 Loss Profile entities.')
f3Pwe3LossProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 4, 1), ).setIndexNames((0, "F3-PWE3-MIB", "f3Pwe3LossProfileIndex"))
if mibBuilder.loadTexts: f3Pwe3LossProfileEntry.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3LossProfileEntry.setDescription('An entry containing information applicable to a particular\n           PWE3 Loss Profile Entity.  These profiles are used\n           by PWE3 SAToP entities.')
f3Pwe3LossProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: f3Pwe3LossProfileIndex.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3LossProfileIndex.setDescription('Unique index value associated with the PWE3 Loss Profile.')
f3Pwe3LossProfileLossStateEnterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3LossProfileLossStateEnterTime.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3LossProfileLossStateEnterTime.setDescription('This object allows SNMP management entities to specify the \n           holdoff time that will be applied prior to the SAToP \n           instance entering a Loss State.')
f3Pwe3LossProfileLossStateExitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3LossProfileLossStateExitTime.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3LossProfileLossStateExitTime.setDescription('This object allows SNMP management entities to specify the \n           holdon time that will be applied when the conditon causing \n           the loss state clears.')
f3Pwe3AisStabilizationProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 5), )
if mibBuilder.loadTexts: f3Pwe3AisStabilizationProfileTable.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3AisStabilizationProfileTable.setDescription('A list of entries corresponding to the PWE3 AisStabilization \n        Profile entities.')
f3Pwe3AisStabilizationProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 5, 1), ).setIndexNames((0, "F3-PWE3-MIB", "f3Pwe3AisStabilizationProfileIndex"))
if mibBuilder.loadTexts: f3Pwe3AisStabilizationProfileEntry.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3AisStabilizationProfileEntry.setDescription('An entry containing information applicable to a particular\n           PWE3 AisStabilization Profile Entity.  These profiles are used\n           by PWE3 SAToP entities.')
f3Pwe3AisStabilizationProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: f3Pwe3AisStabilizationProfileIndex.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3AisStabilizationProfileIndex.setDescription('Unique index value associated with the PWE3 AIS \n          Stabilization Profile.')
f3Pwe3AisStabilizationProfileEnterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3AisStabilizationProfileEnterTime.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3AisStabilizationProfileEnterTime.setDescription('This object allows SNMP management entities to specify the \n           time (in hundreds of milliseconds) that will be applied on a \n           LOS event, before the SAToP instance transmits all 1s pattern \n           downstream (AIS).  \n           Range 0 to 3 seconds in 100 millisecond increments.')
f3Pwe3AisStabilizationProfileExitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3AisStabilizationProfileExitTime.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3AisStabilizationProfileExitTime.setDescription('This object allows SNMP management entities to specify the \n           holdon time that will be applied when leaving the AIS \n           Stabilization period.\n           Range 0 to 3 seconds in 100 milliseconds increments \n           (e.g. parameter range is 0 to 30).')
f3Pwe3SatopTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6), )
if mibBuilder.loadTexts: f3Pwe3SatopTable.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopTable.setDescription('A list of entries corresponding to the PWE3 SAToP entities.')
f3Pwe3SatopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-PWE3-MIB", "f3Pwe3SatopIndex"))
if mibBuilder.loadTexts: f3Pwe3SatopEntry.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopEntry.setDescription('An entry containing information applicable to a particular\n           PWE3 SAToP Entity.')
f3Pwe3SatopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: f3Pwe3SatopIndex.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopIndex.setDescription('Unique index value associated with the SAToP Entity.')
f3Pwe3SatopAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopAlias.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the PWE3 SAToP entity.')
f3Pwe3SatopAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3SatopAdminState.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopAdminState.setDescription('This object represents the Administrative State of the PWE3 \n           SAToP entity.')
f3Pwe3SatopOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopOperationalState.setDescription('This object represents the Operational State of the PWE3 \n           SAToP entity.')
f3Pwe3SatopSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopSecondaryState.setDescription('This object represents the Secondary State of the PWE3 \n            SAToP entity.')
f3Pwe3SatopTDMEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 6), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopTDMEntity.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopTDMEntity.setDescription('This object allows specification of the T1/E1 entity\n            associated with the SAToP.  This is only used at\n            SATop creation time. Result of get operation on this object\n            will result with zeroDotZero since one Satop could have more\n            then one associated TDM entity. Subsequently, the associated\n            TDM entities are managed via f3Pwe3SatopTDMEntityTable.\n           ')
f3Pwe3SatopDiscoveryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 7), PWE3SatopDiscoveryType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopDiscoveryType.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopDiscoveryType.setDescription('This object allows ability to statically/dynamically \n            determine the MAC address of the remote IP Address \n            associated with the SAToP. In the case of static discovery\n            type, f3Pwe3SatopRemoteMacAddress must be explicitly specified.\n            In the case of dynamic discovery, the system will use\n            ARP mechanism to obtain the remote Layer 2 MAC address.')
f3Pwe3SatopRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopRemoteIpAddress.setDescription('This object allows ability to specify the remote IP \n            Address. This is used in the PWE payload.')
f3Pwe3SatopRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopRemoteMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopRemoteMacAddress.setDescription('This object allows ability to specify the remote Layer 2 \n            MAC Address. This must be specified in case of\n            f3Pwe3SatopDiscoveryType as static.  This is derived\n            dynamically (via ARP) if f3Pwe3SatopDiscoveryType is dynamic,\n            i.e. it does not have to be specified.')
f3Pwe3SatopEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 10), PWE3SatopEncapsulationType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopEncapsulationType.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopEncapsulationType.setDescription('This object allows ability to specify the encapsulation \n            type of the SATop.  It can be encapsulated with\n            VLAN and single MPLS label(vlan-one-mpls-label), \n            VLAN and two MPLS labels (vlan-two-mpls-label),\n            untagged and two MPLS labels (novlan-two-mpls-label)\n           .')
f3Pwe3SatopRTPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopRTPEnabled.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopRTPEnabled.setDescription('This object enables/disables RTP header for this SATop instance.')
f3Pwe3SatopRTPUpdateFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 12), PWE3SatopRTPTSUpdateFreqType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopRTPUpdateFrequency.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopRTPUpdateFrequency.setDescription('When f3Pwe3SatopRTPEnabled is true, this object allows\n            specification of the RTP clock update frequency.')
f3Pwe3SatopControlWordEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopControlWordEnabled.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopControlWordEnabled.setDescription('This object is used for 3rd party interoperability, since\n            earlier versions of PWE do not support control-word.')
f3Pwe3SatopJitterBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopJitterBufferSize.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopJitterBufferSize.setDescription('This object allows definition of size of the jitter buffer\n            in microseconds for this SATop instance.')
f3Pwe3SatopPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopPayloadSize.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopPayloadSize.setDescription('This object allows specification of the SATop payload size.')
f3Pwe3SatopVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 16), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopVlanId.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopVlanId.setDescription('This object allows specification of the SATop VLAN Id.\n            Applicable for vlan based encapsulation types.')
f3Pwe3SatopVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 17), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopVlanPriority.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopVlanPriority.setDescription('This object allows specification of the SATop VLAN Priority.\n            Applicable for vlan based encapsulation types.')
f3Pwe3SatopRxMplsLabel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 18), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopRxMplsLabel1.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopRxMplsLabel1.setDescription('This object allows specification of the expected\n            receive MPLS Label.  \n            Applicable for single MPLS label encapsulation type.')
f3Pwe3SatopRxMplsLabel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 19), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopRxMplsLabel2.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopRxMplsLabel2.setDescription('This object allows specification of the expected\n            receive MPLS Label.  \n            Applicable for dual MPLS label encapsulation types.')
f3Pwe3SatopTxMplsLabel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 20), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopTxMplsLabel1.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopTxMplsLabel1.setDescription('This object allows specification of the transmitted\n            MPLS Label, used for multiplexing.  \n            Applicable for single MPLS label encapsulation type.')
f3Pwe3SatopTxMplsLabel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 21), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopTxMplsLabel2.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopTxMplsLabel2.setDescription('This object allows specification of the transmitted \n            MPLS Label, used for multiplexing.  \n            Applicable for dual MPLS label encapsulation type.')
f3Pwe3SatopAisStabilizationProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 22), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopAisStabilizationProfile.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopAisStabilizationProfile.setDescription('This object allows specification of the AIS stabilization \n            Profile object. If no profile is associated, this value should be\n            0.0.')
f3Pwe3SatopResyncProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 23), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopResyncProfile.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopResyncProfile.setDescription('This object allows specification of the Resync \n            Profile object.  If no profile is associated, this value\n            should be 0.0.')
f3Pwe3SatopLossProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 24), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopLossProfile.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopLossProfile.setDescription('This object allows specification of the Loss \n            Profile object.  If no profile is associated, this value\n            should be 0.0.')
f3Pwe3SatopTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 25), PWE3SatopTransportMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopTransportMode.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopTransportMode.setDescription('This object allows specification of the SATop transport mode.')
f3Pwe3SatopStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 26), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopStorageType.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStorageType.setDescription('The type of storage configured for this entry.')
f3Pwe3SatopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 6, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3Pwe3SatopRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3Pwe3SatopRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3Pwe3SatopRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3Pwe3SatopTDMEntitiesTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 7), )
if mibBuilder.loadTexts: f3Pwe3SatopTDMEntitiesTable.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopTDMEntitiesTable.setDescription('A list of entries corresponding to the PWE3 SATop TDM entities \n          .')
f3Pwe3SatopTDMEntitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-PWE3-MIB", "f3Pwe3SatopIndex"), (0, "F3-PWE3-MIB", "f3Pwe3SatopTDMEntityIndex"))
if mibBuilder.loadTexts: f3Pwe3SatopTDMEntitiesEntry.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopTDMEntitiesEntry.setDescription('An entry containing information applicable to a particular\n           PWE3 SATop TDM entity.')
f3Pwe3SatopTDMEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: f3Pwe3SatopTDMEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopTDMEntityIndex.setDescription('Unique index value associated with the PWE3 SATOP TDM Entity.')
f3Pwe3SatopTDMEntityObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 7, 1, 2), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3SatopTDMEntityObject.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopTDMEntityObject.setDescription('This object points to the PWE3 SATOP TDM Entity.  This is\n          OID of the actual T1/E1 interface.')
f3Pwe3SatopTDMEntityStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 7, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopTDMEntityStorageType.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopTDMEntityStorageType.setDescription('The type of storage configured for this entry.')
f3Pwe3SatopTDMEntityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 1, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Pwe3SatopTDMEntityRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopTDMEntityRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3Pwe3SatopTDMEntityRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3Pwe3SatopTDMEntityRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3Pwe3SatopTDMEntityRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3Pwe3SatopStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1), )
if mibBuilder.loadTexts: f3Pwe3SatopStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsTable.setDescription('The PWE3 SATop Current data.')
f3Pwe3SatopStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-PWE3-MIB", "f3Pwe3SatopIndex"), (0, "F3-PWE3-MIB", "f3Pwe3SatopStatsIndex"))
if mibBuilder.loadTexts: f3Pwe3SatopStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsEntry.setDescription('A conceptual row in the f3Pwe3SatopStatsTable.')
f3Pwe3SatopStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3Pwe3SatopStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsIndex.setDescription('An index of the SATop current bin.')
f3Pwe3SatopStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day.')
f3Pwe3SatopStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsValid.setDescription('Indicates the validity of the bin.')
f3Pwe3SatopStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3SatopStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsAction.setDescription('Allows the Manager to clear the bin.')
f3Pwe3SatopStatsESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsESs.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsESs.setDescription('The counter associated with the number \n            of Errored Seconds encountered by the \n            SATop in the current bin.')
f3Pwe3SatopStatsSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsSESs.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsSESs.setDescription('The counter associated with the number of \n         Severely Errored Seconds encountered by the \n         SATop in the current bin.')
f3Pwe3SatopStatsEBs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsEBs.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsEBs.setDescription('The counter associated with the number of \n         Errored Blocsk encountered by the SATop\n         in the current bin.')
f3Pwe3SatopStatsResyncs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsResyncs.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsResyncs.setDescription('The counter associated with the number of \n         Resync count events encountered by the \n         SATop in the current bin.')
f3Pwe3SatopStatsMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsMaxJitter.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsMaxJitter.setDescription('The maximum absolute jitter on SATop in the current bin.')
f3Pwe3SatopStatsFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsFramesTx.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsFramesTx.setDescription('The counter associated with the number of \n         Frames Transmitted in the current bin.')
f3Pwe3SatopStatsPayloadOctetsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsPayloadOctetsTx.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsPayloadOctetsTx.setDescription('The counter associated with the number of \n         Payload Octets Transmitted in the current bin.')
f3Pwe3SatopStatsFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsFramesRx.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsFramesRx.setDescription('The counter associated with the number of \n         Frames Received in the current bin.')
f3Pwe3SatopStatsPayloadOctetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsPayloadOctetsRx.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsPayloadOctetsRx.setDescription('The counter associated with the number of \n         Payload Octets Received in the current bin.')
f3Pwe3SatopStatsOutOfSeqFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsOutOfSeqFramesRx.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsOutOfSeqFramesRx.setDescription('The counter associated with the number of \n         Out of Sequence Frames Received in the current bin.')
f3Pwe3SatopStatsLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsLostFrames.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsLostFrames.setDescription('The counter associated with the number of \n         Lost Frames detected in the current bin.')
f3Pwe3SatopStatsLostFramesStateTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsLostFramesStateTrans.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsLostFramesStateTrans.setDescription('The counter associated with the number of transitions to\n         Lost Frame State detected in the current bin.')
f3Pwe3SatopStatsMalformedFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsMalformedFramesRx.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsMalformedFramesRx.setDescription('The counter associated with the number of \n         Malformed Frames received in the current bin.')
f3Pwe3SatopStatsJitterBufferLateFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 1, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopStatsJitterBufferLateFrames.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopStatsJitterBufferLateFrames.setDescription('The counter associated with the number of \n         Jitter Buffer Late Frames in the current bin.')
f3Pwe3SatopHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2), )
if mibBuilder.loadTexts: f3Pwe3SatopHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryTable.setDescription('The PWE3 SATop History data.')
f3Pwe3SatopHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-PWE3-MIB", "f3Pwe3SatopIndex"), (0, "F3-PWE3-MIB", "f3Pwe3SatopStatsIndex"), (0, "F3-PWE3-MIB", "f3Pwe3SatopHistoryIndex"))
if mibBuilder.loadTexts: f3Pwe3SatopHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryEntry.setDescription('A conceptual row in the f3Pwe3SatopHistoryTable.')
f3Pwe3SatopHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3Pwe3SatopHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryIndex.setDescription('An index of the SATop current bin.')
f3Pwe3SatopHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryTime.setDescription('Indicates the time of history bin creation.')
f3Pwe3SatopHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryValid.setDescription('Indicates the validity of the bin.')
f3Pwe3SatopHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3Pwe3SatopHistoryESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryESs.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryESs.setDescription('The counter associated with the number \n            of Errored Seconds encountered by the \n            SATop in the current bin.')
f3Pwe3SatopHistorySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistorySESs.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistorySESs.setDescription('The counter associated with the number of \n         Severely Errored Seconds encountered by the \n         SATop in the current bin.')
f3Pwe3SatopHistoryEBs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryEBs.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryEBs.setDescription('The counter associated with the number of \n         Errored Blocsk encountered by the SATop\n         in the current bin.')
f3Pwe3SatopHistoryResyncs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryResyncs.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryResyncs.setDescription('The counter associated with the number of \n         Resync count events encountered by the \n         SATop in the current bin.')
f3Pwe3SatopHistoryMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryMaxJitter.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryMaxJitter.setDescription('The maximum absolute jitter on SATop in the current bin.')
f3Pwe3SatopHistoryFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryFramesTx.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryFramesTx.setDescription('The counter associated with the number of \n         Frames Transmitted in the current bin.')
f3Pwe3SatopHistoryPayloadOctetsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryPayloadOctetsTx.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryPayloadOctetsTx.setDescription('The counter associated with the number of \n         Payload Octets Transmitted in the current bin.')
f3Pwe3SatopHistoryFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryFramesRx.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryFramesRx.setDescription('The counter associated with the number of \n         Frames Received in the current bin.')
f3Pwe3SatopHistoryPayloadOctetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryPayloadOctetsRx.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryPayloadOctetsRx.setDescription('The counter associated with the number of \n         Payload Octets Received in the current bin.')
f3Pwe3SatopHistoryOutOfSeqFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryOutOfSeqFramesRx.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryOutOfSeqFramesRx.setDescription('The counter associated with the number of \n         Out of Sequence Frames Received in the current bin.')
f3Pwe3SatopHistoryLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryLostFrames.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryLostFrames.setDescription('The counter associated with the number of \n         Lost Frames detected in the current bin.')
f3Pwe3SatopHistoryLostFramesStateTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryLostFramesStateTrans.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryLostFramesStateTrans.setDescription('The counter associated with the number of transitions to\n         Lost Frame State detected in the current bin.')
f3Pwe3SatopHistoryMalformedFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryMalformedFramesRx.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryMalformedFramesRx.setDescription('The counter associated with the number of \n         Malformed Frames received in the current bin.')
f3Pwe3SatopHistoryJitterBufferLateFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 2, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopHistoryJitterBufferLateFrames.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopHistoryJitterBufferLateFrames.setDescription('The counter associated with the number of \n         Jitter Buffer Overruns in the current bin.')
f3Pwe3SatopThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 3), )
if mibBuilder.loadTexts: f3Pwe3SatopThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopThresholdTable.setDescription('A table of entries that allow manageability of SATop \n             Thresholds.')
f3Pwe3SatopThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-PWE3-MIB", "f3Pwe3SatopIndex"), (0, "F3-PWE3-MIB", "f3Pwe3SatopStatsIndex"), (0, "F3-PWE3-MIB", "f3Pwe3SatopThresholdIndex"))
if mibBuilder.loadTexts: f3Pwe3SatopThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopThresholdEntry.setDescription('A conceptual row in the f3Pwe3SatopThresholdTable.')
f3Pwe3SatopThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3Pwe3SatopThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3Pwe3SatopThresholdTable.')
f3Pwe3SatopThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 3, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3Pwe3SatopThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 3, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3Pwe3SatopThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3SatopThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3Pwe3SatopThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Pwe3SatopThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3Pwe3SatopThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Pwe3SatopThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopThresholdMonValue.setDescription('Monitored value corresponding to f3Pwe3SatopThresholdVariable.')
f3Pwe3SatopThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 3, 1)).setObjects(("F3-PWE3-MIB", "f3Pwe3SatopThresholdIndex"), ("F3-PWE3-MIB", "f3Pwe3SatopThresholdInterval"), ("F3-PWE3-MIB", "f3Pwe3SatopThresholdVariable"), ("F3-PWE3-MIB", "f3Pwe3SatopThresholdValueLo"), ("F3-PWE3-MIB", "f3Pwe3SatopThresholdValueHi"), ("F3-PWE3-MIB", "f3Pwe3SatopThresholdMonValue"))
if mibBuilder.loadTexts: f3Pwe3SatopThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3SatopThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an PWE3 SATop is crossed.')
f3Pwe3Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 4, 1))
f3Pwe3Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 4, 2))
f3Pwe3Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 4, 1, 1)).setObjects(("F3-PWE3-MIB", "f3Pwe3ObjectGroup"), ("F3-PWE3-MIB", "f3Pwe3PerfObjectGroup"), ("F3-PWE3-MIB", "f3Pwe3PerfNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3Pwe3Compliance = f3Pwe3Compliance.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3Compliance.setDescription('Describes the requirements for conformance to the F3 PWE3\n             group.')
f3Pwe3ObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 4, 2, 1)).setObjects(("F3-PWE3-MIB", "f3Pwe3IdlePatternProfileIndex"), ("F3-PWE3-MIB", "f3Pwe3IdlePatternProfileByte"), ("F3-PWE3-MIB", "f3Pwe3ResyncProfileIndex"), ("F3-PWE3-MIB", "f3Pwe3ResyncProfileIncreaseFactor"), ("F3-PWE3-MIB", "f3Pwe3ResyncProfileDecreaseFactor"), ("F3-PWE3-MIB", "f3Pwe3ResyncProfileResyncThreshold"), ("F3-PWE3-MIB", "f3Pwe3LoopbackProfileIndex"), ("F3-PWE3-MIB", "f3Pwe3LoopbackProfileLength"), ("F3-PWE3-MIB", "f3Pwe3LoopbackProfilePattern"), ("F3-PWE3-MIB", "f3Pwe3LoopbackProfileRepeatTime"), ("F3-PWE3-MIB", "f3Pwe3LoopbackProfileClearLength"), ("F3-PWE3-MIB", "f3Pwe3LoopbackProfileClearPattern"), ("F3-PWE3-MIB", "f3Pwe3LossProfileIndex"), ("F3-PWE3-MIB", "f3Pwe3LossProfileLossStateEnterTime"), ("F3-PWE3-MIB", "f3Pwe3LossProfileLossStateExitTime"), ("F3-PWE3-MIB", "f3Pwe3AisStabilizationProfileIndex"), ("F3-PWE3-MIB", "f3Pwe3AisStabilizationProfileEnterTime"), ("F3-PWE3-MIB", "f3Pwe3AisStabilizationProfileExitTime"), ("F3-PWE3-MIB", "f3Pwe3SatopIndex"), ("F3-PWE3-MIB", "f3Pwe3SatopAlias"), ("F3-PWE3-MIB", "f3Pwe3SatopAdminState"), ("F3-PWE3-MIB", "f3Pwe3SatopOperationalState"), ("F3-PWE3-MIB", "f3Pwe3SatopSecondaryState"), ("F3-PWE3-MIB", "f3Pwe3SatopTDMEntity"), ("F3-PWE3-MIB", "f3Pwe3SatopDiscoveryType"), ("F3-PWE3-MIB", "f3Pwe3SatopRemoteIpAddress"), ("F3-PWE3-MIB", "f3Pwe3SatopRemoteMacAddress"), ("F3-PWE3-MIB", "f3Pwe3SatopEncapsulationType"), ("F3-PWE3-MIB", "f3Pwe3SatopRTPEnabled"), ("F3-PWE3-MIB", "f3Pwe3SatopRTPUpdateFrequency"), ("F3-PWE3-MIB", "f3Pwe3SatopControlWordEnabled"), ("F3-PWE3-MIB", "f3Pwe3SatopJitterBufferSize"), ("F3-PWE3-MIB", "f3Pwe3SatopPayloadSize"), ("F3-PWE3-MIB", "f3Pwe3SatopVlanId"), ("F3-PWE3-MIB", "f3Pwe3SatopVlanPriority"), ("F3-PWE3-MIB", "f3Pwe3SatopRxMplsLabel1"), ("F3-PWE3-MIB", "f3Pwe3SatopRxMplsLabel2"), ("F3-PWE3-MIB", "f3Pwe3SatopTxMplsLabel1"), ("F3-PWE3-MIB", "f3Pwe3SatopTxMplsLabel2"), ("F3-PWE3-MIB", "f3Pwe3SatopAisStabilizationProfile"), ("F3-PWE3-MIB", "f3Pwe3SatopResyncProfile"), ("F3-PWE3-MIB", "f3Pwe3SatopLossProfile"), ("F3-PWE3-MIB", "f3Pwe3SatopTransportMode"), ("F3-PWE3-MIB", "f3Pwe3SatopStorageType"), ("F3-PWE3-MIB", "f3Pwe3SatopRowStatus"), ("F3-PWE3-MIB", "f3Pwe3SatopTDMEntityIndex"), ("F3-PWE3-MIB", "f3Pwe3SatopTDMEntityObject"), ("F3-PWE3-MIB", "f3Pwe3SatopTDMEntityStorageType"), ("F3-PWE3-MIB", "f3Pwe3SatopTDMEntityRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3Pwe3ObjectGroup = f3Pwe3ObjectGroup.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3ObjectGroup.setDescription('A collection of objects used to manage the F3 PWE3 Configuration data.')
f3Pwe3PerfObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 4, 2, 2)).setObjects(("F3-PWE3-MIB", "f3Pwe3SatopStatsIndex"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsIntervalType"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsValid"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsAction"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsESs"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsSESs"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsEBs"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsResyncs"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsMaxJitter"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsFramesTx"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsPayloadOctetsTx"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsFramesRx"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsPayloadOctetsRx"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsOutOfSeqFramesRx"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsLostFrames"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsLostFramesStateTrans"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsMalformedFramesRx"), ("F3-PWE3-MIB", "f3Pwe3SatopStatsJitterBufferLateFrames"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryIndex"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryTime"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryValid"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryAction"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryESs"), ("F3-PWE3-MIB", "f3Pwe3SatopHistorySESs"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryEBs"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryResyncs"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryMaxJitter"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryFramesTx"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryPayloadOctetsTx"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryFramesRx"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryPayloadOctetsRx"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryOutOfSeqFramesRx"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryLostFrames"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryLostFramesStateTrans"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryMalformedFramesRx"), ("F3-PWE3-MIB", "f3Pwe3SatopHistoryJitterBufferLateFrames"), ("F3-PWE3-MIB", "f3Pwe3SatopThresholdIndex"), ("F3-PWE3-MIB", "f3Pwe3SatopThresholdInterval"), ("F3-PWE3-MIB", "f3Pwe3SatopThresholdVariable"), ("F3-PWE3-MIB", "f3Pwe3SatopThresholdValueLo"), ("F3-PWE3-MIB", "f3Pwe3SatopThresholdValueHi"), ("F3-PWE3-MIB", "f3Pwe3SatopThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3Pwe3PerfObjectGroup = f3Pwe3PerfObjectGroup.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3PerfObjectGroup.setDescription('A collection of objects used to manage the F3 PWE3 Performance data.')
f3Pwe3PerfNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 19, 4, 2, 3)).setObjects(("F3-PWE3-MIB", "f3Pwe3SatopThresholdCrossingAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3Pwe3PerfNotifGroup = f3Pwe3PerfNotifGroup.setStatus('current')
if mibBuilder.loadTexts: f3Pwe3PerfNotifGroup.setDescription('A collection of notifications related to F3 PWE3 Threshold Crossing \n          Alerts.')
mibBuilder.exportSymbols("F3-PWE3-MIB", f3Pwe3SatopStatsAction=f3Pwe3SatopStatsAction, f3Pwe3SatopThresholdTable=f3Pwe3SatopThresholdTable, f3Pwe3SatopHistoryTable=f3Pwe3SatopHistoryTable, f3Pwe3SatopRemoteMacAddress=f3Pwe3SatopRemoteMacAddress, f3Pwe3SatopStatsLostFrames=f3Pwe3SatopStatsLostFrames, f3Pwe3SatopVlanId=f3Pwe3SatopVlanId, f3Pwe3SatopHistoryESs=f3Pwe3SatopHistoryESs, f3Pwe3SatopThresholdValueHi=f3Pwe3SatopThresholdValueHi, f3Pwe3MIB=f3Pwe3MIB, f3Pwe3SatopJitterBufferSize=f3Pwe3SatopJitterBufferSize, f3Pwe3SatopHistoryJitterBufferLateFrames=f3Pwe3SatopHistoryJitterBufferLateFrames, f3Pwe3SatopTxMplsLabel2=f3Pwe3SatopTxMplsLabel2, f3Pwe3AisStabilizationProfileIndex=f3Pwe3AisStabilizationProfileIndex, f3Pwe3SatopHistoryValid=f3Pwe3SatopHistoryValid, f3Pwe3SatopStatsESs=f3Pwe3SatopStatsESs, PWE3SatopDiscoveryType=PWE3SatopDiscoveryType, f3Pwe3ConfigObjects=f3Pwe3ConfigObjects, f3Pwe3SatopTDMEntityRowStatus=f3Pwe3SatopTDMEntityRowStatus, f3Pwe3LoopbackProfileLength=f3Pwe3LoopbackProfileLength, f3Pwe3ResyncProfileTable=f3Pwe3ResyncProfileTable, f3Pwe3SatopVlanPriority=f3Pwe3SatopVlanPriority, f3Pwe3SatopStatsLostFramesStateTrans=f3Pwe3SatopStatsLostFramesStateTrans, f3Pwe3SatopAdminState=f3Pwe3SatopAdminState, f3Pwe3AisStabilizationProfileEnterTime=f3Pwe3AisStabilizationProfileEnterTime, f3Pwe3SatopTxMplsLabel1=f3Pwe3SatopTxMplsLabel1, f3Pwe3PerfNotifGroup=f3Pwe3PerfNotifGroup, f3Pwe3ObjectGroup=f3Pwe3ObjectGroup, f3Pwe3AisStabilizationProfileExitTime=f3Pwe3AisStabilizationProfileExitTime, f3Pwe3SatopHistoryEBs=f3Pwe3SatopHistoryEBs, f3Pwe3SatopThresholdInterval=f3Pwe3SatopThresholdInterval, f3Pwe3SatopAisStabilizationProfile=f3Pwe3SatopAisStabilizationProfile, f3Pwe3LossProfileEntry=f3Pwe3LossProfileEntry, f3Pwe3SatopHistoryAction=f3Pwe3SatopHistoryAction, f3Pwe3LossProfileLossStateExitTime=f3Pwe3LossProfileLossStateExitTime, f3Pwe3SatopOperationalState=f3Pwe3SatopOperationalState, f3Pwe3SatopHistoryMaxJitter=f3Pwe3SatopHistoryMaxJitter, f3Pwe3SatopHistoryLostFrames=f3Pwe3SatopHistoryLostFrames, f3Pwe3LossProfileIndex=f3Pwe3LossProfileIndex, f3Pwe3SatopRTPUpdateFrequency=f3Pwe3SatopRTPUpdateFrequency, f3Pwe3SatopStatsFramesTx=f3Pwe3SatopStatsFramesTx, f3Pwe3SatopTable=f3Pwe3SatopTable, f3Pwe3SatopStatsJitterBufferLateFrames=f3Pwe3SatopStatsJitterBufferLateFrames, f3Pwe3SatopResyncProfile=f3Pwe3SatopResyncProfile, f3Pwe3SatopStatsMalformedFramesRx=f3Pwe3SatopStatsMalformedFramesRx, f3Pwe3SatopHistoryEntry=f3Pwe3SatopHistoryEntry, PWE3SatopRTPTSUpdateFreqType=PWE3SatopRTPTSUpdateFreqType, f3Pwe3SatopTDMEntityStorageType=f3Pwe3SatopTDMEntityStorageType, f3Pwe3SatopLossProfile=f3Pwe3SatopLossProfile, f3Pwe3ResyncProfileDecreaseFactor=f3Pwe3ResyncProfileDecreaseFactor, f3Pwe3SatopThresholdEntry=f3Pwe3SatopThresholdEntry, f3Pwe3AisStabilizationProfileEntry=f3Pwe3AisStabilizationProfileEntry, f3Pwe3LoopbackProfileIndex=f3Pwe3LoopbackProfileIndex, f3Pwe3SatopHistoryPayloadOctetsRx=f3Pwe3SatopHistoryPayloadOctetsRx, f3Pwe3LossProfileTable=f3Pwe3LossProfileTable, f3Pwe3SatopStatsIndex=f3Pwe3SatopStatsIndex, f3Pwe3SatopTDMEntitiesEntry=f3Pwe3SatopTDMEntitiesEntry, f3Pwe3PerfObjectGroup=f3Pwe3PerfObjectGroup, f3Pwe3SatopRTPEnabled=f3Pwe3SatopRTPEnabled, f3Pwe3SatopStatsMaxJitter=f3Pwe3SatopStatsMaxJitter, f3Pwe3SatopThresholdVariable=f3Pwe3SatopThresholdVariable, f3Pwe3SatopPayloadSize=f3Pwe3SatopPayloadSize, f3Pwe3SatopStatsEntry=f3Pwe3SatopStatsEntry, f3Pwe3Compliances=f3Pwe3Compliances, f3Pwe3SatopSecondaryState=f3Pwe3SatopSecondaryState, f3Pwe3SatopStatsValid=f3Pwe3SatopStatsValid, f3Pwe3SatopEntry=f3Pwe3SatopEntry, f3Pwe3SatopStatsFramesRx=f3Pwe3SatopStatsFramesRx, f3Pwe3PerformanceNotifications=f3Pwe3PerformanceNotifications, f3Pwe3SatopThresholdCrossingAlert=f3Pwe3SatopThresholdCrossingAlert, f3Pwe3LoopbackProfileEntry=f3Pwe3LoopbackProfileEntry, f3Pwe3IdlePatternProfileByte=f3Pwe3IdlePatternProfileByte, f3Pwe3SatopHistoryFramesTx=f3Pwe3SatopHistoryFramesTx, f3Pwe3ResyncProfileEntry=f3Pwe3ResyncProfileEntry, f3Pwe3SatopTDMEntityIndex=f3Pwe3SatopTDMEntityIndex, f3Pwe3SatopStatsOutOfSeqFramesRx=f3Pwe3SatopStatsOutOfSeqFramesRx, f3Pwe3SatopHistoryLostFramesStateTrans=f3Pwe3SatopHistoryLostFramesStateTrans, f3Pwe3SatopTDMEntityObject=f3Pwe3SatopTDMEntityObject, f3Pwe3SatopStatsPayloadOctetsTx=f3Pwe3SatopStatsPayloadOctetsTx, f3Pwe3LoopbackProfilePattern=f3Pwe3LoopbackProfilePattern, f3Pwe3LoopbackProfileClearPattern=f3Pwe3LoopbackProfileClearPattern, f3Pwe3SatopHistoryResyncs=f3Pwe3SatopHistoryResyncs, f3Pwe3SatopRemoteIpAddress=f3Pwe3SatopRemoteIpAddress, f3Pwe3SatopHistoryIndex=f3Pwe3SatopHistoryIndex, f3Pwe3SatopThresholdIndex=f3Pwe3SatopThresholdIndex, f3Pwe3Compliance=f3Pwe3Compliance, f3Pwe3AisStabilizationProfileTable=f3Pwe3AisStabilizationProfileTable, f3Pwe3SatopAlias=f3Pwe3SatopAlias, f3Pwe3SatopEncapsulationType=f3Pwe3SatopEncapsulationType, f3Pwe3SatopStatsPayloadOctetsRx=f3Pwe3SatopStatsPayloadOctetsRx, MplsLabel=MplsLabel, f3Pwe3Groups=f3Pwe3Groups, f3Pwe3SatopHistoryPayloadOctetsTx=f3Pwe3SatopHistoryPayloadOctetsTx, f3Pwe3LoopbackProfileRepeatTime=f3Pwe3LoopbackProfileRepeatTime, f3Pwe3IdlePatternProfileIndex=f3Pwe3IdlePatternProfileIndex, f3Pwe3ResyncProfileIndex=f3Pwe3ResyncProfileIndex, f3Pwe3PerformanceObjects=f3Pwe3PerformanceObjects, f3Pwe3Conformance=f3Pwe3Conformance, f3Pwe3SatopIndex=f3Pwe3SatopIndex, PWE3SatopEncapsulationType=PWE3SatopEncapsulationType, f3Pwe3IdlePatternProfileEntry=f3Pwe3IdlePatternProfileEntry, f3Pwe3ResyncProfileIncreaseFactor=f3Pwe3ResyncProfileIncreaseFactor, f3Pwe3SatopThresholdMonValue=f3Pwe3SatopThresholdMonValue, f3Pwe3SatopRxMplsLabel1=f3Pwe3SatopRxMplsLabel1, f3Pwe3SatopStatsResyncs=f3Pwe3SatopStatsResyncs, f3Pwe3LossProfileLossStateEnterTime=f3Pwe3LossProfileLossStateEnterTime, f3Pwe3SatopRxMplsLabel2=f3Pwe3SatopRxMplsLabel2, f3Pwe3LoopbackProfileClearLength=f3Pwe3LoopbackProfileClearLength, f3Pwe3SatopControlWordEnabled=f3Pwe3SatopControlWordEnabled, f3Pwe3SatopStatsIntervalType=f3Pwe3SatopStatsIntervalType, f3Pwe3SatopStatsTable=f3Pwe3SatopStatsTable, f3Pwe3LoopbackProfileTable=f3Pwe3LoopbackProfileTable, PYSNMP_MODULE_ID=f3Pwe3MIB, f3Pwe3SatopStatsEBs=f3Pwe3SatopStatsEBs, f3Pwe3SatopStatsSESs=f3Pwe3SatopStatsSESs, f3Pwe3SatopHistoryMalformedFramesRx=f3Pwe3SatopHistoryMalformedFramesRx, f3Pwe3ResyncProfileResyncThreshold=f3Pwe3ResyncProfileResyncThreshold, f3Pwe3SatopDiscoveryType=f3Pwe3SatopDiscoveryType, f3Pwe3SatopTransportMode=f3Pwe3SatopTransportMode, f3Pwe3SatopHistoryFramesRx=f3Pwe3SatopHistoryFramesRx, f3Pwe3SatopHistoryOutOfSeqFramesRx=f3Pwe3SatopHistoryOutOfSeqFramesRx, f3Pwe3SatopThresholdValueLo=f3Pwe3SatopThresholdValueLo, f3Pwe3IdlePatternProfileTable=f3Pwe3IdlePatternProfileTable, f3Pwe3SatopHistorySESs=f3Pwe3SatopHistorySESs, f3Pwe3SatopRowStatus=f3Pwe3SatopRowStatus, f3Pwe3SatopHistoryTime=f3Pwe3SatopHistoryTime, f3Pwe3SatopTDMEntity=f3Pwe3SatopTDMEntity, f3Pwe3SatopTDMEntitiesTable=f3Pwe3SatopTDMEntitiesTable, PWE3SatopTransportMode=PWE3SatopTransportMode, f3Pwe3SatopStorageType=f3Pwe3SatopStorageType)
