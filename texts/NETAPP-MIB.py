#
# PySNMP MIB module NETAPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/netapp/NETAPP-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:11:13 2024
# On host fv-az883-299 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ZeroBasedCounter64, CounterBasedGauge64 = mibBuilder.importSymbols("HCNUM-TC", "ZeroBasedCounter64", "CounterBasedGauge64")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Unsigned32, Counter32, iso, Gauge32, Counter64, ObjectIdentity, enterprises, NotificationType, Bits, Integer32, IpAddress, TimeTicks, snmpModules, mib_2 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Counter32", "iso", "Gauge32", "Counter64", "ObjectIdentity", "enterprises", "NotificationType", "Bits", "Integer32", "IpAddress", "TimeTicks", "snmpModules", "mib-2")
TextualConvention, TestAndIncr, TimeStamp, PhysAddress, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TestAndIncr", "TimeStamp", "PhysAddress", "DisplayString", "DateAndTime")
netappModuleId = ModuleIdentity((1, 3, 6, 1, 6, 3, 789))
if mibBuilder.loadTexts: netappModuleId.setLastUpdated('201403050000Z')
if mibBuilder.loadTexts: netappModuleId.setOrganization('NetApp')
if mibBuilder.loadTexts: netappModuleId.setContactInfo('www.netapp.com')
if mibBuilder.loadTexts: netappModuleId.setDescription('The mib module for NetApp SNMPv2 entities')
class Boolean(TextualConvention, Integer32):
    description = 'false|true'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("false", 0), ("true", 1))

class Uuid(TextualConvention, OctetString):
    description = 'Universally Unique Identifier'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class TimeTicks64(TextualConvention, Counter64):
    description = 'Represents time in hundredths (1/100) of a second since an epoch.'
    status = 'current'

netapp = MibIdentifier((1, 3, 6, 1, 4, 1, 789))
netapp0 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 0))
netapp1 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1))
netappProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2))
netappDataFabricManager = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 3))
netappSupportConsole = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 4))
netappOnCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 5))
netappFiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 1))
netappNetCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 2))
netappClusteredFiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 3))
netappNode = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 4))
netappCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 5))
netappVserver = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 6))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 1))
sysStat = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2))
nfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3))
quota = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 4))
filesys = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5))
raid = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 6))
cifs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7))
netcache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8))
snapmirror = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 9))
ndmp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 10))
fabric = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 11))
dafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12))
vi = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13))
backup = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14))
vfiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 16))
blocks = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17))
nfscache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18))
snapvault = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 19))
ftpd = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 20))
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 21))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22))
sis = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 23))
compress = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 24))
cluster = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 25))
extcache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 26))
vserver = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 27))
qos = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 28))
sm = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 29))
clusterIdentity = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 25, 1))
clusterIdentityUuid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 25, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIdentityUuid.setStatus('current')
if mibBuilder.loadTexts: clusterIdentityUuid.setDescription("Cluster's universally unique identifier (UUID).")
clusterIdentityName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 25, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIdentityName.setStatus('current')
if mibBuilder.loadTexts: clusterIdentityName.setDescription('Name of the cluster of which this node is a member.')
clusterIdentitySerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 25, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIdentitySerialNumber.setStatus('current')
if mibBuilder.loadTexts: clusterIdentitySerialNumber.setDescription('Cluster Serial Number')
nodeTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 25, 2), )
if mibBuilder.loadTexts: nodeTable.setStatus('current')
if mibBuilder.loadTexts: nodeTable.setDescription('Table of all nodes in the cluster.')
nodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1), ).setIndexNames((1, "NETAPP-MIB", "nodeName"))
if mibBuilder.loadTexts: nodeEntry.setStatus('current')
if mibBuilder.loadTexts: nodeEntry.setDescription('Entry for a node in the cluster.')
nodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeName.setStatus('current')
if mibBuilder.loadTexts: nodeName.setDescription('Node Name. Same as sysName for a specific node.')
nodeOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeOwner.setStatus('current')
if mibBuilder.loadTexts: nodeOwner.setDescription('Node Owner. Same as sysContact for a specific node.')
nodeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeLocation.setStatus('current')
if mibBuilder.loadTexts: nodeLocation.setDescription('Node Location. Same as sysLocation for a specific node.')
nodeModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeModel.setStatus('current')
if mibBuilder.loadTexts: nodeModel.setDescription('Node Model. Same as productModel for a specific node.')
nodeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSerialNumber.setStatus('current')
if mibBuilder.loadTexts: nodeSerialNumber.setDescription('Node Serial Number. Same as productSerialNum for a specific node.')
nodeAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeAssetTag.setStatus('current')
if mibBuilder.loadTexts: nodeAssetTag.setDescription('Value of customer-assigned asset tag for this node.')
nodeUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeUptime.setStatus('current')
if mibBuilder.loadTexts: nodeUptime.setDescription('Node Uptime. Same as sysUpTime for a specific node.')
nodeNvramId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNvramId.setStatus('current')
if mibBuilder.loadTexts: nodeNvramId.setDescription('NVRAM ID of this node.')
nodeSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSystemId.setStatus('current')
if mibBuilder.loadTexts: nodeSystemId.setDescription('Node System ID. Same as productId for a specific node.')
nodeVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeVendor.setStatus('current')
if mibBuilder.loadTexts: nodeVendor.setDescription('Node Vendor. Similar to productVendor for a specific node.')
nodeHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 11), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeHealth.setStatus('current')
if mibBuilder.loadTexts: nodeHealth.setDescription('Whether or not the node can communicate with the cluster.')
nodeEligibility = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 12), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEligibility.setStatus('current')
if mibBuilder.loadTexts: nodeEligibility.setDescription('An eligible node is one that has been designated by the\n\t\t administrator as an active participant in the cluster.')
nodeEpsilon = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 13), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEpsilon.setStatus('current')
if mibBuilder.loadTexts: nodeEpsilon.setDescription('Whether or not this node has epsilon to keep the quorum\n\t     up if only half of the nodes can communicate.')
nodeUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeUuid.setStatus('current')
if mibBuilder.loadTexts: nodeUuid.setDescription('Universally unique identifier (UUID) of the node.')
nodeCpuUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCpuUptime.setStatus('current')
if mibBuilder.loadTexts: nodeCpuUptime.setDescription('The time (in hundredths of a second) that the\n\t\tCPU has been up since the last boot.')
nodeCpuBusyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCpuBusyTime.setStatus('current')
if mibBuilder.loadTexts: nodeCpuBusyTime.setDescription('The time (in hundredths of a second) that the\n\t\tCPU has been doing useful work since the last\n\t\tboot.')
nodeNvramBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ok", 1), ("partiallyDischarged", 2), ("fullyDischarged", 3), ("notPresent", 4), ("nearEndOfLife", 5), ("atEndOfLife", 6), ("unknown", 7), ("overCharged", 8), ("fullyCharged", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNvramBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: nodeNvramBatteryStatus.setDescription("An indication of the current status of the\n\t\t NVRAM battery or batteries.  Batteries which\n\t\t are fully or partially discharged may not\n\t\t fully protect the system during a crash.\n\n\t\t The end-of-life status values are based on\n\t\t the manufacturer's recommended life for the\n\t\t batteries.")
nodeEnvOverTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEnvOverTemperature.setStatus('current')
if mibBuilder.loadTexts: nodeEnvOverTemperature.setDescription('An indication of whether the hardware is\n\t\tcurrently operating outside of its recommended\n\t\ttemperature range.  The hardware will shutdown\n\t\tif the temperature exceeds critical thresholds.')
nodeEnvFailedFanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEnvFailedFanCount.setStatus('current')
if mibBuilder.loadTexts: nodeEnvFailedFanCount.setDescription('Count of the number of chassis fans which\n\t\tare not operating within the recommended\n\t\tRPM range.')
nodeEnvFailedFanMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEnvFailedFanMessage.setStatus('current')
if mibBuilder.loadTexts: nodeEnvFailedFanMessage.setDescription('Text message describing the current condition of\n\t\tchassis fans.  This is useful only if\n\t\tenvFailedFanCount is not zero.')
nodeEnvFailedPowerSupplyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEnvFailedPowerSupplyCount.setStatus('current')
if mibBuilder.loadTexts: nodeEnvFailedPowerSupplyCount.setDescription('Count of the number of power supplies which\n\t\tare in degraded mode.')
nodeEnvFailedPowerSupplyMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEnvFailedPowerSupplyMessage.setStatus('current')
if mibBuilder.loadTexts: nodeEnvFailedPowerSupplyMessage.setDescription('Text message describing the state of any\n\t\tpower supplies which are currently degraded.\n\t\tThis is useful only if envFailedPowerSupplyCount\n\t\tis not zero.')
nodeProductVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeProductVersion.setStatus('current')
if mibBuilder.loadTexts: nodeProductVersion.setDescription('Node Product Version. Similar to productVersion for\n\t\ta specific node.')
nodeFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: nodeFirmwareVersion.setDescription('Node Firmware Version. Similar to productFirmwareVersion\n\t\tfor a specific node.')
clusterLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 25, 3), )
if mibBuilder.loadTexts: clusterLicenseTable.setStatus('deprecated')
if mibBuilder.loadTexts: clusterLicenseTable.setDescription('Cluster Licenses')
clusterLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 25, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "clusterLicenseFeature"))
if mibBuilder.loadTexts: clusterLicenseEntry.setStatus('deprecated')
if mibBuilder.loadTexts: clusterLicenseEntry.setDescription('Details about each installed cluster license.')
clusterLicenseFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterLicenseFeature.setStatus('deprecated')
if mibBuilder.loadTexts: clusterLicenseFeature.setDescription('Cluster license feature ID, see clusterLicenseDescription\n\t         for the name/description of this feature')
clusterLicenseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterLicenseCode.setStatus('deprecated')
if mibBuilder.loadTexts: clusterLicenseCode.setDescription('Cluster License Code')
clusterLicenseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterLicenseDescription.setStatus('deprecated')
if mibBuilder.loadTexts: clusterLicenseDescription.setDescription('Cluster License Feature Description')
clusterLicenseSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterLicenseSerialNumber.setStatus('deprecated')
if mibBuilder.loadTexts: clusterLicenseSerialNumber.setDescription('Cluster Serial Number')
clusterLicenseLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterLicenseLimit.setStatus('deprecated')
if mibBuilder.loadTexts: clusterLicenseLimit.setDescription('Cluster feature limit value. The units of this value\n\t\tare feature specific, for example number of nodes, capacity in TB, \n\t\tnumber of streams, etc. Information about this limit will be in \n\t\tthe clusterLicenseDescription.')
clusterLicenseExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterLicenseExpirationDate.setStatus('deprecated')
if mibBuilder.loadTexts: clusterLicenseExpirationDate.setDescription('Cluster License Expiration Date if it exists')
licenseTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 25, 4), )
if mibBuilder.loadTexts: licenseTable.setStatus('current')
if mibBuilder.loadTexts: licenseTable.setDescription('Licenses')
licenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1), ).setIndexNames((0, "NETAPP-MIB", "licenseSerialNumber"), (0, "NETAPP-MIB", "licensePackage"))
if mibBuilder.loadTexts: licenseEntry.setStatus('current')
if mibBuilder.loadTexts: licenseEntry.setDescription('Details about each installed license.')
licenseSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseSerialNumber.setStatus('current')
if mibBuilder.loadTexts: licenseSerialNumber.setDescription('License Serial Number')
licensePackage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensePackage.setStatus('current')
if mibBuilder.loadTexts: licensePackage.setDescription('License package ID, see licenseDescription\n\t         for the name/description of this package')
licenseOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseOwner.setStatus('current')
if mibBuilder.loadTexts: licenseOwner.setDescription('Name of the Node or Cluster that the license belongs to')
licenseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseDescription.setStatus('current')
if mibBuilder.loadTexts: licenseDescription.setDescription('License Package Description')
licenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("license", 2), ("site", 3), ("demo", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseType.setStatus('current')
if mibBuilder.loadTexts: licenseType.setDescription('License Type')
licenseExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpiration.setStatus('current')
if mibBuilder.loadTexts: licenseExpiration.setDescription('License Expiration Date if it exists')
licenseLegacy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLegacy.setStatus('current')
if mibBuilder.loadTexts: licenseLegacy.setDescription('Indicates if the license is a Legacy License')
licenseCustomerID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseCustomerID.setStatus('current')
if mibBuilder.loadTexts: licenseCustomerID.setDescription('Customer Identification Number, if exists')
vserverTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 27, 1), )
if mibBuilder.loadTexts: vserverTable.setStatus('current')
if mibBuilder.loadTexts: vserverTable.setDescription('Virtual Server Table')
vserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "vserverIndex"))
if mibBuilder.loadTexts: vserverEntry.setStatus('current')
if mibBuilder.loadTexts: vserverEntry.setDescription('Virtual Server Entry')
vserverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: vserverIndex.setStatus('current')
if mibBuilder.loadTexts: vserverIndex.setDescription('Index of virtual server.')
vserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverName.setStatus('current')
if mibBuilder.loadTexts: vserverName.setDescription('Name of virtual server.')
vserverUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverUuid.setStatus('current')
if mibBuilder.loadTexts: vserverUuid.setDescription('Universally unique identifier (UUID) of virtual server.')
vserverRootVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverRootVolume.setStatus('current')
if mibBuilder.loadTexts: vserverRootVolume.setDescription("Virtual server's root volume")
vserverAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverAggregate.setStatus('current')
if mibBuilder.loadTexts: vserverAggregate.setDescription("Name of aggregate the vserver's root volume is in.")
vserverNsSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverNsSwitch.setStatus('current')
if mibBuilder.loadTexts: vserverNsSwitch.setDescription('Vserver Name Service Switch setting (eg: nis, ldap, file).')
vserverNisDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverNisDomain.setStatus('current')
if mibBuilder.loadTexts: vserverNisDomain.setDescription('Vserver NIS Domain')
vserverRootVolumeSecurityStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unix", 0), ("ntfs", 1), ("mixed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverRootVolumeSecurityStyle.setStatus('current')
if mibBuilder.loadTexts: vserverRootVolumeSecurityStyle.setDescription('Vserver Root Volume Security Style')
vserverLdapClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverLdapClient.setStatus('current')
if mibBuilder.loadTexts: vserverLdapClient.setDescription('Vserver LDAP Client')
vserverLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverLanguage.setStatus('current')
if mibBuilder.loadTexts: vserverLanguage.setDescription("Language of this vserver's volumes. For example, 'English'")
vserverSnapshotPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverSnapshotPolicy.setStatus('current')
if mibBuilder.loadTexts: vserverSnapshotPolicy.setDescription('Vserver Default Snapshot Policy')
vserverComment = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverComment.setStatus('current')
if mibBuilder.loadTexts: vserverComment.setDescription('Customer assigned comment for this vserver')
vserverAntiVirusOnAccessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverAntiVirusOnAccessPolicy.setStatus('deprecated')
if mibBuilder.loadTexts: vserverAntiVirusOnAccessPolicy.setDescription('Vserver Default Anti-Virus On-Access Policy')
vserverQuotaPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverQuotaPolicy.setStatus('current')
if mibBuilder.loadTexts: vserverQuotaPolicy.setDescription('Quota Policy assigned for all volumes in this vserver')
vserverType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("data", 0), ("admin", 1), ("node", 2), ("system", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverType.setStatus('current')
if mibBuilder.loadTexts: vserverType.setDescription("Type of the vserver. There are four distinct supported\n            types: data, admin, node and system.\n\n            'data' vservers are the default scale-out vservers.\n            One 'admin' vserver exists per cluster and it\n            provides universal administrative access to the cluster.\n            One 'node' vserver exists per node in the cluster and\n            identifies the physical controller. 'system' vserver is\n\t    for\tcluster-scoped communications in an IPspace.")
vserverState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("running", 0), ("stopped", 1), ("starting", 2), ("stopping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverState.setStatus('current')
if mibBuilder.loadTexts: vserverState.setDescription('State of the vserver')
vserverAggrList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverAggrList.setStatus('current')
if mibBuilder.loadTexts: vserverAggrList.setDescription('This is a comma-separated list of aggregates on which the \n            Vserver can perform volume operations. The aggregates may \n            be shared for use with other Vservers.')
vserverAllowedProtocolList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverAllowedProtocolList.setStatus('current')
if mibBuilder.loadTexts: vserverAllowedProtocolList.setDescription('This is a comma-separated list of protocols/services allowed\n            to run on the Vserver. Eg: NFS,CIFS,iSCSI,FCP.')
vserverNumVolumes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverNumVolumes.setStatus('current')
if mibBuilder.loadTexts: vserverNumVolumes.setDescription('Number of volumes that are contained in the Vserver.')
vserverMaxVolumes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverMaxVolumes.setStatus('current')
if mibBuilder.loadTexts: vserverMaxVolumes.setDescription('Maximum number of volumes that can be created on the Vserver.')
vserverDisallowedProtocolList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverDisallowedProtocolList.setStatus('current')
if mibBuilder.loadTexts: vserverDisallowedProtocolList.setDescription('This is a comma-separated list of protocols/services disallowed\n            to run on the Vserver. Eg: NFS,CIFS,iSCSI,FCP.')
vserverIPspace = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverIPspace.setStatus('current')
if mibBuilder.loadTexts: vserverIPspace.setDescription('IPspace where the Vserver is assigned.')
vserverIsRepository = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 23), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverIsRepository.setStatus('current')
if mibBuilder.loadTexts: vserverIsRepository.setDescription('This Vserver is a Vserver with Infinite Volume. A Vserver with Infinite Volume contains a single Infinite Volume.')
vserverOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("running", 0), ("stopped", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverOperationalState.setStatus('current')
if mibBuilder.loadTexts: vserverOperationalState.setDescription('Operational State of the vserver')
productType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eisaBased", 1), ("pciBased", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productType.setStatus('current')
if mibBuilder.loadTexts: productType.setDescription('The product type representing the target platform.')
productVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVersion.setStatus('current')
if mibBuilder.loadTexts: productVersion.setDescription('Version String for the Software Running on\n\t\t\t this platform.')
productId = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productId.setStatus('current')
if mibBuilder.loadTexts: productId.setDescription('The System ID of this system.')
productVendor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("netapp", 1), ("ibm", 2), ("dell", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVendor.setStatus('current')
if mibBuilder.loadTexts: productVendor.setDescription('The vendor id of this system, indicating the company\n\t\t\tthat has supplied the product.')
productModel = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productModel.setStatus('current')
if mibBuilder.loadTexts: productModel.setDescription('The model name of the system.  Examples\n\t\t\t are FAS980 and FAS3050.')
productFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: productFirmwareVersion.setDescription('Version string for the Firmware running on\n\t\t\t this platform.')
productGuiUrl = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productGuiUrl.setStatus('current')
if mibBuilder.loadTexts: productGuiUrl.setDescription('The complete URL used to access the administrative GUI\n\t\t\t for a browser-based interface.')
productApiUrl = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productApiUrl.setStatus('current')
if mibBuilder.loadTexts: productApiUrl.setDescription('The complete URL used to access the administrative API\n\t\t\t for a programmatic interface.')
productSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSerialNum.setStatus('current')
if mibBuilder.loadTexts: productSerialNum.setDescription('The product serial number. Returns unknown if it \n\t\t\t   cannot be determined.')
productPartnerSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPartnerSerialNum.setStatus('current')
if mibBuilder.loadTexts: productPartnerSerialNum.setDescription("The partner's serial number, not applicable\n\t\t\t\t   if there is no partner, and unknown if it\n\t\t\t\t   cannot be determined.")
productCPUArch = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("x86", 1), ("alpha", 2), ("mips", 3), ("sparc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productCPUArch.setStatus('current')
if mibBuilder.loadTexts: productCPUArch.setDescription('The CPU architecture type of this appliance')
productTrapData = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTrapData.setStatus('current')
if mibBuilder.loadTexts: productTrapData.setDescription('This returns a static string. This object is used\n\t\t\tas a placeholder for enterprise traps.')
productMachineType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productMachineType.setStatus('current')
if mibBuilder.loadTexts: productMachineType.setDescription('The machine type of the system.  Examples\n\t\t\t are FAS980 and FAS3050.')
productLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 1, 14), )
if mibBuilder.loadTexts: productLicenseTable.setStatus('deprecated')
if mibBuilder.loadTexts: productLicenseTable.setDescription('Returns information about the current list of\n\t\t\tlicensed services, the type of license, and,\n\t\t\tif it is a time limited license, the expiration date.\n\t\t\tIt also tells the services that are not licensed for\n\t\t\tthe appliance, or if a time limited licensed service\n\t\t\thas expired. It will also return whether or not the\n\t\t\tthe service was automatically enabled due to\n\t\t\tbusiness packaging policies based on platform type.')
productLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1), ).setIndexNames((0, "NETAPP-MIB", "productLicenseIndex"))
if mibBuilder.loadTexts: productLicenseEntry.setStatus('deprecated')
if mibBuilder.loadTexts: productLicenseEntry.setDescription('Provide a report of licenses.')
productLicenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productLicenseIndex.setStatus('deprecated')
if mibBuilder.loadTexts: productLicenseIndex.setDescription('Index into the product license table.')
licenseService = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseService.setStatus('deprecated')
if mibBuilder.loadTexts: licenseService.setDescription('Name of the service.')
licenseIsLicensed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIsLicensed.setStatus('deprecated')
if mibBuilder.loadTexts: licenseIsLicensed.setDescription('True if the service is licensed and has not\n\t\t\texpired, false otherwise.')
licenseIsExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIsExpired.setStatus('deprecated')
if mibBuilder.loadTexts: licenseIsExpired.setDescription('True if the promotional/time-expiring/demo license \n\t\t\thas expired, false otherwise.')
licenseIsSite = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIsSite.setStatus('deprecated')
if mibBuilder.loadTexts: licenseIsSite.setDescription('True if the service is a site license, false \n\t\t\totherwise.')
licenseExpirationTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpirationTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: licenseExpirationTimeStamp.setDescription("Expected expiration timestamp in seconds since\n\t\t\tJanuary 1, 1970, if it's a promotional/time-expiring\n\t\t\tlicense. 0 for all other licenses.")
licenseIsAutoEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIsAutoEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: licenseIsAutoEnabled.setDescription('True if the service is automatically licensed\n\t\t\t(licenseIsLicensed will also be True) false otherwise.')
cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 1))
misc = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 2))
cf = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 3))
environment = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 4))
nvram = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 5))
cp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 6))
autosupport = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 7))
nodeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 10))
nodeStatTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1), )
if mibBuilder.loadTexts: nodeStatTable.setStatus('current')
if mibBuilder.loadTexts: nodeStatTable.setDescription('Table containing all counters in the cluster, \n\t\t\t organized on a per-node, per-category, \n\t\t\t per-object basis.')
nodeStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "nodeStatNode"), (0, "NETAPP-MIB", "nodeStatCategoryIndex"), (0, "NETAPP-MIB", "nodeStatInstanceIndex"), (0, "NETAPP-MIB", "nodeStatCounterIndex"))
if mibBuilder.loadTexts: nodeStatEntry.setStatus('current')
if mibBuilder.loadTexts: nodeStatEntry.setDescription('Entry for a single counter in the cluster, on\n\t\t\t a per-node, per-category, per-object basis.')
nodeStatNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: nodeStatNode.setStatus('current')
if mibBuilder.loadTexts: nodeStatNode.setDescription('Node from which the counter is collected.')
nodeStatCategoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nodeStatCategoryIndex.setStatus('current')
if mibBuilder.loadTexts: nodeStatCategoryIndex.setDescription('Index of category.')
nodeStatInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nodeStatInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: nodeStatInstanceIndex.setDescription('Index of instance on which the counter exists.')
nodeStatCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nodeStatCounterIndex.setStatus('current')
if mibBuilder.loadTexts: nodeStatCounterIndex.setDescription('Index of counter within this category.')
nodeStatValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatValue.setStatus('current')
if mibBuilder.loadTexts: nodeStatValue.setDescription('The value of the counter.')
nodeStatUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatUnits.setStatus('current')
if mibBuilder.loadTexts: nodeStatUnits.setDescription("Units for this counter. Possible values include:\n\t\t\t 'B' (bytes), 's' (seconds), 'ms' (milliseconds), \n\t\t         'us' (microseconds), '%' (percent), or '' (none).")
nodeStatDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatDescription.setStatus('current')
if mibBuilder.loadTexts: nodeStatDescription.setDescription('Description of this counter.')
nodeStatProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatProperties.setStatus('current')
if mibBuilder.loadTexts: nodeStatProperties.setDescription("Counter properties. Possible values include:\n\t\t\t 'average', 'rate', 'delta', 'percent', ''.")
nodeStatCategoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatCategoryName.setStatus('current')
if mibBuilder.loadTexts: nodeStatCategoryName.setDescription("Name of counter's category.")
nodeStatInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatInstanceName.setStatus('current')
if mibBuilder.loadTexts: nodeStatInstanceName.setDescription("Name of counter's category instance.")
nodeStatCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatCounterName.setStatus('current')
if mibBuilder.loadTexts: nodeStatCounterName.setDescription('Name of counter within this category.')
nodeStatLabels = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatLabels.setStatus('current')
if mibBuilder.loadTexts: nodeStatLabels.setDescription("List of counter labels. Used for counter arrays\n\t\t\t of if 'counter' value is not an integer.")
nodeStatValues = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatValues.setStatus('current')
if mibBuilder.loadTexts: nodeStatValues.setDescription('List of values. Only used to for counter arrays.')
cpuUpTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUpTime.setStatus('current')
if mibBuilder.loadTexts: cpuUpTime.setDescription('The time (in hundredths of a second) that the\n\t\t\t CPU has been up since the last boot.')
cpuBusyTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuBusyTime.setStatus('current')
if mibBuilder.loadTexts: cpuBusyTime.setDescription('The time (in hundredths of a second) that the\n\t\t\t CPU has been doing useful work since the last\n\t\t\t boot.')
cpuBusyTimePerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuBusyTimePerCent.setStatus('current')
if mibBuilder.loadTexts: cpuBusyTimePerCent.setDescription('The percent of time that the CPU has been doing\n\t\t\t useful work since the last time a client requested\n\t\t\t the cpuBusyTimePerCent.')
cpuIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIdleTime.setStatus('current')
if mibBuilder.loadTexts: cpuIdleTime.setDescription('The time (in hundredths of a second) that the\n\t\t\t CPU has been idle since the last boot.')
cpuIdleTimePerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIdleTimePerCent.setStatus('current')
if mibBuilder.loadTexts: cpuIdleTimePerCent.setDescription('The percent of time that the CPU has been idle\n\t\t\t since the last time a client requested the\n\t\t\t cpuBusyTimePerCent.')
cpuCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCount.setStatus('current')
if mibBuilder.loadTexts: cpuCount.setDescription('The number of CPUs in the system.')
cpuSwitchInvocations = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuSwitchInvocations.setStatus('current')
if mibBuilder.loadTexts: cpuSwitchInvocations.setDescription('The number of sk_switch invocations.')
cpuContextSwitches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuContextSwitches.setStatus('current')
if mibBuilder.loadTexts: cpuContextSwitches.setDescription('The number of hardware context switches.')
cpuInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuInterrupts.setStatus('current')
if mibBuilder.loadTexts: cpuInterrupts.setDescription('The number of interrupts during a CP.')
cpuNonCPInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuNonCPInterrupts.setStatus('current')
if mibBuilder.loadTexts: cpuNonCPInterrupts.setDescription('The number of interrupts not during a CP.')
cpuCPInterruptPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCPInterruptPercent.setStatus('current')
if mibBuilder.loadTexts: cpuCPInterruptPercent.setDescription(' The percentage of time handling CP interrupts.')
cpuNonCPInterruptPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuNonCPInterruptPercent.setStatus('current')
if mibBuilder.loadTexts: cpuNonCPInterruptPercent.setDescription(' The percentage of time handling non-cp interrupts.')
cpuTotalDomainSwitches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalDomainSwitches.setStatus('current')
if mibBuilder.loadTexts: cpuTotalDomainSwitches.setDescription(' The total number of Domain Switches.')
cDOTCpuTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14), )
if mibBuilder.loadTexts: cDOTCpuTable.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuTable.setDescription('Provide a report of the current CPU statistics\n\t\t\ton per node basis')
cDOTCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1), ).setIndexNames((1, "NETAPP-MIB", "cDOTCpuNodeName"))
if mibBuilder.loadTexts: cDOTCpuEntry.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuEntry.setDescription("Provide a report of the node's CPU statistics")
cDOTCpuNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuNodeName.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuNodeName.setDescription('Node Name. Same as nodeName for a specific node.')
cDOTCpuUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 2), TimeTicks64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuUpTime.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuUpTime.setDescription('The time (in hundredths of a second) that the\n\t\t\t CPU has been up since the last boot.')
cDOTCpuBusyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 3), TimeTicks64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuBusyTime.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuBusyTime.setDescription('The time (in hundredths of a second) that the\n\t\t\t CPU has been doing useful work since the last\n\t\t\t boot.')
cDOTCpuBusyTimePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuBusyTimePerCent.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuBusyTimePerCent.setDescription('The percent of time that the CPU has been doing\n\t\t\t useful work since the last time a client requested\n\t\t\t the cDOTCpuBusyTimePerCent.')
cDOTCpuIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 5), TimeTicks64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuIdleTime.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuIdleTime.setDescription('The time (in hundredths of a second) that the\n\t\t\t CPU has been idle since the last boot.')
cDOTCpuIdleTimePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuIdleTimePerCent.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuIdleTimePerCent.setDescription('The percent of time that the CPU has been idle\n\t\t\t since the last time a client requested the\n\t\t\t cDOTCpuBusyTimePerCent.')
cDOTCpuCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuCount.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuCount.setDescription('The number of CPUs in the system.')
cDOTCpuSwitchInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuSwitchInvocations.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuSwitchInvocations.setDescription('The number of sk_switch invocations.')
cDOTCpuContextSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuContextSwitches.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuContextSwitches.setDescription('The number of hardware context switches.')
cDOTCpuInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuInterrupts.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuInterrupts.setDescription('The number of interrupts during a CP.')
cDOTCpuNonCPInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuNonCPInterrupts.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuNonCPInterrupts.setDescription('The number of interrupts not during a CP.')
cDOTCpuCPInterruptPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuCPInterruptPercent.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuCPInterruptPercent.setDescription(' The percentage of time handling CP interrupts.')
cDOTCpuNonCPInterruptPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuNonCPInterruptPercent.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuNonCPInterruptPercent.setDescription(' The percentage of time handling non-cp interrupts.')
cDOTCpuTotalDomainSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuTotalDomainSwitches.setStatus('current')
if mibBuilder.loadTexts: cDOTCpuTotalDomainSwitches.setDescription(' The total number of Domain Switches.')
miscNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNfsOps.setStatus('deprecated')
if mibBuilder.loadTexts: miscNfsOps.setDescription('The total number of Server side NFS calls since\n\t\t\t the last boot')
miscNetRcvdKB = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNetRcvdKB.setStatus('deprecated')
if mibBuilder.loadTexts: miscNetRcvdKB.setDescription('The total number of KBytes received on all the\n\t\t\t network interfaces, since the last boot.')
miscNetSentKB = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNetSentKB.setStatus('deprecated')
if mibBuilder.loadTexts: miscNetSentKB.setDescription('The total number of KBytes transmitted on all the\n\t\t\t network interfaces, since the last boot.')
miscGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscGlobalStatus.setStatus('current')
if mibBuilder.loadTexts: miscGlobalStatus.setDescription('This indicates the overall status of the appliance.\n\t\t\tThe algorithm to determine the value uses both\n\t\t\thardware status (e.g. the number of failed fans) and\n\t\t\tvolume status (e.g. number of volumes that are full).\n\t\t\tThe algorithm is subject to change in future releases,\n\t\t\tbut the range of values will not change.')
miscHighNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNfsOps.setStatus('deprecated')
if mibBuilder.loadTexts: miscHighNfsOps.setDescription('The total number of Server side NFS calls since\n\t\t\t the last boot.  This object returns the most\n\t\t\t significant 32 bits of the 64 bit unsigned integer.\n\t\t\t This object is deprecated - Use misc64NfsOps instead.')
miscLowNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNfsOps.setStatus('deprecated')
if mibBuilder.loadTexts: miscLowNfsOps.setDescription('The total number of Server side NFS calls since\n\t\t\t the last boot.  This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer. \n\t\t\t This object is deprecated - Use misc64NfsOps instead.')
miscHighCifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighCifsOps.setStatus('deprecated')
if mibBuilder.loadTexts: miscHighCifsOps.setDescription('The total number of Server side CIFS calls since\n\t\t\t the last boot.  This object returns the most\n\t\t\t significant 32 bits of the 64 bit unsigned integer. \n\t\t\t This object is deprecated - Use misc64CifsOps instead.')
miscLowCifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowCifsOps.setStatus('deprecated')
if mibBuilder.loadTexts: miscLowCifsOps.setDescription('The total number of Server side CIFS calls since\n\t\t\t the last boot.  This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer. \n\t\t\t This object is deprecated - Use misc64CifsOps instead.')
miscHighHttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighHttpOps.setStatus('deprecated')
if mibBuilder.loadTexts: miscHighHttpOps.setDescription('The total number of HTTP operations received\n\t\t\t since the last boot.  This object returns the most\n\t\t\t significant 32 bits of the 64 bit unsigned integer. \n\t\t\t This object is deprecated - Use misc64HttpOps instead.')
miscLowHttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowHttpOps.setStatus('deprecated')
if mibBuilder.loadTexts: miscLowHttpOps.setDescription('The total number of HTTP operations received\n\t\t\t since the last boot.  This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer. \n\t\t\t This object is deprecated - Use misc64HttpOps instead.')
miscHighNetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNetRcvdBytes.setStatus('deprecated')
if mibBuilder.loadTexts: miscHighNetRcvdBytes.setDescription('The total number of bytes received on all the\n\t\t\t network interfaces, since the last boot.  This\n\t\t\t object returns the most significant 32 bits\n\t\t\t of the 64 bit unsigned integer. This object is \n\t\t\t deprecated - Use misc64NetRcvdBytes instead.')
miscLowNetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNetRcvdBytes.setStatus('deprecated')
if mibBuilder.loadTexts: miscLowNetRcvdBytes.setDescription('The total number of bytes received on all the\n\t\t\t network interfaces, since the last boot.  This\n\t\t\t object returns the least significant 32 bits\n\t\t\t of the 64 bit unsigned integer. This object is \n\t\t\t deprecated - Use misc64NetRcvdBytes instead.')
miscHighNetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNetSentBytes.setStatus('deprecated')
if mibBuilder.loadTexts: miscHighNetSentBytes.setDescription('The total number of bytes transmitted on all the\n\t\t\t network interfaces, since the last boot.  This\n\t\t\t object returns the most significant 32 bits\n\t\t\t of the 64 bit unsigned integer. This object is \n\t\t\t deprecated - Use misc64NetSentBytes instead.')
miscLowNetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNetSentBytes.setStatus('deprecated')
if mibBuilder.loadTexts: miscLowNetSentBytes.setDescription('The total number of bytes transmitted on all the\n\t\t\t network interfaces, since the last boot.  This\n\t\t\t object returns the least significant 32 bits\n\t\t\t of the 64 bit unsigned integer. This object is \n\t\t\t deprecated - Use misc64NetSentBytes instead.')
miscHighDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighDiskReadBytes.setStatus('deprecated')
if mibBuilder.loadTexts: miscHighDiskReadBytes.setDescription('The total number of bytes read from disk\n\t\t\t since the last boot.  This object returns\n\t\t\t the most significant 32 bits of the 64 bit unsigned \n\t\t\t integer. This object is deprecated - Use \n\t\t\t misc64DiskReadBytes instead.')
miscLowDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowDiskReadBytes.setStatus('deprecated')
if mibBuilder.loadTexts: miscLowDiskReadBytes.setDescription('The total number of bytes read from disk since\n\t\t\t the last boot.  This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer. \n\t\t\t This object is deprecated - Use misc64DiskReadBytes \n\t\t\t instead.')
miscHighDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighDiskWriteBytes.setStatus('deprecated')
if mibBuilder.loadTexts: miscHighDiskWriteBytes.setDescription('The total number of bytes written to disk\n\t\t\t since the last boot.  This object returns\n\t\t\t the most significant 32 bits of the 64 bit unsigned\n\t\t\t integer. This object is deprecated - Use \n\t\t\t misc64DiskWriteBytes instead.')
miscLowDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowDiskWriteBytes.setStatus('deprecated')
if mibBuilder.loadTexts: miscLowDiskWriteBytes.setDescription('The total number of bytes written to disk since\n\t\t\t the last boot.  This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer. \n\t\t\t This object is deprecated - Use misc64DiskWriteBytes \n\t\t\t instead.')
miscHighTapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighTapeReadBytes.setStatus('deprecated')
if mibBuilder.loadTexts: miscHighTapeReadBytes.setDescription('The total number of bytes read from tape\n\t\t\t since the last boot.  This object returns\n\t\t\t the most significant 32 bits of the 64 bit unsigned \n\t\t\t integer. This object is deprecated - Use \n\t\t\t misc64TapeReadBytes instead.')
miscLowTapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowTapeReadBytes.setStatus('deprecated')
if mibBuilder.loadTexts: miscLowTapeReadBytes.setDescription('The total number of bytes read from tape since\n\t\t\t the last boot.  This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer. \n\t\t\t This object is deprecated - Use misc64TapeReadBytes \n\t\t\t instead.')
miscHighTapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighTapeWriteBytes.setStatus('deprecated')
if mibBuilder.loadTexts: miscHighTapeWriteBytes.setDescription('The total number of bytes written to tape\n\t\t\t since the last boot.  This object returns\n\t\t\t the most significant 32 bits of the 64 bit unsigned \n\t\t\t integer. This object is deprecated - Use \n\t\t\t misc64TapeWriteBytes instead.')
miscLowTapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowTapeWriteBytes.setStatus('deprecated')
if mibBuilder.loadTexts: miscLowTapeWriteBytes.setDescription('The total number of bytes written to tape since\n\t\t\t the last boot.  This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer. \n\t\t\t This object is deprecated - Use misc64TapeWriteBytes \n\t\t\t instead.')
miscCacheAge = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscCacheAge.setStatus('current')
if mibBuilder.loadTexts: miscCacheAge.setDescription("Age in minutes of the oldest read-only blocks\n\t\t\t in the buffer cache.  This indicates how fast\n\t\t\t read operations are cycling through system\n\t\t\t memory; when the appliance is reading very\n\t\t\t large files (larger than the machine's memory\n\t\t\t size), buffer cache age will be very low.")
miscCorrectedMachineChecks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscCorrectedMachineChecks.setStatus('current')
if mibBuilder.loadTexts: miscCorrectedMachineChecks.setDescription('Number of corrected machine checks since\n\t\t\tthe last boot.')
miscGlobalStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscGlobalStatusMessage.setStatus('current')
if mibBuilder.loadTexts: miscGlobalStatusMessage.setDescription('A string describing the global status,\n\t\t\tincluding a description of the condition (if\n\t\t\tany) that caused the status to be anything\n\t\t\tother than ok(3).')
miscWindowsSetupWizardVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscWindowsSetupWizardVersion.setStatus('current')
if mibBuilder.loadTexts: miscWindowsSetupWizardVersion.setDescription('The version number of Windows Setup Wizard \n\t\t\trequired to configure the appliance.  Windows\n\t\t\tSetup Wizard with a version number lower than \n\t\t\tthis integer is not capable of configuring the \n\t\t\tappliance.')
misc64NfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64NfsOps.setStatus('current')
if mibBuilder.loadTexts: misc64NfsOps.setDescription('The total number of Server side NFS calls since\n\t\t\t the last boot.  This object returns all of the\n\t\t\t 64 bit unsigned integer.')
misc64CifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64CifsOps.setStatus('current')
if mibBuilder.loadTexts: misc64CifsOps.setDescription('The total number of Server side CIFS calls since\n\t\t\t the last boot.  This object returns all of the \n\t\t\t 64 bit unsigned integer.')
misc64HttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64HttpOps.setStatus('current')
if mibBuilder.loadTexts: misc64HttpOps.setDescription('The total number of HTTP operations received\n\t\t\t since the last boot.  This object returns all of\n\t\t\t the 64 bit unsigned integer.')
misc64NetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64NetRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: misc64NetRcvdBytes.setDescription('The total number of bytes received on all the\n\t\t\t network interfaces, since the last boot.  This\n\t\t\t object returns all of the 64 bit unsigned integer.')
misc64NetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64NetSentBytes.setStatus('current')
if mibBuilder.loadTexts: misc64NetSentBytes.setDescription('The total number of bytes transmitted on all the\n\t\t\t network interfaces, since the last boot.  This\n\t\t\t object returns all of the 64 bit unsigned integer.')
misc64DiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64DiskReadBytes.setStatus('current')
if mibBuilder.loadTexts: misc64DiskReadBytes.setDescription('The total number of bytes read from disk\n\t\t\t since the last boot.  This object returns\n\t\t\t all of the 64 bit unsigned integer.')
misc64DiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64DiskWriteBytes.setStatus('current')
if mibBuilder.loadTexts: misc64DiskWriteBytes.setDescription('The total number of bytes written to disk\n\t\t\t since the last boot.  This object returns\n\t\t\t all of the 64 bit unsigned integer.')
misc64TapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64TapeReadBytes.setStatus('current')
if mibBuilder.loadTexts: misc64TapeReadBytes.setDescription('The total number of bytes read from tape\n\t\t\t since the last boot.  This object returns\n\t\t\t all of the 64 bit unsigned integer.')
misc64TapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64TapeWriteBytes.setStatus('current')
if mibBuilder.loadTexts: misc64TapeWriteBytes.setDescription('The total number of bytes written to tape\n\t\t\t since the last boot.  This object returns\n\t\t\t all of the 64 bit unsigned integer.')
cfSettings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("enabled", 2), ("disabled", 3), ("takeoverByPartnerDisabled", 4), ("thisNodeDead", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSettings.setStatus('current')
if mibBuilder.loadTexts: cfSettings.setDescription('Clustered Failover configuration settings.\n\t\t\t\t The value notConfigured(1) indicates that the\n\t\t\t\t cluster is not licensed. The thisNodeDead(5)\n\t\t\t\t setting indicates that this node has been \n\t\t\t\t taken over.')
cfState = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dead", 1), ("canTakeover", 2), ("cannotTakeover", 3), ("takeover", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfState.setStatus('current')
if mibBuilder.loadTexts: cfState.setDescription('Clustered Failover state.')
cfCannotTakeoverCause = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("ok", 1), ("unknownReason", 2), ("disabledByOperator", 3), ("interconnectOffline", 4), ("disabledByPartner", 5), ("takeoverFailed", 6), ("mailboxDegraded", 7), ("partnerMailboxUninitialised", 8), ("mailboxVersionMismatch", 9), ("nvramSizeMismatch", 10), ("kernelVersionMismatch", 11), ("partnerBootingUp", 12), ("partnerPerformingRevert", 13), ("performingRevert", 14), ("partnerRequestedTakeover", 15), ("alreadyInTakenoverMode", 16), ("nvramLogUnsynchronized", 17), ("backupMailboxProblems", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCannotTakeoverCause.setStatus('current')
if mibBuilder.loadTexts: cfCannotTakeoverCause.setDescription('The reason this node cannot takeover its\n\t\t\t\t partner')
cfPartnerStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("maybeDown", 1), ("ok", 2), ("dead", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerStatus.setStatus('current')
if mibBuilder.loadTexts: cfPartnerStatus.setDescription('This is the status last returned by the\n\t\t\t\t Clustered Failover partner.')
cfPartnerLastStatusUpdate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerLastStatusUpdate.setStatus('current')
if mibBuilder.loadTexts: cfPartnerLastStatusUpdate.setDescription('If non-zero, the absolute time of the last\n\t\t\t\t update from the Clustered Failover partner.')
cfPartnerName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerName.setStatus('current')
if mibBuilder.loadTexts: cfPartnerName.setDescription('Hostname for Clustered Failover partner.')
cfPartnerSysid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerSysid.setStatus('current')
if mibBuilder.loadTexts: cfPartnerSysid.setDescription('System ID for Clustered Failover partner.')
cfInterconnectStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("down", 2), ("partialFailure", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfInterconnectStatus.setStatus('current')
if mibBuilder.loadTexts: cfInterconnectStatus.setDescription('The current status of the interconnect.\n\t\t\t\t The partialFailure(3) status indicates that\n\t\t\t\t one of the links in the interconnect hardware\n\t\t\t\t is down.')
envOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envOverTemperature.setStatus('current')
if mibBuilder.loadTexts: envOverTemperature.setDescription('An indication of whether the hardware is\n\t\t\t currently operating outside of its recommended\n\t\t\t temperature range.  The hardware will shutdown\n\t\t\t if the temperature exceeds critical thresholds.')
envFailedFanCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedFanCount.setStatus('current')
if mibBuilder.loadTexts: envFailedFanCount.setDescription('Count of the number of chassis fans which\n\t\t\t are not operating within the recommended\n\t\t\t RPM range.')
envFailedFanMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedFanMessage.setStatus('current')
if mibBuilder.loadTexts: envFailedFanMessage.setDescription('Text message describing the current condition of\n\t\t\t chassis fans.  This is useful only if\n\t\t\t envFailedFanCount is not zero.')
envFailedPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedPowerSupplyCount.setStatus('current')
if mibBuilder.loadTexts: envFailedPowerSupplyCount.setDescription('Count of the number of power supplies which\n\t\t\t are in degraded mode.')
envFailedPowerSupplyMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedPowerSupplyMessage.setStatus('current')
if mibBuilder.loadTexts: envFailedPowerSupplyMessage.setDescription('Text message describing the state of any\n\t\t\t power supplies which are currently degraded.\n\t\t\t This is useful only if envFailedPowerSupplyCount\n\t\t\t is not zero.')
nvramBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ok", 1), ("partiallyDischarged", 2), ("fullyDischarged", 3), ("notPresent", 4), ("nearEndOfLife", 5), ("atEndOfLife", 6), ("unknown", 7), ("overCharged", 8), ("fullyCharged", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: nvramBatteryStatus.setDescription("An indication of the current status of the\n\t\t\t NVRAM battery or batteries.  Batteries which\n\t\t\t are fully or partially discharged may not\n\t\t\t fully protect the system during a crash.\n\n\t\t\t The end-of-life status values are based on\n\t\t\t the manufacturer's recommended life for the\n\t\t\t batteries.")
cpTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTime.setStatus('current')
if mibBuilder.loadTexts: cpTime.setDescription('The time (in hundredths of a second) since boot\n\t\t\t during which the system has had a consistency point\n\t\t\t (cp) operation in progress.')
cpFromTimerOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromTimerOps.setStatus('current')
if mibBuilder.loadTexts: cpFromTimerOps.setDescription('The number of consistency point operations since boot\n\t\t\t that were caused by timer.')
cpFromSnapshotOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromSnapshotOps.setStatus('current')
if mibBuilder.loadTexts: cpFromSnapshotOps.setDescription('The number of consistency point operations since boot\n\t\t\t that were caused by snapshot operation.')
cpFromLowWaterOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowWaterOps.setStatus('current')
if mibBuilder.loadTexts: cpFromLowWaterOps.setDescription('The number of consistency point operations since boot\n\t\t\t that were caused by low water mark.')
cpFromHighWaterOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromHighWaterOps.setStatus('current')
if mibBuilder.loadTexts: cpFromHighWaterOps.setDescription('The number of consistency point operations since boot\n\t\t\t that were caused by high water mark.')
cpFromLogFullOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLogFullOps.setStatus('current')
if mibBuilder.loadTexts: cpFromLogFullOps.setDescription('The number of consistency point operations since boot\n\t\t\t that were caused by nv-log full.')
cpFromCpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromCpOps.setStatus('current')
if mibBuilder.loadTexts: cpFromCpOps.setDescription('The number of back to back consistency point\n\t\t\toperations since boot.')
cpTotalOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTotalOps.setStatus('current')
if mibBuilder.loadTexts: cpTotalOps.setDescription('The total number of consistency point operations\n\t\t\t since boot.')
cpFromFlushOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromFlushOps.setStatus('current')
if mibBuilder.loadTexts: cpFromFlushOps.setDescription('The number of consistency point operations since boot\n\t\t\tthat were caused by flushing unlogged write data.')
cpFromSyncOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromSyncOps.setStatus('current')
if mibBuilder.loadTexts: cpFromSyncOps.setDescription('The number of consistency point operations since boot\n\t\t\tthat were caused by file system sync requests.')
cpFromLowVbufOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowVbufOps.setStatus('current')
if mibBuilder.loadTexts: cpFromLowVbufOps.setDescription('The number of consistency point operations since boot\n\t\t\tthat were caused by low virtual buffers.')
cpFromCpDeferredOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromCpDeferredOps.setStatus('current')
if mibBuilder.loadTexts: cpFromCpDeferredOps.setDescription('The number of back to back consistency point\n\t\t\toperations since boot that were deferred.')
cpFromLowDatavecsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowDatavecsOps.setStatus('current')
if mibBuilder.loadTexts: cpFromLowDatavecsOps.setDescription('The number of consistency point operations since boot\n\t\t\tthat were caused by low datavecs.')
cpFromLowMbufOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowMbufOps.setStatus('current')
if mibBuilder.loadTexts: cpFromLowMbufOps.setDescription('The number of consistency point operations since boot\n                        that were caused by low mbufs.')
cpFromNvlogReplayTakeoverTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromNvlogReplayTakeoverTime.setStatus('current')
if mibBuilder.loadTexts: cpFromNvlogReplayTakeoverTime.setDescription('The number of consistency point operations since boot\n                        that were caused by nvlog replay takeover time.')
cDOTCpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16), )
if mibBuilder.loadTexts: cDOTCpTable.setStatus('current')
if mibBuilder.loadTexts: cDOTCpTable.setDescription('Provide a report of the current CP statistics\n                        on per node basis')
cDOTCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1), ).setIndexNames((1, "NETAPP-MIB", "cDOTCpNodeName"))
if mibBuilder.loadTexts: cDOTCpEntry.setStatus('current')
if mibBuilder.loadTexts: cDOTCpEntry.setDescription("Provide a report of the node's CP statistics")
cDOTCpNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 1), DisplayString())
if mibBuilder.loadTexts: cDOTCpNodeName.setStatus('current')
if mibBuilder.loadTexts: cDOTCpNodeName.setDescription('Node Name. Same as node name.')
cDOTCpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 2), TimeTicks64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpTime.setStatus('current')
if mibBuilder.loadTexts: cDOTCpTime.setDescription('The time (in hundredths of a second) since boot\n                        during which the system has had a consistency point\n                        (cp) operation in progress.')
cDOTCpFromTimerOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromTimerOps.setStatus('current')
if mibBuilder.loadTexts: cDOTCpFromTimerOps.setDescription('The number of consistency point operations since boot\n                        that were caused by timer.')
cDOTCpFromSnapshotOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromSnapshotOps.setStatus('current')
if mibBuilder.loadTexts: cDOTCpFromSnapshotOps.setDescription('The number of consistency point operations since boot\n                        that were caused by snapshot operation.')
cDOTCpFromLowWaterOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromLowWaterOps.setStatus('current')
if mibBuilder.loadTexts: cDOTCpFromLowWaterOps.setDescription('The number of consistency point operations since boot\n                        that were caused by low water mark.')
cDOTCpFromHighWaterOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromHighWaterOps.setStatus('current')
if mibBuilder.loadTexts: cDOTCpFromHighWaterOps.setDescription('The number of consistency point operations since boot\n                        that were caused by high water mark.')
cDOTCpFromLogFullOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromLogFullOps.setStatus('current')
if mibBuilder.loadTexts: cDOTCpFromLogFullOps.setDescription('The number of consistency point operations since boot\n                        that were caused by nv-log full.')
cDOTCpFromCpOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromCpOps.setStatus('current')
if mibBuilder.loadTexts: cDOTCpFromCpOps.setDescription('The number of back to back consistency point\n                        operations since boot.')
cDOTCpTotalOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpTotalOps.setStatus('current')
if mibBuilder.loadTexts: cDOTCpTotalOps.setDescription('The total number of consistency point operations\n                        since boot.')
cDOTCpFromFlushOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromFlushOps.setStatus('current')
if mibBuilder.loadTexts: cDOTCpFromFlushOps.setDescription('The number of consistency point operations since boot\n                        that were caused by flushing unlogged write data.')
cDOTCpFromSyncOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromSyncOps.setStatus('current')
if mibBuilder.loadTexts: cDOTCpFromSyncOps.setDescription('The number of consistency point operations since boot\n                        that were caused by file system sync requests.')
cDOTCpFromCpDeferredOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromCpDeferredOps.setStatus('current')
if mibBuilder.loadTexts: cDOTCpFromCpDeferredOps.setDescription('The number of back to back consistency point\n                        operations since boot that were deferred.')
cDOTCpFromLowDatavecsOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromLowDatavecsOps.setStatus('current')
if mibBuilder.loadTexts: cDOTCpFromLowDatavecsOps.setDescription('The number of consistency point operations since boot\n                        that were caused by low datavecs.')
cDOTCpFromLowMbufOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromLowMbufOps.setStatus('current')
if mibBuilder.loadTexts: cDOTCpFromLowMbufOps.setDescription('The number of consistency point operations since boot\n                        that were caused by low mbufs in mbuf pools.')
cDOTCpFromNvlogReplayTakeoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromNvlogReplayTakeoverTime.setStatus('current')
if mibBuilder.loadTexts: cDOTCpFromNvlogReplayTakeoverTime.setDescription('The number of consistency point operations since boot\n                        that were caused by nvlog replay takeover time.')
autosupportStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("smtpFailure", 2), ("postFailure", 3), ("smtpPostFailure", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportStatus.setStatus('current')
if mibBuilder.loadTexts: autosupportStatus.setDescription('An indication of the current status of\n\t\t\t auto support on the appliance. Describes\n\t\t\t the success or failure of most recent \n\t\t\t attempts to send auto supports.')
autosupportStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportStatusMessage.setStatus('current')
if mibBuilder.loadTexts: autosupportStatusMessage.setDescription('A string describing the auto support status,\n\t\t\tincluding a description of the condition (if\n\t\t\tany) that caused the status to be anything\n\t\t\tother than ok(1).')
autosupportSuccessfulSends = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportSuccessfulSends.setStatus('current')
if mibBuilder.loadTexts: autosupportSuccessfulSends.setDescription('Count of the number of auto support messages\n\t\t\t successfully sent since the last reset.')
autosupportFailedSends = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportFailedSends.setStatus('current')
if mibBuilder.loadTexts: autosupportFailedSends.setDescription('Count of the number of auto support messages\n\t\t\t not sent successfully since the last reset.')
curNfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1))
totNfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2))
nfsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 3))
rpcServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1))
nfsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2))
nfsPerClient = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3))
rpcCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcCalls.setStatus('current')
if mibBuilder.loadTexts: rpcCalls.setDescription('The total number of RPC calls received, since\n\t\t\t the last time the statistics were cleared.')
rpcBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcBadCalls.setStatus('current')
if mibBuilder.loadTexts: rpcBadCalls.setDescription('The total number of calls rejected by the RPC\n\t\t\t layer, since the last time the statistics were\n\t\t\t cleared.')
rpcNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcNullRecvs.setStatus('current')
if mibBuilder.loadTexts: rpcNullRecvs.setDescription('The number of times an RPC call was not available\n\t\t\t when it was thought to be received, since the\n\t\t\t last time the statistics were cleared.')
rpcBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcBadLens.setStatus('current')
if mibBuilder.loadTexts: rpcBadLens.setDescription('The number of RPC calls received with a length\n\t\t\t shorter than a minimum-sized RPC call, since the\n\t\t\t last time the statistics were cleared.')
rpcServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcServXDRCalls.setStatus('current')
if mibBuilder.loadTexts: rpcServXDRCalls.setDescription('The number of RPC calls received whose header\n\t\t\t could not be XDR decoded, since the last time\n\t\t\t the statistics were cleared.')
rcpTcpCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpCalls.setStatus('current')
if mibBuilder.loadTexts: rcpTcpCalls.setDescription('The total number of RPC calls received for the\n\t\t\t TCP protocol, since the last time the statistics\n\t\t\t were cleared.')
rcpTcpBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpBadCalls.setStatus('current')
if mibBuilder.loadTexts: rcpTcpBadCalls.setDescription('The total number of calls rejected by the RPC\n\t\t\t layer for the TCP protocol, since the last \n\t\t\t time the statistics were cleared.')
rcpTcpNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpNullRecvs.setStatus('current')
if mibBuilder.loadTexts: rcpTcpNullRecvs.setDescription('The number of times an RPC call for the TCP \n\t\t\t protocol was not available when it was thought \n\t\t\t to be received, since the last time the \n\t\t\t statistics were cleared.')
rcpTcpBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpBadLens.setStatus('current')
if mibBuilder.loadTexts: rcpTcpBadLens.setDescription('The number of RPC calls for the TCP protocol\n\t\t\t received with a length shorter than a minimum-sized \n\t\t\t RPC call, since the last time the statistics \n\t\t\t were cleared.')
rcpTcpServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpServXDRCalls.setStatus('current')
if mibBuilder.loadTexts: rcpTcpServXDRCalls.setDescription('The number of RPC calls for the TCP protocol\n\t\t\t received whose header could not be XDR decoded, \n\t\t\t since the last time the statistics were cleared.')
rpcUdpCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpCalls.setStatus('current')
if mibBuilder.loadTexts: rpcUdpCalls.setDescription('The total number of RPC calls received for the\n\t\t\t UDP protocol, since the last time the statistics\n\t\t\t were cleared.')
rpcUdpBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpBadCalls.setStatus('current')
if mibBuilder.loadTexts: rpcUdpBadCalls.setDescription('The total number of calls rejected by the RPC\n\t\t\t layer for the UDP protocol, since the last \n\t\t\t time the statistics were cleared.')
rpcUdpNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpNullRecvs.setStatus('current')
if mibBuilder.loadTexts: rpcUdpNullRecvs.setDescription('The number of times an RPC call for the UDP \n\t\t\t protocol was not available when it was thought \n\t\t\t to be received, since the last time the \n\t\t\t statistics were cleared.')
rpcUdpBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpBadLens.setStatus('current')
if mibBuilder.loadTexts: rpcUdpBadLens.setDescription('The number of RPC calls for the UDP protocol\n\t\t\t received with a length shorter than a minimum-sized \n\t\t\t RPC call, since the last time the statistics \n\t\t\t were cleared.')
rpcUdpServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpServXDRCalls.setStatus('current')
if mibBuilder.loadTexts: rpcUdpServXDRCalls.setDescription('The number of RPC calls for the UDP protocol\n\t\t\t received whose header could not be XDR decoded, \n\t\t\t since the last time the statistics were cleared.')
nfsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCalls.setStatus('current')
if mibBuilder.loadTexts: nfsCalls.setDescription('The total number of NFS calls received, since\n\t\t\t the last time the statistics were cleared.')
nfsServBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServBadCalls.setStatus('current')
if mibBuilder.loadTexts: nfsServBadCalls.setDescription('The total number of received NFS calls rejected,\n\t\t\t since the last time the statistics were cleared.')
nfsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3))
nfsV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4))
replyCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5))
nfsrwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6))
v2Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1))
v2Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2))
v2CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3))
v2CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4))
v2cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cNulls.setStatus('current')
if mibBuilder.loadTexts: v2cNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure,\n\t\t\t since the last time the statistics were cleared.')
v2cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cGetattrs.setStatus('current')
if mibBuilder.loadTexts: v2cGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cSetattrs.setStatus('current')
if mibBuilder.loadTexts: v2cSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRoots.setStatus('current')
if mibBuilder.loadTexts: v2cRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cLookups.setStatus('current')
if mibBuilder.loadTexts: v2cLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReadlinks.setStatus('current')
if mibBuilder.loadTexts: v2cReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure, since the last time the\n\t\t\t statistics were cleared.')
v2cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReads.setStatus('current')
if mibBuilder.loadTexts: v2cReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cWrcaches.setStatus('current')
if mibBuilder.loadTexts: v2cWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cWrites.setStatus('current')
if mibBuilder.loadTexts: v2cWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cCreates.setStatus('current')
if mibBuilder.loadTexts: v2cCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRemoves.setStatus('current')
if mibBuilder.loadTexts: v2cRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRenames.setStatus('current')
if mibBuilder.loadTexts: v2cRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cLinks.setStatus('current')
if mibBuilder.loadTexts: v2cLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cSymlinks.setStatus('current')
if mibBuilder.loadTexts: v2cSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic Link)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cMkdirs.setStatus('current')
if mibBuilder.loadTexts: v2cMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRmdirs.setStatus('current')
if mibBuilder.loadTexts: v2cRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReaddirs.setStatus('current')
if mibBuilder.loadTexts: v2cReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cStatfss.setStatus('current')
if mibBuilder.loadTexts: v2cStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure, since the last time\n\t\t\t the statistics were cleared.')
v2pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pNulls.setStatus('current')
if mibBuilder.loadTexts: v2pNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure\n\t\t\t as a percentage of total NFS calls received,\n\t\t\t since the last time the statistics were cleared.')
v2pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pGetattrs.setStatus('current')
if mibBuilder.loadTexts: v2pGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pSetattrs.setStatus('current')
if mibBuilder.loadTexts: v2pSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRoots.setStatus('current')
if mibBuilder.loadTexts: v2pRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pLookups.setStatus('current')
if mibBuilder.loadTexts: v2pLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReadlinks.setStatus('current')
if mibBuilder.loadTexts: v2pReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure as a percentage of total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v2pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReads.setStatus('current')
if mibBuilder.loadTexts: v2pReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pWrcaches.setStatus('current')
if mibBuilder.loadTexts: v2pWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pWrites.setStatus('current')
if mibBuilder.loadTexts: v2pWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pCreates.setStatus('current')
if mibBuilder.loadTexts: v2pCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRemoves.setStatus('current')
if mibBuilder.loadTexts: v2pRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRenames.setStatus('current')
if mibBuilder.loadTexts: v2pRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pLinks.setStatus('current')
if mibBuilder.loadTexts: v2pLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pSymlinks.setStatus('current')
if mibBuilder.loadTexts: v2pSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic Link)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pMkdirs.setStatus('current')
if mibBuilder.loadTexts: v2pMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRmdirs.setStatus('current')
if mibBuilder.loadTexts: v2pRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReaddirs.setStatus('current')
if mibBuilder.loadTexts: v2pReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pStatfss.setStatus('current')
if mibBuilder.loadTexts: v2pStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure as a percentage of\n\t\t\t total NFS calls received, since the last\n\t\t\t time the statistics were cleared.')
v2ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccNulls.setStatus('current')
if mibBuilder.loadTexts: v2ccNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v2ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccGetattrs.setStatus('current')
if mibBuilder.loadTexts: v2ccGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccSetattrs.setStatus('current')
if mibBuilder.loadTexts: v2ccSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRoots.setStatus('current')
if mibBuilder.loadTexts: v2ccRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccLookups.setStatus('current')
if mibBuilder.loadTexts: v2ccLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReadlinks.setStatus('current')
if mibBuilder.loadTexts: v2ccReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReads.setStatus('current')
if mibBuilder.loadTexts: v2ccReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccWrcaches.setStatus('current')
if mibBuilder.loadTexts: v2ccWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccWrites.setStatus('current')
if mibBuilder.loadTexts: v2ccWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccCreates.setStatus('current')
if mibBuilder.loadTexts: v2ccCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRemoves.setStatus('current')
if mibBuilder.loadTexts: v2ccRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRenames.setStatus('current')
if mibBuilder.loadTexts: v2ccRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccLinks.setStatus('current')
if mibBuilder.loadTexts: v2ccLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccSymlinks.setStatus('current')
if mibBuilder.loadTexts: v2ccSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic Link)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccMkdirs.setStatus('current')
if mibBuilder.loadTexts: v2ccMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRmdirs.setStatus('current')
if mibBuilder.loadTexts: v2ccRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReaddirs.setStatus('current')
if mibBuilder.loadTexts: v2ccReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccStatfss.setStatus('current')
if mibBuilder.loadTexts: v2ccStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t since the last time the statistics were cleared.')
v2cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpNulls.setStatus('current')
if mibBuilder.loadTexts: v2cpNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last time the\n\t\t\t statistics were cleared.')
v2cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpGetattrs.setStatus('current')
if mibBuilder.loadTexts: v2cpGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpSetattrs.setStatus('current')
if mibBuilder.loadTexts: v2cpSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRoots.setStatus('current')
if mibBuilder.loadTexts: v2cpRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpLookups.setStatus('current')
if mibBuilder.loadTexts: v2cpLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReadlinks.setStatus('current')
if mibBuilder.loadTexts: v2cpReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReads.setStatus('current')
if mibBuilder.loadTexts: v2cpReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpWrcaches.setStatus('current')
if mibBuilder.loadTexts: v2cpWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpWrites.setStatus('current')
if mibBuilder.loadTexts: v2cpWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpCreates.setStatus('current')
if mibBuilder.loadTexts: v2cpCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRemoves.setStatus('current')
if mibBuilder.loadTexts: v2cpRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRenames.setStatus('current')
if mibBuilder.loadTexts: v2cpRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpLinks.setStatus('current')
if mibBuilder.loadTexts: v2cpLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpSymlinks.setStatus('current')
if mibBuilder.loadTexts: v2cpSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpMkdirs.setStatus('current')
if mibBuilder.loadTexts: v2cpMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRmdirs.setStatus('current')
if mibBuilder.loadTexts: v2cpRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReaddirs.setStatus('current')
if mibBuilder.loadTexts: v2cpReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpStatfss.setStatus('current')
if mibBuilder.loadTexts: v2cpStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure, that did not result\n\t\t\t in the filesystem blocking to read from\n\t\t\t disk, as a percentage of the total number\n\t\t\t of calls received for this procedure, since\n\t\t\t the last time the statistics were cleared.')
v3Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1))
v3Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2))
v3CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3))
v3CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4))
v3cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cNulls.setStatus('current')
if mibBuilder.loadTexts: v3cNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t since the last time the statistics were cleared.')
v3cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cGetattrs.setStatus('current')
if mibBuilder.loadTexts: v3cGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cSetattrs.setStatus('current')
if mibBuilder.loadTexts: v3cSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cLookups.setStatus('current')
if mibBuilder.loadTexts: v3cLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cAccesss.setStatus('current')
if mibBuilder.loadTexts: v3cAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access Permission)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReadlinks.setStatus('current')
if mibBuilder.loadTexts: v3cReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReads.setStatus('current')
if mibBuilder.loadTexts: v3cReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cWrites.setStatus('current')
if mibBuilder.loadTexts: v3cWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cCreates.setStatus('current')
if mibBuilder.loadTexts: v3cCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cMkdirs.setStatus('current')
if mibBuilder.loadTexts: v3cMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cSymlinks.setStatus('current')
if mibBuilder.loadTexts: v3cSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cMknods.setStatus('current')
if mibBuilder.loadTexts: v3cMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRemoves.setStatus('current')
if mibBuilder.loadTexts: v3cRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRmdirs.setStatus('current')
if mibBuilder.loadTexts: v3cRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRenames.setStatus('current')
if mibBuilder.loadTexts: v3cRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, since the last time\n\t\t\t the statistics were cleared.')
v3cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cLinks.setStatus('current')
if mibBuilder.loadTexts: v3cLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReaddirs.setStatus('current')
if mibBuilder.loadTexts: v3cReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From Directory)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: v3cReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIRPLUS (Extended Read\n\t\t\t from Directory) procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cFsstats.setStatus('current')
if mibBuilder.loadTexts: v3cFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, since the\n\t\t\t last time the statistics were cleared.')
v3cFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cFsinfos.setStatus('current')
if mibBuilder.loadTexts: v3cFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File System\n\t\t\t Information) procedure, since the last time\n\t\t\t the statistics were cleared.')
v3cPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cPathconfs.setStatus('current')
if mibBuilder.loadTexts: v3cPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, since the last time\n\t\t\t the statistics were cleared.')
v3cCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cCommits.setStatus('current')
if mibBuilder.loadTexts: v3cCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, since\n\t\t\t the last time the statistics were cleared.')
v3pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pNulls.setStatus('current')
if mibBuilder.loadTexts: v3pNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t as a percentage of the total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v3pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pGetattrs.setStatus('current')
if mibBuilder.loadTexts: v3pGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pSetattrs.setStatus('current')
if mibBuilder.loadTexts: v3pSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pLookups.setStatus('current')
if mibBuilder.loadTexts: v3pLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pAccesss.setStatus('current')
if mibBuilder.loadTexts: v3pAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access\n\t\t\t Permission) procedure, as a percentage of\n\t\t\t the total NFS calls received, since the\n\t\t\t last time the statistics were cleared.')
v3pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReadlinks.setStatus('current')
if mibBuilder.loadTexts: v3pReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, as a percentage of the total\n\t\t\t NFS calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReads.setStatus('current')
if mibBuilder.loadTexts: v3pReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pWrites.setStatus('current')
if mibBuilder.loadTexts: v3pWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pCreates.setStatus('current')
if mibBuilder.loadTexts: v3pCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pMkdirs.setStatus('current')
if mibBuilder.loadTexts: v3pMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pSymlinks.setStatus('current')
if mibBuilder.loadTexts: v3pSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, as a percentage of the total\n\t\t\t NFS calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pMknods.setStatus('current')
if mibBuilder.loadTexts: v3pMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, as a percentage of the\n\t\t\t total NFS calls received, since the last\n\t\t\t time the statistics were cleared.')
v3pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRemoves.setStatus('current')
if mibBuilder.loadTexts: v3pRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRmdirs.setStatus('current')
if mibBuilder.loadTexts: v3pRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRenames.setStatus('current')
if mibBuilder.loadTexts: v3pRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, as a percentage of\n\t\t\t the total NFS calls received, since the\n\t\t\t last time the statistics were cleared.')
v3pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pLinks.setStatus('current')
if mibBuilder.loadTexts: v3pLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, as a percentage of\n\t\t\t the total NFS calls received, since the\n\t\t\t last time the statistics were cleared.')
v3pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReaddirs.setStatus('current')
if mibBuilder.loadTexts: v3pReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From Directory)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: v3pReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIRPLUS (Extended Read\n\t\t\t from Directory) procedure, as a percentage\n\t\t\t of the total NFS calls received, since the\n\t\t\t last time the statistics were cleared.')
v3pFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pFsstats.setStatus('current')
if mibBuilder.loadTexts: v3pFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, as a percentage\n\t\t\t of the total NFS calls received, since the\n\t\t\t last time the statistics were cleared.')
v3pFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pFsinfos.setStatus('current')
if mibBuilder.loadTexts: v3pFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File System\n\t\t\t Information) procedure, as a percentage of the\n\t\t\t total NFS calls received, since the last time\n\t\t\t the statistics were cleared.')
v3pPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pPathconfs.setStatus('current')
if mibBuilder.loadTexts: v3pPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, as a percentage of the\n\t\t\t total NFS calls received, since the last time\n\t\t\t the statistics were cleared.')
v3pCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pCommits.setStatus('current')
if mibBuilder.loadTexts: v3pCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, as a\n\t\t\t percentage of the total NFS calls received,\n\t\t\t since the last time the statistics were cleared.')
v3ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccNulls.setStatus('current')
if mibBuilder.loadTexts: v3ccNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccGetattrs.setStatus('current')
if mibBuilder.loadTexts: v3ccGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccSetattrs.setStatus('current')
if mibBuilder.loadTexts: v3ccSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccLookups.setStatus('current')
if mibBuilder.loadTexts: v3ccLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccAccesss.setStatus('current')
if mibBuilder.loadTexts: v3ccAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access Permission)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReadlinks.setStatus('current')
if mibBuilder.loadTexts: v3ccReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReads.setStatus('current')
if mibBuilder.loadTexts: v3ccReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccWrites.setStatus('current')
if mibBuilder.loadTexts: v3ccWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccCreates.setStatus('current')
if mibBuilder.loadTexts: v3ccCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccMkdirs.setStatus('current')
if mibBuilder.loadTexts: v3ccMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccSymlinks.setStatus('current')
if mibBuilder.loadTexts: v3ccSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccMknods.setStatus('current')
if mibBuilder.loadTexts: v3ccMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRemoves.setStatus('current')
if mibBuilder.loadTexts: v3ccRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRmdirs.setStatus('current')
if mibBuilder.loadTexts: v3ccRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRenames.setStatus('current')
if mibBuilder.loadTexts: v3ccRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccLinks.setStatus('current')
if mibBuilder.loadTexts: v3ccLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReaddirs.setStatus('current')
if mibBuilder.loadTexts: v3ccReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From\n\t\t\t Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: v3ccReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIRPLUS (Extended Read\n\t\t\t from Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccFsstats.setStatus('current')
if mibBuilder.loadTexts: v3ccFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, that did not\n\t\t\t result in the filesystem blocking to read\n\t\t\t from disk, since the last time the statistics\n\t\t\t were cleared.')
v3ccFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccFsinfos.setStatus('current')
if mibBuilder.loadTexts: v3ccFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File\n\t\t\t System Information) procedure, that did not\n\t\t\t result in the filesystem blocking to read\n\t\t\t from disk, since the last time the statistics\n\t\t\t were cleared.')
v3ccPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccPathconfs.setStatus('current')
if mibBuilder.loadTexts: v3ccPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t since the last time the statistics were cleared.')
v3ccCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccCommits.setStatus('current')
if mibBuilder.loadTexts: v3ccCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, that did\n\t\t\t not result in the filesystem blocking to read\n\t\t\t from disk, since the last time the statistics\n\t\t\t were cleared.')
v3cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpNulls.setStatus('current')
if mibBuilder.loadTexts: v3cpNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpGetattrs.setStatus('current')
if mibBuilder.loadTexts: v3cpGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpSetattrs.setStatus('current')
if mibBuilder.loadTexts: v3cpSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpLookups.setStatus('current')
if mibBuilder.loadTexts: v3cpLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cpAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpAccesss.setStatus('current')
if mibBuilder.loadTexts: v3cpAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access Permission)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReadlinks.setStatus('current')
if mibBuilder.loadTexts: v3cpReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReads.setStatus('current')
if mibBuilder.loadTexts: v3cpReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpWrites.setStatus('current')
if mibBuilder.loadTexts: v3cpWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpCreates.setStatus('current')
if mibBuilder.loadTexts: v3cpCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpMkdirs.setStatus('current')
if mibBuilder.loadTexts: v3cpMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpSymlinks.setStatus('current')
if mibBuilder.loadTexts: v3cpSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpMknods.setStatus('current')
if mibBuilder.loadTexts: v3cpMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRemoves.setStatus('current')
if mibBuilder.loadTexts: v3cpRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRmdirs.setStatus('current')
if mibBuilder.loadTexts: v3cpRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRenames.setStatus('current')
if mibBuilder.loadTexts: v3cpRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpLinks.setStatus('current')
if mibBuilder.loadTexts: v3cpLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReaddirs.setStatus('current')
if mibBuilder.loadTexts: v3cpReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: v3cpReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIRPLUS (Extended Read\n\t\t\t from Directory) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpFsstats.setStatus('current')
if mibBuilder.loadTexts: v3cpFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, that did not\n\t\t\t result in the filesystem blocking to read from\n\t\t\t disk, as a percentage of the total number of\n\t\t\t calls received for this procedure, since the\n\t\t\t last time the statistics were cleared.')
v3cpFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpFsinfos.setStatus('current')
if mibBuilder.loadTexts: v3cpFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File System\n\t\t\t Information) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpPathconfs.setStatus('current')
if mibBuilder.loadTexts: v3cpPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpCommits.setStatus('current')
if mibBuilder.loadTexts: v3cpCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, that\n\t\t\t did not result in the filesystem blocking to\n\t\t\t read from disk, as a percentage of the total\n\t\t\t number of calls received for this procedure,\n\t\t\t since the last time the statistics were cleared.')
rcInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcInProgressHits.setStatus('current')
if mibBuilder.loadTexts: rcInProgressHits.setDescription('The number of NFS requests that were dropped,\n\t\t\t for calls already in progress, since the last\n\t\t\t time the statistics were cleared.')
rcDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: rcDelayHits.setDescription('The number of NFS requests that were dropped,\n\t\t\t for replies already generated within a short\n\t\t\t interval, since the last time the statistics\n\t\t\t were cleared. These stats are deprecated.\n\t\t\t A value of zero will always be returned\n\t\t\t for these stats.')
rcMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMisses.setStatus('current')
if mibBuilder.loadTexts: rcMisses.setDescription('The number of NFS requests received for which\n\t\t\t there were no corresponding entries already in\n\t\t\t the Reply Cache, since the last time the\n\t\t\t statistics were cleared.')
rcNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcNonIdemDoneHits.setStatus('current')
if mibBuilder.loadTexts: rcNonIdemDoneHits.setDescription('The number of NFS requests received that\n\t\t\t resulted in replies being replayed from\n\t\t\t the Reply Cache, since the last time the\n\t\t\t statistics were cleared.')
rcNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcNonIdemNotDoneHits.setStatus('current')
if mibBuilder.loadTexts: rcNonIdemNotDoneHits.setDescription('The number of NFS requests received for calls\n\t\t\t that resulted in this request being processed\n\t\t\t as a new request even when a corresponding\n\t\t\t entry existed in the Reply Cache, since the\n\t\t\t last time the statistics were cleared.')
rcTcpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpInProgressHits.setStatus('current')
if mibBuilder.loadTexts: rcTcpInProgressHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the TCP protocol, for calls already in\n\t\t\t progress, since the last time the statistics\n\t\t\t were cleared.')
rcTcpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: rcTcpDelayHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the TCP protocol, for replies already\n\t\t\t generated within a short interval, since the\n\t\t\t last time the statistics were cleared. These \n\t\t\t stats are deprecated. A value of zero will \n\t\t\t always be returned for these stats.')
rcTcpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpMisses.setStatus('current')
if mibBuilder.loadTexts: rcTcpMisses.setDescription('The number of NFS requests received for the\n\t\t\t TCP protocol for which there were no\n\t\t\t corresponding entries already in the Reply\n\t\t\t Cache, since the last time the statistics\n\t\t\t were cleared.')
rcTcpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpNonIdemDoneHits.setStatus('current')
if mibBuilder.loadTexts: rcTcpNonIdemDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t TCP protocol that resulted in replies being\n\t\t\t replayed from the Reply Cache, since the last\n\t\t\t time the statistics were cleared.')
rcTcpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpNonIdemNotDoneHits.setStatus('current')
if mibBuilder.loadTexts: rcTcpNonIdemNotDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t TCP protocol for calls that resulted in this\n\t\t\t request being processed as a new request even\n\t\t\t when a corresponding entry existed in the Reply\n\t\t\t Cache, since the last time the statistics were\n\t\t\t cleared.')
rcUdpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpInProgressHits.setStatus('current')
if mibBuilder.loadTexts: rcUdpInProgressHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the UDP protocol, for calls already in\n\t\t\t progress, since the last time the statistics\n\t\t\t were cleared.')
rcUdpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: rcUdpDelayHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the UDP protocol, for replies already\n\t\t\t generated within a short interval, since the\n\t\t\t last time the statistics were cleared. These \n\t\t\t stats are deprecated. A value of zero will \n\t\t\t always be returned for these stats.')
rcUdpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpMisses.setStatus('current')
if mibBuilder.loadTexts: rcUdpMisses.setDescription('The number of NFS requests received for the\n\t\t\t UDP protocol for which there were no\n\t\t\t corresponding entries already in the Reply\n\t\t\t Cache, since the last time the statistics\n\t\t\t were cleared.')
rcUdpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpNonIdemDoneHits.setStatus('current')
if mibBuilder.loadTexts: rcUdpNonIdemDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t UDP protocol that resulted in replies being\n\t\t\t replayed from the Reply Cache, since the last\n\t\t\t time the statistics were cleared.')
rcUdpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpNonIdemNotDoneHits.setStatus('current')
if mibBuilder.loadTexts: rcUdpNonIdemNotDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t UDP protocol for calls that resulted in this\n\t\t\t request being processed as a new request even\n\t\t\t when a corresponding entry existed in the Reply\n\t\t\t Cache, since the last time the statistics were\n\t\t\t cleared.')
v2ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1))
v2WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2))
v3ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3))
v3WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4))
v2Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read512Calls.setStatus('current')
if mibBuilder.loadTexts: v2Read512Calls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 0-511 bytes.')
v2Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read1KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read1KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 512-1023 bytes.')
v2Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read2KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read2KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 1K-2047 bytes.')
v2Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read4KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read4KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 2K-4095 bytes.')
v2Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read8KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read8KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 4K-8191 bytes.')
v2Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read16KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read16KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 8K-16383 bytes.')
v2Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read32KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read32KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 16K-32767 bytes.')
v2Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read64KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read64KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 32K-65535 bytes.')
v2Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read128KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read128KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 64K-131071 bytes.')
v2Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write512Calls.setStatus('current')
if mibBuilder.loadTexts: v2Write512Calls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 0-511 bytes.')
v2Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write1KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write1KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 512-1023 bytes.')
v2Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write2KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write2KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 1K-2047 bytes.')
v2Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write4KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write4KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 2K-4095 bytes.')
v2Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write8KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write8KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 4K-8191 bytes.')
v2Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write16KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write16KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 8K-16383 bytes.')
v2Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write32KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write32KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 16K-32767 bytes.')
v2Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write64KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write64KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 32K-65535 bytes.')
v2Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write128KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write128KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 64K-131071 bytes.')
v3Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read512Calls.setStatus('current')
if mibBuilder.loadTexts: v3Read512Calls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n                        with request sizes between 0-511 bytes.')
v3Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read1KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read1KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 512-1023 bytes.')
v3Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read2KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read2KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 1K-2047 bytes.')
v3Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read4KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read4KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 2K-4095 bytes.')
v3Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read8KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read8KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 4K-8191 bytes.')
v3Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read16KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read16KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 8K-16383 bytes.')
v3Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read32KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read32KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 16K-32767 bytes.')
v3Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read64KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read64KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 32K-65535 bytes.')
v3Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read128KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read128KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 64K-131071 bytes.')
v3Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write512Calls.setStatus('current')
if mibBuilder.loadTexts: v3Write512Calls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 0-511 bytes.')
v3Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write1KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write1KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 512-1023 bytes.')
v3Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write2KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write2KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 1K-2047 bytes.')
v3Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write4KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write4KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 2K-4095 bytes.')
v3Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write8KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write8KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 4K-8191 bytes.')
v3Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write16KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write16KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 8K-16383 bytes.')
v3Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write32KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write32KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 16K-32767 bytes.')
v3Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write64KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write64KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 32K-65535 bytes.')
v3Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write128KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write128KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 64K-131071 bytes.')
pclTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1), )
if mibBuilder.loadTexts: pclTable.setStatus('current')
if mibBuilder.loadTexts: pclTable.setDescription('Provide a report of per-client NFS statistics\n\t\t\t since the last time the statistics were cleared.')
pclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "pclIpAddr"))
if mibBuilder.loadTexts: pclEntry.setStatus('current')
if mibBuilder.loadTexts: pclEntry.setDescription('Provide a report of NFS statistics for the\n\t\t\t referenced NFS client since the last time the\n\t\t\t statistics were cleared.')
pclIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclIpAddr.setStatus('current')
if mibBuilder.loadTexts: pclIpAddr.setDescription('The IP address of the referenced client.')
pclRpcCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcCalls.setStatus('current')
if mibBuilder.loadTexts: pclRpcCalls.setDescription('The total number of RPC calls received from\n\t\t\t the referenced client, since the last time the\n\t\t\t statistics were cleared.')
pclRpcBadCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcBadCalls.setStatus('current')
if mibBuilder.loadTexts: pclRpcBadCalls.setDescription('The total number of calls received from the\n\t\t\t referenced client that were rejected by the\n\t\t\t RPC layer, since the last time the\n\t\t\t statistics were cleared.')
pclRpcNullRecvs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcNullRecvs.setStatus('current')
if mibBuilder.loadTexts: pclRpcNullRecvs.setDescription('The number of times an RPC call was not available\n\t\t\t when it was thought to be received from\n\t\t\t referenced client, since the last time the\n\t\t\t statistics were cleared.')
pclRpcBadLens = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcBadLens.setStatus('current')
if mibBuilder.loadTexts: pclRpcBadLens.setDescription('The number of RPC calls received from the\n\t\t\t referenced client with a length shorter\n\t\t\t than a minimum-sized RPC call, since the\n\t\t\t last time the statistics were cleared.')
pclRpcServXDRCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcServXDRCalls.setStatus('current')
if mibBuilder.loadTexts: pclRpcServXDRCalls.setDescription('The number of RPC calls received from the\n\t\t\t    referenced client whose header could not\n\t\t\t    be XDR decoded, since the last time the\n\t\t\t    statistics were cleared.')
pclNfsCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsCalls.setDescription('The total number of NFS calls received from\n\t\t\t    the referenced client, since the last time\n\t\t\t    the statistics were cleared.')
pclNfsServBadCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsServBadCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsServBadCalls.setDescription('The total number of NFS calls received from\n\t\t\t    the referenced client that were rejected, since\n\t\t\t    the last time the statistics were cleared.')
pclNfsV2Nulls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Nulls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Nulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_NULL\n\t\t\t (Do Nothing) procedure, since the last time the\n\t\t\t statistics were cleared.')
pclNfsV2Getattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Getattrs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Getattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_GETATTR\n\t\t\t (Get File Attributes) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Setattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Setattrs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Setattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_SETATTR\n\t\t\t (Set File Attributes) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Roots = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Roots.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Roots.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_ROOT\n\t\t\t (Get Filesystem Root) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Lookups = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Lookups.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Lookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_LOOKUP\n\t\t\t (Look Up File Name) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Readlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Readlinks.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Readlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t  from the referenced client for the NFSPROC_READLINK\n\t\t\t  (Read From Symbolic Link) procedure, since the last\n\t\t\t  time the statistics were cleared.')
pclNfsV2Reads = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Reads.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Reads.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_READ\n\t\t\t (Read From File) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Wrcaches = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Wrcaches.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Wrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_WRITECACHE\n\t\t\t (Write to Cache) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Writes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Writes.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Writes.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_WRITE\n\t\t\t (Write to File) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Creates = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Creates.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Creates.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_CREATE\n\t\t\t (Create File) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Removes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Removes.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Removes.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_REMOVE\n\t\t\t (Remove File) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Renames = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Renames.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Renames.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_RENAME\n\t\t\t (Rename File) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Links = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Links.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Links.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_LINK\n\t\t\t (Create Link to File) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Symlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Symlinks.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Symlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_SYMLINK\n\t\t\t (Create Symbolic Link) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Mkdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Mkdirs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Mkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_MKDIR\n\t\t\t (Create Directory) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Rmdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Rmdirs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Rmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_RMDIR\n\t\t\t (Remove Directory) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Readdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Readdirs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Readdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_READDIR\n\t\t\t (Read From Directory) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Statfss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Statfss.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Statfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_STATFS\n\t\t\t (Get Filesystem Attributes) procedure, since the\n\t\t\t last time the statistics were cleared.')
pclNfsV3Nulls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Nulls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Nulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_NULL\n\t\t\t (Do Nothing) procedure, since the last time the\n\t\t\t statistics were cleared.')
pclNfsV3Getattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Getattrs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Getattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_GETATTR\n\t\t\t (Get File Attributes) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV3Setattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Setattrs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Setattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_SETATTR\n\t\t\t (Set File Attributes) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV3Lookups = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Lookups.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Lookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_LOOKUP\n\t\t\t (Lookup Filename) procedure, since the last time\n\t\t\t the statistics were cleared.')
pclNfsV3Accesss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Accesss.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Accesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_ACCESS\n\t\t\t (Check Access Permission) procedure, since the\n\t\t\t last time the statistics were cleared.')
pclNfsV3Readlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Readlinks.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Readlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_READLINK\n\t\t\t (Read from Symbolic Link) procedure, since the\n\t\t\t last time the statistics were cleared.')
pclNfsV3Reads = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Reads.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Reads.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_READ\n\t\t\t (Read From File) procedure, since the last time\n\t\t\t the statistics were cleared.')
pclNfsV3Writes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Writes.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Writes.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_WRITE\n\t\t\t (Write to File) procedure, since the last time\n\t\t\t the statistics were cleared.')
pclNfsV3Creates = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Creates.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Creates.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_CREATE\n\t\t\t (Create a File) procedure, since the last time\n\t\t\t the statistics were cleared.')
pclNfsV3Mkdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Mkdirs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Mkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_MKDIR\n\t\t\t (Create a Directory) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV3Symlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Symlinks.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Symlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_SYMLINK\n\t\t\t (Create a Symbolic Link) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV3Mknods = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Mknods.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Mknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_MKNOD\n\t\t\t (Create a Special Device) procedure, since the\n\t\t\t last time the statistics were cleared.')
pclNfsV3Removes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Removes.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Removes.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_REMOVE\n\t\t\t (Remove a File) procedure, since the last time\n\t\t\t the statistics were cleared.')
pclNfsV3Rmdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Rmdirs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Rmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_RMDIR\n\t\t\t (Remove a Directory) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV3Renames = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Renames.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Renames.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_RENAME\n\t\t\t (Rename a File or Directory) procedure, since the\n\t\t\t last time the statistics were cleared.')
pclNfsV3Links = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Links.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Links.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_LINK\n\t\t\t (Create Link to an Object) procedure, since the\n\t\t\t last time the statistics were cleared.')
pclNfsV3Readdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Readdirs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Readdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_READDIR\n\t\t\t (Read From Directory) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV3ReaddirPluss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3ReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t      from the referenced client for the\n\t\t\t      NFSPROC3_READDIRPLUS (Extended Read from\n\t\t\t      Directory) procedure, since the last time\n\t\t\t      the statistics were cleared.')
pclNfsV3Fsstats = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Fsstats.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Fsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_FSSTAT\n\t\t\t (Get Dynamic File System Information) procedure,\n\t\t\t since the last time the statistics were cleared.')
pclNfsV3Fsinfos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Fsinfos.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Fsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_FSINFO\n\t\t\t (Get Static File System Information) procedure,\n\t\t\t since the last time the statistics were cleared.')
pclNfsV3Pathconfs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Pathconfs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Pathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t   from the referenced client for the NFSPROC3_PATHCONF\n\t\t\t   (Retrieve POSIX Information) procedure, since the\n\t\t\t   last time the statistics were cleared.')
pclNfsV3Commits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Commits.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Commits.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_COMMIT\n\t\t\t (Commit Cached Data on a Server to Stable Storage)\n\t\t\t procedure, since the last time the statistics were\n\t\t\t cleared.')
pclPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclPerCent.setStatus('current')
if mibBuilder.loadTexts: pclPerCent.setDescription('The number of the total NFS calls for the\n\t\t\t\t referenced client as a percentage of the\n\t\t\t\t total NFS calls received from all\n\t\t\t\t clients, since the last time the\n\t\t\t\t statistics were cleared.')
pclNfsV2NullPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2NullPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2NullPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_NULL (Do Nothing) procedure,\n\t\t\t\t as a percentage of the total calls\n\t\t\t\t received from this client, since the\n\t\t\t\t last time the statistics were cleared.')
pclNfsV2GetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2GetattrPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2GetattrPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2SetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2SetattrPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2SetattrPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2RootPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RootPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2RootPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2LookupPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2LookupPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2LookupPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2ReadlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReadlinkPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2ReadlinkPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_READLINK (Read From Symbolic\n\t\t\t\t Link) procedure, as a percentage of the\n\t\t\t\t total calls received from this client,\n\t\t\t\t since the last time the statistics were\n\t\t\t\t cleared.')
pclNfsV2ReadPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReadPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2ReadPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_READ (Read From File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2WrcachePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2WrcachePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2WrcachePerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2WritePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2WritePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2WritePerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_WRITE (Write to File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2CreatePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2CreatePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2CreatePerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_CREATE (Create File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2RemovePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RemovePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2RemovePerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_REMOVE (Remove File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2RenamePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RenamePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2RenamePerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_RENAME (Rename File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2LinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2LinkPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2LinkPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_LINK (Create Link to File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2SymlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2SymlinkPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2SymlinkPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_SYMLINK (Create Symbolic Link)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2MkdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2MkdirPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2MkdirPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_MKDIR (Create Directory)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2RmdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RmdirPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2RmdirPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_RMDIR (Remove Directory)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2ReaddirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReaddirPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2ReaddirPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_READDIR (Read From Directory)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2StatfsPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2StatfsPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2StatfsPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_STATFS (Get Filesystem\n\t\t\t\t Attributes) procedure, as a percentage\n\t\t\t\t of the total calls received from this\n\t\t\t\t client, since the last time the\n\t\t\t\t statistics were cleared.')
pclNfsV3NullPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3NullPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3NullPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_NULL (Do Nothing) \n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3GetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3GetattrPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3GetattrPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3SetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3SetattrPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3SetattrPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3LookupPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3LookupPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3LookupPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3AccessPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3AccessPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3AccessPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_ACCESS (Check Access Permission)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3ReadlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReadlinkPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3ReadlinkPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t\t Link) procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3ReadPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReadPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3ReadPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_READ (Read From File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3WritePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3WritePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3WritePerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_WRITE (Write to File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3CreatePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3CreatePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3CreatePerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_CREATE (Create a File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3MkdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3MkdirPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3MkdirPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3SymlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3SymlinkPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3SymlinkPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t\t Link) procedure, as a percentage of the\n\t\t\t\t total calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3MknodPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3MknodPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3MknodPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_MKNOD (Create a Special\n\t\t\t\t Device) procedure, as a percentage of the\n\t\t\t\t total calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3RemovePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RemovePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3RemovePerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_REMOVE (Remove a File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3RmdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RmdirPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3RmdirPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3RenamePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RenamePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3RenamePerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_RENAME (Rename a File or\n\t\t\t\t Directory) procedure, as a percentage of\n\t\t\t\t the total calls received from this client,\n\t\t\t\t since the last time the statistics were\n\t\t\t\t cleared.')
pclNfsV3LinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3LinkPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3LinkPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_LINK (Create Link to an Object) \n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3ReaddirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3ReaddirPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_READDIR (Read From Directory)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3ReaddirPlusPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPlusPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3ReaddirPlusPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_READDIRPLUS (Extended Read from\n\t\t\t\t Directory) procedure, as a percentage of the\n\t\t\t\t total calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3FsstatPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3FsstatPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3FsstatPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t\t System Information) procedure, as a\n\t\t\t\t percentage of the total calls received\n\t\t\t\t from this client, since the last time\n\t\t\t\t the statistics were cleared.')
pclNfsV3FsinfoPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3FsinfoPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3FsinfoPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_FSINFO (Get Static File System\n\t\t\t\t Information) procedure, as a percentage of the\n\t\t\t\t total calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3PathconfPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3PathconfPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3PathconfPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t\t Information) procedure, as a percentage of the\n\t\t\t\t total calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3CommitPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3CommitPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3CommitPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t\t a Server to Stable Storage) procedure, as\n\t\t\t\t a percentage of the total calls received\n\t\t\t\t from this client, since the last time the\n\t\t\t\t statistics were cleared.')
pclNfsV2Read512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read512Calls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read512Calls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 0-511 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read1KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read1KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 512-1023 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read2KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read2KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 1K-2047 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read4KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read4KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 2K-4095 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read8KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read8KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 4K-8191 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read16KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read16KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 8K-16383 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read32KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read32KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 16K-32767 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read64KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read64KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 32K-65535 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read128KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read128KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 64K-131071 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Write512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write512Calls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write512Calls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 0-511 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write1KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write1KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 512-1023 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write2KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write2KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 1K-2047 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write4KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write4KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 2K-4095 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write8KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write8KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 4K-8191 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write16KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write16KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 8K-16383 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write32KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write32KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 16K-32767 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write64KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write64KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 32K-65535 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write128KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write128KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 64K-131071 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read512Calls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read512Calls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 0-511 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read1KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read1KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 512-1023 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read2KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read2KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 1K-2047 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read4KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read4KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 2K-4095 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read8KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read8KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 4K-8191 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read16KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read16KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 8K-16383 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read32KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read32KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 16K-32767 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 115), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read64KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read64KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 32K-65535 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 116), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read128KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read128KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 64K-131071 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write512Calls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write512Calls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 0-511 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write1KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write1KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 512-1023 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 119), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write2KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write2KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 1K-2047 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write4KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write4KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 2K-4095 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write8KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write8KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 4K-8191 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 122), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write16KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write16KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 8K-16383 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write32KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write32KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 16K-32767 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 124), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write64KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write64KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 32K-65535 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 125), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write128KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write128KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 64K-131071 bytes\n\t\t\t\treceived from this client.')
pclNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNumber.setStatus('current')
if mibBuilder.loadTexts: pclNumber.setDescription('Number of entries in the pclTable table.')
trpcServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1))
tnfsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2))
trpcCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcCalls.setStatus('current')
if mibBuilder.loadTexts: trpcCalls.setDescription('The total number of RPC calls received,\n\t\t\t since the last boot.')
trpcBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcBadCalls.setStatus('current')
if mibBuilder.loadTexts: trpcBadCalls.setDescription('The total number of calls rejected by the RPC\n\t\t\t layer, since the last boot.')
trpcNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcNullRecvs.setStatus('current')
if mibBuilder.loadTexts: trpcNullRecvs.setDescription('The number of times an RPC call was not\n\t\t\t available when it was thought to be received,\n\t\t\t since the last boot.')
trpcBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcBadLens.setStatus('current')
if mibBuilder.loadTexts: trpcBadLens.setDescription('The number of RPC calls received with a length\n\t\t\t shorter than a minimum-sized RPC call, since\n\t\t\t the last boot.')
trpcServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcServXDRCalls.setStatus('current')
if mibBuilder.loadTexts: trpcServXDRCalls.setDescription('The number of RPC calls received whose header\n\t\t\t could not be XDR decoded, since the last boot.')
tnfsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnfsCalls.setStatus('current')
if mibBuilder.loadTexts: tnfsCalls.setDescription('The total number of NFS calls received, since\n\t\t\t  last boot.')
tnfsServBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnfsServBadCalls.setStatus('current')
if mibBuilder.loadTexts: tnfsServBadCalls.setDescription('The total number of received NFS calls rejected,\n\t\t\t  since last boot.')
tnfsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3))
tnfsV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4))
treplyCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5))
tnfsrwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6))
tv2Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1))
tv2Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2))
tv2CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3))
tv2CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4))
tv2cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cNulls.setStatus('current')
if mibBuilder.loadTexts: tv2cNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure,\n\t\t\t since the last boot.')
tv2cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2cGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure, since the last boot.')
tv2cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2cSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure, since the last boot.')
tv2cRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRoots.setStatus('current')
if mibBuilder.loadTexts: tv2cRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure, since the last boot.')
tv2cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cLookups.setStatus('current')
if mibBuilder.loadTexts: tv2cLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure, since the last boot.')
tv2cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv2cReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure, since the last boot.')
tv2cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReads.setStatus('current')
if mibBuilder.loadTexts: tv2cReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure, since the last boot.')
tv2cWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cWrcaches.setStatus('current')
if mibBuilder.loadTexts: tv2cWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure, since the last boot.')
tv2cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cWrites.setStatus('current')
if mibBuilder.loadTexts: tv2cWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure, since the last boot.')
tv2cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cCreates.setStatus('current')
if mibBuilder.loadTexts: tv2cCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure, since the last boot.')
tv2cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRemoves.setStatus('current')
if mibBuilder.loadTexts: tv2cRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure, since the last boot.')
tv2cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRenames.setStatus('current')
if mibBuilder.loadTexts: tv2cRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure, since the last boot.')
tv2cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cLinks.setStatus('current')
if mibBuilder.loadTexts: tv2cLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure, since the last boot.')
tv2cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv2cSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic Link)\n\t\t\t procedure, since the last boot.')
tv2cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv2cMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure, since the last boot.')
tv2cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv2cRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure, since the last boot.')
tv2cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv2cReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure, since the last boot.')
tv2cStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cStatfss.setStatus('current')
if mibBuilder.loadTexts: tv2cStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure, since the last boot.')
tv2pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pNulls.setStatus('current')
if mibBuilder.loadTexts: tv2pNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure\n\t\t\t as a percentage of total NFS calls received,\n\t\t\t since the last boot.')
tv2pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2pGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2pSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRoots.setStatus('current')
if mibBuilder.loadTexts: tv2pRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pLookups.setStatus('current')
if mibBuilder.loadTexts: tv2pLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv2pReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure as a percentage of total NFS\n\t\t\t calls received, since the last boot.')
tv2pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReads.setStatus('current')
if mibBuilder.loadTexts: tv2pReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pWrcaches.setStatus('current')
if mibBuilder.loadTexts: tv2pWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pWrites.setStatus('current')
if mibBuilder.loadTexts: tv2pWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pCreates.setStatus('current')
if mibBuilder.loadTexts: tv2pCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRemoves.setStatus('current')
if mibBuilder.loadTexts: tv2pRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRenames.setStatus('current')
if mibBuilder.loadTexts: tv2pRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pLinks.setStatus('current')
if mibBuilder.loadTexts: tv2pLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv2pSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic Link)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv2pMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv2pRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv2pReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pStatfss.setStatus('current')
if mibBuilder.loadTexts: tv2pStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure as a percentage of\n\t\t\t total NFS calls received, since the last boot.')
tv2ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccNulls.setStatus('current')
if mibBuilder.loadTexts: tv2ccNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem blocking\n\t\t\t to read from disk, since the last boot.')
tv2ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2ccGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, \n\t\t\t since the last boot.')
tv2ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2ccSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRoots.setStatus('current')
if mibBuilder.loadTexts: tv2ccRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccLookups.setStatus('current')
if mibBuilder.loadTexts: tv2ccLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv2ccReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, \n\t\t\t since the last boot.')
tv2ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReads.setStatus('current')
if mibBuilder.loadTexts: tv2ccReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccWrcaches.setStatus('current')
if mibBuilder.loadTexts: tv2ccWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccWrites.setStatus('current')
if mibBuilder.loadTexts: tv2ccWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccCreates.setStatus('current')
if mibBuilder.loadTexts: tv2ccCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRemoves.setStatus('current')
if mibBuilder.loadTexts: tv2ccRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRenames.setStatus('current')
if mibBuilder.loadTexts: tv2ccRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccLinks.setStatus('current')
if mibBuilder.loadTexts: tv2ccLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv2ccSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic Link)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv2ccMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv2ccRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv2ccReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccStatfss.setStatus('current')
if mibBuilder.loadTexts: tv2ccStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpNulls.setStatus('current')
if mibBuilder.loadTexts: tv2cpNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last boot.')
tv2cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2cpGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2cpSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRoots.setStatus('current')
if mibBuilder.loadTexts: tv2cpRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpLookups.setStatus('current')
if mibBuilder.loadTexts: tv2cpLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv2cpReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReads.setStatus('current')
if mibBuilder.loadTexts: tv2cpReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpWrcaches.setStatus('current')
if mibBuilder.loadTexts: tv2cpWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpWrites.setStatus('current')
if mibBuilder.loadTexts: tv2cpWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpCreates.setStatus('current')
if mibBuilder.loadTexts: tv2cpCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRemoves.setStatus('current')
if mibBuilder.loadTexts: tv2cpRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRenames.setStatus('current')
if mibBuilder.loadTexts: tv2cpRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpLinks.setStatus('current')
if mibBuilder.loadTexts: tv2cpLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv2cpSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv2cpMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv2cpRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv2cpReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpStatfss.setStatus('current')
if mibBuilder.loadTexts: tv2cpStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure, that did not result\n\t\t\t in the filesystem blocking to read from\n\t\t\t disk, as a percentage of the total number\n\t\t\t of calls received for this procedure, \n\t\t\t since the last boot.')
tv3Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1))
tv3Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2))
tv3CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3))
tv3CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4))
tv3cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cNulls.setStatus('current')
if mibBuilder.loadTexts: tv3cNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t since the last boot.')
tv3cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3cGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, since the last boot.')
tv3cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3cSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, since the last boot.')
tv3cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cLookups.setStatus('current')
if mibBuilder.loadTexts: tv3cLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, since the last boot.')
tv3cAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cAccesss.setStatus('current')
if mibBuilder.loadTexts: tv3cAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access Permission)\n\t\t\t procedure, since the last boot.')
tv3cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv3cReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, since the last boot.')
tv3cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReads.setStatus('current')
if mibBuilder.loadTexts: tv3cReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, since the last boot.')
tv3cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cWrites.setStatus('current')
if mibBuilder.loadTexts: tv3cWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, since the last boot.')
tv3cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cCreates.setStatus('current')
if mibBuilder.loadTexts: tv3cCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, since the last boot.')
tv3cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv3cMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, since the last boot.')
tv3cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv3cSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, since the last boot.')
tv3cMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cMknods.setStatus('current')
if mibBuilder.loadTexts: tv3cMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, since the last boot.')
tv3cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRemoves.setStatus('current')
if mibBuilder.loadTexts: tv3cRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, since the last boot.')
tv3cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv3cRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, since the last boot.')
tv3cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRenames.setStatus('current')
if mibBuilder.loadTexts: tv3cRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, since the last boot.')
tv3cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cLinks.setStatus('current')
if mibBuilder.loadTexts: tv3cLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, since the last boot.')
tv3cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv3cReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From Directory)\n\t\t\t procedure, since the last boot.')
tv3cReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: tv3cReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIRPLUS (Extended Read\n\t\t\t from Directory) procedure, since the last boot.')
tv3cFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cFsstats.setStatus('current')
if mibBuilder.loadTexts: tv3cFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, since the\n\t\t\t last boot.')
tv3cFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cFsinfos.setStatus('current')
if mibBuilder.loadTexts: tv3cFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File System\n\t\t\t Information) procedure, since the last boot.')
tv3cPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cPathconfs.setStatus('current')
if mibBuilder.loadTexts: tv3cPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, since the last boot.')
tv3cCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cCommits.setStatus('current')
if mibBuilder.loadTexts: tv3cCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, since\n\t\t\t the last boot.')
tv3pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pNulls.setStatus('current')
if mibBuilder.loadTexts: tv3pNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t as a percentage of the total NFS calls\n\t\t\t received, since the last boot.')
tv3pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3pGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3pSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pLookups.setStatus('current')
if mibBuilder.loadTexts: tv3pLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pAccesss.setStatus('current')
if mibBuilder.loadTexts: tv3pAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access\n\t\t\t Permission) procedure, as a percentage of\n\t\t\t the total NFS calls received, since the last boot.')
tv3pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv3pReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, as a percentage of the total\n\t\t\t NFS calls received, since the last boot.')
tv3pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReads.setStatus('current')
if mibBuilder.loadTexts: tv3pReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pWrites.setStatus('current')
if mibBuilder.loadTexts: tv3pWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pCreates.setStatus('current')
if mibBuilder.loadTexts: tv3pCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv3pMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv3pSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, as a percentage of the total\n\t\t\t NFS calls received, since the last boot.')
tv3pMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pMknods.setStatus('current')
if mibBuilder.loadTexts: tv3pMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, as a percentage of the\n\t\t\t total NFS calls received, since the last boot.')
tv3pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRemoves.setStatus('current')
if mibBuilder.loadTexts: tv3pRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv3pRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRenames.setStatus('current')
if mibBuilder.loadTexts: tv3pRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, as a percentage of\n\t\t\t the total NFS calls received, since the\n\t\t\t last boot.')
tv3pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pLinks.setStatus('current')
if mibBuilder.loadTexts: tv3pLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, as a percentage of\n\t\t\t the total NFS calls received, since the\n\t\t\t last boot.')
tv3pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv3pReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From Directory)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: tv3pReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIRPLUS (Extended Read\n\t\t\t from Directory) procedure, as a percentage\n\t\t\t of the total NFS calls received, since the\n\t\t\t last boot.')
tv3pFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pFsstats.setStatus('current')
if mibBuilder.loadTexts: tv3pFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, as a percentage\n\t\t\t of the total NFS calls received, since the\n\t\t\t last boot.')
tv3pFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pFsinfos.setStatus('current')
if mibBuilder.loadTexts: tv3pFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File System\n\t\t\t Information) procedure, as a percentage of the\n\t\t\t total NFS calls received, since the last boot.')
tv3pPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pPathconfs.setStatus('current')
if mibBuilder.loadTexts: tv3pPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, as a percentage of the\n\t\t\t total NFS calls received, since the last boot.')
tv3pCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pCommits.setStatus('current')
if mibBuilder.loadTexts: tv3pCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, as a\n\t\t\t percentage of the total NFS calls received,\n\t\t\t since the last boot.')
tv3ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccNulls.setStatus('current')
if mibBuilder.loadTexts: tv3ccNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem blocking\n\t\t\t to read from disk, since the last boot.')
tv3ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3ccGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3ccSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccLookups.setStatus('current')
if mibBuilder.loadTexts: tv3ccLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccAccesss.setStatus('current')
if mibBuilder.loadTexts: tv3ccAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access Permission)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv3ccReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last boot.')
tv3ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReads.setStatus('current')
if mibBuilder.loadTexts: tv3ccReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccWrites.setStatus('current')
if mibBuilder.loadTexts: tv3ccWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccCreates.setStatus('current')
if mibBuilder.loadTexts: tv3ccCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv3ccMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv3ccSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last boot.')
tv3ccMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccMknods.setStatus('current')
if mibBuilder.loadTexts: tv3ccMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last boot.')
tv3ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRemoves.setStatus('current')
if mibBuilder.loadTexts: tv3ccRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, \n\t\t\t since the last boot.')
tv3ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv3ccRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv3ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRenames.setStatus('current')
if mibBuilder.loadTexts: tv3ccRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv3ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccLinks.setStatus('current')
if mibBuilder.loadTexts: tv3ccLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk, \n\t\t\t since the last boot.')
tv3ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv3ccReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From\n\t\t\t Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk, \n\t\t\t since the last boot.')
tv3ccReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: tv3ccReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIRPLUS (Extended Read\n\t\t\t from Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk, \n\t\t\t since the last boot.')
tv3ccFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccFsstats.setStatus('current')
if mibBuilder.loadTexts: tv3ccFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, that did not\n\t\t\t result in the filesystem blocking to read\n\t\t\t from disk, since the last boot.')
tv3ccFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccFsinfos.setStatus('current')
if mibBuilder.loadTexts: tv3ccFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File\n\t\t\t System Information) procedure, that did not\n\t\t\t result in the filesystem blocking to read\n\t\t\t from disk, since the last boot.')
tv3ccPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccPathconfs.setStatus('current')
if mibBuilder.loadTexts: tv3ccPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv3ccCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccCommits.setStatus('current')
if mibBuilder.loadTexts: tv3ccCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, that did\n\t\t\t not result in the filesystem blocking to read\n\t\t\t from disk, since the last boot.')
tv3cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpNulls.setStatus('current')
if mibBuilder.loadTexts: tv3cpNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last boot.')
tv3cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3cpGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last boot.')
tv3cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3cpSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last boot.')
tv3cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpLookups.setStatus('current')
if mibBuilder.loadTexts: tv3cpLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last boot.')
tv3cpAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpAccesss.setStatus('current')
if mibBuilder.loadTexts: tv3cpAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access Permission)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last boot.')
tv3cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv3cpReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t last boot.')
tv3cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReads.setStatus('current')
if mibBuilder.loadTexts: tv3cpReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpWrites.setStatus('current')
if mibBuilder.loadTexts: tv3cpWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpCreates.setStatus('current')
if mibBuilder.loadTexts: tv3cpCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv3cpMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv3cpSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpMknods.setStatus('current')
if mibBuilder.loadTexts: tv3cpMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRemoves.setStatus('current')
if mibBuilder.loadTexts: tv3cpRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv3cpRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRenames.setStatus('current')
if mibBuilder.loadTexts: tv3cpRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpLinks.setStatus('current')
if mibBuilder.loadTexts: tv3cpLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv3cpReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: tv3cpReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READIRPLUS (Extended Read\n\t\t\t from Directory) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpFsstats.setStatus('current')
if mibBuilder.loadTexts: tv3cpFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, that did not\n\t\t\t result in the filesystem blocking to read from\n\t\t\t disk, as a percentage of the total number of\n\t\t\t calls received for this procedure, since the\n\t\t\t last boot.')
tv3cpFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpFsinfos.setStatus('current')
if mibBuilder.loadTexts: tv3cpFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File System\n\t\t\t Information) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpPathconfs.setStatus('current')
if mibBuilder.loadTexts: tv3cpPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpCommits.setStatus('current')
if mibBuilder.loadTexts: tv3cpCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, that\n\t\t\t did not result in the filesystem blocking to\n\t\t\t read from disk, as a percentage of the total\n\t\t\t number of calls received for this procedure,\n\t\t\t since the last boot.')
trcInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcInProgressHits.setStatus('current')
if mibBuilder.loadTexts: trcInProgressHits.setDescription('The number of NFS requests that were dropped, for\n\t\t\t calls already in progress, since the last boot.')
trcDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: trcDelayHits.setDescription('The number of NFS requests that were dropped,\n\t\t\t for replies already generated within a short\n\t\t\t interval, since the last boot. These stats are \n\t\t\t deprecated. A value of zero will always be \n\t\t\t returned for these stats.')
trcMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcMisses.setStatus('current')
if mibBuilder.loadTexts: trcMisses.setDescription('The number of NFS requests received for which\n\t\t\t there were no corresponding entries already in\n\t\t\t the Reply Cache, since the last boot.')
trcNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcNonIdemDoneHits.setStatus('current')
if mibBuilder.loadTexts: trcNonIdemDoneHits.setDescription('The number of NFS requests received that\n\t\t\t resulted in replies being replayed from\n\t\t\t the Reply Cache, since the last boot.')
trcNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcNonIdemNotDoneHits.setStatus('current')
if mibBuilder.loadTexts: trcNonIdemNotDoneHits.setDescription('The number of NFS requests received for calls\n\t\t\t that resulted in this request being processed\n\t\t\t as a new request even when a corresponding\n\t\t\t entry existed in the Reply Cache, since the\n\t\t\t last boot.')
trcTcpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpInProgressHits.setStatus('current')
if mibBuilder.loadTexts: trcTcpInProgressHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the TCP protocol, for calls already in\n\t\t\t progress, since the last boot.')
trcTcpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: trcTcpDelayHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the TCP protocol, for replies already\n\t\t\t generated within a short interval, since the\n\t\t\t last boot. These stats are deprecated. A value \n\t\t\t of zero will always be returned for these stats.')
trcTcpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpMisses.setStatus('current')
if mibBuilder.loadTexts: trcTcpMisses.setDescription('The number of NFS requests received for the\n\t\t\t TCP protocol for which there were no corresponding\n\t\t\t entries already in the Reply Cache, since the\n\t\t\t last boot.')
trcTcpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpNonIdemDoneHits.setStatus('current')
if mibBuilder.loadTexts: trcTcpNonIdemDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t TCP protocol that resulted in replies being\n\t\t\t replayed from the Reply Cache, since the\n\t\t\t last boot.')
trcTcpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpNonIdemNotDoneHits.setStatus('current')
if mibBuilder.loadTexts: trcTcpNonIdemNotDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t TCP protocol for calls that resulted in this\n\t\t\t request being processed as a new request even\n\t\t\t when a corresponding entry existed in the Reply\n\t\t\t Cache, since the last boot.')
trcUdpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpInProgressHits.setStatus('current')
if mibBuilder.loadTexts: trcUdpInProgressHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the UDP protocol, for calls already in\n\t\t\t progress, since the last boot.')
trcUdpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: trcUdpDelayHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the UDP protocol, for replies already\n\t\t\t generated within a short interval, since the\n\t\t\t last boot. These stats are deprecated. A value \n\t\t\t of zero will always be returned for these stats.')
trcUdpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpMisses.setStatus('current')
if mibBuilder.loadTexts: trcUdpMisses.setDescription('The number of NFS requests received for the\n\t\t\t UDP protocol for which there were no corresponding\n\t\t\t entries already in the Reply Cache, since the\n\t\t\t last boot.')
trcUdpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpNonIdemDoneHits.setStatus('current')
if mibBuilder.loadTexts: trcUdpNonIdemDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t UDP protocol that resulted in replies being\n\t\t\t replayed from the Reply Cache, since the\n\t\t\t last boot.')
trcUdpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpNonIdemNotDoneHits.setStatus('current')
if mibBuilder.loadTexts: trcUdpNonIdemNotDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t UDP protocol for calls that resulted in this\n\t\t\t request being processed as a new request even\n\t\t\t when a corresponding entry existed in the Reply\n\t\t\t Cache, since the last boot.')
tv2ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1))
tv2WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2))
tv3ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3))
tv3WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4))
tv2Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read512Calls.setStatus('current')
if mibBuilder.loadTexts: tv2Read512Calls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 0-511 bytes.')
tv2Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read1KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read1KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 512-1023 bytes.')
tv2Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read2KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read2KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 1K-2047 bytes.')
tv2Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read4KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read4KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 2K-4095 bytes.')
tv2Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read8KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read8KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 4K-8191 bytes.')
tv2Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read16KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read16KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 8K-16383 bytes.')
tv2Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read32KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read32KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 16K-32767 bytes.')
tv2Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read64KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read64KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 32K-65535 bytes.')
tv2Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read128KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read128KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 64K-131071 bytes.')
tv2Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write512Calls.setStatus('current')
if mibBuilder.loadTexts: tv2Write512Calls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 0-511 bytes.')
tv2Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write1KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write1KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 512-1023 bytes.')
tv2Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write2KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write2KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 1K-2047 bytes.')
tv2Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write4KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write4KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 2K-4095 bytes.')
tv2Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write8KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write8KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 4K-8191 bytes.')
tv2Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write16KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write16KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 8K-16383 bytes.')
tv2Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write32KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write32KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 16K-32767 bytes.')
tv2Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write64KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write64KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 32K-65535 bytes.')
tv2Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write128KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write128KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 64K-131071 bytes.')
tv3Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read512Calls.setStatus('current')
if mibBuilder.loadTexts: tv3Read512Calls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 0-511 bytes.')
tv3Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read1KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read1KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 512-1023 bytes.')
tv3Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read2KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read2KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 1K-2047 bytes.')
tv3Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read4KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read4KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 2K-4095 bytes.')
tv3Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read8KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read8KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 4K-8191 bytes.')
tv3Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read16KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read16KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 8K-16383 bytes.')
tv3Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read32KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read32KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 16K-32767 bytes.')
tv3Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read64KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read64KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 32K-65535 bytes.')
tv3Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read128KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read128KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 64K-131071 bytes.')
tv3Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write512Calls.setStatus('current')
if mibBuilder.loadTexts: tv3Write512Calls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 0-511 bytes.')
tv3Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write1KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write1KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 512-1023 bytes.')
tv3Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write2KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write2KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 1K-2047 bytes.')
tv3Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write4KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write4KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 2K-4095 bytes.')
tv3Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write8KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write8KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 4K-8191 bytes.')
tv3Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write16KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write16KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 8K-16383 bytes.')
tv3Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write32KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write32KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 16K-32767 bytes.')
tv3Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write64KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write64KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 32K-65535 bytes.')
tv3Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write128KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write128KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 64K-131071 bytes.')
nfsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsIsLicensed.setStatus('current')
if mibBuilder.loadTexts: nfsIsLicensed.setDescription('Whether the nfs protocol is licensed on the\n\t\t\t filer.')
quotaState = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("quotaStateOff", 1), ("quotaStateOn", 2), ("quotaStateInit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaState.setStatus('deprecated')
if mibBuilder.loadTexts: quotaState.setDescription("Indicates whether the root volume's quotas are ON, \n\t\t\t OFF or initializing.  This object is deprecated -\n\t\t\t use qvStateTable.qvStateStat instead.")
quotaInitPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaInitPercent.setStatus('deprecated')
if mibBuilder.loadTexts: quotaInitPercent.setDescription('Indicates percentage of root volume quota \n\t\t\t computation done while quotas are in initializing \n\t\t\t state. This object is deprecated - use \n\t\t\t qvStateTable.qvInitPercent instead.')
qrTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 3), )
if mibBuilder.loadTexts: qrTable.setStatus('deprecated')
if mibBuilder.loadTexts: qrTable.setDescription('Provide a report of the current file and\n\t\t\t space consumption for each user or group with\n\t\t\t a quota in /etc/quotas.  All quotas are displayed\n\t\t\t regardless of volume, and no volume information\n\t\t\t is given.  This table is deprecated - use qrVTable \n\t\t\t instead.')
qrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "qrIndex"))
if mibBuilder.loadTexts: qrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: qrEntry.setDescription('Provide a report of the current file and\n\t\t\t space consumption for a referenced entry\n\t\t\t with a quota in the file /etc/quotas.\n\t\t\t All quotas are displayed regardless of volume, \n\t\t\t and no volume information is given.  This object is \n\t\t\t deprecated - use qrVEntry instead.')
qrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrIndex.setStatus('deprecated')
if mibBuilder.loadTexts: qrIndex.setDescription('A number that identifies this entry in the\n\t\t\t file /etc/quotas.')
qrType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("qrTypeUser", 1), ("qrTypeGroup", 2), ("qrTypeTree", 3), ("qrTypeUnknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrType.setStatus('deprecated')
if mibBuilder.loadTexts: qrType.setDescription('Identifies the kind of quota for this qrEntry.')
qrId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrId.setStatus('deprecated')
if mibBuilder.loadTexts: qrId.setDescription("The UID (user's numerical ID) or the GID (numerical\n\t\t\t ID of  the  group  that a user belongs to), as\n\t\t\t applicable, associated with this qrEntry.")
qrKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrKBytesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: qrKBytesUsed.setDescription('The current number of KBytes used for this\n\t\t\t qrEntry.')
qrKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrKBytesLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrKBytesLimit.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrEntry.')
qrFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrFilesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: qrFilesUsed.setDescription('The current number of files used for this\n\t\t\t qrEntry.')
qrFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrFileLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrFileLimit.setDescription('The limit of files that can be used for this\n\t\t\t qrEntry.')
qrPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrPathName.setStatus('deprecated')
if mibBuilder.loadTexts: qrPathName.setDescription('A textual string that contains the path\n\t\t\t corresponding to this qrEntry.')
qvStateTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 4), )
if mibBuilder.loadTexts: qvStateTable.setStatus('current')
if mibBuilder.loadTexts: qvStateTable.setDescription('Provide a report of the current quota state of\n\t\t\teach volume in the system.')
qvStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1), ).setIndexNames((0, "NETAPP-MIB", "qvStateVolume"))
if mibBuilder.loadTexts: qvStateEntry.setStatus('current')
if mibBuilder.loadTexts: qvStateEntry.setDescription('Provide a report of the current quota state of\n\t\t\teach volume in the system.')
qvStateVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateVolume.setStatus('current')
if mibBuilder.loadTexts: qvStateVolume.setDescription("A number that identifies this volume.  The mapping\n       \t\t\t of this number to actual volumes may change if \n\t\t\t volumes are added or deleted.  Use qvStateName to \n\t\t\t unambiguously identify a volume.  The mapping\n\t\t\t established by this object is the same as \n\t\t\t the mapping of qrVVolume (below) to actual volumes.\n\t\t\t For instance, if a qvStateVolume value of '5'\n\t\t\t represents the volume 'vol2', a value of '5'\n\t\t\t in qrVVolume also represents the volume 'vol2'.")
qvStateName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateName.setStatus('current')
if mibBuilder.loadTexts: qvStateName.setDescription('Indicates the name of this volume.')
qvStateStat = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("quotaStateOff", 1), ("quotaStateOn", 2), ("quotaStateInit", 3), ("quotaStateCorrupt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateStat.setStatus('current')
if mibBuilder.loadTexts: qvStateStat.setDescription('Indicates whether quotas are ON, OFF,\n\t\t\t initializing or corrupted')
qvStateInitPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateInitPercent.setStatus('current')
if mibBuilder.loadTexts: qvStateInitPercent.setDescription('Indicates percentage of quota computation done\n\t\t\t while quotas are in initializing state.')
qvStateVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateVserver.setStatus('current')
if mibBuilder.loadTexts: qvStateVserver.setDescription('Indicates the vserver to which the volume belongs.\n\t\t\t Name from the cluster interfaces.\n                         Only applicable to cluster-mode volume.')
qrVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 5), )
if mibBuilder.loadTexts: qrVTable.setStatus('deprecated')
if mibBuilder.loadTexts: qrVTable.setDescription('Provide a report of the current file and\n\t\t\t space consumption for each user or group with\n\t\t\t a quota in /etc/quotas.')
qrVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1), ).setIndexNames((0, "NETAPP-MIB", "qrVVolume"), (0, "NETAPP-MIB", "qrVIndex"))
if mibBuilder.loadTexts: qrVEntry.setStatus('deprecated')
if mibBuilder.loadTexts: qrVEntry.setDescription('Provide a report of the current file and\n\t\t\t space consumption for a referenced entry\n\t\t\t with a quota in the file /etc/quotas.  Indices\n\t\t\t select the volume of the quota and the quota entry\n\t\t\t itself.')
qrVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVIndex.setStatus('deprecated')
if mibBuilder.loadTexts: qrVIndex.setDescription('A number that identifies this entry in the\n\t\t\t file /etc/quotas in the given volume.')
qrVType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("qrVTypeUser", 1), ("qrVTypeGroup", 2), ("qrVTypeTree", 3), ("qrVTypeUserDefault", 4), ("qrVTypeGroupDefault", 5), ("qrVTypeUnknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVType.setStatus('deprecated')
if mibBuilder.loadTexts: qrVType.setDescription('Identifies the kind of quota for this qrVEntry.')
qrVId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVId.setStatus('deprecated')
if mibBuilder.loadTexts: qrVId.setDescription("The UID (user's numerical ID) or the GID (numerical\n\t\t\t ID of  the  group  that a user belongs to), as\n\t\t\t applicable, associated with this qrVEntry. Check\n                         the qrVIdType field to see if this field is valid.")
qrVKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: qrVKBytesUsed.setDescription('The current number of KBytes used for this\n\t\t\t qrVEntry.')
qrVKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrVKBytesLimit.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrVEntry.')
qrVFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFilesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: qrVFilesUsed.setDescription('The current number of files used for this\n\t\t\t qrVEntry.')
qrVFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFileLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrVFileLimit.setDescription('The limit of files that can be used for this\n\t\t\t qrVEntry.')
qrVPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVPathName.setStatus('deprecated')
if mibBuilder.loadTexts: qrVPathName.setDescription('A textual string that contains the path\n\t\t\t corresponding to this qrVEntry.')
qrVVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVVolume.setStatus('deprecated')
if mibBuilder.loadTexts: qrVVolume.setDescription('A number that identifies the volume for which\n\t\t\tthis quota is in effect on.  The volume that this\n\t\t\tvalue represents can be determined by checking\n\t\t\tthe value of qvStateName (above) with \n\t\t\tqvStateVolume set to the value found here.')
qrVTree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVTree.setStatus('deprecated')
if mibBuilder.loadTexts: qrVTree.setDescription('A string that indicates which qtree this quota\n\t\t\tbelongs to.')
qrVIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qrVIdValid", 1), ("qrVSidValid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVIdType.setStatus('deprecated')
if mibBuilder.loadTexts: qrVIdType.setDescription('A value that indicates which ID field is valid.')
qrVSid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVSid.setStatus('deprecated')
if mibBuilder.loadTexts: qrVSid.setDescription('The one or more IDs associated with this qrVEntry.\n                         If the qrVentry is associated with a Windows ID, the\n\t\t\t text form of the Windows ID (the SID) is here. If\n\t\t\t the qrVEntry is associated with more than one id,\n\t\t\t this contains a blank separated list of those IDs.\n                         Check the qrVIdType field to see if this field is\n                         valid.')
qrVKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: qrVKBytesThreshold.setDescription('A number of KBytes that when used by this entry\n\t\t\t produces a warning message.')
qrVKBytesLimitSoft = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesLimitSoft.setStatus('deprecated')
if mibBuilder.loadTexts: qrVKBytesLimitSoft.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrVEntry before a warning message and SNMP\n\t\t\t trap is produced.')
qrVFileLimitSoft = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFileLimitSoft.setStatus('deprecated')
if mibBuilder.loadTexts: qrVFileLimitSoft.setDescription('The limit of files that can be used for this\n\t\t\t qrVEntry before a warning message and SNMP\n\t\t\t trap is produced.')
qrV2Table = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 6), )
if mibBuilder.loadTexts: qrV2Table.setStatus('current')
if mibBuilder.loadTexts: qrV2Table.setDescription('Provide a report of the current file and\n\t\t\t space consumption for each user or group with\n\t\t\t a quota in /etc/quotas.')
qrV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1), ).setIndexNames((0, "NETAPP-MIB", "qrV2Volume"), (0, "NETAPP-MIB", "qrV2Index"))
if mibBuilder.loadTexts: qrV2Entry.setStatus('current')
if mibBuilder.loadTexts: qrV2Entry.setDescription('Provide a report of the current file and\n\t\t\t space consumption for a referenced entry\n\t\t\t with a quota in the file /etc/quotas.  Indices\n\t\t\t select the volume of the quota and the quota entry\n\t\t\t itself.')
qrV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Index.setStatus('current')
if mibBuilder.loadTexts: qrV2Index.setDescription('A number that identifies this entry in the\n\t\t\t file /etc/quotas in the given volume.')
qrV2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("qrV2TypeUser", 1), ("qrV2TypeGroup", 2), ("qrV2TypeTree", 3), ("qrV2TypeUserDefault", 4), ("qrV2TypeGroupDefault", 5), ("qrV2TypeUnknown", 6), ("qrV2TypeTreeDefault", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Type.setStatus('current')
if mibBuilder.loadTexts: qrV2Type.setDescription('Identifies the kind of quota for this qrV2Entry.')
qrV2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Id.setStatus('current')
if mibBuilder.loadTexts: qrV2Id.setDescription("The UID (user's numerical ID) or the GID (numerical\n\t\t\t ID of  the  group  that a user belongs to), as\n\t\t\t applicable, associated with this qrV2Entry. Check\n                         the qrV2IdType field to see if this field is valid.")
qrV2HighKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: qrV2HighKBytesUsed.setDescription('The current number of KBytes used for this\n\t\t\t qrV2Entry. This object returns the most significant\n\t\t\t 32 bits of the 64 bit unsigned integer. This object \n\t\t\t is deprecated - Use qrV264KBytesUsed instead.')
qrV2LowKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: qrV2LowKBytesUsed.setDescription('The current number of KBytes used for this\n\t\t\t qrV2Entry. This object returns the least significant\n\t\t\t 32 bits of the 64 bit unsigned integer. This object \n\t\t\t is deprecated - Use qrV264KBytesUsed instead.')
qrV2QuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2QuotaUnlimited.setStatus('current')
if mibBuilder.loadTexts: qrV2QuotaUnlimited.setDescription("This flag designates whether or not the\n\t\t\tsize based quota limit for this qrV2Entry is unlimited.\n\t\t\tIf false(1) then qrV2*KBytesLimit OID's are valid, \n\t\t\tif true(2) then qrV2*KBytesLimit OID's are unused\n\t\t\tand will return 0.")
qrV2HighKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrV2HighKBytesLimit.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrV2Entry. This object returns the most significant\n\t\t\t 32 bits of the 64 bit unsigned integer. This will \n\t\t\t return 0 if qrV2QuotaUnlimited is true. This object \n\t\t\t is deprecated - Use qrV264KBytesLimit instead.')
qrV2LowKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrV2LowKBytesLimit.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrV2Entry. This object returns the least significant\n\t\t\t 32 bits of the 64 bit unsigned integer. This will \n\t\t\t return 0 if qrV2QuotaUnlimited is true. This object \n\t\t\t is deprecated - Use qrV264KBytesLimit instead.')
qrV2FilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FilesUsed.setStatus('current')
if mibBuilder.loadTexts: qrV2FilesUsed.setDescription('The current number of files used for this\n\t\t\t qrV2Entry.')
qrV2FileQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FileQuotaUnlimited.setStatus('current')
if mibBuilder.loadTexts: qrV2FileQuotaUnlimited.setDescription('This flag designates whether or not the\n\t\t\tfile based quota limit for this qrV2Entry is unlimited.\n\t\t\tIf false(1) then qrV2FileLimit is valid, if true(2)\n\t\t\tqrV2FileLimit will return 0.')
qrV2FileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FileLimit.setStatus('current')
if mibBuilder.loadTexts: qrV2FileLimit.setDescription('The limit of files that can be used for this\n\t\t\t qrV2Entry.')
qrV2PathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2PathName.setStatus('current')
if mibBuilder.loadTexts: qrV2PathName.setDescription('A textual string that contains the path\n\t\t\t corresponding to this qrV2Entry.')
qrV2Volume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Volume.setStatus('current')
if mibBuilder.loadTexts: qrV2Volume.setDescription('A number that identifies the volume for which\n\t\t\tthis quota is in effect on.  The volume that this\n\t\t\tvalue represents can be determined by checking\n\t\t\tthe value of qvStateName (above) with \n\t\t\tqvStateVolume set to the value found here.')
qrV2Tree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Tree.setStatus('current')
if mibBuilder.loadTexts: qrV2Tree.setDescription('A string that indicates which qtree this quota\n\t\t\tbelongs to.')
qrV2IdType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qrV2IdValid", 1), ("qrV2SidValid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2IdType.setStatus('current')
if mibBuilder.loadTexts: qrV2IdType.setDescription('A value that indicates which ID field is valid.')
qrV2Sid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Sid.setStatus('current')
if mibBuilder.loadTexts: qrV2Sid.setDescription('The one or more IDs associated with this qrV2Entry.\n                         If the qrV2entry is associated with a Windows ID, the\n\t\t\t text form of the Windows ID (the SID) is here. If\n\t\t\t the qrV2Entry is associated with more than one id,\n\t\t\t this contains a blank separated list of those IDs.\n                         Check the qrV2IdType field to see if this field is\n                         valid.')
qrV2ThresholdUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2ThresholdUnlimited.setStatus('current')
if mibBuilder.loadTexts: qrV2ThresholdUnlimited.setDescription("This flag designates whether or not the\n\t\t\tsize based threshold limit for this qrV2Entry is \n\t\t\tunlimited. If false(1) then qrV2*KBytesThreshold OID's\n\t\t\tare valid, if true(2) then qrV2*KBytesThreshold OID's\n\t\t\tare unused and will return 0.")
qrV2HighKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: qrV2HighKBytesThreshold.setDescription('A number of KBytes that when used by this entry\n\t\t\t produces a warning message. This object returns the \n\t\t\t most significant 32 bits of the 64 bit unsigned \n\t\t\t integer. This will return 0 if qrV2ThresholdUnlimited\n\t\t\t is true. This object is deprecated - Use \n\t\t\t qrV264KBytesThreshold instead.')
qrV2LowKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: qrV2LowKBytesThreshold.setDescription('A number of KBytes that when used by this entry\n\t\t\t produces a warning message. This object returns the \n\t\t\t least significant 32 bits of the 64 bit unsigned \n\t\t\t integer. This will return 0 if qrV2ThresholdUnlimited\n\t\t\t is true. This object is deprecated - Use \n\t\t\t qrV264KBytesThreshold instead.')
qrV2SoftQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftQuotaUnlimited.setStatus('current')
if mibBuilder.loadTexts: qrV2SoftQuotaUnlimited.setDescription("This flag designates whether or not the\n\t\t\tsize based soft quota limit for this qrV2Entry is \n\t\t\tunlimited. If false(1) then qrV2*KBytesSoftLimit OID's\n\t\t\tare valid, if true(2) the qrV2*KBytesSoftLimit OID's\n\t\t\tare unused and will return 0.")
qrV2HighKBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesSoftLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrV2HighKBytesSoftLimit.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrV2Entry before a warning message and SNMP\n\t\t\t trap is produced. This object returns the most\n\t\t\t significant 32 bits of the 64 bit unsigned integer. \n\t\t\t This object is deprecated - Use qrV264KBytesSoftLimit \n\t\t\t instead.')
qrV2LowKBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesSoftLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrV2LowKBytesSoftLimit.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrV2Entry before a warning message and SNMP\n\t\t\t trap is produced. This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer. \n\t\t\t This object is deprecated - Use qrV264KBytesSoftLimit \n\t\t\t instead.')
qrV2SoftFileQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftFileQuotaUnlimited.setStatus('current')
if mibBuilder.loadTexts: qrV2SoftFileQuotaUnlimited.setDescription('This flag designates whether or not the\n\t\t\tfile based soft quota limit for this qrV2Entry is \n\t\t\tunlimited. If false(1) then qrV2SoftFileLimit is valid,\n\t\t\tif true(2) qrV2SoftFileLimit is unused and will \n\t\t\treturn 0.')
qrV2SoftFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftFileLimit.setStatus('current')
if mibBuilder.loadTexts: qrV2SoftFileLimit.setDescription('The limit of files that can be used for this\n\t\t\t qrV2Entry before a warning message and SNMP\n\t\t\t trap is produced. This will return 0 if \n\t\t\t qrV2SoftFileQuotaUnlimited is true.')
qrV264KBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV264KBytesUsed.setStatus('current')
if mibBuilder.loadTexts: qrV264KBytesUsed.setDescription('The current number of KBytes used for this\n\t\t\t qrV2Entry. This object returns all of the 64 bit \n\t\t\t unsigned integer.')
qrV264KBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV264KBytesLimit.setStatus('current')
if mibBuilder.loadTexts: qrV264KBytesLimit.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrV2Entry. This object returns all of the 64\n\t\t\t bit unsigned integer. This will return 0 if \n\t\t\t qrV2QuotaUnlimited is true.')
qrV264KBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV264KBytesThreshold.setStatus('current')
if mibBuilder.loadTexts: qrV264KBytesThreshold.setDescription('A number of KBytes that when used by this entry\n\t\t\t produces a warning message. This object returns the \n\t\t\t all of the 64 bit unsigned integer. This will return \n\t\t\t 0 if qrV2ThresholdUnlimited is true.')
qrV264KBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV264KBytesSoftLimit.setStatus('current')
if mibBuilder.loadTexts: qrV264KBytesSoftLimit.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrV2Entry before a warning message and SNMP\n\t\t\t trap is produced. This object returns all of the\n\t\t\t 64 bit unsigned integer.')
qrV2VolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2VolumeName.setStatus('current')
if mibBuilder.loadTexts: qrV2VolumeName.setDescription('Indicates the name of the volume to which this quota\n\t\t\t belongs to.')
qrV2Vserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Vserver.setStatus('current')
if mibBuilder.loadTexts: qrV2Vserver.setDescription('Indicates the vserver to which the volume belongs.\n\t\t\t Name from the cluster interfaces.\n\t\t\t Only applicable to cluster-mode volume.')
filesysMaxfilesAvail = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesAvail.setStatus('deprecated')
if mibBuilder.loadTexts: filesysMaxfilesAvail.setDescription('The count of the maximum number of\n\t\t\t\t files allowable on the root volume.  This\n\t\t\t\t object is deprecated - use \n\t\t\t\t dfEntry.dfMaxFilesAvail instead.')
filesysMaxfilesUsed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: filesysMaxfilesUsed.setDescription('The count of the number of files\n\t\t\t\t currently in use on the root volume.  \n\t\t\t\t This object is deprecated - use\n\t\t\t\t dfEntry.dfMaxFilesUsed instead.')
filesysMaxfilesPossible = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesPossible.setStatus('deprecated')
if mibBuilder.loadTexts: filesysMaxfilesPossible.setDescription('The largest value to which the\n\t\t\t\t filesysMaxfilesAvail parameter above can\n\t\t\t\t be increased by reconfiguration on the\n\t\t\t\t root volume.  This object is deprecated -\n\t\t\t\t use dfEntry.dfMaxFilesPossible.')
dfTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 4), )
if mibBuilder.loadTexts: dfTable.setStatus('current')
if mibBuilder.loadTexts: dfTable.setDescription('Provide a report of the available disk space\n\t\t\t\t on the file systems. The tables shows the\n\t\t\t\t available disk space for volumes as well as\n\t\t\t\t aggregates. \n\t\t\t\t For node volumes and aggregates, only online\n\t\t\t\t volumes and aggregates are reported. For \n\t\t\t\t cluster volumes and aggregates, the \n\t\t\t\t dfStateOnline is set and the value for \n\t\t\t\t other fields are undefined when volumes \n\t\t\t\t and aggregates are not online.')
snapshot = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5, 5))
dfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1), ).setIndexNames((0, "NETAPP-MIB", "dfIndex"))
if mibBuilder.loadTexts: dfEntry.setStatus('current')
if mibBuilder.loadTexts: dfEntry.setDescription("Provide a report of the available disk space on\n\t\t\t the referenced file system.\n\t\t\t For entries returned from the cluster interfaces\n\t\t\t only, if the dfRowInfo is not set to \n\t\t\t 'available', the values reported for other\n\t\t\t fields may not be valid.")
dfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfIndex.setStatus('current')
if mibBuilder.loadTexts: dfIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced file system.')
dfFileSys = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfFileSys.setStatus('current')
if mibBuilder.loadTexts: dfFileSys.setDescription('The name for the referenced file system.')
dfKBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesTotal.setStatus('deprecated')
if mibBuilder.loadTexts: dfKBytesTotal.setDescription('The total capacity in KBytes for the\n\t\t\t referenced file system.')
dfKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: dfKBytesUsed.setDescription('The total disk space in KBytes that is in use\n\t\t\t on the referenced file system.')
dfKBytesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesAvail.setStatus('deprecated')
if mibBuilder.loadTexts: dfKBytesAvail.setDescription('The total disk space in KBytes that is\n\t\t\t free for use on the referenced file system.')
dfPerCentKBytesCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPerCentKBytesCapacity.setStatus('current')
if mibBuilder.loadTexts: dfPerCentKBytesCapacity.setDescription('The percentage of disk space currently\n\t\t\t\t in use on the referenced file system.')
dfInodesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInodesUsed.setStatus('current')
if mibBuilder.loadTexts: dfInodesUsed.setDescription('The total number of inodes in use on the\n\t\t\t\t referenced file system.')
dfInodesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInodesFree.setStatus('current')
if mibBuilder.loadTexts: dfInodesFree.setDescription('The total number of inodes that are\n\t\t\t\t available for use on the referenced\n\t\t\t\t file system.')
dfPerCentInodeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPerCentInodeCapacity.setStatus('current')
if mibBuilder.loadTexts: dfPerCentInodeCapacity.setDescription('The percentage of disk space currently\n\t\t\t\t in use based on inode counts, on the\n\t\t\t\t referenced file system.')
dfMountedOn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMountedOn.setStatus('current')
if mibBuilder.loadTexts: dfMountedOn.setDescription('The name of the file on which this file\n\t\t\t\t system is mounted.')
dfMaxFilesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesAvail.setStatus('current')
if mibBuilder.loadTexts: dfMaxFilesAvail.setDescription('The count of the maximum number of\n\t\t\t\t files allowable on the referenced file\n\t\t\t\t system.')
dfMaxFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesUsed.setStatus('current')
if mibBuilder.loadTexts: dfMaxFilesUsed.setDescription('The count of the number of files\n\t\t\t\t currently in use on the referenced file\n\t\t\t\t system.')
dfMaxFilesPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesPossible.setStatus('current')
if mibBuilder.loadTexts: dfMaxFilesPossible.setDescription('The largest value to which the\n\t\t\t\t filesysMaxfilesAvail parameter above can\n\t\t\t\t be increased by reconfiguration on the\n\t\t\t\t referenced file system.')
dfHighTotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighTotalKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: dfHighTotalKBytes.setDescription('The total capacity in KBytes for the\n\t\t\t\t referenced file system.  This object returns\n\t\t\t\t the most significant 32 bits of the 64 bit \n\t\t\t\t unsigned integer. This object is deprecated - \n\t\t\t\t Use df64TotalKBytes instead.')
dfLowTotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowTotalKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: dfLowTotalKBytes.setDescription('The total capacity in KBytes for the\n\t\t\t\t referenced file system.  This object returns\n\t\t\t\t the least significant 32 bits of the 64 bit \n\t\t\t\t unsigned integer. This object is deprecated - \n\t\t\t\t Use df64TotalKBytes instead.')
dfHighUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighUsedKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: dfHighUsedKBytes.setDescription('The total disk space in KBytes that is in use\n\t\t\t\t on the referenced file system.  This object\n\t\t\t\t returns the most significant 32 bits of the\n\t\t\t\t 64 bit unsigned integer. This object is \n\t\t\t\t deprecated - Use df64UsedKBytes instead.')
dfLowUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowUsedKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: dfLowUsedKBytes.setDescription('The total disk space in KBytes that is in use\n\t\t\t\t on the referenced file system.  This object\n\t\t\t\t returns the least significant 32 bits of the\n\t\t\t\t 64 bit unsigned integer. This object is \n\t\t\t\t deprecated - Use df64UsedKBytes instead.')
dfHighAvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighAvailKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: dfHighAvailKBytes.setDescription('The total disk space in KBytes that is free\n\t\t\t\t for use on the referenced file system.\n\t\t\t\t This object returns the most significant\n\t\t\t\t 32 bits of the 64 bit unsigned integer. \n\t\t\t\t This object is deprecated - Use df64AvailKBytes \n\t\t\t\t instead.')
dfLowAvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowAvailKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: dfLowAvailKBytes.setDescription('The total disk space in KBytes that is free\n\t\t\t\t for use on the referenced file system.\n\t\t\t\t This object returns the least significant\n\t\t\t\t 32 bits of the 64 bit unsigned integer. \n\t\t\t\t This object is deprecated - Use df64AvailKBytes \n\t\t\t\t instead.')
dfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unmounted", 1), ("mounted", 2), ("frozen", 3), ("destroying", 4), ("creating", 5), ("mounting", 6), ("unmounting", 7), ("nofsinfo", 8), ("replaying", 9), ("replayed", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfStatus.setStatus('current')
if mibBuilder.loadTexts: dfStatus.setDescription('The status of the file system.')
dfMirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invalid", 1), ("uninitialized", 2), ("needcpcheck", 3), ("cpcheckwait", 4), ("unmirrored", 5), ("normal", 6), ("degraded", 7), ("resyncing", 8), ("failed", 9), ("limbo", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMirrorStatus.setStatus('current')
if mibBuilder.loadTexts: dfMirrorStatus.setDescription('Overall mirror status of the file system.')
dfPlexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPlexCount.setStatus('current')
if mibBuilder.loadTexts: dfPlexCount.setDescription('Number of plexes in this file system.')
dfType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("traditionalVolume", 1), ("flexibleVolume", 2), ("aggregate", 3), ("stripedAggregate", 4), ("stripedVolume", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfType.setStatus('current')
if mibBuilder.loadTexts: dfType.setDescription('Indicates the type of container.')
dfHighSisSharedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighSisSharedKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: dfHighSisSharedKBytes.setDescription('The total amount of data in KBytes that is\n\t\t\t\t shared by more than one instance on the\n\t\t\t\t referenced file system.  This object returns\n\t\t\t\t the most significant 32 bits of the 64 bit\n\t\t\t\t unsigned integer. This object is deprecated - \n\t\t\t\t Use df64SisSharedKBytes instead.')
dfLowSisSharedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowSisSharedKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: dfLowSisSharedKBytes.setDescription('The total amount of data in KBytes that is\n\t\t\t\t shared by more than one instance on the\n\t\t\t\t referenced file system.  This object returns\n\t\t\t\t the least significant 32 bits of the 64 bit\n\t\t\t\t unsigned integer. This object is deprecated - \n\t\t\t\t Use df64SisSharedKBytes instead.')
dfHighSisSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighSisSavedKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: dfHighSisSavedKBytes.setDescription('The total disk space in KBytes that is saved\n\t\t\t\t by storing only one copy of the duplicated\n\t\t\t\t blocks on the referenced file system.  The\n\t\t\t\t object returns the most significant 32 bits\n\t\t\t\t of the 64 bit unsigned integer. This object is \n\t\t\t\t deprecated - Use df64SisSavedKBytes instead.')
dfLowSisSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowSisSavedKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: dfLowSisSavedKBytes.setDescription('The total disk space in KBytes that is saved\n\t\t\t\t by storing only one copy of the duplicated\n\t\t\t\t blocks on the referenced file system.  The\n\t\t\t\t object returns the least significant 32 bits\n\t\t\t\t of the 64 bit unsigned integer. This object is \n\t\t\t\t deprecated - Use df64SisSavedKBytes instead.')
dfPerCentSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPerCentSaved.setStatus('current')
if mibBuilder.loadTexts: dfPerCentSaved.setDescription('The percentage of disk space saved by\n\t\t\t\t eliminating the duplicated blocks on the\n\t\t\t\t referenced file system.')
df64TotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64TotalKBytes.setStatus('current')
if mibBuilder.loadTexts: df64TotalKBytes.setDescription('The total capacity in KBytes for the\n\t\t\t\t referenced file system.  This object returns\n\t\t\t\t all of the 64 bit unsigned integer.')
df64UsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64UsedKBytes.setStatus('current')
if mibBuilder.loadTexts: df64UsedKBytes.setDescription('The total disk space in KBytes that is in use\n\t\t\t\t on the referenced file system.  This object\n\t\t\t\t returns all of the 64 bit unsigned integer.')
df64AvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64AvailKBytes.setStatus('current')
if mibBuilder.loadTexts: df64AvailKBytes.setDescription('The total disk space in KBytes that is free\n\t\t\t\t for use on the referenced file system.\n\t\t\t\t This object returns all of the 64 bit \n\t\t\t\t unsigned integer.')
df64SisSharedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64SisSharedKBytes.setStatus('current')
if mibBuilder.loadTexts: df64SisSharedKBytes.setDescription('The total amount of data in KBytes that is\n\t\t\t\t shared by more than one instance on the\n\t\t\t\t referenced file system.  This object returns\n\t\t\t\t all of the 64 bit unsigned integer.')
df64SisSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64SisSavedKBytes.setStatus('current')
if mibBuilder.loadTexts: df64SisSavedKBytes.setDescription('The total disk space in KBytes that is saved\n\t\t\t\t by storing only one copy of the duplicated\n\t\t\t\t blocks on the referenced file system.  The\n\t\t\t\t object returns all of the 64 bit unsigned \n\t\t\t\t integer.')
dfVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfVserver.setStatus('current')
if mibBuilder.loadTexts: dfVserver.setDescription('Name of the vserver to which the volume belongs.\n\t\t\t\tFor aggregate and aggregate snapshot it will be \n\t\t\t\tan empty string.\n\n\t\t\t\tThis field is returned only from the cluster interfaces.')
dfStateOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 35), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfStateOnline.setStatus('current')
if mibBuilder.loadTexts: dfStateOnline.setDescription('The state of the cluster aggregates and \n\t\t\t\t volumes. If this is not true, all the\n\t\t\t\t values for the fields of this table are \n\t\t\t\t undefined.\n\n\t\t\t\t This field is returned only from the cluster interfaces.')
dfRowInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("partiallyAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfRowInfo.setStatus('current')
if mibBuilder.loadTexts: dfRowInfo.setDescription("Volume or aggregate and its snapshot \n\t\t\tis 'available' or 'partiallyAvailable'. \n\t\t\tThis field is returned only from the cluster interfaces.\n\t\t\tPossible values for this field are:\n\t\t\t\n\t\t\t'available'\n\t\t\tIndicates a normal case when everything went\n\t\t\tfine while fetching the values for the fields\n\t\t\tof this table and all values returned \n\t\t\tare valid.\n\n\t\t\t'partiallyAvailable'\n\t\t\tIndicates something went wrong while fetching\n\t\t\tthe values for the fields of this table and \n\t\t\tnot all values are valid.\n\n\t\t\tFor fields that could not be fetched, default\n\t\t\tvalues are set. For integers it is -1, for\n\t\t\tcounters 0, and for string it is null.")
df64CompressSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64CompressSaved.setStatus('current')
if mibBuilder.loadTexts: df64CompressSaved.setDescription('Provides the compression savings in a volume\n\t\t\t in KBytes. This is only returned for volumes.')
dfCompressSavedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfCompressSavedPercent.setStatus('current')
if mibBuilder.loadTexts: dfCompressSavedPercent.setDescription('Provides the percentage of compression \n\t\t\t savings in a volume, which is \n\t\t\t ((compr_saved/(compr_saved + used)) * 100).\n\t\t\t This is only returned for volumes.')
df64DedupeSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64DedupeSaved.setStatus('current')
if mibBuilder.loadTexts: df64DedupeSaved.setDescription('Provides the deduplication savings in a volume\n\t\t\t in KBytes. This is only returned for volumes.')
dfDedupeSavedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfDedupeSavedPercent.setStatus('current')
if mibBuilder.loadTexts: dfDedupeSavedPercent.setDescription('Provides the percentage of deduplication \n\t\t\t savings in a volume, which is \n\t\t\t ((dedup_saved/(dedup_saved + used)) * 100).\n\t\t\t This is only returned for volumes.')
df64TotalSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64TotalSaved.setStatus('current')
if mibBuilder.loadTexts: df64TotalSaved.setDescription('Provides the total savings due to deduplication \n\t\t\t & compression in a volume in KBytes. This is \n\t\t\t only returned for volumes.')
dfTotalSavedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfTotalSavedPercent.setStatus('current')
if mibBuilder.loadTexts: dfTotalSavedPercent.setDescription('Provides the percentage of total savings \n\t\t\t due to deduplication & compression in a\n\t\t\t volume, which is\n\t\t\t ((total_saved/(total_saved + used)) * 100).\n\t\t\t This is only returned for volumes.')
df64TotalReservedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64TotalReservedKBytes.setStatus('current')
if mibBuilder.loadTexts: df64TotalReservedKBytes.setDescription('The total disk space in KBytes that is\n\t\t\t reserved on the referenced file system.')
slTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1), )
if mibBuilder.loadTexts: slTable.setStatus('deprecated')
if mibBuilder.loadTexts: slTable.setDescription('Provide a report of the snapshots on the\n\t\t\t root volume.  This table is deprecated - use\n\t\t\t slVTable instead.')
slEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "slIndex"))
if mibBuilder.loadTexts: slEntry.setStatus('deprecated')
if mibBuilder.loadTexts: slEntry.setDescription('Provide a report on a given snapshot on the\n\t\t\t root volume.  This object is deprecated - use\n\t\t\t slVEntry instead.')
slIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slIndex.setStatus('deprecated')
if mibBuilder.loadTexts: slIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced file system.')
slMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slMonth.setStatus('deprecated')
if mibBuilder.loadTexts: slMonth.setDescription('The month in which the snapshot was created.')
slDay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slDay.setStatus('deprecated')
if mibBuilder.loadTexts: slDay.setDescription('The day on which the snapshot was created.')
slHour = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slHour.setStatus('deprecated')
if mibBuilder.loadTexts: slHour.setDescription('The hour in which the snapshot was created.')
slMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slMinutes.setStatus('deprecated')
if mibBuilder.loadTexts: slMinutes.setDescription('The minute in which the snapshot was created.')
slName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slName.setStatus('deprecated')
if mibBuilder.loadTexts: slName.setDescription('The name of the referenced snapshot.')
slVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2), )
if mibBuilder.loadTexts: slVTable.setStatus('current')
if mibBuilder.loadTexts: slVTable.setDescription('Provide a report of the snapshots on the\n\t\t\t file systems.')
slVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "slVVolume"), (0, "NETAPP-MIB", "slVIndex"))
if mibBuilder.loadTexts: slVEntry.setStatus('current')
if mibBuilder.loadTexts: slVEntry.setDescription('Provide a report on a given snapshot on the\n\t\t\t file system.  Indices select the volume of\n\t\t\t the snapshot and the snapshot entry itself.')
slVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVIndex.setStatus('current')
if mibBuilder.loadTexts: slVIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced file system.')
slVMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVMonth.setStatus('current')
if mibBuilder.loadTexts: slVMonth.setDescription('The month in which the snapshot was created.')
slVDay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVDay.setStatus('current')
if mibBuilder.loadTexts: slVDay.setDescription('The day on which the snapshot was created.')
slVHour = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVHour.setStatus('current')
if mibBuilder.loadTexts: slVHour.setDescription('The hour in which the snapshot was created.')
slVMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVMinutes.setStatus('current')
if mibBuilder.loadTexts: slVMinutes.setDescription('The minute in which the snapshot was created.')
slVName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVName.setStatus('current')
if mibBuilder.loadTexts: slVName.setDescription('The name of the referenced snapshot.')
slVVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVVolume.setStatus('current')
if mibBuilder.loadTexts: slVVolume.setDescription('A number that identifies the volume  / aggregate that \n\t\t\t contains this snapshot.')
slVNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVNumber.setStatus('current')
if mibBuilder.loadTexts: slVNumber.setDescription('Number of snapshots for this volume / aggregate.')
slVVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVVolumeName.setStatus('current')
if mibBuilder.loadTexts: slVVolumeName.setDescription('The name of the volume / aggregate. This does not \n\t\t\t have a /vol/ prefix.')
slVType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("traditionalVolume", 1), ("flexibleVolume", 2), ("aggregate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVType.setStatus('current')
if mibBuilder.loadTexts: slVType.setDescription('Indicates the type of container for this\n\t\t\t snapshot.')
slQTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3), )
if mibBuilder.loadTexts: slQTable.setStatus('current')
if mibBuilder.loadTexts: slQTable.setDescription('Provide a report of the snapshots and their contents\n\t\t\ton the file systems.')
slQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "slQVolume"), (0, "NETAPP-MIB", "slQQtree"), (0, "NETAPP-MIB", "slQIndex"))
if mibBuilder.loadTexts: slQEntry.setStatus('current')
if mibBuilder.loadTexts: slQEntry.setDescription('Provide a report on a given snapshot for a given \n\t\t\tqtree on the file system.  Indices select the volume \n\t\t\tand qtree of the snapshot and the snapshot entry \n\t\t\titself.')
slQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQIndex.setStatus('current')
if mibBuilder.loadTexts: slQIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced file system.')
slQVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQVolume.setStatus('current')
if mibBuilder.loadTexts: slQVolume.setDescription('A number that identifies the volume that contains\n\t\t\tthis snapshot.')
slQQtree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtree.setStatus('current')
if mibBuilder.loadTexts: slQQtree.setDescription('A number that identifies the qtree that contains\n\t\t\tthis snapshot.')
slQSnapshotName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSnapshotName.setStatus('current')
if mibBuilder.loadTexts: slQSnapshotName.setDescription('The name of the referenced snapshot.')
slQSnapshotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSnapshotTime.setStatus('current')
if mibBuilder.loadTexts: slQSnapshotTime.setDescription('Time of the snapshot on the system. The time in \n\t\t\tseconds since January 1, 1970.')
slQQtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtreeName.setStatus('current')
if mibBuilder.loadTexts: slQQtreeName.setDescription('A string that indicates which qtree is in this \n\t\t\tsnapshot')
slQQtreeContent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replica", 1), ("transitioning", 2), ("original", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtreeContent.setStatus('current')
if mibBuilder.loadTexts: slQQtreeContent.setDescription('The content of the qtree tree')
slQSource = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSource.setStatus('current')
if mibBuilder.loadTexts: slQSource.setDescription("The source of this qtree for a replicated qtree.\n\t\t\t'-' for an original qtree.")
slQSourceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSourceTime.setStatus('current')
if mibBuilder.loadTexts: slQSourceTime.setDescription('Time of the source snapshot for a replicated qtree.\n\t\t\tTime of the current snapshot for an original qtree.\n\t\t\tThe time in seconds since January 1, 1970. 0 if the \n\t\t\tqtree is in a transitioning stage')
slQVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQVolumeName.setStatus('current')
if mibBuilder.loadTexts: slQVolumeName.setDescription('The name of the volume. This does not have a /vol/\n\t\t\tprefix.')
dfNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfNumber.setStatus('current')
if mibBuilder.loadTexts: dfNumber.setDescription('Number of entries in the dfTable table.')
fsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5, 7))
fsOverallStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("nearlyFull", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsOverallStatus.setStatus('current')
if mibBuilder.loadTexts: fsOverallStatus.setDescription("An indication of overall file system\n\t\t\thealth.  'ok' indicates that all file systems\n\t\t\thave adequate space.  'nearlyFull' means\n\t\t\tthat one or more is nearly full (more than\n\t\t\t95% full). 'full' means that one or more\n\t\t\tare more than 98% full.")
fsStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusMessage.setStatus('current')
if mibBuilder.loadTexts: fsStatusMessage.setDescription('A string indicating any file systems which\n\t\t\tare full or nearly full.')
fsMaxUsedBytesPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxUsedBytesPerCent.setStatus('current')
if mibBuilder.loadTexts: fsMaxUsedBytesPerCent.setDescription('The percentage of space currently in use or\n\t\t\treserved by the fullest file system.')
fsMaxUsedInodesPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxUsedInodesPerCent.setStatus('current')
if mibBuilder.loadTexts: fsMaxUsedInodesPerCent.setDescription('The percentage of inodes currently in use\n\t\t\tby the fullest file system.')
volTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 8), )
if mibBuilder.loadTexts: volTable.setStatus('current')
if mibBuilder.loadTexts: volTable.setDescription('List the volumes defined on the system,\n\t\t\tincluding offline volumes.')
volEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1), ).setIndexNames((0, "NETAPP-MIB", "volIndex"))
if mibBuilder.loadTexts: volEntry.setStatus('current')
if mibBuilder.loadTexts: volEntry.setDescription("Provide details about a particular volume.\n\t\t\t For entries returned only from the cluster\n\t\t\t interfaces, if the volRowInfo is not set to\n\t\t\t 'available', the values reported by other \n\t\t\t fields of this table may not be valid.")
volIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volIndex.setStatus('current')
if mibBuilder.loadTexts: volIndex.setDescription('A number that identifies this volume.  The\n\t\t\tvolIndex is not related to any other table\n\t\t\tdefined in this MIB, and may change as\n\t\t\tvolumes are created and destroyed.')
volName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volName.setStatus('current')
if mibBuilder.loadTexts: volName.setDescription('Name of the volume.  This includes no /vol/\n\t\t\tprefix.')
volFSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volFSID.setStatus('current')
if mibBuilder.loadTexts: volFSID.setDescription('Unique identifier for this volume.')
volOwningHost = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("partner", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volOwningHost.setStatus('current')
if mibBuilder.loadTexts: volOwningHost.setDescription('Indication of which host owns this volume.\n\t\t\t This field is not supported in a cluster.')
volState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volState.setStatus('current')
if mibBuilder.loadTexts: volState.setDescription("State of the volume, such as 'online' or\n\t\t\t'offline'.")
volStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volStatus.setStatus('current')
if mibBuilder.loadTexts: volStatus.setDescription("Status of the volume, such as 'normal' or\n\t\t\t'reconstructing'. May include several values\n\t\t\tseparated by comma and space.")
volOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volOptions.setStatus('current')
if mibBuilder.loadTexts: volOptions.setDescription("Options associated with the volume, such \n\t\t\tas 'root' and 'nosnapdir=off'. May include\n\t\t\tseveral values separated by comma.")
volUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volUUID.setStatus('current')
if mibBuilder.loadTexts: volUUID.setDescription('A unique id associated with the volume.')
volAggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volAggrName.setStatus('current')
if mibBuilder.loadTexts: volAggrName.setDescription('Name of the aggregate this flexible volume is a\n\t\t\tpart of.')
volType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("traditional", 1), ("flexible", 2), ("striped", 3), ("asis", 4), ("snaplock", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volType.setStatus('current')
if mibBuilder.loadTexts: volType.setDescription('Type of this volume, older volumes are\n\t\t\ttraditional while newer volumes contained in\n\t\t\taggregates are flexible.')
volClone = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volClone.setStatus('current')
if mibBuilder.loadTexts: volClone.setDescription('True indicates flexible volume is a clone.')
volCloneOf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCloneOf.setStatus('current')
if mibBuilder.loadTexts: volCloneOf.setDescription('Name of flexible volume this flexible volume is\n\t\t\ta clone of.')
volCloneSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCloneSnap.setStatus('current')
if mibBuilder.loadTexts: volCloneSnap.setDescription('Name of original cloned snapshot.')
volVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volVserver.setStatus('current')
if mibBuilder.loadTexts: volVserver.setDescription('Vserver to which the volume belongs.\n\t\t\tName from the cluster interfaces.\n\t\t\tOnly applicable to cluster-mode volume.')
volMSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volMSID.setStatus('current')
if mibBuilder.loadTexts: volMSID.setDescription("The volume's Mirror Set ID. MSIDs are formatted\n\t\t\tas 10-character strings composed of 8 hex\n\t\t\tcharacters prefixed with '0x'.\n\t\t\tOnly applicable to cluster-mode volume.")
volDSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volDSID.setStatus('current')
if mibBuilder.loadTexts: volDSID.setDescription("The volume's Data Set ID. DSIDs are formatted\n\t\t\tas 10-character strings composed of 8 hex\n\t\t\tcharacters prefixed with '0x'.\n\t\t\tOnly applicable to cluster-mode volume.")
volSpaceGuaranteeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volSpaceGuaranteeEnabled.setStatus('current')
if mibBuilder.loadTexts: volSpaceGuaranteeEnabled.setDescription('Whether or not the space guarantee style\n\t\t\tassociated with the volume is currently in\n\t\t\teffect. This field does not appear if the\n\t\t\tflexible volume is restricted or offline.')
volSpaceGuarantee = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("file", 1), ("volume", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volSpaceGuarantee.setStatus('current')
if mibBuilder.loadTexts: volSpaceGuarantee.setDescription("The space guarantee style associated with the\n\t\t\tvolume, such as 'volume', etc. This field does\n\t\t\tnot appear if the flexible volume is\n\t\t\trestricted or offline.")
volLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volLanguage.setStatus('current')
if mibBuilder.loadTexts: volLanguage.setDescription("The language currently set for the volume. For\n\t\t\texample, 'English '.")
volLanguageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volLanguageCode.setStatus('current')
if mibBuilder.loadTexts: volLanguageCode.setDescription("The language code currently set for the volume.\n\t\t\tFor example, 'en'.")
volCloneChildrenList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCloneChildrenList.setStatus('current')
if mibBuilder.loadTexts: volCloneChildrenList.setDescription("A comma separated list of all volume's child clones.")
volJunctionPathActive = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 22), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volJunctionPathActive.setStatus('current')
if mibBuilder.loadTexts: volJunctionPathActive.setDescription('Indicates if a Junction Path is active on this volume.\n\t\t\tThis field is returned only from the cluster interfaces.')
volJunctionPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volJunctionPath.setStatus('current')
if mibBuilder.loadTexts: volJunctionPath.setDescription('The mount path for the volume, relative to the root\n\t\t\tvolume. This field is returned only from the cluster \n\t\t\tinterfaces.')
volJunctionPathSource = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volJunctionPathSource.setStatus('current')
if mibBuilder.loadTexts: volJunctionPathSource.setDescription("Source directory of the Junction Path for this volume.\n\t\t\tThis field is returned only from the cluster interfaces.\n\n\t\t\tTwo possible values are\n\t\t\t  'LSM volume' for Load Share Mirror volumes\n\t\t\t  'RW volume'  for Read-Write volumes.")
volRowInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("partiallyAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volRowInfo.setStatus('current')
if mibBuilder.loadTexts: volRowInfo.setDescription("Volume is 'available' or 'partiallyAvailable'. \n                This field is returned only from the cluster interfaces.\n         \n                Two possible values are:\n                'available'\n                     Indicates a normal case when everything went\n                     fine while fetching the values for the fields\n                     of this table and all values returned \n                     are valid.\n\n               'partiallyAvailable'\n                     Indicates something went wrong while fetching\n                     the values of the fields for this table and \n                     not all values are valid.\n\n               For fields that could not be fetched, default\n               values are set. For integers it is -1, for\n               counters 0, and for string it is null.")
volNvfail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 26), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volNvfail.setStatus('current')
if mibBuilder.loadTexts: volNvfail.setDescription('Indicates whether nvfail option is enabled  \n\t\t\t on this volume.')
volInNvfailedState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 27), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volInNvfailedState.setStatus('current')
if mibBuilder.loadTexts: volInNvfailedState.setDescription('Indicates whether the volume is in nvfailed state.  \n\t\t\t This is only applicable to cluster-mode volumes.')
volInstanceUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volInstanceUUID.setStatus('current')
if mibBuilder.loadTexts: volInstanceUUID.setDescription('A unique id associated with the volume that moves\n\t\t\t with the volume when the volume is migrated.')
volProvenanceUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volProvenanceUUID.setStatus('current')
if mibBuilder.loadTexts: volProvenanceUUID.setDescription('A unique id associated with the volume that identifies\n\t\t\t the source of the volume content.')
volDrForceNvfail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 30), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volDrForceNvfail.setStatus('current')
if mibBuilder.loadTexts: volDrForceNvfail.setDescription("Indicates whether dr-force-nvfail option is enabled\n\t\t\t on this volume. If true, volume would be put in a\n\t\t\t special state called 'in-nvfailed-state' by switchover\n\t\t\t operation. The protocol access on the volume in\n\t\t\t 'in-nvfailed-state' is blocked. This will cause the\n\t\t\t client applications to crash and thus prevent access\n\t\t\t to data on the volume. To get out of this situation,\n\t\t\t admin needs to manually clear the 'in-nvfailed-state'\n\t\t\t on the volume. By default, dr-force-nvfail option\n\t\t\t value is false.")
volNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volNumber.setStatus('current')
if mibBuilder.loadTexts: volNumber.setDescription('Number of volumes in the volTable.')
qtreeTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 10), )
if mibBuilder.loadTexts: qtreeTable.setStatus('current')
if mibBuilder.loadTexts: qtreeTable.setDescription('Provide a list of the qtrees on the system.')
qtreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1), ).setIndexNames((0, "NETAPP-MIB", "qtreeVolume"), (0, "NETAPP-MIB", "qtreeIndex"))
if mibBuilder.loadTexts: qtreeEntry.setStatus('current')
if mibBuilder.loadTexts: qtreeEntry.setDescription('Provide details about a particular qtree.')
qtreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeIndex.setStatus('current')
if mibBuilder.loadTexts: qtreeIndex.setDescription('Index into the qtree table.')
qtreeVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeVolume.setStatus('current')
if mibBuilder.loadTexts: qtreeVolume.setDescription('A number that identifies the volume that contains\n\t\t\tthis qtree.')
qtreeVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeVolumeName.setStatus('current')
if mibBuilder.loadTexts: qtreeVolumeName.setDescription('The name of the volume that contains this qtree. \n\t\t\tThis includes no /vol/prefix.')
qtreeId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeId.setStatus('current')
if mibBuilder.loadTexts: qtreeId.setDescription('The Id number of the qtree.')
qtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeName.setStatus('current')
if mibBuilder.loadTexts: qtreeName.setDescription('The name of the qtree.')
qtreeStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unix", 1), ("ntfs", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeStyle.setStatus('current')
if mibBuilder.loadTexts: qtreeStyle.setDescription('The security style of the qtree.')
qtreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeStatus.setStatus('current')
if mibBuilder.loadTexts: qtreeStatus.setDescription('The status of the qtree.')
qtreeOplock = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeOplock.setStatus('current')
if mibBuilder.loadTexts: qtreeOplock.setDescription('An indication of whether the oplocks is enabled or not\n\t\t\tfor this qtree.')
qtreeVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeVserver.setStatus('current')
if mibBuilder.loadTexts: qtreeVserver.setDescription('Indicates the vserver to which the volume belongs.\n\t\t\t  Name from the cluster interfaces.\n\t\t\t  Only applicable to cluster-mode volume.')
qtreeExportPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeExportPolicy.setStatus('current')
if mibBuilder.loadTexts: qtreeExportPolicy.setDescription('Indicates the export policy assigned to the qtree.')
qtreeIsExportPolicyInherited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 11), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeIsExportPolicyInherited.setStatus('current')
if mibBuilder.loadTexts: qtreeIsExportPolicyInherited.setDescription('Indicates the export policy assigned to the qtree is\n\t\t\t  inherited from the parent volume.')
qtreeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeMode.setStatus('current')
if mibBuilder.loadTexts: qtreeMode.setDescription('The file permission bits of the qtree.')
aggrTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 11), )
if mibBuilder.loadTexts: aggrTable.setStatus('current')
if mibBuilder.loadTexts: aggrTable.setDescription('List the aggregates defined on the system,\n                        including offline aggregates.')
aggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1), ).setIndexNames((0, "NETAPP-MIB", "aggrIndex"))
if mibBuilder.loadTexts: aggrEntry.setStatus('current')
if mibBuilder.loadTexts: aggrEntry.setDescription("Provide details about a particular aggregate.\n                        For entries returned only from the cluster \n                        interfaces, if the aggrRowInfo is not set to \n                        'available', the values reported by other\n                        fields of this table may not be valid.")
aggrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrIndex.setStatus('current')
if mibBuilder.loadTexts: aggrIndex.setDescription('A number that identifies this aggregate.  The\n                        aggrIndex is not related to any other table\n                        defined in this MIB, and may change as\n                        aggregates are created and destroyed.')
aggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrName.setStatus('current')
if mibBuilder.loadTexts: aggrName.setDescription('Name of the aggregate.  This includes no /vol/\n                        prefix.')
aggrFSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrFSID.setStatus('current')
if mibBuilder.loadTexts: aggrFSID.setDescription('Unique identifier for this aggregate.')
aggrOwningHost = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("partner", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrOwningHost.setStatus('current')
if mibBuilder.loadTexts: aggrOwningHost.setDescription('Indication of which host owns this aggregate.\n                         This field is not supported in a cluster.')
aggrState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrState.setStatus('current')
if mibBuilder.loadTexts: aggrState.setDescription("State of the aggregate, such as 'online' or\n                        'offline'.")
aggrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrStatus.setStatus('current')
if mibBuilder.loadTexts: aggrStatus.setDescription("Status of the aggregate, such as 'normal' or\n                        'reconstructing'. May include several values\n                        separated by comma and space.")
aggrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrOptions.setStatus('current')
if mibBuilder.loadTexts: aggrOptions.setDescription('Options associated with the aggregate.')
aggrUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrUUID.setStatus('current')
if mibBuilder.loadTexts: aggrUUID.setDescription('A unique id associated with the aggregate.')
aggrFlexvollist = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrFlexvollist.setStatus('current')
if mibBuilder.loadTexts: aggrFlexvollist.setDescription('List of all the flexible volumes within this\n                        aggregate.\n                        This field is not supported in a cluster.')
aggrType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("traditional", 1), ("aggregate", 2), ("striped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrType.setStatus('current')
if mibBuilder.loadTexts: aggrType.setDescription('Type of this container, containers\n                        containing flexible volumes are aggregate.')
aggrRaidType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrRaidType.setStatus('current')
if mibBuilder.loadTexts: aggrRaidType.setDescription("Type of raid protection of the aggregate, such as \n                        'raid0', 'mirrored raid0', 'raid4', 'mirrored raid4',\n                        'raid_dp', 'mirrored raid_dp'.")
aggrHAType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("cfo", 1), ("sfo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrHAType.setStatus('current')
if mibBuilder.loadTexts: aggrHAType.setDescription("Aggregate failover type, such as 'cfo' for\n                        cluster failover, 'sfo' for storage failover.\n                        This is set to 'none' if aggregate failover\n\t\t\ttype is not known.")
aggrOwners = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrOwners.setStatus('current')
if mibBuilder.loadTexts: aggrOwners.setDescription('Current owner(s) or the node(s) to which the\n                        aggregate belongs to. In case of striped \n                        aggregates, this will be a comma separated list\n                        of nodes to which the aggregate belongs to.')
aggrRowInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("partiallyAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrRowInfo.setStatus('current')
if mibBuilder.loadTexts: aggrRowInfo.setDescription("Aggregate is 'available' or 'partiallyAvailable'.\n                        This OID is available only from the cluster \n\t\t\tmanagement interfaces.\n\n                        Two possible values are:\n                        'available' : \n                          Indicates a normal case when everything went\n                          fine while fetching the values of the fields\n                          for this table and all values returned \n                          are valid.\n\n                        'partiallyAvailable' : \n                          Indicates something went wrong while fetching\n                          the values of the fields for this table and \n                          not all the values are valid.\n\n                        For fields that could not be fetched, default\n                        values are set. For integers it is -1, for\n                        counters 0, and for string it is null.")
aggrVolumeFootprints = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrVolumeFootprints.setStatus('deprecated')
if mibBuilder.loadTexts: aggrVolumeFootprints.setDescription('Footprint of data and metadata inside\n                        volumes belonging to the Aggregate.\n\t\t\tThis field is deprecated in Data ONTAP 8.3\n\t\t\tand later - use the volume-footprints\n\t\t\tfield of the aggr-space-get-iter ZAPI\n\t\t\tinstead.')
aggrVolumeFootprintsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrVolumeFootprintsPercent.setStatus('deprecated')
if mibBuilder.loadTexts: aggrVolumeFootprintsPercent.setDescription('Footprint of data and metadata inside\n                        volumes belonging to the aggregate as a\n                        percentage of aggregate size.\n\t\t\tThis field is deprecated in Data ONTAP 8.3\n\t\t\tand later - use the volume-footprints-percent\n\t\t\tfield of the aggr-space-get-iter ZAPI\n\t\t\tinstead.')
aggrFilesystemMetadata = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrFilesystemMetadata.setStatus('deprecated')
if mibBuilder.loadTexts: aggrFilesystemMetadata.setDescription('Metadata of the Aggregate.\n\t\t\tThis field is deprecated in Data ONTAP 8.3\n\t\t\tand later - use the aggregate-metadata\n\t\t\tfield of the aggr-space-get-iter ZAPI\n\t\t\tinstead.')
aggrFilesystemMetadataPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrFilesystemMetadataPercent.setStatus('deprecated')
if mibBuilder.loadTexts: aggrFilesystemMetadataPercent.setDescription('Metadata of the Aggregate as a\n                        percentage of Aggregate size.\n\t\t\tThis field is deprecated in Data ONTAP 8.3\n\t\t\tand later - use the aggregate-metadata-percent\n\t\t\tfield of the aggr-space-get-iter ZAPI instead.')
aggrNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrNumber.setStatus('current')
if mibBuilder.loadTexts: aggrNumber.setDescription('Number of aggregates in the aggrTable.')
volMoveStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 13), )
if mibBuilder.loadTexts: volMoveStatusTable.setStatus('current')
if mibBuilder.loadTexts: volMoveStatusTable.setDescription('Status of Vol Move operation')
volMoveStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 13, 1), ).setIndexNames((0, "NETAPP-MIB", "volMoveIndex"))
if mibBuilder.loadTexts: volMoveStatusEntry.setStatus('current')
if mibBuilder.loadTexts: volMoveStatusEntry.setDescription('Provide movement details of a particular volume')
volMoveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volMoveIndex.setStatus('current')
if mibBuilder.loadTexts: volMoveIndex.setDescription('A number that identifies this volume. The volIndex is \n\t\t\t not related to any other table defined in this MIB, and \n\t\t\t may change as volumes are created and destroyed.')
volMoveSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volMoveSrcName.setStatus('current')
if mibBuilder.loadTexts: volMoveSrcName.setDescription('Name of the vol move source volume. \n\t\t\t This will not have the /vol/ prefix.')
volMoveDstaggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volMoveDstaggrName.setStatus('current')
if mibBuilder.loadTexts: volMoveDstaggrName.setDescription('Name of the vol move destination aggregate')
volMoveCOattempts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volMoveCOattempts.setStatus('current')
if mibBuilder.loadTexts: volMoveCOattempts.setDescription('Maximum Cutover attempts for specified vol move operation')
volMoveCOtime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volMoveCOtime.setStatus('current')
if mibBuilder.loadTexts: volMoveCOtime.setDescription('Maximum Cutover time for specified vol move operation')
volMoveState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volMoveState.setStatus('current')
if mibBuilder.loadTexts: volMoveState.setDescription('State of the vol move operation')
raidTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 1), )
if mibBuilder.loadTexts: raidTable.setStatus('deprecated')
if mibBuilder.loadTexts: raidTable.setDescription('Display RAID configuration information for the\n\t\t\t root volume.  This table is deprecated - use\n\t\t\t raidVTable instead.')
raidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "raidIndex"))
if mibBuilder.loadTexts: raidEntry.setStatus('deprecated')
if mibBuilder.loadTexts: raidEntry.setDescription('Display RAID configuration information for\n\t\t\t the referenced disk drive.  This only works for\n\t\t\t disks contained within the root volume, and will\n\t\t\t include spare drives.  This object is \n\t\t\t deprecated - use raidVEntry instead.')
raidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidIndex.setStatus('deprecated')
if mibBuilder.loadTexts: raidIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced disk drive.')
raidDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskName.setStatus('deprecated')
if mibBuilder.loadTexts: raidDiskName.setDescription('The name identifying the referenced disk drive.')
raidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("addingSpare", 7), ("spare", 8), ("prefailed", 9), ("offline", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidStatus.setStatus('deprecated')
if mibBuilder.loadTexts: raidStatus.setDescription('The status of the referenced disk drive.')
raidDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskId.setStatus('deprecated')
if mibBuilder.loadTexts: raidDiskId.setDescription('The disk identifier for the referenced disk\n\t\t\t drive.')
raidScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidScsiAdapter.setStatus('deprecated')
if mibBuilder.loadTexts: raidScsiAdapter.setDescription('The identifier of the SCSI adapter for the\n\t\t\t referenced disk drive.')
raidScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidScsiId.setStatus('deprecated')
if mibBuilder.loadTexts: raidScsiId.setDescription('The identifier for the referenced disk drive\n\t\t\t on the referenced SCSI adapter.')
raidUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidUsedMb.setStatus('deprecated')
if mibBuilder.loadTexts: raidUsedMb.setDescription('The number of MBytes currently in use on\n\t\t\t the referenced disk drive.')
raidUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidUsedBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: raidUsedBlocks.setDescription('The number of Blocks currently in use on\n\t\t\t the referenced disk drive.')
raidTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidTotalMb.setStatus('deprecated')
if mibBuilder.loadTexts: raidTotalMb.setDescription('The number of MBytes physically available\n\t\t\t on the referenced disk drive.')
raidTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidTotalBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: raidTotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced disk drive.')
raidCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidCompletionPerCent.setStatus('deprecated')
if mibBuilder.loadTexts: raidCompletionPerCent.setDescription('In the case when reconstruction/adding a\n\t\t\t  spare, verification or scrubbing is in progress,\n\t\t\t  the percent of such reconstruction, verification\n\t\t\t  or scrubbing that has been completed on the\n\t\t\t  referenced disk drive.')
raidVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 2), )
if mibBuilder.loadTexts: raidVTable.setStatus('current')
if mibBuilder.loadTexts: raidVTable.setDescription('Display RAID configuration information.')
raidVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "raidVVol"), (0, "NETAPP-MIB", "raidVGroup"), (0, "NETAPP-MIB", "raidVIndex"))
if mibBuilder.loadTexts: raidVEntry.setStatus('current')
if mibBuilder.loadTexts: raidVEntry.setDescription('Display RAID configuration information for\n\t\t\t the referenced aggregate, raid group, and disk drive.')
raidVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVIndex.setStatus('current')
if mibBuilder.loadTexts: raidVIndex.setDescription('A number that identifies this disk drive within \n\t\t\t the given aggregate and RAID group.')
raidVDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskName.setStatus('current')
if mibBuilder.loadTexts: raidVDiskName.setDescription('The name identifying the referenced disk drive.')
raidVStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9, 10))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("prefailed", 9), ("offline", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVStatus.setStatus('current')
if mibBuilder.loadTexts: raidVStatus.setDescription('The status of the referenced disk drive.')
raidVDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskId.setStatus('deprecated')
if mibBuilder.loadTexts: raidVDiskId.setDescription('The disk identifier for the referenced disk\n\t\t\t drive. This OID is not available from the \n\t\t\t Cluster management interfaces. This object is deprecated.')
raidVScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVScsiAdapter.setStatus('deprecated')
if mibBuilder.loadTexts: raidVScsiAdapter.setDescription('The identifier of the SCSI adapter for the\n\t\t\t referenced disk drive. This OID is not available \n\t\t\t from the Cluster management interfaces. This object is deprecated.')
raidVScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVScsiId.setStatus('deprecated')
if mibBuilder.loadTexts: raidVScsiId.setDescription('The identifier for the referenced disk drive\n\t\t\t on the referenced SCSI adapter. This OID is \n\t\t\t not available from the Cluster management interfaces.\n\t\t\t This object is deprecated.')
raidVUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVUsedMb.setStatus('current')
if mibBuilder.loadTexts: raidVUsedMb.setDescription('The number of MBytes currently in use on\n\t\t\t the referenced disk drive.')
raidVUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVUsedBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: raidVUsedBlocks.setDescription('The number of Blocks currently in use on\n\t\t\t the referenced disk drive. This object is deprecated.\n\t\t\t Use raidV64UsedBlocks object instead.')
raidVTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVTotalMb.setStatus('current')
if mibBuilder.loadTexts: raidVTotalMb.setDescription('The number of MBytes physically available\n\t\t\t on the referenced disk drive.')
raidVTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVTotalBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: raidVTotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced disk drive. This object is deprecated.\n\t\t\t Use raidV64TotalBlocks object instead.')
raidVCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVCompletionPerCent.setStatus('current')
if mibBuilder.loadTexts: raidVCompletionPerCent.setDescription('In the case when rapid raid recovery, disk copy,\n\t\t\t  reconstruction/adding a spare, verification or \n\t\t\t  scrubbing is in progress, the percent of such \n\t\t\t  copy, reconstruction, verification or scrubbing \n\t\t\t  that has been completed on the referenced disk \n\t\t\t  drive.')
raidVVol = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVVol.setStatus('current')
if mibBuilder.loadTexts: raidVVol.setDescription("A number that identifies the aggregate that this entry\n\t\t\t belongs to.  The first aggregate is '1'.")
raidVGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVGroup.setStatus('current')
if mibBuilder.loadTexts: raidVGroup.setDescription("A number that identifies the RAID group within the\n\t\t\t given aggregate that this entry belongs to.  The\n\t\t\t first RAID group is '1', and number across all plexes.")
raidVDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskNumber.setStatus('current')
if mibBuilder.loadTexts: raidVDiskNumber.setDescription('The number of disks within this RAID group.')
raidVGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVGroupNumber.setStatus('current')
if mibBuilder.loadTexts: raidVGroupNumber.setDescription('The number of RAID groups within this aggregate.')
raidVDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskPort.setStatus('deprecated')
if mibBuilder.loadTexts: raidVDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the primary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone. This OID is not available \n\t\t\tfrom the Cluster management interfaces.\n\t\t\tThis object is deprecated.')
raidVSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSecondaryDiskName.setStatus('deprecated')
if mibBuilder.loadTexts: raidVSecondaryDiskName.setDescription('The name identifying the secondary path to\n\t\t\tthe referenced disk drive. This OID is not \n\t\t\tavailable from the Cluster management interfaces.\n\t\t\tThis object is deprecated.')
raidVSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSecondaryDiskPort.setStatus('deprecated')
if mibBuilder.loadTexts: raidVSecondaryDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the secondary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone. This OID is not available from \n\t\t\tthe Cluster management interfaces. This object is deprecated.')
raidVShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVShelf.setStatus('current')
if mibBuilder.loadTexts: raidVShelf.setDescription('Number identifying the shelf where the disk\n\t\t\tis located.')
raidVBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVBay.setStatus('current')
if mibBuilder.loadTexts: raidVBay.setDescription('Number identifying the disk bay within\n\t\t\tthe shelf where the disk is located.')
raidVPlex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlex.setStatus('current')
if mibBuilder.loadTexts: raidVPlex.setDescription("A number that identifies the plex within the\n                         given aggregate that this entry belongs to.  The\n                         first plex is '1'.")
raidVPlexGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexGroup.setStatus('current')
if mibBuilder.loadTexts: raidVPlexGroup.setDescription("A number that identifies the RAID group within\n                         the given plex that this entry belongs to.  The\n                         first RAID group is '1'.")
raidVPlexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexNumber.setStatus('current')
if mibBuilder.loadTexts: raidVPlexNumber.setDescription('The number of plexes within this aggregate.\n                        This number is always 1 or 2.')
raidVPlexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexName.setStatus('current')
if mibBuilder.loadTexts: raidVPlexName.setDescription("A name that identifies the plex that this entry\n\t\t\t belongs to.  A plex name can be anything, but\n                         is usually a string like 'plex0' or 'plex1'.")
raidVSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSectorSize.setStatus('current')
if mibBuilder.loadTexts: raidVSectorSize.setDescription("A number that specifies bytes per sector\n                         for this entry.  Values are '512' or '520'.")
raidVDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: raidVDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
raidVDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskVendor.setStatus('current')
if mibBuilder.loadTexts: raidVDiskVendor.setDescription('The vendor of the referenced disk drive.')
raidVDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskModel.setStatus('current')
if mibBuilder.loadTexts: raidVDiskModel.setDescription('Model string of the referenced disk drive.')
raidVDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: raidVDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
raidVDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskRPM.setStatus('current')
if mibBuilder.loadTexts: raidVDiskRPM.setDescription('RPM of the referenced disk drive.')
raidVDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskType.setStatus('current')
if mibBuilder.loadTexts: raidVDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, \n\t\t or ATA.')
raidVDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskPool.setStatus('current')
if mibBuilder.loadTexts: raidVDiskPool.setDescription('A name that identifies the disk pool that this entry \n\t\t belongs to.')
raidVDiskCopyDestDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskCopyDestDiskName.setStatus('current')
if mibBuilder.loadTexts: raidVDiskCopyDestDiskName.setDescription('When raidVStatus value is prefailed, this string identifies \n\t\t the name of the disk which is the copy target of the \n\t\t referenced prefailed disk.')
raidVDiskUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskUID.setStatus('current')
if mibBuilder.loadTexts: raidVDiskUID.setDescription('Unique identifier for the disk. The maximum length is 90 characters.')
raidV64UsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidV64UsedBlocks.setStatus('current')
if mibBuilder.loadTexts: raidV64UsedBlocks.setDescription('The number of Blocks currently in use on the referenced disk drive.\n\t\t This object returns all of the 64 bit unsigned integer.')
raidV64TotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidV64TotalBlocks.setStatus('current')
if mibBuilder.loadTexts: raidV64TotalBlocks.setDescription('The number of Blocks physically available on the referenced disk drive.\n\t\t This object returns all of the 64 bit unsigned integer.')
raidVCarrierID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVCarrierID.setStatus('current')
if mibBuilder.loadTexts: raidVCarrierID.setDescription('Unique identifier of the disk carrier.')
spareTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 3), )
if mibBuilder.loadTexts: spareTable.setStatus('current')
if mibBuilder.loadTexts: spareTable.setDescription('Display spare disk configuration information.')
spareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "spareIndex"))
if mibBuilder.loadTexts: spareEntry.setStatus('current')
if mibBuilder.loadTexts: spareEntry.setDescription('Display configuration information for\n\t\t\t the referenced spare disk drive.')
spareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareIndex.setStatus('current')
if mibBuilder.loadTexts: spareIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced disk drive in the list of spare disk\n\t\t\t drives.')
spareDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskName.setStatus('current')
if mibBuilder.loadTexts: spareDiskName.setDescription('The name identifying the referenced spare disk \n\t\t\t drive.')
spareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10))).clone(namedValues=NamedValues(("spare", 1), ("addingspare", 2), ("bypassed", 3), ("unknown", 4), ("offline", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareStatus.setStatus('current')
if mibBuilder.loadTexts: spareStatus.setDescription('The status of the referenced spare disk drive.')
spareDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskId.setStatus('deprecated')
if mibBuilder.loadTexts: spareDiskId.setDescription('The disk identifier for the referenced spare disk\n\t\t\t drive. This OID is not available from the Cluster\n\t\t\t management interfaces. This object is deprecated.')
spareScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareScsiAdapter.setStatus('deprecated')
if mibBuilder.loadTexts: spareScsiAdapter.setDescription('The identifier of the SCSI adapter for the\n\t\t\t referenced spare disk drive. This OID is not \n\t\t\t available from the Cluster management interfaces.\n\t\t\t This object is deprecated.')
spareScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareScsiId.setStatus('deprecated')
if mibBuilder.loadTexts: spareScsiId.setDescription('The identifier for the referenced spare disk drive\n\t\t\t on the referenced SCSI adapter. This OID is not \n\t\t\t available from the Cluster management interfaces.\n\t\t\t This object is deprecated.')
spareTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareTotalMb.setStatus('current')
if mibBuilder.loadTexts: spareTotalMb.setDescription('The number of MBytes physically available\n\t\t\t on the referenced spare disk drive.')
spareTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareTotalBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: spareTotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced spare disk drive. This object is deprecated.\n\t\t\t Use spare64TotalBlocks object instead.')
spareDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskPort.setStatus('deprecated')
if mibBuilder.loadTexts: spareDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the primary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone. This OID is not available\n\t\t\tfrom the Cluster management interfaces.\n\t\t\tThis object is deprecated.')
spareSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSecondaryDiskName.setStatus('deprecated')
if mibBuilder.loadTexts: spareSecondaryDiskName.setDescription('The name identifying the secondary path to\n\t\t\tthe referenced disk drive. This OID is not \n\t\t\tavailable from the Cluster management interfaces.\n\t\t\tThis object is deprecated.')
spareSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSecondaryDiskPort.setStatus('deprecated')
if mibBuilder.loadTexts: spareSecondaryDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the secondary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone. This OID is not available from\n\t\t\tthe Cluster management interfaces. This object is deprecated.')
spareShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareShelf.setStatus('current')
if mibBuilder.loadTexts: spareShelf.setDescription('Number identifying the shelf where the disk\n\t\t\tis located.')
spareBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareBay.setStatus('current')
if mibBuilder.loadTexts: spareBay.setDescription('Number identifying the disk bay within\n\t\t\tthe shelf where the disk is located.')
sparePool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparePool.setStatus('current')
if mibBuilder.loadTexts: sparePool.setDescription('A name that identifies the disk pool that this\n                         entry belongs to.')
spareSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSectorSize.setStatus('current')
if mibBuilder.loadTexts: spareSectorSize.setDescription("A number that specifies bytes per sector\n                         for this entry.  Values are '512' or '520'.")
spareDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: spareDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
spareDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskVendor.setStatus('current')
if mibBuilder.loadTexts: spareDiskVendor.setDescription('The vendor of the referenced disk drive.')
spareDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskModel.setStatus('current')
if mibBuilder.loadTexts: spareDiskModel.setDescription('Model string of the referenced disk drive.')
spareDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: spareDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
spareDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskRPM.setStatus('current')
if mibBuilder.loadTexts: spareDiskRPM.setDescription('RPM of the referenced disk drive.')
spareDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskType.setStatus('current')
if mibBuilder.loadTexts: spareDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, \n\t\t or ATA.')
spareDiskUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskUID.setStatus('current')
if mibBuilder.loadTexts: spareDiskUID.setDescription('External unique identifier for the disk. \n\t\tThe Maximum length is 90 characters.')
spare64TotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spare64TotalBlocks.setStatus('current')
if mibBuilder.loadTexts: spare64TotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced spare disk drive. This\n\t\t\t object returns all of the 64 bit unsigned integer.')
spareCarrierID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareCarrierID.setStatus('current')
if mibBuilder.loadTexts: spareCarrierID.setDescription('Unique identifier of the disk carrier.')
diskSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 6, 4))
diskTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalCount.setStatus('current')
if mibBuilder.loadTexts: diskTotalCount.setDescription('The total number of disks on the system.')
diskActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskActiveCount.setStatus('current')
if mibBuilder.loadTexts: diskActiveCount.setDescription('The number of disks which are currently active,\n\t\t\tincluding parity disks.')
diskReconstructingCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskReconstructingCount.setStatus('current')
if mibBuilder.loadTexts: diskReconstructingCount.setDescription('The number of disks which are\n\t\t\tcurrently being reconstructed.')
diskReconstructingParityCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskReconstructingParityCount.setStatus('current')
if mibBuilder.loadTexts: diskReconstructingParityCount.setDescription('The number of parity disks which are\n\t\t\tcurrently being reconstructed.')
diskVerifyingParityCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVerifyingParityCount.setStatus('current')
if mibBuilder.loadTexts: diskVerifyingParityCount.setDescription('The number of disks which are\n\t\t\tcurrently being verified.')
diskScrubbingCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskScrubbingCount.setStatus('current')
if mibBuilder.loadTexts: diskScrubbingCount.setDescription('The number of disks which are\n\t\t\tcurrently being scrubbed.')
diskFailedCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFailedCount.setStatus('current')
if mibBuilder.loadTexts: diskFailedCount.setDescription('The number of disks which are\n\t\t\tcurrently broken.')
diskSpareCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSpareCount.setStatus('current')
if mibBuilder.loadTexts: diskSpareCount.setDescription('The number of available spare disks.')
diskAddingSpareCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskAddingSpareCount.setStatus('current')
if mibBuilder.loadTexts: diskAddingSpareCount.setDescription('The number of spare disks which are\n\t\t\tcurrently being added into a RAID group.')
diskFailedMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFailedMessage.setStatus('current')
if mibBuilder.loadTexts: diskFailedMessage.setDescription('If diskFailedCount is non-zero, this is\n\t\t\ta string describing the failed disk or \n\t\t\tdisks.  Each failed disk is described with\n\t\t\ta sentence like\n\n\t\t\tDisk on adapter 8a, shelf 1, bay 0, failed.\n\n\t\t\tor\n\n\t\t\tDisk on stack 3, shelf 2, bay 2, failed.')
diskPrefailedCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPrefailedCount.setStatus('current')
if mibBuilder.loadTexts: diskPrefailedCount.setDescription('The number of disks which are prefailed and marked\n\t\t\t  for rapid raid recovery.')
raidVNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVNumber.setStatus('current')
if mibBuilder.loadTexts: raidVNumber.setDescription('Number of entries in the raidVTable table.\n\t\t\t This is the total number of aggregates in the system.')
spareNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareNumber.setStatus('current')
if mibBuilder.loadTexts: spareNumber.setDescription('Number of entries in the spareTable table.')
otherDiskNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskNumber.setStatus('current')
if mibBuilder.loadTexts: otherDiskNumber.setDescription('Number of entries in the otherDiskTable table.')
raidPNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPNumber.setStatus('current')
if mibBuilder.loadTexts: raidPNumber.setDescription('Number of entries in the raidPTable table.\n\t\t\t This is the total number of aggregates in the system.')
otherDiskTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 9), )
if mibBuilder.loadTexts: otherDiskTable.setStatus('current')
if mibBuilder.loadTexts: otherDiskTable.setDescription('Display out-of-service disk configuration information.')
otherDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1), ).setIndexNames((0, "NETAPP-MIB", "otherDiskIndex"))
if mibBuilder.loadTexts: otherDiskEntry.setStatus('current')
if mibBuilder.loadTexts: otherDiskEntry.setDescription('Display configuration information for\n\t\t\t the referenced disk drive.')
otherDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskIndex.setStatus('current')
if mibBuilder.loadTexts: otherDiskIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced disk drive in the list of out-of-service\n\t\t\t disk drives. Out-of-service disks include all disks\n                         that are not in service in a raid group or available\n                         as a spare disk.')
otherDiskDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskName.setStatus('current')
if mibBuilder.loadTexts: otherDiskDiskName.setDescription('The name identifying the referenced disk \n\t\t\t drive.')
otherDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broken", 1), ("bypassed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskStatus.setStatus('current')
if mibBuilder.loadTexts: otherDiskStatus.setDescription('The status of the referenced disk drive.')
otherDiskDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskId.setStatus('deprecated')
if mibBuilder.loadTexts: otherDiskDiskId.setDescription('The disk identifier for the referenced disk\n\t\t\t drive. This OID is not available from the Cluster\n\t\t\t management interfaces. This object is deprecated.')
otherDiskScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskScsiAdapter.setStatus('deprecated')
if mibBuilder.loadTexts: otherDiskScsiAdapter.setDescription('The identifier of the SCSI adapter for the\n\t\t\t referenced disk drive. This OID is not available\n\t\t\t from the Cluster management interfaces.\n\t\t\t This object is deprecated.')
otherDiskScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskScsiId.setStatus('deprecated')
if mibBuilder.loadTexts: otherDiskScsiId.setDescription('The identifier for the referenced disk drive\n\t\t\t on the referenced SCSI adapter. This OID is\n\t\t\t not available from the Cluster management interfaces.\n\t\t\t This object is deprecated.')
otherDiskTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskTotalMb.setStatus('current')
if mibBuilder.loadTexts: otherDiskTotalMb.setDescription('The number of MBytes physically available\n\t\t\t on the referenced disk drive.')
otherDiskTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskTotalBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: otherDiskTotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced disk drive. This object is deprecated.\n\t\t\t Use otherDisk64TotalBlocks object instead.')
otherDiskDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskPort.setStatus('deprecated')
if mibBuilder.loadTexts: otherDiskDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the primary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone. This OID is not available\n\t\t\tfrom the Cluster management interfaces.\n\t\t\tThis object is deprecated.')
otherDiskSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSecondaryDiskName.setStatus('deprecated')
if mibBuilder.loadTexts: otherDiskSecondaryDiskName.setDescription('The name identifying the secondary path to\n\t\t\tthe referenced disk drive. This OID is not available\n\t\t\tfrom the Cluster management interfaces.\n\t\t\tThis object is deprecated.')
otherDiskSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSecondaryDiskPort.setStatus('deprecated')
if mibBuilder.loadTexts: otherDiskSecondaryDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the secondary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone. This OID is not available\n\t\t\tfrom the Cluster management interfaces.\n\t\t\tThis object is deprecated.')
otherDiskShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskShelf.setStatus('current')
if mibBuilder.loadTexts: otherDiskShelf.setDescription('Number identifying the shelf where the disk\n\t\t\tis located.')
otherDiskBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskBay.setStatus('current')
if mibBuilder.loadTexts: otherDiskBay.setDescription('Number identifying the disk bay within\n\t\t\tthe shelf where the disk is located.')
otherDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskPool.setStatus('current')
if mibBuilder.loadTexts: otherDiskPool.setDescription('A name that identifies the disk pool that this\n                         entry belongs to.')
otherDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSectorSize.setStatus('current')
if mibBuilder.loadTexts: otherDiskSectorSize.setDescription("A number that specifies bytes per sector\n                         for this entry.  Values are '512' or '520'.")
otherDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: otherDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
otherDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskVendor.setStatus('current')
if mibBuilder.loadTexts: otherDiskVendor.setDescription('The vendor of the referenced disk drive.')
otherDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskModel.setStatus('current')
if mibBuilder.loadTexts: otherDiskModel.setDescription('Model string of the referenced disk drive.')
otherDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: otherDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
otherDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskRPM.setStatus('current')
if mibBuilder.loadTexts: otherDiskRPM.setDescription('RPM of the referenced disk drive.')
otherDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskType.setStatus('current')
if mibBuilder.loadTexts: otherDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, \n\t\t or ATA.')
otherDisk64TotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDisk64TotalBlocks.setStatus('current')
if mibBuilder.loadTexts: otherDisk64TotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced disk drive. This object\n\t\t\treturns all of the 64 bit unsigned integer.')
otherDiskCarrierID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskCarrierID.setStatus('current')
if mibBuilder.loadTexts: otherDiskCarrierID.setDescription('Unique identifier of the disk carrier.')
raidPTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 10), )
if mibBuilder.loadTexts: raidPTable.setStatus('current')
if mibBuilder.loadTexts: raidPTable.setDescription('Display RAID configuration information.')
raidPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1), ).setIndexNames((0, "NETAPP-MIB", "raidPVol"), (0, "NETAPP-MIB", "raidPPlex"), (0, "NETAPP-MIB", "raidPGroup"), (0, "NETAPP-MIB", "raidPIndex"))
if mibBuilder.loadTexts: raidPEntry.setStatus('current')
if mibBuilder.loadTexts: raidPEntry.setDescription('Display RAID configuration information for\n\t\t\t the referenced aggregate, plex, raid group, and disk drive.')
raidPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPIndex.setStatus('current')
if mibBuilder.loadTexts: raidPIndex.setDescription('A number that identifies this disk drive within \n\t\t\t the given aggregate and RAID group.')
raidPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9, 10))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("prefailed", 9), ("offline", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPStatus.setStatus('current')
if mibBuilder.loadTexts: raidPStatus.setDescription('The status of the referenced disk drive.')
raidPVol = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPVol.setStatus('current')
if mibBuilder.loadTexts: raidPVol.setDescription("A number that identifies the aggregate that this entry\n\t\t\t belongs to. The first aggregate is '1'.")
raidPPlex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlex.setStatus('current')
if mibBuilder.loadTexts: raidPPlex.setDescription("A number that identifies the plex that this entry\n\t\t\t belongs to. The first plex is '1'.")
raidPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPGroup.setStatus('current')
if mibBuilder.loadTexts: raidPGroup.setDescription("A number that identifies the RAID group within the\n\t\t\t given plex that this entry belongs to. The\n\t\t\t first RAID group is '1'.")
raidPPlexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlexNumber.setStatus('current')
if mibBuilder.loadTexts: raidPPlexNumber.setDescription('The number of plexes within this aggregate.\n                        This number is always 1 or 2.')
raidPGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPGroupNumber.setStatus('current')
if mibBuilder.loadTexts: raidPGroupNumber.setDescription('The number of RAID groups within this plex.')
raidPDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskNumber.setStatus('current')
if mibBuilder.loadTexts: raidPDiskNumber.setDescription('The number of disks within this RAID group.')
raidPPlexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlexName.setStatus('current')
if mibBuilder.loadTexts: raidPPlexName.setDescription("A name that identifies the plex that this entry\n\t\t\t belongs to.  A plex name can be anything, but\n                         is usually a string like 'plex0' or 'plex1'.")
raidPDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskName.setStatus('current')
if mibBuilder.loadTexts: raidPDiskName.setDescription('The name identifying the referenced disk drive.')
raidPDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskPort.setStatus('deprecated')
if mibBuilder.loadTexts: raidPDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the primary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone. This OID is not available\n\t\t\tfrom the Cluster management interfaces.\n\t\t\tThis object is deprecated.')
raidPSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSecondaryDiskName.setStatus('deprecated')
if mibBuilder.loadTexts: raidPSecondaryDiskName.setDescription('The name identifying the secondary path to\n\t\t\tthe referenced disk drive. This OID is not\n\t\t\tavailable from the Cluster management interfaces.\n\t\t\tThis object is deprecated.')
raidPSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSecondaryDiskPort.setStatus('deprecated')
if mibBuilder.loadTexts: raidPSecondaryDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the secondary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone. This OID is not available\n\t\t\tfrom the Cluster management interfaces.\n\t\t\tThis object is deprecated.')
raidPScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPScsiAdapter.setStatus('deprecated')
if mibBuilder.loadTexts: raidPScsiAdapter.setDescription('The identifier of the SCSI adapter for the\n\t\t\t referenced disk drive. This OID is not available\n\t\t\t from the Cluster management interfaces.\n\t\t\t This object is deprecated.')
raidPScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPScsiId.setStatus('deprecated')
if mibBuilder.loadTexts: raidPScsiId.setDescription('The identifier for the referenced disk drive\n\t\t\t on the referenced SCSI adapter. This OID is\n\t\t\t not available from the Cluster management interfaces.\n\t\t\t This object is deprecated.')
raidPDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskId.setStatus('deprecated')
if mibBuilder.loadTexts: raidPDiskId.setDescription('The disk identifier for the referenced disk\n\t\t\t drive. This OID is not available from the\n\t\t\t Cluster management interfaces.\n\t\t\t This object is deprecated.')
raidPShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPShelf.setStatus('current')
if mibBuilder.loadTexts: raidPShelf.setDescription('Number identifying the shelf where the disk\n\t\t\tis located.')
raidPBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPBay.setStatus('current')
if mibBuilder.loadTexts: raidPBay.setDescription('Number identifying the disk bay within\n\t\t\tthe shelf where the disk is located.')
raidPSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSectorSize.setStatus('current')
if mibBuilder.loadTexts: raidPSectorSize.setDescription("A number that specifies bytes per sector\n                         for this entry.  Values are '512' or '520'.")
raidPUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPUsedMb.setStatus('current')
if mibBuilder.loadTexts: raidPUsedMb.setDescription('The number of MBytes currently in use on\n\t\t\t the referenced disk drive.')
raidPUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPUsedBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: raidPUsedBlocks.setDescription('The number of Blocks currently in use on\n\t\t\t the referenced disk drive. This object is deprecated.\n\t\t\t Use raidP64UsedBlocks object instead.')
raidPTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPTotalMb.setStatus('current')
if mibBuilder.loadTexts: raidPTotalMb.setDescription('The number of MBytes physically available\n\t\t\t on the referenced disk drive.')
raidPTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPTotalBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: raidPTotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced disk drive. This object is deprecated.\n\t\t\t Use raidP64TotalBlocks object instead.')
raidPCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPCompletionPerCent.setStatus('current')
if mibBuilder.loadTexts: raidPCompletionPerCent.setDescription('In the case when rapid raid recovery, disk copy,\n\t\t\t  reconstruction or adding a spare, verification or \n\t\t\t  scrubbing is in progress, the percent of such copy, \n\t\t\t  reconstruction, verification or scrubbing that has \n\t\t\t  been completed on the referenced disk drive.')
raidPDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: raidPDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
raidPDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskVendor.setStatus('current')
if mibBuilder.loadTexts: raidPDiskVendor.setDescription('The vendor of the referenced disk drive.')
raidPDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskModel.setStatus('current')
if mibBuilder.loadTexts: raidPDiskModel.setDescription('Model string of the referenced disk drive.')
raidPDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: raidPDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
raidPDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskRPM.setStatus('current')
if mibBuilder.loadTexts: raidPDiskRPM.setDescription('RPM of the referenced disk drive.')
raidPDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskType.setStatus('current')
if mibBuilder.loadTexts: raidPDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, \n\t\t or ATA.')
raidPDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskPool.setStatus('current')
if mibBuilder.loadTexts: raidPDiskPool.setDescription('A name that identifies the disk pool that this entry \n\t\t belongs to.')
raidPDiskCopyDestDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskCopyDestDiskName.setStatus('current')
if mibBuilder.loadTexts: raidPDiskCopyDestDiskName.setDescription('When raidPStatus value is prefailed, this string identifies \n\t\t the name of the disk which is the copy target of the \n\t\t referenced prefailed disk.')
raidP64UsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidP64UsedBlocks.setStatus('current')
if mibBuilder.loadTexts: raidP64UsedBlocks.setDescription('The number of Blocks currently in use on\n\t\t\t the referenced disk drive. This object returns\n\t\t\t all of the 64 bit unsigned integer.')
raidP64TotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidP64TotalBlocks.setStatus('current')
if mibBuilder.loadTexts: raidP64TotalBlocks.setDescription('The number of Blocks physically available on\n\t\t\t the referenced disk drive. This object returns\n\t\t\t all of the 64 bit unsigned integer.')
raidPCarrierID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPCarrierID.setStatus('current')
if mibBuilder.loadTexts: raidPCarrierID.setDescription('Unique identifier of the disk carrier.')
plexTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 11), )
if mibBuilder.loadTexts: plexTable.setStatus('current')
if mibBuilder.loadTexts: plexTable.setDescription('A table containing plex specific information.')
plexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1), ).setIndexNames((0, "NETAPP-MIB", "plexIndex"))
if mibBuilder.loadTexts: plexEntry.setStatus('current')
if mibBuilder.loadTexts: plexEntry.setDescription('Provide a report on file system plexes.')
plexIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexIndex.setStatus('current')
if mibBuilder.loadTexts: plexIndex.setDescription('A number that identifies this entry for the\n                         referenced plex.')
plexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexName.setStatus('current')
if mibBuilder.loadTexts: plexName.setDescription('The identifier of the plex.')
plexVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexVolName.setStatus('current')
if mibBuilder.loadTexts: plexVolName.setDescription('The aggregate to which this plex belongs.')
plexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offline", 1), ("resyncing", 2), ("online", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexStatus.setStatus('current')
if mibBuilder.loadTexts: plexStatus.setDescription('The status of the plex.')
plexPercentResyncing = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexPercentResyncing.setStatus('current')
if mibBuilder.loadTexts: plexPercentResyncing.setDescription('If the plex is resyncing, the percent \n                              completion of the resync.')
outOfDateDiskCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskCount.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskCount.setDescription('Number of entries in the outOfDateDiskTable table.')
outOfDateDiskTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 13), )
if mibBuilder.loadTexts: outOfDateDiskTable.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskTable.setDescription('Display out-of-date disk information.')
outOfDateDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1), ).setIndexNames((0, "NETAPP-MIB", "outOfDateDiskIndex"))
if mibBuilder.loadTexts: outOfDateDiskEntry.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskEntry.setDescription('Display information for the referenced\n\t\t\t out-of-date disk.')
outOfDateDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskIndex.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced disk drive in the list of out-of-date\n\t\t\t disk drives.')
outOfDateDiskDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskName.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskDiskName.setDescription('The name identifying the referenced disk \n\t\t\t drive.')
outOfDateDiskDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskId.setStatus('deprecated')
if mibBuilder.loadTexts: outOfDateDiskDiskId.setDescription('The disk identifier for the referenced disk\n\t\t\t drive. This OID is not available from the\n\t\t\t Cluster management interfaces.\n\t\t\t This object is deprecated.')
outOfDateDiskScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskScsiAdapter.setStatus('deprecated')
if mibBuilder.loadTexts: outOfDateDiskScsiAdapter.setDescription('The identifier of the SCSI adapter for the\n\t\t\t referenced disk drive. This OID is not available\n\t\t\t from the Cluster management interfaces.\n\t\t\t This object is deprecated.')
outOfDateDiskScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskScsiId.setStatus('deprecated')
if mibBuilder.loadTexts: outOfDateDiskScsiId.setDescription('The identifier for the referenced disk drive\n\t\t\t on the referenced SCSI adapter. This OID is not\n\t\t\t available from the Cluster management interfaces.\n\t\t\t This object is deprecated.')
outOfDateDiskTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskTotalMb.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskTotalMb.setDescription('The number of MBytes physically available\n\t\t\t on the referenced disk drive.')
outOfDateDiskTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskTotalBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: outOfDateDiskTotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced disk drive. This object is deprecated.\n\t\t\t Use outOfDateDisk64TotalBlocks object instead.')
outOfDateDiskDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskPort.setStatus('deprecated')
if mibBuilder.loadTexts: outOfDateDiskDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the primary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone. This OID is not available\n\t\t\tfrom the Cluster management interfaces.\n\t\t\tThis object is deprecated.')
outOfDateDiskSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskName.setStatus('deprecated')
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskName.setDescription('The name identifying the secondary path to\n\t\t\tthe referenced disk drive. This OID is not available\n\t\t\tfrom the Cluster management interfaces.\n\t\t\tThis object is deprecated')
outOfDateDiskSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskPort.setStatus('deprecated')
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the secondary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone. This OID is not available\n\t\t\tfrom the Cluster management interfaces.\n\t\t\tThis object is deprecated.')
outOfDateDiskShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskShelf.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskShelf.setDescription('Number identifying the shelf where the disk\n\t\t\tis located.')
outOfDateDiskBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskBay.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskBay.setDescription('Number identifying the disk bay within\n\t\t\tthe shelf where the disk is located.')
outOfDateDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskPool.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskPool.setDescription('A name that identifies the disk pool that this\n                         entry belongs to.')
outOfDateDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSectorSize.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskSectorSize.setDescription("A number that specifies bytes per sector\n                         for this entry.  Values are '512' or '520'.")
outOfDateDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
outOfDateDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskVendor.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskVendor.setDescription('The vendor of the referenced disk drive.')
outOfDateDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskModel.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskModel.setDescription('Model string of the referenced disk drive.')
outOfDateDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
outOfDateDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskRPM.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskRPM.setDescription('RPM of the referenced disk drive.')
outOfDateDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskType.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, \n\t\t or ATA.')
outOfDateDisk64TotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDisk64TotalBlocks.setStatus('current')
if mibBuilder.loadTexts: outOfDateDisk64TotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced disk drive. This object\n\t\t\t returns all of the 64 bit unsigned integer.')
outOfDateDiskCarrierID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskCarrierID.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskCarrierID.setDescription('Unique identifier of the disk carrier.')
cifsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 1))
cifsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 2))
cifsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3))
cifsMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 4))
cifsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsIsEnabled.setDescription('Whether the CIFS protocol is active on the\n\t\t\t filer.')
cifsIsLoginEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsLoginEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsIsLoginEnabled.setDescription('Whether new CIFS connections to the filer\n\t\t\t are currently allowed.')
cifsHostName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsHostName.setStatus('current')
if mibBuilder.loadTexts: cifsHostName.setDescription('The host name used by the CIFS protocol on this\n\t\t\t filer.')
cifsAltNames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAltNames.setStatus('current')
if mibBuilder.loadTexts: cifsAltNames.setDescription('Alternate names recognized by the filer.')
cifsDomainJoined = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDomainJoined.setStatus('current')
if mibBuilder.loadTexts: cifsDomainJoined.setDescription('Has the filer joined an NT domain?\n\t\t\t If this value is true, cifsDomainName\n\t\t\t will contain the name of the domain.\n\t\t\t Otherwise, the filer may have joined\n\t\t\t a WorkGroup, and cifsWGName will contain\n\t\t\t the name of the WorkGroup. ')
cifsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDomainName.setStatus('current')
if mibBuilder.loadTexts: cifsDomainName.setDescription('The domain name used by the CIFS \n\t\t\t protocol on this filer.')
cifsWGName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWGName.setStatus('current')
if mibBuilder.loadTexts: cifsWGName.setDescription('The workgroup name (if any) used by \n\t\t\t the CIFS protocol on this filer.')
cifsDCName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDCName.setStatus('current')
if mibBuilder.loadTexts: cifsDCName.setDescription('The name of the Domain Controller used by\n\t\t\t this filer to authenticate users and file\n\t\t\t requests.')
cifsIsWinsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsWinsEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsIsWinsEnabled.setDescription('True if WINS name resolution is enabled\n\t\t\t on the filer.')
cifsWinsServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWinsServers.setStatus('current')
if mibBuilder.loadTexts: cifsWinsServers.setDescription('The name(s) of the WINS servers registered\n\t\t\t with the filer.')
cifsSecurityModel = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unix", 1), ("pc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSecurityModel.setStatus('current')
if mibBuilder.loadTexts: cifsSecurityModel.setDescription('Which type of authentication semantics\n\t\t\t (Unix or PC) are in use for PC access to \n\t\t\t Unix files on the filer. If Unix semantics\n\t\t\t are in use, no ACL on a Unix file is ever \n\t\t\t checked. If PC semantics are in use, the \n\t\t\t share level ACL on the share containing the \n\t\t\t file is used for authentication instead of \n\t\t\t the group portion of the permissions on \n\t\t\t the file.')
cifsPCGenericUser = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPCGenericUser.setStatus('current')
if mibBuilder.loadTexts: cifsPCGenericUser.setDescription('The name of the generic PC user, if any.  This\n\t\t\t username is used for CIFS access by Unix users\n\t\t\t who have not authenticated through CIFS or NT.')
cifsOplocksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOplocksEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsOplocksEnabled.setDescription('Whether oplocks are enabled on the filer.')
cifsLevel2OplocksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsLevel2OplocksEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsLevel2OplocksEnabled.setDescription('Whether level 2 oplocks are enabled on the filer.')
cifsPreserveCase = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPreserveCase", 1), ("preserveCase", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPreserveCase.setStatus('current')
if mibBuilder.loadTexts: cifsPreserveCase.setDescription('If this option is set to preserve-case\n\t\t\t (the default), all filename references\n\t\t\t will be case preserving.  Otherwise,\n\t\t\t they are forced to lowercase.')
cifsSymlinksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSymlinksEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsSymlinksEnabled.setDescription('If this option is enabled, CIFS accesses will\n\t\t\t follow symbolic links using Unix semantics.')
cifsSymlinkCycleProtEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSymlinkCycleProtEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsSymlinkCycleProtEnabled.setDescription('If this option is enabled, CIFS accesses will\n\t\t\t through symbolic links will check for cycles\n\t\t\t in the link graph.')
cifsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsLicensed.setStatus('current')
if mibBuilder.loadTexts: cifsIsLicensed.setDescription('Whether the CIFS protocol is licensed on the\n\t\t\t filer.')
cifsPerClientStatsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPerClientStatsEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsPerClientStatsEnabled.setDescription('True when cifs.per_client_stats are\n\t\t\t being collected.')
cifsStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsStatus.setStatus('current')
if mibBuilder.loadTexts: cifsStatus.setDescription('Encoding of CIFS startup state on the filer.')
cifsNeedPW = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNeedPW.setStatus('current')
if mibBuilder.loadTexts: cifsNeedPW.setDescription('Does the administrative password need \n\t\t\t to be set before start?')
cifsTimeToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTimeToShutdown.setStatus('current')
if mibBuilder.loadTexts: cifsTimeToShutdown.setDescription('Time remaining until CIFS shutdown')
cifsMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxConnections.setStatus('current')
if mibBuilder.loadTexts: cifsMaxConnections.setDescription('The maximum number of simultaneous CIFS \n\t\t\t connections allowed on the filer.')
cifsMaxTrees = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxTrees.setStatus('current')
if mibBuilder.loadTexts: cifsMaxTrees.setDescription('The maximum number of simultaneous CIFS\n\t\t\t trees allowed on the filer.')
cifsMaxShares = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxShares.setStatus('current')
if mibBuilder.loadTexts: cifsMaxShares.setDescription('The maximum number of simultaneous CIFS\n\t\t\t shares allowed on the filer.')
cifsMaxFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxFiles.setStatus('current')
if mibBuilder.loadTexts: cifsMaxFiles.setDescription('The maximum number of concurrently open CIFS\n\t\t\t files and directories allowed on the filer.')
cifsMaxACLs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxACLs.setStatus('current')
if mibBuilder.loadTexts: cifsMaxACLs.setDescription('This object is deprecated, and always has a\n\t\t\t value of 0.')
cifsConnectedUsers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsConnectedUsers.setStatus('current')
if mibBuilder.loadTexts: cifsConnectedUsers.setDescription('The current number of CIFS users on the\n\t\t\t filer.')
cifsNTrees = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNTrees.setStatus('current')
if mibBuilder.loadTexts: cifsNTrees.setDescription('The current number of CIFS trees on the\n\t\t\t filer.')
cifsNShares = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNShares.setStatus('current')
if mibBuilder.loadTexts: cifsNShares.setDescription('The current number of CIFS shares on the\n\t\t\t filer.')
cifsNSessions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNSessions.setStatus('current')
if mibBuilder.loadTexts: cifsNSessions.setDescription('The current number of active CIFS sessions\n\t\t\t on the filer.')
cifsNOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOpenFiles.setStatus('current')
if mibBuilder.loadTexts: cifsNOpenFiles.setDescription('The number of open CIFS files and directories\n\t\t\t on the filer.')
cifsNOpenDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOpenDirs.setStatus('current')
if mibBuilder.loadTexts: cifsNOpenDirs.setDescription('The number of open CIFS directories on the\n\t\t\t filer.')
cifsNOplockBreakWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOplockBreakWaits.setStatus('current')
if mibBuilder.loadTexts: cifsNOplockBreakWaits.setDescription('The number of open files waiting for oplock\n\t\t\t break messages to be sent.')
cifsNOplockAckWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOplockAckWaits.setStatus('current')
if mibBuilder.loadTexts: cifsNOplockAckWaits.setDescription('The number of open files waiting for \n\t\t\t acknowledgements to oplock break messages.')
cifsSuspectOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSuspectOps.setStatus('current')
if mibBuilder.loadTexts: cifsSuspectOps.setDescription('A smoothed average of the number of events \n\t\t\t per second of the type frequently seen\n\t\t\t during virus attacks.')
cifsNDomainControllers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNDomainControllers.setStatus('current')
if mibBuilder.loadTexts: cifsNDomainControllers.setDescription('The number of Domain Controllers found.')
cifsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1))
cifsOps = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1))
cifsReqs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2))
cifsPercent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3))
cifsObsReqs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4))
cifsObsPercent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5))
cifsTotalOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalOps.setStatus('current')
if mibBuilder.loadTexts: cifsTotalOps.setDescription('The number of CIFS operations done by the filer,\n\t\t\t since the last time the statistics were cleared.')
cifsTotalCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalCalls.setStatus('current')
if mibBuilder.loadTexts: cifsTotalCalls.setDescription('The total number of CIFS calls received, since\n\t\t\t the last time the statistics were cleared.  This\n\t\t\t is the number of cifsTotalOps plus the number of\n\t\t\t miscellaneous operations that are not logged\n\t\t\t which were received in that time period.')
cifsBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsBadCalls.setStatus('current')
if mibBuilder.loadTexts: cifsBadCalls.setDescription('The total number of received CIFS calls rejected,\n\t\t\t since the last time the statistics were cleared.')
cifsGetAttrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsGetAttrs.setStatus('current')
if mibBuilder.loadTexts: cifsGetAttrs.setDescription('The total number of CIFS operations to get\n\t\t\t the attributes on a file or directory, since\n\t\t\t the last time the statistics were reset.')
cifsReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsReads.setStatus('current')
if mibBuilder.loadTexts: cifsReads.setDescription('The total number of CIFS Read operations on\n\t\t\t a file or directory, since the last time the\n\t\t\t statistics were reset.')
cifsWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWrites.setStatus('current')
if mibBuilder.loadTexts: cifsWrites.setDescription('The total number of CIFS write operations on\n\t\t\t a file or directory, since the last time the\n\t\t\t statistics were reset.')
cifsLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsLocks.setStatus('current')
if mibBuilder.loadTexts: cifsLocks.setDescription('The number of CIFS file locking requests\n\t\t\t since the last time the statistics were reset.')
cifsOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpens.setStatus('current')
if mibBuilder.loadTexts: cifsOpens.setDescription('The number of calls, via CIFS, to open\n\t\t\t a file or directory, since the last time\n\t\t\t the statistics were reset.')
cifsDirOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDirOps.setStatus('current')
if mibBuilder.loadTexts: cifsDirOps.setDescription('The number of CIFS directory operations,\n\t\t\t since the last time the statistics were reset.')
cifsOthers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOthers.setStatus('current')
if mibBuilder.loadTexts: cifsOthers.setDescription("The number of CIFS operations, since the\n\t\t\t last time the statistics were reset, that\n\t\t\t don't fall into the categories for GetAttr,\n\t\t\t SetAttr, Read, Write, Lock, DirOp and Open.")
cifsSetAttrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSetAttrs.setStatus('current')
if mibBuilder.loadTexts: cifsSetAttrs.setDescription('The total number of CIFS operations to set\n\t\t\t the attributes on a file or directory, since\n\t\t\t the last time the statistics were reset.')
smbNegProts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNegProts.setStatus('current')
if mibBuilder.loadTexts: smbNegProts.setDescription('The number of SMB NEGOTIATE requests,\n\t\t\t since the last time the statistics were cleared.')
smbSessionSetupAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSessionSetupAndXs.setStatus('current')
if mibBuilder.loadTexts: smbSessionSetupAndXs.setDescription('The number of SMB SESSION_SETUP_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
smbLogoffAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLogoffAndXs.setStatus('current')
if mibBuilder.loadTexts: smbLogoffAndXs.setDescription('The number of SMB LOGOFF_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
smbTreeConnectAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeConnectAndXs.setStatus('current')
if mibBuilder.loadTexts: smbTreeConnectAndXs.setDescription('The number of SMB TREE_CONNECT_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
smbTreeDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeDisconnects.setStatus('current')
if mibBuilder.loadTexts: smbTreeDisconnects.setDescription('The number of SMB TREE_DISCONNECT requests,\n\t\t\t since the last time the statistics were cleared.')
smbTrans2QueryFSInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFSInfos.setStatus('current')
if mibBuilder.loadTexts: smbTrans2QueryFSInfos.setDescription('The number of SMB TRANS2_QUERY_FS_INFORMATION\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbEchos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbEchos.setStatus('current')
if mibBuilder.loadTexts: smbEchos.setDescription('The number of SMB ECHO requests,\n\t\t\t since the last time the statistics were cleared.')
smbNTCancels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancels.setStatus('current')
if mibBuilder.loadTexts: smbNTCancels.setDescription('The number of SMB NT_CANCEL requests, since the\n\t\t\t last time the statistics were cleared.')
smbNTCreateAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCreateAndXs.setStatus('current')
if mibBuilder.loadTexts: smbNTCreateAndXs.setDescription('The number of SMB NT_CREATE_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
smbNTTransactCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactCreates.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactCreates.setDescription('The number of SMB NT_TRANSACT_CREATE requests,\n\t\t\t since the last time the statistics were cleared.')
smbCreateTemporaries = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateTemporaries.setStatus('current')
if mibBuilder.loadTexts: smbCreateTemporaries.setDescription('The SMB CREATE_TEMPORARY operation is not presently\n\t\t\t supported, so this value should always be zero.')
smbReadAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbReadAndXs.setStatus('current')
if mibBuilder.loadTexts: smbReadAndXs.setDescription('The number of SMB READ_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
smbWriteAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbWriteAndXs.setStatus('current')
if mibBuilder.loadTexts: smbWriteAndXs.setDescription('The number of SMB WRITE_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
smbLockingAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLockingAndXs.setStatus('current')
if mibBuilder.loadTexts: smbLockingAndXs.setDescription('The number of SMB LOCKING_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
smbSeeks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSeeks.setStatus('current')
if mibBuilder.loadTexts: smbSeeks.setDescription('The number of SMB SEEK requests,\n\t\t\t since the last time the statistics were cleared.')
smbFlushes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFlushes.setStatus('current')
if mibBuilder.loadTexts: smbFlushes.setDescription('The number of SMB FLUSH requests,\n\t\t\t since the last time the statistics were cleared.')
smbCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCloses.setStatus('current')
if mibBuilder.loadTexts: smbCloses.setDescription('The number of SMB CLOSE requests,\n\t\t\t since the last time the statistics were cleared.')
smbDeletes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeletes.setStatus('current')
if mibBuilder.loadTexts: smbDeletes.setDescription('The number of SMB DELETE requests,\n\t\t\t since the last time the statistics were cleared.')
smbRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbRenames.setStatus('current')
if mibBuilder.loadTexts: smbRenames.setDescription('The number of SMB RENAME requests,\n\t\t\t since the last time the statistics were cleared.')
smbMoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbMoves.setStatus('current')
if mibBuilder.loadTexts: smbMoves.setDescription('The SMB MOVE request is not presently supported,\n\t\t\t so this value should always be zero.')
smbCopies = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCopies.setStatus('current')
if mibBuilder.loadTexts: smbCopies.setDescription('The SMB COPY request is not presently supported,\n\t\t\t so this value should always be zero.')
smbTrans2QueryPathInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryPathInfos.setStatus('current')
if mibBuilder.loadTexts: smbTrans2QueryPathInfos.setDescription('The number of SMB TRANS2_QUERY_PATH_INFORMATION\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2QueryFileInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFileInfos.setStatus('current')
if mibBuilder.loadTexts: smbTrans2QueryFileInfos.setDescription('The number of SMB TRANS2_QUERY_FILE_INFORMATION\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2SetPathInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetPathInfos.setStatus('current')
if mibBuilder.loadTexts: smbTrans2SetPathInfos.setDescription('The number of SMB TRANS2_SET_PATH_INFORMATION\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2SetFileInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetFileInfos.setStatus('current')
if mibBuilder.loadTexts: smbTrans2SetFileInfos.setDescription('The number of SMB TRANS2_SET_FILE_INFORMATION\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbDeleteDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeleteDirs.setStatus('current')
if mibBuilder.loadTexts: smbDeleteDirs.setDescription('The number of SMB DELETE_DIRECTORY requests,\n\t\t\t since the last time the statistics were cleared.')
smbCheckDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCheckDirs.setStatus('current')
if mibBuilder.loadTexts: smbCheckDirs.setDescription('The SMB COPY request is not presently supported,\n\t\t\t so this value should always be zero.')
smbTrans2FindFirst2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindFirst2s.setStatus('current')
if mibBuilder.loadTexts: smbTrans2FindFirst2s.setDescription('The number of SMB TRANS2_FIND_FIRST2 requests,\n\t\t\t since the last time the statistics were cleared.')
smbTrans2FindNext2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindNext2s.setStatus('current')
if mibBuilder.loadTexts: smbTrans2FindNext2s.setDescription('The number of SMB TRANS2_FIND_NEXT2 requests,\n\t\t\t since the last time the statistics were cleared.')
smbFindClose2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFindClose2s.setStatus('current')
if mibBuilder.loadTexts: smbFindClose2s.setDescription('The number of SMB FIND_CLOSE2 requests,\n\t\t\t since the last time the statistics were cleared.')
smbNTTransactNotifyChgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactNotifyChgs.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactNotifyChgs.setDescription('The number of SMB NT_TRANSACT_NOTIFY_CHANGE\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2GetDFSReferrals = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2GetDFSReferrals.setStatus('current')
if mibBuilder.loadTexts: smbTrans2GetDFSReferrals.setDescription('The SMB TRANS2_GET_DFS_REFERRAL request is \n\t\t\t not presently supported, so this value should \n\t\t\t always be zero.')
smbTrans2ReportDFSIncs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2ReportDFSIncs.setStatus('current')
if mibBuilder.loadTexts: smbTrans2ReportDFSIncs.setDescription('The SMB TRANS2_REPORT_DFS_INCONSISTENCY request is \n\t\t\t not presently supported, so this value should \n\t\t\t always be zero.')
smbOpenPrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbOpenPrintFiles.setStatus('current')
if mibBuilder.loadTexts: smbOpenPrintFiles.setDescription('The SMB OPEN_PRINT_FILE request is not supported,\n\t\t\t so this value should always be zero.')
smbGetPrintQueues = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbGetPrintQueues.setStatus('current')
if mibBuilder.loadTexts: smbGetPrintQueues.setDescription('The SMB GET_PRINT_QUEUE request is not supported,\n\t\t\t so this value should always be zero.')
smbNTTransactIoctls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactIoctls.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactIoctls.setDescription('The number of SMB NT_TRANSACT_IOCTL requests,\n\t\t\t since the last time the statistics were cleared.')
smbNTTransactQuerySecDescs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactQuerySecDescs.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactQuerySecDescs.setDescription('The number of SMB NT_TRANSACT_QUERY_SECURITY_DESC\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbNTTransactSetSecDescs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactSetSecDescs.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactSetSecDescs.setDescription('The number of SMB NT_TRANSACT_SET_SECURITY_DESC\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2CreateDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2CreateDirs.setStatus('current')
if mibBuilder.loadTexts: smbTrans2CreateDirs.setDescription('The number of SMB TRANS2_CREATE_DIRECTORY \n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbNTCancelCNs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelCNs.setStatus('current')
if mibBuilder.loadTexts: smbNTCancelCNs.setDescription('The number of SMB NT_CANCEL requests against\n\t\t\t change notifications since the last time\n\t\t\t the statistics were cleared.')
smbNTCancelOthers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelOthers.setStatus('current')
if mibBuilder.loadTexts: smbNTCancelOthers.setDescription('The number of SMB NT_CANCEL requests against\n\t\t\t operations other than change notifications,\n\t\t\t since the last time the statistics\n\t\t\t were cleared.')
smb2Echos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Echos.setStatus('current')
if mibBuilder.loadTexts: smb2Echos.setDescription('The number of SMB2 ECHO requests,\n\t\t\tsince the last time the statistics were cleared.')
smb2NegProts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2NegProts.setStatus('current')
if mibBuilder.loadTexts: smb2NegProts.setDescription('The number of SMB2 NEGOTIATE requests,\n\t\t\t since the last time the statistics were cleared.')
smb2SessionSetups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SessionSetups.setStatus('current')
if mibBuilder.loadTexts: smb2SessionSetups.setDescription('The number of SMB2 SESSION_SETUP requests,\n\t\t\t since the last time the statistics were cleared.')
smb2Logoffs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Logoffs.setStatus('current')
if mibBuilder.loadTexts: smb2Logoffs.setDescription('The number of SMB2 LOGOFF requests,\n\t\t\t since the last time the statistics were cleared.')
smb2TreeConnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2TreeConnects.setStatus('current')
if mibBuilder.loadTexts: smb2TreeConnects.setDescription('The number of SMB2 TREE_CONNECT requests,\n\t\t\t since the last time the statistics were cleared.')
smb2TreeDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2TreeDisconnects.setStatus('current')
if mibBuilder.loadTexts: smb2TreeDisconnects.setDescription('The number of SMB2 TREE_DISCONNECT requests,\n\t\t\t since the last time the statistics were cleared.')
smb2Cancels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Cancels.setStatus('current')
if mibBuilder.loadTexts: smb2Cancels.setDescription('The number of SMB2 CANCEL requests,\n\t\t\t since the last time the statistics were cleared.')
smb2Creates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Creates.setStatus('current')
if mibBuilder.loadTexts: smb2Creates.setDescription('The number of SMB2 CREATE requests,\n\t\t\t since the last time the statistics were cleared.')
smb2IpcCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2IpcCreates.setStatus('current')
if mibBuilder.loadTexts: smb2IpcCreates.setDescription('The number of SMB2 IPC CREATE requests,\n\t\t\t since the last time the statistics were cleared.')
smb2Reads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Reads.setStatus('current')
if mibBuilder.loadTexts: smb2Reads.setDescription('The number of SMB2 READ requests,\n\t\t\t since the last time the statistics were cleared.')
smb2Writes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Writes.setStatus('current')
if mibBuilder.loadTexts: smb2Writes.setDescription('The number of SMB2 WRITE requests,\n\t\t\t since the last time the statistics were cleared.')
smb2IpcReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2IpcReads.setStatus('current')
if mibBuilder.loadTexts: smb2IpcReads.setDescription('The number of SMB2 IPC READ requests,\n\t\t\t since the last time the statistics were cleared.')
smb2IpcWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2IpcWrites.setStatus('current')
if mibBuilder.loadTexts: smb2IpcWrites.setDescription('The number of SMB2 IPC WRITE requests,\n\t\t\t since the last time the statistics were cleared.')
smb2Locks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Locks.setStatus('current')
if mibBuilder.loadTexts: smb2Locks.setDescription('The number of SMB2 LOCK requests,\n\t\t\t since the last time the statistics were cleared.')
smb2UnLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2UnLocks.setStatus('current')
if mibBuilder.loadTexts: smb2UnLocks.setDescription('The number of SMB2 UNLOCK requests,\n\t\t\t since the last time the statistics were cleared.')
smb2OplkBrkAck = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2OplkBrkAck.setStatus('current')
if mibBuilder.loadTexts: smb2OplkBrkAck.setDescription('The number of SMB2 Oplock Break Acknowledgements,\n\t\t\t since the last time the statistics were cleared.')
smb2Flushs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Flushs.setStatus('current')
if mibBuilder.loadTexts: smb2Flushs.setDescription('The number of SMB2 FLUSH requests,\n\t\t\t since the last time the statistics were cleared.')
smb2Closes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Closes.setStatus('current')
if mibBuilder.loadTexts: smb2Closes.setDescription('The number of SMB2 CLOSE requests,\n\t\t\t since the last time the statistics were cleared.')
smb2QueryFileBasicInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileBasicInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileBasicInfos.setDescription('The number of SMB2 QUERY_FILE_BASIC_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileStandardInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileStandardInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileStandardInfos.setDescription('The number of SMB2 QUERY_FILE_STANDARD_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileInternalInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileInternalInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileInternalInfos.setDescription('The number of SMB2 QUERY_FILE_INT_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileEAInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileEAInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileEAInfos.setDescription('The number of SMB2 QUERY_FILE_EA_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileFullEAInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileFullEAInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileFullEAInfos.setDescription('The number of SMB2 QUERY_FILE_FULL_EA_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileModeInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileModeInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileModeInfos.setDescription('The number of SMB2 QUERY_FILE_MODE_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileAltNames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileAltNames.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileAltNames.setDescription('The number of SMB2 QUERY_FILE_ALT_NAME_INFO_\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileStreamInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileStreamInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileStreamInfos.setDescription('The number of SMB2 QUERY_FILE_STREAM_INFO_\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileNetOpenInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileNetOpenInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileNetOpenInfos.setDescription('The number of SMB2 QUERY_FILE_NET_OPEN_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileAttrTagInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileAttrTagInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileAttrTagInfos.setDescription('The number of SMB2 QUERY_FILE_ATTR_TAG_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileUnsupporteds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileUnsupporteds.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileUnsupporteds.setDescription('The number of SMB2 Unsupported QUERY_FILE_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileInvalids = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileInvalids.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileInvalids.setDescription('The number of SMB2 invalid QUERY_FILE_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFsVolInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsVolInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFsVolInfos.setDescription('The number of SMB2 QUERY_FS_VOLUME_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFsSizeInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsSizeInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFsSizeInfos.setDescription('The number of SMB2 QUERY_FS_SIZE_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFsDeviceInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsDeviceInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFsDeviceInfos.setDescription('The number of SMB2 QUERY_FS_DEVICE_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFsAttrInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsAttrInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFsAttrInfos.setDescription('The number of SMB2 QUERY_FS_ATTR_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFsFullSizeInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsFullSizeInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFsFullSizeInfos.setDescription('The number of SMB2 QUERY_FS_FULL_SIZE_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFsObjectIdInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsObjectIdInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFsObjectIdInfos.setDescription('The number of SMB2 QUERY_FS_OBJECT_ID_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFsInvalids = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsInvalids.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFsInvalids.setDescription('The number of SMB2 invalid QUERY_FS_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
smb2SetBasicInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetBasicInfos.setStatus('current')
if mibBuilder.loadTexts: smb2SetBasicInfos.setDescription('The number of SMB2 SET_BASIC_INFO\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetRenameInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetRenameInfos.setStatus('current')
if mibBuilder.loadTexts: smb2SetRenameInfos.setDescription('The number of SMB2 SET_FILE_RENAME_INFO\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetFileLinkInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetFileLinkInfos.setStatus('current')
if mibBuilder.loadTexts: smb2SetFileLinkInfos.setDescription('The number of SMB2 SET_FILE_LINK_INFO\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetFileDispInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetFileDispInfos.setStatus('current')
if mibBuilder.loadTexts: smb2SetFileDispInfos.setDescription('The number of SMB2 SET_FILE_DISP_INFO\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetFullEaInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetFullEaInfos.setStatus('current')
if mibBuilder.loadTexts: smb2SetFullEaInfos.setDescription('The number of SMB2 SET_FULL_EA_INFO\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetModeInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetModeInfos.setStatus('current')
if mibBuilder.loadTexts: smb2SetModeInfos.setDescription('The number of SMB2 SET_MODE_INFO\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetAllocInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetAllocInfos.setStatus('current')
if mibBuilder.loadTexts: smb2SetAllocInfos.setDescription('The number of SMB2 SET_ALLOC_INFO\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetEofInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetEofInfos.setStatus('current')
if mibBuilder.loadTexts: smb2SetEofInfos.setDescription('The number of SMB2 SET_EOF_INFO\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetInfoUnsupporteds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetInfoUnsupporteds.setStatus('current')
if mibBuilder.loadTexts: smb2SetInfoUnsupporteds.setDescription('The number of SMB2 Unsupported SET_INFO\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetInfoInvalids = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetInfoInvalids.setStatus('current')
if mibBuilder.loadTexts: smb2SetInfoInvalids.setDescription('The number of invalid SMB2 SET_INFO\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlPipeTransceives = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlPipeTransceives.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlPipeTransceives.setDescription('The number of SMB2 FSCTL_PIPE_TRANSCEIVE\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlPipePeeks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlPipePeeks.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlPipePeeks.setDescription('The number of SMB2 FSCTL_PIPE_PEEK\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlEnumSnapshotss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlEnumSnapshotss.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlEnumSnapshotss.setDescription('The number of SMB2 FSCTL_ENUMERATE_SNAPSHOTS\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlDfsReferralss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlDfsReferralss.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlDfsReferralss.setDescription('The number of SMB2 FSCTL_DFS_REFERRALS\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlSetSparses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlSetSparses.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlSetSparses.setDescription('The number of SMB2 FSCTL_SET_SPARSE\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlSecureShares = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlSecureShares.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlSecureShares.setDescription('The number of SMB2 FSCTL_SECURE_SHARE\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlFileUnsupporteds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlFileUnsupporteds.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlFileUnsupporteds.setDescription('The number of Unsupported SMB2 File FSCTL\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlIpcUnsupporteds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlIpcUnsupporteds.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlIpcUnsupporteds.setDescription('The number of Unsupported SMB2 IPC FSCTL\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryDirs.setStatus('current')
if mibBuilder.loadTexts: smb2QueryDirs.setDescription('The number of SMB2 QUERY_DIR\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2ChgNfys = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2ChgNfys.setStatus('current')
if mibBuilder.loadTexts: smb2ChgNfys.setDescription('The number of SMB2 CHANGE_NOTIFY\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QuerySecurityInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QuerySecurityInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QuerySecurityInfos.setDescription('The number of SMB2 QUERY_INFO SECURITY requests\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetSecurityInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetSecurityInfos.setStatus('current')
if mibBuilder.loadTexts: smb2SetSecurityInfos.setDescription('The number of SMB2 SET_INFO SECURITY requests\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileAccessInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileAccessInfos.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileAccessInfos.setDescription('The number of SMB2 QUERY_FILE_ACCESS_INFO\n\t\t\t requests, since the last time the statistics\n\t\t\t were cleared.')
obsSmbClosePrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbClosePrintFiles.setStatus('current')
if mibBuilder.loadTexts: obsSmbClosePrintFiles.setDescription('The number of SMB CLOSE_PRINT_FILE requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreates.setStatus('current')
if mibBuilder.loadTexts: obsSmbCreates.setDescription('The number of SMB CREATE requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbCreateDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateDirs.setStatus('current')
if mibBuilder.loadTexts: obsSmbCreateDirs.setDescription('The number of SMB CREATE_DIRECTORY requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbCreateNews = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateNews.setStatus('current')
if mibBuilder.loadTexts: obsSmbCreateNews.setDescription('The number of SMB CREATE_NEW requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbLockAndReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockAndReads.setStatus('current')
if mibBuilder.loadTexts: obsSmbLockAndReads.setDescription('The number of SMB LOCK_AND_READ requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbLockByteRanges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockByteRanges.setStatus('current')
if mibBuilder.loadTexts: obsSmbLockByteRanges.setDescription('The number of SMB LOCK_BYTE_RANGE requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpens.setStatus('current')
if mibBuilder.loadTexts: obsSmbOpens.setDescription('The number of SMB OPEN requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbOpenAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenAndXs.setStatus('current')
if mibBuilder.loadTexts: obsSmbOpenAndXs.setDescription('The number of SMB OPEN_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbProcessExits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbProcessExits.setStatus('current')
if mibBuilder.loadTexts: obsSmbProcessExits.setDescription('The number of SMB PROCESS_EXIT requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbQueryInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfos.setStatus('current')
if mibBuilder.loadTexts: obsSmbQueryInfos.setDescription('The number of SMB QUERY_INFORMATION requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbQueryInfo2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfo2s.setStatus('current')
if mibBuilder.loadTexts: obsSmbQueryInfo2s.setDescription('The number of SMB QUERY_INFORMATION2 requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReads.setStatus('current')
if mibBuilder.loadTexts: obsSmbReads.setDescription('The number of SMB READ requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbReadMPXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadMPXs.setStatus('current')
if mibBuilder.loadTexts: obsSmbReadMPXs.setDescription('The SMB READ_MPX request is not supported,\n\t\t\t so this value should always be zero.')
obsSmbReadRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadRaws.setStatus('current')
if mibBuilder.loadTexts: obsSmbReadRaws.setDescription('The number of SMB READ_RAW requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbSearchs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSearchs.setStatus('current')
if mibBuilder.loadTexts: obsSmbSearchs.setDescription('The number of SMB SEARCH requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbSetInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfos.setStatus('current')
if mibBuilder.loadTexts: obsSmbSetInfos.setDescription('The number of SMB SET_INFORMATION requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbSetInfo2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfo2s.setStatus('current')
if mibBuilder.loadTexts: obsSmbSetInfo2s.setDescription('The number of SMB SET_INFORMATION2 requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbQueryInfoDisks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoDisks.setStatus('current')
if mibBuilder.loadTexts: obsSmbQueryInfoDisks.setDescription('The number of SMB QUERY_INFORMATION_DISK\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
obsSmbTrans2Open2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTrans2Open2s.setStatus('current')
if mibBuilder.loadTexts: obsSmbTrans2Open2s.setDescription('The number of SMB TRANS2_OPEN2 requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbTreeConnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTreeConnects.setStatus('current')
if mibBuilder.loadTexts: obsSmbTreeConnects.setDescription('The number of SMB TREE_CONNECT requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbUnlockByteRanges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbUnlockByteRanges.setStatus('current')
if mibBuilder.loadTexts: obsSmbUnlockByteRanges.setDescription('The number of SMB UNLOCK_BYTE_RANGE requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWrites.setStatus('current')
if mibBuilder.loadTexts: obsSmbWrites.setDescription('The number of SMB WRITE requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWriteAndUnlocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndUnlocks.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteAndUnlocks.setDescription('The number of SMB WRITE_AND_UNLOCK requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWriteAndCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndCloses.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteAndCloses.setDescription('The number of SMB WRITE_AND_CLOSE requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWriteMPXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteMPXs.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteMPXs.setDescription('The SMB WRITE_MPX request is not supported,\n\t\t\t so this value should always be zero.')
obsSmbWritePrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePrintFiles.setStatus('current')
if mibBuilder.loadTexts: obsSmbWritePrintFiles.setDescription('The SMB WRITE_PRINT_FILE request is not supported,\n\t\t\t so this value should always be zero.')
obsSmbWriteRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteRaws.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteRaws.setDescription('The number of SMB WRITE_RAW requests,\n\t\t\t since the last time the statistics were cleared.')
smbNegProtPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNegProtPct.setStatus('current')
if mibBuilder.loadTexts: smbNegProtPct.setDescription('The number of SMB NEGOTIATE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbSessionSetupAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSessionSetupAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbSessionSetupAndXPct.setDescription('The number of SMB SESSION_SETUP_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbLogoffAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLogoffAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbLogoffAndXPct.setDescription('The number of SMB LOGOFF_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbTreeConnectAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeConnectAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbTreeConnectAndXPct.setDescription('The number of SMB TREE_CONNECT_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbTreeDisconnectAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeDisconnectAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbTreeDisconnectAndXPct.setDescription('The number of SMB TREE_DISCONNECT_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbTrans2QueryFSInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFSInfoPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2QueryFSInfoPct.setDescription('The number of SMB TRANS2_QUERY_FS_INFORMATION\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbEchoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbEchoPct.setStatus('current')
if mibBuilder.loadTexts: smbEchoPct.setDescription('The number of SMB ECHO requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbNTCancelPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelPct.setStatus('current')
if mibBuilder.loadTexts: smbNTCancelPct.setDescription('The number of SMB NT_CANCEL requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbCreateAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbCreateAndXPct.setDescription('The number of SMB NT_CREATE_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbTransactCreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTransactCreatePct.setStatus('current')
if mibBuilder.loadTexts: smbTransactCreatePct.setDescription('The number of SMB NT_TRANSACT_CREATE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbCreateTemporaryPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateTemporaryPct.setStatus('current')
if mibBuilder.loadTexts: smbCreateTemporaryPct.setDescription('The number of SMB CREATE_TEMPORARY requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbReadAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbReadAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbReadAndXPct.setDescription('The number of SMB READ_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbWriteAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbWriteAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbWriteAndXPct.setDescription('The number of SMB WRITE_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbLockingAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLockingAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbLockingAndXPct.setDescription('The number of SMB LOCKING_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbSeekPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSeekPct.setStatus('current')
if mibBuilder.loadTexts: smbSeekPct.setDescription('The number of SMB SEEK requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbFlushPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFlushPct.setStatus('current')
if mibBuilder.loadTexts: smbFlushPct.setDescription('The number of SMB FLUSH requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbClosePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbClosePct.setStatus('current')
if mibBuilder.loadTexts: smbClosePct.setDescription('The number of SMB CLOSE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbDeletePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeletePct.setStatus('current')
if mibBuilder.loadTexts: smbDeletePct.setDescription('The number of SMB DELETE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbRenamePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbRenamePct.setStatus('current')
if mibBuilder.loadTexts: smbRenamePct.setDescription('The number of SMB RENAME requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbMovePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbMovePct.setStatus('current')
if mibBuilder.loadTexts: smbMovePct.setDescription('The number of SMB MOVE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbCopyPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCopyPct.setStatus('current')
if mibBuilder.loadTexts: smbCopyPct.setDescription('The number of SMB COPY requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbTrans2QueryPathInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryPathInfoPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2QueryPathInfoPct.setDescription('The number of SMB TRANS2_QUERY_PATH_INFORMATION\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2QueryFileInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFileInfoPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2QueryFileInfoPct.setDescription('The number of SMB TRANS2_QUERY_FILE_INFORMATION\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2SetPathInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetPathInfoPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2SetPathInfoPct.setDescription('The number of SMB TRANS2_SET_PATH_INFORMATION\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2SetFileInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetFileInfoPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2SetFileInfoPct.setDescription('The number of SMB TRANS2_SET_FILE_INFORMATION\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbDeleteDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeleteDirPct.setStatus('current')
if mibBuilder.loadTexts: smbDeleteDirPct.setDescription('The number of SMB DELETE_DIRECTORY requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbCheckDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCheckDirPct.setStatus('current')
if mibBuilder.loadTexts: smbCheckDirPct.setDescription('The number of SMB CHECK_DIRECTORY requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbTrans2FindFirst2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindFirst2Pct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2FindFirst2Pct.setDescription('The number of SMB TRANS2_FIND_FIRST2 requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbTrans2FindNext2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindNext2Pct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2FindNext2Pct.setDescription('The number of SMB TRANS2_FIND_NEXT2 requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbFindClose2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFindClose2Pct.setStatus('current')
if mibBuilder.loadTexts: smbFindClose2Pct.setDescription('The number of SMB FIND_CLOSE2 requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbNTTransactNotifyChgPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactNotifyChgPct.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactNotifyChgPct.setDescription('The number of SMB NT_TRANSACT_NOTIFY_CHANGE\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2GetDFSReferralPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2GetDFSReferralPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2GetDFSReferralPct.setDescription('The number of SMB TRANS2_GET_DFS_REFERRAL\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2ReportDFSIncPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2ReportDFSIncPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2ReportDFSIncPct.setDescription('The number of SMB TRANS2_REPORT_DFS_INCONSISTENCY\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbOpenPrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbOpenPrintFilePct.setStatus('current')
if mibBuilder.loadTexts: smbOpenPrintFilePct.setDescription('The number of SMB OPEN_PRINT_FILE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbGetPrintQueuePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbGetPrintQueuePct.setStatus('current')
if mibBuilder.loadTexts: smbGetPrintQueuePct.setDescription('The number of SMB GET_PRINT_QUEUE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbNTTransactIoctlPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactIoctlPct.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactIoctlPct.setDescription('The number of SMB NT_TRANSACT_IOCTL requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbNTTransactQuerySecDescPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactQuerySecDescPct.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactQuerySecDescPct.setDescription('The number of SMB NT_TRANSACT_QUERY_SECURITY_DESC\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbNTTransactSetSecDescPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactSetSecDescPct.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactSetSecDescPct.setDescription('The number of SMB NT_TRANSACT_SET_SECURITY_DESC\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2CreateDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2CreateDirPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2CreateDirPct.setDescription('The number of SMB TRANS2_CREATE_DIRECTORY \n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbNTCancelCNPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelCNPct.setStatus('current')
if mibBuilder.loadTexts: smbNTCancelCNPct.setDescription('The number of SMB NT_CANCEL requests against\n\t\t\t change notifications, as a percentage of\n\t\t\t total CIFS calls received, since the last\n\t\t\t time the statistics were cleared.')
smbNTCancelOtherPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelOtherPct.setStatus('current')
if mibBuilder.loadTexts: smbNTCancelOtherPct.setDescription('The number of SMB NT_CANCEL requests against\n\t\t\t calls other than change notifications, as \n\t\t\t a percentage of total CIFS calls received, \n\t\t\t since the last time the statistics were \n\t\t\t cleared.')
smb2EchoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2EchoPct.setStatus('current')
if mibBuilder.loadTexts: smb2EchoPct.setDescription('The number of SMB2 ECHO requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2NegProtPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2NegProtPct.setStatus('current')
if mibBuilder.loadTexts: smb2NegProtPct.setDescription('The number of SMB2 NEGOTIATE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2SessionSetupPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SessionSetupPct.setStatus('current')
if mibBuilder.loadTexts: smb2SessionSetupPct.setDescription('The number of SMB2 SESSION_SETUP requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2LogoffPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2LogoffPct.setStatus('current')
if mibBuilder.loadTexts: smb2LogoffPct.setDescription('The number of SMB2 LOGOFF requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2TreeConnectPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2TreeConnectPct.setStatus('current')
if mibBuilder.loadTexts: smb2TreeConnectPct.setDescription('The number of SMB2 TREE_CONNECT requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2TreeDisconnectPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2TreeDisconnectPct.setStatus('current')
if mibBuilder.loadTexts: smb2TreeDisconnectPct.setDescription('The number of SMB2 TREE_DISCONNECT requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2CancelPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2CancelPct.setStatus('current')
if mibBuilder.loadTexts: smb2CancelPct.setDescription('The number of SMB2 CANCEL requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2CreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2CreatePct.setStatus('current')
if mibBuilder.loadTexts: smb2CreatePct.setDescription('The number of SMB2 CREATE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2IpcCreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2IpcCreatePct.setStatus('current')
if mibBuilder.loadTexts: smb2IpcCreatePct.setDescription('The number of SMB2 IPC CREATE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2ReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2ReadPct.setStatus('current')
if mibBuilder.loadTexts: smb2ReadPct.setDescription('The number of SMB2 READ requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2WritePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2WritePct.setStatus('current')
if mibBuilder.loadTexts: smb2WritePct.setDescription('The number of SMB2 WRITE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2IpcReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2IpcReadPct.setStatus('current')
if mibBuilder.loadTexts: smb2IpcReadPct.setDescription('The number of SMB2 IPC READ requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2IpcWritePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2IpcWritePct.setStatus('current')
if mibBuilder.loadTexts: smb2IpcWritePct.setDescription('The number of SMB2 IPC WRITE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2LockPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2LockPct.setStatus('current')
if mibBuilder.loadTexts: smb2LockPct.setDescription('The number of SMB2 LOCK requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2UnLockPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2UnLockPct.setStatus('current')
if mibBuilder.loadTexts: smb2UnLockPct.setDescription('The number of SMB2 UNLOCK requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2OplkBrkAckPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2OplkBrkAckPct.setStatus('current')
if mibBuilder.loadTexts: smb2OplkBrkAckPct.setDescription('The number of SMB2 Oplock Break Acknowledgement,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2FlushPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FlushPct.setStatus('current')
if mibBuilder.loadTexts: smb2FlushPct.setDescription('The number of SMB2 FLUSH requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2ClosePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2ClosePct.setStatus('current')
if mibBuilder.loadTexts: smb2ClosePct.setDescription('The number of SMB2 CLOSE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smb2QueryFileBasicInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileBasicInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileBasicInfoPct.setDescription('The number of SMB2 QUERY_FILE_BASIC_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileStandardInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileStandardInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileStandardInfoPct.setDescription('The number of SMB2 QUERY_FILE_STANDARD_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileInternalInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileInternalInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileInternalInfoPct.setDescription('The number of SMB2 QUERY_FILE_INT_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileEAInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileEAInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileEAInfoPct.setDescription('The number of SMB2 QUERY_FILE_EA_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileFullEAInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileFullEAInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileFullEAInfoPct.setDescription('The number of SMB2 QUERY_FILE_FULL_EA_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileModeInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileModeInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileModeInfoPct.setDescription('The number of SMB2 QUERY_FILE_MODE_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileAltNamePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileAltNamePct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileAltNamePct.setDescription('The number of SMB2 QUERY_FILE_ALT_NAME_INFO_\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileStreamInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileStreamInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileStreamInfoPct.setDescription('The number of SMB2 QUERY_FILE_STREAM_INFO_\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileNetOpenInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileNetOpenInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileNetOpenInfoPct.setDescription('The number of SMB2 QUERY_FILE_NET_OPEN_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileAttrTagInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileAttrTagInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileAttrTagInfoPct.setDescription('The number of SMB2 QUERY_FILE_ATTR_TAG_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileUnsupportedPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileUnsupportedPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileUnsupportedPct.setDescription('The number of SMB2 Unsupported QUERY_FILE_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFileInvalidPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileInvalidPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFileInvalidPct.setDescription('The number of SMB2 invalid QUERY_FILE_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFsVolInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsVolInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFsVolInfoPct.setDescription('The number of SMB2 QUERY_FS_VOLUME_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFsSizeInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsSizeInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFsSizeInfoPct.setDescription('The number of SMB2 QUERY_FS_SIZE_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFsDeviceInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsDeviceInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFsDeviceInfoPct.setDescription('The number of SMB2 QUERY_FS_DEVICE_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFsAttrInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsAttrInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFsAttrInfoPct.setDescription('The number of SMB2 QUERY_FS_ATTR_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFsFullSizeInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsFullSizeInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFsFullSizeInfoPct.setDescription('The number of SMB2 QUERY_FS_FULL_SIZE_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFsObjectIdInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsObjectIdInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFsObjectIdInfoPct.setDescription('The number of SMB2 QUERY_FS_OBJECT_ID_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryFsInvalidPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsInvalidPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryFsInvalidPct.setDescription('The number of SMB2 invalid QUERY_FS_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetBasicInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetBasicInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2SetBasicInfoPct.setDescription('The number of SMB2 SET_BASIC_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetRenameInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetRenameInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2SetRenameInfoPct.setDescription('The number of SMB2 SET_FILE_RENAME_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetFileLinkInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetFileLinkInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2SetFileLinkInfoPct.setDescription('The number of SMB2 SET_FILE_LINK_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetFileDispInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetFileDispInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2SetFileDispInfoPct.setDescription('The number of SMB2 SET_FILE_DISP_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetFullEaInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetFullEaInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2SetFullEaInfoPct.setDescription('The number of SMB2 SET_FULL_EA_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetModeInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetModeInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2SetModeInfoPct.setDescription('The number of SMB2 SET_MODE_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetAllocInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetAllocInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2SetAllocInfoPct.setDescription('The number of SMB2 SET_ALLOC_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetEofInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetEofInfoPct.setStatus('current')
if mibBuilder.loadTexts: smb2SetEofInfoPct.setDescription('The number of SMB2 SET_EOF_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetInfoUnsupportedPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetInfoUnsupportedPct.setStatus('current')
if mibBuilder.loadTexts: smb2SetInfoUnsupportedPct.setDescription('The number of SMB2 Unsupported SET_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2SetInfoInvalidPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetInfoInvalidPct.setStatus('current')
if mibBuilder.loadTexts: smb2SetInfoInvalidPct.setDescription('The number of invalid SMB2 SET_INFO\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlPipeTransceivePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlPipeTransceivePct.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlPipeTransceivePct.setDescription('The number of SMB2 FSCTL_PIPE_TRANSCEIVE\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlPipePeekPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlPipePeekPct.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlPipePeekPct.setDescription('The number of SMB2 FSCTL_PIPE_PEEK\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlEnumSnapshotsPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlEnumSnapshotsPct.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlEnumSnapshotsPct.setDescription('The number of SMB2 FSCTL_ENUMERATE_SNAPSHOTS\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlDfsReferralsPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlDfsReferralsPct.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlDfsReferralsPct.setDescription('The number of SMB2 FSCTL_DFS_REFERRALS\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlSetSparsePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlSetSparsePct.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlSetSparsePct.setDescription('The number of SMB2 FSCTL_SET_SPARSE\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlSecureSharePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlSecureSharePct.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlSecureSharePct.setDescription('The number of SMB2 FSCTL_SECURE_SHARE\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlFileUnsupportedPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlFileUnsupportedPct.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlFileUnsupportedPct.setDescription('The number of Unsupported SMB2 File FSCTL\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2FsctlIpcUnsupportedPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlIpcUnsupportedPct.setStatus('current')
if mibBuilder.loadTexts: smb2FsctlIpcUnsupportedPct.setDescription('The number of Unsupported SMB2 IPC FSCTL\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
smb2QueryDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryDirPct.setStatus('current')
if mibBuilder.loadTexts: smb2QueryDirPct.setDescription('The number of SMB2 QUERY_DIR\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
obsSmbClosePrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbClosePrintFilePct.setStatus('current')
if mibBuilder.loadTexts: obsSmbClosePrintFilePct.setDescription('The number of SMB CLOSE_PRINT_FILE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbCreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreatePct.setStatus('current')
if mibBuilder.loadTexts: obsSmbCreatePct.setDescription('The number of SMB CREATE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbCreateDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateDirPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbCreateDirPct.setDescription('The number of SMB CREATE_DIRECTORY requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbCreateNewPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateNewPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbCreateNewPct.setDescription('The number of SMB CREATE_NEW requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbLockAndReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockAndReadPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbLockAndReadPct.setDescription('The number of SMB LOCK_AND_READ requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbLockByteRangePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockByteRangePct.setStatus('current')
if mibBuilder.loadTexts: obsSmbLockByteRangePct.setDescription('The number of SMB LOCK_BYTE_RANGE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbOpenPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbOpenPct.setDescription('The number of SMB OPEN requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbOpenAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenAndXPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbOpenAndXPct.setDescription('The number of SMB OPEN_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbProcessExitPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbProcessExitPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbProcessExitPct.setDescription('The number of SMB PROCESS_EXIT requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbQueryInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbQueryInfoPct.setDescription('The number of SMB QUERY_INFORMATION requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbQueryInfo2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfo2Pct.setStatus('current')
if mibBuilder.loadTexts: obsSmbQueryInfo2Pct.setDescription('The number of SMB QUERY_INFORMATION2 requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbReadPct.setDescription('The number of SMB READ requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbReadMPXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadMPXPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbReadMPXPct.setDescription('The number of SMB READ_MPX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbReadRawPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadRawPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbReadRawPct.setDescription('The number of SMB READ_RAW requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbSearchPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSearchPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbSearchPct.setDescription('The number of SMB SEARCH requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbSetInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfoPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbSetInfoPct.setDescription('The number of SMB SET_INFORMATION requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbSetInfo2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfo2Pct.setStatus('current')
if mibBuilder.loadTexts: obsSmbSetInfo2Pct.setDescription('The number of SMB SET_INFORMATION2 requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbQueryInfoDiskPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoDiskPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbQueryInfoDiskPct.setDescription('The number of SMB QUERY_INFORMATION_DISK\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
obsSmbTrans2Open2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTrans2Open2Pct.setStatus('current')
if mibBuilder.loadTexts: obsSmbTrans2Open2Pct.setDescription('The number of SMB TRANS2_OPEN2 requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbTreeConnectPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTreeConnectPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbTreeConnectPct.setDescription('The number of SMB TREE_CONNECT requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbUnlockByteRangePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbUnlockByteRangePct.setStatus('current')
if mibBuilder.loadTexts: obsSmbUnlockByteRangePct.setDescription('The number of SMB UNLOCK_BYTE_RANGE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWritePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePct.setStatus('current')
if mibBuilder.loadTexts: obsSmbWritePct.setDescription('The number of SMB WRITE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWriteAndUnlockPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndUnlockPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteAndUnlockPct.setDescription('The number of SMB WRITE_AND_UNLOCK requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWriteAndClosePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndClosePct.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteAndClosePct.setDescription('The number of SMB WRITE_AND_CLOSE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWriteMPXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteMPXPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteMPXPct.setDescription('The number of SMB WRITE_MPX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWritePrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePrintFilePct.setStatus('current')
if mibBuilder.loadTexts: obsSmbWritePrintFilePct.setDescription('The number of SMB WRITE_PRINT_FILE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWriteRawPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteRawPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteRawPct.setDescription('The number of SMB WRITE_RAW requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
cifsCancelLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCancelLocks.setStatus('current')
if mibBuilder.loadTexts: cifsCancelLocks.setDescription('Undocumented')
cifsWaitLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWaitLocks.setStatus('current')
if mibBuilder.loadTexts: cifsWaitLocks.setDescription('Undocumented')
cifsCopyToAligns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCopyToAligns.setStatus('current')
if mibBuilder.loadTexts: cifsCopyToAligns.setDescription('Undocumented')
cifsAlignedSmalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedSmalls.setStatus('current')
if mibBuilder.loadTexts: cifsAlignedSmalls.setDescription('Undocumented')
cifsAlignedLarges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedLarges.setStatus('current')
if mibBuilder.loadTexts: cifsAlignedLarges.setDescription('Undocumented')
cifsAlignedSmallRels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedSmallRels.setStatus('current')
if mibBuilder.loadTexts: cifsAlignedSmallRels.setDescription('Undocumented')
cifsAlignedLargeRels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedLargeRels.setStatus('current')
if mibBuilder.loadTexts: cifsAlignedLargeRels.setDescription('Undocumented')
cifsMbufWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMbufWaits.setStatus('current')
if mibBuilder.loadTexts: cifsMbufWaits.setDescription('Undocumented')
cifsNbtWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNbtWaits.setStatus('current')
if mibBuilder.loadTexts: cifsNbtWaits.setDescription('Undocumented')
cifsCwaWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCwaWaits.setStatus('current')
if mibBuilder.loadTexts: cifsCwaWaits.setDescription('Undocumented')
cifsMultipleVCs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMultipleVCs.setStatus('current')
if mibBuilder.loadTexts: cifsMultipleVCs.setDescription('Undocumented')
cifsPDCUpcalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPDCUpcalls.setStatus('current')
if mibBuilder.loadTexts: cifsPDCUpcalls.setDescription('Undocumented')
cifsQueuedWriteRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsQueuedWriteRaws.setStatus('current')
if mibBuilder.loadTexts: cifsQueuedWriteRaws.setDescription('Undocumented')
cifsNBTDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNBTDisconnects.setStatus('current')
if mibBuilder.loadTexts: cifsNBTDisconnects.setDescription('Undocumented')
cifsSMBDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSMBDisconnects.setStatus('current')
if mibBuilder.loadTexts: cifsSMBDisconnects.setDescription('Undocumented')
cifsDupDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDupDisconnects.setStatus('current')
if mibBuilder.loadTexts: cifsDupDisconnects.setDescription('Undocumented')
cifsOpLkBatchToL2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkBatchToL2s.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkBatchToL2s.setDescription('Undocumented')
cifsOpLkBatchToNones = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkBatchToNones.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkBatchToNones.setDescription('Undocumented')
cifsOpLkL2ToNones = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkL2ToNones.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkL2ToNones.setDescription('Undocumented')
cifsOpLkNoBreakAcks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkNoBreakAcks.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkNoBreakAcks.setDescription('Undocumented')
cifsOpLkIgnoredAcks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkIgnoredAcks.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkIgnoredAcks.setDescription('Undocumented')
cifsOpLkMultiWaiters = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkMultiWaiters.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkMultiWaiters.setDescription('Undocumented')
cifsSharingErrorRetries = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSharingErrorRetries.setStatus('current')
if mibBuilder.loadTexts: cifsSharingErrorRetries.setDescription('Undocumented')
cifsOpLkWaiterTimedOuts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkWaiterTimedOuts.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkWaiterTimedOuts.setDescription('Undocumented')
cifsOpLkDelayedBreaks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkDelayedBreaks.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkDelayedBreaks.setDescription('Undocumented')
cifsOpLkEarlyNFSs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkEarlyNFSs.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkEarlyNFSs.setDescription('Undocumented')
cifsOpLkNFSWaiteds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkNFSWaiteds.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkNFSWaiteds.setDescription('Undocumented')
cifsMaxNFSBkWaiterCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxNFSBkWaiterCount.setStatus('current')
if mibBuilder.loadTexts: cifsMaxNFSBkWaiterCount.setDescription('Undocumented')
cifsClearTextPasswd = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsClearTextPasswd.setStatus('current')
if mibBuilder.loadTexts: cifsClearTextPasswd.setDescription('This indicates whether the cifs clients are \n\t\t\t\t using clear text passwords when authenticating \n\t\t\t\t with the filer. If cifsDomainJoined is false and\n\t\t\t\t this variable is also false, then the filer is\n\t\t\t\t using NT Security from a local user list.')
cifsSmb2MidUsedHash = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2MidUsedHash.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2MidUsedHash.setDescription('Undocumented')
cifsSmb2MidUnusedHash = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2MidUnusedHash.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2MidUnusedHash.setDescription('Undocumented')
cifsSmb2MidInvReject = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2MidInvReject.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2MidInvReject.setDescription('Undocumented')
cifsSmb2DurableCreateReceived = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2DurableCreateReceived.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2DurableCreateReceived.setDescription('Undocumented')
cifsSmb2DurableCreateSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2DurableCreateSucceeded.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2DurableCreateSucceeded.setDescription('Undocumented')
cifsSmb2DurableReclaimReceived = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2DurableReclaimReceived.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2DurableReclaimReceived.setDescription('Undocumented')
cifsSmb2DurableReclaimSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2DurableReclaimSucceeded.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2DurableReclaimSucceeded.setDescription('Undocumented')
cifsSmb2DurableHandlePreserved = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2DurableHandlePreserved.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2DurableHandlePreserved.setDescription('Undocumented')
cifsSmb2DurableHandlePurged = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2DurableHandlePurged.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2DurableHandlePurged.setDescription('Undocumented')
cifsSmb2DurableHandleExpired = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2DurableHandleExpired.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2DurableHandleExpired.setDescription('Undocumented')
cifsSmb2FileDirInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileDirInfo.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2FileDirInfo.setDescription('Undocumented')
cifsSmb2FileFullDirInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileFullDirInfo.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2FileFullDirInfo.setDescription('Undocumented')
cifsSmb2FileIdFullDirInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileIdFullDirInfo.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2FileIdFullDirInfo.setDescription('Undocumented')
cifsSmb2FileBothDirInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileBothDirInfo.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2FileBothDirInfo.setDescription('Undocumented')
cifsSmb2FileIdBothDirInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileIdBothDirInfo.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2FileIdBothDirInfo.setDescription('Undocumented')
cifsSmb2FileNamesInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileNamesInfo.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2FileNamesInfo.setDescription('Undocumented')
cifsSmb2FileDirUnsupported = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileDirUnsupported.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2FileDirUnsupported.setDescription('Undocumented')
cifsSmb2QueryInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2QueryInfo.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2QueryInfo.setDescription('Undocumented')
cifsSmb2SetInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2SetInfo.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2SetInfo.setDescription('Undocumented')
cifsSmb2Ioctl = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2Ioctl.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2Ioctl.setDescription('Undocumented')
cifsSmb2RelatedCompRequest = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2RelatedCompRequest.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2RelatedCompRequest.setDescription('Undocumented')
cifsSmb2UnRelatedCompRequest = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2UnRelatedCompRequest.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2UnRelatedCompRequest.setDescription('Undocumented')
cifsSmb2FileRequest = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileRequest.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2FileRequest.setDescription('Undocumented')
cifsSmb2PipeRequest = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2PipeRequest.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2PipeRequest.setDescription('Undocumented')
cifsSmb2Unsupported = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2Unsupported.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2Unsupported.setDescription('Undocumented')
cifsSmb2InvalidSignatures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2InvalidSignatures.setStatus('current')
if mibBuilder.loadTexts: cifsSmb2InvalidSignatures.setDescription('Number of CIFS SMB 2.0 messages received\n\t\t\t with incorrect signature.')
ncOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1))
ncInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2))
ncStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3))
ncIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncIsEnabled.setDescription('Whether Netcache is enabled on this system.')
ncIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncIsLicensed.setDescription('Whether Netcache is licensed on this system.')
ncDnsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 3))
ncDnsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncDnsIsEnabled.setDescription('Whether the Domain Name System (DNS)\n\t\t\tis enabled on this system.')
ncHttpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 4))
ncHttpIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncHttpIsEnabled.setDescription('Whether HTTP is enabled on this system.')
ncNntpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5))
ncNntpIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncNntpIsEnabled.setDescription('Whether NNTP is enabled on this system.')
ncNntpIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncNntpIsLicensed.setDescription('Whether NNTP is licensed on this system.')
ncStreamingOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6))
ncStreamingMmsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsIsEnabled.setDescription('Whether Microsoft Media Services (MMS)\n\t\t\tis enabled on this system.')
ncStreamingMmsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsIsLicensed.setDescription('Whether Microsoft Windows Media Service (MMS)\n\t\t\tis licensed on this system.')
ncStreamingMmsProIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsProIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsProIsLicensed.setDescription('Whether Microsoft Windows Media Service Pro (MMS)\n\t\t\tis licensed on this system.')
ncStreamingRtspIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRtspIsEnabled.setDescription('Whether the Real Time Streaming Protocol (RTSP)\n\t\t\tis enabled on this system.')
ncStreamingQuickTimeIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncStreamingQuickTimeIsLicensed.setDescription('Whether QuickTime is licensed on this system.')
ncStreamingRealIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealIsLicensed.setDescription('Whether Real Media streaming is licensed on \n\t\t\tthis system.')
ncStreamingMmsUltraIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsUltraIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsUltraIsLicensed.setDescription('Whether Microsoft Windows Media Service Ultra (MMS)\n\t\t\tis licensed on this system.')
ncStreamingRealProIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealProIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealProIsLicensed.setDescription('Whether Real Media Pro streaming is licensed on \n\t\t\tthis system.')
ncStreamingRealUltraIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealUltraIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealUltraIsLicensed.setDescription('Whether Real Media Ultra streaming is licensed on \n\t\t\tthis system.')
ncIcapOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7))
ncIcapIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncIcapIsEnabled.setDescription('Whether ICAP v0.95 is enabled on this system.')
ncIcapIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncIcapIsLicensed.setDescription('Whether ICAP is licensed on this system.')
ncIcapv1IsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapv1IsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncIcapv1IsEnabled.setDescription('Whether ICAP v1.0 is enabled on this system.')
ncGrmOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8))
ncGrmServerOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1))
ncGrmAgentOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2))
ncGrmServerIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmServerIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncGrmServerIsEnabled.setDescription('Whether the Global Request Manager (GRM) Server\n\t\t\tis enabled on this system.')
ncGrmServerIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmServerIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncGrmServerIsLicensed.setDescription('Whether the Global Request Manager (GRM) Server\n\t\t\tis licensed on this system.')
ncGrmAgentIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmAgentIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncGrmAgentIsEnabled.setDescription('Whether the Global Request Manager (GRM) Agent\n\t\t\tenabled on this system.')
ncGrmAgentIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmAgentIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncGrmAgentIsLicensed.setDescription('Whether the Global Request Manager (GRM) Agent\n\t\t\tis licensed on this system.')
ncCdOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 9))
ncCdIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncCdIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncCdIsEnabled.setDescription('Whether Content Director is enabled on this system.')
ncHttpsProxyOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10))
ncHttpsProxyIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsProxyIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncHttpsProxyIsEnabled.setDescription('Whether HTTPS is enabled on this system.')
ncHttpsProxyIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsProxyIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncHttpsProxyIsLicensed.setDescription('Whether HTTPS is licensed on this system.')
ncCmsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 11))
ncCmsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncCmsIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncCmsIsEnabled.setDescription('Whether CMS is enabled on this system.')
ncVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncVersion.setStatus('current')
if mibBuilder.loadTexts: ncVersion.setDescription('The Netcache version string.')
ncAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncAdminPort.setStatus('current')
if mibBuilder.loadTexts: ncAdminPort.setDescription('Netcache Admin Port number - this\n\t\t\t is the first in the list of admin\n\t\t\t ports configured for the NetCache.')
accelmonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3))
amNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amNumber.setStatus('current')
if mibBuilder.loadTexts: amNumber.setDescription('The number of entries in the acceleration monitor table.')
amMonitor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("togglea", 1), ("toggleb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amMonitor.setStatus('current')
if mibBuilder.loadTexts: amMonitor.setDescription('Variable for user defined SNMP traps to monitor whether\t\t\tthere has been a status change of any of the acceleration \n\t\tservers that netcache is probing.')
amMonitorString = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amMonitorString.setStatus('current')
if mibBuilder.loadTexts: amMonitorString.setDescription("Used in conjunction with amMonitor. This returns a string\n\t\tin format of: 'IP:port status' which reports the status\n\t\tof all the servers netcache is accelerating as of last\n\t\tstatus change.")
amTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4), )
if mibBuilder.loadTexts: amTable.setStatus('current')
if mibBuilder.loadTexts: amTable.setDescription('A list of acceleration server and port entries. The\n\t\t     number of entries is given by the value of amNumber.')
amEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1), ).setIndexNames((0, "NETAPP-MIB", "amIndex"))
if mibBuilder.loadTexts: amEntry.setStatus('current')
if mibBuilder.loadTexts: amEntry.setDescription('An acceleration monitor entry contains: the server\n\t\t    IP address, server port and the status.')
amIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amIndex.setStatus('current')
if mibBuilder.loadTexts: amIndex.setDescription(' A unique value for each entry in the acceleration monitor\n\t\t    table.')
amAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amAddress.setStatus('current')
if mibBuilder.loadTexts: amAddress.setDescription('The IP address of the acceleration server the NetCache\n\t\t    is monitoring.')
amPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amPort.setStatus('current')
if mibBuilder.loadTexts: amPort.setDescription('The corresponding port on the server that NetCache is\n\t\t   monitoring.')
amStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("up", 2), ("down", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amStatus.setStatus('current')
if mibBuilder.loadTexts: amStatus.setDescription('The status of the service running on the server.\n\t\t    active -  in queue but no probes done yet.\n\t\t    up - the server is reachable and responding to probes.\n\t\t    down - the server is unreachable.\n\t\t    inactive - monitoring is disabled.')
ncLocalConfigChanged = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncLocalConfigChanged.setStatus('current')
if mibBuilder.loadTexts: ncLocalConfigChanged.setDescription('Whether the local configuration file on NetCache\n\t\t\twas changed without using DFM configuration management.')
ncLocalConfigVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncLocalConfigVersion.setStatus('current')
if mibBuilder.loadTexts: ncLocalConfigVersion.setDescription("The current cache configuration's version.")
grmMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6))
grmMonitorToggle = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("togglea", 1), ("toggleb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grmMonitorToggle.setStatus('current')
if mibBuilder.loadTexts: grmMonitorToggle.setDescription('Variable for user defined SNMP traps to monitor whether\t\t\tthere has been a status change of any of the GRM \n\t\tagents reporting to this GRM server.')
grmMonitorString = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grmMonitorString.setStatus('current')
if mibBuilder.loadTexts: grmMonitorString.setDescription("Used in conjunction with grmMonitor. This returns a string\n\t\tin format of: 'IP status.' which reports the status\n\t\tof all the GRM agents reporting to this GRM server as of last\n\t\tstatus change.")
takeoverinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7))
takeoverAddrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverAddrs.setStatus('current')
if mibBuilder.loadTexts: takeoverAddrs.setDescription('Indicates the list of interfaces and their corresponding IP\n\t\t addresses of the partner NetCache that this appliance has taken \t\t over.')
takeoverMode = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("takingover", 2), ("takenover", 3), ("giveback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverMode.setStatus('current')
if mibBuilder.loadTexts: takeoverMode.setDescription('Indicates the current takeover mode of this appliance.')
takeoverStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("unknown", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverStatus.setStatus('current')
if mibBuilder.loadTexts: takeoverStatus.setDescription("Indicates the current status of the takeover partner of \n\t\t this appliance. up(1) indicates that the takeover partner is \n\t\t reachable. unknown(2) indicates that an unknown error occurred.\n\t\t failed(3) indicates that the partner has failed, takeoverAddrs\n\t\t indicates the partner's IP address this appliance has taken\n\t\t over.")
ncObjectsStored = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncObjectsStored.setStatus('current')
if mibBuilder.loadTexts: ncObjectsStored.setDescription('The total number of objects stored currently.')
ncBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncBytesToClients.setDescription('Total bytes sent to clients')
ncBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncBytesFromClients.setDescription('Total bytes received from clients')
ncBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncBytesToServers.setDescription('Total bytes sent to servers')
ncBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncBytesFromServers.setDescription('Total bytes received from servers')
ncHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6))
ncHttpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalRequests.setStatus('current')
if mibBuilder.loadTexts: ncHttpTotalRequests.setDescription('Total HTTP requests so far')
ncHttpHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHitRequests.setStatus('current')
if mibBuilder.loadTexts: ncHttpHitRequests.setDescription('HTTP requests that resulted in hits so far')
ncHttpMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpMissRequests.setStatus('current')
if mibBuilder.loadTexts: ncHttpMissRequests.setDescription('HTTP requests that resulted in misses so far')
ncHttpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpServConns.setStatus('current')
if mibBuilder.loadTexts: ncHttpServConns.setDescription('Number of currently open TCP/IP connections to HTTP servers (active and idle)')
ncHttpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpCliConns.setStatus('current')
if mibBuilder.loadTexts: ncHttpCliConns.setDescription('Number of currently open TCP/IP connections to HTTP clients (active and idle)')
ncHttpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncHttpBWSavings.setDescription('Bandwidth savings for HTTP requests')
ncHttpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitrate.setStatus('current')
if mibBuilder.loadTexts: ncHttpObjHitrate.setDescription('Object Hitrate HTTP requests')
ncHttpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpRespTimePerByte.setStatus('current')
if mibBuilder.loadTexts: ncHttpRespTimePerByte.setDescription('Response time in milliseconds per byte for HTTP requests.')
ncHttpAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpAvgRespTime.setDescription('Average response time in milliseconds for all HTTP requests.')
ncHttpAvgHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgHitRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpAvgHitRespTime.setDescription('Average response time in milliseconds for HTTP hit requests.')
ncHttpAvgMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgMissRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpAvgMissRespTime.setDescription('Average response time in milliseconds for HTTP miss requests.')
ncHttpInstAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpInstAvgRespTime.setDescription('Average response time in milliseconds for all HTTP requests during the last 60 seconds.')
ncHttpInstAvgHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgHitRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpInstAvgHitRespTime.setDescription('Average response time in milliseconds for HTTP hit requests during the last 60 seconds.')
ncHttpInstAvgMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgMissRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpInstAvgMissRespTime.setDescription('Average response time in milliseconds for HTTP miss requests during the last 60 seconds.')
ncHttpTotalRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpTotalRespTime.setDescription('Total fetch time in milliseconds for HTTP requests')
ncHttpTotalHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalHitRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpTotalHitRespTime.setDescription('Total fetch time in milliseconds for HTTP HIT requests')
ncHttpTotalMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalMissRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpTotalMissRespTime.setDescription('Total fetch time in milliseconds for HTTP MISS requests')
ncHttpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncHttpBytesToClients.setDescription('Total HTTP bytes sent to clients')
ncHttpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncHttpBytesFromClients.setDescription('Total HTTP bytes received from clients')
ncHttpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncHttpBytesToServers.setDescription('Total HTTP bytes sent to servers')
ncHttpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncHttpBytesFromServers.setDescription('Total HTTP bytes received from servers')
ncHttpHighTotalRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalRespTimes.setStatus('current')
if mibBuilder.loadTexts: ncHttpHighTotalRespTimes.setDescription('Total fetch time in milliseconds for HTTP requests.\n\t\t\tThis object returns the most significant 32 bits \n\t\t\tof the 64 bit unsigned integer.')
ncHttpLowTotalRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalRespTimes.setStatus('current')
if mibBuilder.loadTexts: ncHttpLowTotalRespTimes.setDescription('Total fetch time in milliseconds for HTTP requests.\n\t\t\tThis object returns the least significant 32 bits \n\t\t\tof the 64 bit unsigned integer.')
ncHttpHighTotalHitRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalHitRespTimes.setStatus('current')
if mibBuilder.loadTexts: ncHttpHighTotalHitRespTimes.setDescription('Total fetch time in milliseconds for HTTP HIT requests.\n\t\t\tThis object returns the most significant 32 bits \n\t\t\tof the 64 bit unsigned integer.')
ncHttpLowTotalHitRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalHitRespTimes.setStatus('current')
if mibBuilder.loadTexts: ncHttpLowTotalHitRespTimes.setDescription('Total fetch time in milliseconds for HTTP HIT requests.\n\t\t\tThis object returns the least significant 32 bits \n\t\t\tof the 64 bit unsigned integer.')
ncHttpHighTotalMissRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalMissRespTimes.setStatus('current')
if mibBuilder.loadTexts: ncHttpHighTotalMissRespTimes.setDescription('Total fetch time in milliseconds for HTTP MISS requests.\n\t\t\tThis object returns the most significant 32 bits \n\t\t\tof the 64 bit unsigned integer.')
ncHttpLowTotalMissRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalMissRespTimes.setStatus('current')
if mibBuilder.loadTexts: ncHttpLowTotalMissRespTimes.setDescription('Total fetch time in milliseconds for HTTP MISS requests.\n\t\t\tThis object returns the least significant 32 bits \n\t\t\tof the 64 bit unsigned integer.')
ncHttpReqRate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpReqRate.setStatus('current')
if mibBuilder.loadTexts: ncHttpReqRate.setDescription('Request Rate for HTTP requests')
ncHttpObjHitRateLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitRateLast1Min.setStatus('current')
if mibBuilder.loadTexts: ncHttpObjHitRateLast1Min.setDescription('HTTP object hit rate in the last 1 minute.')
ncHttpObjHitRateLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitRateLast5Min.setStatus('current')
if mibBuilder.loadTexts: ncHttpObjHitRateLast5Min.setDescription('HTTP object hit rate in the last 5 minutes.')
ncHttpByteHitRateLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpByteHitRateLast1Min.setStatus('current')
if mibBuilder.loadTexts: ncHttpByteHitRateLast1Min.setDescription('HTTP byte hit rate in the last 1 minute.')
ncHttpByteHitRateLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpByteHitRateLast5Min.setStatus('current')
if mibBuilder.loadTexts: ncHttpByteHitRateLast5Min.setDescription('HTTP byte hit rate in the last 5 minutes.')
ncHttpBWSavingsLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavingsLast1Min.setStatus('current')
if mibBuilder.loadTexts: ncHttpBWSavingsLast1Min.setDescription('Bandwidth savings for HTTP requests in the last\n\t\t\t 1 minute')
ncHttpBWSavingsLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavingsLast5Min.setStatus('current')
if mibBuilder.loadTexts: ncHttpBWSavingsLast5Min.setDescription('Bandwidth savings for HTTP requests in the last\n\t\t\t 5 minutes')
ncHttpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpActiveServConns.setStatus('current')
if mibBuilder.loadTexts: ncHttpActiveServConns.setDescription('Number of currently active TCP/IP connections to HTTP servers')
ncHttpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpActiveCliConns.setStatus('current')
if mibBuilder.loadTexts: ncHttpActiveCliConns.setDescription('Number of currently active TCP/IP connections to HTTP clients')
ncHttpAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37), )
if mibBuilder.loadTexts: ncHttpAccelTable.setStatus('current')
if mibBuilder.loadTexts: ncHttpAccelTable.setDescription('Number of kilobytes sent to and received from the client side\n\t\t\tper acceleration rule')
ncHttpAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1), ).setIndexNames((0, "NETAPP-MIB", "ncHttpAccelIndex"))
if mibBuilder.loadTexts: ncHttpAccelEntry.setStatus('current')
if mibBuilder.loadTexts: ncHttpAccelEntry.setDescription('Each entry contains the number of kilobytes sent and\n \t\t\treceived to/from the clients side per acceleration \n\t\t\trule')
ncHttpAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelIndex.setStatus('current')
if mibBuilder.loadTexts: ncHttpAccelIndex.setDescription('A unique value for each entry in the http acceleration\n\t\t\t stats table')
ncHttpAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelKbytesFromClient.setStatus('current')
if mibBuilder.loadTexts: ncHttpAccelKbytesFromClient.setDescription('The total number of kilobytes received from the client\n \t\t\tfor this acceleration rule')
ncHttpAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelKbytesToClient.setStatus('current')
if mibBuilder.loadTexts: ncHttpAccelKbytesToClient.setDescription('The total number of kilobytes sent to the client for\n \t\t\tthis acceleration rule')
ncHttpAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelHits.setStatus('current')
if mibBuilder.loadTexts: ncHttpAccelHits.setDescription(' The number of times this acceleration rule has been hit')
ncHttpsAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38), )
if mibBuilder.loadTexts: ncHttpsAccelTable.setStatus('current')
if mibBuilder.loadTexts: ncHttpsAccelTable.setDescription('Number of kilobytes sent to and received from the client side\n \t\t\tper acceleration rule')
ncHttpsAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1), ).setIndexNames((0, "NETAPP-MIB", "ncHttpsAccelIndex"))
if mibBuilder.loadTexts: ncHttpsAccelEntry.setStatus('current')
if mibBuilder.loadTexts: ncHttpsAccelEntry.setDescription('Each entry contains the number of kilobytes sent and\n\t\t\t received to/from the clients side per acceleration\n\t\t\t\trule')
ncHttpsAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelIndex.setStatus('current')
if mibBuilder.loadTexts: ncHttpsAccelIndex.setDescription('A unique value for each entry in the http acceleration\n\t\t\t stats table')
ncHttpsAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelKbytesFromClient.setStatus('current')
if mibBuilder.loadTexts: ncHttpsAccelKbytesFromClient.setDescription('The total number of kilobytes received from the client\n\t\t\t for this acceleration rule')
ncHttpsAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelKbytesToClient.setStatus('current')
if mibBuilder.loadTexts: ncHttpsAccelKbytesToClient.setDescription('The total number of kilobytes sent to the client for\n\t\t\t this acceleration rule')
ncHttpsAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelHits.setStatus('current')
if mibBuilder.loadTexts: ncHttpsAccelHits.setDescription(' The number of times this acceleration rule has been hit')
ncNntp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7))
ncNntpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpTotalRequests.setStatus('current')
if mibBuilder.loadTexts: ncNntpTotalRequests.setDescription('NNTP total requests so far')
ncNntpCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpCacheableRequests.setStatus('current')
if mibBuilder.loadTexts: ncNntpCacheableRequests.setDescription('NNTP requests that were cacheable')
ncNntpProxyRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpProxyRequests.setStatus('current')
if mibBuilder.loadTexts: ncNntpProxyRequests.setDescription('NNTP requests that were non-cacheable')
ncNntpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpServConns.setStatus('current')
if mibBuilder.loadTexts: ncNntpServConns.setDescription('Number of currently open TCP/IP connections to NNTP servers (active and idle)')
ncNntpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpCliConns.setStatus('current')
if mibBuilder.loadTexts: ncNntpCliConns.setDescription('Number of currently open TCP/IP connections to NNTP clients (active and idle)')
ncNntpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncNntpBWSavings.setDescription('Bandwidth savings for NNTP requests')
ncNntpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpRespTimePerByte.setStatus('current')
if mibBuilder.loadTexts: ncNntpRespTimePerByte.setDescription('Response time per byte for NNTP requests')
ncNntpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncNntpBytesToClients.setDescription('Total NNTP bytes sent to clients')
ncNntpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncNntpBytesFromClients.setDescription('Total NNTP bytes received from clients')
ncNntpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncNntpBytesToServers.setDescription('Total NNTP bytes sent to servers')
ncNntpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncNntpBytesFromServers.setDescription('Total NNTP bytes received from servers')
ncNntpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpObjHitrate.setStatus('current')
if mibBuilder.loadTexts: ncNntpObjHitrate.setDescription('Object Hitrate of NNTP requests')
ncNntpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpActiveServConns.setStatus('current')
if mibBuilder.loadTexts: ncNntpActiveServConns.setDescription('Number of currently active TCP/IP connections to NNTP servers')
ncNntpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpActiveCliConns.setStatus('current')
if mibBuilder.loadTexts: ncNntpActiveCliConns.setDescription('Number of currently active TCP/IP connections to NNTP clients')
ncFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8))
ncFtpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpTotalRequests.setStatus('current')
if mibBuilder.loadTexts: ncFtpTotalRequests.setDescription('FTP total requests so far')
ncFtpHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpHitRequests.setStatus('current')
if mibBuilder.loadTexts: ncFtpHitRequests.setDescription('FTP requests that resulted in hits so far')
ncFtpMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpMissRequests.setStatus('current')
if mibBuilder.loadTexts: ncFtpMissRequests.setDescription('FTP requests that resulted in misses so far')
ncFtpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpServConns.setStatus('current')
if mibBuilder.loadTexts: ncFtpServConns.setDescription('Number of currently open TCP/IP connections to FTP servers (active and idle)')
ncFtpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpCliConns.setStatus('current')
if mibBuilder.loadTexts: ncFtpCliConns.setDescription('Number of currently open TCP/IP connections to FTP clients (active and idle)')
ncFtpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncFtpBWSavings.setDescription('Bandwidth savings for FTP requests')
ncFtpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpRespTimePerByte.setStatus('current')
if mibBuilder.loadTexts: ncFtpRespTimePerByte.setDescription('Response time per byte for FTP requests')
ncFtpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncFtpBytesToClients.setDescription('Total FTP bytes sent to clients')
ncFtpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncFtpBytesFromClients.setDescription('Total FTP bytes received from clients')
ncFtpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncFtpBytesToServers.setDescription('Total FTP bytes sent to servers')
ncFtpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncFtpBytesFromServers.setDescription('Total FTP bytes received from servers')
ncFtpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpObjHitrate.setStatus('current')
if mibBuilder.loadTexts: ncFtpObjHitrate.setDescription('Object Hitrate of FTP requests')
ncFtpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpActiveServConns.setStatus('current')
if mibBuilder.loadTexts: ncFtpActiveServConns.setDescription('Number of currently active TCP/IP connections to FTP servers')
ncFtpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpActiveCliConns.setStatus('current')
if mibBuilder.loadTexts: ncFtpActiveCliConns.setDescription('Number of currently active TCP/IP connections to FTP clients')
ncStreaming = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9))
ncStreamingServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingServConns.setStatus('current')
if mibBuilder.loadTexts: ncStreamingServConns.setDescription('Number of currently open TCP/IP connections to streaming servers (active and idle)')
ncStreamingCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingCliConns.setStatus('current')
if mibBuilder.loadTexts: ncStreamingCliConns.setDescription('Number of currently open TCP/IP connections to streaming clients (active and idle)')
ncStreamingBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncStreamingBWSavings.setDescription('Bandwidth savings for all streaming requests')
ncStreamingRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRespTimePerByte.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRespTimePerByte.setDescription('Response time per byte for all streaming requests')
ncStreamingHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingHitRequests.setStatus('current')
if mibBuilder.loadTexts: ncStreamingHitRequests.setDescription('STREAMING requests that resulted in hits so far')
ncStreamingMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMissRequests.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMissRequests.setDescription('STREAMING requests that resulted in misses so far')
ncStreamingTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingTotalRequests.setStatus('current')
if mibBuilder.loadTexts: ncStreamingTotalRequests.setDescription('STREAMING total requests so far')
ncStreamingLiveBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingLiveBytesToClients.setDescription('Total Streaming Live bytes sent to clients')
ncStreamingLiveBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingLiveBytesFromClients.setDescription('Total Streaming Live bytes received from clients')
ncStreamingLiveBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingLiveBytesToServers.setDescription('Total Streaming Live bytes sent to servers')
ncStreamingLiveBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingLiveBytesFromServers.setDescription('Total Streaming Live bytes received from servers')
ncStreamingProxyBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingProxyBytesToClients.setDescription('Total Streaming Proxy bytes sent to clients')
ncStreamingProxyBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingProxyBytesFromClients.setDescription('Total Streaming Proxy bytes received from clients')
ncStreamingProxyBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingProxyBytesToServers.setDescription('Total Streaming Proxy bytes sent to servers')
ncStreamingProxyBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingProxyBytesFromServers.setDescription('Total Streaming Proxy bytes received from servers')
ncStreamingOBTClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOBTClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingOBTClients.setDescription('Total Streaming Ondemand bytes sent to clients')
ncStreamingOBFClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOBFClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingOBFClients.setDescription('Total Streaming Ondemand bytes received from clients')
ncStreamingOBTServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOBTServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingOBTServers.setDescription('Total Streaming Ondemand bytes sent to servers')
ncStreamingOBFServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOBFServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingOBFServers.setDescription('Total Streaming Ondemand bytes received from servers')
ncStreamingObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingObjHitrate.setStatus('current')
if mibBuilder.loadTexts: ncStreamingObjHitrate.setDescription('Object Hitrate of Streaming requests')
ncStreamingRealBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealBytesToClients.setDescription('Total Streaming Real bytes sent to clients')
ncStreamingRealBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealBytesFromClients.setDescription('Total Streaming Real bytes received from clients')
ncStreamingRealBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealBytesToServers.setDescription('Total Streaming Real bytes sent to servers')
ncStreamingRealBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealBytesFromServers.setDescription('Total Streaming Real bytes received from servers')
ncStreamingMmsBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsBytesToClients.setDescription('Total Streaming Mms bytes sent to clients')
ncStreamingMmsBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsBytesFromClients.setDescription('Total Streaming Mms bytes received from clients')
ncStreamingMmsBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsBytesToServers.setDescription('Total Streaming Mms bytes sent to servers')
ncStreamingMmsBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsBytesFromServers.setDescription('Total Streaming Mms bytes received from servers')
ncStreamingQTBTClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQTBTClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingQTBTClients.setDescription('Total Streaming QuickTime bytes sent to clients')
ncStreamingQTBFClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQTBFClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingQTBFClients.setDescription('Total Streaming QuickTime bytes received from clients')
ncStreamingQTBTServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQTBTServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingQTBTServers.setDescription('Total Streaming QuickTime bytes sent to servers')
ncStreamingQTBFServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQTBFServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingQTBFServers.setDescription('Total Streaming QuickTime bytes received from servers')
ncStreamingLiveBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncStreamingLiveBWSavings.setDescription('Bandwidth savings for all Live streaming requests')
ncStreamingOndemandBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOndemandBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncStreamingOndemandBWSavings.setDescription('Bandwidth savings for all VOD streaming requests')
ncStreamingRealBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealBWSavings.setDescription('Bandwidth savings for all Real streaming requests')
ncStreamingMmsBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsBWSavings.setDescription('Bandwidth savings for all MMS streaming requests')
ncStreamingQuickTimeBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncStreamingQuickTimeBWSavings.setDescription('Bandwidth savings for all QuickTime streaming requests')
ncStreamingActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingActiveServConns.setStatus('current')
if mibBuilder.loadTexts: ncStreamingActiveServConns.setDescription('Number of currently active TCP/IP connections to streaming servers')
ncStreamingActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingActiveCliConns.setStatus('current')
if mibBuilder.loadTexts: ncStreamingActiveCliConns.setDescription('Number of currently active TCP/IP connections to streaming clients')
ncStreamingRtspWMBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToClients.setDescription('Total Streaming Windows Media RTSP bytes sent to clients')
ncStreamingRtspWMBFClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBFClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRtspWMBFClients.setDescription('Total Streaming Windows Media RTSP bytes received from clients')
ncStreamingRtspWMBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToServers.setDescription('Total Streaming Windows Media RTSP bytes sent to servers')
ncStreamingRtspWMBFServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBFServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRtspWMBFServers.setDescription('Total Streaming Windows Media RTSP bytes received from servers')
ncStreamingRtspWMBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRtspWMBWSavings.setDescription('Bandwidth savings for all Windows Media RTSP streaming requests')
ncStreamingAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45), )
if mibBuilder.loadTexts: ncStreamingAccelTable.setStatus('current')
if mibBuilder.loadTexts: ncStreamingAccelTable.setDescription('Number of kilobytes sent to and received from the \n\t\t\t client side per acceleration rule')
ncStreamingAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1), ).setIndexNames((0, "NETAPP-MIB", "ncStreamingAccelIndex"))
if mibBuilder.loadTexts: ncStreamingAccelEntry.setStatus('current')
if mibBuilder.loadTexts: ncStreamingAccelEntry.setDescription('Each entry contains the number of kilobytes sent and\n\t\t\t received to/from the clients side per acceleration\n\t\t\t rule')
ncStreamingAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelIndex.setStatus('current')
if mibBuilder.loadTexts: ncStreamingAccelIndex.setDescription('A unique value for each entry in the streaming\n\t\t\t acceleration  stats table')
ncStreamingAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelKbytesFromClient.setStatus('current')
if mibBuilder.loadTexts: ncStreamingAccelKbytesFromClient.setDescription('The total number of kilobytes received from the client\n\t\t\t for this acceleration rule')
ncStreamingAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelKbytesToClient.setStatus('current')
if mibBuilder.loadTexts: ncStreamingAccelKbytesToClient.setDescription('The total number of kilobytes sent to the client for\n\t\t\t this acceleration rule')
ncStreamingAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelHits.setStatus('current')
if mibBuilder.loadTexts: ncStreamingAccelHits.setDescription(' The number of times this acceleration rule has \n\t\t\t\tbeen hit')
ncStreamingClientsDelayedSW = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingClientsDelayedSW.setStatus('current')
if mibBuilder.loadTexts: ncStreamingClientsDelayedSW.setDescription('Number of clients delayed because of a Bandwidth Limit')
ncTotalBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncTotalBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncTotalBWSavings.setDescription('Total Bandwidth savings for HTTP, FTP, NNTP, and Streaming protocols')
ncDns = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11))
ncDnsRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: ncDnsRequestsReceived.setDescription('Total DNS requests received from clients')
ncDnsCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsCacheHits.setStatus('current')
if mibBuilder.loadTexts: ncDnsCacheHits.setDescription('Hits on the DNS cache.  This includes hits\n\t\t\tfor DNS lookups generated by NetCache internally')
ncDnsCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsCacheMisses.setStatus('current')
if mibBuilder.loadTexts: ncDnsCacheMisses.setDescription('Misses on the DNS cache.  This includes misses\n\t\t\tfor DNS lookups generated by NetCache internally')
ncDnsSuccessfulForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsSuccessfulForwardLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsSuccessfulForwardLookups.setDescription('Forward DNS lookups that are successful')
ncDnsFailedForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsFailedForwardLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsFailedForwardLookups.setDescription('Forward DNS lookups that failed')
ncDnsPendingForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsPendingForwardLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsPendingForwardLookups.setDescription('Forward DNS lookups that are in progress')
ncDnsSuccessfulReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsSuccessfulReverseLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsSuccessfulReverseLookups.setDescription('Reverse DNS lookups that are successful')
ncDnsFailedReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsFailedReverseLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsFailedReverseLookups.setDescription('Reverse DNS lookups that failed')
ncDnsPendingReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsPendingReverseLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsPendingReverseLookups.setDescription('Reverse DNS lookups that are in progress')
ncDnsIres = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10))
ncDnsIresIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncDnsIresIsEnabled.setDescription('Has Full Service Resolver been enabled')
ncDnsIresIsInitialised = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresIsInitialised.setStatus('current')
if mibBuilder.loadTexts: ncDnsIresIsInitialised.setDescription('Has Full Service Resolver initialized')
ncDnsIresForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresForwardLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsIresForwardLookups.setDescription("Full Service Resolver's Forward Lookups")
ncDnsIresPendingForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresPendingForwardLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsIresPendingForwardLookups.setDescription("Full Service Resolver's Pending Forward Lookups")
ncDnsIresReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresReverseLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsIresReverseLookups.setDescription("Full Service Resolver's Reverse Lookups")
ncDnsIresPendingReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresPendingReverseLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsIresPendingReverseLookups.setDescription("Full Service Resolver's Pending Reverse Lookups")
ncAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12))
ncNtlm = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12, 1))
ncNtlmPossibleProblem = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNtlmPossibleProblem.setStatus('current')
if mibBuilder.loadTexts: ncNtlmPossibleProblem.setDescription("Whether a possible ntlm problem is detected \n\t\t\tin the appliance's domain environment.")
ncRM = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13))
ncRMMem = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1))
ncRMMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncRMMemTotal.setStatus('current')
if mibBuilder.loadTexts: ncRMMemTotal.setDescription('Total memory in kilobytes available for \n\t\t\t\t\tallocations after boot. It does not imply \n\t\t\t\t\tthe total system memory.')
ncRMMemFree = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncRMMemFree.setStatus('current')
if mibBuilder.loadTexts: ncRMMemFree.setDescription('Current free memory in kilobytes available \n\t\t\t\t\tfor allocations.')
snapmirrorOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorOn.setStatus('current')
if mibBuilder.loadTexts: snapmirrorOn.setDescription('Indicates whether snapmirror has been turned on\n\t\t\tor not.')
snapmirrorActiveRestoreCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveRestoreCount.setStatus('current')
if mibBuilder.loadTexts: snapmirrorActiveRestoreCount.setDescription('Number of active SnapMirror restores.')
snapmirrorScheduledRestoreCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorScheduledRestoreCount.setStatus('current')
if mibBuilder.loadTexts: snapmirrorScheduledRestoreCount.setDescription('Number of scheduled SnapMirror restores.')
snapmirrorBackupNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupNumber.setStatus('current')
if mibBuilder.loadTexts: snapmirrorBackupNumber.setDescription('Number of active SnapMirror backups.')
snapmirrorBackupSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupSuccesses.setStatus('current')
if mibBuilder.loadTexts: snapmirrorBackupSuccesses.setDescription('Number of SnapMirror backups which completed.\n\t\t\tReset on reboot.')
snapmirrorRestoreSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreSuccesses.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRestoreSuccesses.setDescription('Number of SnapMirror restores which completed.\n\t\t\tReset on reboot.')
snapmirrorBackupAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupAborts.setStatus('current')
if mibBuilder.loadTexts: snapmirrorBackupAborts.setDescription('Number of SnapMirror backup transfers which have\n\t\t\taborted. Reset on reboot.')
snapmirrorRestoreRestartAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreRestartAborts.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRestoreRestartAborts.setDescription('Number of SnapMirror restore temporary aborts.\n\t\t\tReset on reboot.')
snapmirrorRestoreWaitAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreWaitAborts.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRestoreWaitAborts.setDescription('Number of SnapMirror restore permanent aborts.\n\t\t\tReset on reboot.')
snapmirrorWrittenBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorWrittenBytes.setStatus('current')
if mibBuilder.loadTexts: snapmirrorWrittenBytes.setDescription('Number of Megabytes written by SnapMirror.\n\t\t\tReset on reboot.')
snapmirrorReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorReadBytes.setStatus('current')
if mibBuilder.loadTexts: snapmirrorReadBytes.setDescription('Number of Megabytes read by SnapMirror.\n\t\t\tReset on reboot.')
snapmirrorActiveDstNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveDstNumber.setStatus('current')
if mibBuilder.loadTexts: snapmirrorActiveDstNumber.setDescription('Number of active SnapMirror destination.')
snapmirrorActiveSrcNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveSrcNumber.setStatus('current')
if mibBuilder.loadTexts: snapmirrorActiveSrcNumber.setDescription('Number of active SnapMirror Source.')
snapmirrorFilerTotalDstSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstSuccesses.setStatus('current')
if mibBuilder.loadTexts: snapmirrorFilerTotalDstSuccesses.setDescription('Total number of successful snapmirror transfers to\n\t\t\tthe destination. Persistent across reboot.')
snapmirrorFilerTotalSrcSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcSuccesses.setStatus('current')
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcSuccesses.setDescription('Total number of successful snapmirror transfers\n\t\t\tfrom the source. Persistent across reboot.')
snapmirrorFilerTotalSrcFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcFailures.setStatus('current')
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcFailures.setDescription('Total number of failed SnapMirror transfers on\n\t\t\tthe source. Persistent across reboot.')
snapmirrorFilerTotalDstFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstFailures.setStatus('current')
if mibBuilder.loadTexts: snapmirrorFilerTotalDstFailures.setDescription('Total number of failed SnapMirror transfers on\n\t\t\tthe destination. Persistent across reboot.')
snapmirrorFilerTotalDstDeferments = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstDeferments.setStatus('current')
if mibBuilder.loadTexts: snapmirrorFilerTotalDstDeferments.setDescription('Total number of deferred snapmirror transfer on\n\t\t\tthe destination. Persistent across reboot.')
snapmirrorIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorIsLicensed.setStatus('current')
if mibBuilder.loadTexts: snapmirrorIsLicensed.setDescription('Whether the snapmirror is licensed on the filer.')
snapmirrorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 9, 20), )
if mibBuilder.loadTexts: snapmirrorStatusTable.setStatus('current')
if mibBuilder.loadTexts: snapmirrorStatusTable.setDescription('provide a list of snapmirror status.')
snapmirrorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1), ).setIndexNames((0, "NETAPP-MIB", "snapmirrorIndex"))
if mibBuilder.loadTexts: snapmirrorStatusEntry.setStatus('current')
if mibBuilder.loadTexts: snapmirrorStatusEntry.setDescription('Provide a report of current status of snapmirror.')
snapmirrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorIndex.setStatus('current')
if mibBuilder.loadTexts: snapmirrorIndex.setDescription('Index into the snapmirror status table.')
snapmirrorSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSrc.setStatus('current')
if mibBuilder.loadTexts: snapmirrorSrc.setDescription('Source of the snapmirror. <filer>:<vol> or\n\t\t\t<filer>:/vol/<qtree_name>')
snapmirrorDst = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorDst.setStatus('current')
if mibBuilder.loadTexts: snapmirrorDst.setDescription('Destination of the snapmirror.\n\t\t\t<filer>:<vol> or <filer>:/vol/<qtree_name>')
snapmirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idle", 1), ("transferring", 2), ("pending", 3), ("aborting", 4), ("migrating", 5), ("quiescing", 6), ("resyncing", 7), ("waiting", 8), ("syncing", 9), ("inSync", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorStatus.setStatus('current')
if mibBuilder.loadTexts: snapmirrorStatus.setDescription('Current transfer status of the snapmirror.')
snapmirrorState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("uninitialized", 1), ("snapmirrored", 2), ("brokenOff", 3), ("quiesced", 4), ("source", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorState.setStatus('current')
if mibBuilder.loadTexts: snapmirrorState.setDescription('Current state of the snapmirror.')
snapmirrorLag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLag.setStatus('current')
if mibBuilder.loadTexts: snapmirrorLag.setDescription('How far behind from the source the destination is.')
snapmirrorTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalSuccesses.setStatus('current')
if mibBuilder.loadTexts: snapmirrorTotalSuccesses.setDescription('Total number of successful transfer since the snapmirror\n\t\tis initialized. Persistent across reboot.')
snapmirrorTotalRestartSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalRestartSuccesses.setStatus('current')
if mibBuilder.loadTexts: snapmirrorTotalRestartSuccesses.setDescription('Total number of successful restarted transfer since\n\t\tthe snapmirror is initialized. Persistent across reboot.')
snapmirrorTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalFailures.setStatus('current')
if mibBuilder.loadTexts: snapmirrorTotalFailures.setDescription('Total number of failed or aborted transfer since\n\t\tthe snapmirror is initialized. Persistent across reboot.')
snapmirrorTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalDeferments.setStatus('current')
if mibBuilder.loadTexts: snapmirrorTotalDeferments.setDescription('Total number of deferment since the snapmirror\n\t\tis initialized. Persistent across reboot.')
snapmirrorTotalTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalTransMBs.setStatus('current')
if mibBuilder.loadTexts: snapmirrorTotalTransMBs.setDescription('Total transfer size in MB for the snapmirror.\n\t\tReset on reboot.')
snapmirrorTotalTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalTransTimeSeconds.setStatus('current')
if mibBuilder.loadTexts: snapmirrorTotalTransTimeSeconds.setDescription('Total number of seconds spent in successful transfer for the \n\t\tsnapmirror. Reset on reboot.')
snapmirrorThrottleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorThrottleValue.setStatus('current')
if mibBuilder.loadTexts: snapmirrorThrottleValue.setDescription('Current throttle value for the snapmirror.')
snapmirrorMirrorTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorMirrorTimestamp.setStatus('current')
if mibBuilder.loadTexts: snapmirrorMirrorTimestamp.setDescription('Timestamp of the last snapshot successfully transferred from \n\t\t the source to the destination.')
snapmirrorBaseSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBaseSnapshot.setStatus('current')
if mibBuilder.loadTexts: snapmirrorBaseSnapshot.setDescription('The name of the current base snapshot for the snapmirror.')
snapmirrorLastTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransType.setStatus('current')
if mibBuilder.loadTexts: snapmirrorLastTransType.setDescription('The type of the previous successful transfer.')
snapmirrorLastTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransMBs.setStatus('current')
if mibBuilder.loadTexts: snapmirrorLastTransMBs.setDescription('Last successful transfer size in MB for the snapmirror.')
snapmirrorLastTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransTimeSeconds.setStatus('current')
if mibBuilder.loadTexts: snapmirrorLastTransTimeSeconds.setDescription('Duration of last successful transfer in seconds for the\n\t\t snapmirror.')
snapmirrorSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSchedule.setStatus('current')
if mibBuilder.loadTexts: snapmirrorSchedule.setDescription('Update schedule for the snapmirror in conf file format.')
snapmirrorScheduleDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorScheduleDesc.setStatus('current')
if mibBuilder.loadTexts: snapmirrorScheduleDesc.setDescription('Description of the update schedule for the snapmirror.')
snapmirrorArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorArguments.setStatus('current')
if mibBuilder.loadTexts: snapmirrorArguments.setDescription('Arguments for the snapmirror in conf file format.')
snapmirrorSyncToAsync = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSyncToAsync.setStatus('current')
if mibBuilder.loadTexts: snapmirrorSyncToAsync.setDescription('The number of times changing from sync mode to async mode \n\t\tsince the snapmirror is initialized. Persistent across reboot.')
snapmirrorConnTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 9, 21), )
if mibBuilder.loadTexts: snapmirrorConnTable.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnTable.setDescription('Provide a list of snapmirror connection definitions.')
snapmirrorConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1), ).setIndexNames((0, "NETAPP-MIB", "snapmirrorConnIndex"))
if mibBuilder.loadTexts: snapmirrorConnEntry.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnEntry.setDescription('Provide a report of a defined multipath connection.')
snapmirrorConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnIndex.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnIndex.setDescription('Index into the snapmirror multipath connection table.')
snapmirrorConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnName.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnName.setDescription('The name of the snapmirror multipath connection.')
snapmirrorConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multi", 1), ("failover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnType.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnType.setDescription('The type of the snapmirror multipath connection.')
snapmirrorConnSrc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnSrc1.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnSrc1.setDescription('The name of the source for the first path.')
snapmirrorConnDst1 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnDst1.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnDst1.setDescription('The name of the destination for the first path.')
snapmirrorConnSrc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnSrc2.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnSrc2.setDescription('The name of the source for the second path.')
snapmirrorConnDst2 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnDst2.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnDst2.setDescription('The name of the destination for the second path.')
snapmirrorRelStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 29, 1), )
if mibBuilder.loadTexts: snapmirrorRelStatusTable.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelStatusTable.setDescription('Provide a list of snapmirror status.')
snapmirrorRelStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "snapmirrorRelIndex"))
if mibBuilder.loadTexts: snapmirrorRelStatusEntry.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelStatusEntry.setDescription('Provide a report of current status of snapmirror.')
snapmirrorRelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelIndex.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelIndex.setDescription('A number that identifies this snapmirror relationship. The\n\t\tcmodeSnapmirrorIndex is not related to any other table defined\n\t\tin this MIB.')
snapmirrorRelSrcPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelSrcPath.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelSrcPath.setDescription('Source path of this relationship.')
snapmirrorRelDestPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelDestPath.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelDestPath.setDescription('Destination path of this relationship.')
snapmirrorRelType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("dp", 0), ("ls", 1), ("xdp", 2), ("rst", 3), ("tdp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelType.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelType.setDescription('Relationship type of this relationship.')
snapmirrorRelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("idle", 0), ("transferring", 1), ("restoring", 2), ("checking", 3), ("quiescing", 4), ("quiesced", 5), ("queued", 6), ("preparing", 7), ("waiting", 8), ("finalizing", 9), ("resyncing", 10), ("aborting", 11), ("breaking", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelStatus.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelStatus.setDescription('Current transfer status of this relationship.')
snapmirrorRelState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("uninitialized", 0), ("snapmirrored", 1), ("brokenOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelState.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelState.setDescription('Current state of this relationship.')
snapmirrorRelLag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelLag.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelLag.setDescription('How far behind from the source the destination is.')
snapmirrorRelThrottleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelThrottleValue.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelThrottleValue.setDescription('Current throttle value for this relationship.')
snapmirrorRelSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelSchedule.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelSchedule.setDescription('The schedule associated with this relationship.')
snapmirrorRelPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelPolicy.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelPolicy.setDescription('The policy associated with this relationship.')
snapmirrorRelTransferSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelTransferSnapshot.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelTransferSnapshot.setDescription('The current transfer snapshot for this relationship.')
snapmirrorRelNewestSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelNewestSnapshot.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelNewestSnapshot.setDescription('The newest snapshot at the destination of this relationship.')
snapmirrorRelNewestSnapshotTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelNewestSnapshotTimeStamp.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelNewestSnapshotTimeStamp.setDescription('The time stamp of newest snapshot at the destination of this relationship.')
snapmirrorRelExportedSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelExportedSnapshot.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelExportedSnapshot.setDescription('The exported snapshot at the destination of this relationship.')
snapmirrorRelExportedSnapshotTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelExportedSnapshotTimeStamp.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelExportedSnapshotTimeStamp.setDescription('The time stamp of exported snapshot at the destination of this relationship.')
snapmirrorRelHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelHealthy.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelHealthy.setDescription('Indicates whether this relationship is healthy or not.')
snapmirrorRelUnHealthyReason = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelUnHealthyReason.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelUnHealthyReason.setDescription('Indicates the specific reason due to which this relationship is not healthy.')
snapmirrorRelLastTransferType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("initialize", 0), ("update", 1), ("resync", 2), ("restore", 3), ("check", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelLastTransferType.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelLastTransferType.setDescription('The type of the last transfer on this relationship.')
snapmirrorRelLastTransferError = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelLastTransferError.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelLastTransferError.setDescription('The last transfer error for this relationship.')
snapmirrorRelLastTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelLastTransferSize.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelLastTransferSize.setDescription('The size of the last transfer for this relationship.')
snapmirrorRelLastTransferTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelLastTransferTimeSeconds.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelLastTransferTimeSeconds.setDescription('The duration of the last transfer for this relationship.')
snapmirrorRelGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("flexvol", 0), ("infinitevol-dr", 1), ("vserver-dr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelGroupType.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelGroupType.setDescription('Indicate if this relationship is part of an Infinite Volume or Vserver DR relationship.')
snapmirrorRelVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelVserver.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelVserver.setDescription('Destination vserver to which this relationship belongs.')
snapmirrorRelUpdateSuccCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelUpdateSuccCnt.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelUpdateSuccCnt.setDescription('Total number of successful updates since this relationship was initialized.')
snapmirrorRelUpdateFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelUpdateFailCnt.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelUpdateFailCnt.setDescription('Total number of failed updates since this relationship was initialized.')
snapmirrorRelResyncSuccCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelResyncSuccCnt.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelResyncSuccCnt.setDescription('Total number of successful resyncs since this relationship was initialized.')
snapmirrorRelResyncFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelResyncFailCnt.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelResyncFailCnt.setDescription('Total number of failed resyncs since this relationship was initialized.')
snapmirrorRelBreakSuccCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelBreakSuccCnt.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelBreakSuccCnt.setDescription('Total number of successful breaks since this relationship was initialized.')
snapmirrorRelBreakFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelBreakFailCnt.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelBreakFailCnt.setDescription('Total number of failed breaks since this relationship was initialized.')
snapmirrorRelTotalTransBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelTotalTransBytes.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelTotalTransBytes.setDescription('Total transfer bytes since this relationship was created.')
snapmirrorRelTotalTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelTotalTransTimeSeconds.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRelTotalTransTimeSeconds.setDescription('Total transfer time in seconds since this relationship was created.')
svOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svOn.setStatus('current')
if mibBuilder.loadTexts: svOn.setDescription('Indicates whether snapvault has been turned on\n\t\t\tor not.')
svSystemActiveDstNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemActiveDstNumber.setStatus('current')
if mibBuilder.loadTexts: svSystemActiveDstNumber.setDescription('Number of active snapvault destinations.')
svSystemActiveSrcNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemActiveSrcNumber.setStatus('current')
if mibBuilder.loadTexts: svSystemActiveSrcNumber.setDescription('Number of active snapvault sources.')
svSystemTotalPrimarySuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalPrimarySuccesses.setStatus('current')
if mibBuilder.loadTexts: svSystemTotalPrimarySuccesses.setDescription('Total number of successful snapvault transfers\n\t\t\tfrom the snapvault primary. Persistent across reboot.')
svSystemTotalSecondarySuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondarySuccesses.setStatus('current')
if mibBuilder.loadTexts: svSystemTotalSecondarySuccesses.setDescription('Total number of successful snapvault transfers to\n\t\t\tthe snapvault secondary. Persistent across reboot.')
svSystemTotalPrimaryFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalPrimaryFailures.setStatus('current')
if mibBuilder.loadTexts: svSystemTotalPrimaryFailures.setDescription('Total number of failed snapvault transfers on\n\t\t\tthe snapvault primary. Persistent across reboot.')
svSystemTotalSecondaryFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondaryFailures.setStatus('current')
if mibBuilder.loadTexts: svSystemTotalSecondaryFailures.setDescription('Total number of failed snapvault transfers on\n\t\t\tthe snapvault secondary. Persistent across reboot.')
svSystemTotalSecondaryDeferments = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondaryDeferments.setStatus('current')
if mibBuilder.loadTexts: svSystemTotalSecondaryDeferments.setDescription('Total number of deferred snapvault transfers on\n\t\t\tthe snapvault secondary. Persistent across reboot.')
svPrimaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svPrimaryIsLicensed.setStatus('current')
if mibBuilder.loadTexts: svPrimaryIsLicensed.setDescription('Whether the snapvault_client(primary) is licensed on the filer.')
svSecondaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSecondaryIsLicensed.setStatus('current')
if mibBuilder.loadTexts: svSecondaryIsLicensed.setDescription('Whether the snapvault_server(secondary) is licensed on the filer.')
snapvaultStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 11), )
if mibBuilder.loadTexts: snapvaultStatusTable.setStatus('current')
if mibBuilder.loadTexts: snapvaultStatusTable.setDescription('provide a list of snapvault status.')
snapvaultStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1), ).setIndexNames((0, "NETAPP-MIB", "svIndex"))
if mibBuilder.loadTexts: snapvaultStatusEntry.setStatus('current')
if mibBuilder.loadTexts: snapvaultStatusEntry.setDescription('Provide a report of current status of snapvault.')
svIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svIndex.setStatus('current')
if mibBuilder.loadTexts: svIndex.setDescription('Index into the snapvault status table.')
svSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSrc.setStatus('current')
if mibBuilder.loadTexts: svSrc.setDescription('Source of the snapvault relationship.\n\t\t\t<filer>:/vol/<qtree_name>')
svDst = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svDst.setStatus('current')
if mibBuilder.loadTexts: svDst.setDescription('Destination of the snapvault relationship.\n\t\t\t<filer>:/vol/<qtree_name>')
svStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 12))).clone(namedValues=NamedValues(("idle", 1), ("transferring", 2), ("pending", 3), ("aborting", 4), ("quiescing", 6), ("resyncing", 7), ("paused", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatus.setStatus('current')
if mibBuilder.loadTexts: svStatus.setDescription('Current transfer status of the snapvault relationship.')
svState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("uninitialized", 1), ("snapvaulted", 2), ("brokenOff", 3), ("quiesced", 4), ("source", 5), ("unknown", 6), ("restoring", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svState.setStatus('current')
if mibBuilder.loadTexts: svState.setDescription('Current state of the snapvault relationship.')
svLag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLag.setStatus('current')
if mibBuilder.loadTexts: svLag.setDescription('How far behind from the source the destination is.')
svTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalSuccesses.setStatus('current')
if mibBuilder.loadTexts: svTotalSuccesses.setDescription('Total number of successful transfer since the snapvault\n\t\t relationship was established. Persistent across reboot.')
svTotalRestartSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalRestartSuccesses.setStatus('current')
if mibBuilder.loadTexts: svTotalRestartSuccesses.setDescription('Total number of successful restarted transfer since\n\t\t the snapvault relationship was established. Persistent \n\t\t across reboot.')
svTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalFailures.setStatus('current')
if mibBuilder.loadTexts: svTotalFailures.setDescription('Total number of failed or aborted transfer since\n\t\t the snapvault relationship was established. Persistent \n\t\t across reboot.')
svTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalDeferments.setStatus('current')
if mibBuilder.loadTexts: svTotalDeferments.setDescription('Total number of deferment since the snapvault\n\t\t relationship was established. Persistent across reboot.')
svTotalTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalTransMBs.setStatus('current')
if mibBuilder.loadTexts: svTotalTransMBs.setDescription('Total transfer size in MB for the snapvault.\n\t\tReset on reboot.')
svTotalTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalTransTimeSeconds.setStatus('current')
if mibBuilder.loadTexts: svTotalTransTimeSeconds.setDescription('Total number of seconds spent in successful transfer for the \n\t\t snapvault relationship. Reset on reboot.')
svThrottleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svThrottleValue.setStatus('current')
if mibBuilder.loadTexts: svThrottleValue.setDescription('Current throttle value for the snapvault relationship.')
svSrcSnapshotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSrcSnapshotTime.setStatus('current')
if mibBuilder.loadTexts: svSrcSnapshotTime.setDescription('Time when the source snapshot was created. The time in \n\t\tseconds since January 1, 1970. The source snapshot here \n\t\tis the last snapshot successfully transferred from the \n\t\tsource to the destination.')
svBaseSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svBaseSnapshot.setStatus('current')
if mibBuilder.loadTexts: svBaseSnapshot.setDescription('The name of the current base snapshot for the \n\t\t snapvault relationship.')
svLastTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransType.setStatus('current')
if mibBuilder.loadTexts: svLastTransType.setDescription('The type of the previous successful transfer.')
svLastTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransMBs.setStatus('current')
if mibBuilder.loadTexts: svLastTransMBs.setDescription('Last successful transfer size in MB for the snapvault \n\t\t relationship.')
svLastTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransTimeSeconds.setStatus('current')
if mibBuilder.loadTexts: svLastTransTimeSeconds.setDescription('Duration of last successful transfer in seconds for the\n\t\t snapvault relationship.')
snapvaultHostTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 12), )
if mibBuilder.loadTexts: snapvaultHostTable.setStatus('current')
if mibBuilder.loadTexts: snapvaultHostTable.setDescription('Provide a list of remote snapvault hosts.')
snapvaultHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1), ).setIndexNames((0, "NETAPP-MIB", "svHostIndex"))
if mibBuilder.loadTexts: snapvaultHostEntry.setStatus('current')
if mibBuilder.loadTexts: snapvaultHostEntry.setDescription('Provide snapvault statistics for a remote host\n\t\t\t which has one or more current established \n\t\t\t relationships with the local snapvault system.')
svHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostIndex.setStatus('current')
if mibBuilder.loadTexts: svHostIndex.setDescription('Index into the snapvault remote host table.')
svHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostName.setStatus('current')
if mibBuilder.loadTexts: svHostName.setDescription('The name of the remote snapvault host.')
svHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostType.setStatus('current')
if mibBuilder.loadTexts: svHostType.setDescription('The type of the remote snapvault host.')
svHostTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalSuccesses.setStatus('current')
if mibBuilder.loadTexts: svHostTotalSuccesses.setDescription('Total number of successful snapvault transfers\n\t\tfor all current established relationships between\n\t\tthe local snapvault system and the given remote host.')
svHostTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalFailures.setStatus('current')
if mibBuilder.loadTexts: svHostTotalFailures.setDescription('Total number of failed snapvault transfers\n\t\tfor all current established relationships between\n\t\tthe local snapvault system and the given remote host.')
svHostTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalDeferments.setStatus('current')
if mibBuilder.loadTexts: svHostTotalDeferments.setDescription('Total number of deferred snapvault transfers for\n\t\tall current established relationships between\n\t\tthe local snapvault system and the given remote host.\n\t\t0 for snapvault client host.')
snapvaultSchedTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 13), )
if mibBuilder.loadTexts: snapvaultSchedTable.setStatus('current')
if mibBuilder.loadTexts: snapvaultSchedTable.setDescription('Provide a list of snapvault schedules.')
snapvaultSchedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1), ).setIndexNames((0, "NETAPP-MIB", "svSchedIndex"))
if mibBuilder.loadTexts: snapvaultSchedEntry.setStatus('current')
if mibBuilder.loadTexts: snapvaultSchedEntry.setDescription('Provide a report of schedules of snapvault.')
svSchedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedIndex.setStatus('current')
if mibBuilder.loadTexts: svSchedIndex.setDescription('Index into the snapvault schedule table.')
svSchedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedVolume.setStatus('current')
if mibBuilder.loadTexts: svSchedVolume.setDescription('The name of the volume on the snapvault for the \n\t\t snapvault schedule. This does not have a /vol/ prefix.')
svSchedSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedSnapshot.setStatus('current')
if mibBuilder.loadTexts: svSchedSnapshot.setDescription('The name of the snapshot for the snapvault schedule.')
svSchedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("queued", 2), ("active", 3), ("aborting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedStatus.setStatus('current')
if mibBuilder.loadTexts: svSchedStatus.setDescription('Current status of the snapvault schedule.')
svSchedType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undef", 1), ("xfer", 2), ("create", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedType.setStatus('current')
if mibBuilder.loadTexts: svSchedType.setDescription('The type of the snapvault schedule.')
svSchedSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedSchedule.setStatus('current')
if mibBuilder.loadTexts: svSchedSchedule.setDescription('The update schedule of the snapvault.')
svDrPrimaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svDrPrimaryIsLicensed.setStatus('current')
if mibBuilder.loadTexts: svDrPrimaryIsLicensed.setDescription('Whether the snapvault disaster recovery primary is\n\t\tlicensed on the filer.')
ndmpOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpOn.setStatus('obsolete')
if mibBuilder.loadTexts: ndmpOn.setDescription('Indicates whether ndmpd has been turned on or not.')
ndmpSessionOpened = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpSessionOpened.setStatus('obsolete')
if mibBuilder.loadTexts: ndmpSessionOpened.setDescription('Total number of ndmpd sessions currently opened.\n\t\tSessions may be running backups, restores or neither.')
ndmpBackupActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupActive.setStatus('obsolete')
if mibBuilder.loadTexts: ndmpBackupActive.setDescription('Number of ndmpd backups currently active.')
ndmpRestoreActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreActive.setStatus('obsolete')
if mibBuilder.loadTexts: ndmpRestoreActive.setDescription('Number of ndmpd restores currently active.')
ndmpTapeActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpTapeActive.setStatus('obsolete')
if mibBuilder.loadTexts: ndmpTapeActive.setDescription('Number of tape drives currently active.')
ndmpBackupSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupSuccesses.setStatus('obsolete')
if mibBuilder.loadTexts: ndmpBackupSuccesses.setDescription('Number of ndmpd backups that succeeded.')
ndmpRestoreSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreSuccesses.setStatus('obsolete')
if mibBuilder.loadTexts: ndmpRestoreSuccesses.setDescription('Number of ndmpd restores that succeeded.')
ndmpBackupFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupFailures.setStatus('obsolete')
if mibBuilder.loadTexts: ndmpBackupFailures.setDescription('Number of ndmpd backups that failed.')
ndmpRestoreFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreFailures.setStatus('obsolete')
if mibBuilder.loadTexts: ndmpRestoreFailures.setDescription('Number of ndmpd restores that failed.')
ndmpBackupFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupFailureReason.setStatus('obsolete')
if mibBuilder.loadTexts: ndmpBackupFailureReason.setDescription('When the ndmpBackupFailures value is non-zero, this string\n\t\tdescribes the reason for the most recent backup failure.')
ndmpRestoreFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreFailureReason.setStatus('obsolete')
if mibBuilder.loadTexts: ndmpRestoreFailureReason.setDescription('When the ndmpRestoreFailures value is non-zero, this string\n\t\tdescribes the reason for the most recent restore failure.')
ftpdOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdOn.setStatus('current')
if mibBuilder.loadTexts: ftpdOn.setDescription('Indicates whether ftpd has been turned on or not.')
ftpdCurrentConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdCurrentConns.setStatus('current')
if mibBuilder.loadTexts: ftpdCurrentConns.setDescription('Number of currently open TCP/IP connections to ftp daemon (active and idle)')
ftpdMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdMaxConns.setStatus('current')
if mibBuilder.loadTexts: ftpdMaxConns.setDescription('Number of maximum simultaneous TCP/IP connections to ftp daemon')
ftpdTotalConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdTotalConns.setStatus('current')
if mibBuilder.loadTexts: ftpdTotalConns.setDescription('Number of total TCP/IP connections to ftp daemon')
fabricInstances = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricInstances.setStatus('current')
if mibBuilder.loadTexts: fabricInstances.setDescription('The number of distinct fabrics present.')
fabricTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 2), )
if mibBuilder.loadTexts: fabricTable.setStatus('current')
if mibBuilder.loadTexts: fabricTable.setDescription('Provide a list of fabrics.')
fabricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "fabricIndex"))
if mibBuilder.loadTexts: fabricEntry.setStatus('current')
if mibBuilder.loadTexts: fabricEntry.setDescription('Provide a report of current configuration and\n\t\t\tstatus of fabrics.')
fabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricIndex.setStatus('current')
if mibBuilder.loadTexts: fabricIndex.setDescription('A number that identifies this fabric entry.')
fabricStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricStatus.setStatus('current')
if mibBuilder.loadTexts: fabricStatus.setDescription('This indicates the overall status of the SAN fabric(s).')
fabricStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricStatusMessage.setStatus('current')
if mibBuilder.loadTexts: fabricStatusMessage.setDescription('A string describing the fabric status,\n\t\t\tincluding a description of the condition (if\n\t\t\tany) that caused the status to be anything\n\t\t\tother than ok(3).')
fabricName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricName.setStatus('current')
if mibBuilder.loadTexts: fabricName.setDescription('This is the WWN of the fabric.')
fabricOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("netapp", 1), ("other", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricOwner.setStatus('current')
if mibBuilder.loadTexts: fabricOwner.setDescription('This indicates who owns the management of\n\t\t\tthe fabric.')
switchTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 3), )
if mibBuilder.loadTexts: switchTable.setStatus('current')
if mibBuilder.loadTexts: switchTable.setDescription('Provide a list of switches and hubs\n\t\t\tconnected to the fabric.')
switchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "switchFabricIndex"), (0, "NETAPP-MIB", "switchIndex"))
if mibBuilder.loadTexts: switchEntry.setStatus('current')
if mibBuilder.loadTexts: switchEntry.setDescription('Provide a report of current configuration and\n\t\t\tstatus of fabric interconnect elements.  This\n\t\t\tinclude switches and hubs.')
switchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIndex.setStatus('current')
if mibBuilder.loadTexts: switchIndex.setDescription('A number that identifies this switch entry.')
switchName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchName.setStatus('current')
if mibBuilder.loadTexts: switchName.setDescription('This is the WWN of the switch.')
switchSymbolicName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchSymbolicName.setStatus('current')
if mibBuilder.loadTexts: switchSymbolicName.setDescription('This is the symbolic name of the switch.')
switchType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hub", 1), ("switch", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchType.setStatus('current')
if mibBuilder.loadTexts: switchType.setDescription('The type of the switch.')
switchDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDomain.setStatus('current')
if mibBuilder.loadTexts: switchDomain.setDescription('The domain identifier of the switch.')
switchManagementId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchManagementId.setStatus('current')
if mibBuilder.loadTexts: switchManagementId.setDescription('The in-band management identifier of the switch.')
switchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchStatus.setStatus('current')
if mibBuilder.loadTexts: switchStatus.setDescription('The current status of the switch.')
switchStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchStatusMessage.setStatus('current')
if mibBuilder.loadTexts: switchStatusMessage.setDescription('A string describing the switch status,\n\t\t\tincluding a description of the condition (if\n\t\t\tany) that caused the status to be anything\n\t\t\tother than ok(3).')
switchLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: switchLinkSpeed.setDescription('The link speed of the switch.  The value is an integer\n\t\t\twhose units are Gbits (for example, a value of 2 represents\n\t\t\ta link speed of 2 Gbit).')
switchHighPacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchHighPacketsProcessed.setStatus('deprecated')
if mibBuilder.loadTexts: switchHighPacketsProcessed.setDescription('Number of Packets successfully processed\n\t\t\tsince the last reboot/reset of the switch.\n\t\t\tThis object returns the most\n\t\t\tsignificant 32 bits of the 64 bit unsigned integer. \n\t\t\tThis object is deprecated - Use switch64PacketsProcessed  \n\t\t\tinstead.')
switchLowPacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLowPacketsProcessed.setStatus('deprecated')
if mibBuilder.loadTexts: switchLowPacketsProcessed.setDescription('Number of Packets successfully processed\n\t\t\tsince the last reboot/reset of the switch.\n\t\t\tThis object returns the least\n\t\t\tsignificant 32 bits of the 64 bit unsigned integer. \n\t\t\tThis object is deprecated - Use switch64PacketsProcessed  \n\t\t\tinstead.')
switchHighPacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchHighPacketsRejected.setStatus('deprecated')
if mibBuilder.loadTexts: switchHighPacketsRejected.setDescription('Number of Packets rejected\n\t\t\tsince the last reboot/reset of the switch.\n\t\t\tThis object returns the most\n\t\t\tsignificant 32 bits of the 64 bit unsigned integer. \n\t\t\tThis object is deprecated - Use switch64PacketsRejected  \n\t\t\tinstead.')
switchLowPacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLowPacketsRejected.setStatus('deprecated')
if mibBuilder.loadTexts: switchLowPacketsRejected.setDescription('Number of Packets rejected\n\t\t\tsince the last reboot/reset of the switch.\n\t\t\tThis object returns the least\n\t\t\tsignificant 32 bits of the 64 bit unsigned integer. \n\t\t\tThis object is deprecated - Use switch64PacketsRejected  \n\t\t\tinstead.')
switchFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFabricIndex.setStatus('current')
if mibBuilder.loadTexts: switchFabricIndex.setDescription('The index of the fabric on which this switch\n\t\t\tresides.  The value ranges from 1 to the value\n\t\t\tof fabricInstances.')
switch64PacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switch64PacketsProcessed.setStatus('current')
if mibBuilder.loadTexts: switch64PacketsProcessed.setDescription('Number of Packets successfully processed\n\t\t\tsince the last reboot/reset of the switch.\n\t\t\tThis object returns all of the 64 bit unsigned \n\t\t\tinteger.')
switch64PacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switch64PacketsRejected.setStatus('current')
if mibBuilder.loadTexts: switch64PacketsRejected.setDescription('Number of Packets rejected since the last \n\t\t\treboot/reset of the switch. This object returns \n\t\t\tall of the 64 bit unsigned integer.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 4), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription('Provide a list of ports\n\t\t\tconnected to the fabric.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1), ).setIndexNames((0, "NETAPP-MIB", "portFabricIndex"), (0, "NETAPP-MIB", "portSwitchIndex"), (0, "NETAPP-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
if mibBuilder.loadTexts: portEntry.setDescription('Provide a report of current configuration and\n\t\t\tstatus of ports in the fabric.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('A number that identifies this port entry.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription('This is the WWN of the port.')
portSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSwitchIndex.setStatus('current')
if mibBuilder.loadTexts: portSwitchIndex.setDescription('The index of the switch on which this port\n\t\t\tresides.  The value ranges from 1 to the number of\n\t\t\tof switches.')
portSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSwitchName.setStatus('current')
if mibBuilder.loadTexts: portSwitchName.setDescription('This is the WWN of the switch to which\n\t\t\tthe port is attached.')
portNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('current')
if mibBuilder.loadTexts: portNumber.setDescription('The port number on the switch.')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unidentified", 1), ("nPort", 2), ("nlPort", 3), ("fPort", 4), ("flPort", 5), ("ePort", 6), ("bPort", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
if mibBuilder.loadTexts: portType.setDescription('The type of the port.')
portState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portState.setStatus('current')
if mibBuilder.loadTexts: portState.setDescription('The current state of the port.')
portFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFabricIndex.setStatus('current')
if mibBuilder.loadTexts: portFabricIndex.setDescription('The index of the fabric on which this port\n\t\t\tresides.  The value ranges from 1 to the value\n\t\t\tof fabricInstances.')
dump = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 1))
restore = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 2))
dmpActives = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpActives.setStatus('obsolete')
if mibBuilder.loadTexts: dmpActives.setDescription('Number of active dump.')
dmpAttempts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpAttempts.setStatus('obsolete')
if mibBuilder.loadTexts: dmpAttempts.setDescription('Number of dump attempted.')
dmpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpSuccesses.setStatus('obsolete')
if mibBuilder.loadTexts: dmpSuccesses.setDescription('Number of dump succeeded.')
dmpFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpFailures.setStatus('obsolete')
if mibBuilder.loadTexts: dmpFailures.setDescription('Number of dump failed.')
dmpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5), )
if mibBuilder.loadTexts: dmpTable.setStatus('obsolete')
if mibBuilder.loadTexts: dmpTable.setDescription('Provides a report of dumps on each\n\t\t\t\t dump subtree.')
dmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1), ).setIndexNames((0, "NETAPP-MIB", "dmpIndex"))
if mibBuilder.loadTexts: dmpEntry.setStatus('obsolete')
if mibBuilder.loadTexts: dmpEntry.setDescription('Shows statistics of dumps on an unique\n\t\t\t\t dump subtree.')
dmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpIndex.setStatus('obsolete')
if mibBuilder.loadTexts: dmpIndex.setDescription('Index into the subtree dump table.')
dmpStPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStPath.setStatus('obsolete')
if mibBuilder.loadTexts: dmpStPath.setDescription('The full path to the dump subtree. In the\n\t\t\t\t format of /vol/<volname>/...')
dmpStAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStAttempts.setStatus('obsolete')
if mibBuilder.loadTexts: dmpStAttempts.setDescription('No. of dump attempted for the subtree.')
dmpStSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStSuccesses.setStatus('obsolete')
if mibBuilder.loadTexts: dmpStSuccesses.setDescription('No. of dump succeeded for the subtree.')
dmpStFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStFailures.setStatus('obsolete')
if mibBuilder.loadTexts: dmpStFailures.setDescription('No. of dump failed for the subtree.')
dmpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpTime.setStatus('obsolete')
if mibBuilder.loadTexts: dmpTime.setDescription('The start time for the last attempt\n\t\t\t\t to dump the subtree, including the\n\t\t\t\t currently running one. The time in\n\t\t\t\t seconds since January 1, 1970.')
dmpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("restartable", 2), ("succeeded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStatus.setStatus('obsolete')
if mibBuilder.loadTexts: dmpStatus.setDescription('The status for the last dump attempt\n\t\t\t\t on the subtree.')
dmpLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpLevel.setStatus('obsolete')
if mibBuilder.loadTexts: dmpLevel.setDescription('The level of the dump.')
dmpNumFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpNumFiles.setStatus('obsolete')
if mibBuilder.loadTexts: dmpNumFiles.setDescription('The number of files dumped.')
dmpDataAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpDataAmount.setStatus('obsolete')
if mibBuilder.loadTexts: dmpDataAmount.setDescription('The amount of data dumped, in Megabytes.')
dmpStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStartTime.setStatus('obsolete')
if mibBuilder.loadTexts: dmpStartTime.setDescription('The start time of the dump. The time is\n\t\t\t\t in seconds since January 1, 1970.')
dmpDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpDuration.setStatus('obsolete')
if mibBuilder.loadTexts: dmpDuration.setDescription('The duration of the dump.')
rstActives = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstActives.setStatus('obsolete')
if mibBuilder.loadTexts: rstActives.setDescription('Number of active restore.')
rstAttempts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstAttempts.setStatus('obsolete')
if mibBuilder.loadTexts: rstAttempts.setDescription('Number of restore attempted.')
rstSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstSuccesses.setStatus('obsolete')
if mibBuilder.loadTexts: rstSuccesses.setDescription('Number of restore succeeded.')
rstFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstFailures.setStatus('obsolete')
if mibBuilder.loadTexts: rstFailures.setDescription('Number of restore failed.')
dafsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 1))
dafsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsIsLicensed.setStatus('obsolete')
if mibBuilder.loadTexts: dafsIsLicensed.setDescription('Whether the dafs protocol is licensed on the filer.\n\t\tData ONTAP Specific')
dafsMaxRequestsServer = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequestsServer.setStatus('obsolete')
if mibBuilder.loadTexts: dafsMaxRequestsServer.setDescription('Server wide maximum number of concurrent requests\n\t\tData ONTAP Specific')
dafsMaxRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequests.setStatus('obsolete')
if mibBuilder.loadTexts: dafsMaxRequests.setDescription('Server maximum number of concurrent requests per session\n\t\tData ONTAP Specific')
dafsMaxRequestSize = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequestSize.setStatus('current')
if mibBuilder.loadTexts: dafsMaxRequestSize.setDescription('Server maximum size of an inline request')
dafsMaxResponseSize = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxResponseSize.setStatus('current')
if mibBuilder.loadTexts: dafsMaxResponseSize.setDescription('Server maximum size of an inline response')
dafsMaxPendingRequestsServer = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxPendingRequestsServer.setStatus('obsolete')
if mibBuilder.loadTexts: dafsMaxPendingRequestsServer.setDescription('Server wide maximum number of requests that can queue\n\t\twaiting for resources Data ONTAP Specific')
dafsUseChecksums = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsUseChecksums.setStatus('current')
if mibBuilder.loadTexts: dafsUseChecksums.setDescription('Server uses checksums')
dafsNicNumRequestDemons = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicNumRequestDemons.setStatus('obsolete')
if mibBuilder.loadTexts: dafsNicNumRequestDemons.setDescription('Server default number of request demons per Nic.\n\t\tData ONTAP Specific')
dafsAnonymousAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAnonymousAuthentication.setStatus('current')
if mibBuilder.loadTexts: dafsAnonymousAuthentication.setDescription('Allow the server to accept connections with\n\t\tauthentication type NONE.')
dafsServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsServerEnabled.setStatus('current')
if mibBuilder.loadTexts: dafsServerEnabled.setDescription('Current status of the DAFS server. If true, the DAFS\n\t\tserver is running.')
dafsDefaultUid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDefaultUid.setStatus('current')
if mibBuilder.loadTexts: dafsDefaultUid.setDescription('Default client User ID if anonymously connected.')
dafsDefaultGid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDefaultGid.setStatus('current')
if mibBuilder.loadTexts: dafsDefaultGid.setDescription('Default client Group ID if anonymously connected.')
dafsMaxDisconnectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxDisconnectedSessions.setStatus('current')
if mibBuilder.loadTexts: dafsMaxDisconnectedSessions.setDescription('Maximum number of disconnected sessions for which the\n\t\tDAFS server will retain response cache data.')
dafsMaxIdleSeconds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxIdleSeconds.setStatus('current')
if mibBuilder.loadTexts: dafsMaxIdleSeconds.setDescription('Maximum number of seconds server will keep a session\n                open without hearing from the client.')
dafsNicTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 2), )
if mibBuilder.loadTexts: dafsNicTable.setStatus('current')
if mibBuilder.loadTexts: dafsNicTable.setDescription('A table containing DAFS NIC specific\n                      information.')
dafsNicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "dafsNicIndex"))
if mibBuilder.loadTexts: dafsNicEntry.setStatus('current')
if mibBuilder.loadTexts: dafsNicEntry.setDescription('Information about a particular current DAFS\n                      nic.  An object of this type is transient,\n                      in that it ceases to exist when (or soon after)\n                      the nic is detached.')
dafsNicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicIndex.setStatus('current')
if mibBuilder.loadTexts: dafsNicIndex.setDescription("A unique value for each interface.  Its value\n                      ranges between 1 and the value of DafsNicNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization.")
dafsNicName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicName.setStatus('current')
if mibBuilder.loadTexts: dafsNicName.setDescription('A textual string containing the logical name \n                      under which the nic has been attached.')
dafsNicDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDevice.setStatus('current')
if mibBuilder.loadTexts: dafsNicDevice.setDescription('A textual string containing the physical name\n                      of the nic that has been attached.')
dafsNicState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicState.setStatus('current')
if mibBuilder.loadTexts: dafsNicState.setDescription('Current state of DAFS nic')
dafsNicListenAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicListenAddr.setStatus('current')
if mibBuilder.loadTexts: dafsNicListenAddr.setDescription('Transport specific address structure giving the\n\t\t      DAFS listen address for this NIC.')
dafsNicNumRqstDemons = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicNumRqstDemons.setStatus('obsolete')
if mibBuilder.loadTexts: dafsNicNumRqstDemons.setDescription('Number of request demons assigned to this Nic\n\t\t      to handle Nic related events. Data ONTAP Specific')
dafsNicInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicInBytes.setStatus('current')
if mibBuilder.loadTexts: dafsNicInBytes.setDescription('Total number of bytes, include DMA, received on\n\t\t      this interface')
dafsNicDirectInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDirectInBytes.setStatus('current')
if mibBuilder.loadTexts: dafsNicDirectInBytes.setDescription('Total number of bytes read directly from the\n\t\t      peer memory through this interface')
dafsNicOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicOutBytes.setStatus('current')
if mibBuilder.loadTexts: dafsNicOutBytes.setDescription('Total number of bytes, include DMA, sent on\n\t\t      this interface')
dafsNicDirectOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDirectOutBytes.setStatus('current')
if mibBuilder.loadTexts: dafsNicDirectOutBytes.setDescription('Total number of bytes written directly to the\n\t\t      peer memory through this interface')
curDafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 3))
dafsPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsPendingRequests.setStatus('obsolete')
if mibBuilder.loadTexts: dafsPendingRequests.setDescription('Server wide current number of requests that are\n\t\tqueued waiting for resources Data ONTAP Specific')
dafsCurrentRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCurrentRequests.setStatus('obsolete')
if mibBuilder.loadTexts: dafsCurrentRequests.setDescription('Server wide current number of active requests\n\t\tData ONTAP Specific')
totDafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 4))
dafsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCalls.setStatus('current')
if mibBuilder.loadTexts: dafsCalls.setDescription('Total number of DAFS calls since last reboot')
dafsClientAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientAuths.setStatus('current')
if mibBuilder.loadTexts: dafsClientAuths.setDescription('Total number of Client Auth calls since last reboot')
dafsClientConnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientConnects.setStatus('current')
if mibBuilder.loadTexts: dafsClientConnects.setDescription('Total number of Client Connect calls since last reboot')
dafsClientConnectAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientConnectAuths.setStatus('current')
if mibBuilder.loadTexts: dafsClientConnectAuths.setDescription('Total number of Client Connect Auth calls since last reboot')
dafsConnectBinds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsConnectBinds.setStatus('current')
if mibBuilder.loadTexts: dafsConnectBinds.setDescription('Total number of Connect Bind calls since last reboot')
dafsDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDisconnects.setStatus('current')
if mibBuilder.loadTexts: dafsDisconnects.setDescription('Total number of Disconnect calls since last reboot')
dafsRegisterCreds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRegisterCreds.setStatus('current')
if mibBuilder.loadTexts: dafsRegisterCreds.setDescription('Total number of Register Credential calls since last reboot')
dafsReleaseCreds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReleaseCreds.setStatus('current')
if mibBuilder.loadTexts: dafsReleaseCreds.setDescription('Total number of Release Credential calls since last reboot')
dafsSecinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSecinfos.setStatus('current')
if mibBuilder.loadTexts: dafsSecinfos.setDescription('Total number of Secinfo calls since last reboot')
dafsServerAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsServerAuths.setStatus('current')
if mibBuilder.loadTexts: dafsServerAuths.setDescription('Total number of Server Auth calls since last reboot')
dafsCheckResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCheckResponses.setStatus('current')
if mibBuilder.loadTexts: dafsCheckResponses.setDescription('Total number of Check Response calls since last reboot')
dafsFetchResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsFetchResponses.setStatus('current')
if mibBuilder.loadTexts: dafsFetchResponses.setDescription('Total number of Fetch Response calls since last reboot')
dafsDiscardResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDiscardResponses.setStatus('current')
if mibBuilder.loadTexts: dafsDiscardResponses.setDescription('Total number of Discard Responses calls since last reboot')
dafsAccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAccesses.setStatus('current')
if mibBuilder.loadTexts: dafsAccesses.setDescription('Total number of Access calls since last reboot')
dafsCacheHints = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCacheHints.setStatus('current')
if mibBuilder.loadTexts: dafsCacheHints.setDescription('Total number of Cache Hint calls since last reboot')
dafsCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCloses.setStatus('current')
if mibBuilder.loadTexts: dafsCloses.setDescription('Total number of Close calls since last reboot')
dafsCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCommits.setStatus('current')
if mibBuilder.loadTexts: dafsCommits.setDescription('Total number of Commit calls since last reboot')
dafsCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCreates.setStatus('current')
if mibBuilder.loadTexts: dafsCreates.setDescription('Total number of Create calls since last reboot')
dafsDelegPurges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDelegPurges.setStatus('current')
if mibBuilder.loadTexts: dafsDelegPurges.setDescription('Total number of Delegate Purge calls since last reboot')
dafsDelegReturns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDelegReturns.setStatus('current')
if mibBuilder.loadTexts: dafsDelegReturns.setDescription('Total number of Delegate Return calls since last reboot')
dafsGetFsattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetFsattrs.setStatus('current')
if mibBuilder.loadTexts: dafsGetFsattrs.setDescription('Total number of Get Fsattr  calls since last reboot')
dafsGetRootHandles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetRootHandles.setStatus('current')
if mibBuilder.loadTexts: dafsGetRootHandles.setDescription('Total number of Get Root Handle calls since last reboot')
dafsGetattrInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetattrInlines.setStatus('current')
if mibBuilder.loadTexts: dafsGetattrInlines.setDescription('Total number of Getattr Inline calls since last reboot')
dafsGetattrDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetattrDirects.setStatus('current')
if mibBuilder.loadTexts: dafsGetattrDirects.setDescription('Total number of Getattr Direct calls since last reboot')
dafsLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLinks.setStatus('current')
if mibBuilder.loadTexts: dafsLinks.setDescription('Total number of Link calls since last reboot')
dafsLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLocks.setStatus('current')
if mibBuilder.loadTexts: dafsLocks.setDescription('Total number of Lock calls since last reboot')
dafsLockts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLockts.setStatus('current')
if mibBuilder.loadTexts: dafsLockts.setDescription('Total number of LockT calls since last reboot')
dafsLockus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLockus.setStatus('current')
if mibBuilder.loadTexts: dafsLockus.setDescription('Total number of LockU calls since last reboot')
dafsLookUps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLookUps.setStatus('current')
if mibBuilder.loadTexts: dafsLookUps.setDescription('Total number of LookUp calls since last reboot')
dafsLookUpps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLookUpps.setStatus('current')
if mibBuilder.loadTexts: dafsLookUpps.setDescription('Total number of LookUpp calls since last reboot')
dafsNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNulls.setStatus('current')
if mibBuilder.loadTexts: dafsNulls.setDescription('Total number of Null calls since last reboot')
dafsNverifys = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNverifys.setStatus('current')
if mibBuilder.loadTexts: dafsNverifys.setDescription('Total number of Nverify calls since last reboot')
dafsOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpens.setStatus('current')
if mibBuilder.loadTexts: dafsOpens.setDescription('Total number of Open calls since last reboot')
dafsOpenDowngrades = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpenDowngrades.setStatus('current')
if mibBuilder.loadTexts: dafsOpenDowngrades.setDescription('Total number of Open Downgrade calls since last reboot')
dafsOpenattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpenattrs.setStatus('current')
if mibBuilder.loadTexts: dafsOpenattrs.setDescription('Total number of Openattr calls since last reboot')
dafsReadInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadInlines.setStatus('current')
if mibBuilder.loadTexts: dafsReadInlines.setDescription('Total number of Read Inline calls since last reboot')
dafsReadDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadDirects.setStatus('current')
if mibBuilder.loadTexts: dafsReadDirects.setDescription('Total number of Read Direct calls since last reboot')
dafsReaddirInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReaddirInlines.setStatus('current')
if mibBuilder.loadTexts: dafsReaddirInlines.setDescription('Total number of Readdir Inline calls since last reboot')
dafsReaddirDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReaddirDirects.setStatus('current')
if mibBuilder.loadTexts: dafsReaddirDirects.setDescription('Total number of Readdir Direct calls since last reboot')
dafsReadlinkInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadlinkInlines.setStatus('current')
if mibBuilder.loadTexts: dafsReadlinkInlines.setDescription('Total number of Readlink Inline calls since last reboot')
dafsReadlinkDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadlinkDirects.setStatus('current')
if mibBuilder.loadTexts: dafsReadlinkDirects.setDescription('Total number of Readlink Direct calls since last reboot')
dafsRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRemoves.setStatus('current')
if mibBuilder.loadTexts: dafsRemoves.setDescription('Total number of Remove calls since last reboot')
dafsRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRenames.setStatus('current')
if mibBuilder.loadTexts: dafsRenames.setDescription('Total number of Rename calls since last reboot')
dafsSetattrInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetattrInlines.setStatus('current')
if mibBuilder.loadTexts: dafsSetattrInlines.setDescription('Total number of Setattr Inline calls since last reboot')
dafsSetattrDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetattrDirects.setStatus('current')
if mibBuilder.loadTexts: dafsSetattrDirects.setDescription('Total number of Setattr Direct calls since last reboot')
dafsVerifys = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsVerifys.setStatus('current')
if mibBuilder.loadTexts: dafsVerifys.setDescription('Total number of Verify calls since last reboot')
dafsBatchSubmits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBatchSubmits.setStatus('current')
if mibBuilder.loadTexts: dafsBatchSubmits.setDescription('Total number of Batch Submit calls since last reboot')
dafsWriteInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsWriteInlines.setStatus('current')
if mibBuilder.loadTexts: dafsWriteInlines.setDescription('Total number of Write Inline calls since last reboot')
dafsWriteDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsWriteDirects.setStatus('current')
if mibBuilder.loadTexts: dafsWriteDirects.setDescription('Total number of Write Direct calls since last reboot')
dafsBcGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcGetattrs.setStatus('current')
if mibBuilder.loadTexts: dafsBcGetattrs.setDescription('Total number of BC Getattr calls since last reboot')
dafsBcNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcNulls.setStatus('current')
if mibBuilder.loadTexts: dafsBcNulls.setDescription('Total number of BC Null calls since last reboot')
dafsBcRecalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcRecalls.setStatus('current')
if mibBuilder.loadTexts: dafsBcRecalls.setDescription('Total number of BC Recall calls since last reboot')
dafsBcBatchCompletions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcBatchCompletions.setStatus('current')
if mibBuilder.loadTexts: dafsBcBatchCompletions.setDescription('Total number of BC Batch Completion calls since\n\t\tlast reboot')
dafsAppendInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAppendInlines.setStatus('current')
if mibBuilder.loadTexts: dafsAppendInlines.setDescription('Total number of Append Inline calls since\n                last reboot')
dafsAppendDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAppendDirects.setStatus('current')
if mibBuilder.loadTexts: dafsAppendDirects.setDescription('Total number of Append Direct calls since\n                last reboot')
dafsGetFencingLists = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetFencingLists.setStatus('current')
if mibBuilder.loadTexts: dafsGetFencingLists.setDescription('Total number of Get Fencing List calls since\n                last reboot')
dafsSetFencingLists = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetFencingLists.setStatus('current')
if mibBuilder.loadTexts: dafsSetFencingLists.setDescription('Total number of Set Fencing List calls since\n                last reboot')
dafsHurryUps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsHurryUps.setStatus('current')
if mibBuilder.loadTexts: dafsHurryUps.setDescription('Total number of Hurry Up calls since\n                last reboot')
dafsInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsInBytes.setStatus('current')
if mibBuilder.loadTexts: dafsInBytes.setDescription('Total number of bytes, including DMA, received since the\n\t\tlast reboot')
dafsDirectInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDirectInBytes.setStatus('current')
if mibBuilder.loadTexts: dafsDirectInBytes.setDescription('Total number of bytes received directly into memory\n\t\tsince last reboot')
dafsOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOutBytes.setStatus('current')
if mibBuilder.loadTexts: dafsOutBytes.setDescription('Total number of bytes, including DMA, sent since the\n\t\tlast reboot')
dafsDirectOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDirectOutBytes.setStatus('current')
if mibBuilder.loadTexts: dafsDirectOutBytes.setDescription('Total number of bytes sent directly into remote memory since\n\t\tthe last reboot')
dafsSessionTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 5), )
if mibBuilder.loadTexts: dafsSessionTable.setStatus('current')
if mibBuilder.loadTexts: dafsSessionTable.setDescription('A table containing current DAFS client session\n                      information.')
dafsSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1), ).setIndexNames((0, "NETAPP-MIB", "dafsSessionIndex"))
if mibBuilder.loadTexts: dafsSessionEntry.setStatus('current')
if mibBuilder.loadTexts: dafsSessionEntry.setDescription('Information about a particular DAFS\n                      session.  An object of this type is transient,\n                      in that it ceases to exist when (or soon after)\n                      the client disconnects.')
dafsSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionIndex.setStatus('current')
if mibBuilder.loadTexts: dafsSessionIndex.setDescription('A unique value for each session.')
dafsSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionId.setStatus('current')
if mibBuilder.loadTexts: dafsSessionId.setDescription('Session Identifier assigned by the server.')
dafsSessionEndian = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bigEndian", 1), ("littleEndian", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionEndian.setStatus('current')
if mibBuilder.loadTexts: dafsSessionEndian.setDescription('Byte order used on this session.')
dafsSessionAllowBackChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionAllowBackChannel.setStatus('current')
if mibBuilder.loadTexts: dafsSessionAllowBackChannel.setDescription('Session may use a back control channel.')
dafsSessionAllowRdmaReadChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionAllowRdmaReadChannel.setStatus('current')
if mibBuilder.loadTexts: dafsSessionAllowRdmaReadChannel.setDescription('Session may use a RDMA read channel.')
dafsSessionUseChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionUseChecksums.setStatus('current')
if mibBuilder.loadTexts: dafsSessionUseChecksums.setDescription('Session uses checksums.')
dafsSessionMaxCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxCredentials.setStatus('current')
if mibBuilder.loadTexts: dafsSessionMaxCredentials.setDescription('Maximum number of credentials that can be registered\n\t\ton this session.')
dafsSessionMaxRequestSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxRequestSize.setStatus('current')
if mibBuilder.loadTexts: dafsSessionMaxRequestSize.setDescription('Maximum size of a DAFS request.')
dafsSessionMaxResponseSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxResponseSize.setStatus('current')
if mibBuilder.loadTexts: dafsSessionMaxResponseSize.setDescription('Maximum size of a DAFS response.')
dafsSessionMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxRequests.setStatus('current')
if mibBuilder.loadTexts: dafsSessionMaxRequests.setDescription('Maximum number of concurrent requests.')
dafsSessionInlineWriteHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionInlineWriteHeaderSize.setStatus('current')
if mibBuilder.loadTexts: dafsSessionInlineWriteHeaderSize.setDescription('Size of DAFS headers plus padding to the start of\n\t\tdata.  Used to better align inline data.')
dafsSessionClientIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionClientIdString.setStatus('current')
if mibBuilder.loadTexts: dafsSessionClientIdString.setDescription('Client ID string supplied by the client.  Intended to\n\t\tuniquely identify that client.')
dafsSessionClientVerifier = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionClientVerifier.setStatus('current')
if mibBuilder.loadTexts: dafsSessionClientVerifier.setDescription('Supplied by the client to uniquely identify an\n\t\tinstance of a client.')
dafsSessionNumCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionNumCredentials.setStatus('current')
if mibBuilder.loadTexts: dafsSessionNumCredentials.setDescription('Current number of credentials registered on this\n\t\tsession')
dafsSessionNumRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionNumRequests.setStatus('current')
if mibBuilder.loadTexts: dafsSessionNumRequests.setDescription('Current number of active requests on this session')
dafsExportTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 6), )
if mibBuilder.loadTexts: dafsExportTable.setStatus('current')
if mibBuilder.loadTexts: dafsExportTable.setDescription('A table containing DAFS Export filesystems.')
dafsExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1), ).setIndexNames((0, "NETAPP-MIB", "dafsExportIndex"))
if mibBuilder.loadTexts: dafsExportEntry.setStatus('current')
if mibBuilder.loadTexts: dafsExportEntry.setDescription('Information about a particular current DAFS\n                      export.  An object of this type is transient,\n                      in that it ceases to exist when (or soon after)\n                      the export is deleted.')
dafsExportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportIndex.setStatus('current')
if mibBuilder.loadTexts: dafsExportIndex.setDescription("A unique value for each export.  Its value\n                      ranges between 1 and the number of exports.  The\n                      value for each export must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization.")
dafsExportName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportName.setStatus('current')
if mibBuilder.loadTexts: dafsExportName.setDescription('A textual string containing information about the\n                      export.  This is the logical export name.')
dafsExportPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportPath.setStatus('current')
if mibBuilder.loadTexts: dafsExportPath.setDescription('A textual string containing information about the\n                      export.  This is the local filesystem path to\n\t\t      the export.')
dafsExportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportEnabled.setStatus('current')
if mibBuilder.loadTexts: dafsExportEnabled.setDescription('This export is available for access.')
dafsExportRwMode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readwrite", 1), ("readmostly", 2), ("readonly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportRwMode.setStatus('current')
if mibBuilder.loadTexts: dafsExportRwMode.setDescription('Global export mode. This represents the maximum\n\t\taccess rights.')
dafsExportAccessList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportAccessList.setStatus('current')
if mibBuilder.loadTexts: dafsExportAccessList.setDescription('A textual string containing information about the\n                      export.  This is the list of hosts that may\n\t\t      access the export. If empty, all hosts may\n\t\t      access the export.')
viaNodeConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 1))
viaNodeSystemName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNodeSystemName.setStatus('current')
if mibBuilder.loadTexts: viaNodeSystemName.setDescription('A string by which the node is identified in the cluster.')
viaCreated = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCreated.setStatus('current')
if mibBuilder.loadTexts: viaCreated.setDescription('The number of VIs created.')
viaConnectRequest = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectRequest.setStatus('current')
if mibBuilder.loadTexts: viaConnectRequest.setDescription('The number of times Connect Request call is made.')
viaConnectWait = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectWait.setStatus('current')
if mibBuilder.loadTexts: viaConnectWait.setDescription('The number of times Connect wait call is made.')
viaDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaDisconnect.setStatus('current')
if mibBuilder.loadTexts: viaDisconnect.setDescription('Number of times VI got disconnected without any error.')
viaConnectTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectTimeOut.setStatus('current')
if mibBuilder.loadTexts: viaConnectTimeOut.setDescription('Number of times VI connect request got timed out.')
viaConnected = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnected.setStatus('current')
if mibBuilder.loadTexts: viaConnected.setDescription('Number of time VI got connected without any error.')
viaCurrConnectPending = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnectPending.setStatus('current')
if mibBuilder.loadTexts: viaCurrConnectPending.setDescription('The number of VIs for which connect request is pending.')
viaCurrConnectWaitPending = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnectWaitPending.setStatus('current')
if mibBuilder.loadTexts: viaCurrConnectWaitPending.setDescription('The number of VIs for which connect wait request is pending.')
viaCurrConnected = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnected.setStatus('current')
if mibBuilder.loadTexts: viaCurrConnected.setDescription('The number of VIs for which the current state is CONNECTED.')
viaCurrError = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrError.setStatus('current')
if mibBuilder.loadTexts: viaCurrError.setDescription('The number of VIs for which the current state is ERROR')
viaTotalError = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaTotalError.setStatus('current')
if mibBuilder.loadTexts: viaTotalError.setDescription('The number of VIs which encountered error state.')
viaInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInMsgs.setStatus('current')
if mibBuilder.loadTexts: viaInMsgs.setDescription('The total number of incoming Messages received.')
viaInRdma = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRdma.setStatus('current')
if mibBuilder.loadTexts: viaInRdma.setDescription('The total number of incoming RDMA requests received.')
viaInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInBytes.setStatus('current')
if mibBuilder.loadTexts: viaInBytes.setDescription('The total number of incoming bytes received, including those \n\t    received in error. This count includes bytes received on \n\t    currently established connections. This corresponds to the sum\n\t    of bytes received through received messages, incoming RDMA writes \n\t    and RDMA reads issued')
viaInRDMAReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRDMAReadBytes.setStatus('current')
if mibBuilder.loadTexts: viaInRDMAReadBytes.setDescription('The total number of incoming bytes received through RDMA read, \n\t    including those received in error. This count includes bytes \n\t    received on currently established connections.')
viaInRDMAWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRDMAWriteBytes.setStatus('current')
if mibBuilder.loadTexts: viaInRDMAWriteBytes.setDescription('The total number of bytes received through incoming RDMA writes, \n\t    including those received in error. This count includes bytes \n\t    received on currently established connections.')
viaOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutMsgs.setStatus('current')
if mibBuilder.loadTexts: viaOutMsgs.setDescription('The total number of Messages sent.')
viaOutRdma = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRdma.setStatus('current')
if mibBuilder.loadTexts: viaOutRdma.setDescription('The total number of RDMA requests sent.')
viaOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutBytes.setStatus('current')
if mibBuilder.loadTexts: viaOutBytes.setDescription('The total number of bytes sent, including those \n\t    sent in error. This count includes bytes sent on \n\t    currently established connections.')
viaOutRDMAReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRDMAReadBytes.setStatus('current')
if mibBuilder.loadTexts: viaOutRDMAReadBytes.setDescription('The total number of bytes sent through an incoming \n\t    RDMA read request, including those sent in error. \n\t    This count includes bytes sent on currently established \n\t    connections.')
viaOutRDMAWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRDMAWriteBytes.setStatus('current')
if mibBuilder.loadTexts: viaOutRDMAWriteBytes.setDescription('The total number of bytes sent through a RDMA write\n\t    operation, including those sent in error. This count \n\t    includes bytes sent on currently established connections.')
viaConnTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23), )
if mibBuilder.loadTexts: viaConnTable.setStatus('current')
if mibBuilder.loadTexts: viaConnTable.setDescription('A table containing via connection specific information.')
viaConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1), ).setIndexNames((0, "NETAPP-MIB", "viaConnVINumber"))
if mibBuilder.loadTexts: viaConnEntry.setStatus('current')
if mibBuilder.loadTexts: viaConnEntry.setDescription('A conceptual row of the viaConnTable containing information\n\t    about a particular current via connection. Each row of this\n\t    table is transient, and it ceases to exist when the \n\t    connection makes transition to the CLOSED state.')
viaConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("pendingConnect", 2), ("connected", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnState.setStatus('current')
if mibBuilder.loadTexts: viaConnState.setDescription('The state of this via connection\n             Legal States:\n                   Idle            1 \n                   Pending Connect 2\n                   Connected       3\n                   Error           4')
viaConnVINumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnVINumber.setStatus('current')
if mibBuilder.loadTexts: viaConnVINumber.setDescription('A number which uniquely defines a     connection.')
viaConnRemoteNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteNetAddress.setStatus('current')
if mibBuilder.loadTexts: viaConnRemoteNetAddress.setDescription('IP address of the remote system of the connection.')
viaConnLocalNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalNetAddress.setStatus('current')
if mibBuilder.loadTexts: viaConnLocalNetAddress.setDescription('Local IP address of the connection.')
viaConnRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemotePortNumber.setStatus('current')
if mibBuilder.loadTexts: viaConnRemotePortNumber.setDescription('Remote TCP port number of the connection.')
viaConnLocalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalPortNumber.setStatus('current')
if mibBuilder.loadTexts: viaConnLocalPortNumber.setDescription('Local TCP port number of the connection.')
viaConnLocalDescriminator = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalDescriminator.setStatus('current')
if mibBuilder.loadTexts: viaConnLocalDescriminator.setDescription('An identifier used by the local process to identify the\n\t    VI connection.')
viaConnRemoteDescriminator = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteDescriminator.setStatus('current')
if mibBuilder.loadTexts: viaConnRemoteDescriminator.setDescription('An identifier used by the remote process to identify the\n\t    VI connection.')
viaConnLocalMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalMaxTransferSize.setStatus('current')
if mibBuilder.loadTexts: viaConnLocalMaxTransferSize.setDescription('The local limit on the maximum packet size that can be \n\t    transferred through the connection.')
viaConnRemoteMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteMaxTransferSize.setStatus('current')
if mibBuilder.loadTexts: viaConnRemoteMaxTransferSize.setDescription('The remote limit on the maximum packet size that can be \n\t    transferred through the connection.')
viaConnLocalEnableRdmaWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalEnableRdmaWrite.setStatus('current')
if mibBuilder.loadTexts: viaConnLocalEnableRdmaWrite.setDescription('The value is 1 if remote DMA write is enabled\n            in the local system otherwise, it is 0.')
viaConnLocalEnableRdmaRead = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalEnableRdmaRead.setStatus('current')
if mibBuilder.loadTexts: viaConnLocalEnableRdmaRead.setDescription('The value is 1 if remote DMA read is enabled\n            in the local system otherwise, it is 0.')
viaConnRemoteEnableRdmaWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaWrite.setStatus('current')
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaWrite.setDescription('The value is 1 if remote DMA write is enabled\n            in the remote system otherwise, it is 0.')
viaConnRemoteEnableRdmaRead = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaRead.setStatus('current')
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaRead.setDescription('The value is 1 if remote DMA read is enabled\n            in the remote system otherwise, it is 0.')
viaConnSentMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentMessages.setStatus('current')
if mibBuilder.loadTexts: viaConnSentMessages.setDescription('Total number of messages sent through the connection.')
viaConnSentRdmaReadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentRdmaReadMessages.setStatus('current')
if mibBuilder.loadTexts: viaConnSentRdmaReadMessages.setDescription('Total number of rdma read messages sent through the \n            connection.')
viaConnSentRdmaWriteMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentRdmaWriteMessages.setStatus('current')
if mibBuilder.loadTexts: viaConnSentRdmaWriteMessages.setDescription('Total number of rdma write messages sent through the \n            connection.')
viaConnRcvdMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdMessages.setStatus('current')
if mibBuilder.loadTexts: viaConnRcvdMessages.setDescription('Total number of messages received through the connection.')
viaConnRcvdRdmaReadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdRdmaReadMessages.setStatus('current')
if mibBuilder.loadTexts: viaConnRcvdRdmaReadMessages.setDescription('Total number of rdma read messages received through the \n            connection.')
viaConnRcvdRdmaWriteMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdRdmaWriteMessages.setStatus('current')
if mibBuilder.loadTexts: viaConnRcvdRdmaWriteMessages.setDescription('Total number of rdma write messages received through the \n            connection.')
viaErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 2))
viaErrPostDesc = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrPostDesc.setStatus('current')
if mibBuilder.loadTexts: viaErrPostDesc.setDescription('The total number of descriptors completed in error\n            by NIC.')
viaErrConnLost = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrConnLost.setStatus('current')
if mibBuilder.loadTexts: viaErrConnLost.setDescription('The total number of Lost Connection errors. ')
viaErrRecvQEmpty = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRecvQEmpty.setStatus('current')
if mibBuilder.loadTexts: viaErrRecvQEmpty.setDescription('The total number of errors due to an empty receive Queue. ')
viaErrRdmawProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRdmawProt.setStatus('current')
if mibBuilder.loadTexts: viaErrRdmawProt.setDescription('The total number of remote DMA write protection errors. ')
viaErrRdmarProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRdmarProt.setStatus('current')
if mibBuilder.loadTexts: viaErrRdmarProt.setDescription('The total number of remote DMA read protection errors. ')
viaErrCompProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrCompProt.setStatus('current')
if mibBuilder.loadTexts: viaErrCompProt.setDescription('The total number of protection errors. ')
viaErrorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrorThreshold.setStatus('current')
if mibBuilder.loadTexts: viaErrorThreshold.setDescription('Setting this threshold will cause a trap to be enabled\n\t    such that if the total error exceeds error threshold set \n\t    a viaNodeErrorsTrap trap will be generated.')
viaNicAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 3))
viaNicTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1), )
if mibBuilder.loadTexts: viaNicTable.setStatus('current')
if mibBuilder.loadTexts: viaNicTable.setDescription('A table containing via NIC-specific information.')
viaNicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "viaNicIndex"))
if mibBuilder.loadTexts: viaNicEntry.setStatus('current')
if mibBuilder.loadTexts: viaNicEntry.setDescription('A conceptual row of the viaNicTable containing information\n            about a particular present VINic.')
viaNicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNicIndex.setStatus('current')
if mibBuilder.loadTexts: viaNicIndex.setDescription('The index of the NIC in the NIC table.')
viaName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaName.setStatus('current')
if mibBuilder.loadTexts: viaName.setDescription('The symbolic name of the NIC device.')
viaHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: viaHardwareVersion.setDescription('The version of the VINIC described by this MIB.')
viaProviderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaProviderVersion.setStatus('current')
if mibBuilder.loadTexts: viaProviderVersion.setDescription('The version of the VI provider.')
viaNicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNicAddress.setStatus('current')
if mibBuilder.loadTexts: viaNicAddress.setDescription('The Network address of this NIC.')
viaThreadSafe = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaThreadSafe.setStatus('current')
if mibBuilder.loadTexts: viaThreadSafe.setDescription('1 if synchronization model is thread safe else 0.')
viaMaxDiscriminatorLength = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxDiscriminatorLength.setStatus('current')
if mibBuilder.loadTexts: viaMaxDiscriminatorLength.setDescription('The maximum number of bytes that the VI provider allows\n\t    for a connection discriminator.')
viaMaxRegisterBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterBytes.setStatus('current')
if mibBuilder.loadTexts: viaMaxRegisterBytes.setDescription('Maximum number of bytes that can be registered.')
viaMaxRegisterRegions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterRegions.setStatus('current')
if mibBuilder.loadTexts: viaMaxRegisterRegions.setDescription('Maximum number of memory regions that can be registered.')
viaMaxRegisterBlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterBlockBytes.setStatus('current')
if mibBuilder.loadTexts: viaMaxRegisterBlockBytes.setDescription('Largest contiguous block of memory that can be registered.')
viaMaxVI = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxVI.setStatus('current')
if mibBuilder.loadTexts: viaMaxVI.setDescription('The limit on the total number of VI instances this entity can\n\t    support.')
viaMaxDescriptorsPerQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxDescriptorsPerQueue.setStatus('current')
if mibBuilder.loadTexts: viaMaxDescriptorsPerQueue.setDescription('Maximum Descriptors per VI Work Queue that this VI provider\n\t    can support.')
viaMaxSegmentsPerDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxSegmentsPerDesc.setStatus('current')
if mibBuilder.loadTexts: viaMaxSegmentsPerDesc.setDescription('Maximum number of segments per descriptor that this VI provider\n\t    can support.')
viaMaxCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxCQ.setStatus('current')
if mibBuilder.loadTexts: viaMaxCQ.setDescription('Maximum number of completion queues this VI provider can support.')
viaMaxCQEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxCQEntries.setStatus('current')
if mibBuilder.loadTexts: viaMaxCQEntries.setDescription('Maximum number of Completion queue entries per completion queue\n\t    that this VI provider can support.')
viaMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxTransferSize.setStatus('current')
if mibBuilder.loadTexts: viaMaxTransferSize.setDescription('The maximum transfer size supported by the VI Nic. The maximum \n\t    transfer size is the amount of data that can be described by a \n\t    single VI descriptor.')
viaNativeMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNativeMTU.setStatus('current')
if mibBuilder.loadTexts: viaNativeMTU.setDescription('The native MTU size of the underlying network. For frame-based \n\t    networks, this could reflect its native frame size. For cell-based \n\t    networks, it could reflect the MTU of the appropriate abstraction \n\t    layer that it supports.')
viaMaxPTags = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxPTags.setStatus('current')
if mibBuilder.loadTexts: viaMaxPTags.setDescription('The maximum number of protection tags that are supported by this\n\t    VI provider.')
viaCurrRegisterBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrRegisterBytes.setStatus('current')
if mibBuilder.loadTexts: viaCurrRegisterBytes.setDescription('Number of bytes registered by the VI user for this\n\t    NIC.')
viaCurrRegisterRegions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrRegisterRegions.setStatus('current')
if mibBuilder.loadTexts: viaCurrRegisterRegions.setDescription('Number of memory regions that is registered by VI user\n\t    for this NIC.')
viaCurrVI = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrVI.setStatus('current')
if mibBuilder.loadTexts: viaCurrVI.setDescription('The current number of VI instances for this NIC.')
viaCurrCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrCQ.setStatus('current')
if mibBuilder.loadTexts: viaCurrCQ.setDescription('Current number of completion queues this VI provider\n\t   has.')
viaCurrPTags = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrPTags.setStatus('current')
if mibBuilder.loadTexts: viaCurrPTags.setDescription('Current Number of protection tags this VI provider has.')
viaConnectionListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectionListenPort.setStatus('current')
if mibBuilder.loadTexts: viaConnectionListenPort.setDescription('Port number on which VI server is listening for VI connection\n\t    request.')
vfilerIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfilerIsLicensed.setStatus('current')
if mibBuilder.loadTexts: vfilerIsLicensed.setDescription('Whether vfiler  is licensed on the\n\t\t\tfiler.')
vfFilers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 16, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFilers.setStatus('current')
if mibBuilder.loadTexts: vfFilers.setDescription('Number of vfilers in the physical Filer.')
vfTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 3), )
if mibBuilder.loadTexts: vfTable.setStatus('current')
if mibBuilder.loadTexts: vfTable.setDescription('Provide a report of per-vfiler general information ')
vfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "vfIndex"))
if mibBuilder.loadTexts: vfEntry.setStatus('current')
if mibBuilder.loadTexts: vfEntry.setDescription('Provide a report of per-vfiler information')
vfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIndex.setStatus('current')
if mibBuilder.loadTexts: vfIndex.setDescription('A number that identifies this entry for the referenced vfiler.')
vfName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfName.setStatus('current')
if mibBuilder.loadTexts: vfName.setDescription(' A textual string that contains the name of the referenced vfiler.')
vfUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfUuid.setStatus('current')
if mibBuilder.loadTexts: vfUuid.setDescription('The UUID of the referenced vfiler.')
vfIpAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpAddresses.setStatus('current')
if mibBuilder.loadTexts: vfIpAddresses.setDescription('The total number of IP addresses for the referenced vfiler.')
vfStoragePaths = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfStoragePaths.setStatus('current')
if mibBuilder.loadTexts: vfStoragePaths.setDescription('The total number of storage paths for the referenced vfiler.')
vfIpSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpSpace.setStatus('current')
if mibBuilder.loadTexts: vfIpSpace.setDescription(' A textual string that contains the name of the ipspace that the referenced vfiler belongs to.')
vfAllowedProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfAllowedProtocols.setStatus('current')
if mibBuilder.loadTexts: vfAllowedProtocols.setDescription('Total number of protocols allowed for the referenced vfiler.')
vfDisallowedProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfDisallowedProtocols.setStatus('current')
if mibBuilder.loadTexts: vfDisallowedProtocols.setDescription('Total number of protocols disallowed for the referenced vfiler.')
vfState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopped", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfState.setStatus('current')
if mibBuilder.loadTexts: vfState.setDescription('Status of the vfiler: Running or stopped.')
vfIpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 4), )
if mibBuilder.loadTexts: vfIpTable.setStatus('current')
if mibBuilder.loadTexts: vfIpTable.setDescription('Provide a report of per-vfiler IP addresses information ')
vfIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1), ).setIndexNames((0, "NETAPP-MIB", "vfFiIndex"), (0, "NETAPP-MIB", "vfIpIndex"))
if mibBuilder.loadTexts: vfIpEntry.setStatus('current')
if mibBuilder.loadTexts: vfIpEntry.setDescription('Provide a report of per-vfiler IP addresses information')
vfFiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFiIndex.setStatus('current')
if mibBuilder.loadTexts: vfFiIndex.setDescription('A number that identifies the referenced vfiler.')
vfIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpIndex.setStatus('current')
if mibBuilder.loadTexts: vfIpIndex.setDescription('A number that identifies which IP address in the referenced vfiler.')
vfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpAddr.setStatus('current')
if mibBuilder.loadTexts: vfIpAddr.setDescription('A IP address for the referenced vfiler.')
vfSpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 5), )
if mibBuilder.loadTexts: vfSpTable.setStatus('current')
if mibBuilder.loadTexts: vfSpTable.setDescription('Provide a report of per-vfiler storage path information ')
vfSpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1), ).setIndexNames((0, "NETAPP-MIB", "vfFsIndex"), (0, "NETAPP-MIB", "vfSpIndex"))
if mibBuilder.loadTexts: vfSpEntry.setStatus('current')
if mibBuilder.loadTexts: vfSpEntry.setDescription('Provide a report of per-vfiler storage path information')
vfFsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFsIndex.setStatus('current')
if mibBuilder.loadTexts: vfFsIndex.setDescription('A number that identifies the referenced vfiler.')
vfSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfSpIndex.setStatus('current')
if mibBuilder.loadTexts: vfSpIndex.setDescription('A number that identifies which storage path in the referenced vfiler.')
vfSpName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfSpName.setStatus('current')
if mibBuilder.loadTexts: vfSpName.setDescription('The storage path name  for the referenced vfiler.')
vfProTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 6), )
if mibBuilder.loadTexts: vfProTable.setStatus('current')
if mibBuilder.loadTexts: vfProTable.setDescription('Provide a report of per-vfiler protocol information ')
vfProEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1), ).setIndexNames((0, "NETAPP-MIB", "vfFpIndex"), (0, "NETAPP-MIB", "vfProIndex"))
if mibBuilder.loadTexts: vfProEntry.setStatus('current')
if mibBuilder.loadTexts: vfProEntry.setDescription('Provide a report of per-vfiler protocol information')
vfFpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFpIndex.setStatus('current')
if mibBuilder.loadTexts: vfFpIndex.setDescription('A number that identifies the referenced vfiler.')
vfProIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProIndex.setStatus('current')
if mibBuilder.loadTexts: vfProIndex.setDescription('A number that identifies a protocol in the referenced vfiler.')
vfProName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProName.setStatus('current')
if mibBuilder.loadTexts: vfProName.setDescription('A textual string that contains the protocol name  for the referenced vfiler.')
vfProStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProStatus.setStatus('current')
if mibBuilder.loadTexts: vfProStatus.setDescription('Whether the referenced vfiler protocol  is allowed or disallowed.')
fcpIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpIsLicensed.setStatus('current')
if mibBuilder.loadTexts: fcpIsLicensed.setDescription('Whether FCP access protocols are licensed on the\n\t\t\tfiler.')
iscsiIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIsLicensed.setStatus('current')
if mibBuilder.loadTexts: iscsiIsLicensed.setDescription('Whether iSCSI access protocols are licensed on the\n\t\t\tfiler.')
fcpLowReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowReadBytes.setStatus('deprecated')
if mibBuilder.loadTexts: fcpLowReadBytes.setDescription('The total number of bytes read via FCP  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tleast significant 32 bits of the 64 bit unsigned \n\t\t\tinteger. This object is deprecated - Use \n\t\t\tfcp64ReadBytes  instead.')
fcpHighReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighReadBytes.setStatus('deprecated')
if mibBuilder.loadTexts: fcpHighReadBytes.setDescription('The total number of bytes read via FCP  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tmost significant 32 bits of the 64 bit unsigned \n\t\t\tinteger. This object is deprecated - Use \n\t\t\tfcp64ReadBytes  instead.')
fcpLowWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowWriteBytes.setStatus('deprecated')
if mibBuilder.loadTexts: fcpLowWriteBytes.setDescription('The total number of bytes written via FCP  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tleast significant 32 bits of the 64 bit unsigned \n\t\t\tinteger. This object is deprecated - Use \n\t\t\tfcp64WriteBytes  instead.')
fcpHighWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighWriteBytes.setStatus('deprecated')
if mibBuilder.loadTexts: fcpHighWriteBytes.setDescription('The total number of bytes written via FCP  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tmost significant 32 bits of the 64 bit unsigned \n\t\t\tinteger. This object is deprecated - Use \n\t\t\tfcp64WriteBytes  instead.')
iscsiLowReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowReadBytes.setStatus('deprecated')
if mibBuilder.loadTexts: iscsiLowReadBytes.setDescription('The total number of bytes read via iSCSI  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tleast significant 32 bits of the 64 bit unsigned \n\t\t\tinteger. This object is deprecated - Use \n\t\t\tiscsi64ReadBytes  instead.')
iscsiHighReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighReadBytes.setStatus('deprecated')
if mibBuilder.loadTexts: iscsiHighReadBytes.setDescription('The total number of bytes read via iSCSI  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tmost significant 32 bits of the 64 bit unsigned \n\t\t\tinteger. This object is deprecated - Use \n\t\t\tiscsi64ReadBytes  instead.')
iscsiLowWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowWriteBytes.setStatus('deprecated')
if mibBuilder.loadTexts: iscsiLowWriteBytes.setDescription('The total number of bytes written via iSCSI  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tleast significant 32 bits of the 64 bit unsigned \n\t\t\tinteger. This object is deprecated - Use \n\t\t\tiscsi64WriteBytes  instead.')
iscsiHighWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighWriteBytes.setStatus('deprecated')
if mibBuilder.loadTexts: iscsiHighWriteBytes.setDescription('The total number of bytes written via iSCSI  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tmost significant 32 bits of the 64 bit unsigned \n\t\t\tinteger. This object is deprecated - Use \n\t\t\tiscsi64WriteBytes  instead.')
iscsiHighOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighOps.setStatus('deprecated')
if mibBuilder.loadTexts: iscsiHighOps.setDescription('The total number of iSCSI ops handled since the\n\t\t\tlast boot.  This object returns the most significant\n\t\t\t32 bits of the 64 bit unsigned integer. \n\t\t\tThis object is deprecated - Use iscsi64Ops instead.')
iscsiLowOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowOps.setStatus('deprecated')
if mibBuilder.loadTexts: iscsiLowOps.setDescription('The total number of iSCSI ops handled since the\n\t\t\tlast boot.  This object returns the least significant\n\t\t\t32 bits of the 64 bit unsigned integer. \n\t\t\tThis object is deprecated - Use iscsi64Ops instead.')
fcpHighOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighOps.setStatus('deprecated')
if mibBuilder.loadTexts: fcpHighOps.setDescription('The total number of FCP ops handled since the\n\t\t\tlast boot.  This object returns the most significant\n\t\t\t32 bits of the 64 bit unsigned integer. \n\t\t\tThis object is deprecated - Use fcp64Ops instead.')
fcpLowOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowOps.setStatus('deprecated')
if mibBuilder.loadTexts: fcpLowOps.setDescription('The total number of FCP ops handled since the\n\t\t\tlast boot.  This object returns the least significant\n\t\t\t32 bits of the 64 bit unsigned integer. \n\t\t\tThis object is deprecated - Use fcp64Ops instead.')
lun = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 15))
lunCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunCount.setStatus('current')
if mibBuilder.loadTexts: lunCount.setDescription('Number of LUNs in the Filer in 7-mode. Unsupported in C-mode.')
lunTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2), )
if mibBuilder.loadTexts: lunTable.setStatus('current')
if mibBuilder.loadTexts: lunTable.setDescription('Provide a report of per-LUN general information ')
lunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "lunIndex"))
if mibBuilder.loadTexts: lunEntry.setStatus('current')
if mibBuilder.loadTexts: lunEntry.setDescription('Provide a report of per-LUN information')
lunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunIndex.setStatus('current')
if mibBuilder.loadTexts: lunIndex.setDescription('A number that identifies the referenced LUN.')
lunName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunName.setStatus('current')
if mibBuilder.loadTexts: lunName.setDescription('The name of the LUN.  This is also the path to the LUN\n\t\t      on the filer.')
lunComment = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunComment.setStatus('current')
if mibBuilder.loadTexts: lunComment.setDescription('The comment, if any, for this LUN.')
lunSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSizeLow.setStatus('deprecated')
if mibBuilder.loadTexts: lunSizeLow.setDescription('Size of the LUN in bytes.  This object returns the \n\t\t     least significant 32 bits of the 64 bit unsigned integer. \n\t\t     This object is deprecated - Use lunSize64 instead.')
lunSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSizeHigh.setStatus('deprecated')
if mibBuilder.loadTexts: lunSizeHigh.setDescription('Size of the LUN in bytes.  This object returns the \n\t\t     most significant 32 bits of the 64 bit unsigned integer. \n\t\t     This object is deprecated - Use lunSize64 instead.')
lunMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapped.setStatus('current')
if mibBuilder.loadTexts: lunMapped.setDescription('This LUN has been mapped to at least one initiator group.')
lunSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSerialNumber.setStatus('current')
if mibBuilder.loadTexts: lunSerialNumber.setDescription('The 12 character SCSI serial number of the LUN.')
lunQtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunQtreeName.setStatus('current')
if mibBuilder.loadTexts: lunQtreeName.setDescription('A string that indicates which qtree this LUN belongs to.')
lunHighOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighOps.setStatus('deprecated')
if mibBuilder.loadTexts: lunHighOps.setDescription('The total number of Target side SCSI ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\treturns the most significant 32 bits of the 64 bit \n\t\t\tunsigned integer. This object is deprecated - Use \n\t\t\tlun64Ops instead.')
lunLowOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowOps.setStatus('deprecated')
if mibBuilder.loadTexts: lunLowOps.setDescription('The total number of Target side SCSI ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\treturns the least significant 32 bits of the 64 bit \n\t\t\tunsigned integer. This object is deprecated - Use \n\t\t\tlun64Ops instead.')
lunHighReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighReadBytes.setStatus('deprecated')
if mibBuilder.loadTexts: lunHighReadBytes.setDescription('The total number of bytes read from this LUN \n\t\t\tsince the stats were last reset.  This object returns \n\t\t\tthe most significant 32 bits of the 64 bit unsigned \n\t\t\tinteger. This object is deprecated - Use \n\t\t\tlun64ReadBytes instead.')
lunLowReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowReadBytes.setStatus('deprecated')
if mibBuilder.loadTexts: lunLowReadBytes.setDescription('The total number of bytes read from this LUN \n\t\t\tsince the stats were last reset.  This object returns \n\t\t\tthe least significant 32 bits of the 64 bit unsigned \n\t\t\tinteger. This object is deprecated - Use \n\t\t\tlun64ReadBytes instead.')
lunHighWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighWriteBytes.setStatus('deprecated')
if mibBuilder.loadTexts: lunHighWriteBytes.setDescription('The total number of bytes written to this LUN \n\t\t\tsince the stats were last reset.  This object returns \n\t\t\tthe most significant 32 bits of the 64 bit unsigned \n\t\t\tinteger. This object is deprecated - Use \n\t\t\tlun64WriteBytes instead.')
lunLowWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowWriteBytes.setStatus('deprecated')
if mibBuilder.loadTexts: lunLowWriteBytes.setDescription('The total number of bytes written to this LUN \n\t\t\tsince the stats were last reset.  This object returns \n\t\t\tthe least significant 32 bits of the 64 bit unsigned \n\t\t\tinteger. This object is deprecated - Use \n\t\t\tlun64WriteBytes instead.')
lunHighErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighErrors.setStatus('deprecated')
if mibBuilder.loadTexts: lunHighErrors.setDescription('The total number of errors seen on this LUN \n\t\t\tsince the stats were last reset.  This object \n\t\t\treturns the most significant 32 bits of the 64 bit \n\t\t\tunsigned integer. This object is deprecated - Use \n\t\t\tlun64Errors instead.')
lunLowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowErrors.setStatus('deprecated')
if mibBuilder.loadTexts: lunLowErrors.setDescription('The total number of errors seen on this LUN \n\t\t\tsince the stats were last reset.  This object \n\t\t\treturns the least significant 32 bits of the 64 bit \n\t\t\tunsigned integer. This object is deprecated - Use \n\t\t\tlun64Errors instead.')
lunOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunOnline.setStatus('current')
if mibBuilder.loadTexts: lunOnline.setDescription('Whether the LUN is online.')
lunSnapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSnapStatus.setStatus('current')
if mibBuilder.loadTexts: lunSnapStatus.setDescription('Whether a snapshot of this LUN can be taken.\n\t\t\t Not supported in c-mode.')
lunShareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("read", 2), ("write", 3), ("all", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunShareStatus.setStatus('current')
if mibBuilder.loadTexts: lunShareStatus.setDescription('The sharing status for the LUN. \n\t\t\t Not supported in c-mode.')
lunSpaceReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSpaceReserved.setStatus('current')
if mibBuilder.loadTexts: lunSpaceReserved.setDescription('Whether the LUN has space reservation enabled.')
lunStatsResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunStatsResetTime.setStatus('current')
if mibBuilder.loadTexts: lunStatsResetTime.setDescription("Number of seconds since this LUN's stats were\n\t\t\tlast reset.")
lunHighReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighReadOps.setStatus('deprecated')
if mibBuilder.loadTexts: lunHighReadOps.setDescription('The total number of Target side SCSI read ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\treturns the least significant 32 bits of the 64 bit \n\t\t\tunsigned integer. This object is deprecated - Use \n\t\t\tlun64ReadOps instead.')
lunLowReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowReadOps.setStatus('deprecated')
if mibBuilder.loadTexts: lunLowReadOps.setDescription('The total number of Target side SCSI read ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\treturns the most significant 32 bits of the 64 bit \n\t\t\tunsigned integer. This object is deprecated - Use \n\t\t\tlun64ReadOps instead.')
lunHighWriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighWriteOps.setStatus('deprecated')
if mibBuilder.loadTexts: lunHighWriteOps.setDescription('The total number of Target side SCSI write ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\treturns the least significant 32 bits of the 64 bit \n\t\t\tunsigned integer. This object is deprecated - Use \n\t\t\tlun64WriteOps instead.')
lunLowWriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowWriteOps.setStatus('deprecated')
if mibBuilder.loadTexts: lunLowWriteOps.setDescription('The total number of Target side SCSI write ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\treturns the most significant 32 bits of the 64 bit \n\t\t\tunsigned integer. This object is deprecated - Use \n\t\t\tlun64WriteOps instead.')
lunHighOtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighOtherOps.setStatus('deprecated')
if mibBuilder.loadTexts: lunHighOtherOps.setDescription('The total number of Target side SCSI ops that are not \n\t\t\tread or write for this LUN since the stats were last \n\t\t\treset.  This object returns the least significant 32 \n\t\t\tbits of the 64 bit unsigned integer. This object is \n\t\t\tdeprecated - Use lun64OtherOps instead.')
lunLowOtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowOtherOps.setStatus('deprecated')
if mibBuilder.loadTexts: lunLowOtherOps.setDescription('The total number of Target side SCSI ops that are not \n\t\t\tread or write for this LUN since the stats were last \n\t\t\treset. This object returns the most significant 32 \n\t\t\tbits of the 64 bit unsigned integer. This object is \n\t\t\tdeprecated - Use lun64OtherOps instead.')
lunSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSize64.setStatus('current')
if mibBuilder.loadTexts: lunSize64.setDescription('Size of the LUN in bytes.  This object returns all\n\t\t     of the 64 bit unsigned integer.')
lun64Ops = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64Ops.setStatus('current')
if mibBuilder.loadTexts: lun64Ops.setDescription('The total number of Target side SCSI ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\tall of the 64 bit unsigned integer.')
lun64ReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64ReadBytes.setStatus('current')
if mibBuilder.loadTexts: lun64ReadBytes.setDescription('The total number of bytes read from this LUN \n\t\t\tsince the stats were last reset.  This object returns \n\t\t\tall of the 64 bit unsigned integer.')
lun64WriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64WriteBytes.setStatus('current')
if mibBuilder.loadTexts: lun64WriteBytes.setDescription('The total number of bytes written to this LUN \n\t\t\tsince the stats were last reset.  This object returns \n\t\t\tall of the 64 bit unsigned integer.')
lun64Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64Errors.setStatus('current')
if mibBuilder.loadTexts: lun64Errors.setDescription('The total number of errors seen on this LUN \n\t\t\tsince the stats were last reset.  This object \n\t\t\treturns all the 64 bit unsigned integer.')
lun64ReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64ReadOps.setStatus('current')
if mibBuilder.loadTexts: lun64ReadOps.setDescription('The total number of Target side SCSI read ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\treturns all of the 64 bit unsigned integer.')
lun64WriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64WriteOps.setStatus('current')
if mibBuilder.loadTexts: lun64WriteOps.setDescription('The total number of Target side SCSI write ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\treturns all of the 64 bit unsigned integer.')
lun64OtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64OtherOps.setStatus('current')
if mibBuilder.loadTexts: lun64OtherOps.setDescription('The total number of Target side SCSI ops that are not \n\t\t\tread or write for this LUN since the stats were last \n\t\t\treset.  This object returns all of the 64 bit \n\t\t\tunsigned integer.')
lunAlignment = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunAlignment.setStatus('current')
if mibBuilder.loadTexts: lunAlignment.setDescription("The alignment of the LUN. Possible values are:\n\t\t\t  'aligned': \t\t LUN is aligned.\n\t\t\t  'misaligned':\t\t LUN is misaligned.\n\t\t\t  'possibly_misaligned': LUN is possibly misaligned.\n\t\t\t  'indeterminate':       Not enough information is\n\t\t\t\t\t\t available to determine LUN\n\t\t\t\t\t\t alignment.")
lunVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunVserver.setStatus('current')
if mibBuilder.loadTexts: lunVserver.setDescription('Name of the vserver to which the LUN belongs.\n\t\t\tThis field is returned only from the c-mode cluster\n\t\t\tand vserver management interfaces.')
lunMapTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3), )
if mibBuilder.loadTexts: lunMapTable.setStatus('current')
if mibBuilder.loadTexts: lunMapTable.setDescription('Provide a table listing the initiator group to \n\t\t\tLogical Unit Number mapping for each LUN.')
lunMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "lunMapLUNIndex"), (0, "NETAPP-MIB", "lunMapInitiatorGroupIndex"))
if mibBuilder.loadTexts: lunMapEntry.setStatus('current')
if mibBuilder.loadTexts: lunMapEntry.setDescription('Provide a per LUN and Initiator group mapping of \n\t\t\tSCSI logical unit numbers.')
lunMapLUNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLUNIndex.setStatus('current')
if mibBuilder.loadTexts: lunMapLUNIndex.setDescription('A number that identifies the LUN in the table.')
lunMapInitiatorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapInitiatorGroupIndex.setStatus('current')
if mibBuilder.loadTexts: lunMapInitiatorGroupIndex.setDescription('A number that identifies an initiator group in \n\t\t     the table.')
lunMapLUNName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLUNName.setStatus('current')
if mibBuilder.loadTexts: lunMapLUNName.setDescription('The name of the LUN.')
lunMapInitiatorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapInitiatorGroupName.setStatus('current')
if mibBuilder.loadTexts: lunMapInitiatorGroupName.setDescription('The name of the initiator group that this LUN is \n\t\t    mapped to.')
lunMapLogicalUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLogicalUnitNumber.setStatus('current')
if mibBuilder.loadTexts: lunMapLogicalUnitNumber.setDescription('SCSI Logical Unit Number that this LUN is mapped to \n\t\t     for this initiator group.')
lunMapVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapVserver.setStatus('current')
if mibBuilder.loadTexts: lunMapVserver.setDescription('Name of the vserver containing the LUN and initiator group.\n\t\t      This field is returned only from the c-mode management and \n\t\t      cluster interfaces.')
initiator = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 16))
initiatorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1), )
if mibBuilder.loadTexts: initiatorGroupTable.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupTable.setDescription('Provide a report of per-initiator group general \n\t\t\tinformation ')
initiatorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "initiatorGroupIndex"))
if mibBuilder.loadTexts: initiatorGroupEntry.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupEntry.setDescription('Provide a report of per-initiator group information')
initiatorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupIndex.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupIndex.setDescription('A number that identifies a specific initiator group.')
initiatorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupName.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupName.setDescription('The name of the initiator group')
initiatorGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupType.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupType.setDescription('Type of this initiator group, either iSCSI or FCP')
initiatorGroupOS = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 256))).clone(namedValues=NamedValues(("default", 1), ("solaris", 2), ("windows", 3), ("hpux", 4), ("aix", 5), ("linux", 6), ("defaultPartner", 7), ("netware", 8), ("vmware", 9), ("openvms", 10), ("xen", 11), ("hyperv", 12), ("invalid", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupOS.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupOS.setDescription('Operating system the clients in this initiator\n\t\t    group run.  This governs  the finer details of \n\t\t    SCSI protocol interaction with these initiators')
initiatorGroupThrottleReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupThrottleReserve.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupThrottleReserve.setDescription('Percentage of filer scsi command blocks reserved for\n\t\t    this initiator group')
initiatorGroupThrottleBorrow = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupThrottleBorrow.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupThrottleBorrow.setDescription('True if this initiator group is allowed to\n\t\t    exceed its throttle settings if more resources\n\t\t    are needed and otherwise available.  If\n\t\t    initiatorGroupThrottleReserve is 0, this value\n\t\t    is meaningless')
initiatorGroupUsePartner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupUsePartner.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupUsePartner.setDescription('The takeover mode for the initiator group.  This is\n\t\t    only applicable to FCP initiator groups on clustered\n\t\t    filers')
initiatorGroupUseALUA = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupUseALUA.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupUseALUA.setDescription('If true this initiator group supports Asymmetric Logical\n\t\t    Unit Access.')
initiatorGroupVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupVserver.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupVserver.setDescription('Name of the vserver containing the initiator group.\n       This field is available only from the c-mode cluster\n       and vserver management interfaces.')
initiatorGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2), )
if mibBuilder.loadTexts: initiatorGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupMemberTable.setDescription('Table of individual Initiator names in each Initiator \n\t\t\tgroup')
initiatorGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "initiatorGroupMemberIndex"), (0, "NETAPP-MIB", "initiatorGroupMemberNameIndex"))
if mibBuilder.loadTexts: initiatorGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupMemberEntry.setDescription('Provide a report of per-initiator group information')
initiatorGroupMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupMemberIndex.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupMemberIndex.setDescription('A number that identifies a specific initiator group.')
initiatorGroupMemberNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupMemberNameIndex.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupMemberNameIndex.setDescription('A number the identifies the initiator in the group.')
initiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorName.setStatus('current')
if mibBuilder.loadTexts: initiatorName.setDescription('A textual name for this initiator.')
initiatorListTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3), )
if mibBuilder.loadTexts: initiatorListTable.setStatus('current')
if mibBuilder.loadTexts: initiatorListTable.setDescription('Table of initiators that are connected to the filer.')
initiatorListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "initiatorListEntryIndex"))
if mibBuilder.loadTexts: initiatorListEntry.setStatus('current')
if mibBuilder.loadTexts: initiatorListEntry.setDescription('Provide a report of per-connected-initiator information.')
initiatorListEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorListEntryIndex.setStatus('current')
if mibBuilder.loadTexts: initiatorListEntryIndex.setDescription('A number that identifies the initiator connected to\n\t\t     the target adapter.')
targetAdapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetAdapterName.setStatus('current')
if mibBuilder.loadTexts: targetAdapterName.setDescription('The name of the target adapter in the filer.\n                     In c-mode, this field returns the target LIF name.')
connectedInitiatorNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorNodeName.setStatus('current')
if mibBuilder.loadTexts: connectedInitiatorNodeName.setDescription('A textual name for this initiator node.')
connectedInitiatorPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorPortName.setStatus('current')
if mibBuilder.loadTexts: connectedInitiatorPortName.setDescription("The FibreChannel device's portname. This is FCP only.")
connectedInitiatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorType.setStatus('current')
if mibBuilder.loadTexts: connectedInitiatorType.setDescription('Type of this init group, either iSCSI or FCP')
connectedInitiatorIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorIsid.setStatus('current')
if mibBuilder.loadTexts: connectedInitiatorIsid.setDescription('The iSCSI isid (initiator session id) for this initiator.\n\t\t    This is iSCSI only.')
connectedInitiatorPortalGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorPortalGroup.setStatus('current')
if mibBuilder.loadTexts: connectedInitiatorPortalGroup.setDescription('The iSCSI portal group ID for this initiator. \n\t\t    This is iSCSI only.')
connectedInitiatorVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorVserver.setStatus('current')
if mibBuilder.loadTexts: connectedInitiatorVserver.setDescription('Name of the vserver hosting the LIF on which the\n                    initiator connection is made.\n                    This field is returned only from the c-mode cluster\n                    and vserver management interfaces.')
fcpTarget = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 17))
fcpTargetTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1), )
if mibBuilder.loadTexts: fcpTargetTable.setStatus('current')
if mibBuilder.loadTexts: fcpTargetTable.setDescription('Provide a report of fcp target adapter general \n\t\t\tinformation. This table is not available from the c-mode \n\t\t\tmanagement interfaces')
fcpTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "fcpTargetTableIndex"))
if mibBuilder.loadTexts: fcpTargetEntry.setStatus('current')
if mibBuilder.loadTexts: fcpTargetEntry.setDescription('Provide a report of per fcp target device information')
fcpTargetTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetTableIndex.setStatus('current')
if mibBuilder.loadTexts: fcpTargetTableIndex.setDescription('A number that identifies a specific fcp target device.')
fcpTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetName.setStatus('current')
if mibBuilder.loadTexts: fcpTargetName.setDescription('The name of the fcp target device')
fcpTargetNN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetNN.setStatus('current')
if mibBuilder.loadTexts: fcpTargetNN.setDescription('The FC WWNN of the fcp target device')
fcpTargetPN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPN.setStatus('current')
if mibBuilder.loadTexts: fcpTargetPN.setDescription('The FC WWPN of the fcp target device')
fcpTargetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetSpeed.setStatus('current')
if mibBuilder.loadTexts: fcpTargetSpeed.setDescription('speed in gigabits per second. 0 is unknown.')
fcpTargetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("startup", 1), ("uninitialized", 2), ("initializingFW", 3), ("linkNotConnected", 4), ("waitingForLinkUp", 5), ("online", 6), ("linkDisconnected", 7), ("resetting", 8), ("offline", 9), ("offlinedByUserSystem", 10), ("unknown", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetStatus.setStatus('current')
if mibBuilder.loadTexts: fcpTargetStatus.setDescription('Status of the fcp target adapter')
fcpTargetStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetStandby.setStatus('current')
if mibBuilder.loadTexts: fcpTargetStandby.setDescription('Whether this target adapter is in standby mode.')
fcpTargetTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("fabric", 2), ("pointToPoint", 3), ("loop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetTopology.setStatus('current')
if mibBuilder.loadTexts: fcpTargetTopology.setDescription('fibre channel topology for this adapter. ')
fcpTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("physical", 1), ("local", 2), ("standby", 3), ("partner", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetType.setStatus('current')
if mibBuilder.loadTexts: fcpTargetType.setDescription('Responsibility/Type for this adapter.')
fcpCfMode = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 256))).clone(namedValues=NamedValues(("mixed", 1), ("standby", 2), ("partner", 3), ("partnerProxy", 4), ("partnerStandby", 5), ("localPrimary", 6), ("dualFabric", 7), ("ssi", 8), ("unknown", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpCfMode.setStatus('current')
if mibBuilder.loadTexts: fcpCfMode.setDescription('Failover setting for the FCP target cluster.\n\t\t\tThis field is not available from the c-mode management interfaces')
pset = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 19))
psetTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1), )
if mibBuilder.loadTexts: psetTable.setStatus('current')
if mibBuilder.loadTexts: psetTable.setDescription('Provide a report of portset general \n\t\t\tinformation ')
psetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "psetIndex"))
if mibBuilder.loadTexts: psetEntry.setStatus('current')
if mibBuilder.loadTexts: psetEntry.setDescription('Provide a report of portset information')
psetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetIndex.setStatus('current')
if mibBuilder.loadTexts: psetIndex.setDescription('A number that identifies a specific port set.')
psetName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetName.setStatus('current')
if mibBuilder.loadTexts: psetName.setDescription('The name of the port set')
psetType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetType.setStatus('current')
if mibBuilder.loadTexts: psetType.setDescription('Type of this port set, either iSCSI, fcp or mixed. ')
psetVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetVserver.setStatus('current')
if mibBuilder.loadTexts: psetVserver.setDescription('Name of the vserver to which the port set belongs.\n                     This field is returned only from the c-mode cluster\n                     and vserver management interfaces.')
psetMemberTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2), )
if mibBuilder.loadTexts: psetMemberTable.setStatus('current')
if mibBuilder.loadTexts: psetMemberTable.setDescription('Table of individual Port names in each Port\n\t\t\tset')
psetMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "psetMemberIndex"), (0, "NETAPP-MIB", "psetMemberNameIndex"))
if mibBuilder.loadTexts: psetMemberEntry.setStatus('current')
if mibBuilder.loadTexts: psetMemberEntry.setDescription('Provide a report of portset port information')
psetMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetMemberIndex.setStatus('current')
if mibBuilder.loadTexts: psetMemberIndex.setDescription('A number that identifies a specific port set.')
psetMemberNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetMemberNameIndex.setStatus('current')
if mibBuilder.loadTexts: psetMemberNameIndex.setDescription('A number the identifies the port in the set.')
psetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetPortName.setStatus('current')
if mibBuilder.loadTexts: psetPortName.setDescription('A textual name for this port.')
psetPortVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetPortVserver.setStatus('current')
if mibBuilder.loadTexts: psetPortVserver.setDescription('Name of the vserver to which the port set and LIFs in the\n\t\t     port set belong. This field is available from c-mode management\n\t\t     interfaces only.')
fcp64ReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcp64ReadBytes.setStatus('current')
if mibBuilder.loadTexts: fcp64ReadBytes.setDescription('The total number of bytes read via FCP  \n\t\t\tsince the last boot.  This object returns all\n\t\t\tof the 64 bit unsigned integer.\n\t\t\tThis field is not available from the c-mode management interfaces')
fcp64WriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcp64WriteBytes.setStatus('current')
if mibBuilder.loadTexts: fcp64WriteBytes.setDescription('The total number of bytes written via FCP  \n\t\t\tsince the last boot.  This object returns all\n\t\t\tof the 64 bit unsigned integer.\n\t\t\tThis field is not available from the c-mode management interfaces')
iscsi64ReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsi64ReadBytes.setStatus('current')
if mibBuilder.loadTexts: iscsi64ReadBytes.setDescription('The total number of bytes read via iSCSI  \n\t\t\tsince the last boot.  This object returns all\n\t\t\tof the 64 bit unsigned integer.\n\t\t\tThis field is not available from the c-mode management interfaces')
iscsi64WriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsi64WriteBytes.setStatus('current')
if mibBuilder.loadTexts: iscsi64WriteBytes.setDescription('The total number of bytes written via iSCSI  \n\t\t\tsince the last boot.  This object returns all\n\t\t\tof the 64 bit unsigned integer.\n\t\t\tThis field is not available from the c-mode management interfaces')
iscsi64Ops = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsi64Ops.setStatus('current')
if mibBuilder.loadTexts: iscsi64Ops.setDescription('The total number of iSCSI ops handled since the\n\t\t\tlast boot.  This object returns all of the 64 bit \n\t\t\tunsigned integer.\n\t\t\tThis field is not available from the c-mode management interfaces')
fcp64Ops = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcp64Ops.setStatus('current')
if mibBuilder.loadTexts: fcp64Ops.setDescription('The total number of FCP ops handled since the\n\t\t\tlast boot.  This object returns all of the 64 bit \n\t\t\tunsigned integer.\n\t\t\tThis field is not available from the c-mode management interfaces')
fcpTargetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 26))
fcpTargetPortTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 26, 1), )
if mibBuilder.loadTexts: fcpTargetPortTable.setStatus('current')
if mibBuilder.loadTexts: fcpTargetPortTable.setDescription('Provide a report of fcp target port general\n       information\n       This table is available from c-mode management interfaces only.')
fcpTargetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 26, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "fcpTargetPortNodeName"), (1, "NETAPP-MIB", "fcpTargetPortName"))
if mibBuilder.loadTexts: fcpTargetPortEntry.setStatus('current')
if mibBuilder.loadTexts: fcpTargetPortEntry.setDescription('Provide a report of per fcp target port device information.')
fcpTargetPortNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 26, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPortNodeName.setStatus('current')
if mibBuilder.loadTexts: fcpTargetPortNodeName.setDescription('Name of the node hosting the FCP target port.')
fcpTargetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 26, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPortName.setStatus('current')
if mibBuilder.loadTexts: fcpTargetPortName.setDescription('FCP target port name.')
fcpTargetPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 26, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPortSpeed.setStatus('current')
if mibBuilder.loadTexts: fcpTargetPortSpeed.setDescription('Speed in gigabits per second. 0 indicates speed is set to auto.')
fcpTargetPortStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 26, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPortStandby.setStatus('current')
if mibBuilder.loadTexts: fcpTargetPortStandby.setDescription('Whether this target adapter is in standby mode.')
fcpTargetPortTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 26, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("fabric", 2), ("pointToPoint", 3), ("loop", 4), ("auto", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPortTopology.setStatus('current')
if mibBuilder.loadTexts: fcpTargetPortTopology.setDescription('Fibre channel topology for this adapter.')
fcpTargetLif = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 27))
fcpTargetLifTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1), )
if mibBuilder.loadTexts: fcpTargetLifTable.setStatus('current')
if mibBuilder.loadTexts: fcpTargetLifTable.setDescription('Provide a report of FCP target LIFs general\n       information.\n       This table is available from c-mode management interfaces only.')
fcpTargetLifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "fcpTargetLifVserver"), (0, "NETAPP-MIB", "fcpTargetLifName"))
if mibBuilder.loadTexts: fcpTargetLifEntry.setStatus('current')
if mibBuilder.loadTexts: fcpTargetLifEntry.setDescription('Provide a report of per fcp target LIF information.')
fcpTargetLifVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifVserver.setStatus('current')
if mibBuilder.loadTexts: fcpTargetLifVserver.setDescription('Vserver containing the FCP target LIF.')
fcpTargetLifName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifName.setStatus('current')
if mibBuilder.loadTexts: fcpTargetLifName.setDescription('The name of the FCP target device.')
fcpTargetLifHomeNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifHomeNode.setStatus('current')
if mibBuilder.loadTexts: fcpTargetLifHomeNode.setDescription('The home node of the FCP target LIF.')
fcpTargetLifHomePort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifHomePort.setStatus('current')
if mibBuilder.loadTexts: fcpTargetLifHomePort.setDescription('The home port of the FCP target LIF.')
fcpTargetLifNN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifNN.setStatus('current')
if mibBuilder.loadTexts: fcpTargetLifNN.setDescription('The FC WWNN of the FCP target hosting the LIF.')
fcpTargetLifPN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifPN.setStatus('current')
if mibBuilder.loadTexts: fcpTargetLifPN.setDescription('The FC WWPN of the FCP target LIF.')
fcpTargetLifStatusAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifStatusAdmin.setStatus('current')
if mibBuilder.loadTexts: fcpTargetLifStatusAdmin.setDescription('Status of the FCP target LIF assigned by an administrator.')
fcpTargetLifStatusOper = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifStatusOper.setStatus('current')
if mibBuilder.loadTexts: fcpTargetLifStatusOper.setDescription('Operational status of the FCP target LIF.')
nfsCacheOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18, 1))
nfsCacheIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheIsEnabled.setStatus('current')
if mibBuilder.loadTexts: nfsCacheIsEnabled.setDescription('Whether NFS caching is enabled on this system.')
nfsCacheIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheIsLicensed.setStatus('current')
if mibBuilder.loadTexts: nfsCacheIsLicensed.setDescription('Whether NFS caching is licensed on this system.')
nfsCacheStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18, 2))
nfsCacheBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesFromClients.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheBytesFromClients.setDescription('Total NFS bytes received from clients')
nfsCacheBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesToClients.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheBytesToClients.setDescription('Total NFS bytes sent to clients')
nfsCacheBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesFromServers.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheBytesFromServers.setDescription('Total NFS bytes received from servers')
nfsCacheBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesToServers.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheBytesToServers.setDescription('Total NFS bytes sent to servers')
nfsCacheTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheTotalRequests.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheTotalRequests.setDescription('Total NFS requests received')
nfsCacheHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHitRequests.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheHitRequests.setDescription('Total NFS requests resulting in cache hits')
nfsCacheMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissRequests.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheMissRequests.setDescription('Total NFS requests resulting in cache misses')
nfsCacheMissCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissCacheableRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCacheMissCacheableRequests.setDescription('Total NFS requests that were cacheable misses')
nfsCacheMissUnCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissUnCacheableRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCacheMissUnCacheableRequests.setDescription('Total NFS requests that were uncacheable misses')
nfsCacheEjectRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheEjectRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCacheEjectRequests.setDescription('Total NFS requests resulting in object eject due to expiration')
nfsCacheVerifyRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheVerifyRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCacheVerifyRequests.setDescription('Total NFS requests resulting in object verification')
nfsCacheRpcRecords = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheRpcRecords.setStatus('current')
if mibBuilder.loadTexts: nfsCacheRpcRecords.setDescription('Total RPC records received')
nfsCacheBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBWSavings.setStatus('current')
if mibBuilder.loadTexts: nfsCacheBWSavings.setDescription('Bandwidth savings for NFS requests')
nfsCacheHighBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesFromClients.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheHighBytesFromClients.setDescription('Total NFS bytes received from clients.  This object\n\t\t\t returns the most significant 32 bits of the 64 bit \n\t\t\t unsigned integer. This object is deprecated - Use \n\t\t\t nfsCache64BytesFromClients instead.')
nfsCacheLowBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesFromClients.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheLowBytesFromClients.setDescription('Total NFS bytes received from clients.  This object\n\t\t\t returns the least significant 32 bits of the 64 bit \n\t\t\t unsigned integer. This object is deprecated - Use \n\t\t\t nfsCache64BytesFromClients instead.')
nfsCacheHighBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesToClients.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheHighBytesToClients.setDescription('Total NFS bytes sent to clients.  This object returns\n\t\t\t the most significant 32 bits of the 64 bit unsigned \n\t\t\t integer. This object is deprecated - Use \n\t\t\t nfsCache64BytesToClients instead.')
nfsCacheLowBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesToClients.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheLowBytesToClients.setDescription('Total NFS bytes sent to clients.  This object returns\n\t\t\t the least significant 32 bits of the 64 bit unsigned \n\t\t\t integer. This object is deprecated - Use \n\t\t\t nfsCache64BytesToClients instead.')
nfsCacheHighBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesFromServers.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheHighBytesFromServers.setDescription('Total NFS bytes received from servers.  This object\n\t\t\t returns the most significant 32 bits of the 64 bit \n\t\t\t unsigned integer. This object is deprecated - Use \n\t\t\t nfsCache64BytesFromServers instead.')
nfsCacheLowBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesFromServers.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheLowBytesFromServers.setDescription('Total NFS bytes received from servers.  This object\n\t\t\t returns the least significant 32 bits of the 64 bit\n\t\t\t unsigned integer. This object is deprecated - Use \n\t\t\t nfsCache64BytesFromServers instead.')
nfsCacheHighBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesToServers.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheHighBytesToServers.setDescription('Total NFS bytes sent to servers.  This object\n\t\t\t returns the most significant 32 bits of the 64 bit \n\t\t\t unsigned integer. This object is deprecated - Use \n\t\t\t nfsCache64BytesToServers instead.')
nfsCacheLowBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesToServers.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheLowBytesToServers.setDescription('Total NFS bytes sent to servers.  This object\n\t\t\t returns the least significant 32 bits of the 64 bit \n\t\t\t unsigned integer. This object is deprecated - Use \n\t\t\t nfsCache64BytesToServers instead.')
nfsCacheHighTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighTotalRequests.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheHighTotalRequests.setDescription('Total NFS requests received.  This object returns\n\t\t\t the most significant 32 bits of the 64 bit unsigned \n\t\t\t integer. This object is deprecated - Use \n\t\t\t nfsCache64TotalRequests instead.')
nfsCacheLowTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowTotalRequests.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheLowTotalRequests.setDescription('Total NFS requests received.  This object returns\n\t\t\t the least significant 32 bits of the 64 bit unsigned \n\t\t\t integer. This object is deprecated - Use \n\t\t\t nfsCache64TotalRequests instead.')
nfsCacheHighHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighHitRequests.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheHighHitRequests.setDescription('Total NFS requests resulting in cache hits.  This\n\t\t\t object returns the most significant 32 bits of the \n\t\t\t 64 bit unsigned integer. This object is deprecated - \n\t\t\t Use nfsCache64HitRequests instead.')
nfsCacheLowHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowHitRequests.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheLowHitRequests.setDescription('Total NFS requests resulting in cache hits.  This\n\t\t\t object returns the least significant 32 bits of the\n\t\t\t 64 bit unsigned integer. This object is deprecated - \n\t\t\t Use nfsCache64HitRequests instead.')
nfsCacheHighMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighMissRequests.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheHighMissRequests.setDescription('Total NFS requests resulting in cache misses.  This\n\t\t\t object returns the most significant 32 bits of the \n\t\t\t 64 bit unsigned integer. This object is deprecated - \n\t\t\t Use nfsCache64MissRequests instead.')
nfsCacheLowMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowMissRequests.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheLowMissRequests.setDescription('Total NFS requests resulting in cache misses.  This\n\t\t\t object returns the least significant 32 bits of the\n\t\t\t 64 bit unsigned integer. This object is deprecated - \n\t\t\t Use nfsCache64MissRequests instead.')
nfsCache64BytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64BytesFromClients.setStatus('current')
if mibBuilder.loadTexts: nfsCache64BytesFromClients.setDescription('Total NFS bytes received from clients.  This object\n\t\t\t returns all of the 64 bit unsigned integer.')
nfsCache64BytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64BytesToClients.setStatus('current')
if mibBuilder.loadTexts: nfsCache64BytesToClients.setDescription('Total NFS bytes sent to clients.  This object returns\n\t\t\t all of the 64 bit unsigned integer.')
nfsCache64BytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64BytesFromServers.setStatus('current')
if mibBuilder.loadTexts: nfsCache64BytesFromServers.setDescription('Total NFS bytes received from servers.  This object\n\t\t\t returns all of the 64 bit unsigned integer.')
nfsCache64BytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64BytesToServers.setStatus('current')
if mibBuilder.loadTexts: nfsCache64BytesToServers.setDescription('Total NFS bytes sent to servers.  This object\n\t\t\t returns all of the 64 bit unsigned integer.')
nfsCache64TotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64TotalRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCache64TotalRequests.setDescription('Total NFS requests received.  This object returns\n\t\t\t all of the 64 bit unsigned integer.')
nfsCache64HitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64HitRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCache64HitRequests.setDescription('Total NFS requests resulting in cache hits.  This\n\t\t\t object returns all of the  64 bit unsigned integer.')
nfsCache64MissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64MissRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCache64MissRequests.setDescription('Total NFS requests resulting in cache misses.  This\n\t\t\t object returns all of the 64 bit unsigned integer.')
enclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 21, 1))
enclNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumber.setStatus('current')
if mibBuilder.loadTexts: enclNumber.setDescription('The number of storage enclosures in the storage subsystem.')
enclTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2), )
if mibBuilder.loadTexts: enclTable.setStatus('current')
if mibBuilder.loadTexts: enclTable.setDescription('Display disk enclosure environmental information for disk\n\t     shelves that support SCSI Enclosure Services.')
enclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "enclIndex"))
if mibBuilder.loadTexts: enclEntry.setStatus('current')
if mibBuilder.loadTexts: enclEntry.setDescription('Display disk enclosure (shelf) environmental\n\t     information for the referenced disk enclosure.')
enclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclIndex.setStatus('current')
if mibBuilder.loadTexts: enclIndex.setDescription('A number that identifies this enclosure among the\n\t\t\t possible monitored enclosures.  This number normally\n\t\t\t uniquely identifies one shelf within one boot,\n\t\t\t but may it change between boots.  The number may\n\t\t\t also change within a boot if shelves are removed\n\t\t\t and added.')
enclContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("initializing", 1), ("transitioning", 2), ("active", 3), ("inactive", 4), ("reconfiguring", 5), ("nonexistent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclContactState.setStatus('current')
if mibBuilder.loadTexts: enclContactState.setDescription('The state of the communication between the filer or storage\n\t    engine and the enclosure monitoring device in the enclosure.')
enclChannelShelfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclChannelShelfAddr.setStatus('current')
if mibBuilder.loadTexts: enclChannelShelfAddr.setDescription('The adapter number or switch name and the port number\n\t    (together, called the channel), and shelf ID of this\n\t    enclosure.  Examples are 8a.1 and switch:5.1.')
enclProductLogicalID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductLogicalID.setStatus('current')
if mibBuilder.loadTexts: enclProductLogicalID.setDescription('The logical identifier of this enclosure.  This a form of the\n\t    World-Wide Name (WWN).')
enclProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductID.setStatus('current')
if mibBuilder.loadTexts: enclProductID.setDescription('The product ID of the shelf hardware module that provides\n\t    the enclosure monitoring function.  Example is LRC.')
enclProductVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductVendor.setStatus('current')
if mibBuilder.loadTexts: enclProductVendor.setDescription('The name of the vendor of this enclosure.  Example is Xyratex.')
enclProductModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductModel.setStatus('current')
if mibBuilder.loadTexts: enclProductModel.setDescription('The model name of this enclosure.  Example is DiskShelf14.')
enclProductRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductRevision.setStatus('current')
if mibBuilder.loadTexts: enclProductRevision.setDescription('The revision number of this enclosure.')
enclProductSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductSerialNo.setStatus('current')
if mibBuilder.loadTexts: enclProductSerialNo.setDescription('The serial number of this enclosure.')
enclNumberDiskBays = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumberDiskBays.setStatus('current')
if mibBuilder.loadTexts: enclNumberDiskBays.setDescription('The number of disk bays in this enclosure.')
enclDisksPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclDisksPresent.setStatus('current')
if mibBuilder.loadTexts: enclDisksPresent.setDescription('The list of disks present by bay number in this enclosure.')
enclPowerSuppliesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesMaximum.setStatus('current')
if mibBuilder.loadTexts: enclPowerSuppliesMaximum.setDescription('The maximum number of power supplies in this enclosure.')
enclPowerSuppliesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesPresent.setStatus('current')
if mibBuilder.loadTexts: enclPowerSuppliesPresent.setDescription('The list of power supplies present in the enclosure.  \n\t     Numbering is from left to right (top supply, then bottom,\n\t     on each side, if applicable) in their intended location\n\t     in the shelf, while facing the supplies.')
enclPowerSuppliesSerialNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesSerialNos.setStatus('current')
if mibBuilder.loadTexts: enclPowerSuppliesSerialNos.setDescription('The list of serial numbers of power supplies present\n\t     in the enclosure.  Not all shelves are able to report the\n\t     power supply serial number.  Communication errors may\n\t     make the serial number unavailable. The order follows that\n\t     of enclPowerSuppliesPresent')
enclPowerSuppliesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesFailed.setStatus('current')
if mibBuilder.loadTexts: enclPowerSuppliesFailed.setDescription('The list of failed power supplies in this enclosure, numbered as\n\t     in enclPowerSuppliesPresent.')
enclFansMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansMaximum.setStatus('current')
if mibBuilder.loadTexts: enclFansMaximum.setDescription('The maximum number of fans or fan modules monitored by this\n\t     enclosure.  R100/R150 shelf power supply fans are not included\n\t     in this number.')
enclFansPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansPresent.setStatus('current')
if mibBuilder.loadTexts: enclFansPresent.setDescription('The list of fans or fan modules present and for which\n\t     status is known in this enclosure.  Numbering begins with\n\t     fans on the front of the enclosure, if applicable. Fans\n\t     are numbered left-to-right (upper fans, then lower, if\n\t     applicable) as facing the fans or the modules that\n\t     contain them, such as power supply modules.  R100/R150\n\t     shelf power supply fans are not included in this list.')
enclFansFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansFailed.setStatus('current')
if mibBuilder.loadTexts: enclFansFailed.setDescription('The list of failed fans or fan modules in this enclosure.  Fans\n\t     are numbered as described in enclFansPresent.')
enclTempSensorsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsMaximum.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsMaximum.setDescription('The maximum number of temperature sensors monitored\n\t     by this enclosure.')
enclTempSensorsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsPresent.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsPresent.setDescription('The list of temperature sensors present and for which\n\t     status is known in this enclosure.  Temperature sensors are\n\t     numbered top-to-bottom and left-to-right, beginning with\n\t     the front of the enclosure, then the rear, as the modules\n\t     containing them are faced.')
enclTempSensorsOverTempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempFail.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsOverTempFail.setDescription('The list of temperature sensors reporting\n\t     overtemperature failure in this enclosure.  Sensors are\n\t     numbered as in TempSensorsPresent.')
enclTempSensorsOverTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempWarn.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsOverTempWarn.setDescription('The list of temperature sensors reporting overtemperature\n\t     warning in this enclosure.  Sensors are numbered as in\n\t     TempSensorsPresent.')
enclTempSensorsUnderTempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempFail.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsUnderTempFail.setDescription('The list of temperature sensors reporting undertemperature\n\t     failure in this enclosure.  Sensors are numbered as in\n\t     TempSensorsPresent.')
enclTempSensorsUnderTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarn.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarn.setDescription('The list of temperature sensors reporting undertemperature\n\t     warning in this enclosure.  Sensors are numbered as in\n\t     TempSensorsPresent.')
enclTempSensorsCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsCurrentTemp.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsCurrentTemp.setDescription('The list of temperatures reported by all temperature sensors in\n\t     the enclosure, including the ambient temperature.  Sensors are\n\t     numbered as in TempSensorsPresent.')
enclTempSensorsOverTempFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempFailThr.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsOverTempFailThr.setDescription('The list of overtemperature failure thresholds for all\n\t     temperature sensors in the enclosure.  Sensors are\n\t     numbered as in TempSensorsPresent.')
enclTempSensorsOverTempWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempWarnThr.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsOverTempWarnThr.setDescription('The list of overtemperature warning thresholds for all\n\t     temperature sensors in the enclosure.  Sensors are\n\t     numbered as in TempSensorsPresent.')
enclTempSensorsUnderTempFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempFailThr.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsUnderTempFailThr.setDescription('The list of undertemperature failure thresholds for all\n\t     temperature sensors in the enclosure.  Sensors are numbered as\n\t     in TempSensorsPresent.')
enclTempSensorsUnderTempWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarnThr.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarnThr.setDescription('The list of undertemperature warning thresholds for all\n\t     temperature sensors in the enclosure.   Sensors are numbered as\n\t     in TempSensorsPresent.')
enclElectronicsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsMaximum.setStatus('current')
if mibBuilder.loadTexts: enclElectronicsMaximum.setDescription('The number of enclosure services electronics modules that it is\n\t     possible for this enclosure to detect and/or monitor.')
enclElectronicsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsPresent.setStatus('current')
if mibBuilder.loadTexts: enclElectronicsPresent.setDescription('The list those enclosure services electronics modules present in\n\t     this enclosure.  Numbering is from left-to-right or top-to-bottom\n\t     in their intended location in the shelf, while facing the\n\t     electronics modules.  It is normal for the R200 FC-AT module to be\n\t     reported as the second module.')
enclElectronicsSerialNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsSerialNos.setStatus('current')
if mibBuilder.loadTexts: enclElectronicsSerialNos.setDescription('The list of serial numbers of the enclosure services electronics\n\t     modules present in this enclosure.  The order follows that of\n\t     enclElectronicsPresent.')
enclElectronicsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsFailed.setStatus('current')
if mibBuilder.loadTexts: enclElectronicsFailed.setDescription('The list of failed electronics elements.  Valid only if\n\t     enclElectronicsPresent shows that some are present.')
enclVoltSensorsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsMaximum.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsMaximum.setDescription('The number of voltage sensors monitored by\n\t     this enclosure.')
enclVoltSensorsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsPresent.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsPresent.setDescription('The list of voltage sensors present and for which\n\t     status is known in this enclosure.  Voltage sensors are\n\t     numbered top-to-bottom and left-to-right, as the modules\n\t     containing them are faced.')
enclVoltSensorsOverVoltFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsOverVoltFail.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsOverVoltFail.setDescription('The list of voltage sensors reporting\n\t     overvoltage failure in this enclosure.  Sensors are\n\t     numbered as in VoltSensorsPresent.')
enclVoltSensorsOverVoltWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsOverVoltWarn.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsOverVoltWarn.setDescription('The list of voltage sensors reporting overvoltage\n\t     warning in this enclosure.  Sensors are numbered as in\n\t     VoltSensorsPresent.')
enclVoltSensorsUnderVoltFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltFail.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltFail.setDescription('The list of voltage sensors reporting undervoltage\n\t     failure in this enclosure.  Sensors are numbered as in\n\t     VoltSensorsPresent.')
enclVoltSensorsUnderVoltWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltWarn.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltWarn.setDescription('The list of voltage sensors reporting undervoltage\n\t     warning in this enclosure.  Sensors are numbered as in\n\t     VoltSensorsPresent.')
enclVoltSensorsCurrentVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsCurrentVolt.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsCurrentVolt.setDescription('The list of voltages reported by all voltage sensors in\n\t     the enclosure, Sensors are\n\t     numbered as in VoltSensorsPresent.')
enclVoltSensorsOverVoltFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsOverVoltFailThr.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsOverVoltFailThr.setDescription('The list of overvoltage failure thresholds for all\n\t     voltage sensors in the enclosure.  Sensors are\n\t     numbered as in VoltSensorsPresent.')
enclVoltSensorsOverVoltWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsOverVoltWarnThr.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsOverVoltWarnThr.setDescription('The list of overvoltage warning thresholds for all\n\t     voltage sensors in the enclosure.  Sensors are\n\t     numbered as in VoltSensorsPresent.')
enclVoltSensorsUnderVoltFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltFailThr.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltFailThr.setDescription('The list of undervoltage failure thresholds for all\n\t     voltage sensors in the enclosure.  Sensors are numbered\n\t     as in VoltSensorsPresent.')
enclVoltSensorsUnderVoltWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltWarnThr.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltWarnThr.setDescription('The list of undervoltage warning thresholds for all\n\t     voltage sensors in the enclosure.  Sensors are numbered as\n\t     in VoltSensorsPresent.')
enclCurSensorsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsMaximum.setStatus('current')
if mibBuilder.loadTexts: enclCurSensorsMaximum.setDescription('The number of current sensors monitored by\n\t     this enclosure.')
enclCurSensorsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsPresent.setStatus('current')
if mibBuilder.loadTexts: enclCurSensorsPresent.setDescription('The list of current sensors present and for which\n\t     status is known in this enclosure.  Current sensors are\n\t     numbered top-to-bottom and left-to-right, beginning with\n\t     the front of the enclosure, then the rear, as the modules\n\t     containing them are faced.')
enclCurSensorsOverCurFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsOverCurFail.setStatus('current')
if mibBuilder.loadTexts: enclCurSensorsOverCurFail.setDescription('The list of current sensors reporting\n\t     overcurrent failure in this enclosure.  Sensors are\n\t     numbered as in CurSensorsPresent.')
enclCurSensorsOverCurWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsOverCurWarn.setStatus('current')
if mibBuilder.loadTexts: enclCurSensorsOverCurWarn.setDescription('The list of current sensors reporting overcurrent\n\t     warning in this enclosure.  Sensors are numbered as in\n\t     CurSensorsPresent.')
enclCurSensorsCurrentCur = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsCurrentCur.setStatus('current')
if mibBuilder.loadTexts: enclCurSensorsCurrentCur.setDescription('The list of currents reported by all current sensors in\n\t     the enclosure, Sensors are\n\t     numbered as in CurSensorsPresent.')
enclCurSensorsOverCurFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsOverCurFailThr.setStatus('current')
if mibBuilder.loadTexts: enclCurSensorsOverCurFailThr.setDescription('The list of overcurrent failure thresholds for all\n\t     current sensors in the enclosure.  Sensors are\n\t     numbered as in CurSensorsPresent.')
enclCurSensorsOverCurWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsOverCurWarnThr.setStatus('current')
if mibBuilder.loadTexts: enclCurSensorsOverCurWarnThr.setDescription('The list of overcurrent warning thresholds for all\n\t     current sensors in the enclosure.  Sensors are\n\t     numbered as in CurSensorsPresent.')
enclSASConnectMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectMaximum.setStatus('current')
if mibBuilder.loadTexts: enclSASConnectMaximum.setDescription('The number of possible SAS connectors monitored\n\t     by this enclosure.')
enclSASConnectPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectPresent.setStatus('current')
if mibBuilder.loadTexts: enclSASConnectPresent.setDescription('The list of SAS connector numbers in this\n\t     enclosure that have cables attached.  Connectors\n\t     are numbered beginning at one on module one,\n\t     counting connectors innermost-to-outermost on the\n\t     module, then module two innermost-to-outermost. \n\t     Modules are numbered as in enclElectronicsPresent.')
enclSASConnectVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectVendor.setStatus('current')
if mibBuilder.loadTexts: enclSASConnectVendor.setDescription('The list of vendors of cables attached to the\n\t     SES connectors of the enclosure. If no cable,\n\t     is attached, the entry is shown as <N/A>.')
enclSASConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectType.setStatus('current')
if mibBuilder.loadTexts: enclSASConnectType.setDescription('The list of connector types of connectors attached\n\t     to the enclosure. If no cable is attached,\n\t     the entry is shown as <N/A>.')
enclSASConnectCableLen = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 56), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectCableLen.setStatus('current')
if mibBuilder.loadTexts: enclSASConnectCableLen.setDescription('The list of lengths (in meters) of cables attached\n\t     to the enclosure.  If no cable is attached,\n\t     the entry is shown as <N/A>.')
enclSASConnectCableTech = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 57), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectCableTech.setStatus('current')
if mibBuilder.loadTexts: enclSASConnectCableTech.setDescription('The list of cable technologies of connectors attached\n\t     to the enclosure.  If no cable is attached, the \n\t     entry is shown as <N/A>.')
enclSASConnectCableEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 58), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectCableEnd.setStatus('current')
if mibBuilder.loadTexts: enclSASConnectCableEnd.setDescription('The list of identifiers of which end of the cable is \n\t     attached to the enclosure.  If no cable is attached,\n\t     the entry is shown as <N/A>.')
enclSASConnectSerialNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 59), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectSerialNos.setStatus('current')
if mibBuilder.loadTexts: enclSASConnectSerialNos.setDescription('The list of serial numbers of the SAS cables attached\n\t     to this enclosure.  If no cable is attached, the\n\t     entry is shown as <N/A>.')
enclSASConnectPartNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 60), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectPartNos.setStatus('current')
if mibBuilder.loadTexts: enclSASConnectPartNos.setDescription('The list of part numbers of the SAS cables attached\n\t     to this enclosure.  If no cable is attached, the\n\t     entry is shown as <N/A>.')
enclPowerSuppliesPartNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesPartNos.setStatus('current')
if mibBuilder.loadTexts: enclPowerSuppliesPartNos.setDescription('The list of part numbers of power supplies present\n\t     in the enclosure.  Not all shelves are able to report the\n\t     power supply part number.  Communication errors may\n\t     make the part number unavailable. The order follows that of\n\t     enclPowerSuppliesPresent.')
enclFansSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 62), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansSpeed.setStatus('current')
if mibBuilder.loadTexts: enclFansSpeed.setDescription('The list of fan speeds in revolutions per minute (RPM) for fans \n\t     or fan modules present and for which speed status\n\t     is known in this enclosure. Not all enclosure types report\n\t     fan speeds. Fans are numbered as described in enclFansPresent.')
enclElectronicsPartNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 63), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsPartNos.setStatus('current')
if mibBuilder.loadTexts: enclElectronicsPartNos.setDescription('The list of part numbers of the enclosure services electronics\n\t     modules present in this enclosure.  The order follows that of\n\t     enclElectronicsPresent.')
enclElectronicsCPLDVers = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 64), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsCPLDVers.setStatus('current')
if mibBuilder.loadTexts: enclElectronicsCPLDVers.setDescription("The list of CPLDs ('complex programmable logic devices') of the\n\t     enclosure services electronics modules present in this enclosure.\n\t     Not all module types contain this part.\n             The order follows that of enclElectronicsPresent.")
enclNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 65), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNodeName.setStatus('current')
if mibBuilder.loadTexts: enclNodeName.setDescription('Node to which this enclosure belongs.')
haTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 21, 2), )
if mibBuilder.loadTexts: haTable.setStatus('current')
if mibBuilder.loadTexts: haTable.setDescription('High Availability configuration information\n\t\t\t\ttable. This table fields are returned only from the\n\t\t\t\tcluster interfaces')
haEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1), ).setIndexNames((1, "NETAPP-MIB", "haNodeName"))
if mibBuilder.loadTexts: haEntry.setStatus('current')
if mibBuilder.loadTexts: haEntry.setDescription('High Availability Entry')
haNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haNodeName.setStatus('current')
if mibBuilder.loadTexts: haNodeName.setDescription('Name of the node.')
haNodeSysid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haNodeSysid.setStatus('current')
if mibBuilder.loadTexts: haNodeSysid.setDescription('System ID of the node.')
haSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("enabled", 2), ("disabled", 3), ("takeoverByPartnerDisabled", 4), ("thisNodeDead", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haSettings.setStatus('current')
if mibBuilder.loadTexts: haSettings.setDescription('High Availability configuration settings. The value\n\t\tnotConfigured(1) indicates that the HA is not licensed. \n\t\tThe thisNodeDead(5) setting indicates that this node has \n\t\tbeen takenover.')
haState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dead", 1), ("canTakeover", 2), ("cannotTakeover", 3), ("takeover", 4), ("partialGiveback", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haState.setStatus('current')
if mibBuilder.loadTexts: haState.setDescription('High Availability State.')
haCannotTakeoverCause = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("ok", 1), ("unknownReason", 2), ("disabledByOperator", 3), ("interconnectOffline", 4), ("disabledByPartner", 5), ("takeoverFailed", 6), ("mailboxIsInDegradedState", 7), ("partnermailboxIsInUninitialisedState", 8), ("mailboxVersionMismatch", 9), ("nvramSizeMismatch", 10), ("kernelVersionMismatch", 11), ("partnerIsInBootingStage", 12), ("diskshelfIsTooHot", 13), ("partnerIsPerformingRevert", 14), ("nodeIsPerformingRevert", 15), ("sametimePartnerIsAlsoTryingToTakeUsOver", 16), ("alreadyInTakenoverMode", 17), ("nvramLogUnsynchronized", 18), ("stateofBackupMailboxIsDoubtful", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haCannotTakeoverCause.setStatus('current')
if mibBuilder.loadTexts: haCannotTakeoverCause.setDescription('The reason node cannot takeover its HA partner')
haPartnerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("maybeDown", 1), ("ok", 2), ("dead", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPartnerStatus.setStatus('current')
if mibBuilder.loadTexts: haPartnerStatus.setDescription('This is the status last returned by its HA partner.')
haPartnerLastStatusUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPartnerLastStatusUpdate.setStatus('current')
if mibBuilder.loadTexts: haPartnerLastStatusUpdate.setDescription('If non-zero, the absolute time of the last update \n\t\tfrom the partner.')
haPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPartnerName.setStatus('current')
if mibBuilder.loadTexts: haPartnerName.setDescription('Hostname of partner.')
haPartnerSysid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPartnerSysid.setStatus('current')
if mibBuilder.loadTexts: haPartnerSysid.setDescription('System ID of partner.')
haInterconnectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("down", 2), ("partialFailure", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haInterconnectStatus.setStatus('current')
if mibBuilder.loadTexts: haInterconnectStatus.setDescription('The current status of the interconnect. The partialFailure(3)\n\t\tstatus indicates that one of the links in the interconnect \n\t\thardware is down.')
netInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22, 1))
netifNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifNumber.setStatus('current')
if mibBuilder.loadTexts: netifNumber.setDescription('The number of network interfaces (regardless of\n                      their current state) present on this system.')
netifTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2), )
if mibBuilder.loadTexts: netifTable.setStatus('current')
if mibBuilder.loadTexts: netifTable.setDescription('A list of interface entries.  The number of\n                 entries is given by the value of netifNumber.')
netifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "netifIndex"))
if mibBuilder.loadTexts: netifEntry.setStatus('current')
if mibBuilder.loadTexts: netifEntry.setDescription('An interface entry containing objects at the\n                      subnetwork layer and below for a particular\n                      interface.')
netifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifIndex.setStatus('current')
if mibBuilder.loadTexts: netifIndex.setDescription("A unique value for each interface. For\n\t\t      clustered Data ONTAP, the high-order 16-bits\n\t\t      denote the node identifier and the low-order\n\t\t      16-bits denote the interface index within\n\t\t      the node. For Data ONTAP operating in 7-mode,\n\t\t      it ranges between 1 and the ifNumber value.\n\t\t      The value for each interface must remain\n\t\t      constant at least from one re-initialization\n\t\t      of the entity's network management system to\n\t\t      the next re-initialization.")
netifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifDescr.setStatus('current')
if mibBuilder.loadTexts: netifDescr.setDescription('A textual string that contains interface information.\n\t\t      For clustered Data ONTAP, the string is in the\n\t\t      the following format:\n\t\t      <node name>:<interface name>\n\t\t      For Data ONTAP operating in 7-Mode, the string\n\t\t      contains only the interface name.\n\n\t\t      For a management port (for example, e0M or e0P), the\n\t\t      interface name is preceded by the text MGMT_PORT_ONLY\n\t\t      and a blank space after the text, in both clustered\n\t\t      Data ONTAP and Data ONTAP operating in 7-Mode.\n\n\t\t      Example:\n\t\t      The strings are in the following formats:\n\t\t      <node name>:MGMT_PORT_ONLY <interface name>, for clustered Data ONTAP.\n\t\t      MGMT_PORT_ONLY <interface name>, for Data ONTAP operating in 7-mode.')
ifHighInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInOctets.setStatus('deprecated')
if mibBuilder.loadTexts: ifHighInOctets.setDescription('The total number of octets received on the\n                      interface, including framing characters.\n\t\t      This object returns the most significant 32 bits of\n\t\t      the 64 bit unsigned integer. This object is deprecated - \n\t\t\t \t\tUse if64InOctets instead.')
ifLowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInOctets.setStatus('deprecated')
if mibBuilder.loadTexts: ifLowInOctets.setDescription('The total number of octets received on the\n                      interface, including framing characters.\n\t\t      This object returns the least significant 32 bits of\n\t\t      the 64 bit unsigned integer. This object is deprecated - \n\t\t\t \t\tUse if64InOctets instead.')
ifHighInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: ifHighInUcastPkts.setDescription('The number of subnetwork-unicast packets\n                      delivered to a higher-layer protocol.\n\t\t      This object returns the most significant 32 bits of\n\t\t      the 64 bit unsigned integer. This object is deprecated - \n\t\t\t \t\tUse if64InUcastPkts instead.')
ifLowInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: ifLowInUcastPkts.setDescription('The number of subnetwork-unicast packets\n                      delivered to a higher-layer protocol.\n\t\t      This object returns the least significant 32 bits of\n\t\t      the 64 bit unsigned integer. This object is deprecated - \n\t\t\t \t\tUse if64InUcastPkts instead.')
ifHighInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInNUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: ifHighInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork-\n                      broadcast or subnetwork-multicast) packets\n                      delivered to a higher-layer protocol.\n\t\t      This object returns the most significant 32 bits of \n\t\t      the 64 bit unsigned integer. This object is deprecated - \n\t\t\t \t\tUse if64InNUcastPkts instead.')
ifLowInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInNUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: ifLowInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork-\n                      broadcast or subnetwork-multicast) packets\n                      delivered to a higher-layer protocol.\n\t\t      This object returns the least significant 32 bits of\n\t\t      the 64 bit unsigned integer. This object is deprecated - \n\t\t\t \t\tUse if64InNUcastPkts instead.')
ifHighInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: ifHighInDiscards.setDescription('The number of inbound packets which were chosen\n                      to be discarded even though no errors had been\n                      detected to prevent their being deliverable to a\n                      higher-layer protocol.  One possible reason for\n                      discarding such a packet could be to free up\n                      buffer space. This object returns the most \n\t\t      significant 32 bits of the 64 bit unsigned integer. This object \n\t\t      is deprecated - Use if64InDiscards instead.')
ifLowInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: ifLowInDiscards.setDescription('The number of inbound packets which were chosen\n                      to be discarded even though no errors had been\n                      detected to prevent their being deliverable to a\n                      higher-layer protocol.  One possible reason for\n                      discarding such a packet could be to free up\n                      buffer space. This object returns the least \n\t\t      significant 32 bits of the 64 bit unsigned integer. This object \n\t\t      is deprecated - Use if64InDiscards instead.')
ifHighInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInErrors.setStatus('deprecated')
if mibBuilder.loadTexts: ifHighInErrors.setDescription('The number of inbound packets that contained\n                      errors preventing them from being deliverable to a\n                      higher-layer protocol. This object returns the \n\t\t      most significant 32 bits of the 64 bit unsigned integer. \n\t\t      This object is deprecated - Use if64InErrors instead.')
ifLowInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInErrors.setStatus('deprecated')
if mibBuilder.loadTexts: ifLowInErrors.setDescription('The number of inbound packets that contained\n                      errors preventing them from being deliverable to a\n                      higher-layer protocol. This object returns the \n\t\t      least significant 32 bits of the 64 bit unsigned integer. \n\t\t      This object is deprecated - Use if64InErrors instead.')
ifHighInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInUnknownProtos.setStatus('deprecated')
if mibBuilder.loadTexts: ifHighInUnknownProtos.setDescription('The number of packets received via the interface\n                      which were discarded because of an unknown or\n                      unsupported protocol. This object returns the \n\t\t      most significant 32 bits of the 64 bit unsigned integer. \n\t\t      This object is deprecated - Use if64InUnknownProtos instead.')
ifLowInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInUnknownProtos.setStatus('deprecated')
if mibBuilder.loadTexts: ifLowInUnknownProtos.setDescription('The number of packets received via the interface\n                      which were discarded because of an unknown or\n                      unsupported protocol. This object returns the \n\t\t      least significant 32 bits of the 64 bit unsigned integer. \n\t\t      This object is deprecated - Use if64InUnknownProtos instead.')
ifHighOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutOctets.setStatus('deprecated')
if mibBuilder.loadTexts: ifHighOutOctets.setDescription('The total number of octets transmitted out of the\n                      interface, including framing characters.\n                      This object returns the most significant 32 bits of the\n\t\t      64 bit unsigned integer. This object is deprecated - Use \n\t\t      if64OutOctets instead.')
ifLowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutOctets.setStatus('deprecated')
if mibBuilder.loadTexts: ifLowOutOctets.setDescription('The total number of octets transmitted out of the\n                      interface, including framing characters.\n                      This object returns the least significant 32 bits of\n\t\t      the 64 bit unsigned integer. This object is deprecated - Use \n\t\t      if64OutOctets instead.')
ifHighOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: ifHighOutUcastPkts.setDescription('The total number of packets that higher-level\n                      protocols requested be transmitted to a\n                      subnetwork-unicast address, including those that\n                      were discarded or not sent. This object returns \n\t\t      the most significant 32 bits of the 64 bit unsigned \n\t\t      integer. This object is deprecated - Use if64OutUcastPkts \n\t\t      instead.')
ifLowOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: ifLowOutUcastPkts.setDescription('The total number of packets that higher-level\n                      protocols requested be transmitted to a\n                      subnetwork-unicast address, including those that\n                      were discarded or not sent. This object returns \n\t\t      the least significant 32 bits of the 64 bit unsigned \n\t\t      integer. This object is deprecated - Use if64OutUcastPkts \n\t\t      instead.')
ifHighOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutNUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: ifHighOutNUcastPkts.setDescription('The total number of packets that higher-level\n                      protocols requested be transmitted to a non-\n                      unicast (i.e., a subnetwork-broadcast or\n                      subnetwork-multicast) address, including those\n                      that were discarded or not sent. This object returns \n\t\t      the most significant 32 bits of the 64 bit unsigned integer. \n\t\t      This object is deprecated - Use if64OutNUcastPkts instead.')
ifLowOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutNUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: ifLowOutNUcastPkts.setDescription('The total number of packets that higher-level\n                      protocols requested be transmitted to a non-\n                      unicast (i.e., a subnetwork-broadcast or\n                      subnetwork-multicast) address, including those\n                      that were discarded or not sent. This object returns \n\t\t      the least significant 32 bits of the 64 bit unsigned integer. \n\t\t      This object is deprecated - Use if64OutNUcastPkts instead.')
ifHighOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: ifHighOutDiscards.setDescription('The number of outbound packets which were chosen\n                      to be discarded even though no errors had been\n                      detected to prevent their being transmitted.  One\n                      possible reason for discarding such a packet could\n                      be to free up buffer space. This object returns \n\t\t      the most significant 32 bits of the 64 bit unsigned integer. \n\t\t      This object is deprecated - Use if64OutDiscards instead.')
ifLowOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: ifLowOutDiscards.setDescription('The number of outbound packets which were chosen\n                      to be discarded even though no errors had been\n                      detected to prevent their being transmitted.  One\n                      possible reason for discarding such a packet could\n                      be to free up buffer space. This object returns \n\t\t      the least significant 32 bits of the 64 bit unsigned integer. \n\t\t      This object is deprecated - Use if64OutDiscards instead.')
ifHighOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutErrors.setStatus('deprecated')
if mibBuilder.loadTexts: ifHighOutErrors.setDescription('The number of outbound packets that could not be\n                      transmitted because of errors. This object returns \n\t\t      the most significant 32 bits of the 64 bit unsigned integer. \n\t\t      This object is deprecated - Use if64OutErrors instead.')
ifLowOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutErrors.setStatus('deprecated')
if mibBuilder.loadTexts: ifLowOutErrors.setDescription('The number of outbound packets that could not be\n                      transmitted because of errors. This object returns \n\t\t      the least significant 32 bits of the 64 bit unsigned integer. \n\t\t      This object is deprecated - Use if64OutErrors instead.')
if64InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InOctets.setStatus('current')
if mibBuilder.loadTexts: if64InOctets.setDescription('The total number of octets received on the\n                      interface, including framing characters.\n\t\t      This object returns all of the 64 bit unsigned integer.')
if64InUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InUcastPkts.setStatus('current')
if mibBuilder.loadTexts: if64InUcastPkts.setDescription('The number of subnetwork-unicast packets\n                      delivered to a higher-layer protocol.\n\t\t      This object returns all of the 64 bit unsigned integer.')
if64InNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: if64InNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork-\n                      broadcast or subnetwork-multicast) packets\n                      delivered to a higher-layer protocol.\n\t\t      This object returns all of the 64 bit unsigned integer.')
if64InDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InDiscards.setStatus('current')
if mibBuilder.loadTexts: if64InDiscards.setDescription('The number of inbound packets which were chosen\n                      to be discarded even though no errors had been\n                      detected to prevent their being deliverable to a\n                      higher-layer protocol.  One possible reason for\n                      discarding such a packet could be to free up\n                      buffer space. This object returns all of the 64 bit \n\t\t      unsigned integer.')
if64InErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InErrors.setStatus('current')
if mibBuilder.loadTexts: if64InErrors.setDescription('The number of inbound packets that contained\n                      errors preventing them from being deliverable to a\n                      higher-layer protocol. This object returns all\n\t\t      of the 64 bit unsigned integer.')
if64InUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: if64InUnknownProtos.setDescription('The number of packets received via the interface\n                      which were discarded because of an unknown or\n                      unsupported protocol. This object returns all\n\t\t      of the 64 bit unsigned integer.')
if64OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutOctets.setStatus('current')
if mibBuilder.loadTexts: if64OutOctets.setDescription('The total number of octets transmitted out of the\n                      interface, including framing characters.\n                      This object returns all of the 64 bit unsigned integer.')
if64OutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: if64OutUcastPkts.setDescription('The total number of packets that higher-level\n                      protocols requested be transmitted to a\n                      subnetwork-unicast address, including those that\n                      were discarded or not sent. This object returns \n\t\t      all of the 64 bit unsigned  integer.')
if64OutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: if64OutNUcastPkts.setDescription('The total number of packets that higher-level\n                      protocols requested be transmitted to a non-\n                      unicast (i.e., a subnetwork-broadcast or\n                      subnetwork-multicast) address, including those\n                      that were discarded or not sent. This object returns \n\t\t      all of the 64 bit unsigned integer.')
if64OutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutDiscards.setStatus('current')
if mibBuilder.loadTexts: if64OutDiscards.setDescription('The number of outbound packets which were chosen\n                      to be discarded even though no errors had been\n                      detected to prevent their being transmitted.  One\n                      possible reason for discarding such a packet could\n                      be to free up buffer space. This object returns \n\t\t      all of the 64 bit unsigned integer.')
if64OutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutErrors.setStatus('current')
if mibBuilder.loadTexts: if64OutErrors.setDescription('The number of outbound packets that could not be\n                      transmitted because of errors. This object returns \n\t\t      all of the 64 bit unsigned integer.')
netportTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 2), )
if mibBuilder.loadTexts: netportTable.setStatus('current')
if mibBuilder.loadTexts: netportTable.setDescription('A list of network ports (both physical and logical) \n\t\t  on all nodes in the cluster.')
netportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "netportNode"), (0, "NETAPP-MIB", "netportPort"))
if mibBuilder.loadTexts: netportEntry.setStatus('current')
if mibBuilder.loadTexts: netportEntry.setDescription('Network port entry.')
netportNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportNode.setStatus('current')
if mibBuilder.loadTexts: netportNode.setDescription('Node where the port belongs to.')
netportPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportPort.setStatus('current')
if mibBuilder.loadTexts: netportPort.setDescription('Port identity.')
netportRole = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undef", 0), ("cluster", 1), ("data", 2), ("node-mgmt", 3), ("intercluster", 4), ("cluster-mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportRole.setStatus('current')
if mibBuilder.loadTexts: netportRole.setDescription("Role of the port. A port must have one of the following roles:\n\t\t cluster(1), data(2), mgmt(3), intercluster(4), cluster-mgmt(5) or  undef(0). \n\t\t The cluster port is used to communicate to other node(s) in \n\t\t the cluster. The data port services clients' requests. It is where\n\t\t all the file requests come in. The management port is used \n\t\t by administrator to manage resources within a node. \n\t\t The intercluster port is used to communicate to other cluster. \n\t\t The cluster-mgmt port is used to manage resources within the cluster. \n\t\t The undef role is for the port that has not yet been assigned a role.")
netportLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undef", 0), ("off", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportLinkState.setStatus('current')
if mibBuilder.loadTexts: netportLinkState.setDescription('The link-state of the port.\n\t\t Normally it is either UP(2) or DOWN(3).')
netportMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportMtu.setStatus('current')
if mibBuilder.loadTexts: netportMtu.setDescription('The Maximum Transmission Unit (MTU) refers to the size (in bytes) \n\t\t of the largest packet that is supported by the port.')
netportAutonegAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 6), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportAutonegAdmin.setStatus('current')
if mibBuilder.loadTexts: netportAutonegAdmin.setDescription("Indicates whether the port's auto-negotiation property \n\t\t is enabled by an administrator.")
netportAutonegOper = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 7), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportAutonegOper.setStatus('current')
if mibBuilder.loadTexts: netportAutonegOper.setDescription('Indicates whether the auto-negotiation is enabled on the port.')
netportDuplexAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undef", 0), ("auto", 1), ("half", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportDuplexAdmin.setStatus('current')
if mibBuilder.loadTexts: netportDuplexAdmin.setDescription('The duplex mode of the port set by the administrator.\n\t\t It can be either undef(0), auto(1), half-duplex(2), or full-duplex(3).')
netportDuplexOper = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undef", 0), ("auto", 1), ("half", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportDuplexOper.setStatus('current')
if mibBuilder.loadTexts: netportDuplexOper.setDescription('The duplex mode appears on the port.\n\t\t It can be either undef(0), auto(1), half-duplex(2), or full-duplex(3).')
netportSpeedAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undef", 0), ("auto", 1), ("ten-Mb", 2), ("hundred-Mb", 3), ("one-Gb", 4), ("ten-Gb", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportSpeedAdmin.setStatus('current')
if mibBuilder.loadTexts: netportSpeedAdmin.setDescription('The speed of the port set by an administrator.\n\t\t It can be either undef(0), auto(1), ten Mb/s(2), hundred Mb/s(3), one Gb/s(4), or ten Gb/s(5).')
netportSpeedOper = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undef", 0), ("auto", 1), ("ten-Mb", 2), ("hundred-Mb", 3), ("one-Gb", 4), ("ten-Gb", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportSpeedOper.setStatus('current')
if mibBuilder.loadTexts: netportSpeedOper.setDescription('The speed appears on the port.\n\t\t It can be either undef(0), auto(1), ten Mb/s(2), hundred Mb/s(3), one Gb/s(4), or ten Gb/s(5).')
netportSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportSpeed.setStatus('current')
if mibBuilder.loadTexts: netportSpeed.setDescription('The speed that appears in the port scaled to megabits/sec.')
netportMac = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportMac.setStatus('current')
if mibBuilder.loadTexts: netportMac.setDescription("The port's MAC address")
netportUpAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 14), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportUpAdmin.setStatus('current')
if mibBuilder.loadTexts: netportUpAdmin.setDescription("Indicates whether the port status is set 'UP' by an administrator.")
netportType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("physical", 0), ("if-group", 1), ("vlan", 2), ("undef", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportType.setStatus('current')
if mibBuilder.loadTexts: netportType.setDescription('The type of the port which can be either physical(0), if-group(1), vlan(2) or undef(3).')
netportIfgNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfgNode.setStatus('current')
if mibBuilder.loadTexts: netportIfgNode.setDescription('This field shows the if-group node name if the port type is if-group, \n\t\t It show an empty string, otherwise.')
netportIfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfgPort.setStatus('current')
if mibBuilder.loadTexts: netportIfgPort.setDescription('This field shows the if-group port if the port type is if-group, \n\t\t It show an empty string, otherwise.')
netportIfgDistrFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, -1))).clone(namedValues=NamedValues(("mac", 0), ("ip", 1), ("sequential", 2), ("none", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfgDistrFunc.setStatus('current')
if mibBuilder.loadTexts: netportIfgDistrFunc.setDescription("If the port type is if-group, this field shows the distribution \n\t\t function of the port. This function is used to pick the forwarding \n\t\t port for a packet. It can be either mac(0), ip(1), or sequential(2). \n\t\t The mac function selects the port based on the hash of the MAC \n\t\t address of the destination. Instead of MAC address, the ip function\n\t\t uses the destination's IP address. The sequential function uses \n\t\t the round-robin port selection.")
netportIfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, -1))).clone(namedValues=NamedValues(("multimode", 0), ("multimode-lacp", 1), ("singlemode", 2), ("none", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfgMode.setStatus('current')
if mibBuilder.loadTexts: netportIfgMode.setDescription("If the port type is if-group, this field shows the if-group's \n\t\t policy. It can be either multimode(0), multimode-lacp(1), or\n\t\t single-mode(2). Otherwise, it shows an empty string. The multimode \n\t\t policy uses the static link-aggregation, while the multimode-lacp\n\t\t uses the link-aggregation with lacp (Link Aggregate Control Protocol).\n\t\t The single mode does not use link-aggregation.")
netportVlanNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportVlanNode.setStatus('current')
if mibBuilder.loadTexts: netportVlanNode.setDescription('If the port type is vlan, this field shows its vlan node.\n\t\t Otherwise, it shows an empty string.')
netportVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportVlanPort.setStatus('current')
if mibBuilder.loadTexts: netportVlanPort.setDescription('If the port type is vlan, this field shows its vlan port.\n\t\t Otherwise, it shows an empty string.')
netportVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportVlanTag.setStatus('current')
if mibBuilder.loadTexts: netportVlanTag.setDescription('If the port type is vlan, this field shows its vlan tag.\n\t\t Otherwise, it shows an empty string.')
netportFlowcontrolAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undef", 0), ("none", 1), ("receive", 2), ("send", 3), ("full", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportFlowcontrolAdmin.setStatus('current')
if mibBuilder.loadTexts: netportFlowcontrolAdmin.setDescription('The flowcontrol of the port set by an administrator.\n\t\t It can be either undef(0), none(1), receive(2), send(3), or full(4).')
netportFlowcontrolOper = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undef", 0), ("none", 1), ("receive", 2), ("send", 3), ("full", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportFlowcontrolOper.setStatus('current')
if mibBuilder.loadTexts: netportFlowcontrolOper.setDescription('The flowcontrol that appears on the port.\n\t\t It can be either undef(0), none(1), receive(2), send(3), or full(4).')
netportAutorevertDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportAutorevertDelay.setStatus('current')
if mibBuilder.loadTexts: netportAutorevertDelay.setDescription('If the port is designated as a cluster port, this field shows\n\t\tthe delay in seconds before auto reverting a LIF to this port.\n\t\totherwise, it shows an empty string.')
netportRemoteDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportRemoteDeviceId.setStatus('current')
if mibBuilder.loadTexts: netportRemoteDeviceId.setDescription('Remote device ID discovered by L2 protocol.')
netportIPspace = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIPspace.setStatus('current')
if mibBuilder.loadTexts: netportIPspace.setDescription('IPspace where the port is assigned.')
netportBroadcastDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportBroadcastDomain.setStatus('current')
if mibBuilder.loadTexts: netportBroadcastDomain.setDescription('Broadcast Domain of the port is assigned.')
netportMtuAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportMtuAdmin.setStatus('current')
if mibBuilder.loadTexts: netportMtuAdmin.setDescription('The Maximum Transmission Unit (MTU) set by the Administrator\n\t\t (in bytes) of the largest packet that is supported by the\n\t\t port.')
netportIfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 3), )
if mibBuilder.loadTexts: netportIfGrpTable.setStatus('current')
if mibBuilder.loadTexts: netportIfGrpTable.setDescription('A table of if-groups, where each entry represents an interface \n\t\t of the group.')
netportIfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "netportIfGrpNode"), (0, "NETAPP-MIB", "netportIfGrpName"))
if mibBuilder.loadTexts: netportIfGrpEntry.setStatus('current')
if mibBuilder.loadTexts: netportIfGrpEntry.setDescription('If-group entry.')
netportIfGrpNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpNode.setStatus('current')
if mibBuilder.loadTexts: netportIfGrpNode.setDescription('The node that the If-group belongs to.')
netportIfGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpName.setStatus('current')
if mibBuilder.loadTexts: netportIfGrpName.setDescription('The name of the if-group.')
netportIfGrpDistrFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mac", 0), ("ip", 1), ("sequential", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpDistrFunc.setStatus('current')
if mibBuilder.loadTexts: netportIfGrpDistrFunc.setDescription('The distribute function of the if-group. \n\t\t This function is used to pick the forwarding port for a packet. \n\t\t It can be either mac(0), ip(1), or sequential(2). The mac function selects \n\t\t the port based on the hash of the MAC address of the destination. \n\t\t Instead of MAC address, the ip function uses IP address. \n\t\t The sequential function uses the round-robin port selection.')
netportIfGrpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("multimode", 0), ("multimode-lacp", 1), ("singlemode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpMode.setStatus('current')
if mibBuilder.loadTexts: netportIfGrpMode.setDescription('The policy of the if-group. It can be either multimode(0), \n\t\t multimode-lacp(1), or single-mode(2). The multimode policy uses the \n\t\t static link-aggregation, while the multimode-lacp uses the \n\t\t link-aggregation with lacp (Link Aggregate Control Protocol).\n\t\t The single mode does not use link-aggregation.')
netportIfGrpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpMac.setStatus('current')
if mibBuilder.loadTexts: netportIfGrpMac.setDescription('The MAC address of the if-group.')
netportIfGrpActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("full", 0), ("partial", 1), ("none", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpActivePorts.setStatus('current')
if mibBuilder.loadTexts: netportIfGrpActivePorts.setDescription('The participation of the network ports in the if-group.\n\t\t It can be full, partial, and none.')
netportIfGrpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpPorts.setStatus('current')
if mibBuilder.loadTexts: netportIfGrpPorts.setDescription('A list of network ports that participate in the if-group.')
netportIfGrpUpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpUpPorts.setStatus('current')
if mibBuilder.loadTexts: netportIfGrpUpPorts.setDescription("A list of network ports that are 'UP' in the if-group.")
netportIfGrpDownPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpDownPorts.setStatus('current')
if mibBuilder.loadTexts: netportIfGrpDownPorts.setDescription("A list of network ports that are 'DOWN' in the if-group.")
logicalInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 4), )
if mibBuilder.loadTexts: logicalInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceTable.setDescription('A list of logical interface entries.')
logicalInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1), ).setIndexNames((0, "NETAPP-MIB", "logicalInterfaceServer"), (0, "NETAPP-MIB", "logicalInterfaceVif"))
if mibBuilder.loadTexts: logicalInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceEntry.setDescription('Logical interface entry.')
logicalInterfaceServer = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceServer.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceServer.setDescription('The node where the logical interface belongs to.')
logicalInterfaceVif = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceVif.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceVif.setDescription('The name of the logical interface.')
logicalInterfaceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undef", 0), ("cluster", 1), ("data", 2), ("node-mgmt", 3), ("intercluster", 4), ("cluster-mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceRole.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceRole.setDescription('The role of logical interface. An interface can have one of the following roles:\n\t\t undef(0), cluster(1), data(2), mgmt(3), intercluster(4), and cluster-mgmt(5). \n\t\t The cluster interface is used to communicate\n\t\t to other node(s) in the cluster. The data interface services \n\t\t external clients where all the file requests come in. \n\t\t The management interface is used by administrator to manage resources\n\t\t within a node. The intercluster interface is used to communicate to other cluster. \n\t\t The cluster-mgmt port is used to manage resources within the cluster.\n\t\t The undef role is for the interface that has not yet been assigned a role.')
logicalInterfaceHomeNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceHomeNode.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceHomeNode.setDescription('The home node of the interface where the interface is initially setup.')
logicalInterfaceHomePort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceHomePort.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceHomePort.setDescription('The home port of the interface where the interface is initially setup.')
logicalInterfaceCurrNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceCurrNode.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceCurrNode.setDescription('The node where the interface is currently on.')
logicalInterfaceCurrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceCurrPort.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceCurrPort.setDescription('The port where the interface is currently attached to.')
logicalInterfaceStatusOper = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceStatusOper.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceStatusOper.setDescription('The operational status, which can be UP(0) or DOWN(1).')
logicalInterfaceNumericId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceNumericId.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceNumericId.setDescription('The interface ID.')
logicalInterfaceIsHome = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 10), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceIsHome.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceIsHome.setDescription('Indicates whether the interface is at the home node.')
logicalInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceAddress.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceAddress.setDescription('The IP address assigned to the interface. This field only\n\t\tdisplays ipv4 addresses correctly. Ipv6 addresses will display as\n\t\t0.0.0.0. Refer to the logicalInterfaceAddressString field for\n\t\tthe address of an ipv6 interface.')
logicalInterfaceNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceNetmask.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceNetmask.setDescription('The netmask assigned to the interface. This field only\n\t\tdisplays ipv4 netmasks correctly. Ipv6 netmasks will display as\n\t\t0.0.0.0. Refer to the logicalInterfaceAddressString field for\n\t\tthe netmask length of an ipv6 interface.')
logicalInterfaceNetmaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceNetmaskLength.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceNetmaskLength.setDescription('The number of set bits of the netmask.')
logicalInterfaceRoutingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceRoutingGroup.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceRoutingGroup.setDescription("The interface's routing group name")
logicalInterfaceStatusAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceStatusAdmin.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceStatusAdmin.setDescription('The status of the interface assigned by an administrator.\n\t\t It can be either UP(0) or DOWN(1).')
logicalInterfaceFailoverPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("next-avail", 0), ("priority", 1), ("disabled", 2), ("system-defined", 3), ("local-only", 4), ("sfo-partner-only", 5), ("ipspace-wide", 6), ("broadcast-domain-wide", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceFailoverPolicy.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceFailoverPolicy.setDescription("The interface's failover policy. \n\t\t It can be next-available(0), where the interface will failover to any \n\t\t next available interface, priority(1), where the interface will failover to\n\t\t the interface that has the highest priority, or disabled(2).")
logicalInterfaceFirewallPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceFirewallPolicy.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceFirewallPolicy.setDescription('The firewall policy of the interface.')
logicalInterfaceAutoRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 18), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceAutoRevert.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceAutoRevert.setDescription("Indicates whether the auto-revert property of the interface is set.\n\t\t If the value is 'true', the interface will automatically revert back to the home port\n\t\t whenever the interface is not on the home port and the home port becomes operational.")
logicalInterfaceSticky = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 19), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceSticky.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceSticky.setDescription("Indicates whether the sticky bit is set. It is the readonly field that is set by\n\t\t the system. When it is set, the interface's auto-revert is disabled.\n\t\t It is set when the interface is migrated manually, so that it will not\n\t\t auto-revert to the home port.")
logicalInterfaceUseFailoverGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("system-defined", 0), ("disabled", 1), ("enabled", 2), ("unused", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceUseFailoverGroup.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceUseFailoverGroup.setDescription("The field identifies whether the interface's failover is system-defined(0),\n\t\t set to 'enabled'(1) or 'disable'(2).")
logicalInterfaceDnsZone = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceDnsZone.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceDnsZone.setDescription("The interface's DNS Zone")
logicalInterfaceAllowLbMigrate = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 22), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceAllowLbMigrate.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceAllowLbMigrate.setDescription('Indicates whether the load balancing migration \n\t\t is enabled for the interface.')
logicalInterfaceLbWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 100, 101))).clone(namedValues=NamedValues(("min-weight", 0), ("max-weight", 100), ("load", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceLbWeight.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceLbWeight.setDescription('The load balancing weight of the interface. \n\t\t It can be either minimum (0), maximum(100), or load(101).')
logicalInterfaceFailoverGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceFailoverGroup.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceFailoverGroup.setDescription("The interface failover group's name.")
logicalInterfaceStatusVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceStatusVserver.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceStatusVserver.setDescription('The status of the interface with respect to its Vserver.\n\t\t It can be either UP(0) or DOWN(1).')
logicalInterfaceDataProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceDataProtocol.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceDataProtocol.setDescription('A list of data protocols.')
logicalInterfaceFcpWwpn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceFcpWwpn.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceFcpWwpn.setDescription('The WWPN of a FCP data LIF.')
logicalInterfaceComment = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceComment.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceComment.setDescription('A comment to further identify a LIF.')
logicalInterfaceListenForDnsQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 29), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceListenForDnsQuery.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceListenForDnsQuery.setDescription('Indicates whether the LIF has to listen for DNS\n\t\t queries for load-balancing.')
logicalInterfaceAddressString = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceAddressString.setStatus('current')
if mibBuilder.loadTexts: logicalInterfaceAddressString.setDescription('The IP address assigned to the interface. This field displays\n\t\tproperly for both ipv4 addresses as well as ipv6 addresses. \n\t\tFormat: <ip address>/<netmask length>')
netOpts = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22, 5))
netOptsv6Table = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22, 5, 1))
netOptsv6Enabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 22, 5, 1, 1), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netOptsv6Enabled.setStatus('current')
if mibBuilder.loadTexts: netOptsv6Enabled.setDescription('Indicates whether the cluster supports IPv6.')
netOptsv6RAProcEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 22, 5, 1, 2), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netOptsv6RAProcEnabled.setStatus('current')
if mibBuilder.loadTexts: netOptsv6RAProcEnabled.setDescription('Indicates whether the cluster supports IPv6 Router\n\t\tAdvertisement Processing.')
netOptsSwitchlessCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22, 5, 2))
netOptsSwitchlessClusterEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 22, 5, 2, 1), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netOptsSwitchlessClusterEnabled.setStatus('current')
if mibBuilder.loadTexts: netOptsSwitchlessClusterEnabled.setDescription('Indicates whether the cluster network is switchless.')
ipspaceTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 6), )
if mibBuilder.loadTexts: ipspaceTable.setStatus('current')
if mibBuilder.loadTexts: ipspaceTable.setDescription('A table of IPspaces, where each entry represents an IPspace.')
ipspaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 6, 1), ).setIndexNames((1, "NETAPP-MIB", "ipspaceName"))
if mibBuilder.loadTexts: ipspaceEntry.setStatus('current')
if mibBuilder.loadTexts: ipspaceEntry.setDescription('IPspace entry.')
ipspaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspaceName.setStatus('current')
if mibBuilder.loadTexts: ipspaceName.setDescription('The IPspace name.')
ipspaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspaceID.setStatus('current')
if mibBuilder.loadTexts: ipspaceID.setDescription('The Identifier of the IPspace.')
ipspacePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspacePorts.setStatus('current')
if mibBuilder.loadTexts: ipspacePorts.setDescription('The network ports assigned to the IPspace of the form {node1:port1},{node2:port2}.')
ipspaceBroadcastDomains = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspaceBroadcastDomains.setStatus('current')
if mibBuilder.loadTexts: ipspaceBroadcastDomains.setDescription('The broadcast domains for the IPspace.')
ipspaceVservers = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspaceVservers.setStatus('current')
if mibBuilder.loadTexts: ipspaceVservers.setDescription('The vservers assigned to the IPspace of the form {vs1,vs2}.')
vsRouteTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 7), )
if mibBuilder.loadTexts: vsRouteTable.setStatus('current')
if mibBuilder.loadTexts: vsRouteTable.setDescription('A table of vserver routes, where each entry represents a vserver route.')
vsRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 7, 1), ).setIndexNames((0, "NETAPP-MIB", "vsRouteVserverID"), (1, "NETAPP-MIB", "vsRouteUuid"))
if mibBuilder.loadTexts: vsRouteEntry.setStatus('current')
if mibBuilder.loadTexts: vsRouteEntry.setDescription('Vsroutes entry.')
vsRouteVserverID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRouteVserverID.setStatus('current')
if mibBuilder.loadTexts: vsRouteVserverID.setDescription('The vserver of the vserver route.')
vsRouteUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRouteUuid.setStatus('current')
if mibBuilder.loadTexts: vsRouteUuid.setDescription('The Uuid of the vserver route.')
vsRouteDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRouteDestination.setStatus('current')
if mibBuilder.loadTexts: vsRouteDestination.setDescription('The destination of the vserver route.')
vsRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRouteGateway.setStatus('current')
if mibBuilder.loadTexts: vsRouteGateway.setDescription('The gateway of the vserver route.')
vsRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRouteMetric.setStatus('current')
if mibBuilder.loadTexts: vsRouteMetric.setDescription('The metric of the vserver route.')
vsRouteAddressFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRouteAddressFamily.setStatus('current')
if mibBuilder.loadTexts: vsRouteAddressFamily.setDescription('The address family of the vserver route.')
vsFailoverGroupTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 8), )
if mibBuilder.loadTexts: vsFailoverGroupTable.setStatus('current')
if mibBuilder.loadTexts: vsFailoverGroupTable.setDescription('A table of logical interface failover groups, where each entry\n\t\trepresents a logical interface failover group.')
vsFailoverGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 8, 1), ).setIndexNames((0, "NETAPP-MIB", "vsFailoverGroupVserverID"), (1, "NETAPP-MIB", "vsFailoverGroupName"))
if mibBuilder.loadTexts: vsFailoverGroupEntry.setStatus('current')
if mibBuilder.loadTexts: vsFailoverGroupEntry.setDescription('VsFailoverGroup entry.')
vsFailoverGroupVserverID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFailoverGroupVserverID.setStatus('current')
if mibBuilder.loadTexts: vsFailoverGroupVserverID.setDescription('The vserver of the failover group.')
vsFailoverGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFailoverGroupName.setStatus('current')
if mibBuilder.loadTexts: vsFailoverGroupName.setDescription('The name of the failover group.')
vsFailoverGroupTargets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFailoverGroupTargets.setStatus('current')
if mibBuilder.loadTexts: vsFailoverGroupTargets.setDescription('The failover targets of the failover group.')
vsFirewallPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 9), )
if mibBuilder.loadTexts: vsFirewallPolicyTable.setStatus('current')
if mibBuilder.loadTexts: vsFirewallPolicyTable.setDescription('A table of firewall policies, where each entry represents a\n\t\tfirewall policy.')
vsFirewallPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 9, 1), ).setIndexNames((0, "NETAPP-MIB", "vsFirewallPolicyVserverID"), (1, "NETAPP-MIB", "vsFirewallPolicyUuid"))
if mibBuilder.loadTexts: vsFirewallPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: vsFirewallPolicyEntry.setDescription('Vsfailovergroups entry.')
vsFirewallPolicyVserverID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFirewallPolicyVserverID.setStatus('current')
if mibBuilder.loadTexts: vsFirewallPolicyVserverID.setDescription('The vserver on which this firewall policy is defined.')
vsFirewallPolicyUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFirewallPolicyUuid.setStatus('current')
if mibBuilder.loadTexts: vsFirewallPolicyUuid.setDescription('The unique identifier for this firewall policy.')
vsFirewallPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFirewallPolicyName.setStatus('current')
if mibBuilder.loadTexts: vsFirewallPolicyName.setDescription('The name of this firewall policy.')
vsFirewallPolicyService = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFirewallPolicyService.setStatus('current')
if mibBuilder.loadTexts: vsFirewallPolicyService.setDescription('The service that this firewall policy is restricting access to.')
vsFirewallPolicyAllowList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFirewallPolicyAllowList.setStatus('current')
if mibBuilder.loadTexts: vsFirewallPolicyAllowList.setDescription('The list of source IPs that are allowed to access the\n\t\tunderlying service of this firewall policy.')
broadcastDomainTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 10), )
if mibBuilder.loadTexts: broadcastDomainTable.setStatus('current')
if mibBuilder.loadTexts: broadcastDomainTable.setDescription('A table of broadcast domains, where each entry represents a broadcast domain.')
broadcastDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 10, 1), ).setIndexNames((0, "NETAPP-MIB", "broadcastDomainIpspaceName"), (0, "NETAPP-MIB", "broadcastDomainName"))
if mibBuilder.loadTexts: broadcastDomainEntry.setStatus('current')
if mibBuilder.loadTexts: broadcastDomainEntry.setDescription('Broadcast domain entry.')
broadcastDomainIpspaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastDomainIpspaceName.setStatus('current')
if mibBuilder.loadTexts: broadcastDomainIpspaceName.setDescription('The IPspace name.')
broadcastDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastDomainName.setStatus('current')
if mibBuilder.loadTexts: broadcastDomainName.setDescription('The broadcast domain name.')
broadcastDomainMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastDomainMTU.setStatus('current')
if mibBuilder.loadTexts: broadcastDomainMTU.setDescription('MTU of the broadcast domain.')
broadcastDomainPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastDomainPorts.setStatus('current')
if mibBuilder.loadTexts: broadcastDomainPorts.setDescription('The network ports assigned to the broadcast domain of the form {node1:port1},{node2:port2}.')
broadcastDomainFailoverGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastDomainFailoverGroups.setStatus('current')
if mibBuilder.loadTexts: broadcastDomainFailoverGroups.setDescription('The failover groups for the broadcast domain of the form {fg1,fg2}.')
broadcastDomainSubnets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastDomainSubnets.setStatus('current')
if mibBuilder.loadTexts: broadcastDomainSubnets.setDescription('The subnets associated with this broadcast domain.')
subnetTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 11), )
if mibBuilder.loadTexts: subnetTable.setStatus('current')
if mibBuilder.loadTexts: subnetTable.setDescription('A table of Subnets, where each entry represents a Subnet.')
subnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1), ).setIndexNames((0, "NETAPP-MIB", "subnetIpspaceName"), (0, "NETAPP-MIB", "subnetName"))
if mibBuilder.loadTexts: subnetEntry.setStatus('current')
if mibBuilder.loadTexts: subnetEntry.setDescription('Subnet entry.')
subnetIpspaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetIpspaceName.setStatus('current')
if mibBuilder.loadTexts: subnetIpspaceName.setDescription('The IPspace name.')
subnetBroadcastDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetBroadcastDomainName.setStatus('current')
if mibBuilder.loadTexts: subnetBroadcastDomainName.setDescription('The broadcast domain name.')
subnetName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetName.setStatus('current')
if mibBuilder.loadTexts: subnetName.setDescription('The Subnet name.')
subnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
if mibBuilder.loadTexts: subnetMask.setDescription('Subnet IP and Mask.')
subnetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetGateway.setStatus('current')
if mibBuilder.loadTexts: subnetGateway.setDescription('Subnet Gateway IP.')
subnetIpRanges = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetIpRanges.setStatus('current')
if mibBuilder.loadTexts: subnetIpRanges.setDescription('Subnet IP Ranges.')
subnetTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetTotalCount.setStatus('current')
if mibBuilder.loadTexts: subnetTotalCount.setDescription('Total address count for all ranges.')
subnetUsedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetUsedCount.setStatus('current')
if mibBuilder.loadTexts: subnetUsedCount.setDescription('Used address count for all ranges.')
subnetAvailableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetAvailableCount.setStatus('current')
if mibBuilder.loadTexts: subnetAvailableCount.setDescription('Available address count for all ranges.')
sisIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisIsLicensed.setStatus('current')
if mibBuilder.loadTexts: sisIsLicensed.setDescription('Indicates whether Advanced SIS is licensed on the\n\t\t\tfiler.')
sisTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 23, 2), )
if mibBuilder.loadTexts: sisTable.setStatus('current')
if mibBuilder.loadTexts: sisTable.setDescription('Provide a list of the SIS volumes on the\n\t\t\t system.')
sisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "sisIndex"))
if mibBuilder.loadTexts: sisEntry.setStatus('current')
if mibBuilder.loadTexts: sisEntry.setDescription('Provide details about a particular SIS volume.\n\t\t\t For entries returned only from the cluster\n\t\t\t interfaces, the value of sisRowAvailable needs to be\n\t\t\t 1, for the contents of the row to be valid.')
sisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisIndex.setStatus('current')
if mibBuilder.loadTexts: sisIndex.setDescription('A number that identifies this entry for the\n\t\t\t\t SIS volume.')
sisPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisPath.setStatus('current')
if mibBuilder.loadTexts: sisPath.setDescription('The path to the SIS volume.')
sisState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisState.setStatus('current')
if mibBuilder.loadTexts: sisState.setDescription('Indicates whether SIS is enabled on the\n\t\t\t\t volume or not.')
sisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("active", 2), ("undoing", 3), ("pending", 4), ("initializing", 5), ("downgrading", 6), ("disabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisStatus.setStatus('current')
if mibBuilder.loadTexts: sisStatus.setDescription('Current status of the SIS volume.')
sisProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisProgress.setStatus('current')
if mibBuilder.loadTexts: sisProgress.setDescription('The progress of the current SIS operation.')
sisType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("snapvault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisType.setStatus('current')
if mibBuilder.loadTexts: sisType.setDescription('Indicates whether it is a regular or\n\t\t\t\t snapvaulted SIS volume.')
sisSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisSchedule.setStatus('current')
if mibBuilder.loadTexts: sisSchedule.setDescription('The schedule for the SIS operations.')
sisLastOpBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastOpBeginTime.setStatus('current')
if mibBuilder.loadTexts: sisLastOpBeginTime.setDescription('The starting time of the last completed SIS\n\t\t\t\t operation.')
sisLastOpEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastOpEndTime.setStatus('current')
if mibBuilder.loadTexts: sisLastOpEndTime.setDescription('The ending time of the last completed SIS\n\t\t\t\t operation.')
sisHighLastOpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisHighLastOpSize.setStatus('deprecated')
if mibBuilder.loadTexts: sisHighLastOpSize.setDescription('The total amount of data in KBytes that the\n\t\t\t\t last completed SIS operation had processed.\n\t\t\t\t This object returns the most significant 32\n\t\t\t\t bits of the 64 bit unsigned integer. This object \n\t\t\t\t is deprecated - Use sis64LastOpSize instead.')
sisLowLastOpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLowLastOpSize.setStatus('deprecated')
if mibBuilder.loadTexts: sisLowLastOpSize.setDescription('The total amount of data in KBytes that the\n\t\t\t\t last completed SIS operation had processed.\n\t\t\t\t This object returns the least significant 32\n\t\t\t\t bits of the 64 bit unsigned integer. This object \n\t\t\t\t is deprecated - Use sis64LastOpSize instead.')
sisLastOpError = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastOpError.setStatus('current')
if mibBuilder.loadTexts: sisLastOpError.setDescription('The error that the last SIS operation\n\t\t\t\t encountered if it failed.')
sis64LastOpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sis64LastOpSize.setStatus('current')
if mibBuilder.loadTexts: sis64LastOpSize.setDescription('The total amount of data in KBytes that the\n\t\t\t\t last completed SIS operation had processed.\n\t\t\t\t This object returns all of the 64 bit \n\t\t\t\t unsigned integer.')
sisIsCompressionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 14), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisIsCompressionEnabled.setStatus('current')
if mibBuilder.loadTexts: sisIsCompressionEnabled.setDescription('Indicates whether background compression is enabled on \n\t\t\t\tthe volume or not.')
sisIsInlineEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 15), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisIsInlineEnabled.setStatus('current')
if mibBuilder.loadTexts: sisIsInlineEnabled.setDescription('Indicates whether inline compression is enabled on\n                the volume or not')
sisVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisVserver.setStatus('current')
if mibBuilder.loadTexts: sisVserver.setDescription('Vserver owning the Storage efficiency volume. \n\t\t\t\tThis entry is only available from the cluster interface.')
sisPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisPolicy.setStatus('current')
if mibBuilder.loadTexts: sisPolicy.setDescription('Storage efficiency policy name set on the volume.\n\t\t\t\tThis entry is only available from the cluster interface.')
sisRowAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 18), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisRowAvailable.setStatus('current')
if mibBuilder.loadTexts: sisRowAvailable.setDescription('Indicates if other fields in this entry are available. \n\t\tThis field is returned only from the cluster interfaces.\n\t\tIf something goes wrong while fetching the values for\n\t\tfields in this table, the values returned may not be valid.\n\t\tThe volume returned may not be a SIS volume.\n                For fields that could not be fetched, default\n                values are set. For integers it is -1, for\n                counters 0, and for string it is null.')
sisMinBlocksShared = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisMinBlocksShared.setStatus('current')
if mibBuilder.loadTexts: sisMinBlocksShared.setDescription("The minimum number of contiguous blocks in a file\n                           that will be considered for block sharing.\n                           If the number of contiguous duplicate blocks is\n                           less than this number, then they won't be considered\n\t\t\t   for sharing.")
sisBlocksSkippedSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisBlocksSkippedSharing.setStatus('current')
if mibBuilder.loadTexts: sisBlocksSkippedSharing.setDescription('Number of blocks not considered for sharing because \n                         contiguous duplicate blocks were less than the value\n\t\t\t set for sisMinBlocksShared.')
sisChangelogUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisChangelogUsedPercent.setStatus('current')
if mibBuilder.loadTexts: sisChangelogUsedPercent.setDescription('Percentage of changelog used.')
sisLastSuccessfulOpBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastSuccessfulOpBeginTime.setStatus('current')
if mibBuilder.loadTexts: sisLastSuccessfulOpBeginTime.setDescription('The starting time of the last successful SIS\n\t\t\t\t operation.')
sisLastSuccessfulOpEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastSuccessfulOpEndTime.setStatus('current')
if mibBuilder.loadTexts: sisLastSuccessfulOpEndTime.setDescription('The ending time of the last successful SIS\n\t\t\t\t operation.')
sisLastOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastOpState.setStatus('current')
if mibBuilder.loadTexts: sisLastOpState.setDescription('The state of the last SIS operation.')
sisLogicalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLogicalSize.setStatus('current')
if mibBuilder.loadTexts: sisLogicalSize.setDescription('The size of logical data in the volume in bytes. \n\t\tThis may be calculated approximately using these fields in dfTable MIB\n\t\t[df64DedupeSaved +  df64CompressSaved + df64SisSharedKBytes * 1024].')
sisLogicalLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLogicalLimit.setStatus('current')
if mibBuilder.loadTexts: sisLogicalLimit.setDescription('Indicates  SIS logical limit for the volume.\n\t\t It is equal to WAFL maximum nominal size of 64bit\n\t\t volume.')
sisQueuedJob = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisQueuedJob.setStatus('current')
if mibBuilder.loadTexts: sisQueuedJob.setDescription("Indicates type of sis operation that is queued for the\n\t\t volume. Possible values: 'scan', 'start', 'check', 'downgrade'.")
sisStaleFpPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisStaleFpPercentage.setStatus('current')
if mibBuilder.loadTexts: sisStaleFpPercentage.setDescription('Indicates percentage of fingerprints that are stale in \n\t\tthe fingerprint database. It can be more than 100%, if blocks are \n\t\toverwritten or deleted.')
sisIsIddEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 29), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisIsIddEnabled.setStatus('current')
if mibBuilder.loadTexts: sisIsIddEnabled.setDescription('Indicates Incompressible data detection is enabled on\n\t\tcompressed volume.')
sisQuickCheckFsize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisQuickCheckFsize.setStatus('current')
if mibBuilder.loadTexts: sisQuickCheckFsize.setDescription('Compression quick check file size. If Incompressible data\n\t\tdetection is enabled and if the file size is >=\n\t\tquick-check-fsize, inline compression will do a 4k\n\t\tquick check before doing full CG compression.')
sisIsConstituent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 31), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisIsConstituent.setStatus('current')
if mibBuilder.loadTexts: sisIsConstituent.setDescription('Indicates whether the volume is a constituent or not.')
compressIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressIsLicensed.setStatus('deprecated')
if mibBuilder.loadTexts: compressIsLicensed.setDescription('Indicates whether compression is licensed on \n\t\t\t\tthe filer.')
compressTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 24, 2), )
if mibBuilder.loadTexts: compressTable.setStatus('deprecated')
if mibBuilder.loadTexts: compressTable.setDescription('Provide a report of the total space used as \n\t\t\t\t well as the space saved by compression on \n\t\t\t\t volumes.')
compressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "compressIndex"))
if mibBuilder.loadTexts: compressEntry.setStatus('deprecated')
if mibBuilder.loadTexts: compressEntry.setDescription('Provide a report of the total space used as \n\t\t\t\t well as the space saved by compression on \n\t\t\t\t the referenced file system.')
compressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressIndex.setStatus('deprecated')
if mibBuilder.loadTexts: compressIndex.setDescription('A number that identifies this entry for the\n\t\t\t \treferenced file system.')
compressFileSys = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressFileSys.setStatus('deprecated')
if mibBuilder.loadTexts: compressFileSys.setDescription('The name for the referenced file system.')
compressHighUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressHighUsedKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: compressHighUsedKBytes.setDescription('The total disk space in KBytes that is in use\n\t\t\t\t on the referenced file system.  This object \n\t\t\t\t returns the most significant 32 bits of the 64 \n\t\t\t\t bit unsigned integer. This object is \n\t\t\t\t deprecated - Use compress64UsedKBytes instead.')
compressLowUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressLowUsedKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: compressLowUsedKBytes.setDescription('The total disk space in KBytes that is in use\n\t\t\t\t on the referenced file system.  This object \n\t\t\t\t returns the least significant 32 bits of the \n\t\t\t\t 64 bit unsigned integer. This object is \n\t\t\t\t deprecated - Use compress64UsedKBytes instead.')
compress64UsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compress64UsedKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: compress64UsedKBytes.setDescription('The total disk space in KBytes that is in use\n\t\t\t\t on the referenced file system. This object \n\t\t\t\t returns all of the 64 bit unsigned integer.')
compressHighSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressHighSavedKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: compressHighSavedKBytes.setDescription('The disk space in KBytes of disk space that\n\t\t\t\t is saved by compression on the referenced \n\t\t\t\t file system. This object returns the most\n\t\t\t\t significant 32 bits of the 64 bit unsigned \n\t\t\t\t integer. This object is deprecated - Use \n\t\t\t\t compress64SavedKBytes instead.')
compressLowSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressLowSavedKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: compressLowSavedKBytes.setDescription('The disk space in KBytes of disk space that\n\t\t\t\t is saved by compression on the referenced \n\t\t\t\t filesystem. This object returns the least \n\t\t\t\t significant 32 bits of the 64 bit unsigned \n\t\t\t\t integer. This object is deprecated - Use \n\t\t\t\t compress64SavedKBytes instead.')
compress64SavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compress64SavedKBytes.setStatus('deprecated')
if mibBuilder.loadTexts: compress64SavedKBytes.setDescription('The disk space in KBytes of disk space that\n\t\t\t\t is saved by compression on the referenced \n\t\t\t\t filesystem. This object returns all of the \n\t\t\t\t 64 bit unsigned integer.')
compressPercentSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressPercentSaved.setStatus('deprecated')
if mibBuilder.loadTexts: compressPercentSaved.setDescription('The percentage of disk space saved by\n\t\t\t\t compression on the referenced filesystem.')
extcacheType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcacheType.setStatus('current')
if mibBuilder.loadTexts: extcacheType.setDescription('Indicates the type of external cache being used.\n\t\t\t\tExamples are none, PCS, IOMEM.')
extcacheSubType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcacheSubType.setStatus('current')
if mibBuilder.loadTexts: extcacheSubType.setDescription('Indicates the sub-type of external cache being used.\n\t\t\t\tExamples are none, PAM1, PAM2.')
extcache64Uptime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Uptime.setStatus('current')
if mibBuilder.loadTexts: extcache64Uptime.setDescription('Indicates the uptime of the external cache.')
extcache64Size = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Size.setStatus('current')
if mibBuilder.loadTexts: extcache64Size.setDescription('Indicates size of the external cache in bytes.')
extcache64Usedsize = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Usedsize.setStatus('current')
if mibBuilder.loadTexts: extcache64Usedsize.setDescription('Indicates number of bytes used in the external cache.')
extcache64TotalBuffers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64TotalBuffers.setStatus('current')
if mibBuilder.loadTexts: extcache64TotalBuffers.setDescription('Indicates total number of 4k blocks in the external cache.')
extcacheOptions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcacheOptions.setStatus('current')
if mibBuilder.loadTexts: extcacheOptions.setDescription('Indicates external cache options that are\n\t\t\t\tcurrently turned on. ')
extcache64Hits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Hits.setStatus('current')
if mibBuilder.loadTexts: extcache64Hits.setDescription('Indicates number of wafl buffers read from \n\t\t\t\tthe external cache')
extcache64Misses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Misses.setStatus('current')
if mibBuilder.loadTexts: extcache64Misses.setDescription('Indicates the number of external cache misses')
extcache64Inserts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Inserts.setStatus('current')
if mibBuilder.loadTexts: extcache64Inserts.setDescription('Indicates number of wafl buffers inserted \n\t\t\t\tinto the external cache')
extcache64Evicts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Evicts.setStatus('current')
if mibBuilder.loadTexts: extcache64Evicts.setDescription('Indicates the number of buffers evicted \n\t\t\t\tfrom the external cache')
extcache64Invalidates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Invalidates.setStatus('current')
if mibBuilder.loadTexts: extcache64Invalidates.setDescription('Indicates the number of buffers invalidated\n\t\t\t       \tin the external cache')
extcache64BlocksRef0 = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64BlocksRef0.setStatus('current')
if mibBuilder.loadTexts: extcache64BlocksRef0.setDescription('Indicates the number of non-referenced buffers\n\t\t\t       \tcurrently in the external cache')
extcache64HitNormalL0 = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64HitNormalL0.setStatus('current')
if mibBuilder.loadTexts: extcache64HitNormalL0.setDescription('Indicates the number of L0 buffers read from\n\t\t\t\tthe external cache')
extcache64MetaData = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64MetaData.setStatus('current')
if mibBuilder.loadTexts: extcache64MetaData.setDescription('Indicates the number of metadata buffers \n\t\t\t\tread from the external cache')
extcache64ReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64ReadLatency.setStatus('current')
if mibBuilder.loadTexts: extcache64ReadLatency.setDescription('Indicates the average latency of read IOs \n\t\t\t\tin the external cache in milliseconds')
extcache64WriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64WriteLatency.setStatus('current')
if mibBuilder.loadTexts: extcache64WriteLatency.setDescription('Indicates the average latency of write IOs\n\t\t\t       \tin the external cache in milliseconds')
extcache64RCLength = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64RCLength.setStatus('current')
if mibBuilder.loadTexts: extcache64RCLength.setDescription('Indicates the average read chain length \n\t\t\t\tin the external cache')
extcache64WCLength = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64WCLength.setStatus('current')
if mibBuilder.loadTexts: extcache64WCLength.setDescription('Indicates the average write chain length\n\t\t\t       \tin the external cache')
extcacheIsFlexShareOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcacheIsFlexShareOn.setStatus('current')
if mibBuilder.loadTexts: extcacheIsFlexShareOn.setDescription('Indicates whether FlexShare is on')
qosWorkloadTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 28, 1), )
if mibBuilder.loadTexts: qosWorkloadTable.setStatus('current')
if mibBuilder.loadTexts: qosWorkloadTable.setDescription('QoS Workload Table.')
qosWorkloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1), ).setIndexNames((1, "NETAPP-MIB", "qosWorkloadName"))
if mibBuilder.loadTexts: qosWorkloadEntry.setStatus('current')
if mibBuilder.loadTexts: qosWorkloadEntry.setDescription('Entry for a QoS Workload.')
qosWorkloadUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadUuid.setStatus('current')
if mibBuilder.loadTexts: qosWorkloadUuid.setDescription('Workload Uuid')
qosWorkloadName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadName.setStatus('current')
if mibBuilder.loadTexts: qosWorkloadName.setDescription('Workload Name')
qosWorkloadClass = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("preset", 1), ("user-defined", 2), ("system-defined", 3), ("autovolume", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadClass.setStatus('current')
if mibBuilder.loadTexts: qosWorkloadClass.setDescription('Workload Class')
qosWorkloadId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadId.setStatus('current')
if mibBuilder.loadTexts: qosWorkloadId.setDescription('Workload ID')
qosWorkloadPolicyGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: qosWorkloadPolicyGroup.setDescription('Policy Group Uuid')
qosWorkloadVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadVserver.setStatus('current')
if mibBuilder.loadTexts: qosWorkloadVserver.setDescription('Vserver ID')
qosWorkloadVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadVolume.setStatus('current')
if mibBuilder.loadTexts: qosWorkloadVolume.setDescription('Volume Name')
qosWorkloadLun = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadLun.setStatus('current')
if mibBuilder.loadTexts: qosWorkloadLun.setDescription('LUN Name')
qosWorkloadFile = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadFile.setStatus('current')
if mibBuilder.loadTexts: qosWorkloadFile.setDescription('Filename')
qosWorkloadQtree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadQtree.setStatus('current')
if mibBuilder.loadTexts: qosWorkloadQtree.setDescription('Qtree')
qosWorkloadReadAhead = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadReadAhead.setStatus('current')
if mibBuilder.loadTexts: qosWorkloadReadAhead.setDescription('Readahead Tunables')
qosWorkloadCache = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadCache.setStatus('current')
if mibBuilder.loadTexts: qosWorkloadCache.setDescription('Ext Cache Tunables')
qosPolicyGroupTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 28, 2), )
if mibBuilder.loadTexts: qosPolicyGroupTable.setStatus('current')
if mibBuilder.loadTexts: qosPolicyGroupTable.setDescription('QoS Policy Group Table.')
qosPolicyGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 28, 2, 1), ).setIndexNames((1, "NETAPP-MIB", "qosPolicyGroupName"))
if mibBuilder.loadTexts: qosPolicyGroupEntry.setStatus('current')
if mibBuilder.loadTexts: qosPolicyGroupEntry.setDescription('Entry for a QoS Policy Group.')
qosPolicyGroupUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyGroupUuid.setStatus('current')
if mibBuilder.loadTexts: qosPolicyGroupUuid.setDescription('Policy Group Uuid')
qosPolicyGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyGroupName.setStatus('current')
if mibBuilder.loadTexts: qosPolicyGroupName.setDescription('Policy Group Name')
qosPolicyGroupPgid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyGroupPgid.setStatus('current')
if mibBuilder.loadTexts: qosPolicyGroupPgid.setDescription('Policy Group ID')
qosPolicyGroupClass = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("preset", 1), ("user-defined", 2), ("system-defined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyGroupClass.setStatus('current')
if mibBuilder.loadTexts: qosPolicyGroupClass.setDescription('Policy Group Class')
qosPolicyGroupMaxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyGroupMaxThroughput.setStatus('current')
if mibBuilder.loadTexts: qosPolicyGroupMaxThroughput.setDescription('Maximum Throughput')
qosPolicyGroupVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyGroupVserver.setStatus('current')
if mibBuilder.loadTexts: qosPolicyGroupVserver.setDescription('Vserver that the QoS Policy Group belongs to')
qosReadaheadSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 28, 3), )
if mibBuilder.loadTexts: qosReadaheadSettingsTable.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadSettingsTable.setDescription('Table of QoS Read-Ahead Settings.')
qosReadaheadSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1), ).setIndexNames((1, "NETAPP-MIB", "qosReadaheadSettingName"))
if mibBuilder.loadTexts: qosReadaheadSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadSettingsEntry.setDescription('Entry for a Read-Ahead Setting.')
qosReadaheadSettingName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadSettingName.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadSettingName.setDescription('Readahead Setting Name.')
qosReadaheadClass = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("preset", 1), ("user-defined", 2), ("system-defined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadClass.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadClass.setDescription('Readahead Setting Class.')
qosReadaheadDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 3), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadDefault.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadDefault.setDescription('Indicates if this is the default Read-Ahead Setting.')
qosReadaheadMinBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMinBlocks.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadMinBlocks.setDescription('Minimum Blocks to Speculate.')
qosReadaheadMaxBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMaxBlocks.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadMaxBlocks.setDescription('Maximum Blocks to Speculate.')
qosReadaheadAlignBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadAlignBlocks.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadAlignBlocks.setDescription('Block Alignment.')
qosReadaheadMaxGap = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMaxGap.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadMaxGap.setDescription('Maximum Speculative Blocks Outstanding.')
qosReadaheadMaxRange = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 40960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMaxRange.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadMaxRange.setDescription('Maximum Range Used When Aging Streams (Blocks.')
qosReadaheadMinRange = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 40960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMinRange.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadMinRange.setDescription('Minimum Range Used When Aging Streams (Blocks).')
qosReadaheadMaxDeadline = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000, 5000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMaxDeadline.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadMaxDeadline.setDescription('Maximum Deadline Offset (ms).')
qosReadaheadInterarrivalWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadInterarrivalWeight.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadInterarrivalWeight.setDescription('Weight for Interarrival Time Aging (%).')
qosReadaheadDiskResponseWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadDiskResponseWeight.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadDiskResponseWeight.setDescription('Weight for Disk Response Time Aging (%).')
qosReadaheadMinDiskResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 50000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMinDiskResponseTime.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadMinDiskResponseTime.setDescription('Minimum Disk Response Time (ms).')
qosReadaheadMaxDiskResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 50000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMaxDiskResponseTime.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadMaxDiskResponseTime.setDescription('Maximum Disk Response Time (ms)..')
qosReadaheadDiskResponseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadDiskResponseFactor.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadDiskResponseFactor.setDescription('Disk Response Time Factor.')
qosReadaheadOvershoot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadOvershoot.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadOvershoot.setDescription('Allowable Overshoot (%).')
qosReadaheadUseTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 17), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadUseTiming.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadUseTiming.setDescription('Use Timing Algorithms.')
qosReadaheadUseAsync = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 18), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadUseAsync.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadUseAsync.setDescription('Use Asynchronous Speculation.')
qosReadaheadMetadata = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 19), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMetadata.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadMetadata.setDescription('Do Metadata Speculation.')
qosReadaheadForceDump = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 20), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadForceDump.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadForceDump.setDescription('Force DUMP-Style Readahead.')
qosReadaheadForceFull = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 21), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadForceFull.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadForceFull.setDescription('Force Full-File Readahead.')
qosReadaheadForceNone = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 22), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadForceNone.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadForceNone.setDescription('Disable Readahead.')
qosReadaheadUseFeedback = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 23), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadUseFeedback.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadUseFeedback.setDescription('Provide Cache-Miss Feedback.')
qosReadaheadSmallFileBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadSmallFileBlocks.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadSmallFileBlocks.setDescription('Maximum Blocks for Small-File Handling.')
qosReadaheadMetadataBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMetadataBlocks.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadMetadataBlocks.setDescription('Minimum Blocks for Which Metadata is Predicted.')
qosReadaheadEarlyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadEarlyCount.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadEarlyCount.setDescription('Number of IO Operations Cautiously Predicted.')
qosReadaheadJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadJitter.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadJitter.setDescription('Threshold for Detecting Jitter (%).')
qosReadaheadMinRetireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMinRetireTime.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadMinRetireTime.setDescription('Minimum Time Before a Stream is Retired (us)')
qosReadaheadMaxRetireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMaxRetireTime.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadMaxRetireTime.setDescription('Maximum Time Before a Stream is Retired (us)')
qosReadaheadUseHistogram = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 30), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadUseHistogram.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadUseHistogram.setDescription('Use Histogram-based predictions.')
qosReadaheadMinFileHistogram = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 33554432))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMinFileHistogram.setStatus('current')
if mibBuilder.loadTexts: qosReadaheadMinFileHistogram.setDescription('Minimum filesize for Histogram-based predictions (blocks)')
userDefined = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 2)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: userDefined.setStatus('current')
if mibBuilder.loadTexts: userDefined.setDescription("A polling-style trap built using the 'snmp traps'\n\t     command on the filer.")
dhmNoticeDegradedIO = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 6)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: dhmNoticeDegradedIO.setStatus('current')
if mibBuilder.loadTexts: dhmNoticeDegradedIO.setDescription('Disk Health Monitor -\n                Reported a Disk Degraded-I/O  Event')
dhmNoticePFAEvent = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 7)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: dhmNoticePFAEvent.setStatus('current')
if mibBuilder.loadTexts: dhmNoticePFAEvent.setDescription('Disk Health Monitor -\n                Reported a Disk Predictive-Failure Event')
emergencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 11)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: emergencyTrap.setStatus('current')
if mibBuilder.loadTexts: emergencyTrap.setDescription('A user-defined trap indicating an extremely urgent\n             situation, usually indicating that the system has\n             failed and is shutting down.')
alertTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 12)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: alertTrap.setStatus('current')
if mibBuilder.loadTexts: alertTrap.setDescription('A user-defined trap indicating a condition that\n             should be corrected immediately, such as a failed disk.')
criticalTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 13)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: criticalTrap.setStatus('current')
if mibBuilder.loadTexts: criticalTrap.setDescription('A user-defined trap indicating a critical condition,\n             such as a hard device error.')
errorTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 14)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: errorTrap.setStatus('current')
if mibBuilder.loadTexts: errorTrap.setDescription('A user-defined trap indicating an error condition,\n             such as a mistake in a configuration file.')
warningTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 15)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: warningTrap.setStatus('current')
if mibBuilder.loadTexts: warningTrap.setDescription('A user-defined trap indicating a condition which\n            is not an error, but which may require special handling.')
notificationTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 16)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: notificationTrap.setStatus('current')
if mibBuilder.loadTexts: notificationTrap.setDescription('A user-defined trap meant to provide notification,\n             such as an hourly uptime message.')
informationalTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 17)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: informationalTrap.setStatus('current')
if mibBuilder.loadTexts: informationalTrap.setDescription('A user-defined trap used for informational purposes.')
dbgTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 18)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: dbgTrap.setStatus('current')
if mibBuilder.loadTexts: dbgTrap.setDescription('A user-defined trap used for debugging purposes.\n\t     This trap was previously mis-documented as being trap\n\t     number 17, with the name debugTrap.  It has always,\n\t     actually, been trap 18.  The name change is to avoid\n\t     issues with environments that already have a record\n\t     for debugTrap.')
diskFailedShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 21)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskFailedShutdown.setStatus('current')
if mibBuilder.loadTexts: diskFailedShutdown.setDescription('System is shutting down because the system has been\n\t\trunning in degraded mode for 24 hours.\n\t\tThe trap includes a string describing the failed disk.')
diskFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 22)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskFailed.setStatus('current')
if mibBuilder.loadTexts: diskFailed.setDescription('One or more disks failed.\n\t\tThe trap includes a string describing the failed disk(s).')
diskRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 26)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskRepaired.setStatus('current')
if mibBuilder.loadTexts: diskRepaired.setDescription('The failed disks have been repaired.\n\t\tThis trap is a placeholder -\n\t\tit is not currently sent by Data ONTAP.')
fanFailureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 31)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: fanFailureShutdown.setStatus('current')
if mibBuilder.loadTexts: fanFailureShutdown.setDescription('Critical chassis or cpu fans have failed and the system\n\t\tis shutting down.')
fanFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 33)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: fanFailed.setStatus('current')
if mibBuilder.loadTexts: fanFailed.setDescription('One or more chassis fans failed.\n\t\tThe trap includes a string describing the failed fan(s).')
fanWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 35)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: fanWarning.setStatus('current')
if mibBuilder.loadTexts: fanWarning.setDescription('One or more chassis or cpu fans are in warning state.\n\t\tThe trap includes a string describing the fan(s) in\n\t\tthe warning state.')
fanRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 36)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: fanRepaired.setStatus('current')
if mibBuilder.loadTexts: fanRepaired.setDescription('All fans are repaired.')
powerSupplyFailureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 41)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyFailureShutdown.setStatus('current')
if mibBuilder.loadTexts: powerSupplyFailureShutdown.setDescription('Critical power supplies or power rails failed and\n\t\tthe system is shutting down.')
powerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 43)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyFailed.setStatus('current')
if mibBuilder.loadTexts: powerSupplyFailed.setDescription('One or more redundant power supplies failed.\n\t\tInclude in the trap a string describing\n\t\tthe failed power supply(ies).')
powerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 45)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyWarning.setStatus('current')
if mibBuilder.loadTexts: powerSupplyWarning.setDescription('One or more power supplies or power rails in\n\t\twarning state.  Include in the trap a string describing\n\t\tthe power supply(ies) or the power rail(s) in the\n\t\twarning state.')
powerSupplyRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 46)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyRepaired.setStatus('current')
if mibBuilder.loadTexts: powerSupplyRepaired.setDescription('Previously-failed power supplies or power rails have been\n\t\trepaired.')
cpuTooBusy = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 55)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: cpuTooBusy.setStatus('current')
if mibBuilder.loadTexts: cpuTooBusy.setDescription('CPU utilization exceeds 90%.\n\t\tThis trap is not enabled by default.\n\t\tTo enable this trap set the registry\n\t\tentry options.monitor.cpu.enable to on. \n\t\tNote that as the threshold for this trap is\n\t\tchecked once a minute it is possible to receive\n\t\tmultiple instances of this trap in a short time.')
cpuOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 56)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: cpuOk.setStatus('current')
if mibBuilder.loadTexts: cpuOk.setDescription('CPU utilization has dropped back below 90%.')
nvramBatteryDischarged = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 62)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: nvramBatteryDischarged.setStatus('current')
if mibBuilder.loadTexts: nvramBatteryDischarged.setDescription('The NVRAM battery is fully discharged.')
nvramBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 63)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: nvramBatteryLow.setStatus('current')
if mibBuilder.loadTexts: nvramBatteryLow.setDescription('The charge in the NVRAM battery is low.')
clusterNodeFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 72)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterNodeFailed.setStatus('current')
if mibBuilder.loadTexts: clusterNodeFailed.setDescription('A node in a Cluster FailOver configuration failed.\n\t\tIts partner will assume service for the failed node.')
clusterNodeTakenOver = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 75)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterNodeTakenOver.setStatus('current')
if mibBuilder.loadTexts: clusterNodeTakenOver.setDescription('The partner has taken over for a failed cluster node.')
clusterNodeRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 76)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterNodeRepaired.setStatus('current')
if mibBuilder.loadTexts: clusterNodeRepaired.setDescription('A cluster node has resumed operation.')
clusterNodeRepairing = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 77)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterNodeRepairing.setStatus('current')
if mibBuilder.loadTexts: clusterNodeRepairing.setDescription('A cluster node has rebooted, and a giveback has started.')
volumeFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 82)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeFull.setStatus('current')
if mibBuilder.loadTexts: volumeFull.setDescription('At least one volume is more than 98% full.\n\t\tThe string sent with the trap gives the \n\t\tname of the volume or volumes which exceed\n\t\tthe volumeFull or volumeNearlyFull thresholds')
volumeNearlyFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 85)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeNearlyFull.setStatus('current')
if mibBuilder.loadTexts: volumeNearlyFull.setDescription('At least one volume is more than 95% full.\n\t\tThe string sent with the trap gives the \n\t\tname of the volume or volumes which exceed\n\t\tthe volumeFull or volumeNearlyFull thresholds')
volumeRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 86)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRepaired.setStatus('current')
if mibBuilder.loadTexts: volumeRepaired.setDescription('All volumes are now under 95% full.')
volumesStillFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 87)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumesStillFull.setStatus('current')
if mibBuilder.loadTexts: volumesStillFull.setDescription('At least one volume that was full or nearly full is now OK,\n\t\tbut more volumes still exceed the volumeNearlyFull or\n\t\tvolumeFull thresholds. This trap is generally sent within\n\t\ta short time of when a volume becomes OK, though if two\n\t\tvolumes become OK within this timeframe, only one trap is\n\t\tsent. The string sent with the trap gives the name of the \n\t\tvolume or volumes which still exceed the volumeFull or \n\t\tvolumeNearlyFull thresholds. It does not send the name of \n\t\tany volume that is OK.')
overTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 91)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: overTempShutdown.setStatus('current')
if mibBuilder.loadTexts: overTempShutdown.setDescription('System temperature is too high to continue\n\t\toperating.  The system is shutting down.')
overTemp = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 95)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: overTemp.setStatus('current')
if mibBuilder.loadTexts: overTemp.setDescription('System temperature is too high and in the\n\t\twarning level.')
overTempRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 96)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: overTempRepaired.setStatus('current')
if mibBuilder.loadTexts: overTempRepaired.setDescription('System temperature has returned to an\n\t\tacceptable value.')
shelfFault = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 103)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfFault.setStatus('current')
if mibBuilder.loadTexts: shelfFault.setDescription('A disk storage shelf reported a fault, probably due\n\t\tto a problem with drive placement, fans, power,\n\t\tor temperature.')
shelfRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 106)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfRepaired.setStatus('current')
if mibBuilder.loadTexts: shelfRepaired.setDescription('A previously-reported shelf fault is now corrected.')
globalStatusNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 111)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: globalStatusNonRecoverable.setStatus('current')
if mibBuilder.loadTexts: globalStatusNonRecoverable.setDescription("The appliance's overall status changed to\n\t\t'nonRecoverable', indicating a problem so severe\n\t\tthat the appliance is shutting down.")
globalStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 113)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: globalStatusCritical.setStatus('current')
if mibBuilder.loadTexts: globalStatusCritical.setDescription("The appliance's overall status changed to 'critical',\n\t\tindicating a problem that needs immediate attention.")
globalStatusNonCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 115)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: globalStatusNonCritical.setStatus('current')
if mibBuilder.loadTexts: globalStatusNonCritical.setDescription("The appliance's overall status changed to 'nonCritical',\n\t\tindicating a problem that needs attention.")
globalStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 116)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: globalStatusOk.setStatus('current')
if mibBuilder.loadTexts: globalStatusOk.setDescription("The appliance's overall status returned to normal.")
softQuotaExceeded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 126)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: softQuotaExceeded.setStatus('current')
if mibBuilder.loadTexts: softQuotaExceeded.setDescription('A user has exceeded their soft quota limit.')
softQuotaNormal = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 127)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: softQuotaNormal.setStatus('current')
if mibBuilder.loadTexts: softQuotaNormal.setDescription('A user is safely back under their soft quota limit.')
autosupportSendError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 134)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: autosupportSendError.setStatus('current')
if mibBuilder.loadTexts: autosupportSendError.setDescription('Unable to send auto support.\n\t\tThe trap includes a string describing the reason for the failure.')
autosupportConfigurationError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 135)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: autosupportConfigurationError.setStatus('current')
if mibBuilder.loadTexts: autosupportConfigurationError.setDescription('Auto support may be configured incorrectly.\n\t\tThe trap includes a string describing the mis-configuration.')
autosupportSent = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 136)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: autosupportSent.setStatus('current')
if mibBuilder.loadTexts: autosupportSent.setDescription('Auto support was sent successfully.')
upsLinePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 142)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsLinePowerOff.setStatus('current')
if mibBuilder.loadTexts: upsLinePowerOff.setDescription('UPS: Input line power has failed and UPS is now on battery.')
upsBatteryCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 143)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsBatteryCritical.setStatus('current')
if mibBuilder.loadTexts: upsBatteryCritical.setDescription('UPS: Battery is nearly exhausted, starting graceful shutdown.')
upsShuttingDown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 144)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsShuttingDown.setStatus('current')
if mibBuilder.loadTexts: upsShuttingDown.setDescription('UPS: Shutting down now: Time left on battery is exhausted.')
upsBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 145)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsBatteryWarning.setStatus('current')
if mibBuilder.loadTexts: upsBatteryWarning.setDescription('UPS: Warning: Time left on battery is getting critical.')
upsLinePowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 146)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsLinePowerRestored.setStatus('current')
if mibBuilder.loadTexts: upsLinePowerRestored.setDescription('UPS:  Input line power has been restored and UPS is now off battery.')
appEmergency = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 151)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appEmergency.setStatus('current')
if mibBuilder.loadTexts: appEmergency.setDescription('The application encountered an extremely urgent\n\t\tsituation and requires an immediate response.')
appAlert = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 152)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appAlert.setStatus('current')
if mibBuilder.loadTexts: appAlert.setDescription('The application is in a condition that should \n\t\tbe corrected immediately.')
appCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 153)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appCritical.setStatus('current')
if mibBuilder.loadTexts: appCritical.setDescription('The application encountered a critical condition.')
appError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 154)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appError.setStatus('current')
if mibBuilder.loadTexts: appError.setDescription('The application encountered an error condition.')
appWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 155)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appWarning.setStatus('current')
if mibBuilder.loadTexts: appWarning.setDescription('The application is in a condition which is not an \n\t\terror, but which may require special handling.')
appNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 156)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appNotice.setStatus('current')
if mibBuilder.loadTexts: appNotice.setDescription('The application is notifying of a certain event.')
appInfo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 157)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appInfo.setStatus('current')
if mibBuilder.loadTexts: appInfo.setDescription("The application's message is meant for informational \n\t\tpurposes.")
appTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 158)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appTrap.setStatus('current')
if mibBuilder.loadTexts: appTrap.setDescription('The application requires to be debugged.')
alfFilewrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 162)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: alfFilewrap.setStatus('current')
if mibBuilder.loadTexts: alfFilewrap.setDescription('The internal audit file has wrapped. You are currently losing event\n\t\trecords.  Warning the user.')
alfFileSaved = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 166)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: alfFileSaved.setStatus('current')
if mibBuilder.loadTexts: alfFileSaved.setDescription('The internal audit log has been auto saved to an external evt file.\n\t\tNotifying the user.')
alfFileNearlyFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 167)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: alfFileNearlyFull.setStatus('current')
if mibBuilder.loadTexts: alfFileNearlyFull.setDescription('The internal audit log file is nearly full. The file is going to \n\t\twrap. Notifying the user.')
quotaExceeded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 176)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: quotaExceeded.setStatus('current')
if mibBuilder.loadTexts: quotaExceeded.setDescription('One of the quota limits has been exceeded.\n\t    The trap includes a string describing the specific event\n\t    which triggered the trap.  The string is structured\n\t    in the following form:\n\n\t\tQuota Event: status=exceeded, type={hard|soft|threshold},\n\t\tuser={username}, volume={volume}, limit_item={files|disk},\n\t\tlimit_value={#files|#kilobytes}\n\t\t[ , treeid={tree-id} ] [ , vfiler={vfiler} ]\n\n\t    An example of a complete message would be:\n\n\t\tQuota Event: status=exceeded, type=soft,\n\t\tuser=admin, volume=vol1, limit_item=disk, limit_value=1000000,\n\t\ttreeid=8\n\n\t    Additional key=value items may, in the future, be appended\n\t    to this message.')
quotaNormal = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 177)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: quotaNormal.setStatus('current')
if mibBuilder.loadTexts: quotaNormal.setDescription('One of the quota limits has gone back down to a normal level.\n\t    The trap includes a string describing the specific event\n\t    which triggered the trap.  The string is structured\n\t    in the following form:\n\n\t\tQuota Event: status=normal, type={hard|soft|threshold},\n\t\tuser={username}, volume={volume}, limit_item={files|disk},\n\t\tlimit_value={#files|#kilobytes}\n\t\t[ , treeid={tree-id} ] [ , vfiler={vfiler} ]\n\n\t    An example of a complete message would be:\n\n\t\tQuota Event: status=normal, type=soft,\n\t\tuser=admin, volume=vol1, limit_item=disk, limit_value=1000000,\n\t\ttreeid=8\n\n\t    Additional key=value items may, in the future, be appended\n\t    to this message.')
waflDirFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 187)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: waflDirFull.setStatus('current')
if mibBuilder.loadTexts: waflDirFull.setDescription('The directory has been filled to its limit')
eccSummary = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 192)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: eccSummary.setStatus('current')
if mibBuilder.loadTexts: eccSummary.setDescription('Memory ECC: number of new correctable ECC errors')
eccMasked = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 195)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: eccMasked.setStatus('current')
if mibBuilder.loadTexts: eccMasked.setDescription('Memory ECC: High frequency of ECC errors')
ftpdError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 204)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: ftpdError.setStatus('current')
if mibBuilder.loadTexts: ftpdError.setDescription('Ftp daemon: service stopped')
ftpdMaxConnNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 206)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: ftpdMaxConnNotice.setStatus('current')
if mibBuilder.loadTexts: ftpdMaxConnNotice.setDescription('Ftp daemon: number of connections hits maximum number')
ftpdMaxConnThresholdNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 216)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: ftpdMaxConnThresholdNotice.setStatus('current')
if mibBuilder.loadTexts: ftpdMaxConnThresholdNotice.setDescription('Ftp daemon: number of connections nearly hits maximum number')
scsitgtFCPLinkBreak = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 222)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: scsitgtFCPLinkBreak.setStatus('current')
if mibBuilder.loadTexts: scsitgtFCPLinkBreak.setDescription('SCSI Target: Link Break on FCP adapter')
scsitgtPartnerPathMisconfigured = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 224)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: scsitgtPartnerPathMisconfigured.setStatus('current')
if mibBuilder.loadTexts: scsitgtPartnerPathMisconfigured.setDescription('SCSI Target: FCP Partner Path Misconfigured')
scsitgtThrottleNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 226)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: scsitgtThrottleNotice.setStatus('current')
if mibBuilder.loadTexts: scsitgtThrottleNotice.setDescription('SCSI Target: Throttle limit event notification')
vifPrimaryLinkFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 237)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vifPrimaryLinkFailed.setStatus('current')
if mibBuilder.loadTexts: vifPrimaryLinkFailed.setDescription('Vif: The primary Interface on a Single mode vif has failed')
vifAllLinksFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 238)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vifAllLinksFailed.setStatus('current')
if mibBuilder.loadTexts: vifAllLinksFailed.setDescription('Vif: All the links of the vif have failed')
vfStopped = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 245)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vfStopped.setStatus('current')
if mibBuilder.loadTexts: vfStopped.setDescription('A vFiler has stopped.')
vfStarted = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 246)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vfStarted.setStatus('current')
if mibBuilder.loadTexts: vfStarted.setDescription('A vFiler has started.')
vscanVirusDetectedError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 254)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanVirusDetectedError.setStatus('current')
if mibBuilder.loadTexts: vscanVirusDetectedError.setDescription('VScan: A virus scanner has detected a virus on the Filer')
vscanDisConnection = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 255)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanDisConnection.setStatus('current')
if mibBuilder.loadTexts: vscanDisConnection.setDescription('VScan: A virus scanner has dropped its connection from the Filer')
vscanConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 256)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanConfigurationChange.setStatus('current')
if mibBuilder.loadTexts: vscanConfigurationChange.setDescription('VScan: There has been a change to the vscan configuration')
vscanConnection = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 257)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanConnection.setStatus('current')
if mibBuilder.loadTexts: vscanConnection.setDescription('VScan: A virus scanner has made a connection to the Filer')
vscanServerUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 266)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanServerUpgrade.setStatus('current')
if mibBuilder.loadTexts: vscanServerUpgrade.setDescription('VScan: The Vscan server has been upgraded')
volumeRestrictedByMirrorBigIo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 272)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRestrictedByMirrorBigIo.setStatus('current')
if mibBuilder.loadTexts: volumeRestrictedByMirrorBigIo.setDescription('A volume that experienced a medium error during reconstruction \n\t\tis restricted and marked wafl-inconsistent, but starting \n\t\twafliron has failed. This trap is issued to alert operator \n\t\tthat a volume is not accessible and wafliron must be started \n\t\tto allow access to it.')
volumeInconsistentUmount = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 274)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeInconsistentUmount.setStatus('current')
if mibBuilder.loadTexts: volumeInconsistentUmount.setDescription('This trap is issued when we unmount a volume due to an \n\t\tinconsistency.')
volumeStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 275)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeStateChanged.setStatus('current')
if mibBuilder.loadTexts: volumeStateChanged.setDescription('Volume is being taken offline or being restricted. \n\t\tThe string sent with trap specifies name of affected volume \n\t\tand its state.')
volumeOnline = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 276)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeOnline.setStatus('current')
if mibBuilder.loadTexts: volumeOnline.setDescription('Volume is online now. The string sent with trap specifies \n\t\tname of volume which is online now.')
rmcCardNeedsReplacement = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 283)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: rmcCardNeedsReplacement.setStatus('current')
if mibBuilder.loadTexts: rmcCardNeedsReplacement.setDescription('Remote Management Controller card needs replacement. The trap \n\t\tincludes a string specifying the reason for replacement')
rmcCardMissingCables = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 284)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: rmcCardMissingCables.setStatus('current')
if mibBuilder.loadTexts: rmcCardMissingCables.setDescription('Remote Management Controller card is missing its internal \n\t\tcable, or LAN cable or power supply cable. The trap includes \n\t\ta string specifying the missing component.')
volumeRemoteUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 294)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRemoteUnreachable.setStatus('current')
if mibBuilder.loadTexts: volumeRemoteUnreachable.setDescription('Local volume encountered an error while communicating\n\t\tto remote volume.')
volumeRemoteOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 296)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRemoteOk.setStatus('current')
if mibBuilder.loadTexts: volumeRemoteOk.setDescription('The communication between remote volume and local volume \n\t\treturned to normal.')
volumeRemoteRestored = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 297)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRemoteRestored.setStatus('current')
if mibBuilder.loadTexts: volumeRemoteRestored.setDescription('The data on remote volume has been fully restored to local\n\t\tvolume.')
volumeRemoteRestoreBegin = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 298)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRemoteRestoreBegin.setStatus('current')
if mibBuilder.loadTexts: volumeRemoteRestoreBegin.setDescription('The data on remote volume has started being restored to local\n\t\tvolume by Restore-on-Demand.')
volumeRestrictedRootConflict = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 304)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRestrictedRootConflict.setStatus('current')
if mibBuilder.loadTexts: volumeRestrictedRootConflict.setDescription('Volume is restricted due to a root volume conflict. The \n\t\tstring sent with trap specifies name of conflicting volume \n\t\twhich is being restricted.')
volumeOfflineTooBig = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 314)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeOfflineTooBig.setStatus('current')
if mibBuilder.loadTexts: volumeOfflineTooBig.setDescription('Volume cannot be brought online because its raw size is \n\t\tlarger than maximum allowed size. The string sent with trap \n\t\tspecifies name of affected volume and its raw size, and \n\t\tmaximum allowed size.')
volumeOffline = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 324)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeOffline.setStatus('current')
if mibBuilder.loadTexts: volumeOffline.setDescription('Volume is being taken offline. The string sent with trap \n\t\tspecifies name of affected volume and reason for being \n\t\ttaken offline.')
volumeRestricted = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 334)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRestricted.setStatus('current')
if mibBuilder.loadTexts: volumeRestricted.setDescription('Volume is being restricted. The string sent with trap \n\t\tspecifies name of affected volume and reason for being \n\t\trestricted.')
volumeDegradedDirty = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 344)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeDegradedDirty.setStatus('current')
if mibBuilder.loadTexts: volumeDegradedDirty.setDescription('Volume is degraded and has dirty parity. WAFL_check must be \n\t\trun on this volume before it can be brought online. The string\n\t\tsent with trap specifies name of affected volume.')
volumeError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 354)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeError.setStatus('current')
if mibBuilder.loadTexts: volumeError.setDescription('This trap is issued when a volume cannot be brought online \n\t\tdue to an error.  The string sent with trap specifies name of \n\t\taffected volume and error description.')
volumeSelectedRootConflict = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 356)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeSelectedRootConflict.setStatus('current')
if mibBuilder.loadTexts: volumeSelectedRootConflict.setDescription('This trap is issued when multiple root volumes are detected\n\t\tat boot time and one is selected as the root by default. The\n\t\tstring sent with the trap specifies the name of the selected\n\t\tvolume and the reason.')
snapmirrorSyncFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 364)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: snapmirrorSyncFailed.setStatus('current')
if mibBuilder.loadTexts: snapmirrorSyncFailed.setDescription('Synchronous SnapMirror failed and went into asynchronous mode.')
snapmirrorSyncOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 366)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: snapmirrorSyncOk.setStatus('current')
if mibBuilder.loadTexts: snapmirrorSyncOk.setDescription('Synchronous SnapMirror went into synchronous mode.')
chassisTemperatureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 371)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisTemperatureShutdown.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureShutdown.setDescription('The chassis temperature is extreme.  The appliance has\n\t\tinitiated a shutdown to protect itself.  The operating\n\t\tenvironment should be monitored and corrected before\n\t\trestarting the appliance.')
chassisTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 372)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureWarning.setDescription('The chassis temperature is either too high or too low.\n\t\tThe temperature should be monitored and, if possible, corrected.')
chassisTemperatureUnknown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 375)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisTemperatureUnknown.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureUnknown.setDescription("The chassis temperature is unknown, because reading can't be\n\t\tobtained from the chassis temperature sensor.")
chassisTemperatureOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 376)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisTemperatureOk.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureOk.setDescription('The chassis temperature is OK.')
chassisCPUFanStopped = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 381)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisCPUFanStopped.setStatus('current')
if mibBuilder.loadTexts: chassisCPUFanStopped.setDescription('One or more CPU fans have stopped.  The appliance\n\t\thas initiated a shutdown to protect itself.  A new\n\t\tmotherboard may be required to correct the fan.\n\t\tContact customer support for direction.')
chassisCPUFanSlow = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 383)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisCPUFanSlow.setStatus('current')
if mibBuilder.loadTexts: chassisCPUFanSlow.setDescription('A CPU fan is spinning too slowly.  A new motherboard\n\t\tmay be required to correct the fan.  Contact customer\n\t\tsupport for direction.')
chassisCPUFanOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 386)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisCPUFanOk.setStatus('current')
if mibBuilder.loadTexts: chassisCPUFanOk.setDescription('All CPU fan(s) are properly functioning.')
chassisPowerSuppliesFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 391)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSuppliesFailed.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSuppliesFailed.setDescription('Multiple chassis power supplies failed.')
chassisPowerSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 392)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyDegraded.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSupplyDegraded.setDescription('One or more chassis power supplies are degraded.\n\t\tA description of the degraded state has been\n\t\tlogged to the console and message log file.')
chassisPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 393)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyFailed.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSupplyFailed.setDescription('One chassis power supply failed.')
chassisPowerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 394)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyRemoved.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSupplyRemoved.setDescription('One or more chassis power supplies are removed.')
chassisPowerSupplyOff = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 395)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyOff.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSupplyOff.setDescription('One or more chassis power supplies are off.')
chassisPowerSuppliesOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 396)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSuppliesOk.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSuppliesOk.setDescription('The chassis power supplies are all functioning properly.')
chassisPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 397)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyOk.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSupplyOk.setDescription('This chassis power supply is functioning properly.')
chassisPowerDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 403)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerDegraded.setStatus('current')
if mibBuilder.loadTexts: chassisPowerDegraded.setDescription('The power within the chassis is degraded.\n\t\tA description of the degraded state has been\n\t\tlogged to the console and message log file.')
chassisPowerOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 406)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerOk.setStatus('current')
if mibBuilder.loadTexts: chassisPowerOk.setDescription('The power within the chassis is functioning properly.')
chassisFanDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 412)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanDegraded.setStatus('current')
if mibBuilder.loadTexts: chassisFanDegraded.setDescription('A chassis fan has been degraded.')
chassisFanRemoved = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 413)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanRemoved.setStatus('current')
if mibBuilder.loadTexts: chassisFanRemoved.setDescription('A chassis fan FRU has been removed.')
chassisFanStopped = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 414)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanStopped.setStatus('current')
if mibBuilder.loadTexts: chassisFanStopped.setDescription('One or more chassis fans have stopped.')
chassisFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 415)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanWarning.setStatus('current')
if mibBuilder.loadTexts: chassisFanWarning.setDescription('One or more chassis fans is spinning slowly or too fast.')
chassisFanOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 416)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanOk.setStatus('current')
if mibBuilder.loadTexts: chassisFanOk.setDescription('All chassis fans are functioning properly.')
writeVerificationFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 424)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: writeVerificationFailed.setStatus('current')
if mibBuilder.loadTexts: writeVerificationFailed.setDescription('A write has failed a verification test \n\t\ton a SnapValidator enabled volume.')
prefDCDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 434)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: prefDCDisconnect.setStatus('current')
if mibBuilder.loadTexts: prefDCDisconnect.setDescription('All connections to domain controllers in the preferred domain\n\t\tcontrollers list have been lost.')
domainControllerDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 435)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: domainControllerDisconnect.setStatus('current')
if mibBuilder.loadTexts: domainControllerDisconnect.setDescription('A CIFS domain controller connection to the filer has failed.')
dcPasswdChangeFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 436)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: dcPasswdChangeFailed.setStatus('current')
if mibBuilder.loadTexts: dcPasswdChangeFailed.setDescription("An attempt to change the storage system's password with the domain\n                controller has failed.")
domainControllerConnected = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 437)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: domainControllerConnected.setStatus('current')
if mibBuilder.loadTexts: domainControllerConnected.setDescription('A CIFS domain controller connection to the filer has been\n\t\testablished.')
plexFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 444)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: plexFailed.setStatus('current')
if mibBuilder.loadTexts: plexFailed.setDescription('This trap is issued when one plex of a mirrored \n\t\ttraditional volume or aggregate is failed. The string \n\t\tsent with this trap specifies name of affected plex or\n\t\tmirrored traditional volume or aggregate.')
plexOffline = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 454)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: plexOffline.setStatus('current')
if mibBuilder.loadTexts: plexOffline.setDescription('This trap is issued when a plex becomes offline. \n\t\tThe string sent with this trap specifies name of \n\t\taffected plex or mirrored traditional volume or aggregate.')
shelfSESElectronicsFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 464)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfSESElectronicsFailed.setStatus('current')
if mibBuilder.loadTexts: shelfSESElectronicsFailed.setDescription('One or more of the enclosure services devices in a\n\t\tdisk shelf has failed.  Some shelf designs combine\n\t\tthe enclosure monitoring hardware function into the\n\t\tmodule that provides  the storage interface to\n\t\tthe shelf.  A failure in the enclosure monitoring\n\t\tsection of these combined modules does not necessarily\n\t\tindicate a failure in disk or loop or bus operation,\n\t\twhich may be able to continue.')
shelfSESElectronicsInfo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 467)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfSESElectronicsInfo.setStatus('current')
if mibBuilder.loadTexts: shelfSESElectronicsInfo.setDescription('A previously reported failure of an enclosure\n\t\tservices device in a disk shelf has been corrected,\n\t\tor the device has reported information that does not\n\t\tnecessarily require customer action.')
shelfIFModuleFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 473)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfIFModuleFailed.setStatus('current')
if mibBuilder.loadTexts: shelfIFModuleFailed.setDescription('One or more of the storage interface modules in a\n\t\tdisk shelf has failed.  Some shelf designs combine the\n\t\tenclosure monitoring hardware function into the module\n\t\tthat operates the fibre channel loop or SCSI in the\n\t\tshelf.  This failure is of the storage interface\n\t\titself, not a failure of the enclosure monitoring,\n\t\twhich may be able to continue.  This failure may make\n\t\tone or more disks in the shelf or in the loop or bus\n\t\tunavailable.')
shelfIFModuleWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 475)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfIFModuleWarning.setStatus('current')
if mibBuilder.loadTexts: shelfIFModuleWarning.setDescription('One or more of the storage interface modules in a\n\t\tdisk shelf has a warning condition.  Some shelf designs combine the\n\t\tenclosure monitoring hardware function into the module\n\t\tthat operates the fibre channel loop or SCSI in the\n\t\tshelf.  This warning condition is of the storage interface\n\t\titself, not a failure of the enclosure monitoring,\n\t\twhich may be able to continue.')
shelfIFModuleInfo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 477)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfIFModuleInfo.setStatus('current')
if mibBuilder.loadTexts: shelfIFModuleInfo.setDescription('A previously reported failure of a disk shelf\n\t\tinterface module has been corrected, or the module has\n\t\treported information that does not necessarily require\n\t\tcustomer action.')
maxDirSizeAlert = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 482)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: maxDirSizeAlert.setStatus('current')
if mibBuilder.loadTexts: maxDirSizeAlert.setDescription('A directory has reached its maxdirsize limit. Either \n\t\tincrease the maxdirsize or clean up the directory.')
maxDirSizeWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 485)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: maxDirSizeWarning.setStatus('current')
if mibBuilder.loadTexts: maxDirSizeWarning.setDescription('A directory is getting close to its maxdirsize limit. Either\n\t\tincrease the maxdirsize or clean up the directory.')
cifsStatsExhaustMemCtrlBlk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 497)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: cifsStatsExhaustMemCtrlBlk.setStatus('current')
if mibBuilder.loadTexts: cifsStatsExhaustMemCtrlBlk.setDescription('A request for a CIFS control block cannot be granted. All\n                control blocks are in use.')
chassisPSRemovedxMinShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 501)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPSRemovedxMinShutdown.setStatus('current')
if mibBuilder.loadTexts: chassisPSRemovedxMinShutdown.setDescription('Power Supply Unit is removed from the system. System will \n\t\tbe shutdown in x minutes if it is not put back.')
chassisPSUsMismatch = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 505)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPSUsMismatch.setStatus('current')
if mibBuilder.loadTexts: chassisPSUsMismatch.setDescription('Power Supply Units in the system are of different type. \n\t\t Please replace them with correct Power Supply Units.')
chassisFanFailxMinShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 511)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanFailxMinShutdown.setStatus('current')
if mibBuilder.loadTexts: chassisFanFailxMinShutdown.setDescription('Multiple chassis fan failure. System will \n\t\tshut down in a few minutes if not corrected.')
chassisPSUwrongInput = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 515)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPSUwrongInput.setStatus('current')
if mibBuilder.loadTexts: chassisPSUwrongInput.setDescription('Power Supply Unit (PSU) in the system is connected to an\n\t\t incompatible external power source. Please change \n\t\t the power source being used or replace the PSU \n\t\t with one that matches the current power source.')
powerSupplyFanFailxMinShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 521)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyFanFailxMinShutdown.setStatus('current')
if mibBuilder.loadTexts: powerSupplyFanFailxMinShutdown.setDescription('Multiple  power supply fans failure.\n\t\tSystem will shut down in a few minutes if not corrected.')
remoteSystemMgtAlert = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 532)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remoteSystemMgtAlert.setStatus('current')
if mibBuilder.loadTexts: remoteSystemMgtAlert.setDescription('system remote management detected a system down event.\n\t\tThe trap includes a string describing the specific event \n\t\twhich triggered the trap.  The string is structured in the \n\t\tfollowing form:\n\t\tRemote Management Event: type={system_down|system_up|test|keep_alive},\n \t\tseverity={alert|warning|notice|normal|debug|info}, \n\t\tevent={post_error|watchdog_reset|power_loss|abnormal_reboot}, \n\t\tkey=value\n\t    \n\t\tAn example of a complete message would be:\n\t\tRemote Management Event: type=system_down, severity=alert,\n\t\tevent=watchdog_reset, ss=16bytes\n\n\t\tAdditional key=value items may, in the future, be appended \n\t\tto this message.\n\n\t\tThe events that would generate this trap would be:\n\t\tpost_error: Fatal POST error on boot\n\t\tpower_loss: Loss of power to system\n\t\tabnormal_reboot: \n\t\tl2_watchdog_reset')
remoteSystemMgmtWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 535)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remoteSystemMgmtWarning.setStatus('current')
if mibBuilder.loadTexts: remoteSystemMgmtWarning.setDescription('system remote management detected a system down event.\n\t\tThe trap includes a string describing the specific event \n\t\twhich triggered the trap.  The string is structured in the \n\t\tfollowing form:\n\t\tRemote Management Event: type={system_down|system_up|test|keep_alive},\n \t\tseverity={alert|warning|notice|normal|debug|info}, \n\t\tevent={loss-of-heartbeat}, \n\t\tkey=value\n\t    \n\t\tAn example of a complete message would be:\n\t\tRemote Management Event: type=system_down, severity=warning,\n\t\tevent=loss_of_heartbeat, ss=16bytes\n\n\t\tAdditional key=value items may, in the future, be appended \n\t\tto this message.\n\n\t\tThe events that would generate this trap would be:\n\t\tloss_of_heartbeat: Loss of heartbeat to the RLM.')
remoteSystemMgmtNotification = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 536)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remoteSystemMgmtNotification.setStatus('current')
if mibBuilder.loadTexts: remoteSystemMgmtNotification.setDescription('system remote management detected a system down event.\n\t\tThe trap includes a string describing the specific event \n\t\twhich triggered the trap.  The string is structured in the \n\t\tfollowing form:\n\t\tRemote Management Event: type={system_down|system_up|test|keep_alive},\n \t\tseverity={alert|warning|notice|normal|debug|info}, \n\t\tevent={power_off_via_rlm,power_cycle_via_rlm,reset_via_rlm}, \n\t\tkey=value\n\t    \n\t\tAn example of a complete message would be:\n\t\tRemote Management Event: type=system_down, severity=notice,\n\t\tevent=power_off_via_rlm, ss=16bytes\n\n\t\tAdditional key=value items may, in the future, be appended \n\t\tto this message.\n\n\t\tThe events that would generate this trap would be:\n\t\tpower_off_via_rlm: This indicates system power off\n\t\tpower_cycle_via_rlm: This indicates system power cycle\n\t\treset_via_rlm: This indicates system reset.')
remoteSystemMgmtPeriodic = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 547)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remoteSystemMgmtPeriodic.setStatus('current')
if mibBuilder.loadTexts: remoteSystemMgmtPeriodic.setDescription('This is a periodic keep alive from system remote management.\n\t\tThe trap includes a string describing the specific event \n\t\twhich triggered the trap.  The string is structured in the \n\t\tfollowing form:\n\t\tRemote Management Event: type={system_down|system_up|test|keep_alive},\n \t\tseverity={alert|warning|notice|normal|debug|info}, \n\t\tevent={periodic_message} \n\t    \n\t\tAn example of a complete message would be:\n\t\tRemote Management Event: type=keep_alive, severity=info,\n\t\tevent=periodic_message\n\n\t\tAdditional key=value items may, in the future, be appended \n\t\tto this message.')
remotesystemMgmtTest = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 556)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remotesystemMgmtTest.setStatus('current')
if mibBuilder.loadTexts: remotesystemMgmtTest.setDescription('This is a test trap from system remote management.\n                The trap includes a string describing the specific event\n                which triggered the trap.  The string is structured in the\n                following form:\n       \t\tRemote Management Event: type={system_down|system_up|test|keep_alive},\n                severity={alert|warning|notice|normal|debug|info},\n\t        event={periodic_message}\n\n                An example of a complete message would be:\n                Remote Management Event: type=test, severity=notice, event=test\n\n                Additional key=value items may, in the future, be appended\n                to this message.')
diskMultipathOneSwitch = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 562)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskMultipathOneSwitch.setStatus('current')
if mibBuilder.loadTexts: diskMultipathOneSwitch.setDescription('A multipathed disk is only connected to one switch.')
diskMultipathNoTakeover = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 563)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskMultipathNoTakeover.setStatus('current')
if mibBuilder.loadTexts: diskMultipathNoTakeover.setDescription('Multipath disks or luns could not be detected for the partner.\n\t\tThe node will be unable to takeover correctly.')
diskMultipathWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 565)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskMultipathWarning.setStatus('current')
if mibBuilder.loadTexts: diskMultipathWarning.setDescription('Synchronous mirroring is enabled, even though disks are not \n\t\tmultipathed.')
driveDisableErr = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 574)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: driveDisableErr.setStatus('current')
if mibBuilder.loadTexts: driveDisableErr.setDescription('A drive has been disabled by the shelf module due to \n\t\t hardware errors.  If it is the only drive in the shelf \n\t\t that is disabled, replace the drive.')
hbaOfflineInformation = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 587)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: hbaOfflineInformation.setStatus('current')
if mibBuilder.loadTexts: hbaOfflineInformation.setDescription('A host bus adapter (HBA) port has been disabled.\n\t\tThis state may be caused either by user command or by\n\t\terrors that make the interface unable to communicate\n\t\twith attached devices.')
lunSnapRestoreStatus = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 606)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunSnapRestoreStatus.setStatus('current')
if mibBuilder.loadTexts: lunSnapRestoreStatus.setDescription('Status of the Snap Restore')
lunCloneCreate = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 616)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunCloneCreate.setStatus('current')
if mibBuilder.loadTexts: lunCloneCreate.setDescription('Created a LUN Clone')
lunCloneSplitStart = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 626)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunCloneSplitStart.setStatus('current')
if mibBuilder.loadTexts: lunCloneSplitStart.setDescription('LUN Clone Split started')
lunCloneSplitComplete = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 627)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunCloneSplitComplete.setStatus('current')
if mibBuilder.loadTexts: lunCloneSplitComplete.setDescription('LUN Clone Split completed')
flexCloneSplitStart = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 636)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: flexCloneSplitStart.setStatus('current')
if mibBuilder.loadTexts: flexCloneSplitStart.setDescription('Flex Clone Split started')
flexCloneSplitComplete = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 637)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: flexCloneSplitComplete.setStatus('current')
if mibBuilder.loadTexts: flexCloneSplitComplete.setDescription('Flex Clone Split completed')
volumeCloneCreate = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 646)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeCloneCreate.setStatus('current')
if mibBuilder.loadTexts: volumeCloneCreate.setDescription('Created a Volume Clone')
snapAutoDelete = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 656)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: snapAutoDelete.setStatus('current')
if mibBuilder.loadTexts: snapAutoDelete.setDescription('Snapshot Auto Deleted')
volumeAutogrow = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 666)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeAutogrow.setStatus('current')
if mibBuilder.loadTexts: volumeAutogrow.setDescription('Volume is Auto Grown')
timedTargetNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 674)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: timedTargetNotResponding.setStatus('current')
if mibBuilder.loadTexts: timedTargetNotResponding.setDescription('NTP Time Daemon lost contact with the configured target')
extcacheCardError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 676)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: extcacheCardError.setStatus('current')
if mibBuilder.loadTexts: extcacheCardError.setDescription('External cache card failure')
extcacheCardOffline = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 686)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: extcacheCardOffline.setStatus('current')
if mibBuilder.loadTexts: extcacheCardOffline.setDescription('External cache is taken offline')
svBackupSnapWarningLimit = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 695)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: svBackupSnapWarningLimit.setStatus('current')
if mibBuilder.loadTexts: svBackupSnapWarningLimit.setDescription('The remaining number of Snapshot copies for a backup\n\t\tschedule is below warning limit specified.')
avTrendLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 705)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avTrendLicenseExpired.setStatus('current')
if mibBuilder.loadTexts: avTrendLicenseExpired.setDescription('Trend Micro antivirus license has expired')
avTrendLicenseExpiring = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 706)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avTrendLicenseExpiring.setStatus('current')
if mibBuilder.loadTexts: avTrendLicenseExpiring.setDescription('Trend Micro antivirus license is about to expire')
rebootAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 712)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: rebootAbnormal.setStatus('current')
if mibBuilder.loadTexts: rebootAbnormal.setDescription('System rebooted abnormally after any of the following\n                  events: \n\t\t  event = watchdog reset, agent watchdog reset, panic,\n                  power-glitch.')
rebootNormal = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 716)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: rebootNormal.setStatus('current')
if mibBuilder.loadTexts: rebootNormal.setDescription('System rebooted normally after any of the following\n                  events:\n\t\t  event = giveback, revert, WAFL check, power-on, \n                  internal reboot, internal halt, rlm system reset, operator\n                  initiated halt and reboot.')
volMoveCutoverDeferred = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 724)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volMoveCutoverDeferred.setStatus('current')
if mibBuilder.loadTexts: volMoveCutoverDeferred.setDescription('A volume move job cannot be completed because cutover phase\n            has been deferred.')
volMoveCutoverFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 734)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volMoveCutoverFailed.setStatus('current')
if mibBuilder.loadTexts: volMoveCutoverFailed.setDescription('A volume move job cannot be completed because the cutover\n            attempt resulted in failure.')
volMoveDone = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 736)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volMoveDone.setStatus('current')
if mibBuilder.loadTexts: volMoveDone.setDescription('A volume move job completed successfully.')
volMoveCutoverDeferredWait = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 737)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volMoveCutoverDeferredWait.setStatus('current')
if mibBuilder.loadTexts: volMoveCutoverDeferredWait.setDescription('A volume move has reached the cutover phase and is waiting\n            for the user to trigger cutover because the user specified \n            wait for cutover-action')
scsibladeOutOfQuorum = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 741)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: scsibladeOutOfQuorum.setStatus('current')
if mibBuilder.loadTexts: scsibladeOutOfQuorum.setDescription('The node has lost connectivity with the other nodes\n\t     in the cluster. Both fcp and iscsi traffic have been disabled \n\t     on this node. The corrective action is to reboot the node, and \n\t     if the node is waiting for giveback then perform a giveback.')
scsibladeInQuorum = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 746)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: scsibladeInQuorum.setStatus('current')
if mibBuilder.loadTexts: scsibladeInQuorum.setDescription('The node established connectivity with the other nodes\n\t     in the cluster.')
qosMonitorMemoryMaxed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 755)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: qosMonitorMemoryMaxed.setStatus('current')
if mibBuilder.loadTexts: qosMonitorMemoryMaxed.setDescription('QoS dynamic memory has reached its limit. Some QoS features \n        may operate in a limited capacity.')
qosMonitorMemoryAbated = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 757)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: qosMonitorMemoryAbated.setStatus('current')
if mibBuilder.loadTexts: qosMonitorMemoryAbated.setDescription('QoS dynamic memory is no longer at its limit. All QoS features \n        will operate as normal.')
sfoAggregateRelocated = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 767)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: sfoAggregateRelocated.setStatus('current')
if mibBuilder.loadTexts: sfoAggregateRelocated.setDescription('This trap is issued when an SFO aggregate is relocated permanently\n             from one node to another.')
avUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 773)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avUpdateFailed.setStatus('current')
if mibBuilder.loadTexts: avUpdateFailed.setDescription('The anti-virus software update failed.')
avLicenseCheckFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 774)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avLicenseCheckFailed.setStatus('current')
if mibBuilder.loadTexts: avLicenseCheckFailed.setDescription('The anti-virus software license validation failed.')
avMcAfeeProductExpired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 775)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avMcAfeeProductExpired.setStatus('current')
if mibBuilder.loadTexts: avMcAfeeProductExpired.setDescription('McAfee product has expired.')
avRemedy = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 776)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avRemedy.setStatus('current')
if mibBuilder.loadTexts: avRemedy.setDescription('Remedy action taken. The file has been repaired, deleted or quarantined.')
avLicenseCheck = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 777)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avLicenseCheck.setStatus('current')
if mibBuilder.loadTexts: avLicenseCheck.setDescription('License validation was successful.')
avRemedyFailure = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 783)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avRemedyFailure.setStatus('current')
if mibBuilder.loadTexts: avRemedyFailure.setDescription('Remedy action failed. The file was not repaired, deleted or quarantined.')
avMcAfeeEngineExpired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 785)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avMcAfeeEngineExpired.setStatus('current')
if mibBuilder.loadTexts: avMcAfeeEngineExpired.setDescription('McAfee product has expired.')
avMcAfeeProductExpiring = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 786)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avMcAfeeProductExpiring.setStatus('current')
if mibBuilder.loadTexts: avMcAfeeProductExpiring.setDescription('McAfee product is expiring.')
av2gbFileNotScanned = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 793)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: av2gbFileNotScanned.setStatus('current')
if mibBuilder.loadTexts: av2gbFileNotScanned.setDescription('A file larger than 2GB is not scanned and marked as clean.')
avMcAfeeEngineExpiring = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 796)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avMcAfeeEngineExpiring.setStatus('current')
if mibBuilder.loadTexts: avMcAfeeEngineExpiring.setDescription('McAfee engine is expiring.')
avVirusfound = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 802)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avVirusfound.setStatus('current')
if mibBuilder.loadTexts: avVirusfound.setDescription('Virus found while scanning.')
avMcAfeeLicenseFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 803)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avMcAfeeLicenseFailed.setStatus('current')
if mibBuilder.loadTexts: avMcAfeeLicenseFailed.setDescription('McAfee antivirus license activation failed.')
avDisableFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 804)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avDisableFailed.setStatus('current')
if mibBuilder.loadTexts: avDisableFailed.setDescription('The anti-virus service disabling failed in the cluster.')
avDisable = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 805)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avDisable.setStatus('current')
if mibBuilder.loadTexts: avDisable.setDescription('The anti-virus service is disabled in the cluster.')
avMcAfeeLicenseExpiring = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 806)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avMcAfeeLicenseExpiring.setStatus('current')
if mibBuilder.loadTexts: avMcAfeeLicenseExpiring.setDescription('McAfee antivirus license is about to expire.')
avEnable = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 807)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avEnable.setStatus('current')
if mibBuilder.loadTexts: avEnable.setDescription('The anti-virus service is enabled in the cluster.')
avSpywareFound = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 812)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avSpywareFound.setStatus('current')
if mibBuilder.loadTexts: avSpywareFound.setDescription('Spyware found while scanning.')
avEnableFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 813)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avEnableFailed.setStatus('current')
if mibBuilder.loadTexts: avEnableFailed.setDescription('The anti-virus service enabling failed in the cluster.')
avRollbackFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 814)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avRollbackFailed.setStatus('current')
if mibBuilder.loadTexts: avRollbackFailed.setDescription('The anti-virus software rollback failed.')
avRollback = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 816)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avRollback.setStatus('current')
if mibBuilder.loadTexts: avRollback.setDescription('The anti-virus software is rolled back.')
avUpdate = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 817)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avUpdate.setStatus('current')
if mibBuilder.loadTexts: avUpdate.setDescription('The anti-virus software is updated.')
snmpBusy = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 824)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: snmpBusy.setStatus('current')
if mibBuilder.loadTexts: snmpBusy.setDescription('The SNMP server is too busy.')
lunDestroy = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 837)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunDestroy.setStatus('current')
if mibBuilder.loadTexts: lunDestroy.setDescription('A LUN was destroyed.')
healthMonitorAlertRaised = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 862)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: healthMonitorAlertRaised.setStatus('current')
if mibBuilder.loadTexts: healthMonitorAlertRaised.setDescription('A Health Monitor has created an alert.')
healthMonitorAlertCleared = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 867)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: healthMonitorAlertCleared.setStatus('current')
if mibBuilder.loadTexts: healthMonitorAlertCleared.setDescription('A Health Monitor has cleared an alert.')
volumeLogicalOverallocated = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 873)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeLogicalOverallocated.setStatus('current')
if mibBuilder.loadTexts: volumeLogicalOverallocated.setDescription('The volume has over allocated space and may not be able to\n             honor file reservations or the aggregate has over allocated\n             space and may not be able to honor volume guarantees.\n             If and when the reserved/guaranteed space is consumed\n             there will be insufficient physical space which can\n             cause the volume/aggregate to be taken offline.')
volumeReserveGrew = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 875)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeReserveGrew.setStatus('current')
if mibBuilder.loadTexts: volumeReserveGrew.setDescription("At least one volume's WAFL reserve grew because it was\n             physically over allocated.")
volumePhysicalOverallocated = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 882)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumePhysicalOverallocated.setStatus('current')
if mibBuilder.loadTexts: volumePhysicalOverallocated.setDescription('The volume/aggregate is running dangerously low on\n             free blocks to write to.')
smVaultSnapWarnLimit = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 895)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: smVaultSnapWarnLimit.setStatus('current')
if mibBuilder.loadTexts: smVaultSnapWarnLimit.setDescription('The snapshot count limit on the destination volume has been reached.')
lunRelocationCompletion = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 896)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunRelocationCompletion.setStatus('current')
if mibBuilder.loadTexts: lunRelocationCompletion.setDescription('Lun relocation completed successfully')
clusterLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 973)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterLinkDown.setStatus('current')
if mibBuilder.loadTexts: clusterLinkDown.setDescription('A cluster link has been lost.')
clusterL2ConnFail = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 983)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterL2ConnFail.setStatus('current')
if mibBuilder.loadTexts: clusterL2ConnFail.setDescription('The l2ping command is currently failing between cluster ports.')
clusterPingDropLarge = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 993)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterPingDropLarge.setStatus('current')
if mibBuilder.loadTexts: clusterPingDropLarge.setDescription('Pings of large packets between cluster ports are currently failing.')
mibBuilder.exportSymbols("NETAPP-MIB", dfLowUsedKBytes=dfLowUsedKBytes, trcTcpDelayHits=trcTcpDelayHits, targetAdapterName=targetAdapterName, svIndex=svIndex, raidVGroupNumber=raidVGroupNumber, clusterNodeTakenOver=clusterNodeTakenOver, v3cpPathconfs=v3cpPathconfs, v3ccCreates=v3ccCreates, cifsOpLkBatchToNones=cifsOpLkBatchToNones, logicalInterfaceLbWeight=logicalInterfaceLbWeight, extcache64BlocksRef0=extcache64BlocksRef0, subnetMask=subnetMask, ncStreamingMmsBytesFromClients=ncStreamingMmsBytesFromClients, cifsSmb2FileDirUnsupported=cifsSmb2FileDirUnsupported, dmpIndex=dmpIndex, smb2QueryFsObjectIdInfos=smb2QueryFsObjectIdInfos, clusterL2ConnFail=clusterL2ConnFail, productMachineType=productMachineType, v3CachedPerCent=v3CachedPerCent, ndmpBackupFailures=ndmpBackupFailures, lunOnline=lunOnline, enclContactState=enclContactState, ifHighInUnknownProtos=ifHighInUnknownProtos, vfSpTable=vfSpTable, sisQuickCheckFsize=sisQuickCheckFsize, snapmirrorRelTransferSnapshot=snapmirrorRelTransferSnapshot, obsSmbQueryInfoPct=obsSmbQueryInfoPct, ncNntpIsLicensed=ncNntpIsLicensed, enclVoltSensorsCurrentVolt=enclVoltSensorsCurrentVolt, raidVTotalMb=raidVTotalMb, ifLowInErrors=ifLowInErrors, enclVoltSensorsPresent=enclVoltSensorsPresent, ftpdTotalConns=ftpdTotalConns, spareDiskUID=spareDiskUID, vserverNisDomain=vserverNisDomain, v3ccPathconfs=v3ccPathconfs, v3cpReads=v3cpReads, qrV2LowKBytesUsed=qrV2LowKBytesUsed, volumeRestricted=volumeRestricted, dafsExportTable=dafsExportTable, nfsCacheHighMissRequests=nfsCacheHighMissRequests, miscLowTapeWriteBytes=miscLowTapeWriteBytes, tv3cReadlinks=tv3cReadlinks, netportType=netportType, enclCurSensorsOverCurWarnThr=enclCurSensorsOverCurWarnThr, tv3ccFsinfos=tv3ccFsinfos, viaConnLocalNetAddress=viaConnLocalNetAddress, nfsCacheEjectRequests=nfsCacheEjectRequests, snapmirrorStatusEntry=snapmirrorStatusEntry, ndmpBackupFailureReason=ndmpBackupFailureReason, ncBytesToServers=ncBytesToServers, vserverNumVolumes=vserverNumVolumes, spareEntry=spareEntry, autosupportStatusMessage=autosupportStatusMessage, vsRouteAddressFamily=vsRouteAddressFamily, nvramBatteryLow=nvramBatteryLow, dafsNicOutBytes=dafsNicOutBytes, ncStreamingRtspWMBytesToClients=ncStreamingRtspWMBytesToClients, ncStreamingRtspWMBFServers=ncStreamingRtspWMBFServers, dafsNicName=dafsNicName, compressPercentSaved=compressPercentSaved, raidPDiskName=raidPDiskName, appEmergency=appEmergency, raidStatus=raidStatus, smb2SetFullEaInfos=smb2SetFullEaInfos, cifsNbtWaits=cifsNbtWaits, dafsReleaseCreds=dafsReleaseCreds, cifsDupDisconnects=cifsDupDisconnects, outOfDateDiskScsiAdapter=outOfDateDiskScsiAdapter, raidPSectorSize=raidPSectorSize, vscanServerUpgrade=vscanServerUpgrade, snapmirrorRelTotalTransTimeSeconds=snapmirrorRelTotalTransTimeSeconds, cifsSmb2SetInfo=cifsSmb2SetInfo, slQQtree=slQQtree, switchLowPacketsProcessed=switchLowPacketsProcessed, pclNfsV3Write32KCalls=pclNfsV3Write32KCalls, tv3Write4KCalls=tv3Write4KCalls, nfsV3=nfsV3, viaCreated=viaCreated, netportRole=netportRole, v3ccReaddirPluss=v3ccReaddirPluss, dafsNicNumRequestDemons=dafsNicNumRequestDemons, tnfsServBadCalls=tnfsServBadCalls, qrVPathName=qrVPathName, fsMaxUsedInodesPerCent=fsMaxUsedInodesPerCent, slQSnapshotTime=slQSnapshotTime, pclNfsV3Read4KCalls=pclNfsV3Read4KCalls, cifsNSessions=cifsNSessions, smbTrans2ReportDFSIncPct=smbTrans2ReportDFSIncPct, v3cSetattrs=v3cSetattrs, avMcAfeeLicenseFailed=avMcAfeeLicenseFailed, tv3pPathconfs=tv3pPathconfs, dfPlexCount=dfPlexCount, dfVserver=dfVserver, qrKBytesLimit=qrKBytesLimit, enclTempSensorsPresent=enclTempSensorsPresent, netportDuplexAdmin=netportDuplexAdmin, chassisTemperatureWarning=chassisTemperatureWarning, cDOTCpNodeName=cDOTCpNodeName, vserverIsRepository=vserverIsRepository, avSpywareFound=avSpywareFound, snapmirrorSyncToAsync=snapmirrorSyncToAsync, portSwitchName=portSwitchName, qosPolicyGroupEntry=qosPolicyGroupEntry, rcTcpNonIdemDoneHits=rcTcpNonIdemDoneHits, dbgTrap=dbgTrap, viaInRdma=viaInRdma, pclNfsV2Symlinks=pclNfsV2Symlinks, connectedInitiatorType=connectedInitiatorType, smb2NegProtPct=smb2NegProtPct, sisTable=sisTable, snmpBusy=snmpBusy, pclNfsV3FsinfoPerCent=pclNfsV3FsinfoPerCent, outOfDateDiskDiskName=outOfDateDiskDiskName, aggrFSID=aggrFSID, tv3cpCommits=tv3cpCommits, ncStreamingObjHitrate=ncStreamingObjHitrate, otherDiskSecondaryDiskName=otherDiskSecondaryDiskName, dfHighSisSharedKBytes=dfHighSisSharedKBytes, ncDnsPendingForwardLookups=ncDnsPendingForwardLookups, smbNTTransactQuerySecDescPct=smbNTTransactQuerySecDescPct, fabricOwner=fabricOwner, rcUdpMisses=rcUdpMisses, nfsCacheBytesFromServers=nfsCacheBytesFromServers, enclVoltSensorsUnderVoltWarn=enclVoltSensorsUnderVoltWarn, v3Read32KCalls=v3Read32KCalls, smbTrans2QueryFSInfoPct=smbTrans2QueryFSInfoPct, cifsSmb2PipeRequest=cifsSmb2PipeRequest, dafsSessionTable=dafsSessionTable, clusterLinkDown=clusterLinkDown, dfMaxFilesPossible=dfMaxFilesPossible, logicalInterfaceStatusVserver=logicalInterfaceStatusVserver, sfoAggregateRelocated=sfoAggregateRelocated, extcache64HitNormalL0=extcache64HitNormalL0, pset=pset, smb2IpcWritePct=smb2IpcWritePct, ncDnsSuccessfulForwardLookups=ncDnsSuccessfulForwardLookups, ncNntpBWSavings=ncNntpBWSavings, v2ccNulls=v2ccNulls, ncHttpActiveServConns=ncHttpActiveServConns, sisIsIddEnabled=sisIsIddEnabled, snapmirrorScheduleDesc=snapmirrorScheduleDesc, smb2QueryFsInvalidPct=smb2QueryFsInvalidPct, cifsObsReqs=cifsObsReqs, dafsWriteDirects=dafsWriteDirects, ncStreamingMmsUltraIsLicensed=ncStreamingMmsUltraIsLicensed, netportPort=netportPort, psetType=psetType, psetIndex=psetIndex, dafsServerAuths=dafsServerAuths, miscNetSentKB=miscNetSentKB, nodeStatDescription=nodeStatDescription, dmpEntry=dmpEntry, diskScrubbingCount=diskScrubbingCount, cfPartnerLastStatusUpdate=cfPartnerLastStatusUpdate, chassisPowerSupplyOk=chassisPowerSupplyOk, v2ccCreates=v2ccCreates, qrPathName=qrPathName, slQSource=slQSource, tv2ccWrites=tv2ccWrites, volType=volType, raidPBay=raidPBay, smb2SetInfoUnsupportedPct=smb2SetInfoUnsupportedPct, totNfs=totNfs, tv2ccStatfss=tv2ccStatfss, viaMaxVI=viaMaxVI, fanWarning=fanWarning, globalStatusOk=globalStatusOk, miscCacheAge=miscCacheAge, v3Write2KCalls=v3Write2KCalls, v3cPathconfs=v3cPathconfs, rcUdpInProgressHits=rcUdpInProgressHits, dfHighTotalKBytes=dfHighTotalKBytes, dafsSessionMaxRequestSize=dafsSessionMaxRequestSize, enclNumber=enclNumber, productCPUArch=productCPUArch, cifsNDomainControllers=cifsNDomainControllers, compressTable=compressTable, snapvaultHostTable=snapvaultHostTable, nodeVendor=nodeVendor, qosWorkloadVserver=qosWorkloadVserver, pclIpAddr=pclIpAddr, connectedInitiatorVserver=connectedInitiatorVserver, snapmirror=snapmirror, ifHighOutDiscards=ifHighOutDiscards, v3cLookups=v3cLookups, smbTrans2SetPathInfoPct=smbTrans2SetPathInfoPct, dafsSessionClientVerifier=dafsSessionClientVerifier, ncLocalConfigChanged=ncLocalConfigChanged, cfSettings=cfSettings, cpFromLogFullOps=cpFromLogFullOps, cpuBusyTimePerCent=cpuBusyTimePerCent, pclNfsV2Write16KCalls=pclNfsV2Write16KCalls, volLanguageCode=volLanguageCode, v2WriteStats=v2WriteStats, qrV2PathName=qrV2PathName, misc64NetRcvdBytes=misc64NetRcvdBytes, chassisTemperatureShutdown=chassisTemperatureShutdown, chassisFanOk=chassisFanOk, snapmirrorTotalFailures=snapmirrorTotalFailures, cifsSmb2UnRelatedCompRequest=cifsSmb2UnRelatedCompRequest, logicalInterfaceFirewallPolicy=logicalInterfaceFirewallPolicy, ncHttpHighTotalRespTimes=ncHttpHighTotalRespTimes, vfSpIndex=vfSpIndex, ncFtpTotalRequests=ncFtpTotalRequests, psetMemberEntry=psetMemberEntry, lunEntry=lunEntry, volMoveCutoverDeferredWait=volMoveCutoverDeferredWait, ncHttpServConns=ncHttpServConns, pclNfsV3Reads=pclNfsV3Reads, nodeEnvOverTemperature=nodeEnvOverTemperature, smbReadAndXPct=smbReadAndXPct, tv3ReadStats=tv3ReadStats, qrV2Volume=qrV2Volume, fcpTarget=fcpTarget, slHour=slHour, cDOTCpTable=cDOTCpTable, volMoveDone=volMoveDone, tv2ccLinks=tv2ccLinks, rcTcpDelayHits=rcTcpDelayHits, aggrName=aggrName, smb2SetInfoInvalidPct=smb2SetInfoInvalidPct, volMoveStatusEntry=volMoveStatusEntry, initiatorGroupMemberNameIndex=initiatorGroupMemberNameIndex, aggrRaidType=aggrRaidType, dafsReadlinkDirects=dafsReadlinkDirects, otherDiskCarrierID=otherDiskCarrierID, cpuIdleTime=cpuIdleTime, fcpLowReadBytes=fcpLowReadBytes, enclElectronicsFailed=enclElectronicsFailed, ncStreamingMmsBytesToClients=ncStreamingMmsBytesToClients, productVersion=productVersion, spareDiskSerialNumber=spareDiskSerialNumber, ndmpBackupActive=ndmpBackupActive, smbNegProtPct=smbNegProtPct, broadcastDomainTable=broadcastDomainTable, dfLowSisSharedKBytes=dfLowSisSharedKBytes, cDOTCpFromLowDatavecsOps=cDOTCpFromLowDatavecsOps, chassisPowerSupplyOff=chassisPowerSupplyOff, dcPasswdChangeFailed=dcPasswdChangeFailed, viaDisconnect=viaDisconnect, dafsMaxDisconnectedSessions=dafsMaxDisconnectedSessions, vfIpSpace=vfIpSpace, fcpHighReadBytes=fcpHighReadBytes, rcDelayHits=rcDelayHits, clusterLicenseExpirationDate=clusterLicenseExpirationDate, spareScsiAdapter=spareScsiAdapter, pclEntry=pclEntry, obsSmbUnlockByteRanges=obsSmbUnlockByteRanges, fcpTargetSpeed=fcpTargetSpeed, v2Read128KCalls=v2Read128KCalls, enclChannelShelfAddr=enclChannelShelfAddr, nodeStatCounterName=nodeStatCounterName, smbTrans2SetFileInfoPct=smbTrans2SetFileInfoPct)
mibBuilder.exportSymbols("NETAPP-MIB", snapmirrorConnIndex=snapmirrorConnIndex, vserverOperationalState=vserverOperationalState, psetPortVserver=psetPortVserver, obsSmbQueryInfos=obsSmbQueryInfos, nfsCacheHitRequests=nfsCacheHitRequests, lunRelocationCompletion=lunRelocationCompletion, chassisFanRemoved=chassisFanRemoved, volJunctionPathSource=volJunctionPathSource, tv2pReaddirs=tv2pReaddirs, tv3Write2KCalls=tv3Write2KCalls, diskAddingSpareCount=diskAddingSpareCount, logicalInterfaceTable=logicalInterfaceTable, raidVCarrierID=raidVCarrierID, netportIfGrpDistrFunc=netportIfGrpDistrFunc, sisVserver=sisVserver, smb2QueryFileAttrTagInfoPct=smb2QueryFileAttrTagInfoPct, smb2FsctlFileUnsupporteds=smb2FsctlFileUnsupporteds, pclNfsV3Read128KCalls=pclNfsV3Read128KCalls, volJunctionPath=volJunctionPath, qosReadaheadMetadataBlocks=qosReadaheadMetadataBlocks, raidPCompletionPerCent=raidPCompletionPerCent, v2CachedCalls=v2CachedCalls, alfFileNearlyFull=alfFileNearlyFull, v3Write16KCalls=v3Write16KCalls, volumeNearlyFull=volumeNearlyFull, qosWorkloadVolume=qosWorkloadVolume, snapmirrorRelExportedSnapshot=snapmirrorRelExportedSnapshot, pclNfsV2Creates=pclNfsV2Creates, smb2QueryDirPct=smb2QueryDirPct, snapmirrorRelHealthy=snapmirrorRelHealthy, ncTotalBWSavings=ncTotalBWSavings, licenseEntry=licenseEntry, raidVDiskNumber=raidVDiskNumber, viaOutBytes=viaOutBytes, tv2pWrites=tv2pWrites, viaOutRDMAWriteBytes=viaOutRDMAWriteBytes, cifsOthers=cifsOthers, smbGetPrintQueuePct=smbGetPrintQueuePct, volMoveCOattempts=volMoveCOattempts, lunHighReadOps=lunHighReadOps, tv2Read16KCalls=tv2Read16KCalls, raidUsedMb=raidUsedMb, ncStreamingMmsIsEnabled=ncStreamingMmsIsEnabled, viaNativeMTU=viaNativeMTU, ncFtpActiveServConns=ncFtpActiveServConns, spareDiskName=spareDiskName, smb2SetRenameInfoPct=smb2SetRenameInfoPct, netportIfGrpEntry=netportIfGrpEntry, dafsIsLicensed=dafsIsLicensed, vsFailoverGroupEntry=vsFailoverGroupEntry, subnetBroadcastDomainName=subnetBroadcastDomainName, aggrFilesystemMetadata=aggrFilesystemMetadata, v3pPathconfs=v3pPathconfs, pclNfsV3ReaddirPerCent=pclNfsV3ReaddirPerCent, qvStateName=qvStateName, smbTrans2ReportDFSIncs=smbTrans2ReportDFSIncs, switchStatusMessage=switchStatusMessage, ncDnsIresIsInitialised=ncDnsIresIsInitialised, avMcAfeeEngineExpiring=avMcAfeeEngineExpiring, snapvault=snapvault, pclNfsV3ReadlinkPerCent=pclNfsV3ReadlinkPerCent, snapmirrorConnEntry=snapmirrorConnEntry, diskFailed=diskFailed, v2ccStatfss=v2ccStatfss, netportAutorevertDelay=netportAutorevertDelay, svSecondaryIsLicensed=svSecondaryIsLicensed, nfsCacheBytesToClients=nfsCacheBytesToClients, qrVIndex=qrVIndex, lunMapEntry=lunMapEntry, svDrPrimaryIsLicensed=svDrPrimaryIsLicensed, cifsSmb2RelatedCompRequest=cifsSmb2RelatedCompRequest, tv3ccAccesss=tv3ccAccesss, nfsCacheHighHitRequests=nfsCacheHighHitRequests, pclNfsV3Read16KCalls=pclNfsV3Read16KCalls, lunCloneCreate=lunCloneCreate, cifsAlignedLarges=cifsAlignedLarges, v3cAccesss=v3cAccesss, snapmirrorRelBreakFailCnt=snapmirrorRelBreakFailCnt, ncHttpsProxyOptions=ncHttpsProxyOptions, nodeEligibility=nodeEligibility, ndmpOn=ndmpOn, viaConnState=viaConnState, autosupportStatus=autosupportStatus, cifsMisc=cifsMisc, nfsCacheMissCacheableRequests=nfsCacheMissCacheableRequests, sisIsCompressionEnabled=sisIsCompressionEnabled, smbFlushes=smbFlushes, ndmpRestoreActive=ndmpRestoreActive, cDOTCpTotalOps=cDOTCpTotalOps, v2cpWrcaches=v2cpWrcaches, v3cFsinfos=v3cFsinfos, pclNfsV2WrcachePerCent=pclNfsV2WrcachePerCent, cifsSmb2DurableCreateSucceeded=cifsSmb2DurableCreateSucceeded, svSystemTotalPrimarySuccesses=svSystemTotalPrimarySuccesses, netOptsv6Enabled=netOptsv6Enabled, slVVolumeName=slVVolumeName, nodeStatTable=nodeStatTable, sisLastOpState=sisLastOpState, tv2cStatfss=tv2cStatfss, dafsDefaultGid=dafsDefaultGid, dafsNicState=dafsNicState, sisState=sisState, smbNTTransactSetSecDescPct=smbNTTransactSetSecDescPct, cDOTCpuBusyTimePerCent=cDOTCpuBusyTimePerCent, extcache64Hits=extcache64Hits, vscanVirusDetectedError=vscanVirusDetectedError, cifsOplocksEnabled=cifsOplocksEnabled, licenseType=licenseType, fcpTargetPort=fcpTargetPort, ncHttpAvgMissRespTime=ncHttpAvgMissRespTime, cifsDCName=cifsDCName, slIndex=slIndex, sisIndex=sisIndex, sparePool=sparePool, otherDiskPool=otherDiskPool, compressFileSys=compressFileSys, outOfDateDiskCarrierID=outOfDateDiskCarrierID, dafsExportPath=dafsExportPath, ncNntpCacheableRequests=ncNntpCacheableRequests, nodeTable=nodeTable, smb2FsctlSecureShares=smb2FsctlSecureShares, netInterfaces=netInterfaces, tv3pMknods=tv3pMknods, tv2cWrcaches=tv2cWrcaches, v3cpRenames=v3cpRenames, raidVScsiId=raidVScsiId, shelfIFModuleFailed=shelfIFModuleFailed, enclProductLogicalID=enclProductLogicalID, smbFindClose2Pct=smbFindClose2Pct, snapmirrorFilerTotalDstFailures=snapmirrorFilerTotalDstFailures, chassisPowerOk=chassisPowerOk, lunMapVserver=lunMapVserver, netappVserver=netappVserver, cpFromLowVbufOps=cpFromLowVbufOps, writeVerificationFailed=writeVerificationFailed, sis=sis, nodeEnvFailedPowerSupplyCount=nodeEnvFailedPowerSupplyCount, licenseTable=licenseTable, switchTable=switchTable, sisPath=sisPath, if64InDiscards=if64InDiscards, rcpTcpServXDRCalls=rcpTcpServXDRCalls, rstSuccesses=rstSuccesses, v3pMknods=v3pMknods, aggrHAType=aggrHAType, tv3Read8KCalls=tv3Read8KCalls, portNumber=portNumber, vfIpEntry=vfIpEntry, trcUdpMisses=trcUdpMisses, dafsSecinfos=dafsSecinfos, v3Write512Calls=v3Write512Calls, qosReadaheadSettingsTable=qosReadaheadSettingsTable, ncFtp=ncFtp, otherDiskRPM=otherDiskRPM, autosupportFailedSends=autosupportFailedSends, raidVCompletionPerCent=raidVCompletionPerCent, snapmirrorRelUpdateSuccCnt=snapmirrorRelUpdateSuccCnt, cifsIsEnabled=cifsIsEnabled, tv3ccReadlinks=tv3ccReadlinks, obsSmbClosePrintFilePct=obsSmbClosePrintFilePct, ncFtpRespTimePerByte=ncFtpRespTimePerByte, fcpTargetLifTable=fcpTargetLifTable, ifHighInDiscards=ifHighInDiscards, chassisFanStopped=chassisFanStopped, diskRepaired=diskRepaired, cifsPDCUpcalls=cifsPDCUpcalls, qrKBytesUsed=qrKBytesUsed, obsSmbWritePrintFilePct=obsSmbWritePrintFilePct, snapmirrorBackupSuccesses=snapmirrorBackupSuccesses, raidPPlexNumber=raidPPlexNumber, enclProductModel=enclProductModel, nodeStatLabels=nodeStatLabels, v2ccSetattrs=v2ccSetattrs, ndmpRestoreSuccesses=ndmpRestoreSuccesses, v2ccReadlinks=v2ccReadlinks, v2cpReadlinks=v2cpReadlinks, obsSmbWrites=obsSmbWrites, logicalInterfaceAddressString=logicalInterfaceAddressString, lun=lun, logicalInterfaceAllowLbMigrate=logicalInterfaceAllowLbMigrate, outOfDateDiskSerialNumber=outOfDateDiskSerialNumber, tv3Percent=tv3Percent, svTotalTransMBs=svTotalTransMBs, smb2QueryFileStreamInfos=smb2QueryFileStreamInfos, smbTrans2FindNext2s=smbTrans2FindNext2s, snapAutoDelete=snapAutoDelete, pclNfsV2Rmdirs=pclNfsV2Rmdirs, connectedInitiatorPortName=connectedInitiatorPortName, rstAttempts=rstAttempts, slVType=slVType, pclNfsV3Write1KCalls=pclNfsV3Write1KCalls, qosReadaheadUseAsync=qosReadaheadUseAsync, smb2QueryFileStandardInfoPct=smb2QueryFileStandardInfoPct, miscLowDiskWriteBytes=miscLowDiskWriteBytes, trcInProgressHits=trcInProgressHits, raidVVol=raidVVol, ncStreamingOBTServers=ncStreamingOBTServers, smb2FsctlSecureSharePct=smb2FsctlSecureSharePct, v3ReadStats=v3ReadStats, vfTable=vfTable, miscLowTapeReadBytes=miscLowTapeReadBytes, outOfDateDiskDiskPort=outOfDateDiskDiskPort, ifHighInNUcastPkts=ifHighInNUcastPkts, qosPolicyGroupPgid=qosPolicyGroupPgid, raidPUsedBlocks=raidPUsedBlocks, rpcUdpNullRecvs=rpcUdpNullRecvs, snapmirrorRelStatusTable=snapmirrorRelStatusTable, lunMapTable=lunMapTable, snapmirrorMirrorTimestamp=snapmirrorMirrorTimestamp, vsFailoverGroupTable=vsFailoverGroupTable, ncDnsIresPendingForwardLookups=ncDnsIresPendingForwardLookups, dafsSessionId=dafsSessionId, licenseCustomerID=licenseCustomerID, ncHttpTotalMissRespTime=ncHttpTotalMissRespTime, ncStreamingAccelKbytesToClient=ncStreamingAccelKbytesToClient, v2cpCreates=v2cpCreates, netportEntry=netportEntry, plexName=plexName, tv3Write8KCalls=tv3Write8KCalls, extcache64MetaData=extcache64MetaData, smbNegProts=smbNegProts, clusterIdentityName=clusterIdentityName, qtreeStyle=qtreeStyle, outOfDateDiskShelf=outOfDateDiskShelf, cluster=cluster, slQQtreeName=slQQtreeName, trpcCalls=trpcCalls, tv2pReads=tv2pReads, cifsSmb2MidInvReject=cifsSmb2MidInvReject, vfIpAddresses=vfIpAddresses, nfsCache64TotalRequests=nfsCache64TotalRequests, enclSASConnectMaximum=enclSASConnectMaximum, ncHttpBytesFromClients=ncHttpBytesFromClients, ndmpSessionOpened=ndmpSessionOpened, rpcCalls=rpcCalls, slQVolume=slQVolume, snapmirrorRelType=snapmirrorRelType, ifHighInErrors=ifHighInErrors, svSystemActiveDstNumber=svSystemActiveDstNumber, lunSize64=lunSize64, tv2CachedCalls=tv2CachedCalls, svSchedType=svSchedType, v3cpFsstats=v3cpFsstats, qosWorkloadLun=qosWorkloadLun, filesys=filesys, cDOTCpFromNvlogReplayTakeoverTime=cDOTCpFromNvlogReplayTakeoverTime, snapmirrorState=snapmirrorState, qtreeMode=qtreeMode, ifHighOutErrors=ifHighOutErrors, vfIndex=vfIndex, smbNTTransactQuerySecDescs=smbNTTransactQuerySecDescs, Uuid=Uuid, amIndex=amIndex, vsRouteMetric=vsRouteMetric)
mibBuilder.exportSymbols("NETAPP-MIB", nodeProductVersion=nodeProductVersion, connectedInitiatorNodeName=connectedInitiatorNodeName, qrV2Tree=qrV2Tree, ncStreamingTotalRequests=ncStreamingTotalRequests, slVNumber=slVNumber, qosWorkloadUuid=qosWorkloadUuid, smb2QueryFsSizeInfos=smb2QueryFsSizeInfos, tv3cpReaddirs=tv3cpReaddirs, raidVGroup=raidVGroup, smb2FsctlPipePeeks=smb2FsctlPipePeeks, extcache64TotalBuffers=extcache64TotalBuffers, avUpdateFailed=avUpdateFailed, obsSmbClosePrintFiles=obsSmbClosePrintFiles, pclNfsV2Writes=pclNfsV2Writes, snapmirrorBackupAborts=snapmirrorBackupAborts, v2cpRoots=v2cpRoots, v3Write1KCalls=v3Write1KCalls, shelfRepaired=shelfRepaired, outOfDateDiskSecondaryDiskPort=outOfDateDiskSecondaryDiskPort, nfsCacheLowBytesFromServers=nfsCacheLowBytesFromServers, qosReadaheadAlignBlocks=qosReadaheadAlignBlocks, productGuiUrl=productGuiUrl, v2cRemoves=v2cRemoves, v2Write8KCalls=v2Write8KCalls, tv2cpReads=tv2cpReads, dafsBcGetattrs=dafsBcGetattrs, aggrVolumeFootprintsPercent=aggrVolumeFootprintsPercent, volumeAutogrow=volumeAutogrow, rpcUdpBadCalls=rpcUdpBadCalls, rpcNullRecvs=rpcNullRecvs, dafsSessionNumRequests=dafsSessionNumRequests, cifsMaxNFSBkWaiterCount=cifsMaxNFSBkWaiterCount, v2cReads=v2cReads, lunQtreeName=lunQtreeName, obsSmbLockAndReads=obsSmbLockAndReads, smb2QueryFsInvalids=smb2QueryFsInvalids, smb2LockPct=smb2LockPct, tv3pSetattrs=tv3pSetattrs, ncStreamingQTBTClients=ncStreamingQTBTClients, raidVStatus=raidVStatus, cDOTCpuNonCPInterrupts=cDOTCpuNonCPInterrupts, switchManagementId=switchManagementId, dmpStSuccesses=dmpStSuccesses, cDOTCpuIdleTime=cDOTCpuIdleTime, dafsLookUpps=dafsLookUpps, dfHighSisSavedKBytes=dfHighSisSavedKBytes, qrV2HighKBytesUsed=qrV2HighKBytesUsed, v3ccReadlinks=v3ccReadlinks, cifsMaxConnections=cifsMaxConnections, cDOTCpFromHighWaterOps=cDOTCpFromHighWaterOps, trcUdpDelayHits=trcUdpDelayHits, tv3CachedCalls=tv3CachedCalls, snapmirrorConnName=snapmirrorConnName, scsibladeOutOfQuorum=scsibladeOutOfQuorum, v2cSetattrs=v2cSetattrs, obsSmbWriteAndClosePct=obsSmbWriteAndClosePct, ncRM=ncRM, cifsOpLkEarlyNFSs=cifsOpLkEarlyNFSs, v2ccRemoves=v2ccRemoves, rpcUdpBadLens=rpcUdpBadLens, switchLinkSpeed=switchLinkSpeed, rebootNormal=rebootNormal, smb2QueryFileFullEAInfoPct=smb2QueryFileFullEAInfoPct, viaErrors=viaErrors, diskTotalCount=diskTotalCount, softQuotaNormal=softQuotaNormal, pclRpcServXDRCalls=pclRpcServXDRCalls, viaConnLocalMaxTransferSize=viaConnLocalMaxTransferSize, extcacheCardOffline=extcacheCardOffline, tv2cCreates=tv2cCreates, productPartnerSerialNum=productPartnerSerialNum, netapp1=netapp1, dfEntry=dfEntry, licenseIsExpired=licenseIsExpired, obsSmbOpenAndXs=obsSmbOpenAndXs, clusterNodeFailed=clusterNodeFailed, ncHttpBytesFromServers=ncHttpBytesFromServers, volumeRestrictedByMirrorBigIo=volumeRestrictedByMirrorBigIo, vserverIndex=vserverIndex, cifsSmb2DurableReclaimSucceeded=cifsSmb2DurableReclaimSucceeded, otherDiskTotalMb=otherDiskTotalMb, viaMaxDiscriminatorLength=viaMaxDiscriminatorLength, dfLowAvailKBytes=dfLowAvailKBytes, sisPolicy=sisPolicy, viaErrCompProt=viaErrCompProt, iscsiLowReadBytes=iscsiLowReadBytes, trcNonIdemNotDoneHits=trcNonIdemNotDoneHits, v2pLinks=v2pLinks, qrVFilesUsed=qrVFilesUsed, scsibladeInQuorum=scsibladeInQuorum, fcpTargetPortEntry=fcpTargetPortEntry, qosReadaheadMinRetireTime=qosReadaheadMinRetireTime, slMonth=slMonth, enclNodeName=enclNodeName, dafsRenames=dafsRenames, sisIsConstituent=sisIsConstituent, smb2FsctlPipeTransceives=smb2FsctlPipeTransceives, enclCurSensorsOverCurWarn=enclCurSensorsOverCurWarn, chassisPowerSuppliesFailed=chassisPowerSuppliesFailed, smb2SetFullEaInfoPct=smb2SetFullEaInfoPct, extcache64ReadLatency=extcache64ReadLatency, tv3pRmdirs=tv3pRmdirs, qtreeId=qtreeId, licenseSerialNumber=licenseSerialNumber, cifsSmb2FileIdBothDirInfo=cifsSmb2FileIdBothDirInfo, ncCdIsEnabled=ncCdIsEnabled, cpFromCpDeferredOps=cpFromCpDeferredOps, lunMapLogicalUnitNumber=lunMapLogicalUnitNumber, svDst=svDst, svSystemTotalSecondaryDeferments=svSystemTotalSecondaryDeferments, nfsCacheMissUnCacheableRequests=nfsCacheMissUnCacheableRequests, ncFtpBytesToClients=ncFtpBytesToClients, smbNTTransactIoctlPct=smbNTTransactIoctlPct, ncNntpBytesFromClients=ncNntpBytesFromClients, v2cpReads=v2cpReads, netportMac=netportMac, pclNfsV2Getattrs=pclNfsV2Getattrs, netportFlowcontrolOper=netportFlowcontrolOper, v2Write2KCalls=v2Write2KCalls, ncStreamingAccelKbytesFromClient=ncStreamingAccelKbytesFromClient, otherDiskEntry=otherDiskEntry, viaConnEntry=viaConnEntry, v3ccRenames=v3ccRenames, cifsWGName=cifsWGName, netapp=netapp, qrV2HighKBytesThreshold=qrV2HighKBytesThreshold, tv3cpGetattrs=tv3cpGetattrs, compress64UsedKBytes=compress64UsedKBytes, netappNetCache=netappNetCache, clusterLicenseSerialNumber=clusterLicenseSerialNumber, miscCorrectedMachineChecks=miscCorrectedMachineChecks, cifsPerClientStatsEnabled=cifsPerClientStatsEnabled, smbNTCancels=smbNTCancels, tv3Read128KCalls=tv3Read128KCalls, svTotalFailures=svTotalFailures, nfsCacheLowBytesToServers=nfsCacheLowBytesToServers, v3pReadlinks=v3pReadlinks, tv3Read32KCalls=tv3Read32KCalls, tv2Write128KCalls=tv2Write128KCalls, dfStatus=dfStatus, cifsOpLkIgnoredAcks=cifsOpLkIgnoredAcks, aggrFlexvollist=aggrFlexvollist, ncStreamingAccelHits=ncStreamingAccelHits, enclSASConnectType=enclSASConnectType, ncStreamingOndemandBWSavings=ncStreamingOndemandBWSavings, smb2QueryFileInvalidPct=smb2QueryFileInvalidPct, compressIsLicensed=compressIsLicensed, tv2WriteStats=tv2WriteStats, enclSASConnectCableTech=enclSASConnectCableTech, eccSummary=eccSummary, snapmirrorRestoreSuccesses=snapmirrorRestoreSuccesses, logicalInterfaceSticky=logicalInterfaceSticky, v3Write32KCalls=v3Write32KCalls, spareSecondaryDiskPort=spareSecondaryDiskPort, vserverName=vserverName, raidVSectorSize=raidVSectorSize, Boolean=Boolean, v3cGetattrs=v3cGetattrs, tv2pRmdirs=tv2pRmdirs, raidPUsedMb=raidPUsedMb, smb2UnLockPct=smb2UnLockPct, ncFtpBWSavings=ncFtpBWSavings, v3cRenames=v3cRenames, cpFromLowMbufOps=cpFromLowMbufOps, lunIndex=lunIndex, rcTcpNonIdemNotDoneHits=rcTcpNonIdemNotDoneHits, if64InUnknownProtos=if64InUnknownProtos, enclDisksPresent=enclDisksPresent, licenseExpirationTimeStamp=licenseExpirationTimeStamp, tv2Write1KCalls=tv2Write1KCalls, raidVDiskModel=raidVDiskModel, iscsi64ReadBytes=iscsi64ReadBytes, vfFpIndex=vfFpIndex, ncStreamingMmsBytesToServers=ncStreamingMmsBytesToServers, raidPCarrierID=raidPCarrierID, takeoverMode=takeoverMode, dfKBytesUsed=dfKBytesUsed, obsSmbOpenAndXPct=obsSmbOpenAndXPct, diskReconstructingCount=diskReconstructingCount, pclNfsV3Writes=pclNfsV3Writes, raidPTable=raidPTable, logicalInterfaceEntry=logicalInterfaceEntry, vsRouteVserverID=vsRouteVserverID, initiatorGroupName=initiatorGroupName, viaConnRcvdMessages=viaConnRcvdMessages, cifsWrites=cifsWrites, viaName=viaName, nodeStatCategoryName=nodeStatCategoryName, v3ccMkdirs=v3ccMkdirs, qrV264KBytesThreshold=qrV264KBytesThreshold, smb2OplkBrkAck=smb2OplkBrkAck, nfsCache64MissRequests=nfsCache64MissRequests, obsSmbUnlockByteRangePct=obsSmbUnlockByteRangePct, psetName=psetName, if64OutErrors=if64OutErrors, enclEntry=enclEntry, extcache64Uptime=extcache64Uptime, snapmirrorLastTransMBs=snapmirrorLastTransMBs, snapmirrorRelResyncFailCnt=snapmirrorRelResyncFailCnt, lunCloneSplitComplete=lunCloneSplitComplete, broadcastDomainPorts=broadcastDomainPorts, volMoveStatusTable=volMoveStatusTable, enclVoltSensorsUnderVoltWarnThr=enclVoltSensorsUnderVoltWarnThr, ncNntp=ncNntp, enclFansFailed=enclFansFailed, raidPDiskVendor=raidPDiskVendor, rstActives=rstActives, tv2pSymlinks=tv2pSymlinks, raidVDiskVendor=raidVDiskVendor, otherDiskTable=otherDiskTable, smbCheckDirPct=smbCheckDirPct, smb2SessionSetupPct=smb2SessionSetupPct, netappClusteredFiler=netappClusteredFiler, logicalInterfaceNetmaskLength=logicalInterfaceNetmaskLength, volumeError=volumeError, otherDiskTotalBlocks=otherDiskTotalBlocks, dfLowTotalKBytes=dfLowTotalKBytes, ifLowInDiscards=ifLowInDiscards, connectedInitiatorPortalGroup=connectedInitiatorPortalGroup, enclVoltSensorsOverVoltFail=enclVoltSensorsOverVoltFail, qosWorkloadClass=qosWorkloadClass, snapmirrorRelNewestSnapshot=snapmirrorRelNewestSnapshot, miscLowDiskReadBytes=miscLowDiskReadBytes, pclNfsV3Links=pclNfsV3Links, tv3cMkdirs=tv3cMkdirs, storage=storage, raidPScsiAdapter=raidPScsiAdapter, ncHttpBWSavings=ncHttpBWSavings, curDafs=curDafs, fabricName=fabricName, powerSupplyFailed=powerSupplyFailed, spareTotalBlocks=spareTotalBlocks, dhmNoticeDegradedIO=dhmNoticeDegradedIO, chassisPSUsMismatch=chassisPSUsMismatch, ncStreamingLiveBytesToServers=ncStreamingLiveBytesToServers, otherDiskNumber=otherDiskNumber, smb2QueryFileModeInfoPct=smb2QueryFileModeInfoPct, iscsiLowWriteBytes=iscsiLowWriteBytes, enclTable=enclTable, switchLowPacketsRejected=switchLowPacketsRejected, smbCloses=smbCloses, volNvfail=volNvfail, dafsNverifys=dafsNverifys, initiatorGroupTable=initiatorGroupTable, v2Write512Calls=v2Write512Calls, snapmirrorRelGroupType=snapmirrorRelGroupType, smbCreateTemporaryPct=smbCreateTemporaryPct, cDOTCpuSwitchInvocations=cDOTCpuSwitchInvocations, qosReadaheadSmallFileBlocks=qosReadaheadSmallFileBlocks, ncStreamingAccelEntry=ncStreamingAccelEntry, vfSpEntry=vfSpEntry, enclProductSerialNo=enclProductSerialNo, vfFilers=vfFilers, snapmirrorLastTransTimeSeconds=snapmirrorLastTransTimeSeconds)
mibBuilder.exportSymbols("NETAPP-MIB", dafsMaxResponseSize=dafsMaxResponseSize, fcpTargetTableIndex=fcpTargetTableIndex, nodeEnvFailedFanCount=nodeEnvFailedFanCount, v3Read64KCalls=v3Read64KCalls, tv2Read1KCalls=tv2Read1KCalls, tv3cpNulls=tv3cpNulls, diskMultipathWarning=diskMultipathWarning, trpcServXDRCalls=trpcServXDRCalls, shelfSESElectronicsFailed=shelfSESElectronicsFailed, slDay=slDay, enclTempSensorsUnderTempFail=enclTempSensorsUnderTempFail, trcUdpNonIdemNotDoneHits=trcUdpNonIdemNotDoneHits, scsitgtPartnerPathMisconfigured=scsitgtPartnerPathMisconfigured, tv2cSymlinks=tv2cSymlinks, raidVTotalBlocks=raidVTotalBlocks, qrV2IdType=qrV2IdType, slQSnapshotName=slQSnapshotName, amMonitor=amMonitor, cifsHostName=cifsHostName, v2ccRmdirs=v2ccRmdirs, v3ccRemoves=v3ccRemoves, viaOutRDMAReadBytes=viaOutRDMAReadBytes, snapvaultHostEntry=snapvaultHostEntry, qrEntry=qrEntry, otherDiskSerialNumber=otherDiskSerialNumber, cDOTCpuNodeName=cDOTCpuNodeName, avMcAfeeLicenseExpiring=avMcAfeeLicenseExpiring, svState=svState, enclVoltSensorsOverVoltFailThr=enclVoltSensorsOverVoltFailThr, diskSpareCount=diskSpareCount, vsRouteTable=vsRouteTable, qrV264KBytesLimit=qrV264KBytesLimit, ncHttpHitRequests=ncHttpHitRequests, ipspaceVservers=ipspaceVservers, tv3ccSetattrs=tv3ccSetattrs, raidVDiskRPM=raidVDiskRPM, cpuOk=cpuOk, svSystemActiveSrcNumber=svSystemActiveSrcNumber, raidPDiskType=raidPDiskType, enclNumberDiskBays=enclNumberDiskBays, tv2pWrcaches=tv2pWrcaches, v2cReadlinks=v2cReadlinks, cifsMaxFiles=cifsMaxFiles, raidPPlex=raidPPlex, spareNumber=spareNumber, ncHttpAvgHitRespTime=ncHttpAvgHitRespTime, ncStreamingRtspWMBWSavings=ncStreamingRtspWMBWSavings, aggrRowInfo=aggrRowInfo, ncDnsIresPendingReverseLookups=ncDnsIresPendingReverseLookups, pclNfsV3Write2KCalls=pclNfsV3Write2KCalls, enclElectronicsPartNos=enclElectronicsPartNos, snapmirrorSyncFailed=snapmirrorSyncFailed, dmpStartTime=dmpStartTime, qrV2SoftFileQuotaUnlimited=qrV2SoftFileQuotaUnlimited, qrV2LowKBytesSoftLimit=qrV2LowKBytesSoftLimit, qtreeEntry=qtreeEntry, chassisCPUFanSlow=chassisCPUFanSlow, fcpTargetTable=fcpTargetTable, v3cpSetattrs=v3cpSetattrs, outOfDateDiskCount=outOfDateDiskCount, tv3pSymlinks=tv3pSymlinks, switch64PacketsRejected=switch64PacketsRejected, nfsCacheHighBytesToServers=nfsCacheHighBytesToServers, raidUsedBlocks=raidUsedBlocks, tv2Write64KCalls=tv2Write64KCalls, dafsWriteInlines=dafsWriteInlines, ncIcapv1IsEnabled=ncIcapv1IsEnabled, smbCopyPct=smbCopyPct, fcpTargetLifPN=fcpTargetLifPN, ftpd=ftpd, trcDelayHits=trcDelayHits, ncStreamingRealBytesToClients=ncStreamingRealBytesToClients, obsSmbCreatePct=obsSmbCreatePct, tv2pRoots=tv2pRoots, obsSmbCreateNewPct=obsSmbCreateNewPct, enclTempSensorsOverTempWarn=enclTempSensorsOverTempWarn, dafsSessionMaxRequests=dafsSessionMaxRequests, ncHttpReqRate=ncHttpReqRate, svSchedIndex=svSchedIndex, qosWorkloadTable=qosWorkloadTable, lunLowOps=lunLowOps, spareTable=spareTable, clusterLicenseDescription=clusterLicenseDescription, avDisable=avDisable, ncHttpsAccelEntry=ncHttpsAccelEntry, broadcastDomainName=broadcastDomainName, smb2IpcReadPct=smb2IpcReadPct, dmpTable=dmpTable, v2cSymlinks=v2cSymlinks, smbTreeConnectAndXPct=smbTreeConnectAndXPct, netportMtu=netportMtu, miscHighNetSentBytes=miscHighNetSentBytes, outOfDateDiskEntry=outOfDateDiskEntry, svTotalSuccesses=svTotalSuccesses, pclNfsV3Read512Calls=pclNfsV3Read512Calls, extcache64RCLength=extcache64RCLength, appTrap=appTrap, tv3Read16KCalls=tv3Read16KCalls, volName=volName, pclNfsV2Setattrs=pclNfsV2Setattrs, smb2FsctlFileUnsupportedPct=smb2FsctlFileUnsupportedPct, dmpDataAmount=dmpDataAmount, switchFabricIndex=switchFabricIndex, pclNfsV3NullPerCent=pclNfsV3NullPerCent, qrV2LowKBytesThreshold=qrV2LowKBytesThreshold, qos=qos, viaMaxRegisterRegions=viaMaxRegisterRegions, pclRpcNullRecvs=pclRpcNullRecvs, viaCurrCQ=viaCurrCQ, snapmirrorRelUnHealthyReason=snapmirrorRelUnHealthyReason, scsitgtThrottleNotice=scsitgtThrottleNotice, obsSmbProcessExitPct=obsSmbProcessExitPct, vfDisallowedProtocols=vfDisallowedProtocols, smb2FsctlIpcUnsupportedPct=smb2FsctlIpcUnsupportedPct, fcpTargetLif=fcpTargetLif, quotaExceeded=quotaExceeded, obsSmbReadRawPct=obsSmbReadRawPct, volumeRemoteUnreachable=volumeRemoteUnreachable, pclNfsV3Setattrs=pclNfsV3Setattrs, qrV2VolumeName=qrV2VolumeName, v2cRoots=v2cRoots, vsFirewallPolicyService=vsFirewallPolicyService, tv2Read128KCalls=tv2Read128KCalls, dfMaxFilesAvail=dfMaxFilesAvail, netportIfGrpMac=netportIfGrpMac, cifsInfo=cifsInfo, qosWorkloadReadAhead=qosWorkloadReadAhead, volJunctionPathActive=volJunctionPathActive, ncDns=ncDns, misc64DiskWriteBytes=misc64DiskWriteBytes, snapmirrorIndex=snapmirrorIndex, tv3cpSetattrs=tv3cpSetattrs, cDOTCpuCount=cDOTCpuCount, qrVKBytesThreshold=qrVKBytesThreshold, sysStat=sysStat, aggrOptions=aggrOptions, ifHighInUcastPkts=ifHighInUcastPkts, netifNumber=netifNumber, dafsBcBatchCompletions=dafsBcBatchCompletions, envFailedPowerSupplyCount=envFailedPowerSupplyCount, smb2FsctlSetSparsePct=smb2FsctlSetSparsePct, tv3cRmdirs=tv3cRmdirs, snapmirrorRelVserver=snapmirrorRelVserver, volumeDegradedDirty=volumeDegradedDirty, dmpAttempts=dmpAttempts, tv2Read512Calls=tv2Read512Calls, tv3pReads=tv3pReads, misc64DiskReadBytes=misc64DiskReadBytes, v2cWrcaches=v2cWrcaches, rcpTcpCalls=rcpTcpCalls, pclNfsV2Read1KCalls=pclNfsV2Read1KCalls, pclNfsV3Read8KCalls=pclNfsV3Read8KCalls, dfCompressSavedPercent=dfCompressSavedPercent, dafsGetattrDirects=dafsGetattrDirects, v3cpCreates=v3cpCreates, vsRouteEntry=vsRouteEntry, cfPartnerSysid=cfPartnerSysid, snapmirrorConnDst1=snapmirrorConnDst1, snapmirrorRelSrcPath=snapmirrorRelSrcPath, v3Read1KCalls=v3Read1KCalls, vfIpAddr=vfIpAddr, netportIfGrpTable=netportIfGrpTable, qrId=qrId, snapmirrorRestoreWaitAborts=snapmirrorRestoreWaitAborts, if64OutDiscards=if64OutDiscards, avUpdate=avUpdate, volTable=volTable, fcpTargetLifName=fcpTargetLifName, extcache64Size=extcache64Size, viaConnRemoteNetAddress=viaConnRemoteNetAddress, initiatorGroupUseALUA=initiatorGroupUseALUA, plexTable=plexTable, cpFromTimerOps=cpFromTimerOps, v2cpRenames=v2cpRenames, fcpTargetPortStandby=fcpTargetPortStandby, vsFailoverGroupName=vsFailoverGroupName, v2cpGetattrs=v2cpGetattrs, ncHttpAccelIndex=ncHttpAccelIndex, pclNfsV3Read2KCalls=pclNfsV3Read2KCalls, dafsOpenattrs=dafsOpenattrs, ncNntpObjHitrate=ncNntpObjHitrate, enclSASConnectCableEnd=enclSASConnectCableEnd, volumeOnline=volumeOnline, diskFailedMessage=diskFailedMessage, qrV2HighKBytesSoftLimit=qrV2HighKBytesSoftLimit, lunLowOtherOps=lunLowOtherOps, productLicenseEntry=productLicenseEntry, v3cpRmdirs=v3cpRmdirs, chassisPowerSupplyDegraded=chassisPowerSupplyDegraded, logicalInterfaceCurrNode=logicalInterfaceCurrNode, obsSmbSetInfoPct=obsSmbSetInfoPct, qosReadaheadUseTiming=qosReadaheadUseTiming, cifsOpLkDelayedBreaks=cifsOpLkDelayedBreaks, dafsSessionMaxCredentials=dafsSessionMaxCredentials, logicalInterfaceStatusOper=logicalInterfaceStatusOper, trpcServ=trpcServ, slEntry=slEntry, amAddress=amAddress, ncLocalConfigVersion=ncLocalConfigVersion, viaConnRcvdRdmaWriteMessages=viaConnRcvdRdmaWriteMessages, v3pGetattrs=v3pGetattrs, sis64LastOpSize=sis64LastOpSize, tv3Calls=tv3Calls, lunName=lunName, cifsPreserveCase=cifsPreserveCase, svSchedSchedule=svSchedSchedule, slQVolumeName=slQVolumeName, cpuInterrupts=cpuInterrupts, qtreeIndex=qtreeIndex, fcpTargetPortTable=fcpTargetPortTable, amEntry=amEntry, raidPShelf=raidPShelf, productVendor=productVendor, smb2IpcReads=smb2IpcReads, ndmpBackupSuccesses=ndmpBackupSuccesses, ifLowInOctets=ifLowInOctets, netportIfGrpMode=netportIfGrpMode, volumeRestrictedRootConflict=volumeRestrictedRootConflict, nfscache=nfscache, trcTcpMisses=trcTcpMisses, qvStateStat=qvStateStat, tv3cRenames=tv3cRenames, snapmirrorTotalDeferments=snapmirrorTotalDeferments, switchEntry=switchEntry, sisEntry=sisEntry, v2pRmdirs=v2pRmdirs, qosMonitorMemoryMaxed=qosMonitorMemoryMaxed, vserverAntiVirusOnAccessPolicy=vserverAntiVirusOnAccessPolicy, tv3pRenames=tv3pRenames, backup=backup, cifsMaxACLs=cifsMaxACLs, viaConnLocalEnableRdmaRead=viaConnLocalEnableRdmaRead, ncHttpBytesToClients=ncHttpBytesToClients, fcpTargetLifStatusAdmin=fcpTargetLifStatusAdmin, autosupportConfigurationError=autosupportConfigurationError, cifsOps=cifsOps, raidVPlex=raidVPlex, diskSummary=diskSummary, fsStatusMessage=fsStatusMessage, pclNfsV2SetattrPerCent=pclNfsV2SetattrPerCent, df64SisSharedKBytes=df64SisSharedKBytes, portIndex=portIndex, pclNfsV2WritePerCent=pclNfsV2WritePerCent, qrV2SoftQuotaUnlimited=qrV2SoftQuotaUnlimited, ncStreamingMmsProIsLicensed=ncStreamingMmsProIsLicensed, enclCurSensorsMaximum=enclCurSensorsMaximum, v2pReaddirs=v2pReaddirs, powerSupplyFanFailxMinShutdown=powerSupplyFanFailxMinShutdown, viaInMsgs=viaInMsgs, netcache=netcache, cifsPCGenericUser=cifsPCGenericUser, nodeEpsilon=nodeEpsilon, viaOutMsgs=viaOutMsgs, if64InUcastPkts=if64InUcastPkts)
mibBuilder.exportSymbols("NETAPP-MIB", viaConnRemotePortNumber=viaConnRemotePortNumber, aggrType=aggrType, pclNfsV2Write2KCalls=pclNfsV2Write2KCalls, trcNonIdemDoneHits=trcNonIdemDoneHits, dfHighUsedKBytes=dfHighUsedKBytes, aggrOwners=aggrOwners, v3cSymlinks=v3cSymlinks, cifsSharingErrorRetries=cifsSharingErrorRetries, dafsOpens=dafsOpens, lunHighWriteOps=lunHighWriteOps, pclNfsV2SymlinkPerCent=pclNfsV2SymlinkPerCent, snapmirrorRelExportedSnapshotTimeStamp=snapmirrorRelExportedSnapshotTimeStamp, qrIndex=qrIndex, scsitgtFCPLinkBreak=scsitgtFCPLinkBreak, v2cpRemoves=v2cpRemoves, logicalInterfaceVif=logicalInterfaceVif, initiatorGroupMemberEntry=initiatorGroupMemberEntry, ncHttpBytesToServers=ncHttpBytesToServers, nodeStatProperties=nodeStatProperties, cDOTCpFromLogFullOps=cDOTCpFromLogFullOps, rpcUdpCalls=rpcUdpCalls, enclCurSensorsCurrentCur=enclCurSensorsCurrentCur, nfsCacheLowBytesFromClients=nfsCacheLowBytesFromClients, outOfDateDiskBay=outOfDateDiskBay, smb2SetModeInfoPct=smb2SetModeInfoPct, smb2SetAllocInfos=smb2SetAllocInfos, smbNTCancelOtherPct=smbNTCancelOtherPct, qrVSid=qrVSid, qrV2Vserver=qrV2Vserver, restore=restore, raidPGroupNumber=raidPGroupNumber, enclElectronicsPresent=enclElectronicsPresent, v2cGetattrs=v2cGetattrs, viaConnRcvdRdmaReadMessages=viaConnRcvdRdmaReadMessages, portName=portName, pclNfsV3Readdirs=pclNfsV3Readdirs, volumeCloneCreate=volumeCloneCreate, raidTable=raidTable, dafsDisconnects=dafsDisconnects, raidScsiId=raidScsiId, viaInRDMAReadBytes=viaInRDMAReadBytes, cDOTCpFromLowWaterOps=cDOTCpFromLowWaterOps, tv2cpReadlinks=tv2cpReadlinks, smb2SetAllocInfoPct=smb2SetAllocInfoPct, chassisPSUwrongInput=chassisPSUwrongInput, qosReadaheadMinBlocks=qosReadaheadMinBlocks, svHostTotalFailures=svHostTotalFailures, rcUdpNonIdemDoneHits=rcUdpNonIdemDoneHits, misc64NfsOps=misc64NfsOps, broadcastDomainFailoverGroups=broadcastDomainFailoverGroups, PYSNMP_MODULE_ID=netappModuleId, v2Read8KCalls=v2Read8KCalls, enclFansMaximum=enclFansMaximum, tv3pLookups=tv3pLookups, obsSmbProcessExits=obsSmbProcessExits, cifsTotalOps=cifsTotalOps, lunMapLUNName=lunMapLUNName, qtreeVolumeName=qtreeVolumeName, remotesystemMgmtTest=remotesystemMgmtTest, v3Read128KCalls=v3Read128KCalls, compressHighSavedKBytes=compressHighSavedKBytes, tv2pRenames=tv2pRenames, cfCannotTakeoverCause=cfCannotTakeoverCause, v2ccGetattrs=v2ccGetattrs, ncStreamingAccelIndex=ncStreamingAccelIndex, notificationTrap=notificationTrap, viaErrRdmawProt=viaErrRdmawProt, v2Write128KCalls=v2Write128KCalls, chassisTemperatureUnknown=chassisTemperatureUnknown, viaNicTable=viaNicTable, nfsCacheLowBytesToClients=nfsCacheLowBytesToClients, dfIndex=dfIndex, pclNfsV3ReadPerCent=pclNfsV3ReadPerCent, smbTrans2GetDFSReferralPct=smbTrans2GetDFSReferralPct, if64OutUcastPkts=if64OutUcastPkts, TimeTicks64=TimeTicks64, svPrimaryIsLicensed=svPrimaryIsLicensed, grmMonitorString=grmMonitorString, fcpLowOps=fcpLowOps, v3ccLookups=v3ccLookups, qrFileLimit=qrFileLimit, shelfFault=shelfFault, ncBytesToClients=ncBytesToClients, obsSmbQueryInfo2s=obsSmbQueryInfo2s, extcacheIsFlexShareOn=extcacheIsFlexShareOn, nfsCalls=nfsCalls, cDOTCpEntry=cDOTCpEntry, viaOutRdma=viaOutRdma, v2cpNulls=v2cpNulls, dafsSessionEndian=dafsSessionEndian, raidVDiskPool=raidVDiskPool, if64OutOctets=if64OutOctets, smbMoves=smbMoves, ncHttpOptions=ncHttpOptions, extcache64WriteLatency=extcache64WriteLatency, initiatorGroupMemberIndex=initiatorGroupMemberIndex, ipspaceID=ipspaceID, tv3cReaddirPluss=tv3cReaddirPluss, vsFirewallPolicyEntry=vsFirewallPolicyEntry, enclTempSensorsUnderTempWarnThr=enclTempSensorsUnderTempWarnThr, v3pReaddirs=v3pReaddirs, raidVSecondaryDiskPort=raidVSecondaryDiskPort, cifsSymlinksEnabled=cifsSymlinksEnabled, sisLogicalLimit=sisLogicalLimit, dafsNicListenAddr=dafsNicListenAddr, plexStatus=plexStatus, qtreeTable=qtreeTable, viaConnLocalDescriminator=viaConnLocalDescriminator, vfProEntry=vfProEntry, v3cReaddirs=v3cReaddirs, ncHttpsAccelIndex=ncHttpsAccelIndex, vfStoragePaths=vfStoragePaths, chassisFanWarning=chassisFanWarning, dafsSessionNumCredentials=dafsSessionNumCredentials, v2cpStatfss=v2cpStatfss, rpcServXDRCalls=rpcServXDRCalls, cifsAlignedSmallRels=cifsAlignedSmallRels, netportLinkState=netportLinkState, vfIpIndex=vfIpIndex, avRollbackFailed=avRollbackFailed, filesysMaxfilesPossible=filesysMaxfilesPossible, ncHttpAccelHits=ncHttpAccelHits, dafsNicDevice=dafsNicDevice, dafsSessionEntry=dafsSessionEntry, ncDnsIresReverseLookups=ncDnsIresReverseLookups, tv3cReaddirs=tv3cReaddirs, rmcCardMissingCables=rmcCardMissingCables, dafsCommits=dafsCommits, vfUuid=vfUuid, remoteSystemMgmtNotification=remoteSystemMgmtNotification, ncHttpByteHitRateLast1Min=ncHttpByteHitRateLast1Min, raidVDiskUID=raidVDiskUID, slVIndex=slVIndex, dafsDelegReturns=dafsDelegReturns, licenseIsLicensed=licenseIsLicensed, volMoveState=volMoveState, rpcServ=rpcServ, connectedInitiatorIsid=connectedInitiatorIsid, netportFlowcontrolAdmin=netportFlowcontrolAdmin, dhmNoticePFAEvent=dhmNoticePFAEvent, volMoveCutoverDeferred=volMoveCutoverDeferred, smb2FsctlSetSparses=smb2FsctlSetSparses, v3cReadlinks=v3cReadlinks, extcacheSubType=extcacheSubType, pclNfsV2Write4KCalls=pclNfsV2Write4KCalls, cDOTCpuTotalDomainSwitches=cDOTCpuTotalDomainSwitches, chassisPowerSupplyRemoved=chassisPowerSupplyRemoved, vserverNsSwitch=vserverNsSwitch, tv2cReaddirs=tv2cReaddirs, fcpTargetLifNN=fcpTargetLifNN, tv2ccWrcaches=tv2ccWrcaches, tv3cSetattrs=tv3cSetattrs, sm=sm, vfSpName=vfSpName, dfStateOnline=dfStateOnline, volCloneChildrenList=volCloneChildrenList, cifsStatsExhaustMemCtrlBlk=cifsStatsExhaustMemCtrlBlk, smbLogoffAndXPct=smbLogoffAndXPct, tv3ccFsstats=tv3ccFsstats, quotaInitPercent=quotaInitPercent, ncIcapIsLicensed=ncIcapIsLicensed, v2Read512Calls=v2Read512Calls, cifsSmb2FileRequest=cifsSmb2FileRequest, dafsLocks=dafsLocks, tv3Write128KCalls=tv3Write128KCalls, smbNTTransactNotifyChgPct=smbNTTransactNotifyChgPct, ncHttpTotalRequests=ncHttpTotalRequests, appInfo=appInfo, vserverAggrList=vserverAggrList, qosReadaheadMaxDeadline=qosReadaheadMaxDeadline, ncHttpAvgRespTime=ncHttpAvgRespTime, appAlert=appAlert, overTemp=overTemp, snapvaultSchedEntry=snapvaultSchedEntry, v3cWrites=v3cWrites, enclElectronicsSerialNos=enclElectronicsSerialNos, vserverEntry=vserverEntry, outOfDateDiskRPM=outOfDateDiskRPM, spareSecondaryDiskName=spareSecondaryDiskName, amNumber=amNumber, qrV2LowKBytesLimit=qrV2LowKBytesLimit, otherDiskFirmwareRevision=otherDiskFirmwareRevision, dafsConnectBinds=dafsConnectBinds, v3pLookups=v3pLookups, pclRpcCalls=pclRpcCalls, viaConnVINumber=viaConnVINumber, ncStreamingQuickTimeIsLicensed=ncStreamingQuickTimeIsLicensed, v3Write128KCalls=v3Write128KCalls, sisLowLastOpSize=sisLowLastOpSize, errorTrap=errorTrap, upsLinePowerRestored=upsLinePowerRestored, v2ccSymlinks=v2ccSymlinks, compressLowSavedKBytes=compressLowSavedKBytes, trcTcpNonIdemNotDoneHits=trcTcpNonIdemNotDoneHits, ncStreamingRealUltraIsLicensed=ncStreamingRealUltraIsLicensed, miscHighTapeWriteBytes=miscHighTapeWriteBytes, v2ccWrites=v2ccWrites, v2pLookups=v2pLookups, rcpTcpNullRecvs=rcpTcpNullRecvs, trcUdpInProgressHits=trcUdpInProgressHits, cDOTCpFromSyncOps=cDOTCpFromSyncOps, rcUdpNonIdemNotDoneHits=rcUdpNonIdemNotDoneHits, dafsSessionAllowRdmaReadChannel=dafsSessionAllowRdmaReadChannel, diskVerifyingParityCount=diskVerifyingParityCount, dafs=dafs, pclNfsV3RmdirPerCent=pclNfsV3RmdirPerCent, raidVNumber=raidVNumber, otherDiskStatus=otherDiskStatus, tv3cWrites=tv3cWrites, nfsCacheBWSavings=nfsCacheBWSavings, svTotalRestartSuccesses=svTotalRestartSuccesses, v3cpGetattrs=v3cpGetattrs, initiatorListTable=initiatorListTable, svLastTransType=svLastTransType, rpcBadCalls=rpcBadCalls, qrTable=qrTable, netappModuleId=netappModuleId, vserverUuid=vserverUuid, qosWorkloadId=qosWorkloadId, pclNfsV2Read128KCalls=pclNfsV2Read128KCalls, initiatorGroupThrottleBorrow=initiatorGroupThrottleBorrow, qosReadaheadInterarrivalWeight=qosReadaheadInterarrivalWeight, nfsCacheHighBytesFromServers=nfsCacheHighBytesFromServers, cifsNBTDisconnects=cifsNBTDisconnects, snapmirrorTotalRestartSuccesses=snapmirrorTotalRestartSuccesses, cifsOpens=cifsOpens, initiatorGroupThrottleReserve=initiatorGroupThrottleReserve, qvStateVolume=qvStateVolume, dmpNumFiles=dmpNumFiles, logicalInterfaceCurrPort=logicalInterfaceCurrPort, ncStreamingOBFServers=ncStreamingOBFServers, tv3cpRemoves=tv3cpRemoves, qosReadaheadMinDiskResponseTime=qosReadaheadMinDiskResponseTime, appNotice=appNotice, netappDataFabricManager=netappDataFabricManager, ncStreamingOptions=ncStreamingOptions, fcpTargetPortSpeed=fcpTargetPortSpeed, snapmirrorRelStatus=snapmirrorRelStatus, ifLowInUcastPkts=ifLowInUcastPkts, switchStatus=switchStatus, tv2cSetattrs=tv2cSetattrs, licenseIsAutoEnabled=licenseIsAutoEnabled, shelfSESElectronicsInfo=shelfSESElectronicsInfo, fsStatus=fsStatus, tv2Write512Calls=tv2Write512Calls, cifsTotalCalls=cifsTotalCalls, raidVDiskSerialNumber=raidVDiskSerialNumber, smb2QueryFileModeInfos=smb2QueryFileModeInfos, netapp0=netapp0, cifsDomainJoined=cifsDomainJoined, tv2Read2KCalls=tv2Read2KCalls, productLicenseTable=productLicenseTable, cifsClearTextPasswd=cifsClearTextPasswd, miscGlobalStatus=miscGlobalStatus)
mibBuilder.exportSymbols("NETAPP-MIB", obsSmbReadMPXs=obsSmbReadMPXs, smbWriteAndXs=smbWriteAndXs, ndmp=ndmp, qrVKBytesLimitSoft=qrVKBytesLimitSoft, qrV2Sid=qrV2Sid, volMoveIndex=volMoveIndex, cpFromSnapshotOps=cpFromSnapshotOps, volFSID=volFSID, fcpTargetPortName=fcpTargetPortName, avRollback=avRollback, v3ccGetattrs=v3ccGetattrs, dafsGetRootHandles=dafsGetRootHandles, clusterLicenseEntry=clusterLicenseEntry, vserverMaxVolumes=vserverMaxVolumes, informationalTrap=informationalTrap, tv3pReadlinks=tv3pReadlinks, smbTrans2SetPathInfos=smbTrans2SetPathInfos, tv3ccPathconfs=tv3ccPathconfs, smbNTTransactSetSecDescs=smbNTTransactSetSecDescs, portSwitchIndex=portSwitchIndex, tv3cFsinfos=tv3cFsinfos, tv3ccRemoves=tv3ccRemoves, dafsMaxRequests=dafsMaxRequests, extcache=extcache, nfsCacheLowMissRequests=nfsCacheLowMissRequests, switchHighPacketsRejected=switchHighPacketsRejected, broadcastDomainSubnets=broadcastDomainSubnets, qosMonitorMemoryAbated=qosMonitorMemoryAbated, smb2SetInfoInvalids=smb2SetInfoInvalids, v3Calls=v3Calls, trpcBadCalls=trpcBadCalls, dmpStAttempts=dmpStAttempts, vserverQuotaPolicy=vserverQuotaPolicy, v3ccSymlinks=v3ccSymlinks, raidDiskName=raidDiskName, cifsSmb2Unsupported=cifsSmb2Unsupported, ncGrmAgentOptions=ncGrmAgentOptions, miscLowNfsOps=miscLowNfsOps, raidPDiskModel=raidPDiskModel, ftpdMaxConnThresholdNotice=ftpdMaxConnThresholdNotice, snapmirrorStatus=snapmirrorStatus, smbTreeConnectAndXs=smbTreeConnectAndXs, v3Read512Calls=v3Read512Calls, sisStaleFpPercentage=sisStaleFpPercentage, smb2Creates=smb2Creates, snapmirrorRelState=snapmirrorRelState, slVName=slVName, pclNfsV2Write32KCalls=pclNfsV2Write32KCalls, pclNfsV3SymlinkPerCent=pclNfsV3SymlinkPerCent, smbCheckDirs=smbCheckDirs, ifLowOutUcastPkts=ifLowOutUcastPkts, qrVEntry=qrVEntry, cDOTCpuBusyTime=cDOTCpuBusyTime, obsSmbCreateNews=obsSmbCreateNews, v3cpReadlinks=v3cpReadlinks, vserverRootVolumeSecurityStyle=vserverRootVolumeSecurityStyle, dafsExportEnabled=dafsExportEnabled, tv2pLinks=tv2pLinks, ncStreamingQTBTServers=ncStreamingQTBTServers, qrV2Id=qrV2Id, qosReadaheadClass=qosReadaheadClass, volumeSelectedRootConflict=volumeSelectedRootConflict, vserverDisallowedProtocolList=vserverDisallowedProtocolList, qrV2QuotaUnlimited=qrV2QuotaUnlimited, svLastTransTimeSeconds=svLastTransTimeSeconds, clusterPingDropLarge=clusterPingDropLarge, raidVScsiAdapter=raidVScsiAdapter, cifsPercent=cifsPercent, qtreeName=qtreeName, qrVId=qrVId, tv3ccMknods=tv3ccMknods, ncStreamingBWSavings=ncStreamingBWSavings, pclNfsV2Write8KCalls=pclNfsV2Write8KCalls, ncHttpCliConns=ncHttpCliConns, ncDnsIres=ncDnsIres, pclNfsV3Removes=pclNfsV3Removes, vfilerIsLicensed=vfilerIsLicensed, cifsDomainName=cifsDomainName, ncNntpActiveServConns=ncNntpActiveServConns, flexCloneSplitComplete=flexCloneSplitComplete, tv3cSymlinks=tv3cSymlinks, smb2SetFileDispInfoPct=smb2SetFileDispInfoPct, ncFtpCliConns=ncFtpCliConns, initiatorListEntryIndex=initiatorListEntryIndex, haPartnerSysid=haPartnerSysid, smb2SetSecurityInfos=smb2SetSecurityInfos, slQIndex=slQIndex, nfsCacheMissRequests=nfsCacheMissRequests, smb2QueryFsSizeInfoPct=smb2QueryFsSizeInfoPct, smb2QueryFileNetOpenInfoPct=smb2QueryFileNetOpenInfoPct, fsMaxUsedBytesPerCent=fsMaxUsedBytesPerCent, licenseService=licenseService, cDOTCpFromSnapshotOps=cDOTCpFromSnapshotOps, smb2SetModeInfos=smb2SetModeInfos, df64CompressSaved=df64CompressSaved, chassisPSRemovedxMinShutdown=chassisPSRemovedxMinShutdown, smb2FsctlEnumSnapshotsPct=smb2FsctlEnumSnapshotsPct, smbNTTransactNotifyChgs=smbNTTransactNotifyChgs, cifsNOplockBreakWaits=cifsNOplockBreakWaits, pclNfsV3Getattrs=pclNfsV3Getattrs, trcMisses=trcMisses, lunLowReadBytes=lunLowReadBytes, snapvaultSchedTable=snapvaultSchedTable, accelmonitor=accelmonitor, nodeStatNode=nodeStatNode, qosReadaheadSettingsEntry=qosReadaheadSettingsEntry, portEntry=portEntry, raidVEntry=raidVEntry, cifsGetAttrs=cifsGetAttrs, smbNTCancelCNs=smbNTCancelCNs, powerSupplyFailureShutdown=powerSupplyFailureShutdown, aggrVolumeFootprints=aggrVolumeFootprints, qosPolicyGroupClass=qosPolicyGroupClass, dafsCheckResponses=dafsCheckResponses, obsSmbWriteRaws=obsSmbWriteRaws, snapmirrorTotalTransMBs=snapmirrorTotalTransMBs, viaConnected=viaConnected, compress=compress, ncStreamingMmsBytesFromServers=ncStreamingMmsBytesFromServers, v2cNulls=v2cNulls, trcTcpInProgressHits=trcTcpInProgressHits, trpcNullRecvs=trpcNullRecvs, vfName=vfName, lunLowWriteBytes=lunLowWriteBytes, tnfsrwStats=tnfsrwStats, obsSmbReadMPXPct=obsSmbReadMPXPct, lunAlignment=lunAlignment, tv2Calls=tv2Calls, smb2QueryFsFullSizeInfoPct=smb2QueryFsFullSizeInfoPct, smb2QueryFileEAInfoPct=smb2QueryFileEAInfoPct, smb2SetEofInfos=smb2SetEofInfos, qosWorkloadName=qosWorkloadName, qosReadaheadForceNone=qosReadaheadForceNone, obsSmbTreeConnectPct=obsSmbTreeConnectPct, svStatus=svStatus, tv2Write32KCalls=tv2Write32KCalls, smbTransactCreatePct=smbTransactCreatePct, enclVoltSensorsOverVoltWarnThr=enclVoltSensorsOverVoltWarnThr, v2Percent=v2Percent, licenseDescription=licenseDescription, iscsiLowOps=iscsiLowOps, rcpTcpBadLens=rcpTcpBadLens, v2cCreates=v2cCreates, obsSmbWriteMPXs=obsSmbWriteMPXs, ncAuth=ncAuth, nodeUptime=nodeUptime, cifsSetAttrs=cifsSetAttrs, smb2Logoffs=smb2Logoffs, tv3ccLookups=tv3ccLookups, cDOTCpTime=cDOTCpTime, lunHighErrors=lunHighErrors, vserverLanguage=vserverLanguage, sisQueuedJob=sisQueuedJob, cifsNOplockAckWaits=cifsNOplockAckWaits, smbWriteAndXPct=smbWriteAndXPct, nfsCache64HitRequests=nfsCache64HitRequests, smb2SetBasicInfos=smb2SetBasicInfos, licenseExpiration=licenseExpiration, qosPolicyGroupName=qosPolicyGroupName, ncStreamingRtspIsEnabled=ncStreamingRtspIsEnabled, rpcBadLens=rpcBadLens, avVirusfound=avVirusfound, netportTable=netportTable, cifsSmb2DurableHandlePreserved=cifsSmb2DurableHandlePreserved, enclPowerSuppliesSerialNos=enclPowerSuppliesSerialNos, smb2FsctlPipePeekPct=smb2FsctlPipePeekPct, avLicenseCheckFailed=avLicenseCheckFailed, subnetTable=subnetTable, tv2ccGetattrs=tv2ccGetattrs, cifsSmb2FileIdFullDirInfo=cifsSmb2FileIdFullDirInfo, tv3cpLinks=tv3cpLinks, misc64TapeReadBytes=misc64TapeReadBytes, enclFansPresent=enclFansPresent, avTrendLicenseExpiring=avTrendLicenseExpiring, pclNfsV2Statfss=pclNfsV2Statfss, tv3pMkdirs=tv3pMkdirs, raidPEntry=raidPEntry, ncBytesFromClients=ncBytesFromClients, ncRMMem=ncRMMem, pclNfsV2Readlinks=pclNfsV2Readlinks, outOfDateDiskScsiId=outOfDateDiskScsiId, v2Write64KCalls=v2Write64KCalls, snapmirrorIsLicensed=snapmirrorIsLicensed, productFirmwareVersion=productFirmwareVersion, ifLowOutNUcastPkts=ifLowOutNUcastPkts, nfsCacheLowHitRequests=nfsCacheLowHitRequests, v2pSetattrs=v2pSetattrs, cDOTCpuInterrupts=cDOTCpuInterrupts, slVVolume=slVVolume, plexPercentResyncing=plexPercentResyncing, rpcUdpServXDRCalls=rpcUdpServXDRCalls, smbDeleteDirs=smbDeleteDirs, diskPrefailedCount=diskPrefailedCount, snapmirrorBaseSnapshot=snapmirrorBaseSnapshot, logicalInterfaceHomePort=logicalInterfaceHomePort, extcacheOptions=extcacheOptions, obsSmbWritePrintFiles=obsSmbWritePrintFiles, vsFirewallPolicyName=vsFirewallPolicyName, tv3cCommits=tv3cCommits, snapmirrorFilerTotalDstDeferments=snapmirrorFilerTotalDstDeferments, otherDiskDiskName=otherDiskDiskName, miscHighNetRcvdBytes=miscHighNetRcvdBytes, netifIndex=netifIndex, logicalInterfaceComment=logicalInterfaceComment, smb2Cancels=smb2Cancels, haNodeSysid=haNodeSysid, iscsi64WriteBytes=iscsi64WriteBytes, snapmirrorConnSrc1=snapmirrorConnSrc1, avMcAfeeEngineExpired=avMcAfeeEngineExpired, cifsMultipleVCs=cifsMultipleVCs, vserverIPspace=vserverIPspace, dafsNicDirectOutBytes=dafsNicDirectOutBytes, pclNfsV2Renames=pclNfsV2Renames, miscLowHttpOps=miscLowHttpOps, dfKBytesAvail=dfKBytesAvail, viaConnRemoteEnableRdmaRead=viaConnRemoteEnableRdmaRead, viaMaxCQEntries=viaMaxCQEntries, ifLowOutOctets=ifLowOutOctets, netOptsSwitchlessCluster=netOptsSwitchlessCluster, licensePackage=licensePackage, smb2IpcCreatePct=smb2IpcCreatePct, productApiUrl=productApiUrl, cpuContextSwitches=cpuContextSwitches, ncIsLicensed=ncIsLicensed, netportVlanTag=netportVlanTag, cifsNTrees=cifsNTrees, extcache64Usedsize=extcache64Usedsize, v3cLinks=v3cLinks, raidVPlexName=raidVPlexName, vserverLdapClient=vserverLdapClient, dafsOpenDowngrades=dafsOpenDowngrades, nfsCacheBytesFromClients=nfsCacheBytesFromClients, viaMaxRegisterBlockBytes=viaMaxRegisterBlockBytes, fcpTargetPN=fcpTargetPN, viaConnSentMessages=viaConnSentMessages, ncDnsRequestsReceived=ncDnsRequestsReceived, pclNfsV3Read32KCalls=pclNfsV3Read32KCalls, pclNfsV2NullPerCent=pclNfsV2NullPerCent, haCannotTakeoverCause=haCannotTakeoverCause, tv3cpWrites=tv3cpWrites, dafsMaxRequestSize=dafsMaxRequestSize, dafsReadDirects=dafsReadDirects, dfRowInfo=dfRowInfo, licenseLegacy=licenseLegacy, ncHttpAccelKbytesFromClient=ncHttpAccelKbytesFromClient, snapmirrorReadBytes=snapmirrorReadBytes, fcpTargetLifVserver=fcpTargetLifVserver, extcache64Evicts=extcache64Evicts, pclNfsV2RemovePerCent=pclNfsV2RemovePerCent, df64AvailKBytes=df64AvailKBytes, viaConnectWait=viaConnectWait, curNfs=curNfs, smb2FsctlDfsReferralss=smb2FsctlDfsReferralss, snapmirrorStatusTable=snapmirrorStatusTable)
mibBuilder.exportSymbols("NETAPP-MIB", obsSmbReadPct=obsSmbReadPct, snapmirrorBackupNumber=snapmirrorBackupNumber, vscanDisConnection=vscanDisConnection, v2cWrites=v2cWrites, smbSeekPct=smbSeekPct, fcpHighWriteBytes=fcpHighWriteBytes, tv3cpPathconfs=tv3cpPathconfs, dafsGetattrInlines=dafsGetattrInlines, smb2Echos=smb2Echos, volumeOfflineTooBig=volumeOfflineTooBig, ncGrmServerIsEnabled=ncGrmServerIsEnabled, tv3cpReaddirPluss=tv3cpReaddirPluss, netappOnCommand=netappOnCommand, vfFsIndex=vfFsIndex, pclNfsV3Renames=pclNfsV3Renames, pclNfsV3GetattrPerCent=pclNfsV3GetattrPerCent, ncHttpInstAvgHitRespTime=ncHttpInstAvgHitRespTime, ncHttpRespTimePerByte=ncHttpRespTimePerByte, cpFromLowDatavecsOps=cpFromLowDatavecsOps, aggrStatus=aggrStatus, dafsDiscardResponses=dafsDiscardResponses, viaCurrError=viaCurrError, viaNicAttributes=viaNicAttributes, logicalInterfaceServer=logicalInterfaceServer, lunLowWriteOps=lunLowWriteOps, raidPStatus=raidPStatus, cpuTotalDomainSwitches=cpuTotalDomainSwitches, v3WriteStats=v3WriteStats, productType=productType, dafsSetFencingLists=dafsSetFencingLists, ncNtlm=ncNtlm, fcp64ReadBytes=fcp64ReadBytes, volMoveSrcName=volMoveSrcName, nfsCacheIsLicensed=nfsCacheIsLicensed, tv2cpWrcaches=tv2cpWrcaches, smb2NegProts=smb2NegProts, smbEchos=smbEchos, volSpaceGuarantee=volSpaceGuarantee, ncDnsIsEnabled=ncDnsIsEnabled, logicalInterfaceListenForDnsQuery=logicalInterfaceListenForDnsQuery, obsSmbCreates=obsSmbCreates, dfLowSisSavedKBytes=dfLowSisSavedKBytes, ncStreamingProxyBytesFromClients=ncStreamingProxyBytesFromClients, qosReadaheadMaxDiskResponseTime=qosReadaheadMaxDiskResponseTime, pclNfsV3Mkdirs=pclNfsV3Mkdirs, tv3ccWrites=tv3ccWrites, ncStreamingRealBWSavings=ncStreamingRealBWSavings, tv3cMknods=tv3cMknods, tv3ccReaddirs=tv3ccReaddirs, pclNfsV3Write128KCalls=pclNfsV3Write128KCalls, ncDnsFailedReverseLookups=ncDnsFailedReverseLookups, v2pMkdirs=v2pMkdirs, portTable=portTable, enclSASConnectSerialNos=enclSASConnectSerialNos, misc64TapeWriteBytes=misc64TapeWriteBytes, ncNntpBytesFromServers=ncNntpBytesFromServers, smb2SetFileDispInfos=smb2SetFileDispInfos, volumePhysicalOverallocated=volumePhysicalOverallocated, rcNonIdemNotDoneHits=rcNonIdemNotDoneHits, qvStateVserver=qvStateVserver, v2ccWrcaches=v2ccWrcaches, cifsNOpenFiles=cifsNOpenFiles, haState=haState, obsSmbQueryInfo2Pct=obsSmbQueryInfo2Pct, ncHttpsProxyIsLicensed=ncHttpsProxyIsLicensed, sisType=sisType, fabricStatusMessage=fabricStatusMessage, dmpLevel=dmpLevel, dfPerCentInodeCapacity=dfPerCentInodeCapacity, smbFlushPct=smbFlushPct, cDOTCpuIdleTimePerCent=cDOTCpuIdleTimePerCent, tv2cpSymlinks=tv2cpSymlinks, cifsNShares=cifsNShares, svSystemTotalPrimaryFailures=svSystemTotalPrimaryFailures, cifsQueuedWriteRaws=cifsQueuedWriteRaws, ncStreamingRealBytesFromServers=ncStreamingRealBytesFromServers, nodeNvramId=nodeNvramId, cifsSmb2DurableReclaimReceived=cifsSmb2DurableReclaimReceived, smb2Flushs=smb2Flushs, smbTrans2QueryFileInfoPct=smbTrans2QueryFileInfoPct, lunShareStatus=lunShareStatus, raidTotalBlocks=raidTotalBlocks, ncHttpLowTotalMissRespTimes=ncHttpLowTotalMissRespTimes, fcpTargetEntry=fcpTargetEntry, ncStreamingLiveBytesToClients=ncStreamingLiveBytesToClients, cifsOptions=cifsOptions, enclProductVendor=enclProductVendor, fcpTargetType=fcpTargetType, snapshot=snapshot, tv2ccSymlinks=tv2ccSymlinks, qosReadaheadUseHistogram=qosReadaheadUseHistogram, netportIfGrpActivePorts=netportIfGrpActivePorts, outOfDateDiskPool=outOfDateDiskPool, nodeSystemId=nodeSystemId, pclNfsV2Write128KCalls=pclNfsV2Write128KCalls, obsSmbOpens=obsSmbOpens, qrVVolume=qrVVolume, nodeCpuUptime=nodeCpuUptime, dafsAnonymousAuthentication=dafsAnonymousAuthentication, smb2QueryFsDeviceInfos=smb2QueryFsDeviceInfos, initiator=initiator, clusterNodeRepaired=clusterNodeRepaired, v3ccAccesss=v3ccAccesss, snapmirrorFilerTotalSrcFailures=snapmirrorFilerTotalSrcFailures, svThrottleValue=svThrottleValue, svSchedVolume=svSchedVolume, smbEchoPct=smbEchoPct, netOptsv6Table=netOptsv6Table, volUUID=volUUID, cifs=cifs, smb2IpcWrites=smb2IpcWrites, obsSmbWriteAndUnlockPct=obsSmbWriteAndUnlockPct, av2gbFileNotScanned=av2gbFileNotScanned, tv3cFsstats=tv3cFsstats, cifsOpLkNoBreakAcks=cifsOpLkNoBreakAcks, cifsSmb2Ioctl=cifsSmb2Ioctl, clusterLicenseTable=clusterLicenseTable, v3cpLookups=v3cpLookups, portFabricIndex=portFabricIndex, v3ccNulls=v3ccNulls, volumeOffline=volumeOffline, envFailedFanMessage=envFailedFanMessage, pclNfsV2ReadPerCent=pclNfsV2ReadPerCent, raidPDiskFirmwareRevision=raidPDiskFirmwareRevision, v3pCommits=v3pCommits, tv2ccReads=tv2ccReads, obsSmbLockAndReadPct=obsSmbLockAndReadPct, dafsBcNulls=dafsBcNulls, dafsAppendInlines=dafsAppendInlines, volClone=volClone, cDOTCpuCPInterruptPercent=cDOTCpuCPInterruptPercent, dfPerCentKBytesCapacity=dfPerCentKBytesCapacity, grmMonitorToggle=grmMonitorToggle, autosupport=autosupport, qtreeVserver=qtreeVserver, subnetIpRanges=subnetIpRanges, netportVlanNode=netportVlanNode, nfsCacheRpcRecords=nfsCacheRpcRecords, compressIndex=compressIndex, v2cRenames=v2cRenames, raidPGroup=raidPGroup, viaConnSentRdmaReadMessages=viaConnSentRdmaReadMessages, fcpTargetLifEntry=fcpTargetLifEntry, raidScsiAdapter=raidScsiAdapter, v2Read4KCalls=v2Read4KCalls, miscLowNetSentBytes=miscLowNetSentBytes, dafsSessionClientIdString=dafsSessionClientIdString, ncStreamingMmsBWSavings=ncStreamingMmsBWSavings, tv2cpRemoves=tv2cpRemoves, viaConnLocalPortNumber=viaConnLocalPortNumber, netportIfGrpDownPorts=netportIfGrpDownPorts, pclNfsV2ReaddirPerCent=pclNfsV2ReaddirPerCent, raidVDiskPort=raidVDiskPort, ncFtpBytesFromClients=ncFtpBytesFromClients, appWarning=appWarning, dafsDirectInBytes=dafsDirectInBytes, smb2QueryFsDeviceInfoPct=smb2QueryFsDeviceInfoPct, vifPrimaryLinkFailed=vifPrimaryLinkFailed, v3cReads=v3cReads, viaCurrVI=viaCurrVI, tv2Write2KCalls=tv2Write2KCalls, smb2QueryFileNetOpenInfos=smb2QueryFileNetOpenInfos, tv2cRmdirs=tv2cRmdirs, enclTempSensorsOverTempWarnThr=enclTempSensorsOverTempWarnThr, nvramBatteryStatus=nvramBatteryStatus, pclNfsV2Read8KCalls=pclNfsV2Read8KCalls, subnetName=subnetName, cifsSmb2FileNamesInfo=cifsSmb2FileNamesInfo, aggrOwningHost=aggrOwningHost, smb2QueryFileStandardInfos=smb2QueryFileStandardInfos, smb2TreeConnectPct=smb2TreeConnectPct, tv3Write64KCalls=tv3Write64KCalls, vserver=vserver, dafsReaddirInlines=dafsReaddirInlines, nfsCacheTotalRequests=nfsCacheTotalRequests, appError=appError, snapmirrorTotalSuccesses=snapmirrorTotalSuccesses, slTable=slTable, plexOffline=plexOffline, pclNfsV2ReadlinkPerCent=pclNfsV2ReadlinkPerCent, cifsSmb2FileDirInfo=cifsSmb2FileDirInfo, raidTotalMb=raidTotalMb, snapmirrorTotalTransTimeSeconds=snapmirrorTotalTransTimeSeconds, ncHttpHighTotalMissRespTimes=ncHttpHighTotalMissRespTimes, obsSmbSetInfo2Pct=obsSmbSetInfo2Pct, nodeFirmwareVersion=nodeFirmwareVersion, ncHttpAccelTable=ncHttpAccelTable, smb2CreatePct=smb2CreatePct, miscHighDiskWriteBytes=miscHighDiskWriteBytes, viaConnLocalEnableRdmaWrite=viaConnLocalEnableRdmaWrite, v3pCreates=v3pCreates, v3pAccesss=v3pAccesss, smbReadAndXs=smbReadAndXs, amStatus=amStatus, slVDay=slVDay, svLag=svLag, snapmirrorSyncOk=snapmirrorSyncOk, ftpdOn=ftpdOn, ncDnsIresIsEnabled=ncDnsIresIsEnabled, dmpActives=dmpActives, pclNfsV3AccessPerCent=pclNfsV3AccessPerCent, lunStatsResetTime=lunStatsResetTime, pclNfsV2Lookups=pclNfsV2Lookups, productModel=productModel, vserverAggregate=vserverAggregate, viaMaxSegmentsPerDesc=viaMaxSegmentsPerDesc, chassisPowerSuppliesOk=chassisPowerSuppliesOk, logicalInterfaceFailoverGroup=logicalInterfaceFailoverGroup, obsSmbCreateDirPct=obsSmbCreateDirPct, snapmirrorRelNewestSnapshotTimeStamp=snapmirrorRelNewestSnapshotTimeStamp, upsBatteryWarning=upsBatteryWarning, chassisPowerSupplyFailed=chassisPowerSupplyFailed, viaInRDMAWriteBytes=viaInRDMAWriteBytes, timedTargetNotResponding=timedTargetNotResponding, raidPNumber=raidPNumber, snapmirrorFilerTotalSrcSuccesses=snapmirrorFilerTotalSrcSuccesses, raidEntry=raidEntry, pclNfsV2Read512Calls=pclNfsV2Read512Calls, ncStats=ncStats, volumeRemoteOk=volumeRemoteOk, nodeStatValue=nodeStatValue, ncHttpsAccelHits=ncHttpsAccelHits, cpuSwitchInvocations=cpuSwitchInvocations, tv2cpRmdirs=tv2cpRmdirs, ncAdminPort=ncAdminPort, takeoverAddrs=takeoverAddrs, qrVIdType=qrVIdType, spareBay=spareBay, qrV2Table=qrV2Table, fabricTable=fabricTable, svSrc=svSrc, rcUdpDelayHits=rcUdpDelayHits, fabric=fabric, qosReadaheadMaxRetireTime=qosReadaheadMaxRetireTime, outOfDateDiskFirmwareRevision=outOfDateDiskFirmwareRevision, trcTcpNonIdemDoneHits=trcTcpNonIdemDoneHits, dafsNicDirectInBytes=dafsNicDirectInBytes, miscNetRcvdKB=miscNetRcvdKB, dfNumber=dfNumber, volOptions=volOptions, cifsIsLoginEnabled=cifsIsLoginEnabled, cifsNOpenDirs=cifsNOpenDirs, dmpFailures=dmpFailures, qosReadaheadDiskResponseWeight=qosReadaheadDiskResponseWeight, qosReadaheadEarlyCount=qosReadaheadEarlyCount, tv2cRoots=tv2cRoots, clusterIdentity=clusterIdentity, dafsRemoves=dafsRemoves, smb2EchoPct=smb2EchoPct, dafsDelegPurges=dafsDelegPurges, cifsReqs=cifsReqs, sisSchedule=sisSchedule, nodeStatInstanceName=nodeStatInstanceName, portState=portState)
mibBuilder.exportSymbols("NETAPP-MIB", dafsAppendDirects=dafsAppendDirects, replyCache=replyCache, tv2cpRoots=tv2cpRoots, cpuNonCPInterruptPercent=cpuNonCPInterruptPercent, tv2cMkdirs=tv2cMkdirs, ncStreamingMissRequests=ncStreamingMissRequests, quotaNormal=quotaNormal, dafsBcRecalls=dafsBcRecalls, cDOTCpFromCpOps=cDOTCpFromCpOps, cifsTimeToShutdown=cifsTimeToShutdown, sisProgress=sisProgress, logicalInterfaceRole=logicalInterfaceRole, tnfsV2=tnfsV2, tnfsCalls=tnfsCalls, pclTable=pclTable, amTable=amTable, v2cpMkdirs=v2cpMkdirs, broadcastDomainIpspaceName=broadcastDomainIpspaceName, tv3cpMkdirs=tv3cpMkdirs, filesysMaxfilesUsed=filesysMaxfilesUsed, cpFromHighWaterOps=cpFromHighWaterOps, ncHttpInstAvgMissRespTime=ncHttpInstAvgMissRespTime, svSchedSnapshot=svSchedSnapshot, cpuBusyTime=cpuBusyTime, qrV264KBytesSoftLimit=qrV264KBytesSoftLimit, tv2cpLinks=tv2cpLinks, volSpaceGuaranteeEnabled=volSpaceGuaranteeEnabled, misc64CifsOps=misc64CifsOps, tv3ccCommits=tv3ccCommits, cifsMbufWaits=cifsMbufWaits, licenseOwner=licenseOwner, dump=dump, snapmirrorRelTotalTransBytes=snapmirrorRelTotalTransBytes, obsSmbTrans2Open2Pct=obsSmbTrans2Open2Pct, tv2Read8KCalls=tv2Read8KCalls, smb2UnLocks=smb2UnLocks, remoteSystemMgtAlert=remoteSystemMgtAlert, cifsBadCalls=cifsBadCalls, ncHttpsAccelKbytesFromClient=ncHttpsAccelKbytesFromClient, vsRouteDestination=vsRouteDestination, tv3Write512Calls=tv3Write512Calls, ncIsEnabled=ncIsEnabled, dafsServerEnabled=dafsServerEnabled, dafsSetattrInlines=dafsSetattrInlines, smbSessionSetupAndXs=smbSessionSetupAndXs, subnetEntry=subnetEntry, if64InErrors=if64InErrors, switch64PacketsProcessed=switch64PacketsProcessed, logicalInterfaceAddress=logicalInterfaceAddress, raidPScsiId=raidPScsiId, fcpTargetLifHomeNode=fcpTargetLifHomeNode, productSerialNum=productSerialNum, v2ccLinks=v2ccLinks, nfsServ=nfsServ, snapmirrorFilerTotalDstSuccesses=snapmirrorFilerTotalDstSuccesses, pclNfsV2Roots=pclNfsV2Roots, qosReadaheadOvershoot=qosReadaheadOvershoot, tv2cpReaddirs=tv2cpReaddirs, outOfDateDiskTable=outOfDateDiskTable, alertTrap=alertTrap, viaInBytes=viaInBytes, nfsCacheHighBytesFromClients=nfsCacheHighBytesFromClients, ncFtpActiveCliConns=ncFtpActiveCliConns, smbTrans2QueryFSInfos=smbTrans2QueryFSInfos, smVaultSnapWarnLimit=smVaultSnapWarnLimit, cifsSuspectOps=cifsSuspectOps, v2ccReaddirs=v2ccReaddirs, tv2ccNulls=tv2ccNulls, qvStateInitPercent=qvStateInitPercent, svSchedStatus=svSchedStatus, viaErrRdmarProt=viaErrRdmarProt, lunSpaceReserved=lunSpaceReserved, lun64ReadOps=lun64ReadOps, sisLastSuccessfulOpBeginTime=sisLastSuccessfulOpBeginTime, globalStatusNonRecoverable=globalStatusNonRecoverable, licenseIsSite=licenseIsSite, raidVTable=raidVTable, otherDiskShelf=otherDiskShelf, ncHttpObjHitRateLast5Min=ncHttpObjHitRateLast5Min, volDSID=volDSID, netportIfGrpName=netportIfGrpName, smbTreeDisconnectAndXPct=smbTreeDisconnectAndXPct, smbTrans2FindFirst2Pct=smbTrans2FindFirst2Pct, svLastTransMBs=svLastTransMBs, ipspaceTable=ipspaceTable, smb2QueryFsVolInfos=smb2QueryFsVolInfos, sisRowAvailable=sisRowAvailable, extcacheType=extcacheType, ncNntpIsEnabled=ncNntpIsEnabled, raidVUsedMb=raidVUsedMb, initiatorGroupType=initiatorGroupType, v2cpSetattrs=v2cpSetattrs, vserverSnapshotPolicy=vserverSnapshotPolicy, ncStreamingQTBFServers=ncStreamingQTBFServers, fcpTargetPortNodeName=fcpTargetPortNodeName, logicalInterfaceHomeNode=logicalInterfaceHomeNode, volMoveDstaggrName=volMoveDstaggrName, raidVShelf=raidVShelf, ncOptions=ncOptions, smbTrans2QueryPathInfos=smbTrans2QueryPathInfos, subnetGateway=subnetGateway, blocks=blocks, obsSmbSetInfos=obsSmbSetInfos, smb2OplkBrkAckPct=smb2OplkBrkAckPct, initiatorGroupOS=initiatorGroupOS, dafsClientConnects=dafsClientConnects, treplyCache=treplyCache, nfsCacheOptions=nfsCacheOptions, v3ccRmdirs=v3ccRmdirs, globalStatusCritical=globalStatusCritical, warningTrap=warningTrap, smb2QueryFileBasicInfoPct=smb2QueryFileBasicInfoPct, tv2cLookups=tv2cLookups, ncInfo=ncInfo, extcacheCardError=extcacheCardError, vsFirewallPolicyTable=vsFirewallPolicyTable, smb2QueryFileBasicInfos=smb2QueryFileBasicInfos, dafsExportName=dafsExportName, v3Read8KCalls=v3Read8KCalls, healthMonitorAlertCleared=healthMonitorAlertCleared, pclNfsV3CreatePerCent=pclNfsV3CreatePerCent, ncHttpTotalHitRespTime=ncHttpTotalHitRespTime, tv3cPathconfs=tv3cPathconfs, netportIfgDistrFunc=netportIfgDistrFunc, dafsBatchSubmits=dafsBatchSubmits, smbTrans2QueryFileInfos=smbTrans2QueryFileInfos, dafsExportRwMode=dafsExportRwMode, haTable=haTable, pclNfsV2Wrcaches=pclNfsV2Wrcaches, nodeEntry=nodeEntry, pclNfsV3ReaddirPluss=pclNfsV3ReaddirPluss, aggrState=aggrState, raidPTotalMb=raidPTotalMb, tv3ccSymlinks=tv3ccSymlinks, pclNfsV3CommitPerCent=pclNfsV3CommitPerCent, v2cpLookups=v2cpLookups, pclNfsV2MkdirPerCent=pclNfsV2MkdirPerCent, dafsLinks=dafsLinks, volumeFull=volumeFull, pclRpcBadCalls=pclRpcBadCalls, raidP64UsedBlocks=raidP64UsedBlocks, pclNfsV3Rmdirs=pclNfsV3Rmdirs, qosReadaheadForceFull=qosReadaheadForceFull, viaErrorThreshold=viaErrorThreshold, sisMinBlocksShared=sisMinBlocksShared, netOptsSwitchlessClusterEnabled=netOptsSwitchlessClusterEnabled, sisIsLicensed=sisIsLicensed, raidPSecondaryDiskPort=raidPSecondaryDiskPort, vfProName=vfProName, tv2pSetattrs=tv2pSetattrs, snapmirrorLastTransType=snapmirrorLastTransType, dafsClientConnectAuths=dafsClientConnectAuths, tv3Write1KCalls=tv3Write1KCalls, netportNode=netportNode, spareDiskId=spareDiskId, netOpts=netOpts, psetMemberNameIndex=psetMemberNameIndex, shelfIFModuleWarning=shelfIFModuleWarning, lunMapLUNIndex=lunMapLUNIndex, ncHttpBWSavingsLast5Min=ncHttpBWSavingsLast5Min, ncHttpAccelEntry=ncHttpAccelEntry, ncNntpActiveCliConns=ncNntpActiveCliConns, vi=vi, aggrIndex=aggrIndex, smbTrans2SetFileInfos=smbTrans2SetFileInfos, pclNfsServBadCalls=pclNfsServBadCalls, v3Write4KCalls=v3Write4KCalls, qosPolicyGroupMaxThroughput=qosPolicyGroupMaxThroughput, enclIndex=enclIndex, cifsSMBDisconnects=cifsSMBDisconnects, tv3ccReads=tv3ccReads, v3ccWrites=v3ccWrites, obsSmbReads=obsSmbReads, smb2SetFileLinkInfoPct=smb2SetFileLinkInfoPct, tv2pMkdirs=tv2pMkdirs, netportIfgNode=netportIfgNode, miscLowNetRcvdBytes=miscLowNetRcvdBytes, cpFromFlushOps=cpFromFlushOps, switchHighPacketsProcessed=switchHighPacketsProcessed, svBaseSnapshot=svBaseSnapshot, tv3ccCreates=tv3ccCreates, v3cpCommits=v3cpCommits, obsSmbTrans2Open2s=obsSmbTrans2Open2s, tv3pAccesss=tv3pAccesss, quota=quota, cfInterconnectStatus=cfInterconnectStatus, raidPDiskNumber=raidPDiskNumber, snapmirrorConnSrc2=snapmirrorConnSrc2, v3cMkdirs=v3cMkdirs, pclNfsV3ReaddirPlusPerCent=pclNfsV3ReaddirPlusPerCent, viaNicAddress=viaNicAddress, nfsPerClient=nfsPerClient, pclNfsV3Pathconfs=pclNfsV3Pathconfs, nfsCacheLowTotalRequests=nfsCacheLowTotalRequests, enclosure=enclosure, smbTrans2CreateDirPct=smbTrans2CreateDirPct, plexIndex=plexIndex, dafsVerifys=dafsVerifys, netportVlanPort=netportVlanPort, ncStreamingRtspWMBytesToServers=ncStreamingRtspWMBytesToServers, miscHighNfsOps=miscHighNfsOps, dfMirrorStatus=dfMirrorStatus, qrV2FileQuotaUnlimited=qrV2FileQuotaUnlimited, qosReadaheadMaxBlocks=qosReadaheadMaxBlocks, pclNfsV2Readdirs=pclNfsV2Readdirs, v3Write8KCalls=v3Write8KCalls, smb2ChgNfys=smb2ChgNfys, volumeRemoteRestoreBegin=volumeRemoteRestoreBegin, smbClosePct=smbClosePct, dafsSetattrDirects=dafsSetattrDirects, subnetTotalCount=subnetTotalCount, dafsCloses=dafsCloses, smbNTCreateAndXs=smbNTCreateAndXs, enclElectronicsCPLDVers=enclElectronicsCPLDVers, enclCurSensorsPresent=enclCurSensorsPresent, tv3cpAccesss=tv3cpAccesss, ncNntpOptions=ncNntpOptions, cifsAlignedSmalls=cifsAlignedSmalls, enclPowerSuppliesMaximum=enclPowerSuppliesMaximum, cifsIsLicensed=cifsIsLicensed, ipspacePorts=ipspacePorts, tv2ccSetattrs=tv2ccSetattrs, slVMinutes=slVMinutes, viaCurrConnected=viaCurrConnected, cpFromCpOps=cpFromCpOps, ifHighOutUcastPkts=ifHighOutUcastPkts, v3ccCommits=v3ccCommits, tv3cpLookups=tv3cpLookups, pclNfsV2Read32KCalls=pclNfsV2Read32KCalls, qosReadaheadSettingName=qosReadaheadSettingName, tv3ccReaddirPluss=tv3ccReaddirPluss, slQQtreeContent=slQQtreeContent, smbNTCancelCNPct=smbNTCancelCNPct, raidCompletionPerCent=raidCompletionPerCent, raidPDiskCopyDestDiskName=raidPDiskCopyDestDiskName, envFailedPowerSupplyMessage=envFailedPowerSupplyMessage, raidPSecondaryDiskName=raidPSecondaryDiskName, spare64TotalBlocks=spare64TotalBlocks, enclVoltSensorsOverVoltWarn=enclVoltSensorsOverVoltWarn, v2cRmdirs=v2cRmdirs, netOptsv6RAProcEnabled=netOptsv6RAProcEnabled, diskActiveCount=diskActiveCount, raidVDiskFirmwareRevision=raidVDiskFirmwareRevision, tv3Write32KCalls=tv3Write32KCalls, snapmirrorRelLastTransferType=snapmirrorRelLastTransferType, smb2QueryFileFullEAInfos=smb2QueryFileFullEAInfos, fanFailed=fanFailed, enclTempSensorsMaximum=enclTempSensorsMaximum, lunDestroy=lunDestroy, v3cpMkdirs=v3cpMkdirs, otherDiskIndex=otherDiskIndex, smbOpenPrintFiles=smbOpenPrintFiles, dfTable=dfTable, cpuUpTime=cpuUpTime)
mibBuilder.exportSymbols("NETAPP-MIB", logicalInterfaceIsHome=logicalInterfaceIsHome, cfPartnerName=cfPartnerName, v3cNulls=v3cNulls, smbRenamePct=smbRenamePct, snapmirrorRelLastTransferTimeSeconds=snapmirrorRelLastTransferTimeSeconds, smbSessionSetupAndXPct=smbSessionSetupAndXPct, takeoverinfo=takeoverinfo, snapmirrorConnTable=snapmirrorConnTable, svHostTotalSuccesses=svHostTotalSuccesses, obsSmbWriteAndCloses=obsSmbWriteAndCloses, raidPDiskPort=raidPDiskPort, netportIfGrpUpPorts=netportIfGrpUpPorts, nodeNvramBatteryStatus=nodeNvramBatteryStatus, tv3pLinks=tv3pLinks, volIndex=volIndex, ifHighInOctets=ifHighInOctets, obsSmbSearchs=obsSmbSearchs, viaProviderVersion=viaProviderVersion, smbNTTransactIoctls=smbNTTransactIoctls, vscanConfigurationChange=vscanConfigurationChange, vfProIndex=vfProIndex, plexFailed=plexFailed, v2pNulls=v2pNulls, ncCmsIsEnabled=ncCmsIsEnabled, tv2Write16KCalls=tv2Write16KCalls, powerSupplyRepaired=powerSupplyRepaired, tv2pRemoves=tv2pRemoves, spareDiskType=spareDiskType, logicalInterfaceAutoRevert=logicalInterfaceAutoRevert, raidVUsedBlocks=raidVUsedBlocks, envOverTemperature=envOverTemperature, smb2SetFileLinkInfos=smb2SetFileLinkInfos, enclTempSensorsUnderTempWarn=enclTempSensorsUnderTempWarn, raidPDiskPool=raidPDiskPool, otherDiskDiskPort=otherDiskDiskPort, viaNodeConnection=viaNodeConnection, otherDiskScsiAdapter=otherDiskScsiAdapter, tv2pLookups=tv2pLookups, raidVPlexNumber=raidVPlexNumber, sisBlocksSkippedSharing=sisBlocksSkippedSharing, netappFiler=netappFiler, v3Write64KCalls=v3Write64KCalls, slQSourceTime=slQSourceTime, aggrEntry=aggrEntry, clusterIdentitySerialNumber=clusterIdentitySerialNumber, cDOTCpuTable=cDOTCpuTable, cDOTCpuUpTime=cDOTCpuUpTime, aggrTable=aggrTable, raid=raid, amMonitorString=amMonitorString, raidVIndex=raidVIndex, viaMaxCQ=viaMaxCQ, pclNfsV2GetattrPerCent=pclNfsV2GetattrPerCent, ncNntpBytesToServers=ncNntpBytesToServers, vfEntry=vfEntry, tv2cpSetattrs=tv2cpSetattrs, v2Read16KCalls=v2Read16KCalls, logicalInterfaceNumericId=logicalInterfaceNumericId, viaMaxRegisterBytes=viaMaxRegisterBytes, fcp64WriteBytes=fcp64WriteBytes, qosWorkloadEntry=qosWorkloadEntry, chassisFanFailxMinShutdown=chassisFanFailxMinShutdown, netportIfgMode=netportIfgMode, v3pSymlinks=v3pSymlinks, nodeStats=nodeStats, snapvaultStatusEntry=snapvaultStatusEntry, tv3pGetattrs=tv3pGetattrs, dafsHurryUps=dafsHurryUps, rcpTcpBadCalls=rcpTcpBadCalls, v2Calls=v2Calls, smbTrans2GetDFSReferrals=smbTrans2GetDFSReferrals, cpuIdleTimePerCent=cpuIdleTimePerCent, ncNntpProxyRequests=ncNntpProxyRequests, fcpTargetStandby=fcpTargetStandby, ncGrmServerIsLicensed=ncGrmServerIsLicensed, viaConnTable=viaConnTable, driveDisableErr=driveDisableErr, obsSmbSearchPct=obsSmbSearchPct, netifDescr=netifDescr, dfKBytesTotal=dfKBytesTotal, remoteSystemMgmtWarning=remoteSystemMgmtWarning, tv3Write16KCalls=tv3Write16KCalls, vfiler=vfiler, clusterLicenseCode=clusterLicenseCode, volCloneOf=volCloneOf, svHostTotalDeferments=svHostTotalDeferments, initiatorGroupIndex=initiatorGroupIndex, cDOTCpFromFlushOps=cDOTCpFromFlushOps, snapmirrorThrottleValue=snapmirrorThrottleValue, ncRMMemTotal=ncRMMemTotal, viaConnRemoteMaxTransferSize=viaConnRemoteMaxTransferSize, snapmirrorConnType=snapmirrorConnType, otherDiskDiskId=otherDiskDiskId, smb2TreeDisconnects=smb2TreeDisconnects, initiatorGroupUsePartner=initiatorGroupUsePartner, rcMisses=rcMisses, qosReadaheadMinFileHistogram=qosReadaheadMinFileHistogram, overTempRepaired=overTempRepaired, ncFtpHitRequests=ncFtpHitRequests, v2cpRmdirs=v2cpRmdirs, ncHttp=ncHttp, dafsMaxRequestsServer=dafsMaxRequestsServer, iscsiIsLicensed=iscsiIsLicensed, pclNfsV3Accesss=pclNfsV3Accesss, ncNntpServConns=ncNntpServConns, spareStatus=spareStatus, cifsAlignedLargeRels=cifsAlignedLargeRels, tv2ccCreates=tv2ccCreates, sisLastOpBeginTime=sisLastOpBeginTime, outOfDateDiskSecondaryDiskName=outOfDateDiskSecondaryDiskName, tv2pStatfss=tv2pStatfss, pclNfsV2Nulls=pclNfsV2Nulls, pclNfsV3Write64KCalls=pclNfsV3Write64KCalls, ncStreamingRealIsLicensed=ncStreamingRealIsLicensed, pclNfsV2Read4KCalls=pclNfsV2Read4KCalls, smb2TreeConnects=smb2TreeConnects, outOfDateDisk64TotalBlocks=outOfDateDisk64TotalBlocks, cifsNeedPW=cifsNeedPW, ncGrmAgentIsLicensed=ncGrmAgentIsLicensed, dafsNicTable=dafsNicTable, compressEntry=compressEntry, smbTreeDisconnects=smbTreeDisconnects, smbNTTransactCreates=smbNTTransactCreates, fabricIndex=fabricIndex, qrV2ThresholdUnlimited=qrV2ThresholdUnlimited, nodeEnvFailedFanMessage=nodeEnvFailedFanMessage, fanFailureShutdown=fanFailureShutdown, nodeCpuBusyTime=nodeCpuBusyTime, netportMtuAdmin=netportMtuAdmin, smbRenames=smbRenames, ncDnsIresForwardLookups=ncDnsIresForwardLookups, dafsClientAuths=dafsClientAuths, ncHttpAccelKbytesToClient=ncHttpAccelKbytesToClient, cifsWaitLocks=cifsWaitLocks, dfType=dfType, svSystemTotalSecondaryFailures=svSystemTotalSecondaryFailures, viaConnectionListenPort=viaConnectionListenPort, outOfDateDiskSectorSize=outOfDateDiskSectorSize, dafsNicEntry=dafsNicEntry, spareScsiId=spareScsiId, ncStreamingAccelTable=ncStreamingAccelTable, if64InOctets=if64InOctets, nodeUuid=nodeUuid, ifLowInUnknownProtos=ifLowInUnknownProtos, cifsConnectedUsers=cifsConnectedUsers, v3Read4KCalls=v3Read4KCalls, enclSASConnectCableLen=enclSASConnectCableLen, qrV2HighKBytesLimit=qrV2HighKBytesLimit, svOn=svOn, pclNfsV3RenamePerCent=pclNfsV3RenamePerCent, v3cRmdirs=v3cRmdirs, snapmirrorRelResyncSuccCnt=snapmirrorRelResyncSuccCnt, logicalInterfaceStatusAdmin=logicalInterfaceStatusAdmin, raidV64UsedBlocks=raidV64UsedBlocks, ncDnsOptions=ncDnsOptions, fcp64Ops=fcp64Ops, v3cpReaddirs=v3cpReaddirs, fcpTargetTopology=fcpTargetTopology, viaConnRemoteDescriminator=viaConnRemoteDescriminator, criticalTrap=criticalTrap, v3cCreates=v3cCreates, trpcBadLens=trpcBadLens, raidVDiskId=raidVDiskId, ncHttpIsEnabled=ncHttpIsEnabled, nfsCache64BytesToClients=nfsCache64BytesToClients, haPartnerLastStatusUpdate=haPartnerLastStatusUpdate, initiatorName=initiatorName, snapmirrorSrc=snapmirrorSrc, qosWorkloadFile=qosWorkloadFile, trcUdpNonIdemDoneHits=trcUdpNonIdemDoneHits, cpFromLowWaterOps=cpFromLowWaterOps, cifsMaxShares=cifsMaxShares, qvStateEntry=qvStateEntry, v3Percent=v3Percent, qosReadaheadForceDump=qosReadaheadForceDump, v2pStatfss=v2pStatfss, cpuTooBusy=cpuTooBusy, tv2cLinks=tv2cLinks, tv2cWrites=tv2cWrites, volMSID=volMSID, outOfDateDiskIndex=outOfDateDiskIndex, nfsOptions=nfsOptions, tv3ccNulls=tv3ccNulls, obsSmbWriteAndUnlocks=obsSmbWriteAndUnlocks, dfFileSys=dfFileSys, dafsSessionAllowBackChannel=dafsSessionAllowBackChannel, ipspaceName=ipspaceName, dafsCreates=dafsCreates, vfProTable=vfProTable, qrVTree=qrVTree, ncCmsOptions=ncCmsOptions, dafsInBytes=dafsInBytes, logicalInterfaceUseFailoverGroup=logicalInterfaceUseFailoverGroup, obsSmbWritePct=obsSmbWritePct, vserverRootVolume=vserverRootVolume, v2pCreates=v2pCreates, smb2TreeDisconnectPct=smb2TreeDisconnectPct, v3pFsinfos=v3pFsinfos, volStatus=volStatus, volumeReserveGrew=volumeReserveGrew, svTotalDeferments=svTotalDeferments, pclNfsV2Mkdirs=pclNfsV2Mkdirs, tv2cpCreates=tv2cpCreates, raidP64TotalBlocks=raidP64TotalBlocks, outOfDateDiskVendor=outOfDateDiskVendor, smb2QueryFileAltNames=smb2QueryFileAltNames, qosReadaheadJitter=qosReadaheadJitter, outOfDateDiskTotalBlocks=outOfDateDiskTotalBlocks, qrVFileLimitSoft=qrVFileLimitSoft, smb2QueryFsObjectIdInfoPct=smb2QueryFsObjectIdInfoPct, smb2IpcCreates=smb2IpcCreates, raidV64TotalBlocks=raidV64TotalBlocks, if64InNUcastPkts=if64InNUcastPkts, miscHighHttpOps=miscHighHttpOps, volumesStillFull=volumesStillFull, raidPTotalBlocks=raidPTotalBlocks, volMoveCutoverFailed=volMoveCutoverFailed, vserverAllowedProtocolList=vserverAllowedProtocolList, qrV2FilesUsed=qrV2FilesUsed, v3cpMknods=v3cpMknods, ifLowOutDiscards=ifLowOutDiscards, pclNfsV2RmdirPerCent=pclNfsV2RmdirPerCent, misc64HttpOps=misc64HttpOps, smbDeleteDirPct=smbDeleteDirPct, broadcastDomainMTU=broadcastDomainMTU, qosPolicyGroupVserver=qosPolicyGroupVserver, switchSymbolicName=switchSymbolicName, tv2cReads=tv2cReads, tnfsServ=tnfsServ, nodeStatCategoryIndex=nodeStatCategoryIndex, smb2QueryFileAccessInfos=smb2QueryFileAccessInfos, amPort=amPort, flexCloneSplitStart=flexCloneSplitStart, dmpDuration=dmpDuration, v3pLinks=v3pLinks, enclSASConnectVendor=enclSASConnectVendor, v2Read64KCalls=v2Read64KCalls, otherDiskType=otherDiskType, dafsReadInlines=dafsReadInlines, smb2QuerySecurityInfos=smb2QuerySecurityInfos, lun64WriteBytes=lun64WriteBytes, lunMapInitiatorGroupIndex=lunMapInitiatorGroupIndex, dafsOutBytes=dafsOutBytes, tv3ccMkdirs=tv3ccMkdirs, snapmirrorSchedule=snapmirrorSchedule, dafsMaxIdleSeconds=dafsMaxIdleSeconds, enclProductRevision=enclProductRevision, v2cpReaddirs=v2cpReaddirs, qrVKBytesUsed=qrVKBytesUsed, df64TotalKBytes=df64TotalKBytes, otherDisk64TotalBlocks=otherDisk64TotalBlocks, sisChangelogUsedPercent=sisChangelogUsedPercent, compress64SavedKBytes=compress64SavedKBytes, globalStatusNonCritical=globalStatusNonCritical)
mibBuilder.exportSymbols("NETAPP-MIB", qrVTable=qrVTable, cpTime=cpTime, tv2cpGetattrs=tv2cpGetattrs, tv3pFsstats=tv3pFsstats, viaMaxPTags=viaMaxPTags, lunMapInitiatorGroupName=lunMapInitiatorGroupName, dfPerCentSaved=dfPerCentSaved, ncHttpByteHitRateLast5Min=ncHttpByteHitRateLast5Min, viaTotalError=viaTotalError, ftpdMaxConnNotice=ftpdMaxConnNotice, netportRemoteDeviceId=netportRemoteDeviceId, cifsOpLkBatchToL2s=cifsOpLkBatchToL2s, ncStreamingRealBytesFromClients=ncStreamingRealBytesFromClients, dmpSuccesses=dmpSuccesses, sisLastOpEndTime=sisLastOpEndTime, outOfDateDiskTotalMb=outOfDateDiskTotalMb, qosWorkloadQtree=qosWorkloadQtree, dfInodesUsed=dfInodesUsed, ncIcapOptions=ncIcapOptions, tv2cpStatfss=tv2cpStatfss, otherDiskScsiId=otherDiskScsiId, smb2WritePct=smb2WritePct, tv2cpMkdirs=tv2cpMkdirs, cifsOpLkNFSWaiteds=cifsOpLkNFSWaiteds, ncStreamingHitRequests=ncStreamingHitRequests, ncStreamingQuickTimeBWSavings=ncStreamingQuickTimeBWSavings, cifsSmb2MidUsedHash=cifsSmb2MidUsedHash, netportIfGrpPorts=netportIfGrpPorts, broadcastDomainEntry=broadcastDomainEntry, v2Read2KCalls=v2Read2KCalls, smb2SetEofInfoPct=smb2SetEofInfoPct, quotaState=quotaState, grmMonitor=grmMonitor, viaMaxDescriptorsPerQueue=viaMaxDescriptorsPerQueue, lun64Errors=lun64Errors, v2cpSymlinks=v2cpSymlinks, v2Write4KCalls=v2Write4KCalls, ncIcapIsEnabled=ncIcapIsEnabled, netportSpeed=netportSpeed, portType=portType, ncHttpObjHitrate=ncHttpObjHitrate, ncFtpMissRequests=ncFtpMissRequests, v3pRenames=v3pRenames, lunVserver=lunVserver, dafsNicInBytes=dafsNicInBytes, ncFtpServConns=ncFtpServConns, emergencyTrap=emergencyTrap, ncHttpsProxyIsEnabled=ncHttpsProxyIsEnabled, ifHighOutOctets=ifHighOutOctets, avMcAfeeProductExpiring=avMcAfeeProductExpiring, pclNfsCalls=pclNfsCalls, vfStopped=vfStopped, domainControllerConnected=domainControllerConnected, smb2QueryFileUnsupporteds=smb2QueryFileUnsupporteds, dafsDefaultUid=dafsDefaultUid, cpTotalOps=cpTotalOps, smb2FsctlEnumSnapshotss=smb2FsctlEnumSnapshotss, v2Write16KCalls=v2Write16KCalls, fcpTargetPortTopology=fcpTargetPortTopology, miscHighCifsOps=miscHighCifsOps, enclSASConnectPartNos=enclSASConnectPartNos, aggrFilesystemMetadataPercent=aggrFilesystemMetadataPercent, v2pRenames=v2pRenames, raidDiskId=raidDiskId, snapmirrorActiveSrcNumber=snapmirrorActiveSrcNumber, smbTrans2FindNext2Pct=smbTrans2FindNext2Pct, maxDirSizeWarning=maxDirSizeWarning, ifHighOutNUcastPkts=ifHighOutNUcastPkts, smb2QueryDirs=smb2QueryDirs, tv3cLookups=tv3cLookups, ifLowOutErrors=ifLowOutErrors, smbGetPrintQueues=smbGetPrintQueues, cifsStats=cifsStats, lunSerialNumber=lunSerialNumber, vscanConnection=vscanConnection, lunMapped=lunMapped, ncHttpBWSavingsLast1Min=ncHttpBWSavingsLast1Min, ndmpTapeActive=ndmpTapeActive, fcpLowWriteBytes=fcpLowWriteBytes, obsSmbLockByteRanges=obsSmbLockByteRanges, smbLockingAndXPct=smbLockingAndXPct, tv2Write4KCalls=tv2Write4KCalls, nfsCacheStats=nfsCacheStats, extcache64Misses=extcache64Misses, dafsGetFencingLists=dafsGetFencingLists, vifAllLinksFailed=vifAllLinksFailed, vfStarted=vfStarted, qrV2Index=qrV2Index, cifsStatus=cifsStatus, obsSmbCreateDirs=obsSmbCreateDirs, dfMaxFilesUsed=dfMaxFilesUsed, pclNfsV2Reads=pclNfsV2Reads, tv3pReaddirPluss=tv3pReaddirPluss, vsRouteUuid=vsRouteUuid, vsFailoverGroupTargets=vsFailoverGroupTargets, psetPortName=psetPortName, cfState=cfState, v3cRemoves=v3cRemoves, netappNode=netappNode, pclNfsV3Commits=pclNfsV3Commits, pclNfsV2LinkPerCent=pclNfsV2LinkPerCent, ncVersion=ncVersion, ftpdCurrentConns=ftpdCurrentConns, lunComment=lunComment, smbCopies=smbCopies, ncGrmOptions=ncGrmOptions, enclPowerSuppliesPartNos=enclPowerSuppliesPartNos, tv3cGetattrs=tv3cGetattrs, tv3Read512Calls=tv3Read512Calls, lunTable=lunTable, rcInProgressHits=rcInProgressHits, vsFirewallPolicyVserverID=vsFirewallPolicyVserverID, raidPIndex=raidPIndex, dafsSessionIndex=dafsSessionIndex, outOfDateDiskDiskId=outOfDateDiskDiskId, fcpTargetLifStatusOper=fcpTargetLifStatusOper, productTrapData=productTrapData, v2pGetattrs=v2pGetattrs, svHostType=svHostType, ncNntpRespTimePerByte=ncNntpRespTimePerByte, rstFailures=rstFailures, upsShuttingDown=upsShuttingDown, haNodeName=haNodeName, raidVSecondaryDiskName=raidVSecondaryDiskName, v2ccMkdirs=v2ccMkdirs, tv2Read32KCalls=tv2Read32KCalls, obsSmbWriteRawPct=obsSmbWriteRawPct, pclNumber=pclNumber, slQEntry=slQEntry, smb2ClosePct=smb2ClosePct, qrVKBytesLimit=qrVKBytesLimit, aggrNumber=aggrNumber, pclNfsV2RootPerCent=pclNfsV2RootPerCent, tv3CachedPerCent=tv3CachedPerCent, iscsiHighWriteBytes=iscsiHighWriteBytes, vserverState=vserverState, v3ccFsstats=v3ccFsstats, tv2pCreates=tv2pCreates, volProvenanceUUID=volProvenanceUUID, cifsWinsServers=cifsWinsServers, volumeStateChanged=volumeStateChanged, volInstanceUUID=volInstanceUUID, netappSupportConsole=netappSupportConsole, rmcCardNeedsReplacement=rmcCardNeedsReplacement, nodeStatInstanceIndex=nodeStatInstanceIndex, raidVDiskCopyDestDiskName=raidVDiskCopyDestDiskName, slQTable=slQTable, pclNfsV3FsstatPerCent=pclNfsV3FsstatPerCent, v3pRemoves=v3pRemoves, spareCarrierID=spareCarrierID, pclNfsV3Write4KCalls=pclNfsV3Write4KCalls, ncStreamingOBFClients=ncStreamingOBFClients, smb2SetRenameInfos=smb2SetRenameInfos, cDOTCpuEntry=cDOTCpuEntry, tv3pNulls=tv3pNulls, qosReadaheadMaxRange=qosReadaheadMaxRange, snapvaultStatusTable=snapvaultStatusTable, tv3pRemoves=tv3pRemoves, lun64ReadBytes=lun64ReadBytes, lunSizeHigh=lunSizeHigh, pclNfsV2Read2KCalls=pclNfsV2Read2KCalls, v3cReaddirPluss=v3cReaddirPluss, dafsSessionUseChecksums=dafsSessionUseChecksums, netifEntry=netifEntry, productLicenseIndex=productLicenseIndex, pclNfsV3PathconfPerCent=pclNfsV3PathconfPerCent, haInterconnectStatus=haInterconnectStatus, ncStreamingClientsDelayedSW=ncStreamingClientsDelayedSW, nfsCache64BytesFromServers=nfsCache64BytesFromServers, cifsOpLkMultiWaiters=cifsOpLkMultiWaiters, volMoveCOtime=volMoveCOtime, lunHighOtherOps=lunHighOtherOps, ncBytesFromServers=ncBytesFromServers, cifsCopyToAligns=cifsCopyToAligns, enclTempSensorsCurrentTemp=enclTempSensorsCurrentTemp, tv3pReaddirs=tv3pReaddirs, fcpTargetStatus=fcpTargetStatus, snapmirrorRelLag=snapmirrorRelLag, sisLastOpError=sisLastOpError, cDOTCpuContextSwitches=cDOTCpuContextSwitches, smb2Closes=smb2Closes, qrV2FileLimit=qrV2FileLimit, spareTotalMb=spareTotalMb, tv3cpRenames=tv3cpRenames, dafsExportIndex=dafsExportIndex, tv3ccRenames=tv3ccRenames, ncHttpLowTotalRespTimes=ncHttpLowTotalRespTimes, smbDeletes=smbDeletes, viaCurrRegisterBytes=viaCurrRegisterBytes, ipspaceEntry=ipspaceEntry, sisStatus=sisStatus, sisLastSuccessfulOpEndTime=sisLastSuccessfulOpEndTime, v3Read2KCalls=v3Read2KCalls, raidVDiskType=raidVDiskType, dafsUseChecksums=dafsUseChecksums, nfsCacheVerifyRequests=nfsCacheVerifyRequests, vfIpTable=vfIpTable, netportIfGrpNode=netportIfGrpNode, spareIndex=spareIndex, qosWorkloadCache=qosWorkloadCache, dmpStPath=dmpStPath, cfPartnerStatus=cfPartnerStatus, pclNfsV3Readlinks=pclNfsV3Readlinks, cifsLocks=cifsLocks, iscsiHighReadBytes=iscsiHighReadBytes, spareDiskPort=spareDiskPort, ncStreamingProxyBytesToClients=ncStreamingProxyBytesToClients, tv2Read4KCalls=tv2Read4KCalls, viaNicEntry=viaNicEntry, diskFailedCount=diskFailedCount, aggrUUID=aggrUUID, eccMasked=eccMasked, vsFailoverGroupVserverID=vsFailoverGroupVserverID, nodeStatUnits=nodeStatUnits, fanRepaired=fanRepaired, psetMemberTable=psetMemberTable, snapmirrorRelBreakSuccCnt=snapmirrorRelBreakSuccCnt, cpu=cpu, slName=slName, cifsMaxTrees=cifsMaxTrees, volRowInfo=volRowInfo, subnetUsedCount=subnetUsedCount, cifsAltNames=cifsAltNames, switchDomain=switchDomain, nodeOwner=nodeOwner, vserverComment=vserverComment, viaNodeSystemName=viaNodeSystemName, lunSizeLow=lunSizeLow, cifsIsWinsEnabled=cifsIsWinsEnabled, tv2cNulls=tv2cNulls, raidPDiskId=raidPDiskId, tv3cpReadlinks=tv3cpReadlinks, autosupportSendError=autosupportSendError, enclProductID=enclProductID, qtreeOplock=qtreeOplock, ncGrmAgentIsEnabled=ncGrmAgentIsEnabled, v3pMkdirs=v3pMkdirs, smb2SetInfoUnsupporteds=smb2SetInfoUnsupporteds, misc64NetSentBytes=misc64NetSentBytes, v3pFsstats=v3pFsstats, v2ccReads=v2ccReads, v2Read1KCalls=v2Read1KCalls, pclNfsV2StatfsPerCent=pclNfsV2StatfsPerCent, cifsSmb2InvalidSignatures=cifsSmb2InvalidSignatures, fsOverallStatus=fsOverallStatus, volumeLogicalOverallocated=volumeLogicalOverallocated, nvram=nvram, v3cpAccesss=v3cpAccesss, ncHttpsAccelKbytesToClient=ncHttpsAccelKbytesToClient, switchName=switchName, dafsReadlinkInlines=dafsReadlinkInlines, viaCurrConnectWaitPending=viaCurrConnectWaitPending, logicalInterfaceRoutingGroup=logicalInterfaceRoutingGroup, vfAllowedProtocols=vfAllowedProtocols)
mibBuilder.exportSymbols("NETAPP-MIB", clusterLicenseLimit=clusterLicenseLimit, tv2cGetattrs=tv2cGetattrs, lunCount=lunCount, ncStreamingActiveServConns=ncStreamingActiveServConns, viaErrConnLost=viaErrConnLost, logicalInterfaceNetmask=logicalInterfaceNetmask, pclNfsV2Write1KCalls=pclNfsV2Write1KCalls, logicalInterfaceFailoverPolicy=logicalInterfaceFailoverPolicy, nodeEnvFailedPowerSupplyMessage=nodeEnvFailedPowerSupplyMessage, smb2QueryFsFullSizeInfos=smb2QueryFsFullSizeInfos, v3pReaddirPluss=v3pReaddirPluss, ncHttpTotalRespTime=ncHttpTotalRespTime, snapmirrorWrittenBytes=snapmirrorWrittenBytes, v2ccRenames=v2ccRenames, v2Write1KCalls=v2Write1KCalls, svTotalTransTimeSeconds=svTotalTransTimeSeconds, viaConnRemoteEnableRdmaWrite=viaConnRemoteEnableRdmaWrite, tv3pCreates=tv3pCreates, tv3cpReads=tv3cpReads, vfProStatus=vfProStatus, snapmirrorRelUpdateFailCnt=snapmirrorRelUpdateFailCnt, dafsNicNumRqstDemons=dafsNicNumRqstDemons, vfFiIndex=vfFiIndex, softQuotaExceeded=softQuotaExceeded, raidVPlexGroup=raidVPlexGroup, rebootAbnormal=rebootAbnormal, tv2ccRemoves=tv2ccRemoves, df64TotalSaved=df64TotalSaved, qrV2Entry=qrV2Entry, volState=volState, smbMovePct=smbMovePct, fcpTargetNN=fcpTargetNN, lunLowErrors=lunLowErrors, pclNfsV3MkdirPerCent=pclNfsV3MkdirPerCent, ncDnsPendingReverseLookups=ncDnsPendingReverseLookups, switchIndex=switchIndex, lun64Ops=lun64Ops, tv2Write8KCalls=tv2Write8KCalls, dafsSessionInlineWriteHeaderSize=dafsSessionInlineWriteHeaderSize, smb2FsctlPipeTransceivePct=smb2FsctlPipeTransceivePct, obsSmbQueryInfoDiskPct=obsSmbQueryInfoDiskPct, v2ccLookups=v2ccLookups, takeoverStatus=takeoverStatus, snapmirrorDst=snapmirrorDst, waflDirFull=waflDirFull, ncNntpTotalRequests=ncNntpTotalRequests, ncDnsCacheHits=ncDnsCacheHits, vfState=vfState, enclTempSensorsOverTempFailThr=enclTempSensorsOverTempFailThr, cifsLevel2OplocksEnabled=cifsLevel2OplocksEnabled, smbCreateTemporaries=smbCreateTemporaries, v2cLookups=v2cLookups, tnfsV3=tnfsV3, smb2QueryFileStreamInfoPct=smb2QueryFileStreamInfoPct, snapmirrorActiveDstNumber=snapmirrorActiveDstNumber, cDOTCpFromTimerOps=cDOTCpFromTimerOps, v2pWrcaches=v2pWrcaches, pclNfsV3Nulls=pclNfsV3Nulls, diskFailedShutdown=diskFailedShutdown, snapmirrorRelSchedule=snapmirrorRelSchedule, nodeHealth=nodeHealth, enclTempSensorsOverTempFail=enclTempSensorsOverTempFail, smb2QueryFsAttrInfoPct=smb2QueryFsAttrInfoPct, nfsCacheHighTotalRequests=nfsCacheHighTotalRequests, dfTotalSavedPercent=dfTotalSavedPercent, raidPDiskRPM=raidPDiskRPM, maxDirSizeAlert=maxDirSizeAlert, dafsMaxPendingRequestsServer=dafsMaxPendingRequestsServer, v2Write32KCalls=v2Write32KCalls, tv2cpWrites=tv2cpWrites, v2cMkdirs=v2cMkdirs, pclNfsV3Read64KCalls=pclNfsV3Read64KCalls, lunHighWriteBytes=lunHighWriteBytes, pclNfsV3WritePerCent=pclNfsV3WritePerCent, cifsSmb2MidUnusedHash=cifsSmb2MidUnusedHash, initiatorListEntry=initiatorListEntry, volVserver=volVserver, v2ReadStats=v2ReadStats, spareDiskModel=spareDiskModel, svBackupSnapWarningLimit=svBackupSnapWarningLimit, overTempShutdown=overTempShutdown, dafsAccesses=dafsAccesses, smb2QueryFileUnsupportedPct=smb2QueryFileUnsupportedPct, haEntry=haEntry, pclNfsV3SetattrPerCent=pclNfsV3SetattrPerCent, pclNfsV3RemovePerCent=pclNfsV3RemovePerCent, smbTrans2FindFirst2s=smbTrans2FindFirst2s, ncStreamingServConns=ncStreamingServConns, ftpdMaxConns=ftpdMaxConns, miscHighDiskReadBytes=miscHighDiskReadBytes, smbNTCancelPct=smbNTCancelPct, volNumber=volNumber, rcTcpMisses=rcTcpMisses, ifLowInNUcastPkts=ifLowInNUcastPkts, vsFirewallPolicyAllowList=vsFirewallPolicyAllowList, cifsCwaWaits=cifsCwaWaits, snapmirrorRelThrottleValue=snapmirrorRelThrottleValue, pclNfsV2Write512Calls=pclNfsV2Write512Calls, ncFtpObjHitrate=ncFtpObjHitrate, qtreeIsExportPolicyInherited=qtreeIsExportPolicyInherited, volumeRepaired=volumeRepaired, raidPVol=raidPVol, smbLockingAndXs=smbLockingAndXs, tv2cRemoves=tv2cRemoves, dafsReaddirDirects=dafsReaddirDirects, ncDnsFailedForwardLookups=ncDnsFailedForwardLookups, dafsDirectOutBytes=dafsDirectOutBytes, extcache64WCLength=extcache64WCLength, lunSnapRestoreStatus=lunSnapRestoreStatus, viaCurrConnectPending=viaCurrConnectPending, netportSpeedOper=netportSpeedOper, pclNfsV3Fsstats=pclNfsV3Fsstats, tv3cpCreates=tv3cpCreates, outOfDateDiskType=outOfDateDiskType, nodeStatEntry=nodeStatEntry, ncStreamingLiveBytesFromClients=ncStreamingLiveBytesFromClients, ncStreamingMmsIsLicensed=ncStreamingMmsIsLicensed, volumeRemoteRestored=volumeRemoteRestored, upsBatteryCritical=upsBatteryCritical, healthMonitorAlertRaised=healthMonitorAlertRaised, slVHour=slVHour, nfsIsLicensed=nfsIsLicensed, lunCloneSplitStart=lunCloneSplitStart, miscNfsOps=miscNfsOps, tv3ccRmdirs=tv3ccRmdirs, volAggrName=volAggrName, v2pReadlinks=v2pReadlinks, tv3cRemoves=tv3cRemoves, raidPPlexName=raidPPlexName, hbaOfflineInformation=hbaOfflineInformation, clusterNodeRepairing=clusterNodeRepairing, viaCurrPTags=viaCurrPTags, ncHttpsAccelTable=ncHttpsAccelTable, tv2CachedPerCent=tv2CachedPerCent, dfDedupeSavedPercent=dfDedupeSavedPercent, tv3cCreates=tv3cCreates, dafsCacheHints=dafsCacheHints, smbNTCancelOthers=smbNTCancelOthers, viaErrRecvQEmpty=viaErrRecvQEmpty, avEnableFailed=avEnableFailed, tv2cRenames=tv2cRenames, qosReadaheadUseFeedback=qosReadaheadUseFeedback, v2pRemoves=v2pRemoves, tv3pFsinfos=tv3pFsinfos, smb2FlushPct=smb2FlushPct, initiatorGroupVserver=initiatorGroupVserver, netappCluster=netappCluster, ncFtpBytesToServers=ncFtpBytesToServers, v3ccMknods=v3ccMknods, powerSupplyWarning=powerSupplyWarning, tv3Read64KCalls=tv3Read64KCalls, qrFilesUsed=qrFilesUsed, smb2QueryFileAttrTagInfos=smb2QueryFileAttrTagInfos, avDisableFailed=avDisableFailed, obsSmbTreeConnects=obsSmbTreeConnects, viaConnectRequest=viaConnectRequest, qosReadaheadMaxGap=qosReadaheadMaxGap, smb2QueryFileAltNamePct=smb2QueryFileAltNamePct, enclPowerSuppliesPresent=enclPowerSuppliesPresent, vsFirewallPolicyUuid=vsFirewallPolicyUuid, filesysMaxfilesAvail=filesysMaxfilesAvail, avLicenseCheck=avLicenseCheck, dmpStatus=dmpStatus, ncStreamingRealBytesToServers=ncStreamingRealBytesToServers, nodeModel=nodeModel, network=network, dafsNulls=dafsNulls, qrVFileLimit=qrVFileLimit, enclCurSensorsOverCurFail=enclCurSensorsOverCurFail, userDefined=userDefined, tv2ReadStats=tv2ReadStats, netportIfgPort=netportIfgPort, qrV264KBytesUsed=qrV264KBytesUsed, pclNfsV3Write512Calls=pclNfsV3Write512Calls, smb2QueryFsAttrInfos=smb2QueryFsAttrInfos, remoteSystemMgmtPeriodic=remoteSystemMgmtPeriodic, rcNonIdemDoneHits=rcNonIdemDoneHits, initiatorGroupMemberTable=initiatorGroupMemberTable, netportAutonegAdmin=netportAutonegAdmin, qosPolicyGroupUuid=qosPolicyGroupUuid, v3cpRemoves=v3cpRemoves, tv2ccRmdirs=tv2ccRmdirs, v3Read16KCalls=v3Read16KCalls, tv3Read4KCalls=tv3Read4KCalls, ncNntpCliConns=ncNntpCliConns, ncStreamingRespTimePerByte=ncStreamingRespTimePerByte, df64UsedKBytes=df64UsedKBytes, chassisFanDegraded=chassisFanDegraded, clusterIdentityUuid=clusterIdentityUuid, pclNfsV2Write64KCalls=pclNfsV2Write64KCalls, v3pRmdirs=v3pRmdirs, enclSASConnectPresent=enclSASConnectPresent, cifsSmb2DurableCreateReceived=cifsSmb2DurableCreateReceived, v2cpWrites=v2cpWrites, dafsNicIndex=dafsNicIndex, nfsServBadCalls=nfsServBadCalls, cifsSmb2DurableHandlePurged=cifsSmb2DurableHandlePurged, snapmirrorOn=snapmirrorOn, v3ccReaddirs=v3ccReaddirs, iscsi64Ops=iscsi64Ops, netportAutonegOper=netportAutonegOper, pclNfsV3Write16KCalls=pclNfsV3Write16KCalls, qtreeVolume=qtreeVolume, tv2pNulls=tv2pNulls, qosReadaheadMetadata=qosReadaheadMetadata, appCritical=appCritical, smb2QueryFileEAInfos=smb2QueryFileEAInfos, psetEntry=psetEntry, smb2SetBasicInfoPct=smb2SetBasicInfoPct, qrV2Type=qrV2Type, raidVBay=raidVBay, tv2cpNulls=tv2cpNulls, avRemedy=avRemedy, ncHttpInstAvgRespTime=ncHttpInstAvgRespTime, enclVoltSensorsUnderVoltFailThr=enclVoltSensorsUnderVoltFailThr, avTrendLicenseExpired=avTrendLicenseExpired, tv3cpRmdirs=tv3cpRmdirs, cifsSmb2FileFullDirInfo=cifsSmb2FileFullDirInfo, v3cpWrites=v3cpWrites, snapmirrorConnDst2=snapmirrorConnDst2, df64DedupeSaved=df64DedupeSaved, dafsLockts=dafsLockts, dfMountedOn=dfMountedOn, v2ccRoots=v2ccRoots, ncStreamingActiveCliConns=ncStreamingActiveCliConns, fcpCfMode=fcpCfMode, tv2cpRenames=tv2cpRenames, logicalInterfaceDataProtocol=logicalInterfaceDataProtocol, environment=environment, netifTable=netifTable, autosupportSent=autosupportSent, v3ccLinks=v3ccLinks, plexVolName=plexVolName, ncStreamingQTBFClients=ncStreamingQTBFClients, lunLowReadOps=lunLowReadOps, v3CachedCalls=v3CachedCalls, otherDiskBay=otherDiskBay, haSettings=haSettings, otherDiskVendor=otherDiskVendor, v3ccFsinfos=v3ccFsinfos, smbTrans2CreateDirs=smbTrans2CreateDirs, tv3cAccesss=tv3cAccesss, smb2QueryFileInvalids=smb2QueryFileInvalids, dafsCurrentRequests=dafsCurrentRequests, cpFromSyncOps=cpFromSyncOps, ncNntpBytesToClients=ncNntpBytesToClients, tv3cpMknods=tv3cpMknods, chassisPowerDegraded=chassisPowerDegraded, cDOTCpFromLowMbufOps=cDOTCpFromLowMbufOps, v3cpSymlinks=v3cpSymlinks, nvramBatteryDischarged=nvramBatteryDischarged, v3cpNulls=v3cpNulls, smbTrans2QueryPathInfoPct=smbTrans2QueryPathInfoPct, cifsDirOps=cifsDirOps)
mibBuilder.exportSymbols("NETAPP-MIB", enclVoltSensorsUnderVoltFail=enclVoltSensorsUnderVoltFail, pclNfsV3Lookups=pclNfsV3Lookups, tv3ccGetattrs=tv3ccGetattrs, cifsSmb2FileBothDirInfo=cifsSmb2FileBothDirInfo, shelfIFModuleInfo=shelfIFModuleInfo, smbLogoffAndXs=smbLogoffAndXs, clusterLicenseFeature=clusterLicenseFeature, tv3cpFsinfos=tv3cpFsinfos, psetTable=psetTable, tv3ccLinks=tv3ccLinks, volumeInconsistentUmount=volumeInconsistentUmount, volEntry=volEntry, alfFileSaved=alfFileSaved, v3cFsstats=v3cFsstats, pclNfsV2Read16KCalls=pclNfsV2Read16KCalls, obsSmbWriteMPXPct=obsSmbWriteMPXPct, chassisTemperatureOk=chassisTemperatureOk, pclNfsV2Removes=pclNfsV2Removes, otherDiskSectorSize=otherDiskSectorSize, nodeStatCounterIndex=nodeStatCounterIndex, viaNicIndex=viaNicIndex, viaMaxTransferSize=viaMaxTransferSize, nodeLocation=nodeLocation, pclNfsV3MknodPerCent=pclNfsV3MknodPerCent, raidIndex=raidIndex, v2cStatfss=v2cStatfss, smb2QueryFileInternalInfos=smb2QueryFileInternalInfos, logicalInterfaceDnsZone=logicalInterfaceDnsZone, smbSeeks=smbSeeks, spareShelf=spareShelf, snapmirrorLag=snapmirrorLag, snapmirrorRestoreRestartAborts=snapmirrorRestoreRestartAborts, ftpdError=ftpdError, cpuCount=cpuCount, dafsExportEntry=dafsExportEntry, cifsOpLkWaiterTimedOuts=cifsOpLkWaiterTimedOuts, cDOTCpFromCpDeferredOps=cDOTCpFromCpDeferredOps, cifsObsPercent=cifsObsPercent, viaThreadSafe=viaThreadSafe, haPartnerName=haPartnerName, qrV2SoftFileLimit=qrV2SoftFileLimit, product=product, slVMonth=slVMonth, spareDiskRPM=spareDiskRPM, v2pSymlinks=v2pSymlinks, qvStateTable=qvStateTable, obsSmbLockByteRangePct=obsSmbLockByteRangePct, ncRMMemFree=ncRMMemFree, dafsCalls=dafsCalls, subnetIpspaceName=subnetIpspaceName, qosReadaheadMinRange=qosReadaheadMinRange, tv3cpSymlinks=tv3cpSymlinks, cifsServ=cifsServ, tv2ccReadlinks=tv2ccReadlinks, tv3cpFsstats=tv3cpFsstats, otherDiskModel=otherDiskModel, v3pNulls=v3pNulls, v3ccSetattrs=v3ccSetattrs, obsSmbReadRaws=obsSmbReadRaws, qosPolicyGroupTable=qosPolicyGroupTable, pclNfsV3Symlinks=pclNfsV3Symlinks, avMcAfeeProductExpired=avMcAfeeProductExpired, cifsSmb2QueryInfo=cifsSmb2QueryInfo, enclElectronicsMaximum=enclElectronicsMaximum, netportIPspace=netportIPspace, ndmpRestoreFailureReason=ndmpRestoreFailureReason, miscGlobalStatusMessage=miscGlobalStatusMessage, alfFilewrap=alfFilewrap, vserverType=vserverType, v3cpFsinfos=v3cpFsinfos, ncDnsSuccessfulReverseLookups=ncDnsSuccessfulReverseLookups, domainControllerDisconnect=domainControllerDisconnect, cifsReads=cifsReads, tv2ccMkdirs=tv2ccMkdirs, dafsExportAccessList=dafsExportAccessList, tv3cNulls=tv3cNulls, extcache64Inserts=extcache64Inserts, diskReconstructingParityCount=diskReconstructingParityCount, iscsiHighOps=iscsiHighOps, netportSpeedAdmin=netportSpeedAdmin, tv2ccReaddirs=tv2ccReaddirs, tv2Percent=tv2Percent, ncStreamingRealProIsLicensed=ncStreamingRealProIsLicensed, v2cReaddirs=v2cReaddirs, smb2SessionSetups=smb2SessionSetups, rcTcpInProgressHits=rcTcpInProgressHits, snapmirrorRelStatusEntry=snapmirrorRelStatusEntry, v3ccReads=v3ccReads, fabricStatus=fabricStatus, v3pReads=v3pReads, snapmirrorArguments=snapmirrorArguments, tv3WriteStats=tv3WriteStats, smb2Reads=smb2Reads, v3cpReaddirPluss=v3cpReaddirPluss, cf=cf, slVEntry=slVEntry, smb2QueryFsVolInfoPct=smb2QueryFsVolInfoPct, vsRouteGateway=vsRouteGateway, cifsSmb2DurableHandleExpired=cifsSmb2DurableHandleExpired, tv3Read2KCalls=tv3Read2KCalls, netappProducts=netappProducts, obsSmbOpenPct=obsSmbOpenPct, tv3cLinks=tv3cLinks, ncObjectsStored=ncObjectsStored, tv2ccRenames=tv2ccRenames, snapmirrorRelDestPath=snapmirrorRelDestPath, diskMultipathNoTakeover=diskMultipathNoTakeover, qtreeStatus=qtreeStatus, snapmirrorRelLastTransferError=snapmirrorRelLastTransferError, v3cpLinks=v3cpLinks, nodeAssetTag=nodeAssetTag, viaCurrRegisterRegions=viaCurrRegisterRegions, df64TotalReservedKBytes=df64TotalReservedKBytes, nfsCache64BytesToServers=nfsCache64BytesToServers, qosReadaheadDiskResponseFactor=qosReadaheadDiskResponseFactor, v2cpLinks=v2cpLinks, svHostName=svHostName, chassisCPUFanStopped=chassisCPUFanStopped, misc=misc, tv2ccLookups=tv2ccLookups, dafsGetFsattrs=dafsGetFsattrs, fcpIsLicensed=fcpIsLicensed, lunHighReadBytes=lunHighReadBytes, v2CachedPerCent=v2CachedPerCent, df64SisSavedKBytes=df64SisSavedKBytes, psetMemberIndex=psetMemberIndex, dafsSessionMaxResponseSize=dafsSessionMaxResponseSize, dafsFetchResponses=dafsFetchResponses, dmpTime=dmpTime, sisLogicalSize=sisLogicalSize, dafsOptions=dafsOptions, volCloneSnap=volCloneSnap, tv3pCommits=tv3pCommits, v2pReads=v2pReads, v3pSetattrs=v3pSetattrs, raidVDiskName=raidVDiskName, raidPDiskSerialNumber=raidPDiskSerialNumber, ncStreamingOBTClients=ncStreamingOBTClients, fcpTargetLifHomePort=fcpTargetLifHomePort, sisHighLastOpSize=sisHighLastOpSize, slVTable=slVTable, upsLinePowerOff=upsLinePowerOff, smbOpenPrintFilePct=smbOpenPrintFilePct, smbDeletePct=smbDeletePct, v3pWrites=v3pWrites, ncStreamingProxyBytesToServers=ncStreamingProxyBytesToServers, snapmirrorActiveRestoreCount=snapmirrorActiveRestoreCount, envFailedFanCount=envFailedFanCount, cpuNonCPInterrupts=cpuNonCPInterrupts, cpuCPInterruptPercent=cpuCPInterruptPercent, netportDuplexOper=netportDuplexOper, nodeName=nodeName, dafsPendingRequests=dafsPendingRequests, lunSnapStatus=lunSnapStatus, smb2QueryFileInternalInfoPct=smb2QueryFileInternalInfoPct, switchType=switchType, v2Read32KCalls=v2Read32KCalls, cpFromNvlogReplayTakeoverTime=cpFromNvlogReplayTakeoverTime, smb2Writes=smb2Writes, pclNfsV3Read1KCalls=pclNfsV3Read1KCalls, ncHttpActiveCliConns=ncHttpActiveCliConns, ncDnsCacheMisses=ncDnsCacheMisses, qosReadaheadDefault=qosReadaheadDefault, qtreeExportPolicy=qtreeExportPolicy, obsSmbSetInfo2s=obsSmbSetInfo2s, netportUpAdmin=netportUpAdmin, logicalInterfaceFcpWwpn=logicalInterfaceFcpWwpn, netportBroadcastDomain=netportBroadcastDomain, slMinutes=slMinutes, ncStreaming=ncStreaming, tv2ccRoots=tv2ccRoots, nfs=nfs, lunHighOps=lunHighOps, svSystemTotalSecondarySuccesses=svSystemTotalSecondarySuccesses, diskMultipathOneSwitch=diskMultipathOneSwitch, haPartnerStatus=haPartnerStatus, sisIsInlineEnabled=sisIsInlineEnabled, lun64WriteOps=lun64WriteOps, avRemedyFailure=avRemedyFailure, viaErrPostDesc=viaErrPostDesc, cp=cp, compressHighUsedKBytes=compressHighUsedKBytes, fcpTargetName=fcpTargetName, avEnable=avEnable, smb2LogoffPct=smb2LogoffPct, enclVoltSensorsMaximum=enclVoltSensorsMaximum, volInNvfailedState=volInNvfailedState, dmpStFailures=dmpStFailures, snapmirrorRelPolicy=snapmirrorRelPolicy, dafsLockus=dafsLockus, ncFtpBytesFromServers=ncFtpBytesFromServers, nodeSerialNumber=nodeSerialNumber, pclNfsV3LookupPerCent=pclNfsV3LookupPerCent, viaHardwareVersion=viaHardwareVersion, enclTempSensorsUnderTempFailThr=enclTempSensorsUnderTempFailThr, productId=productId, snapmirrorRelIndex=snapmirrorRelIndex, nfsCacheBytesToServers=nfsCacheBytesToServers, ncHttpLowTotalHitRespTimes=ncHttpLowTotalHitRespTimes, dfHighAvailKBytes=dfHighAvailKBytes, subnetAvailableCount=subnetAvailableCount, compressLowUsedKBytes=compressLowUsedKBytes, tv3cReads=tv3cReads, smbCreateAndXPct=smbCreateAndXPct, ncStreamingProxyBytesFromServers=ncStreamingProxyBytesFromServers, ndmpRestoreFailures=ndmpRestoreFailures, miscWindowsSetupWizardVersion=miscWindowsSetupWizardVersion, tv2Read64KCalls=tv2Read64KCalls, tv3Read1KCalls=tv3Read1KCalls, smb2FsctlDfsReferralsPct=smb2FsctlDfsReferralsPct, qrType=qrType, fabricInstances=fabricInstances, dafsLookUps=dafsLookUps, lun64OtherOps=lun64OtherOps, miscLowCifsOps=miscLowCifsOps, smb2ReadPct=smb2ReadPct, svHostIndex=svHostIndex, initiatorGroupEntry=initiatorGroupEntry, ipspaceBroadcastDomains=ipspaceBroadcastDomains, prefDCDisconnect=prefDCDisconnect, enclCurSensorsOverCurFailThr=enclCurSensorsOverCurFailThr, ncGrmServerOptions=ncGrmServerOptions, ncStreamingLiveBWSavings=ncStreamingLiveBWSavings, pclNfsV2Read64KCalls=pclNfsV2Read64KCalls, v2pRoots=v2pRoots, volDrForceNvfail=volDrForceNvfail, autosupportSuccessfulSends=autosupportSuccessfulSends, volOwningHost=volOwningHost, volLanguage=volLanguage, vserverTable=vserverTable, otherDiskSecondaryDiskPort=otherDiskSecondaryDiskPort, cifsSymlinkCycleProtEnabled=cifsSymlinkCycleProtEnabled, enclFansSpeed=enclFansSpeed, pclRpcBadLens=pclRpcBadLens, pclNfsV3LinkPerCent=pclNfsV3LinkPerCent, cifsOpLkL2ToNones=cifsOpLkL2ToNones, cifsSecurityModel=cifsSecurityModel, pclNfsV3Creates=pclNfsV3Creates, spareSectorSize=spareSectorSize, nfsV2=nfsV2, snapmirrorRelLastTransferSize=snapmirrorRelLastTransferSize, v2cLinks=v2cLinks, nfsCacheIsEnabled=nfsCacheIsEnabled, pclPerCent=pclPerCent, spareDiskFirmwareRevision=spareDiskFirmwareRevision, totDafs=totDafs, ncHttpHighTotalHitRespTimes=ncHttpHighTotalHitRespTimes, smbFindClose2s=smbFindClose2s, smb2FsctlIpcUnsupporteds=smb2FsctlIpcUnsupporteds, tv2pGetattrs=tv2pGetattrs, pclNfsV3Mknods=pclNfsV3Mknods, ncHttpObjHitRateLast1Min=ncHttpObjHitRateLast1Min, ncStreamingRtspWMBFClients=ncStreamingRtspWMBFClients, extcache64Invalidates=extcache64Invalidates)
mibBuilder.exportSymbols("NETAPP-MIB", viaConnectTimeOut=viaConnectTimeOut, pclNfsV2LookupPerCent=pclNfsV2LookupPerCent, cDOTCpuNonCPInterruptPercent=cDOTCpuNonCPInterruptPercent, v3cCommits=v3cCommits, tv3pWrites=tv3pWrites, pclNfsV3Write8KCalls=pclNfsV3Write8KCalls, fabricEntry=fabricEntry, pclNfsV2CreatePerCent=pclNfsV2CreatePerCent, ncStreamingCliConns=ncStreamingCliConns, tv2cReadlinks=tv2cReadlinks, pclNfsV2RenamePerCent=pclNfsV2RenamePerCent, ncHttpMissRequests=ncHttpMissRequests, smb2CancelPct=smb2CancelPct, tv2pReadlinks=tv2pReadlinks, if64OutNUcastPkts=if64OutNUcastPkts, enclPowerSuppliesFailed=enclPowerSuppliesFailed, nfsCacheHighBytesToClients=nfsCacheHighBytesToClients, nfsCache64BytesFromClients=nfsCache64BytesFromClients, dafsRegisterCreds=dafsRegisterCreds, tv2cpLookups=tv2cpLookups, obsSmbQueryInfoDisks=obsSmbQueryInfoDisks, spareDiskVendor=spareDiskVendor, dfInodesFree=dfInodesFree, smb2Locks=smb2Locks, ncNtlmPossibleProblem=ncNtlmPossibleProblem, v2pWrites=v2pWrites, psetVserver=psetVserver, outOfDateDiskModel=outOfDateDiskModel, fcpHighOps=fcpHighOps, miscHighTapeReadBytes=miscHighTapeReadBytes, qosWorkloadPolicyGroup=qosWorkloadPolicyGroup, ncStreamingLiveBytesFromServers=ncStreamingLiveBytesFromServers, ncCdOptions=ncCdOptions, nfsrwStats=nfsrwStats, svSrcSnapshotTime=svSrcSnapshotTime, v3cMknods=v3cMknods, qrVType=qrVType, plexEntry=plexEntry, cifsCancelLocks=cifsCancelLocks, nodeStatValues=nodeStatValues, snapmirrorScheduledRestoreCount=snapmirrorScheduledRestoreCount, pclNfsV3Fsinfos=pclNfsV3Fsinfos, pclNfsV2Links=pclNfsV2Links, chassisCPUFanOk=chassisCPUFanOk, viaConnSentRdmaWriteMessages=viaConnSentRdmaWriteMessages)
