#
# PySNMP MIB module IANA-MAU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/output/asn1/IANA-MAU-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 14:16:03 2024
# On host fv-az693-600 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, IpAddress, MibIdentifier, ModuleIdentity, Unsigned32, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, TimeTicks, Gauge32, Counter32, NotificationType, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "MibIdentifier", "ModuleIdentity", "Unsigned32", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "TimeTicks", "Gauge32", "Counter32", "NotificationType", "Counter64", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ianaMauMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 154))
ianaMauMIB.setRevisions(('2011-08-12 00:00', '2010-02-23 00:00', '2007-04-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ianaMauMIB.setRevisionsDescriptions(('Added MAU types and associated AutoNeg capability \n                     bits specified in amendments to IEEE Std \n                     802.3-2008: IEEE Std 802.3ba-2010 and IEEE Std \n                     802.3bg-2011.', 'Added assignments that will be included in \n                     Clause 14 of IEEE P802.3.1.', 'Initial version of this MIB as published in\n                     RFC 4836.',))
if mibBuilder.loadTexts: ianaMauMIB.setLastUpdated('201108120000Z')
if mibBuilder.loadTexts: ianaMauMIB.setOrganization('IANA')
if mibBuilder.loadTexts: ianaMauMIB.setContactInfo('        Internet Assigned Numbers Authority\n\n                     Postal: ICANN\n                             4676 Admiralty Way, Suite 330\n                             Marina del Rey, CA 90292\n\n                        Tel: +1-310-823-9358\n                      EMail: iana&iana.org')
if mibBuilder.loadTexts: ianaMauMIB.setDescription("This MIB module defines dot3MauType OBJECT-IDENTITIES and\n         IANAifMauListBits, IANAifMauMediaAvailable,\n         IANAifMauAutoNegCapBits, and IANAifJackType\n\n         TEXTUAL-CONVENTIONs, specifying enumerated values of the\n         ifMauTypeListBits, ifMauMediaAvailable / rpMauMediaAvailable,\n         ifMauAutoNegCapabilityBits / ifMauAutoNegCapAdvertisedBits /\n         ifMauAutoNegCapReceivedBits and ifJackType / rpJackType objects\n         respectively, defined in the MAU-MIB.\n\n         It is intended that each new MAU type, Media Availability\n         state, Auto Negotiation capability and/or Jack type defined by\n         the IEEE 802.3 working group and approved for publication in a\n         revision of IEEE Std 802.3 will be added to this MIB module,\n         provided that it is suitable for being managed by the base\n         objects in the MAU-MIB.  An Expert Review, as defined in\n         RFC 2434 [RFC2434], is REQUIRED for such additions.\n\n         The following reference is used throughout this MIB module:\n\n         [IEEE802.3] refers to:\n            IEEE Std 802.3, 2005 Edition: 'IEEE Standard for\n            Information technology - Telecommunications and information\n            exchange between systems - Local and metropolitan area\n            networks - Specific requirements -\n            Part 3: Carrier sense multiple access with collision\n            detection (CSMA/CD) access method and physical layer\n            specifications'.\n\n         This reference should be updated as appropriate when new\n         MAU types, Media Availability states, Auto Negotiation\n         capabilities, and/or Jack types are added to this MIB module.\n\n         Copyright (C) The IETF Trust (2007).\n         The initial version of this MIB module was published in\n         RFC 4836; for full legal notices see the RFC itself.\n         Supplementary information may be available at:\n         http://www.ietf.org/copyrights/ianamib.html")
class IANAifMauTypeListBits(TextualConvention, Bits):
    reference = '[IEEE802.3], Section 30.5.1.1.2'
    description = "This data type is used as the syntax of the ifMauTypeListBits\n         object in the (updated) definition of MAU-MIB's ifMauTable.\n\n         The most recent version of this textual convention is available\n         in the online version of this MIB module on the IANA web site.\n\n         Requests for new values should be made to IANA via email\n         (iana&iana.org).\n\n         Note that changes in this textual convention SHALL be\n         synchronized with relevant changes in the dot3MauType\n         OBJECT-IDENTITIES."
    status = 'current'
    namedValues = NamedValues(("bOther", 0), ("bAUI", 1), ("b10base5", 2), ("bFoirl", 3), ("b10base2", 4), ("b10baseT", 5), ("b10baseFP", 6), ("b10baseFB", 7), ("b10baseFL", 8), ("b10broad36", 9), ("b10baseTHD", 10), ("b10baseTFD", 11), ("b10baseFLHD", 12), ("b10baseFLFD", 13), ("b100baseT4", 14), ("b100baseTXHD", 15), ("b100baseTXFD", 16), ("b100baseFXHD", 17), ("b100baseFXFD", 18), ("b100baseT2HD", 19), ("b100baseT2FD", 20), ("b1000baseXHD", 21), ("b1000baseXFD", 22), ("b1000baseLXHD", 23), ("b1000baseLXFD", 24), ("b1000baseSXHD", 25), ("b1000baseSXFD", 26), ("b1000baseCXHD", 27), ("b1000baseCXFD", 28), ("b1000baseTHD", 29), ("b1000baseTFD", 30), ("b10GbaseX", 31), ("b10GbaseLX4", 32), ("b10GbaseR", 33), ("b10GbaseER", 34), ("b10GbaseLR", 35), ("b10GbaseSR", 36), ("b10GbaseW", 37), ("b10GbaseEW", 38), ("b10GbaseLW", 39), ("b10GbaseSW", 40), ("b10GbaseCX4", 41), ("b2BaseTL", 42), ("b10PassTS", 43), ("b100BaseBX10D", 44), ("b100BaseBX10U", 45), ("b100BaseLX10", 46), ("b1000BaseBX10D", 47), ("b1000BaseBX10U", 48), ("b1000BaseLX10", 49), ("b1000BasePX10D", 50), ("b1000BasePX10U", 51), ("b1000BasePX20D", 52), ("b1000BasePX20U", 53), ("b10GbaseT", 54), ("b10GbaseLRM", 55), ("b1000baseKX", 56), ("b10GbaseKX4", 57), ("b10GbaseKR", 58), ("b10G1GbasePRXD1", 59), ("b10G1GbasePRXD2", 60), ("b10G1GbasePRXD3", 61), ("b10G1GbasePRXU1", 62), ("b10G1GbasePRXU2", 63), ("b10G1GbasePRXU3", 64), ("b10GbasePRD1", 65), ("b10GbasePRD2", 66), ("b10GbasePRD3", 67), ("b10GbasePRU1", 68), ("b10GbasePRU3", 69), ("b40GbaseKR4", 70), ("b40GbaseCR4", 71), ("b40GbaseSR4", 72), ("b40GbaseFR", 73), ("b40GbaseLR4", 74), ("b100GbaseCR10", 75), ("b100GbaseSR10", 76), ("b100GbaseLR4", 77), ("b100GbaseER4", 78))

class IANAifMauMediaAvailable(TextualConvention, Integer32):
    reference = '[IEEE802.3], Section 30.5.1.1.4'
    description = "This data type is used as the syntax of the\n         ifMauMediaAvailable and rpMauMediaAvailable objects in the\n         (updated) definition of MAU-MIB's ifMauTable and rpMauTable\n         respectively.\n\n         Possible values are:\n           other(1)             - undefined (not listed below)\n           unknown(2)           - MAU's true state is unknown; e.g.,\n                                  during initialization\n           available(3)         - link, light, or loopback is normal\n           notAvailable(4)      - link loss, low light, or no loopback\n           remoteFault(5)       - a fault has been detected at the\n                                  remote end of the link.  This value\n                                  applies to 10BASE-FB, 100BASE-T4 Far\n                                  End Fault Indication and non-specified\n                                  remote faults from a system running\n                                  auto-negotiation\n           invalidSignal(6)     - invalid signal has been received from\n                                  the other end of the link, 10BASE-FB\n                                  only\n           remoteJabber(7)      - remote fault, due to jabber\n\n           remoteLinkLoss(8)    - remote fault, due to link loss\n           remoteTest(9)        - remote fault, due to test\n           offline(10)          - offline, Clause 37 Auto-Negotiation\n                                  only\n           autoNegError(11)     - Auto-Negotiation Error, Clause 37\n                                  Auto-Negotiation only\n           pmdLinkFault(12)     - PMA/PMD receive link fault.  In case\n                                  of PAF (2BASE-TL / 10PASS-TS PHYs),\n                                  all PMEs in the aggregation group have\n                                  detected a link fault\n           wisFrameLoss(13)     - WIS loss of frame, 10GBASE-W only\n           wisSignalLoss(14)    - WIS loss of signal, 10GBASE-W only\n           pcsLinkFault(15)     - PCS receive link fault\n           excessiveBER(16)     - PCS Bit Error Ratio monitor\n                                  reporting excessive error ratio\n           dxsLinkFault(17)     - DTE XGXS receive link fault, XAUI only\n           pxsLinkFault(18)     - PHY XGXS receive link fault, XAUI only\n           availableReduced(19) - link normal, reduced bandwidth,\n                                  2BASE-TL / 10PASS-TS only\n           ready(20)            - at least one PME in the aggregation\n                                  group is detecting handshake tones,\n                                  2BASE-TL / 10PASS-TS only\n\n         If the MAU is a 10M b/s link or fiber type (FOIRL, 10BASE-T,\n         10BASE-F), then this is equivalent to the link test fail\n         state/low light function.  For an AUI, 10BASE2, 10BASE5, or\n         10BROAD36 MAU, this indicates whether loopback is detected on\n         the DI circuit.  The value of this attribute persists between\n         packets for MAU types AUI, 10BASE5, 10BASE2, 10BROAD36, and\n         10BASEFP.\n\n         At power-up or following a reset, the Media Available state\n         will be unknown(2) for AUI, 10BASE5, 10BASE2, 10BROAD36, and\n         10BASE-FP MAUs.  For these MAUs loopback will be tested on each\n         transmission during which no collision is detected.\n         If DI is receiving input when DO returns to IDL after a\n         transmission and there has been no collision during the\n         transmission, then loopback will be detected.  The Media\n         Available state will only change during noncollided\n         transmissions for AUI, 10BASE2, 10BASE5, 10BROAD36, and\n         10BASE-FP MAUs.\n\n         For 100BASE-T2, 100BASE-T4, 100BASE-TX, 100BASE-FX,\n         100BASE-LX10, and 100BASE-BX10 PHYs the enumerations match the\n         states within the link integrity state diagram.\n         Any MAU that implements management of [IEEE802.3] Clause\n         28 Auto-Negotiation, will map remote fault indication to\n         remoteFault(5).\n\n         Any MAU that implements management of Clause 37\n         Auto-Negotiation, will map the received RF1 and RF2 bits as\n         follows: Offline maps to offline(10), Link_Failure maps to\n         remoteFault(5), and Auto-Negotiation Error maps to\n         autoNegError(11).\n\n         The value remoteFault(5) applies to 10BASE-FB remote\n         fault indication, the 100BASE-X far-end fault indication, and\n         nonspecified remote faults from a system running Clause 28\n         Auto-Negotiation.\n\n         The value remoteJabber(7), remoteLink loss(8), or remoteTest(9)\n         SHOULD be used instead of remoteFault(5) where the reason for\n         remote fault is identified in the remote signaling protocol.\n         Where a Clause 22 MII or Clause 35 GMII is present, a logic\n         one in the remote fault bit maps to the value remoteFault(5),\n         a logic zero in the link status bit maps to the enumeration\n         notAvailable(4).  The value notAvailable(4) takes precedence\n         over remoteFault(5).\n\n         For 2BASE-TL and 10PASS-TS PHYs, the value unknown(2) maps to\n         the condition where the PHY (PCS with connected PMEs) is\n         initializing, the value ready(20) maps to the condition where\n         the interface is down and at least one PME in the aggregation\n         group is ready for handshake, the value available(3) maps to\n         the condition where all the PMEs in the aggregation group are\n         up, the value notAvailable(4) maps to the condition where all\n         the PMEs in the aggregation group are down and no handshake\n         tones are detected, the value availableReduced(19) maps to the\n         condition where the interface is up, a link fault is detected\n         at the receive direction by one or more PMEs in the\n         aggregation group, but at least one PME is up and the\n         enumeration pmdLinkFault(12) maps to the condition where a link\n         fault is detected at the receive direction by all of the PMEs\n         in the aggregation group.\n\n         For 10 Gb/s the enumerations map to value of the link_fault\n         variable within the Link Fault Signaling state diagram\n         as follows: the value OK maps to the value available(3),\n         the value Local Fault maps to the value notAvailable(4),\n         and the value Remote Fault maps to the value remoteFault(5).\n         The value pmdLinkFault(12), wisFrameLoss(13),\n         wisSignalLoss(14), pcsLinkFault(15), excessiveBER(16), or\n         dxsLinkFault(17) SHOULD be used instead of the value\n         notAvailable(4), where the reason for the Local Fault state can\n         be identified through the use of the Clause 45 MDIO Interface.\n         Where multiple reasons for the Local Fault state can be\n         identified, only the highest precedence error SHOULD be\n\n         reported.  This precedence in descending order is as follows:\n\n           pxsLinkFault\n           pmdLinkFault\n           wisFrameLoss\n           wisSignalLoss\n           pcsLinkFault\n           excessiveBER\n           dxsLinkFault.\n\n         Where a Clause 45 MDIO interface is present a logic zero in\n         the PMA/PMD Receive link status bit ([IEEE802.3]\n         Section 45.2.1.2.2) maps to the value pmdLinkFault(12),\n         logic one in the LOF status bit (Section 45.2.2.10.4) maps\n         to the value wisFrameLoss(13), a logic one in the LOS\n         status bit (Section 45.2.2.10.5) maps to the value\n         wisSignalLoss, a logic zero in the PCS Receive\n         link status bit (Section 45.2.3.2.2) maps to the value\n         pcsLinkFault(15), a logic one in the 10GBASE-R PCS Latched\n         high BER status bit (Section 45.2.3.12.2) maps to the value\n         excessiveBER, a logic zero in the DTE XS receive link status\n         bit (Section 45.2.5.2.2) maps to the value dxsLinkFault(17)\n         and a logic zero in the PHY XS transmit link status bit\n         (Section 45.2.4.2.2) maps to the value pxsLinkFault(18).\n\n         The most recent version of this textual convention is available\n         in the online version of this MIB module on the IANA web site.\n\n         Requests for new values should be made to IANA via email\n         (iana&iana.org)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("available", 3), ("notAvailable", 4), ("remoteFault", 5), ("invalidSignal", 6), ("remoteJabber", 7), ("remoteLinkLoss", 8), ("remoteTest", 9), ("offline", 10), ("autoNegError", 11), ("pmdLinkFault", 12), ("wisFrameLoss", 13), ("wisSignalLoss", 14), ("pcsLinkFault", 15), ("excessiveBER", 16), ("dxsLinkFault", 17), ("pxsLinkFault", 18), ("availableReduced", 19), ("ready", 20))

class IANAifMauAutoNegCapBits(TextualConvention, Bits):
    reference = '[IEEE802.3], Section 30.6.1.1.5'
    description = "This data type is used as the syntax of the\n         ifMauAutoNegCapabilityBits, ifMauAutoNegCapAdvertisedBits, and\n         ifMauAutoNegCapReceivedBits objects in the (updated) definition\n         of MAU-MIB's ifMauAutoNegTable.\n\n         The most recent version of this textual convention is available\n         in the online version of this MIB module on the IANA web site.\n\n         Requests for new values should be made to IANA via email\n         (iana&iana.org)."
    status = 'current'
    namedValues = NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15), ("b10GbaseT", 16), ("b1000baseKX", 17), ("b10GbaseKX4", 18), ("b10GbaseKR", 19), ("b40GbaseKR4", 20), ("b40GbaseCR4", 21), ("b100GbaseCR10", 22))

class IANAifJackType(TextualConvention, Integer32):
    description = "Common enumeration values for repeater and interface MAU\n         jack types.  This data type is used as the syntax of the\n         ifJackType and rpJackType objects in the (updated) definition\n         of MAU-MIB's ifJackTable and rpJackTable respectively.\n\n         Possible values are:\n              other(1)          - undefined or unknown\n              rj45(2)           - RJ45\n              rj45S(3)          - RJ45 shielded\n              db9(4)            - DB9\n              bnc(5)            - BNC\n              fAUI(6)           - AUI female\n              mAUI(7)           - AUI male\n              fiberSC(8)        - SC fiber\n              fiberMIC(9)       - MIC fiber\n              fiberST(10)       - ST fiber\n              telco(11)         - Telco\n              mtrj(12)          - MT-RJ fiber\n              hssdc(13)         - fiber channel style-2\n              fiberLC(14)       - LC fiber\n              cx4(15)           - IB4X for 10GBASE-CX4\n\n         The most recent version of this textual convention is available\n         in the online version of this MIB module on the IANA web site.\n\n         Requests for new values should be made to IANA via email\n         (iana&iana.org)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("other", 1), ("rj45", 2), ("rj45S", 3), ("db9", 4), ("bnc", 5), ("fAUI", 6), ("mAUI", 7), ("fiberSC", 8), ("fiberMIC", 9), ("fiberST", 10), ("telco", 11), ("mtrj", 12), ("hssdc", 13), ("fiberLC", 14), ("cx4", 15))

dot3MauType = MibIdentifier((1, 3, 6, 1, 2, 1, 26, 4))
dot3MauTypeAUI = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 1))
if mibBuilder.loadTexts: dot3MauTypeAUI.setStatus('current')
if mibBuilder.loadTexts: dot3MauTypeAUI.setDescription('no internal MAU, view from AUI')
if mibBuilder.loadTexts: dot3MauTypeAUI.setReference('[IEEE802.3], Section 7')
dot3MauType10Base5 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 2))
if mibBuilder.loadTexts: dot3MauType10Base5.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10Base5.setDescription('thick coax MAU')
if mibBuilder.loadTexts: dot3MauType10Base5.setReference('[IEEE802.3], Section 7')
dot3MauTypeFoirl = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 3))
if mibBuilder.loadTexts: dot3MauTypeFoirl.setStatus('current')
if mibBuilder.loadTexts: dot3MauTypeFoirl.setDescription('FOIRL MAU')
if mibBuilder.loadTexts: dot3MauTypeFoirl.setReference('[IEEE802.3], Section 9.9')
dot3MauType10Base2 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 4))
if mibBuilder.loadTexts: dot3MauType10Base2.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10Base2.setDescription('thin coax MAU')
if mibBuilder.loadTexts: dot3MauType10Base2.setReference('[IEEE802.3], Section 10')
dot3MauType10BaseT = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 5))
if mibBuilder.loadTexts: dot3MauType10BaseT.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseT.setDescription('UTP MAU.\n                   Note that it is strongly recommended that\n                   agents return either dot3MauType10BaseTHD or\n                   dot3MauType10BaseTFD if the duplex mode is\n                   known.  However, management applications should\n                   be prepared to receive this MAU type value from\n                   older agent implementations.')
if mibBuilder.loadTexts: dot3MauType10BaseT.setReference('[IEEE802.3], Section 14')
dot3MauType10BaseFP = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 6))
if mibBuilder.loadTexts: dot3MauType10BaseFP.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseFP.setDescription('passive fiber MAU')
if mibBuilder.loadTexts: dot3MauType10BaseFP.setReference('[IEEE802.3], Section 16')
dot3MauType10BaseFB = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 7))
if mibBuilder.loadTexts: dot3MauType10BaseFB.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseFB.setDescription('sync fiber MAU')
if mibBuilder.loadTexts: dot3MauType10BaseFB.setReference('[IEEE802.3], Section 17')
dot3MauType10BaseFL = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 8))
if mibBuilder.loadTexts: dot3MauType10BaseFL.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseFL.setDescription('async fiber MAU.\n                   Note that it is strongly recommended that\n                   agents return either dot3MauType10BaseFLHD or\n                   dot3MauType10BaseFLFD if the duplex mode is\n                   known.  However, management applications should\n                   be prepared to receive this MAU type value from\n                   older agent implementations.')
if mibBuilder.loadTexts: dot3MauType10BaseFL.setReference('[IEEE802.3], Section 18')
dot3MauType10Broad36 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 9))
if mibBuilder.loadTexts: dot3MauType10Broad36.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10Broad36.setDescription('broadband DTE MAU.\n                   Note that 10BROAD36 MAUs can be attached to\n                   interfaces but not to repeaters.')
if mibBuilder.loadTexts: dot3MauType10Broad36.setReference('[IEEE802.3], Section 11')
dot3MauType10BaseTHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 10))
if mibBuilder.loadTexts: dot3MauType10BaseTHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseTHD.setDescription('UTP MAU, half duplex mode')
if mibBuilder.loadTexts: dot3MauType10BaseTHD.setReference('[IEEE802.3], Section 14')
dot3MauType10BaseTFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 11))
if mibBuilder.loadTexts: dot3MauType10BaseTFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseTFD.setDescription('UTP MAU, full duplex mode')
if mibBuilder.loadTexts: dot3MauType10BaseTFD.setReference('[IEEE802.3], Section 14')
dot3MauType10BaseFLHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 12))
if mibBuilder.loadTexts: dot3MauType10BaseFLHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseFLHD.setDescription('async fiber MAU, half duplex mode')
if mibBuilder.loadTexts: dot3MauType10BaseFLHD.setReference('[IEEE802.3], Section 18')
dot3MauType10BaseFLFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 13))
if mibBuilder.loadTexts: dot3MauType10BaseFLFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseFLFD.setDescription('async fiber MAU, full duplex mode')
if mibBuilder.loadTexts: dot3MauType10BaseFLFD.setReference('[IEEE802.3], Section 18')
dot3MauType100BaseT4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 14))
if mibBuilder.loadTexts: dot3MauType100BaseT4.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseT4.setDescription('4 pair category 3 UTP')
if mibBuilder.loadTexts: dot3MauType100BaseT4.setReference('[IEEE802.3], Section 23')
dot3MauType100BaseTXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 15))
if mibBuilder.loadTexts: dot3MauType100BaseTXHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseTXHD.setDescription('2 pair category 5 UTP, half duplex mode')
if mibBuilder.loadTexts: dot3MauType100BaseTXHD.setReference('[IEEE802.3], Section 25')
dot3MauType100BaseTXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 16))
if mibBuilder.loadTexts: dot3MauType100BaseTXFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseTXFD.setDescription('2 pair category 5 UTP, full duplex mode')
if mibBuilder.loadTexts: dot3MauType100BaseTXFD.setReference('[IEEE802.3], Section 25')
dot3MauType100BaseFXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 17))
if mibBuilder.loadTexts: dot3MauType100BaseFXHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseFXHD.setDescription('X fiber over PMT, half duplex mode')
if mibBuilder.loadTexts: dot3MauType100BaseFXHD.setReference('[IEEE802.3], Section 26')
dot3MauType100BaseFXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 18))
if mibBuilder.loadTexts: dot3MauType100BaseFXFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseFXFD.setDescription('X fiber over PMT, full duplex mode')
if mibBuilder.loadTexts: dot3MauType100BaseFXFD.setReference('[IEEE802.3], Section 26')
dot3MauType100BaseT2HD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 19))
if mibBuilder.loadTexts: dot3MauType100BaseT2HD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseT2HD.setDescription('2 pair category 3 UTP, half duplex mode')
if mibBuilder.loadTexts: dot3MauType100BaseT2HD.setReference('[IEEE802.3], Section 32')
dot3MauType100BaseT2FD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 20))
if mibBuilder.loadTexts: dot3MauType100BaseT2FD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseT2FD.setDescription('2 pair category 3 UTP, full duplex mode')
if mibBuilder.loadTexts: dot3MauType100BaseT2FD.setReference('[IEEE802.3], Section 32')
dot3MauType1000BaseXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 21))
if mibBuilder.loadTexts: dot3MauType1000BaseXHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseXHD.setDescription('PCS/PMA, unknown PMD, half duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseXHD.setReference('[IEEE802.3], Section 36')
dot3MauType1000BaseXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 22))
if mibBuilder.loadTexts: dot3MauType1000BaseXFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseXFD.setDescription('PCS/PMA, unknown PMD, full duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseXFD.setReference('[IEEE802.3], Section 36')
dot3MauType1000BaseLXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 23))
if mibBuilder.loadTexts: dot3MauType1000BaseLXHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseLXHD.setDescription('Fiber over long-wavelength laser, half duplex\n                   mode')
if mibBuilder.loadTexts: dot3MauType1000BaseLXHD.setReference('[IEEE802.3], Section 38')
dot3MauType1000BaseLXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 24))
if mibBuilder.loadTexts: dot3MauType1000BaseLXFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseLXFD.setDescription('Fiber over long-wavelength laser, full duplex\n                   mode')
if mibBuilder.loadTexts: dot3MauType1000BaseLXFD.setReference('[IEEE802.3], Section 38')
dot3MauType1000BaseSXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 25))
if mibBuilder.loadTexts: dot3MauType1000BaseSXHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseSXHD.setDescription('Fiber over short-wavelength laser, half\n                   duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseSXHD.setReference('[IEEE802.3], Section 38')
dot3MauType1000BaseSXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 26))
if mibBuilder.loadTexts: dot3MauType1000BaseSXFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseSXFD.setDescription('Fiber over short-wavelength laser, full\n                   duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseSXFD.setReference('[IEEE802.3], Section 38')
dot3MauType1000BaseCXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 27))
if mibBuilder.loadTexts: dot3MauType1000BaseCXHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseCXHD.setDescription('Copper over 150-Ohm balanced cable, half\n                   duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseCXHD.setReference('[IEEE802.3], Section 39')
dot3MauType1000BaseCXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 28))
if mibBuilder.loadTexts: dot3MauType1000BaseCXFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseCXFD.setDescription('Copper over 150-Ohm balanced cable, full\n\n                   duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseCXFD.setReference('[IEEE802.3], Section 39')
dot3MauType1000BaseTHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 29))
if mibBuilder.loadTexts: dot3MauType1000BaseTHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseTHD.setDescription('Four-pair Category 5 UTP, half duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseTHD.setReference('[IEEE802.3], Section 40')
dot3MauType1000BaseTFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 30))
if mibBuilder.loadTexts: dot3MauType1000BaseTFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseTFD.setDescription('Four-pair Category 5 UTP, full duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseTFD.setReference('[IEEE802.3], Section 40')
dot3MauType10GigBaseX = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 31))
if mibBuilder.loadTexts: dot3MauType10GigBaseX.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseX.setDescription('X PCS/PMA, unknown PMD.')
if mibBuilder.loadTexts: dot3MauType10GigBaseX.setReference('[IEEE802.3], Section 48')
dot3MauType10GigBaseLX4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 32))
if mibBuilder.loadTexts: dot3MauType10GigBaseLX4.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseLX4.setDescription('X fiber over WWDM optics')
if mibBuilder.loadTexts: dot3MauType10GigBaseLX4.setReference('[IEEE802.3], Section 53')
dot3MauType10GigBaseR = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 33))
if mibBuilder.loadTexts: dot3MauType10GigBaseR.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseR.setDescription('R PCS/PMA, unknown PMD.')
if mibBuilder.loadTexts: dot3MauType10GigBaseR.setReference('[IEEE802.3], Section 49')
dot3MauType10GigBaseER = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 34))
if mibBuilder.loadTexts: dot3MauType10GigBaseER.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseER.setDescription('R fiber over 1550 nm optics')
if mibBuilder.loadTexts: dot3MauType10GigBaseER.setReference('[IEEE802.3], Section 52')
dot3MauType10GigBaseLR = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 35))
if mibBuilder.loadTexts: dot3MauType10GigBaseLR.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseLR.setDescription('R fiber over 1310 nm optics')
if mibBuilder.loadTexts: dot3MauType10GigBaseLR.setReference('[IEEE802.3], Section 52')
dot3MauType10GigBaseSR = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 36))
if mibBuilder.loadTexts: dot3MauType10GigBaseSR.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseSR.setDescription('R fiber over 850 nm optics')
if mibBuilder.loadTexts: dot3MauType10GigBaseSR.setReference('[IEEE802.3], Section 52')
dot3MauType10GigBaseW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 37))
if mibBuilder.loadTexts: dot3MauType10GigBaseW.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseW.setDescription('W PCS/PMA, unknown PMD.')
if mibBuilder.loadTexts: dot3MauType10GigBaseW.setReference('[IEEE802.3], Section 49 and 50')
dot3MauType10GigBaseEW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 38))
if mibBuilder.loadTexts: dot3MauType10GigBaseEW.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseEW.setDescription('W fiber over 1550 nm optics')
if mibBuilder.loadTexts: dot3MauType10GigBaseEW.setReference('[IEEE802.3], Section 52')
dot3MauType10GigBaseLW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 39))
if mibBuilder.loadTexts: dot3MauType10GigBaseLW.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseLW.setDescription('W fiber over 1310 nm optics')
if mibBuilder.loadTexts: dot3MauType10GigBaseLW.setReference('[IEEE802.3], Section 52')
dot3MauType10GigBaseSW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 40))
if mibBuilder.loadTexts: dot3MauType10GigBaseSW.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseSW.setDescription('W fiber over 850 nm optics')
if mibBuilder.loadTexts: dot3MauType10GigBaseSW.setReference('[IEEE802.3], Section 52')
dot3MauType10GigBaseCX4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 41))
if mibBuilder.loadTexts: dot3MauType10GigBaseCX4.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseCX4.setDescription('X copper over 8 pair 100-Ohm balanced cable')
if mibBuilder.loadTexts: dot3MauType10GigBaseCX4.setReference('[IEEE802.3], Section 54')
dot3MauType2BaseTL = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 42))
if mibBuilder.loadTexts: dot3MauType2BaseTL.setStatus('current')
if mibBuilder.loadTexts: dot3MauType2BaseTL.setDescription('Voice grade UTP copper, up to 2700m, optional PAF')
if mibBuilder.loadTexts: dot3MauType2BaseTL.setReference('[IEEE802.3], Sections 61 and 63')
dot3MauType10PassTS = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 43))
if mibBuilder.loadTexts: dot3MauType10PassTS.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10PassTS.setDescription('Voice grade UTP copper, up to 750m, optional PAF')
if mibBuilder.loadTexts: dot3MauType10PassTS.setReference('[IEEE802.3], Sections 61 and 62')
dot3MauType100BaseBX10D = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 44))
if mibBuilder.loadTexts: dot3MauType100BaseBX10D.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseBX10D.setDescription('One single-mode fiber OLT, long wavelength, 10km')
if mibBuilder.loadTexts: dot3MauType100BaseBX10D.setReference('[IEEE802.3], Section 58')
dot3MauType100BaseBX10U = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 45))
if mibBuilder.loadTexts: dot3MauType100BaseBX10U.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseBX10U.setDescription('One single-mode fiber ONU, long wavelength, 10km')
if mibBuilder.loadTexts: dot3MauType100BaseBX10U.setReference('[IEEE802.3], Section 58')
dot3MauType100BaseLX10 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 46))
if mibBuilder.loadTexts: dot3MauType100BaseLX10.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseLX10.setDescription('Two single-mode fibers, long wavelength, 10km')
if mibBuilder.loadTexts: dot3MauType100BaseLX10.setReference('[IEEE802.3], Section 58')
dot3MauType1000BaseBX10D = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 47))
if mibBuilder.loadTexts: dot3MauType1000BaseBX10D.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseBX10D.setDescription('One single-mode fiber OLT, long wavelength, 10km')
if mibBuilder.loadTexts: dot3MauType1000BaseBX10D.setReference('[IEEE802.3], Section 59')
dot3MauType1000BaseBX10U = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 48))
if mibBuilder.loadTexts: dot3MauType1000BaseBX10U.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseBX10U.setDescription('One single-mode fiber ONU, long wavelength, 10km')
if mibBuilder.loadTexts: dot3MauType1000BaseBX10U.setReference('[IEEE802.3], Section 59')
dot3MauType1000BaseLX10 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 49))
if mibBuilder.loadTexts: dot3MauType1000BaseLX10.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseLX10.setDescription('Two sigle-mode fiber, long wavelength, 10km')
if mibBuilder.loadTexts: dot3MauType1000BaseLX10.setReference('[IEEE802.3], Section 59')
dot3MauType1000BasePX10D = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 50))
if mibBuilder.loadTexts: dot3MauType1000BasePX10D.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BasePX10D.setDescription('One single-mode fiber EPON OLT, 10km')
if mibBuilder.loadTexts: dot3MauType1000BasePX10D.setReference('[IEEE802.3], Section 60')
dot3MauType1000BasePX10U = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 51))
if mibBuilder.loadTexts: dot3MauType1000BasePX10U.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BasePX10U.setDescription('One single-mode fiber EPON ONU, 10km')
if mibBuilder.loadTexts: dot3MauType1000BasePX10U.setReference('[IEEE802.3], Section 60')
dot3MauType1000BasePX20D = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 52))
if mibBuilder.loadTexts: dot3MauType1000BasePX20D.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BasePX20D.setDescription('One single-mode fiber EPON OLT, 20km')
if mibBuilder.loadTexts: dot3MauType1000BasePX20D.setReference('[IEEE802.3], Section 60')
dot3MauType1000BasePX20U = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 53))
if mibBuilder.loadTexts: dot3MauType1000BasePX20U.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BasePX20U.setDescription('One single-mode fiber EPON ONU, 20km')
if mibBuilder.loadTexts: dot3MauType1000BasePX20U.setReference('[IEEE802.3], Section 60')
dot3MauType10GbaseT = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 54))
if mibBuilder.loadTexts: dot3MauType10GbaseT.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GbaseT.setDescription('Four-pair Category 6A or better, full duplex mode only')
if mibBuilder.loadTexts: dot3MauType10GbaseT.setReference('IEEE Std 802.3, Clause 55')
dot3MauType10GbaseLRM = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 55))
if mibBuilder.loadTexts: dot3MauType10GbaseLRM.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GbaseLRM.setDescription('R multimode fiber over 1310 nm optics')
if mibBuilder.loadTexts: dot3MauType10GbaseLRM.setReference('IEEE Std 802.3, Clause 68')
dot3MauType1000baseKX = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 56))
if mibBuilder.loadTexts: dot3MauType1000baseKX.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000baseKX.setDescription('X backplane, full duplex mode only')
if mibBuilder.loadTexts: dot3MauType1000baseKX.setReference('IEEE Std 802.3, Clause 70')
dot3MauType10GbaseKX4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 57))
if mibBuilder.loadTexts: dot3MauType10GbaseKX4.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GbaseKX4.setDescription('4 lane X backplane, full duplex mode only')
if mibBuilder.loadTexts: dot3MauType10GbaseKX4.setReference('IEEE Std 802.3, Clause 71')
dot3MauType10GbaseKR = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 58))
if mibBuilder.loadTexts: dot3MauType10GbaseKR.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GbaseKR.setDescription('R backplane, full duplex mode only')
if mibBuilder.loadTexts: dot3MauType10GbaseKR.setReference('IEEE Std 802.3, Clause 72')
dot3MauType10G1GbasePRXD1 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 59))
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXD1.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXD1.setDescription('One single-mode fiber asymmetric-rate EPON OLT, supporting low\n                    power budget (PRX10)')
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXD1.setReference('IEEE Std 802.3, Clause 75')
dot3MauType10G1GbasePRXD2 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 60))
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXD2.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXD2.setDescription('One single-mode fiber asymmetric-rate EPON OLT, supporting\n                   medium power budget (PRX20)')
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXD2.setReference('IEEE Std 802.3, Clause 75')
dot3MauType10G1GbasePRXD3 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 61))
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXD3.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXD3.setDescription('One single-mode fiber asymmetric-rate EPON OLT, supporting high\n                   power budget (PRX30)')
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXD3.setReference('IEEE Std 802.3, Clause 75')
dot3MauType10G1GbasePRXU1 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 62))
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXU1.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXU1.setDescription('One single-mode fiber asymmetric-rate EPON ONU, supporting low\n                   power budget (PRX10)')
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXU1.setReference('IEEE Std 802.3, Clause 75')
dot3MauType10G1GbasePRXU2 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 63))
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXU2.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXU2.setDescription('One single-mode fiber asymmetric-rate EPON ONU, supporting\n                   medium power budget (PRX20)')
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXU2.setReference('IEEE Std 802.3, Clause 75')
dot3MauType10G1GbasePRXU3 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 64))
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXU3.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXU3.setDescription('One single-mode fiber asymmetric-rate EPON ONU, supporting high\n                   power budget (PRX30)')
if mibBuilder.loadTexts: dot3MauType10G1GbasePRXU3.setReference('IEEE Std 802.3, Clause 75')
dot3MauType10GbasePRD1 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 65))
if mibBuilder.loadTexts: dot3MauType10GbasePRD1.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GbasePRD1.setDescription('One single-mode fiber symmetric-rate EPON OLT, supporting low\n                   power budget (PR10)')
if mibBuilder.loadTexts: dot3MauType10GbasePRD1.setReference('IEEE Std 802.3, Clause 75')
dot3MauType10GbasePRD2 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 66))
if mibBuilder.loadTexts: dot3MauType10GbasePRD2.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GbasePRD2.setDescription('One single-mode fiber symmetric-rate EPON OLT, supporting\n                   medium power budget (PR20)')
if mibBuilder.loadTexts: dot3MauType10GbasePRD2.setReference('IEEE Std 802.3, Clause 75')
dot3MauType10GbasePRD3 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 67))
if mibBuilder.loadTexts: dot3MauType10GbasePRD3.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GbasePRD3.setDescription('One single-mode fiber symmetric-rate EPON OLT, supporting high\n                   power budget (PR30)')
if mibBuilder.loadTexts: dot3MauType10GbasePRD3.setReference('IEEE Std 802.3, Clause 75')
dot3MauType10GbasePRU1 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 68))
if mibBuilder.loadTexts: dot3MauType10GbasePRU1.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GbasePRU1.setDescription('One single-mode fiber symmetric-rate EPON ONU, supporting\n                   low and medium power budget (PR10 and PR20)')
if mibBuilder.loadTexts: dot3MauType10GbasePRU1.setReference('IEEE Std 802.3, Clause 75')
dot3MauType10GbasePRU3 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 69))
if mibBuilder.loadTexts: dot3MauType10GbasePRU3.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GbasePRU3.setDescription('One single-mode fiber symmetric-rate EPON ONU, supporting high\n                   power budget (PR30)')
if mibBuilder.loadTexts: dot3MauType10GbasePRU3.setReference('IEEE Std 802.3, Clause 75')
dot3MauType40GbaseKR4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 70))
if mibBuilder.loadTexts: dot3MauType40GbaseKR4.setStatus('current')
if mibBuilder.loadTexts: dot3MauType40GbaseKR4.setDescription('40GBASE-R PCS/PMA over an electrical \n                      backplane')
if mibBuilder.loadTexts: dot3MauType40GbaseKR4.setReference('IEEE Std 802.3, Clause 84')
dot3MauType40GbaseCR4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 71))
if mibBuilder.loadTexts: dot3MauType40GbaseCR4.setStatus('current')
if mibBuilder.loadTexts: dot3MauType40GbaseCR4.setDescription('40GBASE-R PCS/PMA over 4 lane shielded \n                      copper balanced cable')
if mibBuilder.loadTexts: dot3MauType40GbaseCR4.setReference('IEEE Std 802.3, Clause 85')
dot3MauType40GbaseSR4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 72))
if mibBuilder.loadTexts: dot3MauType40GbaseSR4.setStatus('current')
if mibBuilder.loadTexts: dot3MauType40GbaseSR4.setDescription('40GBASE-R PCS/PMA over 4 lane multimode \n                      fiber')
if mibBuilder.loadTexts: dot3MauType40GbaseSR4.setReference('IEEE Std 802.3, Clause 86')
dot3MauType40GbaseFR = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 73))
if mibBuilder.loadTexts: dot3MauType40GbaseFR.setStatus('current')
if mibBuilder.loadTexts: dot3MauType40GbaseFR.setDescription('40GBASE-R PCS/PMA over single mode \n                      fiber')
if mibBuilder.loadTexts: dot3MauType40GbaseFR.setReference('IEEE Std 802.3, Clause 89')
dot3MauType40GbaseLR4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 74))
if mibBuilder.loadTexts: dot3MauType40GbaseLR4.setStatus('current')
if mibBuilder.loadTexts: dot3MauType40GbaseLR4.setDescription('40GBASE-R PCS/PMA over 4 WDM lane \n                      single mode fiber')
if mibBuilder.loadTexts: dot3MauType40GbaseLR4.setReference('IEEE Std 802.3, Clause 87')
dot3MauType100GbaseCR10 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 75))
if mibBuilder.loadTexts: dot3MauType100GbaseCR10.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100GbaseCR10.setDescription('100GBASE-R PCS/PMA over 10 lane \n                      shielded copper balanced cable')
if mibBuilder.loadTexts: dot3MauType100GbaseCR10.setReference('IEEE Std 802.3, Clause 85')
dot3MauType100GbaseSR10 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 76))
if mibBuilder.loadTexts: dot3MauType100GbaseSR10.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100GbaseSR10.setDescription('100GBASE-R PCS/PMA over 10 lane \n                      multimode fiber')
if mibBuilder.loadTexts: dot3MauType100GbaseSR10.setReference('IEEE Std 802.3, Clause 86')
dot3MauType100GbaseLR4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 77))
if mibBuilder.loadTexts: dot3MauType100GbaseLR4.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100GbaseLR4.setDescription('100GBASE-R PCS/PMA over 4 WDM lane \n                      single mode fiber, long reach')
if mibBuilder.loadTexts: dot3MauType100GbaseLR4.setReference('IEEE Std 802.3, Clause 88')
dot3MauType100GbaseER4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 78))
if mibBuilder.loadTexts: dot3MauType100GbaseER4.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100GbaseER4.setDescription('100GBASE-R PCS/PMA over 4 WDM lane \n                      single mode fiber PMD, extended reach')
if mibBuilder.loadTexts: dot3MauType100GbaseER4.setReference('IEEE Std 802.3, Clause 88')
mibBuilder.exportSymbols("IANA-MAU-MIB", dot3MauType1000BaseXFD=dot3MauType1000BaseXFD, dot3MauType1000BasePX10U=dot3MauType1000BasePX10U, dot3MauType1000BaseCXHD=dot3MauType1000BaseCXHD, PYSNMP_MODULE_ID=ianaMauMIB, dot3MauType1000baseKX=dot3MauType1000baseKX, dot3MauType40GbaseLR4=dot3MauType40GbaseLR4, IANAifMauTypeListBits=IANAifMauTypeListBits, dot3MauType10G1GbasePRXU3=dot3MauType10G1GbasePRXU3, dot3MauTypeAUI=dot3MauTypeAUI, dot3MauType2BaseTL=dot3MauType2BaseTL, dot3MauType1000BaseSXFD=dot3MauType1000BaseSXFD, dot3MauType10GigBaseSR=dot3MauType10GigBaseSR, dot3MauType1000BaseBX10U=dot3MauType1000BaseBX10U, dot3MauType100BaseT4=dot3MauType100BaseT4, dot3MauType10Base2=dot3MauType10Base2, dot3MauType1000BasePX20D=dot3MauType1000BasePX20D, dot3MauType10GigBaseEW=dot3MauType10GigBaseEW, dot3MauType10BaseFP=dot3MauType10BaseFP, dot3MauType1000BaseCXFD=dot3MauType1000BaseCXFD, dot3MauType10G1GbasePRXD2=dot3MauType10G1GbasePRXD2, dot3MauType100BaseT2FD=dot3MauType100BaseT2FD, dot3MauType10GbaseKR=dot3MauType10GbaseKR, IANAifMauAutoNegCapBits=IANAifMauAutoNegCapBits, IANAifJackType=IANAifJackType, dot3MauType10G1GbasePRXU2=dot3MauType10G1GbasePRXU2, dot3MauType100BaseTXHD=dot3MauType100BaseTXHD, dot3MauType10GigBaseSW=dot3MauType10GigBaseSW, dot3MauType100BaseBX10D=dot3MauType100BaseBX10D, dot3MauType10BaseFLFD=dot3MauType10BaseFLFD, dot3MauType100GbaseCR10=dot3MauType100GbaseCR10, dot3MauType10GigBaseCX4=dot3MauType10GigBaseCX4, dot3MauType1000BaseSXHD=dot3MauType1000BaseSXHD, dot3MauTypeFoirl=dot3MauTypeFoirl, dot3MauType1000BaseLXHD=dot3MauType1000BaseLXHD, dot3MauType40GbaseSR4=dot3MauType40GbaseSR4, dot3MauType10GbasePRU1=dot3MauType10GbasePRU1, dot3MauType=dot3MauType, dot3MauType10BaseTFD=dot3MauType10BaseTFD, dot3MauType100BaseBX10U=dot3MauType100BaseBX10U, dot3MauType10GbasePRD2=dot3MauType10GbasePRD2, dot3MauType10BaseFB=dot3MauType10BaseFB, dot3MauType1000BaseLX10=dot3MauType1000BaseLX10, dot3MauType10BaseFL=dot3MauType10BaseFL, IANAifMauMediaAvailable=IANAifMauMediaAvailable, dot3MauType1000BasePX10D=dot3MauType1000BasePX10D, dot3MauType10GigBaseLX4=dot3MauType10GigBaseLX4, dot3MauType10GbasePRU3=dot3MauType10GbasePRU3, dot3MauType10BaseTHD=dot3MauType10BaseTHD, dot3MauType1000BaseTHD=dot3MauType1000BaseTHD, dot3MauType10Base5=dot3MauType10Base5, dot3MauType10GbasePRD3=dot3MauType10GbasePRD3, dot3MauType40GbaseKR4=dot3MauType40GbaseKR4, dot3MauType100BaseLX10=dot3MauType100BaseLX10, ianaMauMIB=ianaMauMIB, dot3MauType100BaseFXHD=dot3MauType100BaseFXHD, dot3MauType1000BaseXHD=dot3MauType1000BaseXHD, dot3MauType10BaseFLHD=dot3MauType10BaseFLHD, dot3MauType100GbaseLR4=dot3MauType100GbaseLR4, dot3MauType40GbaseCR4=dot3MauType40GbaseCR4, dot3MauType1000BaseTFD=dot3MauType1000BaseTFD, dot3MauType10GbasePRD1=dot3MauType10GbasePRD1, dot3MauType10G1GbasePRXU1=dot3MauType10G1GbasePRXU1, dot3MauType100BaseFXFD=dot3MauType100BaseFXFD, dot3MauType10PassTS=dot3MauType10PassTS, dot3MauType10GigBaseX=dot3MauType10GigBaseX, dot3MauType100GbaseSR10=dot3MauType100GbaseSR10, dot3MauType10GbaseLRM=dot3MauType10GbaseLRM, dot3MauType1000BaseBX10D=dot3MauType1000BaseBX10D, dot3MauType100GbaseER4=dot3MauType100GbaseER4, dot3MauType10GigBaseLW=dot3MauType10GigBaseLW, dot3MauType10Broad36=dot3MauType10Broad36, dot3MauType10GbaseT=dot3MauType10GbaseT, dot3MauType10GigBaseLR=dot3MauType10GigBaseLR, dot3MauType1000BasePX20U=dot3MauType1000BasePX20U, dot3MauType1000BaseLXFD=dot3MauType1000BaseLXFD, dot3MauType10GbaseKX4=dot3MauType10GbaseKX4, dot3MauType10BaseT=dot3MauType10BaseT, dot3MauType10GigBaseR=dot3MauType10GigBaseR, dot3MauType10GigBaseW=dot3MauType10GigBaseW, dot3MauType10GigBaseER=dot3MauType10GigBaseER, dot3MauType100BaseT2HD=dot3MauType100BaseT2HD, dot3MauType10G1GbasePRXD1=dot3MauType10G1GbasePRXD1, dot3MauType100BaseTXFD=dot3MauType100BaseTXFD, dot3MauType10G1GbasePRXD3=dot3MauType10G1GbasePRXD3, dot3MauType40GbaseFR=dot3MauType40GbaseFR)
