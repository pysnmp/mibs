#
# PySNMP MIB module AXIS-VIDEO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/axis/AXIS-VIDEO-MIB
# Produced by pysmi-1.1.12 at Wed May 29 10:02:49 2024
# On host fv-az775-27 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
products, axis = mibBuilder.importSymbols("AXIS-ROOT-MIB", "products", "axis")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter32, ObjectIdentity, NotificationType, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, Unsigned32, Gauge32, iso, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "ObjectIdentity", "NotificationType", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "Unsigned32", "Gauge32", "iso", "Bits", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
video = ModuleIdentity((1, 3, 6, 1, 4, 1, 368, 4))
video.setRevisions(('2016-09-23 12:18', '2012-12-12 12:02',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: video.setRevisionsDescriptions(('Updates in the compliance statement. Video products do not support all\n        objects in general.', 'Initial version.',))
if mibBuilder.loadTexts: video.setLastUpdated('201609231218Z')
if mibBuilder.loadTexts: video.setOrganization('Axis Communications AB')
if mibBuilder.loadTexts: video.setContactInfo('Postal: Axis Communications AB\n                 Emdalavagen 14\n                 SE-223 69 Lund\n                 Sweden\n                 Phone: +46 (0)46 272 18 00\n                 Fax:   +46 (0)46 13 61 30\n                 E-Mail: info@axis.com\n                 Web: www.axis.com')
if mibBuilder.loadTexts: video.setDescription('Axis Video MIB. Includes HW resources, such as power\n         supplies, and traps for notifying management stations when\n         something fails.')
videoBased = MibIdentifier((1, 3, 6, 1, 4, 1, 368, 1, 1))
videoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 368, 4, 1))
powerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 368, 4, 1, 1), )
if mibBuilder.loadTexts: powerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: powerSupplyTable.setDescription('Table containing information about all the power supplies\n         present in the device.')
powerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 368, 4, 1, 1, 1), ).setIndexNames((0, "AXIS-VIDEO-MIB", "powerSupplyType"), (0, "AXIS-VIDEO-MIB", "powerSupplyId"))
if mibBuilder.loadTexts: powerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: powerSupplyEntry.setDescription('A power supply entry containing information about\n         a specific power supply.')
powerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("common", 1), ("internal", 2), ("external", 3))))
if mibBuilder.loadTexts: powerSupplyType.setStatus('current')
if mibBuilder.loadTexts: powerSupplyType.setDescription('Indicates whether the power supply is mounted externally,\n         e.g. in a rack, or internally.')
powerSupplyId = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: powerSupplyId.setStatus('current')
if mibBuilder.loadTexts: powerSupplyId.setDescription('Used to identify a power supply. The powerSupplyId is unique\n         within the type, i.e. there can not be two external power\n         supplies with the same powerSupplyId. There can, however, be one\n         external and one internal that have the same powerSupplyId.')
powerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: powerSupplyStatus.setDescription('The status of a power supply.')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 368, 4, 1, 2), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
if mibBuilder.loadTexts: fanTable.setDescription('Table containing information about all the fans in the product.')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 368, 4, 1, 2, 1), ).setIndexNames((0, "AXIS-VIDEO-MIB", "fanType"), (0, "AXIS-VIDEO-MIB", "fanId"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
if mibBuilder.loadTexts: fanEntry.setDescription('A fan entry contains information about a specific fan.')
fanType = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("common", 1), ("housing", 2), ("rack", 3), ("cpu", 4))))
if mibBuilder.loadTexts: fanType.setStatus('current')
if mibBuilder.loadTexts: fanType.setDescription('The type of the fan, i.e. where the fan is mounted.')
fanId = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: fanId.setStatus('current')
if mibBuilder.loadTexts: fanId.setDescription('Used, together with fanType, to identify a fan. The fanId is\n         unique within the type, i.e. there can not be two fans with the\n         same fanType and the same fanId.')
fanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanStatus.setStatus('current')
if mibBuilder.loadTexts: fanStatus.setDescription('The status of a fan.')
tempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 368, 4, 1, 3), )
if mibBuilder.loadTexts: tempSensorTable.setStatus('current')
if mibBuilder.loadTexts: tempSensorTable.setDescription('Table containing information about all the temperature\n         sensors in the product.')
tempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 368, 4, 1, 3, 1), ).setIndexNames((0, "AXIS-VIDEO-MIB", "tempSensorType"), (0, "AXIS-VIDEO-MIB", "tempSensorId"))
if mibBuilder.loadTexts: tempSensorEntry.setStatus('current')
if mibBuilder.loadTexts: tempSensorEntry.setDescription('A temperature sensor entry contains information about a\n         specific temperature sensor.')
tempSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("common", 1), ("housing", 2), ("rack", 3), ("cpu", 4))))
if mibBuilder.loadTexts: tempSensorType.setStatus('current')
if mibBuilder.loadTexts: tempSensorType.setDescription('The type of the temperature sensor, i.e. where it is mounted.')
tempSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: tempSensorId.setStatus('current')
if mibBuilder.loadTexts: tempSensorId.setDescription('Used, together with tempSensorType, to identify a temperature\n         sensor. The tempSensorId is unique within the type, i.e. there\n         can not be two sensors with the same tempSensorType and the same\n         tempSensorId.')
tempSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failure", 2), ("outOfBoundary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorStatus.setStatus('current')
if mibBuilder.loadTexts: tempSensorStatus.setDescription('The status of the temperature sensor.')
tempSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-176, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorValue.setStatus('current')
if mibBuilder.loadTexts: tempSensorValue.setDescription('The temperature measured by a specific temperature sensor.\n         The temperature is given in degrees Celsius.')
videoChannelTable = MibTable((1, 3, 6, 1, 4, 1, 368, 4, 1, 4), )
if mibBuilder.loadTexts: videoChannelTable.setStatus('current')
if mibBuilder.loadTexts: videoChannelTable.setDescription('A list of video channel information, one entry for each\n         physical video channel.')
videoChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 368, 4, 1, 4, 1), ).setIndexNames((0, "AXIS-VIDEO-MIB", "videoChannelId"))
if mibBuilder.loadTexts: videoChannelEntry.setStatus('current')
if mibBuilder.loadTexts: videoChannelEntry.setDescription('A video channel entry contains information about a specific\n         physical video channel.')
videoChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192)))
if mibBuilder.loadTexts: videoChannelId.setStatus('current')
if mibBuilder.loadTexts: videoChannelId.setDescription('Used to identify a physical video channel.')
videoSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signalOk", 1), ("noSignal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoSignalStatus.setStatus('current')
if mibBuilder.loadTexts: videoSignalStatus.setDescription('The status of the video signal for a channel.')
audioChannelTable = MibTable((1, 3, 6, 1, 4, 1, 368, 4, 1, 5), )
if mibBuilder.loadTexts: audioChannelTable.setStatus('current')
if mibBuilder.loadTexts: audioChannelTable.setDescription('A list of audio signal information, one entry for each\n         physical audio channel.')
audioChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 368, 4, 1, 5, 1), ).setIndexNames((0, "AXIS-VIDEO-MIB", "audioChannelId"))
if mibBuilder.loadTexts: audioChannelEntry.setStatus('current')
if mibBuilder.loadTexts: audioChannelEntry.setDescription('An audio signal entry contains information about a specific\n         physical audio signal.')
audioChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192)))
if mibBuilder.loadTexts: audioChannelId.setStatus('current')
if mibBuilder.loadTexts: audioChannelId.setDescription('Used to identify a physical audio channel.')
audioSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signalOk", 1), ("noSignal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioSignalStatus.setStatus('current')
if mibBuilder.loadTexts: audioSignalStatus.setDescription('The status of the audio signal for a channel.')
casingTable = MibTable((1, 3, 6, 1, 4, 1, 368, 4, 1, 6), )
if mibBuilder.loadTexts: casingTable.setStatus('current')
if mibBuilder.loadTexts: casingTable.setDescription('A list of casing status, one entry for each casing.')
casingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 368, 4, 1, 6, 1), ).setIndexNames((0, "AXIS-VIDEO-MIB", "casingId"))
if mibBuilder.loadTexts: casingEntry.setStatus('current')
if mibBuilder.loadTexts: casingEntry.setDescription('A casing entry contains information about a specific casing.')
casingId = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: casingId.setStatus('current')
if mibBuilder.loadTexts: casingId.setDescription('Used to identify a casing.')
casingName = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casingName.setStatus('current')
if mibBuilder.loadTexts: casingName.setDescription("Used to identify a casing. If the original string is longer than the\n         specified length then the middle of the string will be replaced by '..'\n         in such a way that the length of the string becomes 32 characters\n         anyway.")
casingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casingStatus.setStatus('current')
if mibBuilder.loadTexts: casingStatus.setDescription('The status of the casing.')
storageTable = MibTable((1, 3, 6, 1, 4, 1, 368, 4, 1, 8), )
if mibBuilder.loadTexts: storageTable.setStatus('current')
if mibBuilder.loadTexts: storageTable.setDescription('A list of storage media properties, one entry for each storage media.')
storageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 368, 4, 1, 8, 1), ).setIndexNames((0, "AXIS-VIDEO-MIB", "storageId"))
if mibBuilder.loadTexts: storageEntry.setStatus('current')
if mibBuilder.loadTexts: storageEntry.setDescription('A storage media contains information about a specific medium.')
storageId = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: storageId.setStatus('current')
if mibBuilder.loadTexts: storageId.setDescription('Used to identify a storage.')
storageName = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 8, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageName.setStatus('current')
if mibBuilder.loadTexts: storageName.setDescription("Used to identify a storage medium. If the original string is longer\n\t than the specified length then the middle of the string will be\n\t replaced by '..' in such a way that the length of the string becomes 32\n         characters anyway.")
storageDisruptionDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 368, 4, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDisruptionDetected.setStatus('current')
if mibBuilder.loadTexts: storageDisruptionDetected.setDescription('The status of the storage medium.')
videoNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 368, 4, 2))
videoNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 368, 4, 2, 0))
alarmID = MibScalar((1, 3, 6, 1, 4, 1, 368, 4, 2, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmID.setStatus('current')
if mibBuilder.loadTexts: alarmID.setDescription('This object indentifies a certain alarm event in a unique way.\n\tThis means that there cannot be any alarm event that has the same ID\n\tduring a finite period of time.')
alarmName = MibScalar((1, 3, 6, 1, 4, 1, 368, 4, 2, 2), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmName.setStatus('current')
if mibBuilder.loadTexts: alarmName.setDescription('A string that identifies which kind of alarm this is. During a certain\n\ttime it is possible that alarms with the same name occur.')
alarmText = MibScalar((1, 3, 6, 1, 4, 1, 368, 4, 2, 3), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmText.setStatus('current')
if mibBuilder.loadTexts: alarmText.setDescription('Detailed description of the alarm.')
videoConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 368, 4, 3))
videoGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 368, 4, 3, 1))
videoCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 368, 4, 3, 2))
alarmNew = NotificationType((1, 3, 6, 1, 4, 1, 368, 4, 2, 0, 1)).setObjects(("AXIS-VIDEO-MIB", "alarmID"), ("AXIS-VIDEO-MIB", "alarmName"), ("AXIS-VIDEO-MIB", "alarmText"))
if mibBuilder.loadTexts: alarmNew.setStatus('current')
if mibBuilder.loadTexts: alarmNew.setDescription('This notification is sent when a new Alarm is\n         generated that has a corresponding cleared state.')
alarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 368, 4, 2, 0, 2)).setObjects(("AXIS-VIDEO-MIB", "alarmID"), ("AXIS-VIDEO-MIB", "alarmName"), ("AXIS-VIDEO-MIB", "alarmText"))
if mibBuilder.loadTexts: alarmCleared.setStatus('current')
if mibBuilder.loadTexts: alarmCleared.setDescription('This notification is generated when an alarm is\n         cleared that was previous sent as a new Alarm.')
alarmSingle = NotificationType((1, 3, 6, 1, 4, 1, 368, 4, 2, 0, 3)).setObjects(("AXIS-VIDEO-MIB", "alarmID"), ("AXIS-VIDEO-MIB", "alarmName"), ("AXIS-VIDEO-MIB", "alarmText"))
if mibBuilder.loadTexts: alarmSingle.setStatus('current')
if mibBuilder.loadTexts: alarmSingle.setDescription('This notification is sent when a new Alarm is\n         generated that has no corresponding cleared state.')
videoObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 368, 4, 3, 1, 1)).setObjects(("AXIS-VIDEO-MIB", "powerSupplyStatus"), ("AXIS-VIDEO-MIB", "fanStatus"), ("AXIS-VIDEO-MIB", "tempSensorStatus"), ("AXIS-VIDEO-MIB", "tempSensorValue"), ("AXIS-VIDEO-MIB", "videoSignalStatus"), ("AXIS-VIDEO-MIB", "audioSignalStatus"), ("AXIS-VIDEO-MIB", "casingName"), ("AXIS-VIDEO-MIB", "casingStatus"), ("AXIS-VIDEO-MIB", "storageDisruptionDetected"), ("AXIS-VIDEO-MIB", "storageName"), ("AXIS-VIDEO-MIB", "alarmID"), ("AXIS-VIDEO-MIB", "alarmName"), ("AXIS-VIDEO-MIB", "alarmText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    videoObjectGroup = videoObjectGroup.setStatus('obsolete')
if mibBuilder.loadTexts: videoObjectGroup.setDescription('A collection of video objects.')
videoNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 368, 4, 3, 1, 2)).setObjects(("AXIS-VIDEO-MIB", "alarmNew"), ("AXIS-VIDEO-MIB", "alarmCleared"), ("AXIS-VIDEO-MIB", "alarmSingle"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    videoNotificationGroup = videoNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: videoNotificationGroup.setDescription('A collection of video notifications.')
tempSensorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 368, 4, 3, 1, 3)).setObjects(("AXIS-VIDEO-MIB", "tempSensorStatus"), ("AXIS-VIDEO-MIB", "tempSensorValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tempSensorGroup = tempSensorGroup.setStatus('current')
if mibBuilder.loadTexts: tempSensorGroup.setDescription('Objects related to Axis temperature sensors.')
casingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 368, 4, 3, 1, 4)).setObjects(("AXIS-VIDEO-MIB", "casingName"), ("AXIS-VIDEO-MIB", "casingStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    casingGroup = casingGroup.setStatus('current')
if mibBuilder.loadTexts: casingGroup.setDescription('Objects related to Axis casing.')
storageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 368, 4, 3, 1, 5)).setObjects(("AXIS-VIDEO-MIB", "storageDisruptionDetected"), ("AXIS-VIDEO-MIB", "storageName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    storageGroup = storageGroup.setStatus('current')
if mibBuilder.loadTexts: storageGroup.setDescription('Objects related to Axis storage.')
videoComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 368, 4, 3, 2, 2)).setObjects(("AXIS-VIDEO-MIB", "videoNotificationGroup"), ("AXIS-VIDEO-MIB", "powerSupplyStatus"), ("AXIS-VIDEO-MIB", "fanStatus"), ("AXIS-VIDEO-MIB", "tempSensorGroup"), ("AXIS-VIDEO-MIB", "videoSignalStatus"), ("AXIS-VIDEO-MIB", "audioSignalStatus"), ("AXIS-VIDEO-MIB", "casingGroup"), ("AXIS-VIDEO-MIB", "storageGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    videoComplianceRev2 = videoComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: videoComplianceRev2.setDescription('The compliance statement for Axis video entities.')
videoCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 368, 4, 3, 2, 1)).setObjects(("AXIS-VIDEO-MIB", "videoObjectGroup"), ("AXIS-VIDEO-MIB", "videoNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    videoCompliance = videoCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: videoCompliance.setDescription('The compliance statement in a previous version of this MIB for Axis\n        video entities.')
mibBuilder.exportSymbols("AXIS-VIDEO-MIB", powerSupplyStatus=powerSupplyStatus, fanType=fanType, videoComplianceRev2=videoComplianceRev2, PYSNMP_MODULE_ID=video, alarmSingle=alarmSingle, videoNotificationPrefix=videoNotificationPrefix, videoConformance=videoConformance, videoChannelId=videoChannelId, alarmCleared=alarmCleared, fanTable=fanTable, casingEntry=casingEntry, audioChannelTable=audioChannelTable, powerSupplyId=powerSupplyId, tempSensorTable=tempSensorTable, audioSignalStatus=audioSignalStatus, fanStatus=fanStatus, tempSensorEntry=tempSensorEntry, storageEntry=storageEntry, videoChannelEntry=videoChannelEntry, videoCompliance=videoCompliance, storageDisruptionDetected=storageDisruptionDetected, video=video, casingName=casingName, fanId=fanId, audioChannelId=audioChannelId, videoSignalStatus=videoSignalStatus, storageTable=storageTable, alarmNew=alarmNew, storageGroup=storageGroup, tempSensorId=tempSensorId, tempSensorValue=tempSensorValue, alarmText=alarmText, powerSupplyType=powerSupplyType, audioChannelEntry=audioChannelEntry, storageId=storageId, videoObjectGroup=videoObjectGroup, tempSensorStatus=tempSensorStatus, videoNotificationGroup=videoNotificationGroup, fanEntry=fanEntry, alarmID=alarmID, videoObjects=videoObjects, videoCompliances=videoCompliances, tempSensorGroup=tempSensorGroup, powerSupplyEntry=powerSupplyEntry, videoChannelTable=videoChannelTable, casingGroup=casingGroup, casingId=casingId, storageName=storageName, casingTable=casingTable, videoGroups=videoGroups, tempSensorType=tempSensorType, videoNotifications=videoNotifications, alarmName=alarmName, casingStatus=casingStatus, videoBased=videoBased, powerSupplyTable=powerSupplyTable)
