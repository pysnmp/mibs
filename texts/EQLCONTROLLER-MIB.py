#
# PySNMP MIB module EQLCONTROLLER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/equallogic/EQLCONTROLLER-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 12:02:54 2024
# On host fv-az768-763 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
eqlGroupId, = mibBuilder.importSymbols("EQLGROUP-MIB", "eqlGroupId")
eqlMemberIndex, = mibBuilder.importSymbols("EQLMEMBER-MIB", "eqlMemberIndex")
equalLogic, = mibBuilder.importSymbols("EQUALLOGIC-SMI", "equalLogic")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, IpAddress, enterprises, Unsigned32, Counter64, TimeTicks, iso, Integer32, ObjectIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "IpAddress", "enterprises", "Unsigned32", "Counter64", "TimeTicks", "iso", "Integer32", "ObjectIdentity", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
eqlcontrollerModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 12740, 4))
eqlcontrollerModule.setRevisions(('2002-09-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eqlcontrollerModule.setRevisionsDescriptions(('Initial revision',))
if mibBuilder.loadTexts: eqlcontrollerModule.setLastUpdated('201503171528Z')
if mibBuilder.loadTexts: eqlcontrollerModule.setOrganization('EqualLogic Inc.')
if mibBuilder.loadTexts: eqlcontrollerModule.setContactInfo('Contact: Customer Support\n         Postal:  Dell Inc\n                  300 Innovative Way, Suite 301, Nashua, NH 03062\n         Tel:     +1 603-579-9762\n         E-mail:  US-NH-CS-TechnicalSupport@dell.com\n         WEB:     www.equallogic.com')
if mibBuilder.loadTexts: eqlcontrollerModule.setDescription('\n        Copyright (c) 2004-2014 by Dell Inc. \n        \n        All rights reserved.  This software may not be copied, disclosed, \n        transferred, or used except in accordance with a license granted \n        by Dell Inc.  This software embodies proprietary information \n        and trade secrets of Dell Inc. \n        ')
eqlcontrollerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 4, 1))
eqlcontrollerNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 4, 2))
eqlcontrollerConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 4, 3))
eqlbackplaneObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 4, 4))
eqlbackplaneNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 4, 5))
eqlbackplaneConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 4, 6))
eqlemmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 4, 7))
eqlemmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 4, 8))
eqlemmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 4, 9))
eqldaughtercardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 4, 10))
eqldaughtercardNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 4, 11))
eqldaughtercardConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 4, 12))
eqlchannelcardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 4, 13))
eqlsfpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 4, 14))
eqlControllerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1), )
if mibBuilder.loadTexts: eqlControllerTable.setStatus('current')
if mibBuilder.loadTexts: eqlControllerTable.setDescription('EqualLogic-Dynamic Member Controller Table. \n                    This table contains controller status information. \n                    One table entry per controller. It is indexed by controller slot number. \n                    The number of entries is equal to the number of controllers that are present in the system')
eqlControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLCONTROLLER-MIB", "eqlControllerIndex"))
if mibBuilder.loadTexts: eqlControllerEntry.setStatus('current')
if mibBuilder.loadTexts: eqlControllerEntry.setDescription('An entry (row) containing controller status information.')
eqlControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1))
if mibBuilder.loadTexts: eqlControllerIndex.setStatus('current')
if mibBuilder.loadTexts: eqlControllerIndex.setDescription('The index value that uniquely identifies the controller.\n                     It is equal to the controller slot number. The minimum slot number is 1')
eqlControllerModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('unknown model')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerModel.setStatus('current')
if mibBuilder.loadTexts: eqlControllerModel.setDescription('This variable specifies controller model. Is value of Part=')
eqlControllerCMRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9)).clone('unknown rev')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerCMRevision.setStatus('current')
if mibBuilder.loadTexts: eqlControllerCMRevision.setDescription('CM version number; Is value of Rev=')
eqlControllerSwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 96)).clone('unknown sw rev')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerSwRevision.setStatus('current')
if mibBuilder.loadTexts: eqlControllerSwRevision.setDescription('This variable specifies the customer visible controller software revision.')
eqlControllerBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("good-battery-is-charging", 3), ("low-voltage-status", 4), ("low-voltage-is-charging", 5), ("missing-battery", 6), ("high-temp", 7), ("low-temp", 8), ("end-of-life", 9), ("end-of-life-warning", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: eqlControllerBatteryStatus.setDescription('This variable specifies controller battery status.')
eqlControllerUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 6), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerUpTime.setStatus('current')
if mibBuilder.loadTexts: eqlControllerUpTime.setDescription('This variable specifies time interval since the controller was last booted\n                     in seconds. ')
eqlControllerProcessorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerProcessorTemp.setStatus('current')
if mibBuilder.loadTexts: eqlControllerProcessorTemp.setDescription('This variable specifies the temperature in Celsius.')
eqlControllerChipsetTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerChipsetTemp.setStatus('current')
if mibBuilder.loadTexts: eqlControllerChipsetTemp.setDescription('This variable specifies the temperature in Celsius.')
eqlControllerPrimaryOrSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerPrimaryOrSecondary.setStatus('current')
if mibBuilder.loadTexts: eqlControllerPrimaryOrSecondary.setDescription('This variable specifies if the controller is a primary or secondary controller.')
eqlControllerPrimaryFlashImageRev = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerPrimaryFlashImageRev.setStatus('current')
if mibBuilder.loadTexts: eqlControllerPrimaryFlashImageRev.setDescription('The revision of the primary flash image.')
eqlControllerSecondaryFlashImageRev = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerSecondaryFlashImageRev.setStatus('current')
if mibBuilder.loadTexts: eqlControllerSecondaryFlashImageRev.setDescription('The revision of the secondary flash image.')
eqlControllerSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerSerialNumber.setStatus('current')
if mibBuilder.loadTexts: eqlControllerSerialNumber.setDescription('This variable specifies controller serial number. Is value of SN=')
eqlControllerDate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerDate.setStatus('current')
if mibBuilder.loadTexts: eqlControllerDate.setDescription('This variable specifies date of mfg of the CM. Is value of Date=')
eqlControllerECO = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerECO.setStatus('current')
if mibBuilder.loadTexts: eqlControllerECO.setDescription('This variable specifies eco level of the CM. Is value of ECO=')
eqlControllerEEprom = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerEEprom.setStatus('current')
if mibBuilder.loadTexts: eqlControllerEEprom.setDescription('The contents of the eeprom.')
eqlControllerPLDrev = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerPLDrev.setStatus('current')
if mibBuilder.loadTexts: eqlControllerPLDrev.setDescription('This variable specifies pld version number.')
eqlControllerPlatformType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerPlatformType.setStatus('current')
if mibBuilder.loadTexts: eqlControllerPlatformType.setDescription('This variable specifies the platform type.\n                     If the number is negative its a simulator.\n                     If zero its an eval platform.\n                     If >= 1 is the version of the pss board -- does this mean cm rev?')
eqlControllerPlatformVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerPlatformVersion.setStatus('current')
if mibBuilder.loadTexts: eqlControllerPlatformVersion.setDescription('This variable specifies the version of the pss board (ie CM?)')
eqlControllerCPUPass = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerCPUPass.setStatus('current')
if mibBuilder.loadTexts: eqlControllerCPUPass.setDescription('This variable specifies silicon rev.')
eqlControllerCPUrev = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerCPUrev.setStatus('current')
if mibBuilder.loadTexts: eqlControllerCPUrev.setDescription('This variable specifies the revision of the cpu.')
eqlControllerCPUfreq = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerCPUfreq.setStatus('current')
if mibBuilder.loadTexts: eqlControllerCPUfreq.setDescription('This variable specifies the cpu freq in MHz.')
eqlControllerPhysRam = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerPhysRam.setStatus('current')
if mibBuilder.loadTexts: eqlControllerPhysRam.setDescription('This variable specifies the amount of physical memory in MB.')
eqlControllerBootRomVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerBootRomVersion.setStatus('current')
if mibBuilder.loadTexts: eqlControllerBootRomVersion.setDescription('This variable specifies the bootrom version number.')
eqlControllerBootRomBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerBootRomBuildDate.setStatus('current')
if mibBuilder.loadTexts: eqlControllerBootRomBuildDate.setDescription('This variable specifies the date and time bootrom image was built.')
eqlControllerInfoMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 25), DisplayString().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerInfoMsg.setStatus('current')
if mibBuilder.loadTexts: eqlControllerInfoMsg.setDescription('This variable is basic info on the cpu at bootup.')
eqlControllerAthenaSataVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 26), DisplayString().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerAthenaSataVersion.setStatus('current')
if mibBuilder.loadTexts: eqlControllerAthenaSataVersion.setDescription('This variable is the Athena Sata revision for all Athena chips.')
eqlControllerMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 27), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerMajorVersion.setStatus('current')
if mibBuilder.loadTexts: eqlControllerMajorVersion.setDescription('This variable specifies the major version number of the\n                     software present on the controller module.')
eqlControllerMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 28), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerMinorVersion.setStatus('current')
if mibBuilder.loadTexts: eqlControllerMinorVersion.setDescription('This variable specifies the minor version number of the\n                     software present on the controller module.')
eqlControllerMaintenanceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerMaintenanceVersion.setStatus('current')
if mibBuilder.loadTexts: eqlControllerMaintenanceVersion.setDescription('This variable specifies the maintenance version number of the\n                     software present on the controller module.')
eqlControllerSWCompatibilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerSWCompatibilityLevel.setStatus('current')
if mibBuilder.loadTexts: eqlControllerSWCompatibilityLevel.setDescription('This variable specifies the compatibility level of the\n                     software present on the controller module.')
eqlControllerFullSwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 96)).clone('unknown sw rev')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerFullSwRevision.setStatus('current')
if mibBuilder.loadTexts: eqlControllerFullSwRevision.setDescription('This variable specifies controller software revision. ')
eqlControllerNVRAMBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("not-present", 0), ("good", 1), ("bad", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerNVRAMBattery.setStatus('current')
if mibBuilder.loadTexts: eqlControllerNVRAMBattery.setDescription('This variable represents the NVRAM Battery on CM.\n                     Value would be zero if there is no NVRAM Battery( old CM).\n                     ')
eqlControllerSerialNumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 33), DisplayString().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerSerialNumber2.setStatus('current')
if mibBuilder.loadTexts: eqlControllerSerialNumber2.setDescription('This variable specifies controller serial number. Is value of SN=.The eqlControllerSerialNumber is deprecated\n                     because this value can be upto 15 characters for manhattan.')
eqlControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerType.setStatus('current')
if mibBuilder.loadTexts: eqlControllerType.setDescription('This variable specifies the type of the controller module. Ex: Type II')
eqlControllerBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 1, 1, 1, 35), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlControllerBootTime.setStatus('current')
if mibBuilder.loadTexts: eqlControllerBootTime.setDescription('This variable specifies time at which the controller was booted expressed as seconds since epoch.')
eqlBackplaneTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 4, 4, 1), )
if mibBuilder.loadTexts: eqlBackplaneTable.setStatus('current')
if mibBuilder.loadTexts: eqlBackplaneTable.setDescription('EqualLogic-Dynamic Backplane Table. \n                    This table contains backplane status information. \n                    There is only one table entry for the one backplane per PSA.')
eqlBackplaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 4, 4, 1, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLCONTROLLER-MIB", "eqlBackplaneIndex"))
if mibBuilder.loadTexts: eqlBackplaneEntry.setStatus('current')
if mibBuilder.loadTexts: eqlBackplaneEntry.setDescription('An entry (row) containing backplane status information.')
eqlBackplaneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1))
if mibBuilder.loadTexts: eqlBackplaneIndex.setStatus('current')
if mibBuilder.loadTexts: eqlBackplaneIndex.setDescription('The index value that uniquely identifies the backplane.\n                     A well chosen number for the index is 1. It is in fact the only valid index.')
eqlBackplanePartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlBackplanePartNum.setStatus('current')
if mibBuilder.loadTexts: eqlBackplanePartNum.setDescription('This variable specifies part number of the backplane.')
eqlBackplaneRev = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlBackplaneRev.setStatus('current')
if mibBuilder.loadTexts: eqlBackplaneRev.setDescription('This variable specifies revision of the backplane. Is value of Rev=')
eqlBackplaneDate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlBackplaneDate.setStatus('current')
if mibBuilder.loadTexts: eqlBackplaneDate.setDescription('This variable specifies date of mfg of the backplane.')
eqlBackplaneSN = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlBackplaneSN.setStatus('current')
if mibBuilder.loadTexts: eqlBackplaneSN.setDescription('This variable specifies serial number of the backplane.')
eqlBackplaneECO = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlBackplaneECO.setStatus('current')
if mibBuilder.loadTexts: eqlBackplaneECO.setDescription('This variable specifies eco level of the backplane.')
eqlBackplaneEEprom = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 4, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlBackplaneEEprom.setStatus('current')
if mibBuilder.loadTexts: eqlBackplaneEEprom.setDescription('The contents of the eeprom.')
eqlBackplaneSN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 4, 1, 1, 8), DisplayString().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlBackplaneSN2.setStatus('current')
if mibBuilder.loadTexts: eqlBackplaneSN2.setDescription('This variable specifies the backplane serial number. Is value of SN=.The eqlBackplaneSN is deprecated\n                     because this value can be up to 15 characters for manhattan.')
eqlBackplaneType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlBackplaneType.setStatus('current')
if mibBuilder.loadTexts: eqlBackplaneType.setDescription('This variable specifies the backplane type.')
eqlBackplaneTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlBackplaneTypeId.setStatus('current')
if mibBuilder.loadTexts: eqlBackplaneTypeId.setDescription('This variable specifies the backplane type as an Id. Used for Globalization.')
eqlEMMTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 4, 7, 1), )
if mibBuilder.loadTexts: eqlEMMTable.setStatus('current')
if mibBuilder.loadTexts: eqlEMMTable.setDescription('EqualLogic-Dynamic Member EMM Table. \n                    This table contains enclosure management status information. \n                    One table entry per emm. It is indexed by emm index.\n                    The number of entries is equal to the number of emms that are present in the system')
eqlEMMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 4, 7, 1, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLCONTROLLER-MIB", "eqlEMMIndex"))
if mibBuilder.loadTexts: eqlEMMEntry.setStatus('current')
if mibBuilder.loadTexts: eqlEMMEntry.setDescription('An entry (row) containing emm status information.')
eqlEMMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1))
if mibBuilder.loadTexts: eqlEMMIndex.setStatus('current')
if mibBuilder.loadTexts: eqlEMMIndex.setDescription('The index value that uniquely identifies the EMM subsystem. ')
eqlEMMModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('unknown model')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlEMMModel.setStatus('current')
if mibBuilder.loadTexts: eqlEMMModel.setDescription('This variable specifies controller model. Is value of Part=')
eqlEMMPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlEMMPartNum.setStatus('current')
if mibBuilder.loadTexts: eqlEMMPartNum.setDescription('This variable specifies part number of the CM.')
eqlEMMRev = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlEMMRev.setStatus('current')
if mibBuilder.loadTexts: eqlEMMRev.setDescription('This variable specifies revision of the CM.')
eqlEMMDate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 7, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlEMMDate.setStatus('current')
if mibBuilder.loadTexts: eqlEMMDate.setDescription('This variable specifies date of mfg of the CM.')
eqlEMMSN = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 7, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlEMMSN.setStatus('current')
if mibBuilder.loadTexts: eqlEMMSN.setDescription('This variable specifies serial number of the CM.')
eqlEMMECO = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 7, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlEMMECO.setStatus('current')
if mibBuilder.loadTexts: eqlEMMECO.setDescription('This variable specifies eco level of the CM.')
eqlEMMEEprom = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 7, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlEMMEEprom.setStatus('current')
if mibBuilder.loadTexts: eqlEMMEEprom.setDescription('The contents of the eeprom.')
eqlEMMSN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 7, 1, 1, 9), DisplayString().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlEMMSN2.setStatus('current')
if mibBuilder.loadTexts: eqlEMMSN2.setDescription('This variable specifies the serial number. Is value of SN=.The eqlEMMSN is deprecated\n                     because this value can be up to 15 characters for manhattan.')
eqlDaughterCardTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 4, 10, 1), )
if mibBuilder.loadTexts: eqlDaughterCardTable.setStatus('current')
if mibBuilder.loadTexts: eqlDaughterCardTable.setDescription('EqualLogic-Dynamic Member DaughterCard Table. \n                    This table contains daughter card information. \n                    One table entry per daughter card. It is indexed by daughter card index.\n                    The number of entries is equal to the number of daughter cards that are present in the system')
eqlDaughterCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 4, 10, 1, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLCONTROLLER-MIB", "eqlDaughterCardIndex"))
if mibBuilder.loadTexts: eqlDaughterCardEntry.setStatus('current')
if mibBuilder.loadTexts: eqlDaughterCardEntry.setDescription('An entry (row) containing daughter card information.')
eqlDaughterCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1))
if mibBuilder.loadTexts: eqlDaughterCardIndex.setStatus('current')
if mibBuilder.loadTexts: eqlDaughterCardIndex.setDescription('The index value that uniquely identifies the DaughterCard subsystem. 1 based')
eqlDaughterCardModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('unknown model')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDaughterCardModel.setStatus('current')
if mibBuilder.loadTexts: eqlDaughterCardModel.setDescription('This variable specifies controller model. Is value of Part=')
eqlDaughterCardPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDaughterCardPartNum.setStatus('current')
if mibBuilder.loadTexts: eqlDaughterCardPartNum.setDescription('This variable specifies part number of the daughter card.')
eqlDaughterCardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDaughterCardRev.setStatus('current')
if mibBuilder.loadTexts: eqlDaughterCardRev.setDescription('This variable specifies revision of the daughter card.')
eqlDaughterCardDate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 10, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDaughterCardDate.setStatus('current')
if mibBuilder.loadTexts: eqlDaughterCardDate.setDescription('This variable specifies date of mfg of the daughter card.')
eqlDaughterCardSN = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 10, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDaughterCardSN.setStatus('current')
if mibBuilder.loadTexts: eqlDaughterCardSN.setDescription('This variable specifies serial number of the daughter card.')
eqlDaughterCardECO = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 10, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDaughterCardECO.setStatus('current')
if mibBuilder.loadTexts: eqlDaughterCardECO.setDescription('This variable specifies eco level of the daughter card.')
eqlDaughterCardEEprom = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 10, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDaughterCardEEprom.setStatus('current')
if mibBuilder.loadTexts: eqlDaughterCardEEprom.setDescription('The contents of the eeprom.')
eqlChannelCardTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 4, 13, 1), )
if mibBuilder.loadTexts: eqlChannelCardTable.setStatus('current')
if mibBuilder.loadTexts: eqlChannelCardTable.setDescription('EqualLogic-Dynamic Member ChannelCard Table. \n                    This table contains channel card information. \n                    One table entry per channel card. It is indexed by channel card index.\n                    The number of entries is equal to the number of channel cards that are present in the system')
eqlChannelCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 4, 13, 1, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLCONTROLLER-MIB", "eqlChannelCardIndex"))
if mibBuilder.loadTexts: eqlChannelCardEntry.setStatus('current')
if mibBuilder.loadTexts: eqlChannelCardEntry.setDescription('An entry (row) containing channel card information.')
eqlChannelCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 13, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: eqlChannelCardIndex.setStatus('current')
if mibBuilder.loadTexts: eqlChannelCardIndex.setDescription('The index value that uniquely identifies the ChannelCard subsystem.')
eqlChannelCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 13, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlChannelCardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: eqlChannelCardSerialNumber.setDescription('This variable specifies serial number of the card.')
eqlChannelCardFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlChannelCardFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: eqlChannelCardFirmwareRev.setDescription('This variable specifies firmware revision of the card.')
eqlChannelCardInitRev = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 13, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlChannelCardInitRev.setStatus('current')
if mibBuilder.loadTexts: eqlChannelCardInitRev.setDescription('This variable specifies revision of the initialization configuration file.')
eqlChannelCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("not-present", 1), ("failed", 2), ("good", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlChannelCardStatus.setStatus('current')
if mibBuilder.loadTexts: eqlChannelCardStatus.setDescription('This variable specifies the status of the channel card .')
eqlSFPTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1), )
if mibBuilder.loadTexts: eqlSFPTable.setStatus('current')
if mibBuilder.loadTexts: eqlSFPTable.setDescription('EqualLogic-Dynamic Member SFP Table. \n                    This table contains SFP information. \n                    One table entry per SFP. It is indexed by SFP index.\n                    The number of entries is equal to the number of SFPs that are present in the system')
eqlSFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLCONTROLLER-MIB", "eqlSFPIndex"))
if mibBuilder.loadTexts: eqlSFPEntry.setStatus('current')
if mibBuilder.loadTexts: eqlSFPEntry.setDescription('An entry (row) containing SFP information.')
eqlSFPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: eqlSFPIndex.setStatus('current')
if mibBuilder.loadTexts: eqlSFPIndex.setDescription('The index value that uniquely identifies the SFP.')
eqlSFPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("single-mode", 1), ("multi-mode", 2), ("copper", 3), ("not-present", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSFPMode.setStatus('current')
if mibBuilder.loadTexts: eqlSFPMode.setDescription('This variable specifies the mode of the SFP.')
eqlSFPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSFPIfIndex.setStatus('current')
if mibBuilder.loadTexts: eqlSFPIfIndex.setDescription('Index of the interface attached to the SFP.')
eqlSFPIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("unknown", 0), ("sfp-transceiver", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSFPIdentifier.setStatus('current')
if mibBuilder.loadTexts: eqlSFPIdentifier.setDescription('Identifies the SFP.')
eqlSFPConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 7, 33))).clone(namedValues=NamedValues(("unknown", 0), ("lc", 7), ("copper", 33))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSFPConnector.setStatus('current')
if mibBuilder.loadTexts: eqlSFPConnector.setDescription('type of the  SFP connector.')
eqlSFPBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSFPBitrate.setStatus('current')
if mibBuilder.loadTexts: eqlSFPBitrate.setDescription('Bit rate of the SFP in units of 100 Mbits/sec.\n\t\t\t103 => 10300 => 10 Gbps')
eqlSFPLength1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSFPLength1.setStatus('current')
if mibBuilder.loadTexts: eqlSFPLength1.setDescription('If Mode is single mode, length in kilometres,\n\t\t\t Mode is multi mode, length in units of 10metres of 50/125 um fiber.')
eqlSFPLength2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSFPLength2.setStatus('current')
if mibBuilder.loadTexts: eqlSFPLength2.setDescription('If Mode is single mode, length in units of 100metres,\n\t\t\t Mode is multi mode, length in units of 10metres of 62/125 um fiber.')
eqlSFPVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSFPVendorName.setStatus('current')
if mibBuilder.loadTexts: eqlSFPVendorName.setDescription('This variable specifies vendor name of the SFP.')
eqlSFPPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSFPPartNumber.setStatus('current')
if mibBuilder.loadTexts: eqlSFPPartNumber.setDescription('This variable specifies part number of the SFP.')
eqlSFPFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSFPFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: eqlSFPFirmwareRev.setDescription('This variable specifies firmware revision of the SFP.')
eqlSFPSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSFPSerialNumber.setStatus('current')
if mibBuilder.loadTexts: eqlSFPSerialNumber.setDescription('This variable specifies serial number of the SFP.')
eqlSFPDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSFPDateCode.setStatus('current')
if mibBuilder.loadTexts: eqlSFPDateCode.setDescription('This variable specifies date of manufacture of the SFP.')
eqlSFPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 4, 14, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("not-present", 1), ("failed", 2), ("good", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlSFPStatus.setStatus('current')
if mibBuilder.loadTexts: eqlSFPStatus.setDescription('This variable specifies the status of the SFP.')
mibBuilder.exportSymbols("EQLCONTROLLER-MIB", eqlControllerSwRevision=eqlControllerSwRevision, eqlChannelCardSerialNumber=eqlChannelCardSerialNumber, eqlControllerSerialNumber2=eqlControllerSerialNumber2, eqlControllerBootTime=eqlControllerBootTime, eqlEMMIndex=eqlEMMIndex, eqlControllerPrimaryOrSecondary=eqlControllerPrimaryOrSecondary, eqlChannelCardInitRev=eqlChannelCardInitRev, eqlbackplaneNotifications=eqlbackplaneNotifications, eqlDaughterCardTable=eqlDaughterCardTable, eqlDaughterCardModel=eqlDaughterCardModel, eqlcontrollerModule=eqlcontrollerModule, eqlControllerPrimaryFlashImageRev=eqlControllerPrimaryFlashImageRev, eqlsfpObjects=eqlsfpObjects, eqlControllerProcessorTemp=eqlControllerProcessorTemp, eqlSFPIndex=eqlSFPIndex, eqlSFPFirmwareRev=eqlSFPFirmwareRev, eqlControllerType=eqlControllerType, eqlbackplaneConformance=eqlbackplaneConformance, eqlSFPMode=eqlSFPMode, eqlEMMSN=eqlEMMSN, eqlDaughterCardEEprom=eqlDaughterCardEEprom, eqlControllerBootRomVersion=eqlControllerBootRomVersion, eqlChannelCardTable=eqlChannelCardTable, eqlEMMModel=eqlEMMModel, eqlBackplaneSN=eqlBackplaneSN, eqlBackplaneECO=eqlBackplaneECO, eqlControllerPLDrev=eqlControllerPLDrev, eqlEMMECO=eqlEMMECO, eqlControllerInfoMsg=eqlControllerInfoMsg, eqlControllerFullSwRevision=eqlControllerFullSwRevision, eqlChannelCardFirmwareRev=eqlChannelCardFirmwareRev, eqlBackplaneEntry=eqlBackplaneEntry, eqlSFPTable=eqlSFPTable, eqlcontrollerNotifications=eqlcontrollerNotifications, eqlSFPDateCode=eqlSFPDateCode, eqlcontrollerConformance=eqlcontrollerConformance, eqlDaughterCardPartNum=eqlDaughterCardPartNum, eqlSFPLength2=eqlSFPLength2, eqlDaughterCardECO=eqlDaughterCardECO, eqlControllerMinorVersion=eqlControllerMinorVersion, eqlemmObjects=eqlemmObjects, eqlchannelcardObjects=eqlchannelcardObjects, eqlBackplaneIndex=eqlBackplaneIndex, eqlControllerBootRomBuildDate=eqlControllerBootRomBuildDate, eqldaughtercardObjects=eqldaughtercardObjects, eqlBackplaneEEprom=eqlBackplaneEEprom, eqlDaughterCardSN=eqlDaughterCardSN, eqlControllerCPUfreq=eqlControllerCPUfreq, eqlControllerPhysRam=eqlControllerPhysRam, eqlEMMRev=eqlEMMRev, eqlSFPStatus=eqlSFPStatus, eqldaughtercardNotifications=eqldaughtercardNotifications, eqlChannelCardStatus=eqlChannelCardStatus, eqlSFPIfIndex=eqlSFPIfIndex, eqlChannelCardIndex=eqlChannelCardIndex, eqlDaughterCardRev=eqlDaughterCardRev, eqlDaughterCardIndex=eqlDaughterCardIndex, eqlControllerMajorVersion=eqlControllerMajorVersion, eqlEMMPartNum=eqlEMMPartNum, eqlDaughterCardDate=eqlDaughterCardDate, eqlEMMTable=eqlEMMTable, eqlSFPPartNumber=eqlSFPPartNumber, eqlControllerChipsetTemp=eqlControllerChipsetTemp, eqlEMMSN2=eqlEMMSN2, eqlSFPIdentifier=eqlSFPIdentifier, eqlControllerSerialNumber=eqlControllerSerialNumber, PYSNMP_MODULE_ID=eqlcontrollerModule, eqlDaughterCardEntry=eqlDaughterCardEntry, eqlControllerBatteryStatus=eqlControllerBatteryStatus, eqlControllerPlatformType=eqlControllerPlatformType, eqlControllerCPUPass=eqlControllerCPUPass, eqlEMMEEprom=eqlEMMEEprom, eqlemmConformance=eqlemmConformance, eqlControllerMaintenanceVersion=eqlControllerMaintenanceVersion, eqlControllerECO=eqlControllerECO, eqlControllerNVRAMBattery=eqlControllerNVRAMBattery, eqlEMMDate=eqlEMMDate, eqlBackplanePartNum=eqlBackplanePartNum, eqlBackplaneSN2=eqlBackplaneSN2, eqlemmNotifications=eqlemmNotifications, eqlSFPLength1=eqlSFPLength1, eqlControllerDate=eqlControllerDate, eqlBackplaneRev=eqlBackplaneRev, eqlBackplaneTypeId=eqlBackplaneTypeId, eqlControllerTable=eqlControllerTable, eqlSFPBitrate=eqlSFPBitrate, eqlSFPSerialNumber=eqlSFPSerialNumber, eqlControllerCMRevision=eqlControllerCMRevision, eqldaughtercardConformance=eqldaughtercardConformance, eqlControllerCPUrev=eqlControllerCPUrev, eqlBackplaneDate=eqlBackplaneDate, eqlControllerSecondaryFlashImageRev=eqlControllerSecondaryFlashImageRev, eqlControllerIndex=eqlControllerIndex, eqlEMMEntry=eqlEMMEntry, eqlBackplaneTable=eqlBackplaneTable, eqlSFPConnector=eqlSFPConnector, eqlControllerEntry=eqlControllerEntry, eqlControllerPlatformVersion=eqlControllerPlatformVersion, eqlcontrollerObjects=eqlcontrollerObjects, eqlControllerEEprom=eqlControllerEEprom, eqlControllerModel=eqlControllerModel, eqlControllerUpTime=eqlControllerUpTime, eqlSFPVendorName=eqlSFPVendorName, eqlControllerSWCompatibilityLevel=eqlControllerSWCompatibilityLevel, eqlBackplaneType=eqlBackplaneType, eqlSFPEntry=eqlSFPEntry, eqlbackplaneObjects=eqlbackplaneObjects, eqlChannelCardEntry=eqlChannelCardEntry, eqlControllerAthenaSataVersion=eqlControllerAthenaSataVersion)
