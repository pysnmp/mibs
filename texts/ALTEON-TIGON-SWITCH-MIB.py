#
# PySNMP MIB module ALTEON-TIGON-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alteonos/ALTEON-TIGON-SWITCH-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:36:02 2024
# On host fv-az973-242 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "switch")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, Counter32, Unsigned32, iso, TimeTicks, Counter64, ModuleIdentity, Gauge32, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, mgmt, Integer32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "Counter32", "Unsigned32", "iso", "TimeTicks", "Counter64", "ModuleIdentity", "Gauge32", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "mgmt", "Integer32", "enterprises")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2))
stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8))
information = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9))
altswitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 13))
operCmds = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14))
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16))
agGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1))
agGeneralConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2))
memStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12))
pktStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13))
mpCpuStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 16))
hwPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hwPartNumber.setDescription('The hardware part number of the Alteon Switch.')
hwRevision = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRevision.setStatus('mandatory')
if mibBuilder.loadTexts: hwRevision.setDescription('The hardware revision.  If the revision is not\n\t available, a zero length string should be returned.')
hwPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hwPowerSupplyStatus.setDescription('The status of the internal power supply.')
hwRedundantPSPresent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("notPresent", 3), ("present", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRedundantPSPresent.setStatus('mandatory')
if mibBuilder.loadTexts: hwRedundantPSPresent.setDescription('Existence of redundant power supply.')
hwRedundantPSStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRedundantPSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hwRedundantPSStatus.setDescription('The status of the redundant power supply.')
hwSensor1Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor1Temp.setStatus('mandatory')
if mibBuilder.loadTexts: hwSensor1Temp.setDescription('The temperature of the rear left sensor in degrees Celsius.')
hwSensor2Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor2Temp.setStatus('mandatory')
if mibBuilder.loadTexts: hwSensor2Temp.setDescription('The temperature of the rear middle sensor in degrees Celsius.')
hwSensor3Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor3Temp.setStatus('mandatory')
if mibBuilder.loadTexts: hwSensor3Temp.setDescription('The temperature of the front middle sensor in degrees Celsius.')
hwSensor4Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor4Temp.setStatus('mandatory')
if mibBuilder.loadTexts: hwSensor4Temp.setDescription('The temperature of the front right sensor in degrees Celsius.')
agSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("saveActive", 2), ("notSaveActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSaveConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: agSaveConfiguration.setDescription('This is an action object to write current configuration to \n         nonvolatile storage.\n\n         When issued with the saveActive, the active configuration\n         in flash is saved to backup in flash and then the new\n         configuration is saved to the active configuration in flash.\n\n         When issued with notSaveActive, the active configuration\n         is NOT saved to the flash and the active configuration is\n         overwritten with the new configuration.\n\n         ok(1) is returned always when read.')
agApplyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("apply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: agApplyConfiguration.setDescription('This is an action object to apply the changes made to configuration \n         of the switch. By setting the value to apply(2), all the changes \n         made since the last apply are written to the new_config block.\n\n         other(1) is returned when this object ie read. ')
agApplyPending = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("applyNeeded", 2), ("noApplyNeeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyPending.setStatus('mandatory')
if mibBuilder.loadTexts: agApplyPending.setDescription('This object, when read, gives the user information\n         whether an apply action is needed and that the configuration\n         has been chaged by the user actions. The user then can\n         apply the changes by setting proper value to the object\n         agApplyConfiguration described above.')
agReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("coldReset", 2), ("warmReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agReset.setStatus('mandatory')
if mibBuilder.loadTexts: agReset.setDescription('This is an action object to reboot the agent.\n         other(1) is returned always when read.\n\n         The following values are writable:\n             coldReset(2)...\n             warmReset(3)...')
agConfigForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("backup", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agConfigForNxtReset.setStatus('mandatory')
if mibBuilder.loadTexts: agConfigForNxtReset.setDescription('The configuration information to be loaded from at next reset.\n\n          The following values are writable:\n              active(2)...active configuration block\n              backup(3)...backup configuration block\n              default(4)..default configuration block')
agImageForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agImageForNxtReset.setStatus('mandatory')
if mibBuilder.loadTexts: agImageForNxtReset.setDescription('The software image to be booted from at next reset.\n\n         The following values are writable:\n             image1(2)...image 1\n             image2(3)...image 2')
agSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agSoftwareVersion.setDescription("The version of the software image that is currently running on the \n         system in the form of 'major.minor.maintenance.bugfix'.  A zero \n         length string is returned if version is not available.")
agBootVer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agBootVer.setStatus('mandatory')
if mibBuilder.loadTexts: agBootVer.setDescription("The version of the boot code in the form of 'major.minor.bugfix'.\n         A zero length string is returned if version is not available.")
agImage1Ver = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage1Ver.setStatus('mandatory')
if mibBuilder.loadTexts: agImage1Ver.setDescription("The version of the software image stored in image 1 storage in the \n         form of 'major.minor.maintenance.bugfix'.  A zero length string is \n         returned if version is not available or there is no valid \n         software image.")
agImage2Ver = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage2Ver.setStatus('mandatory')
if mibBuilder.loadTexts: agImage2Ver.setDescription("The version of the software image stored in image 2 storage in the \n         form of 'major.minor.maintenance.bugfix'.  A zero length string is\n         returned if version is not available or there is no valid software\n         image.")
agRtcDate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcDate.setStatus('mandatory')
if mibBuilder.loadTexts: agRtcDate.setDescription("The date on the real time clock in the form of 'mm/dd/yy'.  \n         A zero length string is returned if date is not available.")
agRtcTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcTime.setStatus('mandatory')
if mibBuilder.loadTexts: agRtcTime.setDescription("The time on the real time clock in the form of 'hh:mm:ss'.  \n         A zero length string is returned if time is not available.")
agTftpServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpServerIpAddr.setDescription('The TFTP server IP address.')
agTftpImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImageFileName.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpImageFileName.setDescription('The image file name to be downloaded.')
agTftpImage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImage.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpImage.setDescription('Whether the image file should be loaded in image1 or image2 in flash.')
agTftpDownload = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("download", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpDownload.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpDownload.setDescription('This is an action object to cause to download software image \n         according to the setup of agTftpServerIpAddr, agTftpImageFileName, \n         agTftpImage when download(2) is issued.\n         other(1) is returned always when read.')
agLastSetErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agLastSetErrorReason.setStatus('mandatory')
if mibBuilder.loadTexts: agLastSetErrorReason.setDescription('The error reason of the last SET failure.')
agTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpServer.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpServer.setDescription('The TFTP server IP address or domain name.')
agTftpCfgFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpCfgFileName.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpCfgFileName.setDescription('The configuration file name.')
agTftpDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpDumpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpDumpFileName.setDescription('The file name for core dump.')
agTftpAction = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("img-get", 2), ("cfg-get", 3), ("cfg-put", 4), ("dump-put", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpAction.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpAction.setDescription('This is an action object to perform various TFTP Get or Put functions.\n         The TFTP sever is specified in agTftpServer object.\n\t img-get(2) - Download switch image from a specified image\n                      file (agTftpImageFileName) on the TFTP server to\n\t              the destinated storage (agTftpImage).\n\t cfg-get(3) - Download switch configuration from a specified\n                      file (agTftpCfgFileName) on the TFTP server.\n\t cfg-put(4) - Upload switch configuration to a specified\n                      file (agTftpCfgFileName) on the TFTP server.\n\t dump-put(5)- Download switch core dump to a specified\n                      file (agTftpDumpFileName) on the TFTP server.\n\n         other(1) is returned always when read.')
agTftpLastActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTftpLastActionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpLastActionStatus.setDescription('The recorded status of the previous TFTP activity.')
agRevert = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevert.setStatus('mandatory')
if mibBuilder.loadTexts: agRevert.setDescription('This is an action object to revert the unapplied changes \n         made to the switch. By setting the value to revert(2), \n         all the unapplied changes will be reverted. This action \n         will copy the current_config to the new_config block.\n\n         other(1) is returned when this object is read. ')
agRevertApply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revertApply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevertApply.setStatus('mandatory')
if mibBuilder.loadTexts: agRevertApply.setDescription('This is an action object to revert the unsaved changes \n         made to the switch. By setting the value to revertApply(2), \n         all the unsaved as well as unapplied changes will be \n         reverted.\n\n         other(1) is returned when this object is read. ')
agEnabledSwFeatures = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledSwFeatures.setStatus('mandatory')
if mibBuilder.loadTexts: agEnabledSwFeatures.setDescription('The software features that are enabled on the switch.')
agClrSyslogMsgs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agClrSyslogMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: agClrSyslogMsgs.setDescription('Clears all current Syslog messages.')
agSavePending = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveNeeded", 1), ("noSaveNeeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSavePending.setStatus('mandatory')
if mibBuilder.loadTexts: agSavePending.setDescription('This object, when read, gives the user information\n         whether an save action is needed and that the configuration\n         has been applied but not saved to the flash.')
agEnabledGslbKey = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledGslbKey.setStatus('mandatory')
if mibBuilder.loadTexts: agEnabledGslbKey.setDescription('Query if software key Global slb enabled on switch.')
agEnabledBwmKey = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledBwmKey.setStatus('mandatory')
if mibBuilder.loadTexts: agEnabledBwmKey.setDescription('Query if software key Bandwidth Mgmt. enabled on switch.')
agSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: agSlotNumber.setDescription('Identifies the slot in which this switch is installed. If the \n         agent implementing this MIB is not a blade in a chassis this \n         value has no meaning.')
agEnabledRurlKey = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledRurlKey.setStatus('mandatory')
if mibBuilder.loadTexts: agEnabledRurlKey.setDescription('The status of the RURL software key.')
agNewCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogHost.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogHost.setDescription('The syslog host IP address, in the new_configuration block.')
agCurCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogHost.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogHost.setDescription('The syslog host IP address, as currently configured in\n         the current_configuration block.')
agNewCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgBootp.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgBootp.setDescription('Enable or disable the use of BootP, in the new_configuration block.')
agCurCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgBootp.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgBootp.setDescription('Enable or disable the use of BootP, as currently configured in the \n         current_configuration block.')
agNewCfgSpanningTree = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSpanningTree.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSpanningTree.setDescription('Turn On or Off Spanning Tree Protocol for the switch, in the \n         new_configuration block.')
agCurCfgSpanningTree = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSpanningTree.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSpanningTree.setDescription('The state of Spanning Tree Protocol for the switch, as\n         currently configured in the current_configuration block.')
agTrapHostTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTrapHostTableMaxEnt.setStatus('mandatory')
if mibBuilder.loadTexts: agTrapHostTableMaxEnt.setDescription('The maximum number of rows in the trap host table.')
agCurCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8), )
if mibBuilder.loadTexts: agCurCfgTrapHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgTrapHostTable.setDescription('The table of trap hosts which to send SNMP traps in the \n         current_configuration block.')
agCurCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1), ).setIndexNames((0, "ALTEON-TIGON-SWITCH-MIB", "agCurCfgTrapHostIndx"))
if mibBuilder.loadTexts: agCurCfgTrapHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgTrapHostEntry.setDescription('A row in the trap host table in the current_configuration block.')
agCurCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIndx.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgTrapHostIndx.setDescription('The index of the row in trap host table.')
agCurCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgTrapHostIpAddr.setDescription('The IP address of a trap host.')
agCurCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostCommString.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgTrapHostCommString.setDescription('The SNMP community string to use with the trap host')
agNewCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9), )
if mibBuilder.loadTexts: agNewCfgTrapHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgTrapHostTable.setDescription('The table of trap hosts which to send SNMP traps in the\n          new_configuration block.')
agNewCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1), ).setIndexNames((0, "ALTEON-TIGON-SWITCH-MIB", "agNewCfgTrapHostIndx"))
if mibBuilder.loadTexts: agNewCfgTrapHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgTrapHostEntry.setDescription('A row in the trap host table in the new_configuration block.')
agNewCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgTrapHostIndx.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgTrapHostIndx.setDescription('The index of the row in trap host table.')
agNewCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgTrapHostIpAddr.setDescription('The IP address of a trap host.')
agNewCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostCommString.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgTrapHostCommString.setDescription('The SNMP community string to use with the trap host')
agCurCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setDescription('The TCP port number that the HTTP server is listening to \n         in the current_configuration block.')
agNewCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setDescription('The TCP port number that the HTTP server is listening to \n         in the new_configuration block.')
agCurCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLoginBanner.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgLoginBanner.setDescription('The user defined login banner.')
agNewCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLoginBanner.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgLoginBanner.setDescription('The user defined login banner.')
agNewCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setDescription('The second syslog host IP address, in the new_configuration block.')
agCurCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setDescription('The second syslog host IP address, as currently configured in\n         the current_configuration block.')
agCurCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogFac.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogFac.setDescription('The facility of syslog host in the current_configuration block.')
agNewCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogFac.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogFac.setDescription('The facility of syslog host in the new_configuration block.')
agCurCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setDescription('The facility of syslog2 host in the current_configuration block.')
agNewCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setDescription('The facility of syslogs host in the new_configuration block.')
agCurCfgSmtpHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSmtpHost.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSmtpHost.setDescription('The user defined SMTP host.')
agNewCfgSmtpHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSmtpHost.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSmtpHost.setDescription('The user defined SMTP host.')
agCurCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgConsole.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgConsole.setDescription('Enable or disable console output of syslog messages.')
agNewCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgConsole.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgConsole.setDescription('Enable or disable console output of syslog messages.')
agCurCfgMgmtNetwork = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgMgmtNetwork.setDescription('The management network - corresponding to the mnet command of \n         the slb configuration menu.')
agNewCfgMgmtNetwork = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgMgmtNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgMgmtNetwork.setDescription('The management network - corresponding to the mnet command of \n         the system menu.')
agCurCfgMgmtMask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtMask.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgMgmtMask.setDescription('The management subnet mask - corresponding to the mmask command \n         of the system configuration menu.')
agNewCfgMgmtMask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgMgmtMask.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgMgmtMask.setDescription('The management subnet mask - corresponding to the mmask command \n         of the system configuration menu.')
agNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28))
agCurCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPServer.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgNTPServer.setDescription('The NTP Server Address.')
agNewCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPServer.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgNTPServer.setDescription('The NTP Server Address.')
agCurCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2880))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPResyncInterval.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgNTPResyncInterval.setDescription('The NTP Server resync interval in minutes.')
agNewCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2880))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPResyncInterval.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgNTPResyncInterval.setDescription('The NTP Server resync interval in minutes.')
agCurCfgNTPTzone = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPTzone.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgNTPTzone.setDescription('The NTP Server timezone offset from GMT in hours.')
agNewCfgNTPTzone = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPTzone.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgNTPTzone.setDescription('The NTP Server timezone offset from GMT in hours.')
agCurCfgNTPDlight = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPDlight.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgNTPDlight.setDescription('Enable/disable daylight savings time.')
agNewCfgNTPDlight = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPDlight.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgNTPDlight.setDescription('Enable/disable daylight savings time.')
agCurCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPService.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgNTPService.setDescription('Enable/disable NTP Service.')
agNewCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPService.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgNTPService.setDescription('Enable/disable NTP Service.')
agLog = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29))
agNewCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapConsole.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapConsole.setDescription('Enable or disable console syslog and SNMP trap, in the \n         new_configuration block.')
agCurCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapConsole.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapConsole.setDescription('Enable or disable console syslog and SNMP trap, as currently \n         configured in the current_configuration block.')
agNewCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSystem.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapSystem.setDescription('Enable or disable system level syslog and SNMP trap, in the \n         new_configuration block.')
agCurCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSystem.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapSystem.setDescription('Enable or disable system level syslog and SNMP trap, as currently \n         configured in the current_configuration block.')
agNewCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapMgmt.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapMgmt.setDescription('Enable or disable management(flash, config, login) syslog and SNMP \n         trap, in the new_configuration block.')
agCurCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapMgmt.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapMgmt.setDescription('Enable or disable management(flash, config, login) syslog and SNMP \n         trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapCli.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapCli.setDescription('Enable or disable CLI generated error syslog and SNMP trap, in the \n\t new_configuration block.')
agCurCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapCli.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapCli.setDescription('Enable or disable CLI generated error syslog and SNMP trap, as \n         currently configured in the current_configuration block.')
agNewCfgSyslogTrapStp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapStp.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapStp.setDescription('Enable or disable spanning tree syslog and SNMP trap, in the \n         new_configuration block.')
agCurCfgSyslogTrapStp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapStp.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapStp.setDescription('Enable or disable spanning tree syslog and SNMP trap, as currently \n         configured in the current_configuration block.')
agNewCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVlan.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapVlan.setDescription('Enable or disable VLAN syslog and SNMP trap, in the new_configuration\n         block.')
agCurCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVlan.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapVlan.setDescription('Enable or disable VLAN syslog and SNMP trap, as currently configured \n         in the current_configuration block.')
agNewCfgSyslogTrapSlb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSlb.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapSlb.setDescription('Enable or disable SLB syslog and SNMP trap, in the new_configuration \n         block.')
agCurCfgSyslogTrapSlb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSlb.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapSlb.setDescription('Enable or disable SLB syslog and SNMP trap, as currently configured \n         in the current_configuration block.')
agNewCfgSyslogTrapGslb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapGslb.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapGslb.setDescription('Enable or disable GSLB syslog and SNMP trap, in the new_configuration\n         block.')
agCurCfgSyslogTrapGslb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapGslb.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapGslb.setDescription('Enable or disable GSLB syslog and SNMP trap, as currently configured \n         in the current_configuration block.')
agNewCfgSyslogTrapFilter = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapFilter.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapFilter.setDescription('Enable or disable filter syslog and SNMP trap, in the \n         new_configuration block.')
agCurCfgSyslogTrapFilter = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapFilter.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapFilter.setDescription('Enable or disable filter syslog and SNMP trap, as currently \n         configured in the current_configuration block.')
agNewCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSsh.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapSsh.setDescription('Enable or disable SSH, RADIUS syslog and SNMP trap, in the \n         new_configuration block.')
agCurCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSsh.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapSsh.setDescription('Enable or disable SSH, RADIUS syslog and SNMP trap, as currently \n         configured in the current_configuration block.')
agNewCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVrrp.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapVrrp.setDescription('Enable or disable VRRP syslog and SNMP trap, in the new_configuration\n         block.')
agCurCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVrrp.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapVrrp.setDescription('Enable or disable VRRP syslog and SNMP trap, as currently configured \n         in the current_configuration block.')
agNewCfgSyslogTrapBgp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapBgp.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapBgp.setDescription('Enable or disable BGP syslog and SNMP trap, in the new_configuration \n         block.')
agCurCfgSyslogTrapBgp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapBgp.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapBgp.setDescription('Enable or disable BGP syslog and SNMP trap, as currently configured \n         in the current_configuration block.')
agNewCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapNtp.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapNtp.setDescription('Enable or disable NTP syslog and SNMP trap, in the new_configuration \n         block.')
agCurCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapNtp.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapNtp.setDescription('Enable or disable NTP syslog and SNMP trap, as currently configured \n         in the current_configuration block.')
agNewCfgSyslogTrapIsd = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapIsd.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapIsd.setDescription('Enable or disable ISD syslog and SNMP trap, in the new_configuration \n         block.')
agCurCfgSyslogTrapIsd = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapIsd.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapIsd.setDescription('Enable or disable ISD syslog and SNMP trap, as currently configured \n         in the current_configuration block.')
agNewCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapIp.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapIp.setDescription('Enable or disable IP related syslog and SNMP trap, in the \n         new_configuration block.')
agCurCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapIp.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapIp.setDescription('Enable or disable IP related syslog and SNMP trap, as currently \n         configured in the current_configuration block.')
agNewCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapWeb.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapWeb.setDescription('Enable or disable WEBUI related syslog and SNMP trap, in the \n         new_configuration block.')
agCurCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapWeb.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapWeb.setDescription('Enable or disable WEBUI related syslog and SNMP trap, as currently \n         configured in the current_configuration block.')
agNewCfgSyslogTrapSynAtk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSynAtk.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapSynAtk.setDescription('Enable or disable SYN attack detection related syslog and SNMP trap,\n         in the new_configuration block.')
agCurCfgSyslogTrapSynAtk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSynAtk.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapSynAtk.setDescription('Enable or disable SYN attack detection related syslog and SNMP trap,\n         as currently configured in the current_configuration block.')
agNewCfgSyslogTrapTcpLim = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapTcpLim.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogTrapTcpLim.setDescription('Enable or disable TCP rate limiting related syslog and SNMP trap, \n         in the new_configuration block.')
agCurCfgSyslogTrapTcpLim = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapTcpLim.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogTrapTcpLim.setDescription('Enable or disable TCP rate limiting related syslog and SNMP trap,\n         as currently configured in the current_configuration block.')
radCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPrimaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgPrimaryIpAddr.setDescription('The IP address of the Primary RADIUS server.')
radNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPrimaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgPrimaryIpAddr.setDescription('The IP address of the Primary RADIUS server.')
radCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecondaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgSecondaryIpAddr.setDescription('The IP address of the Secondary RADIUS server.')
radNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecondaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgSecondaryIpAddr.setDescription('The IP address of the Secondary RADIUS server.')
radCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPort.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgPort.setDescription('Specify the RADIUS port number.')
radNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPort.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgPort.setDescription('Speicfy the RADIUS port number.')
radCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgTimeout.setDescription('The maximum number of seconds before resending authentication\n         to RADIUS server.')
radNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgTimeout.setDescription('The maximum number of seconds before resending authentication\n         to RADIUS server.')
radCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgRetries.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgRetries.setDescription('Number of retries to the RADIUS server.')
radNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgRetries.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgRetries.setDescription('Number of retries to the RADIUS server.')
radCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgState.setDescription('Enable or disbale RADIUS authentication.')
radNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgState.setDescription('Enable or disable RADIUS authentication.')
radCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenString.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgAuthenString.setDescription('The RADIUS authentication string.')
radNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenString.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgAuthenString.setDescription('The RADIUS authentication string.')
radCurCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTelnet.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgTelnet.setDescription('Enable or disbale RADIUS backdoor for telnet.')
radNewCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTelnet.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgTelnet.setDescription('Enable or disable RADIUS backdoor for telnet.')
memStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsAllocs.setStatus('mandatory')
if mibBuilder.loadTexts: memStatsAllocs.setDescription('The total number of memory allocations.')
memStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsFrees.setStatus('mandatory')
if mibBuilder.loadTexts: memStatsFrees.setDescription('The total number of memory frees.')
memStatsAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsAllocFails.setStatus('mandatory')
if mibBuilder.loadTexts: memStatsAllocFails.setDescription('The total number of memory allocations failed.')
memStatsBytesCurr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsBytesCurr.setStatus('mandatory')
if mibBuilder.loadTexts: memStatsBytesCurr.setDescription('The outstanding memory in bytes have been allocated.')
memStatsBytesHiwat = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsBytesHiwat.setStatus('mandatory')
if mibBuilder.loadTexts: memStatsBytesHiwat.setDescription('Bytes allocated witch high water mark.')
memStatsPoolBytes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsPoolBytes.setStatus('mandatory')
if mibBuilder.loadTexts: memStatsPoolBytes.setDescription('The total bytes in the memory pool.')
memStatsLargest = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsLargest.setStatus('mandatory')
if mibBuilder.loadTexts: memStatsLargest.setDescription('The largest block has been allocated.')
pktStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocs.setStatus('mandatory')
if mibBuilder.loadTexts: pktStatsAllocs.setDescription('The total packets have been allocated.')
pktStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsFrees.setStatus('mandatory')
if mibBuilder.loadTexts: pktStatsFrees.setDescription('The total packets have been freed.')
pktStatsAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocFails.setStatus('mandatory')
if mibBuilder.loadTexts: pktStatsAllocFails.setDescription('The total packet allocations failed.')
pktStatsMediums = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediums.setStatus('mandatory')
if mibBuilder.loadTexts: pktStatsMediums.setDescription('The number of medium size packets have been allocated.')
pktStatsJumbos = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbos.setStatus('mandatory')
if mibBuilder.loadTexts: pktStatsJumbos.setDescription('The number of jumbo size packets have been allocated.')
pktStatsSmalls = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmalls.setStatus('mandatory')
if mibBuilder.loadTexts: pktStatsSmalls.setDescription('The number of small size packets have been allocated.')
mpCpuAStatsUtil1Second = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuAStatsUtil1Second.setStatus('mandatory')
if mibBuilder.loadTexts: mpCpuAStatsUtil1Second.setDescription('The utilization of MP CPU A over 1 second. It shows the percentage.')
mpCpuBStatsUtil1Second = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuBStatsUtil1Second.setStatus('mandatory')
if mibBuilder.loadTexts: mpCpuBStatsUtil1Second.setDescription('The utilization of MP CPU B over 4 seconds. \n\t It shows the percentage.')
mpCpuAStatsUtil4Seconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuAStatsUtil4Seconds.setStatus('mandatory')
if mibBuilder.loadTexts: mpCpuAStatsUtil4Seconds.setDescription('The utilization of MP CPU A over 4 seconds. \n\t It shows the percentage.')
mpCpuBStatsUtil4Seconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuBStatsUtil4Seconds.setStatus('mandatory')
if mibBuilder.loadTexts: mpCpuBStatsUtil4Seconds.setDescription('The utilization of MP CPU B over 4 seconds. \n\t It shows the percentage.')
mpCpuAStatsUtil64Seconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuAStatsUtil64Seconds.setStatus('mandatory')
if mibBuilder.loadTexts: mpCpuAStatsUtil64Seconds.setDescription('The utilization of MP CPU A over 64 seconds. \n\t It shows the percentage.')
mpCpuBStatsUtil64Seconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 16, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuBStatsUtil64Seconds.setStatus('mandatory')
if mibBuilder.loadTexts: mpCpuBStatsUtil64Seconds.setDescription('The utilization of MP CPU B over 64 second.\n\t It shows the percentage.')
mibBuilder.exportSymbols("ALTEON-TIGON-SWITCH-MIB", agNewCfgNTPService=agNewCfgNTPService, agReset=agReset, agRtcTime=agRtcTime, agConfigForNxtReset=agConfigForNxtReset, agEnabledBwmKey=agEnabledBwmKey, agNewCfgNTPResyncInterval=agNewCfgNTPResyncInterval, agCurCfgNTPDlight=agCurCfgNTPDlight, agCurCfgSyslogTrapStp=agCurCfgSyslogTrapStp, agCurCfgSyslogTrapIp=agCurCfgSyslogTrapIp, agApplyConfiguration=agApplyConfiguration, agNTP=agNTP, agCurCfgSyslogTrapGslb=agCurCfgSyslogTrapGslb, pktStatsSmalls=pktStatsSmalls, agNewCfgSmtpHost=agNewCfgSmtpHost, agLog=agLog, hwSensor3Temp=hwSensor3Temp, operCmds=operCmds, pktStatsAllocFails=pktStatsAllocFails, agCurCfgSyslogTrapBgp=agCurCfgSyslogTrapBgp, agEnabledRurlKey=agEnabledRurlKey, altswitchTraps=altswitchTraps, agCurCfgSyslogTrapSystem=agCurCfgSyslogTrapSystem, agCurCfgSyslogTrapMgmt=agCurCfgSyslogTrapMgmt, agNewCfgTrapHostIndx=agNewCfgTrapHostIndx, radNewCfgPrimaryIpAddr=radNewCfgPrimaryIpAddr, agSavePending=agSavePending, agCurCfgSyslogTrapWeb=agCurCfgSyslogTrapWeb, agCurCfgSyslog2Host=agCurCfgSyslog2Host, agCurCfgSyslogTrapSsh=agCurCfgSyslogTrapSsh, agImageForNxtReset=agImageForNxtReset, agCurCfgSyslogTrapCli=agCurCfgSyslogTrapCli, agNewCfgSyslogTrapVrrp=agNewCfgSyslogTrapVrrp, pktStatsJumbos=pktStatsJumbos, pktStatsFrees=pktStatsFrees, radCurCfgPort=radCurCfgPort, hwPowerSupplyStatus=hwPowerSupplyStatus, agGeneralConfig=agGeneralConfig, agNewCfgSyslogTrapTcpLim=agNewCfgSyslogTrapTcpLim, hwPartNumber=hwPartNumber, agEnabledGslbKey=agEnabledGslbKey, agTftpServerIpAddr=agTftpServerIpAddr, agCurCfgLoginBanner=agCurCfgLoginBanner, radCurCfgTelnet=radCurCfgTelnet, radNewCfgPort=radNewCfgPort, memStatsLargest=memStatsLargest, memStatsBytesCurr=memStatsBytesCurr, radCurCfgRetries=radCurCfgRetries, agCurCfgSyslogTrapConsole=agCurCfgSyslogTrapConsole, agNewCfgTrapHostTable=agNewCfgTrapHostTable, agNewCfgSyslogTrapBgp=agNewCfgSyslogTrapBgp, agCurCfgSmtpHost=agCurCfgSmtpHost, agCurCfgSyslogTrapFilter=agCurCfgSyslogTrapFilter, agSoftwareVersion=agSoftwareVersion, agCurCfgSyslogTrapSlb=agCurCfgSyslogTrapSlb, agCurCfgHttpServerPort=agCurCfgHttpServerPort, agNewCfgSyslogTrapCli=agNewCfgSyslogTrapCli, memStatsAllocFails=memStatsAllocFails, pktStatsAllocs=pktStatsAllocs, agNewCfgSyslog2Host=agNewCfgSyslog2Host, agImage1Ver=agImage1Ver, stats=stats, memStatsPoolBytes=memStatsPoolBytes, pktStats=pktStats, agTftpDumpFileName=agTftpDumpFileName, agCurCfgSyslogTrapSynAtk=agCurCfgSyslogTrapSynAtk, agent=agent, agNewCfgNTPTzone=agNewCfgNTPTzone, agTftpImage=agTftpImage, agTftpAction=agTftpAction, agNewCfgMgmtMask=agNewCfgMgmtMask, mpCpuAStatsUtil4Seconds=mpCpuAStatsUtil4Seconds, agClrSyslogMsgs=agClrSyslogMsgs, agCurCfgSyslogTrapVlan=agCurCfgSyslogTrapVlan, radNewCfgSecondaryIpAddr=radNewCfgSecondaryIpAddr, agNewCfgTrapHostIpAddr=agNewCfgTrapHostIpAddr, agCurCfgTrapHostIpAddr=agCurCfgTrapHostIpAddr, agNewCfgHttpServerPort=agNewCfgHttpServerPort, agCurCfgNTPResyncInterval=agCurCfgNTPResyncInterval, agRtcDate=agRtcDate, agNewCfgConsole=agNewCfgConsole, mpCpuAStatsUtil1Second=mpCpuAStatsUtil1Second, mpCpuBStatsUtil1Second=mpCpuBStatsUtil1Second, agCurCfgConsole=agCurCfgConsole, agNewCfgSyslogTrapFilter=agNewCfgSyslogTrapFilter, memStatsAllocs=memStatsAllocs, hwSensor4Temp=hwSensor4Temp, agTftpDownload=agTftpDownload, memStatsFrees=memStatsFrees, agNewCfgLoginBanner=agNewCfgLoginBanner, agNewCfgSyslogTrapStp=agNewCfgSyslogTrapStp, agTrapHostTableMaxEnt=agTrapHostTableMaxEnt, agCurCfgSpanningTree=agCurCfgSpanningTree, agNewCfgNTPServer=agNewCfgNTPServer, memStatsBytesHiwat=memStatsBytesHiwat, radius=radius, agNewCfgTrapHostEntry=agNewCfgTrapHostEntry, agCurCfgBootp=agCurCfgBootp, agCurCfgSyslog2Fac=agCurCfgSyslog2Fac, agNewCfgSyslogTrapSynAtk=agNewCfgSyslogTrapSynAtk, agNewCfgSyslogTrapSlb=agNewCfgSyslogTrapSlb, agCurCfgSyslogHost=agCurCfgSyslogHost, agRevert=agRevert, radCurCfgPrimaryIpAddr=radCurCfgPrimaryIpAddr, agCurCfgTrapHostIndx=agCurCfgTrapHostIndx, memStats=memStats, agCurCfgTrapHostEntry=agCurCfgTrapHostEntry, agCurCfgNTPServer=agCurCfgNTPServer, agNewCfgNTPDlight=agNewCfgNTPDlight, agTftpServer=agTftpServer, agNewCfgSyslogTrapWeb=agNewCfgSyslogTrapWeb, hwSensor2Temp=hwSensor2Temp, agCurCfgTrapHostTable=agCurCfgTrapHostTable, mpCpuAStatsUtil64Seconds=mpCpuAStatsUtil64Seconds, agCurCfgSyslogTrapIsd=agCurCfgSyslogTrapIsd, agSaveConfiguration=agSaveConfiguration, agTftpLastActionStatus=agTftpLastActionStatus, radCurCfgSecondaryIpAddr=radCurCfgSecondaryIpAddr, agNewCfgBootp=agNewCfgBootp, hwRedundantPSPresent=hwRedundantPSPresent, agCurCfgTrapHostCommString=agCurCfgTrapHostCommString, agNewCfgSyslogTrapIp=agNewCfgSyslogTrapIp, hwSensor1Temp=hwSensor1Temp, agCurCfgMgmtNetwork=agCurCfgMgmtNetwork, agCurCfgNTPService=agCurCfgNTPService, agNewCfgSyslogTrapSsh=agNewCfgSyslogTrapSsh, agNewCfgSyslogHost=agNewCfgSyslogHost, radNewCfgAuthenString=radNewCfgAuthenString, agNewCfgSyslogTrapGslb=agNewCfgSyslogTrapGslb, agEnabledSwFeatures=agEnabledSwFeatures, agNewCfgSyslogTrapNtp=agNewCfgSyslogTrapNtp, pktStatsMediums=pktStatsMediums, mpCpuBStatsUtil4Seconds=mpCpuBStatsUtil4Seconds, agRevertApply=agRevertApply, radCurCfgTimeout=radCurCfgTimeout, agCurCfgSyslogFac=agCurCfgSyslogFac, agBootVer=agBootVer, agSlotNumber=agSlotNumber, agNewCfgSyslog2Fac=agNewCfgSyslog2Fac, agNewCfgSyslogTrapMgmt=agNewCfgSyslogTrapMgmt, radCurCfgAuthenString=radCurCfgAuthenString, agCurCfgSyslogTrapVrrp=agCurCfgSyslogTrapVrrp, agNewCfgSyslogTrapIsd=agNewCfgSyslogTrapIsd, agLastSetErrorReason=agLastSetErrorReason, agNewCfgSyslogFac=agNewCfgSyslogFac, agGeneral=agGeneral, radCurCfgState=radCurCfgState, agNewCfgMgmtNetwork=agNewCfgMgmtNetwork, radNewCfgTelnet=radNewCfgTelnet, agNewCfgSpanningTree=agNewCfgSpanningTree, agCurCfgMgmtMask=agCurCfgMgmtMask, mpCpuStats=mpCpuStats, agNewCfgSyslogTrapSystem=agNewCfgSyslogTrapSystem, hardware=hardware, agCurCfgSyslogTrapTcpLim=agCurCfgSyslogTrapTcpLim, agTftpImageFileName=agTftpImageFileName, information=information, agNewCfgSyslogTrapConsole=agNewCfgSyslogTrapConsole, radNewCfgTimeout=radNewCfgTimeout, agImage2Ver=agImage2Ver, hwRevision=hwRevision, hwRedundantPSStatus=hwRedundantPSStatus, agNewCfgSyslogTrapVlan=agNewCfgSyslogTrapVlan, agApplyPending=agApplyPending, agNewCfgTrapHostCommString=agNewCfgTrapHostCommString, agCurCfgSyslogTrapNtp=agCurCfgSyslogTrapNtp, agTftpCfgFileName=agTftpCfgFileName, radNewCfgState=radNewCfgState, mpCpuBStatsUtil64Seconds=mpCpuBStatsUtil64Seconds, agCurCfgNTPTzone=agCurCfgNTPTzone, radNewCfgRetries=radNewCfgRetries)
