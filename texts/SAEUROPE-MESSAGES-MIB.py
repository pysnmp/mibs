#
# PySNMP MIB module SAEUROPE-MESSAGES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/saeurope/SAEUROPE-MESSAGES-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 16:05:28 2024
# On host fv-az1245-338 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
messagesMIBGroups, messages = mibBuilder.importSymbols("SAEUROPE-ROOT-MIB", "messagesMIBGroups", "messages")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Integer32, TimeTicks, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, Gauge32, ModuleIdentity, Counter64, iso, NotificationType, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "Gauge32", "ModuleIdentity", "Counter64", "iso", "NotificationType", "Bits", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
saEuropeMessages = ModuleIdentity((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1))
saEuropeMessages.setRevisions(('2015-11-10 13:00', '2005-09-07 09:00', '2002-11-30 14:00', '2002-07-01 17:30', '2002-06-21 13:30', '2001-08-31 13:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: saEuropeMessages.setRevisionsDescriptions(('Updated contact info.', 'V01.01.00\n         Added columns for physical entity, stream network port IP\n         address and stream UDP port. Elaborated comments.', 'V01.00.03       \n         Initial version of the SA Europe Messages MIB.\n         Changes to MIB name and OID names, contents of the MIB are \n         the same as BarcoNet Messages MIB V01.00.02.', 'V01.00.02       \n         msgNewestNumber added to messagesObjectGroup.\n         Small editorial changes.', 'V01.00.01       \n         messagesObjectGroup is chosen as mandatory group.', 'V01.00.00       \n         Initial version of the Messages MIB',))
if mibBuilder.loadTexts: saEuropeMessages.setLastUpdated('201511101300Z')
if mibBuilder.loadTexts: saEuropeMessages.setOrganization('Synamedia')
if mibBuilder.loadTexts: saEuropeMessages.setContactInfo('https://www.synamedia.com/video-professional-services/')
if mibBuilder.loadTexts: saEuropeMessages.setDescription('MIB for SA Europe Messages')
msgOldestNumber = MibScalar((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgOldestNumber.setStatus('current')
if mibBuilder.loadTexts: msgOldestNumber.setDescription('The oldest sequence number of the messages in the message buffer.')
msgNewestNumber = MibScalar((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgNewestNumber.setStatus('current')
if mibBuilder.loadTexts: msgNewestNumber.setDescription('The most recent sequence number of the messages in the message buffer.')
msgMaxSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgMaxSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: msgMaxSequenceNumber.setDescription('The largest sequence number that can be used for the messages in the\n         message buffer. After this the message numbers wrap around.')
messageTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4), )
if mibBuilder.loadTexts: messageTable.setStatus('current')
if mibBuilder.loadTexts: messageTable.setDescription('A list of message entries. ')
messageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1), ).setIndexNames((0, "SAEUROPE-MESSAGES-MIB", "msgSequenceNumber"))
if mibBuilder.loadTexts: messageEntry.setStatus('current')
if mibBuilder.loadTexts: messageEntry.setDescription('A message entry holding a message.')
msgSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: msgSequenceNumber.setDescription('The message sequence number is a unique number to identify the\n         message in a message buffer.')
msgId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgId.setStatus('current')
if mibBuilder.loadTexts: msgId.setDescription('This variable is a unique ID identifying the message. It may be\n         identical to the msgSequenceNumber, but does not have to.')
msgSourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgSourceName.setStatus('current')
if mibBuilder.loadTexts: msgSourceName.setDescription('Name of the device that generated the message.')
msgText = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgText.setStatus('current')
if mibBuilder.loadTexts: msgText.setDescription("Brief textual description of the type of message.\n         Example: 'Input Loss'.")
msgSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgSubject.setStatus('current')
if mibBuilder.loadTexts: msgSubject.setDescription("Textual description of the alarm subject.\n         Example: 'Quad Input Processor 2B'.")
msgGenerationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgGenerationTime.setStatus('current')
if mibBuilder.loadTexts: msgGenerationTime.setDescription('Message generation time, specified in the timezone configured on\n         the device that sends this message. DST (daylight savings time)\n         must be taken into account. Format: YYYY/MM/DD HH:MM:SS')
msgBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notPending", 0), ("clearedByUser", 1), ("clearedBySystem", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgBehaviour.setStatus('current')
if mibBuilder.loadTexts: msgBehaviour.setDescription('msgBehaviour defines whether an alarm status is associated with\n         the message being sent, and if so, whether the alarm status should\n         be reset by an operator (clearedbyUser) or by a subsequent message\n         (clearedBySystem).')
msgClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("communication", 0), ("quality", 1), ("processing", 2), ("equipment", 3), ("environmental", 4), ("indeterminate", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgClass.setStatus('current')
if mibBuilder.loadTexts: msgClass.setDescription('msgClass defines which aspect of the functionality of a device the\n         message pertains to.')
msgSubClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgSubClass.setStatus('current')
if mibBuilder.loadTexts: msgSubClass.setDescription('msgSubClass defines more in detail to which aspect of a device the\n         message relates. Examples:\n         \n          0 -- communication\n          1 -- internal clock of the device\n          2 -- scheduling\n          3 -- external devices\n          8 -- measurement results\n          9 -- periodically reported messages\n         10 -- result of device action\n         11 -- result of operator action\n         12 -- alarm correlation\n         24 -- software\n         25 -- hardware\n         32 -- software\n         33 -- hardware\n         34 -- IIC bus\n         35 -- hardware fault\n         36 -- device status')
msgSubClassNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgSubClassNbr.setStatus('current')
if mibBuilder.loadTexts: msgSubClassNbr.setDescription('msgSubClassNbr defines the message type, and is subordinate to\n         msgSubClass. Examples:                                            \n         \n         msgSubClass msgSubClassNbr Description\n               0           0        Communication -- test\n               0           1        Communication -- unit not responding\n               0          17        Communication -- scrambler channel error\n               1           0        Clock -- synchronization request\n               1           1        Clock -- failure\n               2           0        Scheduler -- started\n               2           1        Scheduler -- restarted\n               2           2        Scheduler -- stopped\n               \n         Please contact Synamedia for the complete list.')
msgDetailPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgDetailPresent.setStatus('current')
if mibBuilder.loadTexts: msgDetailPresent.setDescription('Indicates whether msgDetail should be interpreted or not. The bit\n         pattern 00000000 means that msgDetail should be ignored, and the\n         bit pattern 00000001 means that msgDetail contains meaningful\n         information.')
msgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("open", 0), ("closed", 1), ("openMinorUpper", 2), ("openMinorLower", 3), ("openMajorUpper", 4), ("openMajorLower", 5), ("closedMinorUpper", 6), ("closedMinorLower", 7), ("closedMajorUpper", 8), ("closedMajorLower", 9), ("notDefined", 10), ("notValid", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgStatus.setStatus('current')
if mibBuilder.loadTexts: msgStatus.setDescription('Defines the action on the pending status associated with the\n         message being sent.')
msgSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("indeterminate", 0), ("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("cleared", 5), ("information", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgSeverity.setStatus('current')
if mibBuilder.loadTexts: msgSeverity.setDescription('Message severity.')
msgDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(320, 320)).setFixedLength(320)).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgDetail.setStatus('current')
if mibBuilder.loadTexts: msgDetail.setDescription('Message detail. Values of parameters that help explaining the\n         message being sent can be specified in this text string.')
msgPhysicalEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2, 1, 4, 1, 15), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgPhysicalEntity.setStatus('current')
if mibBuilder.loadTexts: msgPhysicalEntity.setDescription('Physical entity this message is related to. This can be a board in\n         the device, a port on a board in the device, a temperature sensor\n         in the device, ... The object identifier refers to a row in the\n         entPhysicalTable of the ENTITY-MIB.')
messagesModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1482, 1, 1, 2, 1)).setObjects(("SAEUROPE-MESSAGES-MIB", "messagesObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    messagesModuleCompliance = messagesModuleCompliance.setStatus('current')
if mibBuilder.loadTexts: messagesModuleCompliance.setDescription('The compliance statement for entities which\n         implement the SA Europe Messages MIB')
messagesObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1482, 1, 1, 2, 2)).setObjects(("SAEUROPE-MESSAGES-MIB", "msgOldestNumber"), ("SAEUROPE-MESSAGES-MIB", "msgNewestNumber"), ("SAEUROPE-MESSAGES-MIB", "msgSourceName"), ("SAEUROPE-MESSAGES-MIB", "msgMaxSequenceNumber"), ("SAEUROPE-MESSAGES-MIB", "msgId"), ("SAEUROPE-MESSAGES-MIB", "msgSourceName"), ("SAEUROPE-MESSAGES-MIB", "msgText"), ("SAEUROPE-MESSAGES-MIB", "msgSubject"), ("SAEUROPE-MESSAGES-MIB", "msgGenerationTime"), ("SAEUROPE-MESSAGES-MIB", "msgBehaviour"), ("SAEUROPE-MESSAGES-MIB", "msgClass"), ("SAEUROPE-MESSAGES-MIB", "msgSubClass"), ("SAEUROPE-MESSAGES-MIB", "msgSubClassNbr"), ("SAEUROPE-MESSAGES-MIB", "msgDetailPresent"), ("SAEUROPE-MESSAGES-MIB", "msgStatus"), ("SAEUROPE-MESSAGES-MIB", "msgSeverity"), ("SAEUROPE-MESSAGES-MIB", "msgSequenceNumber"), ("SAEUROPE-MESSAGES-MIB", "msgDetail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    messagesObjectGroup = messagesObjectGroup.setStatus('current')
if mibBuilder.loadTexts: messagesObjectGroup.setDescription('Mandatory objects for all devices implementing the\n         SA Europe messages MIB.')
msgPhysicalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1482, 1, 1, 2, 3)).setObjects(("SAEUROPE-MESSAGES-MIB", "msgPhysicalEntity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    msgPhysicalGroup = msgPhysicalGroup.setStatus('current')
if mibBuilder.loadTexts: msgPhysicalGroup.setDescription('Objects related to physical entities.')
mibBuilder.exportSymbols("SAEUROPE-MESSAGES-MIB", messageEntry=messageEntry, msgMaxSequenceNumber=msgMaxSequenceNumber, msgNewestNumber=msgNewestNumber, msgGenerationTime=msgGenerationTime, msgPhysicalGroup=msgPhysicalGroup, msgSubClass=msgSubClass, saEuropeMessages=saEuropeMessages, msgId=msgId, msgPhysicalEntity=msgPhysicalEntity, msgSourceName=msgSourceName, msgStatus=msgStatus, msgSeverity=msgSeverity, msgOldestNumber=msgOldestNumber, msgSubject=msgSubject, msgBehaviour=msgBehaviour, messagesObjectGroup=messagesObjectGroup, msgSequenceNumber=msgSequenceNumber, messageTable=messageTable, msgDetail=msgDetail, msgText=msgText, msgDetailPresent=msgDetailPresent, msgSubClassNbr=msgSubClassNbr, messagesModuleCompliance=messagesModuleCompliance, msgClass=msgClass, PYSNMP_MODULE_ID=saEuropeMessages)
