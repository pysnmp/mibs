#
# PySNMP MIB module RS-XX9-DVBT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-DVBT-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 16:02:52 2024
# On host fv-az1205-935 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
commonNotificationAlarmClass, = mibBuilder.importSymbols("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass")
rsXx9MibModule, rsXx9DvbT = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9MibModule", "rsXx9DvbT")
NotificationState, SwitchOnOff, IndexAB, IndexTransmitter, NotificationMask, NotificationPriority = mibBuilder.importSymbols("RS-XX9-TC-MIB", "NotificationState", "SwitchOnOff", "IndexAB", "IndexTransmitter", "NotificationMask", "NotificationPriority")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, Counter64, Counter32, ModuleIdentity, MibIdentifier, Gauge32, Bits, IpAddress, NotificationType, Unsigned32, ObjectIdentity, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "Counter32", "ModuleIdentity", "MibIdentifier", "Gauge32", "Bits", "IpAddress", "NotificationType", "Unsigned32", "ObjectIdentity", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
rsXx9DvbtMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 6))
rsXx9DvbtMibModule.setRevisions(('2014-12-22 16:00', '2014-02-05 16:00', '2012-02-23 08:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsXx9DvbtMibModule.setRevisionsDescriptions(('updated description texts\n                ', 'initial release.\n                update description texts', 'Preliminary version.',))
if mibBuilder.loadTexts: rsXx9DvbtMibModule.setLastUpdated('201412221600Z')
if mibBuilder.loadTexts: rsXx9DvbtMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
if mibBuilder.loadTexts: rsXx9DvbtMibModule.setContactInfo('Rohde & Schwarz GmbH & Co. KG\n                Broadcasting Division\n                \n                Muehldorfstrasse 15\n                81671 Munich\n                Germany\n                \n                customersupport@rohde-schwarz.com')
if mibBuilder.loadTexts: rsXx9DvbtMibModule.setDescription('This MIB defines DVB-T specific objects\n                of XX9000 transmitting systems from Rohde & Schwarz.\n                \n                The following MIBs are related to this:\n                - RS-COMMON-MIB         - mandatory for this MIB\n                - RS-XX9-SMI-MIB        - mandatory for this MIB\n                - RS-XX9-TC-MIB         - mandatory for this MIB\n                - RS-XX9-COMMON-MIB     - mandatory for this MIB')
class DvbtChannelBandwidth(TextualConvention, Integer32):
    description = 'mhz5(4)   -  5 MHz\n                mhz6(5)   -  6 MHz\n                mhz7(6)   -  7 MHz\n                mhz8(7)   -  8 MHz'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 1), ("mhz5", 4), ("mhz6", 5), ("mhz7", 6), ("mhz8", 7))

class DvbtFftSize(TextualConvention, Integer32):
    description = 'FFT size:\n                k2(3) - the OFDM signal is modulated on 1705 sub-carriers\n                k8(4) - 6817 subcarriers are used\n                \n                k4(4) - only for DVB-H'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))
    namedValues = NamedValues(("undefined", 1), ("k2", 3), ("k4", 4), ("k8", 5))

class DvbtGuardInterval(TextualConvention, Integer32):
    description = 'Guard interval.\n                oneDiv32(2)       -> 1/32\n                oneDiv16(3)       -> 1/16\n                oneDiv8(4)        -> 1/8\n                oneDiv4(5)        -> 1/4'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 1), ("oneDiv32", 2), ("oneDiv16", 3), ("oneDiv8", 4), ("oneDiv4", 5))

class DvbtModulation(TextualConvention, Integer32):
    description = 'qpsk(4)  - is very fail safe but only allows low data rate.\n                qam64(6) - 64 QAM can transport a huge amount of data in good\n                           radio reception environments'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))
    namedValues = NamedValues(("undefined", 1), ("qpsk", 4), ("qam16", 5), ("qam64", 6))

class DvbtCodeRate(TextualConvention, Integer32):
    description = 'The code rate sets the ratio between payload and\n                error correction information.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 7, 8))
    namedValues = NamedValues(("undefined", 1), ("oneHalf", 2), ("twoThird", 4), ("threeFourth", 5), ("fiveSixth", 7), ("sevenEighth", 8))

class DvbtInterleave(TextualConvention, Integer32):
    description = 'Process according to which the bit interleaver interleaves its data.\n                Meaningful only for DVBT-H.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("nat", 1), ("inDepth", 2))

rsXx9DvbtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 0))
dvbtEncoderSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT-MIB", "dvbtStatusNotificationPriority"), ("RS-XX9-DVBT-MIB", "dvbtStatusNotificationState"))
if mibBuilder.loadTexts: dvbtEncoderSummary.setStatus('current')
if mibBuilder.loadTexts: dvbtEncoderSummary.setDescription('Encoder summary state.\n                \n                Possible values:\n                off(2)\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: fault')
dvbtTest = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT-MIB", "dvbtStatusNotificationPriority"), ("RS-XX9-DVBT-MIB", "dvbtStatusNotificationState"))
if mibBuilder.loadTexts: dvbtTest.setStatus('current')
if mibBuilder.loadTexts: dvbtTest.setDescription('One of the test signals is activated. \n                If a test signal is activated, decoding \n                of the transmitted signal by the \n                transmitter will not be possible.\n                \n                Possible values:\n                off(2)     - no test signal generation\n                warning(4) - test signal generation is activated\n                \n                Notification class: warning')
rsXx9DvbtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1))
dvbtStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1))
dvbtStatusNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1, 1), )
if mibBuilder.loadTexts: dvbtStatusNotificationTable.setStatus('current')
if mibBuilder.loadTexts: dvbtStatusNotificationTable.setDescription('The context information/configuration for the\n                DVB-T status notifications.')
dvbtStatusNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-DVBT-MIB", "dvbtStatusNotificationTxIdx"), (0, "RS-XX9-DVBT-MIB", "dvbtStatusNotificationExcIdx"), (0, "RS-XX9-DVBT-MIB", "dvbtStatusNotificationIdx"))
if mibBuilder.loadTexts: dvbtStatusNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: dvbtStatusNotificationEntry.setDescription('An entry in the dvbtStatusNotificationTable.')
dvbtStatusNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: dvbtStatusNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: dvbtStatusNotificationTxIdx.setDescription('The transmitter index.')
dvbtStatusNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: dvbtStatusNotificationExcIdx.setStatus('current')
if mibBuilder.loadTexts: dvbtStatusNotificationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
dvbtStatusNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: dvbtStatusNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: dvbtStatusNotificationIdx.setDescription('The notification number as below rsXx9DvbtNotifications.\n                This is a helper column and therefore not-accessible.')
dvbtStatusNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dvbtEncoderSummary", 1), ("dvbtTest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtStatusNotificationName.setStatus('current')
if mibBuilder.loadTexts: dvbtStatusNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9DvbtNotifications.')
dvbtStatusNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtStatusNotificationMask.setStatus('current')
if mibBuilder.loadTexts: dvbtStatusNotificationMask.setDescription('See textual convention for details.')
dvbtStatusNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtStatusNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: dvbtStatusNotificationPriority.setDescription('See textual convention for details.')
dvbtStatusNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbtStatusNotificationState.setStatus('current')
if mibBuilder.loadTexts: dvbtStatusNotificationState.setDescription('See textual convention for details.')
dvbtStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1, 2), )
if mibBuilder.loadTexts: dvbtStateTable.setStatus('current')
if mibBuilder.loadTexts: dvbtStateTable.setDescription('DVB-T state values.')
dvbtStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1, 2, 1), ).setIndexNames((0, "RS-XX9-DVBT-MIB", "dvbtStatusNotificationTxIdx"), (0, "RS-XX9-DVBT-MIB", "dvbtStatusNotificationExcIdx"))
if mibBuilder.loadTexts: dvbtStateEntry.setStatus('current')
if mibBuilder.loadTexts: dvbtStateEntry.setDescription('An entry in the dvbtStateTable.')
dvbtStTxFrequencyOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1, 2, 1, 1), Integer32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbtStTxFrequencyOffset.setStatus('current')
if mibBuilder.loadTexts: dvbtStTxFrequencyOffset.setDescription('Number of Hertz by which this transmitter is to \n                shift its transmission frequency relative to other \n                transmitters of the DVB-T network.\n                This value is configured via the MIP (megaframe initialization packet).')
dvbtStTxDelayOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1, 2, 1, 2), Integer32()).setUnits('1/10 micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbtStTxDelayOffset.setStatus('current')
if mibBuilder.loadTexts: dvbtStTxDelayOffset.setDescription('Time by which this transmitter is to shift \n                the time of transmission of its signal relative \n                to other transmitters of the DVB-T network.\n                This value is configured via the MIP (megaframe initialization packet).')
dvbtStCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("ok", 2), ("notPresent", 3), ("txControlDisabled", 4), ("txAddressFail", 5), ("mipFail", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbtStCellId.setStatus('current')
if mibBuilder.loadTexts: dvbtStCellId.setDescription('shows if a Cell ID has been found in the \n                transport stream, which matches the \n                configured transmitter ID.')
dvbtSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2))
dvbtConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 1), )
if mibBuilder.loadTexts: dvbtConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: dvbtConfigurationTable.setDescription('General DVB-T configuration.')
dvbtConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 1, 1), ).setIndexNames((0, "RS-XX9-DVBT-MIB", "dvbtConfigurationTxIdx"), (0, "RS-XX9-DVBT-MIB", "dvbtConfigurationExcIdx"))
if mibBuilder.loadTexts: dvbtConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: dvbtConfigurationEntry.setDescription('An entry in the dvbtConfigurationTable.')
dvbtConfigurationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: dvbtConfigurationTxIdx.setStatus('current')
if mibBuilder.loadTexts: dvbtConfigurationTxIdx.setDescription('The transmitter index.')
dvbtConfigurationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: dvbtConfigurationExcIdx.setStatus('current')
if mibBuilder.loadTexts: dvbtConfigurationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
dvbtConfigurationModulationSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("mip", 2), ("manual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtConfigurationModulationSource.setStatus('current')
if mibBuilder.loadTexts: dvbtConfigurationModulationSource.setDescription('The source for the TPS (transmission parameter signaling) \n                parameters is configured here. \n                Possible sources are the MIP (megaframe initialization packet) \n                or manually selected default settings.\n                ')
dvbtConfigurationDigitalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("dvbT", 2), ("dvbH", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtConfigurationDigitalMode.setStatus('current')
if mibBuilder.loadTexts: dvbtConfigurationDigitalMode.setDescription('Selection of digital TV standard.')
dvbtLocalizationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 2), )
if mibBuilder.loadTexts: dvbtLocalizationTable.setStatus('current')
if mibBuilder.loadTexts: dvbtLocalizationTable.setDescription('DVB-T localization parameters.')
dvbtLocalizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 2, 1), )
dvbtConfigurationEntry.registerAugmentions(("RS-XX9-DVBT-MIB", "dvbtLocalizationEntry"))
dvbtLocalizationEntry.setIndexNames(*dvbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbtLocalizationEntry.setStatus('current')
if mibBuilder.loadTexts: dvbtLocalizationEntry.setDescription('An entry in the dvbtLocalizationTable.')
dvbtLocalizationTxControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtLocalizationTxControl.setStatus('current')
if mibBuilder.loadTexts: dvbtLocalizationTxControl.setDescription('If set to on(2) and if dvbtLocalizationTxAddress is valid,\n                the Cell ID, the frequency offset, and the delay offset from the \n                MIP (megaframe initialization packet) are applied.\n                ')
dvbtLocalizationTxAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtLocalizationTxAddress.setStatus('current')
if mibBuilder.loadTexts: dvbtLocalizationTxAddress.setDescription('Transmitter address.\n                Setting the transmitter address is a precondition to reading \n                Tx information (transmitter-specific settings) from the MIP \n                (Megaframe Initialization Packet). However, the information \n                is used only if dvbtLocalizationTxControl is enabled.')
dvbtLocalizationCellIdSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("mip", 2), ("manual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtLocalizationCellIdSource.setStatus('current')
if mibBuilder.loadTexts: dvbtLocalizationCellIdSource.setDescription('Selects the data source of the Cell ID. The signaling of the Cell ID can be switched off here.')
dvbtLocalizationCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtLocalizationCellId.setStatus('current')
if mibBuilder.loadTexts: dvbtLocalizationCellId.setDescription('Defines what Cell ID this transmitter should use according \n                to Individual Addressing information. \n                This value can be applied from the MIP (when dvbtLocalizationCellIdSource is set to mip(2)).\n                However, the Cell ID can also be configured here \n                manually if necessary (dvbtLocalizationCellIdSource set to manual(3)).\n                ')
dvbtModulationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 3), )
if mibBuilder.loadTexts: dvbtModulationTable.setStatus('current')
if mibBuilder.loadTexts: dvbtModulationTable.setDescription('DVB-T modulation parameters.')
dvbtModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 3, 1), )
dvbtConfigurationEntry.registerAugmentions(("RS-XX9-DVBT-MIB", "dvbtModulationEntry"))
dvbtModulationEntry.setIndexNames(*dvbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbtModulationEntry.setStatus('current')
if mibBuilder.loadTexts: dvbtModulationEntry.setDescription('An entry in the dvbtModulationTable.')
dvbtModulationChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 3, 1, 3), DvbtChannelBandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtModulationChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: dvbtModulationChannelBandwidth.setDescription('Channel bandwidth occupied by the DVB-T signal in the \n                frequency spectrum. You can configure 5, 6, 7, or 8 MHz. \n                The choice depends on the required bandwidth of the \n                channel to be transmitted. \n                ')
dvbtModulationFftMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 3, 1, 4), DvbtFftSize()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtModulationFftMode.setStatus('current')
if mibBuilder.loadTexts: dvbtModulationFftMode.setDescription('The FFT length corresponds to the number of carriers used. \n                The setting depends on the customized decision concerning \n                your DVB network.The OFDM signal is modeled at 2K on 1705 carriers \n                and at 8K on 6817 carriers. \n                The setting of 4K can be selected only for DVB-H.\n                ')
dvbtModulationGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 3, 1, 5), DvbtGuardInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtModulationGuardInterval.setStatus('current')
if mibBuilder.loadTexts: dvbtModulationGuardInterval.setDescription('The Guard Interval determines the time span between \n                signals for multicarrier modulation, in which no information \n                is transmitted. The larger the time span is, the lower the \n                risk of interference and the lower the data transfer rate. \n                The setting values are a fraction of the symbol period. \n                Ideally, you select a value that is larger than the longest \n                echo travel time of the system. \n                Possible setting values are: \n                1/32, 1/16, 1/8, 1/4, \n                whereby the risk of interference is greatest at 1/32, \n                but the data transfer rate, in turn, is highest.\n                ')
dvbtModulationConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 3, 1, 6), DvbtModulation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtModulationConstellation.setStatus('current')
if mibBuilder.loadTexts: dvbtModulationConstellation.setDescription('Sets up the modulation mode.\n                QPSK is very fail-safe, but has only a small data rate. \n                64 QAM can transmit very large data rates if you expect few faults on the transmission link. \n                16 QAM is a compromise between the two other setting values.')
dvbtModulationCodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 3, 1, 7), DvbtCodeRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtModulationCodeRate.setStatus('current')
if mibBuilder.loadTexts: dvbtModulationCodeRate.setDescription('With the code rate you can configure the relationship \n                between user data and (error correction values+user data). \n                Possible values are 1/2, 2/3, 3/4, 5/6, 7/8. \n                The greatest error correction and the lowest data transfer rate are enabled by 1/2, \n                and the lowest error correction and greatest data transfer rate are enabled by 7/8.\n                ')
dvbtModulationMpeFEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 3, 1, 8), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtModulationMpeFEC.setStatus('current')
if mibBuilder.loadTexts: dvbtModulationMpeFEC.setDescription('Switches the forward error correction on or off.\n                This parameter is operative for DVB-H only.\n                ')
dvbtModulationTimeSlicing = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 3, 1, 9), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtModulationTimeSlicing.setStatus('current')
if mibBuilder.loadTexts: dvbtModulationTimeSlicing.setDescription('The transmission of the payload in time slices is activated by this.\n                It enables energy-efficient operation of the receivers,\n                since these can disable their input stages during pauses in transmission.\n                This parameter is operative for DVB-H only.\n                ')
dvbtModulationInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 3, 1, 10), DvbtInterleave()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtModulationInterleave.setStatus('current')
if mibBuilder.loadTexts: dvbtModulationInterleave.setDescription('Process according to which the bit interleaver interleaves its data. \n                This parameter is operative only for DVB-H.\n                ')
dvbtTestTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 4), )
if mibBuilder.loadTexts: dvbtTestTable.setStatus('current')
if mibBuilder.loadTexts: dvbtTestTable.setDescription('Configures the test mode of the exciter.')
dvbtTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 4, 1), )
dvbtConfigurationEntry.registerAugmentions(("RS-XX9-DVBT-MIB", "dvbtTestEntry"))
dvbtTestEntry.setIndexNames(*dvbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbtTestEntry.setStatus('current')
if mibBuilder.loadTexts: dvbtTestEntry.setDescription('An entry in the dvbtTestTable.')
dvbtTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("off", 1), ("prbs", 2), ("singleCarrier", 3), ("mute1P1SymOfSuperFrame", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtTestMode.setStatus('current')
if mibBuilder.loadTexts: dvbtTestMode.setDescription('Which test signal is to be generated.\n                \n                off(1)  -  switches off test signal generation.\n                prbs(2)  -  Generates a pseudo-random binary sequence insted of the payload. \n                singleCarrier(3) - Generates an unmodulated single carrier. \n                    This test signal can be used to measure the phase noise of the synthesizer. \n                mute1SymOfMegaFrame(6)  -  Suppresses the first symbol of each T2 frame. \n                    This function can be used to measure the time of signal transmission. \n                \n                The phase noise must be measured via the RF Monitor Out connector (X61). \n                The cable connected to RF Out (X60) must be removed. \n                In order to protect the amplifiers, this test signal is only generated if the output of the exciter is open.\n                ')
dvbtOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 3))
dvbtOutLocalizationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 3, 2), )
if mibBuilder.loadTexts: dvbtOutLocalizationTable.setStatus('current')
if mibBuilder.loadTexts: dvbtOutLocalizationTable.setDescription('Currently active DVB-T localization parameters.')
dvbtOutLocalizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 3, 2, 1), )
dvbtConfigurationEntry.registerAugmentions(("RS-XX9-DVBT-MIB", "dvbtOutLocalizationEntry"))
dvbtOutLocalizationEntry.setIndexNames(*dvbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbtOutLocalizationEntry.setStatus('current')
if mibBuilder.loadTexts: dvbtOutLocalizationEntry.setDescription('An entry in the dvbtOutLocalizationTable.')
dvbtOutLocalizationCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbtOutLocalizationCellId.setStatus('current')
if mibBuilder.loadTexts: dvbtOutLocalizationCellId.setDescription('The currently used cell ID.\n                ')
dvbtOutModulationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 3, 3), )
if mibBuilder.loadTexts: dvbtOutModulationTable.setStatus('current')
if mibBuilder.loadTexts: dvbtOutModulationTable.setDescription('Currently active DVB-T modulation parameters.')
dvbtOutModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 3, 3, 1), )
dvbtConfigurationEntry.registerAugmentions(("RS-XX9-DVBT-MIB", "dvbtOutModulationEntry"))
dvbtOutModulationEntry.setIndexNames(*dvbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbtOutModulationEntry.setStatus('current')
if mibBuilder.loadTexts: dvbtOutModulationEntry.setDescription('An entry in the dvbtOutModulationTable.')
dvbtOutModulationChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 3, 3, 1, 3), DvbtChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbtOutModulationChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: dvbtOutModulationChannelBandwidth.setDescription('Channel bandwidth occupied by the DVB-T signal in the \n                frequency spectrum. You can configure 5, 6, 7, or 8 MHz. \n                The choice depends on the required bandwidth of the \n                channel to be transmitted. \n                ')
dvbtOutModulationFftMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 3, 3, 1, 4), DvbtFftSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbtOutModulationFftMode.setStatus('current')
if mibBuilder.loadTexts: dvbtOutModulationFftMode.setDescription('The amount of used subcarriers. \n                The FFT length corresponds to the number of carriers used. \n                The setting depends on the customized decision concerning \n                your DVB network.The OFDM signal is modeled at 2K on 1705 carriers \n                and at 8K on 6817 carriers. \n                The setting of 4K can be selected only for DVB-H.\n                ')
dvbtOutModulationGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 3, 3, 1, 5), DvbtGuardInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbtOutModulationGuardInterval.setStatus('current')
if mibBuilder.loadTexts: dvbtOutModulationGuardInterval.setDescription('The time where no information is sent in relation to the\n                bit on air time. This value affects the error correction\n                in multipath receiving situations. A long Guard Interval\n                reduces the amount of payload data.\n                \n                The time span between signals for multicarrier modulation, \n                in which no information is transmitted. The larger the time \n                span is, the lower the risk of interference and the lower the \n                data transfer rate. The setting values are a fraction of the \n                symbol period. Ideally, you select a value that is larger than \n                the longest echo travel time of the system. \n                Possible setting values are: \n                1/32, 1/16, 1/8, 1/4, \n                whereby the risk of interference is greatest at 1/32, \n                but the data transfer rate, in turn, is highest.\n                ')
dvbtOutModulationConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 3, 3, 1, 6), DvbtModulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbtOutModulationConstellation.setStatus('current')
if mibBuilder.loadTexts: dvbtOutModulationConstellation.setDescription('Shows the modulation mode.\n                QPSK is very fail-safe, but has only a small data rate. \n                64 QAM can transmit very large data rates if you expect few faults on the transmission link. \n                16 QAM is a compromise between the two other setting values.')
dvbtOutModulationCodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 3, 3, 1, 7), DvbtCodeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbtOutModulationCodeRate.setStatus('current')
if mibBuilder.loadTexts: dvbtOutModulationCodeRate.setDescription('With the code rate you can configure the relationship \n                between user data and (error correction values+user data). \n                Possible values are 1/2, 2/3, 3/4, 5/6, 7/8. \n                The greatest error correction and the lowest data transfer rate are enabled by 1/2, \n                and the lowest error correction and greatest data transfer rate are enabled by 7/8.\n                ')
dvbtOutModulationMpeFEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 3, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbtOutModulationMpeFEC.setStatus('current')
if mibBuilder.loadTexts: dvbtOutModulationMpeFEC.setDescription('Shows whether the forward error correction is on or off.\n                This parameter is meaningful for DVB-H only.\n                ')
dvbtOutModulationTimeSlicing = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 3, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbtOutModulationTimeSlicing.setStatus('current')
if mibBuilder.loadTexts: dvbtOutModulationTimeSlicing.setDescription('Shows the activation of the transmission of the payload in time slices.\n                It enables energy-efficient operation of the receivers,\n                since these can disable their input stages during pauses in transmission.\n                This parameter is meaningful for DVB-H only.\n                ')
dvbtOutModulationInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 1, 3, 3, 1, 10), DvbtInterleave()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbtOutModulationInterleave.setStatus('current')
if mibBuilder.loadTexts: dvbtOutModulationInterleave.setDescription('Process according to which the bit interleaver interleaves its data. \n                This parameter is meaningful for DVB-H only.\n                ')
rsXx9DvbtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 2))
rsXx9DvbtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 2, 1))
dvbtBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 2, 1, 1)).setObjects(("RS-XX9-DVBT-MIB", "dvbtObjBasic"), ("RS-XX9-DVBT-MIB", "dvbtNotifyBasic"), ("RS-XX9-DVBT-MIB", "dvbtObjDvbH"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dvbtBasicCompliance = dvbtBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: dvbtBasicCompliance.setDescription('The compliance statement for XX9000 DVB-T encoding.')
rsXx9DvbtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 2, 2))
dvbtObjBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 2, 2, 1)).setObjects(("RS-XX9-DVBT-MIB", "dvbtStatusNotificationName"), ("RS-XX9-DVBT-MIB", "dvbtStatusNotificationMask"), ("RS-XX9-DVBT-MIB", "dvbtStatusNotificationPriority"), ("RS-XX9-DVBT-MIB", "dvbtStatusNotificationState"), ("RS-XX9-DVBT-MIB", "dvbtConfigurationModulationSource"), ("RS-XX9-DVBT-MIB", "dvbtModulationChannelBandwidth"), ("RS-XX9-DVBT-MIB", "dvbtModulationFftMode"), ("RS-XX9-DVBT-MIB", "dvbtModulationGuardInterval"), ("RS-XX9-DVBT-MIB", "dvbtModulationConstellation"), ("RS-XX9-DVBT-MIB", "dvbtModulationCodeRate"), ("RS-XX9-DVBT-MIB", "dvbtLocalizationCellId"), ("RS-XX9-DVBT-MIB", "dvbtLocalizationCellIdSource"), ("RS-XX9-DVBT-MIB", "dvbtLocalizationTxAddress"), ("RS-XX9-DVBT-MIB", "dvbtLocalizationTxControl"), ("RS-XX9-DVBT-MIB", "dvbtOutModulationCodeRate"), ("RS-XX9-DVBT-MIB", "dvbtOutModulationConstellation"), ("RS-XX9-DVBT-MIB", "dvbtOutModulationGuardInterval"), ("RS-XX9-DVBT-MIB", "dvbtOutModulationFftMode"), ("RS-XX9-DVBT-MIB", "dvbtOutModulationChannelBandwidth"), ("RS-XX9-DVBT-MIB", "dvbtOutLocalizationCellId"), ("RS-XX9-DVBT-MIB", "dvbtConfigurationDigitalMode"), ("RS-XX9-DVBT-MIB", "dvbtTestMode"), ("RS-XX9-DVBT-MIB", "dvbtStCellId"), ("RS-XX9-DVBT-MIB", "dvbtStTxDelayOffset"), ("RS-XX9-DVBT-MIB", "dvbtStTxFrequencyOffset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dvbtObjBasic = dvbtObjBasic.setStatus('current')
if mibBuilder.loadTexts: dvbtObjBasic.setDescription('General DVB-T objects.')
dvbtNotifyBasic = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 2, 2, 101)).setObjects(("RS-XX9-DVBT-MIB", "dvbtEncoderSummary"), ("RS-XX9-DVBT-MIB", "dvbtTest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dvbtNotifyBasic = dvbtNotifyBasic.setStatus('current')
if mibBuilder.loadTexts: dvbtNotifyBasic.setDescription('General DVB-T notifications.')
dvbtObjDvbH = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6, 2, 2, 102)).setObjects(("RS-XX9-DVBT-MIB", "dvbtModulationMpeFEC"), ("RS-XX9-DVBT-MIB", "dvbtModulationTimeSlicing"), ("RS-XX9-DVBT-MIB", "dvbtModulationInterleave"), ("RS-XX9-DVBT-MIB", "dvbtOutModulationMpeFEC"), ("RS-XX9-DVBT-MIB", "dvbtOutModulationTimeSlicing"), ("RS-XX9-DVBT-MIB", "dvbtOutModulationInterleave"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dvbtObjDvbH = dvbtObjDvbH.setStatus('current')
if mibBuilder.loadTexts: dvbtObjDvbH.setDescription('Additional objects for DVB-H.')
mibBuilder.exportSymbols("RS-XX9-DVBT-MIB", dvbtModulationGuardInterval=dvbtModulationGuardInterval, dvbtTestEntry=dvbtTestEntry, dvbtStCellId=dvbtStCellId, dvbtConfigurationDigitalMode=dvbtConfigurationDigitalMode, dvbtStatusNotificationName=dvbtStatusNotificationName, dvbtTestTable=dvbtTestTable, dvbtStatusNotificationTxIdx=dvbtStatusNotificationTxIdx, dvbtOutModulationFftMode=dvbtOutModulationFftMode, dvbtOutModulationCodeRate=dvbtOutModulationCodeRate, dvbtModulationEntry=dvbtModulationEntry, dvbtOutModulationChannelBandwidth=dvbtOutModulationChannelBandwidth, dvbtOutLocalizationEntry=dvbtOutLocalizationEntry, DvbtModulation=DvbtModulation, dvbtModulationFftMode=dvbtModulationFftMode, DvbtFftSize=DvbtFftSize, rsXx9DvbtCompliances=rsXx9DvbtCompliances, dvbtLocalizationCellIdSource=dvbtLocalizationCellIdSource, dvbtOutLocalizationCellId=dvbtOutLocalizationCellId, DvbtChannelBandwidth=DvbtChannelBandwidth, dvbtSetup=dvbtSetup, dvbtModulationTable=dvbtModulationTable, rsXx9DvbtNotifications=rsXx9DvbtNotifications, dvbtStatusNotificationIdx=dvbtStatusNotificationIdx, dvbtBasicCompliance=dvbtBasicCompliance, dvbtLocalizationTxAddress=dvbtLocalizationTxAddress, dvbtOutModulationInterleave=dvbtOutModulationInterleave, dvbtConfigurationExcIdx=dvbtConfigurationExcIdx, dvbtLocalizationEntry=dvbtLocalizationEntry, dvbtStatusNotificationState=dvbtStatusNotificationState, dvbtLocalizationCellId=dvbtLocalizationCellId, dvbtOutModulationGuardInterval=dvbtOutModulationGuardInterval, dvbtOutModulationEntry=dvbtOutModulationEntry, dvbtConfigurationTxIdx=dvbtConfigurationTxIdx, dvbtModulationChannelBandwidth=dvbtModulationChannelBandwidth, DvbtInterleave=DvbtInterleave, dvbtStTxDelayOffset=dvbtStTxDelayOffset, dvbtOutModulationTable=dvbtOutModulationTable, dvbtStatusNotificationPriority=dvbtStatusNotificationPriority, dvbtObjDvbH=dvbtObjDvbH, rsXx9DvbtMibModule=rsXx9DvbtMibModule, dvbtConfigurationModulationSource=dvbtConfigurationModulationSource, PYSNMP_MODULE_ID=rsXx9DvbtMibModule, dvbtConfigurationTable=dvbtConfigurationTable, rsXx9DvbtGroups=rsXx9DvbtGroups, dvbtModulationMpeFEC=dvbtModulationMpeFEC, dvbtNotifyBasic=dvbtNotifyBasic, dvbtStatusNotificationTable=dvbtStatusNotificationTable, dvbtStateTable=dvbtStateTable, dvbtStTxFrequencyOffset=dvbtStTxFrequencyOffset, dvbtStatusNotificationExcIdx=dvbtStatusNotificationExcIdx, rsXx9DvbtConformance=rsXx9DvbtConformance, dvbtObjBasic=dvbtObjBasic, dvbtStatusNotificationEntry=dvbtStatusNotificationEntry, dvbtTestMode=dvbtTestMode, dvbtLocalizationTable=dvbtLocalizationTable, dvbtConfigurationEntry=dvbtConfigurationEntry, dvbtStatusNotificationMask=dvbtStatusNotificationMask, dvbtModulationConstellation=dvbtModulationConstellation, dvbtModulationTimeSlicing=dvbtModulationTimeSlicing, dvbtModulationCodeRate=dvbtModulationCodeRate, dvbtOutModulationConstellation=dvbtOutModulationConstellation, dvbtLocalizationTxControl=dvbtLocalizationTxControl, dvbtOutput=dvbtOutput, dvbtModulationInterleave=dvbtModulationInterleave, rsXx9DvbtObjects=rsXx9DvbtObjects, dvbtStatus=dvbtStatus, DvbtGuardInterval=DvbtGuardInterval, dvbtTest=dvbtTest, dvbtOutLocalizationTable=dvbtOutLocalizationTable, dvbtOutModulationMpeFEC=dvbtOutModulationMpeFEC, dvbtOutModulationTimeSlicing=dvbtOutModulationTimeSlicing, dvbtStateEntry=dvbtStateEntry, DvbtCodeRate=DvbtCodeRate, dvbtEncoderSummary=dvbtEncoderSummary)
