#
# PySNMP MIB module SIM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/SIM-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 12:19:46 2024
# On host fv-az1022-995 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, ModuleIdentity, NotificationType, Bits, enterprises, TimeTicks, Gauge32, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, MibIdentifier, Bits, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "NotificationType", "Bits", "enterprises", "TimeTicks", "Gauge32", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "MibIdentifier", "Bits", "Integer32", "IpAddress")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
simMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2696, 1, 1))
if mibBuilder.loadTexts: simMIB.setLastUpdated('9707021700Z')
if mibBuilder.loadTexts: simMIB.setOrganization('DVB Simulcrypt Technical Group')
if mibBuilder.loadTexts: simMIB.setContactInfo(' --- ')
if mibBuilder.loadTexts: simMIB.setDescription('The MIB module for defining DVB Simulcrypt Conditional\n Access System configuration information.')
class ECMGCSuCasId(TextualConvention, Unsigned32):
    description = 'Adding this to fix compile issue'
    status = 'current'

class Signed16(TextualConvention, Integer32):
    description = 'Adding this to fix compile issue'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class AdministrativeState(TextualConvention, Bits):
    description = 'Administrative state as defined by ITU-T Recommendation X.734'
    status = 'current'
    namedValues = NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))

class CaDescInsMode(TextualConvention, Bits):
    description = 'Conditional Access Descriptor Insertion Type.'
    status = 'current'
    namedValues = NamedValues(("psigInsertion", 0), ("noPsigInsertion", 1))

class DelayType(TextualConvention, Bits):
    description = 'Delay type.'
    status = 'current'
    namedValues = NamedValues(("immediate", 0), ("synchronized", 1))

class DescriptorStatus(TextualConvention, Bits):
    description = 'The return status of descriptor insertion.'
    status = 'current'
    namedValues = NamedValues(("success", 0), ("unknownTrigger", 1), ("unknownLocation", 2), ("unsupportedDelay", 3), ("unknownContext", 4), ("unknownOtherTS", 5), ("unknownNetwork", 6), ("unknownTS", 7), ("unknownES", 8), ("unknownBouquet", 9), ("unknownEvent", 10), ("tableNotSupported", 11), ("tableFull", 12), ("other", 13))

class ECMGChannelId(TextualConvention, Integer32):
    description = 'The ECM_channel_ID is represented as a 2 bytes unsigned integer.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class ECMGDelayValue(Signed16):
    description = 'The value od xxx_Delay_Start / _Stop in ECMG protocol.'
    status = 'current'

class ECMTriggerType(TextualConvention, Bits):
    description = 'The type of an ECM trigger in a PSI generator.'
    status = 'current'
    namedValues = NamedValues(("ecmStreamOpen", 0), ("ecmStreamClose", 1), ("ecmStreamChange", 2), ("accessCriteriaChange", 3))

class EMMGChannelId(TextualConvention, Integer32):
    description = 'Indicates the Data Channel Id.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class EMMGCommCapability(TextualConvention, Bits):
    description = 'Type of communications capability between EMMG/PDG and Multiplexer:\n TCP or UDP or both.'
    status = 'current'
    namedValues = NamedValues(("both", 0), ("tcp", 1), ("udp", 2))

class EMMGCommType(TextualConvention, Bits):
    description = 'Type of communications capability between EMMG/PDG and Multiplexer:\n TCP or UDP.'
    status = 'current'
    namedValues = NamedValues(("tcp", 0), ("udp", 1))

class EMMGDataType(TextualConvention, Bits):
    description = 'Type of data carried in the EMMG/PDG Multiplexer stream.'
    status = 'current'
    namedValues = NamedValues(("emm", 0), ("other", 1))

class FlowId(TextualConvention, Integer32):
    description = 'The flow identifier is represented as a 2 bytes unsigned integer.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class FlowType(TextualConvention, Bits):
    description = 'Type of Flow: EMM, ECM, or private data.'
    status = 'current'
    namedValues = NamedValues(("ecm", 0), ("emm", 1), ("privatedata", 2))

class InsertLocation(TextualConvention, Bits):
    description = 'Descriptor insertion location.'
    status = 'current'
    namedValues = NamedValues(("pmtLoop1", 0), ("pmtLoop2", 1), ("cat", 2), ("nitLopp1ActualNet", 3), ("nitLoop2ActualNet", 4), ("nitLopp1OtherNet", 5), ("nitLoop2OtherNet", 6), ("batLoop1", 7), ("batLoop2", 8), ("sdtActualTS", 9), ("sdtOtherTS", 10), ("eitPFActualTS", 11), ("eitPFOtherTS", 12), ("eitScheduleActualTS", 13), ("eitScheduleOtherTS", 14))

class ProvTableId(TextualConvention, Bits):
    description = 'Provision table identifier.'
    status = 'current'
    namedValues = NamedValues(("pat", 0), ("cat", 1), ("pmt", 2), ("nitActualNet", 3), ("nitOtherNet", 4), ("bat", 5), ("sdtActualTS", 6), ("sdtOtherTS", 7), ("eitPFActualTS", 8), ("eitPFOtherTS", 9), ("eitScheduleActualTS", 10), ("eitScheduleOtherTS", 11))

class PsigType(TextualConvention, Bits):
    description = 'Psig type.'
    status = 'current'
    namedValues = NamedValues(("sig", 0), ("psig", 1), ("psisig", 2))

class SectionTSPktFlag(TextualConvention, Bits):
    description = 'Format of ECM, EMM, Private data datagrams: section or TS packet.'
    status = 'current'
    namedValues = NamedValues(("section", 0), ("tspacket", 1))

class StreamId(TextualConvention, Integer32):
    description = 'The Stream_ID is represented as a 2 bytes unsigned integer.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class SuperCasId(TextualConvention, Unsigned32):
    description = 'SuperCASId / Client_ID: a unsigned 32-bit identifier.'
    status = 'current'

class TriggerType(TextualConvention, Bits):
    description = 'The type of a trigger in a PSI generator.'
    status = 'current'
    namedValues = NamedValues(("dvbEvent", 0), ("futureDvbEvent", 1), ("newEcmStream", 2), ("flowPidChange", 3), ("accessCriteriaChange", 4), ("ecmStreamClosure", 5), ("pdStreamCEvent", 6))

simMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1))
simMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 1, 1, 2))
simIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 1))
simECMG = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2))
simEMMG = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3))
simCPSI = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4))
simPSI = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5))
simSofwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: simSofwareVersion.setStatus('current')
if mibBuilder.loadTexts: simSofwareVersion.setDescription('This contains a display string that defines the current version\n of the software for this unit.')
simMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: simMIBVersion.setStatus('current')
if mibBuilder.loadTexts: simMIBVersion.setDescription('This contains a display string that defines the current version\n of the MIB.')
simMIBPrivateVersion = MibScalar((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: simMIBPrivateVersion.setStatus('current')
if mibBuilder.loadTexts: simMIBPrivateVersion.setDescription('This contains a display string that defines the current private\n version of the MIB.')
simAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: simAgentVersion.setStatus('current')
if mibBuilder.loadTexts: simAgentVersion.setDescription('This contains a display string that defines the current version\n of the agent.')
simEcmgTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: simEcmgTable.setStatus('current')
if mibBuilder.loadTexts: simEcmgTable.setDescription('This table specifies the IP addresses and Port numbers of ECM Generators\n to be used by headend managers to configure SCSs. This table is to be\n used in ECM Generators and ECM Generator proxies.')
simEcmgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "SIM-MIB", "simEcmgIndex"))
if mibBuilder.loadTexts: simEcmgEntry.setStatus('current')
if mibBuilder.loadTexts: simEcmgEntry.setDescription('Information about a single table entry. Depending on whether this is\nan ECMG agent or ECMG proxy agent different table entries can \nbe omitted.')
simEcmgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgIndex.setStatus('current')
if mibBuilder.loadTexts: simEcmgIndex.setDescription('The ECM Generator Table unique index.')
simEcmgIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgIpAddress.setStatus('current')
if mibBuilder.loadTexts: simEcmgIpAddress.setDescription('IP address of the host of the ECMG.')
simEcmgTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgTcpPort.setStatus('current')
if mibBuilder.loadTexts: simEcmgTcpPort.setDescription('TCP port of the ECMG.')
simEcmgSuCasId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 1, 1, 4), SuperCasId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgSuCasId.setStatus('current')
if mibBuilder.loadTexts: simEcmgSuCasId.setDescription('The Super_VAS_ID is formed by concatenation of the CA_system_id\n (16 bit) and the CA_subsystem_ID (16 bit). It defines uniquely a\n set of ECMGs for a given SCS.')
simEcmgChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgChannels.setStatus('current')
if mibBuilder.loadTexts: simEcmgChannels.setDescription('The total number of channels this ECMG is currently maintaining.')
simEcmgCwPrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgCwPrs.setStatus('current')
if mibBuilder.loadTexts: simEcmgCwPrs.setDescription('The total number of CW provisioning requests received by this ECMG.')
simEcmgErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgErrs.setStatus('current')
if mibBuilder.loadTexts: simEcmgErrs.setDescription('The total number of communications errors for this ECMG.')
simEcmgTargetCpsig = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgTargetCpsig.setStatus('current')
if mibBuilder.loadTexts: simEcmgTargetCpsig.setDescription('The index into the C(P)SIG table identifying the C(P)SIG associated\n with this ECMG.')
simEcmgCaMib = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 1, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgCaMib.setStatus('current')
if mibBuilder.loadTexts: simEcmgCaMib.setDescription('The pointer to a provider proprietary MIB (like ifSpecific \nin the interfaces group of MIB II.')
simEcmgCTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: simEcmgCTable.setStatus('current')
if mibBuilder.loadTexts: simEcmgCTable.setDescription('This table specifies information relating to ECMG/SCS channels including\n the IP addresses and Port numbers of SCSs communicating\n with the ECMG Generators. ')
simEcmgCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "SIM-MIB", "simEcmgIndex"), (0, "SIM-MIB", "simEcmgChannelId"))
if mibBuilder.loadTexts: simEcmgCEntry.setStatus('current')
if mibBuilder.loadTexts: simEcmgCEntry.setDescription('Information about a single table entry. Depending on whether this is\n an ECMG agent or ECMG proxy agent different table entries can be \n omitted.')
simEcmgChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 1), ECMGChannelId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgChannelId.setStatus('current')
if mibBuilder.loadTexts: simEcmgChannelId.setDescription('The ECMG/SCS Channel identifier.')
simEcmgCScsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgCScsIpAddress.setStatus('current')
if mibBuilder.loadTexts: simEcmgCScsIpAddress.setDescription('IP address of the SCS.')
simEcmgCScsTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgCScsTcpPort.setStatus('current')
if mibBuilder.loadTexts: simEcmgCScsTcpPort.setDescription('TCP port of the SCS.')
simEcmgCStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgCStreams.setStatus('current')
if mibBuilder.loadTexts: simEcmgCStreams.setDescription('The total number of streams this ECMG is currently maintaining on this channel.')
simEcmgCCwPrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgCCwPrs.setStatus('current')
if mibBuilder.loadTexts: simEcmgCCwPrs.setDescription('The total number of CW provisioning requests received by this ECMG on this channel.')
simEcmgCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgCErrs.setStatus('current')
if mibBuilder.loadTexts: simEcmgCErrs.setDescription('The total number of communications errors for this ECMG on this channel.')
simEcmgCSuCasId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 7), ECMGCSuCasId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgCSuCasId.setStatus('current')
if mibBuilder.loadTexts: simEcmgCSuCasId.setDescription('The SuperCASId of the current Channel.')
simEcmgFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 8), SectionTSPktFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgFormat.setStatus('current')
if mibBuilder.loadTexts: simEcmgFormat.setDescription('Format of datagrams : section or TS Packet.')
simACDelayStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 9), ECMGDelayValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simACDelayStart.setStatus('current')
if mibBuilder.loadTexts: simACDelayStart.setDescription('Value of AC_Delay_Start parameter in ECMG protocol, imposed by CAS.')
simACDelayStop = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 10), ECMGDelayValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simACDelayStop.setStatus('current')
if mibBuilder.loadTexts: simACDelayStop.setDescription('Value of AC_Delay_Stop parameter in ECMG protocol, imposed by CAS.')
simDelayStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 11), ECMGDelayValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simDelayStart.setStatus('current')
if mibBuilder.loadTexts: simDelayStart.setDescription('Value of Delay_Start parameter in ECMG protocol, imposed by CAS.')
simDelayStop = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 12), ECMGDelayValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simDelayStop.setStatus('current')
if mibBuilder.loadTexts: simDelayStop.setDescription('Value of Delay_Stop parameter in ECMG protocol, imposed by CAS.')
simTransitionDelayStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 13), ECMGDelayValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simTransitionDelayStart.setStatus('current')
if mibBuilder.loadTexts: simTransitionDelayStart.setDescription('Value of Transition_Delay_Start parameter in ECMG protocol, imposed by CAS.')
simTransitionDelayStop = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 14), ECMGDelayValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simTransitionDelayStop.setStatus('current')
if mibBuilder.loadTexts: simTransitionDelayStop.setDescription('Value of Transition_Delay_Stop parameter in ECMG protocol, imposed by CAS.')
simECMRepPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simECMRepPeriod.setStatus('current')
if mibBuilder.loadTexts: simECMRepPeriod.setDescription('Repeating period of ECM defined by CAS and applied by SCS.')
simMaxStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simMaxStreams.setStatus('current')
if mibBuilder.loadTexts: simMaxStreams.setDescription('Max number of streams supported by the ECMG.')
simMinCPDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simMinCPDuration.setStatus('current')
if mibBuilder.loadTexts: simMinCPDuration.setDescription('Min crypto-period length supported by the ECMG.')
simLeadCW = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simLeadCW.setStatus('current')
if mibBuilder.loadTexts: simLeadCW.setDescription('Number of CW the ecmg needs in advance.')
simCWPerMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCWPerMsg.setStatus('current')
if mibBuilder.loadTexts: simCWPerMsg.setDescription('Number of CW the ecmg needs in each ECM request.')
simMaxCompTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simMaxCompTime.setStatus('current')
if mibBuilder.loadTexts: simMaxCompTime.setDescription('Max delay supported by the ECMG for providing an ECM.')
simEcmgSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 3), )
if mibBuilder.loadTexts: simEcmgSTable.setStatus('current')
if mibBuilder.loadTexts: simEcmgSTable.setDescription('This table specifies information relating to ECMG/SCS streams. ')
simEcmgSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 3, 1), ).setIndexNames((0, "SIM-MIB", "simEcmgIndex"), (0, "SIM-MIB", "simEcmgChannelId"), (0, "SIM-MIB", "simEcmgStreamId"))
if mibBuilder.loadTexts: simEcmgSEntry.setStatus('current')
if mibBuilder.loadTexts: simEcmgSEntry.setDescription('Information about a single table entry. Depending on whether this is\nan ECMG agent or ECMG proxy agent different table entries can be omitted.')
simEcmgStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 3, 1, 1), StreamId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgStreamId.setStatus('current')
if mibBuilder.loadTexts: simEcmgStreamId.setDescription('The ECMG/SCS Stream identifier.')
simEcmgEcmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 3, 1, 2), FlowId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgEcmId.setStatus('current')
if mibBuilder.loadTexts: simEcmgEcmId.setDescription('The unique ECM flow identifier.')
simEcmgSLastCp = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgSLastCp.setStatus('current')
if mibBuilder.loadTexts: simEcmgSLastCp.setDescription('The number of the crypto-period last processed on this stream.')
simEcmgSCwPrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgSCwPrs.setStatus('current')
if mibBuilder.loadTexts: simEcmgSCwPrs.setDescription('The total number of CW provisioning requests received by this ECMG on this stream.')
simEcmgSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEcmgSErrs.setStatus('current')
if mibBuilder.loadTexts: simEcmgSErrs.setDescription('The total number of communications errors for this ECMG on this stream.')
simEmOrPdTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: simEmOrPdTable.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdTable.setDescription('This table defines the EMMG or PDG interfaces to the MUX and is to be\n used in EMMGs/PDGs and optionally the multiplexer.')
simEmOrPdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "SIM-MIB", "simEmOrPdIndex"))
if mibBuilder.loadTexts: simEmOrPdEntry.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdEntry.setDescription('Information about a single table entry. Depending on whether this is an\n EMMG/PDG or multiplexer agent different table entries can be omitted.')
simEmOrPdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdIndex.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdIndex.setDescription('Unique index into the EMMG or PDG table. ')
simEmOrPdDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 1, 1, 2), EMMGDataType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdDataType.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdDataType.setDescription('Data_type: Type of data handled by this EMMG/PDG. ')
simEmOrPdClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 1, 1, 3), SuperCasId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdClientId.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdClientId.setDescription('Client_ID: The Client_ID is a 32-bit identifier. It shall identify uniquely\n an EMMG/PDG across all the EMMGs/PDGs connected to a given MUX. To facilitate\n uniqueness of this value, the following rules apply:\n* In the case of EMMs or other CA related data, the two first bytes of the\n client_id should be equal to the two bytes of the corresponding CA_system_ID.\n* In other cases a value allocated by DVB for this purpose should be used.')
simEmOrPdCommCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 1, 1, 4), EMMGCommCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdCommCapability.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdCommCapability.setDescription('Communication capability between EMMG/PDG and the multiplexer. Currently\n TCP or UDP or both.')
simEmOrPdErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdErrs.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdErrs.setDescription('The total number of communications errors for this EMMG/PDG.')
simEmOrPdTargetCpsig = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdTargetCpsig.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdTargetCpsig.setDescription('The index into the C(P)SIG table identifying the C(P)SIG associated\n with this EMMG/PDG.')
simEmOrPdCaMib = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 1, 1, 7), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdCaMib.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdCaMib.setDescription('Pointer to a vendor proprietary extension to the EMMG/PDG MIB group.')
simEmOrPdLapTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: simEmOrPdLapTable.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapTable.setDescription('This table is used for configuration of EMM/PD Generators.')
simEmOrPdLapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "SIM-MIB", "simEmOrPdLapIndex"))
if mibBuilder.loadTexts: simEmOrPdLapEntry.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapEntry.setDescription('Information about a single table entry.')
simEmOrPdLapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdLapIndex.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapIndex.setDescription('Unique Logical Access Point (LAP) identifier. ')
simEmOrPdLapAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 2, 1, 2), AdministrativeState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdLapAdminState.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapAdminState.setDescription(' Used by an authorized manager to lock a conceptual row for exclusive\n write and create access.')
simEmOrPdLapCommType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 2, 1, 3), EMMGCommType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdLapCommType.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapCommType.setDescription('Type of communication between EMMG/PDG and the multiplexer. Currently TCP or UDP.')
simEmOrPdLapMuxIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdLapMuxIpAddress.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapMuxIpAddress.setDescription('IP address of the multiplexer for EMMG/PDG TCP communication.')
simEmOrPdLapMuxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdLapMuxPort.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapMuxPort.setDescription('Port number (TCP) of the multiplexer for EMMG/PDG TCP communication.')
simEmOrPdLapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdLapStatus.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapStatus.setDescription('Used for table row creation management.')
simEmOrPdLapMuxUIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdLapMuxUIpAddress.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapMuxUIpAddress.setDescription('IP address of the multiplexer for EMMG/PDG UDP communication.')
simEmOrPdLapMuxUPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdLapMuxUPort.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapMuxUPort.setDescription('Port number (UDP) of the multiplexer for EMMG/PDG UDP communication.')
simEmOrPdLapGTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 3), )
if mibBuilder.loadTexts: simEmOrPdLapGTable.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapGTable.setDescription('This table is used for configuration of EMM/PD Generators.')
simEmOrPdLapGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 3, 1), ).setIndexNames((0, "SIM-MIB", "simEmOrPdLapGroup"), (0, "SIM-MIB", "simEmOrPdLapIndex"))
if mibBuilder.loadTexts: simEmOrPdLapGEntry.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapGEntry.setDescription('Information about a single table entry.')
simEmOrPdLapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdLapGroup.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapGroup.setDescription('Logical Access Point (LAP) group. ')
simEmOrPdLapGAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 3, 1, 2), AdministrativeState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdLapGAdminState.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapGAdminState.setDescription(' Used by an authorized manager to lock a conceptual row for exclusive\n write and create access.')
simEmOrPdLapGStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdLapGStatus.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapGStatus.setDescription('Used for table row creation management.')
simEmOrPdCTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 4), )
if mibBuilder.loadTexts: simEmOrPdCTable.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdCTable.setDescription('This table is used for monitoring of channels between Muxes and EMMGs/PDGs.')
simEmOrPdCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 4, 1), ).setIndexNames((0, "SIM-MIB", "simEmOrPdIndex"), (0, "SIM-MIB", "simEmOrPdLapIndex"), (0, "SIM-MIB", "simEmOrPdChannelId"))
if mibBuilder.loadTexts: simEmOrPdCEntry.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdCEntry.setDescription('Information about a single table entry.')
simEmOrPdChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 4, 1, 1), EMMGChannelId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdChannelId.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdChannelId.setDescription('Data_channel_ID: This identifier uniquely identifies a\n EMM/Private Data channel within a client_ID.')
simEmOrPdCommType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 4, 1, 2), EMMGCommType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdCommType.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdCommType.setDescription('Communications type: TCP or UDP.')
simEmOrPdCIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdCIpAddress.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdCIpAddress.setDescription('IP address of the host of the EMMG or PDG.')
simEmOrPdCPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdCPort.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdCPort.setDescription('Port number *TCP or UDP of the EMMG or PDG.')
simEmOrPdCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdCErrs.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdCErrs.setDescription('The total number of communications errors on this channel.')
simEmOrPdCFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 4, 1, 6), SectionTSPktFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdCFormat.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdCFormat.setDescription('Format of datagrams : section or TS Packet.')
simEmOrPdCUIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdCUIpAddress.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdCUIpAddress.setDescription('IP address of the host of the EMMG or PDG for UDP.')
simEmOrPdCUPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdCUPort.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdCUPort.setDescription('Port number (UDP) of the EMMG or PDG.')
simEmOrPdSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 5), )
if mibBuilder.loadTexts: simEmOrPdSTable.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdSTable.setDescription('This table is used for monitoring of streams between Muxes and EMMGs/PDGs.')
simEmOrPdSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 5, 1), ).setIndexNames((0, "SIM-MIB", "simEmOrPdIndex"), (0, "SIM-MIB", "simEmOrPdLapIndex"), (0, "SIM-MIB", "simEmOrPdDataId"))
if mibBuilder.loadTexts: simEmOrPdSEntry.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdSEntry.setDescription('Information about a single table entry.')
simEmOrPdDataId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 5, 1, 1), FlowId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdDataId.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdDataId.setDescription('DataID: This identifier uniquely identifies a EMM/Private Data stream.')
simEmOrPdSChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 5, 1, 2), EMMGChannelId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdSChannelId.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdSChannelId.setDescription('Channel identifier.')
simEmOrPdBwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 5, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdBwidth.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdBwidth.setDescription('Negotiated Bandwidth.')
simEmOrPdStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 5, 1, 4), StreamId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdStreamId.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdStreamId.setDescription('Data_stream_ID: This identifier uniquely identifies a EMM/Private\n Data stream within a channel.')
simEmOrPdSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdSErrs.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdSErrs.setDescription('The total number of communications errors on this stream.')
simEmOrPdSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simEmOrPdSBytes.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdSBytes.setDescription('The total number of bytes sent by this EMMG/PDG on this stream.')
simEmOrPdSReqBwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 3, 5, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simEmOrPdSReqBwidth.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdSReqBwidth.setDescription(' Bandwidth as requested by CAS.')
simCpsigTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: simCpsigTable.setStatus('current')
if mibBuilder.loadTexts: simCpsigTable.setDescription('This table defines the C(P)SIG) interfaces to the Mux and is to be\n used in the C(P)SIG and optionally the multiplexer.')
simCpsigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "SIM-MIB", "simCpsigIndex"))
if mibBuilder.loadTexts: simCpsigEntry.setStatus('current')
if mibBuilder.loadTexts: simCpsigEntry.setDescription('Information about a single table entry. Depending on whether this is an\n EMMG/PDG or multiplexer agent different table entries can be omitted.')
simCpsigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigIndex.setStatus('current')
if mibBuilder.loadTexts: simCpsigIndex.setDescription('Unique index into the Cpsig table. ')
simCpsigSuperCasId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 1, 1, 2), SuperCasId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigSuperCasId.setStatus('current')
if mibBuilder.loadTexts: simCpsigSuperCasId.setDescription('super_CAS_id ')
simCpsigErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigErrs.setStatus('current')
if mibBuilder.loadTexts: simCpsigErrs.setDescription('The total number of communication errors for this C(P)SIG).')
simCpsigChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigChannels.setStatus('current')
if mibBuilder.loadTexts: simCpsigChannels.setDescription('The total number of channels for this C(P)SIG).')
simCpsigCpsigIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigCpsigIpAddress.setStatus('current')
if mibBuilder.loadTexts: simCpsigCpsigIpAddress.setDescription('The IP Address of the C(P)SIG).')
simCpsigCpsigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigCpsigPort.setStatus('current')
if mibBuilder.loadTexts: simCpsigCpsigPort.setDescription('The TCP port number of the C(P)SIG).')
simCpsigCaMib = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 1, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigCaMib.setStatus('current')
if mibBuilder.loadTexts: simCpsigCaMib.setDescription(' Pointer to a vendor proprietary extension to the C(P)SIG) MIB group.')
simCpsigCTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 2), )
if mibBuilder.loadTexts: simCpsigCTable.setStatus('current')
if mibBuilder.loadTexts: simCpsigCTable.setDescription('This table is used for monitoring of channels between (P)SIGs and C(P)SIGs.')
simCpsigCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 2, 1), ).setIndexNames((0, "SIM-MIB", "simCpsigIndex"), (0, "SIM-MIB", "simCpsigChannelId"))
if mibBuilder.loadTexts: simCpsigCEntry.setStatus('current')
if mibBuilder.loadTexts: simCpsigCEntry.setDescription(' Information about a single table entry.')
simCpsigChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigChannelId.setStatus('current')
if mibBuilder.loadTexts: simCpsigChannelId.setDescription('ChannelId identifies the C(P)SIG channel.')
simCpsigPsigIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigPsigIpAddress.setStatus('current')
if mibBuilder.loadTexts: simCpsigPsigIpAddress.setDescription('IP address of the host of the (P)SIG.')
simCpsigPsigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigPsigPort.setStatus('current')
if mibBuilder.loadTexts: simCpsigPsigPort.setDescription('TCP Port number of the (P)SIG.')
simCpsigCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigCErrs.setStatus('current')
if mibBuilder.loadTexts: simCpsigCErrs.setDescription('The total number of communication errors on this channel.')
simCpsigCTstrms = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigCTstrms.setStatus('current')
if mibBuilder.loadTexts: simCpsigCTstrms.setDescription('The total number of transport streams on this channel.')
simCpsigCSstrms = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigCSstrms.setStatus('current')
if mibBuilder.loadTexts: simCpsigCSstrms.setDescription('The total number of service streams on this channel.')
simCpsigStreamTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3), )
if mibBuilder.loadTexts: simCpsigStreamTable.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamTable.setDescription('This table is used for monitoring of streams between Muxes and C(P)SIG)s.')
simCpsigStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3, 1), ).setIndexNames((0, "SIM-MIB", "simCpsigIndex"), (0, "SIM-MIB", "simCpsigChannelId"), (0, "SIM-MIB", "simCpsigStreamId"))
if mibBuilder.loadTexts: simCpsigStreamEntry.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamEntry.setDescription('Information about a single table entry.')
simCpsigStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: simCpsigStreamId.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamId.setDescription('This identifier uniquely identifies a C(P)SIG) stream')
simCpsigStreamTStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigStreamTStreamId.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamTStreamId.setDescription('This identifier uniquely identifies a C(P)SIG transport stream')
simCpsigStreamNid = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigStreamNid.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamNid.setDescription('This identifier uniquely identifies the network id associated with the stream')
simCpsigStreamOnid = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigStreamOnid.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamOnid.setDescription('This identifier uniquely identifies the original network \n id associated with the stream')
simCpsigStreamMaxCompTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigStreamMaxCompTime.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamMaxCompTime.setDescription('Max Computation time by the C(P)SIG.')
simCpsigStreamTriggerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3, 1, 6), TriggerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigStreamTriggerEnable.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamTriggerEnable.setDescription('Triggers enabled by the C(P)SIG.')
simCpsigStreamLastTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3, 1, 7), TriggerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigStreamLastTrigger.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamLastTrigger.setDescription('Last trigger processed by the C(P)SIG.')
simCpsigStreamLastEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigStreamLastEventId.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamLastEventId.setDescription('Last event id processed by the C(P)SIG.')
simCpsigStreamLastServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigStreamLastServiceId.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamLastServiceId.setDescription('Last service id processed by the C(P)SIG.')
simCpsigStreamLastEsId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigStreamLastEsId.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamLastEsId.setDescription('Last elementary stream id processed by the C(P)SIG.')
simCpsigStreamLastEcmPid = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigStreamLastEcmPid.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamLastEcmPid.setDescription('Last ECM pid processed by the C(P)SIG.')
simCpsigStreamErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigStreamErrs.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamErrs.setDescription('The total number of communication errors on this stream.')
simCpsigStreamBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simCpsigStreamBytes.setStatus('current')
if mibBuilder.loadTexts: simCpsigStreamBytes.setDescription('The total number of bytes sent by this EMMG/PDG on this stream.')
simPsigTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 1), )
if mibBuilder.loadTexts: simPsigTable.setStatus('current')
if mibBuilder.loadTexts: simPsigTable.setDescription('This table advertises the (P)SIG configuration information. ')
simPsigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 1, 1), ).setIndexNames((0, "SIM-MIB", "simPsigIndex"))
if mibBuilder.loadTexts: simPsigEntry.setStatus('current')
if mibBuilder.loadTexts: simPsigEntry.setDescription('Information about a single table entry. ')
simPsigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simPsigIndex.setStatus('current')
if mibBuilder.loadTexts: simPsigIndex.setDescription('The unique index into the table.')
simPsigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 1, 1, 2), PsigType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simPsigType.setStatus('current')
if mibBuilder.loadTexts: simPsigType.setDescription('Psig type')
simPsigTriggerSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 1, 1, 3), TriggerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simPsigTriggerSupport.setStatus('current')
if mibBuilder.loadTexts: simPsigTriggerSupport.setDescription('Identifies which trigger types the PSIG supports.')
simPsigNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simPsigNetworkId.setStatus('current')
if mibBuilder.loadTexts: simPsigNetworkId.setDescription('Network identifier. ')
simPsigONetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simPsigONetworkId.setStatus('current')
if mibBuilder.loadTexts: simPsigONetworkId.setDescription('Original Network identifier. ')
simPsigTransStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simPsigTransStreamId.setStatus('current')
if mibBuilder.loadTexts: simPsigTransStreamId.setDescription('Transport Stream identifier. ')
simPsigTSServices = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simPsigTSServices.setStatus('current')
if mibBuilder.loadTexts: simPsigTSServices.setDescription('List of service identifies on the transport stream. ')
simPsigConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 2), )
if mibBuilder.loadTexts: simPsigConfigTable.setStatus('current')
if mibBuilder.loadTexts: simPsigConfigTable.setDescription('This table configures the (P)SIG/(C)PSIG communication. ')
simPsigConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 2, 1), ).setIndexNames((0, "SIM-MIB", "simPsigConfigCustCasId"), (0, "SIM-MIB", "simPsigConfigIndex"), (0, "SIM-MIB", "simPsigIndex"))
if mibBuilder.loadTexts: simPsigConfigEntry.setStatus('current')
if mibBuilder.loadTexts: simPsigConfigEntry.setDescription('Information about a single table entry. ')
simPsigConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: simPsigConfigIndex.setStatus('current')
if mibBuilder.loadTexts: simPsigConfigIndex.setDescription('The unique index into the table.')
simPsigConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 2, 1, 2), AdministrativeState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigConfigAdminState.setStatus('current')
if mibBuilder.loadTexts: simPsigConfigAdminState.setDescription('Used by an authorized manager to lock a conceptual row for exclusive\n write and create access.')
simPsigConfigCpsigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 2, 1, 3), PsigType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigConfigCpsigType.setStatus('current')
if mibBuilder.loadTexts: simPsigConfigCpsigType.setDescription('C(P)SIG type.')
simPsigConfigCustCasId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 2, 1, 4), SuperCasId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigConfigCustCasId.setStatus('current')
if mibBuilder.loadTexts: simPsigConfigCustCasId.setDescription('Custom CAS Identifier.')
simPsigConfigMaxCompTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigConfigMaxCompTime.setStatus('current')
if mibBuilder.loadTexts: simPsigConfigMaxCompTime.setDescription('Maximum Computing Time. ')
simPsigConfigServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigConfigServiceId.setStatus('current')
if mibBuilder.loadTexts: simPsigConfigServiceId.setDescription('Service identifier. ')
simPsigConfigTriggerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 2, 1, 7), TriggerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigConfigTriggerEnable.setStatus('current')
if mibBuilder.loadTexts: simPsigConfigTriggerEnable.setDescription('Trigger types enabled. ')
simPsigConfigCADInsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 2, 1, 8), CaDescInsMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigConfigCADInsMode.setStatus('current')
if mibBuilder.loadTexts: simPsigConfigCADInsMode.setDescription('Conditional Access Descriptor Insert mode. ')
simPsigConfigEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigConfigEntryStatus.setStatus('current')
if mibBuilder.loadTexts: simPsigConfigEntryStatus.setDescription('Used for table row creation management.')
simPsigEcmTrTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 3), )
if mibBuilder.loadTexts: simPsigEcmTrTable.setStatus('current')
if mibBuilder.loadTexts: simPsigEcmTrTable.setDescription('This table contains all the active ECM Triggers.')
simPsigEcmTrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 3, 1), ).setIndexNames((0, "SIM-MIB", "simPsigEcmTrIndex"))
if mibBuilder.loadTexts: simPsigEcmTrEntry.setStatus('current')
if mibBuilder.loadTexts: simPsigEcmTrEntry.setDescription('Information about a single table entry. ')
simPsigEcmTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: simPsigEcmTrIndex.setStatus('current')
if mibBuilder.loadTexts: simPsigEcmTrIndex.setDescription('The trigger index.')
simPsigEcmTrNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEcmTrNetworkId.setStatus('current')
if mibBuilder.loadTexts: simPsigEcmTrNetworkId.setDescription('The Network Identifier.')
simPsigEcmTrONetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEcmTrONetworkId.setStatus('current')
if mibBuilder.loadTexts: simPsigEcmTrONetworkId.setDescription('The Original Network Identifier.')
simPsigEcmTrTransStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEcmTrTransStreamId.setStatus('current')
if mibBuilder.loadTexts: simPsigEcmTrTransStreamId.setDescription('Transport Stream Identifier. ')
simPsigEcmTrServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEcmTrServiceId.setStatus('current')
if mibBuilder.loadTexts: simPsigEcmTrServiceId.setDescription('Service Identifier. ')
simPsigEcmTrEsId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEcmTrEsId.setStatus('current')
if mibBuilder.loadTexts: simPsigEcmTrEsId.setDescription('Elementary Stream Identifier. ')
simPsigEcmTrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 3, 1, 7), ECMTriggerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEcmTrType.setStatus('current')
if mibBuilder.loadTexts: simPsigEcmTrType.setDescription('ECM Trigger Type. ')
simPsigEcmTrSuCasId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 3, 1, 8), SuperCasId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEcmTrSuCasId.setStatus('current')
if mibBuilder.loadTexts: simPsigEcmTrSuCasId.setDescription('ECM Client Identifier. ')
simPsigEcmTrEcmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 3, 1, 9), FlowId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEcmTrEcmId.setStatus('current')
if mibBuilder.loadTexts: simPsigEcmTrEcmId.setDescription('ECM Stream Identifier. ')
simPsigEcmTrEcmPid = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEcmTrEcmPid.setStatus('current')
if mibBuilder.loadTexts: simPsigEcmTrEcmPid.setDescription('ECM PID ')
simPsigEcmTrAccessCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEcmTrAccessCriteria.setStatus('current')
if mibBuilder.loadTexts: simPsigEcmTrAccessCriteria.setDescription('Access criteria. ')
simPsigFlowTrTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 4), )
if mibBuilder.loadTexts: simPsigFlowTrTable.setStatus('current')
if mibBuilder.loadTexts: simPsigFlowTrTable.setDescription('This table contains all the active Flow Triggers.')
simPsigFlowTrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 4, 1), ).setIndexNames((0, "SIM-MIB", "simPsigFlowTrIndex"))
if mibBuilder.loadTexts: simPsigFlowTrEntry.setStatus('current')
if mibBuilder.loadTexts: simPsigFlowTrEntry.setDescription('Information about a single table entry. ')
simPsigFlowTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigFlowTrIndex.setStatus('current')
if mibBuilder.loadTexts: simPsigFlowTrIndex.setDescription('The trigger index.')
simPsigFlowTrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 4, 1, 2), FlowType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigFlowTrType.setStatus('current')
if mibBuilder.loadTexts: simPsigFlowTrType.setDescription('Flow Type. ')
simPsigFlowTrSuCasId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 4, 1, 3), SuperCasId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigFlowTrSuCasId.setStatus('current')
if mibBuilder.loadTexts: simPsigFlowTrSuCasId.setDescription('Flow Super CAS identifier. ')
simPsigFlowTrFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 4, 1, 4), FlowId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigFlowTrFlowId.setStatus('current')
if mibBuilder.loadTexts: simPsigFlowTrFlowId.setDescription('Flow Stream Identifier. ')
simPsigFlowTrFlowPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigFlowTrFlowPID.setStatus('current')
if mibBuilder.loadTexts: simPsigFlowTrFlowPID.setDescription('Flow PID ')
simPsigEvntTrTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 5), )
if mibBuilder.loadTexts: simPsigEvntTrTable.setStatus('current')
if mibBuilder.loadTexts: simPsigEvntTrTable.setDescription('This table contains all the active EVNT Triggers.')
simPsigEvntTrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 5, 1), ).setIndexNames((0, "SIM-MIB", "simPsigEvntTrIndex"))
if mibBuilder.loadTexts: simPsigEvntTrEntry.setStatus('current')
if mibBuilder.loadTexts: simPsigEvntTrEntry.setDescription('Information about a single table entry. ')
simPsigEvntTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: simPsigEvntTrIndex.setStatus('current')
if mibBuilder.loadTexts: simPsigEvntTrIndex.setDescription('The event trigger index.')
simPsigEvntTrNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEvntTrNetworkId.setStatus('current')
if mibBuilder.loadTexts: simPsigEvntTrNetworkId.setDescription('The Network Identifier.')
simPsigEvntTrONetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEvntTrONetworkId.setStatus('current')
if mibBuilder.loadTexts: simPsigEvntTrONetworkId.setDescription('The Original Network Identifier.')
simPsigEvntTrTransStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEvntTrTransStreamId.setStatus('current')
if mibBuilder.loadTexts: simPsigEvntTrTransStreamId.setDescription('Transport Stream Identifier. ')
simPsigEvntTrServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEvntTrServiceId.setStatus('current')
if mibBuilder.loadTexts: simPsigEvntTrServiceId.setDescription(' Event trigger service identifier. ')
simPsigEvntTrEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEvntTrEventId.setStatus('current')
if mibBuilder.loadTexts: simPsigEvntTrEventId.setDescription('Event Identifier. ')
simPsigEvntTrStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEvntTrStartTime.setStatus('current')
if mibBuilder.loadTexts: simPsigEvntTrStartTime.setDescription('Event start time. ')
simPsigEvntTrDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEvntTrDuration.setStatus('current')
if mibBuilder.loadTexts: simPsigEvntTrDuration.setDescription('Event duration. ')
simPsigEvntTrPrivateData = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigEvntTrPrivateData.setStatus('current')
if mibBuilder.loadTexts: simPsigEvntTrPrivateData.setDescription('EVNT Channel Identifier. ')
simPsigDescInsTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6), )
if mibBuilder.loadTexts: simPsigDescInsTable.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsTable.setDescription('This table contains all the information related to descriptor insertion.')
simPsigDescInsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1), ).setIndexNames((0, "SIM-MIB", "simPsigDescInsIndex"))
if mibBuilder.loadTexts: simPsigDescInsEntry.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsEntry.setDescription('Information about a single table entry. ')
simPsigDescInsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsIndex.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsIndex.setDescription('The unique index into the table.')
simPsigDescInsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 2), AdministrativeState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsAdminState.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsAdminState.setDescription('Used by an authorized manager to lock a conceptual row for exclusive\n write and create access.')
simPsigDescInsTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsTrIndex.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsTrIndex.setDescription('The unique index into the corresponding trigger table.')
simPsigDescInsTrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 4), TriggerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsTrType.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsTrType.setDescription('The type of the trigger that caused this descriptor insert.')
simPsigDescInsLocationId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 5), InsertLocation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsLocationId.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsLocationId.setDescription('The type of target table for insertion.')
simPsigDescInsNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsNetworkId.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsNetworkId.setDescription('The Network Identifier.')
simPsigDescInsONetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsONetworkId.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsONetworkId.setDescription('The Original Network Identifier.')
simPsigDescInsTransStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsTransStreamId.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsTransStreamId.setDescription('Transport Stream Identifier. ')
simPsigDescInsServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsServiceId.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsServiceId.setDescription('Service Identifier. ')
simPsigDescInsElmStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsElmStreamId.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsElmStreamId.setDescription('Elementary stream identifier. ')
simPsigDescInsBouquetId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsBouquetId.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsBouquetId.setDescription('Event trigger bouquet identifier. ')
simPsigDescInsEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsEventId.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsEventId.setDescription('EVNT Identifier. ')
simPsigDescInsONetworkId2loop = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsONetworkId2loop.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsONetworkId2loop.setDescription('The Original Network Identifier second loop.')
simPsigDescInsNetworkIdOther = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsNetworkIdOther.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsNetworkIdOther.setDescription('The Network Identifier other.')
simPsigDescInsTransStreamId2OrO = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsTransStreamId2OrO.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsTransStreamId2OrO.setDescription('Transport Stream Identifier second loop or other. ')
simPsigDescInsDelayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 16), DelayType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsDelayType.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsDelayType.setDescription('Delay type, immediate or synchronized. ')
simPsigDescInsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsDelay.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsDelay.setDescription('Insert delay')
simPsigDescPrivDataSpfier = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescPrivDataSpfier.setStatus('current')
if mibBuilder.loadTexts: simPsigDescPrivDataSpfier.setDescription('Private data specifier')
simPsigDescInsEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 6, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsEntryStatus.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsEntryStatus.setDescription('Other transport stream identifiers.')
simPsigDescInsDescTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 7), )
if mibBuilder.loadTexts: simPsigDescInsDescTable.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsDescTable.setDescription('This table contains all the descriptors to be inserted.')
simPsigDescInsDescEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 7, 1), ).setIndexNames((0, "SIM-MIB", "simPsigDescInsIndex"), (0, "SIM-MIB", "simPsigDescInsDescIndex"))
if mibBuilder.loadTexts: simPsigDescInsDescEntry.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsDescEntry.setDescription('Information about a single table entry. ')
simPsigDescInsDescIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsDescIndex.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsDescIndex.setDescription('The unique index into the table.')
simPsigDescInsDescAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 7, 1, 2), AdministrativeState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsDescAdminState.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsDescAdminState.setDescription('Used by an authorized manager to lock a conceptual row for exclusive\n write and create access.')
simPsigDescInsDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsDescriptor.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsDescriptor.setDescription('The descriptor to be inserted.')
simPsigDescInsDescriptorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 7, 1, 4), DescriptorStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsDescriptorStatus.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsDescriptorStatus.setDescription('The insertion status of the descriptor.')
simPsigDescInsDescEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigDescInsDescEntryStatus.setStatus('current')
if mibBuilder.loadTexts: simPsigDescInsDescEntryStatus.setDescription('Other transport stream identifiers.')
simPsigTblProvTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8), )
if mibBuilder.loadTexts: simPsigTblProvTable.setStatus('current')
if mibBuilder.loadTexts: simPsigTblProvTable.setDescription('This table is the interface to obtaining all PSI/SI information.')
simPsigTblProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1), ).setIndexNames((0, "SIM-MIB", "simPsigTblProvIndex"))
if mibBuilder.loadTexts: simPsigTblProvEntry.setStatus('current')
if mibBuilder.loadTexts: simPsigTblProvEntry.setDescription('Information about a single table entry. ')
simPsigTblProvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simPsigTblProvIndex.setStatus('current')
if mibBuilder.loadTexts: simPsigTblProvIndex.setDescription('The unique index into the table.')
simPsigTblProvTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1, 2), ProvTableId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simPsigTblProvTableId.setStatus('current')
if mibBuilder.loadTexts: simPsigTblProvTableId.setDescription('The table identifier of the table.')
simPsigTblNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigTblNetworkId.setStatus('current')
if mibBuilder.loadTexts: simPsigTblNetworkId.setDescription('The Network Identifier.')
simPsigTblONetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigTblONetworkId.setStatus('current')
if mibBuilder.loadTexts: simPsigTblONetworkId.setDescription('The Original Network Identifier.')
simPsigTblTransStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigTblTransStreamId.setStatus('current')
if mibBuilder.loadTexts: simPsigTblTransStreamId.setDescription('Transport Stream Identifier. ')
simPsigTblServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigTblServiceId.setStatus('current')
if mibBuilder.loadTexts: simPsigTblServiceId.setDescription('Service Identifier. ')
simPsigTblBouquetId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigTblBouquetId.setStatus('current')
if mibBuilder.loadTexts: simPsigTblBouquetId.setDescription('Event trigger bouquet identifier. ')
simPsigTblEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigTblEventId.setStatus('current')
if mibBuilder.loadTexts: simPsigTblEventId.setDescription('Event Identifier ')
simPsigTblONetworkId2loop = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigTblONetworkId2loop.setStatus('current')
if mibBuilder.loadTexts: simPsigTblONetworkId2loop.setDescription('The Original Network Identifier second loop.')
simPsigTblNetworkIdOther = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigTblNetworkIdOther.setStatus('current')
if mibBuilder.loadTexts: simPsigTblNetworkIdOther.setDescription('The Network Identifier other.')
simPsigTblTransStreamId2OrO = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigTblTransStreamId2OrO.setStatus('current')
if mibBuilder.loadTexts: simPsigTblTransStreamId2OrO.setDescription('Transport Stream Identifier second loop or other. ')
simPsigTblSegmentNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigTblSegmentNr.setStatus('current')
if mibBuilder.loadTexts: simPsigTblSegmentNr.setDescription('Segment Number ')
simPsigTblProvPart = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigTblProvPart.setStatus('current')
if mibBuilder.loadTexts: simPsigTblProvPart.setDescription('Event Identifier ')
simPsigTblProvPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigTblProvPartNumber.setStatus('current')
if mibBuilder.loadTexts: simPsigTblProvPartNumber.setDescription('Each table is subdivided into parts for SNMP transport if necessary.\n The part number identifies the table part of this entry. ')
simPsigPIDProvTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 9), )
if mibBuilder.loadTexts: simPsigPIDProvTable.setStatus('current')
if mibBuilder.loadTexts: simPsigPIDProvTable.setDescription('This is the PID provisioning table.')
simPsigPIDProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 9, 1), ).setIndexNames((0, "SIM-MIB", "simPsigPIDProvSuCasId"), (0, "SIM-MIB", "simPsigPIDProvFlowId"))
if mibBuilder.loadTexts: simPsigPIDProvEntry.setStatus('current')
if mibBuilder.loadTexts: simPsigPIDProvEntry.setDescription('Information about a single table entry. ')
simPsigPIDProvFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 9, 1, 1), FlowType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simPsigPIDProvFlowType.setStatus('current')
if mibBuilder.loadTexts: simPsigPIDProvFlowType.setDescription('Flow Type. ')
simPsigPIDProvSuCasId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 9, 1, 2), SuperCasId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simPsigPIDProvSuCasId.setStatus('current')
if mibBuilder.loadTexts: simPsigPIDProvSuCasId.setDescription('Flow Super CAS identifier. ')
simPsigPIDProvFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 9, 1, 3), FlowId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: simPsigPIDProvFlowId.setStatus('current')
if mibBuilder.loadTexts: simPsigPIDProvFlowId.setDescription('Flow Stream Identifier. ')
simPsigPIDProvFlowPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: simPsigPIDProvFlowPID.setStatus('current')
if mibBuilder.loadTexts: simPsigPIDProvFlowPID.setDescription('Flow PID ')
simPsigPdTrTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 10), )
if mibBuilder.loadTexts: simPsigPdTrTable.setStatus('current')
if mibBuilder.loadTexts: simPsigPdTrTable.setDescription('This table contains all the active Private Data Triggers.')
simPsigPdTrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 10, 1), ).setIndexNames((0, "SIM-MIB", "simPsigPdTrIndex"))
if mibBuilder.loadTexts: simPsigPdTrEntry.setStatus('current')
if mibBuilder.loadTexts: simPsigPdTrEntry.setDescription('Information about a single table entry. ')
simPsigPdTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: simPsigPdTrIndex.setStatus('current')
if mibBuilder.loadTexts: simPsigPdTrIndex.setDescription('The trigger index.')
simPsigPdTrNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigPdTrNetworkId.setStatus('current')
if mibBuilder.loadTexts: simPsigPdTrNetworkId.setDescription('The Network Identifier.')
simPsigPdTrONetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigPdTrONetworkId.setStatus('current')
if mibBuilder.loadTexts: simPsigPdTrONetworkId.setDescription('The Original Network Identifier.')
simPsigPdTrTransStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigPdTrTransStreamId.setStatus('current')
if mibBuilder.loadTexts: simPsigPdTrTransStreamId.setDescription('Transport Stream Identifier. ')
simPsigPdTrServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigPdTrServiceId.setStatus('current')
if mibBuilder.loadTexts: simPsigPdTrServiceId.setDescription('Service Identifier. ')
simPsigPdTrEsId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigPdTrEsId.setStatus('current')
if mibBuilder.loadTexts: simPsigPdTrEsId.setDescription('Elementary Stream Identifier. ')
simPsigPdTrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 10, 1, 7), ECMTriggerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigPdTrType.setStatus('current')
if mibBuilder.loadTexts: simPsigPdTrType.setDescription('ECM Trigger Type. ')
simPsigPdTrSuCasId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 10, 1, 8), SuperCasId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigPdTrSuCasId.setStatus('current')
if mibBuilder.loadTexts: simPsigPdTrSuCasId.setDescription('ECM Client Identifier. ')
simPsigPdTrPdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 10, 1, 9), FlowId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigPdTrPdId.setStatus('current')
if mibBuilder.loadTexts: simPsigPdTrPdId.setDescription('ECM Stream Identifier. ')
simPsigPdTrPdPid = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigPdTrPdPid.setStatus('current')
if mibBuilder.loadTexts: simPsigPdTrPdPid.setDescription('ECM PID ')
simPsigPdTrPdStreamType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigPdTrPdStreamType.setStatus('current')
if mibBuilder.loadTexts: simPsigPdTrPdStreamType.setDescription('Stream type of Private Data Stream')
simPsigPdTrPrivateData = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 1, 1, 1, 5, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: simPsigPdTrPrivateData.setStatus('current')
if mibBuilder.loadTexts: simPsigPdTrPrivateData.setDescription('Private Data string. ')
simCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 1, 1, 2, 1))
simGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 1, 1, 2, 2))
simEcmgCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2696, 1, 1, 2, 1, 1)).setObjects(("SIM-MIB", "simIdentGroup"), ("SIM-MIB", "simEcmgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    simEcmgCompliance = simEcmgCompliance.setStatus('current')
if mibBuilder.loadTexts: simEcmgCompliance.setDescription('The compliance statement for SNMP Entities which host or represent ECMGs')
simEmOrPdCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2696, 1, 1, 2, 1, 2)).setObjects(("SIM-MIB", "simIdentGroup"), ("SIM-MIB", "simEmOrPdGroup"), ("SIM-MIB", "simEmOrPdLapGGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    simEmOrPdCompliance = simEmOrPdCompliance.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdCompliance.setDescription('The compliance statement for SNMP Entities which host or\n represent EMMGs or PDGs')
simCpsigCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2696, 1, 1, 2, 1, 3)).setObjects(("SIM-MIB", "simIdentGroup"), ("SIM-MIB", "simCpsigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    simCpsigCompliance = simCpsigCompliance.setStatus('current')
if mibBuilder.loadTexts: simCpsigCompliance.setDescription('The compliance statement for SNMP Entities which host or\n \t\t  represent C(P)SIG)s')
simPsigCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2696, 1, 1, 2, 1, 4)).setObjects(("SIM-MIB", "simIdentGroup"), ("SIM-MIB", "simPsigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    simPsigCompliance = simPsigCompliance.setStatus('current')
if mibBuilder.loadTexts: simPsigCompliance.setDescription('The compliance statement for SNMP Entities which host or\n represent (P)SIG)s')
simIdentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 1, 1, 2, 2, 1)).setObjects(("SIM-MIB", "simSofwareVersion"), ("SIM-MIB", "simMIBVersion"), ("SIM-MIB", "simMIBPrivateVersion"), ("SIM-MIB", "simAgentVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    simIdentGroup = simIdentGroup.setStatus('current')
if mibBuilder.loadTexts: simIdentGroup.setDescription('A collection of objects providing software configuration infomation.')
simEcmgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 1, 1, 2, 2, 2)).setObjects(("SIM-MIB", "simEcmgIndex"), ("SIM-MIB", "simEcmgIpAddress"), ("SIM-MIB", "simEcmgTcpPort"), ("SIM-MIB", "simEcmgSuCasId"), ("SIM-MIB", "simEcmgChannels"), ("SIM-MIB", "simEcmgCwPrs"), ("SIM-MIB", "simEcmgErrs"), ("SIM-MIB", "simEcmgTargetCpsig"), ("SIM-MIB", "simEcmgCaMib"), ("SIM-MIB", "simEcmgChannelId"), ("SIM-MIB", "simEcmgCScsIpAddress"), ("SIM-MIB", "simEcmgCScsTcpPort"), ("SIM-MIB", "simEcmgCStreams"), ("SIM-MIB", "simEcmgCCwPrs"), ("SIM-MIB", "simEcmgCErrs"), ("SIM-MIB", "simEcmgStreamId"), ("SIM-MIB", "simEcmgEcmId"), ("SIM-MIB", "simEcmgSLastCp"), ("SIM-MIB", "simEcmgSCwPrs"), ("SIM-MIB", "simEcmgSErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    simEcmgGroup = simEcmgGroup.setStatus('current')
if mibBuilder.loadTexts: simEcmgGroup.setDescription(' A collection of objects providing ECMG infomation.')
simEmOrPdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 1, 1, 2, 2, 3)).setObjects(("SIM-MIB", "simEmOrPdIndex"), ("SIM-MIB", "simEmOrPdDataType"), ("SIM-MIB", "simEmOrPdClientId"), ("SIM-MIB", "simEmOrPdCommCapability"), ("SIM-MIB", "simEmOrPdErrs"), ("SIM-MIB", "simEmOrPdTargetCpsig"), ("SIM-MIB", "simEmOrPdCaMib"), ("SIM-MIB", "simEmOrPdLapIndex"), ("SIM-MIB", "simEmOrPdLapAdminState"), ("SIM-MIB", "simEmOrPdLapCommType"), ("SIM-MIB", "simEmOrPdLapMuxIpAddress"), ("SIM-MIB", "simEmOrPdLapMuxPort"), ("SIM-MIB", "simEmOrPdLapStatus"), ("SIM-MIB", "simEmOrPdChannelId"), ("SIM-MIB", "simEmOrPdCommType"), ("SIM-MIB", "simEmOrPdCIpAddress"), ("SIM-MIB", "simEmOrPdCPort"), ("SIM-MIB", "simEmOrPdCErrs"), ("SIM-MIB", "simEmOrPdDataId"), ("SIM-MIB", "simEmOrPdSChannelId"), ("SIM-MIB", "simEmOrPdBwidth"), ("SIM-MIB", "simEmOrPdStreamId"), ("SIM-MIB", "simEmOrPdSErrs"), ("SIM-MIB", "simEmOrPdSBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    simEmOrPdGroup = simEmOrPdGroup.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdGroup.setDescription(' A collection of objects providing EMMG/PDG infomation.')
simEmOrPdLapGGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 1, 1, 2, 2, 4)).setObjects(("SIM-MIB", "simEmOrPdLapGroup"), ("SIM-MIB", "simEmOrPdLapGAdminState"), ("SIM-MIB", "simEmOrPdLapGStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    simEmOrPdLapGGroup = simEmOrPdLapGGroup.setStatus('current')
if mibBuilder.loadTexts: simEmOrPdLapGGroup.setDescription(' A collection of objects providing LAPG infomation.')
simCpsigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 1, 1, 2, 2, 5)).setObjects(("SIM-MIB", "simCpsigIndex"), ("SIM-MIB", "simCpsigSuperCasId"), ("SIM-MIB", "simCpsigErrs"), ("SIM-MIB", "simCpsigChannels"), ("SIM-MIB", "simCpsigCpsigIpAddress"), ("SIM-MIB", "simCpsigCpsigPort"), ("SIM-MIB", "simCpsigCaMib"), ("SIM-MIB", "simCpsigChannelId"), ("SIM-MIB", "simCpsigPsigIpAddress"), ("SIM-MIB", "simCpsigPsigPort"), ("SIM-MIB", "simCpsigCErrs"), ("SIM-MIB", "simCpsigCTstrms"), ("SIM-MIB", "simCpsigCSstrms"), ("SIM-MIB", "simCpsigStreamTStreamId"), ("SIM-MIB", "simCpsigStreamNid"), ("SIM-MIB", "simCpsigStreamOnid"), ("SIM-MIB", "simCpsigStreamMaxCompTime"), ("SIM-MIB", "simCpsigStreamTriggerEnable"), ("SIM-MIB", "simCpsigStreamLastTrigger"), ("SIM-MIB", "simCpsigStreamLastEventId"), ("SIM-MIB", "simCpsigStreamLastServiceId"), ("SIM-MIB", "simCpsigStreamLastEsId"), ("SIM-MIB", "simCpsigStreamLastEcmPid"), ("SIM-MIB", "simCpsigStreamErrs"), ("SIM-MIB", "simCpsigStreamBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    simCpsigGroup = simCpsigGroup.setStatus('current')
if mibBuilder.loadTexts: simCpsigGroup.setDescription('A collection of objects providing C(P)SIG) infomation.')
simPsigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 1, 1, 2, 2, 6)).setObjects(("SIM-MIB", "simPsigIndex"), ("SIM-MIB", "simPsigType"), ("SIM-MIB", "simPsigTriggerSupport"), ("SIM-MIB", "simPsigNetworkId"), ("SIM-MIB", "simPsigONetworkId"), ("SIM-MIB", "simPsigTransStreamId"), ("SIM-MIB", "simPsigTSServices"), ("SIM-MIB", "simPsigConfigAdminState"), ("SIM-MIB", "simPsigConfigCustCasId"), ("SIM-MIB", "simPsigConfigMaxCompTime"), ("SIM-MIB", "simPsigConfigServiceId"), ("SIM-MIB", "simPsigConfigTriggerEnable"), ("SIM-MIB", "simPsigConfigEntryStatus"), ("SIM-MIB", "simPsigConfigCpsigType"), ("SIM-MIB", "simPsigConfigCADInsMode"), ("SIM-MIB", "simPsigEcmTrNetworkId"), ("SIM-MIB", "simPsigEcmTrONetworkId"), ("SIM-MIB", "simPsigEcmTrTransStreamId"), ("SIM-MIB", "simPsigEcmTrServiceId"), ("SIM-MIB", "simPsigEcmTrEsId"), ("SIM-MIB", "simPsigEcmTrType"), ("SIM-MIB", "simPsigEcmTrSuCasId"), ("SIM-MIB", "simPsigEcmTrEcmId"), ("SIM-MIB", "simPsigEcmTrEcmPid"), ("SIM-MIB", "simPsigEcmTrAccessCriteria"), ("SIM-MIB", "simPsigEvntTrNetworkId"), ("SIM-MIB", "simPsigEvntTrONetworkId"), ("SIM-MIB", "simPsigEvntTrTransStreamId"), ("SIM-MIB", "simPsigEvntTrServiceId"), ("SIM-MIB", "simPsigEvntTrEventId"), ("SIM-MIB", "simPsigEvntTrStartTime"), ("SIM-MIB", "simPsigEvntTrDuration"), ("SIM-MIB", "simPsigEvntTrPrivateData"), ("SIM-MIB", "simPsigFlowTrIndex"), ("SIM-MIB", "simPsigFlowTrType"), ("SIM-MIB", "simPsigFlowTrSuCasId"), ("SIM-MIB", "simPsigFlowTrFlowId"), ("SIM-MIB", "simPsigFlowTrFlowPID"), ("SIM-MIB", "simPsigDescInsIndex"), ("SIM-MIB", "simPsigDescInsAdminState"), ("SIM-MIB", "simPsigDescInsTrIndex"), ("SIM-MIB", "simPsigDescInsTrType"), ("SIM-MIB", "simPsigDescInsLocationId"), ("SIM-MIB", "simPsigDescInsNetworkId"), ("SIM-MIB", "simPsigDescInsONetworkId"), ("SIM-MIB", "simPsigDescInsTransStreamId"), ("SIM-MIB", "simPsigDescInsServiceId"), ("SIM-MIB", "simPsigDescInsElmStreamId"), ("SIM-MIB", "simPsigDescInsBouquetId"), ("SIM-MIB", "simPsigDescInsEventId"), ("SIM-MIB", "simPsigDescInsNetworkIdOther"), ("SIM-MIB", "simPsigDescInsONetworkId2loop"), ("SIM-MIB", "simPsigDescInsTransStreamId2OrO"), ("SIM-MIB", "simPsigDescInsDelayType"), ("SIM-MIB", "simPsigDescInsDelay"), ("SIM-MIB", "simPsigDescPrivDataSpfier"), ("SIM-MIB", "simPsigDescInsEntryStatus"), ("SIM-MIB", "simPsigDescInsDescIndex"), ("SIM-MIB", "simPsigDescInsDescAdminState"), ("SIM-MIB", "simPsigDescInsDescriptor"), ("SIM-MIB", "simPsigDescInsDescriptorStatus"), ("SIM-MIB", "simPsigDescInsDescEntryStatus"), ("SIM-MIB", "simPsigTblProvIndex"), ("SIM-MIB", "simPsigTblProvTableId"), ("SIM-MIB", "simPsigTblNetworkId"), ("SIM-MIB", "simPsigTblONetworkId"), ("SIM-MIB", "simPsigTblTransStreamId"), ("SIM-MIB", "simPsigTblServiceId"), ("SIM-MIB", "simPsigTblBouquetId"), ("SIM-MIB", "simPsigTblEventId"), ("SIM-MIB", "simPsigTblNetworkIdOther"), ("SIM-MIB", "simPsigTblONetworkId2loop"), ("SIM-MIB", "simPsigTblTransStreamId2OrO"), ("SIM-MIB", "simPsigTblSegmentNr"), ("SIM-MIB", "simPsigTblProvPart"), ("SIM-MIB", "simPsigTblProvPartNumber"), ("SIM-MIB", "simPsigPIDProvFlowType"), ("SIM-MIB", "simPsigPIDProvSuCasId"), ("SIM-MIB", "simPsigPIDProvFlowId"), ("SIM-MIB", "simPsigPIDProvFlowPID"), ("SIM-MIB", "simPsigPdTrNetworkId"), ("SIM-MIB", "simPsigPdTrONetworkId"), ("SIM-MIB", "simPsigPdTrTransStreamId"), ("SIM-MIB", "simPsigPdTrServiceId"), ("SIM-MIB", "simPsigPdTrEsId"), ("SIM-MIB", "simPsigPdTrType"), ("SIM-MIB", "simPsigPdTrSuCasId"), ("SIM-MIB", "simPsigPdTrPdId"), ("SIM-MIB", "simPsigPdTrPdPid"), ("SIM-MIB", "simPsigPdTrPdStreamType"), ("SIM-MIB", "simPsigPdTrPrivateData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    simPsigGroup = simPsigGroup.setStatus('current')
if mibBuilder.loadTexts: simPsigGroup.setDescription('A collection of objects providing (P)SIG) infomation.')
mibBuilder.exportSymbols("SIM-MIB", simDelayStop=simDelayStop, simPsigDescInsEntry=simPsigDescInsEntry, simMIBObjects=simMIBObjects, simPsigTriggerSupport=simPsigTriggerSupport, simEmOrPdCErrs=simEmOrPdCErrs, simPSI=simPSI, simPsigEcmTrNetworkId=simPsigEcmTrNetworkId, DelayType=DelayType, simPsigTblServiceId=simPsigTblServiceId, simEMMG=simEMMG, simEcmgEntry=simEcmgEntry, simEmOrPdLapIndex=simEmOrPdLapIndex, simEmOrPdCIpAddress=simEmOrPdCIpAddress, simPsigPdTrPdPid=simPsigPdTrPdPid, simPsigFlowTrIndex=simPsigFlowTrIndex, simEcmgFormat=simEcmgFormat, simCpsigStreamOnid=simCpsigStreamOnid, simMIBPrivateVersion=simMIBPrivateVersion, simEmOrPdCaMib=simEmOrPdCaMib, simTransitionDelayStop=simTransitionDelayStop, simEcmgSTable=simEcmgSTable, simPsigConfigEntryStatus=simPsigConfigEntryStatus, simCpsigCompliance=simCpsigCompliance, simPsigPdTrSuCasId=simPsigPdTrSuCasId, simCpsigStreamNid=simCpsigStreamNid, simPsigPIDProvFlowId=simPsigPIDProvFlowId, simEmOrPdSChannelId=simEmOrPdSChannelId, simEmOrPdCompliance=simEmOrPdCompliance, ECMGDelayValue=ECMGDelayValue, simCpsigCpsigPort=simCpsigCpsigPort, simPsigPdTrPrivateData=simPsigPdTrPrivateData, simACDelayStart=simACDelayStart, simEmOrPdLapGAdminState=simEmOrPdLapGAdminState, simCpsigStreamTriggerEnable=simCpsigStreamTriggerEnable, simEcmgCErrs=simEcmgCErrs, simPsigEvntTrStartTime=simPsigEvntTrStartTime, simEmOrPdLapGGroup=simEmOrPdLapGGroup, simEcmgSEntry=simEcmgSEntry, simPsigEvntTrNetworkId=simPsigEvntTrNetworkId, simCpsigStreamLastEcmPid=simCpsigStreamLastEcmPid, simPsigPIDProvSuCasId=simPsigPIDProvSuCasId, simEmOrPdLapTable=simEmOrPdLapTable, simEmOrPdLapStatus=simEmOrPdLapStatus, simEcmgChannelId=simEcmgChannelId, simPsigPdTrONetworkId=simPsigPdTrONetworkId, FlowId=FlowId, simEcmgTable=simEcmgTable, simPsigPdTrNetworkId=simPsigPdTrNetworkId, simPsigDescInsDescriptor=simPsigDescInsDescriptor, simEmOrPdSBytes=simEmOrPdSBytes, simEmOrPdTargetCpsig=simEmOrPdTargetCpsig, simPsigPdTrIndex=simPsigPdTrIndex, simEmOrPdLapGEntry=simEmOrPdLapGEntry, simCpsigPsigPort=simCpsigPsigPort, simPsigPIDProvFlowPID=simPsigPIDProvFlowPID, simPsigDescInsNetworkIdOther=simPsigDescInsNetworkIdOther, simPsigDescInsONetworkId=simPsigDescInsONetworkId, simPsigPdTrPdId=simPsigPdTrPdId, simCpsigStreamEntry=simCpsigStreamEntry, simPsigDescInsDelayType=simPsigDescInsDelayType, simPsigDescInsONetworkId2loop=simPsigDescInsONetworkId2loop, simCpsigStreamLastServiceId=simCpsigStreamLastServiceId, simEmOrPdLapMuxIpAddress=simEmOrPdLapMuxIpAddress, SectionTSPktFlag=SectionTSPktFlag, simEcmgStreamId=simEcmgStreamId, simEmOrPdChannelId=simEmOrPdChannelId, simPsigDescInsDescAdminState=simPsigDescInsDescAdminState, simPsigPIDProvFlowType=simPsigPIDProvFlowType, simTransitionDelayStart=simTransitionDelayStart, simPsigTSServices=simPsigTSServices, FlowType=FlowType, simPsigTblNetworkIdOther=simPsigTblNetworkIdOther, simPsigDescInsAdminState=simPsigDescInsAdminState, simEmOrPdIndex=simEmOrPdIndex, simPsigDescPrivDataSpfier=simPsigDescPrivDataSpfier, simEmOrPdCTable=simEmOrPdCTable, simGroups=simGroups, simCpsigCpsigIpAddress=simCpsigCpsigIpAddress, simMIBConformance=simMIBConformance, PYSNMP_MODULE_ID=simMIB, simEmOrPdEntry=simEmOrPdEntry, simPsigTblProvTable=simPsigTblProvTable, simPsigTblONetworkId2loop=simPsigTblONetworkId2loop, simEmOrPdCUIpAddress=simEmOrPdCUIpAddress, simCpsigGroup=simCpsigGroup, simPsigDescInsServiceId=simPsigDescInsServiceId, simPsigDescInsEventId=simPsigDescInsEventId, simEcmgErrs=simEcmgErrs, simEcmgCompliance=simEcmgCompliance, simPsigConfigCpsigType=simPsigConfigCpsigType, simEcmgEcmId=simEcmgEcmId, simEcmgCEntry=simEcmgCEntry, simPsigFlowTrFlowId=simPsigFlowTrFlowId, simCpsigCaMib=simCpsigCaMib, simPsigTblProvPartNumber=simPsigTblProvPartNumber, simPsigConfigServiceId=simPsigConfigServiceId, PsigType=PsigType, simEmOrPdGroup=simEmOrPdGroup, simPsigDescInsDescriptorStatus=simPsigDescInsDescriptorStatus, simEmOrPdLapMuxUPort=simEmOrPdLapMuxUPort, simCpsigTable=simCpsigTable, simPsigEntry=simPsigEntry, simPsigIndex=simPsigIndex, Signed16=Signed16, simMaxCompTime=simMaxCompTime, simPsigTblProvTableId=simPsigTblProvTableId, simLeadCW=simLeadCW, simEmOrPdLapAdminState=simEmOrPdLapAdminState, simIdent=simIdent, simCpsigCTstrms=simCpsigCTstrms, simPsigEvntTrTransStreamId=simPsigEvntTrTransStreamId, simPsigTblProvIndex=simPsigTblProvIndex, simPsigPdTrType=simPsigPdTrType, simEmOrPdSReqBwidth=simEmOrPdSReqBwidth, simPsigConfigCustCasId=simPsigConfigCustCasId, simPsigDescInsElmStreamId=simPsigDescInsElmStreamId, simEmOrPdCUPort=simEmOrPdCUPort, simPsigConfigEntry=simPsigConfigEntry, simPsigEvntTrIndex=simPsigEvntTrIndex, simPsigTblProvPart=simPsigTblProvPart, TriggerType=TriggerType, simPsigDescInsDescIndex=simPsigDescInsDescIndex, simPsigEvntTrEntry=simPsigEvntTrEntry, simEcmgIndex=simEcmgIndex, simPsigONetworkId=simPsigONetworkId, simMinCPDuration=simMinCPDuration, simMIB=simMIB, ECMTriggerType=ECMTriggerType, simCpsigStreamLastTrigger=simCpsigStreamLastTrigger, simECMG=simECMG, simPsigPIDProvEntry=simPsigPIDProvEntry, simCpsigStreamTable=simCpsigStreamTable, simEcmgSuCasId=simEcmgSuCasId, simPsigDescInsDescEntryStatus=simPsigDescInsDescEntryStatus, simPsigEcmTrType=simPsigEcmTrType, simCpsigChannelId=simCpsigChannelId, simPsigDescInsBouquetId=simPsigDescInsBouquetId, simEcmgCSuCasId=simEcmgCSuCasId, simEmOrPdCPort=simEmOrPdCPort, simCpsigStreamTStreamId=simCpsigStreamTStreamId, simPsigEvntTrONetworkId=simPsigEvntTrONetworkId, simPsigEvntTrTable=simPsigEvntTrTable, simEmOrPdLapGTable=simEmOrPdLapGTable, simPsigCompliance=simPsigCompliance, simEcmgTcpPort=simEcmgTcpPort, simEcmgIpAddress=simEcmgIpAddress, simCpsigPsigIpAddress=simCpsigPsigIpAddress, simCpsigEntry=simCpsigEntry, simPsigTable=simPsigTable, simPsigType=simPsigType, simPsigDescInsTable=simPsigDescInsTable, simEmOrPdDataType=simEmOrPdDataType, simMIBVersion=simMIBVersion, simCpsigSuperCasId=simCpsigSuperCasId, simPsigPdTrServiceId=simPsigPdTrServiceId, simEmOrPdLapMuxUIpAddress=simEmOrPdLapMuxUIpAddress, simEmOrPdLapCommType=simEmOrPdLapCommType, simPsigTblProvEntry=simPsigTblProvEntry, simACDelayStop=simACDelayStop, simPsigTblSegmentNr=simPsigTblSegmentNr, simCpsigIndex=simCpsigIndex, simPsigPdTrPdStreamType=simPsigPdTrPdStreamType, simPsigEcmTrServiceId=simPsigEcmTrServiceId, simPsigNetworkId=simPsigNetworkId, simPsigEvntTrPrivateData=simPsigEvntTrPrivateData, simPsigDescInsEntryStatus=simPsigDescInsEntryStatus, simCpsigErrs=simCpsigErrs, simEmOrPdCommType=simEmOrPdCommType, simEmOrPdDataId=simEmOrPdDataId, simPsigConfigIndex=simPsigConfigIndex, simCpsigCTable=simCpsigCTable, simCpsigCErrs=simCpsigCErrs, ProvTableId=ProvTableId, simEmOrPdBwidth=simEmOrPdBwidth, simPsigTblONetworkId=simPsigTblONetworkId, simDelayStart=simDelayStart, simEcmgSErrs=simEcmgSErrs, ECMGChannelId=ECMGChannelId, simPsigDescInsLocationId=simPsigDescInsLocationId, simPsigDescInsDelay=simPsigDescInsDelay, simPsigEvntTrServiceId=simPsigEvntTrServiceId, simEmOrPdLapMuxPort=simEmOrPdLapMuxPort, simEcmgCStreams=simEcmgCStreams, simPsigDescInsTrType=simPsigDescInsTrType, simPsigFlowTrSuCasId=simPsigFlowTrSuCasId, simEcmgCScsTcpPort=simEcmgCScsTcpPort, simEmOrPdLapEntry=simEmOrPdLapEntry, simPsigEcmTrONetworkId=simPsigEcmTrONetworkId, simPsigEcmTrIndex=simPsigEcmTrIndex, simEmOrPdClientId=simEmOrPdClientId, simIdentGroup=simIdentGroup, simPsigDescInsDescTable=simPsigDescInsDescTable, simCpsigCEntry=simCpsigCEntry, simCpsigStreamLastEventId=simCpsigStreamLastEventId, EMMGCommCapability=EMMGCommCapability, simEcmgCScsIpAddress=simEcmgCScsIpAddress, simPsigEcmTrSuCasId=simPsigEcmTrSuCasId, simPsigEcmTrEcmPid=simPsigEcmTrEcmPid, simEmOrPdSEntry=simEmOrPdSEntry, simCpsigChannels=simCpsigChannels, simCpsigStreamId=simCpsigStreamId, simPsigDescInsDescEntry=simPsigDescInsDescEntry, simPsigTblEventId=simPsigTblEventId, simPsigGroup=simPsigGroup, EMMGChannelId=EMMGChannelId, simEmOrPdErrs=simEmOrPdErrs, simPsigEcmTrAccessCriteria=simPsigEcmTrAccessCriteria, simEmOrPdCFormat=simEmOrPdCFormat, simPsigTblTransStreamId=simPsigTblTransStreamId, simPsigEvntTrEventId=simPsigEvntTrEventId, simEmOrPdTable=simEmOrPdTable, simCpsigStreamBytes=simCpsigStreamBytes, simEcmgCCwPrs=simEcmgCCwPrs, simEcmgCTable=simEcmgCTable, simPsigConfigAdminState=simPsigConfigAdminState, simPsigPdTrEntry=simPsigPdTrEntry, simEmOrPdLapGStatus=simEmOrPdLapGStatus, ECMGCSuCasId=ECMGCSuCasId, simPsigConfigMaxCompTime=simPsigConfigMaxCompTime, simEcmgGroup=simEcmgGroup, simEcmgSCwPrs=simEcmgSCwPrs, simPsigFlowTrFlowPID=simPsigFlowTrFlowPID, simPsigConfigTriggerEnable=simPsigConfigTriggerEnable, simECMRepPeriod=simECMRepPeriod, simCWPerMsg=simCWPerMsg, simPsigPdTrTable=simPsigPdTrTable, simCpsigStreamMaxCompTime=simCpsigStreamMaxCompTime, simCPSI=simCPSI, simEmOrPdLapGroup=simEmOrPdLapGroup, DescriptorStatus=DescriptorStatus, simPsigTransStreamId=simPsigTransStreamId, simPsigDescInsNetworkId=simPsigDescInsNetworkId, simPsigEcmTrTable=simPsigEcmTrTable, simEcmgChannels=simEcmgChannels, simCpsigStreamErrs=simCpsigStreamErrs, simPsigEvntTrDuration=simPsigEvntTrDuration, simPsigDescInsIndex=simPsigDescInsIndex, simSofwareVersion=simSofwareVersion, simPsigTblTransStreamId2OrO=simPsigTblTransStreamId2OrO, simPsigEcmTrEntry=simPsigEcmTrEntry, simEmOrPdCommCapability=simEmOrPdCommCapability, simPsigFlowTrType=simPsigFlowTrType, simPsigDescInsTransStreamId=simPsigDescInsTransStreamId, SuperCasId=SuperCasId, simPsigTblNetworkId=simPsigTblNetworkId, StreamId=StreamId, EMMGCommType=EMMGCommType, simAgentVersion=simAgentVersion, simEmOrPdStreamId=simEmOrPdStreamId, simPsigConfigTable=simPsigConfigTable, simPsigDescInsTransStreamId2OrO=simPsigDescInsTransStreamId2OrO, simPsigPdTrTransStreamId=simPsigPdTrTransStreamId, AdministrativeState=AdministrativeState, simEcmgCaMib=simEcmgCaMib)
mibBuilder.exportSymbols("SIM-MIB", simPsigEcmTrTransStreamId=simPsigEcmTrTransStreamId, simEcmgTargetCpsig=simEcmgTargetCpsig, EMMGDataType=EMMGDataType, simMaxStreams=simMaxStreams, simEmOrPdCEntry=simEmOrPdCEntry, simPsigConfigCADInsMode=simPsigConfigCADInsMode, simCpsigStreamLastEsId=simCpsigStreamLastEsId, simPsigEcmTrEcmId=simPsigEcmTrEcmId, simEcmgCwPrs=simEcmgCwPrs, InsertLocation=InsertLocation, simPsigPIDProvTable=simPsigPIDProvTable, simPsigEcmTrEsId=simPsigEcmTrEsId, simEmOrPdSErrs=simEmOrPdSErrs, simPsigTblBouquetId=simPsigTblBouquetId, simPsigPdTrEsId=simPsigPdTrEsId, simPsigDescInsTrIndex=simPsigDescInsTrIndex, simEmOrPdSTable=simEmOrPdSTable, simCpsigCSstrms=simCpsigCSstrms, simPsigFlowTrEntry=simPsigFlowTrEntry, simPsigFlowTrTable=simPsigFlowTrTable, CaDescInsMode=CaDescInsMode, simCompliances=simCompliances, simEcmgSLastCp=simEcmgSLastCp)
