#
# PySNMP MIB module NBS-SIGCOND-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/mrv/NBS-SIGCOND-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 14:05:40 2024
# On host fv-az914-826 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
InterfaceIndex, ifAlias = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifAlias")
nbs, NbsTcMHz, NbsTcMilliDb = mibBuilder.importSymbols("NBS-MIB", "nbs", "NbsTcMHz", "NbsTcMilliDb")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, MibIdentifier, Counter32, iso, Bits, Unsigned32, ObjectIdentity, ModuleIdentity, TimeTicks, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "MibIdentifier", "Counter32", "iso", "Bits", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "NotificationType", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nbsSigCondMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 227))
if mibBuilder.loadTexts: nbsSigCondMib.setLastUpdated('201707270000Z')
if mibBuilder.loadTexts: nbsSigCondMib.setOrganization('NBS')
if mibBuilder.loadTexts: nbsSigCondMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsSigCondMib.setDescription('Signal Conditioning mib')
nbsSigCondVoaPortGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 1))
if mibBuilder.loadTexts: nbsSigCondVoaPortGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortGrp.setDescription('Variable Optical Attenuation at the port level.')
nbsSigCondVoaChannelGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 2))
if mibBuilder.loadTexts: nbsSigCondVoaChannelGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaChannelGrp.setDescription('Variable Optical Attenuation at the channel level.')
nbsSigCondRamanGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 3))
if mibBuilder.loadTexts: nbsSigCondRamanGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRamanGrp.setDescription('Raman amplifier information for the port.')
nbsSigCondEqualizeGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 20))
if mibBuilder.loadTexts: nbsSigCondEqualizeGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEqualizeGrp.setDescription('Management info for equalizing power levels among channels\n       within a WDM port')
nbsSigCondRedundGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 30))
if mibBuilder.loadTexts: nbsSigCondRedundGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRedundGrp.setDescription('Management info for power level based redundancy')
nbsSigCondPortGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 40))
if mibBuilder.loadTexts: nbsSigCondPortGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortGrp.setDescription('Power readings from the port.')
nbsSigCondChannelGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 50))
if mibBuilder.loadTexts: nbsSigCondChannelGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondChannelGrp.setDescription('Signal info for WDM channels within a WDM port')
nbsSigCondVodPortGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 60))
if mibBuilder.loadTexts: nbsSigCondVodPortGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortGrp.setDescription('Dispersion compensation at the port level.')
nbsSigCondTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 200))
if mibBuilder.loadTexts: nbsSigCondTraps.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondTraps.setDescription('SNMP Traps or Notifications')
nbsSigCondEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 200, 0))
if mibBuilder.loadTexts: nbsSigCondEvent.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEvent.setDescription('SNMP Traps or Notifications')
nbsSigCondVoaPortTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 227, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVoaPortTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortTableSize.setDescription('The number of ports supporting variable optical attenuation\n           at the port level.')
nbsSigCondVoaPortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 227, 1, 2), )
if mibBuilder.loadTexts: nbsSigCondVoaPortTable.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortTable.setDescription('List of ports supporting variable optical attenuation at the\n           port level.')
nbsSigCondVoaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 227, 1, 2, 1), ).setIndexNames((0, "NBS-SIGCOND-MIB", "nbsSigCondVoaPortIfIndex"))
if mibBuilder.loadTexts: nbsSigCondVoaPortEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortEntry.setDescription('')
nbsSigCondVoaPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsSigCondVoaPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortIfIndex.setDescription('The Mib2 ifIndex of the attenuable port.')
nbsSigCondVoaPortRxAttenuAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondVoaPortRxAttenuAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortRxAttenuAdmin.setDescription('Persistent and immediately updated.  User-requested\n           attenuation to be applied to received signal, expressed in\n           millidecibels (mdB).\n           Not supported value: -200000')
nbsSigCondVoaPortRxAttenuOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVoaPortRxAttenuOper.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortRxAttenuOper.setDescription('Attenuation actually being applied to received signal, in\n           millidecibels (mdB).\n           Not supported value: -200000')
nbsSigCondVoaPortTxAttenuAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondVoaPortTxAttenuAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortTxAttenuAdmin.setDescription('Persistent and immediately updated.  User-requested\n           attenuation to be applied before transmitting signal,\n           expressed in millidecibels (mdB).\n           Not supported value: -200000')
nbsSigCondVoaPortTxAttenuOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVoaPortTxAttenuOper.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortTxAttenuOper.setDescription('Attenuation actually being applied before transmitting\n           signal, in millidecibels (mdB).\n           Not supported value: -200000')
nbsSigCondVoaChannelRangeTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 227, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVoaChannelRangeTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaChannelRangeTableSize.setDescription('The number of mux ports supporting variable optical\n           attenuation at the channel level.')
nbsSigCondVoaChannelRangeTable = MibTable((1, 3, 6, 1, 4, 1, 629, 227, 2, 2), )
if mibBuilder.loadTexts: nbsSigCondVoaChannelRangeTable.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaChannelRangeTable.setDescription('The channel attenuation values supported on this port.')
nbsSigCondVoaChannelRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 227, 2, 2, 1), ).setIndexNames((0, "NBS-SIGCOND-MIB", "nbsSigCondVoaChannelRangeIfIndex"))
if mibBuilder.loadTexts: nbsSigCondVoaChannelRangeEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaChannelRangeEntry.setDescription('')
nbsSigCondVoaChannelRangeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsSigCondVoaChannelRangeIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaChannelRangeIfIndex.setDescription('The Mib2 ifIndex of the mux port.')
nbsSigCondVoaChannelRangeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 2, 2, 1, 2), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVoaChannelRangeMin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaChannelRangeMin.setDescription('The lowest channel attenuation value supported by this mux\n           port, expressed in millidecibels (mdB).\n\n           This is the smallest attenuation supported.')
nbsSigCondVoaChannelRangeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 2, 2, 1, 3), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVoaChannelRangeMax.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaChannelRangeMax.setDescription('The greatest channel attenuation value supported by this mux\n           port, expressed in millidecibels (mdB).\n\n           This is the largest attenuation supported.')
nbsSigCondVoaChannelRangeIncr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 2, 2, 1, 4), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVoaChannelRangeIncr.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaChannelRangeIncr.setDescription('The precision of the VOA, expressed in\n           millidecibels (mdB).\n\n           The minimum difference between attenuation values.')
nbsSigCondRamanTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 227, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondRamanTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRamanTableSize.setDescription('The number of raman ports in this system.')
nbsSigCondRamanTable = MibTable((1, 3, 6, 1, 4, 1, 629, 227, 3, 2), )
if mibBuilder.loadTexts: nbsSigCondRamanTable.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRamanTable.setDescription('Table of Raman readings.')
nbsSigCondRamanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 227, 3, 2, 1), ).setIndexNames((0, "NBS-SIGCOND-MIB", "nbsSigCondRamanIfIndex"))
if mibBuilder.loadTexts: nbsSigCondRamanEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRamanEntry.setDescription('Raman readings on an individual port.')
nbsSigCondRamanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsSigCondRamanIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRamanIfIndex.setDescription('The Mib2 ifIndex of the Raman port')
nbsSigCondRamanPumpPwrAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondRamanPumpPwrAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRamanPumpPwrAdmin.setDescription('Persistent and immediately updated.  User-requested pump\n           power,  in microwatts (uW).\n           User interfaces should show this in millWatts (mW).\n           Not supported value:  -1')
nbsSigCondRamanPumpPwrOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondRamanPumpPwrOper.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRamanPumpPwrOper.setDescription('Agent reported pump power, in microwatts (uW).\n           User interfaces should show this in millWatts (mW).\n           Not supported value:  -1')
nbsSigCondEqualizeTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 227, 20, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondEqualizeTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEqualizeTableSize.setDescription('The number of entries in nbsSigCondEqualizeTable.')
nbsSigCondEqualizeTable = MibTable((1, 3, 6, 1, 4, 1, 629, 227, 20, 2), )
if mibBuilder.loadTexts: nbsSigCondEqualizeTable.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEqualizeTable.setDescription('List of WDM ports supporting power level equalization.')
nbsSigCondEqualizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 227, 20, 2, 1), ).setIndexNames((0, "NBS-SIGCOND-MIB", "nbsSigCondEqualizeIfIndex"))
if mibBuilder.loadTexts: nbsSigCondEqualizeEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEqualizeEntry.setDescription('Equalization parameters and settings')
nbsSigCondEqualizeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 20, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondEqualizeIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEqualizeIfIndex.setDescription("The Mib2 ifIndex of this channel's WDM port")
nbsSigCondEqualizeState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 20, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondEqualizeState.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEqualizeState.setDescription('Used to enable or disable channel equalization on this port.\n\n        The value disabled(2) disables the feature.  No attempt to\n        equalize power levels will be made, and no equalization events\n        will be triggered.\n\n        The value enabled(3) enables the feature.  A best-effort\n        attempt to keep the port signal within the\n        nbsSigCondEqualizeDesired range will be made.  Equalization\n        events will be triggered if the power cannot be kept within\n        the nbsSigCondEqualizeDesired range.\n\n        If this port does not support equalization, this object will\n        report notSupported (1), and any SET requests to this object\n        will be rejected.')
nbsSigCondEqualizeLimitMin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 20, 2, 1, 11), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondEqualizeLimitMin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEqualizeLimitMin.setDescription('The lowest channel TxPower setting the equalizer supports')
nbsSigCondEqualizeLimitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 20, 2, 1, 12), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondEqualizeLimitMax.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEqualizeLimitMax.setDescription('The highest channel TxPower setting the equalizer supports')
nbsSigCondEqualizeDesiredMin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 20, 2, 1, 21), NbsTcMilliDb().clone(-50000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondEqualizeDesiredMin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEqualizeDesiredMin.setDescription("The user-settable minimum channel TxPower level.\n\n        Allowed values are from nbsSigCondEqualizeLimitMin to\n        nbsSigCondEqualizeLimitMax, inclusive.\n\n        Equalizer must attempt to maintain the channels' signal at or\n        above this level.  The event nbsSigCondEventEqualizeTooLow\n        indicates that it was unable to meet the desired minimum\n        signal strength for a given channel.")
nbsSigCondEqualizeDesiredMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 20, 2, 1, 22), NbsTcMilliDb()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondEqualizeDesiredMax.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEqualizeDesiredMax.setDescription("The user-settable maximum channel TxPower level.\n\n        Allowed values are from nbsSigCondEqualizeLimitMin to\n        nbsSigCondEqualizeLimitMax, inclusive.\n\n        Equalizer must attempt to maintain the channels' signal at or\n        below this level.  The event nbsSigCondEventEqualizeTooHigh\n        indicates that it was unable to meet the desired maximum\n        signal strength for a given channel.")
nbsSigCondEqualizeDesiredVal = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 20, 2, 1, 23), NbsTcMilliDb().clone(-25000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondEqualizeDesiredVal.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEqualizeDesiredVal.setDescription("Equalizer must attempt to maintain the channels' signal at\n        this level.\n\n        Allowed values are from nbsSigCondEqualizeLimitMin to\n        nbsSigCondEqualizeLimitMax, inclusive.")
nbsSigCondRedundTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 227, 30, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondRedundTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRedundTableSize.setDescription('The number of entries in nbsSigCondRedund.')
nbsSigCondRedundTable = MibTable((1, 3, 6, 1, 4, 1, 629, 227, 30, 2), )
if mibBuilder.loadTexts: nbsSigCondRedundTable.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRedundTable.setDescription('List of ports supporting power level redundancy.')
nbsSigCondRedundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 227, 30, 2, 1), ).setIndexNames((0, "NBS-SIGCOND-MIB", "nbsSigCondRedundIfIndex"))
if mibBuilder.loadTexts: nbsSigCondRedundEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRedundEntry.setDescription('Redundancy  settings')
nbsSigCondRedundIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 30, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondRedundIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRedundIfIndex.setDescription("The Mib2 ifIndex of this channel's Redundancy port")
nbsSigCondRedundLimitMin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 30, 2, 1, 5), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondRedundLimitMin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRedundLimitMin.setDescription('The lowest channel Power setting')
nbsSigCondRedundLimitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 30, 2, 1, 8), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondRedundLimitMax.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRedundLimitMax.setDescription('The highest channel Power setting')
nbsSigCondRedundDesiredMin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 30, 2, 1, 10), NbsTcMilliDb()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondRedundDesiredMin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRedundDesiredMin.setDescription('The lowest channel Power setting before the redundancy kicks in')
nbsSigCondRedundDesiredMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 30, 2, 1, 15), NbsTcMilliDb()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondRedundDesiredMax.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRedundDesiredMax.setDescription('The highest channel Power setting before the redundancy kicks in')
nbsSigCondPortTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 227, 40, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondPortTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortTableSize.setDescription('The number of entries in nbsSigCondPortTable.')
nbsSigCondPortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 227, 40, 2), )
if mibBuilder.loadTexts: nbsSigCondPortTable.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortTable.setDescription('Table of VOA and VGA ports.')
nbsSigCondPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 227, 40, 2, 1), ).setIndexNames((0, "NBS-SIGCOND-MIB", "nbsSigCondPortIfIndex"))
if mibBuilder.loadTexts: nbsSigCondPortEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortEntry.setDescription('')
nbsSigCondPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 40, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsSigCondPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortIfIndex.setDescription('The Mib2 ifIndex of the port')
nbsSigCondPortRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 40, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondPortRxPower.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortRxPower.setDescription('Measured receiver power, in millidecibels (mdBm).\n           User interfaces should show this in decibels (dBm).\n           Not supported value:  -100000')
nbsSigCondPortTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 40, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondPortTxPower.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortTxPower.setDescription('Measured transmitter power, in millidecibels (mdBm).\n           User interfaces should show this in decibels (dBm).\n           Not supported value:  -100000')
nbsSigCondPortReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 40, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondPortReflection.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortReflection.setDescription('Measured back reflection power, in millidecibels (mdBm).\n           User interfaces should show this in decibels (dBm).\n           Not supported value:  -100000')
nbsSigCondPortRxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 40, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondPortRxPowerMin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortRxPowerMin.setDescription('Measured minimum receiver power, in millidecibels (mdBm).\n           User interfaces should show this in decibels (dBm).\n           Not supported value:  -100000')
nbsSigCondPortRxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 40, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondPortRxPowerMax.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortRxPowerMax.setDescription('Measured maximum receiver power, in millidecibels (mdBm).\n           User interfaces should show this in decibels (dBm).\n           Not supported value:  -100000')
nbsSigCondPortNoiseFigure = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 40, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondPortNoiseFigure.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortNoiseFigure.setDescription('Measured Noise Figure value, in millidecibels (mdB).\n           User interfaces should show this in decibels (dB).\n           Not supported value: -100000')
nbsSigCondChannelTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 227, 50, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondChannelTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondChannelTableSize.setDescription('The number of entries in nbsSigCondChannelTable.')
nbsSigCondChannelTable = MibTable((1, 3, 6, 1, 4, 1, 629, 227, 50, 2), )
if mibBuilder.loadTexts: nbsSigCondChannelTable.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondChannelTable.setDescription('WDM channels within a mux port')
nbsSigCondChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 227, 50, 2, 1), ).setIndexNames((0, "NBS-SIGCOND-MIB", "nbsSigCondChannelIfIndex"), (0, "NBS-SIGCOND-MIB", "nbsSigCondChannelCenterline"))
if mibBuilder.loadTexts: nbsSigCondChannelEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondChannelEntry.setDescription('')
nbsSigCondChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 50, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsSigCondChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondChannelIfIndex.setDescription("The Mib2 ifIndex of this channel's mux port")
nbsSigCondChannelCenterline = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 50, 2, 1, 2), NbsTcMHz()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondChannelCenterline.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondChannelCenterline.setDescription('The center frequency of this channel, in MHz')
nbsSigCondChannelRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 50, 2, 1, 11), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondChannelRxPower.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondChannelRxPower.setDescription('The dynamically measured or calculated receive signal strength')
nbsSigCondChannelTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 50, 2, 1, 12), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondChannelTxPower.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondChannelTxPower.setDescription('The dynamically measured or calculated transmit signal\n        strength')
nbsSigCondChannelTxAttenu = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 50, 2, 1, 14), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondChannelTxAttenu.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondChannelTxAttenu.setDescription('The actual attenuation applied to this channel, possibly\n        representing changes made by the equalization process if\n        nbsSigCondEqualizeState is enabled for this IfIndex.')
nbsSigCondChannelRxAttenu = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 50, 2, 1, 15), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondChannelRxAttenu.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondChannelRxAttenu.setDescription('The actual attenuation applied to this channel, possibly\n        representing changes made by the equalization process if\n        nbsSigCondEqualizeState is enabled for this IfIndex.')
nbsSigCondVodPortTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 227, 60, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVodPortTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortTableSize.setDescription('The number of ports supporting variable optical dispersion\n           at the port level.')
nbsSigCondVodPortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 227, 60, 2), )
if mibBuilder.loadTexts: nbsSigCondVodPortTable.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortTable.setDescription('List of ports supporting variable optical attenuation at the\n           port level.')
nbsSigCondVodPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 227, 60, 2, 1), ).setIndexNames((0, "NBS-SIGCOND-MIB", "nbsSigCondVodPortIfIndex"))
if mibBuilder.loadTexts: nbsSigCondVodPortEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortEntry.setDescription('')
nbsSigCondVodPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 60, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsSigCondVodPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortIfIndex.setDescription('The Mib2 ifIndex of the dispersion compensation port.')
nbsSigCondVodPortDispersionMin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 60, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionMin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionMin.setDescription('Minimum allowed dispersion compensation in ps/nm.\n\n           Not supported value: 0x80000000')
nbsSigCondVodPortDispersionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 60, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionMax.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionMax.setDescription('Maximum allowed dispersion compensation in ps/nm.\n\n           Not supported value: 0x80000000')
nbsSigCondVodPortDispersionAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 60, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionAdmin.setDescription('Desired dispersion compensation in ps/nm.\n\n           Not supported value: 0x80000000')
nbsSigCondVodPortDispersionOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 60, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionOper.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionOper.setDescription('Actual dispersion in ps/nm\n\n           Not supported value: 0x80000000')
nbsSigCondVodPortDispersionGridOffsetCenter = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 60, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionGridOffsetCenter.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionGridOffsetCenter.setDescription('The center frequency of the offset, in GigaHertz\n           (GHz), unless FreqExponent != 9.\n\n           Not supported value: 0')
nbsSigCondVodPortDispersionGridOffsetMin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 60, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000)).clone(-100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionGridOffsetMin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionGridOffsetMin.setDescription('In GigaHertz (GHz), unless FreqExponent != 9.\n\n           Not supported value: 0x80000000')
nbsSigCondVodPortDispersionGridOffsetMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 60, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000)).clone(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionGridOffsetMax.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionGridOffsetMax.setDescription('In GigaHertz (GHz), unless FreqExponent != 9.\n\n           Not supported value: 0x80000000')
nbsSigCondVodPortDispersionGridOffsetStep = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 60, 2, 1, 13), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionGridOffsetStep.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionGridOffsetStep.setDescription('The spacing of the allowable grid offsets that this port\n           supports, in GigaHertz (GHz), unless FreqExponent != 9.\n\n           Not supported value: 0')
nbsSigCondVodPortDispersionGridOffsetExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 60, 2, 1, 14), Integer32().clone(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionGridOffsetExponent.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionGridOffsetExponent.setDescription('The exponent of all the GridOffset values (including\n           GridOffsetStep).\n\n           9 (the default) indicates all units are in GigaHertz (GHz).')
nbsSigCondVodPortDispersionGridOffsetAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 60, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionGridOffsetAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionGridOffsetAdmin.setDescription('In GigaHertz (GHz), unless FreqExponent != 9.\n\n           Not supported value: 0x80000000')
nbsSigCondVodPortDispersionGridOffsetOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 60, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionGridOffsetOper.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVodPortDispersionGridOffsetOper.setDescription('In GigaHertz (GHz), unless FreqExponent != 9.\n\n           Not supported value: 0x80000000')
nbsSigCondEventEqualizeOk = NotificationType((1, 3, 6, 1, 4, 1, 629, 227, 200, 0, 20)).setObjects(("NBS-SIGCOND-MIB", "nbsSigCondEqualizeIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-SIGCOND-MIB", "nbsSigCondChannelCenterline"), ("NBS-SIGCOND-MIB", "nbsSigCondChannelTxPower"), ("NBS-SIGCOND-MIB", "nbsSigCondEqualizeDesiredMin"), ("NBS-SIGCOND-MIB", "nbsSigCondEqualizeDesiredMax"))
if mibBuilder.loadTexts: nbsSigCondEventEqualizeOk.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEventEqualizeOk.setDescription('Sent when equalizer becomes able to maintain TxPower within the\n        user-specified nbsSigCondEqualizeDesired range.\n\n        This Notification is of severity ERROR, which means it should\n        be emitted unless disabled or nbsCmmcSysTrapTblEntLevel is set\n        to a severity worse than error(3).')
nbsSigCondEventEqualizeTooLow = NotificationType((1, 3, 6, 1, 4, 1, 629, 227, 200, 0, 21)).setObjects(("NBS-SIGCOND-MIB", "nbsSigCondEqualizeIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-SIGCOND-MIB", "nbsSigCondChannelCenterline"), ("NBS-SIGCOND-MIB", "nbsSigCondChannelTxPower"), ("NBS-SIGCOND-MIB", "nbsSigCondEqualizeDesiredMin"))
if mibBuilder.loadTexts: nbsSigCondEventEqualizeTooLow.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEventEqualizeTooLow.setDescription('Sent when equalizer becomes unable to maintain TxPower at or\n        above nbsSigCondEqualizeDesiredMin.\n\n        This Notification is of severity ERROR, which means it should\n        be emitted unless disabled or nbsCmmcSysTrapTblEntLevel is set\n        to a severity worse than error(3).')
nbsSigCondEventEqualizeTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 629, 227, 200, 0, 22)).setObjects(("NBS-SIGCOND-MIB", "nbsSigCondEqualizeIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-SIGCOND-MIB", "nbsSigCondChannelCenterline"), ("NBS-SIGCOND-MIB", "nbsSigCondChannelTxPower"), ("NBS-SIGCOND-MIB", "nbsSigCondEqualizeDesiredMax"))
if mibBuilder.loadTexts: nbsSigCondEventEqualizeTooHigh.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondEventEqualizeTooHigh.setDescription('Sent when equalizer becomes unable to maintain TxPower at or\n        below nbsSigCondEqualizeDesiredMax.\n\n        This Notification is of severity ERROR, which means it should\n        be emitted unless disabled or nbsCmmcSysTrapTblEntLevel is set\n        to a severity worse than error(3).')
mibBuilder.exportSymbols("NBS-SIGCOND-MIB", nbsSigCondChannelGrp=nbsSigCondChannelGrp, nbsSigCondTraps=nbsSigCondTraps, nbsSigCondEqualizeTableSize=nbsSigCondEqualizeTableSize, nbsSigCondVoaPortTable=nbsSigCondVoaPortTable, nbsSigCondVoaChannelRangeIfIndex=nbsSigCondVoaChannelRangeIfIndex, nbsSigCondPortNoiseFigure=nbsSigCondPortNoiseFigure, nbsSigCondPortTxPower=nbsSigCondPortTxPower, nbsSigCondRamanTable=nbsSigCondRamanTable, nbsSigCondPortRxPowerMax=nbsSigCondPortRxPowerMax, nbsSigCondRamanTableSize=nbsSigCondRamanTableSize, nbsSigCondPortReflection=nbsSigCondPortReflection, nbsSigCondRedundGrp=nbsSigCondRedundGrp, nbsSigCondRedundTableSize=nbsSigCondRedundTableSize, nbsSigCondVoaPortTxAttenuAdmin=nbsSigCondVoaPortTxAttenuAdmin, nbsSigCondPortRxPower=nbsSigCondPortRxPower, nbsSigCondRamanPumpPwrOper=nbsSigCondRamanPumpPwrOper, nbsSigCondVoaPortEntry=nbsSigCondVoaPortEntry, nbsSigCondVoaChannelRangeMin=nbsSigCondVoaChannelRangeMin, nbsSigCondVodPortIfIndex=nbsSigCondVodPortIfIndex, nbsSigCondEqualizeState=nbsSigCondEqualizeState, nbsSigCondEqualizeLimitMax=nbsSigCondEqualizeLimitMax, nbsSigCondVodPortGrp=nbsSigCondVodPortGrp, nbsSigCondPortEntry=nbsSigCondPortEntry, nbsSigCondVodPortDispersionGridOffsetOper=nbsSigCondVodPortDispersionGridOffsetOper, nbsSigCondEventEqualizeTooHigh=nbsSigCondEventEqualizeTooHigh, nbsSigCondVoaChannelRangeTable=nbsSigCondVoaChannelRangeTable, nbsSigCondEqualizeDesiredMax=nbsSigCondEqualizeDesiredMax, nbsSigCondEqualizeTable=nbsSigCondEqualizeTable, nbsSigCondChannelRxAttenu=nbsSigCondChannelRxAttenu, nbsSigCondRedundTable=nbsSigCondRedundTable, nbsSigCondChannelTable=nbsSigCondChannelTable, nbsSigCondVodPortDispersionMax=nbsSigCondVodPortDispersionMax, nbsSigCondRedundDesiredMax=nbsSigCondRedundDesiredMax, nbsSigCondEventEqualizeTooLow=nbsSigCondEventEqualizeTooLow, nbsSigCondRamanGrp=nbsSigCondRamanGrp, nbsSigCondRedundIfIndex=nbsSigCondRedundIfIndex, nbsSigCondPortTableSize=nbsSigCondPortTableSize, nbsSigCondRedundLimitMax=nbsSigCondRedundLimitMax, nbsSigCondVodPortDispersionOper=nbsSigCondVodPortDispersionOper, nbsSigCondRedundDesiredMin=nbsSigCondRedundDesiredMin, nbsSigCondVoaChannelRangeEntry=nbsSigCondVoaChannelRangeEntry, nbsSigCondEqualizeEntry=nbsSigCondEqualizeEntry, nbsSigCondEventEqualizeOk=nbsSigCondEventEqualizeOk, nbsSigCondVodPortTableSize=nbsSigCondVodPortTableSize, nbsSigCondChannelTxAttenu=nbsSigCondChannelTxAttenu, nbsSigCondVoaPortTableSize=nbsSigCondVoaPortTableSize, PYSNMP_MODULE_ID=nbsSigCondMib, nbsSigCondRamanIfIndex=nbsSigCondRamanIfIndex, nbsSigCondRamanPumpPwrAdmin=nbsSigCondRamanPumpPwrAdmin, nbsSigCondRedundLimitMin=nbsSigCondRedundLimitMin, nbsSigCondEqualizeDesiredMin=nbsSigCondEqualizeDesiredMin, nbsSigCondChannelRxPower=nbsSigCondChannelRxPower, nbsSigCondPortGrp=nbsSigCondPortGrp, nbsSigCondVodPortDispersionGridOffsetStep=nbsSigCondVodPortDispersionGridOffsetStep, nbsSigCondEqualizeDesiredVal=nbsSigCondEqualizeDesiredVal, nbsSigCondVoaPortIfIndex=nbsSigCondVoaPortIfIndex, nbsSigCondEvent=nbsSigCondEvent, nbsSigCondVoaPortRxAttenuOper=nbsSigCondVoaPortRxAttenuOper, nbsSigCondVoaPortRxAttenuAdmin=nbsSigCondVoaPortRxAttenuAdmin, nbsSigCondPortIfIndex=nbsSigCondPortIfIndex, nbsSigCondChannelTxPower=nbsSigCondChannelTxPower, nbsSigCondVodPortEntry=nbsSigCondVodPortEntry, nbsSigCondEqualizeLimitMin=nbsSigCondEqualizeLimitMin, nbsSigCondVoaPortGrp=nbsSigCondVoaPortGrp, nbsSigCondVoaChannelRangeMax=nbsSigCondVoaChannelRangeMax, nbsSigCondVodPortDispersionGridOffsetCenter=nbsSigCondVodPortDispersionGridOffsetCenter, nbsSigCondVodPortDispersionGridOffsetExponent=nbsSigCondVodPortDispersionGridOffsetExponent, nbsSigCondChannelIfIndex=nbsSigCondChannelIfIndex, nbsSigCondPortTable=nbsSigCondPortTable, nbsSigCondChannelTableSize=nbsSigCondChannelTableSize, nbsSigCondChannelCenterline=nbsSigCondChannelCenterline, nbsSigCondEqualizeGrp=nbsSigCondEqualizeGrp, nbsSigCondVoaChannelRangeTableSize=nbsSigCondVoaChannelRangeTableSize, nbsSigCondVodPortDispersionGridOffsetAdmin=nbsSigCondVodPortDispersionGridOffsetAdmin, nbsSigCondVodPortDispersionGridOffsetMin=nbsSigCondVodPortDispersionGridOffsetMin, nbsSigCondPortRxPowerMin=nbsSigCondPortRxPowerMin, nbsSigCondVoaChannelRangeIncr=nbsSigCondVoaChannelRangeIncr, nbsSigCondRamanEntry=nbsSigCondRamanEntry, nbsSigCondVodPortDispersionGridOffsetMax=nbsSigCondVodPortDispersionGridOffsetMax, nbsSigCondVodPortDispersionAdmin=nbsSigCondVodPortDispersionAdmin, nbsSigCondVodPortTable=nbsSigCondVodPortTable, nbsSigCondVoaChannelGrp=nbsSigCondVoaChannelGrp, nbsSigCondMib=nbsSigCondMib, nbsSigCondVoaPortTxAttenuOper=nbsSigCondVoaPortTxAttenuOper, nbsSigCondVodPortDispersionMin=nbsSigCondVodPortDispersionMin, nbsSigCondEqualizeIfIndex=nbsSigCondEqualizeIfIndex, nbsSigCondRedundEntry=nbsSigCondRedundEntry, nbsSigCondChannelEntry=nbsSigCondChannelEntry)
