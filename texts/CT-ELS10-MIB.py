#
# PySNMP MIB module CT-ELS10-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CT-ELS10-MIB
# Produced by pysmi-1.1.12 at Mon Oct  7 02:52:56 2024
# On host fv-az775-99 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
dot1dStpPortDesignatedPort, dot1dStpPortState, dot1dStpMaxAge, dot1dStpDesignatedRoot, dot1dStpRootPort, dot1dStpForwardDelay, dot1dStpPortDesignatedBridge, dot1dStpHelloTime, dot1dStpPortDesignatedCost, dot1dStpPortDesignatedRoot, dot1dStpRootCost = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortDesignatedPort", "dot1dStpPortState", "dot1dStpMaxAge", "dot1dStpDesignatedRoot", "dot1dStpRootPort", "dot1dStpForwardDelay", "dot1dStpPortDesignatedBridge", "dot1dStpHelloTime", "dot1dStpPortDesignatedCost", "dot1dStpPortDesignatedRoot", "dot1dStpRootCost")
ifOutErrors, ifOutDiscards, ifInErrors = mibBuilder.importSymbols("IF-MIB", "ifOutErrors", "ifOutDiscards", "ifInErrors")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysObjectID, = mibBuilder.importSymbols("SNMPv2-MIB", "sysObjectID")
IpAddress, MibIdentifier, Bits, enterprises, NotificationType, ObjectIdentity, Counter64, TimeTicks, Gauge32, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "Bits", "enterprises", "NotificationType", "ObjectIdentity", "Counter64", "TimeTicks", "Gauge32", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "ModuleIdentity", "NotificationType")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
sigma = MibIdentifier((1, 3, 6, 1, 4, 1, 97))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 1))
els10_27 = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9)).setLabel("els10-27")
els10_27hw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 1)).setLabel("els10-27hw")
els10_27sw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 2)).setLabel("els10-27sw")
els10_27admin = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 3)).setLabel("els10-27admin")
els10_27swdis = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 4)).setLabel("els10-27swdis")
els10_27addr = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 5)).setLabel("els10-27addr")
els10_27if = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 6)).setLabel("els10-27if")
els10_27dot3 = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 7)).setLabel("els10-27dot3")
els10_27uart = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 8)).setLabel("els10-27uart")
els10_27debug = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 10)).setLabel("els10-27debug")
els10_27lpbk = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 11)).setLabel("els10-27lpbk")
els10_27proto = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 12)).setLabel("els10-27proto")
els10_27trunk = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 13)).setLabel("els10-27trunk")
els10_27workgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 14)).setLabel("els10-27workgroup")
els10_27trapMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 15)).setLabel("els10-27trapMgt")
els10_27pingMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 16)).setLabel("els10-27pingMgt")
els10_27traceMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 17)).setLabel("els10-27traceMgt")
els10_27volmirrorgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 19)).setLabel("els10-27volmirrorgroup")
els10_27VlanBridgeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 20)).setLabel("els10-27VlanBridgeConfig")
els10_27volipmgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 21)).setLabel("els10-27volipmgroup")
els10_27voligmpgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 22)).setLabel("els10-27voligmpgroup")
els10_27FlowControlCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 23)).setLabel("els10-27FlowControlCtl")
sysID = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7))).clone(namedValues=NamedValues(("els10-27-bridge", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysID.setStatus('mandatory')
if mibBuilder.loadTexts: sysID.setDescription(' ')
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysReset.setStatus('mandatory')
if mibBuilder.loadTexts: sysReset.setDescription(' ')
sysTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPort.setStatus('mandatory')
if mibBuilder.loadTexts: sysTrapPort.setDescription(' ')
els10_27hwDiagCode = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 1), OctetString()).setLabel("els10-27hwDiagCode").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwDiagCode.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27hwDiagCode.setDescription(' ')
els10_27hwManufData = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 2), OctetString()).setLabel("els10-27hwManufData").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwManufData.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27hwManufData.setDescription(' ')
els10_27hwPortCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 3), Integer32()).setLabel("els10-27hwPortCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27hwPortCount.setDescription(' ')
els10_27hwPortTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 1, 4), ).setLabel("els10-27hwPortTable")
if mibBuilder.loadTexts: els10_27hwPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27hwPortTable.setDescription(' ')
els10_27hwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 1, 4, 1), ).setLabel("els10-27hwPortEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27hwPortIndex"))
if mibBuilder.loadTexts: els10_27hwPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27hwPortEntry.setDescription(' ')
els10_27hwPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 4, 1, 1), Integer32()).setLabel("els10-27hwPortIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27hwPortIndex.setDescription(' ')
els10_27hwPortType = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 255))).clone(namedValues=NamedValues(("port-csma", 1), ("port-uart", 6), ("port-none", 255)))).setLabel("els10-27hwPortType").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwPortType.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27hwPortType.setDescription(' ')
els10_27hwPortSubType = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 16, 17, 80, 255))).clone(namedValues=NamedValues(("csmacd-tpx", 13), ("csmacd-100-tpx", 16), ("csmacd-100-fx", 17), ("uart-female-9pin", 80), ("no-information", 255)))).setLabel("els10-27hwPortSubType").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwPortSubType.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27hwPortSubType.setDescription(' ')
els10_27hwPortDiagPassed = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("diag-passed", 1), ("diag-failed", 2)))).setLabel("els10-27hwPortDiagPassed").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwPortDiagPassed.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27hwPortDiagPassed.setDescription(' ')
els10_27hwAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 4, 1, 5), OctetString()).setLabel("els10-27hwAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwAddr.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27hwAddr.setDescription(' ')
els10_27hwUpLink = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("els10-27hwUpLink").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwUpLink.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27hwUpLink.setDescription('Specifies whether the Up-Link I/O module is existed')
els10_27hwUpLinkManufData = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 6), OctetString()).setLabel("els10-27hwUpLinkManufData").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwUpLinkManufData.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27hwUpLinkManufData.setDescription('This is a 32-byte array which contains the part number, \n            serial number, and hardware revision level of the Up-Link \n            I/O module. This array is valid only when the els10-27hwUplink \n            is true. If els10-27hwUplink is false, it returns an error')
els10_27swNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 1), Integer32()).setLabel("els10-27swNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swNumber.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swNumber.setDescription(' ')
els10_27swFilesetTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 2, 2), ).setLabel("els10-27swFilesetTable")
if mibBuilder.loadTexts: els10_27swFilesetTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swFilesetTable.setDescription(' ')
els10_27swFilesetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1), ).setLabel("els10-27swFilesetEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27swIndex"))
if mibBuilder.loadTexts: els10_27swFilesetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swFilesetEntry.setDescription(' ')
els10_27swIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currently-executing", 1), ("next-boot", 2)))).setLabel("els10-27swIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swIndex.setDescription(' ')
els10_27swDesc = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 2), DisplayString()).setLabel("els10-27swDesc").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swDesc.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swDesc.setDescription(' ')
els10_27swCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 3), Integer32()).setLabel("els10-27swCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swCount.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swCount.setDescription(' ')
els10_27swType = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 4), OctetString()).setLabel("els10-27swType").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swType.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swType.setDescription(' ')
els10_27swSizes = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 5), OctetString()).setLabel("els10-27swSizes").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swSizes.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swSizes.setDescription(' ')
els10_27swStarts = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 6), OctetString()).setLabel("els10-27swStarts").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swStarts.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swStarts.setDescription(' ')
els10_27swBases = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 7), OctetString()).setLabel("els10-27swBases").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swBases.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swBases.setDescription(' ')
els10_27swFlashBank = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("first-bank", 1), ("second-bank", 2)))).setLabel("els10-27swFlashBank").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swFlashBank.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swFlashBank.setDescription(' ')
els10_27adminFatalErr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 1), OctetString()).setLabel("els10-27adminFatalErr").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminFatalErr.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminFatalErr.setDescription('Information about last reset:\n                   First byte, cause of reset, values:\n                     00: power failure\n                     01: WatchDog Timeout\n                     02: Software Reset\n                     03: NMS Shutdown\n                     04-255: Fatal Error\n\n                   Second byte, Hw/Sw component that failed\n\n                   Remaining bytes, description of fault.')
els10_27adminAnyPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 2), OctetString()).setLabel("els10-27adminAnyPass").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminAnyPass.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminAnyPass.setDescription(' ')
els10_27adminGetPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 3), OctetString()).setLabel("els10-27adminGetPass").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminGetPass.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminGetPass.setDescription(' ')
els10_27adminNMSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 4), IpAddress()).setLabel("els10-27adminNMSIPAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminNMSIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminNMSIPAddr.setDescription(' ')
els10_27adminStorageFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("els10-27adminStorageFailure").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminStorageFailure.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminStorageFailure.setDescription(' ')
els10_27adminAuthenticationFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 8), IpAddress()).setLabel("els10-27adminAuthenticationFailure").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminAuthenticationFailure.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminAuthenticationFailure.setDescription(' ')
els10_27adminNAMReceiveCongests = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 10), Counter32()).setLabel("els10-27adminNAMReceiveCongests").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminNAMReceiveCongests.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminNAMReceiveCongests.setDescription(' ')
els10_27adminArpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 11), Counter32()).setLabel("els10-27adminArpEntries").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminArpEntries.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminArpEntries.setDescription(' ')
els10_27adminArpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 12), Counter32()).setLabel("els10-27adminArpStatics").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminArpStatics.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminArpStatics.setDescription(' ')
els10_27adminArpOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 13), Counter32()).setLabel("els10-27adminArpOverflows").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminArpOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminArpOverflows.setDescription(' ')
els10_27adminIpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 14), Counter32()).setLabel("els10-27adminIpEntries").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminIpEntries.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminIpEntries.setDescription(' ')
els10_27adminIpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 15), Counter32()).setLabel("els10-27adminIpStatics").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminIpStatics.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminIpStatics.setDescription(' ')
els10_27adminStaticPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 16), Integer32()).setLabel("els10-27adminStaticPreference").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminStaticPreference.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminStaticPreference.setDescription(' ')
els10_27adminRipPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 17), Integer32()).setLabel("els10-27adminRipPreference").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminRipPreference.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminRipPreference.setDescription(' ')
els10_27adminRipRouteDiscards = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 18), Counter32()).setLabel("els10-27adminRipRouteDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminRipRouteDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminRipRouteDiscards.setDescription(' ')
els10_27adminRebootConfig = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-change", 1), ("tftp-config", 2), ("revert-to-defaults", 3)))).setLabel("els10-27adminRebootConfig").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminRebootConfig.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminRebootConfig.setDescription(' ')
els10_27adminDisableButton = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("els10-27adminDisableButton").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminDisableButton.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminDisableButton.setDescription(' ')
els10_27adminButtonSelection = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("led-any-activity", 1), ("led-rx-activity", 2), ("led-tx-activity", 3), ("led-any-collision", 4), ("led-programmed", 5), ("led-duplex", 6), ("led-speed", 7), ("led-mirror", 8)))).setLabel("els10-27adminButtonSelection").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminButtonSelection.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminButtonSelection.setDescription(' ')
els10_27adminLEDProgramOption = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("program-led-any-error", 1)))).setLabel("els10-27adminLEDProgramOption").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminLEDProgramOption.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27adminLEDProgramOption.setDescription(' ')
els10_27swdisDesc = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 4, 1), OctetString()).setLabel("els10-27swdisDesc").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swdisDesc.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swdisDesc.setDescription('The description (0-32 bytes) of the software set currently\n         being downloaded, or a description of the software set last\n         downloaded since the FN1026 booted.')
els10_27swdisAccess = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protected", 1), ("any-software", 2)))).setLabel("els10-27swdisAccess").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27swdisAccess.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swdisAccess.setDescription('The version of software that may be downloaded. Attempts to\n         download other versions of software will be rejected. The\n         value for swdisAccess is embedded within the software files\n         that are to be distributed via TFTP. Its value may be\n         derived from the names of the software files. the NMS operator\n         may wish to use the following special values:\n         protected (1)  No software downloads will be accepted\n         any-software (2)  A software download of any version of new\n         software will be accepted - this is the factory default')
els10_27swdisWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("in-progress", 1), ("success", 2), ("config-error", 3), ("flash-error", 4), ("config-and-flash-errors", 5)))).setLabel("els10-27swdisWriteStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swdisWriteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swdisWriteStatus.setDescription('The status of the erase/write operation.')
els10_27swdisConfigIp = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 4, 4), IpAddress()).setLabel("els10-27swdisConfigIp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27swdisConfigIp.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swdisConfigIp.setDescription('The IP address of the NMS (i.e., any IP host) that is allowed\n         to use TFTP to send/retrieve the configuration file of the\n         FN1026. A value of 0.0.0.0 (which is the factory specified\n         default) prevents any NMS from obtaining access, while a\n         value of 255.255.255.255 gives every NMS permission.')
els10_27swdisConfigRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 4, 5), Integer32()).setLabel("els10-27swdisConfigRetryTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27swdisConfigRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swdisConfigRetryTime.setDescription('The number of seconds that the FN1026 will wait for an\n         acknowledgment before it retransmits an unacknowledged TFTP\n         data block. The factory specified default is 5 seconds.')
els10_27swdisConfigTotalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 4, 6), Integer32()).setLabel("els10-27swdisConfigTotalTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27swdisConfigTotalTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27swdisConfigTotalTimeout.setDescription('The number of seconds that the FN1026 will wait for an\n         acknowledgment to a data block before it cancels a TFTP\n         session. The factory specified default is 25 seconds.')
els10_27addrStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 1), Counter32()).setLabel("els10-27addrStatics").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27addrStatics.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27addrStatics.setDescription(' ')
els10_27addrDynamics = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 2), Counter32()).setLabel("els10-27addrDynamics").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27addrDynamics.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27addrDynamics.setDescription(' ')
els10_27addrDynamicMax = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 3), Gauge32()).setLabel("els10-27addrDynamicMax").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrDynamicMax.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27addrDynamicMax.setDescription(' ')
els10_27addrDynamicOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 4), Counter32()).setLabel("els10-27addrDynamicOverflows").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27addrDynamicOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27addrDynamicOverflows.setDescription(' ')
els10_27addrFlags = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 5), Integer32()).setLabel("els10-27addrFlags").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrFlags.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27addrFlags.setDescription(' ')
els10_27addrMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 6), OctetString()).setLabel("els10-27addrMAC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrMAC.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27addrMAC.setDescription(' ')
els10_27addrPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 7), Integer32()).setLabel("els10-27addrPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrPort.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27addrPort.setDescription(' ')
els10_27addrOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("read-random", 1), ("read-next", 2), ("update", 4), ("delete", 5), ("read-block", 6)))).setLabel("els10-27addrOperation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrOperation.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27addrOperation.setDescription(' ')
els10_27addrIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 9), Integer32()).setLabel("els10-27addrIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27addrIndex.setDescription(' ')
els10_27addrNext = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 10), Integer32()).setLabel("els10-27addrNext").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrNext.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27addrNext.setDescription(' ')
els10_27addrBlockSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 19), Integer32()).setLabel("els10-27addrBlockSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27addrBlockSize.setDescription(' ')
els10_27addrBlock = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 20), OctetString()).setLabel("els10-27addrBlock").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrBlock.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27addrBlock.setDescription(' ')
els10_27ifTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 6, 1), ).setLabel("els10-27ifTable")
if mibBuilder.loadTexts: els10_27ifTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifTable.setDescription(' ')
els10_27ifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1), ).setLabel("els10-27ifEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27ifIndex"))
if mibBuilder.loadTexts: els10_27ifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifEntry.setDescription(' ')
els10_27ifIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 1), Integer32()).setLabel("els10-27ifIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifIndex.setDescription(' ')
els10_27ifThreshold = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 4), Integer32()).setLabel("els10-27ifThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ifThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifThreshold.setDescription(' ')
els10_27ifThresholdTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 5), Integer32()).setLabel("els10-27ifThresholdTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ifThresholdTime.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifThresholdTime.setDescription(' ')
els10_27ifRxQueueThresh = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 6), Integer32()).setLabel("els10-27ifRxQueueThresh").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ifRxQueueThresh.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifRxQueueThresh.setDescription(' ')
els10_27ifRxQueueThreshTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 7), Integer32()).setLabel("els10-27ifRxQueueThreshTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ifRxQueueThreshTime.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifRxQueueThreshTime.setDescription(' ')
els10_27ifTxStormCnt = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 8), Integer32()).setLabel("els10-27ifTxStormCnt").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ifTxStormCnt.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifTxStormCnt.setDescription(' ')
els10_27ifTxStormTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 9), TimeTicks()).setLabel("els10-27ifTxStormTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ifTxStormTime.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifTxStormTime.setDescription(' ')
els10_27ifFunction = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 16), Integer32()).setLabel("els10-27ifFunction").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifFunction.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifFunction.setDescription(' ')
els10_27ifRxHwFCSs = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 18), Counter32()).setLabel("els10-27ifRxHwFCSs").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifRxHwFCSs.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifRxHwFCSs.setDescription(' ')
els10_27ifRxQueues = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 19), Counter32()).setLabel("els10-27ifRxQueues").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifRxQueues.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifRxQueues.setDescription(' ')
els10_27ifStatisticsTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 27), TimeTicks()).setLabel("els10-27ifStatisticsTime").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifStatisticsTime.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifStatisticsTime.setDescription(' ')
els10_27ifForwardedChars = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 28), Counter32()).setLabel("els10-27ifForwardedChars").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifForwardedChars.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifForwardedChars.setDescription(' ')
els10_27ifDescr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 29), DisplayString()).setLabel("els10-27ifDescr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ifDescr.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifDescr.setDescription(' ')
els10_27ifGoodRxFrames = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 30), Counter32()).setLabel("els10-27ifGoodRxFrames").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifGoodRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifGoodRxFrames.setDescription(' ')
els10_27ifGoodTxFrames = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 31), Counter32()).setLabel("els10-27ifGoodTxFrames").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifGoodTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ifGoodTxFrames.setDescription(' ')
els10_27dot3Table = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 7, 1), ).setLabel("els10-27dot3Table")
if mibBuilder.loadTexts: els10_27dot3Table.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27dot3Table.setDescription(' ')
els10_27dot3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1), ).setLabel("els10-27dot3Entry").setIndexNames((0, "CT-ELS10-MIB", "els10-27dot3Index"))
if mibBuilder.loadTexts: els10_27dot3Entry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27dot3Entry.setDescription(' ')
els10_27dot3Index = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 1), Integer32()).setLabel("els10-27dot3Index").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3Index.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27dot3Index.setDescription(' ')
els10_27dot3TPLinkOK = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("els10-27dot3TPLinkOK").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3TPLinkOK.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27dot3TPLinkOK.setDescription(' ')
els10_27dot3LedOn = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("led-on", 1), ("led-off", 2)))).setLabel("els10-27dot3LedOn").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3LedOn.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27dot3LedOn.setDescription(' ')
els10_27dot3RxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 4), Counter32()).setLabel("els10-27dot3RxCollisions").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3RxCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27dot3RxCollisions.setDescription(' ')
els10_27dot3RxRunts = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 5), Counter32()).setLabel("els10-27dot3RxRunts").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3RxRunts.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27dot3RxRunts.setDescription(' ')
els10_27dot3RxLateColls = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 6), Counter32()).setLabel("els10-27dot3RxLateColls").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3RxLateColls.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27dot3RxLateColls.setDescription(' ')
els10_27dot3TxJabbers = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 7), Counter32()).setLabel("els10-27dot3TxJabbers").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3TxJabbers.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27dot3TxJabbers.setDescription(' ')
els10_27dot3TxBabbles = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 8), Counter32()).setLabel("els10-27dot3TxBabbles").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3TxBabbles.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27dot3TxBabbles.setDescription(' ')
els10_27dot3TxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 9), Counter32()).setLabel("els10-27dot3TxCollisions").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3TxCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27dot3TxCollisions.setDescription(' ')
els10_27dot3SpeedSelection = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed-10mbit", 1), ("speed-100mbit", 2), ("speed-auto", 3)))).setLabel("els10-27dot3SpeedSelection").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27dot3SpeedSelection.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27dot3SpeedSelection.setDescription(' ')
els10_27dot3DuplexSelection = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duplex-auto", 1), ("duplex-half", 2), ("duplex-full", 3)))).setLabel("els10-27dot3DuplexSelection").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27dot3DuplexSelection.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27dot3DuplexSelection.setDescription(' ')
els10_27uartTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 8, 1), ).setLabel("els10-27uartTable")
if mibBuilder.loadTexts: els10_27uartTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27uartTable.setDescription(' ')
els10_27uartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 8, 1, 1), ).setLabel("els10-27uartEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27uartIndex"))
if mibBuilder.loadTexts: els10_27uartEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27uartEntry.setDescription(' ')
els10_27uartIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 8, 1, 1, 1), Integer32()).setLabel("els10-27uartIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27uartIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27uartIndex.setDescription(' ')
els10_27uartBaud = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("b2400-baud", 3), ("b4800-baud", 4), ("b9600-baud", 5), ("b19200-baud", 6)))).setLabel("els10-27uartBaud").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27uartBaud.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27uartBaud.setDescription(' ')
els10_27uartAlignmentErrors = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 8, 1, 1, 3), Counter32()).setLabel("els10-27uartAlignmentErrors").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27uartAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27uartAlignmentErrors.setDescription(' ')
els10_27uartOverrunErrors = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 8, 1, 1, 4), Counter32()).setLabel("els10-27uartOverrunErrors").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27uartOverrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27uartOverrunErrors.setDescription(' ')
els10_27debugStringID = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 10, 1), Integer32()).setLabel("els10-27debugStringID").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27debugStringID.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27debugStringID.setDescription(' ')
els10_27debugString = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 10, 2), OctetString()).setLabel("els10-27debugString").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27debugString.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27debugString.setDescription(' ')
els10_27debugTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 10, 3), ).setLabel("els10-27debugTable")
if mibBuilder.loadTexts: els10_27debugTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27debugTable.setDescription(' ')
els10_27debugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 10, 3, 1), ).setLabel("els10-27debugEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27debugIndex"))
if mibBuilder.loadTexts: els10_27debugEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27debugEntry.setDescription(' ')
els10_27debugIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("debug-nam", 1)))).setLabel("els10-27debugIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27debugIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27debugIndex.setDescription(' ')
els10_27debugOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("examine", 1), ("modify", 2)))).setLabel("els10-27debugOperation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27debugOperation.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27debugOperation.setDescription(' ')
els10_27debugBase = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 10, 3, 1, 3), Integer32()).setLabel("els10-27debugBase").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27debugBase.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27debugBase.setDescription(' ')
els10_27debugLength = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 10, 3, 1, 4), Integer32()).setLabel("els10-27debugLength").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27debugLength.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27debugLength.setDescription(' ')
els10_27debugData = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 10, 3, 1, 5), OctetString()).setLabel("els10-27debugData").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27debugData.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27debugData.setDescription(' ')
els10_27lpbkTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 11, 1), ).setLabel("els10-27lpbkTable")
if mibBuilder.loadTexts: els10_27lpbkTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkTable.setDescription(' ')
els10_27lpbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1), ).setLabel("els10-27lpbkEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27lpbkIndex"))
if mibBuilder.loadTexts: els10_27lpbkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkEntry.setDescription(' ')
els10_27lpbkIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 1), Integer32()).setLabel("els10-27lpbkIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkIndex.setDescription(' ')
els10_27lpbkOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopback-off", 1), ("loopback-local", 2), ("loopback-remote", 3)))).setLabel("els10-27lpbkOperation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27lpbkOperation.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkOperation.setDescription(' ')
els10_27lpbkDestAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 3), OctetString()).setLabel("els10-27lpbkDestAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27lpbkDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkDestAddr.setDescription(' ')
els10_27lpbkPktNum = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 4), Integer32()).setLabel("els10-27lpbkPktNum").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27lpbkPktNum.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkPktNum.setDescription(' ')
els10_27lpbkInterval = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 5), TimeTicks()).setLabel("els10-27lpbkInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27lpbkInterval.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkInterval.setDescription(' ')
els10_27lpbkPktLength = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 6), Integer32()).setLabel("els10-27lpbkPktLength").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27lpbkPktLength.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkPktLength.setDescription(' ')
els10_27lpbkIncrements = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 7), Integer32()).setLabel("els10-27lpbkIncrements").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27lpbkIncrements.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkIncrements.setDescription(' ')
els10_27lpbkGoods = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 8), Counter32()).setLabel("els10-27lpbkGoods").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkGoods.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkGoods.setDescription(' ')
els10_27lpbkErrorNoReceives = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 9), Counter32()).setLabel("els10-27lpbkErrorNoReceives").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkErrorNoReceives.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkErrorNoReceives.setDescription(' ')
els10_27lpbkErrorBadReceives = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 10), Counter32()).setLabel("els10-27lpbkErrorBadReceives").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkErrorBadReceives.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkErrorBadReceives.setDescription(' ')
els10_27lpbkErrorSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 11), Integer32()).setLabel("els10-27lpbkErrorSize").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkErrorSize.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkErrorSize.setDescription(' ')
els10_27lpbkErrorSent = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 12), OctetString()).setLabel("els10-27lpbkErrorSent").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkErrorSent.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkErrorSent.setDescription(' ')
els10_27lpbkErrorReceived = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 13), OctetString()).setLabel("els10-27lpbkErrorReceived").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkErrorReceived.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkErrorReceived.setDescription(' ')
els10_27lpbkErrorOffset = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 14), Integer32()).setLabel("els10-27lpbkErrorOffset").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkErrorOffset.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27lpbkErrorOffset.setDescription(' ')
els10_27protoTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 12, 1), ).setLabel("els10-27protoTable")
if mibBuilder.loadTexts: els10_27protoTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27protoTable.setDescription('This table contains configuration information specify-\n          ing the types of protocols used to bridge, route,\n          translate, and filter frames for each port.')
els10_27protoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 12, 1, 1), ).setLabel("els10-27protoEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27protoIfIndex"))
if mibBuilder.loadTexts: els10_27protoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27protoEntry.setDescription('Each entry in this table specifies which protocols are\n          used by a particular port in the ES/1.')
els10_27protoIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 12, 1, 1, 1), Integer32()).setLabel("els10-27protoIfIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27protoIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27protoIfIndex.setDescription("Identifies the interface (port) to which this entry's\n                         information belongs. The value of this variable\n                         corresponds to ifIndex, as well as most of the other\n                         port identification values in related MIBs.")
els10_27protoBridge = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("transparent", 1), ("none", 4)))).setLabel("els10-27protoBridge").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27protoBridge.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27protoBridge.setDescription('Defines the bridging method to be applied to frames\n          received at, or destined for, this port. Ethernet and\n          FDDI ports may be configured for transparent, srt, or\n          none.  Token Ring ports may be configured for any of\n          the four options. The UART may only be configured to\n          none.')
els10_27protoSuppressBpdu = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("suppressed", 2)))).setLabel("els10-27protoSuppressBpdu").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27protoSuppressBpdu.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27protoSuppressBpdu.setDescription('Allows transmission of spanning tree protocol packets\n          to be suppressed.  If normal(1), 802.1d spanning tree\n          packets are\n          transmitted as usual. If suppressed(2), these packets\n          are not transmitted. This option may be needed for in-\n          teroperability with non-802.1d spanning tree protocols\n          (e.g., DEC LanBridge 100).')
els10_27protoRipListen = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setLabel("els10-27protoRipListen").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27protoRipListen.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27protoRipListen.setDescription('Specifies whether the port should listen for internet\n          Routing Information Protocol (RFC-1058) packets, in order to\n          build the routing table for the unit.')
els10_27protoTrunking = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setLabel("els10-27protoTrunking").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27protoTrunking.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27protoTrunking.setDescription("Specifies whether SMC's trunking protocol (an extension\n          to the standard Spanning Tree) is to be used over this port.")
els10_27sprotoTransmitPacing = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setLabel("els10-27sprotoTransmitPacing").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27sprotoTransmitPacing.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27sprotoTransmitPacing.setDescription('When enabled, introduces delays into normal transmission of frames, to\n                   reduce the probability of collisions during heavy traffic.')
els10_27trunkTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 13, 1), ).setLabel("els10-27trunkTable")
if mibBuilder.loadTexts: els10_27trunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trunkTable.setDescription('This table describes the trunking status and attributes of\n                 the interfaces that are configured for bridge trunking.')
els10_27trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1), ).setLabel("els10-27trunkEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27trunkIfIndex"))
if mibBuilder.loadTexts: els10_27trunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trunkEntry.setDescription('An entry exists in this table for each physical interface\n                 (port) that is configured for trunking.')
els10_27trunkIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 1), Integer32()).setLabel("els10-27trunkIfIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trunkIfIndex.setDescription('Identifies a physical interface (port) which is\n                configured for LAN trunking. The value of this variable\n                corresponds to ifIndex, as well as most of the other\n                port identification values in related MIBs.')
els10_27trunkState = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 1), ("closed", 2), ("oneway", 3), ("joined", 4), ("perturbed", 5), ("helddown", 6), ("broken", 7)))).setLabel("els10-27trunkState").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkState.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trunkState.setDescription('If off(1) then this link has not been enabled for trunking.\n                 If closed(2) then this link has not yet received any Trunking\n                 PDUs. If oneway(3) then incoming Trunking PDUs do not indicate\n                 that our PDUs are being successfully received by the far end.\n                 If joined(4) then this link is actively participating in the\n                 trunk group. If perturbed(5) then this link is actively\n         participating in the trunk group;  however, the transmission of\n         data packets has been temporarily stopped due to a change in\n         membership of the group.  If helddown(6) then an error has been\n                 detected and the link is being held out-of-service until the error\n                 clears.  If broken(7) then this link has been configured for trunking,\n         but the port is physically non-operational.')
els10_27trunkRemoteBridgeAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 3), OctetString()).setLabel("els10-27trunkRemoteBridgeAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkRemoteBridgeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trunkRemoteBridgeAddr.setDescription('The MAC address portion of the bridge ID of the remote bridge.')
els10_27trunkRemoteIp = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 4), IpAddress()).setLabel("els10-27trunkRemoteIp").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkRemoteIp.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trunkRemoteIp.setDescription('The IP address of the remote bridge, as reported by that\n                 bridge for administrative purposes.')
els10_27trunkLastError = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("in-bpdu", 2), ("multiple-bridges", 3), ("ack-lost", 4), ("standby", 5), ("too-many-groups", 6), ("no-ack", 7), ("perturbed-threshold", 8), ("self-connect", 9), ("port-moved", 10), ("multiple-lan-types", 11)))).setLabel("els10-27trunkLastError").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkLastError.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trunkLastError.setDescription('The last reason for failure when the link is in closed, oneway, or helddown state.')
els10_27trunkLinkOrdinal = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 6), Integer32()).setLabel("els10-27trunkLinkOrdinal").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkLinkOrdinal.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trunkLinkOrdinal.setDescription('The position of this link within the trunk group.')
els10_27trunkLinkCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 7), Integer32()).setLabel("els10-27trunkLinkCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkLinkCount.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trunkLinkCount.setDescription('The number of links within the trunk group.')
els10_27trunkLastChange = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 8), Integer32()).setLabel("els10-27trunkLastChange").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trunkLastChange.setDescription('The number of seconds since els10-27trunkState changed.')
els10_27WorkGroupNextNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 14, 1), Integer32()).setLabel("els10-27WorkGroupNextNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27WorkGroupNextNumber.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27WorkGroupNextNumber.setDescription('The next available workgroup number to be used.  When creating\n         a new workgroup, it is recommended to read the value of the variable\n         and use it to key into the workgroup table.')
els10_27WorkGroupCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 14, 2), Integer32()).setLabel("els10-27WorkGroupCurrentCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27WorkGroupCurrentCount.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27WorkGroupCurrentCount.setDescription('The total number of workgroups currently defined.')
els10_27WorkGroupMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 14, 3), Integer32()).setLabel("els10-27WorkGroupMaxCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27WorkGroupMaxCount.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27WorkGroupMaxCount.setDescription('The maximum number of workgroups allowed.')
els10_27WorkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 14, 4), ).setLabel("els10-27WorkGroupTable")
if mibBuilder.loadTexts: els10_27WorkGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27WorkGroupTable.setDescription('This table contains work group definitions for the interfaces.')
els10_27WorkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 14, 4, 1), ).setLabel("els10-27WorkGroupEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27WorkGroupNumber"))
if mibBuilder.loadTexts: els10_27WorkGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27WorkGroupEntry.setDescription('Each entry in this table contains a definition of a work group.')
els10_27WorkGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 14, 4, 1, 1), Integer32()).setLabel("els10-27WorkGroupNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27WorkGroupNumber.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27WorkGroupNumber.setDescription('An integer that identifies the work group, used as an index\n         to this table.')
els10_27WorkGroupName = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 14, 4, 1, 2), DisplayString()).setLabel("els10-27WorkGroupName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27WorkGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27WorkGroupName.setDescription('A 1-16 character work group name.')
els10_27WorkGroupPorts = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 14, 4, 1, 3), OctetString()).setLabel("els10-27WorkGroupPorts").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27WorkGroupPorts.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27WorkGroupPorts.setDescription('A list of all ports within the group.  The first\n         octet specified ports 1-8, the second 9-16, etc.')
els10_27WorkGroupType = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 14, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("all", 3), ("invalid", 4)))).setLabel("els10-27WorkGroupType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27WorkGroupType.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27WorkGroupType.setDescription('The type of work group:\n         all - no additional information needs to be supplied.')
els10_27trapControlTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 15, 1), ).setLabel("els10-27trapControlTable")
if mibBuilder.loadTexts: els10_27trapControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapControlTable.setDescription('This table contains information about the severity of each trap\n         and whether the trap is currently enabled.')
els10_27trapControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 15, 1, 1), ).setLabel("els10-27trapControlEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27trapIndex"))
if mibBuilder.loadTexts: els10_27trapControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapControlEntry.setDescription(' ')
els10_27trapIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 1, 1, 1), Integer32()).setLabel("els10-27trapIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapIndex.setDescription('The specific trap number.')
els10_27trapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("els10-27trapEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27trapEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapEnabled.setDescription('Enable or disable the generation of this trap.')
els10_27trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setLabel("els10-27trapSeverity").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27trapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapSeverity.setDescription('A user-definable severity, indicating the importance of the\n         trap.')
els10_27trapText = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 1, 1, 4), DisplayString()).setLabel("els10-27trapText").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapText.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapText.setDescription('A description of the trap.')
els10_27trapSeverityControlTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 15, 2), ).setLabel("els10-27trapSeverityControlTable")
if mibBuilder.loadTexts: els10_27trapSeverityControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapSeverityControlTable.setDescription('This table contains information about whether a class of\n         traps of a particular severity are enabled or disabled.')
els10_27trapSeverityControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 15, 2, 1), ).setLabel("els10-27trapSeverityControlEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27trapSeverity"))
if mibBuilder.loadTexts: els10_27trapSeverityControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapSeverityControlEntry.setDescription(' ')
els10_27trapSeverityControlSeverity = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setLabel("els10-27trapSeverityControlSeverity").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27trapSeverityControlSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapSeverityControlSeverity.setDescription('A user-definable severity, indicating the importance of the\n         trap.')
els10_27trapSeverityEnable = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setLabel("els10-27trapSeverityEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27trapSeverityEnable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapSeverityEnable.setDescription('Enable or disable all traps of a given severity level.')
els10_27trapIncludeText = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("els10-27trapIncludeText").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27trapIncludeText.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapIncludeText.setDescription('Whether or not a formatted text string is included in the trap\n         PDU.')
els10_27trapTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 4), TimeTicks()).setLabel("els10-27trapTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27trapTime.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapTime.setDescription('The time, in centiseconds, which should expire between the sending\n         of traps.')
els10_27trapRetry = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 5), Integer32()).setLabel("els10-27trapRetry").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27trapRetry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapRetry.setDescription('The number of times any enterprise-specific trap is to be sent for\n         a given event.  PDUs are retried using a truncated exponential backoff:\n         2 seconds, 4 seoncs, 8 seconds, 16 seconds, and then 32 seconds for\n         all succeeding intervals.')
els10_27trapNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 6), Integer32()).setLabel("els10-27trapNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapNumber.setDescription('The number of traps that are in the els10-27trapTable.')
els10_27trapTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 15, 7), ).setLabel("els10-27trapTable")
if mibBuilder.loadTexts: els10_27trapTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapTable.setDescription('This table contains the latest traps that have been generated.')
els10_27trapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 15, 7, 1), ).setLabel("els10-27trapEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27trapEntryIndex"))
if mibBuilder.loadTexts: els10_27trapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapEntry.setDescription(' ')
els10_27trapEntryIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 7, 1, 1), Integer32()).setLabel("els10-27trapEntryIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapEntryIndex.setDescription('A number representing the order in which the trap occurred\n         in time.  This 32 bit number can wrap.')
els10_27trapEntryTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 7, 1, 2), TimeTicks()).setLabel("els10-27trapEntryTimeStamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapEntryTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapEntryTimeStamp.setDescription('The time at which the trap occurred.')
els10_27trapEntryText = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 7, 1, 3), DisplayString()).setLabel("els10-27trapEntryText").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapEntryText.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapEntryText.setDescription('A description of the trap.')
els10_27trapEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 7, 1, 4), Integer32()).setLabel("els10-27trapEntryNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapEntryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapEntryNumber.setDescription('The specific trap number, as specified in the TRAP PDU.')
els10_27trapEntrySeverity = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setLabel("els10-27trapEntrySeverity").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapEntrySeverity.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27trapEntrySeverity.setDescription('A user-definable severity, indicating the importance of the\n         trap.')
els10_27pingDataTimeout = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 1), TimeTicks()).setLabel("els10-27pingDataTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27pingDataTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingDataTimeout.setDescription('The time, in centiseconds, from the last ping activity (a send\n                        or receive of an ECHO_RESPONSE or ECHO_REQUEST\n                        message), to when the els10-27pingEntry information for that ping\n                        request will be deleted.')
els10_27pingTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 16, 2), ).setLabel("els10-27pingTable")
if mibBuilder.loadTexts: els10_27pingTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingTable.setDescription('The set of information describing the active ping requests and\n                        their results.')
els10_27pingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1), ).setLabel("els10-27pingEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27pingNMSAddr"), (0, "CT-ELS10-MIB", "els10-27pingDestAddr"))
if mibBuilder.loadTexts: els10_27pingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingEntry.setDescription('The parameters, state, and results of a ping request.')
els10_27pingNMSAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 1), IpAddress()).setLabel("els10-27pingNMSAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27pingNMSAddr.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingNMSAddr.setDescription('The IP address of the NMS, used to determine which ping\n                        request to return information on.')
els10_27pingDestAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 2), IpAddress()).setLabel("els10-27pingDestAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27pingDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingDestAddr.setDescription('The IP address which is to be the destination of the ping\n                        ECHO_REQUEST. This variable cannot be set while\n                        els10-27pingOperation is on.')
els10_27pingState = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("not-started", 0), ("active", 1), ("timed-out", 2), ("completed", 3)))).setLabel("els10-27pingState").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27pingState.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingState.setDescription('The current state of the ping request. ')
els10_27pingCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 4), Integer32()).setLabel("els10-27pingCount").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27pingCount.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingCount.setDescription('The number of ping requests which are to be sent. This\n                        variable cannot be set while els10-27pingOperation is on.')
els10_27pingDataSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 5), Integer32()).setLabel("els10-27pingDataSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27pingDataSize.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingDataSize.setDescription('The datagram packet size which will be sent with the\n                        ECHO_REQUEST, in bytes. This variable cannot be set while\n                        els10-27pingOperation is on.')
els10_27pingWait = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 6), TimeTicks()).setLabel("els10-27pingWait").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27pingWait.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingWait.setDescription('The time, in centiseconds, between the sending of each\n                        ECHO_REQUEST message. This variable cannot be set while\n                        els10-27pingOperation is on.')
els10_27pingTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 7), TimeTicks()).setLabel("els10-27pingTimeOut").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27pingTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingTimeOut.setDescription('The time, in centiseconds, since the last ECHO_RESPONSE\n                        was received (or the last ECHO_REQUEST was sent, if there\n                        have been no responses) when the ping request will time out.\n                        This variable cannot be set while els10-27pingOperation is on.')
els10_27pingOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setLabel("els10-27pingOperation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27pingOperation.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingOperation.setDescription('Setting els10-27pingOperation to on will begin the ping request.\n                        Setting els10-27pingOperation to off will terminate the ping request.')
els10_27pingMin = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 9), TimeTicks()).setLabel("els10-27pingMin").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27pingMin.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingMin.setDescription('The minimum round trip time for the ping requests and\n                        responses, in centiseconds.')
els10_27pingMax = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 10), TimeTicks()).setLabel("els10-27pingMax").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27pingMax.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingMax.setDescription('The maximum round trip for the ping requests and\n                        responses, in centiseconds.')
els10_27pingAvg = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 11), TimeTicks()).setLabel("els10-27pingAvg").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27pingAvg.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingAvg.setDescription('The average round trip time for the ping requests and\n                        responses, in centiseconds.')
els10_27pingNumTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 12), Integer32()).setLabel("els10-27pingNumTransmitted").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27pingNumTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingNumTransmitted.setDescription('The number of ICMP ECHO_REQUEST messages that have\n                        been transmitted during this ping request.')
els10_27pingNumReceived = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 13), Integer32()).setLabel("els10-27pingNumReceived").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27pingNumReceived.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27pingNumReceived.setDescription('The number of ICMP ECHO_RESPONSE messages that have\n                        been received as a result of this ping request.')
els10_27traceDataTimeout = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 1), TimeTicks()).setLabel("els10-27traceDataTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27traceDataTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceDataTimeout.setDescription('The time, in centiseconds, from the last traceroute activity (the\n                        response to or timeout of the last probe sent), to when the\n                        els10-27traceEntry information for that traceroute                      request will be\n                        deleted.')
els10_27traceTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 17, 2), ).setLabel("els10-27traceTable")
if mibBuilder.loadTexts: els10_27traceTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceTable.setDescription('The set of information describing the active traceroute requests\n                        and their results.')
els10_27traceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1), ).setLabel("els10-27traceEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27traceNMSAddr"), (0, "CT-ELS10-MIB", "els10-27traceDestAddr"), (0, "CT-ELS10-MIB", "els10-27traceHop"), (0, "CT-ELS10-MIB", "els10-27traceProbe"))
if mibBuilder.loadTexts: els10_27traceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceEntry.setDescription('The parameters, state, and results of a traceroute request.')
els10_27traceNMSAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 1), IpAddress()).setLabel("els10-27traceNMSAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27traceNMSAddr.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceNMSAddr.setDescription('The IP address of the NMS, used to determine which traceroute\n                        request to return information on.')
els10_27traceDestAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 2), IpAddress()).setLabel("els10-27traceDestAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27traceDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceDestAddr.setDescription('The IP address which is to be the destination of the traceroute\n                        request.This variable cannot be set while els10-27traceOperation is on.')
els10_27traceMaxTTL = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 3), Integer32()).setLabel("els10-27traceMaxTTL").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27traceMaxTTL.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceMaxTTL.setDescription('The maximum time-to-live for outgoing traceroute probe\n                        packets. This determines the number of hops that can be in a\n                        traceroute. This variable cannot be set while els10-27traceOperation\n                        is on.')
els10_27traceDataSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 4), Integer32()).setLabel("els10-27traceDataSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27traceDataSize.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceDataSize.setDescription('The size of the datagram sent with each probe. This variable\n                        cannot be set while els10-27traceOperation is on.')
els10_27traceNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 5), Integer32()).setLabel("els10-27traceNumProbes").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27traceNumProbes.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceNumProbes.setDescription('The number of probes which are sent for each hop. This\n                        variable cannot be set while els10-27traceOperation is on.')
els10_27traceWait = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 6), TimeTicks()).setLabel("els10-27traceWait").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27traceWait.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceWait.setDescription('The time to wait in response to a probe. This variable cannot be\n                        set while els10-27traceOperation is on.')
els10_27traceOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setLabel("els10-27traceOperation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27traceOperation.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceOperation.setDescription('Setting els10-27traceOperation to on will begin the traceroute request.\n                        Setting els10-27traceOperation to off will terminate the traceroute\n                        request.')
els10_27traceHop = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 8), Integer32()).setLabel("els10-27traceHop").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27traceHop.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceHop.setDescription('The hop count for a set of probes with a particular TTL.')
els10_27traceHopAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 9), IpAddress()).setLabel("els10-27traceHopAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27traceHopAddr.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceHopAddr.setDescription('The IP address of the host which responded for a probe with a\n                        particular TTL.')
els10_27traceProbe = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 10), Integer32()).setLabel("els10-27traceProbe").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27traceProbe.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceProbe.setDescription('The probe instance for a particular hop.')
els10_27traceState = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-started", 0), ("active", 1), ("time-exceeded", 2), ("host-unreachable", 3), ("net-unreachable", 4), ("completed", 5)))).setLabel("els10-27traceState").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27traceState.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceState.setDescription('The current state of the trace probe.')
els10_27traceTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 12), TimeTicks()).setLabel("els10-27traceTime").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27traceTime.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27traceTime.setDescription('Round trip time of a probe for a particular hop.')
els10_27volmirrorMode = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setLabel("els10-27volmirrorMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27volmirrorMode.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27volmirrorMode.setDescription(' To turn port mirroring on or off.')
els10_27volmirrorPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 19, 2), Integer32()).setLabel("els10-27volmirrorPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27volmirrorPort.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27volmirrorPort.setDescription(' The number of the port whose data will be mirrored to a      \n          special monitor or analyzer port.')
els10_27volmonitorPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 19, 3), Integer32()).setLabel("els10-27volmonitorPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27volmonitorPort.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27volmonitorPort.setDescription(' Identifies the monitor or analyzer port to receive \n          frames from the special mirror port.')
els10_27volMirrorMacTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 19, 4), ).setLabel("els10-27volMirrorMacTable")
if mibBuilder.loadTexts: els10_27volMirrorMacTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27volMirrorMacTable.setDescription(' A table that contains information for the mirroring\n          on MAC addresses.')
els10_27volmirrorMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 19, 4, 1), ).setLabel("els10-27volmirrorMacEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27volmirrorIndex"))
if mibBuilder.loadTexts: els10_27volmirrorMacEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27volmirrorMacEntry.setDescription(' Information about specific unicast MAC addresses\n          for which mirroring will act upon.')
els10_27volmirrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 19, 4, 1, 1), Integer32()).setLabel("els10-27volmirrorIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27volmirrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27volmirrorIndex.setDescription(' Entry Index')
els10_27volmirrorMac1 = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 19, 4, 1, 2), OctetString()).setLabel("els10-27volmirrorMac1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27volmirrorMac1.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27volmirrorMac1.setDescription(' First MAC address for mirroring.')
els10_27VlanVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 1), Integer32()).setLabel("els10-27VlanVersionNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27VlanVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanVersionNumber.setDescription('Specifies the version IEEE 802.1Q VLAN that has been implemented to.')
els10_27VlanOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ieee8021d", 1), ("ieee8021Q", 2))).clone('ieee8021d')).setLabel("els10-27VlanOperatingMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanOperatingMode.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanOperatingMode.setDescription('Selects the mode of operation.  The switch can operate as simply an 802.1d switch,\n                or an 802.1d switch with IEEE VLAN capability (802.1Q).  A read of this object will return\n                the current operating mode.')
els10_27VlanResetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operating", 1), ("reset", 2)))).setLabel("els10-27VlanResetDefaults").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanResetDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanResetDefaults.setDescription('To reset the specified bridge.  The filtering database is cleared and initialized\n                        with the entries specified in the Permananent database, and the Bridge protocol Entity is\n                        initialized.  While initializing a read will return a value of reset (2).  While\n                        operational a read will return a value of operating (2).')
els10_27VlanGVRPEnable = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setLabel("els10-27VlanGVRPEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanGVRPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanGVRPEnable.setDescription("If the switch is operating in 802.1Q mode, this selects whether GVRP protocol\n                messages should be processed and VLANs configured accordingly for each\n                port on the switch. Each octet within the value of this object specifies a set of eight\n                ports, with the first octet specifying ports 1 through 8, the next octet specifying ports\n                9 through 16, etc.  Within each octet, the least significant bit represents the \n                lowest numbered port, and the most significant bit represents the highest numbered port.  \n                Thus, each port of the VLAN bridge is represented by single bit\n                within the value of this object.  If that bit has a value of '1' then that port is\n                included in the set of ports; the port is not included if its bit has a value of '0'")
els10_27VlanAccessList = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 5), Integer32()).setLabel("els10-27VlanAccessList").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanAccessList.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanAccessList.setDescription("A list of ports that should act as 'Access Ports'.  These ports will strip all tags\n                on egress and also make use of a shared database that will automatically be kept by the\n                firmware. Each octet within the value of this object specifies a set of eight ports, with\n                the first octet specifying ports 1 through 8, the next octet specifying ports 9 through\n                16, etc.  Within each octet, the least significant bit represents the lowest numbered\n                port, and the most significant bit represents the highest numbered port.  Thus, each port\n                of the VLAN bridge is represented by  single bit within the value of this object.  If that\n                bit has a value of '1' then that port is included in the set of ports; the port is not\n                included if its bit has a value of '0'")
els10_27VlanConfigVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 20, 6)).setLabel("els10-27VlanConfigVlan")
els10_27VlanNumActiveEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 1), Integer32()).setLabel("els10-27VlanNumActiveEntries").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27VlanNumActiveEntries.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanNumActiveEntries.setDescription('The number of active VLAN entries for the device.  This includes both static and\n                        dynamic VLANs.')
els10_27VlanNumConfiguredEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 2), Integer32()).setLabel("els10-27VlanNumConfiguredEntries").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27VlanNumConfiguredEntries.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanNumConfiguredEntries.setDescription('The number of configured VLAN entries for the device.')
els10_27VlanMaxNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 3), Integer32()).setLabel("els10-27VlanMaxNumEntries").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27VlanMaxNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanMaxNumEntries.setDescription('The maximum number of VLAN entries for the device.')
els10_27VlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4), ).setLabel("els10-27VlanConfigTable")
if mibBuilder.loadTexts: els10_27VlanConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanConfigTable.setDescription("This table allows for the creation, deletion, and modification of\n       specific VLANs. The ports defined within this group will be members of the 'member\n                 set' as\n                 defined in the IEEE 802.1Q specification.")
els10_27VlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1), ).setLabel("els10-27VlanConfigEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27VlanConfigVID"))
if mibBuilder.loadTexts: els10_27VlanConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanConfigEntry.setDescription('Allows for configuration of specific VLAN entries.')
els10_27VlanConfigIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 1), Integer32()).setLabel("els10-27VlanConfigIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanConfigIndex.setDescription('The interface being configured.')
els10_27VlanConfigVID = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setLabel("els10-27VlanConfigVID").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigVID.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanConfigVID.setDescription('The 12 bit VLAN Identifier associated with the configured VLAN.')
els10_27VlanConfigPorts = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 3), Integer32()).setLabel("els10-27VlanConfigPorts").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigPorts.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanConfigPorts.setDescription(" Each octet within the value of this object specifies\n       a set of eight ports, with the first octet specifying\n       ports 1 through 8, the next octet specifying ports 9\n       through 16, etc.  Within each octet, the least significant\n       bit represents the lowest numbered port, and the most\n       significant bit represents the highest numbered port.\n       Thus, each port of the VLAN bridge is represented by\n       single bit within the value of this object.  If that bit\n       has a value of '1' then that port is included in the set\n       of ports; the port is not included if its bit has a value of '0'.")
els10_27VlanConfigIP = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 4), Integer32()).setLabel("els10-27VlanConfigIP").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigIP.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanConfigIP.setDescription('The IP address to be used to access the unit on this Vlan.  This must be a\n         valid host address.')
els10_27VlanConfigIPMask = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 5), Integer32()).setLabel("els10-27VlanConfigIPMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigIPMask.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanConfigIPMask.setDescription('The IP subnet mask to be used with this Ip address.')
els10_27VlanConfigName = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setLabel("els10-27VlanConfigName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanConfigName.setDescription('The ASCII name associated with the configured VLAN.\n       A set of this object prior to creating an entry by\n       setting els10-27VlanEstablish will fail with a NO-INSTANCE error.')
els10_27VlanConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setLabel("els10-27VlanConfigStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanConfigStatus.setDescription('A set with the value of enable(1), enables all associated entries\n      in els10-27VlanConfigVID table for the specified VLAN.  A set of\n      disable(2), disables all els10-27VlanConfigVID entries associated with\n      the specified VLAN.  A set of this object prior to creating an entry by\n      setting els10-27VlanConfigEstablish will fail with a NO-INSTANCE error.')
els10_27VlanConfigEstablish = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2)))).setLabel("els10-27VlanConfigEstablish").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigEstablish.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanConfigEstablish.setDescription('A set of the value create(1), causes an entry to be created in\n       the els10-27VlanConfigTable as specified by the instancing information\n       of els10-27VlanConfigVID, els10-27VlanConfigName, and els10-27VlanConfigPorts.\n       A set of delete(2) causes the specified entry to be removed from the table.\n       A read of this object will always return create(1).')
els10_27VlanConfigEgressTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 5), ).setLabel("els10-27VlanConfigEgressTable")
if mibBuilder.loadTexts: els10_27VlanConfigEgressTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanConfigEgressTable.setDescription("This table allows for the specifying of the default VLAN ID for a specific port. If\n                 NOT configured as an 'Access' port, then packets containing this VLAN ID will have the tag\n                 stripped on egress.  This will set the PVID for each port contained within the list.")
els10_27VlanConfigEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 5, 1), ).setLabel("els10-27VlanConfigEgressEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27VlanEgressVID"))
if mibBuilder.loadTexts: els10_27VlanConfigEgressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanConfigEgressEntry.setDescription('Allows for configuration of specific VLAN entries.')
els10_27VlanEgressIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 5, 1, 1), Integer32()).setLabel("els10-27VlanEgressIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanEgressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanEgressIndex.setDescription('The index into the Vlan table.  A port must be a member of this Vlan prior\n       to assigning this Id as the default. ')
els10_27VlanEgressVID = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setLabel("els10-27VlanEgressVID").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanEgressVID.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanEgressVID.setDescription('The 12 bit VLAN Identifier associated with the configured VLAN.')
els10_27VlanEgressList = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 5, 1, 3), Integer32()).setLabel("els10-27VlanEgressList").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanEgressList.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanEgressList.setDescription("The set of ports to which traffic destined for\n       the VLAN specified by els10-27VlanEgressVID\n       on the device will have this tag stripped on\n       egress.  Each octet within the value of\n       this object specifies a set of eight ports, with thee\n       first octet specifying ports 1 through 8, the second\n       octet specifying ports 9 through 16, etc.  Within each\n       octet, the least significant bit represents the lowest\n       numbered port, and the most significant bit represents\n       the highest numbered port.  Thus, each port of the VLAN\n       bridge is represented by a single bit within the value\n       of this object.  If that bit has a value of '1' then\n       that port is included in the set of ports; the port is\n       not included if its bit has a value of '0'.")
els10_27VlanEgressStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setLabel("els10-27VlanEgressStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanEgressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanEgressStatus.setDescription('A set with the value of enable(1), enables all associated entries\n      in els10-27VlanEgressVID table for the specified VLAN.  A set of\n      disable(2), disables all els10-27VlanEgressVID entries associated with\n      the specified VLAN.  A set of this object prior to creating an entry by\n      setting els10-27VlanEgressEstablish will fail with a NO-INSTANCE error.')
els10_27VlanFilterGVRPTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 6), ).setLabel("els10-27VlanFilterGVRPTable")
if mibBuilder.loadTexts: els10_27VlanFilterGVRPTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanFilterGVRPTable.setDescription("This table allows for the specifying of VLAN ID's that will be resticted from being learnt\n                 by the device.  If a GVRP packet is received specifying this VLAN ID, it will be ignored.")
els10_27VlanFilterGVRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 6, 1), ).setLabel("els10-27VlanFilterGVRPEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27VlanFilterGVRPVID"))
if mibBuilder.loadTexts: els10_27VlanFilterGVRPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanFilterGVRPEntry.setDescription('Allows for configuration of specific entries.')
els10_27VlanFilterGVRPIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 6, 1, 1), Integer32()).setLabel("els10-27VlanFilterGVRPIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanFilterGVRPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanFilterGVRPIndex.setDescription('The index into the Vlan Filter table.  A maximum of 32\n        Vlan ID can be restricted from being learnt via GVRP. ')
els10_27VlanFilterGVRPVID = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setLabel("els10-27VlanFilterGVRPVID").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanFilterGVRPVID.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanFilterGVRPVID.setDescription('The 12 bit VLAN Identifier associated with the configured VLAN.')
els10_27VlanFilterGVRPList = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 6, 1, 3), Integer32()).setLabel("els10-27VlanFilterGVRPList").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanFilterGVRPList.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanFilterGVRPList.setDescription("The set of ports that will be restricted from leaning\n        of a  VLAN ID from a GVRP message.  The VLAN ID\n       is specified by els10-27VlanFilterGVRPVID.\n       Each octet within the value of\n       this object specifies a set of eight ports, with thee\n       first octet specifying ports 1 through 8, the second\n       octet specifying ports 9 through 16, etc.  Within each\n       octet, the least significant bit represents the lowest\n       numbered port, and the most significant bit represents\n       the highest numbered port.  Thus, each port of the VLAN\n       bridge is represented by a single bit within the value\n       of this object.  If that bit has a value of '1' then\n       that port is included in the set of ports; the port is\n       not included if its bit has a value of '0'.")
els10_27VlanFilterGVRPStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setLabel("els10-27VlanFilterGVRPStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanFilterGVRPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanFilterGVRPStatus.setDescription('A set with the value of enable(1), enables all associated entries\n      in els10-27VlanFilterGVRPVID table for the specified VLAN.  A set of\n      disable(2), disables all els10-27VlanFilterGVRPVID entries associated with\n      the specified VLAN.  A set of this object prior to creating an entry by\n      setting els10-27VlanConfigEstablish will fail with a NO-INSTANCE error.')
els10_27VlanFilterGVRPEstablishVID = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2)))).setLabel("els10-27VlanFilterGVRPEstablishVID").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanFilterGVRPEstablishVID.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanFilterGVRPEstablishVID.setDescription('A set of the value create(1), causes an entry to be created in\n       the els10-27VlanFilterGVRPTable as specified by the instancing information\n       of els10-27VlanFilterGVRpVID,  and els10-27VlanFilterGVRPPorts.\n       A set of delete(2) causes the specified entry to be removed from the table.\n       A read of this object will always return create(1).')
els10_27VlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 7), ).setLabel("els10-27VlanStaticTable")
if mibBuilder.loadTexts: els10_27VlanStaticTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanStaticTable.setDescription('Allows for configuration of specific VLAN/MAC Address entries and to specify the\n                 port to which traffic destined for this address pair should be forwarded.  These entries\n                 will not be aged out of the forwarding data base.')
els10_27VlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 7, 1), ).setLabel("els10-27VlanStaticEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27VlanStaticVID"))
if mibBuilder.loadTexts: els10_27VlanStaticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanStaticEntry.setDescription('Allows for specifying specific entries.')
els10_27VlanStaticVID = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setLabel("els10-27VlanStaticVID").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanStaticVID.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanStaticVID.setDescription('The 12 bit VLAN Identifier associated with the configured VLAN.')
els10_27VlanStaticMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 7, 1, 2), PhysAddress()).setLabel("els10-27VlanStaticMAC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanStaticMAC.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanStaticMAC.setDescription('The media dependent physical address.')
els10_27VlanStaticPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 27))).setLabel("els10-27VlanStaticPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanStaticPort.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanStaticPort.setDescription('An integer designating the port number to associate this address to.')
els10_27VlanStaticEstablish = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2)))).setLabel("els10-27VlanStaticEstablish").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanStaticEstablish.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27VlanStaticEstablish.setDescription('A set of the value create(1), causes an entry to be created  as specified by the instancing\n    information of els10-27VlanSaticVID, els10-27VlanStaticMAC, and els10-27VlanStaticPorts. A set of \n         delete(2) causes the specified entry to be removed from thetable.\n    A read of this object will always return create(1).')
els10_27IPMulticastStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setLabel("els10-27IPMulticastStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27IPMulticastStatus.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27IPMulticastStatus.setDescription(' Parameter to enable or disable IP multicast filtering \n      on the device. When enabled, the device will examine IP\n      Multicast data packets and dynamically set up filter \n      ports to prevent flooding.\n      The default is disabled.')
els10_27ipmInterfaceRtr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 21, 2), Integer32()).setLabel("els10-27ipmInterfaceRtr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ipmInterfaceRtr.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27ipmInterfaceRtr.setDescription('Parameter to enable or disable the inclusion of this\n     interface in all Multicast filters. When enabled, all\n     IP Multicast packets for all group filters will be\n     transmitted over this interface. Value is a bit mask.')
els10_27igmpStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setLabel("els10-27igmpStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27igmpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27igmpStatus.setDescription('Parameter to enable or disable IGMP snooping on\n     the device. When enabled, the device will examine IGMP\n     packets and set  up filters for IGMP ports.\n     The default is enabled.')
els10_27igmpQueryStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setLabel("els10-27igmpQueryStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27igmpQueryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27igmpQueryStatus.setDescription('Parameter to enable or disable the device to act as a\n     Querier. If enabled, the device will send out a Query\n     as a Proxy to solicit reports. The device will not \n     become an IGMP router.\n     The default is disabled.')
els10_27igmpQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 22, 3), Integer32()).setLabel("els10-27igmpQueryCount").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27igmpQueryCount.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27igmpQueryCount.setDescription('Maximum number of queries that have not been heard on the\n     system before the system starts taking action to solicit\n     reports (default is 5).')
els10_27igmpPortDelay = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 22, 4), Integer32()).setLabel("els10-27igmpPortDelay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27igmpPortDelay.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27igmpPortDelay.setDescription('Timeout value (mins) between IGMP Reports or IGMP Queries\n     received on a port before the system times out the entry\n     from the Multicast Address Filter (default is 5 minutes).')
els10_27igmpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 22, 5), ).setLabel("els10-27igmpCacheTable")
if mibBuilder.loadTexts: els10_27igmpCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27igmpCacheTable.setDescription('The (conceptual) table listing the IP multicast groups\n     for which there are members on a particular interface.')
els10_27igmpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 22, 5, 1), ).setLabel("els10-27igmpCacheEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27igmpCacheAddress"), (0, "CT-ELS10-MIB", "els10-27igmpCacheIfIndex"))
if mibBuilder.loadTexts: els10_27igmpCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27igmpCacheEntry.setDescription('An entry (conceptual row) in the els10-27igmpCacheTable.')
els10_27igmpCacheAddress = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 22, 5, 1, 1), IpAddress()).setLabel("els10-27igmpCacheAddress").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27igmpCacheAddress.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27igmpCacheAddress.setDescription('The IP multicast group address for which this entry\n        contains information.')
els10_27igmpCacheIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 22, 5, 1, 2), Integer32()).setLabel("els10-27igmpCacheIfIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27igmpCacheIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27igmpCacheIfIndex.setDescription('The interface for which this entry contains infor-\n        mation for an IP multicast group address.')
els10_27igmpCacheExpiryTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 22, 5, 1, 3), TimeTicks()).setLabel("els10-27igmpCacheExpiryTime").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27igmpCacheExpiryTime.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27igmpCacheExpiryTime.setDescription('The minimum amount of time remaining before this\n        entry will be aged out.')
els10_27FlowControlBackPressure = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 23, 1), Integer32()).setLabel("els10-27FlowControlBackPressure").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27FlowControlBackPressure.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27FlowControlBackPressure.setDescription('Control back pressure on a system wide basis.\n        On (1),\n        Off (2)')
els10_27FlowControlThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 23, 2), Integer32()).setLabel("els10-27FlowControlThresholdValue").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27FlowControlThresholdValue.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27FlowControlThresholdValue.setDescription(' A value specified as a percent of the available buffers.\n         When fewer than the percent of the avaialable buffers\n         is detected, flow control will be initiated.  Flow control\n         will cease when the free buffer count meets or exceeds\n         this percent.')
els10_27FlowControlPauseInteval = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 23, 3), Integer32()).setLabel("els10-27FlowControlPauseInteval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27FlowControlPauseInteval.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27FlowControlPauseInteval.setDescription("A value between 10 and 65535.  Each pause interval is  equal\n        to '5.12 microseconds'.   A value of 10 will equal '51.2\n        microseconds'.")
els10_27FlowControlTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 23, 4), ).setLabel("els10-27FlowControlTable")
if mibBuilder.loadTexts: els10_27FlowControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27FlowControlTable.setDescription('Provides a list of control objects over flow control parameters.')
els10_27FlowControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 23, 4, 1), ).setLabel("els10-27FlowControlEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27FlowControlInterface"))
if mibBuilder.loadTexts: els10_27FlowControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27FlowControlEntry.setDescription('Defines a particular entry containing objects pertaining to\n        definition and control over flow control ports.')
els10_27FlowControlInterface = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 23, 4, 1, 1), Integer32()).setLabel("els10-27FlowControlInterface").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27FlowControlInterface.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27FlowControlInterface.setDescription(' The MIB2 interface for which this flow control information pertains')
els10_27FlowControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 23, 4, 1, 2), Integer32()).setLabel("els10-27FlowControlEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27FlowControlEnable.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27FlowControlEnable.setDescription(' Control 802.3x flow control on a per interface basis.\n        On (1),\n        Off (2)')
els10_27FlowControlRxPauseFrames = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 23, 4, 1, 3), Integer32()).setLabel("els10-27FlowControlRxPauseFrames").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27FlowControlRxPauseFrames.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27FlowControlRxPauseFrames.setDescription('The number of pause frames received on this interface.')
els10_27FlowControlTxPauseFrames = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 23, 4, 1, 4), Integer32()).setLabel("els10-27FlowControlTxPauseFrames").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27FlowControlTxPauseFrames.setStatus('mandatory')
if mibBuilder.loadTexts: els10_27FlowControlTxPauseFrames.setDescription('The number of pause frames transmitted on this interface.')
els10_27WriteStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,2)).setLabel("els10-27WriteStatusTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27swdisWriteStatus"), ("CT-ELS10-MIB", "els10_27swdisDesc"))
if mibBuilder.loadTexts: els10_27WriteStatusTrap.setDescription('Sent when a bank of Flash EPROM has been erased.  If \n         els10-27swdisWriteStatus indicates success, then the unit is ready \n         to be downloaded with the new software.')
els10_27PortFunctionsTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,3)).setLabel("els10-27PortFunctionsTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27ifFunction"))
if mibBuilder.loadTexts: els10_27PortFunctionsTrap.setDescription('Sent whenever the current functional state (active \n         protocols) of the port has changed.')
els10_27RxQueuesTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,4)).setLabel("els10-27RxQueuesTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27ifRxQueues"))
if mibBuilder.loadTexts: els10_27RxQueuesTrap.setDescription("Sent whenever the number of times that the port's receiver \n         has stopped receiving packets due to buffer space shortages \n         has exceeded the port's limit.")
els10_27RxStormFlagTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,5)).setLabel("els10-27RxStormFlagTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"))
if mibBuilder.loadTexts: els10_27RxStormFlagTrap.setDescription('Sent whenever broadcast/multicast storm protection has been invoked \n         for the port.')
els10_27TxCongestsTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,6)).setLabel("els10-27TxCongestsTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27adminNAMReceiveCongests"))
if mibBuilder.loadTexts: els10_27TxCongestsTrap.setDescription('Sent whenever packets destined for the unit itself were \n         discarded due to lack of buffer space.')
els10_27DebugStringIdTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,8)).setLabel("els10-27DebugStringIdTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27debugStringID"), ("CT-ELS10-MIB", "els10_27debugString"))
if mibBuilder.loadTexts: els10_27DebugStringIdTrap.setDescription('Sent whenever the unit has a debug text string to be \n         displayed. The text strings are sent in a stream-like \n         fashion.')
els10_27LpbkOperationTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,9)).setLabel("els10-27LpbkOperationTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27lpbkOperation"), ("CT-ELS10-MIB", "els10_27lpbkErrorNoReceives"), ("CT-ELS10-MIB", "els10_27lpbkErrorBadReceives"))
if mibBuilder.loadTexts: els10_27LpbkOperationTrap.setDescription('Send whenever the unit has finished a loop back test, or \n         a loop back error has been detected.')
els10_27TrunkStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,10)).setLabel("els10-27TrunkStateTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27trunkState"))
if mibBuilder.loadTexts: els10_27TrunkStateTrap.setDescription('A trunking state change transition has occurred. The possible \n         transitions are:\n            CLOSED-ONEWAY\n            ONEWAY-PERTURBED\n            PERTURBED-JOINED\n            JOINED-HELDDOWN\n            CLOSED-HELDDOWN\n            ONEWAY-HELDDOWN\n            PERTURBED-HELDDOWN')
els10_27TrunkBridgeAddrTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,11)).setLabel("els10-27TrunkBridgeAddrTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27trunkRemoteBridgeAddr"))
if mibBuilder.loadTexts: els10_27TrunkBridgeAddrTrap.setDescription('The associated trunking MAC address of the bridge ID of the remote \n         bridge has changed.')
els10_27TrunkIPAddrTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,12)).setLabel("els10-27TrunkIPAddrTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27trunkRemoteIp"))
if mibBuilder.loadTexts: els10_27TrunkIPAddrTrap.setDescription('The associated trunking IP address of the remote bridge has changed.')
els10_27TrunkErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,13)).setLabel("els10-27TrunkErrorTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27trunkLastError"))
if mibBuilder.loadTexts: els10_27TrunkErrorTrap.setDescription('An error has occurred in trunking.')
els10_27TrunkLinkOrdinalTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,14)).setLabel("els10-27TrunkLinkOrdinalTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27trunkLinkOrdinal"))
if mibBuilder.loadTexts: els10_27TrunkLinkOrdinalTrap.setDescription("The port's index in the trunking group has changed.")
els10_27TrunkLinkCountTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,15)).setLabel("els10-27TrunkLinkCountTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27trunkLinkCount"))
if mibBuilder.loadTexts: els10_27TrunkLinkCountTrap.setDescription('The number of ports in the trunking group has changed.')
els10_27DiagUnitBootedTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,16)).setLabel("els10-27DiagUnitBootedTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27adminFatalErr"))
if mibBuilder.loadTexts: els10_27DiagUnitBootedTrap.setDescription('The unit has booted. els10-27adminFatalErr contains information about \n         why the unit rebooted.')
els10_27StorageFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,17)).setLabel("els10-27StorageFailureTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"))
if mibBuilder.loadTexts: els10_27StorageFailureTrap.setDescription("Sent if the unit's Configuration EEPROM has failed. The unit\n         will not be able to reboot, and must be returned to the \n         factory.")
els10_27PortCongestedTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,18)).setLabel("els10-27PortCongestedTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("IF-MIB", "ifOutDiscards"))
if mibBuilder.loadTexts: els10_27PortCongestedTrap.setDescription('Sent whenever outbound congestion control has been invoked \n         for the port.')
els10_27TopChangeBegunTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,19)).setLabel("els10-27TopChangeBegunTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"))
if mibBuilder.loadTexts: els10_27TopChangeBegunTrap.setDescription('The spanning tree topology has begun to change.')
els10_27TopChangeEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,20)).setLabel("els10-27TopChangeEndTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"))
if mibBuilder.loadTexts: els10_27TopChangeEndTrap.setDescription('The spanning tree topology has stopped changing.')
els10_27IfErrorsTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,21)).setLabel("els10-27IfErrorsTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("IF-MIB", "ifInErrors"), ("IF-MIB", "ifOutErrors"))
if mibBuilder.loadTexts: els10_27IfErrorsTrap.setDescription("Sent whenever the number of hardware errors in received and \n         transmitted packets has exceeded the port's limit.")
els10_27StRootIDTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,22)).setLabel("els10-27StRootIDTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpDesignatedRoot"))
if mibBuilder.loadTexts: els10_27StRootIDTrap.setDescription('The spanning tree root bridge ID for the unit has changed.')
els10_27StRootCostTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,23)).setLabel("els10-27StRootCostTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpRootCost"))
if mibBuilder.loadTexts: els10_27StRootCostTrap.setDescription("The unit's spanning tree cost to the root bridge has changed.")
els10_27StRootPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,24)).setLabel("els10-27StRootPortTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpRootPort"))
if mibBuilder.loadTexts: els10_27StRootPortTrap.setDescription("The unit's spanning tree root port has changed.")
els10_27StMaxAgeTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,25)).setLabel("els10-27StMaxAgeTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpMaxAge"))
if mibBuilder.loadTexts: els10_27StMaxAgeTrap.setDescription("The unit's spanning tree maximum age has changed.")
els10_27StHelloTimeTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,26)).setLabel("els10-27StHelloTimeTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpHelloTime"))
if mibBuilder.loadTexts: els10_27StHelloTimeTrap.setDescription("The unit's spanning tree hello time has changed.")
els10_27StForwardDelayTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,27)).setLabel("els10-27StForwardDelayTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpForwardDelay"))
if mibBuilder.loadTexts: els10_27StForwardDelayTrap.setDescription("The unit's spanning tree forward delay time has changed.")
els10_27StDesigRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,28)).setLabel("els10-27StDesigRootTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedRoot"))
if mibBuilder.loadTexts: els10_27StDesigRootTrap.setDescription('The Root Bridge ID in received Spanning Tree Configuration BPDUs\n         from the port has changed.')
els10_27StPortDesigBridgeTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,29)).setLabel("els10-27StPortDesigBridgeTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedBridge"))
if mibBuilder.loadTexts: els10_27StPortDesigBridgeTrap.setDescription('The bridge ID of the spanning tree designated bridge of the LAN/WAN\n         to which the port is attached has changed.')
els10_27StPortDesigCostTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,30)).setLabel("els10-27StPortDesigCostTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedCost"))
if mibBuilder.loadTexts: els10_27StPortDesigCostTrap.setDescription('The cost to the spanning tree root bridge from the designated port of \n         the LAN/WAN to which the port is attached has changed.')
els10_27StPortDesigPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,31)).setLabel("els10-27StPortDesigPortTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedPort"))
if mibBuilder.loadTexts: els10_27StPortDesigPortTrap.setDescription('The port ID of the spanning tree designated port of the LAN/WAN\n         to which the port is attached has changed.')
els10_27StPortStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,32)).setLabel("els10-27StPortStateTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpPortState"))
if mibBuilder.loadTexts: els10_27StPortStateTrap.setDescription('The spanning tree state of the port has changed.')
els10_27hwDiagTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,100)).setLabel("els10-27hwDiagTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27hwDiagCode"))
if mibBuilder.loadTexts: els10_27hwDiagTrap.setDescription("Sent whenever the unit's diagnostics have indicated an error.")
els10_27InvalidConfigurationFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,34)).setLabel("els10-27InvalidConfigurationFileTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedPort"))
if mibBuilder.loadTexts: els10_27InvalidConfigurationFileTrap.setDescription('Diagnostics has detected corrupted configuration data. \n         Default parameter values have been restored.')
els10_27StInvalidFlashCodeImageTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,35)).setLabel("els10-27StInvalidFlashCodeImageTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpPortState"))
if mibBuilder.loadTexts: els10_27StInvalidFlashCodeImageTrap.setDescription('An invalid code image was detected in flash memory. \n         An attempt will be made to obtain a valid image.')
mibBuilder.exportSymbols("CT-ELS10-MIB", els10_27dot3LedOn=els10_27dot3LedOn, els10_27WorkGroupMaxCount=els10_27WorkGroupMaxCount, els10_27debugData=els10_27debugData, els10_27traceHopAddr=els10_27traceHopAddr, els10_27lpbkErrorNoReceives=els10_27lpbkErrorNoReceives, els10_27traceMgt=els10_27traceMgt, els10_27trapEntryIndex=els10_27trapEntryIndex, els10_27addrFlags=els10_27addrFlags, els10_27trunkTable=els10_27trunkTable, els10_27trapSeverityControlSeverity=els10_27trapSeverityControlSeverity, els10_27pingNumTransmitted=els10_27pingNumTransmitted, els10_27ifTable=els10_27ifTable, els10_27traceProbe=els10_27traceProbe, els10_27WorkGroupType=els10_27WorkGroupType, els10_27VlanStaticMAC=els10_27VlanStaticMAC, els10_27trapControlTable=els10_27trapControlTable, els10_27adminNAMReceiveCongests=els10_27adminNAMReceiveCongests, els10_27adminAnyPass=els10_27adminAnyPass, els10_27VlanFilterGVRPEstablishVID=els10_27VlanFilterGVRPEstablishVID, els10_27VlanStaticVID=els10_27VlanStaticVID, els10_27volmonitorPort=els10_27volmonitorPort, els10_27swFlashBank=els10_27swFlashBank, els10_27igmpCacheAddress=els10_27igmpCacheAddress, els10_27swType=els10_27swType, els10_27=els10_27, els10_27WorkGroupPorts=els10_27WorkGroupPorts, els10_27pingNMSAddr=els10_27pingNMSAddr, els10_27VlanFilterGVRPTable=els10_27VlanFilterGVRPTable, els10_27adminIpStatics=els10_27adminIpStatics, els10_27TopChangeBegunTrap=els10_27TopChangeBegunTrap, els10_27hwPortIndex=els10_27hwPortIndex, els10_27ifRxQueues=els10_27ifRxQueues, els10_27lpbkIncrements=els10_27lpbkIncrements, els10_27workgroup=els10_27workgroup, els10_27lpbkIndex=els10_27lpbkIndex, els10_27sprotoTransmitPacing=els10_27sprotoTransmitPacing, els10_27igmpQueryStatus=els10_27igmpQueryStatus, els10_27VlanBridgeConfig=els10_27VlanBridgeConfig, els10_27ifTxStormTime=els10_27ifTxStormTime, els10_27swdisAccess=els10_27swdisAccess, els10_27adminButtonSelection=els10_27adminButtonSelection, els10_27dot3TPLinkOK=els10_27dot3TPLinkOK, els10_27ifStatisticsTime=els10_27ifStatisticsTime, els10_27admin=els10_27admin, els10_27volmirrorPort=els10_27volmirrorPort, els10_27TrunkErrorTrap=els10_27TrunkErrorTrap, els10_27adminRebootConfig=els10_27adminRebootConfig, els10_27adminArpEntries=els10_27adminArpEntries, els10_27lpbkGoods=els10_27lpbkGoods, els10_27uartEntry=els10_27uartEntry, els10_27traceDataSize=els10_27traceDataSize, els10_27debug=els10_27debug, els10_27swNumber=els10_27swNumber, els10_27WorkGroupNextNumber=els10_27WorkGroupNextNumber, els10_27VlanGVRPEnable=els10_27VlanGVRPEnable, els10_27igmpPortDelay=els10_27igmpPortDelay, els10_27FlowControlThresholdValue=els10_27FlowControlThresholdValue, els10_27hwPortTable=els10_27hwPortTable, els10_27adminAuthenticationFailure=els10_27adminAuthenticationFailure, els10_27dot3TxCollisions=els10_27dot3TxCollisions, els10_27trapTime=els10_27trapTime, els10_27volipmgroup=els10_27volipmgroup, els10_27adminGetPass=els10_27adminGetPass, els10_27pingDataSize=els10_27pingDataSize, els10_27VlanConfigStatus=els10_27VlanConfigStatus, els10_27VlanVersionNumber=els10_27VlanVersionNumber, els10_27swdisConfigIp=els10_27swdisConfigIp, els10_27protoBridge=els10_27protoBridge, els10_27PortCongestedTrap=els10_27PortCongestedTrap, els10_27VlanConfigEntry=els10_27VlanConfigEntry, els10_27debugLength=els10_27debugLength, els10_27ipmInterfaceRtr=els10_27ipmInterfaceRtr, els10_27trapIncludeText=els10_27trapIncludeText, els10_27igmpCacheIfIndex=els10_27igmpCacheIfIndex, els10_27VlanAccessList=els10_27VlanAccessList, els10_27addrNext=els10_27addrNext, els10_27trunkEntry=els10_27trunkEntry, els10_27lpbk=els10_27lpbk, els10_27lpbkErrorSize=els10_27lpbkErrorSize, els10_27adminDisableButton=els10_27adminDisableButton, els10_27TrunkBridgeAddrTrap=els10_27TrunkBridgeAddrTrap, els10_27VlanFilterGVRPIndex=els10_27VlanFilterGVRPIndex, els10_27StHelloTimeTrap=els10_27StHelloTimeTrap, els10_27VlanOperatingMode=els10_27VlanOperatingMode, els10_27ifGoodTxFrames=els10_27ifGoodTxFrames, els10_27traceMaxTTL=els10_27traceMaxTTL, els10_27pingOperation=els10_27pingOperation, els10_27dot3DuplexSelection=els10_27dot3DuplexSelection, els10_27LpbkOperationTrap=els10_27LpbkOperationTrap, els10_27volmirrorgroup=els10_27volmirrorgroup, els10_27trapEntryTimeStamp=els10_27trapEntryTimeStamp, els10_27swdisConfigTotalTimeout=els10_27swdisConfigTotalTimeout, els10_27VlanNumConfiguredEntries=els10_27VlanNumConfiguredEntries, els10_27IfErrorsTrap=els10_27IfErrorsTrap, els10_27VlanFilterGVRPList=els10_27VlanFilterGVRPList, els10_27trapSeverity=els10_27trapSeverity, els10_27trunkRemoteIp=els10_27trunkRemoteIp, els10_27traceHop=els10_27traceHop, els10_27trapEntry=els10_27trapEntry, els10_27StRootIDTrap=els10_27StRootIDTrap, els10_27pingTimeOut=els10_27pingTimeOut, els10_27VlanFilterGVRPStatus=els10_27VlanFilterGVRPStatus, els10_27lpbkErrorOffset=els10_27lpbkErrorOffset, els10_27lpbkErrorBadReceives=els10_27lpbkErrorBadReceives, els10_27adminLEDProgramOption=els10_27adminLEDProgramOption, els10_27pingCount=els10_27pingCount, els10_27WorkGroupTable=els10_27WorkGroupTable, els10_27hw=els10_27hw, els10_27igmpCacheTable=els10_27igmpCacheTable, els10_27trapSeverityControlEntry=els10_27trapSeverityControlEntry, els10_27addrDynamics=els10_27addrDynamics, els10_27FlowControlTxPauseFrames=els10_27FlowControlTxPauseFrames, els10_27volMirrorMacTable=els10_27volMirrorMacTable, els10_27RxQueuesTrap=els10_27RxQueuesTrap, els10_27dot3RxLateColls=els10_27dot3RxLateColls, els10_27StPortDesigBridgeTrap=els10_27StPortDesigBridgeTrap, els10_27uartBaud=els10_27uartBaud, els10_27trapEntryNumber=els10_27trapEntryNumber, els10_27trapSeverityEnable=els10_27trapSeverityEnable, els10_27hwManufData=els10_27hwManufData, els10_27IPMulticastStatus=els10_27IPMulticastStatus, els10_27dot3TxJabbers=els10_27dot3TxJabbers, els10_27dot3RxRunts=els10_27dot3RxRunts, els10_27trunkState=els10_27trunkState, els10_27debugStringID=els10_27debugStringID, els10_27trunkRemoteBridgeAddr=els10_27trunkRemoteBridgeAddr, els10_27addr=els10_27addr, els10_27VlanStaticTable=els10_27VlanStaticTable, els10_27InvalidConfigurationFileTrap=els10_27InvalidConfigurationFileTrap, els10_27PortFunctionsTrap=els10_27PortFunctionsTrap, els10_27igmpCacheExpiryTime=els10_27igmpCacheExpiryTime, els10_27trapMgt=els10_27trapMgt, els10_27adminFatalErr=els10_27adminFatalErr, els10_27protoIfIndex=els10_27protoIfIndex, els10_27TxCongestsTrap=els10_27TxCongestsTrap, els10_27swBases=els10_27swBases, els10_27traceState=els10_27traceState, els10_27addrDynamicMax=els10_27addrDynamicMax, els10_27igmpCacheEntry=els10_27igmpCacheEntry, els10_27StPortDesigPortTrap=els10_27StPortDesigPortTrap, els10_27VlanStaticEstablish=els10_27VlanStaticEstablish, els10_27trapEntryText=els10_27trapEntryText, els10_27addrOperation=els10_27addrOperation, els10_27sw=els10_27sw, els10_27uart=els10_27uart, els10_27VlanNumActiveEntries=els10_27VlanNumActiveEntries, els10_27TopChangeEndTrap=els10_27TopChangeEndTrap, els10_27ifFunction=els10_27ifFunction, els10_27ifTxStormCnt=els10_27ifTxStormCnt, els10_27StInvalidFlashCodeImageTrap=els10_27StInvalidFlashCodeImageTrap, els10_27TrunkLinkOrdinalTrap=els10_27TrunkLinkOrdinalTrap, els10_27FlowControlRxPauseFrames=els10_27FlowControlRxPauseFrames, els10_27traceNumProbes=els10_27traceNumProbes, els10_27pingEntry=els10_27pingEntry, els10_27volmirrorMac1=els10_27volmirrorMac1, els10_27swCount=els10_27swCount, els10_27WorkGroupEntry=els10_27WorkGroupEntry, els10_27lpbkInterval=els10_27lpbkInterval, els10_27swFilesetEntry=els10_27swFilesetEntry, els10_27StMaxAgeTrap=els10_27StMaxAgeTrap, els10_27VlanConfigTable=els10_27VlanConfigTable, els10_27swdisWriteStatus=els10_27swdisWriteStatus, els10_27trapSeverityControlTable=els10_27trapSeverityControlTable, els10_27ifForwardedChars=els10_27ifForwardedChars, els10_27debugOperation=els10_27debugOperation, els10_27StPortStateTrap=els10_27StPortStateTrap, els10_27debugEntry=els10_27debugEntry, els10_27pingTable=els10_27pingTable, els10_27FlowControlInterface=els10_27FlowControlInterface, els10_27swdisConfigRetryTime=els10_27swdisConfigRetryTime, els10_27trunk=els10_27trunk, els10_27VlanConfigEgressEntry=els10_27VlanConfigEgressEntry, els10_27VlanEgressList=els10_27VlanEgressList, els10_27debugTable=els10_27debugTable, els10_27VlanConfigVID=els10_27VlanConfigVID, els10_27lpbkDestAddr=els10_27lpbkDestAddr, els10_27dot3Index=els10_27dot3Index, els10_27VlanConfigIndex=els10_27VlanConfigIndex, els10_27addrMAC=els10_27addrMAC, els10_27adminNMSIPAddr=els10_27adminNMSIPAddr, els10_27pingDataTimeout=els10_27pingDataTimeout, els10_27traceOperation=els10_27traceOperation, els10_27traceWait=els10_27traceWait, els10_27hwPortEntry=els10_27hwPortEntry, els10_27adminIpEntries=els10_27adminIpEntries, els10_27debugIndex=els10_27debugIndex, els10_27volmirrorMode=els10_27volmirrorMode, els10_27addrBlock=els10_27addrBlock, els10_27ifThreshold=els10_27ifThreshold, els10_27StorageFailureTrap=els10_27StorageFailureTrap, sys=sys, els10_27VlanEgressIndex=els10_27VlanEgressIndex, els10_27WorkGroupName=els10_27WorkGroupName, els10_27ifRxQueueThresh=els10_27ifRxQueueThresh, els10_27trapEnabled=els10_27trapEnabled, els10_27FlowControlBackPressure=els10_27FlowControlBackPressure, els10_27lpbkOperation=els10_27lpbkOperation, els10_27traceNMSAddr=els10_27traceNMSAddr, els10_27debugString=els10_27debugString, els10_27trapText=els10_27trapText, els10_27protoEntry=els10_27protoEntry, els10_27trunkLinkOrdinal=els10_27trunkLinkOrdinal, els10_27VlanConfigIPMask=els10_27VlanConfigIPMask, els10_27igmpQueryCount=els10_27igmpQueryCount, els10_27ifRxQueueThreshTime=els10_27ifRxQueueThreshTime, els10_27swFilesetTable=els10_27swFilesetTable, els10_27VlanStaticEntry=els10_27VlanStaticEntry, els10_27traceEntry=els10_27traceEntry, els10_27protoTable=els10_27protoTable, els10_27uartOverrunErrors=els10_27uartOverrunErrors, els10_27dot3Entry=els10_27dot3Entry, els10_27ifThresholdTime=els10_27ifThresholdTime, els10_27lpbkEntry=els10_27lpbkEntry, els10_27adminArpOverflows=els10_27adminArpOverflows, els10_27trunkLinkCount=els10_27trunkLinkCount, els10_27pingWait=els10_27pingWait, sysID=sysID, els10_27protoRipListen=els10_27protoRipListen, els10_27ifIndex=els10_27ifIndex, els10_27VlanConfigIP=els10_27VlanConfigIP, els10_27trunkIfIndex=els10_27trunkIfIndex, els10_27trapControlEntry=els10_27trapControlEntry, els10_27debugBase=els10_27debugBase, els10_27dot3RxCollisions=els10_27dot3RxCollisions, els10_27hwDiagCode=els10_27hwDiagCode, els10_27VlanResetDefaults=els10_27VlanResetDefaults, els10_27dot3SpeedSelection=els10_27dot3SpeedSelection, els10_27VlanConfigPorts=els10_27VlanConfigPorts, els10_27dot3Table=els10_27dot3Table, els10_27volmirrorIndex=els10_27volmirrorIndex, els10_27swStarts=els10_27swStarts, els10_27TrunkLinkCountTrap=els10_27TrunkLinkCountTrap, els10_27pingState=els10_27pingState, els10_27ifGoodRxFrames=els10_27ifGoodRxFrames, els10_27addrDynamicOverflows=els10_27addrDynamicOverflows, els10_27TrunkStateTrap=els10_27TrunkStateTrap, els10_27VlanEgressVID=els10_27VlanEgressVID, els10_27addrStatics=els10_27addrStatics, els10_27VlanConfigEstablish=els10_27VlanConfigEstablish, els10_27traceDestAddr=els10_27traceDestAddr, els10_27DebugStringIdTrap=els10_27DebugStringIdTrap, els10_27FlowControlCtl=els10_27FlowControlCtl, els10_27lpbkErrorReceived=els10_27lpbkErrorReceived, els10_27uartTable=els10_27uartTable, els10_27FlowControlEnable=els10_27FlowControlEnable, els10_27VlanFilterGVRPEntry=els10_27VlanFilterGVRPEntry, els10_27hwPortDiagPassed=els10_27hwPortDiagPassed, els10_27hwAddr=els10_27hwAddr, els10_27VlanConfigEgressTable=els10_27VlanConfigEgressTable, els10_27FlowControlEntry=els10_27FlowControlEntry, els10_27addrIndex=els10_27addrIndex, els10_27swdisDesc=els10_27swdisDesc, els10_27StRootPortTrap=els10_27StRootPortTrap, els10_27ifEntry=els10_27ifEntry)
mibBuilder.exportSymbols("CT-ELS10-MIB", els10_27ifRxHwFCSs=els10_27ifRxHwFCSs, els10_27StForwardDelayTrap=els10_27StForwardDelayTrap, els10_27WriteStatusTrap=els10_27WriteStatusTrap, els10_27trapRetry=els10_27trapRetry, els10_27protoTrunking=els10_27protoTrunking, els10_27WorkGroupCurrentCount=els10_27WorkGroupCurrentCount, els10_27volmirrorMacEntry=els10_27volmirrorMacEntry, els10_27lpbkPktLength=els10_27lpbkPktLength, els10_27hwUpLinkManufData=els10_27hwUpLinkManufData, els10_27adminRipRouteDiscards=els10_27adminRipRouteDiscards, els10_27pingMax=els10_27pingMax, els10_27lpbkTable=els10_27lpbkTable, els10_27pingDestAddr=els10_27pingDestAddr, sigma=sigma, els10_27VlanFilterGVRPVID=els10_27VlanFilterGVRPVID, els10_27uartIndex=els10_27uartIndex, els10_27pingAvg=els10_27pingAvg, els10_27if=els10_27if, els10_27trunkLastError=els10_27trunkLastError, els10_27igmpStatus=els10_27igmpStatus, els10_27FlowControlPauseInteval=els10_27FlowControlPauseInteval, els10_27VlanConfigVlan=els10_27VlanConfigVlan, els10_27FlowControlTable=els10_27FlowControlTable, els10_27adminStaticPreference=els10_27adminStaticPreference, els10_27traceDataTimeout=els10_27traceDataTimeout, els10_27trunkLastChange=els10_27trunkLastChange, els10_27adminArpStatics=els10_27adminArpStatics, els10_27ifDescr=els10_27ifDescr, els10_27swSizes=els10_27swSizes, els10_27StDesigRootTrap=els10_27StDesigRootTrap, els10_27adminStorageFailure=els10_27adminStorageFailure, els10_27trapNumber=els10_27trapNumber, els10_27pingNumReceived=els10_27pingNumReceived, els10_27trapTable=els10_27trapTable, els10_27StPortDesigCostTrap=els10_27StPortDesigCostTrap, els10_27uartAlignmentErrors=els10_27uartAlignmentErrors, els10_27StRootCostTrap=els10_27StRootCostTrap, els10_27lpbkPktNum=els10_27lpbkPktNum, els10_27lpbkErrorSent=els10_27lpbkErrorSent, els10_27protoSuppressBpdu=els10_27protoSuppressBpdu, els10_27TrunkIPAddrTrap=els10_27TrunkIPAddrTrap, els10_27traceTime=els10_27traceTime, els10_27trapIndex=els10_27trapIndex, els10_27VlanMaxNumEntries=els10_27VlanMaxNumEntries, els10_27pingMgt=els10_27pingMgt, els10_27voligmpgroup=els10_27voligmpgroup, els10_27swDesc=els10_27swDesc, els10_27hwPortType=els10_27hwPortType, els10_27proto=els10_27proto, els10_27hwUpLink=els10_27hwUpLink, els10_27dot3=els10_27dot3, els10_27dot3TxBabbles=els10_27dot3TxBabbles, els10_27RxStormFlagTrap=els10_27RxStormFlagTrap, els10_27VlanEgressStatus=els10_27VlanEgressStatus, els10_27VlanStaticPort=els10_27VlanStaticPort, els10_27hwDiagTrap=els10_27hwDiagTrap, els10_27addrPort=els10_27addrPort, els10_27hwPortSubType=els10_27hwPortSubType, els10_27swIndex=els10_27swIndex, els10_27DiagUnitBootedTrap=els10_27DiagUnitBootedTrap, els10_27hwPortCount=els10_27hwPortCount, sysReset=sysReset, els10_27swdis=els10_27swdis, els10_27WorkGroupNumber=els10_27WorkGroupNumber, els10_27trapEntrySeverity=els10_27trapEntrySeverity, els10_27addrBlockSize=els10_27addrBlockSize, els10_27pingMin=els10_27pingMin, els10_27traceTable=els10_27traceTable, sysTrapPort=sysTrapPort, els10_27VlanConfigName=els10_27VlanConfigName, els10_27adminRipPreference=els10_27adminRipPreference)
