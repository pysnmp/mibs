#
# PySNMP MIB module BARCO-CLICKSHARE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/barco/BARCO-CLICKSHARE-MIB
# Produced by pysmi-1.1.12 at Mon Oct  7 02:24:11 2024
# On host fv-az1986-495 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, Unsigned32, Gauge32, NotificationType, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, IpAddress, TimeTicks, Integer32, ModuleIdentity, enterprises, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "Gauge32", "NotificationType", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "IpAddress", "TimeTicks", "Integer32", "ModuleIdentity", "enterprises", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
clickShare = ModuleIdentity((1, 3, 6, 1, 4, 1, 7312, 2468))
clickShare.setRevisions(('2018-12-04 09:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: clickShare.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: clickShare.setLastUpdated('201812040900Z')
if mibBuilder.loadTexts: clickShare.setOrganization('Barco ClickShare')
if mibBuilder.loadTexts: clickShare.setContactInfo('Barco ClickShare\n                  Beneluxpark 21\n                  8500  Kortrijk \n                  BELGIUM\n                  Phone: +3256233211\n                  Email: clickshare@barco.com')
if mibBuilder.loadTexts: clickShare.setDescription('This MIB module defines a set of event triggers and actions for network management of ClickShare devices')
barco = MibIdentifier((1, 3, 6, 1, 4, 1, 7312))
events = MibIdentifier((1, 3, 6, 1, 4, 1, 7312, 2468, 0))
baseUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 7312, 2468, 1))
deviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 7312, 2468, 1, 1))
sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 7312, 2468, 1, 2))
alarmCpuTemperature = NotificationType((1, 3, 6, 1, 4, 1, 7312, 2468, 0, 1))
if mibBuilder.loadTexts: alarmCpuTemperature.setStatus('current')
if mibBuilder.loadTexts: alarmCpuTemperature.setDescription('An alarmCpuTemperature trap idicates that the CPU temperature exceeded the threshold.')
alarmCaseFanSpeed = NotificationType((1, 3, 6, 1, 4, 1, 7312, 2468, 0, 2))
if mibBuilder.loadTexts: alarmCaseFanSpeed.setStatus('current')
if mibBuilder.loadTexts: alarmCaseFanSpeed.setDescription('An alarmCaseFanSpeed trap idicates that the case fan is spinning too slow.')
alarmProcessNotRunning = NotificationType((1, 3, 6, 1, 4, 1, 7312, 2468, 0, 3))
if mibBuilder.loadTexts: alarmProcessNotRunning.setStatus('current')
if mibBuilder.loadTexts: alarmProcessNotRunning.setDescription('An alarmProcessNotRunning trap idicates that one of the monitored processes is not running.')
diRoomName = MibScalar((1, 3, 6, 1, 4, 1, 7312, 2468, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diRoomName.setStatus('current')
if mibBuilder.loadTexts: diRoomName.setDescription("Name of the meeting room where the Base Unit is located.\n                 This string will be visible on the Base Unit's screen.")
diWelcomeMessage = MibScalar((1, 3, 6, 1, 4, 1, 7312, 2468, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diWelcomeMessage.setStatus('current')
if mibBuilder.loadTexts: diWelcomeMessage.setDescription("A welcome message visible on the Base Unit's screen.")
diLocation = MibScalar((1, 3, 6, 1, 4, 1, 7312, 2468, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diLocation.setStatus('current')
if mibBuilder.loadTexts: diLocation.setDescription('Name of the location where the Base Unit is located.')
diArticleCode = MibScalar((1, 3, 6, 1, 4, 1, 7312, 2468, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diArticleCode.setStatus('current')
if mibBuilder.loadTexts: diArticleCode.setDescription('The Base Unit article code.')
diSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 7312, 2468, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diSerialNumber.setStatus('current')
if mibBuilder.loadTexts: diSerialNumber.setDescription('The Base Unit serial number.')
diUptime = MibScalar((1, 3, 6, 1, 4, 1, 7312, 2468, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diUptime.setStatus('current')
if mibBuilder.loadTexts: diUptime.setDescription('The Base Unit current uptime.')
diTotalUptime = MibScalar((1, 3, 6, 1, 4, 1, 7312, 2468, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diTotalUptime.setStatus('current')
if mibBuilder.loadTexts: diTotalUptime.setDescription('The Base Unit total uptime.')
sensorCaseFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 7312, 2468, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorCaseFanSpeed.setStatus('current')
if mibBuilder.loadTexts: sensorCaseFanSpeed.setDescription('Indicates the current speed of the case fan.')
sensorCpuFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 7312, 2468, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorCpuFanSpeed.setStatus('current')
if mibBuilder.loadTexts: sensorCpuFanSpeed.setDescription('Indicates the current speed of the CPU fan.')
sensorCpuTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7312, 2468, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorCpuTemperature.setStatus('current')
if mibBuilder.loadTexts: sensorCpuTemperature.setDescription('Indicates the current CPU temperature.')
sensorCpuTemperatureThreshold = MibScalar((1, 3, 6, 1, 4, 1, 7312, 2468, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorCpuTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: sensorCpuTemperatureThreshold.setDescription('The CPU temperature limit.\n                 If the current temperature exceeds this setting, the Base Unit will\n                 shut down itself')
clickShareMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 7312, 2469))
clickShareMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 7312, 2469, 1))
clickShareMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7312, 2469, 2))
clickShareMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7312, 2469, 1, 1)).setObjects(("BARCO-CLICKSHARE-MIB", "deviceInfoGroup"), ("BARCO-CLICKSHARE-MIB", "sensorsGroup"), ("BARCO-CLICKSHARE-MIB", "eventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clickShareMIBCompliance = clickShareMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: clickShareMIBCompliance.setDescription('The compliance statement for ClickShare Base Unit devices.')
deviceInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7312, 2469, 2, 1)).setObjects(("BARCO-CLICKSHARE-MIB", "diRoomName"), ("BARCO-CLICKSHARE-MIB", "diWelcomeMessage"), ("BARCO-CLICKSHARE-MIB", "diLocation"), ("BARCO-CLICKSHARE-MIB", "diArticleCode"), ("BARCO-CLICKSHARE-MIB", "diSerialNumber"), ("BARCO-CLICKSHARE-MIB", "diUptime"), ("BARCO-CLICKSHARE-MIB", "diTotalUptime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    deviceInfoGroup = deviceInfoGroup.setStatus('current')
if mibBuilder.loadTexts: deviceInfoGroup.setDescription('The group of Device Info objects.')
sensorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7312, 2469, 2, 2)).setObjects(("BARCO-CLICKSHARE-MIB", "sensorCaseFanSpeed"), ("BARCO-CLICKSHARE-MIB", "sensorCpuFanSpeed"), ("BARCO-CLICKSHARE-MIB", "sensorCpuTemperature"), ("BARCO-CLICKSHARE-MIB", "sensorCpuTemperatureThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sensorsGroup = sensorsGroup.setStatus('current')
if mibBuilder.loadTexts: sensorsGroup.setDescription('The group of sensor objects.')
eventsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 7312, 2469, 2, 99)).setObjects(("BARCO-CLICKSHARE-MIB", "alarmCpuTemperature"), ("BARCO-CLICKSHARE-MIB", "alarmCaseFanSpeed"), ("BARCO-CLICKSHARE-MIB", "alarmProcessNotRunning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventsGroup = eventsGroup.setStatus('current')
if mibBuilder.loadTexts: eventsGroup.setDescription('The group of SNMP trap objects.')
mibBuilder.exportSymbols("BARCO-CLICKSHARE-MIB", eventsGroup=eventsGroup, alarmCaseFanSpeed=alarmCaseFanSpeed, sensorCpuTemperatureThreshold=sensorCpuTemperatureThreshold, clickShareMIB=clickShareMIB, diLocation=diLocation, diRoomName=diRoomName, diWelcomeMessage=diWelcomeMessage, sensorCpuTemperature=sensorCpuTemperature, diSerialNumber=diSerialNumber, sensors=sensors, sensorCpuFanSpeed=sensorCpuFanSpeed, events=events, PYSNMP_MODULE_ID=clickShare, deviceInfo=deviceInfo, clickShare=clickShare, diArticleCode=diArticleCode, alarmProcessNotRunning=alarmProcessNotRunning, clickShareMIBCompliances=clickShareMIBCompliances, baseUnit=baseUnit, sensorCaseFanSpeed=sensorCaseFanSpeed, alarmCpuTemperature=alarmCpuTemperature, barco=barco, clickShareMIBGroups=clickShareMIBGroups, diTotalUptime=diTotalUptime, clickShareMIBCompliance=clickShareMIBCompliance, deviceInfoGroup=deviceInfoGroup, sensorsGroup=sensorsGroup, diUptime=diUptime)
