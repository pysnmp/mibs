#
# PySNMP MIB module HAWK-I2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sinetica/HAWK-I2-MIB
# Produced by pysmi-1.1.12 at Tue May 28 12:54:01 2024
# On host fv-az847-244 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Gauge32, enterprises, MibIdentifier, ModuleIdentity, TimeTicks, IpAddress, Unsigned32, Counter64, ObjectIdentity, Bits, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "enterprises", "MibIdentifier", "ModuleIdentity", "TimeTicks", "IpAddress", "Unsigned32", "Counter64", "ObjectIdentity", "Bits", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, RowStatus, MacAddress, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "MacAddress", "TextualConvention", "TruthValue")
hawki2MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3711, 24))
hawki2MIB.setRevisions(('2006-06-27 12:00', '2006-03-07 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hawki2MIB.setRevisionsDescriptions(('Name change and new objects added', 'First issue',))
if mibBuilder.loadTexts: hawki2MIB.setLastUpdated('200606271200Z')
if mibBuilder.loadTexts: hawki2MIB.setOrganization('Sinetica Corporation')
if mibBuilder.loadTexts: hawki2MIB.setContactInfo('Development Department\n\n                     Sinetica Corporation Ltd.\n                     Willow House\n                     Llancayo Court\n                     Usk\n                     Monmouthshire\n                     NP15 1HY\n                     U.K.\n\n                     Tel: +44 (0)871 226 5679\n                     Fax: +44 (0)845 456 3562\n                     Web: www.sinetica.co.uk\n                     E-mail: info@sinetica.co.uk')
if mibBuilder.loadTexts: hawki2MIB.setDescription('The MIB module for the Sinetica Hawk-i2.')
class DisplayString(OctetString):
    pass

class ContactState(TextualConvention, Integer32):
    description = 'Represents the state of a set of contacts.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("open", 1), ("closed", 2))

class InputContactState(TextualConvention, Integer32):
    description = 'Represents the state of a set of input contacts.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("open", 1), ("closed", 2), ("armed", 3), ("triggered", 4))

class RelayState(TextualConvention, Integer32):
    description = 'Represents the energised state of a relay.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class OutputControlState(TextualConvention, Integer32):
    description = 'Represents the control setiing for an output.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("activate", 1), ("deactivate", 2), ("logic", 3))

class EnableState(TextualConvention, Integer32):
    description = 'Represents the state of an enabling flag.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class InputDataType(TextualConvention, Integer32):
    description = 'Represents the type of data read at an input.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))
    namedValues = NamedValues(("autodetect", 1), ("temperature", 2), ("humidity", 3), ("analogue", 4), ("contact", 5), ("inactive", 255))

sinetica = MibIdentifier((1, 3, 6, 1, 4, 1, 3711))
v1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1))
objects = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 0))
inputs = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1))
outputs = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2))
keypads = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4))
acus = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5))
access = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 6))
pdus = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7))
inventory = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99))
trapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 100))
ipCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 1))
ipTHA = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2))
ipContact = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 3))
ipEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 1, 1))
ipSelect = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSelect.setStatus('current')
if mibBuilder.loadTexts: ipSelect.setDescription('Selects the channel to be enabled or disabled by ipInsert. \n\t\tA value of 0 selects no channel.')
ipInsert = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 1, 1, 2), InputDataType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInsert.setStatus('current')
if mibBuilder.loadTexts: ipInsert.setDescription('Inserts or removes the channel selected by ipSelect - \n\t\tcauses an entry for that channel to be created or deleted in the relevant tables.\n\t\t- Read behaviour is undefined.')
ipTempScaleFlag = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2), ("kelvin", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTempScaleFlag.setStatus('current')
if mibBuilder.loadTexts: ipTempScaleFlag.setDescription('Temperature scale (Celsius/Fahrenheit) for temperature monitoring.')
ipTHATable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: ipTHATable.setStatus('current')
if mibBuilder.loadTexts: ipTHATable.setDescription('A table giving data for all enabled inputs with analogue-type monitoring.')
ipTHAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "HAWK-I2-MIB", "ipTHAChan"))
if mibBuilder.loadTexts: ipTHAEntry.setStatus('current')
if mibBuilder.loadTexts: ipTHAEntry.setDescription('A conceptual row containing information about one analogue-type input.')
ipTHAChan = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTHAChan.setStatus('current')
if mibBuilder.loadTexts: ipTHAChan.setDescription('The input number.')
ipTHARS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTHARS.setStatus('current')
if mibBuilder.loadTexts: ipTHARS.setDescription('The analogue-type input table row status.')
ipTHAName = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHAName.setStatus('current')
if mibBuilder.loadTexts: ipTHAName.setDescription('The name of this input')
ipTHALocn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTHALocn.setStatus('current')
if mibBuilder.loadTexts: ipTHALocn.setDescription('A system-defined name for the physical location of this input, e.g. MCU.')
ipTHAAutoDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHAAutoDetect.setStatus('current')
if mibBuilder.loadTexts: ipTHAAutoDetect.setDescription('Indicates that the type of data this input is monitoring is selected automatically.')
ipTHAType = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 2, 1, 6), InputDataType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHAType.setStatus('current')
if mibBuilder.loadTexts: ipTHAType.setDescription('Indicates the type of data this input is monitoring.')
ipTHAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-200, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTHAValue.setStatus('current')
if mibBuilder.loadTexts: ipTHAValue.setDescription('The current reading in the relevant measurement units.')
ipTHAScaling = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHAScaling.setStatus('current')
if mibBuilder.loadTexts: ipTHAScaling.setDescription('Scaling factor for ipTHAValue when ipTHAType=analogue.')
ipTHAOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHAOffset.setStatus('current')
if mibBuilder.loadTexts: ipTHAOffset.setDescription('Calibration offset in the same units as for ipTHAValue.')
ipTHAHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHAHysteresis.setStatus('current')
if mibBuilder.loadTexts: ipTHAHysteresis.setDescription('Hysteresis on threshold levels in the same units as for ipTHAValue.')
ipTHATrapsCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3))
ipTHAThreshTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 1), )
if mibBuilder.loadTexts: ipTHAThreshTable.setStatus('current')
if mibBuilder.loadTexts: ipTHAThreshTable.setDescription('A table listing the trap threshold levels for all enabled inputs with analogue-type monitoring.')
ipTHAThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 1, 1), ).setIndexNames((0, "HAWK-I2-MIB", "ipTHAThreshChan"))
if mibBuilder.loadTexts: ipTHAThreshEntry.setStatus('current')
if mibBuilder.loadTexts: ipTHAThreshEntry.setDescription('A conceptual row containing threshold information for one analogue-type input.')
ipTHAThreshChan = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTHAThreshChan.setStatus('current')
if mibBuilder.loadTexts: ipTHAThreshChan.setDescription('The input number.')
ipTHAThreshRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTHAThreshRS.setStatus('current')
if mibBuilder.loadTexts: ipTHAThreshRS.setDescription('The analogue-type input table row status.')
ipTHAUCL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-200, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHAUCL.setStatus('current')
if mibBuilder.loadTexts: ipTHAUCL.setDescription('The Upper Critical Limit for this input in the same units as for ipTHAValue.')
ipTHAUWL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-200, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHAUWL.setStatus('current')
if mibBuilder.loadTexts: ipTHAUWL.setDescription('The Upper Warning Limit for this input in the same units as for ipTHAValue.')
ipTHALWL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-200, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHALWL.setStatus('current')
if mibBuilder.loadTexts: ipTHALWL.setDescription('The Lower Warning Limit for this input in the same units as for ipTHAValue.')
ipTHALCL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-200, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHALCL.setStatus('current')
if mibBuilder.loadTexts: ipTHALCL.setDescription('The Lower Critical Limit for this input in the same units as for ipTHAValue.')
ipTHATrapEnTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 2), )
if mibBuilder.loadTexts: ipTHATrapEnTable.setStatus('current')
if mibBuilder.loadTexts: ipTHATrapEnTable.setDescription('The table that controls trap enabling for all enabled inputs with analogue-type monitoring.')
ipTHATrapEnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 2, 1), ).setIndexNames((0, "HAWK-I2-MIB", "ipTHATrapEnChan"))
if mibBuilder.loadTexts: ipTHATrapEnEntry.setStatus('current')
if mibBuilder.loadTexts: ipTHATrapEnEntry.setDescription('A conceptual row containing trap enabling information for one analogue-type input.')
ipTHATrapEnChan = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTHATrapEnChan.setStatus('current')
if mibBuilder.loadTexts: ipTHATrapEnChan.setDescription('The input number.')
ipTHATrapEnRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTHATrapEnRS.setStatus('current')
if mibBuilder.loadTexts: ipTHATrapEnRS.setDescription('The analogue-type input table row status.')
ipTHAUCLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHAUCLTrapEn.setStatus('current')
if mibBuilder.loadTexts: ipTHAUCLTrapEn.setDescription('Enables and disables input UCL alarm traps.')
ipTHAUWLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHAUWLTrapEn.setStatus('current')
if mibBuilder.loadTexts: ipTHAUWLTrapEn.setDescription('Enables and disables input UWL alarm traps.')
ipTHALWLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHALWLTrapEn.setStatus('current')
if mibBuilder.loadTexts: ipTHALWLTrapEn.setDescription('Enables and disables input LWL alarm traps.')
ipTHALCLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHALCLTrapEn.setStatus('current')
if mibBuilder.loadTexts: ipTHALCLTrapEn.setDescription('Enables and disables input LCL alarm traps.')
ipTHATrapPerTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 3), )
if mibBuilder.loadTexts: ipTHATrapPerTable.setStatus('current')
if mibBuilder.loadTexts: ipTHATrapPerTable.setDescription('The table that controls trap repetition for all enabled inputs with analogue-type monitoring.')
ipTHATrapPerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 3, 1), ).setIndexNames((0, "HAWK-I2-MIB", "ipTHATrapPerChan"))
if mibBuilder.loadTexts: ipTHATrapPerEntry.setStatus('current')
if mibBuilder.loadTexts: ipTHATrapPerEntry.setDescription('A conceptual row containing trap repetition information for one analogue-type input.')
ipTHATrapPerChan = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTHATrapPerChan.setStatus('current')
if mibBuilder.loadTexts: ipTHATrapPerChan.setDescription('The input number.')
ipTHATrapPerRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTHATrapPerRS.setStatus('current')
if mibBuilder.loadTexts: ipTHATrapPerRS.setDescription('The table row status.')
ipTHATrapUCLPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHATrapUCLPer.setStatus('current')
if mibBuilder.loadTexts: ipTHATrapUCLPer.setDescription('Set to 0 disables trap repetition, a value of 30 or higher sets the interval between traps in seconds')
ipTHATrapUWLPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHATrapUWLPer.setStatus('current')
if mibBuilder.loadTexts: ipTHATrapUWLPer.setDescription('Set to 0 disables trap repetition, a value of 30 or higher sets the interval between traps in seconds')
ipTHATrapLWLPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHATrapLWLPer.setStatus('current')
if mibBuilder.loadTexts: ipTHATrapLWLPer.setDescription('Set to 0 disables trap repetition, a value of 30 or higher sets the interval between traps in seconds')
ipTHATrapLCLPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTHATrapLCLPer.setStatus('current')
if mibBuilder.loadTexts: ipTHATrapLCLPer.setDescription('Set to 0 disables trap repetition, a value of 30 or higher sets the interval between traps in seconds')
ipContTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: ipContTable.setStatus('current')
if mibBuilder.loadTexts: ipContTable.setDescription('A table listing the parameters and data for all enabled inputs with contact-type monitoring.')
ipContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "HAWK-I2-MIB", "ipContChan"))
if mibBuilder.loadTexts: ipContEntry.setStatus('current')
if mibBuilder.loadTexts: ipContEntry.setDescription('A conceptual row containing information about one contact input.')
ipContChan = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipContChan.setStatus('current')
if mibBuilder.loadTexts: ipContChan.setDescription('The input number.')
ipContRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipContRS.setStatus('current')
if mibBuilder.loadTexts: ipContRS.setDescription('The contact input table row status.')
ipContName = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipContName.setStatus('current')
if mibBuilder.loadTexts: ipContName.setDescription('The name of this input')
ipContLocn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipContLocn.setStatus('current')
if mibBuilder.loadTexts: ipContLocn.setDescription('A system-defined name for the physical location of this input, e.g. MCU.')
ipContAutoDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 3, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipContAutoDetect.setStatus('current')
if mibBuilder.loadTexts: ipContAutoDetect.setDescription('Indicates that the type of data this input is monitoring is selected automatically.')
ipContNormState = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 3, 1, 1, 6), ContactState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipContNormState.setStatus('current')
if mibBuilder.loadTexts: ipContNormState.setDescription('The normal state for this contact.')
ipContCurrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 3, 1, 1, 7), InputContactState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipContCurrState.setStatus('current')
if mibBuilder.loadTexts: ipContCurrState.setDescription('The current state of this contact.')
ipContTrigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("positiveEdge", 1), ("negativeEdge", 2), ("level", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipContTrigMode.setStatus('current')
if mibBuilder.loadTexts: ipContTrigMode.setDescription('The contact trigger mode, level, +ve edge, -ve edge.')
ipContReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipContReset.setStatus('current')
if mibBuilder.loadTexts: ipContReset.setDescription('Resets the contact after triggering in edge mode.')
ipContTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("information", 3), ("disabled", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipContTrapEn.setStatus('current')
if mibBuilder.loadTexts: ipContTrapEn.setDescription('Configure contact input traps.')
ipContTrapPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipContTrapPeriod.setStatus('current')
if mibBuilder.loadTexts: ipContTrapPeriod.setDescription('Set to 0 disables trap repetition, a value of 30 or higher sets the interval between traps in seconds')
opEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 1))
opSelect = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opSelect.setStatus('current')
if mibBuilder.loadTexts: opSelect.setDescription('Selects the channel to be enabled or disabled by opEnable. \n\t\tA value of 0 selects no channel.')
opInsert = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 1, 2), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opInsert.setStatus('current')
if mibBuilder.loadTexts: opInsert.setDescription('Enables or disables the channel selected by opSelect - \n\t\tcauses an entry for that channel to be created or deleted in the relevant tables.\n\t\t- Read behaviour is undefined.')
opTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 2), )
if mibBuilder.loadTexts: opTable.setStatus('current')
if mibBuilder.loadTexts: opTable.setDescription('A table listing the parameters and data for all outputs that are enabled and available (i.e. its extension unit is connected).')
opEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 2, 1), ).setIndexNames((0, "HAWK-I2-MIB", "opChan"))
if mibBuilder.loadTexts: opEntry.setStatus('current')
if mibBuilder.loadTexts: opEntry.setDescription('A conceptual row containing information about one output.')
opChan = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opChan.setStatus('current')
if mibBuilder.loadTexts: opChan.setDescription('The output number.')
opRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opRS.setStatus('current')
if mibBuilder.loadTexts: opRS.setDescription('The contact input table row status.')
opName = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opName.setStatus('current')
if mibBuilder.loadTexts: opName.setDescription('A user-defined name for this output.')
opLocn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opLocn.setStatus('current')
if mibBuilder.loadTexts: opLocn.setDescription('A system-defined name for the physical location of this output, e.g. MCU.')
opNormState = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 2, 1, 5), RelayState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opNormState.setStatus('current')
if mibBuilder.loadTexts: opNormState.setDescription('Sets or reads the required normal state of this output.')
opCurrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 2, 1, 6), RelayState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opCurrState.setStatus('current')
if mibBuilder.loadTexts: opCurrState.setDescription('Reads the current state of this output.')
opOnDelTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opOnDelTime.setStatus('current')
if mibBuilder.loadTexts: opOnDelTime.setDescription("Sets the 'on' delay time for this output.")
opOffDelTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opOffDelTime.setStatus('current')
if mibBuilder.loadTexts: opOffDelTime.setDescription("Sets the 'off' delay time for this output.")
opBooleanEqn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opBooleanEqn.setStatus('current')
if mibBuilder.loadTexts: opBooleanEqn.setDescription('Boolean equation string')
opTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("information", 3), ("disabled", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opTrapEn.setStatus('current')
if mibBuilder.loadTexts: opTrapEn.setDescription('Configure output traps.')
opTrapPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opTrapPeriod.setStatus('current')
if mibBuilder.loadTexts: opTrapPeriod.setDescription('Set to 0 disables trap repetition, a value of 30 or higher sets the interval between traps in seconds')
opControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 2, 2, 1, 12), OutputControlState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opControlState.setStatus('current')
if mibBuilder.loadTexts: opControlState.setDescription('Reads the current control state of an output.')
kpEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 1))
kpSelect = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kpSelect.setStatus('current')
if mibBuilder.loadTexts: kpSelect.setDescription('Selects the keypad to be enabled or disabled by kpEnable. \n\t\tA value of 0 selects no keypad.')
kpInsert = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 1, 2), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kpInsert.setStatus('current')
if mibBuilder.loadTexts: kpInsert.setDescription('Enables or disables the keypad selected by kpSelect - \n\t\tcauses an entry for that keypad to be created or deleted in the relevant tables.\n\t\t- Read behaviour is undefined.')
kpCtlTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 2), )
if mibBuilder.loadTexts: kpCtlTable.setStatus('current')
if mibBuilder.loadTexts: kpCtlTable.setDescription('A table listing the parameters and data for the keypads.')
kpCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 2, 1), ).setIndexNames((0, "HAWK-I2-MIB", "kpNumber"))
if mibBuilder.loadTexts: kpCtlEntry.setStatus('current')
if mibBuilder.loadTexts: kpCtlEntry.setDescription('A conceptual row containing information about one keypad.')
kpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kpNumber.setStatus('current')
if mibBuilder.loadTexts: kpNumber.setDescription('The keypad number.')
kpRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kpRS.setStatus('current')
if mibBuilder.loadTexts: kpRS.setDescription('The keypad table row status.')
kpManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kpManufacturer.setStatus('current')
if mibBuilder.loadTexts: kpManufacturer.setDescription('The name of the manufacturer of the keypad.')
kpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kpName.setStatus('current')
if mibBuilder.loadTexts: kpName.setDescription('A name identifying the keypad.')
kpDoorLatchTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kpDoorLatchTimeOut.setStatus('current')
if mibBuilder.loadTexts: kpDoorLatchTimeOut.setDescription('Time-out value in seconds for which the door latch is held open.')
kpRtnToStndbyTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kpRtnToStndbyTimeOut.setStatus('current')
if mibBuilder.loadTexts: kpRtnToStndbyTimeOut.setDescription('Time-out value in seconds for Return to Standby Mode')
kpEntryCodeValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kpEntryCodeValid.setStatus('current')
if mibBuilder.loadTexts: kpEntryCodeValid.setDescription('Set if previous keypad entry was valid.')
kpDoorOpenTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kpDoorOpenTimeOut.setStatus('current')
if mibBuilder.loadTexts: kpDoorOpenTimeOut.setDescription('Time-out value in seconds for Door Open.')
kpRemoteDoorOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kpRemoteDoorOpen.setStatus('current')
if mibBuilder.loadTexts: kpRemoteDoorOpen.setDescription('Set to open the door.')
kpInUseTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("information", 3), ("disabled", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kpInUseTrapEn.setStatus('current')
if mibBuilder.loadTexts: kpInUseTrapEn.setDescription("'keypad in use' trap enable")
acuEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 1))
acuSelect = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acuSelect.setStatus('current')
if mibBuilder.loadTexts: acuSelect.setDescription('Selects the ACU to be enabled or disabled by acuEnable. \n\t\tA value of 0 selects no ACU.')
acuInsert = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 1, 2), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acuInsert.setStatus('current')
if mibBuilder.loadTexts: acuInsert.setDescription('Enables or disables the ACU selected by acuSelect - \n\t\tcauses an entry for that ACU to be created or deleted in the relevant tables.\n\t\t- Read behaviour is undefined.')
acuCtlTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 2), )
if mibBuilder.loadTexts: acuCtlTable.setStatus('current')
if mibBuilder.loadTexts: acuCtlTable.setDescription('A table listing the parameters and data for the ACUs.')
acuCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 2, 1), ).setIndexNames((0, "HAWK-I2-MIB", "acuNumber"))
if mibBuilder.loadTexts: acuCtlEntry.setStatus('current')
if mibBuilder.loadTexts: acuCtlEntry.setDescription('A conceptual row containing information about one ACU.')
acuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acuNumber.setStatus('current')
if mibBuilder.loadTexts: acuNumber.setDescription('The ACU number.')
acuCtlRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acuCtlRS.setStatus('current')
if mibBuilder.loadTexts: acuCtlRS.setDescription('The ACU table row status.')
acuManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acuManufacturer.setStatus('current')
if mibBuilder.loadTexts: acuManufacturer.setDescription('The name of the manufacturer of the ACU.')
acuName = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acuName.setStatus('current')
if mibBuilder.loadTexts: acuName.setDescription('A name identifying the ACU.')
acuDoorLatchTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acuDoorLatchTimeOut.setStatus('current')
if mibBuilder.loadTexts: acuDoorLatchTimeOut.setDescription('Time-out value in seconds for which the door latch is held open.')
acuRtnToStndbyTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acuRtnToStndbyTimeOut.setStatus('current')
if mibBuilder.loadTexts: acuRtnToStndbyTimeOut.setDescription('Time-out value in seconds for Return to Standby Mode')
acuEntryCodeValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acuEntryCodeValid.setStatus('current')
if mibBuilder.loadTexts: acuEntryCodeValid.setDescription('Set if previous ACU entry was valid.')
acuDoorOpenTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acuDoorOpenTimeOut.setStatus('current')
if mibBuilder.loadTexts: acuDoorOpenTimeOut.setDescription('Time-out value in seconds for Door Open.')
acuRemoteDoorOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acuRemoteDoorOpen.setStatus('current')
if mibBuilder.loadTexts: acuRemoteDoorOpen.setDescription('Set to open the door.')
acuInUseTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("information", 3), ("disabled", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acuInUseTrapEn.setStatus('current')
if mibBuilder.loadTexts: acuInUseTrapEn.setDescription("'ACU in use' trap enable")
accUserCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 6, 1))
accUserInstance = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accUserInstance.setStatus('current')
if mibBuilder.loadTexts: accUserInstance.setDescription('A value of 0 causes an access user to be created in the relevant tables.\n\t\tA non-zero value causes the nominated access user table entries to be deleted.')
accUserTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 6, 1, 2), )
if mibBuilder.loadTexts: accUserTable.setStatus('current')
if mibBuilder.loadTexts: accUserTable.setDescription('A table controlling the access users.')
accUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 6, 1, 2, 1), ).setIndexNames((0, "HAWK-I2-MIB", "accUserNumber"))
if mibBuilder.loadTexts: accUserEntry.setStatus('current')
if mibBuilder.loadTexts: accUserEntry.setDescription('A conceptual row containing information about one ACU user.')
accUserNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accUserNumber.setStatus('current')
if mibBuilder.loadTexts: accUserNumber.setDescription('The the access user-table entry number.')
accUserRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 6, 1, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accUserRS.setStatus('current')
if mibBuilder.loadTexts: accUserRS.setDescription('The access user table row status.')
accUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 6, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accUserName.setStatus('current')
if mibBuilder.loadTexts: accUserName.setDescription('A name identifying the access user.')
accUserCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 6, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accUserCode.setStatus('current')
if mibBuilder.loadTexts: accUserCode.setDescription("The user's access code.")
accUserPrivileges = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 6, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accUserPrivileges.setStatus('current')
if mibBuilder.loadTexts: accUserPrivileges.setDescription('The ACUs and keypads that the user is allowed to gain access through - comma-separated numerical strings.')
accUserExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 6, 1, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accUserExpires.setStatus('current')
if mibBuilder.loadTexts: accUserExpires.setDescription('A text string which specifies when the access code in the row expires. The format is defined by the application.')
accUserSetup = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 6, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accUserSetup.setStatus('current')
if mibBuilder.loadTexts: accUserSetup.setDescription('A free form octet string for programming accUserTable. The format is defined by the application.')
pduCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 1))
pduOutlets = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2))
pduMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3))
pdusEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 1, 1))
pduSelect = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSelect.setStatus('current')
if mibBuilder.loadTexts: pduSelect.setDescription('Selects the PDU to be enabled or disabled by pduEnable. \n\t\tA value of 0 selects no PDU.')
pduInsert = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 1, 1, 2), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInsert.setStatus('current')
if mibBuilder.loadTexts: pduInsert.setDescription('Enables or disables the PDU selected by pduSelect - \n\t\tcauses an entry for that PDU to be created or deleted in the relevant tables.\n\t\t- Read behaviour is undefined.')
pduTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 1, 2), )
if mibBuilder.loadTexts: pduTable.setStatus('current')
if mibBuilder.loadTexts: pduTable.setDescription('A table containing information about each enabled PDU.')
pduEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 1, 2, 1), ).setIndexNames((0, "HAWK-I2-MIB", "pduNumber"))
if mibBuilder.loadTexts: pduEntry.setStatus('current')
if mibBuilder.loadTexts: pduEntry.setDescription('A conceptual row containing information about one PDU.')
pduNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNumber.setStatus('current')
if mibBuilder.loadTexts: pduNumber.setDescription('The PDU number.')
pduRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 1, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRS.setStatus('current')
if mibBuilder.loadTexts: pduRS.setDescription('The PDU table row status.')
pduName = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduName.setStatus('current')
if mibBuilder.loadTexts: pduName.setDescription('A string identifying the PDU.')
pduOutEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 1, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutEn.setStatus('current')
if mibBuilder.loadTexts: pduOutEn.setDescription('Enables/disables PDU power outlet control - causes an entry for outlets to be created in each relevant PDU table.')
pduMonEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 1, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMonEn.setStatus('current')
if mibBuilder.loadTexts: pduMonEn.setDescription('Enables/disables PDU power monitoring - causes an entry for monitoring to be created in each relevant PDU table.')
pduCommsFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commsGood", 1), ("commsFailed", 2), ("commsBadData", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCommsFail.setStatus('current')
if mibBuilder.loadTexts: pduCommsFail.setDescription('Indicates comms. status for the PDU.')
pduOutAll = MibIdentifier((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 1))
pduOutCycleAll = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutCycleAll.setStatus('current')
if mibBuilder.loadTexts: pduOutCycleAll.setDescription('Sets the required state of all power outlets on all connected PDUs.')
pduOutCycleAllPwd = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutCycleAllPwd.setStatus('current')
if mibBuilder.loadTexts: pduOutCycleAllPwd.setDescription('Controls access to setting the required state of all power outlets on all connected PDUs.')
pduOutCycleAllAbort = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutCycleAllAbort.setStatus('current')
if mibBuilder.loadTexts: pduOutCycleAllAbort.setDescription('Abort command for pduOutCycleAll.')
pduOutGlobalCycleDelay = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutGlobalCycleDelay.setStatus('current')
if mibBuilder.loadTexts: pduOutGlobalCycleDelay.setDescription('Sets the delay period for pduOutCycleAll and pduOutCycle commands before they start to execute.')
pduOutGlobalRebootTime = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutGlobalRebootTime.setStatus('current')
if mibBuilder.loadTexts: pduOutGlobalRebootTime.setDescription('Sets the off to on delay period for a pdu outlet reboot.')
pduOutGlobalCycleAbortTime = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutGlobalCycleAbortTime.setStatus('current')
if mibBuilder.loadTexts: pduOutGlobalCycleAbortTime.setDescription('Time delay to abort power outlet setting task.')
pduOutCmnTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 2), )
if mibBuilder.loadTexts: pduOutCmnTable.setStatus('current')
if mibBuilder.loadTexts: pduOutCmnTable.setDescription('A table containing information about the power outlets of all PDUs enabled for outlet control.')
pduOutCmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 2, 1), ).setIndexNames((0, "HAWK-I2-MIB", "pduOutCmnPduNumber"))
if mibBuilder.loadTexts: pduOutCmnEntry.setStatus('current')
if mibBuilder.loadTexts: pduOutCmnEntry.setDescription('A conceptual row containing information about the power outlets of one PDU.')
pduOutCmnPduNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutCmnPduNumber.setStatus('current')
if mibBuilder.loadTexts: pduOutCmnPduNumber.setDescription('The PDU number.')
pduOutCmnRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutCmnRS.setStatus('current')
if mibBuilder.loadTexts: pduOutCmnRS.setDescription('The PDU table row status.')
pduNumOfOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNumOfOutlets.setStatus('current')
if mibBuilder.loadTexts: pduNumOfOutlets.setDescription('The number of switchable outlets on the PDU - determines the number of entries to be created in the outlet table for the relevant PDU.')
pduOutCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutCycle.setStatus('current')
if mibBuilder.loadTexts: pduOutCycle.setDescription('Sets the required state of all power outlets on the PDU.')
pduOutCyclePwd = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutCyclePwd.setStatus('current')
if mibBuilder.loadTexts: pduOutCyclePwd.setDescription('Password controling access to setting the required state of all power outlets on the PDU.')
pduOutCycleAbortTask = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutCycleAbortTask.setStatus('current')
if mibBuilder.loadTexts: pduOutCycleAbortTask.setDescription('Abort power outlet setting task.')
pduOutCycleAbortTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutCycleAbortTime.setStatus('current')
if mibBuilder.loadTexts: pduOutCycleAbortTime.setDescription('Time delay to abort power outlet setting task.')
pduOutTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 3), )
if mibBuilder.loadTexts: pduOutTable.setStatus('current')
if mibBuilder.loadTexts: pduOutTable.setDescription('A table listing the states and descriptions for each outlet on the PDU.')
pduOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 3, 1), ).setIndexNames((0, "HAWK-I2-MIB", "pduOutPduNumber"), (0, "HAWK-I2-MIB", "pduOutNumber"))
if mibBuilder.loadTexts: pduOutEntry.setStatus('current')
if mibBuilder.loadTexts: pduOutEntry.setDescription('A row containing information about one PDU outlet.')
pduOutPduNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutPduNumber.setStatus('current')
if mibBuilder.loadTexts: pduOutPduNumber.setDescription('The PDU number on which the outlet resides.')
pduOutNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutNumber.setStatus('current')
if mibBuilder.loadTexts: pduOutNumber.setDescription('The outlet number.')
pduOutRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 3, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutRS.setStatus('current')
if mibBuilder.loadTexts: pduOutRS.setDescription('The PDU table row status.')
pduOutName = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutName.setStatus('current')
if mibBuilder.loadTexts: pduOutName.setDescription('A name identifying the outlet.')
pduOutOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("reboot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutOn.setStatus('current')
if mibBuilder.loadTexts: pduOutOn.setDescription('The current state for this outlet.')
pduOutPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutPwd.setStatus('current')
if mibBuilder.loadTexts: pduOutPwd.setDescription('The password for this outlet.')
pduOutCycleDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutCycleDelay.setStatus('current')
if mibBuilder.loadTexts: pduOutCycleDelay.setDescription('The on/off delay for this outlet in seconds.')
pduOutRebootPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutRebootPeriod.setStatus('current')
if mibBuilder.loadTexts: pduOutRebootPeriod.setDescription('The pduOutOn reboot off period for this outlet in seconds.')
pduMonTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 1), )
if mibBuilder.loadTexts: pduMonTable.setStatus('current')
if mibBuilder.loadTexts: pduMonTable.setDescription('A table containing monitor information for all PDUs enabled for monitoring.')
pduMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 1, 1), ).setIndexNames((0, "HAWK-I2-MIB", "pduMonPduNumber"))
if mibBuilder.loadTexts: pduMonEntry.setStatus('current')
if mibBuilder.loadTexts: pduMonEntry.setDescription('A conceptual row containing monitor information for one PDU.')
pduMonPduNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduMonPduNumber.setStatus('current')
if mibBuilder.loadTexts: pduMonPduNumber.setDescription('The PDU number.')
pduMonRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduMonRS.setStatus('current')
if mibBuilder.loadTexts: pduMonRS.setDescription('The PDU table row status.')
pduRMSVoltsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRMSVoltsValue.setStatus('current')
if mibBuilder.loadTexts: pduRMSVoltsValue.setDescription('RMS Volts value in volts')
pduRMSAmpsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRMSAmpsValue.setStatus('current')
if mibBuilder.loadTexts: pduRMSAmpsValue.setDescription('RMS current value in 0.1 Amps')
pduTotalEnergyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTotalEnergyValue.setStatus('current')
if mibBuilder.loadTexts: pduTotalEnergyValue.setDescription('Total energy value in 0.1 kWh')
pduMeanKVAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduMeanKVAValue.setStatus('current')
if mibBuilder.loadTexts: pduMeanKVAValue.setDescription('Kilo Volt-Amperes value in 0.1 kVA')
pduMeanKWattsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduMeanKWattsValue.setStatus('current')
if mibBuilder.loadTexts: pduMeanKWattsValue.setDescription('Kilo Watts value in 0.1 kW')
pduPwrFactorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPwrFactorValue.setStatus('current')
if mibBuilder.loadTexts: pduPwrFactorValue.setDescription('Power factor value in 0.01')
pduTrapThreshTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2), )
if mibBuilder.loadTexts: pduTrapThreshTable.setStatus('current')
if mibBuilder.loadTexts: pduTrapThreshTable.setDescription('A table containing information about the trap threshold values for all PDUs enabled for monitoring.')
pduTrapThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1), ).setIndexNames((0, "HAWK-I2-MIB", "pduTrapThreshPduNumber"))
if mibBuilder.loadTexts: pduTrapThreshEntry.setStatus('current')
if mibBuilder.loadTexts: pduTrapThreshEntry.setDescription('A conceptual row containing information about the trap threshold values for one PDU.')
pduTrapThreshPduNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTrapThreshPduNumber.setStatus('current')
if mibBuilder.loadTexts: pduTrapThreshPduNumber.setDescription('The PDU number.')
pduTrapThreshRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTrapThreshRS.setStatus('current')
if mibBuilder.loadTexts: pduTrapThreshRS.setDescription('The PDU table row status.')
pduRMSVoltsUCL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSVoltsUCL.setStatus('current')
if mibBuilder.loadTexts: pduRMSVoltsUCL.setDescription('rms UCL value in volts')
pduRMSVoltsUWL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSVoltsUWL.setStatus('current')
if mibBuilder.loadTexts: pduRMSVoltsUWL.setDescription('rms UWL value in volts')
pduRMSVoltsLWL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSVoltsLWL.setStatus('current')
if mibBuilder.loadTexts: pduRMSVoltsLWL.setDescription('rms LWL value in volts')
pduRMSVoltsLCL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSVoltsLCL.setStatus('current')
if mibBuilder.loadTexts: pduRMSVoltsLCL.setDescription('rms LCL value in volts')
pduRMSAmpsUCL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSAmpsUCL.setStatus('current')
if mibBuilder.loadTexts: pduRMSAmpsUCL.setDescription('rms UCL value in 0.1 amps')
pduRMSAmpsUWL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSAmpsUWL.setStatus('current')
if mibBuilder.loadTexts: pduRMSAmpsUWL.setDescription('rms UWL value in 0.1 amps')
pduRMSAmpsLWL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSAmpsLWL.setStatus('current')
if mibBuilder.loadTexts: pduRMSAmpsLWL.setDescription('rms LWL value in 0.1 amps')
pduRMSAmpsLCL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSAmpsLCL.setStatus('current')
if mibBuilder.loadTexts: pduRMSAmpsLCL.setDescription('rms LCL value in 0.1 amps')
pduEnergyUCL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnergyUCL.setStatus('current')
if mibBuilder.loadTexts: pduEnergyUCL.setDescription('Total energy UCL value in 0.1 kWh')
pduEnergyUWL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnergyUWL.setStatus('current')
if mibBuilder.loadTexts: pduEnergyUWL.setDescription('Total energy UWL value in 0.1 kWh')
pduMeanKVAUCL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKVAUCL.setStatus('current')
if mibBuilder.loadTexts: pduMeanKVAUCL.setDescription('Mean kVA UCL value in 0.1 kVA')
pduMeanKVAUWL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKVAUWL.setStatus('current')
if mibBuilder.loadTexts: pduMeanKVAUWL.setDescription('Mean kVA UWL value in 0.1 kVA')
pduMeanKVALWL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKVALWL.setStatus('current')
if mibBuilder.loadTexts: pduMeanKVALWL.setDescription('Mean kVA LWL value in 0.1 kVA')
pduMeanKVALCL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKVALCL.setStatus('current')
if mibBuilder.loadTexts: pduMeanKVALCL.setDescription('Mean kVA LCL value in 0.1 kVA')
pduMeanKWattsUCL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKWattsUCL.setStatus('current')
if mibBuilder.loadTexts: pduMeanKWattsUCL.setDescription('Mean power UCL value in 0.1 kW')
pduMeanKWattsUWL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKWattsUWL.setStatus('current')
if mibBuilder.loadTexts: pduMeanKWattsUWL.setDescription('Mean power UWL value in 0.1 kW')
pduMeanKWattsLWL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKWattsLWL.setStatus('current')
if mibBuilder.loadTexts: pduMeanKWattsLWL.setDescription('Mean power LWL value in 0.1 kW')
pduMeanKWattsLCL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKWattsLCL.setStatus('current')
if mibBuilder.loadTexts: pduMeanKWattsLCL.setDescription('Mean power LCL value in 0.1 kW')
pduPwrFactorUCL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPwrFactorUCL.setStatus('current')
if mibBuilder.loadTexts: pduPwrFactorUCL.setDescription('Power factor UCL value in 0.01')
pduPwrFactorUWL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPwrFactorUWL.setStatus('current')
if mibBuilder.loadTexts: pduPwrFactorUWL.setDescription('Power factor UWL value in 0.01')
pduPwrFactorLWL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPwrFactorLWL.setStatus('current')
if mibBuilder.loadTexts: pduPwrFactorLWL.setDescription('Power factor LWL value in 0.01')
pduPwrFactorLCL = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPwrFactorLCL.setStatus('current')
if mibBuilder.loadTexts: pduPwrFactorLCL.setDescription('Power factor LCL value in 0.01')
pduTrapEnTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3), )
if mibBuilder.loadTexts: pduTrapEnTable.setStatus('current')
if mibBuilder.loadTexts: pduTrapEnTable.setDescription('The table which controls threshold value trap enabling for all PDUs enabled for monitoring.')
pduTrapEnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1), ).setIndexNames((0, "HAWK-I2-MIB", "pduTrapEnPduNumber"))
if mibBuilder.loadTexts: pduTrapEnEntry.setStatus('current')
if mibBuilder.loadTexts: pduTrapEnEntry.setDescription('A conceptual row containing information about one PDU.')
pduTrapEnPduNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTrapEnPduNumber.setStatus('current')
if mibBuilder.loadTexts: pduTrapEnPduNumber.setDescription('The PDU number.')
pduTrapEnRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTrapEnRS.setStatus('current')
if mibBuilder.loadTexts: pduTrapEnRS.setDescription('The PDU table row status.')
pduRMSVoltsUCLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSVoltsUCLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduRMSVoltsUCLTrapEn.setDescription('Enables Volts UCL trap.')
pduRMSVoltsUWLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSVoltsUWLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduRMSVoltsUWLTrapEn.setDescription('Enables UWL Volts trap.')
pduRMSVoltsLWLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSVoltsLWLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduRMSVoltsLWLTrapEn.setDescription('Enables LWL Volts trap.')
pduRMSVoltsLCLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSVoltsLCLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduRMSVoltsLCLTrapEn.setDescription('Enables LCL Volts trap.')
pduRMSAmpsUCLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSAmpsUCLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduRMSAmpsUCLTrapEn.setDescription('Enables UCL current trap.')
pduRMSAmpsUWLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSAmpsUWLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduRMSAmpsUWLTrapEn.setDescription('Enables UWL current trap.')
pduRMSAmpsLWLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSAmpsLWLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduRMSAmpsLWLTrapEn.setDescription('Enables LWL current trap.')
pduRMSAmpsLCLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSAmpsLCLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduRMSAmpsLCLTrapEn.setDescription('Enables LCL current trap.')
pduEnergyUCLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnergyUCLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduEnergyUCLTrapEn.setDescription('Enables UCL total energy trap.')
pduEnergyUWLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnergyUWLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduEnergyUWLTrapEn.setDescription('Enables UWL total energy trap.')
pduMeanKVAUCLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKVAUCLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduMeanKVAUCLTrapEn.setDescription('Enables mean kVA UCL trap.')
pduMeanKVAUWLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKVAUWLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduMeanKVAUWLTrapEn.setDescription('Enables mean kVA UWL trap.')
pduMeanKVALWLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKVALWLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduMeanKVALWLTrapEn.setDescription('Enables mean kVA LWL trap.')
pduMeanKVALCLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKVALCLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduMeanKVALCLTrapEn.setDescription('Enables mean kVA LCL trap.')
pduMeanKWattsUCLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKWattsUCLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduMeanKWattsUCLTrapEn.setDescription('Enables mean power UCL trap.')
pduMeanKWattsUWLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKWattsUWLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduMeanKWattsUWLTrapEn.setDescription('Enables mean power UWL trap.')
pduMeanKWattsLWLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKWattsLWLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduMeanKWattsLWLTrapEn.setDescription('Enables mean power LWL trap.')
pduMeanKWattsLCLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKWattsLCLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduMeanKWattsLCLTrapEn.setDescription('Enables mean power LCL trap.')
pduPwrFactorUCLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPwrFactorUCLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduPwrFactorUCLTrapEn.setDescription('Enables power factor UCL trap.')
pduPwrFactorUWLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPwrFactorUWLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduPwrFactorUWLTrapEn.setDescription('Enables power factor UWL trap.')
pduPwrFactorLWLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPwrFactorLWLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduPwrFactorLWLTrapEn.setDescription('Enables power factor LWL trap.')
pduPwrFactorLCLTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 3, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPwrFactorLCLTrapEn.setStatus('current')
if mibBuilder.loadTexts: pduPwrFactorLCLTrapEn.setDescription('Enables power factor LCL trap.')
pduTrapPerTable = MibTable((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4), )
if mibBuilder.loadTexts: pduTrapPerTable.setStatus('current')
if mibBuilder.loadTexts: pduTrapPerTable.setDescription('The table which controls threshold value trap repetition for all PDUs enabled for monitoring.')
pduTrapPerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1), ).setIndexNames((0, "HAWK-I2-MIB", "pduTrapPduNumber"))
if mibBuilder.loadTexts: pduTrapPerEntry.setStatus('current')
if mibBuilder.loadTexts: pduTrapPerEntry.setDescription('A conceptual row containing information about one PDU.')
pduTrapPduNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTrapPduNumber.setStatus('current')
if mibBuilder.loadTexts: pduTrapPduNumber.setDescription('The PDU number.')
pduTrapPerRS = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTrapPerRS.setStatus('current')
if mibBuilder.loadTexts: pduTrapPerRS.setDescription('The PDU table row status.')
pduRMSVoltsUCLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSVoltsUCLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduRMSVoltsUCLTrapPer.setDescription('Sets UCL Volts trap repeat rate in seconds')
pduRMSVoltsUWLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSVoltsUWLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduRMSVoltsUWLTrapPer.setDescription('Sets UWL Volts trap repeat rate in seconds')
pduRMSVoltsLWLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSVoltsLWLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduRMSVoltsLWLTrapPer.setDescription('Sets LWL Volts trap repeat rate in seconds')
pduRMSVoltsLCLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSVoltsLCLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduRMSVoltsLCLTrapPer.setDescription('Sets LCL Volts trap repeat rate in seconds')
pduRMSAmpsUCLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSAmpsUCLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduRMSAmpsUCLTrapPer.setDescription('Sets UCL current trap repeat rate in seconds')
pduRMSAmpsUWLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSAmpsUWLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduRMSAmpsUWLTrapPer.setDescription('Sets UWL current trap repeat rate in seconds')
pduRMSAmpsLWLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSAmpsLWLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduRMSAmpsLWLTrapPer.setDescription('Sets LWL current trap repeat rate in seconds')
pduRMSAmpsLCLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRMSAmpsLCLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduRMSAmpsLCLTrapPer.setDescription('Sets LCL current trap repeat rate in seconds')
pduEnergyUCLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnergyUCLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduEnergyUCLTrapPer.setDescription('Sets UCL total energy trap repeat rate in seconds')
pduEnergyUWLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnergyUWLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduEnergyUWLTrapPer.setDescription('Sets UWL total energy trap repeat rate in seconds')
pduMeanKVAUCLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKVAUCLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduMeanKVAUCLTrapPer.setDescription('Sets mean kVA UCL trap repeat rate in seconds')
pduMeanKVAUWLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKVAUWLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduMeanKVAUWLTrapPer.setDescription('Sets mean kVA UWL trap repeat rate in seconds')
pduMeanKVALWLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKVALWLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduMeanKVALWLTrapPer.setDescription('Sets mean kVA LWL trap repeat rate in seconds')
pduMeanKVALCLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKVALCLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduMeanKVALCLTrapPer.setDescription('Sets mean kVA LCL trap repeat rate in seconds')
pduMeanKWattsUCLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKWattsUCLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduMeanKWattsUCLTrapPer.setDescription('Sets mean power UCL trap repeat rate in seconds')
pduMeanKWattsUWLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKWattsUWLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduMeanKWattsUWLTrapPer.setDescription('Sets mean power UWL trap repeat rate in seconds')
pduMeanKWattsLWLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKWattsLWLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduMeanKWattsLWLTrapPer.setDescription('Sets mean power LWL trap repeat rate in seconds')
pduMeanKWattsLCLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMeanKWattsLCLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduMeanKWattsLCLTrapPer.setDescription('Sets mean power LCL trap repeat rate in seconds')
pduPwrFactorUCLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPwrFactorUCLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduPwrFactorUCLTrapPer.setDescription('Sets power factor UCL trap repeat rate in seconds')
pduPwrFactorUWLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPwrFactorUWLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduPwrFactorUWLTrapPer.setDescription('Sets power factor UWL trap repeat rate in seconds')
pduPwrFactorLWLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPwrFactorLWLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduPwrFactorLWLTrapPer.setDescription('Sets power factor LWL trap repeat rate in seconds')
pduPwrFactorLCLTrapPer = MibTableColumn((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 7, 3, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPwrFactorLCLTrapPer.setStatus('current')
if mibBuilder.loadTexts: pduPwrFactorLCLTrapPer.setDescription('Sets power factor LCL trap repeat rate in seconds')
invProdSignature = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invProdSignature.setStatus('current')
if mibBuilder.loadTexts: invProdSignature.setDescription('Product data signature.')
invProdFormatVer = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invProdFormatVer.setStatus('current')
if mibBuilder.loadTexts: invProdFormatVer.setDescription('Product data format version.')
invManufCode = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invManufCode.setStatus('current')
if mibBuilder.loadTexts: invManufCode.setDescription('Manufacturer code.')
invOrderNum = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOrderNum.setStatus('current')
if mibBuilder.loadTexts: invOrderNum.setDescription('Order number.')
invBatchNum = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invBatchNum.setStatus('current')
if mibBuilder.loadTexts: invBatchNum.setDescription('Batch number.')
invProdTestTime = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invProdTestTime.setStatus('current')
if mibBuilder.loadTexts: invProdTestTime.setDescription('Data and time of production test.')
invUnitName = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invUnitName.setStatus('current')
if mibBuilder.loadTexts: invUnitName.setDescription('Unit name.')
invUnitPartNum = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invUnitPartNum.setStatus('current')
if mibBuilder.loadTexts: invUnitPartNum.setDescription('Unit part number.')
invHwRevision = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invHwRevision.setStatus('current')
if mibBuilder.loadTexts: invHwRevision.setDescription('Hardware revision number.')
invFwRevision = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invFwRevision.setStatus('current')
if mibBuilder.loadTexts: invFwRevision.setDescription('Firmware revision number.')
invSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invSerialNum.setStatus('current')
if mibBuilder.loadTexts: invSerialNum.setDescription('Serial number.')
invDefaultIPAddrType = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invDefaultIPAddrType.setStatus('current')
if mibBuilder.loadTexts: invDefaultIPAddrType.setDescription('The type of the IP addresses.')
invDefaultIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invDefaultIPAddr.setStatus('current')
if mibBuilder.loadTexts: invDefaultIPAddr.setDescription('Default unit IP address.')
invDefaultSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 14), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invDefaultSubNetMask.setStatus('current')
if mibBuilder.loadTexts: invDefaultSubNetMask.setDescription('Default unit sub-network mask.')
invDefaultGWAddr = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invDefaultGWAddr.setStatus('current')
if mibBuilder.loadTexts: invDefaultGWAddr.setDescription('Default unit default gateway address.')
invMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invMacAddr.setStatus('current')
if mibBuilder.loadTexts: invMacAddr.setDescription('Unit medium access control (MAC) address.')
invOk = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOk.setStatus('current')
if mibBuilder.loadTexts: invOk.setDescription("Confirms that the inventory record isn't corrupted.")
invInputCount = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invInputCount.setStatus('current')
if mibBuilder.loadTexts: invInputCount.setDescription('The maximum number of inputs that can be connected to the unit')
invOutputCount = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOutputCount.setStatus('current')
if mibBuilder.loadTexts: invOutputCount.setDescription('The maximum number of outputs that can be connected to the unit')
invKeypadCount = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invKeypadCount.setStatus('current')
if mibBuilder.loadTexts: invKeypadCount.setDescription('The maximum number of keypads that can be connected to the unit')
invAcuCount = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invAcuCount.setStatus('current')
if mibBuilder.loadTexts: invAcuCount.setDescription("The maximum number of ACU's that can be connected to the unit")
invAccessUserCount = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invAccessUserCount.setStatus('current')
if mibBuilder.loadTexts: invAccessUserCount.setDescription('The maximum number of user entries on the unit')
invPduCount = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 99, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invPduCount.setStatus('current')
if mibBuilder.loadTexts: invPduCount.setDescription("The maximum number of PDU's that can be connected to the unit")
trapCode = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 100, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCode.setStatus('current')
if mibBuilder.loadTexts: trapCode.setDescription('A decimal number to be carried on notifications of types 1 to 4 identifying the event which caused it. \n\t\tThe format of this number is BBEEffCCT where\n\n\t\t\tBB is the number of the relevant MIB branch.\n \t\t\tEE indicates what type of event caused the notification. This value is dependent upon branch number and implementation.\n\t\t\tCC is the channel number which was the source of the notification.\n\t\t\tT discriminates the type of data, e.g. temperature. This value is dependent upon branch number and implementation.\n\t\t\tff future use.\n\n\t\t\tFields are packed with leading zeros and are set to zero if not relevant to a particular notification.')
trapDescription = MibScalar((1, 3, 6, 1, 4, 1, 3711, 24, 1, 1, 100, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDescription.setStatus('current')
if mibBuilder.loadTexts: trapDescription.setDescription('A string to be carried on notifications of types 1 to 4 identifying the event which caused it. \n\t\tThe format of this string is as follows.\n\t\t\tField 1 - type of notification, e.g. warning, critical, etc.\n\t\t\tField 2 - data source, e.g. inputs. Generally this relates to a particular MIB branch.\n\t\t\tField 3 - channel number, e.g. input 1.\n\t\t\tField 4 - event, i.e. what caused the trap.\n\t\t\tField 5 - value at which the event occured, e.g. 900, indicating 90% humidity.\n\t\t\tField 6 - type of data, e.g. relative humidity\n\t\t\t\n\t\tFields are omitted if not relevant to a particular notification.')
alarmCritical = NotificationType((1, 3, 6, 1, 4, 1, 3711, 24, 0, 1)).setObjects(("HAWK-I2-MIB", "trapCode"), ("HAWK-I2-MIB", "trapDescription"))
if mibBuilder.loadTexts: alarmCritical.setStatus('current')
if mibBuilder.loadTexts: alarmCritical.setDescription('Critical alarm.')
alarmWarning = NotificationType((1, 3, 6, 1, 4, 1, 3711, 24, 0, 2)).setObjects(("HAWK-I2-MIB", "trapCode"), ("HAWK-I2-MIB", "trapDescription"))
if mibBuilder.loadTexts: alarmWarning.setStatus('current')
if mibBuilder.loadTexts: alarmWarning.setDescription('Warning alarm.')
alarmInformation = NotificationType((1, 3, 6, 1, 4, 1, 3711, 24, 0, 3)).setObjects(("HAWK-I2-MIB", "trapCode"), ("HAWK-I2-MIB", "trapDescription"))
if mibBuilder.loadTexts: alarmInformation.setStatus('current')
if mibBuilder.loadTexts: alarmInformation.setDescription('Information alarm.')
alarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 3711, 24, 0, 4)).setObjects(("HAWK-I2-MIB", "trapCode"), ("HAWK-I2-MIB", "trapDescription"))
if mibBuilder.loadTexts: alarmCleared.setStatus('current')
if mibBuilder.loadTexts: alarmCleared.setDescription('Alarm cleared.')
mibBuilder.exportSymbols("HAWK-I2-MIB", pduRMSVoltsLCLTrapEn=pduRMSVoltsLCLTrapEn, ipTHAName=ipTHAName, opBooleanEqn=opBooleanEqn, pduPwrFactorLCL=pduPwrFactorLCL, invBatchNum=invBatchNum, pduMonEntry=pduMonEntry, invOk=invOk, ipTempScaleFlag=ipTempScaleFlag, InputContactState=InputContactState, pduOutCycleAllPwd=pduOutCycleAllPwd, kpInUseTrapEn=kpInUseTrapEn, pduMeanKVALCLTrapEn=pduMeanKVALCLTrapEn, pduMeanKWattsUCLTrapEn=pduMeanKWattsUCLTrapEn, pduMeanKWattsLCLTrapPer=pduMeanKWattsLCLTrapPer, pduPwrFactorUCLTrapPer=pduPwrFactorUCLTrapPer, invDefaultIPAddrType=invDefaultIPAddrType, pduName=pduName, acus=acus, pduPwrFactorLCLTrapEn=pduPwrFactorLCLTrapEn, accUserName=accUserName, pduTrapThreshRS=pduTrapThreshRS, pduRMSAmpsLWLTrapPer=pduRMSAmpsLWLTrapPer, ipTHAValue=ipTHAValue, ContactState=ContactState, ipTHATrapEnRS=ipTHATrapEnRS, ipTHAAutoDetect=ipTHAAutoDetect, kpRS=kpRS, pduOutAll=pduOutAll, pduOutNumber=pduOutNumber, hawki2MIB=hawki2MIB, opTrapPeriod=opTrapPeriod, ipContact=ipContact, ipTHAThreshEntry=ipTHAThreshEntry, ipContEntry=ipContEntry, pduTrapEnTable=pduTrapEnTable, pduMeanKWattsLWLTrapEn=pduMeanKWattsLWLTrapEn, DisplayString=DisplayString, pduNumOfOutlets=pduNumOfOutlets, pduRMSVoltsUWL=pduRMSVoltsUWL, pduRMSAmpsLCLTrapEn=pduRMSAmpsLCLTrapEn, pduOutCycle=pduOutCycle, pduMeanKVAUWLTrapEn=pduMeanKVAUWLTrapEn, alarmInformation=alarmInformation, pduPwrFactorUWLTrapPer=pduPwrFactorUWLTrapPer, kpEnable=kpEnable, invManufCode=invManufCode, opCurrState=opCurrState, ipContTrigMode=ipContTrigMode, pduMeanKWattsUWL=pduMeanKWattsUWL, acuCtlEntry=acuCtlEntry, pduRMSAmpsLCL=pduRMSAmpsLCL, pduOutCycleAllAbort=pduOutCycleAllAbort, opSelect=opSelect, pduMeanKWattsLWLTrapPer=pduMeanKWattsLWLTrapPer, invUnitName=invUnitName, pduEnergyUWLTrapPer=pduEnergyUWLTrapPer, ipTHAThreshRS=ipTHAThreshRS, pduOutOn=pduOutOn, pduMeanKVAUCLTrapEn=pduMeanKVAUCLTrapEn, ipTHAEntry=ipTHAEntry, pduTotalEnergyValue=pduTotalEnergyValue, pduSelect=pduSelect, acuCtlTable=acuCtlTable, pduRMSAmpsUWLTrapEn=pduRMSAmpsUWLTrapEn, accUserInstance=accUserInstance, pduMeanKWattsLCL=pduMeanKWattsLCL, ipTHAUCLTrapEn=ipTHAUCLTrapEn, invProdTestTime=invProdTestTime, kpManufacturer=kpManufacturer, acuRtnToStndbyTimeOut=acuRtnToStndbyTimeOut, ipEnable=ipEnable, ipTHATrapUCLPer=ipTHATrapUCLPer, opInsert=opInsert, invMacAddr=invMacAddr, invPduCount=invPduCount, pduOutName=pduOutName, acuDoorLatchTimeOut=acuDoorLatchTimeOut, opTable=opTable, pduOutCmnTable=pduOutCmnTable, pduOutTable=pduOutTable, invDefaultIPAddr=invDefaultIPAddr, accUserEntry=accUserEntry, pduPwrFactorValue=pduPwrFactorValue, ipTHALWLTrapEn=ipTHALWLTrapEn, ipTHATrapEnEntry=ipTHATrapEnEntry, pduRMSVoltsUCLTrapPer=pduRMSVoltsUCLTrapPer, pduMonitor=pduMonitor, pduPwrFactorLWLTrapPer=pduPwrFactorLWLTrapPer, invProdSignature=invProdSignature, trapInfo=trapInfo, ipTHAOffset=ipTHAOffset, invOutputCount=invOutputCount, ipTHARS=ipTHARS, pduMeanKVAUWLTrapPer=pduMeanKVAUWLTrapPer, pduMeanKVALCL=pduMeanKVALCL, opOffDelTime=opOffDelTime, pduMeanKWattsLWL=pduMeanKWattsLWL, invAcuCount=invAcuCount, ipTHA=ipTHA, ipTHAThreshChan=ipTHAThreshChan, ipContTrapEn=ipContTrapEn, pduOutGlobalCycleAbortTime=pduOutGlobalCycleAbortTime, accUserCtl=accUserCtl, accUserExpires=accUserExpires, pduRMSAmpsUCLTrapPer=pduRMSAmpsUCLTrapPer, pduMeanKVAUWL=pduMeanKVAUWL, inventory=inventory, pduMonRS=pduMonRS, trapCode=trapCode, ipTHAUWL=ipTHAUWL, pduTrapPerTable=pduTrapPerTable, ipTHATrapEnChan=ipTHATrapEnChan, pduCommon=pduCommon, pduEntry=pduEntry, pduPwrFactorLWLTrapEn=pduPwrFactorLWLTrapEn, opTrapEn=opTrapEn, pduTable=pduTable, pduRS=pduRS, opEnable=opEnable, v1=v1, EnableState=EnableState, acuCtlRS=acuCtlRS, pduEnergyUCL=pduEnergyUCL, invOrderNum=invOrderNum, opLocn=opLocn, ipTHATrapLCLPer=ipTHATrapLCLPer, pduRMSAmpsUWLTrapPer=pduRMSAmpsUWLTrapPer, kpSelect=kpSelect, pduMeanKWattsUCL=pduMeanKWattsUCL, pduOutCycleAbortTime=pduOutCycleAbortTime, opOnDelTime=opOnDelTime, opControlState=opControlState, accUserPrivileges=accUserPrivileges, ipTHAUCL=ipTHAUCL, opNormState=opNormState, invSerialNum=invSerialNum, pduMonEn=pduMonEn, ipTHAHysteresis=ipTHAHysteresis, acuManufacturer=acuManufacturer, ipContTable=ipContTable, kpNumber=kpNumber, pduOutPwd=pduOutPwd, ipContTrapPeriod=ipContTrapPeriod, acuName=acuName, pduTrapEnEntry=pduTrapEnEntry, pduRMSAmpsUCLTrapEn=pduRMSAmpsUCLTrapEn, ipTHATrapEnTable=ipTHATrapEnTable, ipTHATrapLWLPer=ipTHATrapLWLPer, PYSNMP_MODULE_ID=hawki2MIB, keypads=keypads, acuEntryCodeValid=acuEntryCodeValid, pduRMSVoltsLWL=pduRMSVoltsLWL, RelayState=RelayState, invInputCount=invInputCount, outputs=outputs, ipCommon=ipCommon, pduOutEntry=pduOutEntry, invAccessUserCount=invAccessUserCount, ipTHAThreshTable=ipTHAThreshTable, pduRMSVoltsLWLTrapEn=pduRMSVoltsLWLTrapEn, pduOutCyclePwd=pduOutCyclePwd, alarmWarning=alarmWarning, pduMeanKVAUCLTrapPer=pduMeanKVAUCLTrapPer, ipTHAUWLTrapEn=ipTHAUWLTrapEn, pduPwrFactorLWL=pduPwrFactorLWL, pduEnergyUWLTrapEn=pduEnergyUWLTrapEn, invKeypadCount=invKeypadCount, ipTHAScaling=ipTHAScaling, ipContName=ipContName, pduTrapThreshTable=pduTrapThreshTable, inputs=inputs, InputDataType=InputDataType, OutputControlState=OutputControlState, pduTrapThreshPduNumber=pduTrapThreshPduNumber, pduRMSVoltsLCL=pduRMSVoltsLCL, pduTrapEnRS=pduTrapEnRS, pduMeanKVALWLTrapEn=pduMeanKVALWLTrapEn, kpInsert=kpInsert, pduCommsFail=pduCommsFail, pduOutCycleAbortTask=pduOutCycleAbortTask, ipTHATrapPerRS=ipTHATrapPerRS, access=access, invUnitPartNum=invUnitPartNum, acuNumber=acuNumber, pduEnergyUCLTrapPer=pduEnergyUCLTrapPer, pduPwrFactorLCLTrapPer=pduPwrFactorLCLTrapPer, trapDescription=trapDescription, pduNumber=pduNumber, alarmCritical=alarmCritical, pduMeanKWattsUWLTrapPer=pduMeanKWattsUWLTrapPer, pduRMSVoltsLWLTrapPer=pduRMSVoltsLWLTrapPer, pdus=pdus, ipContNormState=ipContNormState, kpRtnToStndbyTimeOut=kpRtnToStndbyTimeOut, accUserTable=accUserTable, pduInsert=pduInsert, pduTrapPerRS=pduTrapPerRS, pduPwrFactorUCLTrapEn=pduPwrFactorUCLTrapEn, pduMeanKVALCLTrapPer=pduMeanKVALCLTrapPer, invHwRevision=invHwRevision, ipTHAChan=ipTHAChan, ipSelect=ipSelect, ipTHALWL=ipTHALWL, pduRMSVoltsUWLTrapEn=pduRMSVoltsUWLTrapEn, ipTHATable=ipTHATable, kpEntryCodeValid=kpEntryCodeValid, pduMeanKVAValue=pduMeanKVAValue, pdusEnable=pdusEnable, ipContReset=ipContReset, pduOutPduNumber=pduOutPduNumber, pduOutEn=pduOutEn, pduOutRebootPeriod=pduOutRebootPeriod, invFwRevision=invFwRevision, pduRMSVoltsUWLTrapPer=pduRMSVoltsUWLTrapPer, pduMeanKVALWLTrapPer=pduMeanKVALWLTrapPer, accUserNumber=accUserNumber, pduRMSAmpsUCL=pduRMSAmpsUCL, acuRemoteDoorOpen=acuRemoteDoorOpen, invProdFormatVer=invProdFormatVer, ipTHATrapPerTable=ipTHATrapPerTable, kpName=kpName, pduOutGlobalRebootTime=pduOutGlobalRebootTime, ipTHALocn=ipTHALocn, pduOutCmnEntry=pduOutCmnEntry, pduPwrFactorUCL=pduPwrFactorUCL, ipContChan=ipContChan, opName=opName, ipContCurrState=ipContCurrState, pduEnergyUCLTrapEn=pduEnergyUCLTrapEn, pduEnergyUWL=pduEnergyUWL, kpDoorOpenTimeOut=kpDoorOpenTimeOut, pduRMSAmpsLWLTrapEn=pduRMSAmpsLWLTrapEn, kpCtlTable=kpCtlTable, ipContAutoDetect=ipContAutoDetect, pduMeanKWattsUWLTrapEn=pduMeanKWattsUWLTrapEn, pduMeanKWattsLCLTrapEn=pduMeanKWattsLCLTrapEn, pduMeanKWattsValue=pduMeanKWattsValue, ipTHAType=ipTHAType, accUserRS=accUserRS, ipTHALCL=ipTHALCL, ipInsert=ipInsert, pduRMSAmpsValue=pduRMSAmpsValue, pduRMSVoltsLCLTrapPer=pduRMSVoltsLCLTrapPer, pduOutCycleDelay=pduOutCycleDelay, objects=objects, pduTrapPerEntry=pduTrapPerEntry, invDefaultGWAddr=invDefaultGWAddr, pduOutGlobalCycleDelay=pduOutGlobalCycleDelay, acuEnable=acuEnable, accUserSetup=accUserSetup, pduOutCycleAll=pduOutCycleAll, kpDoorLatchTimeOut=kpDoorLatchTimeOut, ipTHATrapUWLPer=ipTHATrapUWLPer, pduRMSAmpsLCLTrapPer=pduRMSAmpsLCLTrapPer)
mibBuilder.exportSymbols("HAWK-I2-MIB", pduRMSVoltsValue=pduRMSVoltsValue, invDefaultSubNetMask=invDefaultSubNetMask, alarmCleared=alarmCleared, traps=traps, ipTHATrapsCfg=ipTHATrapsCfg, pduMeanKVALWL=pduMeanKVALWL, ipContLocn=ipContLocn, pduTrapPduNumber=pduTrapPduNumber, pduPwrFactorUWL=pduPwrFactorUWL, ipContRS=ipContRS, pduOutCmnPduNumber=pduOutCmnPduNumber, acuInsert=acuInsert, pduOutRS=pduOutRS, pduOutCmnRS=pduOutCmnRS, ipTHALCLTrapEn=ipTHALCLTrapEn, ipTHATrapPerChan=ipTHATrapPerChan, opEntry=opEntry, ipTHATrapPerEntry=ipTHATrapPerEntry, kpRemoteDoorOpen=kpRemoteDoorOpen, pduMeanKWattsUCLTrapPer=pduMeanKWattsUCLTrapPer, pduRMSVoltsUCLTrapEn=pduRMSVoltsUCLTrapEn, pduOutlets=pduOutlets, pduRMSVoltsUCL=pduRMSVoltsUCL, acuDoorOpenTimeOut=acuDoorOpenTimeOut, pduRMSAmpsLWL=pduRMSAmpsLWL, accUserCode=accUserCode, pduMonPduNumber=pduMonPduNumber, acuInUseTrapEn=acuInUseTrapEn, sinetica=sinetica, opChan=opChan, pduTrapThreshEntry=pduTrapThreshEntry, pduTrapEnPduNumber=pduTrapEnPduNumber, pduRMSAmpsUWL=pduRMSAmpsUWL, pduMonTable=pduMonTable, pduMeanKVAUCL=pduMeanKVAUCL, pduPwrFactorUWLTrapEn=pduPwrFactorUWLTrapEn, acuSelect=acuSelect, kpCtlEntry=kpCtlEntry, opRS=opRS)
