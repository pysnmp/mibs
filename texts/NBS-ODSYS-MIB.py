#
# PySNMP MIB module NBS-ODSYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/mrv/NBS-ODSYS-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 12:01:40 2024
# On host fv-az1385-213 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NbsTcMilliAmp, nbs, NbsTcStatusLevel, NbsTcStatusSimple, NbsTcMilliVolt, NbsTcTemperature, NbsTcPartIndex = mibBuilder.importSymbols("NBS-MIB", "NbsTcMilliAmp", "nbs", "NbsTcStatusLevel", "NbsTcStatusSimple", "NbsTcMilliVolt", "NbsTcTemperature", "NbsTcPartIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, ModuleIdentity, IpAddress, NotificationType, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, Gauge32, Bits, TimeTicks, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "IpAddress", "NotificationType", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "Gauge32", "Bits", "TimeTicks", "iso", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nbsOdsysMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 228))
if mibBuilder.loadTexts: nbsOdsysMib.setLastUpdated('201308200000Z')
if mibBuilder.loadTexts: nbsOdsysMib.setOrganization('NBS')
if mibBuilder.loadTexts: nbsOdsysMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsOdsysMib.setDescription('For managing Opti-Driver systems.')
nbsOdsysChasGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 228, 2))
if mibBuilder.loadTexts: nbsOdsysChasGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysChasGrp.setDescription('Chassis component overview')
nbsOdsysCcGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 228, 3))
if mibBuilder.loadTexts: nbsOdsysCcGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysCcGrp.setDescription('Chassis control card information')
nbsOdsysFtGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 228, 4))
if mibBuilder.loadTexts: nbsOdsysFtGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtGrp.setDescription('Chassis cooling system')
nbsOdsysPsGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 228, 5))
if mibBuilder.loadTexts: nbsOdsysPsGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsGrp.setDescription('Chassis power supplies')
nbsOdsysEventsGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 228, 100))
if mibBuilder.loadTexts: nbsOdsysEventsGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysEventsGrp.setDescription('')
nbsOdsysEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 228, 100, 0))
if mibBuilder.loadTexts: nbsOdsysEvents.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysEvents.setDescription('Event NOTIFICATIONS')
nbsOdsysChasTable = MibTable((1, 3, 6, 1, 4, 1, 629, 228, 2, 1), )
if mibBuilder.loadTexts: nbsOdsysChasTable.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysChasTable.setDescription('')
nbsOdsysChasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 228, 2, 1, 1), ).setIndexNames((0, "NBS-ODSYS-MIB", "nbsOdsysChasIndex"))
if mibBuilder.loadTexts: nbsOdsysChasEntry.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysChasEntry.setDescription('Information about a particular OptiDriver chassis.')
nbsOdsysChasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysChasIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysChasIndex.setDescription('The nbsCmmcChassisIndex of this chassis')
nbsOdsysChasCcMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysChasCcMaxCount.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysChasCcMaxCount.setDescription('The maximum number of control cards that can be installed in this chassis')
nbsOdsysChasPsMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysChasPsMaxCount.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysChasPsMaxCount.setDescription('The number of power supply bays/slots in this chassis')
nbsOdsysChasFtMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 2, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysChasFtMaxCount.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysChasFtMaxCount.setDescription('The number of fan tray bays/slots in this chassis')
nbsOdsysCcTable = MibTable((1, 3, 6, 1, 4, 1, 629, 228, 3, 1), )
if mibBuilder.loadTexts: nbsOdsysCcTable.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysCcTable.setDescription('Information about OptiDriver chassis control/fpga cards')
nbsOdsysCcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 228, 3, 1, 1), ).setIndexNames((0, "NBS-ODSYS-MIB", "nbsOdsysCcChasIndex"), (0, "NBS-ODSYS-MIB", "nbsOdsysCcBayIndex"))
if mibBuilder.loadTexts: nbsOdsysCcEntry.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysCcEntry.setDescription('Status information for a particular control card slot/bay.\n        When a control card is present, it will also have entries\n        in nbsPartHardTable, nbsPartFirmTable, and nbsPartProgTable.\n\n        The events nbsOdsysTrapCcFailed, nbsOdsysTrapCcRestored,\n        nbsOdsysTrapCcRemoved and nbsOdsysTrapCcInserted indicate\n        changes in nbsOdsysCcOperationalStatus.')
nbsOdsysCcChasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysCcChasIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysCcChasIndex.setDescription("The nbsCmmcChassisIndex of this control card's chassis")
nbsOdsysCcBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysCcBayIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysCcBayIndex.setDescription('The control card slot/bay #')
nbsOdsysCcChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 3, 1, 1, 10), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysCcChIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysCcChIfIndex.setDescription("The nbsPartHardIfIndex of this Cc daughtercard's chassis")
nbsOdsysCcPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 3, 1, 1, 11), NbsTcPartIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysCcPartIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysCcPartIndex.setDescription('The nbsPartHardPartIndex of this Cc daughtercard')
nbsOdsysCcThermActual = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 3, 1, 1, 30), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysCcThermActual.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysCcThermActual.setDescription('Indicates the current temperature reading,\n        in degrees celsius')
nbsOdsysCcThermLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 3, 1, 1, 40), NbsTcStatusLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysCcThermLevel.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysCcThermLevel.setDescription('Indicates level of current temperature reading with respect\n        to the CcTherm threshold objects below')
nbsOdsysCcThermThreshLoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 3, 1, 1, 41), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysCcThermThreshLoErr.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysCcThermThreshLoErr.setDescription('Indicates the minimum functional operating temperature,\n        in degrees celsius')
nbsOdsysCcThermThreshLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 3, 1, 1, 42), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysCcThermThreshLoWarn.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysCcThermThreshLoWarn.setDescription('Indicates the minimum safe operating temperature,\n        in degrees celsius')
nbsOdsysCcThermThreshHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 3, 1, 1, 43), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysCcThermThreshHiWarn.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysCcThermThreshHiWarn.setDescription('Indicates the maximum safe operating temperature,\n        in degrees celsius')
nbsOdsysCcThermThreshHiErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 3, 1, 1, 44), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysCcThermThreshHiErr.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysCcThermThreshHiErr.setDescription('Indicates the maximum functional operating temperature,\n        in degrees celsius')
nbsOdsysCcOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 3, 1, 1, 50), NbsTcStatusSimple()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysCcOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysCcOperationalStatus.setDescription('Operational status of this daughtercard')
nbsOdsysFtTable = MibTable((1, 3, 6, 1, 4, 1, 629, 228, 4, 1), )
if mibBuilder.loadTexts: nbsOdsysFtTable.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtTable.setDescription('')
nbsOdsysFtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 228, 4, 1, 1), ).setIndexNames((0, "NBS-ODSYS-MIB", "nbsOdsysFtChasIndex"), (0, "NBS-ODSYS-MIB", "nbsOdsysFtBayIndex"))
if mibBuilder.loadTexts: nbsOdsysFtEntry.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtEntry.setDescription('A particular chassis cooling assembly slot/bay.\n\n        Each installed fan tray also has entries in nbsPartHardTable.\n\n        The events nbsCmmcTrapFanFailure, nbsCmmcTrapFanRestored,\n        nbsCmmcTrapFanRemoved and nbsCmmcTrapFanInserted indicate\n        changes in nbsOdsysFtOperationalStatus.')
nbsOdsysFtChasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysFtChasIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtChasIndex.setDescription("nbsCmmcChassisIndex of this fan tray's chassis")
nbsOdsysFtBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysFtBayIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtBayIndex.setDescription('Fan tray bay/slot number, unique within this chassis')
nbsOdsysFtOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 4, 1, 1, 3), NbsTcStatusSimple()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysFtOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtOperationalStatus.setDescription('The value notSupported(1) indicates the fan tray is absent.')
nbsOdsysFtChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 4, 1, 1, 10), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysFtChIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtChIfIndex.setDescription("The nbsPartHardIfIndex of this fan tray's chassis")
nbsOdsysFtPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 4, 1, 1, 11), NbsTcPartIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysFtPartIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtPartIndex.setDescription('The nbsPartHardPartIndex of this fan tray')
nbsOdsysFtFanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 4, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysFtFanCount.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtFanCount.setDescription('The number of fans in this tray')
nbsOdsysFtThermActual = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 4, 1, 1, 30), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysFtThermActual.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtThermActual.setDescription('Indicates the current temperature reading,\n        in degrees celsius')
nbsOdsysFtThermLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 4, 1, 1, 40), NbsTcStatusLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysFtThermLevel.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtThermLevel.setDescription('Indicates level of current temperature reading with respect\n        to the FtTherm threshold objects below')
nbsOdsysFtThermThreshLoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 4, 1, 1, 41), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysFtThermThreshLoErr.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtThermThreshLoErr.setDescription('Indicates the minimum functional operating temperature,\n        in degrees celsius')
nbsOdsysFtThermThreshLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 4, 1, 1, 42), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysFtThermThreshLoWarn.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtThermThreshLoWarn.setDescription('Indicates the minimum safe operating temperature,\n        in degrees celsius')
nbsOdsysFtThermThreshHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 4, 1, 1, 43), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysFtThermThreshHiWarn.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtThermThreshHiWarn.setDescription('Indicates the maximum safe operating temperature,\n        in degrees celsius')
nbsOdsysFtThermThreshHiErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 4, 1, 1, 44), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysFtThermThreshHiErr.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysFtThermThreshHiErr.setDescription('Indicates the maximum functional operating temperature,\n        in degrees celsius')
nbsOdsysPsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 228, 5, 2), )
if mibBuilder.loadTexts: nbsOdsysPsTable.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsTable.setDescription("Information about OptiDriver chassis' power supplies")
nbsOdsysPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1), ).setIndexNames((0, "NBS-ODSYS-MIB", "nbsOdsysPsChasIndex"), (0, "NBS-ODSYS-MIB", "nbsOdsysPsBayIndex"))
if mibBuilder.loadTexts: nbsOdsysPsEntry.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsEntry.setDescription('A particular power supply slot/bay.\n\n        Each installed power supply also has entries in\n        nbsPartHardTable.\n\n        The events nbsCmmcTrapPowerSupplyFailure,\n        nbsCmmcTrapPowerSupplyRestored, nbsCmmcTrapPowerSupplyRemoved,\n        and nbsCmmcTrapPowerSupplyInserted indicate changes in\n        nbsOdsysFtOperationalStatus.')
nbsOdsysPsChasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsChasIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsChasIndex.setDescription("The nbsCmmcChassisIndex of this power supply's chassis")
nbsOdsysPsBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsBayIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsBayIndex.setDescription('Number of this power supply slot/bay')
nbsOdsysPsOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 3), NbsTcStatusSimple()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsOperationalStatus.setDescription('The value notSupported(1) indicates power supply is absent.')
nbsOdsysPsChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 10), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsChIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsChIfIndex.setDescription("The nbsPartHardIfIndex of this power supply's chassis")
nbsOdsysPsPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 11), NbsTcPartIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsPartIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsPartIndex.setDescription('The nbsPartHardPartIndex of this power supply')
nbsOdsysPsFanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsFanCount.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsFanCount.setDescription('Indicates how many internal fans this power supply has.')
nbsOdsysPsThermActual = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 40), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsThermActual.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsThermActual.setDescription('Indicates the current temperature reading,\n        in degrees celsius')
nbsOdsysPsThermLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 41), NbsTcStatusLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsThermLevel.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsThermLevel.setDescription('Indicates level of current temperature reading with respect\n        to the PsTherm threshold objects below')
nbsOdsysPsThermThreshLoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 42), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsThermThreshLoErr.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsThermThreshLoErr.setDescription('Indicates the minimum functional operating temperature,\n        in degrees celsius')
nbsOdsysPsThermThreshLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 43), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsThermThreshLoWarn.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsThermThreshLoWarn.setDescription('Indicates the minimum safe operating temperature,\n        in degrees celsius')
nbsOdsysPsThermThreshHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 44), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsThermThreshHiWarn.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsThermThreshHiWarn.setDescription('Indicates the maximum safe operating temperature,\n        in degrees celsius')
nbsOdsysPsThermThreshHiErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 45), NbsTcTemperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsThermThreshHiErr.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsThermThreshHiErr.setDescription('Indicates the maximum functional operating temperature,\n        in degrees celsius')
nbsOdsysPsVInActual = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 50), NbsTcMilliVolt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsVInActual.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsVInActual.setDescription('Indicates the input voltage reading, in millivolts')
nbsOdsysPsVInLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 51), NbsTcStatusLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsVInLevel.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsVInLevel.setDescription('Indicates level of input voltage reading with respect\n        to the PsVIn threshold objects below')
nbsOdsysPsVInThreshLoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 52), NbsTcMilliVolt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsVInThreshLoErr.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsVInThreshLoErr.setDescription('Indicates the minimum functional input voltage, in millivolts')
nbsOdsysPsVInThreshLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 53), NbsTcMilliVolt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsVInThreshLoWarn.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsVInThreshLoWarn.setDescription('Indicates the minimum safe input voltage, in millivolts')
nbsOdsysPsVInThreshHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 54), NbsTcMilliVolt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsVInThreshHiWarn.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsVInThreshHiWarn.setDescription('Indicates the maximum safe input voltage, in millivolts')
nbsOdsysPsVInThreshHiErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 55), NbsTcMilliVolt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsVInThreshHiErr.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsVInThreshHiErr.setDescription('Indicates the maximum functional input voltage, in millivolts')
nbsOdsysPsVOutActual = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 60), NbsTcMilliVolt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsVOutActual.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsVOutActual.setDescription('Indicates the output voltage reading, in millivolts')
nbsOdsysPsVOutLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 61), NbsTcStatusLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsVOutLevel.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsVOutLevel.setDescription('Indicates level of output voltage reading with respect\n        to the PsVOut threshold objects below')
nbsOdsysPsVOutThreshLoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 62), NbsTcMilliVolt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsVOutThreshLoErr.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsVOutThreshLoErr.setDescription('Indicates the minimum functional output voltage, in millivolts')
nbsOdsysPsVOutThreshLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 63), NbsTcMilliVolt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsVOutThreshLoWarn.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsVOutThreshLoWarn.setDescription('Indicates the minimum safe output voltage, in millivolts')
nbsOdsysPsVOutThreshHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 64), NbsTcMilliVolt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsVOutThreshHiWarn.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsVOutThreshHiWarn.setDescription('Indicates the maximum safe output voltage, in millivolts')
nbsOdsysPsVOutThreshHiErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 65), NbsTcMilliVolt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsVOutThreshHiErr.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsVOutThreshHiErr.setDescription('Indicates the maximum functional output voltage, in millivolts')
nbsOdsysPsIInActual = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 70), NbsTcMilliAmp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsIInActual.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsIInActual.setDescription('Indicates the input current reading, in milliamps')
nbsOdsysPsIInLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 71), NbsTcStatusLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsIInLevel.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsIInLevel.setDescription('Indicates level of input current reading with respect\n        to the PsIIn threshold objects below')
nbsOdsysPsIInThreshLoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 72), NbsTcMilliAmp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsIInThreshLoErr.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsIInThreshLoErr.setDescription('Indicates the minimum functional input current, in milliamps')
nbsOdsysPsIInThreshLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 73), NbsTcMilliAmp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsIInThreshLoWarn.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsIInThreshLoWarn.setDescription('Indicates the minimum safe input current, in milliamps')
nbsOdsysPsIInThreshHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 74), NbsTcMilliAmp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsIInThreshHiWarn.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsIInThreshHiWarn.setDescription('Indicates the maximum safe input current, in milliamps')
nbsOdsysPsIInThreshHiErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 75), NbsTcMilliAmp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsIInThreshHiErr.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsIInThreshHiErr.setDescription('Indicates the maximum functional input current, in milliamps')
nbsOdsysPsIOutActual = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 80), NbsTcMilliAmp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsIOutActual.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsIOutActual.setDescription('Indicates the output current, in milliamps')
nbsOdsysPsIOutLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 81), NbsTcStatusLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsIOutLevel.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsIOutLevel.setDescription('Indicates level of output current reading with respect\n        to the PsIOut threshold objects below')
nbsOdsysPsIOutThreshLoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 82), NbsTcMilliAmp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsIOutThreshLoErr.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsIOutThreshLoErr.setDescription('Indicates the minimum functional output current, in milliamps')
nbsOdsysPsIOutThreshLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 83), NbsTcMilliAmp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsIOutThreshLoWarn.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsIOutThreshLoWarn.setDescription('Indicates the minimum safe output current, in milliamps')
nbsOdsysPsIOutThreshHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 84), NbsTcMilliAmp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsIOutThreshHiWarn.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsIOutThreshHiWarn.setDescription('Indicates the maximum safe output current, in milliamps')
nbsOdsysPsIOutThreshHiErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 228, 5, 2, 1, 85), NbsTcMilliAmp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOdsysPsIOutThreshHiErr.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysPsIOutThreshHiErr.setDescription('Indicates the maximum functional output current, in milliamps')
nbsOdsysTrapCcThermLevelBad = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 30)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysCcChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysCcBayIndex"), ("NBS-ODSYS-MIB", "nbsOdsysCcThermActual"), ("NBS-ODSYS-MIB", "nbsOdsysCcThermLevel"))
if mibBuilder.loadTexts: nbsOdsysTrapCcThermLevelBad.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapCcThermLevelBad.setDescription('Sent when nbsOdsysCcThermLevel changes to anything but\n        statusGood (4)')
nbsOdsysTrapCcThermLevelOk = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 31)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysCcChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysCcBayIndex"), ("NBS-ODSYS-MIB", "nbsOdsysCcThermActual"), ("NBS-ODSYS-MIB", "nbsOdsysCcThermLevel"))
if mibBuilder.loadTexts: nbsOdsysTrapCcThermLevelOk.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapCcThermLevelOk.setDescription('Sent when nbsOdsysCcThermLevel changes to statusGood (4)')
nbsOdsysTrapFtThermLevelBad = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 40)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysFtChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysFtBayIndex"), ("NBS-ODSYS-MIB", "nbsOdsysFtThermActual"), ("NBS-ODSYS-MIB", "nbsOdsysFtThermLevel"))
if mibBuilder.loadTexts: nbsOdsysTrapFtThermLevelBad.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapFtThermLevelBad.setDescription("Sent when fan tray's nbsOdsysFtThermLevel changes to\n        anything but statusGood (4)")
nbsOdsysTrapFtThermLevelOk = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 41)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysFtChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysFtBayIndex"), ("NBS-ODSYS-MIB", "nbsOdsysFtThermActual"), ("NBS-ODSYS-MIB", "nbsOdsysFtThermLevel"))
if mibBuilder.loadTexts: nbsOdsysTrapFtThermLevelOk.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapFtThermLevelOk.setDescription("Sent when fan tray's nbsOdsysFtThermLevel changes to\n        statusGood (4)")
nbsOdsysTrapPsThermLevelBad = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 50)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysPsChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsBayIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsThermActual"), ("NBS-ODSYS-MIB", "nbsOdsysPsThermLevel"))
if mibBuilder.loadTexts: nbsOdsysTrapPsThermLevelBad.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapPsThermLevelBad.setDescription("Sent when power supply's nbsOdsysPsThermLevel changes to\n        anything but statusGood (4)")
nbsOdsysTrapPsThermLevelOk = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 51)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysPsChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsBayIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsThermActual"), ("NBS-ODSYS-MIB", "nbsOdsysPsThermLevel"))
if mibBuilder.loadTexts: nbsOdsysTrapPsThermLevelOk.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapPsThermLevelOk.setDescription("Sent when power supply's nbsOdsysPsThermLevel changes to\n        statusGood (4)")
nbsOdsysTrapPsVInLevelBad = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 60)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysPsChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsBayIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsVInActual"), ("NBS-ODSYS-MIB", "nbsOdsysPsVInLevel"))
if mibBuilder.loadTexts: nbsOdsysTrapPsVInLevelBad.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapPsVInLevelBad.setDescription("Sent when power supply's nbsOdsysPsVInLevel changes to\n        anything but statusGood (4)")
nbsOdsysTrapPsVInLevelOk = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 61)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysPsChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsBayIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsVInActual"), ("NBS-ODSYS-MIB", "nbsOdsysPsVInLevel"))
if mibBuilder.loadTexts: nbsOdsysTrapPsVInLevelOk.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapPsVInLevelOk.setDescription("Sent when power supply's nbsOdsysPsVInLevel changes to\n        statusGood (4)")
nbsOdsysTrapPsVOutLevelBad = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 70)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysPsChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsBayIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsVOutActual"), ("NBS-ODSYS-MIB", "nbsOdsysPsVOutLevel"))
if mibBuilder.loadTexts: nbsOdsysTrapPsVOutLevelBad.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapPsVOutLevelBad.setDescription("Sent when power supply's nbsOdsysPsVOutLevel changes to\n        anything but statusGood (4)")
nbsOdsysTrapPsVOutLevelOk = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 71)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysPsChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsBayIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsVOutActual"), ("NBS-ODSYS-MIB", "nbsOdsysPsVOutLevel"))
if mibBuilder.loadTexts: nbsOdsysTrapPsVOutLevelOk.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapPsVOutLevelOk.setDescription("Sent when power supply's nbsOdsysPsVOutLevel changes to\n        statusGood (4)")
nbsOdsysTrapPsIInLevelBad = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 80)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysPsChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsBayIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsIInActual"), ("NBS-ODSYS-MIB", "nbsOdsysPsIInLevel"))
if mibBuilder.loadTexts: nbsOdsysTrapPsIInLevelBad.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapPsIInLevelBad.setDescription("Sent when power supply's nbsOdsysPsIInLevel changes to\n        anything but statusGood (4)")
nbsOdsysTrapPsIInLevelOk = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 81)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysPsChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsBayIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsIInActual"), ("NBS-ODSYS-MIB", "nbsOdsysPsIInLevel"))
if mibBuilder.loadTexts: nbsOdsysTrapPsIInLevelOk.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapPsIInLevelOk.setDescription("Sent when power supply's nbsOdsysPsIInLevel changes to\n        statusGood (4)")
nbsOdsysTrapPsIOutLevelBad = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 90)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysPsChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsBayIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsIOutActual"), ("NBS-ODSYS-MIB", "nbsOdsysPsIOutLevel"))
if mibBuilder.loadTexts: nbsOdsysTrapPsIOutLevelBad.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapPsIOutLevelBad.setDescription("Sent when power supply's nbsOdsysPsIOutLevel changes to\n        anything but statusGood (4)")
nbsOdsysTrapPsIOutLevelOk = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 91)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysPsChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsBayIndex"), ("NBS-ODSYS-MIB", "nbsOdsysPsIOutActual"), ("NBS-ODSYS-MIB", "nbsOdsysPsIOutLevel"))
if mibBuilder.loadTexts: nbsOdsysTrapPsIOutLevelOk.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapPsIOutLevelOk.setDescription("Sent when power supply's nbsOdsysPsIOutLevel changes to\n        statusGood (4)")
nbsOdsysTrapCcFailed = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 131)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysCcChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysCcBayIndex"))
if mibBuilder.loadTexts: nbsOdsysTrapCcFailed.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapCcFailed.setDescription('Triggered when nbsOdsysCcOperationalStatus transitions to\n        bad (2)')
nbsOdsysTrapCcRestored = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 132)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysCcChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysCcBayIndex"))
if mibBuilder.loadTexts: nbsOdsysTrapCcRestored.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapCcRestored.setDescription('Triggered when nbsOdsysCcOperationalStatus transitions to\n        good (3)')
nbsOdsysTrapCcRemoved = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 133)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysCcChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysCcBayIndex"))
if mibBuilder.loadTexts: nbsOdsysTrapCcRemoved.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapCcRemoved.setDescription('Triggered when control card is removed from chassis')
nbsOdsysTrapCcInserted = NotificationType((1, 3, 6, 1, 4, 1, 629, 228, 100, 0, 134)).setObjects(("NBS-ODSYS-MIB", "nbsOdsysCcChasIndex"), ("NBS-ODSYS-MIB", "nbsOdsysCcBayIndex"))
if mibBuilder.loadTexts: nbsOdsysTrapCcInserted.setStatus('current')
if mibBuilder.loadTexts: nbsOdsysTrapCcInserted.setDescription('Triggered when control card is inserted into chassis')
mibBuilder.exportSymbols("NBS-ODSYS-MIB", nbsOdsysPsOperationalStatus=nbsOdsysPsOperationalStatus, nbsOdsysChasIndex=nbsOdsysChasIndex, nbsOdsysCcThermLevel=nbsOdsysCcThermLevel, nbsOdsysFtThermThreshLoErr=nbsOdsysFtThermThreshLoErr, nbsOdsysTrapPsIOutLevelBad=nbsOdsysTrapPsIOutLevelBad, nbsOdsysFtThermThreshHiErr=nbsOdsysFtThermThreshHiErr, nbsOdsysPsIInThreshLoWarn=nbsOdsysPsIInThreshLoWarn, nbsOdsysFtChasIndex=nbsOdsysFtChasIndex, nbsOdsysPsVInThreshHiWarn=nbsOdsysPsVInThreshHiWarn, nbsOdsysPsVOutThreshHiWarn=nbsOdsysPsVOutThreshHiWarn, nbsOdsysPsThermThreshHiErr=nbsOdsysPsThermThreshHiErr, nbsOdsysPsEntry=nbsOdsysPsEntry, nbsOdsysPsIInThreshLoErr=nbsOdsysPsIInThreshLoErr, nbsOdsysPsIOutThreshHiErr=nbsOdsysPsIOutThreshHiErr, nbsOdsysPsThermThreshHiWarn=nbsOdsysPsThermThreshHiWarn, nbsOdsysFtFanCount=nbsOdsysFtFanCount, nbsOdsysFtPartIndex=nbsOdsysFtPartIndex, nbsOdsysEventsGrp=nbsOdsysEventsGrp, nbsOdsysPsIInActual=nbsOdsysPsIInActual, nbsOdsysCcOperationalStatus=nbsOdsysCcOperationalStatus, nbsOdsysChasCcMaxCount=nbsOdsysChasCcMaxCount, nbsOdsysCcThermThreshLoErr=nbsOdsysCcThermThreshLoErr, nbsOdsysTrapPsVInLevelBad=nbsOdsysTrapPsVInLevelBad, nbsOdsysCcTable=nbsOdsysCcTable, nbsOdsysTrapPsIInLevelOk=nbsOdsysTrapPsIInLevelOk, nbsOdsysFtEntry=nbsOdsysFtEntry, nbsOdsysFtThermLevel=nbsOdsysFtThermLevel, PYSNMP_MODULE_ID=nbsOdsysMib, nbsOdsysPsVOutActual=nbsOdsysPsVOutActual, nbsOdsysCcThermActual=nbsOdsysCcThermActual, nbsOdsysFtOperationalStatus=nbsOdsysFtOperationalStatus, nbsOdsysPsIOutActual=nbsOdsysPsIOutActual, nbsOdsysCcGrp=nbsOdsysCcGrp, nbsOdsysPsThermThreshLoErr=nbsOdsysPsThermThreshLoErr, nbsOdsysPsVInThreshHiErr=nbsOdsysPsVInThreshHiErr, nbsOdsysEvents=nbsOdsysEvents, nbsOdsysMib=nbsOdsysMib, nbsOdsysChasEntry=nbsOdsysChasEntry, nbsOdsysPsVOutThreshHiErr=nbsOdsysPsVOutThreshHiErr, nbsOdsysCcThermThreshHiErr=nbsOdsysCcThermThreshHiErr, nbsOdsysPsVInThreshLoErr=nbsOdsysPsVInThreshLoErr, nbsOdsysPsIOutThreshLoErr=nbsOdsysPsIOutThreshLoErr, nbsOdsysTrapPsIOutLevelOk=nbsOdsysTrapPsIOutLevelOk, nbsOdsysChasPsMaxCount=nbsOdsysChasPsMaxCount, nbsOdsysTrapCcInserted=nbsOdsysTrapCcInserted, nbsOdsysCcEntry=nbsOdsysCcEntry, nbsOdsysPsIInLevel=nbsOdsysPsIInLevel, nbsOdsysPsIOutLevel=nbsOdsysPsIOutLevel, nbsOdsysPsChIfIndex=nbsOdsysPsChIfIndex, nbsOdsysTrapPsVOutLevelBad=nbsOdsysTrapPsVOutLevelBad, nbsOdsysFtThermThreshHiWarn=nbsOdsysFtThermThreshHiWarn, nbsOdsysTrapCcRemoved=nbsOdsysTrapCcRemoved, nbsOdsysChasFtMaxCount=nbsOdsysChasFtMaxCount, nbsOdsysPsIOutThreshHiWarn=nbsOdsysPsIOutThreshHiWarn, nbsOdsysChasGrp=nbsOdsysChasGrp, nbsOdsysCcChasIndex=nbsOdsysCcChasIndex, nbsOdsysTrapFtThermLevelOk=nbsOdsysTrapFtThermLevelOk, nbsOdsysPsVInThreshLoWarn=nbsOdsysPsVInThreshLoWarn, nbsOdsysPsIOutThreshLoWarn=nbsOdsysPsIOutThreshLoWarn, nbsOdsysPsVOutLevel=nbsOdsysPsVOutLevel, nbsOdsysPsTable=nbsOdsysPsTable, nbsOdsysPsGrp=nbsOdsysPsGrp, nbsOdsysPsVOutThreshLoWarn=nbsOdsysPsVOutThreshLoWarn, nbsOdsysPsIInThreshHiErr=nbsOdsysPsIInThreshHiErr, nbsOdsysTrapCcFailed=nbsOdsysTrapCcFailed, nbsOdsysTrapCcThermLevelOk=nbsOdsysTrapCcThermLevelOk, nbsOdsysPsPartIndex=nbsOdsysPsPartIndex, nbsOdsysChasTable=nbsOdsysChasTable, nbsOdsysTrapFtThermLevelBad=nbsOdsysTrapFtThermLevelBad, nbsOdsysTrapPsThermLevelOk=nbsOdsysTrapPsThermLevelOk, nbsOdsysFtThermActual=nbsOdsysFtThermActual, nbsOdsysCcChIfIndex=nbsOdsysCcChIfIndex, nbsOdsysCcThermThreshHiWarn=nbsOdsysCcThermThreshHiWarn, nbsOdsysPsVInLevel=nbsOdsysPsVInLevel, nbsOdsysPsThermLevel=nbsOdsysPsThermLevel, nbsOdsysTrapPsThermLevelBad=nbsOdsysTrapPsThermLevelBad, nbsOdsysPsIInThreshHiWarn=nbsOdsysPsIInThreshHiWarn, nbsOdsysPsThermActual=nbsOdsysPsThermActual, nbsOdsysCcPartIndex=nbsOdsysCcPartIndex, nbsOdsysCcThermThreshLoWarn=nbsOdsysCcThermThreshLoWarn, nbsOdsysTrapCcThermLevelBad=nbsOdsysTrapCcThermLevelBad, nbsOdsysTrapPsVOutLevelOk=nbsOdsysTrapPsVOutLevelOk, nbsOdsysFtTable=nbsOdsysFtTable, nbsOdsysFtChIfIndex=nbsOdsysFtChIfIndex, nbsOdsysPsChasIndex=nbsOdsysPsChasIndex, nbsOdsysTrapPsIInLevelBad=nbsOdsysTrapPsIInLevelBad, nbsOdsysFtBayIndex=nbsOdsysFtBayIndex, nbsOdsysFtGrp=nbsOdsysFtGrp, nbsOdsysTrapPsVInLevelOk=nbsOdsysTrapPsVInLevelOk, nbsOdsysTrapCcRestored=nbsOdsysTrapCcRestored, nbsOdsysPsVOutThreshLoErr=nbsOdsysPsVOutThreshLoErr, nbsOdsysCcBayIndex=nbsOdsysCcBayIndex, nbsOdsysPsFanCount=nbsOdsysPsFanCount, nbsOdsysPsThermThreshLoWarn=nbsOdsysPsThermThreshLoWarn, nbsOdsysPsVInActual=nbsOdsysPsVInActual, nbsOdsysPsBayIndex=nbsOdsysPsBayIndex, nbsOdsysFtThermThreshLoWarn=nbsOdsysFtThermThreshLoWarn)
