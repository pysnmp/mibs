#
# PySNMP MIB module ADTRAN-AOS-VQM (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adtran/ADTRAN-AOS-VQM
# Produced by pysmi-1.1.12 at Mon Jun  3 13:39:18 2024
# On host fv-az1530-906 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
adGenAOSVoice, adGenAOSConformance = mibBuilder.importSymbols("ADTRAN-AOS", "adGenAOSVoice", "adGenAOSConformance")
adIdentity, = mibBuilder.importSymbols("ADTRAN-MIB", "adIdentity")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, IpAddress, TimeTicks, ModuleIdentity, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, Bits, Counter32, Unsigned32, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "TimeTicks", "ModuleIdentity", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "Bits", "Counter32", "Unsigned32", "MibIdentifier", "Integer32")
TruthValue, DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "DateAndTime", "TextualConvention")
adGenAOSVQMMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 664, 6, 10000, 53, 5, 3))
if mibBuilder.loadTexts: adGenAOSVQMMib.setLastUpdated('200901060000Z')
if mibBuilder.loadTexts: adGenAOSVQMMib.setOrganization('ADTRAN, Inc.')
if mibBuilder.loadTexts: adGenAOSVQMMib.setContactInfo('Technical Support Dept.\n                Postal: ADTRAN, Inc.\n                901 Explorer Blvd.\n                Huntsville, AL 35806\n\n                Tel: +1 800 726-8663\n                Fax: +1 256 963 6217\n                E-mail: support@adtran.com')
if mibBuilder.loadTexts: adGenAOSVQMMib.setDescription('ADTRAN-AOS-VQM MIB module.')
adVQM = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3))
adVQMTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 0))
adVQMTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 1))
adVQMCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2))
adVQMThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3))
adVQMSysPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4))
adVQMInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5))
adVQMEndPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6))
adVQMHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7))
adVQMActive = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8))
class MOSvalue(TextualConvention, Integer32):
    description = 'MOS values typically are represented as a value from\n                        1.00-5.00. In this representation the MOS score will be\n                        scaled by 100.  Hence a value of 3.25 will be\n                        represented as 325. A value of 65535 shall be\n                        interpreted as NULL or unsupported.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(100, 1000), ValueRangeConstraint(65535, 65535), )
class Percentage(TextualConvention, Integer32):
    description = 'Percentages typically are represented as a value from\n                        0.00%-100.00%. In this representation the percentage\n                        will be scaled by 100.  Hence a value of 0.45 will be\n                        represented as 45 and a value of 100.00 will be\n                        represented as 1000. A value of 65535 shall be\n                        interpreted as NULL or unsupported.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 1000), ValueRangeConstraint(65535, 65535), )
class MsecValue(TextualConvention, Integer32):
    description = 'Millisecond values typically are represented as a\n                        value with a decimal place.\n                        In this representation th value will be\n                        scaled by 10.  Hence a value of 1.5 will be represented\n                        as 15.'
    status = 'current'
    displayHint = 'd'

adVQMEndOfCallTrap = NotificationType((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 0, 1)).setObjects(("ADTRAN-AOS-VQM", "adVqmTrapEventType"), ("ADTRAN-AOS-VQM", "adVqmCallHistMosLq"), ("ADTRAN-AOS-VQM", "adVqmCallHistMosPq"), ("ADTRAN-AOS-VQM", "adVqmCallHistPktsLostTotal"), ("ADTRAN-AOS-VQM", "adVqmCallHistOutOfOrder"), ("ADTRAN-AOS-VQM", "adVqmCallHistPdvAverageMs"))
if mibBuilder.loadTexts: adVQMEndOfCallTrap.setStatus('current')
if mibBuilder.loadTexts: adVQMEndOfCallTrap.setDescription('This trap indicates that the severity level has been met at the\n            end of a call to generate a trap. Enable this trap using\n            adVqmTrapState. The severity level, by default, is set to warning.\n            Use adVqmTrapCfgSeverityLevel to change the severity level setting.')
adVqmTrapState = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adVqmTrapState.setStatus('current')
if mibBuilder.loadTexts: adVqmTrapState.setDescription('This variable indicates whether the system produces\n            the vqmEndOfCall trap.')
adVqmTrapCfgSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("warning", 2), ("notice", 3), ("info", 4))).clone('warning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adVqmTrapCfgSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: adVqmTrapCfgSeverityLevel.setDescription('This read-write variable indicates the severity level that will\n            generate an adVqmEndOfCallTrap. If traps are enabled, a trap will be\n            generated at the end of a call for all calls that have a numerical\n            severity level equal to or less than the configured\n            severity level.')
adVqmTrapEventType = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 1, 3), Bits().clone(namedValues=NamedValues(("lQMos", 0), ("pQMos", 1), ("loss", 2), ("outOfOrder", 3), ("jitter", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmTrapEventType.setStatus('current')
if mibBuilder.loadTexts: adVqmTrapEventType.setDescription('This variable indicates the event that generated the most\n                recent trap. The vqmTrapEventType is a bitmap and can represent\n                multiple failures simultaneously.\n                The various bit positions are:\n                BIT   EVENT      DESCRIPTION\n                0     LQMos      LQ-MOS threshold exceeded\n                1     PQMos      PQ-MOS threshold exceeded\n                2     Loss       Loss threshold exceeded\n                3     OutOfOrder Out-of-Order threshold exceeded\n                4     Jitter     Jitter threshold exceeded\n                ')
adVqmCfgEnable = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgEnable.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgEnable.setDescription('VQM feature global enable/disable.')
adVqmCfgSipEnable = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgSipEnable.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgSipEnable.setDescription('VQM uses SIP signaling to monitor for RTP traffic.')
adVqmCfgUdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgUdpEnable.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgUdpEnable.setDescription('VQM uses UDP packet inspection to monitor for RTP\n                traffic.')
adVqmCfgInternationalCode = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5))).clone(namedValues=NamedValues(("none", 1), ("japan", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgInternationalCode.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgInternationalCode.setDescription('Regional scoring adjustment for VQM calculations.')
adVqmCfgJitterBufferType = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("jitterBufferFixed", 1), ("jitterBufferAdaptive", 2), ("jitterBufferUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgJitterBufferType.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgJitterBufferType.setDescription('Regional scoring adjustment for VQM calculations.')
adVqmCfgJitterBufferAdaptiveMin = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgJitterBufferAdaptiveMin.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgJitterBufferAdaptiveMin.setDescription('Minimum adaptive jitter buffer delay (10-240 ms).')
adVqmCfgJitterBufferAdaptiveNominal = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgJitterBufferAdaptiveNominal.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgJitterBufferAdaptiveNominal.setDescription('Adaptive starting delay applied to packets (10-240 ms).')
adVqmCfgJitterBufferAdaptiveMax = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgJitterBufferAdaptiveMax.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgJitterBufferAdaptiveMax.setDescription('Adaptive maximum jitter buffer delay (40-320 ms).')
adVqmCfgJitterBufferFixedNominal = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgJitterBufferFixedNominal.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgJitterBufferFixedNominal.setDescription('Fixed jitter buffer constant delay applied to packets\n                (4-250 ms).')
adVqmCfgJitterBufferFixedSize = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgJitterBufferFixedSize.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgJitterBufferFixedSize.setDescription('Number packets fixed jitter buffer can hold (10-500 pkts).')
adVqmCfgJitterBufferThresholdEarlyMs = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgJitterBufferThresholdEarlyMs.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgJitterBufferThresholdEarlyMs.setDescription('Jitter buffer threshold for early arriving packets.')
adVqmCfgJitterBufferThresholdLateMs = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgJitterBufferThresholdLateMs.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgJitterBufferThresholdLateMs.setDescription('Jitter buffer threshold for late arriving packets.')
adVqmCfgRoundTripPingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgRoundTripPingEnabled.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgRoundTripPingEnabled.setDescription('Ping use for measuring round-trip delay between\n                end-points.')
adVqmCfgRoundTripPingType = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ping", 1), ("timestamp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgRoundTripPingType.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgRoundTripPingType.setDescription('ICMP Ping or ICMP Timestamp used for delay measurements.')
adVqmCfgCallHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgCallHistorySize.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgCallHistorySize.setDescription('Size of Call History buffer.')
adVqmCfgHistoryThresholdLqmos = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 16), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgHistoryThresholdLqmos.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgHistoryThresholdLqmos.setDescription('Store history statistics if below LQ MOS threshold value.')
adVqmCfgHistoryThresholdCqmos = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 17), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgHistoryThresholdCqmos.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgHistoryThresholdCqmos.setDescription('Store history statistics if below CQ MOS threshold value.')
adVqmCfgHistoryThresholdPqmos = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 18), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgHistoryThresholdPqmos.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgHistoryThresholdPqmos.setDescription('Store history statistics if below PESQ MOS threshold\n                value.')
adVqmCfgHistoryThresholdLoss = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgHistoryThresholdLoss.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgHistoryThresholdLoss.setDescription('Store history statistics if loss packets are greater than\n                threshold value.')
adVqmCfgHistoryThresholdOutOfOrder = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgHistoryThresholdOutOfOrder.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgHistoryThresholdOutOfOrder.setDescription('Store history statistics if Out of Order packets are greater\n                than threshold value.')
adVqmCfgHistoryThresholdJitter = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCfgHistoryThresholdJitter.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgHistoryThresholdJitter.setDescription('Store history statistics if Jitter exceeds threshold value.')
adVqmCfgClear = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adVqmCfgClear.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgClear.setDescription('Clear all VQM statistics.\n            This is a write-only variable. A read will result in no action\n            being taken.')
adVqmCfgClearCallHistory = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adVqmCfgClearCallHistory.setStatus('current')
if mibBuilder.loadTexts: adVqmCfgClearCallHistory.setDescription('Clear only call history buffer.\n            This is a write-only variable. A read will result in no action\n            being taken.')
adVqmThresholdLqmosInfo = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 1), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdLqmosInfo.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdLqmosInfo.setDescription('Listening Quality MOS threshold value for info event.')
adVqmThresholdLqmosNotice = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 2), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdLqmosNotice.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdLqmosNotice.setDescription('Listening Quality MOS threshold value for notice event.')
adVqmThresholdLqmosWarning = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 3), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdLqmosWarning.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdLqmosWarning.setDescription('Listening Quality MOS threshold value for warning event.')
adVqmThresholdLqmosError = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 4), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdLqmosError.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdLqmosError.setDescription('Listening Quality MOS threshold value for error event.')
adVqmThresholdPqmosInfo = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 5), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdPqmosInfo.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdPqmosInfo.setDescription('Normalized PESQ MOS threshold value for info event.')
adVqmThresholdPqmosNotice = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 6), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdPqmosNotice.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdPqmosNotice.setDescription('Normalized PESQ MOS threshold value for notice event.')
adVqmThresholdPqmosWarning = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 7), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdPqmosWarning.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdPqmosWarning.setDescription('Normalized PESQ MOS threshold value for warning event.')
adVqmThresholdPqmosError = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 8), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdPqmosError.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdPqmosError.setDescription('Normalized PESQ MOS threshold value for error event.')
adVqmThresholdOutOfOrderInfo = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdOutOfOrderInfo.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdOutOfOrderInfo.setDescription('Out of order packet threshold value for info event.')
adVqmThresholdOutOfOrderNotice = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdOutOfOrderNotice.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdOutOfOrderNotice.setDescription('Out of order packet threshold value for notice event.')
adVqmThresholdOutOfOrderWarning = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdOutOfOrderWarning.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdOutOfOrderWarning.setDescription('Out of order packet threshold value for warning event.')
adVqmThresholdOutOfOrderError = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdOutOfOrderError.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdOutOfOrderError.setDescription('Out of order packet threshold value for error event.')
adVqmThresholdLossInfo = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdLossInfo.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdLossInfo.setDescription('Loss of packet threshold value for info event.')
adVqmThresholdLossNotice = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdLossNotice.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdLossNotice.setDescription('Loss of packet threshold value for notice event.')
adVqmThresholdLossWarning = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdLossWarning.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdLossWarning.setDescription('Loss of packet threshold value for warning event.')
adVqmThresholdLossError = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdLossError.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdLossError.setDescription('Loss of packet threshold value for error event.')
adVqmThresholdJitterInfo = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdJitterInfo.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdJitterInfo.setDescription('Jitter threshold value for info event.')
adVqmThresholdJitterNotice = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdJitterNotice.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdJitterNotice.setDescription('Jitter threshold value for notice event.')
adVqmThresholdJitterWarning = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdJitterWarning.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdJitterWarning.setDescription('Jitter threshold value for warning event.')
adVqmThresholdJitterError = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 3, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmThresholdJitterError.setStatus('current')
if mibBuilder.loadTexts: adVqmThresholdJitterError.setDescription('Jitter threshold value for error event.')
adVqmSysActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmSysActiveCalls.setStatus('current')
if mibBuilder.loadTexts: adVqmSysActiveCalls.setDescription('Number of active calls.')
adVqmSysActiveExcellent = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmSysActiveExcellent.setStatus('current')
if mibBuilder.loadTexts: adVqmSysActiveExcellent.setDescription('Active calls in excellent MOS range (4.400 - 4.000).')
adVqmSysActiveGood = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmSysActiveGood.setStatus('current')
if mibBuilder.loadTexts: adVqmSysActiveGood.setDescription('Active calls in good MOS range (3.999 - 3.600).')
adVqmSysActiveFair = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmSysActiveFair.setStatus('current')
if mibBuilder.loadTexts: adVqmSysActiveFair.setDescription('Active calls in fair MOS range (3.599 - 2.600).')
adVqmSysActivePoor = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmSysActivePoor.setStatus('current')
if mibBuilder.loadTexts: adVqmSysActivePoor.setDescription('Active calls in poor MOS range (2.599 - 0.000).')
adVqmSysCallHistoryCalls = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmSysCallHistoryCalls.setStatus('current')
if mibBuilder.loadTexts: adVqmSysCallHistoryCalls.setDescription('Number of calls in history buffer.')
adVqmSysCallHistoryExcellent = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmSysCallHistoryExcellent.setStatus('current')
if mibBuilder.loadTexts: adVqmSysCallHistoryExcellent.setDescription('History calls in excellent MOS range.')
adVqmSysCallHistoryGood = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmSysCallHistoryGood.setStatus('current')
if mibBuilder.loadTexts: adVqmSysCallHistoryGood.setDescription('History calls in good MOS range.')
adVqmSysCallHistoryFair = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmSysCallHistoryFair.setStatus('current')
if mibBuilder.loadTexts: adVqmSysCallHistoryFair.setDescription('History calls in fair MOS range.')
adVqmSysCallHistoryPoor = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmSysCallHistoryPoor.setStatus('current')
if mibBuilder.loadTexts: adVqmSysCallHistoryPoor.setDescription('History calls in poor MOS range.')
adVqmSysAllCallsExcellent = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmSysAllCallsExcellent.setStatus('current')
if mibBuilder.loadTexts: adVqmSysAllCallsExcellent.setDescription('Total calls in excellent MOS range.')
adVqmSysAllCallsGood = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmSysAllCallsGood.setStatus('current')
if mibBuilder.loadTexts: adVqmSysAllCallsGood.setDescription('Total calls in good MOS range.')
adVqmSysAllCallsFair = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmSysAllCallsFair.setStatus('current')
if mibBuilder.loadTexts: adVqmSysAllCallsFair.setDescription('Total calls in fair MOS range.')
adVqmSysAllCallsPoor = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmSysAllCallsPoor.setStatus('current')
if mibBuilder.loadTexts: adVqmSysAllCallsPoor.setDescription('Total calls in poor MOS range.')
adVQMInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1), )
if mibBuilder.loadTexts: adVQMInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: adVQMInterfaceTable.setDescription('The adVqmInterface table provides aggregate statistics for each\n            system interface.  VQM processes RTP stream packets as received by\n            the interface (inbound direction).  The user can enable or disable\n            each system interface for VQM using the CLI/GUI.  The VQM interface\n            table objects include enable/disable, packet statistics for number\n            received, lost, out-of-order, discarded, number of active and\n            completed calls, MOS scores, delay measurements, and quality\n            analysis counts.')
adVQMInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1), ).setIndexNames((0, "ADTRAN-AOS-VQM", "adVqmIfcId"))
if mibBuilder.loadTexts: adVQMInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: adVQMInterfaceEntry.setDescription('The statistics for a particular interface.')
adVqmIfcId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcId.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcId.setDescription('VQM interface index number. This number is unique to the VQM MIB.')
adVqmIfcName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcName.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcName.setDescription('Interface name.')
adVqmIfcPktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcPktsRx.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcPktsRx.setDescription('Packets received.')
adVqmIfcPktsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcPktsLost.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcPktsLost.setDescription('Packets lost.')
adVqmIfcPktsOoo = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcPktsOoo.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcPktsOoo.setDescription('Packets received out-of-order.')
adVqmIfcPktsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcPktsDiscarded.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcPktsDiscarded.setDescription('Packets discarded.')
adVqmIfcNumberActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcNumberActiveCalls.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcNumberActiveCalls.setDescription('Number of active calls.')
adVqmIfcTerminatedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcTerminatedCalls.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcTerminatedCalls.setDescription('Number of terminated calls.')
adVqmIfcRLqMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcRLqMinimum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcRLqMinimum.setDescription('Minimum listening quality R Factor.')
adVqmIfcRLqAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcRLqAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcRLqAverage.setDescription('Average listening quality R Factor.')
adVqmIfcRLqMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcRLqMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcRLqMaximum.setDescription('Maximum listening quality R Factor.')
adVqmIfcRCqMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcRCqMinimum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcRCqMinimum.setDescription('Minimum conversation quality R Factor.')
adVqmIfcRCqAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcRCqAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcRCqAverage.setDescription('Average conversation quality R Factor.')
adVqmIfcRCqMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcRCqMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcRCqMaximum.setDescription('Maximum conversation quality R Factor.')
adVqmIfcRG107Minimum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcRG107Minimum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcRG107Minimum.setDescription('Minimum G.107 R Factor.')
adVqmIfcRG107Average = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcRG107Average.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcRG107Average.setDescription('Average G.107 R Factor.')
adVqmIfcRG107Maximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcRG107Maximum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcRG107Maximum.setDescription('Maximum G.107 R Factor.')
adVqmIfcMosLqMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 18), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcMosLqMinimum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcMosLqMinimum.setDescription('Minimum listening quality MOS score.')
adVqmIfcMosLqAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 19), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcMosLqAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcMosLqAverage.setDescription('Average listening quality MOS score.')
adVqmIfcMosLqMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 20), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcMosLqMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcMosLqMaximum.setDescription('Maximum listening quality MOS score.')
adVqmIfcMosCqMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 21), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcMosCqMinimum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcMosCqMinimum.setDescription('Minimum conversation quality MOS score.')
adVqmIfcMosCqAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 22), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcMosCqAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcMosCqAverage.setDescription('Average conversation quality MOS score.')
adVqmIfcMosCqMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 23), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcMosCqMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcMosCqMaximum.setDescription('Maximum conversation quality MOS score.')
adVqmIfcMosPqMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 24), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcMosPqMinimum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcMosPqMinimum.setDescription('Minimum PESQ, P.862 raw MOS score.')
adVqmIfcMosPqAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 25), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcMosPqAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcMosPqAverage.setDescription('Average PESQ, P.862 raw MOS score.')
adVqmIfcMosPqMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 26), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcMosPqMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcMosPqMaximum.setDescription('Maximum PESQ, P.862 raw MOS score.')
adVqmIfcLossMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcLossMinimum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcLossMinimum.setDescription('Minimum network lost packets for all calls completed.')
adVqmIfcLossAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcLossAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcLossAverage.setDescription('Average network lost packets for all calls completed.')
adVqmIfcLossMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcLossMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcLossMaximum.setDescription('Maximum network lost packets for all calls completed.')
adVqmIfcDiscardsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcDiscardsMinimum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcDiscardsMinimum.setDescription('Minimum packets discarded due to late or early arrival.')
adVqmIfcDiscardsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcDiscardsAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcDiscardsAverage.setDescription('Average packets discarded due to late or early arrival.')
adVqmIfcDiscardsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcDiscardsMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcDiscardsMaximum.setDescription('Maximum packets discarded due to late or early arrival.')
adVqmIfcPdvAverageMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcPdvAverageMs.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcPdvAverageMs.setDescription('Mean of Average packet delay variation for packets.')
adVqmIfcPdvMaximumMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcPdvMaximumMs.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcPdvMaximumMs.setDescription('Maximum of reported average packet delay variation.')
adVqmIfcDelayMinMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcDelayMinMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcDelayMinMsec.setDescription('Minimum packet delay in ms.')
adVqmIfcDelayAvgMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcDelayAvgMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcDelayAvgMsec.setDescription('Average packet delay in ms.')
adVqmIfcDelayMaxMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcDelayMaxMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcDelayMaxMsec.setDescription('Maximum packet delay in ms.')
adVqmIfcNumberStreamsExcellent = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcNumberStreamsExcellent.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcNumberStreamsExcellent.setDescription('Number voice streams with excellent MOS score.')
adVqmIfcNumberStreamsGood = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcNumberStreamsGood.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcNumberStreamsGood.setDescription('Number voice streams with good MOS score.')
adVqmIfcNumberStreamsFair = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcNumberStreamsFair.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcNumberStreamsFair.setDescription('Number voice streams with fair MOS score.')
adVqmIfcNumberStreamsPoor = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmIfcNumberStreamsPoor.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcNumberStreamsPoor.setDescription('Number voice streams with poor MOS score.')
adVqmIfcClear = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 5, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adVqmIfcClear.setStatus('current')
if mibBuilder.loadTexts: adVqmIfcClear.setDescription('Clear all VQM statistics.\n            This is a write-only variable. A read will result in no action\n            being taken.')
adVQMEndPointTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1), )
if mibBuilder.loadTexts: adVQMEndPointTable.setStatus('current')
if mibBuilder.loadTexts: adVQMEndPointTable.setDescription('The adVqmEndPoint table provides aggregate statistics for each\n            VoIP end-point device.  The RTP Source IP address,\n            adVqmEndPointRtpSourceIp, provides a unique table index.\n            The VQM End-point table provides summary statistics for MOS scores,\n            packets lost, out-of-order, jitter, delay and quality analysis\n            counts.')
adVQMEndPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1), ).setIndexNames((0, "ADTRAN-AOS-VQM", "adVqmEndPointRtpSourceIp"))
if mibBuilder.loadTexts: adVQMEndPointEntry.setStatus('current')
if mibBuilder.loadTexts: adVQMEndPointEntry.setDescription('The statistics for a particular VoIP end-point device.')
adVqmEndPointRtpSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointRtpSourceIp.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointRtpSourceIp.setDescription('Source IP Address of RTP stream from this end-point.')
adVqmEndPointNumberCompletedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointNumberCompletedCalls.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointNumberCompletedCalls.setDescription('Number of completed calls on this end-point.')
adVqmEndPointInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointInterfaceId.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointInterfaceId.setDescription('Interface index that received RTP stream from this end-point.')
adVqmEndPointInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointInterfaceName.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointInterfaceName.setDescription('Interface name that received RTP stream from this end-point.')
adVqmEndPointMosLqMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 5), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointMosLqMinimum.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointMosLqMinimum.setDescription('Minimum listening quality MOS score.')
adVqmEndPointMosLqAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 6), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointMosLqAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointMosLqAverage.setDescription('Average listening quality MOS score.')
adVqmEndPointMosLqMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 7), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointMosLqMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointMosLqMaximum.setDescription('Maximum listening quality MOS score.')
adVqmEndPointMosPqMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 8), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointMosPqMinimum.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointMosPqMinimum.setDescription('Minimum PESQ MOS score.')
adVqmEndPointMosPqAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 9), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointMosPqAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointMosPqAverage.setDescription('Average PESQ MOS score.')
adVqmEndPointMosPqMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 10), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointMosPqMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointMosPqMaximum.setDescription('Maximum PESQ MOS score.')
adVqmEndPointPktsLostTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointPktsLostTotal.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointPktsLostTotal.setDescription('Total packets lost.')
adVqmEndPointPktsOutOfOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointPktsOutOfOrder.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointPktsOutOfOrder.setDescription('Total out-of-order packets.')
adVqmEndPointJitterMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointJitterMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointJitterMaximum.setDescription('Maximum jitter.')
adVqmEndPointNumberStreamsExcellent = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointNumberStreamsExcellent.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointNumberStreamsExcellent.setDescription('Number voice streams with excellent MOS score.')
adVqmEndPointNumberStreamsGood = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointNumberStreamsGood.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointNumberStreamsGood.setDescription('Number voice streams with good MOS score.')
adVqmEndPointNumberStreamsFair = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointNumberStreamsFair.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointNumberStreamsFair.setDescription('Number voice streams with fair MOS score.')
adVqmEndPointNumberStreamsPoor = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 6, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmEndPointNumberStreamsPoor.setStatus('current')
if mibBuilder.loadTexts: adVqmEndPointNumberStreamsPoor.setDescription('Number voice streams with poor MOS score.')
adVQMCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1), )
if mibBuilder.loadTexts: adVQMCallHistoryTable.setStatus('current')
if mibBuilder.loadTexts: adVQMCallHistoryTable.setDescription('The adVqmCallHistory table provides detail voice quality statistics\n            on completed RTP voice streams.  A voice call will typically have\n            two entries in this table one for each RTP stream.  A combination\n            of Source IP Address and Port, Destination IP Address and Port,\n            and SSRC (synchronization source ID) are necessary to uniquely\n            identify the call session.\n            One management option is to configure VQM to only save call history\n            information for poor quality calls that exceed threshold limits.\n            Threshold limit settings are available for MOS scores and packet\n            statistics for loss, out-of-order, and jitter.  Setting the maximum\n            call history buffer size to a lower value (default is 100 streams)\n            can reduce the amount of data transfer to the NMS during a\n            SNMP query.')
adVQMCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1), ).setIndexNames((0, "ADTRAN-AOS-VQM", "adVqmCallHistRtpSourceIp"), (0, "ADTRAN-AOS-VQM", "adVqmCallHistRtpSourcePort"), (0, "ADTRAN-AOS-VQM", "adVqmCallHistRtpDestIp"), (0, "ADTRAN-AOS-VQM", "adVqmCallHistRtpDestPort"), (0, "ADTRAN-AOS-VQM", "adVqmCallHistSsrcid"))
if mibBuilder.loadTexts: adVQMCallHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: adVQMCallHistoryEntry.setDescription('The statistics for a particular VoIP end-point device.')
adVqmCallHistRtpSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistRtpSourceIp.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistRtpSourceIp.setDescription('Source IP Address of RTP stream.')
adVqmCallHistRtpSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistRtpSourcePort.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistRtpSourcePort.setDescription('Source port number.')
adVqmCallHistRtpDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistRtpDestIp.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistRtpDestIp.setDescription('Destination IP address of RTP stream.')
adVqmCallHistRtpDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistRtpDestPort.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistRtpDestPort.setDescription('Destination port number.')
adVqmCallHistSsrcid = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistSsrcid.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistSsrcid.setDescription('SSRC (synchronization source ID) for this stream per RFC3550.')
adVqmCallHistTo = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistTo.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistTo.setDescription('To URI (dialed) from monitored SIP call signaling.')
adVqmCallHistFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistFrom.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistFrom.setDescription('From URI (originating caller) from monitored SIP call signaling.')
adVqmCallHistRtpSourceUri = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistRtpSourceUri.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistRtpSourceUri.setDescription('URI of sender RTP, either To URI or From URI.')
adVqmCallHistCallid = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistCallid.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistCallid.setDescription('SIP call-ID from monitored SIP call signaling.')
adVqmCallHistCcmid = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistCcmid.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistCcmid.setDescription('Internal generated call-ID.')
adVqmCallHistSourceIntName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistSourceIntName.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistSourceIntName.setDescription('Source interface name that RTP arrived inbound to unit.')
adVqmCallHistDestIntName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDestIntName.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDestIntName.setDescription('Destination interface name for RTP.')
adVqmCallHistSourceIntDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistSourceIntDescription.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistSourceIntDescription.setDescription('Source interface description as defined in CLI or GUI.')
adVqmCallHistDestIntDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDestIntDescription.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDestIntDescription.setDescription('Destination interface description as defined in CLI or GUI.')
adVqmCallHistCallStart = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistCallStart.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistCallStart.setDescription('Time at which monitoring began on this RTP stream.')
adVqmCallHistCallDurationMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistCallDurationMs.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistCallDurationMs.setDescription('Elapsed time from start to last RTP packet on this stream.')
adVqmCallHistCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89))).clone(namedValues=NamedValues(("unknown", 1), ("g711U", 2), ("g711UPLC", 3), ("g723153K", 4), ("deprecated1", 5), ("g723163K", 6), ("deprecated2", 7), ("g728", 8), ("deprecated3", 9), ("g729", 10), ("deprecated4", 11), ("g729A", 12), ("deprecated5", 13), ("user1", 14), ("user2", 15), ("user3", 16), ("user4", 17), ("gsmfr", 18), ("reservedgsmhr", 19), ("gsmefr", 20), ("sx7300", 21), ("sx9600", 22), ("g711A", 23), ("g711APLC", 24), ("deprecated6", 25), ("g72616K", 26), ("g72624K", 27), ("g72632K", 28), ("g72640K", 29), ("gipse711U", 30), ("gipse711A", 31), ("gipsilbc", 32), ("gipsisac", 33), ("gipsipcmwb", 34), ("g729E8K0", 35), ("g729E11k8", 36), ("wblinearpcm", 37), ("wblinearpcmPlc", 38), ("g722at64k", 39), ("g722at56k", 40), ("g722at48k", 41), ("g7221at32k", 42), ("g7221at24k", 43), ("g7222at23k85", 44), ("g7222at23k05", 45), ("g7222at19k85", 46), ("g7222at18k25", 47), ("g7222at15k85", 48), ("g7222at14k25", 49), ("g7222at12k85", 50), ("g7222at8k85", 51), ("g7222at6k6", 52), ("qcelp8", 53), ("qcelp13", 54), ("evrc", 55), ("smv812", 56), ("smv579", 57), ("smv444", 58), ("smv395", 59), ("amrnb12k2", 60), ("amrnb10k2", 61), ("amrnb7k95", 62), ("amrnb7k4", 63), ("amrnb6k7", 64), ("amrnb5k9", 65), ("amrnb5k15", 66), ("amrnb4k75", 67), ("ilbc13k3", 68), ("ilbc15k2", 69), ("g711u56k", 70), ("g711uPLC56k", 71), ("g711A56k", 72), ("g711APLC56k", 73), ("g7231C", 74), ("speex2k15", 75), ("speex5k95", 76), ("speeX8k", 77), ("speeX11k", 78), ("speeX15k", 79), ("speeX18k2", 80), ("speeX24k6", 81), ("speeX3k95", 82), ("speeX12k8", 83), ("speeX16k8", 84), ("speeX20k6", 85), ("speeX23k8", 86), ("speeX27k8", 87), ("speeX34k2", 88), ("speeX42k2", 89)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistCodec.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistCodec.setDescription('Last voice CODEC detected on this stream.')
adVqmCallHistCodecClass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wideband", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistCodecClass.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistCodecClass.setDescription('Class to which CODEC vocoder belongs.')
adVqmCallHistDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDscp.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDscp.setDescription('Differentiated Services Code Point (DSCP) in RTP packet IP header.')
adVqmCallHistPktsRcvdTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistPktsRcvdTotal.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistPktsRcvdTotal.setDescription('Total received RTP packets in this stream.')
adVqmCallHistPktsLostTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistPktsLostTotal.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistPktsLostTotal.setDescription('Total packets determined to be lost in network by simulated jitter\n            buffer.')
adVqmCallHistPktsDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistPktsDiscardedTotal.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistPktsDiscardedTotal.setDescription('Total packets discarded by simulated jitter buffer.')
adVqmCallHistOutOfOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistOutOfOrder.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistOutOfOrder.setDescription('Total packets received out of order at simulated jitter buffer.')
adVqmCallHistPdvAverageMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistPdvAverageMs.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistPdvAverageMs.setDescription('Average Packet Delay Variation (PDV) in RTP stream in\n            milliseconds.')
adVqmCallHistPdvMaximumMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistPdvMaximumMs.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistPdvMaximumMs.setDescription('Maximum Packet Delay Variation (PDV) in RTP stream in\n            milliseconds.')
adVqmCallHistRtDelayInst = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistRtDelayInst.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistRtDelayInst.setDescription('Instantaneous round-trip delay obtained from RTCP or RTCP XR\n            reports.')
adVqmCallHistRtDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistRtDelayAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistRtDelayAverage.setDescription('Average round-trip delay obtained from RTCP or RTCP XR reports.')
adVqmCallHistRtDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistRtDelayMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistRtDelayMaximum.setDescription('Maximum round-trip delay obtained from RTCP or RTCP XR reports.')
adVqmCallHistOnewayDelayInst = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistOnewayDelayInst.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistOnewayDelayInst.setDescription('Instantaneous one-way delay including simulated jitter buffer (SJB)\n            delay.')
adVqmCallHistOnewayDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistOnewayDelayAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistOnewayDelayAverage.setDescription('Average one-way delay including SJB delay.')
adVqmCallHistOnewayDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistOnewayDelayMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistOnewayDelayMaximum.setDescription('Maximum one-way delay including SJB delay.')
adVqmCallHistOrigDelayInst = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistOrigDelayInst.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistOrigDelayInst.setDescription('Instantaneous origination end-point delay from RTCP XR reports.')
adVqmCallHistOrigDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistOrigDelayAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistOrigDelayAverage.setDescription('Average origination end-point delay from RTCP XR reports.')
adVqmCallHistOrigDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistOrigDelayMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistOrigDelayMaximum.setDescription('Maximum origination end-point delay from RTCP XR reports.')
adVqmCallHistTermDelayMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistTermDelayMinimum.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistTermDelayMinimum.setDescription('Instantaneous termination end-point delay, simulated jitter\n            buffer + codec.')
adVqmCallHistTermDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistTermDelayAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistTermDelayAverage.setDescription('Average termination end-point delay, simulated jitter\n            buffer + codec.')
adVqmCallHistTermDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistTermDelayMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistTermDelayMaximum.setDescription('Maximum termination end-point delay, simulated jitter\n            buffer + codec.')
adVqmCallHistRLq = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistRLq.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistRLq.setDescription('Listening quality R factor.')
adVqmCallHistRCq = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistRCq.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistRCq.setDescription('Conversational quality R factor.')
adVqmCallHistRNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistRNominal.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistRNominal.setDescription('Nominal or generally accepted maximum R factor for this stream.')
adVqmCallHistRG107 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistRG107.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistRG107.setDescription('R factor based on ITU G.107 E Model for this stream.')
adVqmCallHistMosLq = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 42), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistMosLq.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistMosLq.setDescription('Listening quality MOS score.')
adVqmCallHistMosCq = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 43), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistMosCq.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistMosCq.setDescription('Conversational quality MOS score.')
adVqmCallHistMosPq = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 44), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistMosPq.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistMosPq.setDescription('Listening quality MOS score normalized to the PESQ scale.')
adVqmCallHistMosNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 45), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistMosNominal.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistMosNominal.setDescription('Nominal or generally accepted maximum MOS score for this stream.')
adVqmCallHistDegLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 46), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDegLoss.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDegLoss.setDescription('Percentage quality degradation due to packet loss.')
adVqmCallHistDegDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 47), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDegDiscard.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDegDiscard.setDescription('Percentage quality degradation due to packet discard.')
adVqmCallHistDegVocoder = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 48), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDegVocoder.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDegVocoder.setDescription('Percentage quality degradation due to voice CODEC selection.')
adVqmCallHistDegRecency = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 49), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDegRecency.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDegRecency.setDescription('Percentage quality degradation due to loss or discard recency in\n            call.')
adVqmCallHistDegDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 50), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDegDelay.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDegDelay.setDescription('Percentage quality degradation due to delay.')
adVqmCallHistDegSiglvl = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 51), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDegSiglvl.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDegSiglvl.setDescription('Percentage quality degradation due to low speech energy signal\n            level.')
adVqmCallHistDegNoiselvl = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 52), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDegNoiselvl.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDegNoiselvl.setDescription('Percentage quality degradation due to high noise levels.')
adVqmCallHistDegEcholvl = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 53), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDegEcholvl.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDegEcholvl.setDescription('Percentage quality degradation due to high echo levels.')
adVqmCallHistBurstRLq = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistBurstRLq.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistBurstRLq.setDescription('Average listening quality R factor during burst condition.')
adVqmCallHistBurstCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistBurstCount.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistBurstCount.setDescription('Number of times the stream was in a burst condition.')
adVqmCallHistBurstRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 56), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistBurstRateAvg.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistBurstRateAvg.setDescription('Total average percentage of frames lost or discarded while in\n            burst condition.')
adVqmCallHistBurstLenAvgPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 57), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistBurstLenAvgPkts.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistBurstLenAvgPkts.setDescription('Average burst length in packets.')
adVqmCallHistBurstLenAvgMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistBurstLenAvgMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistBurstLenAvgMsec.setDescription('Average burst length in miliseconds.')
adVqmCallHistGapR = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistGapR.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistGapR.setDescription('Average listening quality R factor while stream is in a gap\n            condition.')
adVqmCallHistGapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistGapCount.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistGapCount.setDescription('Number of times the stream is in gap condition.')
adVqmCallHistGapLossRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 61), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistGapLossRateAvg.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistGapLossRateAvg.setDescription('Total average percentage of frames lost or discarded while in\n            gap condition.')
adVqmCallHistGapLenPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 62), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistGapLenPkts.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistGapLenPkts.setDescription('Average gap length in packets.')
adVqmCallHistGapLenMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistGapLenMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistGapLenMsec.setDescription('Average gap length in milliseconds.')
adVqmCallHistLossRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 64), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistLossRateAvg.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistLossRateAvg.setDescription('Total average percentage of frames lost or discarded.')
adVqmCallHistNetworkLossAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 65), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistNetworkLossAvg.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistNetworkLossAvg.setDescription('Total average percentage of frames lost in network, excludes\n            SJB discards.')
adVqmCallHistDiscardRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 66), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDiscardRateAvg.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDiscardRateAvg.setDescription('Total average percentage of frames discarded by SJB.')
adVqmCallHistExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 67), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistExcessBurst.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistExcessBurst.setDescription('Total length of speech lost during burst conditions not handled\n            effectively by packet loss-concealment.')
adVqmCallHistExcessGap = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 68), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistExcessGap.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistExcessGap.setDescription('Total length of speech lost during gap conditions not handled\n            effectively by packet loss-concealment.')
adVqmCallHistPpdvMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 69), MsecValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistPpdvMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistPpdvMsec.setDescription('Packet to packed delay variation (jitter) in ms, as defined in\n            RFC3550.')
adVqmCallHistLateThresholdMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 70), MsecValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistLateThresholdMs.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistLateThresholdMs.setDescription('Late threshold for SJB, packets arriving under this threshold are\n            not discarded.')
adVqmCallHistLateThresholdPc = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 71), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistLateThresholdPc.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistLateThresholdPc.setDescription('Percentage of total packets (including both early and late packets)\n            not judged as being under the late jitter threshold.')
adVqmCallHistLateUnderThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistLateUnderThresh.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistLateUnderThresh.setDescription('Count of late packets which arrived under the late jitter\n            threshold.')
adVqmCallHistLateTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistLateTotalCount.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistLateTotalCount.setDescription('Total count of late packets arriving after the expected delay.')
adVqmCallHistLatePeakJitterMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 74), MsecValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistLatePeakJitterMs.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistLatePeakJitterMs.setDescription('Largest jitter encountered among packets counted as late.')
adVqmCallHistEarlyThreshMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 75), MsecValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistEarlyThreshMs.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistEarlyThreshMs.setDescription('Early threshold for SJB, packets arriving under this threshold\n            will not be discarded by SJB as early.')
adVqmCallHistEarlyThreshPc = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 76), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistEarlyThreshPc.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistEarlyThreshPc.setDescription('Percentage of total packets (including both early and late packets)\n            not judged as being under the early jitter threshold.')
adVqmCallHistEarlyUnderThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistEarlyUnderThresh.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistEarlyUnderThresh.setDescription('Count of early packets which arrived under the early jitter\n            threshold.')
adVqmCallHistEarlyTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistEarlyTotalCount.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistEarlyTotalCount.setDescription('Total count of early packets arriving before the expected delay.')
adVqmCallHistEarlyPeakJitterMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 79), MsecValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistEarlyPeakJitterMs.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistEarlyPeakJitterMs.setDescription('Largest jitter encountered among packets counted as early.')
adVqmCallHistDelayIncreaseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDelayIncreaseCount.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDelayIncreaseCount.setDescription('Total number of SJB delay increases (adaptive mode only).')
adVqmCallHistDelayDecreaseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDelayDecreaseCount.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDelayDecreaseCount.setDescription('Total number of SJB delay decreases (adaptive mode only).')
adVqmCallHistResyncCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistResyncCount.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistResyncCount.setDescription('Total number of  SJB resynchronizations caused by discontinuous\n            transmission (DTX), voice activity detection (VAD), or silence\n            suppression.')
adVqmCallHistJitterBufferType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fixed", 1), ("adaptive", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistJitterBufferType.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistJitterBufferType.setDescription('Configured SJB type either adaptive or fixed for this stream.')
adVqmCallHistJbCfgMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 84), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistJbCfgMin.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistJbCfgMin.setDescription('Adaptive jitter buffer minimum delay applied to packets received.')
adVqmCallHistJbCfgNom = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 85), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistJbCfgNom.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistJbCfgNom.setDescription('Adaptive jitter buffer inital delay applied to packets received,\n            or fixed jitter buffer delay applied to each packet.')
adVqmCallHistJbCfgMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 86), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistJbCfgMax.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistJbCfgMax.setDescription('Adaptive jitter buffer upper bound on delay applied to packets\n            received, or fixed jitter buffer maximum number of packets that will\n            be inserted in buffer.')
adVqmCallHistDuplicatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDuplicatePkts.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDuplicatePkts.setDescription('Total number of duplicated packets discarded by SJB.')
adVqmCallHistEarlyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistEarlyPkts.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistEarlyPkts.setDescription('Total number of packets arriving early.')
adVqmCallHistLatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistLatePkts.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistLatePkts.setDescription('Total number of packets arriving late.')
adVqmCallHistOverrunDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistOverrunDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistOverrunDiscardPkts.setDescription('Total number of packets discarded by SJB due to jitter buffer\n            overrun.')
adVqmCallHistUnderrunDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistUnderrunDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistUnderrunDiscardPkts.setDescription('Total number of packets discarded by SJB due to jitter buffer\n            underrun.')
adVqmCallHistDelayMinMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 92), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDelayMinMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDelayMinMsec.setDescription('Simulated jitter buffer delay minimum value.')
adVqmCallHistDelayAvgMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 93), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDelayAvgMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDelayAvgMsec.setDescription('Simulated jitter buffer delay average value.')
adVqmCallHistDelayMaxMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 94), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDelayMaxMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDelayMaxMsec.setDescription('Simulated jitter buffer delay maximum value.')
adVqmCallHistDelayCurrentMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 95), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistDelayCurrentMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistDelayCurrentMsec.setDescription('Simulated jitter buffer delay current value.')
adVqmCallHistExtRLqIn = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistExtRLqIn.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistExtRLqIn.setDescription('External listening quality R factor (in), from RTCP XR report\n            (RFC3611).')
adVqmCallHistExtRLqOut = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistExtRLqOut.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistExtRLqOut.setDescription('External listening quality R factor (out), from RTCP XR report\n            (RFC3611).')
adVqmCallHistExtRCqIn = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistExtRCqIn.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistExtRCqIn.setDescription('External conversational quality R factor (in), from RTCP XR report\n            (RFC3611).')
adVqmCallHistExtRCqOut = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistExtRCqOut.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistExtRCqOut.setDescription('External conversational quality R factor (out), from RTCP XR report\n            (RFC3611).')
adVqmCallHistThroughPutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 100), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistThroughPutIndex.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistThroughPutIndex.setDescription('Estimated throughput for fax or data call; bitrate range from 0 to\n            35000 bps, calculated based on gap/burst conditions and loss/discard\n            rates.')
adVqmCallHistReliabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 101), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistReliabilityIndex.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistReliabilityIndex.setDescription('Reliability index for a fax or data call ranging from 0 least to\n            100 most reliable.')
adVqmCallHistBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 7, 1, 1, 102), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmCallHistBitrate.setStatus('current')
if mibBuilder.loadTexts: adVqmCallHistBitrate.setDescription('Actual bitrate of RTP stream, calculated using size of each RTP\n            packet in bits and duration of audio represented in each packet,\n            indication of required bandwidth.')
adVQMActiveCallTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1), )
if mibBuilder.loadTexts: adVQMActiveCallTable.setStatus('current')
if mibBuilder.loadTexts: adVQMActiveCallTable.setDescription('The adVqmActiveCall table provides detail voice quality\n                statistics on currently active RTP voice streams.  A voice call\n                will have two entries in this table one for each active RTP\n                stream.  A combination of Source IP Address and Port,\n                Destination IP Address and Port, and SSRC\n                (synchronization source ID) are necessary to uniquely identify\n                the call session.\n                The VQM Active Call table shares the same type of information\n                as found in the Call History table.  The VQM Manager transfers\n                the active call statistics into the call history table database\n                when the call completes.')
adVQMActiveCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1), ).setIndexNames((0, "ADTRAN-AOS-VQM", "adVqmActCallRtpSourceIp"), (0, "ADTRAN-AOS-VQM", "adVqmActCallRtpSourcePort"), (0, "ADTRAN-AOS-VQM", "adVqmActCallRtpDestIp"), (0, "ADTRAN-AOS-VQM", "adVqmActCallRtpDestPort"), (0, "ADTRAN-AOS-VQM", "adVqmActCallSsrcid"))
if mibBuilder.loadTexts: adVQMActiveCallEntry.setStatus('current')
if mibBuilder.loadTexts: adVQMActiveCallEntry.setDescription('The statistics for a particular VoIP end-point device.')
adVqmActCallRtpSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallRtpSourceIp.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallRtpSourceIp.setDescription('Source IP Address of RTP stream.')
adVqmActCallRtpSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallRtpSourcePort.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallRtpSourcePort.setDescription('Source port number.')
adVqmActCallRtpDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallRtpDestIp.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallRtpDestIp.setDescription('Destination IP address of RTP stream.')
adVqmActCallRtpDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallRtpDestPort.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallRtpDestPort.setDescription('Destination port number.')
adVqmActCallSsrcid = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallSsrcid.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallSsrcid.setDescription('SSRC (synchronization source ID) for this stream per RFC3550.')
adVqmActCallTo = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallTo.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallTo.setDescription('To URI (dialed) from monitored SIP call signaling.')
adVqmActCallFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallFrom.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallFrom.setDescription('From URI (originating caller) from monitored SIP call signaling.')
adVqmActCallRtpSourceUri = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallRtpSourceUri.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallRtpSourceUri.setDescription('URI of sender RTP, either To URI or From URI.')
adVqmActCallCallid = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallCallid.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallCallid.setDescription('SIP call-ID from monitored SIP call signaling.')
adVqmActCallCcmid = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallCcmid.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallCcmid.setDescription('Internal generated call-ID.')
adVqmActCallSourceIntName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallSourceIntName.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallSourceIntName.setDescription('Source interface name that RTP arrived inbound to unit.')
adVqmActCallDestIntName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDestIntName.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDestIntName.setDescription('Destination interface name for RTP.')
adVqmActCallSourceIntDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallSourceIntDescription.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallSourceIntDescription.setDescription('Source interface description as defined in CLI or GUI.')
adVqmActCallDestIntDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDestIntDescription.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDestIntDescription.setDescription('Destination interface description as defined in CLI or GUI.')
adVqmActCallCallStart = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallCallStart.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallCallStart.setDescription('Time at which monitoring began on this RTP stream.')
adVqmActCallCallDurationMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallCallDurationMs.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallCallDurationMs.setDescription('Elapsed time from start to last RTP packet on this stream.')
adVqmActCallCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89))).clone(namedValues=NamedValues(("unknown", 1), ("g711U", 2), ("g711UPLC", 3), ("g723153K", 4), ("deprecated1", 5), ("g723163K", 6), ("deprecated2", 7), ("g728", 8), ("deprecated3", 9), ("g729", 10), ("deprecated4", 11), ("g729A", 12), ("deprecated5", 13), ("user1", 14), ("user2", 15), ("user3", 16), ("user4", 17), ("gsmfr", 18), ("reservedgsmhr", 19), ("gsmefr", 20), ("sx7300", 21), ("sx9600", 22), ("g711A", 23), ("g711APLC", 24), ("deprecated6", 25), ("g72616K", 26), ("g72624K", 27), ("g72632K", 28), ("g72640K", 29), ("gipse711U", 30), ("gipse711A", 31), ("gipsilbc", 32), ("gipsisac", 33), ("gipsipcmwb", 34), ("g729E8K0", 35), ("g729E11k8", 36), ("wblinearpcm", 37), ("wblinearpcmPlc", 38), ("g722at64k", 39), ("g722at56k", 40), ("g722at48k", 41), ("g7221at32k", 42), ("g7221at24k", 43), ("g7222at23k85", 44), ("g7222at23k05", 45), ("g7222at19k85", 46), ("g7222at18k25", 47), ("g7222at15k85", 48), ("g7222at14k25", 49), ("g7222at12k85", 50), ("g7222at8k85", 51), ("g7222at6k6", 52), ("qcelp8", 53), ("qcelp13", 54), ("evrc", 55), ("smv812", 56), ("smv579", 57), ("smv444", 58), ("smv395", 59), ("amrnb12k2", 60), ("amrnb10k2", 61), ("amrnb7k95", 62), ("amrnb7k4", 63), ("amrnb6k7", 64), ("amrnb5k9", 65), ("amrnb5k15", 66), ("amrnb4k75", 67), ("ilbc13k3", 68), ("ilbc15k2", 69), ("g711u56k", 70), ("g711uPLC56k", 71), ("g711A56k", 72), ("g711APLC56k", 73), ("g7231C", 74), ("speex2k15", 75), ("speex5k95", 76), ("speeX8k", 77), ("speeX11k", 78), ("speeX15k", 79), ("speeX18k2", 80), ("speeX24k6", 81), ("speeX3k95", 82), ("speeX12k8", 83), ("speeX16k8", 84), ("speeX20k6", 85), ("speeX23k8", 86), ("speeX27k8", 87), ("speeX34k2", 88), ("speeX42k2", 89)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallCodec.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallCodec.setDescription('Last voice CODEC detected on this stream.')
adVqmActCallCodecClass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wideband", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallCodecClass.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallCodecClass.setDescription('Class to which CODEC vocoder belongs.')
adVqmActCallDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDscp.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDscp.setDescription('Differentiated Services Code Point (DSCP) in RTP packet IP header.')
adVqmActCallPktsRcvdTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallPktsRcvdTotal.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallPktsRcvdTotal.setDescription('Total received RTP packets in this stream.')
adVqmActCallPktsLostTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallPktsLostTotal.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallPktsLostTotal.setDescription('Total packets determined to be lost in network by simulated jitter\n            buffer.')
adVqmActCallPktsDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallPktsDiscardedTotal.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallPktsDiscardedTotal.setDescription('Total packets discarded by simulated jitter buffer.')
adVqmActCallOutOfOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallOutOfOrder.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallOutOfOrder.setDescription('Total packets received out of order at simulated jitter buffer.')
adVqmActCallPdvAverageMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallPdvAverageMs.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallPdvAverageMs.setDescription('Average Packet Delay Variation (PDV) in RTP stream in\n            milliseconds.')
adVqmActCallPdvMaximumMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallPdvMaximumMs.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallPdvMaximumMs.setDescription('Maximum Packet Delay Variation (PDV) in RTP stream in\n            milliseconds.')
adVqmActCallRtDelayInst = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallRtDelayInst.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallRtDelayInst.setDescription('Instantaneous round-trip delay obtained from RTCP or RTCP XR\n            reports.')
adVqmActCallRtDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallRtDelayAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallRtDelayAverage.setDescription('Average round-trip delay obtained from RTCP or RTCP XR reports.')
adVqmActCallRtDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallRtDelayMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallRtDelayMaximum.setDescription('Maximum round-trip delay obtained from RTCP or RTCP XR reports.')
adVqmActCallOnewayDelayInst = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallOnewayDelayInst.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallOnewayDelayInst.setDescription('Instantaneous one-way delay including simulated jitter buffer (SJB)\n            delay.')
adVqmActCallOnewayDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallOnewayDelayAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallOnewayDelayAverage.setDescription('Average one-way delay including SJB delay.')
adVqmActCallOnewayDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallOnewayDelayMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallOnewayDelayMaximum.setDescription('Maximum one-way delay including SJB delay.')
adVqmActCallOrigDelayInst = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallOrigDelayInst.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallOrigDelayInst.setDescription('Instantaneous origination end-point delay from RTCP XR reports.')
adVqmActCallOrigDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallOrigDelayAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallOrigDelayAverage.setDescription('Average origination end-point delay from RTCP XR reports.')
adVqmActCallOrigDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallOrigDelayMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallOrigDelayMaximum.setDescription('Maximum origination end-point delay from RTCP XR reports.')
adVqmActCallTermDelayMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallTermDelayMinimum.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallTermDelayMinimum.setDescription('Instantaneous termination end-point delay, simulated jitter\n            buffer + codec.')
adVqmActCallTermDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallTermDelayAverage.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallTermDelayAverage.setDescription('Average termination end-point delay, simulated jitter\n            buffer + codec.')
adVqmActCallTermDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallTermDelayMaximum.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallTermDelayMaximum.setDescription('Maximum termination end-point delay, simulated jitter\n            buffer + codec.')
adVqmActCallRLq = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallRLq.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallRLq.setDescription('Listening quality R factor.')
adVqmActCallRCq = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallRCq.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallRCq.setDescription('Conversational quality R factor.')
adVqmActCallRNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallRNominal.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallRNominal.setDescription('Nominal or generally accepted maximum R factor for this stream.')
adVqmActCallRG107 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallRG107.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallRG107.setDescription('R factor based on ITU G.107 E Model for this stream.')
adVqmActCallMosLq = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 42), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallMosLq.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallMosLq.setDescription('Listening quality MOS score.')
adVqmActCallMosCq = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 43), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallMosCq.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallMosCq.setDescription('Conversational quality MOS score.')
adVqmActCallMosPq = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 44), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallMosPq.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallMosPq.setDescription('Listening quality MOS score normalized to the PESQ scale.')
adVqmActCallMosNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 45), MOSvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallMosNominal.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallMosNominal.setDescription('Nominal or generally accepted maximum MOS score for this stream.')
adVqmActCallDegLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 46), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDegLoss.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDegLoss.setDescription('Percentage quality degradation due to packet loss.')
adVqmActCallDegDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 47), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDegDiscard.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDegDiscard.setDescription('Percentage quality degradation due to packet discard.')
adVqmActCallDegVocoder = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 48), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDegVocoder.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDegVocoder.setDescription('Percentage quality degradation due to voice CODEC selection.')
adVqmActCallDegRecency = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 49), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDegRecency.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDegRecency.setDescription('Percentage quality degradation due to loss or discard recency in\n            call.')
adVqmActCallDegDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 50), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDegDelay.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDegDelay.setDescription('Percentage quality degradation due to delay.')
adVqmActCallDegSiglvl = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 51), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDegSiglvl.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDegSiglvl.setDescription('Percentage quality degradation due to low speech energy signal\n            level.')
adVqmActCallDegNoiselvl = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 52), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDegNoiselvl.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDegNoiselvl.setDescription('Percentage quality degradation due to high noise levels.')
adVqmActCallDegEcholvl = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 53), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDegEcholvl.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDegEcholvl.setDescription('Percentage quality degradation due to high echo levels.')
adVqmActCallBurstRLq = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallBurstRLq.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallBurstRLq.setDescription('Average listening quality R factor during burst condition.')
adVqmActCallBurstCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallBurstCount.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallBurstCount.setDescription('Number of times the stream was in a burst condition.')
adVqmActCallBurstRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 56), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallBurstRateAvg.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallBurstRateAvg.setDescription('Total average percentage of frames lost or discarded while in\n            burst condition.')
adVqmActCallBurstLenAvgPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 57), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallBurstLenAvgPkts.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallBurstLenAvgPkts.setDescription('Average burst length in packets.')
adVqmActCallBurstLenAvgMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallBurstLenAvgMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallBurstLenAvgMsec.setDescription('Average burst length in miliseconds.')
adVqmActCallGapR = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallGapR.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallGapR.setDescription('Average listening quality R factor while stream is in a gap\n            condition.')
adVqmActCallGapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallGapCount.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallGapCount.setDescription('Number of times the stream is in gap condition.')
adVqmActCallGapLossRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 61), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallGapLossRateAvg.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallGapLossRateAvg.setDescription('Total average percentage of frames lost or discarded while in\n            gap condition.')
adVqmActCallGapLenPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 62), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallGapLenPkts.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallGapLenPkts.setDescription('Average gap length in packets.')
adVqmActCallGapLenMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallGapLenMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallGapLenMsec.setDescription('Average gap length in milliseconds.')
adVqmActCallLossRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 64), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallLossRateAvg.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallLossRateAvg.setDescription('Total average percentage of frames lost or discarded.')
adVqmActCallNetworkLossAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 65), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallNetworkLossAvg.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallNetworkLossAvg.setDescription('Total average percentage of frames lost in network, excludes\n            SJB discards.')
adVqmActCallDiscardRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 66), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDiscardRateAvg.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDiscardRateAvg.setDescription('Total average percentage of frames discarded by SJB.')
adVqmActCallExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 67), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallExcessBurst.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallExcessBurst.setDescription('Total length of speech lost during burst conditions not handled\n            effectively by packet loss-concealment.')
adVqmActCallExcessGap = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 68), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallExcessGap.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallExcessGap.setDescription('Total length of speech lost during gap conditions not handled\n            effectively by packet loss-concealment.')
adVqmActCallPpdvMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 69), MsecValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallPpdvMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallPpdvMsec.setDescription('Packet to packed delay variation (jitter) in ms, as defined in\n            RFC3550.')
adVqmActCallLateThresholdMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 70), MsecValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallLateThresholdMs.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallLateThresholdMs.setDescription('Late threshold for SJB, packets arriving under this threshold are\n            not discarded.')
adVqmActCallLateThresholdPc = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 71), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallLateThresholdPc.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallLateThresholdPc.setDescription('Percentage of total packets (including both early and late packets)\n            not judged as being under the late jitter threshold.')
adVqmActCallLateUnderThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallLateUnderThresh.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallLateUnderThresh.setDescription('Count of late packets which arrived under the late jitter\n            threshold.')
adVqmActCallLateTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallLateTotalCount.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallLateTotalCount.setDescription('Total count of late packets arriving after the expected delay.')
adVqmActCallLatePeakJitterMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 74), MsecValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallLatePeakJitterMs.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallLatePeakJitterMs.setDescription('Largest jitter encountered among packets counted as late.')
adVqmActCallEarlyThreshMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 75), MsecValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallEarlyThreshMs.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallEarlyThreshMs.setDescription('Early threshold for SJB, packets arriving under this threshold\n            will not be discarded by SJB as early.')
adVqmActCallEarlyThreshPc = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 76), Percentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallEarlyThreshPc.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallEarlyThreshPc.setDescription('Percentage of total packets (including both early and late packets)\n            not judged as being under the early jitter threshold.')
adVqmActCallEarlyUnderThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallEarlyUnderThresh.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallEarlyUnderThresh.setDescription('Count of early packets which arrived under the early jitter\n            threshold.')
adVqmActCallEarlyTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallEarlyTotalCount.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallEarlyTotalCount.setDescription('Total count of early packets arriving before the expected delay.')
adVqmActCallEarlyPeakJitterMs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 79), MsecValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallEarlyPeakJitterMs.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallEarlyPeakJitterMs.setDescription('Largest jitter encountered among packets counted as early.')
adVqmActCallDelayIncreaseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDelayIncreaseCount.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDelayIncreaseCount.setDescription('Total number of SJB delay increases (adaptive mode only).')
adVqmActCallDelayDecreaseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDelayDecreaseCount.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDelayDecreaseCount.setDescription('Total number of SJB delay decreases (adaptive mode only).')
adVqmActCallResyncCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallResyncCount.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallResyncCount.setDescription('Total number of  SJB resynchronizations caused by discontinuous\n            transmission (DTX), voice activity detection (VAD), or silence\n            suppression.')
adVqmActCallJitterBufferType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fixed", 1), ("adaptive", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallJitterBufferType.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallJitterBufferType.setDescription('Configured SJB type either adaptive or fixed for this stream.')
adVqmActCallJbCfgMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 84), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallJbCfgMin.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallJbCfgMin.setDescription('Adaptive jitter buffer minimum delay applied to packets received.')
adVqmActCallJbCfgNom = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 85), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallJbCfgNom.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallJbCfgNom.setDescription('Adaptive jitter buffer inital delay applied to packets received,\n            or fixed jitter buffer delay applied to each packet.')
adVqmActCallJbCfgMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 86), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallJbCfgMax.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallJbCfgMax.setDescription('Adaptive jitter buffer upper bound on delay applied to packets\n            received, or fixed jitter buffer maximum number of packets that will\n            be inserted in buffer.')
adVqmActCallDuplicatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDuplicatePkts.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDuplicatePkts.setDescription('Total number of duplicated packets discarded by SJB.')
adVqmActCallEarlyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallEarlyPkts.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallEarlyPkts.setDescription('Total number of packets arriving early.')
adVqmActCallLatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallLatePkts.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallLatePkts.setDescription('Total number of packets arriving late.')
adVqmActCallOverrunDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallOverrunDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallOverrunDiscardPkts.setDescription('Total number of packets discarded by SJB due to jitter buffer\n            overrun.')
adVqmActCallUnderrunDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallUnderrunDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallUnderrunDiscardPkts.setDescription('Total number of packets discarded by SJB due to jitter buffer\n            underrun.')
adVqmActCallDelayMinMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 92), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDelayMinMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDelayMinMsec.setDescription('Simulated jitter buffer delay minimum value.')
adVqmActCallDelayAvgMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 93), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDelayAvgMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDelayAvgMsec.setDescription('Simulated jitter buffer delay average value.')
adVqmActCallDelayMaxMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 94), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDelayMaxMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDelayMaxMsec.setDescription('Simulated jitter buffer delay maximum value.')
adVqmActCallDelayCurrentMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 95), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallDelayCurrentMsec.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallDelayCurrentMsec.setDescription('Simulated jitter buffer delay current value.')
adVqmActCallExtRLqIn = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallExtRLqIn.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallExtRLqIn.setDescription('External listening quality R factor (in), from RTCP XR report\n            (RFC3611).')
adVqmActCallExtRLqOut = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallExtRLqOut.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallExtRLqOut.setDescription('External listening quality R factor (out), from RTCP XR report\n            (RFC3611).')
adVqmActCallExtRCqIn = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallExtRCqIn.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallExtRCqIn.setDescription('External conversational quality R factor (in), from RTCP XR report\n            (RFC3611).')
adVqmActCallExtRCqOut = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallExtRCqOut.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallExtRCqOut.setDescription('External conversational quality R factor (out), from RTCP XR report\n            (RFC3611).')
adVqmActCallThroughPutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 100), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallThroughPutIndex.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallThroughPutIndex.setDescription('Estimated throughput for fax or data call; bitrate range from 0 to\n            35000 bps, calculated based on gap/burst conditions and loss/discard\n            rates.')
adVqmActCallReliabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 101), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallReliabilityIndex.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallReliabilityIndex.setDescription('Reliability index for a fax or data call ranging from 0 least to\n            100 most reliable.')
adVqmActCallBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 5, 3, 8, 1, 1, 102), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adVqmActCallBitrate.setStatus('current')
if mibBuilder.loadTexts: adVqmActCallBitrate.setDescription('Actual bitrate of RTP stream, calculated using size of each RTP\n            packet in bits and duration of audio represented in each packet,\n            indication of required bandwidth.')
adGenAOSVqmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 10))
adGenAOSVqmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 10, 1))
adGenAOSVqmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 10, 2))
adGenAOSVqmFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 10, 2, 1)).setObjects(("ADTRAN-AOS-VQM", "adVQMCfgGroup"), ("ADTRAN-AOS-VQM", "adVQMThresholdGroup"), ("ADTRAN-AOS-VQM", "adVQMSysPerfGroup"), ("ADTRAN-AOS-VQM", "adVQMInterfaceGroup"), ("ADTRAN-AOS-VQM", "adVQMEndPointGroup"), ("ADTRAN-AOS-VQM", "adVQMCallHistoryGroup"), ("ADTRAN-AOS-VQM", "adVQMActiveCallGroup"), ("ADTRAN-AOS-VQM", "adVQMTrapGroup"), ("ADTRAN-AOS-VQM", "adVQMNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSVqmFullCompliance = adGenAOSVqmFullCompliance.setStatus('current')
if mibBuilder.loadTexts: adGenAOSVqmFullCompliance.setDescription('The compliance statement for SNMP entities which implement\n        version 1 of the adGenAosVQM MIB. When this MIB is implemented\n        with support for read-only, then such an implementation can claim\n        full compliance. ')
adVQMCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 10, 1, 1)).setObjects(("ADTRAN-AOS-VQM", "adVqmCfgEnable"), ("ADTRAN-AOS-VQM", "adVqmCfgSipEnable"), ("ADTRAN-AOS-VQM", "adVqmCfgUdpEnable"), ("ADTRAN-AOS-VQM", "adVqmCfgInternationalCode"), ("ADTRAN-AOS-VQM", "adVqmCfgJitterBufferType"), ("ADTRAN-AOS-VQM", "adVqmCfgJitterBufferAdaptiveMin"), ("ADTRAN-AOS-VQM", "adVqmCfgJitterBufferAdaptiveNominal"), ("ADTRAN-AOS-VQM", "adVqmCfgJitterBufferAdaptiveMax"), ("ADTRAN-AOS-VQM", "adVqmCfgJitterBufferFixedNominal"), ("ADTRAN-AOS-VQM", "adVqmCfgJitterBufferFixedSize"), ("ADTRAN-AOS-VQM", "adVqmCfgJitterBufferThresholdEarlyMs"), ("ADTRAN-AOS-VQM", "adVqmCfgJitterBufferThresholdLateMs"), ("ADTRAN-AOS-VQM", "adVqmCfgRoundTripPingEnabled"), ("ADTRAN-AOS-VQM", "adVqmCfgRoundTripPingType"), ("ADTRAN-AOS-VQM", "adVqmCfgCallHistorySize"), ("ADTRAN-AOS-VQM", "adVqmCfgHistoryThresholdLqmos"), ("ADTRAN-AOS-VQM", "adVqmCfgHistoryThresholdCqmos"), ("ADTRAN-AOS-VQM", "adVqmCfgHistoryThresholdPqmos"), ("ADTRAN-AOS-VQM", "adVqmCfgHistoryThresholdLoss"), ("ADTRAN-AOS-VQM", "adVqmCfgHistoryThresholdOutOfOrder"), ("ADTRAN-AOS-VQM", "adVqmCfgHistoryThresholdJitter"), ("ADTRAN-AOS-VQM", "adVqmCfgClear"), ("ADTRAN-AOS-VQM", "adVqmCfgClearCallHistory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adVQMCfgGroup = adVQMCfgGroup.setStatus('current')
if mibBuilder.loadTexts: adVQMCfgGroup.setDescription('The adVQMCfg group contains read-only VQM system configuration\n            information for global enable/disable, type of RTP stream detection,\n            jitter buffer emulator settings, ping settings for measuring delay,\n            and call history buffer filter threshold values.  Network Management\n            System may read these values to augment their charts and graphs of\n            VQM performance statistics.  Clear write-only controls provide the\n            NMS the ability to clear VQM performance statistics.')
adVQMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 10, 1, 2)).setObjects(("ADTRAN-AOS-VQM", "adVqmThresholdLqmosInfo"), ("ADTRAN-AOS-VQM", "adVqmThresholdLqmosNotice"), ("ADTRAN-AOS-VQM", "adVqmThresholdLqmosWarning"), ("ADTRAN-AOS-VQM", "adVqmThresholdLqmosError"), ("ADTRAN-AOS-VQM", "adVqmThresholdPqmosInfo"), ("ADTRAN-AOS-VQM", "adVqmThresholdPqmosNotice"), ("ADTRAN-AOS-VQM", "adVqmThresholdPqmosWarning"), ("ADTRAN-AOS-VQM", "adVqmThresholdPqmosError"), ("ADTRAN-AOS-VQM", "adVqmThresholdOutOfOrderInfo"), ("ADTRAN-AOS-VQM", "adVqmThresholdOutOfOrderNotice"), ("ADTRAN-AOS-VQM", "adVqmThresholdOutOfOrderWarning"), ("ADTRAN-AOS-VQM", "adVqmThresholdOutOfOrderError"), ("ADTRAN-AOS-VQM", "adVqmThresholdLossInfo"), ("ADTRAN-AOS-VQM", "adVqmThresholdLossNotice"), ("ADTRAN-AOS-VQM", "adVqmThresholdLossWarning"), ("ADTRAN-AOS-VQM", "adVqmThresholdLossError"), ("ADTRAN-AOS-VQM", "adVqmThresholdJitterInfo"), ("ADTRAN-AOS-VQM", "adVqmThresholdJitterNotice"), ("ADTRAN-AOS-VQM", "adVqmThresholdJitterWarning"), ("ADTRAN-AOS-VQM", "adVqmThresholdJitterError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adVQMThresholdGroup = adVQMThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: adVQMThresholdGroup.setDescription('The adVQMThreshold group contains read-only configuration\n                threshold setting values for VQM event messages.  Threshold\n                values include Information, Notice, Warning, and Error events\n                for MOS scores, packet loss, out-of-order, and jitter.')
adVQMSysPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 10, 1, 3)).setObjects(("ADTRAN-AOS-VQM", "adVqmSysActiveCalls"), ("ADTRAN-AOS-VQM", "adVqmSysActiveExcellent"), ("ADTRAN-AOS-VQM", "adVqmSysActiveGood"), ("ADTRAN-AOS-VQM", "adVqmSysActiveFair"), ("ADTRAN-AOS-VQM", "adVqmSysActivePoor"), ("ADTRAN-AOS-VQM", "adVqmSysCallHistoryCalls"), ("ADTRAN-AOS-VQM", "adVqmSysCallHistoryExcellent"), ("ADTRAN-AOS-VQM", "adVqmSysCallHistoryGood"), ("ADTRAN-AOS-VQM", "adVqmSysCallHistoryFair"), ("ADTRAN-AOS-VQM", "adVqmSysCallHistoryPoor"), ("ADTRAN-AOS-VQM", "adVqmSysAllCallsExcellent"), ("ADTRAN-AOS-VQM", "adVqmSysAllCallsGood"), ("ADTRAN-AOS-VQM", "adVqmSysAllCallsFair"), ("ADTRAN-AOS-VQM", "adVqmSysAllCallsPoor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adVQMSysPerfGroup = adVQMSysPerfGroup.setStatus('current')
if mibBuilder.loadTexts: adVQMSysPerfGroup.setDescription('The adVQMSysPerfGroup group provides an overall\n                summary view of the quality of voice streams flowing through\n                the system. VQM voice call analysis rates the quality of RTP\n                voice streams as Excellent, Good, Fair or Poor.  The numbers of\n                calls for each quality rating are available for currently active\n                calls, completed calls (history), and all calls (totals).  The\n                total number of calls monitored by VQM is the sum of active\n                calls adVqmSysActiveCalls) and history calls\n                (adVqmSysCallHistoryCalls).')
adVQMInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 10, 1, 4)).setObjects(("ADTRAN-AOS-VQM", "adVqmIfcId"), ("ADTRAN-AOS-VQM", "adVqmIfcName"), ("ADTRAN-AOS-VQM", "adVqmIfcPktsRx"), ("ADTRAN-AOS-VQM", "adVqmIfcPktsLost"), ("ADTRAN-AOS-VQM", "adVqmIfcPktsOoo"), ("ADTRAN-AOS-VQM", "adVqmIfcPktsDiscarded"), ("ADTRAN-AOS-VQM", "adVqmIfcNumberActiveCalls"), ("ADTRAN-AOS-VQM", "adVqmIfcTerminatedCalls"), ("ADTRAN-AOS-VQM", "adVqmIfcRLqMinimum"), ("ADTRAN-AOS-VQM", "adVqmIfcRLqAverage"), ("ADTRAN-AOS-VQM", "adVqmIfcRLqMaximum"), ("ADTRAN-AOS-VQM", "adVqmIfcRCqMinimum"), ("ADTRAN-AOS-VQM", "adVqmIfcRCqAverage"), ("ADTRAN-AOS-VQM", "adVqmIfcRCqMaximum"), ("ADTRAN-AOS-VQM", "adVqmIfcRG107Minimum"), ("ADTRAN-AOS-VQM", "adVqmIfcRG107Average"), ("ADTRAN-AOS-VQM", "adVqmIfcRG107Maximum"), ("ADTRAN-AOS-VQM", "adVqmIfcMosLqMinimum"), ("ADTRAN-AOS-VQM", "adVqmIfcMosLqAverage"), ("ADTRAN-AOS-VQM", "adVqmIfcMosLqMaximum"), ("ADTRAN-AOS-VQM", "adVqmIfcMosCqMinimum"), ("ADTRAN-AOS-VQM", "adVqmIfcMosCqAverage"), ("ADTRAN-AOS-VQM", "adVqmIfcMosCqMaximum"), ("ADTRAN-AOS-VQM", "adVqmIfcMosPqMinimum"), ("ADTRAN-AOS-VQM", "adVqmIfcMosPqAverage"), ("ADTRAN-AOS-VQM", "adVqmIfcMosPqMaximum"), ("ADTRAN-AOS-VQM", "adVqmIfcLossMinimum"), ("ADTRAN-AOS-VQM", "adVqmIfcLossAverage"), ("ADTRAN-AOS-VQM", "adVqmIfcLossMaximum"), ("ADTRAN-AOS-VQM", "adVqmIfcDiscardsMinimum"), ("ADTRAN-AOS-VQM", "adVqmIfcDiscardsAverage"), ("ADTRAN-AOS-VQM", "adVqmIfcDiscardsMaximum"), ("ADTRAN-AOS-VQM", "adVqmIfcPdvAverageMs"), ("ADTRAN-AOS-VQM", "adVqmIfcPdvMaximumMs"), ("ADTRAN-AOS-VQM", "adVqmIfcDelayMinMsec"), ("ADTRAN-AOS-VQM", "adVqmIfcDelayAvgMsec"), ("ADTRAN-AOS-VQM", "adVqmIfcDelayMaxMsec"), ("ADTRAN-AOS-VQM", "adVqmIfcNumberStreamsExcellent"), ("ADTRAN-AOS-VQM", "adVqmIfcNumberStreamsGood"), ("ADTRAN-AOS-VQM", "adVqmIfcNumberStreamsFair"), ("ADTRAN-AOS-VQM", "adVqmIfcNumberStreamsPoor"), ("ADTRAN-AOS-VQM", "adVqmIfcClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adVQMInterfaceGroup = adVQMInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: adVQMInterfaceGroup.setDescription('The adVQMInterface group defines aggregate statistics for each\n            system interface.')
adVQMEndPointGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 10, 1, 5)).setObjects(("ADTRAN-AOS-VQM", "adVqmEndPointRtpSourceIp"), ("ADTRAN-AOS-VQM", "adVqmEndPointNumberCompletedCalls"), ("ADTRAN-AOS-VQM", "adVqmEndPointInterfaceId"), ("ADTRAN-AOS-VQM", "adVqmEndPointInterfaceName"), ("ADTRAN-AOS-VQM", "adVqmEndPointMosLqMinimum"), ("ADTRAN-AOS-VQM", "adVqmEndPointMosLqAverage"), ("ADTRAN-AOS-VQM", "adVqmEndPointMosLqMaximum"), ("ADTRAN-AOS-VQM", "adVqmEndPointMosPqMinimum"), ("ADTRAN-AOS-VQM", "adVqmEndPointMosPqAverage"), ("ADTRAN-AOS-VQM", "adVqmEndPointMosPqMaximum"), ("ADTRAN-AOS-VQM", "adVqmEndPointPktsLostTotal"), ("ADTRAN-AOS-VQM", "adVqmEndPointPktsOutOfOrder"), ("ADTRAN-AOS-VQM", "adVqmEndPointJitterMaximum"), ("ADTRAN-AOS-VQM", "adVqmEndPointNumberStreamsExcellent"), ("ADTRAN-AOS-VQM", "adVqmEndPointNumberStreamsGood"), ("ADTRAN-AOS-VQM", "adVqmEndPointNumberStreamsFair"), ("ADTRAN-AOS-VQM", "adVqmEndPointNumberStreamsPoor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adVQMEndPointGroup = adVQMEndPointGroup.setStatus('current')
if mibBuilder.loadTexts: adVQMEndPointGroup.setDescription('The adVQMEndPoint group defines aggregate statistics for each\n            VoIP end-point entity.')
adVQMCallHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 10, 1, 6)).setObjects(("ADTRAN-AOS-VQM", "adVqmCallHistRtpSourceIp"), ("ADTRAN-AOS-VQM", "adVqmCallHistRtpSourcePort"), ("ADTRAN-AOS-VQM", "adVqmCallHistRtpDestIp"), ("ADTRAN-AOS-VQM", "adVqmCallHistRtpDestPort"), ("ADTRAN-AOS-VQM", "adVqmCallHistSsrcid"), ("ADTRAN-AOS-VQM", "adVqmCallHistTo"), ("ADTRAN-AOS-VQM", "adVqmCallHistFrom"), ("ADTRAN-AOS-VQM", "adVqmCallHistRtpSourceUri"), ("ADTRAN-AOS-VQM", "adVqmCallHistCallid"), ("ADTRAN-AOS-VQM", "adVqmCallHistCcmid"), ("ADTRAN-AOS-VQM", "adVqmCallHistSourceIntName"), ("ADTRAN-AOS-VQM", "adVqmCallHistDestIntName"), ("ADTRAN-AOS-VQM", "adVqmCallHistSourceIntDescription"), ("ADTRAN-AOS-VQM", "adVqmCallHistDestIntDescription"), ("ADTRAN-AOS-VQM", "adVqmCallHistCallStart"), ("ADTRAN-AOS-VQM", "adVqmCallHistCallDurationMs"), ("ADTRAN-AOS-VQM", "adVqmCallHistCodec"), ("ADTRAN-AOS-VQM", "adVqmCallHistCodecClass"), ("ADTRAN-AOS-VQM", "adVqmCallHistDscp"), ("ADTRAN-AOS-VQM", "adVqmCallHistPktsRcvdTotal"), ("ADTRAN-AOS-VQM", "adVqmCallHistPktsLostTotal"), ("ADTRAN-AOS-VQM", "adVqmCallHistPktsDiscardedTotal"), ("ADTRAN-AOS-VQM", "adVqmCallHistOutOfOrder"), ("ADTRAN-AOS-VQM", "adVqmCallHistPdvAverageMs"), ("ADTRAN-AOS-VQM", "adVqmCallHistPdvMaximumMs"), ("ADTRAN-AOS-VQM", "adVqmCallHistRtDelayInst"), ("ADTRAN-AOS-VQM", "adVqmCallHistRtDelayAverage"), ("ADTRAN-AOS-VQM", "adVqmCallHistRtDelayMaximum"), ("ADTRAN-AOS-VQM", "adVqmCallHistOnewayDelayInst"), ("ADTRAN-AOS-VQM", "adVqmCallHistOnewayDelayAverage"), ("ADTRAN-AOS-VQM", "adVqmCallHistOnewayDelayMaximum"), ("ADTRAN-AOS-VQM", "adVqmCallHistOrigDelayInst"), ("ADTRAN-AOS-VQM", "adVqmCallHistOrigDelayAverage"), ("ADTRAN-AOS-VQM", "adVqmCallHistOrigDelayMaximum"), ("ADTRAN-AOS-VQM", "adVqmCallHistTermDelayMinimum"), ("ADTRAN-AOS-VQM", "adVqmCallHistTermDelayAverage"), ("ADTRAN-AOS-VQM", "adVqmCallHistTermDelayMaximum"), ("ADTRAN-AOS-VQM", "adVqmCallHistRLq"), ("ADTRAN-AOS-VQM", "adVqmCallHistRCq"), ("ADTRAN-AOS-VQM", "adVqmCallHistRNominal"), ("ADTRAN-AOS-VQM", "adVqmCallHistRG107"), ("ADTRAN-AOS-VQM", "adVqmCallHistMosLq"), ("ADTRAN-AOS-VQM", "adVqmCallHistMosCq"), ("ADTRAN-AOS-VQM", "adVqmCallHistMosPq"), ("ADTRAN-AOS-VQM", "adVqmCallHistMosNominal"), ("ADTRAN-AOS-VQM", "adVqmCallHistDegLoss"), ("ADTRAN-AOS-VQM", "adVqmCallHistDegDiscard"), ("ADTRAN-AOS-VQM", "adVqmCallHistDegVocoder"), ("ADTRAN-AOS-VQM", "adVqmCallHistDegRecency"), ("ADTRAN-AOS-VQM", "adVqmCallHistDegDelay"), ("ADTRAN-AOS-VQM", "adVqmCallHistDegSiglvl"), ("ADTRAN-AOS-VQM", "adVqmCallHistDegNoiselvl"), ("ADTRAN-AOS-VQM", "adVqmCallHistDegEcholvl"), ("ADTRAN-AOS-VQM", "adVqmCallHistBurstRLq"), ("ADTRAN-AOS-VQM", "adVqmCallHistBurstCount"), ("ADTRAN-AOS-VQM", "adVqmCallHistBurstRateAvg"), ("ADTRAN-AOS-VQM", "adVqmCallHistBurstLenAvgPkts"), ("ADTRAN-AOS-VQM", "adVqmCallHistBurstLenAvgMsec"), ("ADTRAN-AOS-VQM", "adVqmCallHistGapR"), ("ADTRAN-AOS-VQM", "adVqmCallHistGapCount"), ("ADTRAN-AOS-VQM", "adVqmCallHistGapLossRateAvg"), ("ADTRAN-AOS-VQM", "adVqmCallHistGapLenPkts"), ("ADTRAN-AOS-VQM", "adVqmCallHistGapLenMsec"), ("ADTRAN-AOS-VQM", "adVqmCallHistLossRateAvg"), ("ADTRAN-AOS-VQM", "adVqmCallHistNetworkLossAvg"), ("ADTRAN-AOS-VQM", "adVqmCallHistDiscardRateAvg"), ("ADTRAN-AOS-VQM", "adVqmCallHistExcessBurst"), ("ADTRAN-AOS-VQM", "adVqmCallHistExcessGap"), ("ADTRAN-AOS-VQM", "adVqmCallHistPpdvMsec"), ("ADTRAN-AOS-VQM", "adVqmCallHistLateThresholdMs"), ("ADTRAN-AOS-VQM", "adVqmCallHistLateThresholdPc"), ("ADTRAN-AOS-VQM", "adVqmCallHistLateUnderThresh"), ("ADTRAN-AOS-VQM", "adVqmCallHistLateTotalCount"), ("ADTRAN-AOS-VQM", "adVqmCallHistLatePeakJitterMs"), ("ADTRAN-AOS-VQM", "adVqmCallHistEarlyThreshMs"), ("ADTRAN-AOS-VQM", "adVqmCallHistEarlyThreshPc"), ("ADTRAN-AOS-VQM", "adVqmCallHistEarlyUnderThresh"), ("ADTRAN-AOS-VQM", "adVqmCallHistEarlyTotalCount"), ("ADTRAN-AOS-VQM", "adVqmCallHistEarlyPeakJitterMs"), ("ADTRAN-AOS-VQM", "adVqmCallHistDelayIncreaseCount"), ("ADTRAN-AOS-VQM", "adVqmCallHistDelayDecreaseCount"), ("ADTRAN-AOS-VQM", "adVqmCallHistResyncCount"), ("ADTRAN-AOS-VQM", "adVqmCallHistJitterBufferType"), ("ADTRAN-AOS-VQM", "adVqmCallHistJbCfgMin"), ("ADTRAN-AOS-VQM", "adVqmCallHistJbCfgNom"), ("ADTRAN-AOS-VQM", "adVqmCallHistJbCfgMax"), ("ADTRAN-AOS-VQM", "adVqmCallHistDuplicatePkts"), ("ADTRAN-AOS-VQM", "adVqmCallHistEarlyPkts"), ("ADTRAN-AOS-VQM", "adVqmCallHistLatePkts"), ("ADTRAN-AOS-VQM", "adVqmCallHistOverrunDiscardPkts"), ("ADTRAN-AOS-VQM", "adVqmCallHistUnderrunDiscardPkts"), ("ADTRAN-AOS-VQM", "adVqmCallHistDelayMinMsec"), ("ADTRAN-AOS-VQM", "adVqmCallHistDelayAvgMsec"), ("ADTRAN-AOS-VQM", "adVqmCallHistDelayMaxMsec"), ("ADTRAN-AOS-VQM", "adVqmCallHistDelayCurrentMsec"), ("ADTRAN-AOS-VQM", "adVqmCallHistExtRLqIn"), ("ADTRAN-AOS-VQM", "adVqmCallHistExtRLqOut"), ("ADTRAN-AOS-VQM", "adVqmCallHistExtRCqIn"), ("ADTRAN-AOS-VQM", "adVqmCallHistExtRCqOut"), ("ADTRAN-AOS-VQM", "adVqmCallHistThroughPutIndex"), ("ADTRAN-AOS-VQM", "adVqmCallHistReliabilityIndex"), ("ADTRAN-AOS-VQM", "adVqmCallHistBitrate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adVQMCallHistoryGroup = adVQMCallHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: adVQMCallHistoryGroup.setDescription("The adVQMCallHistory group defines provides detail voice quality\n            statistics on 'completed' RTP voice streams.")
adVQMActiveCallGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 10, 1, 7)).setObjects(("ADTRAN-AOS-VQM", "adVqmActCallRtpSourceIp"), ("ADTRAN-AOS-VQM", "adVqmActCallRtpSourcePort"), ("ADTRAN-AOS-VQM", "adVqmActCallRtpDestIp"), ("ADTRAN-AOS-VQM", "adVqmActCallRtpDestPort"), ("ADTRAN-AOS-VQM", "adVqmActCallSsrcid"), ("ADTRAN-AOS-VQM", "adVqmActCallTo"), ("ADTRAN-AOS-VQM", "adVqmActCallFrom"), ("ADTRAN-AOS-VQM", "adVqmActCallRtpSourceUri"), ("ADTRAN-AOS-VQM", "adVqmActCallCallid"), ("ADTRAN-AOS-VQM", "adVqmActCallCcmid"), ("ADTRAN-AOS-VQM", "adVqmActCallSourceIntName"), ("ADTRAN-AOS-VQM", "adVqmActCallDestIntName"), ("ADTRAN-AOS-VQM", "adVqmActCallSourceIntDescription"), ("ADTRAN-AOS-VQM", "adVqmActCallDestIntDescription"), ("ADTRAN-AOS-VQM", "adVqmActCallCallStart"), ("ADTRAN-AOS-VQM", "adVqmActCallCallDurationMs"), ("ADTRAN-AOS-VQM", "adVqmActCallCodec"), ("ADTRAN-AOS-VQM", "adVqmActCallCodecClass"), ("ADTRAN-AOS-VQM", "adVqmActCallDscp"), ("ADTRAN-AOS-VQM", "adVqmActCallPktsRcvdTotal"), ("ADTRAN-AOS-VQM", "adVqmActCallPktsLostTotal"), ("ADTRAN-AOS-VQM", "adVqmActCallPktsDiscardedTotal"), ("ADTRAN-AOS-VQM", "adVqmActCallOutOfOrder"), ("ADTRAN-AOS-VQM", "adVqmActCallPdvAverageMs"), ("ADTRAN-AOS-VQM", "adVqmActCallPdvMaximumMs"), ("ADTRAN-AOS-VQM", "adVqmActCallRtDelayInst"), ("ADTRAN-AOS-VQM", "adVqmActCallRtDelayAverage"), ("ADTRAN-AOS-VQM", "adVqmActCallRtDelayMaximum"), ("ADTRAN-AOS-VQM", "adVqmActCallOnewayDelayInst"), ("ADTRAN-AOS-VQM", "adVqmActCallOnewayDelayAverage"), ("ADTRAN-AOS-VQM", "adVqmActCallOnewayDelayMaximum"), ("ADTRAN-AOS-VQM", "adVqmActCallOrigDelayInst"), ("ADTRAN-AOS-VQM", "adVqmActCallOrigDelayAverage"), ("ADTRAN-AOS-VQM", "adVqmActCallOrigDelayMaximum"), ("ADTRAN-AOS-VQM", "adVqmActCallTermDelayMinimum"), ("ADTRAN-AOS-VQM", "adVqmActCallTermDelayAverage"), ("ADTRAN-AOS-VQM", "adVqmActCallTermDelayMaximum"), ("ADTRAN-AOS-VQM", "adVqmActCallRLq"), ("ADTRAN-AOS-VQM", "adVqmActCallRCq"), ("ADTRAN-AOS-VQM", "adVqmActCallRNominal"), ("ADTRAN-AOS-VQM", "adVqmActCallRG107"), ("ADTRAN-AOS-VQM", "adVqmActCallMosLq"), ("ADTRAN-AOS-VQM", "adVqmActCallMosCq"), ("ADTRAN-AOS-VQM", "adVqmActCallMosPq"), ("ADTRAN-AOS-VQM", "adVqmActCallMosNominal"), ("ADTRAN-AOS-VQM", "adVqmActCallDegLoss"), ("ADTRAN-AOS-VQM", "adVqmActCallDegDiscard"), ("ADTRAN-AOS-VQM", "adVqmActCallDegVocoder"), ("ADTRAN-AOS-VQM", "adVqmActCallDegRecency"), ("ADTRAN-AOS-VQM", "adVqmActCallDegDelay"), ("ADTRAN-AOS-VQM", "adVqmActCallDegSiglvl"), ("ADTRAN-AOS-VQM", "adVqmActCallDegNoiselvl"), ("ADTRAN-AOS-VQM", "adVqmActCallDegEcholvl"), ("ADTRAN-AOS-VQM", "adVqmActCallBurstRLq"), ("ADTRAN-AOS-VQM", "adVqmActCallBurstCount"), ("ADTRAN-AOS-VQM", "adVqmActCallBurstRateAvg"), ("ADTRAN-AOS-VQM", "adVqmActCallBurstLenAvgPkts"), ("ADTRAN-AOS-VQM", "adVqmActCallBurstLenAvgMsec"), ("ADTRAN-AOS-VQM", "adVqmActCallGapR"), ("ADTRAN-AOS-VQM", "adVqmActCallGapCount"), ("ADTRAN-AOS-VQM", "adVqmActCallGapLossRateAvg"), ("ADTRAN-AOS-VQM", "adVqmActCallGapLenPkts"), ("ADTRAN-AOS-VQM", "adVqmActCallGapLenMsec"), ("ADTRAN-AOS-VQM", "adVqmActCallLossRateAvg"), ("ADTRAN-AOS-VQM", "adVqmActCallNetworkLossAvg"), ("ADTRAN-AOS-VQM", "adVqmActCallDiscardRateAvg"), ("ADTRAN-AOS-VQM", "adVqmActCallExcessBurst"), ("ADTRAN-AOS-VQM", "adVqmActCallExcessGap"), ("ADTRAN-AOS-VQM", "adVqmActCallPpdvMsec"), ("ADTRAN-AOS-VQM", "adVqmActCallLateThresholdMs"), ("ADTRAN-AOS-VQM", "adVqmActCallLateThresholdPc"), ("ADTRAN-AOS-VQM", "adVqmActCallLateUnderThresh"), ("ADTRAN-AOS-VQM", "adVqmActCallLateTotalCount"), ("ADTRAN-AOS-VQM", "adVqmActCallLatePeakJitterMs"), ("ADTRAN-AOS-VQM", "adVqmActCallEarlyThreshMs"), ("ADTRAN-AOS-VQM", "adVqmActCallEarlyThreshPc"), ("ADTRAN-AOS-VQM", "adVqmActCallEarlyUnderThresh"), ("ADTRAN-AOS-VQM", "adVqmActCallEarlyTotalCount"), ("ADTRAN-AOS-VQM", "adVqmActCallEarlyPeakJitterMs"), ("ADTRAN-AOS-VQM", "adVqmActCallDelayIncreaseCount"), ("ADTRAN-AOS-VQM", "adVqmActCallDelayDecreaseCount"), ("ADTRAN-AOS-VQM", "adVqmActCallResyncCount"), ("ADTRAN-AOS-VQM", "adVqmActCallJitterBufferType"), ("ADTRAN-AOS-VQM", "adVqmActCallJbCfgMin"), ("ADTRAN-AOS-VQM", "adVqmActCallJbCfgNom"), ("ADTRAN-AOS-VQM", "adVqmActCallJbCfgMax"), ("ADTRAN-AOS-VQM", "adVqmActCallDuplicatePkts"), ("ADTRAN-AOS-VQM", "adVqmActCallEarlyPkts"), ("ADTRAN-AOS-VQM", "adVqmActCallLatePkts"), ("ADTRAN-AOS-VQM", "adVqmActCallOverrunDiscardPkts"), ("ADTRAN-AOS-VQM", "adVqmActCallUnderrunDiscardPkts"), ("ADTRAN-AOS-VQM", "adVqmActCallDelayMinMsec"), ("ADTRAN-AOS-VQM", "adVqmActCallDelayAvgMsec"), ("ADTRAN-AOS-VQM", "adVqmActCallDelayMaxMsec"), ("ADTRAN-AOS-VQM", "adVqmActCallDelayCurrentMsec"), ("ADTRAN-AOS-VQM", "adVqmActCallExtRLqIn"), ("ADTRAN-AOS-VQM", "adVqmActCallExtRLqOut"), ("ADTRAN-AOS-VQM", "adVqmActCallExtRCqIn"), ("ADTRAN-AOS-VQM", "adVqmActCallExtRCqOut"), ("ADTRAN-AOS-VQM", "adVqmActCallThroughPutIndex"), ("ADTRAN-AOS-VQM", "adVqmActCallReliabilityIndex"), ("ADTRAN-AOS-VQM", "adVqmActCallBitrate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adVQMActiveCallGroup = adVQMActiveCallGroup.setStatus('current')
if mibBuilder.loadTexts: adVQMActiveCallGroup.setDescription("The adVQMActiveCall group defines provides detail voice quality\n            statistics on 'current' RTP voice streams.")
adVQMTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 10, 1, 8)).setObjects(("ADTRAN-AOS-VQM", "adVqmTrapState"), ("ADTRAN-AOS-VQM", "adVqmTrapCfgSeverityLevel"), ("ADTRAN-AOS-VQM", "adVqmTrapEventType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adVQMTrapGroup = adVQMTrapGroup.setStatus('current')
if mibBuilder.loadTexts: adVQMTrapGroup.setDescription('The objects necessary to control VQM notification messages.')
adVQMNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 10, 1, 9)).setObjects(("ADTRAN-AOS-VQM", "adVQMEndOfCallTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adVQMNotificationGroup = adVQMNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: adVQMNotificationGroup.setDescription('Traps which may be used to enhance event driven\n            management of VQM.')
mibBuilder.exportSymbols("ADTRAN-AOS-VQM", adVqmActCallRG107=adVqmActCallRG107, adVqmActCallDegVocoder=adVqmActCallDegVocoder, adVqmCallHistOnewayDelayMaximum=adVqmCallHistOnewayDelayMaximum, adVqmActCallPktsDiscardedTotal=adVqmActCallPktsDiscardedTotal, adVqmEndPointMosPqMaximum=adVqmEndPointMosPqMaximum, adVQMEndPointTable=adVQMEndPointTable, adVqmCallHistCodecClass=adVqmCallHistCodecClass, adVqmActCallGapLenMsec=adVqmActCallGapLenMsec, adVqmCfgJitterBufferAdaptiveMin=adVqmCfgJitterBufferAdaptiveMin, adVqmSysActiveCalls=adVqmSysActiveCalls, adVqmActCallPktsLostTotal=adVqmActCallPktsLostTotal, adVqmEndPointInterfaceName=adVqmEndPointInterfaceName, adVqmIfcLossAverage=adVqmIfcLossAverage, adVqmCallHistLateThresholdMs=adVqmCallHistLateThresholdMs, adVqmActCallEarlyThreshPc=adVqmActCallEarlyThreshPc, adVqmCallHistJitterBufferType=adVqmCallHistJitterBufferType, adVqmActCallResyncCount=adVqmActCallResyncCount, adVqmCallHistLateTotalCount=adVqmCallHistLateTotalCount, adVqmCallHistDegVocoder=adVqmCallHistDegVocoder, adVqmCallHistEarlyPeakJitterMs=adVqmCallHistEarlyPeakJitterMs, adVqmActCallFrom=adVqmActCallFrom, adVqmCfgClearCallHistory=adVqmCfgClearCallHistory, adVqmCallHistDestIntDescription=adVqmCallHistDestIntDescription, adVqmSysAllCallsFair=adVqmSysAllCallsFair, adGenAOSVqmCompliances=adGenAOSVqmCompliances, adVQMEndOfCallTrap=adVQMEndOfCallTrap, adVqmCallHistDegEcholvl=adVqmCallHistDegEcholvl, adVQMActiveCallEntry=adVQMActiveCallEntry, adVqmCfgRoundTripPingEnabled=adVqmCfgRoundTripPingEnabled, adVQMNotificationGroup=adVQMNotificationGroup, adVqmCfgHistoryThresholdOutOfOrder=adVqmCfgHistoryThresholdOutOfOrder, adVqmIfcRG107Maximum=adVqmIfcRG107Maximum, adVqmActCallRtDelayAverage=adVqmActCallRtDelayAverage, adGenAOSVqmFullCompliance=adGenAOSVqmFullCompliance, adVqmCallHistDegLoss=adVqmCallHistDegLoss, adVqmActCallGapLenPkts=adVqmActCallGapLenPkts, adVqmCallHistRtpDestIp=adVqmCallHistRtpDestIp, adVqmEndPointNumberStreamsPoor=adVqmEndPointNumberStreamsPoor, adVqmThresholdLqmosWarning=adVqmThresholdLqmosWarning, adVqmActCallOnewayDelayMaximum=adVqmActCallOnewayDelayMaximum, adVqmCallHistEarlyTotalCount=adVqmCallHistEarlyTotalCount, adVqmCfgEnable=adVqmCfgEnable, adVqmCallHistPdvAverageMs=adVqmCallHistPdvAverageMs, adVqmActCallDegRecency=adVqmActCallDegRecency, adVqmActCallJbCfgMax=adVqmActCallJbCfgMax, adVqmThresholdLossNotice=adVqmThresholdLossNotice, adVqmActCallUnderrunDiscardPkts=adVqmActCallUnderrunDiscardPkts, adVQMActiveCallTable=adVQMActiveCallTable, adVqmSysCallHistoryExcellent=adVqmSysCallHistoryExcellent, adVqmIfcPktsDiscarded=adVqmIfcPktsDiscarded, adVqmIfcMosCqMinimum=adVqmIfcMosCqMinimum, adVqmActCallOrigDelayAverage=adVqmActCallOrigDelayAverage, adVqmCallHistExtRLqIn=adVqmCallHistExtRLqIn, adVqmCallHistGapR=adVqmCallHistGapR, adVqmCallHistDelayCurrentMsec=adVqmCallHistDelayCurrentMsec, adVqmCallHistPktsDiscardedTotal=adVqmCallHistPktsDiscardedTotal, adVqmActCallRtpSourceIp=adVqmActCallRtpSourceIp, adVqmSysActiveGood=adVqmSysActiveGood, adVqmEndPointNumberStreamsFair=adVqmEndPointNumberStreamsFair, adVqmCallHistSsrcid=adVqmCallHistSsrcid, adVqmCallHistTermDelayMaximum=adVqmCallHistTermDelayMaximum, adVqmCallHistBurstLenAvgMsec=adVqmCallHistBurstLenAvgMsec, adVqmIfcPktsOoo=adVqmIfcPktsOoo, adVQMHistory=adVQMHistory, adVqmEndPointNumberCompletedCalls=adVqmEndPointNumberCompletedCalls, adVqmCallHistOrigDelayMaximum=adVqmCallHistOrigDelayMaximum, adVqmActCallBurstCount=adVqmActCallBurstCount, adVqmActCallDegNoiselvl=adVqmActCallDegNoiselvl, adVqmIfcDiscardsAverage=adVqmIfcDiscardsAverage, adVQMTrapGroup=adVQMTrapGroup, adVqmCallHistEarlyUnderThresh=adVqmCallHistEarlyUnderThresh, adVqmCfgClear=adVqmCfgClear, adVqmActCallDestIntName=adVqmActCallDestIntName, adVqmCallHistReliabilityIndex=adVqmCallHistReliabilityIndex, adVqmIfcMosLqAverage=adVqmIfcMosLqAverage, adVqmActCallLatePeakJitterMs=adVqmActCallLatePeakJitterMs, adVqmActCallBitrate=adVqmActCallBitrate, adVqmIfcName=adVqmIfcName, adVqmThresholdPqmosError=adVqmThresholdPqmosError, adVqmActCallRtDelayInst=adVqmActCallRtDelayInst, adVqmActCallEarlyTotalCount=adVqmActCallEarlyTotalCount, adVqmThresholdLqmosNotice=adVqmThresholdLqmosNotice, adVqmCallHistSourceIntDescription=adVqmCallHistSourceIntDescription, adVqmSysActiveFair=adVqmSysActiveFair, adVqmActCallGapLossRateAvg=adVqmActCallGapLossRateAvg, adVQMCallHistoryEntry=adVQMCallHistoryEntry, adVqmCallHistPktsLostTotal=adVqmCallHistPktsLostTotal, adVqmActCallExtRLqOut=adVqmActCallExtRLqOut, adVqmIfcRG107Average=adVqmIfcRG107Average, adVqmEndPointNumberStreamsExcellent=adVqmEndPointNumberStreamsExcellent, adVqmSysCallHistoryGood=adVqmSysCallHistoryGood, adVQMSysPerf=adVQMSysPerf, MsecValue=MsecValue, adVqmIfcPdvMaximumMs=adVqmIfcPdvMaximumMs, adVqmIfcMosCqMaximum=adVqmIfcMosCqMaximum, adVqmIfcDiscardsMaximum=adVqmIfcDiscardsMaximum, adVQMInterfaceEntry=adVQMInterfaceEntry, adVqmCallHistBurstRateAvg=adVqmCallHistBurstRateAvg, adVqmCallHistTermDelayMinimum=adVqmCallHistTermDelayMinimum, adVqmCallHistRG107=adVqmCallHistRG107, adVqmCallHistOrigDelayAverage=adVqmCallHistOrigDelayAverage, adVqmCallHistJbCfgNom=adVqmCallHistJbCfgNom, adVqmCallHistRtpDestPort=adVqmCallHistRtpDestPort, adVqmActCallSourceIntName=adVqmActCallSourceIntName, adVqmActCallNetworkLossAvg=adVqmActCallNetworkLossAvg, adVQMEndPointEntry=adVQMEndPointEntry, adVqmActCallEarlyPeakJitterMs=adVqmActCallEarlyPeakJitterMs, adVqmCfgJitterBufferType=adVqmCfgJitterBufferType, adVqmCallHistDegSiglvl=adVqmCallHistDegSiglvl, adVqmThresholdLossError=adVqmThresholdLossError, adVqmSysCallHistoryFair=adVqmSysCallHistoryFair, adVqmActCallDelayAvgMsec=adVqmActCallDelayAvgMsec, adVQMInterface=adVQMInterface, adVqmCallHistPktsRcvdTotal=adVqmCallHistPktsRcvdTotal, adGenAOSVqmConformance=adGenAOSVqmConformance, adVqmActCallRLq=adVqmActCallRLq, adVqmActCallMosPq=adVqmActCallMosPq, adVqmThresholdOutOfOrderWarning=adVqmThresholdOutOfOrderWarning, adVqmCallHistEarlyThreshPc=adVqmCallHistEarlyThreshPc, adVqmActCallLatePkts=adVqmActCallLatePkts, adVqmIfcMosPqAverage=adVqmIfcMosPqAverage, adVqmIfcPktsLost=adVqmIfcPktsLost, adVqmCallHistEarlyThreshMs=adVqmCallHistEarlyThreshMs, adVqmActCallGapCount=adVqmActCallGapCount, adVqmCfgJitterBufferFixedNominal=adVqmCfgJitterBufferFixedNominal, adVqmActCallDuplicatePkts=adVqmActCallDuplicatePkts, adVqmActCallSsrcid=adVqmActCallSsrcid, adVqmEndPointMosLqMaximum=adVqmEndPointMosLqMaximum, adVqmCallHistCallStart=adVqmCallHistCallStart, adVqmCallHistTermDelayAverage=adVqmCallHistTermDelayAverage, PYSNMP_MODULE_ID=adGenAOSVQMMib, adVqmEndPointRtpSourceIp=adVqmEndPointRtpSourceIp, adVqmEndPointMosPqMinimum=adVqmEndPointMosPqMinimum, adVqmEndPointMosPqAverage=adVqmEndPointMosPqAverage, adVqmIfcNumberStreamsExcellent=adVqmIfcNumberStreamsExcellent, adVqmActCallDscp=adVqmActCallDscp, adVqmSysAllCallsPoor=adVqmSysAllCallsPoor, adVqmActCallCallDurationMs=adVqmActCallCallDurationMs, adVQMTrap=adVQMTrap, adVqmCallHistRtpSourcePort=adVqmCallHistRtpSourcePort, adVqmCfgHistoryThresholdPqmos=adVqmCfgHistoryThresholdPqmos, adVqmCallHistRtDelayMaximum=adVqmCallHistRtDelayMaximum, adVqmIfcMosCqAverage=adVqmIfcMosCqAverage, adVqmActCallMosLq=adVqmActCallMosLq, adVqmTrapCfgSeverityLevel=adVqmTrapCfgSeverityLevel, adVqmEndPointInterfaceId=adVqmEndPointInterfaceId, adVqmThresholdLqmosInfo=adVqmThresholdLqmosInfo, adVqmCallHistPdvMaximumMs=adVqmCallHistPdvMaximumMs, adVQMInterfaceGroup=adVQMInterfaceGroup, adVqmIfcNumberStreamsPoor=adVqmIfcNumberStreamsPoor, adVqmCallHistCallDurationMs=adVqmCallHistCallDurationMs, adVqmActCallCodec=adVqmActCallCodec, adVQMActiveCallGroup=adVQMActiveCallGroup, adVqmCallHistDscp=adVqmCallHistDscp, adVqmCallHistRtDelayAverage=adVqmCallHistRtDelayAverage, adVqmTrapState=adVqmTrapState, adVqmCallHistGapLenMsec=adVqmCallHistGapLenMsec, adVqmEndPointMosLqAverage=adVqmEndPointMosLqAverage, adVQMEndPointGroup=adVQMEndPointGroup, MOSvalue=MOSvalue, adVqmIfcMosLqMaximum=adVqmIfcMosLqMaximum, adVqmCallHistExtRCqIn=adVqmCallHistExtRCqIn, adVqmActCallExtRCqIn=adVqmActCallExtRCqIn, adVqmEndPointJitterMaximum=adVqmEndPointJitterMaximum, adVqmCfgUdpEnable=adVqmCfgUdpEnable, adVqmSysAllCallsGood=adVqmSysAllCallsGood, adVqmActCallCallStart=adVqmActCallCallStart, adVqmIfcNumberStreamsGood=adVqmIfcNumberStreamsGood, adVqmCfgHistoryThresholdJitter=adVqmCfgHistoryThresholdJitter, adVqmCallHistPpdvMsec=adVqmCallHistPpdvMsec, adVqmCallHistThroughPutIndex=adVqmCallHistThroughPutIndex, adVqmActCallRNominal=adVqmActCallRNominal, adVQM=adVQM, adVqmThresholdJitterWarning=adVqmThresholdJitterWarning, adVqmActCallCcmid=adVqmActCallCcmid, adVqmIfcLossMaximum=adVqmIfcLossMaximum, adVqmActCallRtpSourcePort=adVqmActCallRtpSourcePort, adVqmSysCallHistoryPoor=adVqmSysCallHistoryPoor, adVqmCallHistMosLq=adVqmCallHistMosLq, adVqmCallHistBitrate=adVqmCallHistBitrate, adVqmActCallBurstLenAvgMsec=adVqmActCallBurstLenAvgMsec, adVqmThresholdLossWarning=adVqmThresholdLossWarning, adVqmIfcClear=adVqmIfcClear, adVQMThresholdGroup=adVQMThresholdGroup, adVqmIfcMosLqMinimum=adVqmIfcMosLqMinimum, adVqmActCallDegDiscard=adVqmActCallDegDiscard, adVQMEndPoint=adVQMEndPoint, adVqmIfcLossMinimum=adVqmIfcLossMinimum, adVqmCallHistBurstCount=adVqmCallHistBurstCount, adVqmCallHistDelayMinMsec=adVqmCallHistDelayMinMsec, Percentage=Percentage, adVqmActCallRtpSourceUri=adVqmActCallRtpSourceUri, adVqmThresholdPqmosNotice=adVqmThresholdPqmosNotice, adVqmIfcDelayAvgMsec=adVqmIfcDelayAvgMsec, adVqmIfcDelayMaxMsec=adVqmIfcDelayMaxMsec, adVqmCallHistRCq=adVqmCallHistRCq, adVqmCallHistLateUnderThresh=adVqmCallHistLateUnderThresh, adVqmIfcMosPqMinimum=adVqmIfcMosPqMinimum, adVqmThresholdOutOfOrderInfo=adVqmThresholdOutOfOrderInfo, adVqmActCallCodecClass=adVqmActCallCodecClass, adVqmActCallDelayMinMsec=adVqmActCallDelayMinMsec, adVqmActCallOnewayDelayAverage=adVqmActCallOnewayDelayAverage, adVqmCallHistUnderrunDiscardPkts=adVqmCallHistUnderrunDiscardPkts, adVqmActCallEarlyPkts=adVqmActCallEarlyPkts, adVqmIfcRG107Minimum=adVqmIfcRG107Minimum, adVqmCallHistCallid=adVqmCallHistCallid, adVqmCallHistBurstLenAvgPkts=adVqmCallHistBurstLenAvgPkts, adVqmActCallOverrunDiscardPkts=adVqmActCallOverrunDiscardPkts, adVqmCallHistExcessBurst=adVqmCallHistExcessBurst, adVqmActCallRCq=adVqmActCallRCq, adVqmActCallExcessBurst=adVqmActCallExcessBurst, adVqmCallHistJbCfgMax=adVqmCallHistJbCfgMax, adVqmCallHistMosPq=adVqmCallHistMosPq, adVQMCfg=adVQMCfg, adVqmCfgRoundTripPingType=adVqmCfgRoundTripPingType, adVqmActCallBurstLenAvgPkts=adVqmActCallBurstLenAvgPkts, adVqmThresholdLqmosError=adVqmThresholdLqmosError, adVqmActCallOrigDelayInst=adVqmActCallOrigDelayInst, adVqmActCallDegDelay=adVqmActCallDegDelay, adVqmCallHistCodec=adVqmCallHistCodec, adVqmThresholdJitterInfo=adVqmThresholdJitterInfo, adVqmCfgJitterBufferAdaptiveMax=adVqmCfgJitterBufferAdaptiveMax, adVqmActCallDegSiglvl=adVqmActCallDegSiglvl, adVqmActCallMosNominal=adVqmActCallMosNominal, adVqmTrapEventType=adVqmTrapEventType, adVqmActCallPdvMaximumMs=adVqmActCallPdvMaximumMs, adVqmCallHistRtDelayInst=adVqmCallHistRtDelayInst, adVqmActCallGapR=adVqmActCallGapR, adVqmActCallEarlyUnderThresh=adVqmActCallEarlyUnderThresh, adVqmActCallDegLoss=adVqmActCallDegLoss, adVqmCallHistDelayAvgMsec=adVqmCallHistDelayAvgMsec, adVqmCallHistRLq=adVqmCallHistRLq, adVqmCallHistDegDelay=adVqmCallHistDegDelay, adVqmSysCallHistoryCalls=adVqmSysCallHistoryCalls, adVqmActCallPpdvMsec=adVqmActCallPpdvMsec, adVqmActCallDelayDecreaseCount=adVqmActCallDelayDecreaseCount, adVqmActCallEarlyThreshMs=adVqmActCallEarlyThreshMs, adVqmCallHistDegNoiselvl=adVqmCallHistDegNoiselvl, adVqmActCallJitterBufferType=adVqmActCallJitterBufferType, adVqmActCallDelayMaxMsec=adVqmActCallDelayMaxMsec, adVqmActCallExtRCqOut=adVqmActCallExtRCqOut, adVqmSysActiveExcellent=adVqmSysActiveExcellent, adVqmActCallLateTotalCount=adVqmActCallLateTotalCount, adVqmIfcRCqMaximum=adVqmIfcRCqMaximum, adVqmEndPointPktsLostTotal=adVqmEndPointPktsLostTotal, adVqmIfcTerminatedCalls=adVqmIfcTerminatedCalls, adVqmCallHistDelayDecreaseCount=adVqmCallHistDelayDecreaseCount, adVqmIfcNumberActiveCalls=adVqmIfcNumberActiveCalls, adVqmThresholdPqmosWarning=adVqmThresholdPqmosWarning, adVqmCallHistOnewayDelayAverage=adVqmCallHistOnewayDelayAverage, adVqmCallHistOverrunDiscardPkts=adVqmCallHistOverrunDiscardPkts, adVqmIfcRCqAverage=adVqmIfcRCqAverage, adGenAOSVQMMib=adGenAOSVQMMib, adVqmCallHistResyncCount=adVqmCallHistResyncCount)
mibBuilder.exportSymbols("ADTRAN-AOS-VQM", adVqmActCallReliabilityIndex=adVqmActCallReliabilityIndex, adVqmActCallTermDelayMinimum=adVqmActCallTermDelayMinimum, adVqmActCallExcessGap=adVqmActCallExcessGap, adVqmCallHistLatePkts=adVqmCallHistLatePkts, adVqmCallHistExcessGap=adVqmCallHistExcessGap, adVqmIfcId=adVqmIfcId, adVQMActive=adVQMActive, adVqmIfcRLqMinimum=adVqmIfcRLqMinimum, adVqmCfgSipEnable=adVqmCfgSipEnable, adVqmCallHistLatePeakJitterMs=adVqmCallHistLatePeakJitterMs, adVQMTrapControl=adVQMTrapControl, adVqmSysActivePoor=adVqmSysActivePoor, adVqmCallHistDuplicatePkts=adVqmCallHistDuplicatePkts, adVqmCallHistGapCount=adVqmCallHistGapCount, adVqmCallHistEarlyPkts=adVqmCallHistEarlyPkts, adVqmCfgJitterBufferAdaptiveNominal=adVqmCfgJitterBufferAdaptiveNominal, adVqmActCallCallid=adVqmActCallCallid, adVqmCfgHistoryThresholdLoss=adVqmCfgHistoryThresholdLoss, adVqmActCallOutOfOrder=adVqmActCallOutOfOrder, adVqmIfcRLqAverage=adVqmIfcRLqAverage, adVqmActCallTermDelayAverage=adVqmActCallTermDelayAverage, adVqmThresholdJitterError=adVqmThresholdJitterError, adVQMCfgGroup=adVQMCfgGroup, adVqmCfgHistoryThresholdLqmos=adVqmCfgHistoryThresholdLqmos, adVqmActCallMosCq=adVqmActCallMosCq, adVqmThresholdOutOfOrderError=adVqmThresholdOutOfOrderError, adVqmCallHistExtRCqOut=adVqmCallHistExtRCqOut, adVqmCfgJitterBufferFixedSize=adVqmCfgJitterBufferFixedSize, adVqmCallHistFrom=adVqmCallHistFrom, adVQMInterfaceTable=adVQMInterfaceTable, adVqmActCallLateThresholdMs=adVqmActCallLateThresholdMs, adVQMCallHistoryTable=adVQMCallHistoryTable, adVqmIfcRCqMinimum=adVqmIfcRCqMinimum, adVqmCallHistSourceIntName=adVqmCallHistSourceIntName, adVqmIfcMosPqMaximum=adVqmIfcMosPqMaximum, adVqmCallHistJbCfgMin=adVqmCallHistJbCfgMin, adVqmCallHistExtRLqOut=adVqmCallHistExtRLqOut, adVqmSysAllCallsExcellent=adVqmSysAllCallsExcellent, adVQMThreshold=adVQMThreshold, adVqmCfgInternationalCode=adVqmCfgInternationalCode, adVqmCallHistBurstRLq=adVqmCallHistBurstRLq, adVqmActCallBurstRateAvg=adVqmActCallBurstRateAvg, adVqmCallHistDiscardRateAvg=adVqmCallHistDiscardRateAvg, adGenAOSVqmGroups=adGenAOSVqmGroups, adVqmCallHistCcmid=adVqmCallHistCcmid, adVqmIfcDelayMinMsec=adVqmIfcDelayMinMsec, adVqmActCallLossRateAvg=adVqmActCallLossRateAvg, adVqmCallHistLossRateAvg=adVqmCallHistLossRateAvg, adVqmActCallSourceIntDescription=adVqmActCallSourceIntDescription, adVqmActCallTo=adVqmActCallTo, adVqmCallHistOutOfOrder=adVqmCallHistOutOfOrder, adVQMSysPerfGroup=adVQMSysPerfGroup, adVqmCallHistLateThresholdPc=adVqmCallHistLateThresholdPc, adVqmActCallJbCfgMin=adVqmActCallJbCfgMin, adVqmCallHistMosCq=adVqmCallHistMosCq, adVqmCallHistGapLossRateAvg=adVqmCallHistGapLossRateAvg, adVqmCallHistDegRecency=adVqmCallHistDegRecency, adVqmActCallDestIntDescription=adVqmActCallDestIntDescription, adVqmCallHistRNominal=adVqmCallHistRNominal, adVqmActCallRtpDestIp=adVqmActCallRtpDestIp, adVqmActCallDegEcholvl=adVqmActCallDegEcholvl, adVqmActCallPdvAverageMs=adVqmActCallPdvAverageMs, adVqmThresholdLossInfo=adVqmThresholdLossInfo, adVQMCallHistoryGroup=adVQMCallHistoryGroup, adVqmActCallRtDelayMaximum=adVqmActCallRtDelayMaximum, adVqmCallHistOrigDelayInst=adVqmCallHistOrigDelayInst, adVqmThresholdPqmosInfo=adVqmThresholdPqmosInfo, adVqmActCallJbCfgNom=adVqmActCallJbCfgNom, adVqmActCallDelayIncreaseCount=adVqmActCallDelayIncreaseCount, adVqmCallHistOnewayDelayInst=adVqmCallHistOnewayDelayInst, adVqmCfgJitterBufferThresholdEarlyMs=adVqmCfgJitterBufferThresholdEarlyMs, adVqmCallHistDelayMaxMsec=adVqmCallHistDelayMaxMsec, adVqmActCallLateUnderThresh=adVqmActCallLateUnderThresh, adVqmIfcNumberStreamsFair=adVqmIfcNumberStreamsFair, adVqmCallHistDegDiscard=adVqmCallHistDegDiscard, adVqmActCallExtRLqIn=adVqmActCallExtRLqIn, adVqmCfgHistoryThresholdCqmos=adVqmCfgHistoryThresholdCqmos, adVqmThresholdJitterNotice=adVqmThresholdJitterNotice, adVqmActCallOnewayDelayInst=adVqmActCallOnewayDelayInst, adVqmActCallPktsRcvdTotal=adVqmActCallPktsRcvdTotal, adVqmIfcPktsRx=adVqmIfcPktsRx, adVqmActCallDelayCurrentMsec=adVqmActCallDelayCurrentMsec, adVqmIfcDiscardsMinimum=adVqmIfcDiscardsMinimum, adVqmCallHistGapLenPkts=adVqmCallHistGapLenPkts, adVqmCallHistRtpSourceUri=adVqmCallHistRtpSourceUri, adVqmCallHistMosNominal=adVqmCallHistMosNominal, adVqmCfgCallHistorySize=adVqmCfgCallHistorySize, adVqmCallHistDestIntName=adVqmCallHistDestIntName, adVqmCfgJitterBufferThresholdLateMs=adVqmCfgJitterBufferThresholdLateMs, adVqmEndPointNumberStreamsGood=adVqmEndPointNumberStreamsGood, adVqmActCallThroughPutIndex=adVqmActCallThroughPutIndex, adVqmThresholdOutOfOrderNotice=adVqmThresholdOutOfOrderNotice, adVqmCallHistRtpSourceIp=adVqmCallHistRtpSourceIp, adVqmEndPointPktsOutOfOrder=adVqmEndPointPktsOutOfOrder, adVqmActCallRtpDestPort=adVqmActCallRtpDestPort, adVqmEndPointMosLqMinimum=adVqmEndPointMosLqMinimum, adVqmActCallOrigDelayMaximum=adVqmActCallOrigDelayMaximum, adVqmActCallLateThresholdPc=adVqmActCallLateThresholdPc, adVqmCallHistDelayIncreaseCount=adVqmCallHistDelayIncreaseCount, adVqmActCallTermDelayMaximum=adVqmActCallTermDelayMaximum, adVqmActCallDiscardRateAvg=adVqmActCallDiscardRateAvg, adVqmIfcRLqMaximum=adVqmIfcRLqMaximum, adVqmActCallBurstRLq=adVqmActCallBurstRLq, adVqmCallHistTo=adVqmCallHistTo, adVqmCallHistNetworkLossAvg=adVqmCallHistNetworkLossAvg, adVqmIfcPdvAverageMs=adVqmIfcPdvAverageMs)
