#
# PySNMP MIB module WAYSTREAM-RPM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/waystream/WAYSTREAM-RPM-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 13:34:58 2024
# On host fv-az883-167 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, TimeTicks, IpAddress, Bits, Unsigned32, MibIdentifier, Counter64, NotificationType, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "TimeTicks", "IpAddress", "Bits", "Unsigned32", "MibIdentifier", "Counter64", "NotificationType", "ObjectIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wsMgmt, = mibBuilder.importSymbols("WAYSTREAM-SMI", "wsMgmt")
wsRpm = ModuleIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 14))
wsRpm.setRevisions(('2017-02-10 11:00', '2011-01-11 17:59', '2010-01-27 05:41', '2009-04-29 13:52', '2009-03-27 12:13', '2009-03-23 10:56', '2008-04-30 13:40',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wsRpm.setRevisionsDescriptions(('Company name change:\n\t In October 2015 PacketFront Network Products was renamed Waystream.\n\t In this update all PacketFront were changed to Waystream and all\n\t pf* to ws*.', 'Updated company name', 'Add RPM event-error-check related nodes, this allow to config the\n         detecting period/threshold of 4 type of multicast MPEG stream\n         quality error, and receive the trap from the corresponding trap node.', 'Move pfRpm from pfExperimental to pfMgmt. Corrected spelling of \n\t pfRpmTSMpegMisalignments object, added descriptions for audio elementary \n\t stream objects.', 'Add total-error-num for each RPM table, this shows total number of \n         error packet per type, src/dest IP address, src/dest port tuple.', 'Update telephone information in contact-info', 'Initial implementation of RPM from PACKETFRONT-MIB',))
if mibBuilder.loadTexts: wsRpm.setLastUpdated('201702101100Z')
if mibBuilder.loadTexts: wsRpm.setOrganization('Waystream AB')
if mibBuilder.loadTexts: wsRpm.setContactInfo('Waystream AB\n\n         Mail : Farogatan 33\n                SE-164 51 Kista\n                Sweden\n\n         Tel  : +46 8 56 26 94 50\n    \n         E-mail: info@waystream.com\n         Web   : http://www.waystream.com')
if mibBuilder.loadTexts: wsRpm.setDescription('MIB describing the Realtime Performance Monitoring function of ASRs.\n\t This allow operators to determine the quality of IPTV streams being\n\t delivered to end customers')
wsRpmGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2))
if mibBuilder.loadTexts: wsRpmGrp.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrp.setDescription('RPM multicast groups.')
wsRpmGrpRtp = ObjectIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1))
if mibBuilder.loadTexts: wsRpmGrpRtp.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtp.setDescription('RPM rtp multicast groups.')
wsRpmGrpRtpTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1), )
if mibBuilder.loadTexts: wsRpmGrpRtpTable.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpTable.setDescription('Table containing an entry for each RTP multicast group\n\tthat is\tmeasured by RPM.')
wsRpmGrpRtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1), ).setIndexNames((0, "WAYSTREAM-RPM-MIB", "wsRpmGrpRtpSrcAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmGrpRtpDestAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmGrpRtpSrcPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmGrpRtpDestPort"))
if mibBuilder.loadTexts: wsRpmGrpRtpEntry.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpEntry.setDescription('Entry in wsRpmGrpRtpTable.')
wsRpmGrpRtpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: wsRpmGrpRtpSrcAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpSrcAddr.setDescription('Multicast group source address.')
wsRpmGrpRtpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: wsRpmGrpRtpDestAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpDestAddr.setDescription('Multicast group destination address.')
wsRpmGrpRtpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmGrpRtpSrcPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpSrcPort.setDescription('Multicast group source port.')
wsRpmGrpRtpDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmGrpRtpDestPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpDestPort.setDescription('Multicast group destination port.')
wsRpmGrpRtpBps = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpBps.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpBps.setDescription('Number of bytes per second received from the multicast group.')
wsRpmGrpRtpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpAge.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpAge.setDescription('Duration of time since last seen data of the rtp flow.')
wsRpmGrpRtpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpBytes.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpBytes.setDescription('Number of bytes received from multicast group.')
wsRpmGrpRtpUnknownVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpUnknownVersion.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpUnknownVersion.setDescription("Number of occurrences of RTP's version that differs 2.")
wsRpmGrpRtpIpFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpIpFragments.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpIpFragments.setDescription('Number of RTP packets carried by fragmented IP packets.')
wsRpmGrpRtpSeqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpSeqErrors.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpSeqErrors.setDescription('Number of RTP packets that have unexpected sequence number,\n\t indicating RTP packet loss happened.')
wsRpmGrpRtpJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpJitter.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpJitter.setDescription("Jitter calculated using RTP packets' timestamps.")
wsRpmGrpRtpErrSum = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpErrSum.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpErrSum.setDescription('Error sum (wsRpmGrpRtpUnknownVersion + wsRpmGrpRtpIpFragments\n        + wsRpmGrpRtpSeqErrors).')
wsRpmGrpRtpPeriodSeqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpPeriodSeqErrors.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpPeriodSeqErrors.setDescription('Number of RTP packets that have unexpected sequence number in current\n\t detecting period(configged by wsRpmRtpSeqErrPeriod), indicating RTP\n\t packet loss happened in current detecting period.')
wsRpmGrpRtpPeriodMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpPeriodMaxJitter.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpPeriodMaxJitter.setDescription("Max Jitter(in micro seconds) calculated using RTP packets' timestamps\n\t in current detecting period(configged by wsRpmRtpJitterPeriod),\n\t indicating max RTP packet jitter in current detecting period.")
wsRpmGrpRtpMdiTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 2), )
if mibBuilder.loadTexts: wsRpmGrpRtpMdiTable.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpMdiTable.setDescription('Table contains RFC 4445 metrics for IPTV QoS.')
wsRpmGrpRtpMdiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 2, 1), ).setIndexNames((0, "WAYSTREAM-RPM-MIB", "wsRpmGrpRtpMdiSrcAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmGrpRtpMdiDestAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmGrpRtpMdiSrcPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmGrpRtpMdiDestPort"))
if mibBuilder.loadTexts: wsRpmGrpRtpMdiEntry.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpMdiEntry.setDescription('Entry in wsRpmGrpRtpMdiTable.')
wsRpmGrpRtpMdiSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: wsRpmGrpRtpMdiSrcAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpMdiSrcAddr.setDescription('Multicast group source address.')
wsRpmGrpRtpMdiDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: wsRpmGrpRtpMdiDestAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpMdiDestAddr.setDescription('Multicast group destination address.')
wsRpmGrpRtpMdiSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmGrpRtpMdiSrcPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpMdiSrcPort.setDescription('Multicast group source port.')
wsRpmGrpRtpMdiDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmGrpRtpMdiDestPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpMdiDestPort.setDescription('Multicast group destination port.')
wsRpmGrpRtpMdiDLFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpMdiDLFactor.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpMdiDLFactor.setDescription('The delay factor indicates how long (miliseconds) an IP data\n \t flow must be buffered at its nominal bit rate to prevent \n\t packet loss.')
wsRpmGrpRtpMdiMLRFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpMdiMLRFactor.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpMdiMLRFactor.setDescription('The Media Loss Rate factor indicates the rate of packet loss\n\t in seconds, including disordered packets and duplicated packets.')
wsRpmGrpRtpMdiDFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpMdiDFThreshold.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpMdiDFThreshold.setDescription('The threshold for Delay factor in miliseconds.')
wsRpmGrpRtpMdiMLRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpMdiMLRThreshold.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpMdiMLRThreshold.setDescription('The threshold for Media Loss Rate factor in packets/second.')
wsRpmGrpRtpMdiDFErrorIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpMdiDFErrorIntervals.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpMdiDFErrorIntervals.setDescription('The number of times that Delay factor value is greater than\n\t the Delay factor threshold.')
wsRpmGrpRtpMdiMLRErrorIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 2, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmGrpRtpMdiMLRErrorIntervals.setStatus('current')
if mibBuilder.loadTexts: wsRpmGrpRtpMdiMLRErrorIntervals.setDescription('The number of times that the Media Loss Rate value is greater\n\t than the Media Loss Rate threshold.')
wsRpmTS = ObjectIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3))
if mibBuilder.loadTexts: wsRpmTS.setStatus('current')
if mibBuilder.loadTexts: wsRpmTS.setDescription('Rpm transport stream groups.')
wsRpmTSMpeg = ObjectIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1))
if mibBuilder.loadTexts: wsRpmTSMpeg.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpeg.setDescription('Rpm MPEG transport stream groups.')
wsRpmTSMpegTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1), )
if mibBuilder.loadTexts: wsRpmTSMpegTable.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegTable.setDescription('Table containing an entry for each multicast group\n\tthat is\tmeasured by RPM.')
wsRpmTSMpegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1), ).setIndexNames((0, "WAYSTREAM-RPM-MIB", "wsRpmTSMpegSrcAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmTSMpegDestAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmTSMpegSrcPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmTSMpegDestPort"))
if mibBuilder.loadTexts: wsRpmTSMpegEntry.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegEntry.setDescription('Entry in wsRpmTSMpegTable.')
wsRpmTSMpegSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: wsRpmTSMpegSrcAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegSrcAddr.setDescription('Multicast group source address.')
wsRpmTSMpegDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: wsRpmTSMpegDestAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegDestAddr.setDescription('Multicast group destination address.')
wsRpmTSMpegSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmTSMpegSrcPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegSrcPort.setDescription('Multicast group source port.')
wsRpmTSMpegDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmTSMpegDestPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegDestPort.setDescription('Multicast group destination port.')
wsRpmTSMpegBps = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmTSMpegBps.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegBps.setDescription('Number of bytes per second received from the multicast group.')
wsRpmTSMpegAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmTSMpegAge.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegAge.setDescription('Duration of time since last seen data of MPEG transport stream.')
wsRpmTSMpegBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmTSMpegBytes.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegBytes.setDescription('Number of bytes received from multicast group.')
wsRpmTSMpegMissingSync = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmTSMpegMissingSync.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegMissingSync.setDescription('Number of MPEG TS packets that have sync byte differed than 0x47.')
wsRpmTSMpegIpFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmTSMpegIpFragments.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegIpFragments.setDescription('Number of fragmented IP packets that carries MPEG transport\n\t stream packet.')
wsRpmTSMpegMisalignments = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmTSMpegMisalignments.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegMisalignments.setDescription('Each IP packet should carry 7 MPEG TS packets. If not, the counter \n\t will be incremented.')
wsRpmTSMpegFlowAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmTSMpegFlowAge.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegFlowAge.setDescription('The duration since the RPM entries for an IPTV group have \n\t been created.')
wsRpmTSMpegIngressIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmTSMpegIngressIf.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegIngressIf.setDescription('The interface on which this transport stream ingressed.')
wsRpmTSMpegErrSum = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmTSMpegErrSum.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegErrSum.setDescription('Error sum (wsRpmTSMpegMissingSync + wsRpmTSMpegIpFragments\n        + wsRpmTSMpegMisalignments).')
wsRpmTSMpegPeriodMissingSync = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmTSMpegPeriodMissingSync.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegPeriodMissingSync.setDescription('Number of MPEG TS packets that have sync byte differed than 0x47 in\n\t current detecting period(configged by wsRpmTSMpegMissSyncPeriod),\n\t indicating MPEG TS packet missing syncronization happened in current\n\t detecting period.')
wsRpmTSMpegPeriodMisalignments = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 3, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmTSMpegPeriodMisalignments.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegPeriodMisalignments.setDescription('Number of MPEG TS packets that mis-aligned in current detecting period\n\t (configged by wsRpmTSMpegMisalignPeriod), indicating MPEG TS packets\n\t having alignment error happened in current detecting period.')
wsRpmES = ObjectIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4))
if mibBuilder.loadTexts: wsRpmES.setStatus('current')
if mibBuilder.loadTexts: wsRpmES.setDescription('Groups for elementary streams.')
wsRpmESPat = ObjectIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1))
if mibBuilder.loadTexts: wsRpmESPat.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPat.setDescription('Group of PAT sections.')
wsRpmESPatTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 1), )
if mibBuilder.loadTexts: wsRpmESPatTable.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatTable.setDescription("The table contains PAT section's statistics for every IPTV group.")
wsRpmESPatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 1, 1), ).setIndexNames((0, "WAYSTREAM-RPM-MIB", "wsRpmESPatSrcAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESPatDestAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESPatSrcPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESPatDestPort"))
if mibBuilder.loadTexts: wsRpmESPatEntry.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatEntry.setDescription("Entries for each PAT section's statistics.")
wsRpmESPatSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: wsRpmESPatSrcAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatSrcAddr.setDescription('Source IP address of a IPTV multicast group.')
wsRpmESPatDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: wsRpmESPatDestAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatDestAddr.setDescription('Destination IP address of a IPTV multicast group.')
wsRpmESPatSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmESPatSrcPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatSrcPort.setDescription('Source port of a IPTV multicast group.')
wsRpmESPatDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmESPatDestPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatDestPort.setDescription('Destination port of a IPTV multicast group.')
wsRpmESPatBps = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPatBps.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatBps.setDescription('The transport rate in bits/second of a PAT section.')
wsRpmESPatAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPatAge.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatAge.setDescription('The duration of time since last seen data of PAT section.')
wsRpmESPatBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPatBytes.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatBytes.setDescription('Number of bytes of PAT section has been received.')
wsRpmESPatInterCcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPatInterCcErr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatInterCcErr.setDescription('The number of discontinuities of continuity_counter field for a\n\t particular PAT elementary stream, which is happened between two\n \t different IP packets.')
wsRpmESPatIntraCcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPatIntraCcErr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatIntraCcErr.setDescription('The number of discontinuities of continuity_counter field for a\n\t particular PAT elementary stream, which is happened within one\n \t IP packet.')
wsRpmESPatCcErrSum = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPatCcErrSum.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatCcErrSum.setDescription('Error sum (wsRpmESPatInterCcErr + wsRpmESPatIntraCcErr).')
wsRpmESPatTr290Table = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 2), )
if mibBuilder.loadTexts: wsRpmESPatTr290Table.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatTr290Table.setDescription('Table contains other Qos metrics for PAT defined by the Tr 290.')
wsRpmESPatTr290Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 2, 1), ).setIndexNames((0, "WAYSTREAM-RPM-MIB", "wsRpmESPatTr290SrcAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESPatTr290DestAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESPatTr290SrcPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESPatTr290DestPort"))
if mibBuilder.loadTexts: wsRpmESPatTr290Entry.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatTr290Entry.setDescription('Entries for other Qos metrics for PAT defined by the Tr 290.')
wsRpmESPatTr290SrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: wsRpmESPatTr290SrcAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatTr290SrcAddr.setDescription('Source IP address of a IPTV multicast group.')
wsRpmESPatTr290DestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: wsRpmESPatTr290DestAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatTr290DestAddr.setDescription('Destination IP address of a IPTV multicast group.')
wsRpmESPatTr290SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmESPatTr290SrcPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatTr290SrcPort.setDescription('Source port of a IPTV multicast group.')
wsRpmESPatTr290DestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmESPatTr290DestPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatTr290DestPort.setDescription('Destination port of a IPTV multicast group.')
wsRpmESPatTr290PatErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPatTr290PatErr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatTr290PatErr.setDescription('The number of occurrences of sections with table_id 0x00 do not \n\t occur at least every 0,5 second on PID 0x0000, or section with \n\t table_id other than 0x00 found on PID 0x0000, or\n\t scrambling_control_field is not 00 for PID 0x0000.')
wsRpmESPatTr290CrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPatTr290CrcErr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPatTr290CrcErr.setDescription('The CRC check for the PAT indicates whether the content of the\n\t corresponding table is corrupted. In this case no further error\n\t indication should be derived from the content of the \n\t corresponding table.')
wsRpmESPmt = ObjectIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2))
if mibBuilder.loadTexts: wsRpmESPmt.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmt.setDescription('Group of PMT sections.')
wsRpmESPmtTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 1), )
if mibBuilder.loadTexts: wsRpmESPmtTable.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtTable.setDescription("The table contains PMT section's statistics for every IPTV group.")
wsRpmESPmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 1, 1), ).setIndexNames((0, "WAYSTREAM-RPM-MIB", "wsRpmESPmtSrcAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESPmtDestAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESPmtSrcPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESPmtDestPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESPmtPid"))
if mibBuilder.loadTexts: wsRpmESPmtEntry.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtEntry.setDescription("Entries for each PAT section's statistics.")
wsRpmESPmtSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: wsRpmESPmtSrcAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtSrcAddr.setDescription('Source IP address of a IPTV multicast group.')
wsRpmESPmtDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: wsRpmESPmtDestAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtDestAddr.setDescription('Destination IP address of a IPTV multicast group.')
wsRpmESPmtSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmESPmtSrcPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtSrcPort.setDescription('Source port of a IPTV multicast group.')
wsRpmESPmtDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmESPmtDestPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtDestPort.setDescription('Destination port of a IPTV multicast group.')
wsRpmESPmtPid = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191)))
if mibBuilder.loadTexts: wsRpmESPmtPid.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtPid.setDescription("PID number of the PMT section's elementary stream.")
wsRpmESPmtBps = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPmtBps.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtBps.setDescription('The transport rate in bits/second of a PMT section.')
wsRpmESPmtAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPmtAge.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtAge.setDescription('The duration of time since last seen data of PMT section.')
wsRpmESPmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPmtBytes.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtBytes.setDescription('Number of bytes of PMT section has been received.')
wsRpmESPmtInterCcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPmtInterCcErr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtInterCcErr.setDescription('The number of discontinuities of continuity_counter field for a\n\t particular PMT elementary stream, which is happened between two\n \t different IP packets.')
wsRpmESPmtIntraCcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPmtIntraCcErr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtIntraCcErr.setDescription('The number of discontinuities of continuity_counter field for a\n\t particular PMT elementary stream, which is happened within one\n \t IP packet.')
wsRpmESPmtCcErrSum = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPmtCcErrSum.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtCcErrSum.setDescription('Error sum (wsRpmESPmtInterCcErr + wsRpmESPmtIntraCcErr).')
wsRpmESPmtTr290Table = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 2), )
if mibBuilder.loadTexts: wsRpmESPmtTr290Table.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtTr290Table.setDescription('Table contains other Qos metrics for PMT defined by the Tr 290.')
wsRpmESPmtTr290Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 2, 1), ).setIndexNames((0, "WAYSTREAM-RPM-MIB", "wsRpmESPmtTr290SrcAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESPmtTr290DestAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESPmtTr290SrcPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESPmtTr290DestPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESPmtTr290Pid"))
if mibBuilder.loadTexts: wsRpmESPmtTr290Entry.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtTr290Entry.setDescription('Entries for other Qos metrics for PMT defined by the Tr 290.')
wsRpmESPmtTr290SrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: wsRpmESPmtTr290SrcAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtTr290SrcAddr.setDescription('Source IP address of a IPTV multicast group.')
wsRpmESPmtTr290DestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: wsRpmESPmtTr290DestAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtTr290DestAddr.setDescription('Destination IP address of a IPTV multicast group.')
wsRpmESPmtTr290SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmESPmtTr290SrcPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtTr290SrcPort.setDescription('Source port of a IPTV multicast group.')
wsRpmESPmtTr290DestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmESPmtTr290DestPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtTr290DestPort.setDescription('Destination port of a IPTV multicast group.')
wsRpmESPmtTr290Pid = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191)))
if mibBuilder.loadTexts: wsRpmESPmtTr290Pid.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtTr290Pid.setDescription("PID number for PMT section's elementary stream.")
wsRpmESPmtTr290PmtErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPmtTr290PmtErr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtTr290PmtErr.setDescription('The number of occurrences of PMT sections with table_id 0x00 do not \n\t occur at least every 0,5 second on PID 0x0000, or section with \n\t table_id other than 0x00 found on PID 0x0000, or\n\t scrambling_control_field is not 00 for PID 0x0000.')
wsRpmESPmtTr290CrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESPmtTr290CrcErr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESPmtTr290CrcErr.setDescription('The CRC check for the PMT indicates whether the content of the\n\t corresponding table is corrupted. In this case no further error\n\t indication should be derived from the content of the \n\t corresponding table.')
wsRpmESVideo = ObjectIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3))
if mibBuilder.loadTexts: wsRpmESVideo.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideo.setDescription('Groups for video elementary streams for all RPM multicast groups.')
wsRpmESVideoTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 1), )
if mibBuilder.loadTexts: wsRpmESVideoTable.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoTable.setDescription('Table contains Qos metrics for all video elementary streams.')
wsRpmESVideoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 1, 1), ).setIndexNames((0, "WAYSTREAM-RPM-MIB", "wsRpmESVideoSrcAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESVideoDestAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESVideoSrcPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESVideoDestPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESVideoPid"))
if mibBuilder.loadTexts: wsRpmESVideoEntry.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoEntry.setDescription('Entries for all video elementary streams.')
wsRpmESVideoSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: wsRpmESVideoSrcAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoSrcAddr.setDescription('Source IP address of a IPTV multicast group.')
wsRpmESVideoDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: wsRpmESVideoDestAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoDestAddr.setDescription('Destination IP address of a IPTV multicast group.')
wsRpmESVideoSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmESVideoSrcPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoSrcPort.setDescription('Source port of a IPTV multicast group.')
wsRpmESVideoDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmESVideoDestPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoDestPort.setDescription('Destination port of a IPTV multicast group.')
wsRpmESVideoPid = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191)))
if mibBuilder.loadTexts: wsRpmESVideoPid.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPid.setDescription('PID number of a video elementary stream.')
wsRpmESVideoBps = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoBps.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoBps.setDescription('Tranport rate in bytes per second of a video elementary stream.')
wsRpmESVideoAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoAge.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoAge.setDescription('Duration of time since last seen data of a video elementary stream.')
wsRpmESVideoBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoBytes.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoBytes.setDescription('The number of bytes of a video elementary stream that has been \n\t received.')
wsRpmESVideoInterCcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoInterCcErr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoInterCcErr.setDescription('The number of discontinuities of continuity_counter field for a\n\t particular video elementary stream, which is happened between two\n \t different IP packets.')
wsRpmESVideoIntraCcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoIntraCcErr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoIntraCcErr.setDescription('The number of discontinuities of continuity_counter field for a\n\t particular video elementary stream, which is happened within a \n \t single IP packet.')
wsRpmESVideoPCRJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoPCRJitter.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPCRJitter.setDescription('The jitter calculated using the PCR timestamp built in a video \n\t elementary stream.')
wsRpmESVideoCcErrSum = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoCcErrSum.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoCcErrSum.setDescription('Error sum (wsRpmESVideoInterCcErr + wsRpmESVideoIntraCcErr).')
wsRpmESVideoPicTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2), )
if mibBuilder.loadTexts: wsRpmESVideoPicTable.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicTable.setDescription('The tables contains other Qos metrics for video pictures.')
wsRpmESVideoPicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1), ).setIndexNames((0, "WAYSTREAM-RPM-MIB", "wsRpmESVideoPicSrcAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESVideoPicDestAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESVideoPicSrcPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESVideoPicDestPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESVideoPicPid"))
if mibBuilder.loadTexts: wsRpmESVideoPicEntry.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicEntry.setDescription('Entries for Qos metrics for video pictures.')
wsRpmESVideoPicSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: wsRpmESVideoPicSrcAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicSrcAddr.setDescription('Source IP address of a IPTV multicast group.')
wsRpmESVideoPicDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: wsRpmESVideoPicDestAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicDestAddr.setDescription('Destination IP address of a IPTV multicast group.')
wsRpmESVideoPicSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmESVideoPicSrcPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicSrcPort.setDescription('Source port of a IPTV multicast group.')
wsRpmESVideoPicDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmESVideoPicDestPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicDestPort.setDescription('Destination port of a IPTV multicast group.')
wsRpmESVideoPicPid = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191)))
if mibBuilder.loadTexts: wsRpmESVideoPicPid.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicPid.setDescription('PID number of the video elementary stream.')
wsRpmESVideoPicTsLossInIframe = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoPicTsLossInIframe.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicTsLossInIframe.setDescription('Number of times that transport stream packet losses happened in \n\t I-frames.')
wsRpmESVideoPicImpairedIframe = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoPicImpairedIframe.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicImpairedIframe.setDescription('Number of I-frames that have transport stream packet losses.')
wsRpmESVideoPicGoodIframe = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoPicGoodIframe.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicGoodIframe.setDescription("Number of I-frames that don't have any loss.")
wsRpmESVideoPicTsLossInPframe = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoPicTsLossInPframe.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicTsLossInPframe.setDescription('Number of times that transport stream packet losses happened in \n\t P-frames.')
wsRpmESVideoPicImpairedPframe = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoPicImpairedPframe.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicImpairedPframe.setDescription('Number of P-frames that have transport stream packet losses.')
wsRpmESVideoPicGoodPframe = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoPicGoodPframe.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicGoodPframe.setDescription("Number of P-frames that don't have any transport stream packet loss.")
wsRpmESVideoPicTsLossInBframe = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoPicTsLossInBframe.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicTsLossInBframe.setDescription('Number of times that transport stream packet losses happened in \n\t B-frames.')
wsRpmESVideoPicImpairedBframe = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoPicImpairedBframe.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicImpairedBframe.setDescription('Number of B-frames that have transport stream packet losses.')
wsRpmESVideoPicGoodBframe = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESVideoPicGoodBframe.setStatus('current')
if mibBuilder.loadTexts: wsRpmESVideoPicGoodBframe.setDescription("Number of B-frames that don't have any transport stream packet loss.")
wsRpmESAudio = ObjectIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 4))
if mibBuilder.loadTexts: wsRpmESAudio.setStatus('current')
if mibBuilder.loadTexts: wsRpmESAudio.setDescription('Groups for audio elementary streams for all RPM multicast groups.')
wsRpmESAudioTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 4, 1), )
if mibBuilder.loadTexts: wsRpmESAudioTable.setStatus('current')
if mibBuilder.loadTexts: wsRpmESAudioTable.setDescription('Table containing QoS metrics for all audio elementary streams.')
wsRpmESAudioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 4, 1, 1), ).setIndexNames((0, "WAYSTREAM-RPM-MIB", "wsRpmESAudioSrcAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESAudioDestAddr"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESAudioSrcPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESAudioDestPort"), (0, "WAYSTREAM-RPM-MIB", "wsRpmESAudioPid"))
if mibBuilder.loadTexts: wsRpmESAudioEntry.setStatus('current')
if mibBuilder.loadTexts: wsRpmESAudioEntry.setDescription('Entries for all audio elementary streams.')
wsRpmESAudioSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 4, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: wsRpmESAudioSrcAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESAudioSrcAddr.setDescription('Source IP address of an IPTV audio multicast group.')
wsRpmESAudioDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 4, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: wsRpmESAudioDestAddr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESAudioDestAddr.setDescription('Destination IP address of an IPTV audio multicast group.')
wsRpmESAudioSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 4, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmESAudioSrcPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmESAudioSrcPort.setDescription('Source port of an IPTV audio multicast group.')
wsRpmESAudioDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 4, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: wsRpmESAudioDestPort.setStatus('current')
if mibBuilder.loadTexts: wsRpmESAudioDestPort.setDescription('Destination port of an IPTV audio multicast group.')
wsRpmESAudioPid = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 4, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191)))
if mibBuilder.loadTexts: wsRpmESAudioPid.setStatus('current')
if mibBuilder.loadTexts: wsRpmESAudioPid.setDescription('PID number of the audio elementary stream.')
wsRpmESAudioBps = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESAudioBps.setStatus('current')
if mibBuilder.loadTexts: wsRpmESAudioBps.setDescription('Tranport rate in bytes per second of an audio elementary stream.')
wsRpmESAudioAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 4, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESAudioAge.setStatus('current')
if mibBuilder.loadTexts: wsRpmESAudioAge.setDescription('Elapsed time since last occurence of data from this audio elementary stream.')
wsRpmESAudioBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESAudioBytes.setStatus('current')
if mibBuilder.loadTexts: wsRpmESAudioBytes.setDescription('The amount of data in bytes of this audio elementary stream that have been received.')
wsRpmESAudioInterCcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESAudioInterCcErr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESAudioInterCcErr.setDescription('The number of discontinuities in the continuity_counter field for this\n\t audio elementary stream, which has occurred between two subsequent IP packets.')
wsRpmESAudioIntraCcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESAudioIntraCcErr.setStatus('current')
if mibBuilder.loadTexts: wsRpmESAudioIntraCcErr.setDescription('The number of discontinuities in the continuity_counter field for this\n\t audio elementary stream, which has occurred within a single IP packet.')
wsRpmESAudioCcErrSum = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 14, 4, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsRpmESAudioCcErrSum.setStatus('current')
if mibBuilder.loadTexts: wsRpmESAudioCcErrSum.setDescription('Error sum (wsRpmESAudioInterCcErr + wsRpmESAudioIntraCcErr).')
wsRpmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 14, 5))
wsRpmTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 14, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsRpmTrapEnable.setStatus('current')
if mibBuilder.loadTexts: wsRpmTrapEnable.setDescription('Provides control over if send rpm related traps, by default it is\n\t disabled.')
wsRpmLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 14, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsRpmLogEnable.setStatus('current')
if mibBuilder.loadTexts: wsRpmLogEnable.setDescription('Provides control over if send rpm related log, by default it is\n\t disabled.')
wsRpmThresholdConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 14, 5, 3))
wsRpmRtpSeqErrThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 14, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsRpmRtpSeqErrThreshold.setStatus('current')
if mibBuilder.loadTexts: wsRpmRtpSeqErrThreshold.setDescription('RTP sequence error packet event threshold(in packets).')
wsRpmRtpJitterThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 14, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsRpmRtpJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: wsRpmRtpJitterThreshold.setDescription('RTP packet jitter threshold (in micro seconds).')
wsRpmTSMpegMissSyncThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 14, 5, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsRpmTSMpegMissSyncThreshold.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegMissSyncThreshold.setDescription('Transport stream missing-sync packet event threshold (in packets).')
wsRpmTSMpegMisalignThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 14, 5, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsRpmTSMpegMisalignThreshold.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegMisalignThreshold.setDescription('Transport stream misalign packet event threshold (in packets).')
wsRpmPeriodConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 14, 5, 4))
wsRpmRtpSeqErrPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 14, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsRpmRtpSeqErrPeriod.setStatus('current')
if mibBuilder.loadTexts: wsRpmRtpSeqErrPeriod.setDescription('RTP sequence error packet event detect period(in seconds), set a\n\t     value of 0 will stop sequence error event detection.')
wsRpmRtpJitterPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 14, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsRpmRtpJitterPeriod.setStatus('current')
if mibBuilder.loadTexts: wsRpmRtpJitterPeriod.setDescription('RTP packet jitter event detect period(in seconds), set a value of 0\n\t     will stop packet jitter event detection.')
wsRpmTSMpegMissSyncPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 14, 5, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsRpmTSMpegMissSyncPeriod.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegMissSyncPeriod.setDescription('Transport stream missing-sync packet event detect period (in\n\t     seconds), set a value of 0 will stop missing-sync packet event\n\t     detection.')
wsRpmTSMpegMisalignPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 14, 5, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsRpmTSMpegMisalignPeriod.setStatus('current')
if mibBuilder.loadTexts: wsRpmTSMpegMisalignPeriod.setDescription('Transport stream misalign packet event detect period (in seconds),\n\t     set a value of 0 will stop misalign packet event detection.')
wsRpmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 14, 0))
notifyWsRpmRtpSeqError = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 14, 0, 1)).setObjects(("WAYSTREAM-RPM-MIB", "wsRpmGrpRtpPeriodSeqErrors"), ("WAYSTREAM-RPM-MIB", "wsRpmRtpSeqErrThreshold"), ("WAYSTREAM-RPM-MIB", "wsRpmRtpSeqErrPeriod"))
if mibBuilder.loadTexts: notifyWsRpmRtpSeqError.setStatus('current')
if mibBuilder.loadTexts: notifyWsRpmRtpSeqError.setDescription('RTP packet sequence error trap, which is sent when RTP packet\n\t\t drops of a specific group reaches wsRpmRtpSeqErrThreshold in\n\t\t period wsRpmRtpSeqErrPeriod.')
notifyWsRpmRtpJitter = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 14, 0, 2)).setObjects(("WAYSTREAM-RPM-MIB", "wsRpmGrpRtpPeriodMaxJitter"), ("WAYSTREAM-RPM-MIB", "wsRpmRtpJitterThreshold"), ("WAYSTREAM-RPM-MIB", "wsRpmRtpJitterPeriod"))
if mibBuilder.loadTexts: notifyWsRpmRtpJitter.setStatus('current')
if mibBuilder.loadTexts: notifyWsRpmRtpJitter.setDescription('RTP packet jitter trap, which is sent when max packet jitter of\n\t\t a specific multicast group reaches wsRpmRtpJitterThreshold in\n                 period wsRpmRtpJitterPeriod.')
notifyWsRpmTSMpegMissSync = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 14, 0, 3)).setObjects(("WAYSTREAM-RPM-MIB", "wsRpmTSMpegPeriodMissingSync"), ("WAYSTREAM-RPM-MIB", "wsRpmTSMpegMissSyncThreshold"), ("WAYSTREAM-RPM-MIB", "wsRpmTSMpegMissSyncPeriod"))
if mibBuilder.loadTexts: notifyWsRpmTSMpegMissSync.setStatus('current')
if mibBuilder.loadTexts: notifyWsRpmTSMpegMissSync.setDescription('Transport stream missing-sync trap, which is sent when the\n                 numbers of missing-sync packet of a specific multicast group\n                 reaches wsRpmTSMpegMissSyncThreshold in period\n                 wsRpmTSMpegMissSyncPeriod.')
notifyWsRpmTSMpegMisalign = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 14, 0, 4)).setObjects(("WAYSTREAM-RPM-MIB", "wsRpmTSMpegPeriodMisalignments"), ("WAYSTREAM-RPM-MIB", "wsRpmTSMpegMisalignThreshold"), ("WAYSTREAM-RPM-MIB", "wsRpmTSMpegMisalignPeriod"))
if mibBuilder.loadTexts: notifyWsRpmTSMpegMisalign.setStatus('current')
if mibBuilder.loadTexts: notifyWsRpmTSMpegMisalign.setDescription('Transport stream misalign trap, which is sent when the numbers\n                 of misalign packet of a specific multicast group reaches\n                 wsRpmTSMpegMisalignThreshold in period wsRpmTSMpegMisalignPeriod.')
mibBuilder.exportSymbols("WAYSTREAM-RPM-MIB", wsRpmESAudioIntraCcErr=wsRpmESAudioIntraCcErr, wsRpmESPatTr290Table=wsRpmESPatTr290Table, wsRpmGrpRtpDestAddr=wsRpmGrpRtpDestAddr, wsRpmTS=wsRpmTS, wsRpmESPmtTr290PmtErr=wsRpmESPmtTr290PmtErr, wsRpmESVideoAge=wsRpmESVideoAge, wsRpmESPatTr290Entry=wsRpmESPatTr290Entry, wsRpmESVideoPicImpairedBframe=wsRpmESVideoPicImpairedBframe, wsRpmGrpRtpSrcPort=wsRpmGrpRtpSrcPort, wsRpmESPatTable=wsRpmESPatTable, wsRpmESPatTr290SrcPort=wsRpmESPatTr290SrcPort, wsRpmESVideoIntraCcErr=wsRpmESVideoIntraCcErr, wsRpmESAudioInterCcErr=wsRpmESAudioInterCcErr, wsRpmESPmtCcErrSum=wsRpmESPmtCcErrSum, wsRpmGrpRtpUnknownVersion=wsRpmGrpRtpUnknownVersion, wsRpmRtpJitterThreshold=wsRpmRtpJitterThreshold, wsRpmESPatEntry=wsRpmESPatEntry, wsRpmESAudioPid=wsRpmESAudioPid, wsRpmTSMpegMissSyncThreshold=wsRpmTSMpegMissSyncThreshold, wsRpmTSMpegPeriodMissingSync=wsRpmTSMpegPeriodMissingSync, wsRpmESPatCcErrSum=wsRpmESPatCcErrSum, wsRpmESAudioCcErrSum=wsRpmESAudioCcErrSum, wsRpmRtpSeqErrPeriod=wsRpmRtpSeqErrPeriod, wsRpmGrpRtpMdiTable=wsRpmGrpRtpMdiTable, wsRpmGrpRtpMdiDLFactor=wsRpmGrpRtpMdiDLFactor, notifyWsRpmTSMpegMisalign=notifyWsRpmTSMpegMisalign, wsRpmESPatTr290DestPort=wsRpmESPatTr290DestPort, wsRpmTSMpegErrSum=wsRpmTSMpegErrSum, wsRpmESPmtTr290DestAddr=wsRpmESPmtTr290DestAddr, wsRpmTSMpegPeriodMisalignments=wsRpmTSMpegPeriodMisalignments, wsRpmESVideoBytes=wsRpmESVideoBytes, wsRpmTSMpegSrcPort=wsRpmTSMpegSrcPort, wsRpmESPmtTable=wsRpmESPmtTable, wsRpmESVideoPicGoodBframe=wsRpmESVideoPicGoodBframe, wsRpmESPmtSrcAddr=wsRpmESPmtSrcAddr, wsRpmGrpRtpBps=wsRpmGrpRtpBps, wsRpmESAudioDestPort=wsRpmESAudioDestPort, wsRpmESPmtTr290CrcErr=wsRpmESPmtTr290CrcErr, wsRpmESPatTr290CrcErr=wsRpmESPatTr290CrcErr, wsRpmESVideoPicPid=wsRpmESVideoPicPid, wsRpmESVideoPicImpairedPframe=wsRpmESVideoPicImpairedPframe, wsRpmGrpRtpTable=wsRpmGrpRtpTable, wsRpmGrpRtpMdiDestAddr=wsRpmGrpRtpMdiDestAddr, wsRpmESPatBytes=wsRpmESPatBytes, wsRpmRtpSeqErrThreshold=wsRpmRtpSeqErrThreshold, wsRpmESPatSrcAddr=wsRpmESPatSrcAddr, wsRpmESAudioBytes=wsRpmESAudioBytes, wsRpmESPatDestAddr=wsRpmESPatDestAddr, wsRpmGrpRtpMdiDestPort=wsRpmGrpRtpMdiDestPort, wsRpmTSMpegMisalignments=wsRpmTSMpegMisalignments, wsRpmGrpRtpDestPort=wsRpmGrpRtpDestPort, wsRpmESPmtTr290SrcPort=wsRpmESPmtTr290SrcPort, wsRpmTSMpegMissSyncPeriod=wsRpmTSMpegMissSyncPeriod, wsRpmESPatIntraCcErr=wsRpmESPatIntraCcErr, wsRpmESVideoPicImpairedIframe=wsRpmESVideoPicImpairedIframe, wsRpmTSMpegBytes=wsRpmTSMpegBytes, wsRpmESAudioBps=wsRpmESAudioBps, wsRpmGrpRtp=wsRpmGrpRtp, wsRpmTSMpegIngressIf=wsRpmTSMpegIngressIf, wsRpmESVideoBps=wsRpmESVideoBps, wsRpmGrpRtpPeriodMaxJitter=wsRpmGrpRtpPeriodMaxJitter, wsRpmESVideoPicEntry=wsRpmESVideoPicEntry, wsRpmESPatTr290PatErr=wsRpmESPatTr290PatErr, wsRpmESVideoPCRJitter=wsRpmESVideoPCRJitter, wsRpm=wsRpm, wsRpmGrp=wsRpmGrp, wsRpmGrpRtpMdiSrcAddr=wsRpmGrpRtpMdiSrcAddr, wsRpmESPmtBps=wsRpmESPmtBps, wsRpmESAudioTable=wsRpmESAudioTable, wsRpmGrpRtpMdiMLRErrorIntervals=wsRpmGrpRtpMdiMLRErrorIntervals, wsRpmESPmtDestPort=wsRpmESPmtDestPort, wsRpmGrpRtpMdiSrcPort=wsRpmGrpRtpMdiSrcPort, wsRpmESPmtTr290SrcAddr=wsRpmESPmtTr290SrcAddr, wsRpmESVideoPicGoodIframe=wsRpmESVideoPicGoodIframe, wsRpmESPat=wsRpmESPat, wsRpmGrpRtpErrSum=wsRpmGrpRtpErrSum, wsRpmESVideoInterCcErr=wsRpmESVideoInterCcErr, wsRpmESPatTr290SrcAddr=wsRpmESPatTr290SrcAddr, wsRpmESVideoTable=wsRpmESVideoTable, wsRpmESPatAge=wsRpmESPatAge, wsRpmGrpRtpJitter=wsRpmGrpRtpJitter, wsRpmTSMpegMisalignPeriod=wsRpmTSMpegMisalignPeriod, wsRpmESPmtTr290DestPort=wsRpmESPmtTr290DestPort, wsRpmESVideoPicDestPort=wsRpmESVideoPicDestPort, wsRpmESPmtSrcPort=wsRpmESPmtSrcPort, wsRpmTSMpegDestPort=wsRpmTSMpegDestPort, wsRpmESPmtTr290Pid=wsRpmESPmtTr290Pid, wsRpmGrpRtpPeriodSeqErrors=wsRpmGrpRtpPeriodSeqErrors, wsRpmTSMpegEntry=wsRpmTSMpegEntry, wsRpmESPatTr290DestAddr=wsRpmESPatTr290DestAddr, wsRpmESVideoSrcAddr=wsRpmESVideoSrcAddr, wsRpmESPmtDestAddr=wsRpmESPmtDestAddr, wsRpmESVideoPicGoodPframe=wsRpmESVideoPicGoodPframe, wsRpmESAudioSrcAddr=wsRpmESAudioSrcAddr, wsRpmGrpRtpSrcAddr=wsRpmGrpRtpSrcAddr, wsRpmGrpRtpAge=wsRpmGrpRtpAge, wsRpmESVideoPicTable=wsRpmESVideoPicTable, wsRpmESAudio=wsRpmESAudio, wsRpmESPatSrcPort=wsRpmESPatSrcPort, wsRpmGrpRtpMdiEntry=wsRpmGrpRtpMdiEntry, wsRpmGrpRtpSeqErrors=wsRpmGrpRtpSeqErrors, notifyWsRpmRtpSeqError=notifyWsRpmRtpSeqError, wsRpmNotifications=wsRpmNotifications, wsRpmESVideoPid=wsRpmESVideoPid, wsRpmESVideoPicSrcPort=wsRpmESVideoPicSrcPort, wsRpmGrpRtpMdiMLRFactor=wsRpmGrpRtpMdiMLRFactor, wsRpmESVideoDestAddr=wsRpmESVideoDestAddr, wsRpmESVideoDestPort=wsRpmESVideoDestPort, wsRpmESPmtTr290Entry=wsRpmESPmtTr290Entry, notifyWsRpmRtpJitter=notifyWsRpmRtpJitter, wsRpmESPatBps=wsRpmESPatBps, wsRpmESPmtIntraCcErr=wsRpmESPmtIntraCcErr, wsRpmESVideoPicTsLossInIframe=wsRpmESVideoPicTsLossInIframe, wsRpmConfig=wsRpmConfig, wsRpmGrpRtpEntry=wsRpmGrpRtpEntry, wsRpmESAudioAge=wsRpmESAudioAge, wsRpmTSMpegMissingSync=wsRpmTSMpegMissingSync, wsRpmESPatInterCcErr=wsRpmESPatInterCcErr, wsRpmTrapEnable=wsRpmTrapEnable, wsRpmESPmtEntry=wsRpmESPmtEntry, wsRpmESPatDestPort=wsRpmESPatDestPort, wsRpmESPmtPid=wsRpmESPmtPid, wsRpmGrpRtpMdiDFThreshold=wsRpmGrpRtpMdiDFThreshold, wsRpmLogEnable=wsRpmLogEnable, wsRpmESVideoPicTsLossInBframe=wsRpmESVideoPicTsLossInBframe, wsRpmTSMpegIpFragments=wsRpmTSMpegIpFragments, wsRpmTSMpeg=wsRpmTSMpeg, wsRpmES=wsRpmES, wsRpmESVideo=wsRpmESVideo, wsRpmESVideoPicDestAddr=wsRpmESVideoPicDestAddr, wsRpmTSMpegMisalignThreshold=wsRpmTSMpegMisalignThreshold, wsRpmESPmtBytes=wsRpmESPmtBytes, wsRpmESAudioEntry=wsRpmESAudioEntry, wsRpmESVideoSrcPort=wsRpmESVideoSrcPort, wsRpmGrpRtpMdiMLRThreshold=wsRpmGrpRtpMdiMLRThreshold, wsRpmThresholdConfig=wsRpmThresholdConfig, wsRpmRtpJitterPeriod=wsRpmRtpJitterPeriod, wsRpmESPmtTr290Table=wsRpmESPmtTr290Table, wsRpmESVideoPicTsLossInPframe=wsRpmESVideoPicTsLossInPframe, wsRpmESAudioDestAddr=wsRpmESAudioDestAddr, wsRpmESPmtAge=wsRpmESPmtAge, wsRpmTSMpegFlowAge=wsRpmTSMpegFlowAge, wsRpmGrpRtpIpFragments=wsRpmGrpRtpIpFragments, wsRpmGrpRtpMdiDFErrorIntervals=wsRpmGrpRtpMdiDFErrorIntervals, wsRpmTSMpegDestAddr=wsRpmTSMpegDestAddr, wsRpmESVideoCcErrSum=wsRpmESVideoCcErrSum, wsRpmTSMpegSrcAddr=wsRpmTSMpegSrcAddr, wsRpmESVideoPicSrcAddr=wsRpmESVideoPicSrcAddr, wsRpmESPmtInterCcErr=wsRpmESPmtInterCcErr, wsRpmPeriodConfig=wsRpmPeriodConfig, wsRpmTSMpegBps=wsRpmTSMpegBps, wsRpmTSMpegAge=wsRpmTSMpegAge, wsRpmESPmt=wsRpmESPmt, wsRpmTSMpegTable=wsRpmTSMpegTable, notifyWsRpmTSMpegMissSync=notifyWsRpmTSMpegMissSync, wsRpmGrpRtpBytes=wsRpmGrpRtpBytes, wsRpmESAudioSrcPort=wsRpmESAudioSrcPort, PYSNMP_MODULE_ID=wsRpm, wsRpmESVideoEntry=wsRpmESVideoEntry)
