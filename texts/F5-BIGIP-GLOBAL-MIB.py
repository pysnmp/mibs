#
# PySNMP MIB module F5-BIGIP-GLOBAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/f5/F5-BIGIP-GLOBAL-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 13:31:39 2024
# On host fv-az975-559 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
LongDisplayString, bigipTrafficMgmt, bigipCompliances, bigipGroups = mibBuilder.importSymbols("F5-BIGIP-COMMON-MIB", "LongDisplayString", "bigipTrafficMgmt", "bigipCompliances", "bigipGroups")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
enterprises, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, ModuleIdentity, Integer32, IpAddress, Opaque, TimeTicks, ObjectIdentity, NotificationType, Unsigned32, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "ModuleIdentity", "Integer32", "IpAddress", "Opaque", "TimeTicks", "ObjectIdentity", "NotificationType", "Unsigned32", "Counter32", "MibIdentifier")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
bigipGlobalTM = ModuleIdentity((1, 3, 6, 1, 4, 1, 3375, 2, 3))
if mibBuilder.loadTexts: bigipGlobalTM.setLastUpdated('202004092223Z')
if mibBuilder.loadTexts: bigipGlobalTM.setOrganization('F5 Networks, Inc.')
if mibBuilder.loadTexts: bigipGlobalTM.setContactInfo('postal: F5 Networks, Inc. \n\t \t  801 Fifth Avenue\n                  Seattle, WA 98104\n          phone:  (206) 272-6500\n          email:  support@f5.com')
if mibBuilder.loadTexts: bigipGlobalTM.setDescription('Top-level infrastructure of the F5 enterprise MIB tree.')
gtmGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1))
gtmApplications = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2))
gtmDataCenters = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3))
gtmIps = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4))
gtmLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5))
gtmPools = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6))
gtmRegions = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7))
gtmRules = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8))
gtmServers = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9))
gtmTopologies = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10))
gtmVirtualServers = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11))
gtmWideips = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12))
gtmProberPools = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13))
gtmDNSSEC = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14))
gtmDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15))
gtmDeviceIps = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 16))
gtmLinkIps = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 17))
gtmGlobalAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1))
gtmGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2))
gtmGlobalAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1))
gtmGlobalLdnsProbeProto = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2))
gtmGlobalAttr2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3))
gtmGlobalStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1))
gtmGlobalDnssecStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2))
gtmApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1))
gtmApplicationStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2))
gtmAppContextStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3))
gtmAppContextDisable = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4))
gtmApplicationWideip = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 5))
gtmDataCenter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1))
gtmDataCenterStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2))
gtmDataCenterStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3))
gtmIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1))
gtmLink = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1))
gtmLinkCost = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2))
gtmLinkStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3))
gtmLinkStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4))
gtmPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1))
gtmPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2))
gtmPoolStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3))
gtmPoolMember = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4))
gtmPoolMemberDepends = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5))
gtmPoolMemberStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6))
gtmPoolMemberStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7))
gtmRegionEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1))
gtmRegItem = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2))
gtmRule = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1))
gtmRuleEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2))
gtmRuleEventStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3))
gtmServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1))
gtmServerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2))
gtmServerStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3))
gtmServerStat2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4))
gtmTopItem = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1))
gtmVirtualServ = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1))
gtmVirtualServDepends = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2))
gtmVirtualServStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3))
gtmVirtualServStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4))
gtmWideip = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1))
gtmWideipStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2))
gtmWideipStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3))
gtmWideipAlias = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4))
gtmWideipPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5))
gtmWideipRule = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6))
gtmProberPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1))
gtmProberPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2))
gtmProberPoolStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3))
gtmProberPoolMember = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4))
gtmProberPoolMemberStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5))
gtmProberPoolMemberStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6))
gtmDnssecZoneStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1))
gtmDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 1))
gtmDeviceStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 2))
gtmDeviceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 3))
gtmDeviceIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 16, 1))
gtmLinkIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 17, 1))
gtmAttrDumpTopology = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDumpTopology.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrDumpTopology.setDescription('Deprecated!.\n\t\tThe state indicating whether or not to dump the topology.')
gtmAttrCacheLdns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrCacheLdns.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrCacheLdns.setDescription('Deprecated!.\n\t\tThe state indicating whether or not to cache LDNSes.')
gtmAttrAolAware = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrAolAware.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrAolAware.setDescription('Deprecated!.\n\t\tThe state indicating whether or not local DNS servers that \n\t\tbelong to AOL (America Online) are recognized.')
gtmAttrCheckStaticDepends = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrCheckStaticDepends.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrCheckStaticDepends.setDescription('Deprecated!.\n\t\tThe state indicating whether or not to check the availability \n\t\tof virtual servers.')
gtmAttrCheckDynamicDepends = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrCheckDynamicDepends.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrCheckDynamicDepends.setDescription('Deprecated!.\n\t\tThe state indicating whether or not to check availability of \n\t\ta path before it uses the path for load balancing.')
gtmAttrDrainRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDrainRequests.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrDrainRequests.setDescription('Deprecated!.\n\t\tThe state indicating whether or not persistent connections \n\t\tare allowed to remain connected, until TTL expires, \n\t\twhen disabling a pool.')
gtmAttrEnableResetsRipeness = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrEnableResetsRipeness.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrEnableResetsRipeness.setDescription('Deprecated!.\n\t\tThe state indicating whether or not ripeness value is allowed \n\t\tto be reset.')
gtmAttrFbRespectDepends = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrFbRespectDepends.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrFbRespectDepends.setDescription('Deprecated!.\n\t\tThe state indicating whether or not to respect virtual server \n\t\tstatus when load balancing switches to the fallback mode.')
gtmAttrFbRespectAcl = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrFbRespectAcl.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrFbRespectAcl.setDescription('Deprecated!.\n\t\tDeprecated! The state indicating whether or not to respect ACL. \n\t         This is part of an outdated mechanism for disabling virtual servers')
gtmAttrDefaultAlternate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersist", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vssore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDefaultAlternate.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrDefaultAlternate.setDescription('Deprecated!.\n\t\tThe default alternate LB method.')
gtmAttrDefaultFallback = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDefaultFallback.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrDefaultFallback.setDescription('Deprecated!.\n\t\tThe default fallback LB method.')
gtmAttrPersistMask = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrPersistMask.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrPersistMask.setDescription('Deprecated!.\n\t\tDeprecated! Replaced by gtmAttrStaticPersistCidr and gtmAttrStaticPersistV6Cidr.\n\t\tThe persistence mask which is used to determine the netmask applied\n\t\tfor static persistance requests.')
gtmAttrGtmSetsRecursion = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrGtmSetsRecursion.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrGtmSetsRecursion.setDescription('Deprecated!.\n\t\tThe state indicating whether set recursion by global \n\t\ttraffic management object(GTM) is enable or not.')
gtmAttrQosFactorLcs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorLcs.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrQosFactorLcs.setDescription('Deprecated!.\n\t\tThe factor used to normalize link capacity values \n\t\twhen the load balancing mode is set to LB_METHOD_QOS.')
gtmAttrQosFactorRtt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorRtt.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrQosFactorRtt.setDescription('Deprecated!.\n\t\tThe factor used to normalize round-trip time values \n\t\twhen the load balancing mode is set to LB_METHOD_QOS.')
gtmAttrQosFactorHops = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorHops.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrQosFactorHops.setDescription('Deprecated!.\n\t\tThe factor used to normalize hops when the load \n\t\tbalancing mode is set to LB_METHOD_QOS.')
gtmAttrQosFactorHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorHitRatio.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrQosFactorHitRatio.setDescription('Deprecated!.\n\t\tThe factor used to normalize ping packet completion \n\t\trates when the load balancing mode is set to LB_METHOD_QOS.')
gtmAttrQosFactorPacketRate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorPacketRate.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrQosFactorPacketRate.setDescription('Deprecated!.\n\t\tThe factor used to normalize packet rates when the load \n\t\tbalancing mode is set to LB_METHOD_QOS.')
gtmAttrQosFactorBps = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorBps.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrQosFactorBps.setDescription('Deprecated!.\n\t\tThe factor used to normalize kilobytes per second \n\t\twhen the load balancing mode is set to LB_METHOD_QOS.')
gtmAttrQosFactorVsCapacity = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorVsCapacity.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrQosFactorVsCapacity.setDescription('Deprecated!.\n\t\tThe factor used to normalize virtual server capacity \n\t\tvalues when the load balancing mode is set to LB_METHOD_QOS.')
gtmAttrQosFactorTopology = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorTopology.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrQosFactorTopology.setDescription('Deprecated!.\n\t\tThe factor used to normalize topology values when the load \n\t\tbalancing mode is set to LB_METHOD_QOS.')
gtmAttrQosFactorConnRate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorConnRate.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrQosFactorConnRate.setDescription('Deprecated!.\n\t\tDeprecated! \n\t\tReplaced by gtmAttrQosFactorVsScore. \n\t\tThe factor used to normalize connection rates when the load \n\t\tbalancing mode is set to LB_METHOD_QOS.')
gtmAttrTimerRetryPathData = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimerRetryPathData.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrTimerRetryPathData.setDescription('Deprecated!.\n\t\tThe frequency at which to retrieve path data.')
gtmAttrTimerGetAutoconfigData = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimerGetAutoconfigData.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrTimerGetAutoconfigData.setDescription('Deprecated!.\n\t\tThe frequency at which to retrieve auto-configuration data.')
gtmAttrTimerPersistCache = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimerPersistCache.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrTimerPersistCache.setDescription('Deprecated!.\n\t\tThe frequency at which to retrieve path and metrics \n\t\tdata from the system cache.')
gtmAttrDefaultProbeLimit = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDefaultProbeLimit.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrDefaultProbeLimit.setDescription('Deprecated!.\n\t\tThe default probe limit, the number of times to probe a path.')
gtmAttrDownThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDownThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrDownThreshold.setDescription('Deprecated!.\n\t\tThe down_threshold value. If a host server or a host virtual server \n\t\thas been marked down for the last down_threshold probing cycles \n\t\t(timer_get_host_data or timer_get_vs_data respectively), then perform \n\t\tservice checks every down_multiple * timer period instead.')
gtmAttrDownMultiple = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDownMultiple.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrDownMultiple.setDescription('Deprecated!.\n\t\tThe down_multiple value. If a host server or a host virtual server \n\t\thas been marked down for the last down_threshold probing cycles \n\t\t(timer_get_host_data or timer_get_vs_data respectively), then perform \n\t\tservice checks every down_multiple * timer period instead.')
gtmAttrPathTtl = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrPathTtl.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrPathTtl.setDescription('Deprecated!.\n\t\tThe TTL for the path information.')
gtmAttrTraceTtl = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTraceTtl.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrTraceTtl.setDescription('Deprecated!.\n\t\tThe TTL for the traceroute information.')
gtmAttrLdnsDuration = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLdnsDuration.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrLdnsDuration.setDescription('Deprecated!.\n\t\tThe number of seconds that an inactive LDNS remains cached.')
gtmAttrPathDuration = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrPathDuration.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrPathDuration.setDescription('Deprecated!.\n\t\tThe number of seconds that a path remains cached after its last access.')
gtmAttrRttSampleCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrRttSampleCount.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrRttSampleCount.setDescription('Deprecated!.\n\t\tThe number of packets to send out in a probe request to determine \n\t\tpath information.')
gtmAttrRttPacketLength = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrRttPacketLength.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrRttPacketLength.setDescription('Deprecated!.\n\t\tThe length of the packet sent out in a probe request to determine \n\t\tpath information.')
gtmAttrRttTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrRttTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrRttTimeout.setDescription('Deprecated!.\n\t\tThe timeout for RTT, in seconds.')
gtmAttrMaxMonReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrMaxMonReqs.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrMaxMonReqs.setDescription('Deprecated!.\n\t\tThe maximum synchronous monitor request, which is used to control \n\t\tthe maximum number of monitor requests being sent out at one time \n\t\tfor a given probing interval. This will allow the user to smooth out \n\t\tmonitor probe requests as much as they desire.')
gtmAttrTraceroutePort = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTraceroutePort.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrTraceroutePort.setDescription('Deprecated!.\n\t\tThe port to use to collect traceroute (hops) data.')
gtmAttrPathsNeverDie = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrPathsNeverDie.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrPathsNeverDie.setDescription('Deprecated!.\n\t\tThe state indicating whether the dynamic load balancing modes \n\t\tcan use path data even after the TTL for the path data has expired.')
gtmAttrProbeDisabledObjects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrProbeDisabledObjects.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrProbeDisabledObjects.setDescription('Deprecated!.\n\t\tThe state indicating whether probing disabled objects by global\n\t\ttraffic management object(GTM) is enabled or not.')
gtmAttrLinkLimitFactor = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkLimitFactor.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrLinkLimitFactor.setDescription('Deprecated!.\n\t\tThe link limit factor, which is used to set a target percentage \n\t\tfor traffic. For example, if it is set to 90, the ratio cost \n\t\tbased load-balancing will set a ratio with a maximum value equal \n\t\tto 90% of the limit value for the link. Default is 95%.')
gtmAttrOverLimitLinkLimitFactor = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrOverLimitLinkLimitFactor.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrOverLimitLinkLimitFactor.setDescription('Deprecated!.\n\t\tThe over-limit link limit factor. If traffic on a link exceeds \n\t\tthe limit, this factor will be used instead of the link_limit_factor \n\t\tuntil the traffic is over limit for more than max_link_over_limit_count \n\t\ttimes. Once the limit has been exceeded too many times, all traffic\n\t\tis shut off for the link. The default for \n\t\tover_limit_link_limit_factor is 90%.')
gtmAttrLinkPrepaidFactor = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkPrepaidFactor.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrLinkPrepaidFactor.setDescription('Deprecated!.\n\t\tThe link prepaid factor. Maximum percentage of traffic allocated \n\t\tto link which has a traffic allotment which has been prepaid. \n\t\tDefault is 95%.')
gtmAttrLinkCompensateInbound = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkCompensateInbound.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrLinkCompensateInbound.setDescription('Deprecated!.\n\t\tThe link compensate inbound. If set, the link allotment calculation \n\t\twill take into account traffic which does not flow through the BIGIP, \n\t\ti.e. if more traffic is flowing through a link as measured by SNMP \n\t\ton the router than is flowing through the BIGIP. This applies to \n\t\tinbound traffic which the major volume will initiate from internal \n\t\tclients.')
gtmAttrLinkCompensateOutbound = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkCompensateOutbound.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrLinkCompensateOutbound.setDescription('Deprecated!.\n\t\tThe link compensate outbound. If set, the link allotment calculation \n\t\twill take into account traffic which does not flow through the BIGIP, \n\t\ti.e. if more traffic is flowing through a link as measured by SNMP \n\t\ton the router than is flowing through the BIGIP. This applies to \n\t\toutbound traffic which the major volume will initiate from internal \n\t\tclients.')
gtmAttrLinkCompensationHistory = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkCompensationHistory.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrLinkCompensationHistory.setDescription('Deprecated!.\n\t\tThe link compensation history.')
gtmAttrMaxLinkOverLimitCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrMaxLinkOverLimitCount.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrMaxLinkOverLimitCount.setDescription('Deprecated!.\n\t\tThe maximum link over limit count. The count of how many times \n\t\tin a row traffic may be over the defined limit for the link before \n\t\tit is shut off entirely. Default is 1.')
gtmAttrLowerBoundPctRow = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLowerBoundPctRow.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrLowerBoundPctRow.setDescription('Deprecated!.\n\t\tDeprecated! No longer useful.\t\n\t        The lower bound percentage row option in Internet Weather Map.')
gtmAttrLowerBoundPctCol = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLowerBoundPctCol.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrLowerBoundPctCol.setDescription('Deprecated!.\n\t\tDeprecated! No longer useful.\n\t        The lower bound percentage column option in Internet Weather Map.')
gtmAttrAutoconf = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrAutoconf.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrAutoconf.setDescription('Deprecated!.\n\t\tThe state indicating whether to auto configure BIGIP/3DNS servers \n\t\t(automatic addition and deletion of self IPs and virtual servers).')
gtmAttrAutosync = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrAutosync.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrAutosync.setDescription('Deprecated!.\n\t\tThe state indicating whether or not to autosync. \n\t\tAllows automatic updates of wideip.conf to/from other 3-DNSes.')
gtmAttrSyncNamedConf = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrSyncNamedConf.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrSyncNamedConf.setDescription('Deprecated!.\n\t\tThe state indicating whether or not to auto-synchronize named \n\t\tconfiguration. Allows automatic updates of named.conf to/from other 3-DNSes.')
gtmAttrSyncGroup = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 52), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrSyncGroup.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrSyncGroup.setDescription('Deprecated!.\n\t\tThe name of sync group.')
gtmAttrSyncTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrSyncTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrSyncTimeout.setDescription("Deprecated!.\n\t\tThe sync timeout.  If synch'ing from a remote 3-DNS takes longer than \n\t\tthis timeout, then abort the connection.")
gtmAttrSyncZonesTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrSyncZonesTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrSyncZonesTimeout.setDescription("Deprecated!.\n\t\tThe sync zones timeout. If synch'ing named and zone configuration \n\t\ttakes this timeout, then abort the connection.")
gtmAttrTimeTolerance = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimeTolerance.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrTimeTolerance.setDescription('Deprecated!.\n\t\tThe allowable time difference for data to be out of sync between \n\t\tmembers of a sync group.')
gtmAttrTopologyLongestMatch = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTopologyLongestMatch.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrTopologyLongestMatch.setDescription('Deprecated!.\n\t\tThe state indicating  whether or not the 3-DNS Controller selects \n\t\tthe topology record that is most specific and, thus, has the longest \n\t\tmatch, in cases where there are several IP/netmask items that match \n\t\ta particular IP address.  \n\t\tIf it is set to false, the 3-DNS Controller uses the first topology record \n\t\tthat matches (according to the order of entry) in the topology statement.')
gtmAttrTopologyAclThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTopologyAclThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrTopologyAclThreshold.setDescription('Deprecated!.\n\t\tDeprecated! The threshold of the topology ACL. \n\t         This is an outdated mechanism for disabling a node.')
gtmAttrStaticPersistCidr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrStaticPersistCidr.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrStaticPersistCidr.setDescription('Deprecated!.\n\t\tThe variable used with the static persistence load balancing mode \n\t\tto allow users to specify what cidr should be used. \n\t\tThis is used for IPv4.')
gtmAttrStaticPersistV6Cidr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrStaticPersistV6Cidr.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrStaticPersistV6Cidr.setDescription('Deprecated!.\n\t\tThe variable used with the static persistence load balancing mode \n\t\tto allow users to specify what cidr should be used. \n\t\tThis is used for IPv6.')
gtmAttrQosFactorVsScore = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorVsScore.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrQosFactorVsScore.setDescription('Deprecated!.\n\t\tThe factor used to normalize virtual server (VS) score \n\t\twhen the load balancing mode is set to LB_METHOD_QOS.')
gtmAttrTimerSendKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimerSendKeepAlive.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrTimerSendKeepAlive.setDescription('Deprecated!.\n\t\tThe frequency of GTM keep alive messages (strictly the config timestamps).')
gtmAttrCertificateDepth = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrCertificateDepth.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrCertificateDepth.setDescription('Deprecated!.\n\t\tDeprecated! No longer updated.\n\t        When non-zero, customers may use their own SSL certificates by setting the certificate depth.')
gtmAttrMaxMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrMaxMemoryUsage.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttrMaxMemoryUsage.setDescription('Deprecated!.\n\t\tDeprecated! The maximum amount of memory (in MB) allocated to GTM.')
gtmGlobalLdnsProbeProtoNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoNumber.setStatus('current')
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoNumber.setDescription('The number of gtmGlobalLdnsProbeProto entries in the table.')
gtmGlobalLdnsProbeProtoTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2), )
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoTable.setStatus('current')
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoTable.setDescription('A table containing information of global LDNS probe protocols for GTM (Global Traffic Management).')
gtmGlobalLdnsProbeProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoIndex"))
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoEntry.setStatus('current')
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoEntry.setDescription('Columns in the gtmGlobalLdnsProbeProto Table')
gtmGlobalLdnsProbeProtoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoIndex.setStatus('current')
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoIndex.setDescription('The index of LDNS probe protocols.')
gtmGlobalLdnsProbeProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("icmp", 0), ("tcp", 1), ("udp", 2), ("dnsdot", 3), ("dnsrev", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoType.setStatus('current')
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoType.setDescription('The LDNS probe protocol. The less index is, the more preferred protocol is.')
gtmGlobalLdnsProbeProtoName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoName.setStatus('current')
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoName.setDescription('name as a key.')
gtmStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmStatResetStats.setStatus('current')
if mibBuilder.loadTexts: gtmStatResetStats.setDescription('The action to reset resettable statistics data in gtmGlobalStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmStatRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatRequests.setStatus('current')
if mibBuilder.loadTexts: gtmStatRequests.setDescription('The number of total requests for wide IPs for GTM (Global Traffic Management).')
gtmStatResolutions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatResolutions.setStatus('current')
if mibBuilder.loadTexts: gtmStatResolutions.setDescription('The number of total resolutions for wide IPs for GTM (Global Traffic Management).')
gtmStatPersisted = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatPersisted.setStatus('current')
if mibBuilder.loadTexts: gtmStatPersisted.setDescription('The number of persisted requests for wide IPs for GTM (Global Traffic Management).')
gtmStatPreferred = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatPreferred.setStatus('current')
if mibBuilder.loadTexts: gtmStatPreferred.setDescription('The number of times which the preferred load balance method is used \n\t\tfor wide IPs for GTM (Global Traffic Management).')
gtmStatAlternate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatAlternate.setStatus('current')
if mibBuilder.loadTexts: gtmStatAlternate.setDescription('The number of times which the alternate load balance method is used\n\t        for wide IPs for GTM (Global Traffic Management).')
gtmStatFallback = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatFallback.setStatus('current')
if mibBuilder.loadTexts: gtmStatFallback.setDescription('The number of times which the alternate load balance method is used\n\t        for wide IPs for GTM (Global Traffic Management).')
gtmStatDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatDropped.setStatus('current')
if mibBuilder.loadTexts: gtmStatDropped.setDescription('The number of dropped DNS messages for wide IPs for GTM (Global Traffic Management).')
gtmStatExplicitIp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatExplicitIp.setStatus('deprecated')
if mibBuilder.loadTexts: gtmStatExplicitIp.setDescription('Deprecated! The number of times which a LDNS  was persisted to wide IPs\n\t        by the explicit IP rule for GTM (Global Traffic Management).')
gtmStatReturnToDns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatReturnToDns.setStatus('current')
if mibBuilder.loadTexts: gtmStatReturnToDns.setDescription('The number of times which a resolve was returned to DNS (for resolution)\n\t        for wide IPs for GTM (Global Traffic Management).')
gtmStatReconnects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatReconnects.setStatus('current')
if mibBuilder.loadTexts: gtmStatReconnects.setDescription('The number of total reconnects for GTM (Global Traffic Management).')
gtmStatBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatBytesReceived.setStatus('current')
if mibBuilder.loadTexts: gtmStatBytesReceived.setDescription('The total number of bytes received by the system for GTM (Global Traffic Management).')
gtmStatBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatBytesSent.setStatus('current')
if mibBuilder.loadTexts: gtmStatBytesSent.setDescription('The total number of bytes sent out by the system for GTM (Global Traffic Management).')
gtmStatNumBacklogged = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatNumBacklogged.setStatus('current')
if mibBuilder.loadTexts: gtmStatNumBacklogged.setDescription('The number of times when a send action was backlogged for GTM (Global Traffic Management).')
gtmStatBytesDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatBytesDropped.setStatus('current')
if mibBuilder.loadTexts: gtmStatBytesDropped.setDescription('The total number of bytes dropped due to backlogged/unconnected \n\t\tfor GTM (Global Traffic Management).')
gtmStatLdnses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatLdnses.setStatus('current')
if mibBuilder.loadTexts: gtmStatLdnses.setDescription('The total current LDNSes for GTM (Global Traffic Management).')
gtmStatPaths = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatPaths.setStatus('current')
if mibBuilder.loadTexts: gtmStatPaths.setDescription('The total current paths for GTM (Global Traffic Management).')
gtmStatReturnFromDns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatReturnFromDns.setStatus('current')
if mibBuilder.loadTexts: gtmStatReturnFromDns.setDescription('The number of times which a resolve was returned from DNS\n\t        for wide IPs for GTM (Global Traffic Management).')
gtmStatCnameResolutions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatCnameResolutions.setStatus('current')
if mibBuilder.loadTexts: gtmStatCnameResolutions.setDescription('The number of times which a query is resolved by the CNAME of pools\n\t        associated with a Wide IP for GTM (Global Traffic Management).')
gtmStatARequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatARequests.setStatus('current')
if mibBuilder.loadTexts: gtmStatARequests.setDescription('The number of A requests for wide IPs for GTM (Global Traffic Management).')
gtmStatAaaaRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatAaaaRequests.setStatus('current')
if mibBuilder.loadTexts: gtmStatAaaaRequests.setDescription('The number of AAAA requests for wide IPs for GTM (Global Traffic Management).')
gtmAppNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppNumber.setStatus('current')
if mibBuilder.loadTexts: gtmAppNumber.setDescription('The number of gtmApplication entries in the table.')
gtmAppTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2), )
if mibBuilder.loadTexts: gtmAppTable.setStatus('current')
if mibBuilder.loadTexts: gtmAppTable.setDescription('A table containing information of applications for GTM (Global Traffic Management).')
gtmAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAppName"))
if mibBuilder.loadTexts: gtmAppEntry.setStatus('current')
if mibBuilder.loadTexts: gtmAppEntry.setDescription('Columns in the gtmApp Table')
gtmAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppName.setStatus('current')
if mibBuilder.loadTexts: gtmAppName.setDescription('The name of an application.')
gtmAppPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppPersist.setStatus('current')
if mibBuilder.loadTexts: gtmAppPersist.setDescription('The state indicating whether persistence is enabled or not.')
gtmAppTtlPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppTtlPersist.setStatus('current')
if mibBuilder.loadTexts: gtmAppTtlPersist.setDescription('The persistence TTL value for the specified application.')
gtmAppAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("server", 1), ("link", 2), ("datacenter", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppAvailability.setStatus('current')
if mibBuilder.loadTexts: gtmAppAvailability.setDescription('The availability dependency for the specified application.\n\t\tThe application object availability does not depend on anything, \n\t\tor it depends on at lease one of server, link, or data center being up.')
gtmAppStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusNumber.setStatus('current')
if mibBuilder.loadTexts: gtmAppStatusNumber.setDescription('The number of gtmApplicationStatus entries in the table.')
gtmAppStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2), )
if mibBuilder.loadTexts: gtmAppStatusTable.setStatus('current')
if mibBuilder.loadTexts: gtmAppStatusTable.setDescription('A table containing status information of applications for GTM (Global Traffic Management).')
gtmAppStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAppStatusName"))
if mibBuilder.loadTexts: gtmAppStatusEntry.setStatus('current')
if mibBuilder.loadTexts: gtmAppStatusEntry.setDescription('Columns in the gtmAppStatus Table')
gtmAppStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusName.setStatus('current')
if mibBuilder.loadTexts: gtmAppStatusName.setDescription('The name of an application.')
gtmAppStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: gtmAppStatusAvailState.setDescription('The availability of the specified application indicated by color.\n\t\tnone - error;\n\t\tgreen - available in some capacity;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t        blue - availability is unknown;\n\t        gray - unlicensed.')
gtmAppStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: gtmAppStatusEnabledState.setDescription('The activity status of the specified application, as specified \n\t\tby the user.')
gtmAppStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAppStatusParentType.setDescription('Deprecated! This is an internal data.\n\t\tThe type of parent object which disabled the specified application.')
gtmAppStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: gtmAppStatusDetailReason.setDescription("The detail description of the specified application's status.")
gtmAppContStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatNumber.setStatus('current')
if mibBuilder.loadTexts: gtmAppContStatNumber.setDescription('The number of gtmAppContextStat entries in the table.')
gtmAppContStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2), )
if mibBuilder.loadTexts: gtmAppContStatTable.setStatus('current')
if mibBuilder.loadTexts: gtmAppContStatTable.setDescription('A table containing information of all able to used objects of \n\t\tapplication contexts for GTM (Global Traffic Management).')
gtmAppContStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContStatAppName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContStatType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContStatName"))
if mibBuilder.loadTexts: gtmAppContStatEntry.setStatus('current')
if mibBuilder.loadTexts: gtmAppContStatEntry.setDescription('Columns in the gtmAppContStat Table')
gtmAppContStatAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatAppName.setStatus('current')
if mibBuilder.loadTexts: gtmAppContStatAppName.setDescription('The name of an application.')
gtmAppContStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("datacenter", 0), ("server", 1), ("link", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatType.setStatus('current')
if mibBuilder.loadTexts: gtmAppContStatType.setDescription("The object type of an application's context for the specified application.")
gtmAppContStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatName.setStatus('current')
if mibBuilder.loadTexts: gtmAppContStatName.setDescription("The object name of an application's context for the specified application.")
gtmAppContStatNumAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatNumAvail.setStatus('current')
if mibBuilder.loadTexts: gtmAppContStatNumAvail.setDescription('The minimum number of pool members per wide IP available \n\t\t(green + enabled) in this context.')
gtmAppContStatAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatAvailState.setStatus('current')
if mibBuilder.loadTexts: gtmAppContStatAvailState.setDescription('The availability of the specified application context indicated by color.\n\t\tnone - error;\n\t\tgreen - available in some capacity;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t\tgray - unlicensed.')
gtmAppContStatEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatEnabledState.setStatus('current')
if mibBuilder.loadTexts: gtmAppContStatEnabledState.setDescription('The activity status of the specified application context, as specified \n\t\tby the user.')
gtmAppContStatParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatParentType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAppContStatParentType.setDescription('Deprecated! This is an internal data.\n\t\tThe type of parent object which disabled the specified application context.')
gtmAppContStatDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatDetailReason.setStatus('current')
if mibBuilder.loadTexts: gtmAppContStatDetailReason.setDescription("The detail description of the specified application context 's status.")
gtmAppContDisNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContDisNumber.setStatus('current')
if mibBuilder.loadTexts: gtmAppContDisNumber.setDescription('The number of gtmAppContextDisable entries in the table.')
gtmAppContDisTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2), )
if mibBuilder.loadTexts: gtmAppContDisTable.setStatus('current')
if mibBuilder.loadTexts: gtmAppContDisTable.setDescription('A table containing information of disabled objects of application \n\t\tcontexts for GTM (Global Traffic Management).')
gtmAppContDisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContDisAppName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContDisType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContDisName"))
if mibBuilder.loadTexts: gtmAppContDisEntry.setStatus('current')
if mibBuilder.loadTexts: gtmAppContDisEntry.setDescription('Columns in the gtmAppContDis Table')
gtmAppContDisAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContDisAppName.setStatus('current')
if mibBuilder.loadTexts: gtmAppContDisAppName.setDescription('The name of an application.')
gtmAppContDisType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("datacenter", 0), ("server", 1), ("link", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContDisType.setStatus('current')
if mibBuilder.loadTexts: gtmAppContDisType.setDescription("The object type of a disabled application's context for the specified application..")
gtmAppContDisName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContDisName.setStatus('current')
if mibBuilder.loadTexts: gtmAppContDisName.setDescription("The object name of a disabled application's context for the specified application.")
gtmDcNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcNumber.setStatus('current')
if mibBuilder.loadTexts: gtmDcNumber.setDescription('The number of gtmDataCenter entries in the table.')
gtmDcTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2), )
if mibBuilder.loadTexts: gtmDcTable.setStatus('current')
if mibBuilder.loadTexts: gtmDcTable.setDescription('A table containing information of data centers for GTM (Global Traffic Management).')
gtmDcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDcName"))
if mibBuilder.loadTexts: gtmDcEntry.setStatus('current')
if mibBuilder.loadTexts: gtmDcEntry.setDescription('Columns in the gtmDc Table')
gtmDcName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcName.setStatus('current')
if mibBuilder.loadTexts: gtmDcName.setDescription('The name of a data center.')
gtmDcLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcLocation.setStatus('current')
if mibBuilder.loadTexts: gtmDcLocation.setDescription('The location information of the specified data center.')
gtmDcContact = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcContact.setStatus('current')
if mibBuilder.loadTexts: gtmDcContact.setDescription('The contact information of the specified data center.')
gtmDcEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmDcEnabled.setDescription('The state whether the specified data center is enabled or not.')
gtmDcStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmDcStatResetStats.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatResetStats.setDescription('The action to reset resettable statistics data in gtmDataCenterStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmDcStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatNumber.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatNumber.setDescription('The number of gtmDataCenterStat entries in the table.')
gtmDcStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3), )
if mibBuilder.loadTexts: gtmDcStatTable.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatTable.setDescription('A table containing statistics information of data centers \n\t\tfor GTM (Global Traffic Management).')
gtmDcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDcStatName"))
if mibBuilder.loadTexts: gtmDcStatEntry.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatEntry.setDescription('Columns in the gtmDcStat Table')
gtmDcStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatName.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatName.setDescription('The name of a data center.')
gtmDcStatCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatCpuUsage.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatCpuUsage.setDescription('The CPU usage in percentage for the specified data center.')
gtmDcStatMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatMemAvail.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatMemAvail.setDescription('The memory available in bytes for the specified data center.')
gtmDcStatBitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatBitsPerSecIn.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatBitsPerSecIn.setDescription('The number of bits per second received by the specified data center.')
gtmDcStatBitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatBitsPerSecOut.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatBitsPerSecOut.setDescription('The number of bits per second sent from the specified data center.')
gtmDcStatPktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatPktsPerSecIn.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatPktsPerSecIn.setDescription('The number of packets per second received by the specified data center.')
gtmDcStatPktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatPktsPerSecOut.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatPktsPerSecOut.setDescription('The number of packets per second sent from the specified data center.')
gtmDcStatConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatConnections.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatConnections.setDescription('The number of total connections to the specified data center.')
gtmDcStatConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatConnRate.setStatus('deprecated')
if mibBuilder.loadTexts: gtmDcStatConnRate.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe connection rate (current connection rate/connection rate limit) \n\t\tin percentage for the specified data center.')
gtmDcStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusNumber.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatusNumber.setDescription('The number of gtmDataCenterStatus entries in the table.')
gtmDcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2), )
if mibBuilder.loadTexts: gtmDcStatusTable.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatusTable.setDescription('A table containing status information of data centers \n\t\tfor GTM (Global Traffic Management).')
gtmDcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDcStatusName"))
if mibBuilder.loadTexts: gtmDcStatusEntry.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatusEntry.setDescription('Columns in the gtmDcStatus Table')
gtmDcStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusName.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatusName.setDescription('The name of a data center.')
gtmDcStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatusAvailState.setDescription('The availability of the specified data center indicated by color.\n\t\tnone - error;\n\t\tgreen - available in some capacity;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t \tgray - unlicensed.')
gtmDcStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatusEnabledState.setDescription('The activity status of the specified data center, as specified \n\t\tby the user.')
gtmDcStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmDcStatusParentType.setDescription('Deprecated! This is an internal data.\n\t\tThe type of parent object which disabled the specified data center.')
gtmDcStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatusDetailReason.setDescription("The detail description of the specified data center's status.")
gtmIpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpNumber.setStatus('deprecated')
if mibBuilder.loadTexts: gtmIpNumber.setDescription('Deprecated!.\n\t\tThe number of gtmIp entries in the table.')
gtmIpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2), )
if mibBuilder.loadTexts: gtmIpTable.setStatus('deprecated')
if mibBuilder.loadTexts: gtmIpTable.setDescription('Deprecated! Replaced by gtmDeviceIp and gtmLinkIp tables.\n\t\t A table containing information of IPs for GTM (Global Traffic Management).')
gtmIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmIpIpType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmIpIp"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmIpLinkName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmIpServerName"))
if mibBuilder.loadTexts: gtmIpEntry.setStatus('deprecated')
if mibBuilder.loadTexts: gtmIpEntry.setDescription('Columns in the gtmIp Table')
gtmIpIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpIpType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmIpIpType.setDescription('Deprecated! The IP address type of gtmIpIp.')
gtmIpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpIp.setStatus('deprecated')
if mibBuilder.loadTexts: gtmIpIp.setDescription('Deprecated! The IP address that belong to the specified box. It is interpreted \n\t\twithin the context of a gtmIpIpType value.')
gtmIpLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpLinkName.setStatus('deprecated')
if mibBuilder.loadTexts: gtmIpLinkName.setDescription('Deprecated! The link name with which the specified IP address associates.')
gtmIpServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpServerName.setStatus('deprecated')
if mibBuilder.loadTexts: gtmIpServerName.setDescription('Deprecated! The name of the server with which the specified IP address is associated.')
gtmIpUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpUnitId.setStatus('deprecated')
if mibBuilder.loadTexts: gtmIpUnitId.setDescription('Deprecated!  This is replaced by device_name.\n\t\tThe box ID with which the specified IP address associates.')
gtmIpIpXlatedType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpIpXlatedType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmIpIpXlatedType.setDescription('Deprecated! The IP address type of gtmIpIpXlated.')
gtmIpIpXlated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpIpXlated.setStatus('deprecated')
if mibBuilder.loadTexts: gtmIpIpXlated.setDescription('Deprecated! The translated address for the specified IP. It is interpreted \n\t\twithin the context of a gtmIpIpXlatedType value.')
gtmIpDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpDeviceName.setStatus('deprecated')
if mibBuilder.loadTexts: gtmIpDeviceName.setDescription('Deprecated! The box name with which the specified IP address associates.')
gtmLinkNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkNumber.setStatus('current')
if mibBuilder.loadTexts: gtmLinkNumber.setDescription('The number of gtmLink entries in the table.')
gtmLinkTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2), )
if mibBuilder.loadTexts: gtmLinkTable.setStatus('current')
if mibBuilder.loadTexts: gtmLinkTable.setDescription('A table containing information of links within associated data center \n\t\tfor GTM (Global Traffic Management).')
gtmLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkName"))
if mibBuilder.loadTexts: gtmLinkEntry.setStatus('current')
if mibBuilder.loadTexts: gtmLinkEntry.setDescription('Columns in the gtmLink Table')
gtmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkName.setStatus('current')
if mibBuilder.loadTexts: gtmLinkName.setDescription('The name of a link.')
gtmLinkDcName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkDcName.setStatus('current')
if mibBuilder.loadTexts: gtmLinkDcName.setDescription('The name of the data center associated with the specified link.')
gtmLinkIspName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkIspName.setStatus('current')
if mibBuilder.loadTexts: gtmLinkIspName.setDescription('The ISP (Internet Service Provider) name for the specified link.')
gtmLinkUplinkAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkUplinkAddressType.setStatus('current')
if mibBuilder.loadTexts: gtmLinkUplinkAddressType.setDescription('The IP address type of gtmLinkUplinkAddress.')
gtmLinkUplinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkUplinkAddress.setStatus('current')
if mibBuilder.loadTexts: gtmLinkUplinkAddress.setDescription('The IP address on the uplink side of the router, used for SNMP \n\t\tprobing only. It is interpreted within the context of an \n\t\tgtmUplinkAddressType value.')
gtmLinkLimitInCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInCpuUsageEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitInCpuUsageEnabled.setDescription('The state indicating whether to set limit of CPU usage is \n\t\tenabled or not for the inbound packets of the  specified link.')
gtmLinkLimitInMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInMemAvailEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitInMemAvailEnabled.setDescription('The state indicating whether to set limit of available memory \n\t\tis enabled or not for the inbound packets of the  specified link.')
gtmLinkLimitInBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInBitsPerSecEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitInBitsPerSecEnabled.setDescription('The state indicating whether to limit of number of bits per second \n\t\tis enabled or not for the inbound packets of the  specified link.')
gtmLinkLimitInPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInPktsPerSecEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitInPktsPerSecEnabled.setDescription('The state indicating whether to set limit of number of packets \n\t\tper second is enabled or not for the inbound packets of \n\t\tthe specified link.')
gtmLinkLimitInConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInConnEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitInConnEnabled.setDescription('The state indicating whether to set limit of total connections \n\t\tis enabled or not for the inbound packets of the specified link.')
gtmLinkLimitInConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInConnPerSecEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: gtmLinkLimitInConnPerSecEnabled.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe state indicating whether to set limit of connections per second \n\t\tis enabled or not for the inbound packets of the link.')
gtmLinkLimitInCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInCpuUsage.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitInCpuUsage.setDescription('The limit of CPU usage as a percentage for the inbound packets \n\t\tof the specified link.')
gtmLinkLimitInMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInMemAvail.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitInMemAvail.setDescription('The limit of memory available in bytes for the inbound packets \n\t\tof the specified link.')
gtmLinkLimitInBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitInBitsPerSec.setDescription('The limit of number of bits per second for the inbound packets \n\t\tof the specified link.')
gtmLinkLimitInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitInPktsPerSec.setDescription('The limit of number of packets per second for the inbound packets \n\t\tof the specified link.')
gtmLinkLimitInConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInConn.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitInConn.setDescription('The limit of total number of connections for the inbound packets \n\t\tof the specified link.')
gtmLinkLimitInConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInConnPerSec.setStatus('deprecated')
if mibBuilder.loadTexts: gtmLinkLimitInConnPerSec.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe limit of number of connections per second for the inbound packets \n\t\tof the specified link.')
gtmLinkLimitOutCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutCpuUsageEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitOutCpuUsageEnabled.setDescription('The state indicating whether to set limit of CPU usage is \n\t\tenabled or not for the outbound packets of the specified link.')
gtmLinkLimitOutMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutMemAvailEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitOutMemAvailEnabled.setDescription('The state indicating whether to set limit of available memory \n\t\tis enabled or not for the outbound packets of the specified link.')
gtmLinkLimitOutBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutBitsPerSecEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitOutBitsPerSecEnabled.setDescription('The state indicating whether to limit of number of bits per second \n\t\tis enabled or not for the outbound packets of the specified link.')
gtmLinkLimitOutPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutPktsPerSecEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitOutPktsPerSecEnabled.setDescription('The state indicating whether to set limit of number of packets \n\t\tper second is enabled or not for the outbound packets of the specified link.')
gtmLinkLimitOutConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutConnEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitOutConnEnabled.setDescription('The state indicating whether to set limit of total connections \n\t\tis enabled or not for the outbound packets of the specified link.')
gtmLinkLimitOutConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutConnPerSecEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: gtmLinkLimitOutConnPerSecEnabled.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe state indicating whether to set limit of connections per second \n\t\tis enabled or not for the outbound packets of the specified link.')
gtmLinkLimitOutCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutCpuUsage.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitOutCpuUsage.setDescription('The limit of CPU usage as a percentage for the outbound packets \n\t\tof the specified link.')
gtmLinkLimitOutMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutMemAvail.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitOutMemAvail.setDescription('The limit of memory available in bytes for the outbound packets \n\t\tof the specified link.')
gtmLinkLimitOutBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitOutBitsPerSec.setDescription('The limit of number of bits per second for the outbound packets \n\t\tof the specified link.')
gtmLinkLimitOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitOutPktsPerSec.setDescription('The limit of number of packets per second for the outbound packets \n\t\tof the specified link.')
gtmLinkLimitOutConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutConn.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitOutConn.setDescription('The limit of total number of connections for the outbound packets \n\t\tof the specified link.')
gtmLinkLimitOutConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutConnPerSec.setStatus('deprecated')
if mibBuilder.loadTexts: gtmLinkLimitOutConnPerSec.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe limit of number of connections per second for the outbound packets \n\t\tof the specified link.')
gtmLinkLimitTotalCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalCpuUsageEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitTotalCpuUsageEnabled.setDescription('The state indicating whether to set limit of CPU usage is enabled \n\t\tor not for the total packets of the specified link.')
gtmLinkLimitTotalMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalMemAvailEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitTotalMemAvailEnabled.setDescription('The state indicating whether to set limit of available memory \n\t\tis enabled or not for the total packets of the specified link.')
gtmLinkLimitTotalBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalBitsPerSecEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitTotalBitsPerSecEnabled.setDescription('The state indicating whether to limit of number of bits per second \n\t\tis enabled or not for the total packets of the specified link.')
gtmLinkLimitTotalPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalPktsPerSecEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitTotalPktsPerSecEnabled.setDescription('The state indicating whether to set limit of number of packets \n\t\tper second is enabled or not for the total packets of the specified link.')
gtmLinkLimitTotalConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalConnEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitTotalConnEnabled.setDescription('The state indicating whether to set limit of total connections \n\t\tis enabled or not for the total packets of the specified link.')
gtmLinkLimitTotalConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalConnPerSecEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: gtmLinkLimitTotalConnPerSecEnabled.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe state indicating whether to set limit of connections per second \n\t\tis enabled or not for the total packets of the specified link.')
gtmLinkLimitTotalCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalCpuUsage.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitTotalCpuUsage.setDescription('The limit of CPU usage as a percentage for the total packets \n\t\tof the specified link.')
gtmLinkLimitTotalMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalMemAvail.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitTotalMemAvail.setDescription('The limit of memory available in bytes for the total packets \n\t\tof the specified link.')
gtmLinkLimitTotalBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitTotalBitsPerSec.setDescription('The limit of number of bits per second for the total packets \n\t\tof the specified link.')
gtmLinkLimitTotalPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitTotalPktsPerSec.setDescription('The limit of number of packets per second for the total packets \n\t\tof the specified link.')
gtmLinkLimitTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalConn.setStatus('current')
if mibBuilder.loadTexts: gtmLinkLimitTotalConn.setDescription('The limit of total number of connections for the total packets \n\t\tof the specified link.')
gtmLinkLimitTotalConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalConnPerSec.setStatus('deprecated')
if mibBuilder.loadTexts: gtmLinkLimitTotalConnPerSec.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe limit of number of connections per second for the total packets \n\t\tof the specified link.')
gtmLinkMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 42), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkMonitorRule.setStatus('current')
if mibBuilder.loadTexts: gtmLinkMonitorRule.setDescription('The name of the monitor rule for this link.')
gtmLinkDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkDuplex.setStatus('current')
if mibBuilder.loadTexts: gtmLinkDuplex.setDescription('The state indicating whether the specified link uses duplex for\n\t\tthe specified link.')
gtmLinkEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmLinkEnabled.setDescription('The state indicating whether the specified link is enabled or not \n\t\tfor the specified link.')
gtmLinkRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkRatio.setStatus('current')
if mibBuilder.loadTexts: gtmLinkRatio.setDescription('The ratio (in Kbps) used to load-balance the traffic for the specified link.')
gtmLinkPrepaid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkPrepaid.setStatus('current')
if mibBuilder.loadTexts: gtmLinkPrepaid.setDescription('Top end of prepaid bit rate the specified link.')
gtmLinkPrepaidInDollars = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkPrepaidInDollars.setStatus('deprecated')
if mibBuilder.loadTexts: gtmLinkPrepaidInDollars.setDescription('Deprecated! The cost in dollars, derived from prepaid for the specified link.')
gtmLinkWeightingType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ratio", 0), ("cost", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkWeightingType.setStatus('current')
if mibBuilder.loadTexts: gtmLinkWeightingType.setDescription('The weight type for the specified link.\n\t\tratio - The region database based on user-defined settings;\n\t\tcost - The region database based on ACL lists.')
gtmLinkCostNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostNumber.setStatus('current')
if mibBuilder.loadTexts: gtmLinkCostNumber.setDescription('The number of gtmLinkCost entries in the table.')
gtmLinkCostTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2), )
if mibBuilder.loadTexts: gtmLinkCostTable.setStatus('current')
if mibBuilder.loadTexts: gtmLinkCostTable.setDescription('A table containing information of costs of the specified links \n\t\tfor GTM (Global Traffic Management).')
gtmLinkCostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkCostName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkCostIndex"))
if mibBuilder.loadTexts: gtmLinkCostEntry.setStatus('current')
if mibBuilder.loadTexts: gtmLinkCostEntry.setDescription('Columns in the gtmLinkCost Table')
gtmLinkCostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostName.setStatus('current')
if mibBuilder.loadTexts: gtmLinkCostName.setDescription('The name of a link.')
gtmLinkCostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostIndex.setStatus('current')
if mibBuilder.loadTexts: gtmLinkCostIndex.setDescription('The index of cost for the specified link.')
gtmLinkCostUptoBps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostUptoBps.setStatus('current')
if mibBuilder.loadTexts: gtmLinkCostUptoBps.setDescription('The upper limit (bps) that defines the cost segment of the specified link.')
gtmLinkCostDollarsPerMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostDollarsPerMbps.setStatus('current')
if mibBuilder.loadTexts: gtmLinkCostDollarsPerMbps.setDescription('The dollars cost per mega byte per second, which is associated with \n\t\tthe specified link cost segment.')
gtmLinkStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmLinkStatResetStats.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatResetStats.setDescription('The action to reset resettable statistics data in gtmLinkStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmLinkStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatNumber.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatNumber.setDescription('The number of gtmLinkStat entries in the table.')
gtmLinkStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3), )
if mibBuilder.loadTexts: gtmLinkStatTable.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatTable.setDescription('A table containing statistic information of links within a data center.')
gtmLinkStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkStatName"))
if mibBuilder.loadTexts: gtmLinkStatEntry.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatEntry.setDescription('Columns in the gtmLinkStat Table')
gtmLinkStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatName.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatName.setDescription('The name of a link.')
gtmLinkStatRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRate.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatRate.setDescription('The current bit rate of all traffic flowing through the specified link.')
gtmLinkStatRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateIn.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatRateIn.setDescription('The current bit rate for all inbound traffic flowing through \n\t\tthe specified link.')
gtmLinkStatRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateOut.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatRateOut.setDescription('The current bit rate for all outbound traffic flowing through\n\t\tthe specified link.')
gtmLinkStatRateNode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateNode.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatRateNode.setDescription('The current bit rate of the traffic flowing through nodes of \n\t\tthe gateway pool for the the specified link.')
gtmLinkStatRateNodeIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateNodeIn.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatRateNodeIn.setDescription('The current bit rate of the traffic flowing inbound through nodes \n\t\tof the gateway pool for the the specified link.')
gtmLinkStatRateNodeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateNodeOut.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatRateNodeOut.setDescription('The current bit rate of the traffic flowing outbound through nodes \n\t\tof the gateway pool for the the specified link.')
gtmLinkStatRateVses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateVses.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatRateVses.setDescription('The current of bit rate of traffic flowing through \n\t\tthe external virtual server for the specified link.')
gtmLinkStatRateVsesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateVsesIn.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatRateVsesIn.setDescription('The current of bit rate of inbound traffic flowing through \n\t\tthe external virtual server for the specified link.')
gtmLinkStatRateVsesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateVsesOut.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatRateVsesOut.setDescription('The current of bit rate of outbound traffic flowing through \n\t\tthe external virtual server for the specified link.')
gtmLinkStatLcsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatLcsIn.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatLcsIn.setDescription('The link capacity score is used to control inbound connections \n\t\twhich are load-balanced through external virtual servers which are controlled \n\t\tby GTM (Global Traffic Management) daemon.')
gtmLinkStatLcsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatLcsOut.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatLcsOut.setDescription('The link capacity score is used to set dynamic ratios on the outbound gateway \n\t\tpool members for the specified link. This controls the outbound connections.')
gtmLinkStatPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatPaths.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatPaths.setDescription('The total number of paths through the specified link.')
gtmLinkStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusNumber.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatusNumber.setDescription('The number of gtmLinkStatus entries in the table.')
gtmLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2), )
if mibBuilder.loadTexts: gtmLinkStatusTable.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatusTable.setDescription('A table containing status information of links within a data center.')
gtmLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusName"))
if mibBuilder.loadTexts: gtmLinkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatusEntry.setDescription('Columns in the gtmLinkStatus Table')
gtmLinkStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusName.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatusName.setDescription('The name of a link.')
gtmLinkStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatusAvailState.setDescription('The availability of the specified link indicated by color.\n\t\tnone - error;\n\t\tgreen - available in some capacity;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t\tgray - unlicensed.')
gtmLinkStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatusEnabledState.setDescription('The activity status of the specified link, as specified \n\t\tby the user.')
gtmLinkStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmLinkStatusParentType.setDescription('Deprecated! This is an internal data.\n\t\tThe type of parent object which disabled the specified link.')
gtmLinkStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatusDetailReason.setDescription("The detail description of the specified link's status.")
gtmPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolNumber.setStatus('current')
if mibBuilder.loadTexts: gtmPoolNumber.setDescription('The number of gtmPool entries in the table.')
gtmPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2), )
if mibBuilder.loadTexts: gtmPoolTable.setStatus('current')
if mibBuilder.loadTexts: gtmPoolTable.setDescription('A table containing information of pools for GTM (Global Traffic Management).')
gtmPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolPoolType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolName"))
if mibBuilder.loadTexts: gtmPoolEntry.setStatus('current')
if mibBuilder.loadTexts: gtmPoolEntry.setDescription('Columns in the gtmPool Table')
gtmPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolName.setDescription('The name of a pool.')
gtmPoolTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolTtl.setStatus('current')
if mibBuilder.loadTexts: gtmPoolTtl.setDescription('The TTL value for the specified pool.')
gtmPoolEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmPoolEnabled.setDescription('The state indicating whether the specified pool is enabled or not.')
gtmPoolVerifyMember = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolVerifyMember.setStatus('current')
if mibBuilder.loadTexts: gtmPoolVerifyMember.setDescription('The state indicating whether or not to verify pool member availability before using it.')
gtmPoolDynamicRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolDynamicRatio.setStatus('current')
if mibBuilder.loadTexts: gtmPoolDynamicRatio.setDescription('The state indicating whether or not to use dynamic ratio to modify \n\t\tthe behavior of QOS (Quality Of Service) for the specified pool.')
gtmPoolAnswersToReturn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolAnswersToReturn.setStatus('current')
if mibBuilder.loadTexts: gtmPoolAnswersToReturn.setDescription('The number of answers to return for a given request from the\n\t        specified pool. A maximum of up to 16 answers is allowed.')
gtmPoolLbMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLbMode.setStatus('current')
if mibBuilder.loadTexts: gtmPoolLbMode.setDescription('The preferred load balancing method for the specified pool.')
gtmPoolAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolAlternate.setStatus('current')
if mibBuilder.loadTexts: gtmPoolAlternate.setDescription('The alternate load balancing method for the specified pool.')
gtmPoolFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallback.setStatus('current')
if mibBuilder.loadTexts: gtmPoolFallback.setDescription('The fallback load balancing method for the specified pool.')
gtmPoolManualResume = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolManualResume.setStatus('current')
if mibBuilder.loadTexts: gtmPoolManualResume.setDescription('The state indicating whether or not to disable pool member \n\t\twhen the pool member status goes from Green to Red.')
gtmPoolQosCoeffRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffRtt.setStatus('current')
if mibBuilder.loadTexts: gtmPoolQosCoeffRtt.setDescription('The round trip time QOS coefficient for the specified pool.')
gtmPoolQosCoeffHops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffHops.setStatus('current')
if mibBuilder.loadTexts: gtmPoolQosCoeffHops.setDescription('The hop count QOS coefficient for the specified pool.')
gtmPoolQosCoeffTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffTopology.setStatus('current')
if mibBuilder.loadTexts: gtmPoolQosCoeffTopology.setDescription('The topology QOS coefficient for the specified pool')
gtmPoolQosCoeffHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffHitRatio.setStatus('current')
if mibBuilder.loadTexts: gtmPoolQosCoeffHitRatio.setDescription('The ping packet completion rate QOS coefficient for the specified pool.')
gtmPoolQosCoeffPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffPacketRate.setStatus('current')
if mibBuilder.loadTexts: gtmPoolQosCoeffPacketRate.setDescription('The packet rate QOS coefficient for the specified pool.')
gtmPoolQosCoeffVsCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffVsCapacity.setStatus('current')
if mibBuilder.loadTexts: gtmPoolQosCoeffVsCapacity.setDescription('The virtual server capacity QOS coefficient for the specified pool.')
gtmPoolQosCoeffBps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffBps.setStatus('current')
if mibBuilder.loadTexts: gtmPoolQosCoeffBps.setDescription('The bandwidth QOS coefficient for the specified pool.')
gtmPoolQosCoeffLcs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffLcs.setStatus('current')
if mibBuilder.loadTexts: gtmPoolQosCoeffLcs.setDescription('The link capacity QOS coefficient for the specified pool.')
gtmPoolQosCoeffConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffConnRate.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolQosCoeffConnRate.setDescription('Deprecated!\n\t\tReplaced by gtmPoolQosCoeffVsScore.\n\t\tThe connection rate QOS coefficient for the specified pool.')
gtmPoolFallbackIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 20), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallbackIpType.setStatus('current')
if mibBuilder.loadTexts: gtmPoolFallbackIpType.setDescription('The IP address type of gtmPoolFallbackIp. This field is used\n\t        to store the IPv4 fallback IP address type for A type pools and\n\t        the IPv6 fallback IP address type for AAAA type pools.')
gtmPoolFallbackIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 21), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallbackIp.setStatus('current')
if mibBuilder.loadTexts: gtmPoolFallbackIp.setDescription('The fallback/emergency failure IP for the specified pool. It is\n\t\tinterpreted within the context of a gtmPoolFallbackIpType value.\n\t        This field is used to store the IPv4 fallback IP address for A type\n\t        pools and the IPv6 fallback IP address for AAAA type pools.')
gtmPoolCname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 22), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolCname.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolCname.setDescription('Deprecated! No longer used. To achieve similar behavior please use\n\t        a CNAME type pool member with static target setting enabled.\n\t        The CNAME (canonical name) for the specified pool. CNAME is also\n\t        referred to as a CNAME record, a record in a DNS database that\n\t        indicates the true, or canonical, host name of a computer that its\n\t        aliases are associated with. (eg. www.wip.d.com).')
gtmPoolLimitCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitCpuUsageEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmPoolLimitCpuUsageEnabled.setDescription('The state indicating whether to set limit of CPU usage is enabled \n\t\tor not for the specified pool.')
gtmPoolLimitMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitMemAvailEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmPoolLimitMemAvailEnabled.setDescription('The state indicating whether to set limit of available memory \n\t\tis enabled or not for the specified pool.')
gtmPoolLimitBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitBitsPerSecEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmPoolLimitBitsPerSecEnabled.setDescription('The state indicating whether to limit of number of bits per second \n\t\tis enabled or not for the specified pool.')
gtmPoolLimitPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitPktsPerSecEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmPoolLimitPktsPerSecEnabled.setDescription('The state indicating whether to set limit of number of packets \n\t\tper second is enabled or not for the specified pool.')
gtmPoolLimitConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitConnEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmPoolLimitConnEnabled.setDescription('The state indicating whether to set limit of total connections \n\t\tis enabled or not for the specified pool.')
gtmPoolLimitConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitConnPerSecEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolLimitConnPerSecEnabled.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe state indicating whether to set limit of connections per second \n\t\tis enabled or not for the specified pool.')
gtmPoolLimitCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitCpuUsage.setStatus('current')
if mibBuilder.loadTexts: gtmPoolLimitCpuUsage.setDescription('The limit of CPU usage as a percentage for the specified pool.')
gtmPoolLimitMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitMemAvail.setStatus('current')
if mibBuilder.loadTexts: gtmPoolLimitMemAvail.setDescription('The limit of memory available in bytes for the specified pool.')
gtmPoolLimitBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: gtmPoolLimitBitsPerSec.setDescription('The limit of number of bits per second for the specified pool.')
gtmPoolLimitPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: gtmPoolLimitPktsPerSec.setDescription('The limit of number of packets per second for the specified pool.')
gtmPoolLimitConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitConn.setStatus('current')
if mibBuilder.loadTexts: gtmPoolLimitConn.setDescription('The limit of total number of connections for the specified pool.')
gtmPoolLimitConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitConnPerSec.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolLimitConnPerSec.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe limit of number of connections per second for the specified pool.')
gtmPoolMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 35), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMonitorRule.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMonitorRule.setDescription('The monitor rule used by the specified pool.')
gtmPoolQosCoeffVsScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffVsScore.setStatus('current')
if mibBuilder.loadTexts: gtmPoolQosCoeffVsScore.setDescription('The relative weight for virtual server (VS) score \n\t\twhen the load balancing mode is set to LB_METHOD_QOS for the specified pool.')
gtmPoolFallbackIpv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 37), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallbackIpv6Type.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolFallbackIpv6Type.setDescription('Deprecated! No longer used. Please use gtmPoolFallbackIpType as this\n\t        field is used to store the IPv4 fallback IP address type for A type\n\t        pools and the IPv6 fallback IP address type for AAAA type pools.\n\t        The IP address type of gtmPoolFallbackIpv6.')
gtmPoolFallbackIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 38), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallbackIpv6.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolFallbackIpv6.setDescription('Deprecated! No longer used. Please use gtmPoolFallbackIp as this\n\t        field is used to store the IPv4 fallback IP address for A type pools\n\t        and the IPv6 fallback IP address for AAAA type pools.\n\t\tThe fallback/emergency failure IPv6 IP address for the specified pool. It is\n\t\tinterpreted within the context of a gtmPoolFallbackIpv6Type value.')
gtmPoolPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolPoolType.setStatus('current')
if mibBuilder.loadTexts: gtmPoolPoolType.setDescription('The type of a pool.')
gtmPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatResetStats.setDescription('The action to reset resettable statistics data in gtmPoolStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatNumber.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatNumber.setDescription('The number of gtmPoolStat entries in the table.')
gtmPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3), )
if mibBuilder.loadTexts: gtmPoolStatTable.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatTable.setDescription('A table containing statistics information of pools in the GTM (Global Traffic Management).')
gtmPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolStatName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolStatPoolType"))
if mibBuilder.loadTexts: gtmPoolStatEntry.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatEntry.setDescription('Columns in the gtmPoolStat Table')
gtmPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatName.setDescription('The name of a pool.')
gtmPoolStatPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatPreferred.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatPreferred.setDescription('The number of times which the preferred load balance method is used \n\t\tfor the specified pool.')
gtmPoolStatAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatAlternate.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatAlternate.setDescription('The number of times which the alternate load balance method is used \n\t\tfor the specified pool.')
gtmPoolStatFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatFallback.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatFallback.setDescription('The number of times which the fallback load balance method is used\n\t\tfor the specified pool.')
gtmPoolStatDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatDropped.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatDropped.setDescription('The number of dropped DNS messages for the specified pool.')
gtmPoolStatExplicitIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatExplicitIp.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolStatExplicitIp.setDescription('Deprecated! The number of times which a LDNS  was persisted to the\n\t        specified pool by the explicit IP rule.')
gtmPoolStatReturnToDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatReturnToDns.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatReturnToDns.setDescription('The number of times which a resolve was returned to DNS (for resolution) \n\t\tfor the specified pool.')
gtmPoolStatReturnFromDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatReturnFromDns.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatReturnFromDns.setDescription('The number of times which a resolve was returned from DNS for the\n\t        specified pool.')
gtmPoolStatCnameResolutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatCnameResolutions.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolStatCnameResolutions.setDescription('Deprecated! No longer useful.\n\t        The number of times which a query is resolved by the CNAME of the\n\t        specified pool.')
gtmPoolStatPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatPoolType.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatPoolType.setDescription('The type of a pool.')
gtmPoolMbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrNumber.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrNumber.setDescription('The number of gtmPoolMember entries in the table.')
gtmPoolMbrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2), )
if mibBuilder.loadTexts: gtmPoolMbrTable.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrTable.setDescription('A table containing information of pool members for GTM (Global Traffic Management).')
gtmPoolMbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrPoolType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrVsName"))
if mibBuilder.loadTexts: gtmPoolMbrEntry.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrEntry.setDescription('Columns in the gtmPoolMbr Table')
gtmPoolMbrPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrPoolName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrPoolName.setDescription('The name of the pool to which the specified member belongs.')
gtmPoolMbrIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrIpType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrIpType.setDescription('Deprecated! use server_name and vs_name instead, \n\t\tThe IP address type of gtmPoolMemberIp.')
gtmPoolMbrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrIp.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrIp.setDescription('Deprecated! use server_name and vs_name instead, \n\t\tThe IP address of a pool member. It is interpreted within\n\t        the context of gtmPoolMemberIpType value.')
gtmPoolMbrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrPort.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrPort.setDescription('Deprecated! use server_name and vs_name instead, \n\t \tThe port of a pool member.')
gtmPoolMbrVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrVsName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrVsName.setDescription('The name of the virtual server with which the specified pool member \n\t\tis associated.')
gtmPoolMbrOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrOrder.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrOrder.setDescription('The order of the specified pool member in the associated pool. \n\t\tIt is zero-based.')
gtmPoolMbrLimitCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitCpuUsageEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrLimitCpuUsageEnabled.setDescription('The state indicating whether to set limit of CPU usage is enabled \n\t\tor not for the specified pool member.')
gtmPoolMbrLimitMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitMemAvailEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrLimitMemAvailEnabled.setDescription('The state indicating whether or not to set limit of available memory \n\t\tis enabled for the specified pool member.')
gtmPoolMbrLimitBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitBitsPerSecEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrLimitBitsPerSecEnabled.setDescription('The state indicating whether or not to limit of number of bits per \n\t\tsecond is enabled  for the specified pool member.')
gtmPoolMbrLimitPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitPktsPerSecEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrLimitPktsPerSecEnabled.setDescription('The state indicating whether or not to set limit of number of packets \n\t\tper second is enabled for the specified pool member.')
gtmPoolMbrLimitConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitConnEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrLimitConnEnabled.setDescription('The state indicating whether or not to set limit of total connections \n\t\tis enabled  for the specified pool member.')
gtmPoolMbrLimitConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitConnPerSecEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrLimitConnPerSecEnabled.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe state indicating whether or not to set limit of connections \n\t\tper second is enabled for the specified pool member.')
gtmPoolMbrLimitCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitCpuUsage.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrLimitCpuUsage.setDescription('The limit of CPU usage as a percentage for the specified pool member.')
gtmPoolMbrLimitMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitMemAvail.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrLimitMemAvail.setDescription('The limit of memory available in bytes for the specified pool member.')
gtmPoolMbrLimitBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrLimitBitsPerSec.setDescription('The limit of number of bits per second for the specified pool member.')
gtmPoolMbrLimitPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrLimitPktsPerSec.setDescription('The limit of number of packets per second for the specified pool member.')
gtmPoolMbrLimitConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitConn.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrLimitConn.setDescription('The limit of total number of connections for the specified pool member.')
gtmPoolMbrLimitConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitConnPerSec.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrLimitConnPerSec.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe limit of number of connections per second for the specified pool member.')
gtmPoolMbrMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrMonitorRule.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrMonitorRule.setDescription('The monitor rule used by the specified pool member.')
gtmPoolMbrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrEnabled.setDescription('The state indicating whether the specified pool member is enabled or not.')
gtmPoolMbrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrRatio.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrRatio.setDescription('The pool member ratio.')
gtmPoolMbrServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 22), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrServerName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrServerName.setDescription('The name of the server with which the specified pool_member is associated.')
gtmPoolMbrPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrPoolType.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrPoolType.setDescription('The type of the pool to which the specified member belongs.')
gtmPoolMbrStaticTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStaticTarget.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStaticTarget.setDescription('The state indicating whether or not the pool member is a\n\t        static target CNAME. The default is false. This is only used\n\t        on CNAME type pool members.')
gtmPoolMbrRdataPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrRdataPriority.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrRdataPriority.setDescription('The pool member RDATA priority. The default is 10. This is\n\t        only used on MX or SRV type pool members.')
gtmPoolMbrRdataWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrRdataWeight.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrRdataWeight.setDescription('The pool member RDATA weight. The default is 10. This is\n\t        only used on SRV type pool members.')
gtmPoolMbrRdataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrRdataPort.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrRdataPort.setDescription('The pool member RDATA port. The default is 0. This is only\n\t        used on SRV type pool members.')
gtmPoolMbrRdataOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrRdataOrder.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrRdataOrder.setDescription('The pool member RDATA order. The default is 10. This is only\n\t        used on NAPTR type pool members.')
gtmPoolMbrRdataPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrRdataPreference.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrRdataPreference.setDescription('The pool member RDATA preference. The default is 10. This is\n\t        only used on NAPTR type pool members.')
gtmPoolMbrRdataFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 30), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrRdataFlags.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrRdataFlags.setDescription("The pool member RDATA flags. If specified, valid strings are\n\t        either 'a' for address type or 's' for service type. This is\n\t        only used on NAPTR type pool members.")
gtmPoolMbrRdataService = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 31), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrRdataService.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrRdataService.setDescription('The pool member RDATA service. This is only used on\n\t        NAPTR type pool members.')
gtmPoolStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusNumber.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatusNumber.setDescription('The number of gtmPoolStatus entries in the table.')
gtmPoolStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2), )
if mibBuilder.loadTexts: gtmPoolStatusTable.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatusTable.setDescription('A table containing status information of pools in the GTM (Global Traffic Management).')
gtmPoolStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusPoolType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusName"))
if mibBuilder.loadTexts: gtmPoolStatusEntry.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatusEntry.setDescription('Columns in the gtmPoolStatus Table')
gtmPoolStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatusName.setDescription('The name of a pool.')
gtmPoolStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatusAvailState.setDescription('The availability of the specified pool indicated by color.\n\t\tnone - error;\n\t\tgreen - available in some capacity;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t\tgray - unlicensed.')
gtmPoolStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatusEnabledState.setDescription('The activity status of the specified pool, as specified \n\t\tby the user.')
gtmPoolStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolStatusParentType.setDescription('Deprecated! This is an internal data.\n\t\tThe type of parent object which disabled the specified pool.')
gtmPoolStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatusDetailReason.setDescription("The detail description of the specified pool's status.")
gtmPoolStatusPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusPoolType.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatusPoolType.setDescription('The type of a pool.')
gtmPoolMbrDepsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsNumber.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrDepsNumber.setDescription('The number of gtmPoolMemberDepends entries in the table.')
gtmPoolMbrDepsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2), )
if mibBuilder.loadTexts: gtmPoolMbrDepsTable.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrDepsTable.setDescription("A table containing information of pool members' dependencies on virtual servers for GTM (Global Traffic Management).")
gtmPoolMbrDepsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVsName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsPoolType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsDependServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsDependVsName"))
if mibBuilder.loadTexts: gtmPoolMbrDepsEntry.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrDepsEntry.setDescription('Columns in the gtmPoolMbrDeps Table')
gtmPoolMbrDepsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsIpType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrDepsIpType.setDescription('Deprecated! use server_name and vs_name instead, \n\t\tThe IP address type of gtmPoolMbrDepsIp.')
gtmPoolMbrDepsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsIp.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrDepsIp.setDescription('Deprecated! use server_name and vs_name instead, \n\t\tThe IP address of a pool member. It is interpreted within\n\t        the context of gtmPoolMbrDepsIpType value.')
gtmPoolMbrDepsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsPort.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrDepsPort.setDescription('Deprecated! use server_name and vs_name instead, \n\t \tThe port of a pool member.')
gtmPoolMbrDepsPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsPoolName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrDepsPoolName.setDescription('The name of a pool to which the specified member belongs.')
gtmPoolMbrDepsVipType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsVipType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrDepsVipType.setDescription('Deprecated! use depend server_name and vs_name instead, \n\t\tThe IP address type of gtmPoolMbrDepsVip')
gtmPoolMbrDepsVip = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsVip.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrDepsVip.setDescription('Deprecated! use depend server_name and vs_name instead, \n\t\tThe IP address of a virtual server on which the specified pool member depends. \n\t\tIt is interpreted within the context of gtmPoolMbrDepsVipType value.')
gtmPoolMbrDepsVport = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsVport.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrDepsVport.setDescription('Deprecated! use depend server_name and vs_name instead, \n\t \tThe port of a virtual server on  which the specified pool member depends.')
gtmPoolMbrDepsServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsServerName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrDepsServerName.setDescription('The name of the server with which the specified pool_member is associated.')
gtmPoolMbrDepsVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsVsName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrDepsVsName.setDescription('The virtual server name with which the pool member associated.')
gtmPoolMbrDepsDependServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsDependServerName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrDepsDependServerName.setDescription('The server name of a virtual server on which the specified pool member depends.')
gtmPoolMbrDepsDependVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsDependVsName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrDepsDependVsName.setDescription('The virtual server name on which the specified pool member depends.')
gtmPoolMbrDepsPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsPoolType.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrDepsPoolType.setDescription('The type of a pool to which the specified member belongs.')
gtmPoolMbrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmPoolMbrStatResetStats.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatResetStats.setDescription('The action to reset resettable statistics data in gtmPoolMemberStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmPoolMbrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatNumber.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatNumber.setDescription('The number of gtmPoolMemberStat entries in the table.')
gtmPoolMbrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3), )
if mibBuilder.loadTexts: gtmPoolMbrStatTable.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatTable.setDescription('A table containing statistics information of pool members for GTM (Global Traffic Management).')
gtmPoolMbrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatPoolType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatVsName"))
if mibBuilder.loadTexts: gtmPoolMbrStatEntry.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatEntry.setDescription('Columns in the gtmPoolMbrStat Table')
gtmPoolMbrStatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatPoolName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatPoolName.setDescription('The name of the parent pool to which the member belongs.')
gtmPoolMbrStatIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatIpType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrStatIpType.setDescription('Deprecated! use server_name and vs_name instead, \n\t\tThe IP address type of gtmPoolMemberStatIp.')
gtmPoolMbrStatIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatIp.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrStatIp.setDescription('Deprecated! use server_name and vs_name instead, \n\t\tThe IP address of a pool member. It is interpreted within\n\t        the context of gtmPoolMemberStatIpType value.')
gtmPoolMbrStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatPort.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrStatPort.setDescription('Deprecated! use server_name and vs_name instead, \n\t \tThe port of a pool member.')
gtmPoolMbrStatPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatPreferred.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatPreferred.setDescription('The number of times which the preferred load balance method is used \n\t\tfor the specified pool member.')
gtmPoolMbrStatAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatAlternate.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatAlternate.setDescription('The number of times which the alternate load balance method is used \n\t\tfor the specified pool member.')
gtmPoolMbrStatFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatFallback.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatFallback.setDescription('The number of times which the fallback load balance method is used \n\t\tfor the specified pool member.')
gtmPoolMbrStatServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatServerName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatServerName.setDescription('The name of the server with which the specified pool_member is associated.')
gtmPoolMbrStatVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatVsName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatVsName.setDescription('The name of the specified virtual server.')
gtmPoolMbrStatPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatPoolType.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatPoolType.setDescription('The type of a pool to which the specified member belongs.')
gtmPoolMbrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusNumber.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatusNumber.setDescription('The number of gtmPoolMemberStatus entries in the table.')
gtmPoolMbrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2), )
if mibBuilder.loadTexts: gtmPoolMbrStatusTable.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatusTable.setDescription('A table containing status information of pool members for GTM (Global Traffic Management).')
gtmPoolMbrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusPoolType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusVsName"))
if mibBuilder.loadTexts: gtmPoolMbrStatusEntry.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatusEntry.setDescription('Columns in the gtmPoolMbrStatus Table')
gtmPoolMbrStatusPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusPoolName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatusPoolName.setDescription('The name of the pool to which the specified member belongs.')
gtmPoolMbrStatusIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusIpType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrStatusIpType.setDescription('Deprecated! use server_name and vs_name instead, \n\t\tThe IP address type of gtmPoolMbrStatusIp.')
gtmPoolMbrStatusIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusIp.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrStatusIp.setDescription('Deprecated! use server_name and vs_name instead, \n\t\tThe IP address of a pool member. It is interpreted within\n\t        the context of gtmPoolMbrStatusIpType value.')
gtmPoolMbrStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusPort.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrStatusPort.setDescription('Deprecated! use server_name and vs_name instead, \n\t \tThe port of a pool member.')
gtmPoolMbrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatusAvailState.setDescription('The availability of the specified pool member indicated by color.\n\t\tnone - error;\n\t\tgreen - available in some capacity;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t\tgray - unlicensed.')
gtmPoolMbrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatusEnabledState.setDescription('The activity status of the specified pool member, as specified \n\t\tby the user.')
gtmPoolMbrStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmPoolMbrStatusParentType.setDescription('Deprecated! This is an internal data.\n\t\tThe type of parent object which disabled the specified pool member.')
gtmPoolMbrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatusDetailReason.setDescription("The detail description of the specified node's status.")
gtmPoolMbrStatusVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusVsName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatusVsName.setDescription('The name of the virtual server with which the specified pool member \n\t\tis associated.')
gtmPoolMbrStatusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusServerName.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatusServerName.setDescription('The name of the server with which the specified pool_member is associated.')
gtmPoolMbrStatusPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusPoolType.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatusPoolType.setDescription('The type of the pool to which the specified member belongs.')
gtmRegionEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegionEntryNumber.setStatus('current')
if mibBuilder.loadTexts: gtmRegionEntryNumber.setDescription('The number of gtmRegionEntry entries in the table.')
gtmRegionEntryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 2), )
if mibBuilder.loadTexts: gtmRegionEntryTable.setStatus('current')
if mibBuilder.loadTexts: gtmRegionEntryTable.setDescription('A table containing information of user-defined region definitions for GTM (Global Traffic Management).')
gtmRegionEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRegionEntryName"))
if mibBuilder.loadTexts: gtmRegionEntryEntry.setStatus('current')
if mibBuilder.loadTexts: gtmRegionEntryEntry.setDescription('Columns in the gtmRegionEntry Table')
gtmRegionEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegionEntryName.setStatus('current')
if mibBuilder.loadTexts: gtmRegionEntryName.setDescription('The name of region entry.')
gtmRegionEntryRegionDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("user", 0), ("acl", 1), ("isp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegionEntryRegionDbType.setStatus('current')
if mibBuilder.loadTexts: gtmRegionEntryRegionDbType.setDescription("The region's database type.")
gtmRegItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemNumber.setStatus('current')
if mibBuilder.loadTexts: gtmRegItemNumber.setDescription('The number of gtmRegItem entries in the table.')
gtmRegItemTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2), )
if mibBuilder.loadTexts: gtmRegItemTable.setStatus('current')
if mibBuilder.loadTexts: gtmRegItemTable.setDescription('A table containing information of region items in associated region for GTM (Global Traffic Management).')
gtmRegItemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegionDbType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegionName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemNegate"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegEntry"))
if mibBuilder.loadTexts: gtmRegItemEntry.setStatus('current')
if mibBuilder.loadTexts: gtmRegItemEntry.setDescription('Columns in the gtmRegItem Table')
gtmRegItemRegionDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("user", 0), ("acl", 1), ("isp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemRegionDbType.setStatus('current')
if mibBuilder.loadTexts: gtmRegItemRegionDbType.setDescription("The region's database type.")
gtmRegItemRegionName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemRegionName.setStatus('current')
if mibBuilder.loadTexts: gtmRegItemRegionName.setDescription('The region name.')
gtmRegItemType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cidr", 0), ("region", 1), ("continent", 2), ("country", 3), ("state", 4), ("pool", 5), ("datacenter", 6), ("ispregion", 7), ("geoipIsp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemType.setStatus('current')
if mibBuilder.loadTexts: gtmRegItemType.setDescription("The region item's type.")
gtmRegItemNegate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemNegate.setStatus('current')
if mibBuilder.loadTexts: gtmRegItemNegate.setDescription('The state indicating whether the region member to be interpreted \n\t\tas not equal to the region member options selected.')
gtmRegItemRegEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemRegEntry.setStatus('current')
if mibBuilder.loadTexts: gtmRegItemRegEntry.setDescription('The name of the region entry.')
gtmRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleNumber.setStatus('current')
if mibBuilder.loadTexts: gtmRuleNumber.setDescription('The number of gtmRule entries in the table.')
gtmRuleTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2), )
if mibBuilder.loadTexts: gtmRuleTable.setStatus('current')
if mibBuilder.loadTexts: gtmRuleTable.setDescription('A table containing information of rules for GTM (Global Traffic Management).')
gtmRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleName"))
if mibBuilder.loadTexts: gtmRuleEntry.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEntry.setDescription('Columns in the gtmRule Table')
gtmRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleName.setStatus('current')
if mibBuilder.loadTexts: gtmRuleName.setDescription('The name of a rule.')
gtmRuleDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleDefinition.setStatus('deprecated')
if mibBuilder.loadTexts: gtmRuleDefinition.setDescription('Deprecated!\n\t\tThe definition of the specified rule.')
gtmRuleConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleConfigSource.setStatus('current')
if mibBuilder.loadTexts: gtmRuleConfigSource.setDescription('The type of rule that the specified rule is associating with.\n\t        It is either a base/pre-configured rule or user defined rule.')
gtmRuleEventNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventNumber.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventNumber.setDescription('The number of gtmRuleEvent entries in the table.')
gtmRuleEventTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2), )
if mibBuilder.loadTexts: gtmRuleEventTable.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventTable.setDescription('A table containing information of rule events for GTM (Global Traffic Management).')
gtmRuleEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventEventType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventPriority"))
if mibBuilder.loadTexts: gtmRuleEventEntry.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventEntry.setDescription('Columns in the gtmRuleEvent Table')
gtmRuleEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventName.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventName.setDescription('The name of a rule.')
gtmRuleEventEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventEventType.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventEventType.setDescription('The event type for which the specified rule is used.')
gtmRuleEventPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventPriority.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventPriority.setDescription('The execution priority of the specified rule event.')
gtmRuleEventScript = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventScript.setStatus('deprecated')
if mibBuilder.loadTexts: gtmRuleEventScript.setDescription('Deprecated!\n\t\tThe TCL script for the specified rule event.')
gtmRuleEventStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmRuleEventStatResetStats.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventStatResetStats.setDescription('The action to reset resettable statistics data in gtmRuleEventStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmRuleEventStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatNumber.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventStatNumber.setDescription('The number of gtmRuleEventStat entries in the table.')
gtmRuleEventStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3), )
if mibBuilder.loadTexts: gtmRuleEventStatTable.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventStatTable.setDescription('A table containing statistics information of rules for GTM (Global Traffic Management).')
gtmRuleEventStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatEventType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatPriority"))
if mibBuilder.loadTexts: gtmRuleEventStatEntry.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventStatEntry.setDescription('Columns in the gtmRuleEventStat Table')
gtmRuleEventStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatName.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventStatName.setDescription('The name of the rule.')
gtmRuleEventStatEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatEventType.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventStatEventType.setDescription('The event type for which the rule is used.')
gtmRuleEventStatPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatPriority.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventStatPriority.setDescription('The execution priority of this rule event.')
gtmRuleEventStatFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatFailures.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventStatFailures.setDescription('The number of failures for executing this rule.')
gtmRuleEventStatAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatAborts.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventStatAborts.setDescription('The number of aborts when executing this rule.')
gtmRuleEventStatTotalExecutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatTotalExecutions.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventStatTotalExecutions.setDescription('The total number of executions for this rule.')
gtmServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerNumber.setStatus('current')
if mibBuilder.loadTexts: gtmServerNumber.setDescription('The number of gtmServer entries in the table.')
gtmServerTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2), )
if mibBuilder.loadTexts: gtmServerTable.setStatus('current')
if mibBuilder.loadTexts: gtmServerTable.setDescription('A table containing information of servers within associated \n\t\tdata center for GTM (Global Traffic Management).')
gtmServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmServerName"))
if mibBuilder.loadTexts: gtmServerEntry.setStatus('current')
if mibBuilder.loadTexts: gtmServerEntry.setDescription('Columns in the gtmServer Table')
gtmServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerName.setStatus('current')
if mibBuilder.loadTexts: gtmServerName.setDescription('The name of a server.')
gtmServerDcName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerDcName.setStatus('current')
if mibBuilder.loadTexts: gtmServerDcName.setDescription('The name of the data center the specified server belongs to.')
gtmServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("bigipstandalone", 0), ("bigipredundant", 1), ("genericloadbalancer", 2), ("alteonacedirector", 3), ("ciscocss", 4), ("ciscolocaldirectorv2", 5), ("ciscolocaldirectorv3", 6), ("ciscoserverloadbalancer", 7), ("extreme", 8), ("foundryserveriron", 9), ("generichost", 10), ("cacheflow", 11), ("netapp", 12), ("windows2000", 13), ("windowsnt4", 14), ("solaris", 15), ("radware", 16), ("bigip", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerType.setStatus('current')
if mibBuilder.loadTexts: gtmServerType.setDescription('The type of the server.')
gtmServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmServerEnabled.setDescription('The state indicating whether the specified server is enabled or not.')
gtmServerLimitCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitCpuUsageEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmServerLimitCpuUsageEnabled.setDescription('The state indicating whether to set limit of CPU usage is enabled \n\t\tor not for the server.')
gtmServerLimitMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitMemAvailEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmServerLimitMemAvailEnabled.setDescription('The state indicating whether to set limit of available memory is \n\t\tenabled or not for the server.')
gtmServerLimitBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitBitsPerSecEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmServerLimitBitsPerSecEnabled.setDescription('The state indicating whether to limit of number of bits per second \n\t\tis enabled or not for the server.')
gtmServerLimitPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitPktsPerSecEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmServerLimitPktsPerSecEnabled.setDescription('The state indicating whether to set limit of number of packets \n\t\tper second is enabled or not for the server.')
gtmServerLimitConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitConnEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmServerLimitConnEnabled.setDescription('The state indicating whether to set limit of total connections \n\t\tis enabled or not for the server.')
gtmServerLimitConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitConnPerSecEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerLimitConnPerSecEnabled.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe state indicating whether to set limit of connections per second \n\t\tis enabled or not for the server.')
gtmServerLimitCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitCpuUsage.setStatus('current')
if mibBuilder.loadTexts: gtmServerLimitCpuUsage.setDescription('The limit of CPU usage as a percentage for the server.')
gtmServerLimitMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitMemAvail.setStatus('current')
if mibBuilder.loadTexts: gtmServerLimitMemAvail.setDescription('The limit of memory available in bytes for the server.')
gtmServerLimitBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: gtmServerLimitBitsPerSec.setDescription('The limit of number of bits per second for the server.')
gtmServerLimitPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: gtmServerLimitPktsPerSec.setDescription('The limit of number of packets per second for the server.')
gtmServerLimitConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitConn.setStatus('current')
if mibBuilder.loadTexts: gtmServerLimitConn.setDescription('The limit of total number of connections for the server.')
gtmServerLimitConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitConnPerSec.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerLimitConnPerSec.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe limit of number of connections per second for the server.')
gtmServerProberType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerProberType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerProberType.setDescription('Deprecated! This is replaced by prober_pool.\n\t\tThe prober address type of gtmServerProber.')
gtmServerProber = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerProber.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerProber.setDescription('Deprecated! This is replaced by prober_pool.\n\t\tThe prober address for the specified server. It is interpreted within \n\t\tthe context of an gtmServerProberType value.')
gtmServerMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerMonitorRule.setStatus('current')
if mibBuilder.loadTexts: gtmServerMonitorRule.setDescription('The name of monitor rule this server is used.')
gtmServerAllowSvcChk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerAllowSvcChk.setStatus('current')
if mibBuilder.loadTexts: gtmServerAllowSvcChk.setDescription('The state indicating whether service check is allowed for \n\t\tthe specified server.')
gtmServerAllowPath = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerAllowPath.setStatus('current')
if mibBuilder.loadTexts: gtmServerAllowPath.setDescription('The state indicating whether path information gathering is allowed \n\t\tfor the specified server.')
gtmServerAllowSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerAllowSnmp.setStatus('current')
if mibBuilder.loadTexts: gtmServerAllowSnmp.setDescription('The state indicating whether SNMP information gathering is allowed \n\t\tfor the specified server.')
gtmServerAutoconfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("enablednoautodelete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerAutoconfState.setStatus('current')
if mibBuilder.loadTexts: gtmServerAutoconfState.setDescription('The state of auto configuration for BIGIP/3DNS servers. \n\t        for the specified server.')
gtmServerLinkAutoconfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("enablednoautodelete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLinkAutoconfState.setStatus('current')
if mibBuilder.loadTexts: gtmServerLinkAutoconfState.setDescription('The state of link auto configuration for BIGIP/3DNS servers. \n\t        for the specified server.')
gtmServerStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmServerStatResetStats.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatResetStats.setDescription('Deprecated!.\n\t\tThe action to reset resettable statistics data in gtmServerStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmServerStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatNumber.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatNumber.setDescription('Deprecated!.\n\t\tThe number of gtmServerStat entries in the table.')
gtmServerStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3), )
if mibBuilder.loadTexts: gtmServerStatTable.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatTable.setDescription('Deprecated! Replaced by gtmServerStat2 table.\n\t\tA table containing statistics information of servers within associated\n\t\t data center for GTM (Global Traffic Management).')
gtmServerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmServerStatName"))
if mibBuilder.loadTexts: gtmServerStatEntry.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatEntry.setDescription('Columns in the gtmServerStat Table')
gtmServerStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatName.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatName.setDescription('Deprecated! Replaced by data in gtmServerStat2 table.\n\t\tThe name of a server.')
gtmServerStatUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatUnitId.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatUnitId.setDescription('Deprecated! Replaced by data in gtmServerStat2 table.\n\t\tThe unit ID of the specified server.')
gtmServerStatVsPicks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatVsPicks.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatVsPicks.setDescription('Deprecated! Replaced by data in gtmServerStat2 table.\n\t\tHow many times a virtual server of the specified server was picked \n\t\tduring resolution of a domain name. I.E amazon.com got resolved to \n\t\ta particular virtual address X times.')
gtmServerStatCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatCpuUsage.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatCpuUsage.setDescription('Deprecated! Replaced by data in gtmServerStat2 table.\n\t\tThe CPU usage in percentage for the specified server.')
gtmServerStatMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatMemAvail.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatMemAvail.setDescription('Deprecated! Replaced by data in gtmServerStat2 table.\n\t\tThe memory available in bytes for the specified server.')
gtmServerStatBitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatBitsPerSecIn.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatBitsPerSecIn.setDescription('Deprecated! Replaced by data in gtmServerStat2 table.\n\t\tThe number of bits per second received by the specified server.')
gtmServerStatBitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatBitsPerSecOut.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatBitsPerSecOut.setDescription('Deprecated! Replaced by data in gtmServerStat2 table.\n\t\tThe number of bits per second sent from the specified server.')
gtmServerStatPktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatPktsPerSecIn.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatPktsPerSecIn.setDescription('Deprecated! Replaced by data in gtmServerStat2 table.\n\t\tThe number of packets per second received by the specified server.')
gtmServerStatPktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatPktsPerSecOut.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatPktsPerSecOut.setDescription('Deprecated! Replaced by data in gtmServerStat2 table.\n\t\tThe number of packets per second sent from the specified server.')
gtmServerStatConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatConnections.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatConnections.setDescription('Deprecated! Replaced by data in gtmServerStat2 table.\n\t\tThe number of total connections to the specified server.')
gtmServerStatConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatConnRate.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatConnRate.setDescription('Deprecated! Replaced by data in gtmServerStat2 table.\n\t\tThe connection rate (current connection rate/connection rate limit)\n\t\tin percentage for the specified server.')
gtmServerStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusNumber.setStatus('current')
if mibBuilder.loadTexts: gtmServerStatusNumber.setDescription('The number of gtmServerStatus entries in the table.')
gtmServerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2), )
if mibBuilder.loadTexts: gtmServerStatusTable.setStatus('current')
if mibBuilder.loadTexts: gtmServerStatusTable.setDescription('A table containing status information of servers within associated\n\t\t data center for GTM (Global Traffic Management).')
gtmServerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmServerStatusName"))
if mibBuilder.loadTexts: gtmServerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: gtmServerStatusEntry.setDescription('Columns in the gtmServerStatus Table')
gtmServerStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusName.setStatus('current')
if mibBuilder.loadTexts: gtmServerStatusName.setDescription('The name of a server.')
gtmServerStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: gtmServerStatusAvailState.setDescription('The availability of the specified server indicated by color.\n\t\tnone - error;\n\t\tgreen - available in some capacity;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t\tgray - unlicensed.')
gtmServerStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: gtmServerStatusEnabledState.setDescription('The activity status of the specified server, as specified \n\t\tby the user.')
gtmServerStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStatusParentType.setDescription('Deprecated! This is an internal data.\n\t\tThe type of parent object which disabled the specified server.')
gtmServerStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: gtmServerStatusDetailReason.setDescription("The detail description of the specified node's status.")
gtmTopItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemNumber.setStatus('current')
if mibBuilder.loadTexts: gtmTopItemNumber.setDescription('The number of gtmTopItem entries in the table.')
gtmTopItemTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2), )
if mibBuilder.loadTexts: gtmTopItemTable.setStatus('current')
if mibBuilder.loadTexts: gtmTopItemTable.setDescription('A table containing information of topology attributes for GTM (Global Traffic Management).')
gtmTopItemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsNegate"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsEntry"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerNegate"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerEntry"))
if mibBuilder.loadTexts: gtmTopItemEntry.setStatus('current')
if mibBuilder.loadTexts: gtmTopItemEntry.setDescription('Columns in the gtmTopItem Table')
gtmTopItemLdnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cidr", 0), ("region", 1), ("continent", 2), ("country", 3), ("state", 4), ("pool", 5), ("datacenter", 6), ("ispregion", 7), ("geoipIsp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemLdnsType.setStatus('current')
if mibBuilder.loadTexts: gtmTopItemLdnsType.setDescription('The type of topology end point for the LDNS.')
gtmTopItemLdnsNegate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemLdnsNegate.setStatus('current')
if mibBuilder.loadTexts: gtmTopItemLdnsNegate.setDescription('The state indicating whether the end point is not equal to \n\t\tthe definition the LDNS.')
gtmTopItemLdnsEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemLdnsEntry.setStatus('current')
if mibBuilder.loadTexts: gtmTopItemLdnsEntry.setDescription('The LDNS entry which could be an IP address, a region name, \n\t\ta continent, etc.')
gtmTopItemServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cidr", 0), ("region", 1), ("continent", 2), ("country", 3), ("state", 4), ("pool", 5), ("datacenter", 6), ("ispregion", 7), ("geoipIsp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemServerType.setStatus('current')
if mibBuilder.loadTexts: gtmTopItemServerType.setDescription('The type of topology end point for the virtual server.')
gtmTopItemServerNegate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemServerNegate.setStatus('current')
if mibBuilder.loadTexts: gtmTopItemServerNegate.setDescription('The state indicating whether the end point is not equal to \n\t\tthe definition for the virtual server.')
gtmTopItemServerEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemServerEntry.setStatus('current')
if mibBuilder.loadTexts: gtmTopItemServerEntry.setDescription('The server entry which could be an IP address, a region name, \n\t\ta continent, etc.')
gtmTopItemWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemWeight.setStatus('current')
if mibBuilder.loadTexts: gtmTopItemWeight.setDescription('The relative weight for the topology record.')
gtmTopItemOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemOrder.setStatus('current')
if mibBuilder.loadTexts: gtmTopItemOrder.setDescription('The order of the record without longest match sorting.')
gtmVsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsNumber.setStatus('current')
if mibBuilder.loadTexts: gtmVsNumber.setDescription('The number of gtmVirtualServ entries in the table.')
gtmVsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2), )
if mibBuilder.loadTexts: gtmVsTable.setStatus('current')
if mibBuilder.loadTexts: gtmVsTable.setDescription('A table containing information of virtual servers for GTM (Global Traffic Management).')
gtmVsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmVsServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsName"))
if mibBuilder.loadTexts: gtmVsEntry.setStatus('current')
if mibBuilder.loadTexts: gtmVsEntry.setDescription('Columns in the gtmVs Table')
gtmVsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsIpType.setStatus('current')
if mibBuilder.loadTexts: gtmVsIpType.setDescription('The IP address type of gtmVirtualServIp.')
gtmVsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsIp.setStatus('current')
if mibBuilder.loadTexts: gtmVsIp.setDescription('The IP address of a virtual server. It is interpreted \n\t        within the context of a gtmVirtualServIpType value.')
gtmVsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsPort.setStatus('current')
if mibBuilder.loadTexts: gtmVsPort.setDescription('The port of a virtual server.')
gtmVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsName.setStatus('current')
if mibBuilder.loadTexts: gtmVsName.setDescription('The name of the specified virtual server.')
gtmVsServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsServerName.setStatus('current')
if mibBuilder.loadTexts: gtmVsServerName.setDescription('The name of the server with which the specified virtual server associates.')
gtmVsIpXlatedType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsIpXlatedType.setStatus('current')
if mibBuilder.loadTexts: gtmVsIpXlatedType.setDescription('The IP address type of gtmVirtualServIpXlated.')
gtmVsIpXlated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsIpXlated.setStatus('current')
if mibBuilder.loadTexts: gtmVsIpXlated.setDescription('The translated IP address for the specified virtual server.\n\t\tIt is interpreted within the context of a gtmVirtualServIpXlatedType value.')
gtmVsPortXlated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 8), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsPortXlated.setStatus('current')
if mibBuilder.loadTexts: gtmVsPortXlated.setDescription('The translated port for the specified virtual server.')
gtmVsLimitCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitCpuUsageEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmVsLimitCpuUsageEnabled.setDescription('The state indicating whether to set limit of CPU usage is enabled \n\t\tor not for the virtual server.')
gtmVsLimitMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitMemAvailEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmVsLimitMemAvailEnabled.setDescription('The state indicating whether to set limit of available memory is \n\t\tenabled or not for the virtual server.')
gtmVsLimitBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitBitsPerSecEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmVsLimitBitsPerSecEnabled.setDescription('The state indicating whether to limit of number of bits per second \n\t\tis enabled or not for the virtual server.')
gtmVsLimitPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitPktsPerSecEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmVsLimitPktsPerSecEnabled.setDescription('The state indicating whether to set limit of number of packets \n\t\tper second is enabled or not for the virtual server.')
gtmVsLimitConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitConnEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmVsLimitConnEnabled.setDescription('The state indicating whether to set limit of total connections \n\t\tis enabled or not for the virtual server.')
gtmVsLimitConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitConnPerSecEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsLimitConnPerSecEnabled.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe state indicating whether to set limit of connections per second \n\t\tis enabled or not for the virtual server.')
gtmVsLimitCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitCpuUsage.setStatus('current')
if mibBuilder.loadTexts: gtmVsLimitCpuUsage.setDescription('The limit of CPU usage as a percentage for the virtual server.')
gtmVsLimitMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitMemAvail.setStatus('current')
if mibBuilder.loadTexts: gtmVsLimitMemAvail.setDescription('The limit of memory available in bytes for the virtual server.')
gtmVsLimitBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: gtmVsLimitBitsPerSec.setDescription('The limit of number of bits per second for the virtual server.')
gtmVsLimitPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: gtmVsLimitPktsPerSec.setDescription('The limit of number of packets per second for the virtual server.')
gtmVsLimitConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitConn.setStatus('current')
if mibBuilder.loadTexts: gtmVsLimitConn.setDescription('The limit of total number of connections for the virtual server.')
gtmVsLimitConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitConnPerSec.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsLimitConnPerSec.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe limit of number of connections per second for the virtual server.')
gtmVsMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 21), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsMonitorRule.setStatus('current')
if mibBuilder.loadTexts: gtmVsMonitorRule.setDescription('The name of the monitor rule for this virtual server.')
gtmVsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmVsEnabled.setDescription('The state indicating whether the virtual server is enabled or not.')
gtmVsLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 23), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLinkName.setStatus('current')
if mibBuilder.loadTexts: gtmVsLinkName.setDescription('The parent link of this virtual server.')
gtmVsLtmName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 24), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLtmName.setStatus('current')
if mibBuilder.loadTexts: gtmVsLtmName.setDescription('The user configured LTM name of the specified virtual server.\n\t        This string is not populated as a result of monitoring activity.')
gtmVsDepsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsNumber.setStatus('current')
if mibBuilder.loadTexts: gtmVsDepsNumber.setDescription('The number of gtmVirtualServDepends entries in the table.')
gtmVsDepsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2), )
if mibBuilder.loadTexts: gtmVsDepsTable.setStatus('current')
if mibBuilder.loadTexts: gtmVsDepsTable.setDescription("A table containing information of virtual servers' dependencies on other virtual servers for GTM (Global Traffic Management).")
gtmVsDepsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmVsDepsServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVsName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsDepsDependServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsDepsDependVsName"))
if mibBuilder.loadTexts: gtmVsDepsEntry.setStatus('current')
if mibBuilder.loadTexts: gtmVsDepsEntry.setDescription('Columns in the gtmVsDeps Table')
gtmVsDepsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsIpType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsDepsIpType.setDescription('Deprecated! use server_name and vs_name instead, \n\t\tThe IP address type of gtmVsDepsIp.')
gtmVsDepsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsIp.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsDepsIp.setDescription('Deprecated! use server_name and vs_name instead, \n\t\tThe IP address of a virtual server. It is interpreted within\n\t        the context of gtmVsDepsIpType value.')
gtmVsDepsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsPort.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsDepsPort.setDescription('Deprecated! use server_name and vs_name instead, \n\t \tThe port of a virtual server.')
gtmVsDepsVipType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsVipType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsDepsVipType.setDescription('Deprecated! use depend server_name and vs_name instead, \n\t\tThe IP address type of gtmVsDepsVip')
gtmVsDepsVip = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsVip.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsDepsVip.setDescription('Deprecated! use depend server_name and vs_name instead, \n\t\tThe IP address of a virtual server on which the specified virtual server depends. \n\t\tIt is interpreted within the context of gtmVsDepsOnVipType value.')
gtmVsDepsVport = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsVport.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsDepsVport.setDescription('Deprecated! depend use server_name and vs_name instead, \n\t \tThe port of a virtual server on  which the specified virtual server depends.')
gtmVsDepsServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsServerName.setStatus('current')
if mibBuilder.loadTexts: gtmVsDepsServerName.setDescription('The name of the server with which the specified virtual server is associated.')
gtmVsDepsVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsVsName.setStatus('current')
if mibBuilder.loadTexts: gtmVsDepsVsName.setDescription('The virtual server name.')
gtmVsDepsDependServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsDependServerName.setStatus('current')
if mibBuilder.loadTexts: gtmVsDepsDependServerName.setDescription('The server name of a virtual server on which the specified virtual server depends.')
gtmVsDepsDependVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsDependVsName.setStatus('current')
if mibBuilder.loadTexts: gtmVsDepsDependVsName.setDescription('The virtual server name on which the specified virtual server depends.')
gtmVsStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmVsStatResetStats.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatResetStats.setDescription('The action to reset resettable statistics data in gtmVirtualServStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmVsStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatNumber.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatNumber.setDescription('The number of gtmVirtualServStat entries in the table.')
gtmVsStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3), )
if mibBuilder.loadTexts: gtmVsStatTable.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatTable.setDescription('A table containing statistics information of virtual servers \n\t\tfor GTM (Global Traffic Management).')
gtmVsStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmVsStatServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsStatName"))
if mibBuilder.loadTexts: gtmVsStatEntry.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatEntry.setDescription('Columns in the gtmVsStat Table')
gtmVsStatIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatIpType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsStatIpType.setDescription('Deprecated! use server_name and vs_name instead, \n\t\tThe IP address type of gtmVirtualServStatIp.')
gtmVsStatIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatIp.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsStatIp.setDescription('Deprecated! use server_name and vs_name instead, \n\t\tThe IP address of a virtual server. It is interpreted within\n\t        the context of gtmVirtualServStatIpType value.')
gtmVsStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatPort.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsStatPort.setDescription('Deprecated! use server_name and vs_name instead, \n\t \tThe port of a virtual server.')
gtmVsStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatName.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatName.setDescription('The name of the specified virtual server.')
gtmVsStatCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatCpuUsage.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatCpuUsage.setDescription('The CPU usage in percentage for the specified virtual server.')
gtmVsStatMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatMemAvail.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatMemAvail.setDescription('The memory available in bytes for the specified virtual server.')
gtmVsStatBitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatBitsPerSecIn.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatBitsPerSecIn.setDescription('The number of bits per second received by the specified virtual server.')
gtmVsStatBitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatBitsPerSecOut.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatBitsPerSecOut.setDescription('The number of bits per second sent from the specified virtual server.')
gtmVsStatPktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatPktsPerSecIn.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatPktsPerSecIn.setDescription('The number of packets per second received by the specified virtual server.')
gtmVsStatPktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatPktsPerSecOut.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatPktsPerSecOut.setDescription('The number of packets per second sent from the specified virtual server.')
gtmVsStatConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatConnections.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatConnections.setDescription('The number of total connections to the specified virtual server.')
gtmVsStatConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatConnRate.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsStatConnRate.setDescription('Deprecated!\n\t\tReplaced by gtmVsStatVsScore.\n\t\tThe connection rate (current connection rate/connection rate limit)\n\t\tin percentage for the specified virtual server.')
gtmVsStatVsScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatVsScore.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatVsScore.setDescription('A user-defined value that specifies the ranking of the virtual server \n\t\twhen compared to other virtual servers within the same pool.')
gtmVsStatServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatServerName.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatServerName.setDescription('The name of the server with which the specified virtual server is associated.')
gtmVsStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusNumber.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatusNumber.setDescription('The number of gtmVirtualServStatus entries in the table.')
gtmVsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2), )
if mibBuilder.loadTexts: gtmVsStatusTable.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatusTable.setDescription('A table containing status information of virtual servers \n\t\tfor GTM (Global Traffic Management).')
gtmVsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmVsStatusServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsStatusVsName"))
if mibBuilder.loadTexts: gtmVsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatusEntry.setDescription('Columns in the gtmVsStatus Table')
gtmVsStatusIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusIpType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsStatusIpType.setDescription('Deprecated! use server_name and vs_name instead, \n\t\tThe IP address type of gtmVirtualServStatusIp.')
gtmVsStatusIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusIp.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsStatusIp.setDescription('Deprecated! use server_name and vs_name instead, \n\t\tThe IP address of a virtual server. It is interpreted within\n\t        the context of gtmVirtualServStatusIpType value.')
gtmVsStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusPort.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsStatusPort.setDescription('Deprecated! use server_name and vs_name instead, \n\t \tThe port of a virtual server.')
gtmVsStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatusAvailState.setDescription('The availability of the specified virtual server indicated by color.\n\t\tnone - error;\n\t\tgreen - available in some capacity;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t\tgray - unlicensed.')
gtmVsStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatusEnabledState.setDescription('The activity status of the specified virtual server, as specified \n\t\tby the user.')
gtmVsStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmVsStatusParentType.setDescription('Deprecated! This is an internal data.\n\t\tThe type of parent object which disabled this virtual server.')
gtmVsStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatusDetailReason.setDescription("The detail description of the specified virtual server's status.")
gtmVsStatusVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusVsName.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatusVsName.setDescription('The name of the specified virtual server.')
gtmVsStatusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusServerName.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatusServerName.setDescription('The name of the server with which the specified virtual server is associated.')
gtmWideipNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipNumber.setStatus('current')
if mibBuilder.loadTexts: gtmWideipNumber.setDescription('The number of gtmWideip entries in the table.')
gtmWideipTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2), )
if mibBuilder.loadTexts: gtmWideipTable.setStatus('current')
if mibBuilder.loadTexts: gtmWideipTable.setDescription('A table containing information of wide IPs for GTM (Global Traffic Management).')
gtmWideipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipName"))
if mibBuilder.loadTexts: gtmWideipEntry.setStatus('current')
if mibBuilder.loadTexts: gtmWideipEntry.setDescription('Columns in the gtmWideip Table')
gtmWideipName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipName.setStatus('current')
if mibBuilder.loadTexts: gtmWideipName.setDescription('The name of a wide IP.')
gtmWideipPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPersist.setStatus('current')
if mibBuilder.loadTexts: gtmWideipPersist.setDescription('The state indicating whether or not to maintain a connection between \n\t\ta LDNS and a particular virtual server for the specified wide IP.')
gtmWideipTtlPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipTtlPersist.setStatus('current')
if mibBuilder.loadTexts: gtmWideipTtlPersist.setDescription('The persistence TTL value of the specified wide IP.  \n\t\tThis value (in seconds) indicates the time to maintain a connection \n\t\tbetween an LDNS and a particular virtual server.')
gtmWideipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmWideipEnabled.setDescription('The state indicating whether the specified wide IP is enabled or not.')
gtmWideipLbmodePool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipLbmodePool.setStatus('current')
if mibBuilder.loadTexts: gtmWideipLbmodePool.setDescription('The load balancing method for the specified wide IP.  \n\t\tThis is used by the wide IPs when picking a pool to use when \n\t\tresponding to a DNS request.')
gtmWideipApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipApplication.setStatus('deprecated')
if mibBuilder.loadTexts: gtmWideipApplication.setDescription('Deprecated! No longer useful. Please use gtmApplicationWideip.\n\t        The application name the specified wide IP is used for.')
gtmWideipLastResortPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipLastResortPool.setStatus('current')
if mibBuilder.loadTexts: gtmWideipLastResortPool.setDescription('The name of the last-resort pool for the specified wide IP.')
gtmWideipIpNoError = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipIpNoError.setStatus('current')
if mibBuilder.loadTexts: gtmWideipIpNoError.setDescription('When enabled on a given wide IP, all requests sent to that\n\t        wide IP will be returned with a noerror response.')
gtmWideipLoadBalancingDecisionLogVerbosity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipLoadBalancingDecisionLogVerbosity.setStatus('current')
if mibBuilder.loadTexts: gtmWideipLoadBalancingDecisionLogVerbosity.setDescription('The log verbosity value when making load-balancing decisions. From\n\t        the least significant bit to the most significant bit, each bit\n\t        represents enabling or disabling a certain load balancing log. When the\n\t        first bit is 1, log will contain pool load-balancing algorithm\n\t        details. When the second bit is 1, log will contain details of all\n\t        pools traversed during load-balancing. When the third bit is 1, log\n\t        will contain pool member load-balancing algorithm details. When the\n\t        fourth bit is 1, log will contain details of all pool members\n\t        traversed during load-balancing.')
gtmWideipIpNoErrorTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipIpNoErrorTtl.setStatus('current')
if mibBuilder.loadTexts: gtmWideipIpNoErrorTtl.setDescription('The negative caching TTL of the SOA record for the NoError\n\t        response. The default is 0, which means that no SOA is included\n\t        (ie no caching).')
gtmWideipPersistCidr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPersistCidr.setStatus('current')
if mibBuilder.loadTexts: gtmWideipPersistCidr.setDescription('A mask used to group IPv4 LDNS addresses. This allows one\n\t        persistence record to be shared by IPv4 LDNS addresses that\n\t        match within this mask. The default is 32 (no shared\n\t        persistence records).')
gtmWideipPersistV6Cidr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPersistV6Cidr.setStatus('current')
if mibBuilder.loadTexts: gtmWideipPersistV6Cidr.setDescription('A mask used to group IPv6 LDNS addresses. This allows one\n\t        persistence record to be shared by IPv6 LDNS addresses that\n\t        match within this mask. The default is 128 (no shared\n\t        persistence records).')
gtmWideipMinimalResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipMinimalResponse.setStatus('current')
if mibBuilder.loadTexts: gtmWideipMinimalResponse.setDescription('Whether or not GTM will form the smallest allowable DNS\n\t        response to a query. The default is enabled. When set to\n\t        disabled, GTM will attempt to chase CNAME chains to obtain\n\t        the ultimate answer and attempt to add address resource\n\t        records to the additional section of the response for each\n\t        answer when needed.')
gtmWideipType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipType.setStatus('current')
if mibBuilder.loadTexts: gtmWideipType.setDescription('The type of a wide IP.')
gtmWideipLastResortPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipLastResortPoolType.setStatus('current')
if mibBuilder.loadTexts: gtmWideipLastResortPoolType.setDescription('The type of the last-resort pool for the specified wide IP.')
gtmWideipStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmWideipStatResetStats.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatResetStats.setDescription('The action to reset resettable statistics data in gtmWideipStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmWideipStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatNumber.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatNumber.setDescription('The number of gtmWideipStat entries in the table.')
gtmWideipStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3), )
if mibBuilder.loadTexts: gtmWideipStatTable.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatTable.setDescription('A table containing statistics information of wide IPs for GTM (Global Traffic Management).')
gtmWideipStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipStatWipType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipStatName"))
if mibBuilder.loadTexts: gtmWideipStatEntry.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatEntry.setDescription('Columns in the gtmWideipStat Table')
gtmWideipStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatName.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatName.setDescription('The name of the wide IP.')
gtmWideipStatRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatRequests.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatRequests.setDescription('The number of total requests for the specified wide IP.')
gtmWideipStatResolutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatResolutions.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatResolutions.setDescription('The number of total resolutions for the specified wide IP.')
gtmWideipStatPersisted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatPersisted.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatPersisted.setDescription('The number of persisted requests for the specified wide IP.')
gtmWideipStatPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatPreferred.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatPreferred.setDescription('The number of times which the preferred load balance method is used\n\t\tfor the specified wide IP.')
gtmWideipStatFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatFallback.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatFallback.setDescription('The number of times which the fallback load balance method is used\n\t        for the specified wide IP.')
gtmWideipStatDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatDropped.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatDropped.setDescription('The number of dropped DNS messages for the specified wide IP.')
gtmWideipStatExplicitIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatExplicitIp.setStatus('deprecated')
if mibBuilder.loadTexts: gtmWideipStatExplicitIp.setDescription('Deprecated! The number of times which a LDNS  was persisted to the\n\t        specified wide IP by the explicit IP rule.')
gtmWideipStatReturnToDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatReturnToDns.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatReturnToDns.setDescription('The number of times which a resolve was returned to DNS (for resolution) \n\t\tfor the specified wide IP.')
gtmWideipStatReturnFromDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatReturnFromDns.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatReturnFromDns.setDescription('The number of times which a resolve was returned from DNS for the \n\t        specified wide IP.')
gtmWideipStatCnameResolutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatCnameResolutions.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatCnameResolutions.setDescription('The number of times which a query is resolved by the CNAME of pools\n\t        associated with the specified Wide IP.')
gtmWideipStatARequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatARequests.setStatus('deprecated')
if mibBuilder.loadTexts: gtmWideipStatARequests.setDescription('Deprecated! No longer used.\n\t        The number of A requests for the specified wide IP.')
gtmWideipStatAaaaRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatAaaaRequests.setStatus('deprecated')
if mibBuilder.loadTexts: gtmWideipStatAaaaRequests.setDescription('Deprecated! No longer used.\n\t        The number of AAAA requests for the specified wide IP.')
gtmWideipStatAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatAlternate.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatAlternate.setDescription('The number of times which the alternate load balance method is used\n\t        for the specified wide IP.')
gtmWideipStatWipType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatWipType.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatWipType.setDescription('The type of the wide IP.')
gtmWideipStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusNumber.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatusNumber.setDescription('The number of gtmWideipStatus entries in the table.')
gtmWideipStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2), )
if mibBuilder.loadTexts: gtmWideipStatusTable.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatusTable.setDescription('A table containing status information of wide IPs for GTM (Global Traffic Management).')
gtmWideipStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusName"))
if mibBuilder.loadTexts: gtmWideipStatusEntry.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatusEntry.setDescription('Columns in the gtmWideipStatus Table')
gtmWideipStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusName.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatusName.setDescription('The name of a wide IP.')
gtmWideipStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatusAvailState.setDescription('The availability of the specified wide IP indicated by color.\n\t\tnone - error;\n\t\tgreen - available in some capacity;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t\tgray - unlicensed.')
gtmWideipStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatusEnabledState.setDescription('The activity status of the specified wide IP, as specified \n\t\tby the user.')
gtmWideipStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: gtmWideipStatusParentType.setDescription('Deprecated! This is an internal data.\n\t\tThe type of parent object which disabled the specified wide IP.')
gtmWideipStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatusDetailReason.setDescription("The detail description of the specified wide IP's status.")
gtmWideipStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusType.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatusType.setDescription('The type of a wide IP.')
gtmWideipAliasNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipAliasNumber.setStatus('current')
if mibBuilder.loadTexts: gtmWideipAliasNumber.setDescription('The number of gtmWideipAlias entries in the table.')
gtmWideipAliasTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 2), )
if mibBuilder.loadTexts: gtmWideipAliasTable.setStatus('current')
if mibBuilder.loadTexts: gtmWideipAliasTable.setDescription('A table containing information of aliases of the specified wide IPs \n\t\tfor GTM (Global Traffic Management).')
gtmWideipAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasWipType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasWipName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasName"))
if mibBuilder.loadTexts: gtmWideipAliasEntry.setStatus('current')
if mibBuilder.loadTexts: gtmWideipAliasEntry.setDescription('Columns in the gtmWideipAlias Table')
gtmWideipAliasWipName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipAliasWipName.setStatus('current')
if mibBuilder.loadTexts: gtmWideipAliasWipName.setDescription('The name of the wide IP.')
gtmWideipAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipAliasName.setStatus('current')
if mibBuilder.loadTexts: gtmWideipAliasName.setDescription('The alias name of the specified wide IP.')
gtmWideipAliasWipType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipAliasWipType.setStatus('current')
if mibBuilder.loadTexts: gtmWideipAliasWipType.setDescription('The type of the wide IP.')
gtmWideipPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolNumber.setStatus('current')
if mibBuilder.loadTexts: gtmWideipPoolNumber.setDescription('The number of gtmWideipPool entries in the table.')
gtmWideipPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2), )
if mibBuilder.loadTexts: gtmWideipPoolTable.setStatus('current')
if mibBuilder.loadTexts: gtmWideipPoolTable.setDescription('A table containing information of pools associated with \n\t\tthe specified wide IPs for GTM (Global Traffic Management).')
gtmWideipPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolWipType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolWipName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolPoolType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolPoolName"))
if mibBuilder.loadTexts: gtmWideipPoolEntry.setStatus('current')
if mibBuilder.loadTexts: gtmWideipPoolEntry.setDescription('Columns in the gtmWideipPool Table')
gtmWideipPoolWipName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolWipName.setStatus('current')
if mibBuilder.loadTexts: gtmWideipPoolWipName.setDescription('The name of the wide IP.')
gtmWideipPoolPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolPoolName.setStatus('current')
if mibBuilder.loadTexts: gtmWideipPoolPoolName.setDescription('The name of the pool which associates with the specified wide IP.')
gtmWideipPoolOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolOrder.setStatus('current')
if mibBuilder.loadTexts: gtmWideipPoolOrder.setDescription('This determines order of pools in wip. zero-based.')
gtmWideipPoolRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolRatio.setStatus('current')
if mibBuilder.loadTexts: gtmWideipPoolRatio.setDescription('The load balancing ratio given to the specified pool.')
gtmWideipPoolWipType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolWipType.setStatus('current')
if mibBuilder.loadTexts: gtmWideipPoolWipType.setDescription('The type of the wide IP.')
gtmWideipPoolPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolPoolType.setStatus('current')
if mibBuilder.loadTexts: gtmWideipPoolPoolType.setDescription('The type of the pool.')
gtmWideipRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipRuleNumber.setStatus('current')
if mibBuilder.loadTexts: gtmWideipRuleNumber.setDescription('The number of gtmWideipRule entries in the table.')
gtmWideipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2), )
if mibBuilder.loadTexts: gtmWideipRuleTable.setStatus('current')
if mibBuilder.loadTexts: gtmWideipRuleTable.setDescription('A table containing information of rules associated with \n\t\tthe specified wide IPs for GTM (Global Traffic Management).')
gtmWideipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleWipType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleWipName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleRuleName"))
if mibBuilder.loadTexts: gtmWideipRuleEntry.setStatus('current')
if mibBuilder.loadTexts: gtmWideipRuleEntry.setDescription('Columns in the gtmWideipRule Table')
gtmWideipRuleWipName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipRuleWipName.setStatus('current')
if mibBuilder.loadTexts: gtmWideipRuleWipName.setDescription('The name of the wide IP.')
gtmWideipRuleRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipRuleRuleName.setStatus('current')
if mibBuilder.loadTexts: gtmWideipRuleRuleName.setDescription('The name of the rule which associates with the specified wide IP.')
gtmWideipRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipRulePriority.setStatus('current')
if mibBuilder.loadTexts: gtmWideipRulePriority.setDescription('The execution priority of the rule for the specified wide IP.')
gtmWideipRuleWipType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipRuleWipType.setStatus('current')
if mibBuilder.loadTexts: gtmWideipRuleWipType.setDescription('The type of the wide IP.')
gtmServerStat2ResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmServerStat2ResetStats.setStatus('current')
if mibBuilder.loadTexts: gtmServerStat2ResetStats.setDescription('The action to reset resettable statistics data in gtmServerStat2.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmServerStat2Number = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2Number.setStatus('current')
if mibBuilder.loadTexts: gtmServerStat2Number.setDescription('The number of gtmServerStat2 entries in the table.')
gtmServerStat2Table = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3), )
if mibBuilder.loadTexts: gtmServerStat2Table.setStatus('current')
if mibBuilder.loadTexts: gtmServerStat2Table.setDescription('A table containing statistics information of servers within associated\n\t\t data center for GTM (Global Traffic Management).')
gtmServerStat2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmServerStat2Name"))
if mibBuilder.loadTexts: gtmServerStat2Entry.setStatus('current')
if mibBuilder.loadTexts: gtmServerStat2Entry.setDescription('Columns in the gtmServerStat2 Table')
gtmServerStat2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2Name.setStatus('current')
if mibBuilder.loadTexts: gtmServerStat2Name.setDescription('The name of a server.')
gtmServerStat2UnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2UnitId.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStat2UnitId.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe unit ID of the specified server.')
gtmServerStat2VsPicks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2VsPicks.setStatus('current')
if mibBuilder.loadTexts: gtmServerStat2VsPicks.setDescription('How many times a virtual server of the specified server was picked \n\t\tduring resolution of a domain name. I.E amazon.com got resolved to \n\t\ta particular virtual address X times.')
gtmServerStat2CpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2CpuUsage.setStatus('current')
if mibBuilder.loadTexts: gtmServerStat2CpuUsage.setDescription('The CPU usage in percentage for the specified server.')
gtmServerStat2MemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2MemAvail.setStatus('current')
if mibBuilder.loadTexts: gtmServerStat2MemAvail.setDescription('The memory available in bytes for the specified server.')
gtmServerStat2BitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2BitsPerSecIn.setStatus('current')
if mibBuilder.loadTexts: gtmServerStat2BitsPerSecIn.setDescription('The number of bits per second received by the specified server.')
gtmServerStat2BitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2BitsPerSecOut.setStatus('current')
if mibBuilder.loadTexts: gtmServerStat2BitsPerSecOut.setDescription('The number of bits per second sent from the specified server.')
gtmServerStat2PktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2PktsPerSecIn.setStatus('current')
if mibBuilder.loadTexts: gtmServerStat2PktsPerSecIn.setDescription('The number of packets per second received by the specified server.')
gtmServerStat2PktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2PktsPerSecOut.setStatus('current')
if mibBuilder.loadTexts: gtmServerStat2PktsPerSecOut.setDescription('The number of packets per second sent from the specified server.')
gtmServerStat2Connections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2Connections.setStatus('current')
if mibBuilder.loadTexts: gtmServerStat2Connections.setDescription('The number of total connections to the specified server.')
gtmServerStat2ConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2ConnRate.setStatus('deprecated')
if mibBuilder.loadTexts: gtmServerStat2ConnRate.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe connection rate (current connection rate/connection rate limit)\n\t\tin percentage for the specified server.')
gtmProberPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolNumber.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolNumber.setDescription('The number of gtmProberPool entries in the table.')
gtmProberPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2), )
if mibBuilder.loadTexts: gtmProberPoolTable.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolTable.setDescription('A table containing information for GTM prober pools.')
gtmProberPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolName"))
if mibBuilder.loadTexts: gtmProberPoolEntry.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolEntry.setDescription('Columns in the gtmProberPool Table')
gtmProberPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolName.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolName.setDescription('The name of a prober pool.')
gtmProberPoolLbMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6))).clone(namedValues=NamedValues(("roundrobin", 2), ("ga", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolLbMode.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolLbMode.setDescription('The preferred load balancing method for the specified prober pool.')
gtmProberPoolEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolEnabled.setDescription('The state indicating whether the specified prober pool is enabled or not.')
gtmProberPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmProberPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatResetStats.setDescription('The action to reset resettable statistics data in gtmProberPoolStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmProberPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatNumber.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatNumber.setDescription('The number of gtmProberPoolStat entries in the table.')
gtmProberPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3), )
if mibBuilder.loadTexts: gtmProberPoolStatTable.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatTable.setDescription('A table containing statistics information for GTM prober pools.')
gtmProberPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatName"))
if mibBuilder.loadTexts: gtmProberPoolStatEntry.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatEntry.setDescription('Columns in the gtmProberPoolStat Table')
gtmProberPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatName.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatName.setDescription('The name of a prober pool.')
gtmProberPoolStatTotalProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatTotalProbes.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatTotalProbes.setDescription('The number of total probes.')
gtmProberPoolStatSuccessfulProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatSuccessfulProbes.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatSuccessfulProbes.setDescription('The number of successful probes.')
gtmProberPoolStatFailedProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatFailedProbes.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatFailedProbes.setDescription('The number of failed probes.')
gtmProberPoolStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusNumber.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatusNumber.setDescription('The number of gtmProberPoolStatus entries in the table.')
gtmProberPoolStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2), )
if mibBuilder.loadTexts: gtmProberPoolStatusTable.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatusTable.setDescription('A table containing status information for GTM prober pools.')
gtmProberPoolStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusName"))
if mibBuilder.loadTexts: gtmProberPoolStatusEntry.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatusEntry.setDescription('Columns in the gtmProberPoolStatus Table')
gtmProberPoolStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusName.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatusName.setDescription('The name of a prober pool.')
gtmProberPoolStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatusAvailState.setDescription('The availability of the specified pool indicated by color.\n\t\tnone - error;\n\t\tgreen - available;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t\tgray - unlicensed.')
gtmProberPoolStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatusEnabledState.setDescription('The activity status of the specified pool, as specified \n\t\tby the user.')
gtmProberPoolStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatusDetailReason.setDescription("The detail description of the specified pool's status.")
gtmProberPoolMbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrNumber.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrNumber.setDescription('The number of gtmProberPoolMember entries in the table.')
gtmProberPoolMbrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2), )
if mibBuilder.loadTexts: gtmProberPoolMbrTable.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrTable.setDescription('A table containing information for GTM prober pool members.')
gtmProberPoolMbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrServerName"))
if mibBuilder.loadTexts: gtmProberPoolMbrEntry.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrEntry.setDescription('Columns in the gtmProberPoolMbr Table')
gtmProberPoolMbrPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrPoolName.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrPoolName.setDescription('The name of a prober pool.')
gtmProberPoolMbrServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrServerName.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrServerName.setDescription('The name of a server.')
gtmProberPoolMbrPmbrOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrPmbrOrder.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrPmbrOrder.setDescription('The prober pool member order.')
gtmProberPoolMbrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrEnabled.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrEnabled.setDescription('The state indicating whether the specified prober pool member \n\t\tis enabled or not.')
gtmProberPoolMbrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmProberPoolMbrStatResetStats.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatResetStats.setDescription('The action to reset resettable statistics data in gtmProberPoolMemberStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmProberPoolMbrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatNumber.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatNumber.setDescription('The number of gtmProberPoolMemberStat entries in the table.')
gtmProberPoolMbrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3), )
if mibBuilder.loadTexts: gtmProberPoolMbrStatTable.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatTable.setDescription('A table containing statistics information for GTM prober pool members.')
gtmProberPoolMbrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatServerName"))
if mibBuilder.loadTexts: gtmProberPoolMbrStatEntry.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatEntry.setDescription('Columns in the gtmProberPoolMbrStat Table')
gtmProberPoolMbrStatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatPoolName.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatPoolName.setDescription('The name of a prober pool.')
gtmProberPoolMbrStatServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatServerName.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatServerName.setDescription('The name of a server.')
gtmProberPoolMbrStatTotalProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatTotalProbes.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatTotalProbes.setDescription('The number of total probes issued by this pool member.')
gtmProberPoolMbrStatSuccessfulProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatSuccessfulProbes.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatSuccessfulProbes.setDescription('The number of successful probes issued by this pool member.')
gtmProberPoolMbrStatFailedProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatFailedProbes.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatFailedProbes.setDescription('The number of failed probes issued by pool member.')
gtmProberPoolMbrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusNumber.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatusNumber.setDescription('The number of gtmProberPoolMemberStatus entries in the table.')
gtmProberPoolMbrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2), )
if mibBuilder.loadTexts: gtmProberPoolMbrStatusTable.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatusTable.setDescription('A table containing status information for GTM prober pool members.')
gtmProberPoolMbrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusServerName"))
if mibBuilder.loadTexts: gtmProberPoolMbrStatusEntry.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatusEntry.setDescription('Columns in the gtmProberPoolMbrStatus Table')
gtmProberPoolMbrStatusPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusPoolName.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatusPoolName.setDescription('The name of a prober pool.')
gtmProberPoolMbrStatusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusServerName.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatusServerName.setDescription('The name of a server.')
gtmProberPoolMbrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatusAvailState.setDescription('The availability of the specified pool member indicated by color.\n\t\tnone - error;\n\t\tgreen - available;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t\tgray - unlicensed.')
gtmProberPoolMbrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatusEnabledState.setDescription('The activity status of the specified pool member, as specified \n\t\tby the user.')
gtmProberPoolMbrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatusDetailReason.setDescription("The detail description of the specified pool member's status.")
gtmAttr2Number = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2Number.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2Number.setDescription('The number of gtmGlobalAttr2 entries in the table.')
gtmAttr2Table = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2), )
if mibBuilder.loadTexts: gtmAttr2Table.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2Table.setDescription('The information of the global attributes for GTM (Global Traffic Management).')
gtmAttr2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAttr2Name"))
if mibBuilder.loadTexts: gtmAttr2Entry.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2Entry.setDescription('Columns in the gtmAttr2 Table')
gtmAttr2DumpTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DumpTopology.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2DumpTopology.setDescription('The state indicating whether or not to dump the topology.')
gtmAttr2CacheLdns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2CacheLdns.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2CacheLdns.setDescription('The state indicating whether or not to cache LDNSes.')
gtmAttr2AolAware = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2AolAware.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2AolAware.setDescription('The state indicating whether or not local DNS servers that \n\t\tbelong to AOL (America Online) are recognized.')
gtmAttr2CheckStaticDepends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2CheckStaticDepends.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2CheckStaticDepends.setDescription('The state indicating whether or not to check the availability \n\t\tof virtual servers.')
gtmAttr2CheckDynamicDepends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2CheckDynamicDepends.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2CheckDynamicDepends.setDescription('The state indicating whether or not to check availability of \n\t\ta path before it uses the path for load balancing.')
gtmAttr2DrainRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DrainRequests.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2DrainRequests.setDescription('The state indicating whether or not persistent connections \n\t\tare allowed to remain connected, until TTL expires, \n\t\twhen disabling a pool.')
gtmAttr2EnableResetsRipeness = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2EnableResetsRipeness.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2EnableResetsRipeness.setDescription('The state indicating whether or not ripeness value is allowed \n\t\tto be reset.')
gtmAttr2FbRespectDepends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2FbRespectDepends.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2FbRespectDepends.setDescription('The state indicating whether or not to respect virtual server \n\t\tstatus when load balancing switches to the fallback mode.')
gtmAttr2FbRespectAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2FbRespectAcl.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttr2FbRespectAcl.setDescription('Deprecated! The state indicating whether or not to respect ACL. \n\t         This is part of an outdated mechanism for disabling virtual servers')
gtmAttr2DefaultAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersist", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vssore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DefaultAlternate.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2DefaultAlternate.setDescription('The default alternate LB method.')
gtmAttr2DefaultFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DefaultFallback.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2DefaultFallback.setDescription('The default fallback LB method.')
gtmAttr2PersistMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2PersistMask.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttr2PersistMask.setDescription('Deprecated! Replaced by gtmAttrStaticPersistCidr and gtmAttrStaticPersistV6Cidr.\n\t\tThe persistence mask which is used to determine the netmask applied\n\t\tfor static persistance requests.')
gtmAttr2GtmSetsRecursion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2GtmSetsRecursion.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2GtmSetsRecursion.setDescription('The state indicating whether set recursion by global \n\t\ttraffic management object(GTM) is enable or not.')
gtmAttr2QosFactorLcs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorLcs.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2QosFactorLcs.setDescription('The factor used to normalize link capacity values \n\t\twhen the load balancing mode is set to LB_METHOD_QOS.')
gtmAttr2QosFactorRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorRtt.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2QosFactorRtt.setDescription('The factor used to normalize round-trip time values \n\t\twhen the load balancing mode is set to LB_METHOD_QOS.')
gtmAttr2QosFactorHops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorHops.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2QosFactorHops.setDescription('The factor used to normalize hops when the load \n\t\tbalancing mode is set to LB_METHOD_QOS.')
gtmAttr2QosFactorHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorHitRatio.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2QosFactorHitRatio.setDescription('The factor used to normalize ping packet completion \n\t\trates when the load balancing mode is set to LB_METHOD_QOS.')
gtmAttr2QosFactorPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorPacketRate.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2QosFactorPacketRate.setDescription('The factor used to normalize packet rates when the load \n\t\tbalancing mode is set to LB_METHOD_QOS.')
gtmAttr2QosFactorBps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorBps.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2QosFactorBps.setDescription('The factor used to normalize kilobytes per second \n\t\twhen the load balancing mode is set to LB_METHOD_QOS.')
gtmAttr2QosFactorVsCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorVsCapacity.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2QosFactorVsCapacity.setDescription('The factor used to normalize virtual server capacity \n\t\tvalues when the load balancing mode is set to LB_METHOD_QOS.')
gtmAttr2QosFactorTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorTopology.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2QosFactorTopology.setDescription('The factor used to normalize topology values when the load \n\t\tbalancing mode is set to LB_METHOD_QOS.')
gtmAttr2QosFactorConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorConnRate.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttr2QosFactorConnRate.setDescription('Deprecated! \n\t\tReplaced by gtmAttrQosFactorVsScore. \n\t\tThe factor used to normalize connection rates when the load \n\t\tbalancing mode is set to LB_METHOD_QOS.')
gtmAttr2TimerRetryPathData = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimerRetryPathData.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2TimerRetryPathData.setDescription('The frequency at which to retrieve path data.')
gtmAttr2TimerGetAutoconfigData = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimerGetAutoconfigData.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2TimerGetAutoconfigData.setDescription('The frequency at which to retrieve auto-configuration data.')
gtmAttr2TimerPersistCache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimerPersistCache.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2TimerPersistCache.setDescription('The frequency at which to retrieve path and metrics \n\t\tdata from the system cache.')
gtmAttr2DefaultProbeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DefaultProbeLimit.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2DefaultProbeLimit.setDescription('The default probe limit, the number of times to probe a path.')
gtmAttr2DownThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DownThreshold.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2DownThreshold.setDescription('The down_threshold value. If a host server or a host virtual server \n\t\thas been marked down for the last down_threshold probing cycles \n\t\t(timer_get_host_data or timer_get_vs_data respectively), then perform \n\t\tservice checks every down_multiple * timer period instead.')
gtmAttr2DownMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DownMultiple.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2DownMultiple.setDescription('The down_multiple value. If a host server or a host virtual server \n\t\thas been marked down for the last down_threshold probing cycles \n\t\t(timer_get_host_data or timer_get_vs_data respectively), then perform \n\t\tservice checks every down_multiple * timer period instead.')
gtmAttr2PathTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2PathTtl.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2PathTtl.setDescription('The TTL for the path information.')
gtmAttr2TraceTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TraceTtl.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2TraceTtl.setDescription('The TTL for the traceroute information.')
gtmAttr2LdnsDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LdnsDuration.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2LdnsDuration.setDescription('The number of seconds that an inactive LDNS remains cached.')
gtmAttr2PathDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2PathDuration.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2PathDuration.setDescription('The number of seconds that a path remains cached after its last access.')
gtmAttr2RttSampleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2RttSampleCount.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2RttSampleCount.setDescription('The number of packets to send out in a probe request to determine \n\t\tpath information.')
gtmAttr2RttPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2RttPacketLength.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2RttPacketLength.setDescription('The length of the packet sent out in a probe request to determine \n\t\tpath information.')
gtmAttr2RttTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2RttTimeout.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2RttTimeout.setDescription('The timeout for RTT, in seconds.')
gtmAttr2MaxMonReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2MaxMonReqs.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2MaxMonReqs.setDescription('The maximum synchronous monitor request, which is used to control \n\t\tthe maximum number of monitor requests being sent out at one time \n\t\tfor a given probing interval. This will allow the user to smooth out \n\t\tmonitor probe requests as much as they desire.')
gtmAttr2TraceroutePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TraceroutePort.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2TraceroutePort.setDescription('The port to use to collect traceroute (hops) data.')
gtmAttr2PathsNeverDie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2PathsNeverDie.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2PathsNeverDie.setDescription('The state indicating whether the dynamic load balancing modes \n\t\tcan use path data even after the TTL for the path data has expired.')
gtmAttr2ProbeDisabledObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2ProbeDisabledObjects.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2ProbeDisabledObjects.setDescription('The state indicating whether probing disabled objects by global\n\t\ttraffic management object(GTM) is enabled or not.')
gtmAttr2LinkLimitFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkLimitFactor.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2LinkLimitFactor.setDescription('The link limit factor, which is used to set a target percentage \n\t\tfor traffic. For example, if it is set to 90, the ratio cost \n\t\tbased load-balancing will set a ratio with a maximum value equal \n\t\tto 90% of the limit value for the link. Default is 95%.')
gtmAttr2OverLimitLinkLimitFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2OverLimitLinkLimitFactor.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2OverLimitLinkLimitFactor.setDescription('The over-limit link limit factor. If traffic on a link exceeds \n\t\tthe limit, this factor will be used instead of the link_limit_factor \n\t\tuntil the traffic is over limit for more than max_link_over_limit_count \n\t\ttimes. Once the limit has been exceeded too many times, all traffic\n\t\tis shut off for the link. The default for \n\t\tover_limit_link_limit_factor is 90%.')
gtmAttr2LinkPrepaidFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkPrepaidFactor.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2LinkPrepaidFactor.setDescription('The link prepaid factor. Maximum percentage of traffic allocated \n\t\tto link which has a traffic allotment which has been prepaid. \n\t\tDefault is 95%.')
gtmAttr2LinkCompensateInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkCompensateInbound.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2LinkCompensateInbound.setDescription('The link compensate inbound. If set, the link allotment calculation \n\t\twill take into account traffic which does not flow through the BIGIP, \n\t\ti.e. if more traffic is flowing through a link as measured by SNMP \n\t\ton the router than is flowing through the BIGIP. This applies to \n\t\tinbound traffic which the major volume will initiate from internal \n\t\tclients.')
gtmAttr2LinkCompensateOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkCompensateOutbound.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2LinkCompensateOutbound.setDescription('The link compensate outbound. If set, the link allotment calculation \n\t\twill take into account traffic which does not flow through the BIGIP, \n\t\ti.e. if more traffic is flowing through a link as measured by SNMP \n\t\ton the router than is flowing through the BIGIP. This applies to \n\t\toutbound traffic which the major volume will initiate from internal \n\t\tclients.')
gtmAttr2LinkCompensationHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkCompensationHistory.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2LinkCompensationHistory.setDescription('The link compensation history.')
gtmAttr2MaxLinkOverLimitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2MaxLinkOverLimitCount.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2MaxLinkOverLimitCount.setDescription('The maximum link over limit count. The count of how many times \n\t\tin a row traffic may be over the defined limit for the link before \n\t\tit is shut off entirely. Default is 1.')
gtmAttr2LowerBoundPctRow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LowerBoundPctRow.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttr2LowerBoundPctRow.setDescription('Deprecated! No longer useful.\n\t        The lower bound percentage row option in Internet Weather Map.')
gtmAttr2LowerBoundPctCol = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LowerBoundPctCol.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttr2LowerBoundPctCol.setDescription('Deprecated! No longer useful.\n\t        The lower bound percentage column option in Internet Weather Map.')
gtmAttr2Autoconf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2Autoconf.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2Autoconf.setDescription('The state indicating whether to auto configure BIGIP/3DNS servers \n\t\t(automatic addition and deletion of self IPs and virtual servers).')
gtmAttr2Autosync = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2Autosync.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2Autosync.setDescription('The state indicating whether or not to autosync. \n\t\tAllows automatic updates of wideip.conf to/from other 3-DNSes.')
gtmAttr2SyncNamedConf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2SyncNamedConf.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2SyncNamedConf.setDescription('The state indicating whether or not to auto-synchronize named \n\t\tconfiguration. Allows automatic updates of named.conf to/from other 3-DNSes.')
gtmAttr2SyncGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 52), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2SyncGroup.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2SyncGroup.setDescription('The name of sync group.')
gtmAttr2SyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2SyncTimeout.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2SyncTimeout.setDescription("The sync timeout.  If synch'ing from a remote 3-DNS takes longer than \n\t\tthis timeout, then abort the connection.")
gtmAttr2SyncZonesTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2SyncZonesTimeout.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2SyncZonesTimeout.setDescription("The sync zones timeout. If synch'ing named and zone configuration \n\t\ttakes this timeout, then abort the connection.")
gtmAttr2TimeTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimeTolerance.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2TimeTolerance.setDescription('The allowable time difference for data to be out of sync between \n\t\tmembers of a sync group.')
gtmAttr2TopologyLongestMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TopologyLongestMatch.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2TopologyLongestMatch.setDescription('The state indicating  whether or not the 3-DNS Controller selects \n\t\tthe topology record that is most specific and, thus, has the longest \n\t\tmatch, in cases where there are several IP/netmask items that match \n\t\ta particular IP address.  \n\t\tIf it is set to false, the 3-DNS Controller uses the first topology record \n\t\tthat matches (according to the order of entry) in the topology statement.')
gtmAttr2TopologyAclThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TopologyAclThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttr2TopologyAclThreshold.setDescription('Deprecated! The threshold of the topology ACL. \n\t         This is an outdated mechanism for disabling a node.')
gtmAttr2StaticPersistCidr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2StaticPersistCidr.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2StaticPersistCidr.setDescription('The variable used with the static persistence load balancing mode \n\t\tto allow users to specify what cidr should be used. \n\t\tThis is used for IPv4.')
gtmAttr2StaticPersistV6Cidr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2StaticPersistV6Cidr.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2StaticPersistV6Cidr.setDescription('The variable used with the static persistence load balancing mode \n\t\tto allow users to specify what cidr should be used. \n\t\tThis is used for IPv6.')
gtmAttr2QosFactorVsScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorVsScore.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2QosFactorVsScore.setDescription('The factor used to normalize virtual server (VS) score \n\t\twhen the load balancing mode is set to LB_METHOD_QOS.')
gtmAttr2TimerSendKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimerSendKeepAlive.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2TimerSendKeepAlive.setDescription('The frequency of GTM keep alive messages (strictly the config timestamps).')
gtmAttr2CertificateDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2CertificateDepth.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttr2CertificateDepth.setDescription('Deprecated! No longer updated.\n\t        When non-zero, customers may use their own SSL certificates by setting the certificate depth.')
gtmAttr2MaxMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2MaxMemoryUsage.setStatus('deprecated')
if mibBuilder.loadTexts: gtmAttr2MaxMemoryUsage.setDescription('Deprecated! The maximum amount of memory (in MB) allocated to GTM.')
gtmAttr2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 64), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2Name.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2Name.setDescription('name as a key.')
gtmAttr2ForwardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2ForwardStatus.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2ForwardStatus.setDescription('The state indicating whether or not to forward object availability status change notifications.')
gtmDnssecZoneStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmDnssecZoneStatResetStats.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatResetStats.setDescription('The action to reset resettable statistics data in gtmDnssecZoneStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmDnssecZoneStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatNumber.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatNumber.setDescription('The number of gtmDnssecZoneStat entries in the table.')
gtmDnssecZoneStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3), )
if mibBuilder.loadTexts: gtmDnssecZoneStatTable.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatTable.setDescription('A table containing statistics information for GTM DNSSEC zones.')
gtmDnssecZoneStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatName"))
if mibBuilder.loadTexts: gtmDnssecZoneStatEntry.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatEntry.setDescription('Columns in the gtmDnssecZoneStat Table')
gtmDnssecZoneStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatName.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatName.setDescription('The name of a DNSSEC zone.')
gtmDnssecZoneStatNsec3s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3s.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3s.setDescription('Total number of NSEC3 RRs generated.')
gtmDnssecZoneStatNsec3Nodata = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3Nodata.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3Nodata.setDescription('Total number of no data responses generated needing NSEC3 RR.')
gtmDnssecZoneStatNsec3Nxdomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3Nxdomain.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3Nxdomain.setDescription('Total number of no domain responses generated needing NSEC3 RR.')
gtmDnssecZoneStatNsec3Referral = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3Referral.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3Referral.setDescription('Total number of referral responses generated needing NSEC3 RR.')
gtmDnssecZoneStatNsec3Resalt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3Resalt.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3Resalt.setDescription('Total number of times that salt was changed for NSEC3.')
gtmDnssecZoneStatDnssecResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecResponses.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecResponses.setDescription('Total number of signed responses.')
gtmDnssecZoneStatDnssecDnskeyQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecDnskeyQueries.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecDnskeyQueries.setDescription('Total number of queries for DNSKEY type.')
gtmDnssecZoneStatDnssecNsec3paramQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecNsec3paramQueries.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecNsec3paramQueries.setDescription('Total number of queries for NSEC3PARAM type.')
gtmDnssecZoneStatDnssecDsQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecDsQueries.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecDsQueries.setDescription('Total number of queries for DS type.')
gtmDnssecZoneStatSigCryptoFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatSigCryptoFailed.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatSigCryptoFailed.setDescription('Total number of signatures in which the cryptographic operation failed.')
gtmDnssecZoneStatSigSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatSigSuccess.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatSigSuccess.setDescription('Total number of successfully generated signatures.')
gtmDnssecZoneStatSigFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatSigFailed.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatSigFailed.setDescription('Total number of general signature failures.')
gtmDnssecZoneStatSigRrsetFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatSigRrsetFailed.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatSigRrsetFailed.setDescription('Total number of failures due to an RRSET failing to be signed.')
gtmDnssecZoneStatConnectFlowFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatConnectFlowFailed.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatConnectFlowFailed.setDescription('Total number of connection flow failures.')
gtmDnssecZoneStatTowireFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatTowireFailed.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatTowireFailed.setDescription('Total number of failures when converting to a wire format packet.')
gtmDnssecZoneStatAxfrQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatAxfrQueries.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatAxfrQueries.setDescription('Total number of axfr queries.')
gtmDnssecZoneStatIxfrQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatIxfrQueries.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatIxfrQueries.setDescription('Total number of ixfr queries.')
gtmDnssecZoneStatXfrStarts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrStarts.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrStarts.setDescription('Total number of zone transfers which were started.')
gtmDnssecZoneStatXfrCompletes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrCompletes.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrCompletes.setDescription('Total number of zone transfers which were completed.')
gtmDnssecZoneStatXfrMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrMsgs.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrMsgs.setDescription('Total number of zone transfer packets to clients.')
gtmDnssecZoneStatXfrMasterMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrMasterMsgs.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrMasterMsgs.setDescription('Total number of zone transfer packets from the primary server.')
gtmDnssecZoneStatXfrResponseAverageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrResponseAverageSize.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrResponseAverageSize.setDescription('Zone transfer average responses size in bytes.')
gtmDnssecZoneStatXfrSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrSerial.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrSerial.setDescription('The serial number advertised to all clients.')
gtmDnssecZoneStatXfrMasterSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrMasterSerial.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrMasterSerial.setDescription('The zone serial number of the primary server.')
gtmDnssecZoneStatDsXfr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatDsXfr.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatDsXfr.setDescription('Total number of DS record sets that were added to BIG-IP DNSSEC enabled zone transfers.')
gtmDnssecZoneStatDsReferral = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatDsReferral.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatDsReferral.setDescription('Total number of referral responses generated in which DS RR(s) were added.')
gtmDnssecZoneStatDnssecCdsQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecCdsQueries.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecCdsQueries.setDescription('Total number of queries for CDS type.')
gtmDnssecZoneStatDnssecCdnskeyQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecCdnskeyQueries.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecCdnskeyQueries.setDescription('Total number of queries for CDNSKEY type.')
gtmDnssecStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmDnssecStatResetStats.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatResetStats.setDescription('The action to reset resettable statistics data in gtmGlobalDnssecStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmDnssecStatNsec3s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatNsec3s.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatNsec3s.setDescription('The number of NSEC3 RRs generated.')
gtmDnssecStatNsec3Nodata = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatNsec3Nodata.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatNsec3Nodata.setDescription('The number of no data responses generated needing NSEC3 RR.')
gtmDnssecStatNsec3Nxdomain = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatNsec3Nxdomain.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatNsec3Nxdomain.setDescription('The number of no domain responses generated needing NSEC3 RR.')
gtmDnssecStatNsec3Referral = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatNsec3Referral.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatNsec3Referral.setDescription('The number of referral responses generated needing NSEC3 RR.')
gtmDnssecStatNsec3Resalt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatNsec3Resalt.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatNsec3Resalt.setDescription('The number of times that salt was changed for NSEC3.')
gtmDnssecStatDnssecResponses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatDnssecResponses.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatDnssecResponses.setDescription('The number of signed responses.')
gtmDnssecStatDnssecDnskeyQueries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatDnssecDnskeyQueries.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatDnssecDnskeyQueries.setDescription('The number of queries for DNSKEY type.')
gtmDnssecStatDnssecNsec3paramQueries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatDnssecNsec3paramQueries.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatDnssecNsec3paramQueries.setDescription('The number of queries for NSEC3PARAM type.')
gtmDnssecStatDnssecDsQueries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatDnssecDsQueries.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatDnssecDsQueries.setDescription('The number of queries for DS type.')
gtmDnssecStatSigCryptoFailed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatSigCryptoFailed.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatSigCryptoFailed.setDescription('The number of signatures in which the cryptographic operation failed.')
gtmDnssecStatSigSuccess = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatSigSuccess.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatSigSuccess.setDescription('The number of successfully generated signatures.')
gtmDnssecStatSigFailed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatSigFailed.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatSigFailed.setDescription('The number of general signature failures.')
gtmDnssecStatSigRrsetFailed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatSigRrsetFailed.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatSigRrsetFailed.setDescription('The number of failures due to an RRSET failing to be signed.')
gtmDnssecStatConnectFlowFailed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatConnectFlowFailed.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatConnectFlowFailed.setDescription('The number of connection flow failures.')
gtmDnssecStatTowireFailed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatTowireFailed.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatTowireFailed.setDescription('The number of failures when converting to a wire format packet.')
gtmDnssecStatAxfrQueries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatAxfrQueries.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatAxfrQueries.setDescription('The number of axfr queries.')
gtmDnssecStatIxfrQueries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatIxfrQueries.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatIxfrQueries.setDescription('The number of ixfr queries.')
gtmDnssecStatXfrStarts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatXfrStarts.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatXfrStarts.setDescription('The number of zone transfers which were started.')
gtmDnssecStatXfrCompletes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatXfrCompletes.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatXfrCompletes.setDescription('The number of zone transfers which were completed.')
gtmDnssecStatXfrMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatXfrMsgs.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatXfrMsgs.setDescription('The number of zone transfer packets to clients.')
gtmDnssecStatXfrMasterMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatXfrMasterMsgs.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatXfrMasterMsgs.setDescription('The number of zone transfer packets from the primary server.')
gtmDnssecStatXfrResponseAverageSize = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatXfrResponseAverageSize.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatXfrResponseAverageSize.setDescription('Zone transfer average responses size in bytes.')
gtmDnssecStatXfrSerial = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatXfrSerial.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatXfrSerial.setDescription('The serial number advertised to all clients.')
gtmDnssecStatXfrMasterSerial = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatXfrMasterSerial.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatXfrMasterSerial.setDescription('The zone serial number of the primary server.')
gtmApplicationWideipNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmApplicationWideipNumber.setStatus('current')
if mibBuilder.loadTexts: gtmApplicationWideipNumber.setDescription('The number of gtmApplicationWideip entries in the table.')
gtmApplicationWideipTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 5, 2), )
if mibBuilder.loadTexts: gtmApplicationWideipTable.setStatus('current')
if mibBuilder.loadTexts: gtmApplicationWideipTable.setDescription('A table containing information on wide IPs associated with\n\t\tthe specified applications for GTM (Global Traffic Management).')
gtmApplicationWideipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmApplicationWideipApplicationName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmApplicationWideipWipName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmApplicationWideipWipType"))
if mibBuilder.loadTexts: gtmApplicationWideipEntry.setStatus('current')
if mibBuilder.loadTexts: gtmApplicationWideipEntry.setDescription('Columns in the gtmApplicationWideip Table')
gtmApplicationWideipApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmApplicationWideipApplicationName.setStatus('current')
if mibBuilder.loadTexts: gtmApplicationWideipApplicationName.setDescription('The name of a GTM application.')
gtmApplicationWideipWipName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmApplicationWideipWipName.setStatus('current')
if mibBuilder.loadTexts: gtmApplicationWideipWipName.setDescription('The name of the wide IP associated with the GTM application.')
gtmApplicationWideipWipType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 15, 28, 33, 35))).clone(namedValues=NamedValues(("a", 1), ("cname", 5), ("mx", 15), ("aaaa", 28), ("srv", 33), ("naptr", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmApplicationWideipWipType.setStatus('current')
if mibBuilder.loadTexts: gtmApplicationWideipWipType.setDescription('The type of the wide IP associated with the GTM application.')
gtmDeviceNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceNumber.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceNumber.setDescription('The number of gtmDevice entries in the table.')
gtmDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 1, 2), )
if mibBuilder.loadTexts: gtmDeviceTable.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceTable.setDescription('A table containing information on devices associated with a\n\t\tserver for GTM (Global Traffic Management).')
gtmDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDeviceServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmDeviceName"))
if mibBuilder.loadTexts: gtmDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceEntry.setDescription('Columns in the gtmDevice Table')
gtmDeviceServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceServerName.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceServerName.setDescription('The name of the server associated with a device.')
gtmDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceName.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceName.setDescription('The name of a device.')
gtmDeviceStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmDeviceStatResetStats.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatResetStats.setDescription('The action to reset resettable statistics data in gtmDeviceStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
gtmDeviceStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatNumber.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatNumber.setDescription('The number of gtmDeviceStat entries in the table.')
gtmDeviceStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 2, 3), )
if mibBuilder.loadTexts: gtmDeviceStatTable.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatTable.setDescription('A table containing statistics information on devices associated with a\n\t\t server for GTM (Global Traffic Management).')
gtmDeviceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatName"))
if mibBuilder.loadTexts: gtmDeviceStatEntry.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatEntry.setDescription('Columns in the gtmDeviceStat Table')
gtmDeviceStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatName.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatName.setDescription('The name of a device.')
gtmDeviceStatServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 2, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatServerName.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatServerName.setDescription('The name of a server.')
gtmDeviceStatCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatCpuUsage.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatCpuUsage.setDescription('The CPU usage in percentage for the specified device.')
gtmDeviceStatMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatMemAvail.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatMemAvail.setDescription('The memory available in bytes for the specified device.')
gtmDeviceStatBitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatBitsPerSecIn.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatBitsPerSecIn.setDescription('The number of bits per second received by the specified device.')
gtmDeviceStatBitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatBitsPerSecOut.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatBitsPerSecOut.setDescription('The number of bits per second sent from the specified device.')
gtmDeviceStatPktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatPktsPerSecIn.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatPktsPerSecIn.setDescription('The number of packets per second received by the specified device.')
gtmDeviceStatPktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatPktsPerSecOut.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatPktsPerSecOut.setDescription('The number of packets per second sent from the specified device.')
gtmDeviceStatConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatConnections.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatConnections.setDescription('The number of total connections to the specified device.')
gtmDeviceStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatusNumber.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatusNumber.setDescription('The number of gtmDeviceStatus entries in the table.')
gtmDeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 3, 2), )
if mibBuilder.loadTexts: gtmDeviceStatusTable.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatusTable.setDescription('A table containing status information of devices within associated\n\t\t server for GTM (Global Traffic Management).')
gtmDeviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatusServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatusName"))
if mibBuilder.loadTexts: gtmDeviceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatusEntry.setDescription('Columns in the gtmDeviceStatus Table')
gtmDeviceStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatusName.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatusName.setDescription('The name of a device.')
gtmDeviceStatusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatusServerName.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatusServerName.setDescription('The name of the server associated with a device.')
gtmDeviceStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatusAvailState.setDescription('The availability of the specified device indicated by color.\n\t    none - error;\n\t    green - available in some capacity;\n\t    yellow - not currently available;\n\t    red - not available;\n\t    blue - availability is unknown;\n\t    gray - unlicensed.')
gtmDeviceStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatusEnabledState.setDescription('The activity status of the specified device, as specified\n\t    by the user.')
gtmDeviceStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 15, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatusDetailReason.setDescription('The detail description of the specified devices status.')
gtmDeviceIpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceIpNumber.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceIpNumber.setDescription('The number of gtmDeviceIp entries in the table.')
gtmDeviceIpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 16, 1, 2), )
if mibBuilder.loadTexts: gtmDeviceIpTable.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceIpTable.setDescription('A table containing information of device IPs for GTM (Global Traffic Management).')
gtmDeviceIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 16, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDeviceIpServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmDeviceIpDeviceName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmDeviceIpIpType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmDeviceIpIp"))
if mibBuilder.loadTexts: gtmDeviceIpEntry.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceIpEntry.setDescription('Columns in the gtmDeviceIp Table')
gtmDeviceIpServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 16, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceIpServerName.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceIpServerName.setDescription('The name of the server associated with the specified device IP address.')
gtmDeviceIpDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 16, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceIpDeviceName.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceIpDeviceName.setDescription('The name of the device associated with the specified device IP address.')
gtmDeviceIpIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 16, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceIpIpType.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceIpIpType.setDescription('The IP address type of gtmDeviceIpIp.')
gtmDeviceIpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 16, 1, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceIpIp.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceIpIp.setDescription('The IP address that belongs to the specified device. It is interpreted\n\t    within the context of a gtmDeviceIpIpType value.')
gtmDeviceIpIpXlatedType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 16, 1, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceIpIpXlatedType.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceIpIpXlatedType.setDescription('The IP address type of gtmDeviceIpIpXlated.')
gtmDeviceIpIpXlated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 16, 1, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDeviceIpIpXlated.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceIpIpXlated.setDescription('The translated address for the specified device IP. It is interpreted\n\t    within the context of a gtmDeviceIpIpXlatedType value.')
gtmLinkIpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkIpNumber.setStatus('current')
if mibBuilder.loadTexts: gtmLinkIpNumber.setDescription('The number of gtmLinkIp entries in the table.')
gtmLinkIpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 17, 1, 2), )
if mibBuilder.loadTexts: gtmLinkIpTable.setStatus('current')
if mibBuilder.loadTexts: gtmLinkIpTable.setDescription('A table containing information of link IPs for GTM (Global Traffic Management).')
gtmLinkIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 17, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkIpLinkName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkIpIpType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkIpIp"))
if mibBuilder.loadTexts: gtmLinkIpEntry.setStatus('current')
if mibBuilder.loadTexts: gtmLinkIpEntry.setDescription('Columns in the gtmLinkIp Table')
gtmLinkIpLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 17, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkIpLinkName.setStatus('current')
if mibBuilder.loadTexts: gtmLinkIpLinkName.setDescription('The link name associated with the specified link IP address.')
gtmLinkIpIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 17, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkIpIpType.setStatus('current')
if mibBuilder.loadTexts: gtmLinkIpIpType.setDescription('The IP address type of gtmLinkIpIp.')
gtmLinkIpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 17, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkIpIp.setStatus('current')
if mibBuilder.loadTexts: gtmLinkIpIp.setDescription('The IP address that belongs to the specified link. It is interpreted\n\t    within the context of a gtmLinkIpIpType value.')
gtmLinkIpIpXlatedType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 17, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkIpIpXlatedType.setStatus('current')
if mibBuilder.loadTexts: gtmLinkIpIpXlatedType.setDescription('The IP address type of gtmLinkIpIpXlated.')
gtmLinkIpIpXlated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 17, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkIpIpXlated.setStatus('current')
if mibBuilder.loadTexts: gtmLinkIpIpXlated.setDescription('The translated address for the specified link IP. It is interpreted\n\t    within the context of a gtmLinkIpIpXlatedType value.')
bigipGlobalTMCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3375, 2, 5, 1, 3)).setObjects(("F5-BIGIP-GLOBAL-MIB", "bigipGlobalTMGroups"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bigipGlobalTMCompliance = bigipGlobalTMCompliance.setStatus('current')
if mibBuilder.loadTexts: bigipGlobalTMCompliance.setDescription('This specifies the objects that are required to claim \n                 compliance to F5 Traffic Management System.')
bigipGlobalTMGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3))
gtmAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 1)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmAttrDumpTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrCacheLdns"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrAolAware"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrCheckStaticDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrCheckDynamicDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDrainRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrEnableResetsRipeness"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrFbRespectDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrFbRespectAcl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDefaultAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDefaultFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrPersistMask"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrGtmSetsRecursion"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorLcs"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorRtt"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorHops"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorHitRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorPacketRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorBps"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorVsCapacity"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimerRetryPathData"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimerGetAutoconfigData"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimerPersistCache"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDefaultProbeLimit"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDownThreshold"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDownMultiple"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrPathTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTraceTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLdnsDuration"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrPathDuration"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrRttSampleCount"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrRttPacketLength"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrRttTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrMaxMonReqs"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTraceroutePort"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrPathsNeverDie"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrProbeDisabledObjects"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkLimitFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrOverLimitLinkLimitFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkPrepaidFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkCompensateInbound"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkCompensateOutbound"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkCompensationHistory"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrMaxLinkOverLimitCount"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLowerBoundPctRow"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLowerBoundPctCol"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrAutoconf"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrAutosync"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrSyncNamedConf"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrSyncGroup"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrSyncTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrSyncZonesTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimeTolerance"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTopologyLongestMatch"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTopologyAclThreshold"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrStaticPersistCidr"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrStaticPersistV6Cidr"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorVsScore"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimerSendKeepAlive"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrCertificateDepth"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrMaxMemoryUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmAttrGroup = gtmAttrGroup.setStatus('current')
if mibBuilder.loadTexts: gtmAttrGroup.setDescription('A collection of objects of gtmGlobalAttr MIB.')
gtmGlobalLdnsProbeProtoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 2)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoIndex"), ("F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoType"), ("F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmGlobalLdnsProbeProtoGroup = gtmGlobalLdnsProbeProtoGroup.setStatus('current')
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoGroup.setDescription('A collection of objects of gtmGlobalLdnsProbeProto MIB.')
gtmStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 3)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatResolutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatPersisted"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatPreferred"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatDropped"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatExplicitIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatReturnToDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatReconnects"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatBytesReceived"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatBytesSent"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatNumBacklogged"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatBytesDropped"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatLdnses"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatPaths"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatReturnFromDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatCnameResolutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatARequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatAaaaRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmStatGroup = gtmStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmStatGroup.setDescription('A collection of objects of gtmGlobalStat MIB.')
gtmAppGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 4)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmAppNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppPersist"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppTtlPersist"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppAvailability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmAppGroup = gtmAppGroup.setStatus('current')
if mibBuilder.loadTexts: gtmAppGroup.setDescription('A collection of objects of gtmApplication MIB.')
gtmAppStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 5)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmAppStatusGroup = gtmAppStatusGroup.setStatus('current')
if mibBuilder.loadTexts: gtmAppStatusGroup.setDescription('A collection of objects of gtmApplicationStatus MIB.')
gtmAppContStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 6)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatAppName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatType"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatNumAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmAppContStatGroup = gtmAppContStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmAppContStatGroup.setDescription('A collection of objects of gtmAppContextStat MIB.')
gtmAppContDisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 7)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmAppContDisNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContDisAppName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContDisType"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContDisName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmAppContDisGroup = gtmAppContDisGroup.setStatus('current')
if mibBuilder.loadTexts: gtmAppContDisGroup.setDescription('A collection of objects of gtmAppContextDisable MIB.')
gtmDcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 8)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmDcNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcLocation"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcContact"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmDcGroup = gtmDcGroup.setStatus('current')
if mibBuilder.loadTexts: gtmDcGroup.setDescription('A collection of objects of gtmDataCenter MIB.')
gtmDcStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 9)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmDcStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatBitsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatBitsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatPktsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatPktsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatConnections"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatConnRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmDcStatGroup = gtmDcStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatGroup.setDescription('A collection of objects of gtmDataCenterStat MIB.')
gtmDcStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 10)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmDcStatusGroup = gtmDcStatusGroup.setStatus('current')
if mibBuilder.loadTexts: gtmDcStatusGroup.setDescription('A collection of objects of gtmDataCenterStatus MIB.')
gtmIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 11)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmIpNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpLinkName"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpUnitId"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpIpXlatedType"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpIpXlated"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpDeviceName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmIpGroup = gtmIpGroup.setStatus('current')
if mibBuilder.loadTexts: gtmIpGroup.setDescription('A collection of objects of gtmIp MIB.')
gtmLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 12)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmLinkNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkDcName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkIspName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkUplinkAddressType"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkUplinkAddress"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkDuplex"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkPrepaid"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkPrepaidInDollars"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkWeightingType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmLinkGroup = gtmLinkGroup.setStatus('current')
if mibBuilder.loadTexts: gtmLinkGroup.setDescription('A collection of objects of gtmLink MIB.')
gtmLinkCostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 13)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostIndex"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostUptoBps"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostDollarsPerMbps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmLinkCostGroup = gtmLinkCostGroup.setStatus('current')
if mibBuilder.loadTexts: gtmLinkCostGroup.setDescription('A collection of objects of gtmLinkCost MIB.')
gtmLinkStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 14)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateNode"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateNodeIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateNodeOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateVses"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateVsesIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateVsesOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatLcsIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatLcsOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatPaths"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmLinkStatGroup = gtmLinkStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatGroup.setDescription('A collection of objects of gtmLinkStat MIB.')
gtmLinkStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 15)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmLinkStatusGroup = gtmLinkStatusGroup.setStatus('current')
if mibBuilder.loadTexts: gtmLinkStatusGroup.setDescription('A collection of objects of gtmLinkStatus MIB.')
gtmPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 16)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmPoolNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolVerifyMember"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolDynamicRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolAnswersToReturn"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLbMode"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolManualResume"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffRtt"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffHops"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffHitRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffPacketRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffVsCapacity"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffBps"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffLcs"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallbackIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallbackIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolCname"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffVsScore"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallbackIpv6Type"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallbackIpv6"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolPoolType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmPoolGroup = gtmPoolGroup.setStatus('current')
if mibBuilder.loadTexts: gtmPoolGroup.setDescription('A collection of objects of gtmPool MIB.')
gtmPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 17)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatPreferred"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatDropped"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatExplicitIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatReturnToDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatReturnFromDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatCnameResolutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatPoolType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmPoolStatGroup = gtmPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatGroup.setDescription('A collection of objects of gtmPoolStat MIB.')
gtmPoolMbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 18)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrOrder"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrPoolType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStaticTarget"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrRdataPriority"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrRdataWeight"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrRdataPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrRdataOrder"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrRdataPreference"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrRdataFlags"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrRdataService"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmPoolMbrGroup = gtmPoolMbrGroup.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrGroup.setDescription('A collection of objects of gtmPoolMember MIB.')
gtmPoolStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 19)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusPoolType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmPoolStatusGroup = gtmPoolStatusGroup.setStatus('current')
if mibBuilder.loadTexts: gtmPoolStatusGroup.setDescription('A collection of objects of gtmPoolStatus MIB.')
gtmPoolMbrDepsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 20)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVipType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVip"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVport"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsDependServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsDependVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsPoolType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmPoolMbrDepsGroup = gtmPoolMbrDepsGroup.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrDepsGroup.setDescription('A collection of objects of gtmPoolMemberDepends MIB.')
gtmPoolMbrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 21)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatPreferred"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatPoolType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmPoolMbrStatGroup = gtmPoolMbrStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatGroup.setDescription('A collection of objects of gtmPoolMemberStat MIB.')
gtmPoolMbrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 22)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusPoolType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmPoolMbrStatusGroup = gtmPoolMbrStatusGroup.setStatus('current')
if mibBuilder.loadTexts: gtmPoolMbrStatusGroup.setDescription('A collection of objects of gtmPoolMemberStatus MIB.')
gtmRegionEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 23)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmRegionEntryNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegionEntryName"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegionEntryRegionDbType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmRegionEntryGroup = gtmRegionEntryGroup.setStatus('current')
if mibBuilder.loadTexts: gtmRegionEntryGroup.setDescription('A collection of objects of gtmRegionEntry MIB.')
gtmRegItemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 24)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmRegItemNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegionDbType"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegionName"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemType"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemNegate"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegEntry"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmRegItemGroup = gtmRegItemGroup.setStatus('current')
if mibBuilder.loadTexts: gtmRegItemGroup.setDescription('A collection of objects of gtmRegItem MIB.')
gtmRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 25)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmRuleNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleName"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleDefinition"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleConfigSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmRuleGroup = gtmRuleGroup.setStatus('current')
if mibBuilder.loadTexts: gtmRuleGroup.setDescription('A collection of objects of gtmRule MIB.')
gtmRuleEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 26)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventName"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventEventType"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventPriority"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventScript"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmRuleEventGroup = gtmRuleEventGroup.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventGroup.setDescription('A collection of objects of gtmRuleEvent MIB.')
gtmRuleEventStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 27)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatEventType"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatPriority"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatFailures"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatAborts"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatTotalExecutions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmRuleEventStatGroup = gtmRuleEventStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmRuleEventStatGroup.setDescription('A collection of objects of gtmRuleEventStat MIB.')
gtmServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 28)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmServerNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerDcName"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerType"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerProberType"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerProber"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerAllowSvcChk"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerAllowPath"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerAllowSnmp"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerAutoconfState"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLinkAutoconfState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmServerGroup = gtmServerGroup.setStatus('current')
if mibBuilder.loadTexts: gtmServerGroup.setDescription('A collection of objects of gtmServer MIB.')
gtmServerStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 29)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmServerStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatUnitId"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatVsPicks"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatBitsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatBitsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatPktsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatPktsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatConnections"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatConnRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmServerStatGroup = gtmServerStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmServerStatGroup.setDescription('A collection of objects of gtmServerStat MIB.')
gtmServerStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 30)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmServerStatusGroup = gtmServerStatusGroup.setStatus('current')
if mibBuilder.loadTexts: gtmServerStatusGroup.setDescription('A collection of objects of gtmServerStatus MIB.')
gtmTopItemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 31)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmTopItemNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsType"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsNegate"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsEntry"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerType"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerNegate"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerEntry"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemWeight"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemOrder"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmTopItemGroup = gtmTopItemGroup.setStatus('current')
if mibBuilder.loadTexts: gtmTopItemGroup.setDescription('A collection of objects of gtmTopItem MIB.')
gtmVsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 32)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmVsNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsIpXlatedType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsIpXlated"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsPortXlated"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLinkName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLtmName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmVsGroup = gtmVsGroup.setStatus('current')
if mibBuilder.loadTexts: gtmVsGroup.setDescription('A collection of objects of gtmVirtualServ MIB.')
gtmVsDepsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 33)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVipType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVip"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVport"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsDependServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsDependVsName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmVsDepsGroup = gtmVsDepsGroup.setStatus('current')
if mibBuilder.loadTexts: gtmVsDepsGroup.setDescription('A collection of objects of gtmVirtualServDepends MIB.')
gtmVsStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 34)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmVsStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatBitsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatBitsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatPktsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatPktsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatConnections"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatVsScore"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatServerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmVsStatGroup = gtmVsStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatGroup.setDescription('A collection of objects of gtmVirtualServStat MIB.')
gtmVsStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 35)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusServerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmVsStatusGroup = gtmVsStatusGroup.setStatus('current')
if mibBuilder.loadTexts: gtmVsStatusGroup.setDescription('A collection of objects of gtmVirtualServStatus MIB.')
gtmWideipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 36)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmWideipNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPersist"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipTtlPersist"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipLbmodePool"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipApplication"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipLastResortPool"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipIpNoError"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipLoadBalancingDecisionLogVerbosity"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipIpNoErrorTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPersistCidr"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPersistV6Cidr"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipMinimalResponse"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipType"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipLastResortPoolType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmWideipGroup = gtmWideipGroup.setStatus('current')
if mibBuilder.loadTexts: gtmWideipGroup.setDescription('A collection of objects of gtmWideip MIB.')
gtmWideipStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 37)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatResolutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatPersisted"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatPreferred"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatDropped"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatExplicitIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatReturnToDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatReturnFromDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatCnameResolutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatARequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatAaaaRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatWipType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmWideipStatGroup = gtmWideipStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatGroup.setDescription('A collection of objects of gtmWideipStat MIB.')
gtmWideipStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 38)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmWideipStatusGroup = gtmWideipStatusGroup.setStatus('current')
if mibBuilder.loadTexts: gtmWideipStatusGroup.setDescription('A collection of objects of gtmWideipStatus MIB.')
gtmWideipAliasGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 39)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasWipName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasWipType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmWideipAliasGroup = gtmWideipAliasGroup.setStatus('current')
if mibBuilder.loadTexts: gtmWideipAliasGroup.setDescription('A collection of objects of gtmWideipAlias MIB.')
gtmWideipPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 40)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolWipName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolOrder"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolWipType"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolPoolType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmWideipPoolGroup = gtmWideipPoolGroup.setStatus('current')
if mibBuilder.loadTexts: gtmWideipPoolGroup.setDescription('A collection of objects of gtmWideipPool MIB.')
gtmWideipRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 41)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleWipName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleRuleName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipRulePriority"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleWipType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmWideipRuleGroup = gtmWideipRuleGroup.setStatus('current')
if mibBuilder.loadTexts: gtmWideipRuleGroup.setDescription('A collection of objects of gtmWideipRule MIB.')
gtmServerStat2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 42)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2ResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2Number"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2Name"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2UnitId"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2VsPicks"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2CpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2MemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2BitsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2BitsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2PktsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2PktsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2Connections"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2ConnRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmServerStat2Group = gtmServerStat2Group.setStatus('current')
if mibBuilder.loadTexts: gtmServerStat2Group.setDescription('A collection of objects of gtmServerStat2 MIB.')
gtmProberPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 43)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolLbMode"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmProberPoolGroup = gtmProberPoolGroup.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolGroup.setDescription('A collection of objects of gtmProberPool MIB.')
gtmProberPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 44)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatTotalProbes"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatSuccessfulProbes"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatFailedProbes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmProberPoolStatGroup = gtmProberPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatGroup.setDescription('A collection of objects of gtmProberPoolStat MIB.')
gtmProberPoolStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 45)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmProberPoolStatusGroup = gtmProberPoolStatusGroup.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolStatusGroup.setDescription('A collection of objects of gtmProberPoolStatus MIB.')
gtmProberPoolMbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 46)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrPmbrOrder"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmProberPoolMbrGroup = gtmProberPoolMbrGroup.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrGroup.setDescription('A collection of objects of gtmProberPoolMember MIB.')
gtmProberPoolMbrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 47)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatTotalProbes"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatSuccessfulProbes"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatFailedProbes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmProberPoolMbrStatGroup = gtmProberPoolMbrStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatGroup.setDescription('A collection of objects of gtmProberPoolMemberStat MIB.')
gtmProberPoolMbrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 48)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmProberPoolMbrStatusGroup = gtmProberPoolMbrStatusGroup.setStatus('current')
if mibBuilder.loadTexts: gtmProberPoolMbrStatusGroup.setDescription('A collection of objects of gtmProberPoolMemberStatus MIB.')
gtmAttr2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 49)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmAttr2Number"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DumpTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2CacheLdns"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2AolAware"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2CheckStaticDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2CheckDynamicDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DrainRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2EnableResetsRipeness"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2FbRespectDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2FbRespectAcl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DefaultAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DefaultFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2PersistMask"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2GtmSetsRecursion"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorLcs"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorRtt"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorHops"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorHitRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorPacketRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorBps"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorVsCapacity"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimerRetryPathData"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimerGetAutoconfigData"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimerPersistCache"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DefaultProbeLimit"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DownThreshold"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DownMultiple"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2PathTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TraceTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LdnsDuration"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2PathDuration"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2RttSampleCount"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2RttPacketLength"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2RttTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2MaxMonReqs"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TraceroutePort"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2PathsNeverDie"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2ProbeDisabledObjects"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkLimitFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2OverLimitLinkLimitFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkPrepaidFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkCompensateInbound"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkCompensateOutbound"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkCompensationHistory"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2MaxLinkOverLimitCount"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LowerBoundPctRow"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LowerBoundPctCol"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2Autoconf"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2Autosync"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2SyncNamedConf"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2SyncGroup"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2SyncTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2SyncZonesTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimeTolerance"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TopologyLongestMatch"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TopologyAclThreshold"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2StaticPersistCidr"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2StaticPersistV6Cidr"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorVsScore"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimerSendKeepAlive"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2CertificateDepth"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2MaxMemoryUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2Name"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2ForwardStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmAttr2Group = gtmAttr2Group.setStatus('current')
if mibBuilder.loadTexts: gtmAttr2Group.setDescription('A collection of objects of gtmGlobalAttr2 MIB.')
gtmDnssecZoneStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 50)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatNsec3s"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatNsec3Nodata"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatNsec3Nxdomain"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatNsec3Referral"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatNsec3Resalt"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatDnssecResponses"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatDnssecDnskeyQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatDnssecNsec3paramQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatDnssecDsQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatSigCryptoFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatSigSuccess"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatSigFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatSigRrsetFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatConnectFlowFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatTowireFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatAxfrQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatIxfrQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatXfrStarts"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatXfrCompletes"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatXfrMsgs"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatXfrMasterMsgs"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatXfrResponseAverageSize"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatXfrSerial"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatXfrMasterSerial"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatDsXfr"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatDsReferral"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatDnssecCdsQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatDnssecCdnskeyQueries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmDnssecZoneStatGroup = gtmDnssecZoneStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecZoneStatGroup.setDescription('A collection of objects of gtmDnssecZoneStat MIB.')
gtmDnssecStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 51)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatNsec3s"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatNsec3Nodata"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatNsec3Nxdomain"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatNsec3Referral"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatNsec3Resalt"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatDnssecResponses"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatDnssecDnskeyQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatDnssecNsec3paramQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatDnssecDsQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatSigCryptoFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatSigSuccess"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatSigFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatSigRrsetFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatConnectFlowFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatTowireFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatAxfrQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatIxfrQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatXfrStarts"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatXfrCompletes"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatXfrMsgs"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatXfrMasterMsgs"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatXfrResponseAverageSize"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatXfrSerial"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatXfrMasterSerial"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmDnssecStatGroup = gtmDnssecStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmDnssecStatGroup.setDescription('A collection of objects of gtmGlobalDnssecStat MIB.')
gtmApplicationWideipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 52)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmApplicationWideipNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmApplicationWideipApplicationName"), ("F5-BIGIP-GLOBAL-MIB", "gtmApplicationWideipWipName"), ("F5-BIGIP-GLOBAL-MIB", "gtmApplicationWideipWipType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmApplicationWideipGroup = gtmApplicationWideipGroup.setStatus('current')
if mibBuilder.loadTexts: gtmApplicationWideipGroup.setDescription('A collection of objects of gtmApplicationWideip MIB.')
gtmDeviceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 53)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmDeviceNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmDeviceGroup = gtmDeviceGroup.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceGroup.setDescription('A collection of objects of gtmDevice MIB.')
gtmDeviceStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 54)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatBitsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatBitsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatPktsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatPktsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatConnections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmDeviceStatGroup = gtmDeviceStatGroup.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatGroup.setDescription('A collection of objects of gtmDeviceStat MIB.')
gtmDeviceStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 55)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatusServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmDeviceStatusGroup = gtmDeviceStatusGroup.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceStatusGroup.setDescription('A collection of objects of gtmDeviceStatus MIB.')
gtmDeviceIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 56)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmDeviceIpNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceIpServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceIpDeviceName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceIpIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceIpIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceIpIpXlatedType"), ("F5-BIGIP-GLOBAL-MIB", "gtmDeviceIpIpXlated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmDeviceIpGroup = gtmDeviceIpGroup.setStatus('current')
if mibBuilder.loadTexts: gtmDeviceIpGroup.setDescription('A collection of objects of gtmDeviceIp MIB.')
gtmLinkIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 57)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmLinkIpNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkIpLinkName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkIpIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkIpIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkIpIpXlatedType"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkIpIpXlated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmLinkIpGroup = gtmLinkIpGroup.setStatus('current')
if mibBuilder.loadTexts: gtmLinkIpGroup.setDescription('A collection of objects of gtmLinkIp MIB.')
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmProberPoolMbrTable=gtmProberPoolMbrTable, gtmStatFallback=gtmStatFallback, gtmWideipStatEntry=gtmWideipStatEntry, gtmRuleEventStatPriority=gtmRuleEventStatPriority, gtmLinkIpNumber=gtmLinkIpNumber, gtmAppTtlPersist=gtmAppTtlPersist, gtmAttr2SyncTimeout=gtmAttr2SyncTimeout, gtmRuleGroup=gtmRuleGroup, gtmRuleNumber=gtmRuleNumber, gtmAppContStatNumber=gtmAppContStatNumber, gtmWideipStatus=gtmWideipStatus, gtmWideipNumber=gtmWideipNumber, gtmLinkIp=gtmLinkIp, gtmStatNumBacklogged=gtmStatNumBacklogged, gtmAttrLdnsDuration=gtmAttrLdnsDuration, gtmAppNumber=gtmAppNumber, gtmDcContact=gtmDcContact, gtmAttr2DrainRequests=gtmAttr2DrainRequests, gtmPoolMbrLimitMemAvail=gtmPoolMbrLimitMemAvail, gtmLinkLimitInConnEnabled=gtmLinkLimitInConnEnabled, gtmRule=gtmRule, gtmServerStatusEntry=gtmServerStatusEntry, gtmAttrAutoconf=gtmAttrAutoconf, gtmPoolLimitBitsPerSec=gtmPoolLimitBitsPerSec, gtmLinkLimitTotalConnPerSecEnabled=gtmLinkLimitTotalConnPerSecEnabled, gtmDeviceStatusAvailState=gtmDeviceStatusAvailState, gtmDnssecZoneStatDnssecNsec3paramQueries=gtmDnssecZoneStatDnssecNsec3paramQueries, gtmVsDepsPort=gtmVsDepsPort, gtmAttrLinkCompensateInbound=gtmAttrLinkCompensateInbound, gtmPoolStatFallback=gtmPoolStatFallback, gtmPoolStatusGroup=gtmPoolStatusGroup, gtmAttrGroup=gtmAttrGroup, gtmVsEnabled=gtmVsEnabled, gtmPoolQosCoeffHops=gtmPoolQosCoeffHops, gtmWideipLoadBalancingDecisionLogVerbosity=gtmWideipLoadBalancingDecisionLogVerbosity, gtmAttrStaticPersistCidr=gtmAttrStaticPersistCidr, gtmVsStatusAvailState=gtmVsStatusAvailState, bigipGlobalTM=bigipGlobalTM, gtmDnssecStatIxfrQueries=gtmDnssecStatIxfrQueries, gtmLinkName=gtmLinkName, gtmWideipAliasGroup=gtmWideipAliasGroup, gtmPoolLimitMemAvail=gtmPoolLimitMemAvail, gtmLinkEnabled=gtmLinkEnabled, gtmPoolTtl=gtmPoolTtl, gtmPoolStatCnameResolutions=gtmPoolStatCnameResolutions, gtmAppEntry=gtmAppEntry, gtmRuleConfigSource=gtmRuleConfigSource, gtmWideipStatusAvailState=gtmWideipStatusAvailState, gtmDeviceStatBitsPerSecIn=gtmDeviceStatBitsPerSecIn, gtmDeviceIpEntry=gtmDeviceIpEntry, gtmPoolMonitorRule=gtmPoolMonitorRule, gtmIpIp=gtmIpIp, gtmPoolStatusTable=gtmPoolStatusTable, gtmPoolLimitBitsPerSecEnabled=gtmPoolLimitBitsPerSecEnabled, gtmProberPoolMbrStatResetStats=gtmProberPoolMbrStatResetStats, gtmVsDepsVport=gtmVsDepsVport, gtmAppContextDisable=gtmAppContextDisable, gtmLinkLimitInBitsPerSec=gtmLinkLimitInBitsPerSec, gtmDnssecZoneStatXfrResponseAverageSize=gtmDnssecZoneStatXfrResponseAverageSize, gtmServerLimitCpuUsage=gtmServerLimitCpuUsage, gtmAttr2QosFactorLcs=gtmAttr2QosFactorLcs, gtmPoolMbrOrder=gtmPoolMbrOrder, gtmAttr2RttSampleCount=gtmAttr2RttSampleCount, gtmLinkStatName=gtmLinkStatName, gtmWideips=gtmWideips, gtmTopItemNumber=gtmTopItemNumber, gtmGlobalLdnsProbeProtoName=gtmGlobalLdnsProbeProtoName, gtmAttr2Table=gtmAttr2Table, gtmDeviceIpGroup=gtmDeviceIpGroup, gtmPoolMbrEnabled=gtmPoolMbrEnabled, gtmVsDepsVsName=gtmVsDepsVsName, gtmRegItemRegionName=gtmRegItemRegionName, gtmGlobalLdnsProbeProtoType=gtmGlobalLdnsProbeProtoType, gtmPoolLbMode=gtmPoolLbMode, gtmAttrLinkLimitFactor=gtmAttrLinkLimitFactor, gtmDnssecStatSigFailed=gtmDnssecStatSigFailed, gtmProberPoolMbrStatEntry=gtmProberPoolMbrStatEntry, gtmStatAaaaRequests=gtmStatAaaaRequests, gtmAppContDisAppName=gtmAppContDisAppName, gtmServerAllowSnmp=gtmServerAllowSnmp, gtmIpTable=gtmIpTable, gtmLinkIpIp=gtmLinkIpIp, gtmStatGroup=gtmStatGroup, gtmWideipAliasEntry=gtmWideipAliasEntry, gtmPoolLimitCpuUsageEnabled=gtmPoolLimitCpuUsageEnabled, gtmVsStatServerName=gtmVsStatServerName, gtmWideipStatusName=gtmWideipStatusName, gtmAttrTraceroutePort=gtmAttrTraceroutePort, gtmPoolManualResume=gtmPoolManualResume, gtmPoolMbrLimitConnPerSecEnabled=gtmPoolMbrLimitConnPerSecEnabled, gtmAppContStatAppName=gtmAppContStatAppName, gtmTopItemOrder=gtmTopItemOrder, gtmAttr2TimerGetAutoconfigData=gtmAttr2TimerGetAutoconfigData, gtmServerStatTable=gtmServerStatTable, gtmVsDepsServerName=gtmVsDepsServerName, gtmAttr2CheckStaticDepends=gtmAttr2CheckStaticDepends, gtmLinkLimitTotalConnPerSec=gtmLinkLimitTotalConnPerSec, gtmServerStat2UnitId=gtmServerStat2UnitId, gtmWideipAliasNumber=gtmWideipAliasNumber, gtmAttrLinkPrepaidFactor=gtmAttrLinkPrepaidFactor, gtmProberPoolMbrNumber=gtmProberPoolMbrNumber, gtmProberPoolName=gtmProberPoolName, gtmAttr2TimeTolerance=gtmAttr2TimeTolerance, gtmAttrCertificateDepth=gtmAttrCertificateDepth, gtmLinkLimitInPktsPerSecEnabled=gtmLinkLimitInPktsPerSecEnabled, gtmServerEnabled=gtmServerEnabled, gtmWideipStatusTable=gtmWideipStatusTable, gtmServerStat2PktsPerSecIn=gtmServerStat2PktsPerSecIn, gtmProberPoolStatusTable=gtmProberPoolStatusTable, gtmVsMonitorRule=gtmVsMonitorRule, gtmPoolLimitConnPerSecEnabled=gtmPoolLimitConnPerSecEnabled, gtmAttrDefaultFallback=gtmAttrDefaultFallback, gtmLinkIpEntry=gtmLinkIpEntry, gtmAttr2PathTtl=gtmAttr2PathTtl, gtmLinkIps=gtmLinkIps, gtmPoolName=gtmPoolName, gtmVsDepsIpType=gtmVsDepsIpType, gtmPoolMbrLimitMemAvailEnabled=gtmPoolMbrLimitMemAvailEnabled, gtmPoolMbrStatusPort=gtmPoolMbrStatusPort, gtmAttrCacheLdns=gtmAttrCacheLdns, gtmWideipStatusEnabledState=gtmWideipStatusEnabledState, gtmLinkStatRateNode=gtmLinkStatRateNode, gtmLinkIpTable=gtmLinkIpTable, gtmPoolMbrStatServerName=gtmPoolMbrStatServerName, gtmVsDepsVipType=gtmVsDepsVipType, gtmVsStatusGroup=gtmVsStatusGroup, gtmVsStatGroup=gtmVsStatGroup, gtmRuleEventStatEntry=gtmRuleEventStatEntry, gtmPoolStatTable=gtmPoolStatTable, gtmServerNumber=gtmServerNumber, gtmServerStatPktsPerSecOut=gtmServerStatPktsPerSecOut, gtmVsDepsDependVsName=gtmVsDepsDependVsName, gtmServerStat2PktsPerSecOut=gtmServerStat2PktsPerSecOut, gtmPoolMbrDepsTable=gtmPoolMbrDepsTable, gtmDeviceStatBitsPerSecOut=gtmDeviceStatBitsPerSecOut, gtmWideipIpNoError=gtmWideipIpNoError, gtmServerStat2MemAvail=gtmServerStat2MemAvail, gtmDcStatName=gtmDcStatName, gtmProberPoolMbrStatusAvailState=gtmProberPoolMbrStatusAvailState, gtmDnssecZoneStatNsec3Nxdomain=gtmDnssecZoneStatNsec3Nxdomain, gtmStatLdnses=gtmStatLdnses, gtmStatBytesReceived=gtmStatBytesReceived, gtmProberPoolStatName=gtmProberPoolStatName, gtmDeviceStatusServerName=gtmDeviceStatusServerName, gtmRegItemNumber=gtmRegItemNumber, gtmDeviceIpDeviceName=gtmDeviceIpDeviceName, gtmProberPoolMbrStatusTable=gtmProberPoolMbrStatusTable, gtmGlobalAttrs=gtmGlobalAttrs, gtmVsDepsNumber=gtmVsDepsNumber, bigipGlobalTMCompliance=bigipGlobalTMCompliance, gtmAttr2TopologyAclThreshold=gtmAttr2TopologyAclThreshold, gtmAppStatusGroup=gtmAppStatusGroup, gtmPoolMbrTable=gtmPoolMbrTable, gtmDcStatusName=gtmDcStatusName, gtmPoolTable=gtmPoolTable, gtmRegItemRegEntry=gtmRegItemRegEntry, gtmDeviceIpServerName=gtmDeviceIpServerName, gtmDeviceStatusGroup=gtmDeviceStatusGroup, gtmLinkStatusDetailReason=gtmLinkStatusDetailReason, gtmDnssecZoneStatXfrMasterSerial=gtmDnssecZoneStatXfrMasterSerial, gtmLinkStatusAvailState=gtmLinkStatusAvailState, gtmAttr2OverLimitLinkLimitFactor=gtmAttr2OverLimitLinkLimitFactor, gtmPoolMbrLimitPktsPerSec=gtmPoolMbrLimitPktsPerSec, gtmAttr2DownMultiple=gtmAttr2DownMultiple, gtmLinkLimitOutConnEnabled=gtmLinkLimitOutConnEnabled, gtmPoolStatDropped=gtmPoolStatDropped, gtmDataCenter=gtmDataCenter, gtmDeviceTable=gtmDeviceTable, gtmDnssecZoneStatDsReferral=gtmDnssecZoneStatDsReferral, gtmWideipRule=gtmWideipRule, gtmDcGroup=gtmDcGroup, gtmServers=gtmServers, gtmPoolMbrIp=gtmPoolMbrIp, gtmPoolMbrDepsIpType=gtmPoolMbrDepsIpType, gtmPoolMbrStatVsName=gtmPoolMbrStatVsName, gtmTopItemTable=gtmTopItemTable, gtmAttrTimerSendKeepAlive=gtmAttrTimerSendKeepAlive, gtmLinkPrepaid=gtmLinkPrepaid, gtmProberPoolMbrEnabled=gtmProberPoolMbrEnabled, gtmServerStatusEnabledState=gtmServerStatusEnabledState, gtmVsLimitPktsPerSecEnabled=gtmVsLimitPktsPerSecEnabled, gtmProberPoolMbrStatTable=gtmProberPoolMbrStatTable, gtmProberPoolStat=gtmProberPoolStat, gtmLinkDuplex=gtmLinkDuplex, gtmLinkCostName=gtmLinkCostName, gtmProberPoolStatSuccessfulProbes=gtmProberPoolStatSuccessfulProbes, gtmPoolMbrDepsVipType=gtmPoolMbrDepsVipType, gtmVsPort=gtmVsPort, gtmVsServerName=gtmVsServerName, gtmAppContStatType=gtmAppContStatType, gtmLinkCostIndex=gtmLinkCostIndex, gtmWideipStatPersisted=gtmWideipStatPersisted, gtmGlobalLdnsProbeProtoEntry=gtmGlobalLdnsProbeProtoEntry, gtmRuleEventStatTable=gtmRuleEventStatTable, gtmPoolMbrDepsPoolType=gtmPoolMbrDepsPoolType, gtmAttrLowerBoundPctCol=gtmAttrLowerBoundPctCol, gtmLinkLimitOutConnPerSec=gtmLinkLimitOutConnPerSec, gtmWideipStatRequests=gtmWideipStatRequests, gtmAttr2QosFactorPacketRate=gtmAttr2QosFactorPacketRate, gtmProberPoolMbrGroup=gtmProberPoolMbrGroup, gtmAttrQosFactorConnRate=gtmAttrQosFactorConnRate, gtmDcStatNumber=gtmDcStatNumber, gtmServerStatName=gtmServerStatName, gtmDcTable=gtmDcTable, gtmWideipPersistV6Cidr=gtmWideipPersistV6Cidr, gtmAppContStatGroup=gtmAppContStatGroup, gtmProberPoolMbrServerName=gtmProberPoolMbrServerName, gtmApplicationWideip=gtmApplicationWideip, gtmDnssecStatNsec3Referral=gtmDnssecStatNsec3Referral, gtmDnssecZoneStatDnssecDnskeyQueries=gtmDnssecZoneStatDnssecDnskeyQueries, gtmAttr2QosFactorVsCapacity=gtmAttr2QosFactorVsCapacity, gtmVsStatBitsPerSecIn=gtmVsStatBitsPerSecIn, gtmVsIpType=gtmVsIpType, gtmPoolStat=gtmPoolStat, gtmWideipType=gtmWideipType, gtmPoolQosCoeffBps=gtmPoolQosCoeffBps, gtmDeviceStatusDetailReason=gtmDeviceStatusDetailReason, gtmProberPoolMbrStatNumber=gtmProberPoolMbrStatNumber, gtmPoolStatusName=gtmPoolStatusName, gtmServerStat2Group=gtmServerStat2Group, gtmDataCenterStatus=gtmDataCenterStatus, gtmAttr2LinkCompensateOutbound=gtmAttr2LinkCompensateOutbound, gtmDnssecStatDnssecResponses=gtmDnssecStatDnssecResponses, gtmPoolMbrStatNumber=gtmPoolMbrStatNumber, gtmTopItemServerType=gtmTopItemServerType, gtmVsLimitConnPerSec=gtmVsLimitConnPerSec, gtmAttr2SyncNamedConf=gtmAttr2SyncNamedConf, gtmStatDropped=gtmStatDropped, gtmLinkLimitInCpuUsageEnabled=gtmLinkLimitInCpuUsageEnabled, gtmPoolStatReturnFromDns=gtmPoolStatReturnFromDns, gtmAttr2DumpTopology=gtmAttr2DumpTopology, gtmAttrMaxLinkOverLimitCount=gtmAttrMaxLinkOverLimitCount, gtmAttrQosFactorRtt=gtmAttrQosFactorRtt, gtmPoolMbrStatResetStats=gtmPoolMbrStatResetStats, gtmAttr2CertificateDepth=gtmAttr2CertificateDepth, gtmAttr2Group=gtmAttr2Group, gtmLinkLimitInConnPerSec=gtmLinkLimitInConnPerSec, gtmAttrAutosync=gtmAttrAutosync, gtmServerStat2Name=gtmServerStat2Name, gtmAttr2DownThreshold=gtmAttr2DownThreshold, gtmAppContDisGroup=gtmAppContDisGroup, gtmAttrStaticPersistV6Cidr=gtmAttrStaticPersistV6Cidr, gtmAttr2LowerBoundPctRow=gtmAttr2LowerBoundPctRow, gtmAppStatusTable=gtmAppStatusTable, gtmProberPoolMbrStatusEnabledState=gtmProberPoolMbrStatusEnabledState, gtmPoolMbrLimitBitsPerSecEnabled=gtmPoolMbrLimitBitsPerSecEnabled, gtmPoolQosCoeffLcs=gtmPoolQosCoeffLcs, gtmDnssecZoneStatNumber=gtmDnssecZoneStatNumber, gtmApplicationWideipNumber=gtmApplicationWideipNumber, gtmPoolMbrStatusAvailState=gtmPoolMbrStatusAvailState, gtmVsStatPort=gtmVsStatPort, gtmProberPoolMbrStatusGroup=gtmProberPoolMbrStatusGroup, gtmPoolMbrStatusIpType=gtmPoolMbrStatusIpType, gtmAttrSyncNamedConf=gtmAttrSyncNamedConf)
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmRuleEntry=gtmRuleEntry, gtmWideipLastResortPool=gtmWideipLastResortPool, gtmWideipLastResortPoolType=gtmWideipLastResortPoolType, gtmLinkLimitOutCpuUsage=gtmLinkLimitOutCpuUsage, gtmLinkPrepaidInDollars=gtmLinkPrepaidInDollars, gtmAttrDumpTopology=gtmAttrDumpTopology, gtmDnssecZoneStatTowireFailed=gtmDnssecZoneStatTowireFailed, gtmAttrTimerPersistCache=gtmAttrTimerPersistCache, gtmRuleDefinition=gtmRuleDefinition, gtmServerName=gtmServerName, gtmAttrDefaultProbeLimit=gtmAttrDefaultProbeLimit, gtmPoolMbrLimitBitsPerSec=gtmPoolMbrLimitBitsPerSec, gtmDcLocation=gtmDcLocation, gtmDnssecStatNsec3Nxdomain=gtmDnssecStatNsec3Nxdomain, gtmWideipAliasTable=gtmWideipAliasTable, gtmServerLimitPktsPerSec=gtmServerLimitPktsPerSec, gtmDnssecStatNsec3Resalt=gtmDnssecStatNsec3Resalt, gtmApplicationWideipTable=gtmApplicationWideipTable, gtmRegItem=gtmRegItem, gtmPoolFallbackIpType=gtmPoolFallbackIpType, gtmPool=gtmPool, gtmPoolQosCoeffVsCapacity=gtmPoolQosCoeffVsCapacity, gtmPoolMbrLimitCpuUsage=gtmPoolMbrLimitCpuUsage, gtmPoolMbrDepsDependServerName=gtmPoolMbrDepsDependServerName, gtmProberPoolStatusNumber=gtmProberPoolStatusNumber, gtmAttr2TraceTtl=gtmAttr2TraceTtl, gtmGlobals=gtmGlobals, gtmLinkCostDollarsPerMbps=gtmLinkCostDollarsPerMbps, gtmLinkStatusNumber=gtmLinkStatusNumber, gtmPoolMbrRdataWeight=gtmPoolMbrRdataWeight, gtmPoolMbrLimitConnEnabled=gtmPoolMbrLimitConnEnabled, gtmIpServerName=gtmIpServerName, gtmPoolMember=gtmPoolMember, gtmPoolMbrStatAlternate=gtmPoolMbrStatAlternate, gtmRuleEventStatResetStats=gtmRuleEventStatResetStats, gtmTopItemEntry=gtmTopItemEntry, gtmServerStat2ConnRate=gtmServerStat2ConnRate, gtmAttr2TimerPersistCache=gtmAttr2TimerPersistCache, gtmVsLimitConnPerSecEnabled=gtmVsLimitConnPerSecEnabled, gtmDnssecZoneStatDsXfr=gtmDnssecZoneStatDsXfr, gtmLinkLimitInCpuUsage=gtmLinkLimitInCpuUsage, gtmPoolMbrIpType=gtmPoolMbrIpType, gtmLinkLimitTotalCpuUsageEnabled=gtmLinkLimitTotalCpuUsageEnabled, gtmServerEntry=gtmServerEntry, gtmLinkLimitInMemAvailEnabled=gtmLinkLimitInMemAvailEnabled, gtmAttr2LinkCompensationHistory=gtmAttr2LinkCompensationHistory, gtmServerStat=gtmServerStat, gtmAttrProbeDisabledObjects=gtmAttrProbeDisabledObjects, gtmAttrMaxMemoryUsage=gtmAttrMaxMemoryUsage, gtmDcStatusEnabledState=gtmDcStatusEnabledState, gtmServerLimitPktsPerSecEnabled=gtmServerLimitPktsPerSecEnabled, gtmServerStatBitsPerSecIn=gtmServerStatBitsPerSecIn, gtmProberPoolStatusEnabledState=gtmProberPoolStatusEnabledState, gtmLinkStatRateNodeOut=gtmLinkStatRateNodeOut, gtmServerStatusAvailState=gtmServerStatusAvailState, gtmGlobalLdnsProbeProtoTable=gtmGlobalLdnsProbeProtoTable, gtmAttr2ProbeDisabledObjects=gtmAttr2ProbeDisabledObjects, gtmDeviceGroup=gtmDeviceGroup, gtmDeviceStatPktsPerSecOut=gtmDeviceStatPktsPerSecOut, gtmLinkStatusEntry=gtmLinkStatusEntry, gtmStatResetStats=gtmStatResetStats, gtmAttr2Number=gtmAttr2Number, gtmLinkStatTable=gtmLinkStatTable, gtmRegItemRegionDbType=gtmRegItemRegionDbType, gtmDeviceStatNumber=gtmDeviceStatNumber, gtmPoolMbrRdataPort=gtmPoolMbrRdataPort, gtmAppContStatAvailState=gtmAppContStatAvailState, gtmPoolMbrStatPort=gtmPoolMbrStatPort, gtmAppContStatName=gtmAppContStatName, gtmGlobalDnssecStat=gtmGlobalDnssecStat, gtmServerStat2Number=gtmServerStat2Number, gtmVirtualServers=gtmVirtualServers, gtmRuleEventNumber=gtmRuleEventNumber, gtmWideipAliasWipType=gtmWideipAliasWipType, gtmApplicationWideipWipName=gtmApplicationWideipWipName, gtmAttr2Autoconf=gtmAttr2Autoconf, gtmWideipStatNumber=gtmWideipStatNumber, gtmWideipEntry=gtmWideipEntry, gtmServerLinkAutoconfState=gtmServerLinkAutoconfState, gtmServerStat2BitsPerSecOut=gtmServerStat2BitsPerSecOut, gtmPoolMbrStatusTable=gtmPoolMbrStatusTable, gtmServerLimitCpuUsageEnabled=gtmServerLimitCpuUsageEnabled, gtmDcStatConnRate=gtmDcStatConnRate, gtmDnssecZoneStatIxfrQueries=gtmDnssecZoneStatIxfrQueries, gtmPoolMbrDepsVsName=gtmPoolMbrDepsVsName, gtmDeviceStatusName=gtmDeviceStatusName, gtmDeviceIpNumber=gtmDeviceIpNumber, gtmAttr2SyncGroup=gtmAttr2SyncGroup, gtmPoolMbrLimitConn=gtmPoolMbrLimitConn, gtmAttrSyncGroup=gtmAttrSyncGroup, gtmApplicationWideipApplicationName=gtmApplicationWideipApplicationName, gtmStatReconnects=gtmStatReconnects, gtmAttrDrainRequests=gtmAttrDrainRequests, gtmAttr2FbRespectDepends=gtmAttr2FbRespectDepends, gtmPoolStatReturnToDns=gtmPoolStatReturnToDns, gtmPoolMbrGroup=gtmPoolMbrGroup, gtmDeviceStatGroup=gtmDeviceStatGroup, gtmAppContDisNumber=gtmAppContDisNumber, gtmVsLimitBitsPerSec=gtmVsLimitBitsPerSec, gtmDeviceStatEntry=gtmDeviceStatEntry, gtmLinkLimitOutMemAvailEnabled=gtmLinkLimitOutMemAvailEnabled, gtmPoolStatNumber=gtmPoolStatNumber, gtmProberPoolMbrStatusDetailReason=gtmProberPoolMbrStatusDetailReason, gtmPoolMbrStatTable=gtmPoolMbrStatTable, gtmLinkLimitTotalConn=gtmLinkLimitTotalConn, gtmVsStatIp=gtmVsStatIp, gtmAttrOverLimitLinkLimitFactor=gtmAttrOverLimitLinkLimitFactor, gtmPoolMbrStatFallback=gtmPoolMbrStatFallback, gtmDataCenterStat=gtmDataCenterStat, gtmAttr2QosFactorHops=gtmAttr2QosFactorHops, gtmVsNumber=gtmVsNumber, gtmRuleName=gtmRuleName, gtmServerType=gtmServerType, gtmPoolMbrDepsIp=gtmPoolMbrDepsIp, gtmDeviceStatName=gtmDeviceStatName, gtmWideipStatusEntry=gtmWideipStatusEntry, gtmLinkLimitOutPktsPerSec=gtmLinkLimitOutPktsPerSec, gtmDeviceIpIp=gtmDeviceIpIp, gtmWideipStatusGroup=gtmWideipStatusGroup, gtmPoolStatusEnabledState=gtmPoolStatusEnabledState, gtmVsLimitPktsPerSec=gtmVsLimitPktsPerSec, gtmVsStatusDetailReason=gtmVsStatusDetailReason, gtmGlobalLdnsProbeProto=gtmGlobalLdnsProbeProto, gtmDeviceStatConnections=gtmDeviceStatConnections, gtmWideipPersist=gtmWideipPersist, gtmVsGroup=gtmVsGroup, gtmGlobalAttr=gtmGlobalAttr, gtmDeviceIp=gtmDeviceIp, gtmLinkStatLcsIn=gtmLinkStatLcsIn, gtmDeviceStatMemAvail=gtmDeviceStatMemAvail, gtmVsDepsGroup=gtmVsDepsGroup, gtmWideipAlias=gtmWideipAlias, gtmDnssecZoneStatSigCryptoFailed=gtmDnssecZoneStatSigCryptoFailed, gtmDataCenters=gtmDataCenters, gtmLinkIspName=gtmLinkIspName, gtmProberPoolStatusDetailReason=gtmProberPoolStatusDetailReason, gtmAttr2Autosync=gtmAttr2Autosync, gtmVsLimitConn=gtmVsLimitConn, gtmProberPoolMbrStatusServerName=gtmProberPoolMbrStatusServerName, gtmDeviceIps=gtmDeviceIps, gtmTopItemLdnsEntry=gtmTopItemLdnsEntry, gtmDnssecStatXfrStarts=gtmDnssecStatXfrStarts, gtmAttrTimerGetAutoconfigData=gtmAttrTimerGetAutoconfigData, gtmIpEntry=gtmIpEntry, gtmProberPoolMbrStatGroup=gtmProberPoolMbrStatGroup, gtmDeviceStatServerName=gtmDeviceStatServerName, gtmDcStatPktsPerSecOut=gtmDcStatPktsPerSecOut, gtmLinkStatEntry=gtmLinkStatEntry, gtmServerProberType=gtmServerProberType, gtmPoolMbrRdataFlags=gtmPoolMbrRdataFlags, gtmLinkStatusName=gtmLinkStatusName, gtmVsPortXlated=gtmVsPortXlated, gtmDnssecStatAxfrQueries=gtmDnssecStatAxfrQueries, gtmDnssecZoneStatConnectFlowFailed=gtmDnssecZoneStatConnectFlowFailed, gtmPoolMbrStatusEnabledState=gtmPoolMbrStatusEnabledState, gtmDeviceStatCpuUsage=gtmDeviceStatCpuUsage, gtmAttrFbRespectAcl=gtmAttrFbRespectAcl, gtmLinkWeightingType=gtmLinkWeightingType, gtmLinkStatRateVsesIn=gtmLinkStatRateVsesIn, gtmWideipStatusDetailReason=gtmWideipStatusDetailReason, gtmProberPoolMbrEntry=gtmProberPoolMbrEntry, gtmPoolMbrMonitorRule=gtmPoolMbrMonitorRule, gtmServerStat2=gtmServerStat2, gtmPoolAnswersToReturn=gtmPoolAnswersToReturn, gtmProberPoolTable=gtmProberPoolTable, gtmLinkStatGroup=gtmLinkStatGroup, gtmPoolMbrStatusVsName=gtmPoolMbrStatusVsName, gtmProberPoolMbrStatServerName=gtmProberPoolMbrStatServerName, gtmRuleEventStatFailures=gtmRuleEventStatFailures, gtmLinkMonitorRule=gtmLinkMonitorRule, gtmAttr2CheckDynamicDepends=gtmAttr2CheckDynamicDepends, gtmLinkStatRateOut=gtmLinkStatRateOut, gtmServerStatBitsPerSecOut=gtmServerStatBitsPerSecOut, gtmPoolMemberDepends=gtmPoolMemberDepends, gtmRegItemType=gtmRegItemType, gtmWideipPoolWipType=gtmWideipPoolWipType, gtmLinkLimitInConnPerSecEnabled=gtmLinkLimitInConnPerSecEnabled, gtmDcStatusTable=gtmDcStatusTable, gtmDeviceIpTable=gtmDeviceIpTable, gtmRuleEventStatAborts=gtmRuleEventStatAborts, gtmWideip=gtmWideip, gtmDnssecStatXfrMasterSerial=gtmDnssecStatXfrMasterSerial, gtmVsStatusIp=gtmVsStatusIp, gtmStatResolutions=gtmStatResolutions, gtmAttr2DefaultFallback=gtmAttr2DefaultFallback, gtmPoolMbrRdataService=gtmPoolMbrRdataService, gtmGlobalAttr2=gtmGlobalAttr2, gtmPoolMbrStatIp=gtmPoolMbrStatIp, gtmServerStat2BitsPerSecIn=gtmServerStat2BitsPerSecIn, gtmStatExplicitIp=gtmStatExplicitIp, gtmServerAllowPath=gtmServerAllowPath, gtmVsLtmName=gtmVsLtmName, gtmVsStatResetStats=gtmVsStatResetStats, gtmAttrRttSampleCount=gtmAttrRttSampleCount, gtmVsStatTable=gtmVsStatTable, gtmWideipStatResetStats=gtmWideipStatResetStats, gtmDcStatMemAvail=gtmDcStatMemAvail, gtmServerStat2VsPicks=gtmServerStat2VsPicks, gtmTopItemLdnsType=gtmTopItemLdnsType, gtmVirtualServ=gtmVirtualServ, gtmAttrPathsNeverDie=gtmAttrPathsNeverDie, gtmAppPersist=gtmAppPersist, gtmPoolStatusAvailState=gtmPoolStatusAvailState, gtmRuleEventGroup=gtmRuleEventGroup, gtmServerDcName=gtmServerDcName, gtmAttr2LowerBoundPctCol=gtmAttr2LowerBoundPctCol, gtmProberPoolMbrStatusPoolName=gtmProberPoolMbrStatusPoolName, gtmWideipMinimalResponse=gtmWideipMinimalResponse, gtmLinkStatNumber=gtmLinkStatNumber, gtmPoolMbrRdataPreference=gtmPoolMbrRdataPreference, gtmWideipRuleTable=gtmWideipRuleTable, gtmDnssecStatResetStats=gtmDnssecStatResetStats, gtmServerStat2Entry=gtmServerStat2Entry, gtmVsLinkName=gtmVsLinkName, gtmPoolLimitCpuUsage=gtmPoolLimitCpuUsage, gtmPoolStatName=gtmPoolStatName, gtmDnssecStatDnssecDsQueries=gtmDnssecStatDnssecDsQueries, gtmWideipStatResolutions=gtmWideipStatResolutions, gtmPoolQosCoeffRtt=gtmPoolQosCoeffRtt, gtmServerLimitMemAvail=gtmServerLimitMemAvail, gtmProberPoolEnabled=gtmProberPoolEnabled, gtmAttr2EnableResetsRipeness=gtmAttr2EnableResetsRipeness, gtmRegionEntry=gtmRegionEntry, gtmServerLimitConn=gtmServerLimitConn, gtmTopItemWeight=gtmTopItemWeight, gtmDcEntry=gtmDcEntry, gtmAppContDisEntry=gtmAppContDisEntry, gtmTopItemLdnsNegate=gtmTopItemLdnsNegate, gtmLinkIpIpXlatedType=gtmLinkIpIpXlatedType, gtmPoolMbrStatusPoolName=gtmPoolMbrStatusPoolName, gtmWideipStatusParentType=gtmWideipStatusParentType, gtmRuleTable=gtmRuleTable, gtmServerGroup=gtmServerGroup, gtmStatReturnFromDns=gtmStatReturnFromDns, gtmApplicationStatus=gtmApplicationStatus, gtmAttrRttPacketLength=gtmAttrRttPacketLength, gtmAttrQosFactorLcs=gtmAttrQosFactorLcs, gtmStatPersisted=gtmStatPersisted, gtmServerLimitConnPerSec=gtmServerLimitConnPerSec, gtmWideipPoolTable=gtmWideipPoolTable, gtmWideipTtlPersist=gtmWideipTtlPersist, gtmVsLimitConnEnabled=gtmVsLimitConnEnabled, gtmProberPoolMember=gtmProberPoolMember, gtmVsStatVsScore=gtmVsStatVsScore, gtmDcName=gtmDcName, gtmRuleEventScript=gtmRuleEventScript, gtmWideipStatDropped=gtmWideipStatDropped, gtmDnssecStatNsec3s=gtmDnssecStatNsec3s, gtmLinkStatLcsOut=gtmLinkStatLcsOut, gtmServerStatNumber=gtmServerStatNumber, gtmDeviceIpIpXlatedType=gtmDeviceIpIpXlatedType, gtmLinkStatusTable=gtmLinkStatusTable, gtmPoolStatAlternate=gtmPoolStatAlternate, gtmPoolFallbackIpv6=gtmPoolFallbackIpv6)
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmVsIp=gtmVsIp, gtmDnssecZoneStatNsec3Referral=gtmDnssecZoneStatNsec3Referral, gtmDnssecZoneStatGroup=gtmDnssecZoneStatGroup, gtmApplication=gtmApplication, gtmVsDepsDependServerName=gtmVsDepsDependServerName, gtmProberPoolMbrStatFailedProbes=gtmProberPoolMbrStatFailedProbes, gtmServerStatPktsPerSecIn=gtmServerStatPktsPerSecIn, gtmDnssecStatXfrMasterMsgs=gtmDnssecStatXfrMasterMsgs, gtmPoolMbrPoolType=gtmPoolMbrPoolType, gtmProberPools=gtmProberPools, gtmServer=gtmServer, gtmServerTable=gtmServerTable, gtmVsStatusPort=gtmVsStatusPort, gtmPoolEnabled=gtmPoolEnabled, gtmLinkStat=gtmLinkStat, gtmPoolLimitPktsPerSecEnabled=gtmPoolLimitPktsPerSecEnabled, gtmPoolMbrRatio=gtmPoolMbrRatio, gtmDnssecStatSigCryptoFailed=gtmDnssecStatSigCryptoFailed, gtmVsStatBitsPerSecOut=gtmVsStatBitsPerSecOut, gtmVsStatName=gtmVsStatName, gtmDnssecZoneStatNsec3Nodata=gtmDnssecZoneStatNsec3Nodata, gtmServerStat2CpuUsage=gtmServerStat2CpuUsage, gtmAttrQosFactorHitRatio=gtmAttrQosFactorHitRatio, gtmServerStatEntry=gtmServerStatEntry, gtmRuleEventPriority=gtmRuleEventPriority, gtmLinkLimitInConn=gtmLinkLimitInConn, gtmAttrFbRespectDepends=gtmAttrFbRespectDepends, gtmServerStatus=gtmServerStatus, gtmAttr2PathDuration=gtmAttr2PathDuration, gtmPoolMbrStatusPoolType=gtmPoolMbrStatusPoolType, gtmRegionEntryName=gtmRegionEntryName, gtmProberPoolStatTable=gtmProberPoolStatTable, gtmServerStatUnitId=gtmServerStatUnitId, gtmPools=gtmPools, gtmLinkStatusParentType=gtmLinkStatusParentType, gtmIpGroup=gtmIpGroup, gtmPoolMbrStatEntry=gtmPoolMbrStatEntry, gtmWideipStatAlternate=gtmWideipStatAlternate, gtmProberPoolStatusEntry=gtmProberPoolStatusEntry, gtmAttrLinkCompensateOutbound=gtmAttrLinkCompensateOutbound, gtmDnssecZoneStatSigFailed=gtmDnssecZoneStatSigFailed, gtmServerLimitMemAvailEnabled=gtmServerLimitMemAvailEnabled, gtmLinkLimitTotalMemAvail=gtmLinkLimitTotalMemAvail, gtmDevice=gtmDevice, gtmTopItemGroup=gtmTopItemGroup, gtmWideipStatFallback=gtmWideipStatFallback, gtmDnssecZoneStatSigRrsetFailed=gtmDnssecZoneStatSigRrsetFailed, gtmGlobalStat=gtmGlobalStat, gtmAppContStatNumAvail=gtmAppContStatNumAvail, gtmDcNumber=gtmDcNumber, gtmAppName=gtmAppName, gtmPoolStatusNumber=gtmPoolStatusNumber, gtmDnssecZoneStatTable=gtmDnssecZoneStatTable, gtmPoolMbrStatGroup=gtmPoolMbrStatGroup, gtmAttrQosFactorVsScore=gtmAttrQosFactorVsScore, gtmWideipPoolOrder=gtmWideipPoolOrder, gtmServerStatVsPicks=gtmServerStatVsPicks, gtmAttrCheckDynamicDepends=gtmAttrCheckDynamicDepends, gtmLinkStatus=gtmLinkStatus, gtmDeviceStat=gtmDeviceStat, gtmVsStatCpuUsage=gtmVsStatCpuUsage, gtmDcStatusGroup=gtmDcStatusGroup, gtmPoolStatGroup=gtmPoolStatGroup, gtmLinkStatResetStats=gtmLinkStatResetStats, gtmVirtualServDepends=gtmVirtualServDepends, gtmProberPoolEntry=gtmProberPoolEntry, gtmPoolMbrDepsGroup=gtmPoolMbrDepsGroup, gtmAttr2TimerRetryPathData=gtmAttr2TimerRetryPathData, gtmIp=gtmIp, gtmWideipAliasWipName=gtmWideipAliasWipName, gtmVirtualServStatus=gtmVirtualServStatus, gtmLinkLimitOutConnPerSecEnabled=gtmLinkLimitOutConnPerSecEnabled, gtmAttr2LinkLimitFactor=gtmAttr2LinkLimitFactor, gtmRuleEventEventType=gtmRuleEventEventType, gtmIpUnitId=gtmIpUnitId, gtmWideipGroup=gtmWideipGroup, gtmDnssecZoneStatAxfrQueries=gtmDnssecZoneStatAxfrQueries, gtmStatReturnToDns=gtmStatReturnToDns, gtmAttr2TimerSendKeepAlive=gtmAttr2TimerSendKeepAlive, gtmApplicationWideipGroup=gtmApplicationWideipGroup, gtmAttrAolAware=gtmAttrAolAware, gtmAttrDownThreshold=gtmAttrDownThreshold, gtmVsLimitMemAvail=gtmVsLimitMemAvail, gtmAttrQosFactorPacketRate=gtmAttrQosFactorPacketRate, gtmWideipStatAaaaRequests=gtmWideipStatAaaaRequests, gtmVsLimitCpuUsageEnabled=gtmVsLimitCpuUsageEnabled, gtmDeviceStatusNumber=gtmDeviceStatusNumber, gtmAttrLinkCompensationHistory=gtmAttrLinkCompensationHistory, gtmDeviceName=gtmDeviceName, gtmPoolFallback=gtmPoolFallback, gtmDeviceEntry=gtmDeviceEntry, gtmLinkStatusEnabledState=gtmLinkStatusEnabledState, gtmStatPaths=gtmStatPaths, gtmPoolQosCoeffTopology=gtmPoolQosCoeffTopology, gtmServerStatConnections=gtmServerStatConnections, gtmAttrTopologyAclThreshold=gtmAttrTopologyAclThreshold, gtmLinkStatPaths=gtmLinkStatPaths, gtmVsTable=gtmVsTable, gtmVsLimitCpuUsage=gtmVsLimitCpuUsage, gtmWideipTable=gtmWideipTable, gtmDnssecStatGroup=gtmDnssecStatGroup, gtmServerLimitBitsPerSec=gtmServerLimitBitsPerSec, gtmServerStat2ResetStats=gtmServerStat2ResetStats, gtmVsName=gtmVsName, gtmLinkIpIpType=gtmLinkIpIpType, gtmStatBytesSent=gtmStatBytesSent, gtmDnssecStatSigRrsetFailed=gtmDnssecStatSigRrsetFailed, gtmPoolMbrStatusIp=gtmPoolMbrStatusIp, gtmPoolMbrDepsVport=gtmPoolMbrDepsVport, gtmVsStatMemAvail=gtmVsStatMemAvail, gtmDnssecStatNsec3Nodata=gtmDnssecStatNsec3Nodata, gtmWideipPoolGroup=gtmWideipPoolGroup, gtmPoolAlternate=gtmPoolAlternate, gtmPoolMbrPoolName=gtmPoolMbrPoolName, gtmServerProber=gtmServerProber, gtmPoolStatus=gtmPoolStatus, gtmDnssecStatSigSuccess=gtmDnssecStatSigSuccess, gtmWideipStatCnameResolutions=gtmWideipStatCnameResolutions, gtmDeviceStatResetStats=gtmDeviceStatResetStats, gtmPoolMbrLimitPktsPerSecEnabled=gtmPoolMbrLimitPktsPerSecEnabled, gtmAttrDownMultiple=gtmAttrDownMultiple, gtmPoolMbrDepsServerName=gtmPoolMbrDepsServerName, gtmWideipStatTable=gtmWideipStatTable, gtmDnssecStatConnectFlowFailed=gtmDnssecStatConnectFlowFailed, gtmVsLimitMemAvailEnabled=gtmVsLimitMemAvailEnabled, gtmWideipStatReturnFromDns=gtmWideipStatReturnFromDns, gtmAttrTimeTolerance=gtmAttrTimeTolerance, gtmAppStatusNumber=gtmAppStatusNumber, gtmDevices=gtmDevices, gtmDnssecZoneStatXfrMasterMsgs=gtmDnssecZoneStatXfrMasterMsgs, gtmRegionEntryGroup=gtmRegionEntryGroup, gtmProberPoolStatNumber=gtmProberPoolStatNumber, gtmRegItemGroup=gtmRegItemGroup, gtmPoolMbrRdataOrder=gtmPoolMbrRdataOrder, gtmAttr2LdnsDuration=gtmAttr2LdnsDuration, gtmAttr2PathsNeverDie=gtmAttr2PathsNeverDie, gtmProberPoolMbrStatusNumber=gtmProberPoolMbrStatusNumber, gtmAttr2QosFactorRtt=gtmAttr2QosFactorRtt, gtmAttr2TopologyLongestMatch=gtmAttr2TopologyLongestMatch, gtmPoolNumber=gtmPoolNumber, gtmWideipPoolEntry=gtmWideipPoolEntry, gtmStatBytesDropped=gtmStatBytesDropped, gtmLinkUplinkAddress=gtmLinkUplinkAddress, gtmAttr2Name=gtmAttr2Name, gtmDnssecZoneStatXfrCompletes=gtmDnssecZoneStatXfrCompletes, gtmIpLinkName=gtmIpLinkName, gtmAppContStatEntry=gtmAppContStatEntry, gtmAppGroup=gtmAppGroup, gtmLinkLimitTotalCpuUsage=gtmLinkLimitTotalCpuUsage, gtmProberPoolStatusName=gtmProberPoolStatusName, gtmAttr2RttTimeout=gtmAttr2RttTimeout, gtmStatARequests=gtmStatARequests, gtmWideipPoolRatio=gtmWideipPoolRatio, gtmPoolMbrVsName=gtmPoolMbrVsName, gtmProberPoolStatGroup=gtmProberPoolStatGroup, gtmWideipPoolPoolName=gtmWideipPoolPoolName, gtmAttr2FbRespectAcl=gtmAttr2FbRespectAcl, gtmPoolStatPreferred=gtmPoolStatPreferred, gtmDcStatPktsPerSecIn=gtmDcStatPktsPerSecIn, gtmAttr2GtmSetsRecursion=gtmAttr2GtmSetsRecursion, gtmDeviceStatusTable=gtmDeviceStatusTable, gtmAttrDefaultAlternate=gtmAttrDefaultAlternate, gtmPoolMbrStatusParentType=gtmPoolMbrStatusParentType, gtmPoolMbrStatPoolName=gtmPoolMbrStatPoolName, gtmRegionEntryRegionDbType=gtmRegionEntryRegionDbType, gtmAttrLowerBoundPctRow=gtmAttrLowerBoundPctRow, gtmDeviceNumber=gtmDeviceNumber, gtmPoolMemberStat=gtmPoolMemberStat, gtmPoolMbrStatusNumber=gtmPoolMbrStatusNumber, gtmWideipRulePriority=gtmWideipRulePriority, gtmApplicationWideipEntry=gtmApplicationWideipEntry, gtmPoolPoolType=gtmPoolPoolType, gtmAttr2PersistMask=gtmAttr2PersistMask, gtmApplicationWideipWipType=gtmApplicationWideipWipType, gtmDcStatCpuUsage=gtmDcStatCpuUsage, gtmWideipPoolWipName=gtmWideipPoolWipName, gtmAppContDisName=gtmAppContDisName, gtmApplications=gtmApplications, gtmWideipAliasName=gtmWideipAliasName, gtmLinkLimitTotalConnEnabled=gtmLinkLimitTotalConnEnabled, gtmWideipPool=gtmWideipPool, gtmLinkCostEntry=gtmLinkCostEntry, gtmRegItemTable=gtmRegItemTable, gtmStatCnameResolutions=gtmStatCnameResolutions, gtmPoolDynamicRatio=gtmPoolDynamicRatio, gtmTopologies=gtmTopologies, gtmDnssecStatXfrMsgs=gtmDnssecStatXfrMsgs, gtmServerStatusNumber=gtmServerStatusNumber, gtmDcStatResetStats=gtmDcStatResetStats, gtmPoolStatusEntry=gtmPoolStatusEntry, gtmVsStatusTable=gtmVsStatusTable, gtmAppContDisTable=gtmAppContDisTable, gtmVsLimitBitsPerSecEnabled=gtmVsLimitBitsPerSecEnabled, gtmWideipStatName=gtmWideipStatName, gtmAttr2LinkPrepaidFactor=gtmAttr2LinkPrepaidFactor, gtmPoolLimitConnEnabled=gtmPoolLimitConnEnabled, gtmDeviceIpIpXlated=gtmDeviceIpIpXlated, gtmLink=gtmLink, gtmPoolMbrStatIpType=gtmPoolMbrStatIpType, gtmServerLimitBitsPerSecEnabled=gtmServerLimitBitsPerSecEnabled, gtmDcStatConnections=gtmDcStatConnections, gtmLinkIpIpXlated=gtmLinkIpIpXlated, gtmServerStatMemAvail=gtmServerStatMemAvail, gtmGlobalLdnsProbeProtoIndex=gtmGlobalLdnsProbeProtoIndex, gtmVsIpXlatedType=gtmVsIpXlatedType, gtmPoolStatEntry=gtmPoolStatEntry, gtmAttr2QosFactorHitRatio=gtmAttr2QosFactorHitRatio, gtmPoolQosCoeffHitRatio=gtmPoolQosCoeffHitRatio, gtmLinkLimitTotalMemAvailEnabled=gtmLinkLimitTotalMemAvailEnabled, gtmPoolLimitMemAvailEnabled=gtmPoolLimitMemAvailEnabled, gtmDnssecZoneStatSigSuccess=gtmDnssecZoneStatSigSuccess, gtmDeviceStatusEnabledState=gtmDeviceStatusEnabledState, gtmPoolLimitConnPerSec=gtmPoolLimitConnPerSec, gtmWideipIpNoErrorTtl=gtmWideipIpNoErrorTtl, gtmLinkLimitOutBitsPerSec=gtmLinkLimitOutBitsPerSec, gtmLinkStatRateIn=gtmLinkStatRateIn, gtmRuleEventStatTotalExecutions=gtmRuleEventStatTotalExecutions, gtmAttr2StaticPersistV6Cidr=gtmAttr2StaticPersistV6Cidr, gtmLinkEntry=gtmLinkEntry, gtmVsDepsEntry=gtmVsDepsEntry, gtmPoolLimitConn=gtmPoolLimitConn, gtmDcStatBitsPerSecIn=gtmDcStatBitsPerSecIn, gtmVsStatusEntry=gtmVsStatusEntry, gtmServerStat2Table=gtmServerStat2Table, gtmWideipRuleGroup=gtmWideipRuleGroup, gtmDnssecZoneStatDnssecDsQueries=gtmDnssecZoneStatDnssecDsQueries, gtmServerStatResetStats=gtmServerStatResetStats, gtmRegItemEntry=gtmRegItemEntry, gtmServerStatusGroup=gtmServerStatusGroup, gtmIpIpXlated=gtmIpIpXlated, gtmAppStatusAvailState=gtmAppStatusAvailState, gtmStatPreferred=gtmStatPreferred, gtmProberPool=gtmProberPool, gtmAttrMaxMonReqs=gtmAttrMaxMonReqs, gtmPoolMbrStatPreferred=gtmPoolMbrStatPreferred, gtmWideipRuleRuleName=gtmWideipRuleRuleName, gtmRegions=gtmRegions, gtmPoolQosCoeffVsScore=gtmPoolQosCoeffVsScore, gtmDnssecZoneStatEntry=gtmDnssecZoneStatEntry, gtmPoolQosCoeffConnRate=gtmPoolQosCoeffConnRate, gtmAttr2StaticPersistCidr=gtmAttr2StaticPersistCidr, gtmDnssecZoneStatDnssecResponses=gtmDnssecZoneStatDnssecResponses, gtmLinkLimitOutCpuUsageEnabled=gtmLinkLimitOutCpuUsageEnabled, gtmServerStatusName=gtmServerStatusName, gtmProberPoolStatFailedProbes=gtmProberPoolStatFailedProbes, gtmLinkCostTable=gtmLinkCostTable, gtmIpNumber=gtmIpNumber, gtmProberPoolStatusGroup=gtmProberPoolStatusGroup, gtmRuleEventStatName=gtmRuleEventStatName, gtmLinkCostNumber=gtmLinkCostNumber, gtmGlobalStats=gtmGlobalStats, gtmVsStatNumber=gtmVsStatNumber, gtmAppContDisType=gtmAppContDisType, gtmLinkLimitTotalBitsPerSecEnabled=gtmLinkLimitTotalBitsPerSecEnabled)
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmAppContStatDetailReason=gtmAppContStatDetailReason, gtmTopItem=gtmTopItem, gtmWideipRuleNumber=gtmWideipRuleNumber, gtmLinkTable=gtmLinkTable, gtmPoolCname=gtmPoolCname, gtmWideipStatGroup=gtmWideipStatGroup, gtmPoolFallbackIpv6Type=gtmPoolFallbackIpv6Type, gtmPoolMbrStaticTarget=gtmPoolMbrStaticTarget, gtmVsStatEntry=gtmVsStatEntry, gtmPoolMbrDepsVip=gtmPoolMbrDepsVip, gtmWideipStatWipType=gtmWideipStatWipType, PYSNMP_MODULE_ID=bigipGlobalTM, gtmVsDepsIp=gtmVsDepsIp, gtmProberPoolMbrStatTotalProbes=gtmProberPoolMbrStatTotalProbes, gtmDeviceIpIpType=gtmDeviceIpIpType, gtmAttr2QosFactorConnRate=gtmAttr2QosFactorConnRate, gtmAppContStatTable=gtmAppContStatTable, gtmPoolMbrStatusDetailReason=gtmPoolMbrStatusDetailReason, gtmDnssecZoneStatXfrMsgs=gtmDnssecZoneStatXfrMsgs, gtmLinkDcName=gtmLinkDcName, gtmProberPoolMbrPoolName=gtmProberPoolMbrPoolName, gtmVsStatusIpType=gtmVsStatusIpType, gtmAppContextStat=gtmAppContextStat, gtmServerLimitConnPerSecEnabled=gtmServerLimitConnPerSecEnabled, gtmAttr2TraceroutePort=gtmAttr2TraceroutePort, gtmAttr2QosFactorVsScore=gtmAttr2QosFactorVsScore, gtmAttrSyncTimeout=gtmAttrSyncTimeout, gtmLinkLimitTotalPktsPerSecEnabled=gtmLinkLimitTotalPktsPerSecEnabled, gtmPoolMbrEntry=gtmPoolMbrEntry, gtmDnssecStatTowireFailed=gtmDnssecStatTowireFailed, gtmLinkUplinkAddressType=gtmLinkUplinkAddressType, gtmWideipStat=gtmWideipStat, gtmAttrGtmSetsRecursion=gtmAttrGtmSetsRecursion, gtmDcStatBitsPerSecOut=gtmDcStatBitsPerSecOut, bigipGlobalTMGroups=bigipGlobalTMGroups, gtmWideipStatusType=gtmWideipStatusType, gtmWideipRuleEntry=gtmWideipRuleEntry, gtmIpIpXlatedType=gtmIpIpXlatedType, gtmAppStatusParentType=gtmAppStatusParentType, gtmPoolStatusParentType=gtmPoolStatusParentType, gtmRegItemNegate=gtmRegItemNegate, gtmDeviceStatusEntry=gtmDeviceStatusEntry, gtmProberPoolMbrStatSuccessfulProbes=gtmProberPoolMbrStatSuccessfulProbes, gtmAttr2Entry=gtmAttr2Entry, gtmWideipApplication=gtmWideipApplication, gtmAppStatusName=gtmAppStatusName, gtmPoolMbrStatPoolType=gtmPoolMbrStatPoolType, gtmVsStatConnRate=gtmVsStatConnRate, gtmPoolMbrLimitConnPerSec=gtmPoolMbrLimitConnPerSec, gtmVsStatusParentType=gtmVsStatusParentType, gtmPoolStatResetStats=gtmPoolStatResetStats, gtmRuleEventTable=gtmRuleEventTable, gtmDcStatGroup=gtmDcStatGroup, gtmPoolLimitPktsPerSec=gtmPoolLimitPktsPerSec, gtmPoolMbrServerName=gtmPoolMbrServerName, gtmDeviceStatPktsPerSecIn=gtmDeviceStatPktsPerSecIn, gtmAppAvailability=gtmAppAvailability, gtmDnssecZoneStatNsec3Resalt=gtmDnssecZoneStatNsec3Resalt, gtmLinkLimitOutConn=gtmLinkLimitOutConn, gtmLinkLimitTotalPktsPerSec=gtmLinkLimitTotalPktsPerSec, gtmVsStatusVsName=gtmVsStatusVsName, gtmServerMonitorRule=gtmServerMonitorRule, gtmDnssecZoneStatDnssecCdsQueries=gtmDnssecZoneStatDnssecCdsQueries, gtmPoolGroup=gtmPoolGroup, gtmAttrTraceTtl=gtmAttrTraceTtl, gtmVsDepsVip=gtmVsDepsVip, gtmPoolMbrDepsPort=gtmPoolMbrDepsPort, gtmAttrQosFactorBps=gtmAttrQosFactorBps, gtmAttr2QosFactorTopology=gtmAttr2QosFactorTopology, gtmDcStatTable=gtmDcStatTable, gtmVsStatPktsPerSecIn=gtmVsStatPktsPerSecIn, gtmAttr2DefaultProbeLimit=gtmAttr2DefaultProbeLimit, gtmDnssecZoneStat=gtmDnssecZoneStat, gtmAttr2AolAware=gtmAttr2AolAware, gtmRuleEventStatEventType=gtmRuleEventStatEventType, gtmVsStatPktsPerSecOut=gtmVsStatPktsPerSecOut, gtmAttrEnableResetsRipeness=gtmAttrEnableResetsRipeness, gtmRegionEntryTable=gtmRegionEntryTable, gtmVsStatConnections=gtmVsStatConnections, gtmPoolMbrPort=gtmPoolMbrPort, gtmPoolMbrDepsNumber=gtmPoolMbrDepsNumber, gtmProberPoolGroup=gtmProberPoolGroup, gtmDcStatusDetailReason=gtmDcStatusDetailReason, gtmWideipEnabled=gtmWideipEnabled, gtmDNSSEC=gtmDNSSEC, gtmLinkLimitOutMemAvail=gtmLinkLimitOutMemAvail, gtmAttr2RttPacketLength=gtmAttr2RttPacketLength, gtmRuleEvent=gtmRuleEvent, gtmStatRequests=gtmStatRequests, gtmLinkLimitInMemAvail=gtmLinkLimitInMemAvail, gtmLinkStatRateVsesOut=gtmLinkStatRateVsesOut, gtmDcStatusNumber=gtmDcStatusNumber, gtmDnssecZoneStatName=gtmDnssecZoneStatName, gtmAppStatusDetailReason=gtmAppStatusDetailReason, gtmAttr2MaxMemoryUsage=gtmAttr2MaxMemoryUsage, gtmLinkLimitOutBitsPerSecEnabled=gtmLinkLimitOutBitsPerSecEnabled, gtmPoolMbrNumber=gtmPoolMbrNumber, gtmDcEnabled=gtmDcEnabled, gtmDnssecZoneStatNsec3s=gtmDnssecZoneStatNsec3s, gtmVsStatusNumber=gtmVsStatusNumber, gtmVsStatusServerName=gtmVsStatusServerName, gtmAttrPathTtl=gtmAttrPathTtl, gtmAttr2CacheLdns=gtmAttr2CacheLdns, gtmAttr2LinkCompensateInbound=gtmAttr2LinkCompensateInbound, gtmPoolVerifyMember=gtmPoolVerifyMember, gtmProberPoolMbrPmbrOrder=gtmProberPoolMbrPmbrOrder, gtmLinks=gtmLinks, gtmRuleEventName=gtmRuleEventName, gtmWideipName=gtmWideipName, gtmWideipRuleWipName=gtmWideipRuleWipName, gtmAttr2ForwardStatus=gtmAttr2ForwardStatus, gtmDnssecStatDnssecNsec3paramQueries=gtmDnssecStatDnssecNsec3paramQueries, gtmDcStatusEntry=gtmDcStatusEntry, gtmWideipPoolPoolType=gtmWideipPoolPoolType, gtmIpDeviceName=gtmIpDeviceName, gtmAttr2MaxLinkOverLimitCount=gtmAttr2MaxLinkOverLimitCount, gtmAttrPathDuration=gtmAttrPathDuration, gtmAppTable=gtmAppTable, gtmProberPoolStatResetStats=gtmProberPoolStatResetStats, gtmDnssecZoneStatResetStats=gtmDnssecZoneStatResetStats, gtmLinkStatRate=gtmLinkStatRate, gtmRegionEntryEntry=gtmRegionEntryEntry, gtmVsEntry=gtmVsEntry, gtmAttrQosFactorVsCapacity=gtmAttrQosFactorVsCapacity, gtmAttr2MaxMonReqs=gtmAttr2MaxMonReqs, gtmLinkIpLinkName=gtmLinkIpLinkName, gtmProberPoolStatus=gtmProberPoolStatus, gtmPoolFallbackIp=gtmPoolFallbackIp, gtmAttrTimerRetryPathData=gtmAttrTimerRetryPathData, gtmVsDepsTable=gtmVsDepsTable, gtmLinkStatusGroup=gtmLinkStatusGroup, gtmDnssecStatXfrSerial=gtmDnssecStatXfrSerial, gtmRegionEntryNumber=gtmRegionEntryNumber, gtmPoolStatusDetailReason=gtmPoolStatusDetailReason, gtmWideipStatARequests=gtmWideipStatARequests, gtmAttrTopologyLongestMatch=gtmAttrTopologyLongestMatch, gtmWideipPersistCidr=gtmWideipPersistCidr, gtmPoolEntry=gtmPoolEntry, gtmProberPoolMbrStatusEntry=gtmProberPoolMbrStatusEntry, gtmAttr2SyncZonesTimeout=gtmAttr2SyncZonesTimeout, gtmVirtualServStat=gtmVirtualServStat, gtmLinkLimitTotalBitsPerSec=gtmLinkLimitTotalBitsPerSec, gtmServerLimitConnEnabled=gtmServerLimitConnEnabled, gtmWideipRuleWipType=gtmWideipRuleWipType, gtmDnssecStatXfrCompletes=gtmDnssecStatXfrCompletes, gtmWideipPoolNumber=gtmWideipPoolNumber, gtmServerStatCpuUsage=gtmServerStatCpuUsage, gtmWideipStatReturnToDns=gtmWideipStatReturnToDns, gtmProberPoolStatTotalProbes=gtmProberPoolStatTotalProbes, gtmDcStatusParentType=gtmDcStatusParentType, gtmServerStatusParentType=gtmServerStatusParentType, gtmServerStat2Connections=gtmServerStat2Connections, gtmServerStatusDetailReason=gtmServerStatusDetailReason, gtmVsIpXlated=gtmVsIpXlated, gtmLinkCost=gtmLinkCost, gtmAppStatusEnabledState=gtmAppStatusEnabledState, gtmDcStatusAvailState=gtmDcStatusAvailState, gtmAppStatusEntry=gtmAppStatusEntry, gtmWideipStatPreferred=gtmWideipStatPreferred, gtmAttr2QosFactorBps=gtmAttr2QosFactorBps, gtmAttrPersistMask=gtmAttrPersistMask, gtmDeviceServerName=gtmDeviceServerName, gtmLinkStatRateVses=gtmLinkStatRateVses, gtmGlobalLdnsProbeProtoGroup=gtmGlobalLdnsProbeProtoGroup, gtmGlobalLdnsProbeProtoNumber=gtmGlobalLdnsProbeProtoNumber, gtmDeviceStatus=gtmDeviceStatus, gtmLinkLimitOutPktsPerSecEnabled=gtmLinkLimitOutPktsPerSecEnabled, gtmVsStatIpType=gtmVsStatIpType, gtmAppContStatParentType=gtmAppContStatParentType, gtmPoolMbrRdataPriority=gtmPoolMbrRdataPriority, gtmProberPoolMbrStatPoolName=gtmProberPoolMbrStatPoolName, gtmStatAlternate=gtmStatAlternate, gtmLinkLimitInBitsPerSecEnabled=gtmLinkLimitInBitsPerSecEnabled, gtmDnssecStatDnssecDnskeyQueries=gtmDnssecStatDnssecDnskeyQueries, gtmPoolQosCoeffPacketRate=gtmPoolQosCoeffPacketRate, gtmAttrQosFactorHops=gtmAttrQosFactorHops, gtmPoolMbrLimitCpuUsageEnabled=gtmPoolMbrLimitCpuUsageEnabled, gtmPoolStatusPoolType=gtmPoolStatusPoolType, gtmWideipStatExplicitIp=gtmWideipStatExplicitIp, gtmDnssecZoneStatXfrStarts=gtmDnssecZoneStatXfrStarts, gtmServerStatGroup=gtmServerStatGroup, gtmServerAutoconfState=gtmServerAutoconfState, gtmPoolMbrStatusEntry=gtmPoolMbrStatusEntry, gtmDcStatEntry=gtmDcStatEntry, gtmRuleEventStatGroup=gtmRuleEventStatGroup, gtmProberPoolMemberStatus=gtmProberPoolMemberStatus, gtmRuleEventEntry=gtmRuleEventEntry, gtmDeviceStatTable=gtmDeviceStatTable, gtmDnssecZoneStatDnssecCdnskeyQueries=gtmDnssecZoneStatDnssecCdnskeyQueries, gtmPoolStatPoolType=gtmPoolStatPoolType, gtmTopItemServerEntry=gtmTopItemServerEntry, gtmAttrCheckStaticDepends=gtmAttrCheckStaticDepends, gtmWideipLbmodePool=gtmWideipLbmodePool, gtmPoolMbrDepsDependVsName=gtmPoolMbrDepsDependVsName, gtmLinkGroup=gtmLinkGroup, gtmLinkCostUptoBps=gtmLinkCostUptoBps, gtmPoolStatExplicitIp=gtmPoolStatExplicitIp, gtmProberPoolNumber=gtmProberPoolNumber, gtmProberPoolStatEntry=gtmProberPoolStatEntry, gtmWideipStatusNumber=gtmWideipStatusNumber, gtmIpIpType=gtmIpIpType, gtmPoolMbrDepsEntry=gtmPoolMbrDepsEntry, gtmIps=gtmIps, gtmLinkStatRateNodeIn=gtmLinkStatRateNodeIn, gtmLinkLimitInPktsPerSec=gtmLinkLimitInPktsPerSec, gtmProberPoolMemberStat=gtmProberPoolMemberStat, gtmProberPoolStatusAvailState=gtmProberPoolStatusAvailState, gtmAttrRttTimeout=gtmAttrRttTimeout, gtmPoolMemberStatus=gtmPoolMemberStatus, gtmLinkRatio=gtmLinkRatio, gtmDnssecZoneStatXfrSerial=gtmDnssecZoneStatXfrSerial, gtmRules=gtmRules, gtmServerStatConnRate=gtmServerStatConnRate, gtmLinkNumber=gtmLinkNumber, gtmPoolMbrStatusServerName=gtmPoolMbrStatusServerName, gtmServerStatusTable=gtmServerStatusTable, gtmServerAllowSvcChk=gtmServerAllowSvcChk, gtmDnssecStatXfrResponseAverageSize=gtmDnssecStatXfrResponseAverageSize, gtmProberPoolLbMode=gtmProberPoolLbMode, gtmPoolMbrDepsPoolName=gtmPoolMbrDepsPoolName, gtmVsStatusEnabledState=gtmVsStatusEnabledState, gtmTopItemServerNegate=gtmTopItemServerNegate, gtmAttrQosFactorTopology=gtmAttrQosFactorTopology, gtmPoolMbrStatusGroup=gtmPoolMbrStatusGroup, gtmRuleEventStatNumber=gtmRuleEventStatNumber, gtmRuleEventStat=gtmRuleEventStat, gtmAppContStatEnabledState=gtmAppContStatEnabledState, gtmLinkIpGroup=gtmLinkIpGroup, gtmAttr2DefaultAlternate=gtmAttr2DefaultAlternate, gtmLinkCostGroup=gtmLinkCostGroup, gtmAttrSyncZonesTimeout=gtmAttrSyncZonesTimeout)
