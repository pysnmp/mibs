#
# PySNMP MIB module ELTEX-PP4 (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eltex/ELTEX-PP4
# Produced by pysmi-1.1.12 at Wed Sep 18 06:45:07 2024
# On host fv-az1780-151 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
mcTrapID, elHardware, mcTrapLParam1, mcTrapExState, mcTrapLParam3, mcTrapDescr, mcTrapLParam2, eltrapGroup = mibBuilder.importSymbols("ELTEX-SMI-ACTUAL", "mcTrapID", "elHardware", "mcTrapLParam1", "mcTrapExState", "mcTrapLParam3", "mcTrapDescr", "mcTrapLParam2", "eltrapGroup")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, Counter32, NotificationType, ModuleIdentity, Integer32, ObjectIdentity, Bits, Counter64, TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "NotificationType", "ModuleIdentity", "Integer32", "ObjectIdentity", "Bits", "Counter64", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "Gauge32")
TextualConvention, TruthValue, MacAddress, TimeStamp, TimeInterval, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "MacAddress", "TimeStamp", "TimeInterval", "RowStatus", "DisplayString")
pp4 = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 1, 13))
pp4.setRevisions(('2009-11-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pp4.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: pp4.setLastUpdated('200911240000Z')
if mibBuilder.loadTexts: pp4.setOrganization('Eltex Co')
if mibBuilder.loadTexts: pp4.setContactInfo('  eltex@gcom.ru ')
if mibBuilder.loadTexts: pp4.setDescription('Mib for pp4 MSAN switches family')
class PP4SysType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("systemUnknown", 0), ("systemPp4g", 1), ("systemPp4g2x", 2), ("systemPp4x", 3))

class Pp4Link(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("linkDown", 0), ("linkUp", 1))

class Pp4PortSpeed(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("speed10Mbps", 0), ("speed100Mbps", 1), ("speed1Gbps", 2), ("speed10Gbps", 3), ("speed12Gbps", 4), ("speed2500Mbps", 5), ("speed5Gbps", 6))

class Pp4PortDuplex(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("fullDuplex", 0), ("halfDuplex", 1))

class Pp4MacType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("macStatic", 0), ("macDynamic", 1))

class Pp4MacPort(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(255))
    namedValues = NamedValues(("portCPU", 255))

class Pp4RebootIndex(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(100, 101, 102))
    namedValues = NamedValues(("master", 100), ("slave", 101), ("system", 102))

class Pp4SlotBoardType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 255))
    namedValues = NamedValues(("none", 0), ("pp4x", 1), ("elc8", 2), ("plc8", 3), ("plc16", 4), ("fxs72sip", 5), ("fxs72megaco", 6), ("tmg16sip", 7), ("invalid", 255))

class Pp4FanBreakdownState(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("fanIsNormal", 0), ("fanIsBreakDown", 1), ("fanIsNotDefine", 2))

class Pp4BoardRole(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notdefine", 0), ("slave", 1), ("backup", 2), ("master", 3))

class Pp4BoardPosition(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notdefine", 0), ("left", 1), ("right", 2))

class Pp4SlotFirmwareVersion(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, -2))
    namedValues = NamedValues(("default", -1), ("embedded", -2))

class Pp4FirmwareUnitStatus(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("invalid", 1), ("timeout", 2), ("isCurrent", 3), ("downloaded", 4), ("testing", 5))

class Pp4FeederStatus(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notInstalled", 0), ("error", 1), ("highVoltage", 2), ("lowVoltage", 3), ("ok", 4))

class Pp4FeederActive(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notAvailable", 0), ("active", 1), ("backup", 2))

class Pp4FeederPolarity(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notAvailable", 0), ("ok", 1), ("mismatch", 2))

pp4DevName = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4DevName.setStatus('current')
if mibBuilder.loadTexts: pp4DevName.setDescription('')
pp4DevType = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4DevType.setStatus('current')
if mibBuilder.loadTexts: pp4DevType.setDescription('Always = 13')
pp4DevCfgBuild = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4DevCfgBuild.setStatus('current')
if mibBuilder.loadTexts: pp4DevCfgBuild.setDescription('os build string: compiling data and other info')
pp4FreeSpace = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4FreeSpace.setStatus('current')
if mibBuilder.loadTexts: pp4FreeSpace.setDescription('percent of free blocks on flash disk')
pp4FreeRam = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4FreeRam.setStatus('current')
if mibBuilder.loadTexts: pp4FreeRam.setDescription('free RAM (bytes)')
pp4System = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10))
pp4SystemType = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 1), PP4SysType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemType.setStatus('current')
if mibBuilder.loadTexts: pp4SystemType.setDescription(' ')
pp4SystemInfo = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemInfo.setStatus('current')
if mibBuilder.loadTexts: pp4SystemInfo.setDescription(' ')
pp4SystemUnit1MacAddress = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemUnit1MacAddress.setStatus('current')
if mibBuilder.loadTexts: pp4SystemUnit1MacAddress.setDescription(' ')
pp4SystemUnit2MacAddress = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemUnit2MacAddress.setStatus('current')
if mibBuilder.loadTexts: pp4SystemUnit2MacAddress.setDescription(' ')
pp4SystemUnit1FirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemUnit1FirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: pp4SystemUnit1FirmwareVersion.setDescription(' ')
pp4SystemUnit2FirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemUnit2FirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: pp4SystemUnit2FirmwareVersion.setDescription(' ')
pp4SystemUnit1LinuxVersion = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemUnit1LinuxVersion.setStatus('current')
if mibBuilder.loadTexts: pp4SystemUnit1LinuxVersion.setDescription(' ')
pp4SystemUnit2LinuxVersion = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemUnit2LinuxVersion.setStatus('current')
if mibBuilder.loadTexts: pp4SystemUnit2LinuxVersion.setDescription(' ')
pp4SystemUnit1UpTime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 9), Integer32()).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemUnit1UpTime.setStatus('current')
if mibBuilder.loadTexts: pp4SystemUnit1UpTime.setDescription(' ')
pp4SystemUnit2UpTime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 10), Integer32()).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemUnit2UpTime.setStatus('current')
if mibBuilder.loadTexts: pp4SystemUnit2UpTime.setDescription(' ')
pp4SystemUnit1Role = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 11), Pp4BoardRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemUnit1Role.setStatus('current')
if mibBuilder.loadTexts: pp4SystemUnit1Role.setDescription(' ')
pp4SystemUnit2Role = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 12), Pp4BoardRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemUnit2Role.setStatus('current')
if mibBuilder.loadTexts: pp4SystemUnit2Role.setDescription(' ')
pp4SystemUnit1Position = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 13), Pp4BoardPosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemUnit1Position.setStatus('current')
if mibBuilder.loadTexts: pp4SystemUnit1Position.setDescription(' ')
pp4SystemUnit2Position = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 14), Pp4BoardPosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemUnit2Position.setStatus('current')
if mibBuilder.loadTexts: pp4SystemUnit2Position.setDescription(' ')
pp4SystemUnit1SerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemUnit1SerialNumber.setStatus('current')
if mibBuilder.loadTexts: pp4SystemUnit1SerialNumber.setDescription('unique device serial number')
pp4SystemUnit2SerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SystemUnit2SerialNumber.setStatus('current')
if mibBuilder.loadTexts: pp4SystemUnit2SerialNumber.setDescription('unique device serial number')
pp4SynchronizationStateInStack = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4SynchronizationStateInStack.setStatus('current')
if mibBuilder.loadTexts: pp4SynchronizationStateInStack.setDescription('Synchronization state in the stack : cli\n\t\t\t\tmsan stack synchronization-enable\n                msan no stack synchronization-enable\n                msan show stack')
pp4StackMasterChange = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4StackMasterChange.setStatus('current')
if mibBuilder.loadTexts: pp4StackMasterChange.setDescription('Set this to 1 to change stack master')
pp4Services = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 30))
pp4ACSActive = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 10, 30, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ACSActive.setStatus('current')
if mibBuilder.loadTexts: pp4ACSActive.setDescription('Shows if ACS service active.')
pp4PortsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 11), )
if mibBuilder.loadTexts: pp4PortsTable.setStatus('current')
if mibBuilder.loadTexts: pp4PortsTable.setDescription('')
pp4PortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 11, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4PortsEntryID"))
if mibBuilder.loadTexts: pp4PortsEntry.setStatus('current')
if mibBuilder.loadTexts: pp4PortsEntry.setDescription('')
pp4PortsEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4PortsEntryID.setStatus('current')
if mibBuilder.loadTexts: pp4PortsEntryID.setDescription('Index')
pp4PortsLink = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 11, 1, 2), Pp4Link()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4PortsLink.setStatus('current')
if mibBuilder.loadTexts: pp4PortsLink.setDescription('')
pp4PortsAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 11, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4PortsAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: pp4PortsAutoNegotiate.setDescription('')
pp4PortsAutoNegotiationError = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 11, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4PortsAutoNegotiationError.setStatus('current')
if mibBuilder.loadTexts: pp4PortsAutoNegotiationError.setDescription('')
pp4PortsSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 11, 1, 5), Pp4PortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4PortsSpeed.setStatus('current')
if mibBuilder.loadTexts: pp4PortsSpeed.setDescription('')
pp4PortsDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 11, 1, 6), Pp4PortDuplex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4PortsDuplex.setStatus('current')
if mibBuilder.loadTexts: pp4PortsDuplex.setDescription('')
pp4PortsFlowControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 11, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4PortsFlowControlEnabled.setStatus('current')
if mibBuilder.loadTexts: pp4PortsFlowControlEnabled.setDescription('')
pp4PortsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 11, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4PortsEnabled.setStatus('current')
if mibBuilder.loadTexts: pp4PortsEnabled.setDescription('')
pp4MulticastGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 12), )
if mibBuilder.loadTexts: pp4MulticastGroupsTable.setStatus('current')
if mibBuilder.loadTexts: pp4MulticastGroupsTable.setDescription('')
pp4MulticastGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 12, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4MulticastEntryID"))
if mibBuilder.loadTexts: pp4MulticastGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: pp4MulticastGroupsEntry.setDescription('')
pp4MulticastEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MulticastEntryID.setStatus('current')
if mibBuilder.loadTexts: pp4MulticastEntryID.setDescription('Index')
pp4MulticastVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MulticastVLAN.setStatus('current')
if mibBuilder.loadTexts: pp4MulticastVLAN.setDescription('')
pp4MulticastGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 12, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MulticastGroupAddress.setStatus('current')
if mibBuilder.loadTexts: pp4MulticastGroupAddress.setDescription('')
pp4MulticastMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MulticastMemberPorts.setStatus('current')
if mibBuilder.loadTexts: pp4MulticastMemberPorts.setDescription("Each octet within this value specifies a set of eight\n\t\t\t\t\t\t\t\t\t\tports, with the first octet specifying ports 1 through\n\t\t\t\t\t\t\t\t\t\t8, the second octet specifying ports 9 through 16, etc.\n\t\t\t\t\t\t\t\t\t\tWithin each octet, the most significant bit represents\n\t\t\t\t\t\t\t\t\t\tthe lowest numbered port, and the least significant bit\n\t\t\t\t\t\t\t\t\t\trepresents the highest numbered port.  Thus, each port\n\t\t\t\t\t\t\t\t\t\tof the bridge is represented by a single bit within the\n\t\t\t\t\t\t\t\t\t\tvalue of this object.  If that bit has a value of '1',\n\t\t\t\t\t\t\t\t\t\tthen that port is included in the set of ports; the port\n\t\t\t\t\t\t\t\t\t\tis not included if its bit has a value of '0")
pp4MulticastExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 12, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MulticastExpires.setStatus('current')
if mibBuilder.loadTexts: pp4MulticastExpires.setDescription('')
pp4MacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 13), )
if mibBuilder.loadTexts: pp4MacAddressTable.setStatus('current')
if mibBuilder.loadTexts: pp4MacAddressTable.setDescription('')
pp4MacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 13, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4MacAddressEntryID"))
if mibBuilder.loadTexts: pp4MacAddressEntry.setStatus('current')
if mibBuilder.loadTexts: pp4MacAddressEntry.setDescription('')
pp4MacAddressEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MacAddressEntryID.setStatus('current')
if mibBuilder.loadTexts: pp4MacAddressEntryID.setDescription('Index')
pp4MacAddressVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MacAddressVLAN.setStatus('current')
if mibBuilder.loadTexts: pp4MacAddressVLAN.setDescription('')
pp4MacAddressAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 13, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MacAddressAddress.setStatus('current')
if mibBuilder.loadTexts: pp4MacAddressAddress.setDescription('')
pp4MacAddressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 13, 1, 4), Pp4MacPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MacAddressPort.setStatus('current')
if mibBuilder.loadTexts: pp4MacAddressPort.setDescription('')
pp4MacAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 13, 1, 5), Pp4MacType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MacAddressType.setStatus('current')
if mibBuilder.loadTexts: pp4MacAddressType.setDescription('')
pp4SlotsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 14), )
if mibBuilder.loadTexts: pp4SlotsTable.setStatus('current')
if mibBuilder.loadTexts: pp4SlotsTable.setDescription('')
pp4SlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 14, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4SlotsSlot"))
if mibBuilder.loadTexts: pp4SlotsEntry.setStatus('current')
if mibBuilder.loadTexts: pp4SlotsEntry.setDescription('')
pp4SlotsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SlotsSlot.setStatus('current')
if mibBuilder.loadTexts: pp4SlotsSlot.setDescription(' ')
pp4SlotsBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 14, 1, 2), Pp4SlotBoardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SlotsBoardType.setStatus('current')
if mibBuilder.loadTexts: pp4SlotsBoardType.setDescription('')
pp4SlotsLink = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SlotsLink.setStatus('current')
if mibBuilder.loadTexts: pp4SlotsLink.setDescription('')
pp4SlotsFirmwareActive = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SlotsFirmwareActive.setStatus('current')
if mibBuilder.loadTexts: pp4SlotsFirmwareActive.setDescription('')
pp4SlotsFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 14, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SlotsFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: pp4SlotsFirmwareRevision.setDescription('')
pp4SlotsSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 14, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SlotsSerialNumber.setStatus('current')
if mibBuilder.loadTexts: pp4SlotsSerialNumber.setDescription('')
pp4SlotsState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("absent", 0), ("discovery", 1), ("booting", 2), ("operational", 3), ("lost", 4), ("sand", 5), ("fail", 6), ("notBooting", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4SlotsState.setStatus('current')
if mibBuilder.loadTexts: pp4SlotsState.setDescription('')
pp4ConfigRevisions = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 15))
pp4ConfigRevisionsPp4x = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 15, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ConfigRevisionsPp4x.setStatus('current')
if mibBuilder.loadTexts: pp4ConfigRevisionsPp4x.setDescription(' ')
pp4ConfigRevisionsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 15, 2), )
if mibBuilder.loadTexts: pp4ConfigRevisionsTable.setStatus('current')
if mibBuilder.loadTexts: pp4ConfigRevisionsTable.setDescription('')
pp4ConfigRevisionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 15, 2, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4ConfigRevisionsSlot"))
if mibBuilder.loadTexts: pp4ConfigRevisionsEntry.setStatus('current')
if mibBuilder.loadTexts: pp4ConfigRevisionsEntry.setDescription('')
pp4ConfigRevisionsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 15, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ConfigRevisionsSlot.setStatus('current')
if mibBuilder.loadTexts: pp4ConfigRevisionsSlot.setDescription(' ')
pp4ConfigRevisionsRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 15, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ConfigRevisionsRevision.setStatus('current')
if mibBuilder.loadTexts: pp4ConfigRevisionsRevision.setDescription('')
pp4ConfigRevisionsProfilesELC = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 15, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ConfigRevisionsProfilesELC.setStatus('current')
if mibBuilder.loadTexts: pp4ConfigRevisionsProfilesELC.setDescription(' ')
pp4ConfigRevisionsProfilesPLC = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 15, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ConfigRevisionsProfilesPLC.setStatus('current')
if mibBuilder.loadTexts: pp4ConfigRevisionsProfilesPLC.setDescription(' ')
pp4ConfigRevisionsProfilesPLCOLT = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 15, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ConfigRevisionsProfilesPLCOLT.setStatus('current')
if mibBuilder.loadTexts: pp4ConfigRevisionsProfilesPLCOLT.setDescription(' ')
pp4RebootTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 20), )
if mibBuilder.loadTexts: pp4RebootTable.setStatus('current')
if mibBuilder.loadTexts: pp4RebootTable.setDescription('')
pp4RebootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 20, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4RebootSlot"))
if mibBuilder.loadTexts: pp4RebootEntry.setStatus('current')
if mibBuilder.loadTexts: pp4RebootEntry.setDescription('')
pp4RebootSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 102))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4RebootSlot.setStatus('current')
if mibBuilder.loadTexts: pp4RebootSlot.setDescription('Index, 1-17 - slots, 100 - master, 101 - slave, 102 - system')
pp4RebootDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4RebootDescription.setStatus('current')
if mibBuilder.loadTexts: pp4RebootDescription.setDescription('Index')
pp4RebootCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 20, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4RebootCommand.setStatus('current')
if mibBuilder.loadTexts: pp4RebootCommand.setDescription('Set this to 1 to reboot')
pp4RebootAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 21), Integer32()).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4RebootAfterDelay.setStatus('current')
if mibBuilder.loadTexts: pp4RebootAfterDelay.setDescription('GET - pp4x will reboot after in this time\n\t\t\t\t SET - to set delay for reboot')
pp4ChannelGroupMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 22), )
if mibBuilder.loadTexts: pp4ChannelGroupMembershipTable.setStatus('current')
if mibBuilder.loadTexts: pp4ChannelGroupMembershipTable.setDescription('')
pp4ChannelGroupMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pp4ChannelGroupMembershipEntry.setStatus('current')
if mibBuilder.loadTexts: pp4ChannelGroupMembershipEntry.setDescription('')
pp4ChannelGroupMembershipGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 22, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4ChannelGroupMembershipGroupID.setStatus('current')
if mibBuilder.loadTexts: pp4ChannelGroupMembershipGroupID.setDescription('Channel group ID, or 0 - unassigned')
pp4ChannelGroupLACPTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 23), )
if mibBuilder.loadTexts: pp4ChannelGroupLACPTable.setStatus('current')
if mibBuilder.loadTexts: pp4ChannelGroupLACPTable.setDescription('')
pp4ChannelGroupLACPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 23, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4ChannelGroupLACPGroupID"))
if mibBuilder.loadTexts: pp4ChannelGroupLACPEntry.setStatus('current')
if mibBuilder.loadTexts: pp4ChannelGroupLACPEntry.setDescription('')
pp4ChannelGroupLACPGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 23, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pp4ChannelGroupLACPGroupID.setStatus('current')
if mibBuilder.loadTexts: pp4ChannelGroupLACPGroupID.setDescription('Channel group ID')
pp4ChannelGroupLACPRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 23, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4ChannelGroupLACPRunning.setStatus('current')
if mibBuilder.loadTexts: pp4ChannelGroupLACPRunning.setDescription('')
pp4ChannelGroupLACPAggregators = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 23, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ChannelGroupLACPAggregators.setStatus('current')
if mibBuilder.loadTexts: pp4ChannelGroupLACPAggregators.setDescription('')
pp4LACPSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4LACPSystemPriority.setStatus('current')
if mibBuilder.loadTexts: pp4LACPSystemPriority.setDescription('')
pp4MLDGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 25), )
if mibBuilder.loadTexts: pp4MLDGroupsTable.setStatus('current')
if mibBuilder.loadTexts: pp4MLDGroupsTable.setDescription('')
pp4MLDGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 25, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4MLDEntryID"))
if mibBuilder.loadTexts: pp4MLDGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: pp4MLDGroupsEntry.setDescription('')
pp4MLDEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: pp4MLDEntryID.setStatus('current')
if mibBuilder.loadTexts: pp4MLDEntryID.setDescription('Index')
pp4MLDVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MLDVLAN.setStatus('current')
if mibBuilder.loadTexts: pp4MLDVLAN.setDescription('')
pp4MLDGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 25, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MLDGroupAddress.setStatus('current')
if mibBuilder.loadTexts: pp4MLDGroupAddress.setDescription('')
pp4MLDMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 25, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MLDMemberPorts.setStatus('current')
if mibBuilder.loadTexts: pp4MLDMemberPorts.setDescription("Each octet within this value specifies a set of eight\n\t\t\t\t\t\t\t\t\t\tports, with the first octet specifying ports 1 through\n\t\t\t\t\t\t\t\t\t\t8, the second octet specifying ports 9 through 16, etc.\n\t\t\t\t\t\t\t\t\t\tWithin each octet, the most significant bit represents\n\t\t\t\t\t\t\t\t\t\tthe lowest numbered port, and the least significant bit\n\t\t\t\t\t\t\t\t\t\trepresents the highest numbered port.  Thus, each port\n\t\t\t\t\t\t\t\t\t\tof the bridge is represented by a single bit within the\n\t\t\t\t\t\t\t\t\t\tvalue of this object.  If that bit has a value of '1',\n\t\t\t\t\t\t\t\t\t\tthen that port is included in the set of ports; the port\n\t\t\t\t\t\t\t\t\t\tis not included if its bit has a value of '0")
pp4MLDExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 25, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MLDExpires.setStatus('current')
if mibBuilder.loadTexts: pp4MLDExpires.setDescription('')
pp4BoardState = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30))
pp4BoardFan1AbsoluteSpeed = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 1), Integer32()).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardFan1AbsoluteSpeed.setStatus('current')
if mibBuilder.loadTexts: pp4BoardFan1AbsoluteSpeed.setDescription('absolute speed of fan #1 (in rpm)')
pp4BoardFan2AbsoluteSpeed = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 2), Integer32()).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardFan2AbsoluteSpeed.setStatus('current')
if mibBuilder.loadTexts: pp4BoardFan2AbsoluteSpeed.setDescription('absolute speed of fan #2 (in rpm)')
pp4BoardFan3AbsoluteSpeed = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 3), Integer32()).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardFan3AbsoluteSpeed.setStatus('current')
if mibBuilder.loadTexts: pp4BoardFan3AbsoluteSpeed.setDescription('absolute speed of fan #3 (in rpm)')
pp4BoardFanRelativeSpeed = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 4), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardFanRelativeSpeed.setStatus('current')
if mibBuilder.loadTexts: pp4BoardFanRelativeSpeed.setDescription('relative speed of fans. 0 - stopped, 0xFF - max speed')
pp4BoardFan1Breakdown = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 5), Pp4FanBreakdownState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardFan1Breakdown.setStatus('current')
if mibBuilder.loadTexts: pp4BoardFan1Breakdown.setDescription('fan #1 breakdown indication')
pp4BoardFan2Breakdown = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 6), Pp4FanBreakdownState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardFan2Breakdown.setStatus('current')
if mibBuilder.loadTexts: pp4BoardFan2Breakdown.setDescription('fan #2 breakdown indication')
pp4BoardFan3Breakdown = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 7), Pp4FanBreakdownState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardFan3Breakdown.setStatus('current')
if mibBuilder.loadTexts: pp4BoardFan3Breakdown.setDescription('fan #3 breakdown indication')
pp4BoardUnit1TempSfp = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 8), Integer32()).setUnits('deg').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1TempSfp.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1TempSfp.setDescription('temperature')
pp4BoardUnit2TempSfp = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 9), Integer32()).setUnits('deg').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2TempSfp.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2TempSfp.setDescription('temperature')
pp4BoardUnit1TempProc = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 10), Integer32()).setUnits('deg').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1TempProc.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1TempProc.setDescription('temperature')
pp4BoardUnit2TempProc = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 11), Integer32()).setUnits('deg').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2TempProc.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2TempProc.setDescription('temperature')
pp4BoardUnit1TempSwitch = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 12), Integer32()).setUnits('deg').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1TempSwitch.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1TempSwitch.setDescription('temperature')
pp4BoardUnit2TempSwitch = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 13), Integer32()).setUnits('deg').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2TempSwitch.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2TempSwitch.setDescription('temperature')
pp4BoardUnit1LoadAverage1 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1LoadAverage1.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1LoadAverage1.setDescription('LoadAverage for 1 minute')
pp4BoardUnit2LoadAverage1 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2LoadAverage1.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2LoadAverage1.setDescription('LoadAverage for 1 minute')
pp4BoardUnit1LoadAverage5 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1LoadAverage5.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1LoadAverage5.setDescription('LoadAverage for 5 minute')
pp4BoardUnit2LoadAverage5 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2LoadAverage5.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2LoadAverage5.setDescription('LoadAverage for 5 minute')
pp4BoardUnit1LoadAverage15 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1LoadAverage15.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1LoadAverage15.setDescription('LoadAverage for 15 minute')
pp4BoardUnit2LoadAverage15 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2LoadAverage15.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2LoadAverage15.setDescription('LoadAverage for 15 minute')
pp4BoardUnit1TotalRam = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 20), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1TotalRam.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1TotalRam.setDescription('total ram')
pp4BoardUnit2TotalRam = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 21), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2TotalRam.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2TotalRam.setDescription('total ram')
pp4BoardUnit1FreeRam = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 22), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1FreeRam.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1FreeRam.setDescription('free ram')
pp4BoardUnit2FreeRam = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 23), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2FreeRam.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2FreeRam.setDescription('free ram')
pp4BoardUnit1TotalFilesystemRoot = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 24), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1TotalFilesystemRoot.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1TotalFilesystemRoot.setDescription('Available file system size in bytes')
pp4BoardUnit2TotalFilesystemRoot = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 25), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2TotalFilesystemRoot.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2TotalFilesystemRoot.setDescription('Available file system size in bytes')
pp4BoardUnit1TotalFilesystemTools = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 26), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1TotalFilesystemTools.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1TotalFilesystemTools.setDescription('Available file system size in bytes')
pp4BoardUnit2TotalFilesystemTools = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 27), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2TotalFilesystemTools.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2TotalFilesystemTools.setDescription('Available file system size in bytes')
pp4BoardUnit1TotalFilesystemConfig = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 28), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1TotalFilesystemConfig.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1TotalFilesystemConfig.setDescription('Available file system size in bytes')
pp4BoardUnit2TotalFilesystemConfig = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 29), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2TotalFilesystemConfig.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2TotalFilesystemConfig.setDescription('Available file system size in bytes')
pp4BoardUnit1TotalFilesystemLog = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 30), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1TotalFilesystemLog.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1TotalFilesystemLog.setDescription('Available file system size in bytes')
pp4BoardUnit2TotalFilesystemLog = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 31), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2TotalFilesystemLog.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2TotalFilesystemLog.setDescription('Available file system size in bytes')
pp4BoardUnit1FreeFilesystemRoot = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 32), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1FreeFilesystemRoot.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1FreeFilesystemRoot.setDescription('Available file system size in bytes')
pp4BoardUnit2FreeFilesystemRoot = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 33), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2FreeFilesystemRoot.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2FreeFilesystemRoot.setDescription('Available file system size in bytes')
pp4BoardUnit1FreeFilesystemTools = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 34), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1FreeFilesystemTools.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1FreeFilesystemTools.setDescription('Available file system size in bytes')
pp4BoardUnit2FreeFilesystemTools = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 35), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2FreeFilesystemTools.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2FreeFilesystemTools.setDescription('Available file system size in bytes')
pp4BoardUnit1FreeFilesystemConfig = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 36), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1FreeFilesystemConfig.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1FreeFilesystemConfig.setDescription('Available file system size in bytes')
pp4BoardUnit2FreeFilesystemConfig = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 37), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2FreeFilesystemConfig.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2FreeFilesystemConfig.setDescription('Available file system size in bytes')
pp4BoardUnit1FreeFilesystemLog = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 38), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit1FreeFilesystemLog.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit1FreeFilesystemLog.setDescription('Available file system size in bytes')
pp4BoardUnit2FreeFilesystemLog = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 30, 39), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BoardUnit2FreeFilesystemLog.setStatus('current')
if mibBuilder.loadTexts: pp4BoardUnit2FreeFilesystemLog.setDescription('Available file system size in bytes')
pp4FeederState = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 31))
pp4Feeder1Status = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 31, 1), Pp4FeederStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4Feeder1Status.setStatus('current')
if mibBuilder.loadTexts: pp4Feeder1Status.setDescription(' ')
pp4Feeder1Active = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 31, 2), Pp4FeederActive()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4Feeder1Active.setStatus('current')
if mibBuilder.loadTexts: pp4Feeder1Active.setDescription(' ')
pp4Feeder1Polarity = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 31, 3), Pp4FeederPolarity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4Feeder1Polarity.setStatus('current')
if mibBuilder.loadTexts: pp4Feeder1Polarity.setDescription(' ')
pp4Feeder1Current = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 31, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4Feeder1Current.setStatus('current')
if mibBuilder.loadTexts: pp4Feeder1Current.setDescription(' XX.XX A ')
pp4Feeder1Voltage = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 31, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4Feeder1Voltage.setStatus('current')
if mibBuilder.loadTexts: pp4Feeder1Voltage.setDescription(' +-XX.XX V ')
pp4Feeder2Status = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 31, 6), Pp4FeederStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4Feeder2Status.setStatus('current')
if mibBuilder.loadTexts: pp4Feeder2Status.setDescription(' ')
pp4Feeder2Active = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 31, 7), Pp4FeederActive()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4Feeder2Active.setStatus('current')
if mibBuilder.loadTexts: pp4Feeder2Active.setDescription(' ')
pp4Feeder2Polarity = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 31, 8), Pp4FeederPolarity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4Feeder2Polarity.setStatus('current')
if mibBuilder.loadTexts: pp4Feeder2Polarity.setDescription(' ')
pp4Feeder2Current = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 31, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4Feeder2Current.setStatus('current')
if mibBuilder.loadTexts: pp4Feeder2Current.setDescription(' XX.XX A ')
pp4Feeder2Voltage = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 31, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4Feeder2Voltage.setStatus('current')
if mibBuilder.loadTexts: pp4Feeder2Voltage.setDescription(' +-XX.XX V ')
pp4StationVoltage = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 31, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4StationVoltage.setStatus('current')
if mibBuilder.loadTexts: pp4StationVoltage.setDescription(' +-XX.XX V ')
pp4Firmware = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35))
pp4FirmwareTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 1), )
if mibBuilder.loadTexts: pp4FirmwareTable.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareTable.setDescription('This table provides info on what firmwares are available.')
pp4FirmwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 1, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4FirmwareBoardType"), (0, "ELTEX-PP4", "pp4FirmwareIndex"))
if mibBuilder.loadTexts: pp4FirmwareEntry.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareEntry.setDescription('')
pp4FirmwareBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 1, 1, 1), Pp4SlotBoardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4FirmwareBoardType.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareBoardType.setDescription('')
pp4FirmwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4FirmwareIndex.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareIndex.setDescription(' ')
pp4FirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4FirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareVersion.setDescription('')
pp4FirmwareDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareDelete.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareDelete.setDescription(' set 1 to delete firmware ')
pp4DefaultFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 2))
pp4DefaultFirmwareELC = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 2, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4DefaultFirmwareELC.setStatus('current')
if mibBuilder.loadTexts: pp4DefaultFirmwareELC.setDescription('Default firmware for ELC boards. Firmware is choosen by\n\t\t\t\t\t\t\tspecifying pp4FirmwareIndex from pp4FirmwareTable')
pp4DefaultFirmwarePLC = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 2, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4DefaultFirmwarePLC.setStatus('current')
if mibBuilder.loadTexts: pp4DefaultFirmwarePLC.setDescription('Default firmware for ELC boards. Firmware is choosen by\n\t\t\t\t\t\t\tspecifying pp4FirmwareIndex from pp4FirmwareTable')
pp4ShelfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 3), )
if mibBuilder.loadTexts: pp4ShelfConfigTable.setStatus('current')
if mibBuilder.loadTexts: pp4ShelfConfigTable.setDescription('This table provides means to configure board types and firmwares.')
pp4ShelfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 3, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4ShelfConfigSlot"))
if mibBuilder.loadTexts: pp4ShelfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pp4ShelfConfigEntry.setDescription('')
pp4ShelfConfigSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ShelfConfigSlot.setStatus('current')
if mibBuilder.loadTexts: pp4ShelfConfigSlot.setDescription('')
pp4ShelfConfigBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 3, 1, 2), Pp4SlotBoardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4ShelfConfigBoardType.setStatus('current')
if mibBuilder.loadTexts: pp4ShelfConfigBoardType.setDescription(' ')
pp4ShelfConfigFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 3, 1, 3), Pp4SlotFirmwareVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4ShelfConfigFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: pp4ShelfConfigFirmwareVersion.setDescription('')
pp4BootVarTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 4), )
if mibBuilder.loadTexts: pp4BootVarTable.setStatus('current')
if mibBuilder.loadTexts: pp4BootVarTable.setDescription('This table provides means to configure board types and firmwares.')
pp4BootVarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 4, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4BootVarUnit"), (0, "ELTEX-PP4", "pp4BootVarIndex"))
if mibBuilder.loadTexts: pp4BootVarEntry.setStatus('current')
if mibBuilder.loadTexts: pp4BootVarEntry.setDescription(' ')
pp4BootVarUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: pp4BootVarUnit.setStatus('current')
if mibBuilder.loadTexts: pp4BootVarUnit.setDescription('')
pp4BootVarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: pp4BootVarIndex.setStatus('current')
if mibBuilder.loadTexts: pp4BootVarIndex.setDescription('')
pp4BootVarValid = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BootVarValid.setStatus('current')
if mibBuilder.loadTexts: pp4BootVarValid.setDescription('')
pp4BootVarTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BootVarTimestamp.setStatus('current')
if mibBuilder.loadTexts: pp4BootVarTimestamp.setDescription('')
pp4BootVarVersionString = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4BootVarVersionString.setStatus('current')
if mibBuilder.loadTexts: pp4BootVarVersionString.setDescription('')
pp4UnitsFirmwareTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 5), )
if mibBuilder.loadTexts: pp4UnitsFirmwareTable.setStatus('current')
if mibBuilder.loadTexts: pp4UnitsFirmwareTable.setDescription('This table provides means to configure board types and firmwares.')
pp4UnitsFirmwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 5, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4BootVarUnit"))
if mibBuilder.loadTexts: pp4UnitsFirmwareEntry.setStatus('current')
if mibBuilder.loadTexts: pp4UnitsFirmwareEntry.setDescription('')
pp4UnitsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 5, 1, 1), Pp4FirmwareUnitStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4UnitsStatus.setStatus('current')
if mibBuilder.loadTexts: pp4UnitsStatus.setDescription('')
pp4UnitsActivePartition = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4UnitsActivePartition.setStatus('current')
if mibBuilder.loadTexts: pp4UnitsActivePartition.setDescription('The version that will be booted the next time\n\t\t\t\t\t\t\t\t\t(0..FW_MAX_PARTITIONS); any value outside this range\n\t\t\t\t\t\t\t\t\tshould be treated as NotActive.')
pp4UnitsFallbackPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4UnitsFallbackPartition.setStatus('current')
if mibBuilder.loadTexts: pp4UnitsFallbackPartition.setDescription('If fw_status is one of FW_STATUS_DOWNLOADED or FW_STATUS_TESTING:\n\t\t\t\t\t\t\t\t\tthe version that will be selected as active\n\t\t\t\t\t\t\t\t\tif there is no confirmation from the operator.')
pp4UnitsRunningPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4UnitsRunningPartition.setStatus('current')
if mibBuilder.loadTexts: pp4UnitsRunningPartition.setDescription('The partition that the firmware is currently running from.')
pp4UnitsConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 5, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4UnitsConfirm.setStatus('current')
if mibBuilder.loadTexts: pp4UnitsConfirm.setDescription('set 1 to confirm selected pertition after reboot')
pp4FirmwareDeleteUnused = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareDeleteUnused.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareDeleteUnused.setDescription('Set 1 to delete all unused fw')
pp4FirmwareUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 10))
pp4FirmwareUpdateFileName = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 10, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareUpdateFileName.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareUpdateFileName.setDescription('')
pp4FirmwareUpdateIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareUpdateIpAddress.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareUpdateIpAddress.setDescription('')
pp4FirmwareUpdateConfigName = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 10, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareUpdateConfigName.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareUpdateConfigName.setDescription('config for new version. keep it empty if special config is not needed')
pp4FirmwareUpdateSwitchVersion = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 10, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareUpdateSwitchVersion.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareUpdateSwitchVersion.setDescription('set true to select new firmware for next boot')
pp4FirmwareUpdateNeedRestart = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 10, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareUpdateNeedRestart.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareUpdateNeedRestart.setDescription('set true to restart devices')
pp4FirmwareUpdateNSSU = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 10, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareUpdateNSSU.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareUpdateNSSU.setDescription('not stop software update - set true to restart devices without stop service')
pp4FirmwareUpdateConfigIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 10, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareUpdateConfigIpAddress.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareUpdateConfigIpAddress.setDescription('')
pp4FirmwareUpdateProtocol = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tftp", 1), ("http", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareUpdateProtocol.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareUpdateProtocol.setDescription('')
pp4FirmwareUpdatePort = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 10, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareUpdatePort.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareUpdatePort.setDescription('')
pp4FirmwareUpdateAction = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 10, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareUpdateAction.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareUpdateAction.setDescription('Set to 1 to initiate update process')
pp4FirmwareUpdateConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tftp", 1), ("http", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareUpdateConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareUpdateConfigProtocol.setDescription('')
pp4FirmwareUpdateConfigPort = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 10, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareUpdateConfigPort.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareUpdateConfigPort.setDescription('')
pp4FirmwareUpdateConfirm = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 35, 10, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4FirmwareUpdateConfirm.setStatus('current')
if mibBuilder.loadTexts: pp4FirmwareUpdateConfirm.setDescription('Set to 1 to confirm both units')
pp4AlarmsJournal = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 40))
pp4AlarmsJournalCleanJournal = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 40, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4AlarmsJournalCleanJournal.setStatus('current')
if mibBuilder.loadTexts: pp4AlarmsJournalCleanJournal.setDescription('On GET-REQUEST device should do nothing.\n\t\t\t\tOn SET-REQUEST device should clean up alarms journal')
pp4xIfUtilizTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 16), )
if mibBuilder.loadTexts: pp4xIfUtilizTable.setStatus('current')
if mibBuilder.loadTexts: pp4xIfUtilizTable.setDescription('')
pp4xIfUtilizEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 16, 1), ).setIndexNames((0, "ELTEX-PP4", "interfaceIndex"))
if mibBuilder.loadTexts: pp4xIfUtilizEntry.setStatus('current')
if mibBuilder.loadTexts: pp4xIfUtilizEntry.setDescription('')
interfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: interfaceIndex.setStatus('current')
if mibBuilder.loadTexts: interfaceIndex.setDescription(' ')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription(' ')
lastCountersKbitsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 16, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastCountersKbitsSent.setStatus('current')
if mibBuilder.loadTexts: lastCountersKbitsSent.setDescription(' ')
lastCountersKbitsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 16, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastCountersKbitsRecv.setStatus('current')
if mibBuilder.loadTexts: lastCountersKbitsRecv.setDescription(' ')
lastCountersFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 16, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastCountersFramesSent.setStatus('current')
if mibBuilder.loadTexts: lastCountersFramesSent.setDescription(' ')
lastCountersFramesRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 16, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastCountersFramesRecv.setStatus('current')
if mibBuilder.loadTexts: lastCountersFramesRecv.setDescription(' ')
averageKbitsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 16, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: averageKbitsSent.setStatus('current')
if mibBuilder.loadTexts: averageKbitsSent.setDescription(' ')
averageKbitsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 16, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: averageKbitsRecv.setStatus('current')
if mibBuilder.loadTexts: averageKbitsRecv.setDescription(' ')
averageFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 16, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: averageFramesSent.setStatus('current')
if mibBuilder.loadTexts: averageFramesSent.setDescription(' ')
averageFramesRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 16, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: averageFramesRecv.setStatus('current')
if mibBuilder.loadTexts: averageFramesRecv.setDescription(' ')
pp4xIfUtilizAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4xIfUtilizAverageInterval.setStatus('current')
if mibBuilder.loadTexts: pp4xIfUtilizAverageInterval.setDescription(' ')
pp4xSfpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 18), )
if mibBuilder.loadTexts: pp4xSfpInfoTable.setStatus('current')
if mibBuilder.loadTexts: pp4xSfpInfoTable.setDescription('')
pp4xSfpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pp4xSfpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: pp4xSfpInfoEntry.setDescription('')
sfpInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("notAvailable", 1), ("ddmNotSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoStatus.setStatus('current')
if mibBuilder.loadTexts: sfpInfoStatus.setDescription(' ')
sfpInfoTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 18, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoTemperature.setStatus('current')
if mibBuilder.loadTexts: sfpInfoTemperature.setDescription('Temperture measured in celsius degrees.')
sfpInfoVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 18, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoVoltage.setStatus('current')
if mibBuilder.loadTexts: sfpInfoVoltage.setDescription('Measured in mV.')
sfpInfoCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 18, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoCurrent.setStatus('current')
if mibBuilder.loadTexts: sfpInfoCurrent.setDescription('Measured in uA.')
sfpInfoRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 18, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoRXPower.setStatus('current')
if mibBuilder.loadTexts: sfpInfoRXPower.setDescription('Measured in uW.')
sfpInfoTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 18, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoTXPower.setStatus('current')
if mibBuilder.loadTexts: sfpInfoTXPower.setDescription('Measured in uW.')
pp4PortsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 19), )
if mibBuilder.loadTexts: pp4PortsConfigTable.setStatus('current')
if mibBuilder.loadTexts: pp4PortsConfigTable.setDescription('')
pp4PortsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 19, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4PortsConfigEntryID"))
if mibBuilder.loadTexts: pp4PortsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pp4PortsConfigEntry.setDescription('')
pp4PortsConfigEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 19, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pp4PortsConfigEntryID.setStatus('current')
if mibBuilder.loadTexts: pp4PortsConfigEntryID.setDescription('Index')
pp4PortsConfigAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 19, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4PortsConfigAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: pp4PortsConfigAutoNegotiate.setDescription('')
pp4PortsConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 19, 1, 3), Pp4PortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4PortsConfigSpeed.setStatus('current')
if mibBuilder.loadTexts: pp4PortsConfigSpeed.setDescription('')
pp4PortsConfigDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 19, 1, 4), Pp4PortDuplex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4PortsConfigDuplex.setStatus('current')
if mibBuilder.loadTexts: pp4PortsConfigDuplex.setDescription('')
pp4PortsConfigFlowControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 19, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4PortsConfigFlowControlEnabled.setStatus('current')
if mibBuilder.loadTexts: pp4PortsConfigFlowControlEnabled.setDescription('')
pp4PortsConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 19, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4PortsConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: pp4PortsConfigEnabled.setDescription('')
pp4PortsConfigResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 19, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4PortsConfigResetCounters.setStatus('current')
if mibBuilder.loadTexts: pp4PortsConfigResetCounters.setDescription('Set to 1 to reset counters')
pp4PortsConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 19, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pp4PortsConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: pp4PortsConfigRowStatus.setDescription('on set active - send data to switchd')
pp4UserTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 50), )
if mibBuilder.loadTexts: pp4UserTable.setStatus('current')
if mibBuilder.loadTexts: pp4UserTable.setDescription('')
pp4UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 50, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4UserName"))
if mibBuilder.loadTexts: pp4UserEntry.setStatus('current')
if mibBuilder.loadTexts: pp4UserEntry.setDescription('')
pp4UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 50, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4UserName.setStatus('current')
if mibBuilder.loadTexts: pp4UserName.setDescription(' ')
pp4UserPermissions = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 50, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4UserPermissions.setStatus('current')
if mibBuilder.loadTexts: pp4UserPermissions.setDescription('')
pp4UserOldPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 50, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4UserOldPassword.setStatus('current')
if mibBuilder.loadTexts: pp4UserOldPassword.setDescription(' ')
pp4UserNewPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 50, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4UserNewPassword.setStatus('current')
if mibBuilder.loadTexts: pp4UserNewPassword.setDescription(' ')
pp4UserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 50, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4UserRowStatus.setStatus('current')
if mibBuilder.loadTexts: pp4UserRowStatus.setDescription(' ')
pp4Privileges = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 51))
pp4PrivilegesNamesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 51, 1), )
if mibBuilder.loadTexts: pp4PrivilegesNamesTable.setStatus('current')
if mibBuilder.loadTexts: pp4PrivilegesNamesTable.setDescription('')
pp4PrivilegesNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 51, 1, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4PrivilegesNamesIndex"))
if mibBuilder.loadTexts: pp4PrivilegesNamesEntry.setStatus('current')
if mibBuilder.loadTexts: pp4PrivilegesNamesEntry.setDescription('')
pp4PrivilegesNamesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 51, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pp4PrivilegesNamesIndex.setStatus('current')
if mibBuilder.loadTexts: pp4PrivilegesNamesIndex.setDescription(' ')
pp4PrivilegesNamesName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 51, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4PrivilegesNamesName.setStatus('current')
if mibBuilder.loadTexts: pp4PrivilegesNamesName.setDescription('')
pp4PrivilegesLevelsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 51, 2), )
if mibBuilder.loadTexts: pp4PrivilegesLevelsTable.setStatus('current')
if mibBuilder.loadTexts: pp4PrivilegesLevelsTable.setDescription('')
pp4PrivilegesLevelsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 51, 2, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4PrivilegesLevelsLevel"))
if mibBuilder.loadTexts: pp4PrivilegesLevelsEntry.setStatus('current')
if mibBuilder.loadTexts: pp4PrivilegesLevelsEntry.setDescription('')
pp4PrivilegesLevelsLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 51, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pp4PrivilegesLevelsLevel.setStatus('current')
if mibBuilder.loadTexts: pp4PrivilegesLevelsLevel.setDescription(' ')
pp4PrivilegesLevelsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 51, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4PrivilegesLevelsAllowed.setStatus('current')
if mibBuilder.loadTexts: pp4PrivilegesLevelsAllowed.setDescription('')
pp4IGMPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55))
pp4IGMPSnoopingEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4IGMPSnoopingEnable.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPSnoopingEnable.setDescription(' ')
pp4IGMPProxyReportEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4IGMPProxyReportEnable.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPProxyReportEnable.setDescription(' ')
pp4MLDSnoopingEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4MLDSnoopingEnable.setStatus('current')
if mibBuilder.loadTexts: pp4MLDSnoopingEnable.setDescription(' ')
pp4MLDProxyReportEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4MLDProxyReportEnable.setStatus('current')
if mibBuilder.loadTexts: pp4MLDProxyReportEnable.setDescription(' ')
pp4IGMPSnoopingVLANTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 10), )
if mibBuilder.loadTexts: pp4IGMPSnoopingVLANTable.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPSnoopingVLANTable.setDescription('')
pp4IGMPSnoopingVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 10, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4IGMPSnoopingVLANVID"))
if mibBuilder.loadTexts: pp4IGMPSnoopingVLANEntry.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPSnoopingVLANEntry.setDescription('')
pp4IGMPSnoopingVLANVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4IGMPSnoopingVLANVID.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPSnoopingVLANVID.setDescription(' ')
pp4IGMPSnoopingVLANEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 10, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4IGMPSnoopingVLANEnabled.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPSnoopingVLANEnabled.setDescription(' ')
pp4IGMPSnoopingVLANQuerierEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 10, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4IGMPSnoopingVLANQuerierEnabled.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPSnoopingVLANQuerierEnabled.setDescription(' ')
pp4MLDSnoopingVLANEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 10, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4MLDSnoopingVLANEnabled.setStatus('current')
if mibBuilder.loadTexts: pp4MLDSnoopingVLANEnabled.setDescription(' ')
pp4MLDSnoopingVLANQuerierEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 10, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4MLDSnoopingVLANQuerierEnabled.setStatus('current')
if mibBuilder.loadTexts: pp4MLDSnoopingVLANQuerierEnabled.setDescription(' ')
pp4IGMPProxyReportRangesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 20), )
if mibBuilder.loadTexts: pp4IGMPProxyReportRangesTable.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPProxyReportRangesTable.setDescription('')
pp4IGMPProxyReportRangesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 20, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4IGMPProxyReportRangesID"))
if mibBuilder.loadTexts: pp4IGMPProxyReportRangesEntry.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPProxyReportRangesEntry.setDescription('')
pp4IGMPProxyReportRangesID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 20, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4IGMPProxyReportRangesID.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPProxyReportRangesID.setDescription(' ')
pp4IGMPProxyReportRangesStart = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 20, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4IGMPProxyReportRangesStart.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPProxyReportRangesStart.setDescription(' ')
pp4IGMPProxyReportRangesEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 20, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4IGMPProxyReportRangesEnd.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPProxyReportRangesEnd.setDescription(' ')
pp4IGMPProxyReportRangesFromVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 20, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4IGMPProxyReportRangesFromVLAN.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPProxyReportRangesFromVLAN.setDescription(' ')
pp4IGMPProxyReportRangesToVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 20, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4IGMPProxyReportRangesToVLAN.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPProxyReportRangesToVLAN.setDescription(' ')
pp4IGMPProxyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 20, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4IGMPProxyRowStatus.setStatus('current')
if mibBuilder.loadTexts: pp4IGMPProxyRowStatus.setDescription(' ')
pp4MLDProxyReportRangesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 25), )
if mibBuilder.loadTexts: pp4MLDProxyReportRangesTable.setStatus('current')
if mibBuilder.loadTexts: pp4MLDProxyReportRangesTable.setDescription('')
pp4MLDProxyReportRangesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 25, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4MLDProxyReportRangesID"))
if mibBuilder.loadTexts: pp4MLDProxyReportRangesEntry.setStatus('current')
if mibBuilder.loadTexts: pp4MLDProxyReportRangesEntry.setDescription('')
pp4MLDProxyReportRangesID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 25, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4MLDProxyReportRangesID.setStatus('current')
if mibBuilder.loadTexts: pp4MLDProxyReportRangesID.setDescription(' ')
pp4MLDProxyReportRangesStart = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 25, 1, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4MLDProxyReportRangesStart.setStatus('current')
if mibBuilder.loadTexts: pp4MLDProxyReportRangesStart.setDescription(' ')
pp4MLDProxyReportRangesEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 25, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4MLDProxyReportRangesEnd.setStatus('current')
if mibBuilder.loadTexts: pp4MLDProxyReportRangesEnd.setDescription(' ')
pp4MLDProxyReportRangesFromVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 25, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4MLDProxyReportRangesFromVLAN.setStatus('current')
if mibBuilder.loadTexts: pp4MLDProxyReportRangesFromVLAN.setDescription(' ')
pp4MLDProxyReportRangesToVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 25, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4MLDProxyReportRangesToVLAN.setStatus('current')
if mibBuilder.loadTexts: pp4MLDProxyReportRangesToVLAN.setDescription(' ')
pp4MLDProxyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 55, 25, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4MLDProxyRowStatus.setStatus('current')
if mibBuilder.loadTexts: pp4MLDProxyRowStatus.setDescription(' ')
pp4QOSConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 60))
pp4QOSDefaultQueue = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 60, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4QOSDefaultQueue.setStatus('current')
if mibBuilder.loadTexts: pp4QOSDefaultQueue.setDescription('Default priority queue')
pp4QOSType = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 60, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("typeAllEqual", 0), ("type8021p", 1), ("typeDscpTos", 2), ("typeDscpTos8021p", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4QOSType.setStatus('current')
if mibBuilder.loadTexts: pp4QOSType.setDescription('Priority field of packet')
pp4QOS8021pMappingTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 60, 3), )
if mibBuilder.loadTexts: pp4QOS8021pMappingTable.setStatus('current')
if mibBuilder.loadTexts: pp4QOS8021pMappingTable.setDescription('')
pp4QOS8021pMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 60, 3, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4QOS8021pMappingQueue"))
if mibBuilder.loadTexts: pp4QOS8021pMappingEntry.setStatus('current')
if mibBuilder.loadTexts: pp4QOS8021pMappingEntry.setDescription('')
pp4QOS8021pMappingQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 60, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pp4QOS8021pMappingQueue.setStatus('current')
if mibBuilder.loadTexts: pp4QOS8021pMappingQueue.setDescription(' ')
pp4QOS8021pMappingFields = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 60, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4QOS8021pMappingFields.setStatus('current')
if mibBuilder.loadTexts: pp4QOS8021pMappingFields.setDescription('Bitmask, in which every bit maps corresponding field to queue.')
pp4QOSDSCPMappingTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 60, 4), )
if mibBuilder.loadTexts: pp4QOSDSCPMappingTable.setStatus('current')
if mibBuilder.loadTexts: pp4QOSDSCPMappingTable.setDescription('')
pp4QOSDSCPMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 60, 4, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4QOSDSCPMappingQueue"))
if mibBuilder.loadTexts: pp4QOSDSCPMappingEntry.setStatus('current')
if mibBuilder.loadTexts: pp4QOSDSCPMappingEntry.setDescription('')
pp4QOSDSCPMappingQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 60, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pp4QOSDSCPMappingQueue.setStatus('current')
if mibBuilder.loadTexts: pp4QOSDSCPMappingQueue.setDescription(' ')
pp4QOSDSCPMappingFields = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 60, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4QOSDSCPMappingFields.setStatus('current')
if mibBuilder.loadTexts: pp4QOSDSCPMappingFields.setDescription('Bitmask, in which every bit maps corresponding field to queue.')
pp4AccessList = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 65))
pp4AccessListDefaultPolicyType = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 65, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("allow", 0), ("deny", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4AccessListDefaultPolicyType.setStatus('current')
if mibBuilder.loadTexts: pp4AccessListDefaultPolicyType.setDescription('.')
pp4AccessListTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 65, 2), )
if mibBuilder.loadTexts: pp4AccessListTable.setStatus('current')
if mibBuilder.loadTexts: pp4AccessListTable.setDescription('')
pp4AccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 65, 2, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4AccessListEntryID"))
if mibBuilder.loadTexts: pp4AccessListEntry.setStatus('current')
if mibBuilder.loadTexts: pp4AccessListEntry.setDescription('')
pp4AccessListEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 65, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pp4AccessListEntryID.setStatus('current')
if mibBuilder.loadTexts: pp4AccessListEntryID.setDescription(' ')
pp4AccessListPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 65, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("allow", 0), ("deny", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4AccessListPolicyType.setStatus('current')
if mibBuilder.loadTexts: pp4AccessListPolicyType.setDescription('.')
pp4AccessListService = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 65, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("serviceHttp", 0), ("serviceSnmp", 1), ("serviceSsh", 2), ("serviceTelnet", 3), ("serviceAny", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4AccessListService.setStatus('current')
if mibBuilder.loadTexts: pp4AccessListService.setDescription('.')
pp4AccessListIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 65, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("any", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4AccessListIfIndex.setStatus('current')
if mibBuilder.loadTexts: pp4AccessListIfIndex.setDescription('.')
pp4AccessListSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 65, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("sourceMacAddress", 0), ("sourceIpAddress", 1), ("sourceAny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4AccessListSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: pp4AccessListSourceAddressType.setDescription('.')
pp4AccessListSourceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 65, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4AccessListSourceMacAddress.setStatus('current')
if mibBuilder.loadTexts: pp4AccessListSourceMacAddress.setDescription('Has sense if pp4AccessListSourceAddressType = sourceMacAddress')
pp4AccessListSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 65, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4AccessListSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: pp4AccessListSourceIpAddress.setDescription('Has sense if pp4AccessListSourceAddressType = sourceIpAddress')
pp4AccessListSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 65, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4AccessListSourceMask.setStatus('current')
if mibBuilder.loadTexts: pp4AccessListSourceMask.setDescription('Has sense if pp4AccessListSourceAddressType = sourceIpAddress')
pp4AccessListChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 65, 2, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4AccessListChangeIndex.setStatus('current')
if mibBuilder.loadTexts: pp4AccessListChangeIndex.setDescription('Change entry index, shifting following entries downwards.')
pp4AccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 65, 2, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4AccessListRowStatus.setStatus('current')
if mibBuilder.loadTexts: pp4AccessListRowStatus.setDescription('.')
pp4ONTLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 70))
pp4ONTLicenseInstalled = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 70, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ONTLicenseInstalled.setStatus('current')
if mibBuilder.loadTexts: pp4ONTLicenseInstalled.setDescription('')
pp4ONTLicenseValid = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 70, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ONTLicenseValid.setStatus('current')
if mibBuilder.loadTexts: pp4ONTLicenseValid.setDescription('')
pp4ONTLicenseVersion = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 70, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ONTLicenseVersion.setStatus('current')
if mibBuilder.loadTexts: pp4ONTLicenseVersion.setDescription('')
pp4ONTLicenseCarrier = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 70, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ONTLicenseCarrier.setStatus('current')
if mibBuilder.loadTexts: pp4ONTLicenseCarrier.setDescription('')
pp4ONTLicenseVendor = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 70, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ONTLicenseVendor.setStatus('current')
if mibBuilder.loadTexts: pp4ONTLicenseVendor.setDescription('')
pp4ONTLicenseONTCountLicensed = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 70, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2147483647))).clone(namedValues=NamedValues(("unlimited", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ONTLicenseONTCountLicensed.setStatus('current')
if mibBuilder.loadTexts: pp4ONTLicenseONTCountLicensed.setDescription('')
pp4ONTLicenseONTCountOnline = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 70, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ONTLicenseONTCountOnline.setStatus('current')
if mibBuilder.loadTexts: pp4ONTLicenseONTCountOnline.setDescription('')
pp4ONTLicenseSerialNumbers = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 70, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ONTLicenseSerialNumbers.setStatus('current')
if mibBuilder.loadTexts: pp4ONTLicenseSerialNumbers.setDescription('')
pp4ONTLicenseMacAddresses = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 13, 70, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pp4ONTLicenseMacAddresses.setStatus('current')
if mibBuilder.loadTexts: pp4ONTLicenseMacAddresses.setDescription('')
pp4RawData = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 13, 300))
pp4RawMacTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 13, 300, 1), )
if mibBuilder.loadTexts: pp4RawMacTable.setStatus('current')
if mibBuilder.loadTexts: pp4RawMacTable.setDescription(' ')
pp4RawMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 13, 300, 1, 1), ).setIndexNames((0, "ELTEX-PP4", "pp4RawMacChunkID"))
if mibBuilder.loadTexts: pp4RawMacEntry.setStatus('current')
if mibBuilder.loadTexts: pp4RawMacEntry.setDescription('')
pp4RawMacChunkID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 300, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pp4RawMacChunkID.setStatus('current')
if mibBuilder.loadTexts: pp4RawMacChunkID.setDescription(' ')
pp4RawMacText = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 13, 300, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pp4RawMacText.setStatus('current')
if mibBuilder.loadTexts: pp4RawMacText.setDescription(' ')
ma4000AlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 35))
ma4000OkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 36))
ma4000ConfigSavedOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000ConfigSavedOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000ConfigSavedOkTrap.setDescription(' ')
ma4000ConfigSaveAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000ConfigSaveAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000ConfigSaveAlarmTrap.setDescription(' ')
ma4000ConfigAppliedOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000ConfigAppliedOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000ConfigAppliedOkTrap.setDescription(' ')
ma4000ConfigApplyAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000ConfigApplyAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000ConfigApplyAlarmTrap.setDescription(' ')
ma4000LoginAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000LoginAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000LoginAlarmTrap.setDescription(' ')
ma4000DhcpAckAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000DhcpAckAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000DhcpAckAlarmTrap.setDescription(' ')
ma4000DhcpAgentUpAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000DhcpAgentUpAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000DhcpAgentUpAlarmTrap.setDescription(' ')
ma4000DhcpServerUpAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 7)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000DhcpServerUpAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000DhcpServerUpAlarmTrap.setDescription(' ')
ma4000DhcpIpGotAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 8)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000DhcpIpGotAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000DhcpIpGotAlarmTrap.setDescription(' ')
ma4000Pp4CpuLoadCriticalAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 9)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000Pp4CpuLoadCriticalAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000Pp4CpuLoadCriticalAlarmTrap.setDescription(' ')
ma4000Pp4CpuLoadCriticalOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 9)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000Pp4CpuLoadCriticalOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000Pp4CpuLoadCriticalOkTrap.setDescription(' ')
ma4000OutOfRamAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 10)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000OutOfRamAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000OutOfRamAlarmTrap.setDescription(' ')
ma4000MacSyncVlanDuplicateAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 11)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000MacSyncVlanDuplicateAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000MacSyncVlanDuplicateAlarmTrap.setDescription(' ')
ma4000LinksPortFlappingPhyOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000LinksPortFlappingPhyOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000LinksPortFlappingPhyOkTrap.setDescription(' ')
ma4000LinksPortFlappingPhyAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000LinksPortFlappingPhyAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000LinksPortFlappingPhyAlarmTrap.setDescription(' ')
ma4000LinkUpOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 13)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000LinkUpOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000LinkUpOkTrap.setDescription(' ')
ma4000LinkDownAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 13)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000LinkDownAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000LinkDownAlarmTrap.setDescription(' ')
ma4000UnitLostOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000UnitLostOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000UnitLostOkTrap.setDescription(' ')
ma4000UnitLostAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000UnitLostAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000UnitLostAlarmTrap.setDescription(' ')
ma4000DhcpOfferAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 15)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000DhcpOfferAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000DhcpOfferAlarmTrap.setDescription(' ')
ma4000DhcpAgentDownAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 16)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000DhcpAgentDownAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000DhcpAgentDownAlarmTrap.setDescription(' ')
ma4000DhcpServerAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 17)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000DhcpServerAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000DhcpServerAlarmTrap.setDescription(' ')
ma4000DhcpIpFailedAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 18)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000DhcpIpFailedAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000DhcpIpFailedAlarmTrap.setDescription(' ')
ma4000SlotOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 19)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000SlotOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000SlotOkTrap.setDescription(' ')
ma4000IgmpSyncFailedAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 20)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000IgmpSyncFailedAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000IgmpSyncFailedAlarmTrap.setDescription(' ')
ma4000StpSyncFailedAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 21)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000StpSyncFailedAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000StpSyncFailedAlarmTrap.setDescription(' ')
ma4000StpLinkChangedAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 22)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000StpLinkChangedAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000StpLinkChangedAlarmTrap.setDescription(' ')
ma4000PortCntrErrorsFoundAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 23)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000PortCntrErrorsFoundAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000PortCntrErrorsFoundAlarmTrap.setDescription(' ')
ma4000CscdMasterChandedOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 24)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000CscdMasterChandedOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000CscdMasterChandedOkTrap.setDescription(' ')
ma4000PortCntrErrorsFreeOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 23)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000PortCntrErrorsFreeOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000PortCntrErrorsFreeOkTrap.setDescription(' ')
ma4000SyncDisallowedOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 25)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000SyncDisallowedOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000SyncDisallowedOkTrap.setDescription(' ')
ma4000SyncDisallowedAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 25)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000SyncDisallowedAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000SyncDisallowedAlarmTrap.setDescription(' ')
ma4000SlotInvalidAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 26)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000SlotInvalidAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000SlotInvalidAlarmTrap.setDescription(' ')
ma4000SlotErrorAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 27)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000SlotErrorAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000SlotErrorAlarmTrap.setDescription(' ')
ma4000SlotDownAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 28)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000SlotDownAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000SlotDownAlarmTrap.setDescription(' ')
ma4000BufferIverflowOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 29)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000BufferIverflowOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000BufferIverflowOkTrap.setDescription(' ')
ma4000ConfigRestoreOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 30)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000ConfigRestoreOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000ConfigRestoreOkTrap.setDescription(' ')
ma4000OmsAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 31)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000OmsAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000OmsAlarmTrap.setDescription(' ')
ma4000OmsOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 31)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000OmsOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000OmsOkTrap.setDescription(' ')
ma4000FanSpeedAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 32)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000FanSpeedAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000FanSpeedAlarmTrap.setDescription(' ')
ma4000FanSpeedOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 32)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000FanSpeedOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000FanSpeedOkTrap.setDescription(' ')
ma4000FanFailAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 33)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000FanFailAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000FanFailAlarmTrap.setDescription(' ')
ma4000FanOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 33)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000FanOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000FanOkTrap.setDescription(' ')
ma4000FanControllerFailAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 34)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000FanControllerFailAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000FanControllerFailAlarmTrap.setDescription(' ')
ma4000FanControllerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 34)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000FanControllerOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000FanControllerOkTrap.setDescription(' ')
ma4000RebootStackAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 35)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000RebootStackAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000RebootStackAlarmTrap.setDescription(' ')
ma4000RebootUnitAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 36)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000RebootUnitAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000RebootUnitAlarmTrap.setDescription(' ')
ma4000RebootUnitOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 36)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000RebootUnitOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000RebootUnitOkTrap.setDescription(' ')
ma4000RebootFwTimerAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 37)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000RebootFwTimerAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000RebootFwTimerAlarmTrap.setDescription(' ')
ma4000FwUpdateAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 38)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000FwUpdateAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000FwUpdateAlarmTrap.setDescription(' ')
ma4000FwUpdateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 38)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000FwUpdateOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000FwUpdateOkTrap.setDescription(' ')
ma4000FwConfirmNeededAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 39)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000FwConfirmNeededAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000FwConfirmNeededAlarmTrap.setDescription(' ')
ma4000CpuLoadHighAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 48)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000CpuLoadHighAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000CpuLoadHighAlarmTrap.setDescription(' ')
ma4000CpuLoadHighOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 48)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000CpuLoadHighOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000CpuLoadHighOkTrap.setDescription(' ')
ma4000ComCopyAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 54)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000ComCopyAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000ComCopyAlarmTrap.setDescription(' ')
ma4000ComCopyOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 54)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000ComCopyOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000ComCopyOkTrap.setDescription(' ')
ma4000FirmwareUpdateStateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 63)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000FirmwareUpdateStateOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000FirmwareUpdateStateOkTrap.setDescription(' ')
ma4000CscdDuplicateUnitIdAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 35, 64)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000CscdDuplicateUnitIdAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000CscdDuplicateUnitIdAlarmTrap.setDescription(' ')
ma4000SystemColdstartOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 65)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000SystemColdstartOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000SystemColdstartOkTrap.setDescription(' Close all active alarms on receiving this trap ')
ma4000FallbackWasInvokedOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 516)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000FallbackWasInvokedOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000FallbackWasInvokedOkTrap.setDescription('Fallback was invoked during firmware update.')
ma4000NSSRStatusOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 517)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000NSSRStatusOkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000NSSRStatusOkTrap.setDescription('NSSR status changed. ')
ma4000FirmwareUpdateStateV2OkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 36, 518)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ma4000FirmwareUpdateStateV2OkTrap.setStatus('current')
if mibBuilder.loadTexts: ma4000FirmwareUpdateStateV2OkTrap.setDescription('Firmware update state message.')
pp4Group = ObjectGroup((1, 3, 6, 1, 4, 1, 35265, 1, 13, 200)).setObjects(("ELTEX-PP4", "pp4DevName"), ("ELTEX-PP4", "pp4DevType"), ("ELTEX-PP4", "pp4DevCfgBuild"), ("ELTEX-PP4", "pp4FreeSpace"), ("ELTEX-PP4", "pp4FreeRam"), ("ELTEX-PP4", "pp4SystemType"), ("ELTEX-PP4", "pp4SystemInfo"), ("ELTEX-PP4", "pp4SystemUnit1MacAddress"), ("ELTEX-PP4", "pp4SystemUnit2MacAddress"), ("ELTEX-PP4", "pp4SystemUnit1FirmwareVersion"), ("ELTEX-PP4", "pp4SystemUnit2FirmwareVersion"), ("ELTEX-PP4", "pp4SystemUnit1LinuxVersion"), ("ELTEX-PP4", "pp4SystemUnit2LinuxVersion"), ("ELTEX-PP4", "pp4SystemUnit1UpTime"), ("ELTEX-PP4", "pp4SystemUnit2UpTime"), ("ELTEX-PP4", "pp4PortsEntryID"), ("ELTEX-PP4", "pp4PortsLink"), ("ELTEX-PP4", "pp4PortsAutoNegotiate"), ("ELTEX-PP4", "pp4PortsAutoNegotiationError"), ("ELTEX-PP4", "pp4PortsSpeed"), ("ELTEX-PP4", "pp4PortsDuplex"), ("ELTEX-PP4", "pp4PortsFlowControlEnabled"), ("ELTEX-PP4", "pp4PortsEnabled"), ("ELTEX-PP4", "pp4MulticastEntryID"), ("ELTEX-PP4", "pp4MulticastVLAN"), ("ELTEX-PP4", "pp4MulticastGroupAddress"), ("ELTEX-PP4", "pp4MulticastMemberPorts"), ("ELTEX-PP4", "pp4MulticastExpires"), ("ELTEX-PP4", "pp4MacAddressEntryID"), ("ELTEX-PP4", "pp4MacAddressVLAN"), ("ELTEX-PP4", "pp4MacAddressAddress"), ("ELTEX-PP4", "pp4MacAddressPort"), ("ELTEX-PP4", "pp4MacAddressType"), ("ELTEX-PP4", "pp4RebootSlot"), ("ELTEX-PP4", "pp4RebootDescription"), ("ELTEX-PP4", "pp4RebootCommand"), ("ELTEX-PP4", "pp4RebootAfterDelay"), ("ELTEX-PP4", "pp4BoardFan1AbsoluteSpeed"), ("ELTEX-PP4", "pp4BoardFan2AbsoluteSpeed"), ("ELTEX-PP4", "pp4BoardFan3AbsoluteSpeed"), ("ELTEX-PP4", "pp4BoardFanRelativeSpeed"), ("ELTEX-PP4", "pp4BoardFan1Breakdown"), ("ELTEX-PP4", "pp4BoardFan2Breakdown"), ("ELTEX-PP4", "pp4BoardFan3Breakdown"), ("ELTEX-PP4", "pp4BoardUnit1TempSfp"), ("ELTEX-PP4", "pp4BoardUnit2TempSfp"), ("ELTEX-PP4", "pp4BoardUnit1TempProc"), ("ELTEX-PP4", "pp4BoardUnit2TempProc"), ("ELTEX-PP4", "pp4BoardUnit1TempSwitch"), ("ELTEX-PP4", "pp4BoardUnit2TempSwitch"), ("ELTEX-PP4", "pp4BoardUnit1LoadAverage1"), ("ELTEX-PP4", "pp4BoardUnit2LoadAverage1"), ("ELTEX-PP4", "pp4BoardUnit1LoadAverage5"), ("ELTEX-PP4", "pp4BoardUnit2LoadAverage5"), ("ELTEX-PP4", "pp4BoardUnit1LoadAverage15"), ("ELTEX-PP4", "pp4BoardUnit2LoadAverage15"), ("ELTEX-PP4", "pp4BoardUnit1TotalRam"), ("ELTEX-PP4", "pp4BoardUnit2TotalRam"), ("ELTEX-PP4", "pp4BoardUnit1FreeRam"), ("ELTEX-PP4", "pp4BoardUnit2FreeRam"), ("ELTEX-PP4", "pp4BoardUnit1TotalFilesystemRoot"), ("ELTEX-PP4", "pp4BoardUnit2TotalFilesystemRoot"), ("ELTEX-PP4", "pp4BoardUnit1TotalFilesystemTools"), ("ELTEX-PP4", "pp4BoardUnit2TotalFilesystemTools"), ("ELTEX-PP4", "pp4BoardUnit1TotalFilesystemConfig"), ("ELTEX-PP4", "pp4BoardUnit2TotalFilesystemConfig"), ("ELTEX-PP4", "pp4BoardUnit1TotalFilesystemLog"), ("ELTEX-PP4", "pp4BoardUnit2TotalFilesystemLog"), ("ELTEX-PP4", "pp4BoardUnit1FreeFilesystemRoot"), ("ELTEX-PP4", "pp4BoardUnit2FreeFilesystemRoot"), ("ELTEX-PP4", "pp4BoardUnit1FreeFilesystemTools"), ("ELTEX-PP4", "pp4BoardUnit2FreeFilesystemTools"), ("ELTEX-PP4", "pp4BoardUnit1FreeFilesystemConfig"), ("ELTEX-PP4", "pp4BoardUnit2FreeFilesystemConfig"), ("ELTEX-PP4", "pp4BoardUnit1FreeFilesystemLog"), ("ELTEX-PP4", "pp4BoardUnit2FreeFilesystemLog"), ("ELTEX-PP4", "pp4AlarmsJournalCleanJournal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pp4Group = pp4Group.setStatus('current')
if mibBuilder.loadTexts: pp4Group.setDescription('none')
mibBuilder.exportSymbols("ELTEX-PP4", pp4ShelfConfigTable=pp4ShelfConfigTable, pp4BoardUnit1FreeFilesystemTools=pp4BoardUnit1FreeFilesystemTools, pp4UnitsFirmwareTable=pp4UnitsFirmwareTable, pp4BoardUnit2TotalFilesystemTools=pp4BoardUnit2TotalFilesystemTools, pp4FirmwareUpdateProtocol=pp4FirmwareUpdateProtocol, pp4MLDProxyRowStatus=pp4MLDProxyRowStatus, pp4FreeSpace=pp4FreeSpace, pp4FreeRam=pp4FreeRam, pp4FirmwareDeleteUnused=pp4FirmwareDeleteUnused, pp4xSfpInfoTable=pp4xSfpInfoTable, pp4ShelfConfigBoardType=pp4ShelfConfigBoardType, ma4000AlarmTraps=ma4000AlarmTraps, Pp4FirmwareUnitStatus=Pp4FirmwareUnitStatus, ma4000DhcpIpFailedAlarmTrap=ma4000DhcpIpFailedAlarmTrap, ma4000SyncDisallowedAlarmTrap=ma4000SyncDisallowedAlarmTrap, pp4BoardUnit2TotalFilesystemLog=pp4BoardUnit2TotalFilesystemLog, pp4RawMacEntry=pp4RawMacEntry, ma4000SlotInvalidAlarmTrap=ma4000SlotInvalidAlarmTrap, pp4BoardUnit1TempSfp=pp4BoardUnit1TempSfp, pp4BoardUnit2TempSfp=pp4BoardUnit2TempSfp, pp4SlotsSerialNumber=pp4SlotsSerialNumber, pp4PortsSpeed=pp4PortsSpeed, pp4xSfpInfoEntry=pp4xSfpInfoEntry, pp4PrivilegesNamesName=pp4PrivilegesNamesName, pp4Feeder1Status=pp4Feeder1Status, pp4ConfigRevisionsSlot=pp4ConfigRevisionsSlot, pp4SystemUnit1LinuxVersion=pp4SystemUnit1LinuxVersion, ma4000SystemColdstartOkTrap=ma4000SystemColdstartOkTrap, pp4SlotsLink=pp4SlotsLink, pp4BoardUnit1LoadAverage15=pp4BoardUnit1LoadAverage15, ma4000RebootFwTimerAlarmTrap=ma4000RebootFwTimerAlarmTrap, pp4SystemUnit1SerialNumber=pp4SystemUnit1SerialNumber, pp4MLDProxyReportEnable=pp4MLDProxyReportEnable, pp4UserRowStatus=pp4UserRowStatus, ma4000OmsAlarmTrap=ma4000OmsAlarmTrap, pp4IGMPSnoopingVLANEntry=pp4IGMPSnoopingVLANEntry, ma4000NSSRStatusOkTrap=ma4000NSSRStatusOkTrap, pp4RebootAfterDelay=pp4RebootAfterDelay, pp4FirmwareUpdatePort=pp4FirmwareUpdatePort, pp4Group=pp4Group, pp4xIfUtilizEntry=pp4xIfUtilizEntry, ma4000FanSpeedOkTrap=ma4000FanSpeedOkTrap, pp4IGMPProxyReportRangesID=pp4IGMPProxyReportRangesID, pp4FirmwareUpdateAction=pp4FirmwareUpdateAction, pp4LACPSystemPriority=pp4LACPSystemPriority, pp4RebootCommand=pp4RebootCommand, pp4MacAddressPort=pp4MacAddressPort, pp4MacAddressTable=pp4MacAddressTable, pp4BoardUnit2LoadAverage5=pp4BoardUnit2LoadAverage5, ma4000ComCopyOkTrap=ma4000ComCopyOkTrap, pp4IGMPSnoopingVLANVID=pp4IGMPSnoopingVLANVID, ma4000ConfigApplyAlarmTrap=ma4000ConfigApplyAlarmTrap, ma4000UnitLostAlarmTrap=ma4000UnitLostAlarmTrap, pp4MacAddressType=pp4MacAddressType, pp4MLDSnoopingEnable=pp4MLDSnoopingEnable, pp4FirmwareUpdateNSSU=pp4FirmwareUpdateNSSU, pp4BoardUnit2FreeFilesystemLog=pp4BoardUnit2FreeFilesystemLog, ma4000Pp4CpuLoadCriticalOkTrap=ma4000Pp4CpuLoadCriticalOkTrap, ma4000SlotErrorAlarmTrap=ma4000SlotErrorAlarmTrap, pp4SystemUnit1Role=pp4SystemUnit1Role, ma4000FanControllerOkTrap=ma4000FanControllerOkTrap, Pp4FeederActive=Pp4FeederActive, pp4BoardFan2AbsoluteSpeed=pp4BoardFan2AbsoluteSpeed, pp4BoardUnit1LoadAverage1=pp4BoardUnit1LoadAverage1, pp4FirmwareUpdateNeedRestart=pp4FirmwareUpdateNeedRestart, pp4BoardFan2Breakdown=pp4BoardFan2Breakdown, pp4BoardUnit2TotalRam=pp4BoardUnit2TotalRam, pp4UserTable=pp4UserTable, ma4000OmsOkTrap=ma4000OmsOkTrap, pp4BoardUnit1TotalRam=pp4BoardUnit1TotalRam, ma4000OkTraps=ma4000OkTraps, pp4UnitsRunningPartition=pp4UnitsRunningPartition, pp4FeederState=pp4FeederState, pp4PortsConfigTable=pp4PortsConfigTable, pp4ConfigRevisions=pp4ConfigRevisions, pp4AccessListSourceIpAddress=pp4AccessListSourceIpAddress, ma4000FwUpdateOkTrap=ma4000FwUpdateOkTrap, PYSNMP_MODULE_ID=pp4, pp4SlotsFirmwareActive=pp4SlotsFirmwareActive, Pp4BoardPosition=Pp4BoardPosition, pp4SynchronizationStateInStack=pp4SynchronizationStateInStack, pp4ONTLicenseMacAddresses=pp4ONTLicenseMacAddresses, pp4Feeder1Voltage=pp4Feeder1Voltage, pp4System=pp4System, pp4RawData=pp4RawData, pp4DefaultFirmwareELC=pp4DefaultFirmwareELC, pp4MulticastVLAN=pp4MulticastVLAN, pp4AccessListEntryID=pp4AccessListEntryID, pp4BoardFan1AbsoluteSpeed=pp4BoardFan1AbsoluteSpeed, pp4Feeder2Status=pp4Feeder2Status, pp4ChannelGroupMembershipEntry=pp4ChannelGroupMembershipEntry, pp4QOSDSCPMappingTable=pp4QOSDSCPMappingTable, pp4Firmware=pp4Firmware, ma4000FwConfirmNeededAlarmTrap=ma4000FwConfirmNeededAlarmTrap, ma4000Pp4CpuLoadCriticalAlarmTrap=ma4000Pp4CpuLoadCriticalAlarmTrap, pp4BoardUnit2FreeFilesystemTools=pp4BoardUnit2FreeFilesystemTools, pp4QOSDSCPMappingEntry=pp4QOSDSCPMappingEntry, pp4QOSDefaultQueue=pp4QOSDefaultQueue, ma4000UnitLostOkTrap=ma4000UnitLostOkTrap, pp4RawMacText=pp4RawMacText, ma4000RebootStackAlarmTrap=ma4000RebootStackAlarmTrap, pp4Feeder1Current=pp4Feeder1Current, pp4ONTLicenseVersion=pp4ONTLicenseVersion, pp4RawMacTable=pp4RawMacTable, pp4AccessListEntry=pp4AccessListEntry, pp4BootVarTimestamp=pp4BootVarTimestamp, pp4SystemUnit2UpTime=pp4SystemUnit2UpTime, Pp4SlotFirmwareVersion=Pp4SlotFirmwareVersion, Pp4Link=Pp4Link, sfpInfoStatus=sfpInfoStatus, ma4000LinksPortFlappingPhyOkTrap=ma4000LinksPortFlappingPhyOkTrap, lastCountersFramesSent=lastCountersFramesSent, pp4IGMPSnoopingVLANEnabled=pp4IGMPSnoopingVLANEnabled, pp4IGMPProxyReportEnable=pp4IGMPProxyReportEnable, pp4MLDProxyReportRangesID=pp4MLDProxyReportRangesID, pp4AlarmsJournal=pp4AlarmsJournal, pp4AlarmsJournalCleanJournal=pp4AlarmsJournalCleanJournal, pp4FirmwareUpdateSwitchVersion=pp4FirmwareUpdateSwitchVersion, pp4MacAddressEntryID=pp4MacAddressEntryID, pp4MulticastGroupsEntry=pp4MulticastGroupsEntry, pp4UserEntry=pp4UserEntry, pp4MLDGroupAddress=pp4MLDGroupAddress, pp4MLDSnoopingVLANEnabled=pp4MLDSnoopingVLANEnabled, pp4BoardUnit2FreeRam=pp4BoardUnit2FreeRam, pp4DevType=pp4DevType, pp4MLDProxyReportRangesTable=pp4MLDProxyReportRangesTable, ma4000FirmwareUpdateStateOkTrap=ma4000FirmwareUpdateStateOkTrap, pp4AccessList=pp4AccessList, pp4PrivilegesLevelsTable=pp4PrivilegesLevelsTable, pp4SystemInfo=pp4SystemInfo, lastCountersKbitsRecv=lastCountersKbitsRecv, pp4ACSActive=pp4ACSActive, pp4SlotsEntry=pp4SlotsEntry, Pp4RebootIndex=Pp4RebootIndex, pp4BoardFan3AbsoluteSpeed=pp4BoardFan3AbsoluteSpeed, pp4SystemUnit2SerialNumber=pp4SystemUnit2SerialNumber, pp4ONTLicense=pp4ONTLicense, pp4IGMPSnoopingVLANTable=pp4IGMPSnoopingVLANTable, pp4BoardUnit2TotalFilesystemConfig=pp4BoardUnit2TotalFilesystemConfig, pp4SlotsBoardType=pp4SlotsBoardType, ma4000FirmwareUpdateStateV2OkTrap=ma4000FirmwareUpdateStateV2OkTrap, pp4SystemUnit2Role=pp4SystemUnit2Role, pp4SystemUnit2FirmwareVersion=pp4SystemUnit2FirmwareVersion, pp4PortsAutoNegotiate=pp4PortsAutoNegotiate, lastCountersKbitsSent=lastCountersKbitsSent, ma4000ComCopyAlarmTrap=ma4000ComCopyAlarmTrap, pp4PrivilegesLevelsEntry=pp4PrivilegesLevelsEntry, pp4PortsConfigEnabled=pp4PortsConfigEnabled, pp4PortsConfigEntryID=pp4PortsConfigEntryID, pp4PortsConfigEntry=pp4PortsConfigEntry, pp4RebootDescription=pp4RebootDescription, pp4QOS8021pMappingTable=pp4QOS8021pMappingTable, ma4000LinksPortFlappingPhyAlarmTrap=ma4000LinksPortFlappingPhyAlarmTrap, ma4000SyncDisallowedOkTrap=ma4000SyncDisallowedOkTrap, pp4PrivilegesNamesEntry=pp4PrivilegesNamesEntry, pp4MLDProxyReportRangesEntry=pp4MLDProxyReportRangesEntry, ma4000SlotDownAlarmTrap=ma4000SlotDownAlarmTrap, ma4000FwUpdateAlarmTrap=ma4000FwUpdateAlarmTrap, pp4PortsEnabled=pp4PortsEnabled, pp4MulticastGroupsTable=pp4MulticastGroupsTable, pp4BoardFan3Breakdown=pp4BoardFan3Breakdown, pp4PortsAutoNegotiationError=pp4PortsAutoNegotiationError, ma4000DhcpAckAlarmTrap=ma4000DhcpAckAlarmTrap, pp4UserNewPassword=pp4UserNewPassword, pp4BoardUnit2TempProc=pp4BoardUnit2TempProc, pp4ONTLicenseONTCountLicensed=pp4ONTLicenseONTCountLicensed, pp4MulticastMemberPorts=pp4MulticastMemberPorts, pp4FirmwareUpdateConfigName=pp4FirmwareUpdateConfigName, pp4ConfigRevisionsProfilesPLC=pp4ConfigRevisionsProfilesPLC, pp4MLDProxyReportRangesEnd=pp4MLDProxyReportRangesEnd, pp4ChannelGroupMembershipTable=pp4ChannelGroupMembershipTable, pp4QOSDSCPMappingQueue=pp4QOSDSCPMappingQueue, pp4FirmwareIndex=pp4FirmwareIndex, portName=portName, pp4MLDExpires=pp4MLDExpires, pp4xIfUtilizTable=pp4xIfUtilizTable, pp4Feeder1Active=pp4Feeder1Active, pp4StackMasterChange=pp4StackMasterChange, pp4QOS8021pMappingEntry=pp4QOS8021pMappingEntry, pp4PortsConfigRowStatus=pp4PortsConfigRowStatus, pp4ChannelGroupMembershipGroupID=pp4ChannelGroupMembershipGroupID, pp4Feeder2Voltage=pp4Feeder2Voltage, pp4SlotsSlot=pp4SlotsSlot, pp4FirmwareTable=pp4FirmwareTable, pp4MLDVLAN=pp4MLDVLAN, ma4000FallbackWasInvokedOkTrap=ma4000FallbackWasInvokedOkTrap, pp4PortsEntryID=pp4PortsEntryID, pp4IGMPProxyReportRangesEnd=pp4IGMPProxyReportRangesEnd, pp4AccessListChangeIndex=pp4AccessListChangeIndex, pp4ChannelGroupLACPGroupID=pp4ChannelGroupLACPGroupID, ma4000LinkUpOkTrap=ma4000LinkUpOkTrap, pp4BootVarTable=pp4BootVarTable, pp4BoardUnit2LoadAverage15=pp4BoardUnit2LoadAverage15, ma4000DhcpAgentUpAlarmTrap=ma4000DhcpAgentUpAlarmTrap, pp4UnitsFirmwareEntry=pp4UnitsFirmwareEntry, pp4ONTLicenseSerialNumbers=pp4ONTLicenseSerialNumbers, pp4Feeder2Active=pp4Feeder2Active, pp4SystemUnit1UpTime=pp4SystemUnit1UpTime, sfpInfoRXPower=sfpInfoRXPower, pp4MLDSnoopingVLANQuerierEnabled=pp4MLDSnoopingVLANQuerierEnabled, averageKbitsSent=averageKbitsSent, pp4ONTLicenseValid=pp4ONTLicenseValid, PP4SysType=PP4SysType, ma4000BufferIverflowOkTrap=ma4000BufferIverflowOkTrap, pp4FirmwareVersion=pp4FirmwareVersion, lastCountersFramesRecv=lastCountersFramesRecv, Pp4FeederStatus=Pp4FeederStatus, pp4SystemUnit1FirmwareVersion=pp4SystemUnit1FirmwareVersion, Pp4MacType=Pp4MacType, pp4BoardUnit2LoadAverage1=pp4BoardUnit2LoadAverage1, pp4MacAddressVLAN=pp4MacAddressVLAN, pp4RebootSlot=pp4RebootSlot, ma4000StpLinkChangedAlarmTrap=ma4000StpLinkChangedAlarmTrap, pp4RawMacChunkID=pp4RawMacChunkID, pp4IGMPProxyReportRangesFromVLAN=pp4IGMPProxyReportRangesFromVLAN, ma4000PortCntrErrorsFreeOkTrap=ma4000PortCntrErrorsFreeOkTrap, ma4000ConfigAppliedOkTrap=ma4000ConfigAppliedOkTrap, pp4ChannelGroupLACPAggregators=pp4ChannelGroupLACPAggregators, ma4000FanSpeedAlarmTrap=ma4000FanSpeedAlarmTrap, pp4Feeder2Polarity=pp4Feeder2Polarity, pp4PortsConfigSpeed=pp4PortsConfigSpeed, ma4000FanFailAlarmTrap=ma4000FanFailAlarmTrap, pp4IGMPProxyRowStatus=pp4IGMPProxyRowStatus, ma4000ConfigSavedOkTrap=ma4000ConfigSavedOkTrap, pp4SystemUnit1Position=pp4SystemUnit1Position, pp4BoardUnit1TempProc=pp4BoardUnit1TempProc, pp4Services=pp4Services, pp4MacAddressEntry=pp4MacAddressEntry, pp4ConfigRevisionsProfilesPLCOLT=pp4ConfigRevisionsProfilesPLCOLT, ma4000SlotOkTrap=ma4000SlotOkTrap, pp4AccessListRowStatus=pp4AccessListRowStatus, pp4UserOldPassword=pp4UserOldPassword, pp4PrivilegesLevelsAllowed=pp4PrivilegesLevelsAllowed, pp4BoardUnit2FreeFilesystemConfig=pp4BoardUnit2FreeFilesystemConfig, pp4SlotsState=pp4SlotsState, pp4BootVarVersionString=pp4BootVarVersionString, pp4FirmwareUpdateConfirm=pp4FirmwareUpdateConfirm, ma4000CpuLoadHighAlarmTrap=ma4000CpuLoadHighAlarmTrap, pp4FirmwareEntry=pp4FirmwareEntry, pp4PortsConfigResetCounters=pp4PortsConfigResetCounters, ma4000CpuLoadHighOkTrap=ma4000CpuLoadHighOkTrap, pp4xIfUtilizAverageInterval=pp4xIfUtilizAverageInterval, pp4MLDProxyReportRangesStart=pp4MLDProxyReportRangesStart, pp4ChannelGroupLACPRunning=pp4ChannelGroupLACPRunning, Pp4FanBreakdownState=Pp4FanBreakdownState, pp4BoardUnit2TempSwitch=pp4BoardUnit2TempSwitch, pp4MLDProxyReportRangesToVLAN=pp4MLDProxyReportRangesToVLAN, pp4PortsConfigAutoNegotiate=pp4PortsConfigAutoNegotiate, pp4BoardUnit1FreeRam=pp4BoardUnit1FreeRam, pp4IGMPConfig=pp4IGMPConfig, pp4FirmwareBoardType=pp4FirmwareBoardType, averageFramesRecv=averageFramesRecv, sfpInfoCurrent=sfpInfoCurrent, pp4ChannelGroupLACPEntry=pp4ChannelGroupLACPEntry)
mibBuilder.exportSymbols("ELTEX-PP4", pp4MLDGroupsTable=pp4MLDGroupsTable, pp4FirmwareUpdateConfigIpAddress=pp4FirmwareUpdateConfigIpAddress, pp4QOS8021pMappingFields=pp4QOS8021pMappingFields, pp4IGMPProxyReportRangesStart=pp4IGMPProxyReportRangesStart, pp4AccessListService=pp4AccessListService, pp4QOSConfig=pp4QOSConfig, pp4BoardUnit1FreeFilesystemRoot=pp4BoardUnit1FreeFilesystemRoot, sfpInfoTXPower=sfpInfoTXPower, pp4BootVarIndex=pp4BootVarIndex, pp4PortsEntry=pp4PortsEntry, pp4IGMPProxyReportRangesEntry=pp4IGMPProxyReportRangesEntry, pp4BoardUnit1FreeFilesystemLog=pp4BoardUnit1FreeFilesystemLog, pp4MacAddressAddress=pp4MacAddressAddress, pp4BoardUnit1FreeFilesystemConfig=pp4BoardUnit1FreeFilesystemConfig, pp4IGMPProxyReportRangesToVLAN=pp4IGMPProxyReportRangesToVLAN, interfaceIndex=interfaceIndex, pp4DefaultFirmwarePLC=pp4DefaultFirmwarePLC, pp4PrivilegesLevelsLevel=pp4PrivilegesLevelsLevel, averageFramesSent=averageFramesSent, ma4000LoginAlarmTrap=ma4000LoginAlarmTrap, ma4000FanOkTrap=ma4000FanOkTrap, ma4000CscdDuplicateUnitIdAlarmTrap=ma4000CscdDuplicateUnitIdAlarmTrap, pp4BoardUnit2TotalFilesystemRoot=pp4BoardUnit2TotalFilesystemRoot, ma4000PortCntrErrorsFoundAlarmTrap=ma4000PortCntrErrorsFoundAlarmTrap, pp4UnitsFallbackPartition=pp4UnitsFallbackPartition, pp4PrivilegesNamesIndex=pp4PrivilegesNamesIndex, pp4ONTLicenseInstalled=pp4ONTLicenseInstalled, pp4ShelfConfigEntry=pp4ShelfConfigEntry, Pp4MacPort=Pp4MacPort, pp4RebootEntry=pp4RebootEntry, pp4BoardFanRelativeSpeed=pp4BoardFanRelativeSpeed, pp4IGMPProxyReportRangesTable=pp4IGMPProxyReportRangesTable, pp4FirmwareUpdateConfigProtocol=pp4FirmwareUpdateConfigProtocol, pp4FirmwareUpdateFileName=pp4FirmwareUpdateFileName, averageKbitsRecv=averageKbitsRecv, pp4BootVarEntry=pp4BootVarEntry, pp4AccessListSourceMacAddress=pp4AccessListSourceMacAddress, pp4Feeder1Polarity=pp4Feeder1Polarity, pp4UnitsActivePartition=pp4UnitsActivePartition, pp4IGMPSnoopingEnable=pp4IGMPSnoopingEnable, pp4SystemUnit2MacAddress=pp4SystemUnit2MacAddress, ma4000StpSyncFailedAlarmTrap=ma4000StpSyncFailedAlarmTrap, pp4DefaultFirmware=pp4DefaultFirmware, pp4AccessListIfIndex=pp4AccessListIfIndex, pp4MulticastExpires=pp4MulticastExpires, Pp4BoardRole=Pp4BoardRole, ma4000IgmpSyncFailedAlarmTrap=ma4000IgmpSyncFailedAlarmTrap, sfpInfoTemperature=sfpInfoTemperature, pp4BoardUnit1TotalFilesystemConfig=pp4BoardUnit1TotalFilesystemConfig, pp4ONTLicenseVendor=pp4ONTLicenseVendor, pp4QOSType=pp4QOSType, pp4UnitsStatus=pp4UnitsStatus, ma4000DhcpOfferAlarmTrap=ma4000DhcpOfferAlarmTrap, ma4000DhcpServerAlarmTrap=ma4000DhcpServerAlarmTrap, ma4000OutOfRamAlarmTrap=ma4000OutOfRamAlarmTrap, pp4IGMPSnoopingVLANQuerierEnabled=pp4IGMPSnoopingVLANQuerierEnabled, pp4ConfigRevisionsProfilesELC=pp4ConfigRevisionsProfilesELC, Pp4FeederPolarity=Pp4FeederPolarity, pp4DevName=pp4DevName, pp4=pp4, pp4BoardFan1Breakdown=pp4BoardFan1Breakdown, pp4BoardUnit1TotalFilesystemTools=pp4BoardUnit1TotalFilesystemTools, pp4SlotsTable=pp4SlotsTable, pp4AccessListSourceMask=pp4AccessListSourceMask, pp4BoardUnit2FreeFilesystemRoot=pp4BoardUnit2FreeFilesystemRoot, ma4000RebootUnitAlarmTrap=ma4000RebootUnitAlarmTrap, ma4000ConfigRestoreOkTrap=ma4000ConfigRestoreOkTrap, pp4BootVarValid=pp4BootVarValid, ma4000DhcpAgentDownAlarmTrap=ma4000DhcpAgentDownAlarmTrap, pp4ChannelGroupLACPTable=pp4ChannelGroupLACPTable, sfpInfoVoltage=sfpInfoVoltage, pp4PortsConfigFlowControlEnabled=pp4PortsConfigFlowControlEnabled, ma4000LinkDownAlarmTrap=ma4000LinkDownAlarmTrap, ma4000DhcpIpGotAlarmTrap=ma4000DhcpIpGotAlarmTrap, pp4AccessListPolicyType=pp4AccessListPolicyType, pp4BoardUnit1TotalFilesystemLog=pp4BoardUnit1TotalFilesystemLog, pp4MLDEntryID=pp4MLDEntryID, pp4SystemUnit2Position=pp4SystemUnit2Position, pp4PortsLink=pp4PortsLink, pp4MLDProxyReportRangesFromVLAN=pp4MLDProxyReportRangesFromVLAN, pp4MLDGroupsEntry=pp4MLDGroupsEntry, pp4ONTLicenseCarrier=pp4ONTLicenseCarrier, pp4PortsFlowControlEnabled=pp4PortsFlowControlEnabled, pp4ONTLicenseONTCountOnline=pp4ONTLicenseONTCountOnline, pp4AccessListDefaultPolicyType=pp4AccessListDefaultPolicyType, pp4FirmwareUpdateConfigPort=pp4FirmwareUpdateConfigPort, pp4Privileges=pp4Privileges, pp4RebootTable=pp4RebootTable, pp4BoardState=pp4BoardState, pp4Feeder2Current=pp4Feeder2Current, ma4000CscdMasterChandedOkTrap=ma4000CscdMasterChandedOkTrap, pp4ConfigRevisionsPp4x=pp4ConfigRevisionsPp4x, pp4SystemType=pp4SystemType, pp4MulticastGroupAddress=pp4MulticastGroupAddress, pp4QOS8021pMappingQueue=pp4QOS8021pMappingQueue, pp4UnitsConfirm=pp4UnitsConfirm, pp4BootVarUnit=pp4BootVarUnit, pp4SlotsFirmwareRevision=pp4SlotsFirmwareRevision, pp4SystemUnit1MacAddress=pp4SystemUnit1MacAddress, ma4000FanControllerFailAlarmTrap=ma4000FanControllerFailAlarmTrap, pp4AccessListTable=pp4AccessListTable, pp4BoardUnit1LoadAverage5=pp4BoardUnit1LoadAverage5, pp4ShelfConfigSlot=pp4ShelfConfigSlot, pp4DevCfgBuild=pp4DevCfgBuild, pp4StationVoltage=pp4StationVoltage, pp4FirmwareDelete=pp4FirmwareDelete, ma4000ConfigSaveAlarmTrap=ma4000ConfigSaveAlarmTrap, pp4PrivilegesNamesTable=pp4PrivilegesNamesTable, Pp4SlotBoardType=Pp4SlotBoardType, pp4AccessListSourceAddressType=pp4AccessListSourceAddressType, pp4MLDMemberPorts=pp4MLDMemberPorts, pp4MulticastEntryID=pp4MulticastEntryID, pp4ConfigRevisionsTable=pp4ConfigRevisionsTable, pp4PortsTable=pp4PortsTable, ma4000DhcpServerUpAlarmTrap=ma4000DhcpServerUpAlarmTrap, pp4UserName=pp4UserName, pp4ShelfConfigFirmwareVersion=pp4ShelfConfigFirmwareVersion, ma4000RebootUnitOkTrap=ma4000RebootUnitOkTrap, pp4ConfigRevisionsRevision=pp4ConfigRevisionsRevision, pp4QOSDSCPMappingFields=pp4QOSDSCPMappingFields, Pp4PortSpeed=Pp4PortSpeed, pp4FirmwareUpdateIpAddress=pp4FirmwareUpdateIpAddress, ma4000MacSyncVlanDuplicateAlarmTrap=ma4000MacSyncVlanDuplicateAlarmTrap, pp4ConfigRevisionsEntry=pp4ConfigRevisionsEntry, Pp4PortDuplex=Pp4PortDuplex, pp4BoardUnit1TotalFilesystemRoot=pp4BoardUnit1TotalFilesystemRoot, pp4PortsDuplex=pp4PortsDuplex, pp4BoardUnit1TempSwitch=pp4BoardUnit1TempSwitch, pp4SystemUnit2LinuxVersion=pp4SystemUnit2LinuxVersion, pp4FirmwareUpdate=pp4FirmwareUpdate, pp4UserPermissions=pp4UserPermissions, pp4PortsConfigDuplex=pp4PortsConfigDuplex)
