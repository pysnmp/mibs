#
# PySNMP MIB module F3-JDSU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-JDSU-MIB
# Produced by pysmi-1.1.12 at Thu Sep 26 02:10:13 2024
# On host fv-az1144-917 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
VlanPriority, OperationalState, SecondaryState, AdminState, VlanId = mibBuilder.importSymbols("CM-COMMON-MIB", "VlanPriority", "OperationalState", "SecondaryState", "AdminState", "VlanId")
neIndex, slotIndex, shelfIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "neIndex", "slotIndex", "shelfIndex")
cmEthernetTrafficPortEntry, cmEthernetTrafficPortIndex = mibBuilder.importSymbols("CM-FACILITY-MIB", "cmEthernetTrafficPortEntry", "cmEthernetTrafficPortIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, TimeTicks, Integer32, Gauge32, MibIdentifier, IpAddress, NotificationType, ModuleIdentity, Counter64, Bits, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "Integer32", "Gauge32", "MibIdentifier", "IpAddress", "NotificationType", "ModuleIdentity", "Counter64", "Bits", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TruthValue, MacAddress, VariablePointer, DateAndTime, TextualConvention, StorageType, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "VariablePointer", "DateAndTime", "TextualConvention", "StorageType", "DisplayString", "RowStatus")
f3JdsuMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31))
f3JdsuMIB.setRevisions(('2014-01-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3JdsuMIB.setRevisionsDescriptions(('Notes from release 201401020000Z',))
if mibBuilder.loadTexts: f3JdsuMIB.setLastUpdated('201401020000Z')
if mibBuilder.loadTexts: f3JdsuMIB.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: f3JdsuMIB.setContactInfo('        Jack Chen\n                     ADVA Optical Networking, Inc.\n                Tel: +86755 86217400-8205\n             E-mail: jchen@advaoptical.com\n             Postal: \n             ')
if mibBuilder.loadTexts: f3JdsuMIB.setDescription('This module defines the JDSU MIB definitions used by \n             the F3 (FSP150CM/CC) product lines.\n             Copyright (C) ADVA Optical Networking.')
f3JdsuObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1))
f3JdsuNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 2))
f3JdsuConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 3))
class GeneratorStatus(TextualConvention, Integer32):
    description = 'The exact generator status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("none", 1), ("initial", 2), ("helloIngress", 3), ("helloCompleted", 4), ("helloFailed", 5), ("lookupIngress", 6), ("lookupCompleted", 7), ("lookupFailed", 8), ("lookdownIngress", 9), ("lookdownCompleted", 10), ("lookdownFailed", 11))

class ItemOperation(TextualConvention, Integer32):
    description = 'Indicate the save action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("notApplicable", 1), ("save", 2))

class UpdateReachStatus(TextualConvention, Integer32):
    description = 'Action on update reachable status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("notApplicable", 1), ("update", 2))

class JdsuGeneratorFrameType(TextualConvention, Integer32):
    description = 'The frame type of JDSU generator.\n       frameType8023 means 802.3'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("frameType8023", 2))

class JdsuGeneratorPayloadType(TextualConvention, Integer32):
    description = 'The frame type of JDSU generator.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("fixed", 2), ("random", 3))

class GeneratorAction(TextualConvention, Integer32):
    description = 'The lookup or lookdown action of JDSU generator.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("notApplicable", 1), ("loopUp", 2), ("loopDown", 3))

class DiscoveryAction(TextualConvention, Integer32):
    description = 'The lookup or lookdown action of JDSU generator.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("notApplicable", 1), ("discover", 2))

f3JdsuGeneratorPort = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 1), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorPort.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorPort.setDescription('This object describes the port which will raise a JDSU discovery.')
f3JdsuGeneratorOuterVlanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorOuterVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorOuterVlanEnabled.setDescription("This object describes whether the filter's Outer Vlan enabled.")
f3JdsuGeneratorOuterVlanId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 3), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorOuterVlanId.setDescription("This object describes the filter's Outer VlanId.")
f3JdsuGeneratorOuterVlanPri = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorOuterVlanPri.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorOuterVlanPri.setDescription("This object describes the filter's Outer Vlan Priority.")
f3JdsuGeneratorOuterVlanEtherType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorOuterVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorOuterVlanEtherType.setDescription("This object describes the filter's Outer Vlan Ether Type.")
f3JdsuGeneratorInnerVlan1Enabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan1Enabled.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan1Enabled.setDescription("This object describes whether the filter's Inner Vlan1 enabled.")
f3JdsuGeneratorInnerVlan1Id = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 7), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan1Id.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan1Id.setDescription("This object describes the filter's Inner Vlan1 ID.")
f3JdsuGeneratorInnerVlan1Pri = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 8), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan1Pri.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan1Pri.setDescription("This object describes the filter's Inner Vlan1 Priority.")
f3JdsuGeneratorInnerVlan1EtherType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan1EtherType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan1EtherType.setDescription("This object describes the filter's Inner Vlan1 Ether Type.")
f3JdsuGeneratorInnerVlan2Enabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan2Enabled.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan2Enabled.setDescription("This object describes whether the filter's Inner Vlan2 enabled.")
f3JdsuGeneratorInnerVlan2Id = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 11), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan2Id.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan2Id.setDescription("This object describes the filter's Inner Vlan2 ID.")
f3JdsuGeneratorInnerVlan2Pri = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 12), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan2Pri.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan2Pri.setDescription("This object describes the filter's Inner Vlan2 Priority.")
f3JdsuGeneratorInnerVlan2EtherType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan2EtherType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorInnerVlan2EtherType.setDescription("This object describes the filter's Inner Vlan2 Ether Type.")
f3JdsuGeneratorFrameType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 14), JdsuGeneratorFrameType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorFrameType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorFrameType.setDescription("This object describe the filter's frame type.\n            Its default value is 802.3.")
f3JdsuGeneratorPayloadType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 15), JdsuGeneratorPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorPayloadType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorPayloadType.setDescription('Indicates the type of payload the remaining test frame shall contain, \n            either fixed (incremental bytes or repeated bytes) or random \n            (according to IEEE short continuous random test pattern). \n            Default is random. This payload starts after the Ethernet frame \n            header (including all VLAN tags).')
f3JdsuGeneratorFrameLength = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorFrameLength.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorFrameLength.setDescription('Indicates the length of the frame which shall be injected, \n            The size range for all ports is from 64 to 9600.')
f3JdsuGeneratorDiscoveryAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 17), DiscoveryAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoveryAction.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoveryAction.setDescription('Indicates the discovery action on the JDSU generator.')
f3JdsuGeneratorDiscoverTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18), )
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverTable.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverTable.setDescription('A list of entries corresponding to JDSU Generator Discover Information.')
f3JdsuGeneratorDiscoverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "F3-JDSU-MIB", "f3JdsuGeneratorDiscoverDestMacAddr"))
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverEntry.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverEntry.setDescription('A conceptual row in the f3JdsuGeneratorDiscoverTable.')
f3JdsuGeneratorDiscoverDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 1), MacAddress())
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverDestMacAddr.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverDestMacAddr.setDescription('This object describes the destination MAC address for the test frames.')
f3JdsuGeneratorDiscoverOuterVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverOuterVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverOuterVlanEnabled.setDescription("This object describes whether the filter's Outer Vlan enabled.")
f3JdsuGeneratorDiscoverOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 3), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverOuterVlanId.setDescription("This object describes the filter's Outer Vlan ID.")
f3JdsuGeneratorDiscoverOuterVlanPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 4), VlanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverOuterVlanPri.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverOuterVlanPri.setDescription("This object describes the filter's Outer Vlan Priority.")
f3JdsuGeneratorDiscoverOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverOuterVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverOuterVlanEtherType.setDescription("This object describe the filter's Outer Vlan Ether Type.")
f3JdsuGeneratorDiscoverInnerVlan1Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan1Enabled.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan1Enabled.setDescription("This object describes whether the filter's Inner Vlan1 enabled.")
f3JdsuGeneratorDiscoverInnerVlan1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 7), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan1Id.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan1Id.setDescription("This object describe the filter's Inner Vlan1 ID.")
f3JdsuGeneratorDiscoverInnerVlan1Pri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 8), VlanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan1Pri.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan1Pri.setDescription("This object describes the filter's Inner Vlan1 Priority.")
f3JdsuGeneratorDiscoverInnerVlan1EtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan1EtherType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan1EtherType.setDescription("This object describes the filter's Inner Vlan1 Ether Type.")
f3JdsuGeneratorDiscoverInnerVlan2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan2Enabled.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan2Enabled.setDescription("This object describes whether the filter's Inner Vlan2 enabled.")
f3JdsuGeneratorDiscoverInnerVlan2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 11), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan2Id.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan2Id.setDescription("This object describes the filter's Inner Vlan2 ID.")
f3JdsuGeneratorDiscoverInnerVlan2Pri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 12), VlanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan2Pri.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan2Pri.setDescription("This object describes the filter's Inner Vlan2 Priority.")
f3JdsuGeneratorDiscoverInnerVlan2EtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan2EtherType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverInnerVlan2EtherType.setDescription("This object describes the filter's Inner Vlan2 Ether Type.")
f3JdsuGeneratorDiscoverFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 14), JdsuGeneratorFrameType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverFrameType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverFrameType.setDescription("This object describes the filter's frame type.\n            Its default value is 802.3.")
f3JdsuGeneratorDiscoverPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 15), JdsuGeneratorPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverPayloadType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverPayloadType.setDescription('Indicates the type of payload the remaining test frame shall contain, \n            either fixed (incremental bytes or repeated bytes) or random \n            (according to IEEE short continuous random test pattern). \n            Default is random. This payload starts after the Ethernet frame \n            header (including all VLAN tags).')
f3JdsuGeneratorDiscoverFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverFrameLength.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverFrameLength.setDescription('Indicates the length of the frame which shall be injected, \n            The size range for all ports is from 64 to 9600.')
f3JdsuGeneratorDiscoverUnitTextId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverUnitTextId.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverUnitTextId.setDescription('Indicates the string from remote device. Normally it is system name of remote device.')
f3JdsuGeneratorDiscoverIfReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverIfReachable.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverIfReachable.setDescription('Indicate whether the mac can be discovered or not exactly.')
f3JdsuGeneratorDiscoverGeneratorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 19), GeneratorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverGeneratorStatus.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverGeneratorStatus.setDescription('Indicates the generator status.')
f3JdsuGeneratorDiscoverItemOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 20), ItemOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverItemOperation.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverItemOperation.setDescription('action save the discoverd items.')
f3JdsuGeneratorDiscoverItemIfSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverItemIfSaved.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverItemIfSaved.setDescription('Indicates whether the discoverd item saved status.')
f3JdsuGeneratorDiscoverGeneratorAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 18, 1, 22), GeneratorAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverGeneratorAction.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorDiscoverGeneratorAction.setDescription('Indicates looup or lookdown action.')
f3JdsuGeneratorConfigureTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19), )
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureTable.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureTable.setDescription('A list of entries corresponding to JDSU Generator Configure Information.')
f3JdsuGeneratorConfigureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "F3-JDSU-MIB", "f3JdsuGeneratorConfigureDestMacAddr"))
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureEntry.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureEntry.setDescription('A conceptual row in the f3JdsuGeneratorConfigureTable.')
f3JdsuGeneratorConfigureDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 1), MacAddress())
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureDestMacAddr.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureDestMacAddr.setDescription('This object describes the destination MAC address for the test frames.')
f3JdsuGeneratorConfigureOuterVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureOuterVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureOuterVlanEnabled.setDescription("This object describes whether the filter's Outer Vlan enabled.")
f3JdsuGeneratorConfigureOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 3), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureOuterVlanId.setDescription("This object describes the filter's Outer Vlan ID.")
f3JdsuGeneratorConfigureOuterVlanPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 4), VlanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureOuterVlanPri.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureOuterVlanPri.setDescription("This object describes the filter's Outer Vlan Priority.")
f3JdsuGeneratorConfigureOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureOuterVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureOuterVlanEtherType.setDescription("This object describes the filter's Outer Vlan Ether Type.")
f3JdsuGeneratorConfigureInnerVlan1Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan1Enabled.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan1Enabled.setDescription("This object describes whether the filter's Inner Vlan1 enabled.")
f3JdsuGeneratorConfigureInnerVlan1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 7), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan1Id.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan1Id.setDescription("This object describes the filter's Inner Vlan1 ID.")
f3JdsuGeneratorConfigureInnerVlan1Pri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 8), VlanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan1Pri.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan1Pri.setDescription("This object describes the filter's Inner Vlan1 Priority.")
f3JdsuGeneratorConfigureInnerVlan1EtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan1EtherType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan1EtherType.setDescription("This object describes the filter's Inner Vlan1 Ether Type.")
f3JdsuGeneratorConfigureInnerVlan2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan2Enabled.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan2Enabled.setDescription("This object describes whether the filter's Inner Vlan2 enabled.")
f3JdsuGeneratorConfigureInnerVlan2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 11), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan2Id.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan2Id.setDescription("This object describes the filter's Inner Vlan2 ID.")
f3JdsuGeneratorConfigureInnerVlan2Pri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 12), VlanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan2Pri.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan2Pri.setDescription("This object describes the filter's Inner Vlan2 Priority.")
f3JdsuGeneratorConfigureInnerVlan2EtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan2EtherType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureInnerVlan2EtherType.setDescription("This object describes the filter's Inner Vlan2 Ether Type.")
f3JdsuGeneratorConfigureFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 14), JdsuGeneratorFrameType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureFrameType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureFrameType.setDescription("This object describes the filter's frame type.\n            Its default value is 802.3.")
f3JdsuGeneratorConfigurePayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 15), JdsuGeneratorPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigurePayloadType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigurePayloadType.setDescription('Indicates the type of payload the remaining test frame shall contain, \n            either fixed (incremental bytes or repeated bytes) or random \n            (according to IEEE short continuous random test pattern). \n            Default is random. This payload starts after the Ethernet frame \n            header (including all VLAN tags).')
f3JdsuGeneratorConfigureFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureFrameLength.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureFrameLength.setDescription('Indicates the length of the frame which shall be injected, \n            The size range for all ports is from 64 to 9600.')
f3JdsuGeneratorConfigureUnitTextId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureUnitTextId.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureUnitTextId.setDescription('Indicates the string from remote device. Normally it is system name of remote device.')
f3JdsuGeneratorConfigureIfReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureIfReachable.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureIfReachable.setDescription('Indicates whether the mac can be Configureed or not exactly.')
f3JdsuGeneratorConfigureReachableUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 19), UpdateReachStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureReachableUpdate.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureReachableUpdate.setDescription('Action on update the reachable status of the related item.')
f3JdsuGeneratorConfigureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 20), GeneratorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureStatus.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureStatus.setDescription('Indicates the generator status exactly.')
f3JdsuGeneratorConfigureGeneratorAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 21), GeneratorAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureGeneratorAction.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureGeneratorAction.setDescription('Indicates JDSU Generator lookup or lookdown action.')
f3JdsuGeneratorConfigureStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 22), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureStorageType.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureStorageType.setDescription('The type of storage configured for this entry.')
f3JdsuGeneratorConfigureRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 19, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGeneratorConfigureRowStatus.setDescription('The status of this row.\n            Note: one row can be deleted by set this item as destoryed.')
f3EthernetTrafficPortJdsuExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 20), )
if mibBuilder.loadTexts: f3EthernetTrafficPortJdsuExtTable.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortJdsuExtTable.setDescription('A list of entries corresponding to Ethernet Traffic Port \n            Facilities for JDSU configuration purposes.')
f3EthernetTrafficPortJdsuExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 20, 1), )
cmEthernetTrafficPortEntry.registerAugmentions(("F3-JDSU-MIB", "f3EthernetTrafficPortJdsuExtEntry"))
f3EthernetTrafficPortJdsuExtEntry.setIndexNames(*cmEthernetTrafficPortEntry.getIndexNames())
if mibBuilder.loadTexts: f3EthernetTrafficPortJdsuExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortJdsuExtEntry.setDescription('A conceptual row in the cmEthernetTrafficPortJdsuExtTable.')
f3EthernetTrafficPortJdsuLoopbackEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 20, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortJdsuLoopbackEnabled.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortJdsuLoopbackEnabled.setDescription("Enabled: reaction/response to JDSU in-band loopback requests and hallo requests.\n         Disabled: Not reaction/response to JDSU in-band loopback requests and hallo requests. \n         FPGA shall not filter the JDSU control frames to processor.\n         From enabled to disabled, if there is already a JDSU loopback on the port, \n         release current loopback.\n         JDSU loopback doesn't need port in maintenance state.\n         When JDSU Generation Enabled, this attribute can't be enabled.")
f3EthernetTrafficPortJdsuGenerationEanbled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 20, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortJdsuGenerationEanbled.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortJdsuGenerationEanbled.setDescription("This object describes whether the user would to raise a JDSU discovery action.\n         When JDSU Loopback Enabled, this attribute cann't be enabled.")
f3EthernetTrafficPortJdsuLoopbackVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 1, 20, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetTrafficPortJdsuLoopbackVlanList.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortJdsuLoopbackVlanList.setDescription("In EG-X, up to 12 loopback can be supported and also up to 2 layer VLAN can be supported. \n        The format is like 'OuterVid1-OuterPri1;InnerVid1-InnerPri1, OuterVid2-OuterPri2, \n        OuterVid3-OuterPri3;InnerVid3-InnerPri3'('1-*;2-*, 3-*, 4-*;5-*').")
f3JdsuCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 3, 1))
f3JdsuGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 3, 2))
f3JdsuCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 3, 1, 1)).setObjects(("F3-JDSU-MIB", "f3JdsuGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3JdsuCompliance = f3JdsuCompliance.setStatus('current')
if mibBuilder.loadTexts: f3JdsuCompliance.setDescription('Describes the requirements for conformance to the f3 jdsu group.')
f3JdsuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 31, 3, 2, 1)).setObjects(("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverDestMacAddr"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverOuterVlanEnabled"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverOuterVlanId"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverOuterVlanPri"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverOuterVlanEtherType"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverInnerVlan1Enabled"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverInnerVlan1Id"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverInnerVlan1Pri"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverInnerVlan1EtherType"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverInnerVlan2Enabled"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverInnerVlan2Id"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverInnerVlan2Pri"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverInnerVlan2EtherType"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverFrameType"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverPayloadType"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverFrameLength"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverUnitTextId"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverIfReachable"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverGeneratorStatus"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverItemOperation"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverItemIfSaved"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoverGeneratorAction"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureDestMacAddr"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureOuterVlanEnabled"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureOuterVlanId"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureOuterVlanPri"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureOuterVlanEtherType"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureInnerVlan1Enabled"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureInnerVlan1Id"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureInnerVlan1Pri"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureInnerVlan1EtherType"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureInnerVlan2Enabled"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureInnerVlan2Id"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureInnerVlan2Pri"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureInnerVlan2EtherType"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureFrameType"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigurePayloadType"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureFrameLength"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureUnitTextId"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureIfReachable"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureReachableUpdate"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureStatus"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureGeneratorAction"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureStorageType"), ("F3-JDSU-MIB", "f3JdsuGeneratorConfigureRowStatus"), ("F3-JDSU-MIB", "f3EthernetTrafficPortJdsuLoopbackEnabled"), ("F3-JDSU-MIB", "f3EthernetTrafficPortJdsuGenerationEanbled"), ("F3-JDSU-MIB", "f3EthernetTrafficPortJdsuLoopbackVlanList"), ("F3-JDSU-MIB", "f3JdsuGeneratorPort"), ("F3-JDSU-MIB", "f3JdsuGeneratorOuterVlanEnabled"), ("F3-JDSU-MIB", "f3JdsuGeneratorOuterVlanId"), ("F3-JDSU-MIB", "f3JdsuGeneratorOuterVlanPri"), ("F3-JDSU-MIB", "f3JdsuGeneratorOuterVlanEtherType"), ("F3-JDSU-MIB", "f3JdsuGeneratorInnerVlan1Enabled"), ("F3-JDSU-MIB", "f3JdsuGeneratorInnerVlan1Id"), ("F3-JDSU-MIB", "f3JdsuGeneratorInnerVlan1Pri"), ("F3-JDSU-MIB", "f3JdsuGeneratorInnerVlan1EtherType"), ("F3-JDSU-MIB", "f3JdsuGeneratorInnerVlan2Enabled"), ("F3-JDSU-MIB", "f3JdsuGeneratorInnerVlan2Id"), ("F3-JDSU-MIB", "f3JdsuGeneratorInnerVlan2Pri"), ("F3-JDSU-MIB", "f3JdsuGeneratorInnerVlan2EtherType"), ("F3-JDSU-MIB", "f3JdsuGeneratorFrameType"), ("F3-JDSU-MIB", "f3JdsuGeneratorPayloadType"), ("F3-JDSU-MIB", "f3JdsuGeneratorFrameLength"), ("F3-JDSU-MIB", "f3JdsuGeneratorDiscoveryAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3JdsuGroup = f3JdsuGroup.setStatus('current')
if mibBuilder.loadTexts: f3JdsuGroup.setDescription('A collection of objects used to manage the JDSU functionality.')
mibBuilder.exportSymbols("F3-JDSU-MIB", f3JdsuGeneratorConfigureInnerVlan1Id=f3JdsuGeneratorConfigureInnerVlan1Id, f3JdsuGeneratorDiscoverGeneratorStatus=f3JdsuGeneratorDiscoverGeneratorStatus, f3JdsuGeneratorOuterVlanId=f3JdsuGeneratorOuterVlanId, DiscoveryAction=DiscoveryAction, f3JdsuGeneratorConfigureInnerVlan2Id=f3JdsuGeneratorConfigureInnerVlan2Id, f3JdsuGeneratorConfigureDestMacAddr=f3JdsuGeneratorConfigureDestMacAddr, f3JdsuGeneratorDiscoverInnerVlan1Pri=f3JdsuGeneratorDiscoverInnerVlan1Pri, f3JdsuGeneratorDiscoverOuterVlanId=f3JdsuGeneratorDiscoverOuterVlanId, f3JdsuGeneratorDiscoverInnerVlan2Pri=f3JdsuGeneratorDiscoverInnerVlan2Pri, f3JdsuGeneratorDiscoveryAction=f3JdsuGeneratorDiscoveryAction, f3JdsuGeneratorConfigureFrameLength=f3JdsuGeneratorConfigureFrameLength, f3JdsuGeneratorDiscoverInnerVlan1Enabled=f3JdsuGeneratorDiscoverInnerVlan1Enabled, f3EthernetTrafficPortJdsuLoopbackVlanList=f3EthernetTrafficPortJdsuLoopbackVlanList, f3JdsuGeneratorOuterVlanEtherType=f3JdsuGeneratorOuterVlanEtherType, f3JdsuGeneratorDiscoverEntry=f3JdsuGeneratorDiscoverEntry, ItemOperation=ItemOperation, f3JdsuGeneratorConfigureInnerVlan1Enabled=f3JdsuGeneratorConfigureInnerVlan1Enabled, f3JdsuGroups=f3JdsuGroups, f3JdsuGeneratorInnerVlan1Pri=f3JdsuGeneratorInnerVlan1Pri, f3JdsuGeneratorDiscoverOuterVlanEnabled=f3JdsuGeneratorDiscoverOuterVlanEnabled, f3JdsuGeneratorDiscoverTable=f3JdsuGeneratorDiscoverTable, f3JdsuGeneratorDiscoverFrameType=f3JdsuGeneratorDiscoverFrameType, f3EthernetTrafficPortJdsuLoopbackEnabled=f3EthernetTrafficPortJdsuLoopbackEnabled, f3JdsuGeneratorOuterVlanPri=f3JdsuGeneratorOuterVlanPri, f3JdsuGeneratorDiscoverDestMacAddr=f3JdsuGeneratorDiscoverDestMacAddr, f3JdsuGeneratorConfigureInnerVlan1EtherType=f3JdsuGeneratorConfigureInnerVlan1EtherType, f3JdsuGeneratorConfigurePayloadType=f3JdsuGeneratorConfigurePayloadType, f3EthernetTrafficPortJdsuGenerationEanbled=f3EthernetTrafficPortJdsuGenerationEanbled, f3JdsuGeneratorConfigureInnerVlan2Enabled=f3JdsuGeneratorConfigureInnerVlan2Enabled, f3JdsuGeneratorConfigureStatus=f3JdsuGeneratorConfigureStatus, f3JdsuGeneratorDiscoverItemOperation=f3JdsuGeneratorDiscoverItemOperation, GeneratorStatus=GeneratorStatus, f3EthernetTrafficPortJdsuExtTable=f3EthernetTrafficPortJdsuExtTable, f3JdsuGeneratorConfigureInnerVlan2EtherType=f3JdsuGeneratorConfigureInnerVlan2EtherType, PYSNMP_MODULE_ID=f3JdsuMIB, f3JdsuGeneratorConfigureReachableUpdate=f3JdsuGeneratorConfigureReachableUpdate, GeneratorAction=GeneratorAction, f3JdsuGeneratorConfigureOuterVlanId=f3JdsuGeneratorConfigureOuterVlanId, f3EthernetTrafficPortJdsuExtEntry=f3EthernetTrafficPortJdsuExtEntry, f3JdsuGeneratorFrameLength=f3JdsuGeneratorFrameLength, f3JdsuGeneratorConfigureInnerVlan1Pri=f3JdsuGeneratorConfigureInnerVlan1Pri, f3JdsuGroup=f3JdsuGroup, f3JdsuGeneratorConfigureIfReachable=f3JdsuGeneratorConfigureIfReachable, f3JdsuGeneratorConfigureUnitTextId=f3JdsuGeneratorConfigureUnitTextId, f3JdsuGeneratorInnerVlan1Id=f3JdsuGeneratorInnerVlan1Id, f3JdsuCompliance=f3JdsuCompliance, f3JdsuGeneratorConfigureInnerVlan2Pri=f3JdsuGeneratorConfigureInnerVlan2Pri, f3JdsuGeneratorDiscoverOuterVlanPri=f3JdsuGeneratorDiscoverOuterVlanPri, f3JdsuGeneratorConfigureStorageType=f3JdsuGeneratorConfigureStorageType, f3JdsuGeneratorDiscoverIfReachable=f3JdsuGeneratorDiscoverIfReachable, f3JdsuGeneratorDiscoverInnerVlan1EtherType=f3JdsuGeneratorDiscoverInnerVlan1EtherType, f3JdsuNotifications=f3JdsuNotifications, f3JdsuGeneratorInnerVlan1Enabled=f3JdsuGeneratorInnerVlan1Enabled, f3JdsuGeneratorDiscoverOuterVlanEtherType=f3JdsuGeneratorDiscoverOuterVlanEtherType, f3JdsuGeneratorDiscoverGeneratorAction=f3JdsuGeneratorDiscoverGeneratorAction, f3JdsuGeneratorDiscoverUnitTextId=f3JdsuGeneratorDiscoverUnitTextId, f3JdsuGeneratorConfigureOuterVlanEtherType=f3JdsuGeneratorConfigureOuterVlanEtherType, f3JdsuMIB=f3JdsuMIB, f3JdsuConformance=f3JdsuConformance, f3JdsuGeneratorConfigureOuterVlanPri=f3JdsuGeneratorConfigureOuterVlanPri, f3JdsuGeneratorConfigureOuterVlanEnabled=f3JdsuGeneratorConfigureOuterVlanEnabled, UpdateReachStatus=UpdateReachStatus, f3JdsuGeneratorDiscoverInnerVlan2EtherType=f3JdsuGeneratorDiscoverInnerVlan2EtherType, f3JdsuGeneratorInnerVlan2Enabled=f3JdsuGeneratorInnerVlan2Enabled, f3JdsuGeneratorConfigureRowStatus=f3JdsuGeneratorConfigureRowStatus, f3JdsuGeneratorDiscoverInnerVlan1Id=f3JdsuGeneratorDiscoverInnerVlan1Id, f3JdsuGeneratorDiscoverPayloadType=f3JdsuGeneratorDiscoverPayloadType, f3JdsuGeneratorInnerVlan1EtherType=f3JdsuGeneratorInnerVlan1EtherType, f3JdsuGeneratorConfigureEntry=f3JdsuGeneratorConfigureEntry, f3JdsuGeneratorPort=f3JdsuGeneratorPort, f3JdsuGeneratorInnerVlan2EtherType=f3JdsuGeneratorInnerVlan2EtherType, f3JdsuGeneratorInnerVlan2Id=f3JdsuGeneratorInnerVlan2Id, f3JdsuGeneratorDiscoverInnerVlan2Id=f3JdsuGeneratorDiscoverInnerVlan2Id, f3JdsuGeneratorInnerVlan2Pri=f3JdsuGeneratorInnerVlan2Pri, f3JdsuCompliances=f3JdsuCompliances, f3JdsuGeneratorDiscoverItemIfSaved=f3JdsuGeneratorDiscoverItemIfSaved, f3JdsuGeneratorDiscoverFrameLength=f3JdsuGeneratorDiscoverFrameLength, JdsuGeneratorPayloadType=JdsuGeneratorPayloadType, f3JdsuGeneratorOuterVlanEnabled=f3JdsuGeneratorOuterVlanEnabled, f3JdsuGeneratorConfigureGeneratorAction=f3JdsuGeneratorConfigureGeneratorAction, f3JdsuGeneratorConfigureFrameType=f3JdsuGeneratorConfigureFrameType, f3JdsuGeneratorConfigureTable=f3JdsuGeneratorConfigureTable, f3JdsuGeneratorFrameType=f3JdsuGeneratorFrameType, f3JdsuGeneratorDiscoverInnerVlan2Enabled=f3JdsuGeneratorDiscoverInnerVlan2Enabled, f3JdsuGeneratorPayloadType=f3JdsuGeneratorPayloadType, f3JdsuObjects=f3JdsuObjects, JdsuGeneratorFrameType=JdsuGeneratorFrameType)
