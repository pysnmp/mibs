#
# PySNMP MIB module IRT-FM-DUALDRIVE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/irt/IRT-FM-DUALDRIVE-MIB
# Produced by pysmi-1.1.12 at Mon Oct  7 02:29:12 2024
# On host fv-az1986-495 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
eventPriority, mibRelease, eventTimeStamp, eventCounter = mibBuilder.importSymbols("IRT-COMMONVARBINDS-MIB", "eventPriority", "mibRelease", "eventTimeStamp", "eventCounter")
ReadyNotReady, PresentNotPresent, WarningOK, FaultOK, SelectManualAuto, SelectOnOff, LocalRemote, fm, ExecutedNotExecuted = mibBuilder.importSymbols("IRT-TRANSMITTER-SMI-MIB", "ReadyNotReady", "PresentNotPresent", "WarningOK", "FaultOK", "SelectManualAuto", "SelectOnOff", "LocalRemote", "fm", "ExecutedNotExecuted")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
sysDescr, sysName, sysLocation = mibBuilder.importSymbols("SNMPv2-MIB", "sysDescr", "sysName", "sysLocation")
Bits, ModuleIdentity, Integer32, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Counter32, MibIdentifier, Gauge32, Unsigned32, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "Integer32", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Counter32", "MibIdentifier", "Gauge32", "Unsigned32", "NotificationType", "iso")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
fmDualDrive = ModuleIdentity((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4))
fmDualDrive.setRevisions(('2007-05-04 14:00', '2006-12-20 14:00', '2006-09-21 14:00', '2006-09-19 14:00', '2006-09-07 14:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fmDualDrive.setRevisionsDescriptions(('change LocalMode (description) and Module-COMPLIANCE change numbering: OIDs 1.3.6.1.4.1.19831.1.1.3.4.0.14-19', 'corrections', 'Adding Compliance Statement', 'Correcting Imports', 'Relocation of the TC-MIB from the standard OID area at IEC into the private OID area of the IRT',))
if mibBuilder.loadTexts: fmDualDrive.setLastUpdated('200705041400Z')
if mibBuilder.loadTexts: fmDualDrive.setOrganization('IRT for WORKING-GROUP-TC-MIB')
if mibBuilder.loadTexts: fmDualDrive.setContactInfo('\n\t\t\t\tAndreas Metz\n\t\t\t\t\n\t\t\t\tInstitut fuer Rundfunktechnik GmbH\n\t\t\t\tBroadcast Networks and Servers (SN)\n\t\t\t\t\n\t\t\t\tFloriansmuehlstr.60\n\t\t\t\t80939 Munich\n\t\t\t\tGermany\n\t\t\t\t\n\t\t\t\tPhone: +49 89 32399 325\n\t\t\t\tFax: +49 89 32399 354\n\t\t\t\t')
if mibBuilder.loadTexts: fmDualDrive.setDescription('Description.\n\t\t\t\t\n\t\t\t\tbranch definition\n\t\t\t\t\n\t\t\t\t1st level\n\t\t\t\t\n\t\t\t\tevents               OBJECT IDENTIFIER ::= { fmDualDrive 0 }\n\t\t\t\tfmDDGeneral          OBJECT IDENTIFIER ::= { fmDualDrive 1 }\n\t\t\t\tfmDDExciterA         OBJECT IDENTIFIER ::= { fmDualDrive 2 }\n\t\t\t\tfmDDExciterB         OBJECT IDENTIFIER ::= { fmDualDrive 3 }\n\t\t\t\tfmDDEventEnable      OBJECT IDENTIFIER ::= { fmDualDrive 4 }\n\t\t\t\tfmDDEventPriority    OBJECT IDENTIFIER ::= { fmDualDrive 5 }\n\t\t\t\tgroups               OBJECT IDENTIFIER ::= { fmDualDrive 6 }\n\t\t\t\t\n\t\t\t\t2nd level\n\t\t\t\t\n\t\t\t\tfmDDEventEnableGeneral   OBJECT IDENTIFIER ::= { fmDDEventEnable 1 }\n\t\t\t\tfmDDEventEnableExciterA  OBJECT IDENTIFIER ::= { fmDDEventEnable 2 }\n\t\t\t\tfmDDEventEnableExciterB  OBJECT IDENTIFIER ::= { fmDDEventEnable 3 }\n\t\t\t\t\n\t\t\t\tfmDDEventPriorityGeneral   OBJECT IDENTIFIER ::= { fmDDEventPriority 1 }\n\t\t\t\tfmDDEventPriorityExciterA  OBJECT IDENTIFIER ::= { fmDDEventPriority 2 }\n\t\t\t\tfmDDEventPriorityExciterB  OBJECT IDENTIFIER ::= { fmDDEventPriority 3 }\n\t\t\t\t\n\t\t\t\tend branch')
fmEventsDD = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0))
fmDDPreselectionExciterEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 1)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDPreselectionExciter"))
if mibBuilder.loadTexts: fmDDPreselectionExciterEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDPreselectionExciterEvent.setDescription('Description. fmDDPreselectionExciterEvent notification')
fmDDTransmitterOpModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 2)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDTransmitterOpMode"))
if mibBuilder.loadTexts: fmDDTransmitterOpModeEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDTransmitterOpModeEvent.setDescription('Description. fmDDTransmitterOpMode notification')
fmDDReserveControlEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 3)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDReserveControl"))
if mibBuilder.loadTexts: fmDDReserveControlEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDReserveControlEvent.setDescription('Description. fmDDReserveControl nitification')
fmDDRFPresentEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 4)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDRFPresent"))
if mibBuilder.loadTexts: fmDDRFPresentEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDRFPresentEvent.setDescription('Description. fmDDRFPresent notification')
fmDDAmplifierFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 5)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDAmplifierFault"))
if mibBuilder.loadTexts: fmDDAmplifierFaultEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDAmplifierFaultEvent.setDescription('Description. fmDDAmplifierFault notification')
fmDDAmplifierWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 6)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDAmplifierWarning"))
if mibBuilder.loadTexts: fmDDAmplifierWarningEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDAmplifierWarningEvent.setDescription('Description. fmDDAmplifierWarning notification')
fmDDActiveExciterEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 7)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDActiveExciter"))
if mibBuilder.loadTexts: fmDDActiveExciterEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDActiveExciterEvent.setDescription('Description.fmDDActiveExciter notification')
fmDDLocalModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 8)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDLocalMode"))
if mibBuilder.loadTexts: fmDDLocalModeEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDLocalModeEvent.setDescription('Description. fmDDLocalMode notification')
fmDDControlUnitFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 9)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDControlUnitFault"))
if mibBuilder.loadTexts: fmDDControlUnitFaultEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDControlUnitFaultEvent.setDescription('Description. fmDDControlUnitFault notification')
fmDDSwitchOverModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 10)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverMode"))
if mibBuilder.loadTexts: fmDDSwitchOverModeEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverModeEvent.setDescription('Description. fmDDSwitchOverMode notification')
fmDDSwitchOverReadyEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 11)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverReady"))
if mibBuilder.loadTexts: fmDDSwitchOverReadyEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverReadyEvent.setDescription('Description. fmDDSwitchOverReady notification')
fmDDSwitchOverExecutedEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 12)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverExecuted"))
if mibBuilder.loadTexts: fmDDSwitchOverExecutedEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverExecutedEvent.setDescription('Description. fmDDSwitchOverExecuted notification')
fmDDSwitchOverFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 13)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverFault"))
if mibBuilder.loadTexts: fmDDSwitchOverFaultEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverFaultEvent.setDescription('Description. fmDDSwitchOverFault notification')
fmDDExciterALocalModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 14)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterALocalMode"))
if mibBuilder.loadTexts: fmDDExciterALocalModeEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterALocalModeEvent.setDescription('Description. fmDDExciterALocalMode notification')
fmDDExciterAFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 15)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterAFault"))
if mibBuilder.loadTexts: fmDDExciterAFaultEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterAFaultEvent.setDescription('Description. fmDDExciterAFault notification')
fmDDExciterAWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 16)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterAWarning"))
if mibBuilder.loadTexts: fmDDExciterAWarningEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterAWarningEvent.setDescription('Description. fmDDExciterAWarning notification')
fmDDExciterBLocalModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 17)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBLocalMode"))
if mibBuilder.loadTexts: fmDDExciterBLocalModeEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterBLocalModeEvent.setDescription('Description. fmDDExciterBLocalMode notification')
fmDDExciterBFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 18)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBFault"))
if mibBuilder.loadTexts: fmDDExciterBFaultEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterBFaultEvent.setDescription('Description. fmDDExciterBFault notification')
fmDDExciterBWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 0, 19)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBWarning"))
if mibBuilder.loadTexts: fmDDExciterBWarningEvent.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterBWarningEvent.setDescription('Description. fmDDExciterBWarning notification')
fmDDGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 1))
fmDDPreselectionExciter = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("exciterA", 1), ("exciterB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDPreselectionExciter.setStatus('current')
if mibBuilder.loadTexts: fmDDPreselectionExciter.setDescription('fm. Preselection of the exciter \n\t\t\t\t\n\t\t\t\t')
fmDDTransmitterOpMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 1, 2), SelectOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDTransmitterOpMode.setStatus('current')
if mibBuilder.loadTexts: fmDDTransmitterOpMode.setDescription('Dual drive. Operation mode of main exciter \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) ON\n\t\t\t\t(2) OFF')
fmDDReserveControl = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 1, 3), SelectOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDReserveControl.setStatus('current')
if mibBuilder.loadTexts: fmDDReserveControl.setDescription('Dual drive. Operation mode of reserve exciter\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) ON \n\t\t\t\t(2) OFF ')
fmDDRFPresent = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 1, 4), PresentNotPresent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDRFPresent.setStatus('current')
if mibBuilder.loadTexts: fmDDRFPresent.setDescription('Dual drive. Output power is present\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) present\n\t\t\t\t(2) not present\n\t\t\t\t')
fmDDAmplifierFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 1, 5), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDAmplifierFault.setStatus('current')
if mibBuilder.loadTexts: fmDDAmplifierFault.setDescription('Dual drive. Fault state of amplifier \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
fmDDAmplifierWarning = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 1, 6), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDAmplifierWarning.setStatus('current')
if mibBuilder.loadTexts: fmDDAmplifierWarning.setDescription('Dual drive. Warning state of amplifier \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
fmDDActiveExciter = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("exciterA", 1), ("exciterB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDActiveExciter.setStatus('current')
if mibBuilder.loadTexts: fmDDActiveExciter.setDescription('Dual drive. Active exciter \n\t\t\t\t\n\t\t\t\t')
fmDDLocalMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 1, 8), LocalRemote()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDLocalMode.setStatus('current')
if mibBuilder.loadTexts: fmDDLocalMode.setDescription('Dual drive. Local mode\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) local\n\t\t\t\t(2) remote')
fmDDControlUnitFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 1, 9), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDControlUnitFault.setStatus('current')
if mibBuilder.loadTexts: fmDDControlUnitFault.setDescription('Dual drive. State of the control unit\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
fmDDSwitchOverMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 1, 10), SelectManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDSwitchOverMode.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverMode.setDescription('Dual drive. Switch over mode: manual or automatic\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) manual \n\t\t\t\t(2) automatic')
fmDDSwitchOverReady = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 1, 11), ReadyNotReady()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDSwitchOverReady.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverReady.setDescription('Dual drive. State of the dual drive switch over unit\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) ready\n\t\t\t\t(2) not ready')
fmDDSwitchOverExecuted = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 1, 12), ExecutedNotExecuted()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDSwitchOverExecuted.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverExecuted.setDescription('Dual drive. Showsif the reserve switch over unit it has executed\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) executed\n\t\t\t\t(2) not executed')
fmDDSwitchOverFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 1, 13), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDSwitchOverFault.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverFault.setDescription('Dual drive. fault state of the switsch over unit\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) faulty\n\t\t\t\t(2) ok')
fmDDExciterA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 2))
fmDDExciterALocalMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 2, 1), LocalRemote()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDExciterALocalMode.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterALocalMode.setDescription('Dual drive. Local mode of exciter A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) local\n\t\t\t\t(2) remote')
fmDDExciterAFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 2, 2), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDExciterAFault.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterAFault.setDescription('Dual drive. Fault state of exciter A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
fmDDExciterAWarning = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 2, 3), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDExciterAWarning.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterAWarning.setDescription('Dual drive.Warning state of exciter A \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
fmDDExciterB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 3))
fmDDExciterBLocalMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 3, 1), LocalRemote()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDExciterBLocalMode.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterBLocalMode.setDescription('Dual drive. Local mode of exciter B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) local\n\t\t\t\t(2) remote')
fmDDExciterBFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 3, 2), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDExciterBFault.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterBFault.setDescription('Dual drive. Fault state of exciter B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
fmDDExciterBWarning = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 3, 3), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDDExciterBWarning.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterBWarning.setDescription('Dual drive. Warning state of exciter B \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
fmDDEventEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4))
fmDDEventEnableGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 1))
fmDDPreselectionExciterEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDPreselectionExciterEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDPreselectionExciterEnable.setDescription('Description. Enable/Disable switch for fmDDPreselectionExciter')
fmDDTransmitterOpModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDTransmitterOpModeEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDTransmitterOpModeEnable.setDescription('Description. Enable/Disable switch for fmDDTransmitterOpMode event')
fmDDReserveControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDReserveControlEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDReserveControlEnable.setDescription('Description. Enable/Disable switch for fmDDIReserveControl event')
fmDDRFPresentEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDRFPresentEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDRFPresentEnable.setDescription('Description. Enable/Disable switch for fmDDRFPresent event')
fmDDAmplifierFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDAmplifierFaultEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDAmplifierFaultEnable.setDescription('Description. Enable/Disable switch for fmDDAmplifierFault event')
fmDDAmplifierWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDAmplifierWarningEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDAmplifierWarningEnable.setDescription('Description. Enable/Disable switch for fmDDAmplifierWarning event')
fmDDActiveExciterEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDActiveExciterEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDActiveExciterEnable.setDescription('Description. Enable/Disable switch for fmDDActiveExciter event\n\t\t\t\t')
fmDDLocalModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDLocalModeEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDLocalModeEnable.setDescription('Description. Enable/Disable switch for fmDDLocalMode event')
fmDDControlUnitFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDControlUnitFaultEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDControlUnitFaultEnable.setDescription('Description. Enable/Disable switch for fmDDControlUnitFault event')
fmDDSwitchOverModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDSwitchOverModeEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverModeEnable.setDescription('Description. Enable/Disable switch for fmDDSwitchOverMode event')
fmDDSwitchOverReadyEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDSwitchOverReadyEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverReadyEnable.setDescription('Description. Enable/Disable switch for fmDDSwitchOverReady event')
fmDDSwitchOverExecutedEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDSwitchOverExecutedEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverExecutedEnable.setDescription('Description. Enable/Disable switch for fmDDSwitchOverExecuted event')
fmDDSwitchOverFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDSwitchOverFaultEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverFaultEnable.setDescription('Description. Enable/Disable switch for fmDDSwitchOverFault event')
fmDDEventEnableExciterA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 2))
fmDDExciterALocalModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDExciterALocalModeEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterALocalModeEnable.setDescription('Description. Enable/Disable switch for fmDDExciterALocalMode event')
fmDDExciterAFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 2, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDExciterAFaultEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterAFaultEnable.setDescription('Description. Enable/Disable switch for fmDDExciterAFault  event')
fmDDExciterAWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 2, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDExciterAWarningEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterAWarningEnable.setDescription('Description. Enable/Disable switch for fmDDExciterAWarning event')
fmDDEventEnableExciterB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 3))
fmDDExciterBLocalModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDExciterBLocalModeEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterBLocalModeEnable.setDescription('Description. Enable/Disable switch for fmDDExciterBLocalMode event')
fmDDExciterBFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDExciterBFaultEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterBFaultEnable.setDescription('Description. Enable/Disable switch for fmDDExciterBFault event')
fmDDExciterBWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 4, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDExciterBWarningEnable.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterBWarningEnable.setDescription('Description. Enable/Disable switch for fmDDExciterBWarning event')
fmDDEventPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5))
fmDDEventPriorityGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 1))
fmDDPreselectionExciterPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDPreselectionExciterPriority.setStatus('current')
if mibBuilder.loadTexts: fmDDPreselectionExciterPriority.setDescription('Description. Priority for fmDDPreselectionExciter event')
fmDDTransmitterOpModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDTransmitterOpModePriority.setStatus('current')
if mibBuilder.loadTexts: fmDDTransmitterOpModePriority.setDescription('Description. Priority for fmDDTransmitterOpMode event')
fmDDReserveControlPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDReserveControlPriority.setStatus('current')
if mibBuilder.loadTexts: fmDDReserveControlPriority.setDescription('Description. Priority for fmDDReserveControl event')
fmDDRFPresentPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDRFPresentPriority.setStatus('current')
if mibBuilder.loadTexts: fmDDRFPresentPriority.setDescription('Description. Priority for fmDDRFPresent event')
fmDDAmplifierFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDAmplifierFaultPriority.setStatus('current')
if mibBuilder.loadTexts: fmDDAmplifierFaultPriority.setDescription('Description. Priority for fmDDAmplifierFault event')
fmDDAmplifierWarningPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDAmplifierWarningPriority.setStatus('current')
if mibBuilder.loadTexts: fmDDAmplifierWarningPriority.setDescription('Description. Priority for fmDDAmplifierWarning event')
fmDDActiveExciterPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDActiveExciterPriority.setStatus('current')
if mibBuilder.loadTexts: fmDDActiveExciterPriority.setDescription('Description. Priority for fmDDActiveExciter event')
fmDDLocalModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDLocalModePriority.setStatus('current')
if mibBuilder.loadTexts: fmDDLocalModePriority.setDescription('Description. Priority for fmDDLocalMode event')
fmDDControlUnitFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDControlUnitFaultPriority.setStatus('current')
if mibBuilder.loadTexts: fmDDControlUnitFaultPriority.setDescription('Description. Priority for fmDDControlUnitFault event')
fmDDSwitchOverModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDSwitchOverModePriority.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverModePriority.setDescription('Description. Priority for fmDDSwitchOverMode event')
fmDDSwitchOverReadyPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDSwitchOverReadyPriority.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverReadyPriority.setDescription('Description. Priority for fmDDSwitchOverReady event')
fmDDSwitchOverExecutedPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDSwitchOverExecutedPriority.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverExecutedPriority.setDescription('Description. Priority for fmDDSwitchOverExecuted event')
fmDDSwitchOverFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDSwitchOverFaultPriority.setStatus('current')
if mibBuilder.loadTexts: fmDDSwitchOverFaultPriority.setDescription('Description. Priority for fmDDSwitchOverFault event')
fmDDEventPriorityExciterA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 2))
fmDDExciterALocalModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 2, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDExciterALocalModePriority.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterALocalModePriority.setDescription('Description. Priority for fmDDExciterALocalMode event event')
fmDDExciterAFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 2, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDExciterAFaultPriority.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterAFaultPriority.setDescription('Description. Priority for fmDDExciterAFault event')
fmDDExciterAWarningPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 2, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDExciterAWarningPriority.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterAWarningPriority.setDescription('Description. Priority for fmDDExciterAWarning event')
fmDDEventPriorityExciterB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 3))
fmDDExciterBLocalModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 3, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDExciterBLocalModePriority.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterBLocalModePriority.setDescription('Description. Priority for fmDDExciterBLocalMode event event')
fmDDExciterBFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 3, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDExciterBFaultPriority.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterBFaultPriority.setDescription('Description. Priority for fmDDExciterBFault event')
fmDDExciterBWarningPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 5, 3, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDDExciterBWarningPriority.setStatus('current')
if mibBuilder.loadTexts: fmDDExciterBWarningPriority.setDescription('Description. Priority for fmDDExciterBWarning event')
groupsDD = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 6))
eventGroupDD = NotificationGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 6, 1)).setObjects(("IRT-FM-DUALDRIVE-MIB", "fmDDTransmitterOpModeEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDReserveControlEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDRFPresentEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDAmplifierFaultEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDAmplifierWarningEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDActiveExciterEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDLocalModeEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDControlUnitFaultEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverModeEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverReadyEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverExecutedEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverFaultEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterAFaultEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterAWarningEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBFaultEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBWarningEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterALocalModeEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBLocalModeEvent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDPreselectionExciterEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventGroupDD = eventGroupDD.setStatus('current')
if mibBuilder.loadTexts: eventGroupDD.setDescription('Description.')
objectGroupDD = ObjectGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 6, 2)).setObjects(("IRT-FM-DUALDRIVE-MIB", "fmDDTransmitterOpMode"), ("IRT-FM-DUALDRIVE-MIB", "fmDDReserveControl"), ("IRT-FM-DUALDRIVE-MIB", "fmDDRFPresent"), ("IRT-FM-DUALDRIVE-MIB", "fmDDAmplifierFault"), ("IRT-FM-DUALDRIVE-MIB", "fmDDAmplifierWarning"), ("IRT-FM-DUALDRIVE-MIB", "fmDDActiveExciter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDLocalMode"), ("IRT-FM-DUALDRIVE-MIB", "fmDDControlUnitFault"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverMode"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverReady"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverExecuted"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverFault"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterAFault"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterAWarning"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBFault"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBWarning"), ("IRT-FM-DUALDRIVE-MIB", "fmDDTransmitterOpModeEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDReserveControlEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDRFPresentEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDAmplifierFaultEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDAmplifierWarningEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDActiveExciterEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDLocalModeEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDControlUnitFaultEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverModeEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverReadyEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverExecutedEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverFaultEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterAFaultEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterAWarningEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBFaultEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBWarningEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDTransmitterOpModePriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDReserveControlPriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDRFPresentPriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDAmplifierFaultPriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDAmplifierWarningPriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDActiveExciterPriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDLocalModePriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDControlUnitFaultPriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverModePriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverReadyPriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverExecutedPriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDSwitchOverFaultPriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterAFaultPriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterAWarningPriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBFaultPriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDPreselectionExciter"), ("IRT-FM-DUALDRIVE-MIB", "fmDDPreselectionExciterEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDPreselectionExciterPriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBWarningPriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterALocalMode"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBLocalMode"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterALocalModeEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBLocalModeEnable"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterALocalModePriority"), ("IRT-FM-DUALDRIVE-MIB", "fmDDExciterBLocalModePriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    objectGroupDD = objectGroupDD.setStatus('current')
if mibBuilder.loadTexts: objectGroupDD.setDescription('Description.dual drive: object group')
complianceDD = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 7))
fmDualDriveCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 19831, 1, 1, 3, 4, 7, 1)).setObjects(("IRT-FM-DUALDRIVE-MIB", "eventGroupDD"), ("IRT-FM-DUALDRIVE-MIB", "objectGroupDD"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmDualDriveCompliance = fmDualDriveCompliance.setStatus('current')
if mibBuilder.loadTexts: fmDualDriveCompliance.setDescription('Compliance Statement')
mibBuilder.exportSymbols("IRT-FM-DUALDRIVE-MIB", fmDDSwitchOverFaultPriority=fmDDSwitchOverFaultPriority, fmDDLocalModeEnable=fmDDLocalModeEnable, fmDDExciterBFaultEvent=fmDDExciterBFaultEvent, fmDDExciterBFaultEnable=fmDDExciterBFaultEnable, fmDDLocalModeEvent=fmDDLocalModeEvent, fmDDSwitchOverFaultEnable=fmDDSwitchOverFaultEnable, fmDDExciterAFaultEnable=fmDDExciterAFaultEnable, fmDDExciterAWarningPriority=fmDDExciterAWarningPriority, fmDDExciterBLocalModePriority=fmDDExciterBLocalModePriority, fmDDTransmitterOpModePriority=fmDDTransmitterOpModePriority, fmDDSwitchOverReady=fmDDSwitchOverReady, fmDDSwitchOverFaultEvent=fmDDSwitchOverFaultEvent, fmDDPreselectionExciter=fmDDPreselectionExciter, fmDDSwitchOverFault=fmDDSwitchOverFault, fmDDControlUnitFaultPriority=fmDDControlUnitFaultPriority, fmDDActiveExciterPriority=fmDDActiveExciterPriority, fmDDPreselectionExciterEnable=fmDDPreselectionExciterEnable, fmDualDriveCompliance=fmDualDriveCompliance, fmDDActiveExciterEnable=fmDDActiveExciterEnable, fmDDActiveExciterEvent=fmDDActiveExciterEvent, fmDDAmplifierFaultPriority=fmDDAmplifierFaultPriority, fmDDExciterB=fmDDExciterB, fmDDEventPriorityGeneral=fmDDEventPriorityGeneral, fmDDGeneral=fmDDGeneral, fmDDControlUnitFaultEvent=fmDDControlUnitFaultEvent, fmDDExciterBWarningEvent=fmDDExciterBWarningEvent, fmDDAmplifierWarningPriority=fmDDAmplifierWarningPriority, fmDDEventEnable=fmDDEventEnable, objectGroupDD=objectGroupDD, fmDDRFPresentEvent=fmDDRFPresentEvent, fmDDExciterBWarningEnable=fmDDExciterBWarningEnable, PYSNMP_MODULE_ID=fmDualDrive, fmDDRFPresent=fmDDRFPresent, fmDDEventPriorityExciterB=fmDDEventPriorityExciterB, fmDDActiveExciter=fmDDActiveExciter, fmDDExciterALocalModePriority=fmDDExciterALocalModePriority, fmDDExciterBFaultPriority=fmDDExciterBFaultPriority, fmDDExciterAWarningEvent=fmDDExciterAWarningEvent, fmDDExciterAFaultPriority=fmDDExciterAFaultPriority, fmDDReserveControlEvent=fmDDReserveControlEvent, fmDDExciterALocalMode=fmDDExciterALocalMode, fmDDExciterBLocalModeEnable=fmDDExciterBLocalModeEnable, fmDDExciterBFault=fmDDExciterBFault, fmDDSwitchOverExecuted=fmDDSwitchOverExecuted, fmDDSwitchOverMode=fmDDSwitchOverMode, complianceDD=complianceDD, fmDDSwitchOverReadyEvent=fmDDSwitchOverReadyEvent, fmDDAmplifierFaultEnable=fmDDAmplifierFaultEnable, fmDDAmplifierFault=fmDDAmplifierFault, fmDDSwitchOverModeEnable=fmDDSwitchOverModeEnable, fmDDSwitchOverExecutedPriority=fmDDSwitchOverExecutedPriority, eventGroupDD=eventGroupDD, fmDDRFPresentPriority=fmDDRFPresentPriority, fmDDLocalMode=fmDDLocalMode, fmDDExciterAFault=fmDDExciterAFault, fmDDEventPriority=fmDDEventPriority, fmDDPreselectionExciterEvent=fmDDPreselectionExciterEvent, fmDDSwitchOverModePriority=fmDDSwitchOverModePriority, fmDDExciterBLocalModeEvent=fmDDExciterBLocalModeEvent, fmDDSwitchOverModeEvent=fmDDSwitchOverModeEvent, fmDDReserveControlPriority=fmDDReserveControlPriority, fmDDEventPriorityExciterA=fmDDEventPriorityExciterA, fmDDExciterALocalModeEvent=fmDDExciterALocalModeEvent, fmDDExciterAFaultEvent=fmDDExciterAFaultEvent, fmDDExciterAWarningEnable=fmDDExciterAWarningEnable, fmDDTransmitterOpModeEnable=fmDDTransmitterOpModeEnable, fmDDSwitchOverExecutedEvent=fmDDSwitchOverExecutedEvent, fmDDPreselectionExciterPriority=fmDDPreselectionExciterPriority, fmEventsDD=fmEventsDD, fmDDReserveControlEnable=fmDDReserveControlEnable, fmDDExciterBWarning=fmDDExciterBWarning, fmDDExciterALocalModeEnable=fmDDExciterALocalModeEnable, fmDDSwitchOverReadyEnable=fmDDSwitchOverReadyEnable, fmDDEventEnableExciterA=fmDDEventEnableExciterA, fmDDAmplifierWarning=fmDDAmplifierWarning, fmDDExciterA=fmDDExciterA, fmDDExciterBLocalMode=fmDDExciterBLocalMode, fmDDEventEnableGeneral=fmDDEventEnableGeneral, fmDDAmplifierWarningEvent=fmDDAmplifierWarningEvent, fmDDReserveControl=fmDDReserveControl, fmDDSwitchOverExecutedEnable=fmDDSwitchOverExecutedEnable, fmDDTransmitterOpModeEvent=fmDDTransmitterOpModeEvent, fmDDRFPresentEnable=fmDDRFPresentEnable, fmDualDrive=fmDualDrive, fmDDEventEnableExciterB=fmDDEventEnableExciterB, fmDDAmplifierWarningEnable=fmDDAmplifierWarningEnable, fmDDTransmitterOpMode=fmDDTransmitterOpMode, fmDDControlUnitFault=fmDDControlUnitFault, fmDDSwitchOverReadyPriority=fmDDSwitchOverReadyPriority, fmDDControlUnitFaultEnable=fmDDControlUnitFaultEnable, fmDDLocalModePriority=fmDDLocalModePriority, fmDDExciterBWarningPriority=fmDDExciterBWarningPriority, groupsDD=groupsDD, fmDDAmplifierFaultEvent=fmDDAmplifierFaultEvent, fmDDExciterAWarning=fmDDExciterAWarning)
