#
# PySNMP MIB module APUSBCSYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/oracle/APUSBCSYS-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 07:52:52 2024
# On host fv-az837-21 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
ApPresence, ApRedundancyState, ApThreadOverloaded, ApPhyPortType, ApServerStatus, ApHardwareModuleFamily = mibBuilder.importSymbols("ACMEPACKET-TC", "ApPresence", "ApRedundancyState", "ApThreadOverloaded", "ApPhyPortType", "ApServerStatus", "ApHardwareModuleFamily")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, IpAddress, Bits, Counter64, iso, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, Counter32, TimeTicks, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Bits", "Counter64", "iso", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "Counter32", "TimeTicks", "NotificationType", "Gauge32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
apUsbcSysModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 17))
apUsbcSysModule.setRevisions(('2012-03-07 00:00', '2014-06-26 00:00', '2018-04-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apUsbcSysModule.setRevisionsDescriptions(('Initial version.', 'Updated Organization and Contact info.', 'Added MIB OID for system FD count traps',))
if mibBuilder.loadTexts: apUsbcSysModule.setLastUpdated('201804130000Z')
if mibBuilder.loadTexts: apUsbcSysModule.setOrganization('Oracle Communications')
if mibBuilder.loadTexts: apUsbcSysModule.setContactInfo('           \tCustomer Service\n\t\t \tPostal:\t\tOracle Communications\n\t\t\t\t\t100 Crosby Drive \n\t\t\t\t\tBedford, MA 01730\n\t\t\t\t\tUS\n\t\t    \tTel:\t\t1-800-633-0738\n\t\t\tUrl:\t\twww.oracle.com\n\t\t \tE-mail:\t\tsupport@oracle.com')
if mibBuilder.loadTexts: apUsbcSysModule.setDescription('APPS MIB for Oracle Communications Acme Packet SBCs')
apUsbcSysMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1))
apUsbcSysNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2))
apUsbcSysNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 1))
apUsbcSysNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 2))
apUsbcSysCpuNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 2, 1))
apUsbcSysCpuNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 2, 1, 0))
apUsbcSysFdNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 2, 2))
apUsbcSysFdNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 2, 2, 0))
apUsbcSysConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3))
apUsbcSysObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 1))
apUsbcSysNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 2))
class UsbcSysPercent(TextualConvention, Gauge32):
    description = 'A percentage value.'
    status = 'current'
    subtypeSpec = Gauge32.subtypeSpec + ValueRangeConstraint(0, 100)

apUsbcSysObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1))
apUsbcSysCpuUtilAll = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 1), UsbcSysPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysCpuUtilAll.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysCpuUtilAll.setDescription('The percentage of total Cpu utilization.')
apUsbcSysCpuCount = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysCpuCount.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysCpuCount.setDescription('The number of cpus for this system.')
apUsbcSysCpuSpeedMHz = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysCpuSpeedMHz.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysCpuSpeedMHz.setDescription('The speed in MHz of the cpus for this system.')
apUsbcSysMemSzMB = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysMemSzMB.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysMemSzMB.setDescription('The number of megabytes of all cpus for this system.')
apUsbcSysMemSzGB = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysMemSzGB.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysMemSzGB.setDescription('The number of gigabytes of all cpus for this system.')
apUsbcSysAppMemUtil = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 6), UsbcSysPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysAppMemUtil.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysAppMemUtil.setDescription('The percentage of total memory used by the applications.')
apUsbcSysKernelMemUtil = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 7), UsbcSysPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysKernelMemUtil.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysKernelMemUtil.setDescription('The perventage of total memory used by the kernel.')
apUsbcSysMyBogoMips = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysMyBogoMips.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysMyBogoMips.setDescription('The processor speed measured in millions of instructions per\n\t     seond.  Calculated by the kernel at boot time.')
apUsbcSysAllBogoMips = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysAllBogoMips.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysAllBogoMips.setDescription('The sum of all bogo mips(millions of instrctuctions per second)\n             of all cpus for this system.')
apUsbcSysCpuTblObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 10))
apUsbcSysCpuTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 10, 1), )
if mibBuilder.loadTexts: apUsbcSysCpuTable.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysCpuTable.setDescription('A read-only table to hold nformation for a cpu indexed by\n            the cpu numberi + 1.')
apUsbcSysCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 10, 1, 1), ).setIndexNames((0, "APUSBCSYS-MIB", "apUsbcSysCpuNum"))
if mibBuilder.loadTexts: apUsbcSysCpuEntry.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysCpuEntry.setDescription('A entry designed to hold the status of a single Cpu.')
apUsbcSysCpuNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysCpuNum.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysCpuNum.setDescription('The cpu number + 1 of this entry.')
apUsbcSysCpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 10, 1, 1, 2), UsbcSysPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysCpuUtil.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysCpuUtil.setDescription('The percent of cpu utilization of this cpu.')
apUsbcSysScalingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 12))
apUsbcSysEstSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysEstSessions.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysEstSessions.setDescription('Estimated number of unecrypted media sessions.')
apUsbcSysEstG711G729Trans = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysEstG711G729Trans.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysEstG711G729Trans.setDescription('Estimated number of G711<->G729 transcoded media sessions.')
apUsbcSysEstSigTPS = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysEstSigTPS.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysEstSigTPS.setDescription('Estimated number of signaling TPS.')
apUsbcSysEstACLs = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysEstACLs.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysEstACLs.setDescription('Estimated number of ACLs.')
apUsbcSysEstTCP = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysEstTCP.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysEstTCP.setDescription('Estimated number of TCP connections.')
apUsbcSysEstTLS = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysEstTLS.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysEstTLS.setDescription('Estimated number of TLS connections.')
apUsbcSysEstVLANs = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysEstVLANs.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysEstVLANs.setDescription('Estimated number of VLANs.')
apUsbcSysDPDKObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 13))
apUsbcSysDPDKFwdPurpose = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 13, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysDPDKFwdPurpose.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysDPDKFwdPurpose.setDescription('A bitset representing cores designated for forwarding purposes. \n\t    Bits set to 1 represent forwarding cores.')
apUsbcSysDPDKDOSPurpose = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 13, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysDPDKDOSPurpose.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysDPDKDOSPurpose.setDescription('A bitset representing cores designated for DoS purposes. \n\t    Bits set to 1 represent DoS cores.')
apUsbcSysDPDKSigPurpose = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 13, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysDPDKSigPurpose.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysDPDKSigPurpose.setDescription('A bitset representing cores designated for Signaling purposes. \n\t    Bits set to 1 represent signaling cores.')
apUsbcSysDPDKTransPurpose = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 13, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysDPDKTransPurpose.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysDPDKTransPurpose.setDescription('A bitset representing Cores designated for transcoding purposes. \n\t    Bits set to 1 represent transcoding cores.')
apUsbcSysDPDKCmdLine = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 13, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysDPDKCmdLine.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysDPDKCmdLine.setDescription('System CmdLine string - as defined in /proc/cmdline. (including relevant bootparams.)')
apUsbcSysDPDKFileMem = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 13, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysDPDKFileMem.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysDPDKFileMem.setDescription('Total DPDK File Memory.')
apUsbcSysDPDKSysMem = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 13, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysDPDKSysMem.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysDPDKSysMem.setDescription('Total DPDK System Memory.')
apUsbcSysDPDKNum1G = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 13, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysDPDKNum1G.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysDPDKNum1G.setDescription('Number of 1GB Hugepages allocated.')
apUsbcSysDPDKNum2MB = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 13, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysDPDKNum2MB.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysDPDKNum2MB.setDescription('Number of 2MB hugepages allocated.')
apUsbcSysDPDKHypervisorType = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 13, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysDPDKHypervisorType.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysDPDKHypervisorType.setDescription('The description regarding the system type and what hypervisor the system\n\t     is running on (OVM, KVM, VMWare,...) if any.')
apUsbcSysDPDKAddFwdCores = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 13, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysDPDKAddFwdCores.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysDPDKAddFwdCores.setDescription('Number of additional cores that may be used for forwarding.')
apUsbcSysDPDKAddSigCores = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 13, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysDPDKAddSigCores.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysDPDKAddSigCores.setDescription('Number of additional cores that may be used for signaling.')
apUsbcSysDPDKAddTransCores = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 13, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysDPDKAddTransCores.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysDPDKAddTransCores.setDescription('Number of additional cores that may be used for transcoding.')
apUsbcSysSmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 14))
apUsbcSysSmMsgRate = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysSmMsgRate.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysSmMsgRate.setDescription('Session Manager SIP Messages, Enum Messages, and Cx Diameter messages per second.')
apUsbcSysThreadObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2))
apUsbcThreadUsageTableObject = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 1))
apUsbcThreadUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 1, 1), )
if mibBuilder.loadTexts: apUsbcThreadUsageTable.setStatus('current')
if mibBuilder.loadTexts: apUsbcThreadUsageTable.setDescription('A table to hold the thread usage information,\n\t\ton a Session Border Controller.\n\t\tThese are all read only.')
apThreadUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 1, 1, 1), ).setIndexNames((0, "APUSBCSYS-MIB", "apThreadId"))
if mibBuilder.loadTexts: apThreadUsageEntry.setStatus('current')
if mibBuilder.loadTexts: apThreadUsageEntry.setDescription('A table entry designed to hold the thread usage information,\n\t\ton a Session Border Controller.')
apThreadId = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: apThreadId.setStatus('current')
if mibBuilder.loadTexts: apThreadId.setDescription('The instance index of the thread.')
apThreadName = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadName.setStatus('current')
if mibBuilder.loadTexts: apThreadName.setDescription('The name of the thread')
apThreadCurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadCurrentUsage.setStatus('current')
if mibBuilder.loadTexts: apThreadCurrentUsage.setDescription('The current cpu usage of the thread.\n\t\t Multiply by 100 from % value.')
apThreadOverloaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 1, 1, 1, 4), ApThreadOverloaded()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadOverloaded.setStatus('current')
if mibBuilder.loadTexts: apThreadOverloaded.setDescription('Indicator if thread is in overload control')
apUsbcSysFdCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUsbcSysFdCurrentCount.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysFdCurrentCount.setDescription('The current system FD count.')
apUsbcThreadEventTableObject = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2))
apUsbcThreadEventTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1), )
if mibBuilder.loadTexts: apUsbcThreadEventTable.setStatus('current')
if mibBuilder.loadTexts: apUsbcThreadEventTable.setDescription('A table to hold the thread event information,\n\t\ton a Session Border Controller.\n\t\tThese are all read only.')
apThreadEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1), ).setIndexNames((0, "APUSBCSYS-MIB", "apThreadId"))
if mibBuilder.loadTexts: apThreadEventEntry.setStatus('current')
if mibBuilder.loadTexts: apThreadEventEntry.setDescription('A table entry designed to hold the thread event information,\n\t\ton a Session Border Controller.')
apThreadEventPendingCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadEventPendingCurrent.setStatus('current')
if mibBuilder.loadTexts: apThreadEventPendingCurrent.setDescription('The event pending Active counter.')
apThreadEventPendingCurhigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadEventPendingCurhigh.setStatus('current')
if mibBuilder.loadTexts: apThreadEventPendingCurhigh.setDescription('The event pending High counter.')
apThreadEventPendingWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadEventPendingWindow.setStatus('current')
if mibBuilder.loadTexts: apThreadEventPendingWindow.setDescription('The event pending Total counter.')
apThreadEventPendingTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadEventPendingTotal.setStatus('current')
if mibBuilder.loadTexts: apThreadEventPendingTotal.setDescription('The event pending Total counter.')
apThreadEventPendingMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadEventPendingMaximum.setStatus('current')
if mibBuilder.loadTexts: apThreadEventPendingMaximum.setDescription('The event pending PerMax counter.')
apThreadEventPendingHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadEventPendingHigh.setStatus('current')
if mibBuilder.loadTexts: apThreadEventPendingHigh.setDescription('The event pending High counter.')
apThreadEventDroppedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadEventDroppedCurrent.setStatus('current')
if mibBuilder.loadTexts: apThreadEventDroppedCurrent.setDescription('The event dropped Active counter.')
apThreadEventDroppedCurhigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadEventDroppedCurhigh.setStatus('current')
if mibBuilder.loadTexts: apThreadEventDroppedCurhigh.setDescription('The event dropped High counter.')
apThreadEventDroppedWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadEventDroppedWindow.setStatus('current')
if mibBuilder.loadTexts: apThreadEventDroppedWindow.setDescription('The event dropped Total counter.')
apThreadEventDroppedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadEventDroppedTotal.setStatus('current')
if mibBuilder.loadTexts: apThreadEventDroppedTotal.setDescription('The event dropped Total counter.')
apThreadEventDroppedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadEventDroppedMaximum.setStatus('current')
if mibBuilder.loadTexts: apThreadEventDroppedMaximum.setDescription('The event dropped PerMax counter.')
apThreadEventDroppedHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadEventDroppedHigh.setStatus('current')
if mibBuilder.loadTexts: apThreadEventDroppedHigh.setDescription('The event dropped High counter.')
apThreadLatencyPendingAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadLatencyPendingAverage.setStatus('current')
if mibBuilder.loadTexts: apThreadLatencyPendingAverage.setDescription('The thread average latency.')
apThreadLatencyPendingMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadLatencyPendingMax.setStatus('current')
if mibBuilder.loadTexts: apThreadLatencyPendingMax.setDescription('The thread max latency.')
apThreadLatencyProcessingAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadLatencyProcessingAverage.setStatus('current')
if mibBuilder.loadTexts: apThreadLatencyProcessingAverage.setDescription('The thread average latency.')
apThreadLatencyProcessingMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apThreadLatencyProcessingMax.setStatus('current')
if mibBuilder.loadTexts: apThreadLatencyProcessingMax.setDescription('The thread max latency.')
apUsbcSipObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 3))
apUsbcAtcpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 4))
apUsbcMbcdObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 5))
apUsbcEbmdObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 6))
apUsbcDnsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 7))
apSipNumberOfThreads = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipNumberOfThreads.setStatus('current')
if mibBuilder.loadTexts: apSipNumberOfThreads.setDescription('Number of SIP threads.')
apSipAverageCpuUtil = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipAverageCpuUtil.setStatus('current')
if mibBuilder.loadTexts: apSipAverageCpuUtil.setDescription('Average CPU utilization.')
apSipPendingAverageLatency = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipPendingAverageLatency.setStatus('current')
if mibBuilder.loadTexts: apSipPendingAverageLatency.setDescription('The average latency of SIP Pending events.')
apSipPendingMaxLatency = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipPendingMaxLatency.setStatus('current')
if mibBuilder.loadTexts: apSipPendingMaxLatency.setDescription('The max latency of SIP Pending events.')
apSipProcessingAverageLatency = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipProcessingAverageLatency.setStatus('current')
if mibBuilder.loadTexts: apSipProcessingAverageLatency.setDescription('The average latency of SIP Processing events.')
apSipProcessingMaxLatency = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipProcessingMaxLatency.setStatus('current')
if mibBuilder.loadTexts: apSipProcessingMaxLatency.setDescription('The max latency of SIP Processing events.')
apAtcpNumberOfThreads = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAtcpNumberOfThreads.setStatus('current')
if mibBuilder.loadTexts: apAtcpNumberOfThreads.setDescription('Number of ATCP threads.')
apAtcpAverageCpuUtil = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAtcpAverageCpuUtil.setStatus('current')
if mibBuilder.loadTexts: apAtcpAverageCpuUtil.setDescription('Average CPU utilization.')
apAtcpPendingAverageLatency = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAtcpPendingAverageLatency.setStatus('current')
if mibBuilder.loadTexts: apAtcpPendingAverageLatency.setDescription('The average latency of ATCP Pending events.')
apAtcpPendingMaxLatency = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAtcpPendingMaxLatency.setStatus('current')
if mibBuilder.loadTexts: apAtcpPendingMaxLatency.setDescription('The max latency of ATCP Pending events.')
apAtcpProcessingAverageLatency = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAtcpProcessingAverageLatency.setStatus('current')
if mibBuilder.loadTexts: apAtcpProcessingAverageLatency.setDescription('The average latency of ATCP Processing events.')
apAtcpProcessingMaxLatency = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAtcpProcessingMaxLatency.setStatus('current')
if mibBuilder.loadTexts: apAtcpProcessingMaxLatency.setDescription('The max latency of ATCP Processing events.')
apMbcdNumberOfThreads = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMbcdNumberOfThreads.setStatus('current')
if mibBuilder.loadTexts: apMbcdNumberOfThreads.setDescription('Number of MBCD threads.')
apMbcdAverageCpuUtil = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMbcdAverageCpuUtil.setStatus('current')
if mibBuilder.loadTexts: apMbcdAverageCpuUtil.setDescription('Average CPU utilization.')
apEbmdNumberOfThreads = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEbmdNumberOfThreads.setStatus('current')
if mibBuilder.loadTexts: apEbmdNumberOfThreads.setDescription('Number of EBMD threads.')
apEbmdAverageCpuUtil = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEbmdAverageCpuUtil.setStatus('current')
if mibBuilder.loadTexts: apEbmdAverageCpuUtil.setDescription('Average CPU utilization.')
apDnsNumberOfThreads = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDnsNumberOfThreads.setStatus('current')
if mibBuilder.loadTexts: apDnsNumberOfThreads.setDescription('Number of DNS threads.')
apDnsAverageCpuUtil = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 1, 2, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDnsAverageCpuUtil.setStatus('current')
if mibBuilder.loadTexts: apDnsAverageCpuUtil.setDescription('Average CPU utilization.')
apUsbcSysGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 1, 1)).setObjects(("APUSBCSYS-MIB", "apUsbcSysCpuUtilAll"), ("APUSBCSYS-MIB", "apUsbcSysCpuCount"), ("APUSBCSYS-MIB", "apUsbcSysCpuSpeedMHz"), ("APUSBCSYS-MIB", "apUsbcSysMemSzMB"), ("APUSBCSYS-MIB", "apUsbcSysMemSzGB"), ("APUSBCSYS-MIB", "apUsbcSysAppMemUtil"), ("APUSBCSYS-MIB", "apUsbcSysKernelMemUtil"), ("APUSBCSYS-MIB", "apUsbcSysMyBogoMips"), ("APUSBCSYS-MIB", "apUsbcSysAllBogoMips"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysGroup = apUsbcSysGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysGroup.setDescription('A collection of objects providing the system manager MIB\n                capability.')
apUsbcSysCpuTblGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 1, 2)).setObjects(("APUSBCSYS-MIB", "apUsbcSysCpuNum"), ("APUSBCSYS-MIB", "apUsbcSysCpuUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysCpuTblGroup = apUsbcSysCpuTblGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysCpuTblGroup.setDescription('Report information for all cpus on the system.')
apUsbcSysScalingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 1, 3)).setObjects(("APUSBCSYS-MIB", "apUsbcSysEstSessions"), ("APUSBCSYS-MIB", "apUsbcSysEstG711G729Trans"), ("APUSBCSYS-MIB", "apUsbcSysEstSigTPS"), ("APUSBCSYS-MIB", "apUsbcSysEstACLs"), ("APUSBCSYS-MIB", "apUsbcSysEstTCP"), ("APUSBCSYS-MIB", "apUsbcSysEstTLS"), ("APUSBCSYS-MIB", "apUsbcSysEstVLANs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysScalingGroup = apUsbcSysScalingGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysScalingGroup.setDescription('A collection of objects providing estimates for the USBC capacity.')
apUsbcSysDPDKGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 1, 4)).setObjects(("APUSBCSYS-MIB", "apUsbcSysDPDKFwdPurpose"), ("APUSBCSYS-MIB", "apUsbcSysDPDKDOSPurpose"), ("APUSBCSYS-MIB", "apUsbcSysDPDKSigPurpose"), ("APUSBCSYS-MIB", "apUsbcSysDPDKTransPurpose"), ("APUSBCSYS-MIB", "apUsbcSysDPDKCmdLine"), ("APUSBCSYS-MIB", "apUsbcSysDPDKFileMem"), ("APUSBCSYS-MIB", "apUsbcSysDPDKSysMem"), ("APUSBCSYS-MIB", "apUsbcSysDPDKNum1G"), ("APUSBCSYS-MIB", "apUsbcSysDPDKNum2MB"), ("APUSBCSYS-MIB", "apUsbcSysDPDKHypervisorType"), ("APUSBCSYS-MIB", "apUsbcSysDPDKAddFwdCores"), ("APUSBCSYS-MIB", "apUsbcSysDPDKAddSigCores"), ("APUSBCSYS-MIB", "apUsbcSysDPDKAddTransCores"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysDPDKGroup = apUsbcSysDPDKGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysDPDKGroup.setDescription('Report information for all cpus on the system.')
apUsbcSysThreadUsageTblGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 1, 5)).setObjects(("APUSBCSYS-MIB", "apThreadName"), ("APUSBCSYS-MIB", "apThreadCurrentUsage"), ("APUSBCSYS-MIB", "apThreadOverloaded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysThreadUsageTblGroup = apUsbcSysThreadUsageTblGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysThreadUsageTblGroup.setDescription('A collection of objects providing the thread level usage stats.')
apUsbcSysThreadEventTblGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 1, 6)).setObjects(("APUSBCSYS-MIB", "apThreadEventPendingCurrent"), ("APUSBCSYS-MIB", "apThreadEventPendingCurhigh"), ("APUSBCSYS-MIB", "apThreadEventPendingWindow"), ("APUSBCSYS-MIB", "apThreadEventPendingTotal"), ("APUSBCSYS-MIB", "apThreadEventPendingMaximum"), ("APUSBCSYS-MIB", "apThreadEventPendingWindow"), ("APUSBCSYS-MIB", "apThreadEventDroppedCurrent"), ("APUSBCSYS-MIB", "apThreadEventDroppedCurhigh"), ("APUSBCSYS-MIB", "apThreadEventDroppedWindow"), ("APUSBCSYS-MIB", "apThreadEventDroppedTotal"), ("APUSBCSYS-MIB", "apThreadEventDroppedMaximum"), ("APUSBCSYS-MIB", "apThreadEventDroppedWindow"), ("APUSBCSYS-MIB", "apThreadLatencyPendingAverage"), ("APUSBCSYS-MIB", "apThreadLatencyPendingMax"), ("APUSBCSYS-MIB", "apThreadLatencyProcessingAverage"), ("APUSBCSYS-MIB", "apThreadLatencyProcessingMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysThreadEventTblGroup = apUsbcSysThreadEventTblGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysThreadEventTblGroup.setDescription('A collection of objects providing the thread level event stats.')
apUsbcSysThreadSipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 1, 7)).setObjects(("APUSBCSYS-MIB", "apSipNumberOfThreads"), ("APUSBCSYS-MIB", "apSipAverageCpuUtil"), ("APUSBCSYS-MIB", "apSipPendingAverageLatency"), ("APUSBCSYS-MIB", "apSipPendingMaxLatency"), ("APUSBCSYS-MIB", "apSipProcessingAverageLatency"), ("APUSBCSYS-MIB", "apSipProcessingMaxLatency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysThreadSipGroup = apUsbcSysThreadSipGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysThreadSipGroup.setDescription('A collection of objects providing the general thread level stats.')
apUsbcSysThreadAtcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 1, 8)).setObjects(("APUSBCSYS-MIB", "apAtcpNumberOfThreads"), ("APUSBCSYS-MIB", "apAtcpAverageCpuUtil"), ("APUSBCSYS-MIB", "apAtcpPendingAverageLatency"), ("APUSBCSYS-MIB", "apAtcpPendingMaxLatency"), ("APUSBCSYS-MIB", "apAtcpProcessingAverageLatency"), ("APUSBCSYS-MIB", "apAtcpProcessingMaxLatency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysThreadAtcpGroup = apUsbcSysThreadAtcpGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysThreadAtcpGroup.setDescription('A collection of objects providing the general thread level stats.')
apUsbcSysThreadMbcdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 1, 9)).setObjects(("APUSBCSYS-MIB", "apMbcdNumberOfThreads"), ("APUSBCSYS-MIB", "apMbcdAverageCpuUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysThreadMbcdGroup = apUsbcSysThreadMbcdGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysThreadMbcdGroup.setDescription('A collection of objects providing the general thread level stats.')
apUsbcSysThreadEbmdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 1, 10)).setObjects(("APUSBCSYS-MIB", "apEbmdNumberOfThreads"), ("APUSBCSYS-MIB", "apEbmdAverageCpuUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysThreadEbmdGroup = apUsbcSysThreadEbmdGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysThreadEbmdGroup.setDescription('A collection of objects providing the EBMD thread level stats.')
apUsbcSysThreadDnsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 1, 11)).setObjects(("APUSBCSYS-MIB", "apDnsNumberOfThreads"), ("APUSBCSYS-MIB", "apDnsAverageCpuUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysThreadDnsGroup = apUsbcSysThreadDnsGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysThreadDnsGroup.setDescription('A collection of objects providing the DNS thread level stats.')
apUsbcSysSmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 1, 12)).setObjects(("APUSBCSYS-MIB", "apUsbcSysSmMsgRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysSmGroup = apUsbcSysSmGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysSmGroup.setDescription('Report information for session manager system.')
apUsbcSysFdCountExceedingTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 2, 2, 0, 1)).setObjects(("APUSBCSYS-MIB", "apUsbcSysFdCurrentCount"))
if mibBuilder.loadTexts: apUsbcSysFdCountExceedingTrap.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysFdCountExceedingTrap.setDescription('The trap will be generated when the FD count is over a threshold.')
apUsbcSysFdCountClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 2, 2, 0, 2)).setObjects(("APUSBCSYS-MIB", "apUsbcSysFdCurrentCount"))
if mibBuilder.loadTexts: apUsbcSysFdCountClearTrap.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysFdCountClearTrap.setDescription('The trap will be generated when the FD count drops below the pre-defined threshold.')
apUsbcSysFdCountGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 2, 4))
apUsbcSysFdCountGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 2, 4, 1)).setObjects(("APUSBCSYS-MIB", "apUsbcSysFdCountExceedingTrap"), ("APUSBCSYS-MIB", "apUsbcSysFdCountClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysFdCountGroup = apUsbcSysFdCountGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysFdCountGroup.setDescription('Traps to monitor system FD count.')
apUsbcSysFdObjGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 2, 5))
apUsbcSysFdObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 2, 5, 1)).setObjects(("APUSBCSYS-MIB", "apUsbcSysFdCurrentCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysFdObjGroup = apUsbcSysFdObjGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysFdObjGroup.setDescription('System FD count object.')
apUsbcSysThreadUsageExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 2, 1, 0, 1)).setObjects(("APUSBCSYS-MIB", "apThreadName"), ("APUSBCSYS-MIB", "apThreadCurrentUsage"))
if mibBuilder.loadTexts: apUsbcSysThreadUsageExceededTrap.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysThreadUsageExceededTrap.setDescription('The trap will be generated when a thread is exceeding pre-defined usage.')
apUsbcSysThreadUsageClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 2, 1, 0, 2)).setObjects(("APUSBCSYS-MIB", "apThreadName"), ("APUSBCSYS-MIB", "apThreadCurrentUsage"))
if mibBuilder.loadTexts: apUsbcSysThreadUsageClearTrap.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysThreadUsageClearTrap.setDescription('The trap will be generated when a thread is droping back under pre-defined usage.')
apUsbcSysThreadUsageOverloadEnableTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 2, 1, 0, 3)).setObjects(("APUSBCSYS-MIB", "apThreadName"))
if mibBuilder.loadTexts: apUsbcSysThreadUsageOverloadEnableTrap.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysThreadUsageOverloadEnableTrap.setDescription('The trap will be generated when a thread cpu overload is activated.')
apUsbcSysThreadUsageOverloadDisableTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 2, 1, 0, 4)).setObjects(("APUSBCSYS-MIB", "apThreadName"))
if mibBuilder.loadTexts: apUsbcSysThreadUsageOverloadDisableTrap.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysThreadUsageOverloadDisableTrap.setDescription('The trap will be generated when a thread cpu overload is de-activated.')
apUsbcSysCpuNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 2, 1))
apUsbcSysCpuNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 2, 1, 1)).setObjects(("APUSBCSYS-MIB", "apUsbcSysThreadUsageExceededTrap"), ("APUSBCSYS-MIB", "apUsbcSysThreadUsageClearTrap"), ("APUSBCSYS-MIB", "apUsbcSysThreadUsageOverloadEnableTrap"), ("APUSBCSYS-MIB", "apUsbcSysThreadUsageOverloadDisableTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysCpuNotificationsGroup = apUsbcSysCpuNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysCpuNotificationsGroup.setDescription('Traps to monitor CPU usage of threads.')
apMutexDeadLockDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 2, 1, 0, 5)).setObjects(("APUSBCSYS-MIB", "apThreadName"))
if mibBuilder.loadTexts: apMutexDeadLockDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: apMutexDeadLockDetectedTrap.setDescription('The trap will be generated when a worker thread encounters a deadlock.')
apMutexDeadLockClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 2, 1, 0, 6)).setObjects(("APUSBCSYS-MIB", "apThreadName"))
if mibBuilder.loadTexts: apMutexDeadLockClearTrap.setStatus('current')
if mibBuilder.loadTexts: apMutexDeadLockClearTrap.setDescription('The trap will be generated after the trap for thread DeadLock apMutexDeadLockDetectedTrap is generated.')
apMutexDeadLockNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 2, 2))
apMutexDeadLockNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 2, 2, 1)).setObjects(("APUSBCSYS-MIB", "apMutexDeadLockDetectedTrap"), ("APUSBCSYS-MIB", "apMutexDeadLockClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apMutexDeadLockNotificationsGroup = apMutexDeadLockNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apMutexDeadLockNotificationsGroup.setDescription('Traps to monitor mutex deadlocks for worker threads.')
apThreadNotRespBackTrace = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1152))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apThreadNotRespBackTrace.setStatus('current')
if mibBuilder.loadTexts: apThreadNotRespBackTrace.setDescription('Back trace info for the thread stack.')
apUsbcSysThreadNotRespondingTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 17, 2, 2, 1, 0, 7)).setObjects(("APUSBCSYS-MIB", "apThreadName"), ("APUSBCSYS-MIB", "apThreadNotRespBackTrace"))
if mibBuilder.loadTexts: apUsbcSysThreadNotRespondingTrap.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysThreadNotRespondingTrap.setDescription('The trap will be generated once a thread is detected not responding.')
apUsbcSysThreadNotRespNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 17, 3, 2, 3)).setObjects(("APUSBCSYS-MIB", "apUsbcSysThreadNotRespondingTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apUsbcSysThreadNotRespNotifGroup = apUsbcSysThreadNotRespNotifGroup.setStatus('current')
if mibBuilder.loadTexts: apUsbcSysThreadNotRespNotifGroup.setDescription('Traps to monitor CPU usage of threads.')
mibBuilder.exportSymbols("APUSBCSYS-MIB", apUsbcSysDPDKCmdLine=apUsbcSysDPDKCmdLine, apUsbcSysDPDKNum1G=apUsbcSysDPDKNum1G, apUsbcSysAppMemUtil=apUsbcSysAppMemUtil, apAtcpPendingMaxLatency=apAtcpPendingMaxLatency, apMbcdNumberOfThreads=apMbcdNumberOfThreads, apUsbcSysDPDKNum2MB=apUsbcSysDPDKNum2MB, apSipPendingAverageLatency=apSipPendingAverageLatency, apUsbcSysDPDKDOSPurpose=apUsbcSysDPDKDOSPurpose, apUsbcSysCpuTable=apUsbcSysCpuTable, apUsbcSysFdCountClearTrap=apUsbcSysFdCountClearTrap, apThreadUsageEntry=apThreadUsageEntry, apAtcpNumberOfThreads=apAtcpNumberOfThreads, apMutexDeadLockClearTrap=apMutexDeadLockClearTrap, apThreadName=apThreadName, apDnsNumberOfThreads=apDnsNumberOfThreads, apUsbcSysObjects=apUsbcSysObjects, apUsbcSysThreadDnsGroup=apUsbcSysThreadDnsGroup, apUsbcSysKernelMemUtil=apUsbcSysKernelMemUtil, apThreadEventDroppedTotal=apThreadEventDroppedTotal, apDnsAverageCpuUtil=apDnsAverageCpuUtil, apUsbcSysNotifPrefix=apUsbcSysNotifPrefix, apUsbcSysEstTCP=apUsbcSysEstTCP, apUsbcSysDPDKFileMem=apUsbcSysDPDKFileMem, apUsbcSysThreadMbcdGroup=apUsbcSysThreadMbcdGroup, apUsbcSysFdNotifications=apUsbcSysFdNotifications, apSipNumberOfThreads=apSipNumberOfThreads, apAtcpProcessingMaxLatency=apAtcpProcessingMaxLatency, PYSNMP_MODULE_ID=apUsbcSysModule, apUsbcSysDPDKAddSigCores=apUsbcSysDPDKAddSigCores, apUsbcSysCpuSpeedMHz=apUsbcSysCpuSpeedMHz, apEbmdAverageCpuUtil=apEbmdAverageCpuUtil, apUsbcEbmdObjects=apUsbcEbmdObjects, apUsbcSysCpuUtilAll=apUsbcSysCpuUtilAll, apThreadEventPendingCurhigh=apThreadEventPendingCurhigh, apUsbcSysThreadUsageExceededTrap=apUsbcSysThreadUsageExceededTrap, apUsbcThreadEventTable=apUsbcThreadEventTable, apUsbcSysDPDKObjects=apUsbcSysDPDKObjects, apThreadNotRespBackTrace=apThreadNotRespBackTrace, apUsbcThreadUsageTableObject=apUsbcThreadUsageTableObject, apUsbcSysFdNotif=apUsbcSysFdNotif, apUsbcAtcpObjects=apUsbcAtcpObjects, apUsbcSysFdCountGroup=apUsbcSysFdCountGroup, apAtcpPendingAverageLatency=apAtcpPendingAverageLatency, apUsbcSysCpuCount=apUsbcSysCpuCount, apUsbcSysDPDKGroup=apUsbcSysDPDKGroup, apUsbcSysDPDKFwdPurpose=apUsbcSysDPDKFwdPurpose, apThreadLatencyProcessingMax=apThreadLatencyProcessingMax, apUsbcSysThreadNotRespNotifGroup=apUsbcSysThreadNotRespNotifGroup, apUsbcSysFdCurrentCount=apUsbcSysFdCurrentCount, apUsbcSysThreadEbmdGroup=apUsbcSysThreadEbmdGroup, apThreadEventPendingHigh=apThreadEventPendingHigh, apMbcdAverageCpuUtil=apMbcdAverageCpuUtil, apUsbcSysAllBogoMips=apUsbcSysAllBogoMips, apUsbcSysNotificationGroups=apUsbcSysNotificationGroups, apUsbcSysMIBObjects=apUsbcSysMIBObjects, apUsbcSysNotificationObjects=apUsbcSysNotificationObjects, apUsbcSysThreadUsageTblGroup=apUsbcSysThreadUsageTblGroup, apUsbcSysEstG711G729Trans=apUsbcSysEstG711G729Trans, apUsbcSysObjectGroups=apUsbcSysObjectGroups, apUsbcSysFdCountExceedingTrap=apUsbcSysFdCountExceedingTrap, apThreadCurrentUsage=apThreadCurrentUsage, apUsbcSysSmObjects=apUsbcSysSmObjects, apThreadEventPendingWindow=apThreadEventPendingWindow, apSipPendingMaxLatency=apSipPendingMaxLatency, apUsbcSysThreadObjects=apUsbcSysThreadObjects, apMutexDeadLockNotificationGroups=apMutexDeadLockNotificationGroups, apThreadEventEntry=apThreadEventEntry, apUsbcSysEstACLs=apUsbcSysEstACLs, apUsbcThreadUsageTable=apUsbcThreadUsageTable, apUsbcSysCpuNum=apUsbcSysCpuNum, apUsbcSysEstSigTPS=apUsbcSysEstSigTPS, apUsbcSysCpuTblObjects=apUsbcSysCpuTblObjects, apUsbcSysFdCountGroups=apUsbcSysFdCountGroups, apUsbcSysGroup=apUsbcSysGroup, apUsbcSysThreadAtcpGroup=apUsbcSysThreadAtcpGroup, apUsbcSysModule=apUsbcSysModule, apThreadEventDroppedCurhigh=apThreadEventDroppedCurhigh, apUsbcSysFdObjGroups=apUsbcSysFdObjGroups, apUsbcSysThreadUsageClearTrap=apUsbcSysThreadUsageClearTrap, apUsbcSysEstVLANs=apUsbcSysEstVLANs, apThreadLatencyPendingAverage=apThreadLatencyPendingAverage, apThreadEventDroppedWindow=apThreadEventDroppedWindow, apUsbcSysDPDKSigPurpose=apUsbcSysDPDKSigPurpose, apUsbcSysThreadUsageOverloadEnableTrap=apUsbcSysThreadUsageOverloadEnableTrap, apUsbcSysScalingGroup=apUsbcSysScalingGroup, apUsbcSysCpuNotif=apUsbcSysCpuNotif, apUsbcSysScalingObjects=apUsbcSysScalingObjects, apUsbcSysSmMsgRate=apUsbcSysSmMsgRate, apThreadEventDroppedCurrent=apThreadEventDroppedCurrent, apUsbcSysCpuNotifications=apUsbcSysCpuNotifications, apUsbcSysCpuTblGroup=apUsbcSysCpuTblGroup, UsbcSysPercent=UsbcSysPercent, apSipProcessingMaxLatency=apSipProcessingMaxLatency, apUsbcSysNotifObjects=apUsbcSysNotifObjects, apAtcpAverageCpuUtil=apAtcpAverageCpuUtil, apUsbcSysMyBogoMips=apUsbcSysMyBogoMips, apUsbcSysThreadSipGroup=apUsbcSysThreadSipGroup, apUsbcSysSmGroup=apUsbcSysSmGroup, apSipProcessingAverageLatency=apSipProcessingAverageLatency, apThreadEventDroppedMaximum=apThreadEventDroppedMaximum, apThreadEventPendingCurrent=apThreadEventPendingCurrent, apThreadEventPendingMaximum=apThreadEventPendingMaximum, apUsbcSysEstTLS=apUsbcSysEstTLS, apThreadId=apThreadId, apUsbcSysDPDKTransPurpose=apUsbcSysDPDKTransPurpose, apThreadEventDroppedHigh=apThreadEventDroppedHigh, apUsbcSysMemSzMB=apUsbcSysMemSzMB, apThreadLatencyProcessingAverage=apThreadLatencyProcessingAverage, apUsbcSysEstSessions=apUsbcSysEstSessions, apUsbcThreadEventTableObject=apUsbcThreadEventTableObject, apUsbcSysDPDKAddTransCores=apUsbcSysDPDKAddTransCores, apAtcpProcessingAverageLatency=apAtcpProcessingAverageLatency, apMutexDeadLockDetectedTrap=apMutexDeadLockDetectedTrap, apThreadLatencyPendingMax=apThreadLatencyPendingMax, apUsbcSysCpuUtil=apUsbcSysCpuUtil, apUsbcSysThreadEventTblGroup=apUsbcSysThreadEventTblGroup, apUsbcSysThreadUsageOverloadDisableTrap=apUsbcSysThreadUsageOverloadDisableTrap, apUsbcDnsObjects=apUsbcDnsObjects, apUsbcSysDPDKSysMem=apUsbcSysDPDKSysMem, apThreadEventPendingTotal=apThreadEventPendingTotal, apUsbcSysDPDKAddFwdCores=apUsbcSysDPDKAddFwdCores, apUsbcSysConformance=apUsbcSysConformance, apUsbcSysThreadNotRespondingTrap=apUsbcSysThreadNotRespondingTrap, apUsbcSysCpuEntry=apUsbcSysCpuEntry, apEbmdNumberOfThreads=apEbmdNumberOfThreads, apUsbcSysCpuNotificationGroups=apUsbcSysCpuNotificationGroups, apUsbcSysCpuNotificationsGroup=apUsbcSysCpuNotificationsGroup, apMutexDeadLockNotificationsGroup=apMutexDeadLockNotificationsGroup, apUsbcSysMemSzGB=apUsbcSysMemSzGB, apUsbcMbcdObjects=apUsbcMbcdObjects, apUsbcSysDPDKHypervisorType=apUsbcSysDPDKHypervisorType, apThreadOverloaded=apThreadOverloaded, apSipAverageCpuUtil=apSipAverageCpuUtil, apUsbcSipObjects=apUsbcSipObjects, apUsbcSysFdObjGroup=apUsbcSysFdObjGroup)
