#
# PySNMP MIB module IEEE8021-DDCFM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/IEEE8021-DDCFM-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 10:50:10 2024
# On host fv-az665-510 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
Dot1agCfmMDLevel, Dot1agCfmMpDirection = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "Dot1agCfmMDLevel", "Dot1agCfmMpDirection")
ieee802dot1mibs, = mibBuilder.importSymbols("IEEE8021-TC-MIB", "ieee802dot1mibs")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
VlanIdOrNone, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrNone")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Unsigned32, Counter64, IpAddress, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, MibIdentifier, NotificationType, Counter32, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "Counter64", "IpAddress", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "MibIdentifier", "NotificationType", "Counter32", "Bits", "ObjectIdentity")
TextualConvention, DisplayString, RowStatus, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "MacAddress", "TruthValue")
ieee8021DdcfmMIB = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 11))
ieee8021DdcfmMIB.setRevisions(('2018-06-28 00:00', '2014-12-15 00:00', '2011-02-27 00:00', '2009-04-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021DdcfmMIB.setRevisionsDescriptions(('Published as part of IEEE Std 802.1Q-2018.\n            Cross references updated and corrected.', 'Published as part of IEEE Std 802.1Q 2014 revision.\n            Cross references updated and corrected.', 'Minor edits to contact information etc. as part of \n          2011 revision of IEEE Std 802.1Q.', 'Included in IEEE P802.1Qaw D5.0\n         Copyright (c) IEEE',))
if mibBuilder.loadTexts: ieee8021DdcfmMIB.setLastUpdated('201806280000Z')
if mibBuilder.loadTexts: ieee8021DdcfmMIB.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021DdcfmMIB.setContactInfo('WG-URL: http://www.ieee802.org/1/\n         WG-EMail: stds-802-1-L@ieee.org\n\n          Contact: IEEE 802.1 Working Group Chair\n           Postal: C/O IEEE 802.1 Working Group\n                   IEEE Standards Association\n                   445 Hoes Lane\n                   Piscataway\n                   NJ 08854\n                   USA\n           E-mail: STDS-802-1-L@IEEE.ORG')
if mibBuilder.loadTexts: ieee8021DdcfmMIB.setDescription('module for managing Data Dependent and Data Driven\n         Connectivity Fault Management.\n        \n         Unless otherwise indicated, the references in this MIB\n         module are to IEEE Std 802.1Q.\n\n         Copyright (C) IEEE (2018).\n         This version of this MIB module is part of IEEE Std 802.1Q;\n         see the draft itself for full legal notices.')
ieee8021MIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 11, 1))
ieee8021DdcfmConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 11, 2))
ieee8021DdcfmStack = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 11, 1, 1))
ieee8021DdcfmRr = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 11, 1, 2))
ieee8021DdcfmRFMReceiver = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 11, 1, 3))
ieee8021DdcfmDr = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 11, 1, 4))
ieee8021DdcfmSFMOriginator = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 11, 1, 5))
ieee8021DdcfmStackTable = MibTable((1, 3, 111, 2, 802, 1, 1, 11, 1, 1, 1), )
if mibBuilder.loadTexts: ieee8021DdcfmStackTable.setReference('12.17.1')
if mibBuilder.loadTexts: ieee8021DdcfmStackTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmStackTable.setDescription('The DDCFM Stack MIB object table. This table is for operator to \n        retrieve all the DDCFM entities defined on a specified interface. \n        This table is created by default.')
ieee8021DdcfmStackEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 11, 1, 1, 1, 1), ).setIndexNames((0, "IEEE8021-DDCFM-MIB", "ieee8021DdcfmStackIfIndex"))
if mibBuilder.loadTexts: ieee8021DdcfmStackEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmStackEntry.setDescription('The DDCFM Stack Table. ')
ieee8021DdcfmStackIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021DdcfmStackIfIndex.setReference('12.17.1.1.2 a.1')
if mibBuilder.loadTexts: ieee8021DdcfmStackIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmStackIfIndex.setDescription('This object is the interface index of the interface either a\n         Bridge Port, or an aggregated port within a Bridge\n         Port. When the ifIndex value corresponds to the ifIndex of a\n         Bridge Port, the value in this column must match the value in the\n         ieee8021BridgeBasePortIfIndex column for the Bridge Port.')
ieee8021DdcfmStackRrMdLevel = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 1, 1, 1, 2), Dot1agCfmMDLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmStackRrMdLevel.setReference('12.17.1.1.3 b.1')
if mibBuilder.loadTexts: ieee8021DdcfmStackRrMdLevel.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmStackRrMdLevel.setDescription('MD level of the Reflection Responder managed object.')
ieee8021DdcfmStackRrDirection = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 1, 1, 1, 3), Dot1agCfmMpDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmStackRrDirection.setReference('12.17.1.1.3 b1')
if mibBuilder.loadTexts: ieee8021DdcfmStackRrDirection.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmStackRrDirection.setDescription('The direction in which the RR faces.')
ieee8021DdcfmStackRFMreceiverMdLevel = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 1, 1, 1, 4), Dot1agCfmMDLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmStackRFMreceiverMdLevel.setReference('12.17.1.1.3 b.2')
if mibBuilder.loadTexts: ieee8021DdcfmStackRFMreceiverMdLevel.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmStackRFMreceiverMdLevel.setDescription('MD level of the RFM Receiver MO configured on the interface.')
ieee8021DdcfmStackDrMdLevel = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 1, 1, 1, 5), Dot1agCfmMDLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmStackDrMdLevel.setReference('12.17.1.1.3 b.3')
if mibBuilder.loadTexts: ieee8021DdcfmStackDrMdLevel.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmStackDrMdLevel.setDescription('MD level of the Deflection Responder managed object.')
ieee8021DdcfmStackDrVlanIdOrNone = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 1, 1, 1, 6), VlanIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmStackDrVlanIdOrNone.setReference('12.17.1.1.3 b.3')
if mibBuilder.loadTexts: ieee8021DdcfmStackDrVlanIdOrNone.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmStackDrVlanIdOrNone.setDescription('The MA of the DR configured on the interface.')
ieee8021DdcfmStackSFMOriginatorMdLevel = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 1, 1, 1, 7), Dot1agCfmMDLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmStackSFMOriginatorMdLevel.setReference('12.17.1.1.3 b.4')
if mibBuilder.loadTexts: ieee8021DdcfmStackSFMOriginatorMdLevel.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmStackSFMOriginatorMdLevel.setDescription('MD level of the SFM Originator MO configured on the interface.')
ieee8021DdcfmStackSFMOriginatorVlanIdOrNone = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 1, 1, 1, 8), VlanIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmStackSFMOriginatorVlanIdOrNone.setReference('12.17.1.1.3 b.4')
if mibBuilder.loadTexts: ieee8021DdcfmStackSFMOriginatorVlanIdOrNone.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmStackSFMOriginatorVlanIdOrNone.setDescription('The MA of the SFM Originator configured on the interface.')
ieee8021DdcfmStackSFMOriginatorDirection = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 1, 1, 1, 9), Dot1agCfmMpDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmStackSFMOriginatorDirection.setReference('12.17.1.1.3 b.4')
if mibBuilder.loadTexts: ieee8021DdcfmStackSFMOriginatorDirection.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmStackSFMOriginatorDirection.setDescription('The direction of which the SFM Originator is facing.')
ieee8021DdcfmRrTable = MibTable((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1), )
if mibBuilder.loadTexts: ieee8021DdcfmRrTable.setReference('12.17.2')
if mibBuilder.loadTexts: ieee8021DdcfmRrTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrTable.setDescription('The Reflection Responder MIB object table. Each row\n        in the table represents a different Reflection Responder. \n        All rows in this table persist across a system restart, \n        however after such a restart, the value of the \n        ActivationStatus column will be false.')
ieee8021DdcfmRrEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1), ).setIndexNames((0, "IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrIfIndex"), (0, "IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrMdIndex"), (0, "IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrDirection"))
if mibBuilder.loadTexts: ieee8021DdcfmRrEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrEntry.setDescription('The Reflection Responder. Each entry associated with a Reflection\n         Responder.')
ieee8021DdcfmRrIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021DdcfmRrIfIndex.setReference('12.17.2.1.2 a.1')
if mibBuilder.loadTexts: ieee8021DdcfmRrIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrIfIndex.setDescription('This object is the interface index of the interface either a\n         Bridge Port, or an aggregated port within a Bridge\n         Port, on which Reflection Responder is defined. \n         When the ifIndex value corresponds to the ifIndex of a\n         Bridge Port, the value in this column must match the value in the\n         ieee8021BridgeBasePortIfIndex column for the Bridge Port.')
ieee8021DdcfmRrMdIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 2), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: ieee8021DdcfmRrMdIndex.setReference('12.17.2.1.2 a.2')
if mibBuilder.loadTexts: ieee8021DdcfmRrMdIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrMdIndex.setDescription('MD level of the Reflection Responder managed object.')
ieee8021DdcfmRrDirection = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 3), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: ieee8021DdcfmRrDirection.setReference('12.17.2.1.2 a.3')
if mibBuilder.loadTexts: ieee8021DdcfmRrDirection.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrDirection.setDescription('The direction in which the RR faces.')
ieee8021DdcfmRrPrimaryVlanIdOrNone = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 4), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmRrPrimaryVlanIdOrNone.setReference('12.17.2.2.2 b.1')
if mibBuilder.loadTexts: ieee8021DdcfmRrPrimaryVlanIdOrNone.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrPrimaryVlanIdOrNone.setDescription('The VID to be used on RFM frames.')
ieee8021DdcfmRrFilter = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmRrFilter.setReference('12.17.2.2.2 b.2')
if mibBuilder.loadTexts: ieee8021DdcfmRrFilter.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrFilter.setDescription('A pattern string specifies what data frames are selected to be\n        reflected. Below are the primary Reflection Filters all\n        Implementers should support. Multiple primary filters can be\n        combined together by\n         && (and), || (or), or !(negation).\n         1) All;\n         2) VID= vid;\n         3) I-SID = x;\n         4) DA = xx.xx.xx.xx.xx.xx;\n         5) SA = xx.xx.xx.xx.xx.xx;\n         6) EtherType =xx.\n        For the reason that this management object allows a max size of\n        1500, messages carrying this object may be fragmented on some\n        segments.')
ieee8021DdcfmRrSamplingInterval = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 6), Unsigned32()).setUnits('miliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmRrSamplingInterval.setReference('12.17.2.2.2 b.3')
if mibBuilder.loadTexts: ieee8021DdcfmRrSamplingInterval.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrSamplingInterval.setDescription('Indicates a time interval in which only the first frame matching\n        the filter conditions is refected.')
ieee8021DdcfmRrTargetAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmRrTargetAddress.setReference('12.17.2.2.2 b.4')
if mibBuilder.loadTexts: ieee8021DdcfmRrTargetAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrTargetAddress.setDescription('The Reflection Target Address, which is a MAC address to which the\n        reflected frames are targeted. Only individual address is allowed\n        for the Reflection Target Address. \n        If not specified, the source_address of the selected data frame is\n        used for Reflection Target Address.')
ieee8021DdcfmRrContinueFlag = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 8), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmRrContinueFlag.setReference('12.17.2.2.2 b.5')
if mibBuilder.loadTexts: ieee8021DdcfmRrContinueFlag.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrContinueFlag.setDescription('True indicates that the selected data frames are to be continued\n         towards the DA specified in the frame header.\n         False indicates that the selected data frames are terminated.')
ieee8021DdcfmRrDuration = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmRrDuration.setReference('12.17.2.2.2 b.7')
if mibBuilder.loadTexts: ieee8021DdcfmRrDuration.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrDuration.setDescription('Duration of time in the unit of seconds or the number\n         of frames to be reflected, for Reflection Responder to\n         remain active after activation; Minimum 2 octets (65536\n         seconds) are needed for the duration of time;')
ieee8021DdcfmRrDurationInTimeFlag = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 10), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmRrDurationInTimeFlag.setReference('12.17.2.2.2 b.6')
if mibBuilder.loadTexts: ieee8021DdcfmRrDurationInTimeFlag.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrDurationInTimeFlag.setDescription('True indicates that duration is in seconds;\n         False indicates that duration is by the total number of frames reflected.')
ieee8021DdcfmRrVlanPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmRrVlanPriority.setReference('12.17.2.2.2 b.9')
if mibBuilder.loadTexts: ieee8021DdcfmRrVlanPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrVlanPriority.setDescription('Priority, 3 bit value to be used in the VLAN tag, to be used in the\n         transmitted encapsulated frames. The default value is the highest \n         priority.')
ieee8021DdcfmRrVlanDropEligible = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmRrVlanDropEligible.setReference('12.17.2.2.2 b.9')
if mibBuilder.loadTexts: ieee8021DdcfmRrVlanDropEligible.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrVlanDropEligible.setDescription('It indicates that drop_eligible bit value to be used in \n        the VLAN tag which to be used in the transmitted encapsulated\n        frames is set as True or False accordingly.')
ieee8021DdcfmRrFloodingFlag = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmRrFloodingFlag.setReference('12.17.2.2.2 b.10')
if mibBuilder.loadTexts: ieee8021DdcfmRrFloodingFlag.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrFloodingFlag.setDescription('True indicates that flooding is allowed if Egress port cannot be\n         identified for RFM by the Filtering Database, False otherwise.')
ieee8021DdcfmRrTruncationFlag = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 14), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmRrTruncationFlag.setReference('12.17.2.2.2 b.11')
if mibBuilder.loadTexts: ieee8021DdcfmRrTruncationFlag.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrTruncationFlag.setDescription("True indicates that the received data frame will be truncated to\n        keep the contructed RFM size not exceeding the egress port's \n        Maximum Service Data Unit Size, False otherwise.")
ieee8021DdcfmRrActivationStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmRrActivationStatus.setReference('12.17.2.2.2 b.12')
if mibBuilder.loadTexts: ieee8021DdcfmRrActivationStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrActivationStatus.setDescription('True When receiving a request to activate a Reflection Responder,\n        False When receiving a request to stop Reflection Responder or\n        its timer expires.')
ieee8021DdcfmRrRemainDuration = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 16), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmRrRemainDuration.setReference('12.17.2.2.2 b.13')
if mibBuilder.loadTexts: ieee8021DdcfmRrRemainDuration.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrRemainDuration.setDescription('The value indicates the time, in the unit of seconds, or count\n        left for Reflection Responder to be active.')
ieee8021DdcfmRrNextRfmTransID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmRrNextRfmTransID.setReference('12.17.2.2.2 b.14')
if mibBuilder.loadTexts: ieee8021DdcfmRrNextRfmTransID.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrNextRfmTransID.setDescription('It indicates the value of RFM Transaction Identifier field of the\n        next RFM transmitted. It is incremented by 1 with each\n        transmission of RFM.')
ieee8021DdcfmRrRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 2, 1, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmRrRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrRowStatus.setDescription('The status of the row.\n        The writable columns in a row cannot be changed if the row is\n        active.')
ieee8021DdcfmRFMReceiverTable = MibTable((1, 3, 111, 2, 802, 1, 1, 11, 1, 3, 1), )
if mibBuilder.loadTexts: ieee8021DdcfmRFMReceiverTable.setReference('12.17.3')
if mibBuilder.loadTexts: ieee8021DdcfmRFMReceiverTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRFMReceiverTable.setDescription('The RFM Receiver MIB object table. Each row in the table\n        represents a different RFM Receiver.\n        All rows associated with this table persist across system restart.')
ieee8021DdcfmRFMReceiverEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 11, 1, 3, 1, 1), ).setIndexNames((0, "IEEE8021-DDCFM-MIB", "ieee8021DdcfmRfmReceiverIfIndex"), (0, "IEEE8021-DDCFM-MIB", "ieee8021DdcfmRfmReceiverMdIndex"))
if mibBuilder.loadTexts: ieee8021DdcfmRFMReceiverEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRFMReceiverEntry.setDescription('The DDCFM RFM Receiver. Each entry associated with a DDCFM RFM\n        Receiver that reference to a MP.')
ieee8021DdcfmRfmReceiverIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021DdcfmRfmReceiverIfIndex.setReference('12.17.3.1.2 a.2 ')
if mibBuilder.loadTexts: ieee8021DdcfmRfmReceiverIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRfmReceiverIfIndex.setDescription('The interface index of the interface either a\n         Bridge Port, or an aggregated port within a Bridge\n         Port, on which the RFM Receiver is created.\n         When the ifIndex value corresponds to the ifIndex of a\n         Bridge Port, the value in this column must match the value in the\n         ieee8021BridgeBasePortIfIndex column for the Bridge Port.')
ieee8021DdcfmRfmReceiverMdIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 3, 1, 1, 2), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: ieee8021DdcfmRfmReceiverMdIndex.setReference('12.17.3.1.2 a.2')
if mibBuilder.loadTexts: ieee8021DdcfmRfmReceiverMdIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRfmReceiverMdIndex.setDescription('MD level of the RFM Receiver managed object.')
ieee8021DdcfmRFMRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmRFMRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRFMRowStatus.setDescription('The status of the row.\n        The writable columns in a row cannot be changed if the row is\n        active.')
ieee8021DdcfmDrTable = MibTable((1, 3, 111, 2, 802, 1, 1, 11, 1, 4, 1), )
if mibBuilder.loadTexts: ieee8021DdcfmDrTable.setReference('12.17.4')
if mibBuilder.loadTexts: ieee8021DdcfmDrTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmDrTable.setDescription('The DDCFM Decapsulator Responder MIB object table. Each row in the\n        table represents a different DDCFM Decapsulator Responder. All rows \n        in this table persist across a system restart; however after such\n        a restart, the value of the ActivationStatus column will be false.')
ieee8021DdcfmDrEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 11, 1, 4, 1, 1), ).setIndexNames((0, "IEEE8021-DDCFM-MIB", "ieee8021DdcfmDrIfIndex"), (0, "IEEE8021-DDCFM-MIB", "ieee8021DdcfmDrMdIndex"), (0, "IEEE8021-DDCFM-MIB", "ieee8021DdcfmDrVlanIdOrNone"))
if mibBuilder.loadTexts: ieee8021DdcfmDrEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmDrEntry.setDescription('The DDCFM Decapsulator Responder. Each entry associated with a\n        DDCFM RFM Receiver which reference to a MP.')
ieee8021DdcfmDrIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021DdcfmDrIfIndex.setReference('12.17.4.1.2 a.2 ')
if mibBuilder.loadTexts: ieee8021DdcfmDrIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmDrIfIndex.setDescription('The interface index of the interface either a Bridge\n         Port, or an aggregated port within a Bridge\n         Port, on which the Decapsulator Responder is created.\n         When the ifIndex value corresponds to the ifIndex of a\n         Bridge Port, the value in this column must match the value in the\n         ieee8021BridgeBasePortIfIndex column for the Bridge Port.')
ieee8021DdcfmDrMdIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 4, 1, 1, 2), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: ieee8021DdcfmDrMdIndex.setReference('12.17.4.1.2 a.2')
if mibBuilder.loadTexts: ieee8021DdcfmDrMdIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmDrMdIndex.setDescription('MD level of the Decapsulator Responder managed object.')
ieee8021DdcfmDrVlanIdOrNone = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 4, 1, 1, 3), VlanIdOrNone())
if mibBuilder.loadTexts: ieee8021DdcfmDrVlanIdOrNone.setReference('12.17.4.1.2 a.2')
if mibBuilder.loadTexts: ieee8021DdcfmDrVlanIdOrNone.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmDrVlanIdOrNone.setDescription('An integer indicating the VID expected from the Send Frame Message\n        frames.')
ieee8021DdcfmDrSfmOriginator = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 4, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmDrSfmOriginator.setReference('12.17.4.2.3 b.2')
if mibBuilder.loadTexts: ieee8021DdcfmDrSfmOriginator.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmDrSfmOriginator.setDescription('MAC address reference to the corresponding Send Frame Message\n        Originator.')
ieee8021DdcfmDrSourceAddressStayFlag = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 4, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmDrSourceAddressStayFlag.setReference('12.17.4.2.3 b.3')
if mibBuilder.loadTexts: ieee8021DdcfmDrSourceAddressStayFlag.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmDrSourceAddressStayFlag.setDescription("True indicates that Decapsulator Responder does not replace the \n        source_address field of the decapsulated frame with the\n        Decapsulator Responder's own MAC address, False otherwise.")
ieee8021DdcfmDrFloodingFlag = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 4, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmDrFloodingFlag.setReference('12.17.4.3.2 b.3')
if mibBuilder.loadTexts: ieee8021DdcfmDrFloodingFlag.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmDrFloodingFlag.setDescription('True indicates that broadcast is allowed if Egress port cannot be\n         identified by the Filtering Database, False otherwise.')
ieee8021DdcfmDrDuration = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 4, 1, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmDrDuration.setReference('12.17.4.3.2 b.4')
if mibBuilder.loadTexts: ieee8021DdcfmDrDuration.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmDrDuration.setDescription('The time that the Decapsulator Responder can stay active after\n        its activation in the unit of seconds.')
ieee8021DdcfmDrActivationStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 4, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmDrActivationStatus.setReference('12.17.4.2.3 b.6')
if mibBuilder.loadTexts: ieee8021DdcfmDrActivationStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmDrActivationStatus.setDescription('True When receiving a request to activate a Decapsulator\n        Responder, false When receiving a request to stop the Decapsulator\n        Responder or its timer expires.')
ieee8021DdcfmDrRemainDuration = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 4, 1, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmDrRemainDuration.setReference('12.17.4.2.3 b.7')
if mibBuilder.loadTexts: ieee8021DdcfmDrRemainDuration.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmDrRemainDuration.setDescription('The value indicates the time left for Decapsulator Responder keep\n         active. Its granularity is in seconds.')
ieee8021DdcfmDrSFMsequenceErrors = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 4, 1, 1, 10), Unsigned32()).setUnits('integer').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmDrSFMsequenceErrors.setReference('12.17.4.2.3 b.8')
if mibBuilder.loadTexts: ieee8021DdcfmDrSFMsequenceErrors.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmDrSFMsequenceErrors.setDescription('The value indicates the total number of out-of-sequence SFMs.')
ieee8021DdcfmDrRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 4, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmDrRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmDrRowStatus.setDescription('The status of the row.\n        The writable columns in a row cannot be changed if the row is\n        active.')
ieee8021DdcfmSoTable = MibTable((1, 3, 111, 2, 802, 1, 1, 11, 1, 5, 1), )
if mibBuilder.loadTexts: ieee8021DdcfmSoTable.setReference('12.17.5')
if mibBuilder.loadTexts: ieee8021DdcfmSoTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmSoTable.setDescription('The DDCFM Send Frame Message Originator MIB object table. Each row\n        in the table represents a different DDCFM Send Frame Message\n        Originator. All rows in this table persist across a system restart;\n        however after such a restart, the value of the ActivationStatus\n        column will be false.')
ieee8021DdcfmSoEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 11, 1, 5, 1, 1), ).setIndexNames((0, "IEEE8021-DDCFM-MIB", "ieee8021DdcfmSfmIfIndex"), (0, "IEEE8021-DDCFM-MIB", "ieee8021DdcfmSoMdIndex"), (0, "IEEE8021-DDCFM-MIB", "ieee8021DdcfmSoVlanIdOrNone"), (0, "IEEE8021-DDCFM-MIB", "ieee8021DdcfmSoDirection"))
if mibBuilder.loadTexts: ieee8021DdcfmSoEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmSoEntry.setDescription('Each entry associated with a Send Frame Message Originator.')
ieee8021DdcfmSfmIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 5, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021DdcfmSfmIfIndex.setReference('12.17.5.1.2 a.2')
if mibBuilder.loadTexts: ieee8021DdcfmSfmIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmSfmIfIndex.setDescription('The interface index of the interface either a Bridge\n         port, or an aggregated port within a Bridge\n         port, on which Send Frame Message Originator is created.\n         When the ifIndex value corresponds to the ifIndex of a\n         Bridge Port, the value in this column must match the value in the\n         ieee8021BridgeBasePortIfIndex column for the Bridge Port.')
ieee8021DdcfmSoMdIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 5, 1, 1, 2), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: ieee8021DdcfmSoMdIndex.setReference('12.17.5.1.2 a.2')
if mibBuilder.loadTexts: ieee8021DdcfmSoMdIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmSoMdIndex.setDescription('MD level of the Send Frame Message Originator managed object.')
ieee8021DdcfmSoVlanIdOrNone = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 5, 1, 1, 3), VlanIdOrNone())
if mibBuilder.loadTexts: ieee8021DdcfmSoVlanIdOrNone.setReference('12.17.5.1.2 a.2')
if mibBuilder.loadTexts: ieee8021DdcfmSoVlanIdOrNone.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmSoVlanIdOrNone.setDescription('An integer indicating the VID to be used on Send Frame Message\n        frames.')
ieee8021DdcfmSoDirection = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 5, 1, 1, 4), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: ieee8021DdcfmSoDirection.setReference('12.17.5.1.2 a.2')
if mibBuilder.loadTexts: ieee8021DdcfmSoDirection.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmSoDirection.setDescription('The direction in which the SFM Originator faces.')
ieee8021DdcfmSoDrMacAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 5, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmSoDrMacAddress.setReference('12.17.5.4.2 b')
if mibBuilder.loadTexts: ieee8021DdcfmSoDrMacAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmSoDrMacAddress.setDescription('MAC Address of the corresponding Decapsulator Responder.')
ieee8021DdcfmSoDuration = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 5, 1, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmSoDuration.setReference('12.17.5.4.2 c')
if mibBuilder.loadTexts: ieee8021DdcfmSoDuration.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmSoDuration.setDescription('Duration, in the unit of seconds, of Send Frame Message Originator \n         staying active once activated.')
ieee8021DdcfmSoActivationStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 5, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmSoActivationStatus.setReference('12.17.5.2.3 b.4')
if mibBuilder.loadTexts: ieee8021DdcfmSoActivationStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmSoActivationStatus.setDescription('True When receiving a request to activate a Send Frame Message\n        Originator, false When receiving a request to stop the Send Frame\n        Message Originator or its timer expires.')
ieee8021DdcfmSoRemainDuration = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 5, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021DdcfmSoRemainDuration.setReference('12.17.5.2.3 b.5')
if mibBuilder.loadTexts: ieee8021DdcfmSoRemainDuration.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmSoRemainDuration.setDescription('The value indicates the time left for Send Frame Message\n        Originator keep active. Its granularity is in seconds.')
ieee8021DdcfmSoRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 11, 1, 5, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021DdcfmSoRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmSoRowStatus.setDescription('The status of the row.\n        The writable columns in a row cannot be changed if the row is\n        active.')
ieee8021DdcfmCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 11, 2, 1))
ieee8021DdcfmGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 11, 2, 2))
ieee8021DdcfmStackGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 11, 2, 2, 1)).setObjects(("IEEE8021-DDCFM-MIB", "ieee8021DdcfmStackRrMdLevel"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmStackRrDirection"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmStackRFMreceiverMdLevel"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmStackDrMdLevel"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmStackDrVlanIdOrNone"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmStackSFMOriginatorMdLevel"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmStackSFMOriginatorVlanIdOrNone"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmStackSFMOriginatorDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021DdcfmStackGroup = ieee8021DdcfmStackGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmStackGroup.setDescription('Objects for the DDCFM Stack group.')
ieee8021DdcfmRrGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 11, 2, 2, 2)).setObjects(("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrPrimaryVlanIdOrNone"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrFilter"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrSamplingInterval"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrTargetAddress"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrContinueFlag"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrDuration"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrDurationInTimeFlag"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrVlanPriority"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrVlanDropEligible"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrFloodingFlag"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrTruncationFlag"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrActivationStatus"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrRemainDuration"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrNextRfmTransID"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021DdcfmRrGroup = ieee8021DdcfmRrGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRrGroup.setDescription('Objects for the Reflection Responder group.')
ieee8021DdcfmRFMReceiverGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 11, 2, 2, 3)).setObjects(("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRFMRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021DdcfmRFMReceiverGroup = ieee8021DdcfmRFMReceiverGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmRFMReceiverGroup.setDescription('Objects for the RFM Receiver group.')
ieee8021DdcfmDrGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 11, 2, 2, 4)).setObjects(("IEEE8021-DDCFM-MIB", "ieee8021DdcfmDrSourceAddressStayFlag"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmDrSfmOriginator"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmDrFloodingFlag"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmDrDuration"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmDrActivationStatus"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmDrRemainDuration"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmDrSFMsequenceErrors"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmDrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021DdcfmDrGroup = ieee8021DdcfmDrGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmDrGroup.setDescription('Objects for the Decapsulator Responder group.')
ieee8021DdcfmSoGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 11, 2, 2, 5)).setObjects(("IEEE8021-DDCFM-MIB", "ieee8021DdcfmSoDrMacAddress"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmSoDuration"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmSoActivationStatus"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmSoRemainDuration"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmSoRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021DdcfmSoGroup = ieee8021DdcfmSoGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmSoGroup.setDescription('Objects for the Send Frame Message Originator group.')
ieee8021DdcfmCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 11, 2, 1, 1)).setObjects(("IEEE8021-DDCFM-MIB", "ieee8021DdcfmStackGroup"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRrGroup"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmRFMReceiverGroup"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmDrGroup"), ("IEEE8021-DDCFM-MIB", "ieee8021DdcfmSoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021DdcfmCompliance = ieee8021DdcfmCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021DdcfmCompliance.setDescription('The compliance statement for support of the DDCFM MIB module.')
mibBuilder.exportSymbols("IEEE8021-DDCFM-MIB", ieee8021DdcfmSoDrMacAddress=ieee8021DdcfmSoDrMacAddress, ieee8021DdcfmGroups=ieee8021DdcfmGroups, ieee8021DdcfmDrIfIndex=ieee8021DdcfmDrIfIndex, ieee8021DdcfmSoRemainDuration=ieee8021DdcfmSoRemainDuration, ieee8021DdcfmStack=ieee8021DdcfmStack, ieee8021DdcfmRrFilter=ieee8021DdcfmRrFilter, ieee8021DdcfmSoTable=ieee8021DdcfmSoTable, ieee8021DdcfmRrMdIndex=ieee8021DdcfmRrMdIndex, ieee8021DdcfmSfmIfIndex=ieee8021DdcfmSfmIfIndex, ieee8021DdcfmDrActivationStatus=ieee8021DdcfmDrActivationStatus, ieee8021DdcfmStackSFMOriginatorDirection=ieee8021DdcfmStackSFMOriginatorDirection, ieee8021DdcfmRrContinueFlag=ieee8021DdcfmRrContinueFlag, ieee8021DdcfmRrTargetAddress=ieee8021DdcfmRrTargetAddress, ieee8021DdcfmSoGroup=ieee8021DdcfmSoGroup, ieee8021DdcfmStackRrMdLevel=ieee8021DdcfmStackRrMdLevel, ieee8021DdcfmRFMReceiverGroup=ieee8021DdcfmRFMReceiverGroup, ieee8021DdcfmDrSfmOriginator=ieee8021DdcfmDrSfmOriginator, ieee8021DdcfmRFMReceiver=ieee8021DdcfmRFMReceiver, ieee8021DdcfmRrActivationStatus=ieee8021DdcfmRrActivationStatus, ieee8021DdcfmDrFloodingFlag=ieee8021DdcfmDrFloodingFlag, ieee8021DdcfmDrRowStatus=ieee8021DdcfmDrRowStatus, ieee8021DdcfmSoVlanIdOrNone=ieee8021DdcfmSoVlanIdOrNone, ieee8021DdcfmSoActivationStatus=ieee8021DdcfmSoActivationStatus, PYSNMP_MODULE_ID=ieee8021DdcfmMIB, ieee8021DdcfmRrFloodingFlag=ieee8021DdcfmRrFloodingFlag, ieee8021DdcfmRfmReceiverMdIndex=ieee8021DdcfmRfmReceiverMdIndex, ieee8021DdcfmSoDirection=ieee8021DdcfmSoDirection, ieee8021DdcfmRrEntry=ieee8021DdcfmRrEntry, ieee8021DdcfmDr=ieee8021DdcfmDr, ieee8021DdcfmDrVlanIdOrNone=ieee8021DdcfmDrVlanIdOrNone, ieee8021DdcfmRrPrimaryVlanIdOrNone=ieee8021DdcfmRrPrimaryVlanIdOrNone, ieee8021DdcfmCompliance=ieee8021DdcfmCompliance, ieee8021DdcfmDrSFMsequenceErrors=ieee8021DdcfmDrSFMsequenceErrors, ieee8021DdcfmSoMdIndex=ieee8021DdcfmSoMdIndex, ieee8021DdcfmRrVlanDropEligible=ieee8021DdcfmRrVlanDropEligible, ieee8021DdcfmStackIfIndex=ieee8021DdcfmStackIfIndex, ieee8021DdcfmDrTable=ieee8021DdcfmDrTable, ieee8021DdcfmDrMdIndex=ieee8021DdcfmDrMdIndex, ieee8021DdcfmMIB=ieee8021DdcfmMIB, ieee8021DdcfmDrSourceAddressStayFlag=ieee8021DdcfmDrSourceAddressStayFlag, ieee8021DdcfmRFMRowStatus=ieee8021DdcfmRFMRowStatus, ieee8021DdcfmRrTable=ieee8021DdcfmRrTable, ieee8021DdcfmRrDirection=ieee8021DdcfmRrDirection, ieee8021DdcfmRFMReceiverEntry=ieee8021DdcfmRFMReceiverEntry, ieee8021DdcfmSoEntry=ieee8021DdcfmSoEntry, ieee8021DdcfmRrGroup=ieee8021DdcfmRrGroup, ieee8021DdcfmStackSFMOriginatorMdLevel=ieee8021DdcfmStackSFMOriginatorMdLevel, ieee8021DdcfmConformance=ieee8021DdcfmConformance, ieee8021DdcfmRr=ieee8021DdcfmRr, ieee8021DdcfmRFMReceiverTable=ieee8021DdcfmRFMReceiverTable, ieee8021DdcfmRrRowStatus=ieee8021DdcfmRrRowStatus, ieee8021DdcfmStackEntry=ieee8021DdcfmStackEntry, ieee8021DdcfmRrVlanPriority=ieee8021DdcfmRrVlanPriority, ieee8021DdcfmStackDrMdLevel=ieee8021DdcfmStackDrMdLevel, ieee8021DdcfmRrSamplingInterval=ieee8021DdcfmRrSamplingInterval, ieee8021DdcfmRrNextRfmTransID=ieee8021DdcfmRrNextRfmTransID, ieee8021DdcfmDrRemainDuration=ieee8021DdcfmDrRemainDuration, ieee8021DdcfmStackGroup=ieee8021DdcfmStackGroup, ieee8021DdcfmStackDrVlanIdOrNone=ieee8021DdcfmStackDrVlanIdOrNone, ieee8021DdcfmSFMOriginator=ieee8021DdcfmSFMOriginator, ieee8021DdcfmDrGroup=ieee8021DdcfmDrGroup, ieee8021DdcfmStackSFMOriginatorVlanIdOrNone=ieee8021DdcfmStackSFMOriginatorVlanIdOrNone, ieee8021DdcfmRrDuration=ieee8021DdcfmRrDuration, ieee8021DdcfmDrDuration=ieee8021DdcfmDrDuration, ieee8021DdcfmStackRrDirection=ieee8021DdcfmStackRrDirection, ieee8021MIBObjects=ieee8021MIBObjects, ieee8021DdcfmRrRemainDuration=ieee8021DdcfmRrRemainDuration, ieee8021DdcfmRrDurationInTimeFlag=ieee8021DdcfmRrDurationInTimeFlag, ieee8021DdcfmCompliances=ieee8021DdcfmCompliances, ieee8021DdcfmSoDuration=ieee8021DdcfmSoDuration, ieee8021DdcfmRfmReceiverIfIndex=ieee8021DdcfmRfmReceiverIfIndex, ieee8021DdcfmStackRFMreceiverMdLevel=ieee8021DdcfmStackRFMreceiverMdLevel, ieee8021DdcfmSoRowStatus=ieee8021DdcfmSoRowStatus, ieee8021DdcfmRrTruncationFlag=ieee8021DdcfmRrTruncationFlag, ieee8021DdcfmStackTable=ieee8021DdcfmStackTable, ieee8021DdcfmRrIfIndex=ieee8021DdcfmRrIfIndex, ieee8021DdcfmDrEntry=ieee8021DdcfmDrEntry)
