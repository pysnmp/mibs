#
# PySNMP MIB module SIAE-IFEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/siae/SIAE-IFEXT-MIB
# Produced by pysmi-1.1.12 at Mon Oct 28 02:14:54 2024
# On host fv-az1014-591 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
AlarmSeverityCode, AlarmStatus = mibBuilder.importSymbols("SIAE-ALARM-MIB", "AlarmSeverityCode", "AlarmStatus")
siaeMib, = mibBuilder.importSymbols("SIAE-TREE-MIB", "siaeMib")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, IpAddress, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, TimeTicks, NotificationType, Counter64, Gauge32, Integer32, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "TimeTicks", "NotificationType", "Counter64", "Gauge32", "Integer32", "ObjectIdentity", "Unsigned32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
ifext = ModuleIdentity((1, 3, 6, 1, 4, 1, 3373, 1103, 73))
ifext.setRevisions(('2016-04-18 00:00', '2015-07-21 00:00', '2014-12-02 00:00', '2014-09-26 00:00', '2014-06-05 00:00', '2014-02-21 00:00', '2013-10-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ifext.setRevisionsDescriptions(('Added ifextCapability10gBps to ifextCapabilities.\n            ', 'Added ifextCapabilityMabSensor and ifextCapabilityEncrypt to\n             ifextCapabilities.\n            ', 'Added ifextCapability2g5Bps to ifextCapabilities.\n            ', 'Changed MAX-ACCESS of ifextMediumSelection from read-write to\n             read-only\n             Changed MAX-ACCESS of ifextAlarmReportEnable from read-write\n             to read-create\n            ', 'Added unused(0) to ifextPortUsage enumeration.\n            ', 'Improved description of ifextMibVersion\n             Removed Autonegotiation alarm\n            ', 'Initial version 01.00.00\n            ',))
if mibBuilder.loadTexts: ifext.setLastUpdated('201604180000Z')
if mibBuilder.loadTexts: ifext.setOrganization('SIAE MICROELETTRONICA spa')
if mibBuilder.loadTexts: ifext.setContactInfo('SIAE MICROELETTONICA s.p.a.\n             Via Michelangelo Buonarroti, 21\n             20093 - Cologno Monzese\n             Milano - ITALY\n             Phone :  +39-02-27325-1\n             E-mail: tbd@siaemic.com\n            ')
if mibBuilder.loadTexts: ifext.setDescription("SIAE's Interface Extension MIB.\n            ")
ifextMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifextMibVersion.setStatus('current')
if mibBuilder.loadTexts: ifextMibVersion.setDescription('Numerical version of this module.\n             The string version of this MIB have the following format:\n                XX.YY.ZZ\n             so, for example, the value 1 should be interpreted as 00.00.01\n             and the value 10001 should be interpreted as 01.00.01.')
ifextTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 2), )
if mibBuilder.loadTexts: ifextTable.setStatus('current')
if mibBuilder.loadTexts: ifextTable.setDescription("Table with SIAE's Interface extension records.")
ifextTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 2, 1), ).setIndexNames((0, "SIAE-IFEXT-MIB", "ifextIfIndex"))
if mibBuilder.loadTexts: ifextTableEntry.setStatus('current')
if mibBuilder.loadTexts: ifextTableEntry.setDescription("SIAE's Interface extension record.")
ifextIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ifextIfIndex.setStatus('current')
if mibBuilder.loadTexts: ifextIfIndex.setDescription('A unique value, greater than zero, for each\n            interface. This object is identical to the ifIndex\n            of the standard MIB-2 ifTable.')
ifextLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifextLabel.setStatus('current')
if mibBuilder.loadTexts: ifextLabel.setDescription('A textual string containing information about the\n            interface.')
ifextAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("loopback", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifextAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ifextAdminStatus.setDescription("The desired state of the interface. This object\n             can be set only when the ifMainRowStatus of the\n             interface is active. This object has the semantics\n             of the ifAdminStatus of the standard ifTable.\n            \n             The testing(3) state indicates that no operational \n             packets can be passed - this state is not currently\n             supported. \n            \n             When a managed system initializes, all \n             interfaces start with ifMainAdminStatus in the\n             down(2) state, it's a default state also. As a result\n             of either explicit management action or per \n             configuration information retained by the managed\n             system, ifMainAdminStatus is then changed to\n             the up (1) state (or remains in the\n             down(2) state).\n\n             This object reflects the value of ifMainAdminStatus")
ifextPortUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unused", 0), ("lan", 1), ("radio", 2), ("mgmt", 3), ("stack", 4), ("aux", 5), ("pwe3", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifextPortUsage.setStatus('current')
if mibBuilder.loadTexts: ifextPortUsage.setDescription('Port usage in the system. lan(1) and radio(2) are traffic ports,\n             mgmt(3) are ports dedicated to management traffic, stack(4) ports\n             are port to interconnect switch to stack, aux(5) ports are ports \n             dedicated to other purpose, pwe3(6) ports are dedicated to pseudowire.')
ifextMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2), ("combo", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifextMediumType.setStatus('current')
if mibBuilder.loadTexts: ifextMediumType.setDescription("Physical medium of this interface. Medium type 'combo'\n             can be set as copper or as fiber by ifextMediumSelection.")
ifextMediumSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("copper", 1), ("fiber", 2))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifextMediumSelection.setStatus('current')
if mibBuilder.loadTexts: ifextMediumSelection.setDescription("Selection of physical medium of this interface. Only 'combo' \n             interfaces can be set as copper or as fiber.")
ifextAlarmReportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ifextAlarmReportEnable.setStatus('current')
if mibBuilder.loadTexts: ifextAlarmReportEnable.setDescription('On interfaces with ifextPortUsage set to mgmg, this object enables\n             or disables collection and report of the alarms.')
ifextSfpId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifextSfpId.setStatus('current')
if mibBuilder.loadTexts: ifextSfpId.setDescription("This object specifies a row in sfpTable. This object is 0 if\n             there isn't any SFP connectied to this interface.")
ifextCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 2, 1, 9), Bits().clone(namedValues=NamedValues(("ifextCapabilityLoop", 0), ("ifextCapability2g5Bps", 1), ("ifextCapabilityMabSensor", 2), ("ifextCapabilityEncrypt", 3), ("ifextCapability10gBps", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifextCapabilities.setStatus('current')
if mibBuilder.loadTexts: ifextCapabilities.setDescription('This indicates which capability is supported from this interface.')
ifextLosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 2, 1, 10), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifextLosAlarm.setStatus('current')
if mibBuilder.loadTexts: ifextLosAlarm.setDescription('Interface Loss of Signal alarm')
ifextRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ifextRowStatus.setStatus('current')
if mibBuilder.loadTexts: ifextRowStatus.setDescription('Status of this row of ifextTable')
ifextMaintTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 3), )
if mibBuilder.loadTexts: ifextMaintTable.setStatus('current')
if mibBuilder.loadTexts: ifextMaintTable.setDescription('Table with object used to maintain Interfaces described in \n             ifextTable')
ifextMaintTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 3, 1), ).setIndexNames((0, "SIAE-IFEXT-MIB", "ifextIfIndex"))
if mibBuilder.loadTexts: ifextMaintTableEntry.setStatus('current')
if mibBuilder.loadTexts: ifextMaintTableEntry.setDescription("SIAE's Interface extension maintenance record.")
ifextLineLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifextLineLoop.setStatus('current')
if mibBuilder.loadTexts: ifextLineLoop.setDescription('This object is set from admin status of an interface \n             to enable/disable line loop.')
ifextLosAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 73, 5), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifextLosAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: ifextLosAlarmSeverityCode.setDescription('Defines the severity associated to the ifextLosAlarm\n             and enables/disables the trap generation on status change event.')
mibBuilder.exportSymbols("SIAE-IFEXT-MIB", ifext=ifext, ifextTableEntry=ifextTableEntry, ifextMaintTable=ifextMaintTable, ifextAdminStatus=ifextAdminStatus, PYSNMP_MODULE_ID=ifext, ifextRowStatus=ifextRowStatus, ifextTable=ifextTable, ifextLabel=ifextLabel, ifextMibVersion=ifextMibVersion, ifextCapabilities=ifextCapabilities, ifextLosAlarm=ifextLosAlarm, ifextMaintTableEntry=ifextMaintTableEntry, ifextPortUsage=ifextPortUsage, ifextMediumSelection=ifextMediumSelection, ifextSfpId=ifextSfpId, ifextAlarmReportEnable=ifextAlarmReportEnable, ifextLineLoop=ifextLineLoop, ifextMediumType=ifextMediumType, ifextLosAlarmSeverityCode=ifextLosAlarmSeverityCode, ifextIfIndex=ifextIfIndex)
