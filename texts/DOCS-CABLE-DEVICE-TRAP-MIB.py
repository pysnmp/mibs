#
# PySNMP MIB module DOCS-CABLE-DEVICE-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/DOCS-CABLE-DEVICE-TRAP-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 09:27:10 2024
# On host fv-az1146-179 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
docsDevServerDhcp, docsDevEvLevel, docsDevServerTime, docsDev, docsDevEvId, docsDevSwServer, docsDevNotification, docsDevEvText, docsDevSwFilename = mibBuilder.importSymbols("DOCS-CABLE-DEVICE-MIB", "docsDevServerDhcp", "docsDevEvLevel", "docsDevServerTime", "docsDev", "docsDevEvId", "docsDevSwServer", "docsDevNotification", "docsDevEvText", "docsDevSwFilename")
docsIfDocsisOperMode, docsIfCmtsCmStatusDocsisMode, docsIfDocsisCapability = mibBuilder.importSymbols("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode", "docsIfCmtsCmStatusDocsisMode", "docsIfDocsisCapability")
docsIfCmtsCmStatusMacAddress, docsIfDocsisBaseCapability, docsIfCmtsCmStatusDocsisRegMode, docsIfCmtsCmStatusModulationType, docsIfCmCmtsAddress, docsIfCmStatusDocsisOperMode, docsIfCmStatusModulationType = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress", "docsIfDocsisBaseCapability", "docsIfCmtsCmStatusDocsisRegMode", "docsIfCmtsCmStatusModulationType", "docsIfCmCmtsAddress", "docsIfCmStatusDocsisOperMode", "docsIfCmStatusModulationType")
ifPhysAddress, = mibBuilder.importSymbols("IF-MIB", "ifPhysAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibIdentifier, TimeTicks, Unsigned32, NotificationType, iso, ModuleIdentity, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "TimeTicks", "Unsigned32", "NotificationType", "iso", "ModuleIdentity", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "Counter64", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
docsDevTrapMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 69, 10))
docsDevTrapMIB.setRevisions(('1970-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsDevTrapMIB.setRevisionsDescriptions(('The CABLE DEVICE TRAP MIB is an extension of the\nCABLE DEVICE MIB defined in RFC2669.\nIt defines various trap objects for both cable\nmodem and cable modem termination systems.\nTwo groups of SNMP notification objects are defined.\nOne group is for notifying cable modem events and one group\nfor notifying cable modem termination system events.\nCommon to all CM notification objects (traps) is that\ntheir OBJECTS statements contain information\nabout the event priority, the event Id, the event message\nbody, the CM DOCSIS capability, the CM DOCSIS QOS level, the CM\nDOCSIS upstream modulation type, the cable interface MAC address\nof the cable modem and the cable card MAC address of the CMTS to\nwhich the modem is connectede.\nThese objects are docsDevEvLevel, docsDevId, docsDevEvText,\ndocsIfDocsisBaseCapability, docsIfCmStatusDocsisOperMode,\ndocsIfCmStatusModulationType,ifPhysAddress and\ndocsIfCmCmtsAddress. The values of docsDevEvLevel, docsDevId, and\ndocsDevEvText are from the entry which logs this event in the\ndocsDevEventTable, which is defined in\nDOCS-CABLE-DEVICE-MIB of RFC2669. The docsIfDocsisBaseCapability,\ndocsIfCmStatusDocsisOperMode, and docsIfCmStatusModulationType\nare defined in the DOCS-IF-MIB.\nThe ifPhysAddress value is the MAC address of the cable\ninterface of this cable modem. The docsIfCmCmtsAddress\nspecifies the MAC address of the CMTS (if there is a cable.card/ interface in the CMTS, then it is actually the\ncable interface interface MAC address to which the CM is\nconnected).\nIndividual CM trap may contain additional objects to\nprovide necessary information.\nCommon to all CMTS notification objects (traps) is that their\nOBJECTS statements contain information about the event priority,\nthe event Id, the event message body, the connected CM DOCSIS QOS\nstatus, the connected CM DOCSIS modulation type, the CM cable\ninterface MAC address, the CMTS DOCSIS capability, and\nthe CMTS MAC address.\nThese objects are docsDevEvLevel, docsDevId, docsDevEvText,\ndocsIfCmtsCmStatusDocsisRegMode,\ndocsIfCmtsCmStatusModulationType, docsIfCmtsCmStatusMacAddress,\ndocsIfDocsisBaseCapability, and ifPhysAddress. The values of\ndocsDevEvLevel, docsDevId, and docsDevEvText are\nsimilar to those in CM traps. The values of\ndocsIfCmtsCmStatusDocsisRegMode,\ndocsIfCmtsCmStatusModulationType, and\ndocsIfCmtsCmStatusMacAddress are from the\ndocsIfCmtsCmStatusEntry (defined in DOCS-IF-MIB)\ncorresponding to a connected CM. The docsIfDocsisBaseCapability\nindicates the CMTS DOCSIS capability.\nThe ifPhysAddress value is the CMTS MAC address (if there is a\ncable\ncard/ interface in the CMTS, then it is actually the MAC address\nof the cable\ninterface which connected to the CM).\n',))
if mibBuilder.loadTexts: docsDevTrapMIB.setLastUpdated('0202250000Z')
if mibBuilder.loadTexts: docsDevTrapMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: docsDevTrapMIB.setContactInfo('\nJunming Gao\nCisco Systems Inc\n<jgao@ cisco. com>\n')
if mibBuilder.loadTexts: docsDevTrapMIB.setDescription('Modified by David Raftus (david.raftus@imedia.com) to deprecate\ntrap definition objects originating from the docsIfExt MIB.\nCorresponding objects from the Docsis 2.0 RF MIB draft were added\nto the trap definitions.')
docsDevTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 69, 2, 1))
docsDevTrapControl = MibIdentifier((1, 3, 6, 1, 2, 1, 69, 2, 1, 1))
docsDevCmTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0))
docsDevCmtsTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0))
docsDevCmTrapControl = MibScalar((1, 3, 6, 1, 2, 1, 69, 2, 1, 1, 1), Bits().clone(namedValues=NamedValues(("cmInitTLVUnknownTrap", 0), ("cmDynServReqFailTrap", 1), ("cmDynServRspFailTrap", 2), ("cmDynServAckFailTrap", 3), ("cmBpiInitTrap", 4), ("cmBPKMTrap", 5), ("cmDynamicSATrap", 6), ("cmDHCPFailTrap", 7), ("cmSwUpgradeInitTrap", 8), ("cmSwUpgradeFailTrap", 9), ("cmSwUpgradeSuccessTrap", 10), ("cmSwUpgradeCVCTrap", 11), ("cmTODFailTrap", 12), ("cmDCCReqFailTrap", 13), ("cmDCCRspFailTrap", 14), ("cmDCCAckFailTrap", 15))).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevCmTrapControl.setStatus('current')
if mibBuilder.loadTexts: docsDevCmTrapControl.setDescription('The object is used to enable CM traps. From left to right,\nthe set bit indicates the corresponding CM trap is enabled.\nFor example, if the first bit is set, then\ndocsDevCmInitTLVUnknownTrap is enabled. If it is zero,\nthe trap is disabled.\n')
docsDevCmtsTrapControl = MibScalar((1, 3, 6, 1, 2, 1, 69, 2, 1, 1, 2), Bits().clone(namedValues=NamedValues(("cmtsInitRegReqFailTrap", 0), ("cmtsInitRegRspFailTrap", 1), ("cmtsInitRegAckFailTrap", 2), ("cmtsDynServReqFailTrap", 3), ("cmtsDynServRspFailTrap", 4), ("cmtsDynServAckFailTrap", 5), ("cmtsBpiInitTrap", 6), ("cmtsBPKMTrap", 7), ("cmtsDynamicSATrap", 8), ("cmtsDCCReqFailTrap", 9), ("cmtsDCCRspFailTrap", 10), ("cmtsDCCAckFailTrap", 11))).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevCmtsTrapControl.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsTrapControl.setDescription('The object is used to enable CMTS traps. From left to right,\nthe set bit indicates the corresponding CMTS trap is enabled.\nFor example, if the first bit is set, then\ndocsDevCmtsInitRegRspFailTrap is enabled. If it is zero,\nthe trap is disabled.\n')
docsDevCmInitTLVUnknownTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 1)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmInitTLVUnknownTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmInitTLVUnknownTrap.setDescription('Event due to detection of unknown TLV during\nthe TLV parsing process.\nThe values of docsDevEvLevel, docsDevId, and\ndocsDevEvText are from the entry which logs this event\nin the docsDevEventTable. The docsIfDocsisBaseCapability\nindicates the DOCSIS version information. The\ndocsIfCmStatusDocsisOperMode indicates the QOS level of the CM,\nwhile the docsIfCmStatusModulationType indicates the upstream\nmodulation methodology used by the CM.\nThe ifPhysAddress value is the MAC address of the cable interface\nof this cable modem.\nThe docsIfCmCmtsAddress specifies the MAC address\nof the CMTS to which the CM is connected (if there is a cable\ncard/ interface in the CMTS, then it is actually the MAC address\nof the cable\ninterface which connected to the CM).\nThis part of information is uniformed across all CM traps.\n')
docsDevCmDynServReqFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 2)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDynServReqFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDynServReqFailTrap.setDescription('An event to report the failure of a dynamic service\nrequest happened during the dynamic services process.\n')
docsDevCmDynServRspFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 3)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDynServRspFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDynServRspFailTrap.setDescription('An event to report the failure of a dynamic service\nresponse happened during the dynamic services process.\n')
docsDevCmDynServAckFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 4)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDynServAckFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDynServAckFailTrap.setDescription('An event to report the failure of a dynamic service\nacknowledgement happened during the dynamic services process.\n')
docsDevCmBpiInitTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 5)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmBpiInitTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmBpiInitTrap.setDescription('An event to report the failure of a BPI initialization\nattempt happened during the registration process.\n')
docsDevCmBPKMTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 6)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmBPKMTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmBPKMTrap.setDescription('An event to report the failure of a BPKM operation.\n')
docsDevCmDynamicSATrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 7)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDynamicSATrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDynamicSATrap.setDescription('An event to report the failure of a dynamic security\nassociation operation.\n')
docsDevCmDHCPFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 8)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevServerDhcp"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDHCPFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDHCPFailTrap.setDescription('An event to report the failure of a DHCP server.\nThe value of docsDevServerDhcp is the IP address\nof the DHCP server.\n')
docsDevCmSwUpgradeInitTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 9)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwFilename"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwServer"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmSwUpgradeInitTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmSwUpgradeInitTrap.setDescription('An event to report a software upgrade initiated\nevent. The values of docsDevSwFilename, and\ndocsDevSwServer indicate the software image name\nand the server IP address the image is from.\n')
docsDevCmSwUpgradeFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 10)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwFilename"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwServer"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmSwUpgradeFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmSwUpgradeFailTrap.setDescription('An event to report the failure of a software upgrade\nattempt. The values of docsDevSwFilename, and\ndocsDevSwServer indicate the software image name.and the server IP address the image is from.\n')
docsDevCmSwUpgradeSuccessTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 11)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwFilename"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwServer"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmSwUpgradeSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmSwUpgradeSuccessTrap.setDescription('An event to report the Software upgrade success event.\nThe values of docsDevSwFilename, and\ndocsDevSwServer indicate the software image name\nand the server IP address the image is from.\n')
docsDevCmSwUpgradeCVCFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 12)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmSwUpgradeCVCFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmSwUpgradeCVCFailTrap.setDescription('An event to report the failure of the verification\nof code file happened during a secure software upgrade\nattempt.\n')
docsDevCmTODFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 13)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevServerTime"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmTODFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmTODFailTrap.setDescription('An event to report the failure of a time of day server.\nThe value of docsDevServerTime indicates the server IP\naddress.\n')
docsDevCmDCCReqFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 14)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDCCReqFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDCCReqFailTrap.setDescription('An event to report the failure of a dynamic channel\nchange request happened during the dynamic channel\nchange process in the CM side.\n')
docsDevCmDCCRspFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 15)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDCCRspFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDCCRspFailTrap.setDescription('An event to report the failure of a dynamic channel\nchange response happened during the dynamic channel\nchange process in the CM side.\n')
docsDevCmDCCAckFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 16)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDCCAckFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDCCAckFailTrap.setDescription('An event to report the failure of a dynamic channel\nchange acknowledgement happened during the dynamic channel\nchange process in the CM side.\n')
docsDevCmtsInitRegReqFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 1)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsInitRegReqFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsInitRegReqFailTrap.setDescription('An event to report the failure of a registration\nrequest from CM happening during the CM initialization\nprocess and detected on the CMTS side.\nThe values of docsDevEvLevel, docsDevId, and\ndocsDevEvText are from the entry which logs this event\nin the docsDevEventTable. The docsIfCmtsCmStatusDocsisRegMode\nand docsIfCmtsCmStatusMacAddress indicate the docsis.QOS version and the MAC address of the requesting CM. The\ndocsIfCmtsCmModulationType indicates the upstream modulation\nmethodology used by the connected CM.\nThe docsIfDocsisBaseCapability and ifPhysAddress\nindicate the docsis version of the CMTS and the MAC\naddress of the CMTS (if there is a cable\ncard/ interface in the CMTS, then it is actually the MAC address\nof the cable interface which connected to the CM) cable card\nconnected to the CM.\nThis part of information is uniformed across all CMTS traps.\n')
docsDevCmtsInitRegRspFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 2)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsInitRegRspFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsInitRegRspFailTrap.setDescription('An event to report the failure of a registration\nresponse happened during the CM initialization\nprocess and detected in the CMTS side.\n')
docsDevCmtsInitRegAckFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 3)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsInitRegAckFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsInitRegAckFailTrap.setDescription('An event to report the failure of a registration\nacknowledgement from CM happened during the CM\ninitialization process and detected in the CMTS side.\n')
docsDevCmtsDynServReqFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 4)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsDynServReqFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsDynServReqFailTrap.setDescription('An event to report the failure of a dynamic service\nrequest happened during the dynamic services process\nand detected in the CMTS side.\n')
docsDevCmtsDynServRspFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 5)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsDynServRspFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsDynServRspFailTrap.setDescription('An event to report the failure of a dynamic service\nresponse happened during the dynamic services process\nand detected in the CMTS side.\n')
docsDevCmtsDynServAckFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 6)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsDynServAckFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsDynServAckFailTrap.setDescription('An event to report the failure of a dynamic service\nacknowledgement happened during the dynamic services\nprocess and detected in the CMTS side.\n')
docsDevCmtsBpiInitTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 7)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsBpiInitTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsBpiInitTrap.setDescription('An event to report the failure of a BPI initialization\nattempt happened during the CM registration process\nand detected in the CMTS side.\n')
docsDevCmtsBPKMTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 8)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsBPKMTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsBPKMTrap.setDescription('An event to report the failure of a BPKM operation\nwhich is detected in the CMTS side.\n')
docsDevCmtsDynamicSATrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 9)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsDynamicSATrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsDynamicSATrap.setDescription('An event to report the failure of a dynamic security\nassociation operation which is detected in the CMTS side.\n')
docsDevCmtsDCCReqFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 10)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsDCCReqFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsDCCReqFailTrap.setDescription('An event to report the failure of a dynamic channel\nchange request happened during the dynamic channel\nchange process in the CM side and detected in the\nCMTS side.\n')
docsDevCmtsDCCRspFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 11)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsDCCRspFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsDCCRspFailTrap.setDescription('An event to report the failure of a dynamic channel\nchange response happened during the dynamic channel\nchange process in the CMTS side.\n')
docsDevCmtsDCCAckFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 12)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsDCCAckFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsDCCAckFailTrap.setDescription('An event to report the failure of a dynamic channel\nchange acknowledgement happened during the dynamic channel\nchange process in the CMTS side.\n')
docsDevTrapConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 69, 2, 1, 4))
docsDevTrapGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 1))
docsDevTrapCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 2))
docsDevCmTrapCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 2, 1)).setObjects(("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmTrapControlGroup"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevCmTrapCompliance = docsDevCmTrapCompliance.setStatus('current')
if mibBuilder.loadTexts: docsDevCmTrapCompliance.setDescription('The compliance statement for Cable Modem Traps and Control')
docsDevCmTrapControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 1, 1)).setObjects(("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmTrapControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevCmTrapControlGroup = docsDevCmTrapControlGroup.setStatus('current')
if mibBuilder.loadTexts: docsDevCmTrapControlGroup.setDescription('CM must support docsDevCmTrapControl.')
docsDevCmNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 1, 2)).setObjects(("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmInitTLVUnknownTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDynServReqFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDynServRspFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDynServAckFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmBpiInitTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmBPKMTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDynamicSATrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDHCPFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmSwUpgradeInitTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmSwUpgradeFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmSwUpgradeSuccessTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmSwUpgradeCVCFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmTODFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDCCReqFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDCCRspFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDCCAckFailTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevCmNotificationGroup = docsDevCmNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: docsDevCmNotificationGroup.setDescription('A collection of CM notifications providing device status and\ncontrol.')
docsDevCmtsTrapCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 2, 2)).setObjects(("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsTrapControlGroup"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevCmtsTrapCompliance = docsDevCmtsTrapCompliance.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsTrapCompliance.setDescription('The compliance statement for MCNS Cable Modems and\nCable Modem Termination Systems.')
docsDevCmtsTrapControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 1, 3)).setObjects(("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsTrapControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevCmtsTrapControlGroup = docsDevCmtsTrapControlGroup.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsTrapControlGroup.setDescription('CMTS must support docsDevCmtsTrapControl.')
docsDevCmtsNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 1, 4)).setObjects(("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsInitRegReqFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsInitRegRspFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsInitRegAckFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsDynServReqFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsDynServRspFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsDynServAckFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsBpiInitTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsBPKMTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsDynamicSATrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsDCCReqFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsDCCRspFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsDCCAckFailTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevCmtsNotificationGroup = docsDevCmtsNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsNotificationGroup.setDescription('A collection of CMTS notifications providing device status and\ncontrol.')
mibBuilder.exportSymbols("DOCS-CABLE-DEVICE-TRAP-MIB", docsDevCmSwUpgradeInitTrap=docsDevCmSwUpgradeInitTrap, docsDevCmtsDCCReqFailTrap=docsDevCmtsDCCReqFailTrap, docsDevCmTrapControlGroup=docsDevCmTrapControlGroup, docsDevCmtsTrapControl=docsDevCmtsTrapControl, docsDevCmDHCPFailTrap=docsDevCmDHCPFailTrap, docsDevCmDCCAckFailTrap=docsDevCmDCCAckFailTrap, docsDevCmtsDCCRspFailTrap=docsDevCmtsDCCRspFailTrap, docsDevCmtsInitRegReqFailTrap=docsDevCmtsInitRegReqFailTrap, docsDevCmTrapCompliance=docsDevCmTrapCompliance, docsDevCmTODFailTrap=docsDevCmTODFailTrap, docsDevCmtsNotificationGroup=docsDevCmtsNotificationGroup, docsDevCmtsTraps=docsDevCmtsTraps, docsDevCmSwUpgradeFailTrap=docsDevCmSwUpgradeFailTrap, docsDevTrapConformance=docsDevTrapConformance, docsDevTrapGroups=docsDevTrapGroups, docsDevCmDynamicSATrap=docsDevCmDynamicSATrap, docsDevCmtsBpiInitTrap=docsDevCmtsBpiInitTrap, PYSNMP_MODULE_ID=docsDevTrapMIB, docsDevCmTraps=docsDevCmTraps, docsDevCmDynServRspFailTrap=docsDevCmDynServRspFailTrap, docsDevTrapCompliances=docsDevTrapCompliances, docsDevCmSwUpgradeSuccessTrap=docsDevCmSwUpgradeSuccessTrap, docsDevTrapControl=docsDevTrapControl, docsDevCmDynServReqFailTrap=docsDevCmDynServReqFailTrap, docsDevCmtsDynServReqFailTrap=docsDevCmtsDynServReqFailTrap, docsDevTraps=docsDevTraps, docsDevCmtsDynamicSATrap=docsDevCmtsDynamicSATrap, docsDevCmtsDynServRspFailTrap=docsDevCmtsDynServRspFailTrap, docsDevCmBpiInitTrap=docsDevCmBpiInitTrap, docsDevCmtsBPKMTrap=docsDevCmtsBPKMTrap, docsDevCmtsInitRegRspFailTrap=docsDevCmtsInitRegRspFailTrap, docsDevCmtsDCCAckFailTrap=docsDevCmtsDCCAckFailTrap, docsDevCmtsTrapCompliance=docsDevCmtsTrapCompliance, docsDevCmSwUpgradeCVCFailTrap=docsDevCmSwUpgradeCVCFailTrap, docsDevCmtsInitRegAckFailTrap=docsDevCmtsInitRegAckFailTrap, docsDevTrapMIB=docsDevTrapMIB, docsDevCmDCCReqFailTrap=docsDevCmDCCReqFailTrap, docsDevCmInitTLVUnknownTrap=docsDevCmInitTLVUnknownTrap, docsDevCmBPKMTrap=docsDevCmBPKMTrap, docsDevCmNotificationGroup=docsDevCmNotificationGroup, docsDevCmTrapControl=docsDevCmTrapControl, docsDevCmtsTrapControlGroup=docsDevCmtsTrapControlGroup, docsDevCmDCCRspFailTrap=docsDevCmDCCRspFailTrap, docsDevCmDynServAckFailTrap=docsDevCmDynServAckFailTrap, docsDevCmtsDynServAckFailTrap=docsDevCmtsDynServAckFailTrap)
