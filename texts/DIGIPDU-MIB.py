#
# PySNMP MIB module DIGIPDU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/planet/DIGIPDU-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 11:17:36 2024
# On host fv-az1493-704 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, MibIdentifier, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, TimeTicks, Unsigned32, ObjectIdentity, IpAddress, iso, Bits, NotificationType, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibIdentifier", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "TimeTicks", "Unsigned32", "ObjectIdentity", "IpAddress", "iso", "Bits", "NotificationType", "Counter32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
smart = ModuleIdentity((1, 3, 6, 1, 4, 1, 10456, 3))
smart.setRevisions(('2009-04-16 16:27',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: smart.setRevisionsDescriptions(('V1.00 for the DIGIPDU Device',))
if mibBuilder.loadTexts: smart.setLastUpdated('200904161627Z')
if mibBuilder.loadTexts: smart.setOrganization('')
if mibBuilder.loadTexts: smart.setContactInfo('')
if mibBuilder.loadTexts: smart.setDescription('This is the MIB module for the All DIGIPDU Device')
digipdu = MibIdentifier((1, 3, 6, 1, 4, 1, 10456))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 1))
productModel = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productModel.setStatus('current')
if mibBuilder.loadTexts: productModel.setDescription('Indicate the Model of Device.')
productPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPartNumber.setStatus('current')
if mibBuilder.loadTexts: productPartNumber.setDescription('The part number of this appliance as shown on the label.')
productSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSerialNumber.setStatus('current')
if mibBuilder.loadTexts: productSerialNumber.setDescription('The serial number of this appliance as shown on the label.')
productFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: productFirmwareVersion.setDescription('The version of the firmware of this product.')
productTemperatureKind = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTemperatureKind.setStatus('current')
if mibBuilder.loadTexts: productTemperatureKind.setDescription('Temperature Kind(0:CELSIUS, 1:FAHRENHEIT).')
productResetDetector = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productResetDetector.setStatus('current')
if mibBuilder.loadTexts: productResetDetector.setDescription('Display the Nearest Operated Time of Reset Buttom.')
deviceTable = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 2))
deviceATSKind = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceATSKind.setStatus('current')
if mibBuilder.loadTexts: deviceATSKind.setDescription('Device ATS Kind.')
deviceInFeedTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInFeedTotal.setStatus('current')
if mibBuilder.loadTexts: deviceInFeedTotal.setDescription('Input Feed Total.')
deviceInFeedKind = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInFeedKind.setStatus('current')
if mibBuilder.loadTexts: deviceInFeedKind.setDescription('Input Feed Kind.')
deviceInFeedBranch = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInFeedBranch.setStatus('current')
if mibBuilder.loadTexts: deviceInFeedBranch.setDescription('Input Feed Kind.')
deviceOutTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceOutTotal.setStatus('current')
if mibBuilder.loadTexts: deviceOutTotal.setDescription('Out Total.')
deviceOutKind = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceOutKind.setStatus('current')
if mibBuilder.loadTexts: deviceOutKind.setDescription('Out Kind.')
deviceInbuiltTempTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInbuiltTempTotal.setStatus('current')
if mibBuilder.loadTexts: deviceInbuiltTempTotal.setDescription('Inbuilt Temperature Total.')
deviceExtendTemperatureTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceExtendTemperatureTotal.setStatus('current')
if mibBuilder.loadTexts: deviceExtendTemperatureTotal.setDescription('Extend ENV Total.')
deviceExtendRHTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceExtendRHTotal.setStatus('current')
if mibBuilder.loadTexts: deviceExtendRHTotal.setDescription('Extend ENV Total.')
devicePDUTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePDUTotal.setStatus('current')
if mibBuilder.loadTexts: devicePDUTotal.setDescription('PDU Total.')
deviceInputTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInputTotal.setStatus('current')
if mibBuilder.loadTexts: deviceInputTotal.setDescription('Input Total.')
deviceUPS = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUPS.setStatus('current')
if mibBuilder.loadTexts: deviceUPS.setDescription('UPS.')
deviceDaisyChain = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDaisyChain.setStatus('current')
if mibBuilder.loadTexts: deviceDaisyChain.setDescription('Daisy Chain.')
deviceUnitTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUnitTotal.setStatus('current')
if mibBuilder.loadTexts: deviceUnitTotal.setDescription('Device Unit Total.')
deviceUnitTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 2, 21), )
if mibBuilder.loadTexts: deviceUnitTable.setStatus('current')
if mibBuilder.loadTexts: deviceUnitTable.setDescription('The table of Device Unit.')
deviceUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 2, 21, 1), ).setIndexNames((0, "DIGIPDU-MIB", "deviceUnitIndex"))
if mibBuilder.loadTexts: deviceUnitEntry.setStatus('current')
if mibBuilder.loadTexts: deviceUnitEntry.setDescription('Row definition for Device Unit table.')
deviceUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUnitIndex.setStatus('current')
if mibBuilder.loadTexts: deviceUnitIndex.setDescription('Device Unit table index.')
deviceUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 2, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUnitStatus.setStatus('current')
if mibBuilder.loadTexts: deviceUnitStatus.setDescription('status in the Device Unit.')
deviceUnitInfeedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 2, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUnitInfeedTotal.setStatus('current')
if mibBuilder.loadTexts: deviceUnitInfeedTotal.setDescription('Infeed Total of Device Unit.')
deviceUnitOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 2, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUnitOutTotal.setStatus('current')
if mibBuilder.loadTexts: deviceUnitOutTotal.setDescription('Out Total of Device Unit.')
peripheralTables = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 3))
aTSTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 1), )
if mibBuilder.loadTexts: aTSTable.setStatus('current')
if mibBuilder.loadTexts: aTSTable.setDescription('The table of Auto Transfer Switch.')
aTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 1, 1), ).setIndexNames((0, "DIGIPDU-MIB", "aTSIndex"))
if mibBuilder.loadTexts: aTSEntry.setStatus('current')
if mibBuilder.loadTexts: aTSEntry.setDescription('Row definition for Input Feed table.')
aTSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aTSIndex.setStatus('current')
if mibBuilder.loadTexts: aTSIndex.setDescription('Auto Transfer Switch table index.')
aTSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aTSStatus.setStatus('current')
if mibBuilder.loadTexts: aTSStatus.setDescription('status in the Auto Transfer Switch.')
aTSVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aTSVoltage.setStatus('current')
if mibBuilder.loadTexts: aTSVoltage.setDescription('Voltage of Auto Transfer Switch.')
aTSFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aTSFrequency.setStatus('current')
if mibBuilder.loadTexts: aTSFrequency.setDescription('Frequency of Auto Transfer Switch.')
inFeedTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2), )
if mibBuilder.loadTexts: inFeedTable.setStatus('current')
if mibBuilder.loadTexts: inFeedTable.setDescription('The table of Input Feed.')
inFeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1), ).setIndexNames((0, "DIGIPDU-MIB", "inFeedIndex"))
if mibBuilder.loadTexts: inFeedEntry.setStatus('current')
if mibBuilder.loadTexts: inFeedEntry.setDescription('Row definition for Input Feed table.')
inFeedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedIndex.setStatus('current')
if mibBuilder.loadTexts: inFeedIndex.setDescription('Input Feed table index.')
inFeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedStatus.setStatus('current')
if mibBuilder.loadTexts: inFeedStatus.setDescription('status in the Input Feed.')
inFeedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedVoltage.setStatus('current')
if mibBuilder.loadTexts: inFeedVoltage.setDescription('Voltage of Input Feed.')
inFeedFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedFrequency.setStatus('current')
if mibBuilder.loadTexts: inFeedFrequency.setDescription('Frequency of Input Feed.')
inFeedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedCurrent.setStatus('current')
if mibBuilder.loadTexts: inFeedCurrent.setDescription('Total Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
inFeedPowerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedPowerLoad.setStatus('current')
if mibBuilder.loadTexts: inFeedPowerLoad.setDescription('Actual value of power in the Input Feed.')
inFeedPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedPowerFactor.setStatus('current')
if mibBuilder.loadTexts: inFeedPowerFactor.setDescription('Actual value of power factor in the Input Feed.')
inFeedPowerEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedPowerEnergy.setStatus('current')
if mibBuilder.loadTexts: inFeedPowerEnergy.setDescription('Actual value of energy in the Input Feed.')
inFeedOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedOverLoad.setStatus('current')
if mibBuilder.loadTexts: inFeedOverLoad.setDescription('OverLoad of Input Feed(In tenths of amps, divide by 10 for value in amps).')
inFeedHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedHighWarning.setStatus('current')
if mibBuilder.loadTexts: inFeedHighWarning.setDescription('High Warning of Input Feed(In tenths of amps, divide by 10 for value in amps).')
inFeedLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedLowWarning.setStatus('current')
if mibBuilder.loadTexts: inFeedLowWarning.setDescription('Low Warning of Input Feed(In tenths of amps, divide by 10 for value in amps).')
inFeedBranch = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedBranch.setStatus('current')
if mibBuilder.loadTexts: inFeedBranch.setDescription('Average Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
inFeedBranch1Current = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedBranch1Current.setStatus('current')
if mibBuilder.loadTexts: inFeedBranch1Current.setDescription('Average Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
inFeedBranch1PowerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedBranch1PowerLoad.setStatus('current')
if mibBuilder.loadTexts: inFeedBranch1PowerLoad.setDescription('Actual value of power in the PDU.')
inFeedBranch1PowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedBranch1PowerFactor.setStatus('current')
if mibBuilder.loadTexts: inFeedBranch1PowerFactor.setDescription('Actual value of power factor in the PDU.')
inFeedBranch1OverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedBranch1OverLoad.setStatus('current')
if mibBuilder.loadTexts: inFeedBranch1OverLoad.setDescription('OverLoad of Input Feed(In tenths of amps, divide by 10 for value in amps).')
inFeedBranch1HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedBranch1HighWarning.setStatus('current')
if mibBuilder.loadTexts: inFeedBranch1HighWarning.setDescription('Average Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
inFeedBranch1LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedBranch1LowWarning.setStatus('current')
if mibBuilder.loadTexts: inFeedBranch1LowWarning.setDescription('Average Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
inFeedBranch2Current = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedBranch2Current.setStatus('current')
if mibBuilder.loadTexts: inFeedBranch2Current.setDescription('Average Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
inFeedBranch2PowerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedBranch2PowerLoad.setStatus('current')
if mibBuilder.loadTexts: inFeedBranch2PowerLoad.setDescription('Actual value of power in the PDU.')
inFeedBranch2PowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedBranch2PowerFactor.setStatus('current')
if mibBuilder.loadTexts: inFeedBranch2PowerFactor.setDescription('Actual value of power factor in the PDU.')
inFeedBranch2OverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedBranch2OverLoad.setStatus('current')
if mibBuilder.loadTexts: inFeedBranch2OverLoad.setDescription('OverLoad of Input Feed(In tenths of amps, divide by 10 for value in amps).')
inFeedBranch2HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedBranch2HighWarning.setStatus('current')
if mibBuilder.loadTexts: inFeedBranch2HighWarning.setDescription('Average Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
inFeedBranch2LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedBranch2LowWarning.setStatus('current')
if mibBuilder.loadTexts: inFeedBranch2LowWarning.setDescription('Average Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
outTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3), )
if mibBuilder.loadTexts: outTable.setStatus('current')
if mibBuilder.loadTexts: outTable.setDescription('The table of Outlet.')
outEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1), ).setIndexNames((0, "DIGIPDU-MIB", "outIndex"))
if mibBuilder.loadTexts: outEntry.setStatus('current')
if mibBuilder.loadTexts: outEntry.setDescription('Row definition for Outlet table.')
outIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outIndex.setStatus('current')
if mibBuilder.loadTexts: outIndex.setDescription('Out table index.')
outComputerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outComputerStatus.setStatus('current')
if mibBuilder.loadTexts: outComputerStatus.setDescription('Out computer status.')
outCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: outCurrentStatus.setDescription('Out Current status.')
outSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("off-act", 2), ("on-act", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outSwitchStatus.setStatus('current')
if mibBuilder.loadTexts: outSwitchStatus.setDescription("This OID is provided for Outlet Status information.\r\r\n\r\r\n\t\t     '0'  if the out is Switch Off.\r\r\n\t\t     '1'  if the out is Switch On.\r\r\n\t\t     '2'  if the out is Switch Off Acting.\r\r\n\t\t     '3'  if the out is Switch On Acting.\r\r\n\r\r\n\t\t\t")
outSwitchCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ctrl-on", 1), ("ctrl-off", 2), ("ctrl-reboot", 3), ("ctrl-on-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outSwitchCtrl.setStatus('current')
if mibBuilder.loadTexts: outSwitchCtrl.setDescription("This OID is provided for Outlet Status information.\r\r\n\r\r\n\t\t     '0'  if the out is None.\r\r\n\t\t     '1'  Switch Ctrl On.\r\r\n\t\t     '2'  Switch Ctrl Off.\r\r\n\t\t     '3'  Switch Ctrl Reboot.\r\r\n\t\t     '4'  Switch Ctrl On Off.\r\r\n\r\r\n\t\t\t")
outVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outVoltage.setStatus('current')
if mibBuilder.loadTexts: outVoltage.setDescription('Voltage of Outlet.')
outCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outCurrent.setStatus('current')
if mibBuilder.loadTexts: outCurrent.setDescription('Current of Outlet(In tenths of amps, divide by 10 for value in amps).')
outPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outPowerFactor.setStatus('current')
if mibBuilder.loadTexts: outPowerFactor.setDescription('Actual value of power factor in the Outlet.')
outPowerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outPowerLoad.setStatus('current')
if mibBuilder.loadTexts: outPowerLoad.setDescription('Actual value of power in the Outlet.')
outOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outOverload.setStatus('current')
if mibBuilder.loadTexts: outOverload.setDescription('Overload of Outlet(In tenths of amps, divide by 10 for value in amps).')
outHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outHighWarning.setStatus('current')
if mibBuilder.loadTexts: outHighWarning.setDescription('High Warning of Outlet(In tenths of amps, divide by 10 for value in amps).')
outLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outLowWarning.setStatus('current')
if mibBuilder.loadTexts: outLowWarning.setDescription('Low Warning of Outlet(In tenths of amps, divide by 10 for value in amps).')
pduTables = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4), )
if mibBuilder.loadTexts: pduTables.setStatus('current')
if mibBuilder.loadTexts: pduTables.setDescription('The table of PDU.')
pduEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1), ).setIndexNames((0, "DIGIPDU-MIB", "pduIndex"))
if mibBuilder.loadTexts: pduEntry.setStatus('current')
if mibBuilder.loadTexts: pduEntry.setDescription('Row definition for PDU table.')
pduIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduIndex.setStatus('current')
if mibBuilder.loadTexts: pduIndex.setDescription('PDU table index.')
pduModel = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduModel.setStatus('current')
if mibBuilder.loadTexts: pduModel.setDescription('Now Power Data Log of PDU(In tenths of amps, divide by 10 for value in amps).')
pduMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMonitor.setStatus('current')
if mibBuilder.loadTexts: pduMonitor.setDescription('PDU Monitor Status.')
pduStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("warning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduStatus.setStatus('current')
if mibBuilder.loadTexts: pduStatus.setDescription('PDU Connect Status.')
pduVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduVoltage.setStatus('current')
if mibBuilder.loadTexts: pduVoltage.setDescription('Voltage of PDU.')
pduFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduFrequency.setStatus('current')
if mibBuilder.loadTexts: pduFrequency.setDescription('Frequency of PDU.')
pduCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCurrent.setStatus('current')
if mibBuilder.loadTexts: pduCurrent.setDescription('Total Current of PDU(In tenths of amps, divide by 10 for value in amps).')
pduPowerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPowerLoad.setStatus('current')
if mibBuilder.loadTexts: pduPowerLoad.setDescription('Actual value of power in the PDU.')
pduPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPowerFactor.setStatus('current')
if mibBuilder.loadTexts: pduPowerFactor.setDescription('Actual value of power factor in the PDU.')
pduPowerEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPowerEnergy.setStatus('current')
if mibBuilder.loadTexts: pduPowerEnergy.setDescription('Actual value of power in the PDU.')
pduOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOverload.setStatus('current')
if mibBuilder.loadTexts: pduOverload.setDescription('Overload of PDU(In tenths of amps, divide by 10 for value in amps).')
pduHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduHighWarning.setStatus('current')
if mibBuilder.loadTexts: pduHighWarning.setDescription('High Warning of PDU(In tenths of amps, divide by 10 for value in amps).')
pduLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduLowWarning.setStatus('current')
if mibBuilder.loadTexts: pduLowWarning.setDescription('High Warning of PDU(In tenths of amps, divide by 10 for value in amps).')
pduBranch = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBranch.setStatus('current')
if mibBuilder.loadTexts: pduBranch.setDescription('Average Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
pduBranch1Current = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBranch1Current.setStatus('current')
if mibBuilder.loadTexts: pduBranch1Current.setDescription('Average Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
pduBranch1Overload = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBranch1Overload.setStatus('current')
if mibBuilder.loadTexts: pduBranch1Overload.setDescription('Overload of Input Feed(In tenths of amps, divide by 10 for value in amps).')
pduBranch1HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBranch1HighWarning.setStatus('current')
if mibBuilder.loadTexts: pduBranch1HighWarning.setDescription('Average Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
pduBranch1LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBranch1LowWarning.setStatus('current')
if mibBuilder.loadTexts: pduBranch1LowWarning.setDescription('Average Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
pduBranch2Current = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBranch2Current.setStatus('current')
if mibBuilder.loadTexts: pduBranch2Current.setDescription('Average Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
pduBranch2Overload = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBranch2Overload.setStatus('current')
if mibBuilder.loadTexts: pduBranch2Overload.setDescription('Overload of Input Feed(In tenths of amps, divide by 10 for value in amps).')
pduBranch2HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBranch2HighWarning.setStatus('current')
if mibBuilder.loadTexts: pduBranch2HighWarning.setDescription('Average Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
pduBranch2LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBranch2LowWarning.setStatus('current')
if mibBuilder.loadTexts: pduBranch2LowWarning.setDescription('Average Current of Input Feed(In tenths of amps, divide by 10 for value in amps).')
inbuiltTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 5), )
if mibBuilder.loadTexts: inbuiltTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: inbuiltTemperatureTable.setDescription('The table of Inbuilt Temperature Sensor.')
inbuiltTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 5, 1), ).setIndexNames((0, "DIGIPDU-MIB", "inbuiltTemperatureIndex"))
if mibBuilder.loadTexts: inbuiltTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: inbuiltTemperatureEntry.setDescription('Row definition for Inbuilt Temperature Sensor table.')
inbuiltTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inbuiltTemperatureIndex.setStatus('current')
if mibBuilder.loadTexts: inbuiltTemperatureIndex.setDescription('Index for the Inbuilt Temperature Sensor table.')
inbuiltTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inbuiltTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: inbuiltTemperatureStatus.setDescription('Inbuilt Temperature Sensor Connect Status.')
inbuiltTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inbuiltTemperature.setStatus('current')
if mibBuilder.loadTexts: inbuiltTemperature.setDescription('Detected Temperature from Inbuilt Temperature Sensor.')
inbuiltTemperatureHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inbuiltTemperatureHighWarning.setStatus('current')
if mibBuilder.loadTexts: inbuiltTemperatureHighWarning.setDescription('High Warning Temperature from Inbuilt Temperature Sensor.')
inbuiltTemperatureLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inbuiltTemperatureLowWarning.setStatus('current')
if mibBuilder.loadTexts: inbuiltTemperatureLowWarning.setDescription('Low Warning Temperature from Inbuilt Temperature Sensor.')
extendTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6), )
if mibBuilder.loadTexts: extendTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: extendTemperatureTable.setDescription('The table of Extend Temperature Sensor.')
extendTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1), ).setIndexNames((0, "DIGIPDU-MIB", "extendTemperatureIndex"))
if mibBuilder.loadTexts: extendTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: extendTemperatureEntry.setDescription('Row definition for Extend Temperature Sensor table.')
extendTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendTemperatureIndex.setStatus('current')
if mibBuilder.loadTexts: extendTemperatureIndex.setDescription('Index for the Extend Temperature Sensor table.')
extendTemperatureDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendTemperatureDeviceId.setStatus('current')
if mibBuilder.loadTexts: extendTemperatureDeviceId.setDescription('Extend Temperature Monitor Status.')
extendTemperaturePort = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendTemperaturePort.setStatus('current')
if mibBuilder.loadTexts: extendTemperaturePort.setDescription('Extend Temperature Monitor Status.')
extendTemperatureMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendTemperatureMonitor.setStatus('current')
if mibBuilder.loadTexts: extendTemperatureMonitor.setDescription('Extend Temperature Monitor Status.')
extendTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: extendTemperatureStatus.setDescription('Extend Temperature Sensor Connect Status.')
extendTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendTemperature.setStatus('current')
if mibBuilder.loadTexts: extendTemperature.setDescription('Detected Temperature from Inbuilt Temperature Sensor.')
extendTemperatureHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendTemperatureHighWarning.setStatus('current')
if mibBuilder.loadTexts: extendTemperatureHighWarning.setDescription('High Warning Temperature from Extend Temperature Sensor.')
extendTemperatureLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendTemperatureLowWarning.setStatus('current')
if mibBuilder.loadTexts: extendTemperatureLowWarning.setDescription('Low Warning Temperature from Extend Temperature Sensor.')
extendRHTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7), )
if mibBuilder.loadTexts: extendRHTable.setStatus('current')
if mibBuilder.loadTexts: extendRHTable.setDescription('The table of Extend RH Sensor.')
extendRHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1), ).setIndexNames((0, "DIGIPDU-MIB", "extendRHIndex"))
if mibBuilder.loadTexts: extendRHEntry.setStatus('current')
if mibBuilder.loadTexts: extendRHEntry.setDescription('Row definition for Extend RH table.')
extendRHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendRHIndex.setStatus('current')
if mibBuilder.loadTexts: extendRHIndex.setDescription('Index for the Extend RH Sensor table.')
extendRHDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendRHDeviceId.setStatus('current')
if mibBuilder.loadTexts: extendRHDeviceId.setDescription('Index for the Extend RH Sensor table.')
extendRHPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendRHPort.setStatus('current')
if mibBuilder.loadTexts: extendRHPort.setDescription('Index for the Extend RH Sensor table.')
extendRHMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendRHMonitor.setStatus('current')
if mibBuilder.loadTexts: extendRHMonitor.setDescription('Extend RH Monitor Status.')
extendRHStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendRHStatus.setStatus('current')
if mibBuilder.loadTexts: extendRHStatus.setDescription('Extend RH Sensor Connect Status.')
extendRH = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendRH.setStatus('current')
if mibBuilder.loadTexts: extendRH.setDescription('Detected RH from Inbuilt Temperature Sensor.')
extendRHHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendRHHighWarning.setStatus('current')
if mibBuilder.loadTexts: extendRHHighWarning.setDescription('High Warning RH from Extend Temperature Sensor.')
extendRHLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendRHLowWarning.setStatus('current')
if mibBuilder.loadTexts: extendRHLowWarning.setDescription('Low Warning RH from Extend Temperature Sensor.')
inputTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8), )
if mibBuilder.loadTexts: inputTable.setStatus('current')
if mibBuilder.loadTexts: inputTable.setDescription('The table of Input.')
inputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8, 1), ).setIndexNames((0, "DIGIPDU-MIB", "inputIndex"))
if mibBuilder.loadTexts: inputEntry.setStatus('current')
if mibBuilder.loadTexts: inputEntry.setDescription('Row definition for Input table.')
inputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputIndex.setStatus('current')
if mibBuilder.loadTexts: inputIndex.setDescription('Index for Input table.')
inputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatus.setStatus('current')
if mibBuilder.loadTexts: inputStatus.setDescription("This OID is provided for Input Status.\r\r\n\t\t\t\t'0'  NORMAL.\r\r\n\t\t\t\t'1'  WARNING.\r\r\n\t\t\t\t'2'  TIMEOUT.\r\r\n\t\t\t")
inputState = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputState.setStatus('current')
if mibBuilder.loadTexts: inputState.setDescription("This OID is provided for Input Default.\r\r\n\t\t\t\t'0'  NORMAL_CLOSE.\r\r\n\t\t\t\t'1'  NORMAL_OPEN.\r\r\n\t\t\t")
inputTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputTimeout.setStatus('current')
if mibBuilder.loadTexts: inputTimeout.setDescription('TimeOut of Input Status.')
inputDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputDefault.setStatus('current')
if mibBuilder.loadTexts: inputDefault.setDescription("This OID is provided for Input Default.\r\r\n\t\t\t\t'0'  NORMAL_CLOSE.\r\r\n\t\t\t\t'1'  NORMAL_OPEN.\r\r\n\t\t\t")
inputDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputDetectTime.setStatus('current')
if mibBuilder.loadTexts: inputDetectTime.setDescription('Detect the nearest Changed Time of Input Status.')
rfidReader = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 3, 9))
rfidCardNum = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 9, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfidCardNum.setStatus('current')
if mibBuilder.loadTexts: rfidCardNum.setDescription('RFID Card Number.')
rfidDetectTime = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 9, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfidDetectTime.setStatus('current')
if mibBuilder.loadTexts: rfidDetectTime.setDescription('The Nearest Time to detect RFID Card.')
uPS = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10))
uPSModel = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSModel.setStatus('current')
if mibBuilder.loadTexts: uPSModel.setDescription('UPS Model.')
uPSConnectStatus = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSConnectStatus.setStatus('current')
if mibBuilder.loadTexts: uPSConnectStatus.setDescription('UPS Connect Status.')
uPSFirmware = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSFirmware.setStatus('current')
if mibBuilder.loadTexts: uPSFirmware.setDescription('UPS Firmware.')
uPSSerial = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSSerial.setStatus('current')
if mibBuilder.loadTexts: uPSSerial.setDescription('UPS Serial.')
uPSTemperature = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSTemperature.setStatus('current')
if mibBuilder.loadTexts: uPSTemperature.setDescription('UPS Temperature.')
uPSInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSInputVoltage.setStatus('current')
if mibBuilder.loadTexts: uPSInputVoltage.setDescription('UPS Input Voltage.')
uPSOutputOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSOutputOnBattery.setStatus('current')
if mibBuilder.loadTexts: uPSOutputOnBattery.setDescription('UPS Output On Battery.')
uPSOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: uPSOutputVoltage.setDescription('UPS Output Voltage.')
uPSOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSOutputFrequency.setStatus('current')
if mibBuilder.loadTexts: uPSOutputFrequency.setDescription('UPS Output Voltage.')
uPSOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSOutputCurrent.setStatus('current')
if mibBuilder.loadTexts: uPSOutputCurrent.setDescription('UPS Output Current.')
uPSOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSOutputLoad.setStatus('current')
if mibBuilder.loadTexts: uPSOutputLoad.setDescription('UPS Output Load.')
uPSOutputOverload = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSOutputOverload.setStatus('current')
if mibBuilder.loadTexts: uPSOutputOverload.setDescription('UPS Output Overload.')
uPSBatteryDate = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSBatteryDate.setStatus('current')
if mibBuilder.loadTexts: uPSBatteryDate.setDescription('UPS Battery Date.')
uPSBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSBatteryVoltage.setStatus('current')
if mibBuilder.loadTexts: uPSBatteryVoltage.setDescription('UPS Battery Voltage.')
uPSBatteryLevel = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSBatteryLevel.setStatus('current')
if mibBuilder.loadTexts: uPSBatteryLevel.setDescription('UPS Battery Level.')
uPSBatteryRunTime = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSBatteryRunTime.setStatus('current')
if mibBuilder.loadTexts: uPSBatteryRunTime.setDescription('UPS Battery RunTime.')
uPSBatteryLow = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSBatteryLow.setStatus('current')
if mibBuilder.loadTexts: uPSBatteryLow.setDescription('UPS Battery Low.')
uPSBatteryReplace = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSBatteryReplace.setStatus('current')
if mibBuilder.loadTexts: uPSBatteryReplace.setDescription('UPS Battery Need Replace.')
uPSUARTId = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSUARTId.setStatus('current')
if mibBuilder.loadTexts: uPSUARTId.setDescription('UPS UART Id.')
micDetec = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 3, 11))
micDetectTimes = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: micDetectTimes.setStatus('current')
if mibBuilder.loadTexts: micDetectTimes.setDescription('MIC Detect Times.')
micDetectPeriod = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: micDetectPeriod.setStatus('current')
if mibBuilder.loadTexts: micDetectPeriod.setDescription('MIC Detect Period.')
micLastDetectTime = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 11, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: micLastDetectTime.setStatus('current')
if mibBuilder.loadTexts: micLastDetectTime.setDescription('MIC Detect Detect Time.')
vibrationDetec = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 3, 12))
vibrationDetectTimes = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vibrationDetectTimes.setStatus('current')
if mibBuilder.loadTexts: vibrationDetectTimes.setDescription('Vibration Detect Times.')
vibrationDetectPeriod = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vibrationDetectPeriod.setStatus('current')
if mibBuilder.loadTexts: vibrationDetectPeriod.setDescription('Vibration Detect Period.')
vibrationLastDetectTime = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 12, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vibrationLastDetectTime.setStatus('current')
if mibBuilder.loadTexts: vibrationLastDetectTime.setDescription('Vibration Detect Detect Time.')
dataLogTable = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 4))
inFeedDataList = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedDataList.setStatus('current')
if mibBuilder.loadTexts: inFeedDataList.setDescription('Input Feed Data List.')
outDataList = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outDataList.setStatus('current')
if mibBuilder.loadTexts: outDataList.setDescription('Outlet Data List.')
pduDataList = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduDataList.setStatus('current')
if mibBuilder.loadTexts: pduDataList.setDescription('PDU Data List.')
smartTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 100))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1))
arg = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2))
trapArg1 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg1.setStatus('current')
if mibBuilder.loadTexts: trapArg1.setDescription('Indicate the Trap Arg1.')
trapArg2 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg2.setStatus('current')
if mibBuilder.loadTexts: trapArg2.setDescription('Indicate the Trap Arg2.')
trapArg3 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg3.setStatus('current')
if mibBuilder.loadTexts: trapArg3.setDescription('Indicate the Trap Arg3.')
trapArg4 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg4.setStatus('current')
if mibBuilder.loadTexts: trapArg4.setDescription('Indicate the Trap Arg4.')
trapArg5 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg5.setStatus('current')
if mibBuilder.loadTexts: trapArg5.setDescription('Indicate the Trap Arg5.')
trapArg6 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg6.setStatus('current')
if mibBuilder.loadTexts: trapArg6.setDescription('Indicate the Trap Arg6.')
trapArg7 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg7.setStatus('current')
if mibBuilder.loadTexts: trapArg7.setDescription('Indicate the Trap Arg7.')
trapArg8 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg8.setStatus('current')
if mibBuilder.loadTexts: trapArg8.setDescription('Indicate the Trap Arg8.')
trapArg9 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg9.setStatus('current')
if mibBuilder.loadTexts: trapArg9.setDescription('Indicate the Trap Arg9.')
testTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 1)).setObjects(("DIGIPDU-MIB", "trapArg1"))
if mibBuilder.loadTexts: testTrap.setStatus('current')
if mibBuilder.loadTexts: testTrap.setDescription('testData')
inFeedOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 101)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: inFeedOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: inFeedOverloadTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tinFeedIndex,\r\r\n      inFeedStatus,\r\r\n      inFeedCurrent,\r\r\n      inFeedOverload\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
inFeedHighCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 102)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: inFeedHighCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: inFeedHighCurrentTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tinFeedIndex,\r\r\n      inFeedStatus,\r\r\n      inFeedCurrent,\r\r\n      inFeedHighWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
inFeedLowCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 103)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: inFeedLowCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: inFeedLowCurrentTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tinFeedIndex,\r\r\n      inFeedStatus,\r\r\n      inFeedCurrent,\r\r\n      inFeedHighWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
inFeedBranchOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 104)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: inFeedBranchOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: inFeedBranchOverloadTrap.setDescription("\r\r\n\t\t\tinFeedIndex,\r\r\n\t\t\tBranchIndex,\r\r\n      inFeedStatus,\r\r\n      inFeedCurrent,\r\r\n      inFeedOverload\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
inFeedBranchHighCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 105)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: inFeedBranchHighCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: inFeedBranchHighCurrentTrap.setDescription("\r\r\n\t\t\tinFeedIndex,\r\r\n\t\t\tBranchIndex,\r\r\n      inFeedStatus,\r\r\n      inFeedCurrent,\r\r\n      inFeedHighWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
inFeedBranchLowCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 106)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: inFeedBranchLowCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: inFeedBranchLowCurrentTrap.setDescription("\r\r\n\t\t\tinFeedIndex,\r\r\n\t\t\tBranchIndex,\r\r\n      inFeedStatus,\r\r\n      inFeedCurrent,\r\r\n      inFeedHighWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
outWebOperationTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 201)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"))
if mibBuilder.loadTexts: outWebOperationTrap.setStatus('current')
if mibBuilder.loadTexts: outWebOperationTrap.setDescription("Outlet on/off change event.  If enabled, this trap is sent\r\r\n       when the outStatus changes from any 'on' state ('on',\r\r\n       'onWait', 'onError', or 'onFuse') to any 'off' state ('off',\r\r\n       'offWait', 'offError', or 'offFuse'), and vice-versa.")
outPanelOperationTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 202)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"))
if mibBuilder.loadTexts: outPanelOperationTrap.setStatus('current')
if mibBuilder.loadTexts: outPanelOperationTrap.setDescription("Outlet on/off change event.  If enabled, this trap is sent\r\r\n       when the outStatus changes from any 'on' state ('on',\r\r\n       'onWait', 'onError', or 'onFuse') to any 'off' state ('off',\r\r\n       'offWait', 'offError', or 'offFuse'), and vice-versa.")
outAPIOperationTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 203)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"))
if mibBuilder.loadTexts: outAPIOperationTrap.setStatus('current')
if mibBuilder.loadTexts: outAPIOperationTrap.setDescription("Outlet on/off change event.  If enabled, this trap is sent\r\r\n       when the outStatus changes from any 'on' state ('on',\r\r\n       'onWait', 'onError', or 'onFuse') to any 'off' state ('off',\r\r\n       'offWait', 'offError', or 'offFuse'), and vice-versa.")
outScheduleTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 211)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"), ("DIGIPDU-MIB", "trapArg6"), ("DIGIPDU-MIB", "trapArg7"), ("DIGIPDU-MIB", "trapArg8"), ("DIGIPDU-MIB", "trapArg9"))
if mibBuilder.loadTexts: outScheduleTrap.setStatus('current')
if mibBuilder.loadTexts: outScheduleTrap.setDescription("Outlet on/off change event.  If enabled, this trap is sent\r\r\n       when the outStatus changes from any 'on' state ('on',\r\r\n       'onWait', 'onError', or 'onFuse') to any 'off' state ('off',\r\r\n       'offWait', 'offError', or 'offFuse'), and vice-versa.")
outScheduleErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 212)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"), ("DIGIPDU-MIB", "trapArg6"), ("DIGIPDU-MIB", "trapArg7"))
if mibBuilder.loadTexts: outScheduleErrorTrap.setStatus('current')
if mibBuilder.loadTexts: outScheduleErrorTrap.setDescription("Outlet on/off change event.  If enabled, this trap is sent\r\r\n       when the outStatus changes from any 'on' state ('on',\r\r\n       'onWait', 'onError', or 'onFuse') to any 'off' state ('off',\r\r\n       'offWait', 'offError', or 'offFuse'), and vice-versa.")
outPingTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 221)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"))
if mibBuilder.loadTexts: outPingTrap.setStatus('current')
if mibBuilder.loadTexts: outPingTrap.setDescription("Outlet on/off change event.  If enabled, this trap is sent\r\r\n       when the outStatus changes from any 'on' state ('on',\r\r\n       'onWait', 'onError', or 'onFuse') to any 'off' state ('off',\r\r\n       'offWait', 'offError', or 'offFuse'), and vice-versa.")
outPingRebootTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 222)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"))
if mibBuilder.loadTexts: outPingRebootTrap.setStatus('current')
if mibBuilder.loadTexts: outPingRebootTrap.setDescription("Outlet on/off change event.  If enabled, this trap is sent\r\r\n       when the outStatus changes from any 'on' state ('on',\r\r\n       'onWait', 'onError', or 'onFuse') to any 'off' state ('off',\r\r\n       'offWait', 'offError', or 'offFuse'), and vice-versa.")
outOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 231)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: outOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: outOverloadTrap.setDescription("\r\r\n      deviceIndex,\r\r\n      outIndex,\r\r\n      outCurrentStatus,\r\r\n      outCurrent,\r\r\n      outHighWarning\r\r\n\t\t\tOutlet load event.  If enabled, this trap is sent when the\r\r\n       outLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the outLoadStatus\r\r\n       remains in an error state.  If the outLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error outLoadStatus, and then\r\r\n       stops being repeated.")
outHighCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 232)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: outHighCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: outHighCurrentTrap.setDescription("\r\r\n      deviceIndex,\r\r\n      outIndex,\r\r\n      outCurrentStatus,\r\r\n      outCurrent,\r\r\n      outHighWarning\r\r\n\t\t\tOutlet load event.  If enabled, this trap is sent when the\r\r\n       outLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the outLoadStatus\r\r\n       remains in an error state.  If the outLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error outLoadStatus, and then\r\r\n       stops being repeated.")
outLowCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 233)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: outLowCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: outLowCurrentTrap.setDescription("\r\r\n      deviceIndex,\r\r\n      outIndex,\r\r\n      outCurrentStatus,\r\r\n      outCurrent,\r\r\n      outLowWarning\r\r\n\t\t\tOutlet load event.  If enabled, this trap is sent when the\r\r\n       outLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the outLoadStatus\r\r\n       remains in an error state.  If the outLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error outLoadStatus, and then\r\r\n       stops being repeated.")
outConditionCtrlTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 241)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: outConditionCtrlTrap.setStatus('current')
if mibBuilder.loadTexts: outConditionCtrlTrap.setDescription("\r\r\n      deviceIndex,\r\r\n      outIndex,\r\r\n      outCurrentStatus,\r\r\n      outCurrent,\r\r\n      outLowWarning\r\r\n\t\t\tOutlet load event.  If enabled, this trap is sent when the\r\r\n       outLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the outLoadStatus\r\r\n       remains in an error state.  If the outLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error outLoadStatus, and then\r\r\n       stops being repeated.")
outUPSACFaultOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 311)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: outUPSACFaultOffTrap.setStatus('current')
if mibBuilder.loadTexts: outUPSACFaultOffTrap.setDescription("\r\r\n      deviceIndex,\r\r\n      value\r\r\n\t\t\tOutlet load event.  If enabled, this trap is sent when the\r\r\n       outLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the outLoadStatus\r\r\n       remains in an error state.  If the outLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error outLoadStatus, and then\r\r\n       stops being repeated.")
outUPSBatteryLevelOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 312)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: outUPSBatteryLevelOffTrap.setStatus('current')
if mibBuilder.loadTexts: outUPSBatteryLevelOffTrap.setDescription("\r\r\n      deviceIndex,\r\r\n      value\r\r\n\t\t\tOutlet load event.  If enabled, this trap is sent when the\r\r\n       outLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the outLoadStatus\r\r\n       remains in an error state.  If the outLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error outLoadStatus, and then\r\r\n       stops being repeated.")
outUPSBatteryLowOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 313)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: outUPSBatteryLowOffTrap.setStatus('current')
if mibBuilder.loadTexts: outUPSBatteryLowOffTrap.setDescription("\r\r\n      deviceIndex,\r\r\n      value\r\r\n\t\t\tOutlet load event.  If enabled, this trap is sent when the\r\r\n       outLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the outLoadStatus\r\r\n       remains in an error state.  If the outLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error outLoadStatus, and then\r\r\n       stops being repeated.")
outUPSACRecoveryOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 314)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: outUPSACRecoveryOnTrap.setStatus('current')
if mibBuilder.loadTexts: outUPSACRecoveryOnTrap.setDescription("\r\r\n      deviceIndex,\r\r\n      value\r\r\n\t\t\tOutlet load event.  If enabled, this trap is sent when the\r\r\n       outLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the outLoadStatus\r\r\n       remains in an error state.  If the outLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error outLoadStatus, and then\r\r\n       stops being repeated.")
outUPSBatteryLevelOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 315)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: outUPSBatteryLevelOnTrap.setStatus('current')
if mibBuilder.loadTexts: outUPSBatteryLevelOnTrap.setDescription("\r\r\n      deviceIndex,\r\r\n      value\r\r\n\t\t\tOutlet load event.  If enabled, this trap is sent when the\r\r\n       outLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the outLoadStatus\r\r\n       remains in an error state.  If the outLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error outLoadStatus, and then\r\r\n       stops being repeated.")
outUPSBatteryLowRecoveryOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 316)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: outUPSBatteryLowRecoveryOnTrap.setStatus('current')
if mibBuilder.loadTexts: outUPSBatteryLowRecoveryOnTrap.setDescription("\r\r\n      deviceIndex,\r\r\n      value\r\r\n\t\t\tOutlet load event.  If enabled, this trap is sent when the\r\r\n       outLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the outLoadStatus\r\r\n       remains in an error state.  If the outLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error outLoadStatus, and then\r\r\n       stops being repeated.")
pduConnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 401)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: pduConnectTrap.setStatus('current')
if mibBuilder.loadTexts: pduConnectTrap.setDescription("\r\r\n\t\t\tPDUIndex,\r\r\n      PDUConnectStatus\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
pduOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 402)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: pduOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: pduOverloadTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tPDUIndex,\r\r\n      PDUStatus,\r\r\n      PDUCurrent,\r\r\n      PDUOverload\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
pduHighCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 403)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: pduHighCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: pduHighCurrentTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tPDUIndex,\r\r\n      PDUStatus,\r\r\n      PDUCurrent,\r\r\n      PDUHighWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
pduLowCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 404)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: pduLowCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: pduLowCurrentTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tPDUIndex,\r\r\n      PDUStatus,\r\r\n      PDUCurrent,\r\r\n      PDUHighWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
pduBranchOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 405)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: pduBranchOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: pduBranchOverloadTrap.setDescription("\r\r\n\t\t\tPDUIndex,\r\r\n\t\t\tBranchIndex,\r\r\n      PDUStatus,\r\r\n      PDUCurrent,\r\r\n      PDUOverload\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
pduBranchHighCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 406)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: pduBranchHighCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: pduBranchHighCurrentTrap.setDescription("\r\r\n\t\t\tPDUIndex,\r\r\n\t\t\tBranchIndex,\r\r\n      PDUStatus,\r\r\n      PDUCurrent,\r\r\n      PDUHighWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
pduBranchLowCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 407)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: pduBranchLowCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: pduBranchLowCurrentTrap.setDescription("\r\r\n\t\t\tPDUIndex,\r\r\n\t\t\tBranchIndex,\r\r\n      PDUStatus,\r\r\n      PDUCurrent,\r\r\n      PDUHighWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
inbuiltTemperatureHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 501)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"))
if mibBuilder.loadTexts: inbuiltTemperatureHighTrap.setStatus('current')
if mibBuilder.loadTexts: inbuiltTemperatureHighTrap.setDescription("\r\r\n\t\t\tInTempId,\r\r\n\t\t\tInTempStatus,\r\r\n\t\t\tInTempTemperature,\r\r\n      InTempTemperatureWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
inbuiltTemperatureLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 502)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"))
if mibBuilder.loadTexts: inbuiltTemperatureLowTrap.setStatus('current')
if mibBuilder.loadTexts: inbuiltTemperatureLowTrap.setDescription("\r\r\n\t\t\tInTempId,\r\r\n\t\t\tInTempStatus,\r\r\n\t\t\tInTempTemperature,\r\r\n      InTempTemperatureWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
envConnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 511)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"))
if mibBuilder.loadTexts: envConnectTrap.setStatus('current')
if mibBuilder.loadTexts: envConnectTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tENVIndex,\r\r\n      ENVConnectStatus\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
envTemperatureConnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 512)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"))
if mibBuilder.loadTexts: envTemperatureConnectTrap.setStatus('current')
if mibBuilder.loadTexts: envTemperatureConnectTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tENVIndex,\r\r\n      ENVConnectStatus\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
envTemperatureHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 513)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"), ("DIGIPDU-MIB", "trapArg6"))
if mibBuilder.loadTexts: envTemperatureHighTrap.setStatus('current')
if mibBuilder.loadTexts: envTemperatureHighTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tEnvId,\r\r\n\t\t\tEnvStatus,\r\r\n\t\t\tEnvTemperature,\r\r\n      EnvTemperatureWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
envTemperatureLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 514)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"), ("DIGIPDU-MIB", "trapArg6"))
if mibBuilder.loadTexts: envTemperatureLowTrap.setStatus('current')
if mibBuilder.loadTexts: envTemperatureLowTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tEnvId,\r\r\n\t\t\tEnvStatus,\r\r\n\t\t\tEnvTemperature,\r\r\n      EnvTemperatureWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
envRHConnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 515)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: envRHConnectTrap.setStatus('current')
if mibBuilder.loadTexts: envRHConnectTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tEnvId,\r\r\n\t\t\tEnvStatus,\r\r\n\t\t\tEnvRH,\r\r\n      EnvRHWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
envRHHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 516)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: envRHHighTrap.setStatus('current')
if mibBuilder.loadTexts: envRHHighTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tEnvId,\r\r\n\t\t\tEnvStatus,\r\r\n\t\t\tEnvRH,\r\r\n      EnvRHWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
envRHLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 517)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: envRHLowTrap.setStatus('current')
if mibBuilder.loadTexts: envRHLowTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tEnvId,\r\r\n\t\t\tEnvStatus,\r\r\n\t\t\tEnvRH,\r\r\n      EnvRHWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
inputTimeOutTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 601)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"))
if mibBuilder.loadTexts: inputTimeOutTrap.setStatus('current')
if mibBuilder.loadTexts: inputTimeOutTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tEnvId,\r\r\n\t\t\tEnvStatus,\r\r\n\t\t\tEnvTemperature,\r\r\n      EnvTemperatureWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
inputTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 602)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"))
if mibBuilder.loadTexts: inputTrap.setStatus('current')
if mibBuilder.loadTexts: inputTrap.setDescription("\r\r\n      deviceIndex,\r\r\n\t\t\tEnvId,\r\r\n\t\t\tEnvStatus,\r\r\n\t\t\tEnvTemperature,\r\r\n      EnvTemperatureWarning\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
upsConnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 701)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: upsConnectTrap.setStatus('current')
if mibBuilder.loadTexts: upsConnectTrap.setDescription("\r\r\n\t\t\tModel,\r\r\n      ConnectStatus\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
upsOnBatteryTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 702)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: upsOnBatteryTrap.setStatus('current')
if mibBuilder.loadTexts: upsOnBatteryTrap.setDescription("\r\r\n\t\t\tModel,\r\r\n      ConnectStatus\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
upsOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 703)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: upsOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: upsOverloadTrap.setDescription("\r\r\n\t\t\tModel,\r\r\n      ConnectStatus\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
upsBatteryLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 704)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: upsBatteryLowTrap.setStatus('current')
if mibBuilder.loadTexts: upsBatteryLowTrap.setDescription("\r\r\n\t\t\tModel,\r\r\n      ConnectStatus\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
upsBatteryReplace = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 705)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: upsBatteryReplace.setStatus('current')
if mibBuilder.loadTexts: upsBatteryReplace.setDescription("\r\r\n\t\t\tModel,\r\r\n      ConnectStatus\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
daisyChainConnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 801)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: daisyChainConnectTrap.setStatus('current')
if mibBuilder.loadTexts: daisyChainConnectTrap.setDescription("\r\r\n\t\t\tModel,\r\r\n      ConnectStatus\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
micDetectOccurTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 901)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: micDetectOccurTrap.setStatus('current')
if mibBuilder.loadTexts: micDetectOccurTrap.setDescription("\r\r\n\t\t\tModel,\r\r\n      ConnectStatus\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
vibrationDetectOccurTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 902)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: vibrationDetectOccurTrap.setStatus('current')
if mibBuilder.loadTexts: vibrationDetectOccurTrap.setDescription("\r\r\n\t\t\tModel,\r\r\n      ConnectStatus\r\r\n\t\t\tInput feed load event.  If enabled, this trap is sent when\r\r\n       the infeedLoadStatus indicates an error state ('loadLow',\r\r\n       'loadHigh', 'overLoad', 'readError', or 'noComm').  This\r\r\n       trap is repeated periodically while the infeedLoadStatus\r\r\n       remains in an error state.  If the infeedLoadStatus returns\r\r\n       to a non-error state ('normal' or 'notOn'), this trap is\r\r\n       sent once more with the non-error infeedLoadStatus, and then\r\r\n       stops being repeated.")
mibBuilder.exportSymbols("DIGIPDU-MIB", pduFrequency=pduFrequency, uPS=uPS, deviceInputTotal=deviceInputTotal, inFeedBranch2PowerFactor=inFeedBranch2PowerFactor, pduPowerFactor=pduPowerFactor, aTSVoltage=aTSVoltage, outDataList=outDataList, extendTemperatureLowWarning=extendTemperatureLowWarning, pduDataList=pduDataList, outScheduleErrorTrap=outScheduleErrorTrap, deviceUnitStatus=deviceUnitStatus, trapArg2=trapArg2, inputTimeout=inputTimeout, inFeedBranch1LowWarning=inFeedBranch1LowWarning, inFeedLowWarning=inFeedLowWarning, pduStatus=pduStatus, pduMonitor=pduMonitor, uPSBatteryReplace=uPSBatteryReplace, PYSNMP_MODULE_ID=smart, uPSOutputOnBattery=uPSOutputOnBattery, outVoltage=outVoltage, inputState=inputState, pduBranch2HighWarning=pduBranch2HighWarning, uPSOutputLoad=uPSOutputLoad, outAPIOperationTrap=outAPIOperationTrap, daisyChainConnectTrap=daisyChainConnectTrap, smart=smart, inbuiltTemperatureLowTrap=inbuiltTemperatureLowTrap, extendTemperatureHighWarning=extendTemperatureHighWarning, outUPSBatteryLevelOffTrap=outUPSBatteryLevelOffTrap, uPSBatteryRunTime=uPSBatteryRunTime, outUPSBatteryLevelOnTrap=outUPSBatteryLevelOnTrap, deviceOutKind=deviceOutKind, trapArg9=trapArg9, extendRHLowWarning=extendRHLowWarning, inputDefault=inputDefault, micLastDetectTime=micLastDetectTime, inbuiltTemperatureEntry=inbuiltTemperatureEntry, inputDetectTime=inputDetectTime, uPSBatteryVoltage=uPSBatteryVoltage, micDetectOccurTrap=micDetectOccurTrap, vibrationDetectPeriod=vibrationDetectPeriod, aTSStatus=aTSStatus, outConditionCtrlTrap=outConditionCtrlTrap, deviceATSKind=deviceATSKind, pduBranchHighCurrentTrap=pduBranchHighCurrentTrap, devicePDUTotal=devicePDUTotal, envRHLowTrap=envRHLowTrap, outSwitchStatus=outSwitchStatus, aTSEntry=aTSEntry, deviceUnitInfeedTotal=deviceUnitInfeedTotal, deviceExtendTemperatureTotal=deviceExtendTemperatureTotal, inFeedEntry=inFeedEntry, deviceOutTotal=deviceOutTotal, extendTemperatureDeviceId=extendTemperatureDeviceId, uPSBatteryLow=uPSBatteryLow, vibrationLastDetectTime=vibrationLastDetectTime, pduOverload=pduOverload, digipdu=digipdu, deviceUPS=deviceUPS, outComputerStatus=outComputerStatus, outPowerLoad=outPowerLoad, extendRHStatus=extendRHStatus, upsOnBatteryTrap=upsOnBatteryTrap, deviceUnitTotal=deviceUnitTotal, productResetDetector=productResetDetector, trapArg4=trapArg4, uPSOutputVoltage=uPSOutputVoltage, arg=arg, testTrap=testTrap, outUPSACFaultOffTrap=outUPSACFaultOffTrap, upsOverloadTrap=upsOverloadTrap, deviceTable=deviceTable, pduBranchLowCurrentTrap=pduBranchLowCurrentTrap, outLowWarning=outLowWarning, envRHHighTrap=envRHHighTrap, vibrationDetectTimes=vibrationDetectTimes, rfidReader=rfidReader, pduPowerLoad=pduPowerLoad, pduLowCurrentTrap=pduLowCurrentTrap, inFeedCurrent=inFeedCurrent, micDetectPeriod=micDetectPeriod, inbuiltTemperatureHighWarning=inbuiltTemperatureHighWarning, pduBranch=pduBranch, pduBranch2Current=pduBranch2Current, inFeedStatus=inFeedStatus, uPSBatteryLevel=uPSBatteryLevel, productSerialNumber=productSerialNumber, envTemperatureLowTrap=envTemperatureLowTrap, pduBranch1Current=pduBranch1Current, deviceInFeedBranch=deviceInFeedBranch, extendTemperaturePort=extendTemperaturePort, inFeedLowCurrentTrap=inFeedLowCurrentTrap, pduBranch2LowWarning=pduBranch2LowWarning, inbuiltTemperature=inbuiltTemperature, extendRHMonitor=extendRHMonitor, uPSConnectStatus=uPSConnectStatus, outEntry=outEntry, inFeedIndex=inFeedIndex, pduBranch1HighWarning=pduBranch1HighWarning, extendRHTable=extendRHTable, extendRH=extendRH, extendTemperatureMonitor=extendTemperatureMonitor, aTSTable=aTSTable, outIndex=outIndex, inFeedBranch=inFeedBranch, extendTemperatureTable=extendTemperatureTable, outScheduleTrap=outScheduleTrap, outLowCurrentTrap=outLowCurrentTrap, outHighWarning=outHighWarning, vibrationDetec=vibrationDetec, pduOverloadTrap=pduOverloadTrap, envRHConnectTrap=envRHConnectTrap, outTable=outTable, productFirmwareVersion=productFirmwareVersion, pduCurrent=pduCurrent, outUPSBatteryLowRecoveryOnTrap=outUPSBatteryLowRecoveryOnTrap, trapArg5=trapArg5, deviceInbuiltTempTotal=deviceInbuiltTempTotal, uPSSerial=uPSSerial, peripheralTables=peripheralTables, rfidDetectTime=rfidDetectTime, uPSTemperature=uPSTemperature, extendTemperatureEntry=extendTemperatureEntry, outPowerFactor=outPowerFactor, inputEntry=inputEntry, rfidCardNum=rfidCardNum, uPSOutputCurrent=uPSOutputCurrent, inbuiltTemperatureTable=inbuiltTemperatureTable, uPSUARTId=uPSUARTId, pduPowerEnergy=pduPowerEnergy, productModel=productModel, trap=trap, trapArg8=trapArg8, deviceDaisyChain=deviceDaisyChain, extendTemperatureStatus=extendTemperatureStatus, inFeedPowerEnergy=inFeedPowerEnergy, inFeedBranch2Current=inFeedBranch2Current, pduTables=pduTables, deviceUnitOutTotal=deviceUnitOutTotal, outUPSBatteryLowOffTrap=outUPSBatteryLowOffTrap, outUPSACRecoveryOnTrap=outUPSACRecoveryOnTrap, envConnectTrap=envConnectTrap, outOverloadTrap=outOverloadTrap, upsBatteryLowTrap=upsBatteryLowTrap, pduBranch2Overload=pduBranch2Overload, inFeedHighWarning=inFeedHighWarning, inbuiltTemperatureStatus=inbuiltTemperatureStatus, extendRHDeviceId=extendRHDeviceId, pduBranchOverloadTrap=pduBranchOverloadTrap, inFeedPowerLoad=inFeedPowerLoad, deviceInFeedKind=deviceInFeedKind, inbuiltTemperatureIndex=inbuiltTemperatureIndex, uPSInputVoltage=uPSInputVoltage, inFeedPowerFactor=inFeedPowerFactor, pduBranch1Overload=pduBranch1Overload, extendTemperatureIndex=extendTemperatureIndex, pduLowWarning=pduLowWarning, micDetec=micDetec, outCurrentStatus=outCurrentStatus, trapArg3=trapArg3, outCurrent=outCurrent, pduModel=pduModel, inFeedBranch1OverLoad=inFeedBranch1OverLoad, pduBranch1LowWarning=pduBranch1LowWarning, outPanelOperationTrap=outPanelOperationTrap, inFeedTable=inFeedTable, product=product, productPartNumber=productPartNumber, inFeedBranchOverloadTrap=inFeedBranchOverloadTrap, inFeedBranchLowCurrentTrap=inFeedBranchLowCurrentTrap, deviceUnitIndex=deviceUnitIndex, extendRHEntry=extendRHEntry, outSwitchCtrl=outSwitchCtrl, uPSBatteryDate=uPSBatteryDate, inFeedBranch2HighWarning=inFeedBranch2HighWarning, inFeedVoltage=inFeedVoltage, envTemperatureConnectTrap=envTemperatureConnectTrap, outOverload=outOverload, extendRHHighWarning=extendRHHighWarning, inputTrap=inputTrap, inputTable=inputTable, inFeedBranch2PowerLoad=inFeedBranch2PowerLoad, deviceUnitTable=deviceUnitTable, inputTimeOutTrap=inputTimeOutTrap, trapArg1=trapArg1, extendRHIndex=extendRHIndex, pduHighCurrentTrap=pduHighCurrentTrap, pduConnectTrap=pduConnectTrap, uPSOutputFrequency=uPSOutputFrequency, upsConnectTrap=upsConnectTrap, inFeedOverloadTrap=inFeedOverloadTrap, outPingTrap=outPingTrap, inFeedDataList=inFeedDataList, pduVoltage=pduVoltage, envTemperatureHighTrap=envTemperatureHighTrap, inputStatus=inputStatus, outWebOperationTrap=outWebOperationTrap, micDetectTimes=micDetectTimes, inFeedHighCurrentTrap=inFeedHighCurrentTrap, outPingRebootTrap=outPingRebootTrap, inFeedBranch1Current=inFeedBranch1Current, outHighCurrentTrap=outHighCurrentTrap, inFeedFrequency=inFeedFrequency, uPSModel=uPSModel, uPSFirmware=uPSFirmware, deviceExtendRHTotal=deviceExtendRHTotal, pduEntry=pduEntry, deviceUnitEntry=deviceUnitEntry, inFeedOverLoad=inFeedOverLoad, inFeedBranch2LowWarning=inFeedBranch2LowWarning, pduIndex=pduIndex, trapArg7=trapArg7, aTSIndex=aTSIndex, inFeedBranch1HighWarning=inFeedBranch1HighWarning, dataLogTable=dataLogTable, productTemperatureKind=productTemperatureKind, inFeedBranchHighCurrentTrap=inFeedBranchHighCurrentTrap, trapArg6=trapArg6, extendRHPort=extendRHPort, inputIndex=inputIndex, smartTraps=smartTraps, inFeedBranch1PowerFactor=inFeedBranch1PowerFactor, vibrationDetectOccurTrap=vibrationDetectOccurTrap, extendTemperature=extendTemperature, deviceInFeedTotal=deviceInFeedTotal, inFeedBranch2OverLoad=inFeedBranch2OverLoad, pduHighWarning=pduHighWarning, aTSFrequency=aTSFrequency, inbuiltTemperatureHighTrap=inbuiltTemperatureHighTrap, inFeedBranch1PowerLoad=inFeedBranch1PowerLoad, upsBatteryReplace=upsBatteryReplace, uPSOutputOverload=uPSOutputOverload, inbuiltTemperatureLowWarning=inbuiltTemperatureLowWarning)
