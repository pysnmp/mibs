#
# PySNMP MIB module POSEIDON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hwg/POSEIDON-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 08:56:12 2024
# On host fv-az1149-759 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Bits, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, TimeTicks, ModuleIdentity, ObjectIdentity, MibIdentifier, iso, enterprises, NotificationType, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "iso", "enterprises", "NotificationType", "Counter32", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class OnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("off", 0), ("on", 1))

class OutputType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("onOff", 0), ("rts", 1), ("dtr", 2))

class OutputMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("manual", 0), ("autoAlarm", 1), ("autoTriggerEq", 2), ("autoTriggerHi", 3), ("autoTriggerLo", 4))

class UnitType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("celsius", 0), ("fahrenheit", 1), ("kelvin", 2), ("percent", 3), ("volt", 4), ("miliAmper", 5), ("noUnit", 6), ("pulse", 7), ("switch", 8), ("dewPoint", 9), ("absoluteHumidity", 10), ("pressure", 11), ("universal", 12))

class InputAlarmSetup(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("inactive", 0), ("activeOff", 1), ("activeOn", 2))

class InputAlarmState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("normal", 0), ("alarm", 1))

class SensorState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("invalid", 0), ("normal", 1), ("alarmstate", 2), ("alarm", 3))

class SensorID(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class IOName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 20)

class SensorName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 15)

class SensorValue(Integer32):
    pass

class SensorString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 10)

class SensorUnitString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 4)

class SensorFlags(Integer32):
    pass

class TimeStamp(TimeTicks):
    pass

hwgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 21796))
charonII = MibIdentifier((1, 3, 6, 1, 4, 1, 21796, 3))
poseidon = MibIdentifier((1, 3, 6, 1, 4, 1, 21796, 3, 3))
info = MibIdentifier((1, 3, 6, 1, 4, 1, 21796, 3, 3, 70))
setup = MibIdentifier((1, 3, 6, 1, 4, 1, 21796, 3, 3, 99))
inpTable = MibTable((1, 3, 6, 1, 4, 1, 21796, 3, 3, 1), )
if mibBuilder.loadTexts: inpTable.setStatus('current')
if mibBuilder.loadTexts: inpTable.setDescription('A list of binary input entries.')
inpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21796, 3, 3, 1, 1), ).setIndexNames((0, "POSEIDON-MIB", "inpIndex"))
if mibBuilder.loadTexts: inpEntry.setStatus('current')
if mibBuilder.loadTexts: inpEntry.setDescription('An entry containing information applicable\n\t\tto a particular binary input.')
inpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 1, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: inpIndex.setStatus('current')
if mibBuilder.loadTexts: inpIndex.setDescription('The binary input index.')
inpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 1, 1, 2), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inpValue.setStatus('current')
if mibBuilder.loadTexts: inpValue.setDescription('The binary input value.')
inpName = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 1, 1, 3), IOName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inpName.setStatus('current')
if mibBuilder.loadTexts: inpName.setDescription('The binary input name.')
inpAlarmSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 1, 1, 4), InputAlarmSetup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inpAlarmSetup.setStatus('current')
if mibBuilder.loadTexts: inpAlarmSetup.setDescription('You can enable alarm for this binary input.\n\t\tAlarm can be inactive or active for On/Off state.')
inpAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 1, 1, 5), InputAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inpAlarmState.setStatus('current')
if mibBuilder.loadTexts: inpAlarmState.setDescription('The binary input alarm state.')
outTable = MibTable((1, 3, 6, 1, 4, 1, 21796, 3, 3, 2), )
if mibBuilder.loadTexts: outTable.setStatus('current')
if mibBuilder.loadTexts: outTable.setDescription('A list of binary output entries.')
outEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21796, 3, 3, 2, 1), ).setIndexNames((0, "POSEIDON-MIB", "outIndex"))
if mibBuilder.loadTexts: outEntry.setStatus('current')
if mibBuilder.loadTexts: outEntry.setDescription('An entry containing information applicable\n\t\tto a particular binary output.')
outIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: outIndex.setStatus('current')
if mibBuilder.loadTexts: outIndex.setDescription('The binary output index.')
outValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 2, 1, 2), OnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outValue.setStatus('current')
if mibBuilder.loadTexts: outValue.setDescription('The binary output value. 0 off(open), 1 on(close)')
outName = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 2, 1, 3), IOName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outName.setStatus('current')
if mibBuilder.loadTexts: outName.setDescription('The binary output name.')
outType = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 2, 1, 4), OutputType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outType.setStatus('current')
if mibBuilder.loadTexts: outType.setDescription('The binary output type. 0 relay (off, on), 1 rts (-10,+10V), 2 dtr (0,10V)')
outMode = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 2, 1, 5), OutputMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outMode.setStatus('current')
if mibBuilder.loadTexts: outMode.setDescription('The binary output mode. 0 manual, 1 autoAlarm,\n\t\t2 autoTriggerEq, 3 autoTriggerHi, 4 autoTriggerLo')
sensTable = MibTable((1, 3, 6, 1, 4, 1, 21796, 3, 3, 3), )
if mibBuilder.loadTexts: sensTable.setStatus('current')
if mibBuilder.loadTexts: sensTable.setDescription('A list of sensor table entries. The number\n\t\tof entries corresponds with number of detected sensors.')
sensEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21796, 3, 3, 3, 1), ).setIndexNames((0, "POSEIDON-MIB", "sensIndex"))
if mibBuilder.loadTexts: sensEntry.setStatus('current')
if mibBuilder.loadTexts: sensEntry.setDescription('An entry containing information applicable to a\n\t\tparticular sensor.')
sensIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 3, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: sensIndex.setStatus('current')
if mibBuilder.loadTexts: sensIndex.setDescription('The sensor index.')
sensName = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 3, 1, 2), SensorName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensName.setStatus('current')
if mibBuilder.loadTexts: sensName.setDescription('The sensor name.')
sensState = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 3, 1, 4), SensorState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensState.setStatus('current')
if mibBuilder.loadTexts: sensState.setDescription('The sensor state.')
sensString = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 3, 1, 5), SensorString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensString.setStatus('current')
if mibBuilder.loadTexts: sensString.setDescription('The string representation of sensor value.')
sensValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 3, 1, 6), SensorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensValue.setStatus('current')
if mibBuilder.loadTexts: sensValue.setDescription('The integer (decimal * 10) representation\n\t\tof sensor value.')
sensValueRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 3, 1, 7), SensorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensValueRaw.setStatus('current')
if mibBuilder.loadTexts: sensValueRaw.setDescription('The original raw value of sensor\n\t\t(it differs for each sensor type, especially\n\t\t 1-Wire sensors have different precisions).')
sensID = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 3, 1, 8), SensorID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensID.setStatus('current')
if mibBuilder.loadTexts: sensID.setDescription('The sensor ID.')
sensUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 3, 1, 9), UnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensUnit.setStatus('current')
if mibBuilder.loadTexts: sensUnit.setDescription('The sensor unit.')
sensUnitString = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 3, 1, 10), SensorUnitString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensUnitString.setStatus('current')
if mibBuilder.loadTexts: sensUnitString.setDescription('The string representation of sensor unit.')
tsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 21796, 3, 3, 50))
tsAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 21796, 3, 3, 50, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAlarmsPresent.setStatus('current')
if mibBuilder.loadTexts: tsAlarmsPresent.setDescription('The present number of active alarm conditions.')
tsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 21796, 3, 3, 50, 2), )
if mibBuilder.loadTexts: tsAlarmTable.setStatus('current')
if mibBuilder.loadTexts: tsAlarmTable.setDescription('A list of alarm table entries.  The table contains\n\t\tzero, one, or many rows at any moment, depending upon\n\t\tthe number of alarm conditions in effect.  The table\n\t\tis initially empty at agent startup.  The agent\n\t\tcreates a row in the table each time a condition is\n\t\tdetected and deletes that row when that condition no\n\t\tlonger pertains.  The agent creates the first row with\n\t\ttsAlarmId equal to 1, and increments the value of\n\t\ttsAlarmId each time a new row is created, wrapping to\n\t\tthe first free value greater than or equal to 1 when\n\t\tthe maximum value of tsAlarmId would otherwise be\n\t\texceeded.  Consequently, after multiple operations,\n\t\tthe table may become sparse, e.g., containing entries\n\t\tfor rows 95, 100, 101, and 203 and the entries should\n\t\tnot be assumed to be in chronological order because\n\t\ttsAlarmId might have wrapped.\n\n\t\tThe number of rows in the table at any given time is\n\t\treflected by the value of tsAlarmsPresent.')
tsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21796, 3, 3, 50, 2, 1), ).setIndexNames((0, "POSEIDON-MIB", "tsAlarmIdx"))
if mibBuilder.loadTexts: tsAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: tsAlarmEntry.setDescription('An entry containing information applicable\n\t\tto a particular alarm.')
tsAlarmIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 50, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: tsAlarmIdx.setStatus('current')
if mibBuilder.loadTexts: tsAlarmIdx.setDescription('An index to alarm table.')
tsAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 50, 2, 1, 2), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAlarmId.setStatus('current')
if mibBuilder.loadTexts: tsAlarmId.setDescription('A unique identifier for an alarm condition.\n\t\tThis value must remain constant.')
tsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 50, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inputStateAlarm", 1), ("temperatureOutOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAlarmDescr.setStatus('current')
if mibBuilder.loadTexts: tsAlarmDescr.setDescription('Description of the alarm condition.')
tsAlarmSensName = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 50, 2, 1, 4), SensorName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAlarmSensName.setStatus('current')
if mibBuilder.loadTexts: tsAlarmSensName.setDescription('Name of sensor with alarm condition.')
tsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 50, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAlarmTime.setStatus('current')
if mibBuilder.loadTexts: tsAlarmTime.setDescription('The value of sysUpTime when the alarm condition was\n\t\tdetected.  If the alarm condition was detected\n\t\tat the time of agent startup and presumably existed\n\t\tbefore agent startup, the value of tsAlarmTime shall equal 0.')
infoAddressMAC = MibScalar((1, 3, 6, 1, 4, 1, 21796, 3, 3, 70, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoAddressMAC.setStatus('current')
if mibBuilder.loadTexts: infoAddressMAC.setDescription('MAC address in text form.\n\t\tIt is here to distinguish devices in trap messages.')
sensSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 21796, 3, 3, 99, 1))
unitType = MibScalar((1, 3, 6, 1, 4, 1, 21796, 3, 3, 99, 1, 1), UnitType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitType.setStatus('current')
if mibBuilder.loadTexts: unitType.setDescription('Units for displayed values.\n\t\tAll setup values are fixed in Celsius')
sensSetupTable = MibTable((1, 3, 6, 1, 4, 1, 21796, 3, 3, 99, 1, 2), )
if mibBuilder.loadTexts: sensSetupTable.setStatus('current')
if mibBuilder.loadTexts: sensSetupTable.setDescription('A list of sensor table setup entries. The number\n\t\tof entries corresponds with number of detected sensors.')
sensSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21796, 3, 3, 99, 1, 2, 1), ).setIndexNames((0, "POSEIDON-MIB", "sensSetupIndex"))
if mibBuilder.loadTexts: sensSetupEntry.setStatus('current')
if mibBuilder.loadTexts: sensSetupEntry.setDescription('An entry containing setup information\n\t\tfor a particular sensor.')
sensSetupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 99, 1, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: sensSetupIndex.setStatus('current')
if mibBuilder.loadTexts: sensSetupIndex.setDescription('The sensor setup table index.')
sensSetupName = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 99, 1, 2, 1, 2), SensorName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensSetupName.setStatus('current')
if mibBuilder.loadTexts: sensSetupName.setDescription('The sensor name.')
sensFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 99, 1, 2, 1, 5), SensorFlags()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensFlags.setStatus('current')
if mibBuilder.loadTexts: sensFlags.setDescription('The behaviour of sensor\n\t\t- 0x01: range or level detection\n\t\t- 0x02: enable trap sending\n\t\t-- 0x04: output set (thermostat)\n\t\t- 0x08: sensor enabled\n\t\t- 0x10: enable SMS sending\n\t\t- 0x20: enable email sending.')
sensLimitMin = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 99, 1, 2, 1, 6), SensorValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensLimitMin.setStatus('current')
if mibBuilder.loadTexts: sensLimitMin.setDescription('The sensor low limit.')
sensLimitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 99, 1, 2, 1, 7), SensorValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensLimitMax.setStatus('current')
if mibBuilder.loadTexts: sensLimitMax.setDescription('The sensor high limit.')
sensHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 21796, 3, 3, 99, 1, 2, 1, 8), SensorValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensHysteresis.setStatus('current')
if mibBuilder.loadTexts: sensHysteresis.setDescription('The sensor hysteresis.')
inpAlarmStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 21796, 3, 3) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("POSEIDON-MIB", "infoAddressMAC"), ("POSEIDON-MIB", "inpName"), ("POSEIDON-MIB", "inpValue"), ("POSEIDON-MIB", "inpAlarmState"))
if mibBuilder.loadTexts: inpAlarmStateChanged.setDescription('Input state entered/left alarm condition.\n\t\tThis trap always follows tsTrapAlarmStart/tsTrapAlarmEnd.')
sensAlarmStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 21796, 3, 3) + (0,2)).setObjects(("SNMPv2-MIB", "sysName"), ("POSEIDON-MIB", "infoAddressMAC"), ("POSEIDON-MIB", "sensName"), ("POSEIDON-MIB", "sensID"), ("POSEIDON-MIB", "sensState"), ("POSEIDON-MIB", "sensValue"), ("POSEIDON-MIB", "sensUnit"))
if mibBuilder.loadTexts: sensAlarmStateChanged.setDescription('Nth sensor state entered/left alarm condition.\n\t\tThis trap always follows tsTrapAlarmStart/tsTrapAlarmEnd.')
tsTrapAlarmStart = NotificationType((1, 3, 6, 1, 4, 1, 21796, 3, 3) + (0,3)).setObjects(("SNMPv2-MIB", "sysName"), ("POSEIDON-MIB", "infoAddressMAC"), ("POSEIDON-MIB", "tsAlarmId"), ("POSEIDON-MIB", "tsAlarmDescr"))
if mibBuilder.loadTexts: tsTrapAlarmStart.setDescription('This trap is sent each time an alarm is inserted\n\t\tinto to the alarm table.  It is sent on the insertion\n\t\tof all alarms except for powerFailure.')
tsTrapAlarmEnd = NotificationType((1, 3, 6, 1, 4, 1, 21796, 3, 3) + (0,4)).setObjects(("SNMPv2-MIB", "sysName"), ("POSEIDON-MIB", "infoAddressMAC"), ("POSEIDON-MIB", "tsAlarmId"), ("POSEIDON-MIB", "tsAlarmDescr"))
if mibBuilder.loadTexts: tsTrapAlarmEnd.setDescription('This trap is sent each time an alarm is removed\n\t\tfrom the alarm table.  It is sent on the removal\n\t\tof all alarms.')
mibBuilder.exportSymbols("POSEIDON-MIB", sensIndex=sensIndex, PositiveInteger=PositiveInteger, sensValue=sensValue, hwgroup=hwgroup, tsAlarmIdx=tsAlarmIdx, tsAlarmDescr=tsAlarmDescr, inpTable=inpTable, sensUnitString=sensUnitString, info=info, tsAlarm=tsAlarm, sensLimitMin=sensLimitMin, tsAlarmId=tsAlarmId, inpName=inpName, SensorString=SensorString, sensSetupIndex=sensSetupIndex, SensorState=SensorState, sensHysteresis=sensHysteresis, sensFlags=sensFlags, inpAlarmSetup=inpAlarmSetup, inpAlarmState=inpAlarmState, sensValueRaw=sensValueRaw, sensSetupTable=sensSetupTable, SensorFlags=SensorFlags, IOName=IOName, sensAlarmStateChanged=sensAlarmStateChanged, sensString=sensString, infoAddressMAC=infoAddressMAC, OutputType=OutputType, outTable=outTable, SensorUnitString=SensorUnitString, sensSetupName=sensSetupName, sensLimitMax=sensLimitMax, SensorName=SensorName, tsTrapAlarmStart=tsTrapAlarmStart, sensName=sensName, outType=outType, unitType=unitType, tsTrapAlarmEnd=tsTrapAlarmEnd, outIndex=outIndex, sensUnit=sensUnit, poseidon=poseidon, OutputMode=OutputMode, SensorID=SensorID, sensTable=sensTable, tsAlarmTable=tsAlarmTable, InputAlarmSetup=InputAlarmSetup, InputAlarmState=InputAlarmState, outValue=outValue, outName=outName, outMode=outMode, tsAlarmsPresent=tsAlarmsPresent, tsAlarmEntry=tsAlarmEntry, inpIndex=inpIndex, UnitType=UnitType, inpEntry=inpEntry, sensID=sensID, tsAlarmSensName=tsAlarmSensName, sensEntry=sensEntry, sensState=sensState, OnOff=OnOff, SensorValue=SensorValue, charonII=charonII, inpValue=inpValue, setup=setup, outEntry=outEntry, TimeStamp=TimeStamp, sensSetupEntry=sensSetupEntry, tsAlarmTime=tsAlarmTime, sensSetup=sensSetup, inpAlarmStateChanged=inpAlarmStateChanged)
