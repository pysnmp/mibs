#
# PySNMP MIB module SL-SONET-SUP-PM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/packetlight/SL-SONET-SUP-PM-MIB
# Produced by pysmi-1.1.12 at Wed Oct  9 02:23:24 2024
# On host fv-az1144-128 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PerfTotalCount, PerfCurrentCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfTotalCount", "PerfCurrentCount", "PerfIntervalCount")
slSonetMib, = mibBuilder.importSymbols("SL-SONET-MIB", "slSonetMib")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, MibIdentifier, Unsigned32, transmission, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, iso, ModuleIdentity, Integer32, IpAddress, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "Unsigned32", "transmission", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "iso", "ModuleIdentity", "Integer32", "IpAddress", "Bits", "Counter32")
DateAndTime, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "TruthValue", "DisplayString")
sonetSectionCurrentEntry, sonetFarEndVTIntervalEntry, sonetLineCurrentEntry, sonetPathCurrentEntry, sonetFarEndLineCurrentEntry, sonetPathIntervalEntry, sonetSectionIntervalEntry, sonetLineIntervalEntry, sonetFarEndLineIntervalEntry, sonetFarEndVTCurrentEntry, sonetFarEndPathIntervalEntry, sonetMediumEntry, sonetFarEndPathCurrentEntry, sonetVTCurrentEntry, sonetVTIntervalEntry = mibBuilder.importSymbols("SONET-MIB", "sonetSectionCurrentEntry", "sonetFarEndVTIntervalEntry", "sonetLineCurrentEntry", "sonetPathCurrentEntry", "sonetFarEndLineCurrentEntry", "sonetPathIntervalEntry", "sonetSectionIntervalEntry", "sonetLineIntervalEntry", "sonetFarEndLineIntervalEntry", "sonetFarEndVTCurrentEntry", "sonetFarEndPathIntervalEntry", "sonetMediumEntry", "sonetFarEndPathCurrentEntry", "sonetVTCurrentEntry", "sonetVTIntervalEntry")
sonetSupPmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3))
if mibBuilder.loadTexts: sonetSupPmMIB.setLastUpdated('199807131752Z')
if mibBuilder.loadTexts: sonetSupPmMIB.setOrganization('Argon Networks, Inc.')
if mibBuilder.loadTexts: sonetSupPmMIB.setContactInfo('        Ken Chapman\n        Postal: Argon Networks, Inc.\n                25 Porter Road\n                Littleton, MA  01460\n                USA\n        Phone:  +1 978 486 0665\n        Fax:    +1 978 486 9379\n        Email:  KChapman@Argon.com')
if mibBuilder.loadTexts: sonetSupPmMIB.setDescription('This MIB module provides extensions to the SONET-MIB (RFC 2558)\n        objects.  It provides definitions for management information\n        that supports those parts of ANSI T1.231-1997 that are not\n        covered by the SONET-MIB.')
sonetSupObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1))
sonetSupObjectsPath = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2))
sonetSupObjectsVT = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3))
sonetSupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 1))
sonetSupMedium = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 2))
sonetSupSection = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3))
sonetSupLine = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4))
sonetSupFarEndLine = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 5))
sonetSupPath = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1))
sonetSupFarEndPath = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 2))
sonetSupVT = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1))
sonetSupFarEndVT = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 2))
sonetSectionDefaultThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 1), )
if mibBuilder.loadTexts: sonetSectionDefaultThresholdTable.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDefaultThresholdTable.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDefaultThresholdTable.setDescription('The table of default thresholds for SONET section counters.')
sonetSectionDefaultThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 1, 1), ).setIndexNames((0, "SL-SONET-SUP-PM-MIB", "sonetSectionDefaultThresholdRate"))
if mibBuilder.loadTexts: sonetSectionDefaultThresholdEntry.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDefaultThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDefaultThresholdEntry.setDescription('An entry in the table of default thresholds.  The table has a\n        variable for each counter type and accumulation period\n        combination, but uses an index to indetify the digital signal\n        rate.  The agent must provide a set of default threshold values\n        for all rates that the NE supports.  The agent may make these\n        variables read-only.')
sonetSectionDefaultThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("oc1", 1), ("oc3", 2), ("oc12", 3), ("oc24", 4), ("oc48", 5), ("oc192", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionDefaultThresholdRate.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDefaultThresholdRate.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDefaultThresholdRate.setDescription('The digital signal rate for which the default threshold values\n        apply.')
sonetSectionDefaultCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDefaultCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDefaultCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDefaultCVThreshold.setDescription('The default value for SONET CV-S counter 15-minute interval\n        thresholds.')
sonetSectionDefaultESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDefaultESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDefaultESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDefaultESThreshold.setDescription('The default value for SONET ES-S counter 15-minute interval\n        thresholds.')
sonetSectionDefaultSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDefaultSESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDefaultSESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDefaultSESThreshold.setDescription('The default value for SONET SES-S counter 15-minute interval\n        thresholds.')
sonetSectionDefaultSEFSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDefaultSEFSThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDefaultSEFSThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDefaultSEFSThreshold.setDescription('The default value for SONET SEFS-S counter 15-minute interval\n        thresholds.')
sonetSectionDefaultDayCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDefaultDayCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDefaultDayCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDefaultDayCVThreshold.setDescription('The default value for SONET CV-S counter 15-minute interval\n        thresholds.')
sonetSectionDefaultDayESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDefaultDayESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDefaultDayESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDefaultDayESThreshold.setDescription('The default value for SONET ES-S counter 15-minute interval\n        thresholds.')
sonetSectionDefaultDaySESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDefaultDaySESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDefaultDaySESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDefaultDaySESThreshold.setDescription('The default value for SONET SES-S counter 15-minute interval\n        thresholds.')
sonetSectionDefaultDaySEFSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDefaultDaySEFSThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDefaultDaySEFSThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDefaultDaySEFSThreshold.setDescription('The default value for SONET SEFS-S counter 15-minute interval\n        thresholds.')
sonetSectionThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 2), )
if mibBuilder.loadTexts: sonetSectionThresholdTable.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionThresholdTable.setStatus('current')
if mibBuilder.loadTexts: sonetSectionThresholdTable.setDescription('The table of trap threshold values for SONET section counters.')
sonetSectionThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 2, 1), )
if mibBuilder.loadTexts: sonetSectionThresholdEntry.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
sonetSectionCurrentEntry.registerAugmentions(("SL-SONET-SUP-PM-MIB", "sonetSectionThresholdEntry"))
sonetSectionThresholdEntry.setIndexNames(*sonetSectionCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: sonetSectionThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: sonetSectionThresholdEntry.setDescription('An entry in the table of SONET Section trap thresholds.')
sonetSectionCurrentCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrentCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionCurrentCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionCurrentCVThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval CV-S counter.  A value of zero indicates that the\n        default threshold value is to be used.")
sonetSectionCurrentESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrentESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionCurrentESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionCurrentESThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval ES-S counter.  A value of zero indicates that the\n        default threshold value is to be used.")
sonetSectionCurrentSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrentSESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionCurrentSESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionCurrentSESThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval SES-S counter.  A value of zero indicates that the\n        default threshold value is to be used.")
sonetSectionCurrentSEFSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrentSEFSThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionCurrentSEFSThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionCurrentSEFSThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval SEFS-S counter.  A value of zero indicates that the\n        default threshold value is to be used.")
sonetSectionDayCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDayCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDayCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDayCVThreshold.setDescription("The trap threshold value for the interface's current day CV-S\n        counter.  A value of zero indicates that the\n        default threshold value is to be used.")
sonetSectionDayESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDayESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDayESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDayESThreshold.setDescription("The trap threshold value for the interface's current day ES-S\n        counter.  A value of zero indicates that the default threshold\n        value is to be used.")
sonetSectionDaySESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDaySESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDaySESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDaySESThreshold.setDescription("The trap threshold value for the interface's current day SES-S\n        counter.  A value of zero indicates that the default threshold\n        value is to be used.")
sonetSectionDaySEFSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDaySEFSThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetSectionDaySEFSThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDaySEFSThreshold.setDescription("The trap threshold value for the interface's current day SEFS-S\n        counter.  A value of zero indicates that the default threshold\n        value is to be used.")
sonetSectionDayTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 15), )
if mibBuilder.loadTexts: sonetSectionDayTable.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDayTable.setDescription('The SONET Section Day table.  Contains various statistics\n        collected by each SONET Section over multiple 1-day\n        intervals of operation.')
sonetSectionDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SL-SONET-SUP-PM-MIB", "sonetSectionDayNumber"))
if mibBuilder.loadTexts: sonetSectionDayEntry.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDayEntry.setDescription('An entry in the SONET Section Day table.')
sonetSectionDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionDayNumber.setReference('ANSI T1.231-1997 clause 9.1.2.1.')
if mibBuilder.loadTexts: sonetSectionDayNumber.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDayNumber.setDescription('A number which identifies the 1-day interval for which the set\n        of section related statistics is available.  The number is\n        between 1 and n, where n is the number of 1-day intervals\n        supported by the agent.  The interval identified by 1 is the\n        current 1-day interval, 2 is the previous (most recently\n        completed) 1-day interval and n is the least recently completed\n        1-day interval.\n        Interval 0 is used for the Untimed counters.')
sonetSectionDayStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 15, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionDayStartTime.setReference('ANSI T1.231-1997 clause 9.1.5.1.')
if mibBuilder.loadTexts: sonetSectionDayStartTime.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDayStartTime.setDescription('This variable indicates the date and time at which this 1-day\n        interval of sections measurements began on this interface.')
sonetSectionDayValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 15, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionDayValidData.setReference('ANSI T1.231-1997 clause 9.1.2.2.')
if mibBuilder.loadTexts: sonetSectionDayValidData.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDayValidData.setDescription('This variable assumes the value true(1) if the data stored for\n        this interval is both valid and complete.  It is set to false(2)\n        if the data stored for this interval is incomplete or otherwise\n        invalid because (a) the data stored for this interval is for a\n        period greater or less than 24 hours, or (b) some data is\n        missing.')
sonetSectionDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 15, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionDayCVs.setReference('ANSI T1.231-1997 clause 8.4.2.1.1.')
if mibBuilder.loadTexts: sonetSectionDayCVs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDayCVs.setDescription('The section code violation (CV-S) count is the number of BIP-8\n        errors which were detected at the SONET section layer\n        interface in a previous 1-day interval.  Each section BIP-8\n        can detect up to eight errors per STS-N frame, with each error\n        incrementing the CV counter.  CVs for the section layer are\n        collected using the BIP-8 in the B1 byte located in the\n        section overhead of STS-1 number 1.')
sonetSectionDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 15, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionDayESs.setReference('ANSI T1.231-1997 clause 8.4.2.2.')
if mibBuilder.loadTexts: sonetSectionDayESs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDayESs.setDescription('The section errored second (ES-S) count is the number of\n        1-second intervals containing one or more BIP-8 error (B1\n        byte), one or more SEF defects, or one or more LOS defects\n        which were encountered by the SONET section layer\n        interface in a previous 1-day interval.')
sonetSectionDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 15, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionDaySESs.setReference('ANSI T1.231-1997 clause 8.4.2.5.')
if mibBuilder.loadTexts: sonetSectionDaySESs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDaySESs.setDescription('The section severely errored second (SES-S) count is the\n        number of 1-second intervals containing\n        sonetSevereErrorThreshold or more BIP-8 errors (B1 byte), one\n        or more SEF defects, or one or more LOS defects which were\n        encountered by the SONET section layer interface in a\n        previous 1-day interval.')
sonetSectionDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 15, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionDaySEFSs.setReference('ANSI T1.231-1997 clause 8.4.2.6.')
if mibBuilder.loadTexts: sonetSectionDaySEFSs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDaySEFSs.setDescription('The section severely errored frame second (SEFS-S) count is\n        the number of 1-second intervals containing one or more SEF\n        defects which were encountered by the SONET section layer\n        interface in a previous 1-day interval.')
sonetSectionDayTcaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 15, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionDayTcaFlag.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDayTcaFlag.setDescription('TRUE if one of the counters crossed the\n       threshold during the day.')
sonetSectionDayReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 3, 15, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDayReset.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDayReset.setDescription('Writing this object reset the PM counters of this interval.')
sonetLineDefaultThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 1), )
if mibBuilder.loadTexts: sonetLineDefaultThresholdTable.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDefaultThresholdTable.setStatus('current')
if mibBuilder.loadTexts: sonetLineDefaultThresholdTable.setDescription('The table of default thresholds for SONET Line counters.')
sonetLineDefaultThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 1, 1), ).setIndexNames((0, "SL-SONET-SUP-PM-MIB", "sonetLineDefaultThresholdDirection"), (0, "SL-SONET-SUP-PM-MIB", "sonetLineDefaultThresholdRate"))
if mibBuilder.loadTexts: sonetLineDefaultThresholdEntry.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDefaultThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: sonetLineDefaultThresholdEntry.setDescription('An entry in the table of default thresholds.  The table has a\n        variable for each counter type and accumulation period\n        combination, but uses indexes to indetify the digital signal\n        direction and rate.  The agent must provide a set of default\n        threshold values for all rates that the NE supports.  The agent\n        may make these variables read-only.')
sonetLineDefaultThresholdDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nearEnd", 1), ("farEnd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineDefaultThresholdDirection.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDefaultThresholdDirection.setStatus('current')
if mibBuilder.loadTexts: sonetLineDefaultThresholdDirection.setDescription('The digital signal direction for which the default threshold\n        values apply.')
sonetLineDefaultThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("vt1dot5", 1), ("vtg", 2), ("oc1", 3), ("oc3", 4), ("oc12", 5), ("oc24", 6), ("oc48", 7), ("oc192", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineDefaultThresholdRate.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDefaultThresholdRate.setStatus('current')
if mibBuilder.loadTexts: sonetLineDefaultThresholdRate.setDescription('The digital signal rate for which the default threshold values\n        apply.')
sonetLineDefaultCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDefaultCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDefaultCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineDefaultCVThreshold.setDescription('The default value for SONET CV-L and CV-LFE counter 15-minute\n        interval thresholds.')
sonetLineDefaultESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDefaultESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDefaultESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineDefaultESThreshold.setDescription('The default value for SONET ES-L and ES-LFE counter 15-minute\n        interval thresholds.')
sonetLineDefaultSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDefaultSESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDefaultSESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineDefaultSESThreshold.setDescription('The default value for SONET SES-L and SES-LFE counter 15-minute\n        interval thresholds.')
sonetLineDefaultUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDefaultUASThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDefaultUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineDefaultUASThreshold.setDescription('The default value for SONET UAS-L and UAS-LFE counter 15-minute\n        interval thresholds.')
sonetLineDefaultDayCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDefaultDayCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDefaultDayCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineDefaultDayCVThreshold.setDescription('The default value for SONET CV-L and CV-LFE counter 15-minute\n        interval thresholds.')
sonetLineDefaultDayESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDefaultDayESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDefaultDayESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineDefaultDayESThreshold.setDescription('The default value for SONET ES-L and ES-LFE counter 15-minute\n        interval thresholds.')
sonetLineDefaultDaySESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDefaultDaySESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDefaultDaySESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineDefaultDaySESThreshold.setDescription('The default value for SONET SES-L and SES-LFE counter 15-minute\n        interval thresholds.')
sonetLineDefaultDayUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDefaultDayUASThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDefaultDayUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineDefaultDayUASThreshold.setDescription('The default value for SONET UAS-L and UAS-LFE counter 15-minute\n        interval thresholds.')
sonetLineThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 2), )
if mibBuilder.loadTexts: sonetLineThresholdTable.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineThresholdTable.setStatus('current')
if mibBuilder.loadTexts: sonetLineThresholdTable.setDescription('The table of trap threshold values for SONET Line counters.')
sonetLineThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SL-SONET-SUP-PM-MIB", "sonetLineThresholdDirection"))
if mibBuilder.loadTexts: sonetLineThresholdEntry.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: sonetLineThresholdEntry.setDescription('An entry in the table of SONET Line trap thresholds.')
sonetLineThresholdDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nearEnd", 1), ("farEnd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineThresholdDirection.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineThresholdDirection.setStatus('current')
if mibBuilder.loadTexts: sonetLineThresholdDirection.setDescription('The digital signal direction for which the threshold\n        values apply.')
sonetLineCurrentCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrentCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineCurrentCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineCurrentCVThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval CV-L and CV-LFE counters.  A value of zero indicates\n        that the default threshold value is to be used.")
sonetLineCurrentESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrentESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineCurrentESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineCurrentESThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval ES-L and ES-LFE counters.  A value of zero indicates\n        that the default threshold value is to be used.")
sonetLineCurrentSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrentSESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineCurrentSESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineCurrentSESThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval SES-L and SES-LFE counters.  A value of zero indicates\n        that the default threshold value is to be used.")
sonetLineCurrentUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrentUASThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineCurrentUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineCurrentUASThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval UAS-L and UAS-LFE counters.  A value of zero indicates\n        that the default threshold value is to be used.")
sonetLineDayCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDayCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDayCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayCVThreshold.setDescription("The trap threshold value for the interface's current day CV-L\n        and CV-LFE counters.  A value of zero indicates that the default\n        threshold value is to be used.")
sonetLineDayESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDayESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDayESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayESThreshold.setDescription("The trap threshold value for the interface's current day ES-L\n        and ES-LFE counters.  A value of zero indicates that the default\n        threshold value is to be used.")
sonetLineDaySESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDaySESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDaySESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineDaySESThreshold.setDescription("The trap threshold value for the interface's current day SES-L\n        and SES-LFE counters.  A value of zero indicates that the\n        default threshold value is to be used.")
sonetLineDayUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDayUASThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetLineDayUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayUASThreshold.setDescription("The trap threshold value for the interface's current day UAS-L\n        and UAS-LFE counters.  A value of zero indicates that the\n        default threshold value is to be used.")
sonetLineDayTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 5), )
if mibBuilder.loadTexts: sonetLineDayTable.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayTable.setDescription('The SONET Line Day table.  Contains various statistics\n        collected by each SONET line over multiple 1-day\n        intervals of operation.')
sonetLineDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SL-SONET-SUP-PM-MIB", "sonetLineDayNumber"))
if mibBuilder.loadTexts: sonetLineDayEntry.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayEntry.setDescription('An entry in the SONET Line Day table.')
sonetLineDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineDayNumber.setReference('ANSI T1.231-1997 clause 9.1.2.1.')
if mibBuilder.loadTexts: sonetLineDayNumber.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayNumber.setDescription('A number which identifies the 1-day interval for which the set\n        of near-end line related statistics is available.  The number is\n        between 1 and n, where n is the number of 1-day intervals\n        supported by the agent.  The interval identified by 1 is the\n        current 1-day interval, 2 is the previous (most recently\n        completed) 1-day interval and n is the least recently completed\n        1-day interval.\n        Interval 0 is used for the Untimed counters.')
sonetLineDayStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 5, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineDayStartTime.setReference('ANSI T1.231-1997 clause 9.1.5.1.')
if mibBuilder.loadTexts: sonetLineDayStartTime.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayStartTime.setDescription('This variable indicates the date and time at which this 1-day\n        interval of near-end line measurements began on this interface.')
sonetLineDayValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineDayValidData.setReference('ANSI T1.231-1997 clause 9.1.2.2.')
if mibBuilder.loadTexts: sonetLineDayValidData.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayValidData.setDescription('This variable assumes the value true(1) if the data stored for\n        this interval is both valid and complete.  It is set to false(2)\n        if the data stored for this interval is incomplete or otherwise\n        invalid because (a) the data stored for this interval is for a\n        period greater or less than 24 hours, or (b) some data is\n        missing.')
sonetLineDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 5, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineDayCVs.setReference('ANSI T1.231-1997 clause 8.4.3.1.1.1.')
if mibBuilder.loadTexts: sonetLineDayCVs.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayCVs.setDescription('The line code violation (CV-L) count is the number of BIP-8\n        errors which were detected at the SONET line layer\n        interface in a previous 1-day interval.  Each line BIP-8\n        can detect up to eight errors per STS-1 frame, with each error\n        incrementing the CV counter.  CVs for the line layer are\n        collected using the BIP-8s in the B2 byte located in the\n        line overhead of STS-1.  (Since all CVs on an STS-N line are\n        counted together, this is equivalent to counting each error in\n        the BIP-8N contained in the B2 bytes of the STS-N line\n        overhead.)  Thus, on an STS-N signal, up to 8 x N CVs may\n        occure in each STS-N frame.')
sonetLineDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 5, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineDayESs.setReference('ANSI T1.231-1997 clause 8.4.3.1.2.')
if mibBuilder.loadTexts: sonetLineDayESs.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayESs.setDescription('The line errored second (ES-L) count is the number of 1-second\n        intervals containing one or more EDC error (B2 byte), or one\n        or more AIS-L defects which were encountered by the SONET\n        line layer interface in a previous 1-day interval.')
sonetLineDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 5, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineDaySESs.setReference('ANSI T1.231-1997 clause 8.4.3.1.5.')
if mibBuilder.loadTexts: sonetLineDaySESs.setStatus('current')
if mibBuilder.loadTexts: sonetLineDaySESs.setDescription('The line severely errored second (SES-L) is a count of 1-second\n        intervals containing sonetSevereErrorThreshold or more EDC\n        errors (B2 byte) or one or more AIS-L defects which were\n        encountered by the SONET line layer interface in a previous\n        1-day interval.')
sonetLineDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 5, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineDayUASs.setReference('ANSI T1.231-1997 clause 8.4.3.1.6.')
if mibBuilder.loadTexts: sonetLineDayUASs.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayUASs.setDescription('The line unavailable second (UAS-L) is a count of 1-second\n        intervals for which the SONET line was unavailable during a\n        previous 1-day interval.  The SONET line becomes unavailable at\n        the onset of 10 contiguous SES-Ls.  The 10 SES-Ls are included\n        in unavailable time.  Once unavailable, the SONET line becomes\n        available at the onset of 10 contiguous seconds with no SES-Ls.\n        The 10 seconds with no SES-Ls are excluded from unavailable\n        time.')
sonetLineDayPSC = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 5, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineDayPSC.setReference('ANSI T1.231-1997 clause 8.3.5.')
if mibBuilder.loadTexts: sonetLineDayPSC.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayPSC.setDescription('The number of protection switching occured.')
sonetLineDayPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 5, 1, 12), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineDayPSD.setReference('ANSI T1.231-1997 clause 8.3.6.')
if mibBuilder.loadTexts: sonetLineDayPSD.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayPSD.setDescription('The length of time in seconds, where the protection unit was in service\n        and the working unit was out of service, during the day.')
sonetLineDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 5, 1, 13), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineDayFCs.setReference('ANSI T1.231-1997 clause 8.3.7.')
if mibBuilder.loadTexts: sonetLineDayFCs.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayFCs.setDescription('The number of failure counts occured during the day.')
sonetLineDayTcaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 5, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineDayTcaFlag.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayTcaFlag.setDescription('TRUE if one of the counters crossed the\n       threshold during the day.')
sonetLineDayReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 4, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDayReset.setStatus('current')
if mibBuilder.loadTexts: sonetLineDayReset.setDescription('Writing this object reset the PM counters of this interval.')
sonetFarEndLineDayTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 5, 3), )
if mibBuilder.loadTexts: sonetFarEndLineDayTable.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineDayTable.setDescription('The SONET Far End Line Day table.  Contains various\n        statistics collected by each SONET line over multiple\n        1-day intervals of operation.')
sonetFarEndLineDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SL-SONET-SUP-PM-MIB", "sonetFarEndLineDayNumber"))
if mibBuilder.loadTexts: sonetFarEndLineDayEntry.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineDayEntry.setDescription('An entry in the SONET Far End Line Day table.')
sonetFarEndLineDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineDayNumber.setReference('ANSI T1.231-1997 clause 9.1.2.1.')
if mibBuilder.loadTexts: sonetFarEndLineDayNumber.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineDayNumber.setDescription('A number which identifies the 1-day interval for which the set\n        of far-end line related statistics is available.  The number is\n        between 1 and n, where n is the number of 1-day intervals\n        supported by the agent.  The interval identified by 1 is the\n        current 1-day interval, 2 is the previous (most recently\n        completed) 1-day interval and n is the least recently completed\n        1-day interval.')
sonetFarEndLineDayStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 5, 3, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineDayStartTime.setReference('ANSI T1.231-1997 clause 9.1.5.1.')
if mibBuilder.loadTexts: sonetFarEndLineDayStartTime.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineDayStartTime.setDescription('This variable indicates the date and time at which this 1-day\n        interval of far-end line measurements began on this interface.')
sonetFarEndLineDayValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 5, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineDayValidData.setReference('ANSI T1.231-1997 clause 9.1.2.2.')
if mibBuilder.loadTexts: sonetFarEndLineDayValidData.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineDayValidData.setDescription('This variable assumes the value true(1) if the data stored for\n        this interval is both valid and complete.  It is set to false(2)\n        if the data stored for this interval is incomplete or otherwise\n        invalid because (a) the data stored for this interval is for a\n        period greater or less than 24 hours, or (b) some data is\n        missing (e.g., when a near-end defect prevents some far-end data\n        from being collected).')
sonetFarEndLineDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 5, 3, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineDayCVs.setReference('ANSI T1.231-1997 clause 8.4.4.1.')
if mibBuilder.loadTexts: sonetFarEndLineDayCVs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineDayCVs.setDescription('The far-end line code violation (CV-LFE) count is the number of\n        REI-Ls which were detected at the SONET line layer interface in\n        a previous 1-day interval.  For EC-1 or OC-1, REI-L is bits 5 to\n        8 of the M0 byte; for EC-N or OC-N (N>2), M1 byte.')
sonetFarEndLineDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 5, 3, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineDayESs.setReference('ANSI T1.231-1997 clause 8.4.4.1.')
if mibBuilder.loadTexts: sonetFarEndLineDayESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineDayESs.setDescription('The far-end line errored second (ES-LFE) count is the number of\n        1-second intervals containing one or more REDC-Ls, or one or\n        more RDI-L defects which were encountered by the SONET line\n        layer interface in a previous 1-day interval.')
sonetFarEndLineDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 5, 3, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineDaySESs.setReference('ANSI T1.231-1997 clause 8.4.4.1.')
if mibBuilder.loadTexts: sonetFarEndLineDaySESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineDaySESs.setDescription('The far-end line severely errored second (SES-LFE) is a count\n        of 1-second intervals containing sonetSevereErrorThreshold or\n        more REDC-Ls or one or more RDI-L defects which were detected by\n        the SONET line layer interface in a previous 1-day interval.')
sonetFarEndLineDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 5, 3, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineDayUASs.setReference('ANSI T1.231-1997 clause 8.4.4.1.')
if mibBuilder.loadTexts: sonetFarEndLineDayUASs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineDayUASs.setDescription('The far-end line unavailable second (UAS-LFE) is a count of\n        1-second intervals for which the SONET line was unavailable\n        during a previous 1-day interval.  The SONET line becomes\n        unavailable at the onset of 10 contiguous SES-LEFs.  The 10\n        SES-LEFs are included in unavailable time.  Once unavailable,\n        the SONET line becomes available at the onset of 10 contiguous\n        seconds with no SES-LEFs.  The 10 seconds with no SES-LEFs are\n        excluded from unavailable time.')
sonetFarEndLineDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 5, 3, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineDayFCs.setReference('ANSI T1.231-1997 clause 8.3.7.')
if mibBuilder.loadTexts: sonetFarEndLineDayFCs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineDayFCs.setDescription('The far-end line failures count.')
sonetFarEndLineDayTcaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 5, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineDayTcaFlag.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineDayTcaFlag.setDescription('TRUE if one of the counters crossed the\n       threshold during the day.')
sonetFarEndLineDayReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 5, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetFarEndLineDayReset.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineDayReset.setDescription('Writing this object reset the PM counters of this interval.')
sonetPathDefaultThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 1), )
if mibBuilder.loadTexts: sonetPathDefaultThresholdTable.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDefaultThresholdTable.setStatus('current')
if mibBuilder.loadTexts: sonetPathDefaultThresholdTable.setDescription('The table of default thresholds for SONET Path counters.')
sonetPathDefaultThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 1, 1), ).setIndexNames((0, "SL-SONET-SUP-PM-MIB", "sonetPathDefaultThresholdDirection"), (0, "SL-SONET-SUP-PM-MIB", "sonetPathDefaultThresholdRate"))
if mibBuilder.loadTexts: sonetPathDefaultThresholdEntry.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDefaultThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: sonetPathDefaultThresholdEntry.setDescription('An entry in the table of default thresholds.  The table has a\n        variable for each counter type and accumulation period\n        combination, but uses indexes to indetify the digital signal\n        direction and rate.  The agent must provide a set of default\n        threshold values for all rates that the NE supports.  The agent\n        may make these variables read-only.')
sonetPathDefaultThresholdDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nearEnd", 1), ("farEnd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathDefaultThresholdDirection.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDefaultThresholdDirection.setStatus('current')
if mibBuilder.loadTexts: sonetPathDefaultThresholdDirection.setDescription('The digital signal direction for which the default threshold\n        values apply.')
sonetPathDefaultThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sts1", 1), ("sts3", 2), ("sts12", 3), ("sts24", 4), ("sts48", 5), ("sts192", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathDefaultThresholdRate.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDefaultThresholdRate.setStatus('current')
if mibBuilder.loadTexts: sonetPathDefaultThresholdRate.setDescription('The path digital signal rate for which the default threshold\n        values apply.')
sonetPathDefaultCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDefaultCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDefaultCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathDefaultCVThreshold.setDescription('The default value for SONET CV-P and CV-PFE counter 15-minute\n        interval thresholds.')
sonetPathDefaultESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDefaultESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDefaultESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathDefaultESThreshold.setDescription('The default value for SONET ES-P and ES-PFE counter 15-minute\n        interval thresholds.')
sonetPathDefaultSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDefaultSESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDefaultSESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathDefaultSESThreshold.setDescription('The default value for SONET SES-P and SES-PFE counter 15-minute\n        interval thresholds.')
sonetPathDefaultUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDefaultUASThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDefaultUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathDefaultUASThreshold.setDescription('The default value for SONET UAS-P and UAS-PFE counter 15-minute\n        interval thresholds.')
sonetPathDefaultDayCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDefaultDayCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDefaultDayCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathDefaultDayCVThreshold.setDescription('The default value for SONET CV-P and CV-PFE counter 1-day\n        interval thresholds.')
sonetPathDefaultDayESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDefaultDayESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDefaultDayESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathDefaultDayESThreshold.setDescription('The default value for SONET ES-P and ES-PFE counter 1-day\n        interval thresholds.')
sonetPathDefaultDaySESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDefaultDaySESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDefaultDaySESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathDefaultDaySESThreshold.setDescription('The default value for SONET SES-P and SES-PFE counter 1-day\n        interval thresholds.')
sonetPathDefaultDayUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDefaultDayUASThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDefaultDayUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathDefaultDayUASThreshold.setDescription('The default value for SONET UAS-P and UAS-PFE counter 1-day\n        interval thresholds.')
sonetPathThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 2), )
if mibBuilder.loadTexts: sonetPathThresholdTable.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathThresholdTable.setStatus('current')
if mibBuilder.loadTexts: sonetPathThresholdTable.setDescription('The table of trap threshold values for SONET Path counters.')
sonetPathThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SL-SONET-SUP-PM-MIB", "sonetPathThresholdDirection"))
if mibBuilder.loadTexts: sonetPathThresholdEntry.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: sonetPathThresholdEntry.setDescription('An entry in the table of SONET Path trap thresholds.')
sonetPathThresholdDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nearEnd", 1), ("farEnd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathThresholdDirection.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathThresholdDirection.setStatus('current')
if mibBuilder.loadTexts: sonetPathThresholdDirection.setDescription('The digital signal direction for which the threshold\n        values apply.')
sonetPathCurrentCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathCurrentCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathCurrentCVThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval CV-P and CV-PFE counters.  A value of zero indicates\n        that the default threshold value is to be used.")
sonetPathCurrentESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathCurrentESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathCurrentESThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval ES-P and ES-PFE counters.  A value of zero indicates\n        that the default threshold value is to be used.")
sonetPathCurrentSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentSESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathCurrentSESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathCurrentSESThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval SES-P and SES-PFE counters.  A value of zero indicates\n        that the default threshold value is to be used.")
sonetPathCurrentUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentUASThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathCurrentUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathCurrentUASThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval UAS-P and UAS-PFE counters.  A value of zero indicates\n        that the default threshold value is to be used.")
sonetPathDayCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDayCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDayCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayCVThreshold.setDescription("The trap threshold value for the interface's current 1-day CV-P\n        and CV-PFE counters.  A value of zero indicates that the default\n        threshold value is to be used.")
sonetPathDayESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDayESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDayESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayESThreshold.setDescription("The trap threshold value for the interface's current 1-day ES-P\n        and ES-PFE counters.  A value of zero indicates that the default\n        threshold value is to be used.")
sonetPathDaySESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDaySESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDaySESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathDaySESThreshold.setDescription("The trap threshold value for the interface's current 1-day\n        SES-P and SES-PFE counters.  A value of zero indicates that the\n        default threshold value is to be used.")
sonetPathDayUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDayUASThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetPathDayUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayUASThreshold.setDescription("The trap threshold value for the interface's current 1-day\n        UAS-P and UAS-PFE counters.  A value of zero indicates that the\n        default threshold value is to be used.")
sonetPathDayTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 17), )
if mibBuilder.loadTexts: sonetPathDayTable.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayTable.setDescription('The SONET Path Day table.  Contains performance statistics\n        collected by each SONET Path over multiple 1-day\n        intervals of operation.')
sonetPathDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SL-SONET-SUP-PM-MIB", "sonetPathDayNumber"))
if mibBuilder.loadTexts: sonetPathDayEntry.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayEntry.setDescription('An entry in the SONET Path Day table.')
sonetPathDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathDayNumber.setReference('ANSI T1.231-1997 clause 9.1.2.1.')
if mibBuilder.loadTexts: sonetPathDayNumber.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayNumber.setDescription('A number which identifies the 1-day interval for which the set\n        of near-end path related statistics is available.  The number is\n        between 1 and n, where n is the number of 1-day intervals\n        supported by the agent.  The interval identified by 1 is the\n        current 1-day interval, 2 is the previous (most recently\n        completed) 1-day interval and n is the least recently completed\n        1-day interval.')
sonetPathDayStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 17, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathDayStartTime.setReference('ANSI T1.231-1997 clause 9.1.2.1.')
if mibBuilder.loadTexts: sonetPathDayStartTime.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayStartTime.setDescription('This variable indicates the date and time at which the 1-day\n        interval of measurements began on this interface.')
sonetPathDayValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 17, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathDayValidData.setReference('ANSI T1.231-1997 clause 9.1.2.2.')
if mibBuilder.loadTexts: sonetPathDayValidData.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayValidData.setDescription('This variable assumes the value true(1) if the data stored for\n        this interval is both valid and complete.  It is set to false(2)\n        if the data stored for this interval is incomplete or otherwise\n        invalid because (a) the data stored for this interval is for a\n        period greater or less than 24 hours, or (b) some data is\n        missing.')
sonetPathDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 17, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathDayCVs.setReference('ANSI T1.231-1997 clause 8.4.5.1.1.')
if mibBuilder.loadTexts: sonetPathDayCVs.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayCVs.setDescription('The path code violation (CV-P) count is the number of BIP-8\n        errors which were detected at the STS-path layer interface in a\n        previous 1-day interval.  CVs for the path layer are collected\n        using the BIP-8 in the B3 byte located in the STS-path\n        overhead.')
sonetPathDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 17, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathDayESs.setReference('ANSI T1.231-1997 clause 8.4.5.2.')
if mibBuilder.loadTexts: sonetPathDayESs.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayESs.setDescription('The path errored second (ES-P) count is the number of 1-second\n        intervals containing one or more EDC error (B3 byte), or one or\n        more AIS-P, LOP-P, TIM-P or UNEQ-P defects which were\n        encountered by the SONET path layer interface in a previous\n        1-day interval.')
sonetPathDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 17, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathDaySESs.setReference('ANSI T1.231-1997 clause 8.4.5.5.')
if mibBuilder.loadTexts: sonetPathDaySESs.setStatus('current')
if mibBuilder.loadTexts: sonetPathDaySESs.setDescription('The path severely errored second (SES-P) is a count of 1-second\n        intervals containing sonetSevereErrorThreshold or more EDC error\n        (B3 byte), or one or more AIS-P, LOP-P, TIM-P or UNEQ-P defects\n        which were encountered by the SONET path layer interface in a\n        previous 1-day interval.')
sonetPathDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 17, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathDayUASs.setReference('ANSI T1.231-1997 clause 8.4.5.6.')
if mibBuilder.loadTexts: sonetPathDayUASs.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayUASs.setDescription('The path unavailable second (UAS-P) is a count of 1-second\n        intervals for which the SONET STS-path was unavailable during a\n        previous 1-day interval.  The SONET STS-path becomes unavailable\n        at the onset of 10 contiguous SES-Ps.  The 10 SES-Ps are\n        included in unavailable time.  Once unavailable, the SONET\n        STS-path becomes available at the onset of 10 contiguous seconds\n        with no SES-Ps.  The 10 seconds with no SES-Ps are excluded from\n        unavailable time.')
sonetPathDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 17, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathDayFCs.setReference('ANSI T1.231-1997 clause 8.4.5.6.')
if mibBuilder.loadTexts: sonetPathDayFCs.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayFCs.setDescription('The number path failures count during a day.')
sonetPathDayTcaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 17, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathDayTcaFlag.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayTcaFlag.setDescription('TRUE if one of the counters crossed the\n       threshold during the day.')
sonetPathDayEBs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 17, 1, 13), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathDayEBs.setReference('ITU-G.826')
if mibBuilder.loadTexts: sonetPathDayEBs.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayEBs.setDescription('The number path blocks in which one or more bits are in error counted during a day.')
sonetPathDayReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 1, 17, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDayReset.setStatus('current')
if mibBuilder.loadTexts: sonetPathDayReset.setDescription('Writing this object reset the PM counters of this interval.')
sonetFarEndPathDayTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 2, 3), )
if mibBuilder.loadTexts: sonetFarEndPathDayTable.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathDayTable.setDescription('The SONET Far End Path Day table.  Contains various\n        statistics collected by each SONET Far End Path over\n        multiple 1-day intervals of operation.')
sonetFarEndPathDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SL-SONET-SUP-PM-MIB", "sonetFarEndPathDayNumber"))
if mibBuilder.loadTexts: sonetFarEndPathDayEntry.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathDayEntry.setDescription('An entry in the SONET Far End Path Day table.')
sonetFarEndPathDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathDayNumber.setReference('ANSI T1.231-1997 clause 9.1.2.1.')
if mibBuilder.loadTexts: sonetFarEndPathDayNumber.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathDayNumber.setDescription('A number which identifies the 1-day interval for which the set\n        of far-end path related statistics is available.  The number is\n        between 1 and n, where n is the number of 1-day intervals\n        supported by the agent.  The interval identified by 1 is the\n        current 1-day interval, 2 is the previous (most recently\n        completed) 1-day interval and n is the least recently completed\n        1-day interval.')
sonetFarEndPathDayStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 2, 3, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathDayStartTime.setReference('ANSI T1.231-1997 clause 9.1.2.1.')
if mibBuilder.loadTexts: sonetFarEndPathDayStartTime.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathDayStartTime.setDescription('This variable indicates the date and time at which the current\n        interval of measurements began.')
sonetFarEndPathDayValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 2, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathDayValidData.setReference('ANSI T1.231-1997 clause 9.1.2.2.')
if mibBuilder.loadTexts: sonetFarEndPathDayValidData.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathDayValidData.setDescription('This variable assumes the value true(1) if the data stored for\n        this interval is both valid and complete.  It is set to false(2)\n        if the data stored for this interval is incomplete or otherwise\n        invalid because (a) the data stored for this interval is for a\n        period greater or less than 24 hours, or (b) some data is\n        missing (e.g., when a near-end defect prevents some far-end data\n        from being collected).')
sonetFarEndPathDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 2, 3, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathDayCVs.setReference('ANSI T1.231-1997 clause 8.4.6.')
if mibBuilder.loadTexts: sonetFarEndPathDayCVs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathDayCVs.setDescription('The far-end path code violation (CV-PFE) count is the number\n        of REI-Ps (bit 1-4 in G1 byte) which were detected at the\n        SONET STS-path layer interface in a previous 1-day interval.')
sonetFarEndPathDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 2, 3, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathDayESs.setReference('ANSI T1.231-1997 clause 8.4.6.')
if mibBuilder.loadTexts: sonetFarEndPathDayESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathDayESs.setDescription('The far-end path errored second (ES-PFE) count is the number of\n        1-second intervals containing one or more REDC-P, or one or more\n        RDI-P, ERDI-P server or ERDI-P connectivity defects which were\n        encountered by the SONET STS-path layer interface in a previous\n        1-day interval.')
sonetFarEndPathDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 2, 3, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathDaySESs.setReference('ANSI T1.231-1997 clause 8.4.5.')
if mibBuilder.loadTexts: sonetFarEndPathDaySESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathDaySESs.setDescription('The far-end path severely errored second (SES-PFE) is a count\n        of 1-second intervals containing sonetSevereErrorThreshold or\n        more REDC-Ps or one or more RDI-P, ERDI-P server or ERDI-P\n        connectivity defects which were detected by the SONET STS-path\n        layer interface in a previous 1-day interval.')
sonetFarEndPathDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 2, 3, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathDayUASs.setReference('ANSI T1.231-1997 clause 8.4.5.1.')
if mibBuilder.loadTexts: sonetFarEndPathDayUASs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathDayUASs.setDescription('The far-end path unavailable second (UAS-PFE) is a count of\n        1-second intervals for which the SONET STS-path was unavailable\n        during a previous 1-day interval.  The SONET STS-path becomes\n        unavailable at the onset of 10 contiguous SES-PFEs.  The 10\n        SES-PFEs are included in unavailable time.  Once unavailable,\n        the SONET STS-path becomes available at the onset of 10\n        contiguous seconds with no SES-PFEs.  The 10 seconds with no\n        SES-PFEs are excluded from unavailable time.')
sonetFarEndPathDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 2, 3, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathDayFCs.setReference('ANSI T1.231-1997 clause 8.4.5.1.')
if mibBuilder.loadTexts: sonetFarEndPathDayFCs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathDayFCs.setDescription('The far-end path failures count.')
sonetFarEndPathDayTcaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 2, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathDayTcaFlag.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathDayTcaFlag.setDescription('TRUE if one of the counters crossed the\n       threshold during the day.')
sonetFarEndPathDayEBs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 2, 3, 1, 13), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathDayEBs.setReference('ITU G.826')
if mibBuilder.loadTexts: sonetFarEndPathDayEBs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathDayEBs.setDescription('The count of far-end path blocks in which one or more bits are in error.')
sonetFarEndPathDayReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 2, 2, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetFarEndPathDayReset.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathDayReset.setDescription('Writing this object reset the PM counters of this interval.')
sonetVTDefaultThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 1), )
if mibBuilder.loadTexts: sonetVTDefaultThresholdTable.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDefaultThresholdTable.setStatus('current')
if mibBuilder.loadTexts: sonetVTDefaultThresholdTable.setDescription('The table of default thresholds for SONET Path counters.')
sonetVTDefaultThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 1, 1), ).setIndexNames((0, "SL-SONET-SUP-PM-MIB", "sonetVTDefaultThresholdDirection"), (0, "SL-SONET-SUP-PM-MIB", "sonetVTDefaultThresholdRate"))
if mibBuilder.loadTexts: sonetVTDefaultThresholdEntry.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDefaultThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: sonetVTDefaultThresholdEntry.setDescription('An entry in the table of default thresholds.  The table has a\n        variable for each counter type and accumulation period\n        combination, but uses indexes to indetify the digital signal\n        direction and rate.  The agent must provide a set of default\n        threshold values for all rates that the NE supports.  The agent\n        may make these variables read-only.')
sonetVTDefaultThresholdDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nearEnd", 1), ("farEnd", 2))))
if mibBuilder.loadTexts: sonetVTDefaultThresholdDirection.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDefaultThresholdDirection.setStatus('current')
if mibBuilder.loadTexts: sonetVTDefaultThresholdDirection.setDescription('The digital signal direction for which the default threshold\n        values apply.')
sonetVTDefaultThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vt1dot5", 1), ("vtg", 2))))
if mibBuilder.loadTexts: sonetVTDefaultThresholdRate.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDefaultThresholdRate.setStatus('current')
if mibBuilder.loadTexts: sonetVTDefaultThresholdRate.setDescription('The path digital signal rate for which the default threshold\n        values apply.')
sonetVTDefaultCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTDefaultCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDefaultCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTDefaultCVThreshold.setDescription('The default value for SONET CV-V and CV-VFE counter 15-minute\n        interval thresholds.')
sonetVTDefaultESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTDefaultESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDefaultESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTDefaultESThreshold.setDescription('The default value for SONET ES-V and ES-VFE counter 15-minute\n        interval thresholds.')
sonetVTDefaultSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTDefaultSESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDefaultSESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTDefaultSESThreshold.setDescription('The default value for SONET SES-V and SES-VFE counter 15-minute\n        interval thresholds.')
sonetVTDefaultUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTDefaultUASThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDefaultUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTDefaultUASThreshold.setDescription('The default value for SONET UAS-V and UAS-VFE counter 15-minute\n        interval thresholds.')
sonetVTDefaultDayCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTDefaultDayCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDefaultDayCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTDefaultDayCVThreshold.setDescription('The default value for SONET CV-V and CV-VFE counter 1-day\n        interval thresholds.')
sonetVTDefaultDayESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTDefaultDayESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDefaultDayESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTDefaultDayESThreshold.setDescription('The default value for SONET ES-V and ES-VFE counter 1-day\n        interval thresholds.')
sonetVTDefaultDaySESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTDefaultDaySESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDefaultDaySESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTDefaultDaySESThreshold.setDescription('The default value for SONET SES-V and SES-VFE counter 1-day\n        interval thresholds.')
sonetVTDefaultDayUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTDefaultDayUASThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDefaultDayUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTDefaultDayUASThreshold.setDescription('The default value for SONET UAS-V and UAS-VFE counter 1-day\n        interval thresholds.')
sonetVTThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 2), )
if mibBuilder.loadTexts: sonetVTThresholdTable.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTThresholdTable.setStatus('current')
if mibBuilder.loadTexts: sonetVTThresholdTable.setDescription('The table of trap threshold values for SONET Path counters.')
sonetVTThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 2, 1), )
if mibBuilder.loadTexts: sonetVTThresholdEntry.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
sonetVTCurrentEntry.registerAugmentions(("SL-SONET-SUP-PM-MIB", "sonetVTThresholdEntry"))
sonetVTThresholdEntry.setIndexNames(*sonetVTCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: sonetVTThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: sonetVTThresholdEntry.setDescription('An entry in the table of SONET Path trap thresholds.')
sonetVTCurrentCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTCurrentCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTCurrentCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTCurrentCVThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval CV-V and CV-VFE counters.  A value of zero indicates\n        that the default threshold value is to be used.")
sonetVTCurrentESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTCurrentESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTCurrentESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTCurrentESThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval ES-V and ES-VFE counters.  A value of zero indicates\n        that the default threshold value is to be used.")
sonetVTCurrentSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTCurrentSESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTCurrentSESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTCurrentSESThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval SES-V and SES-VFE counters.  A value of zero indicates\n        that the default threshold value is to be used.")
sonetVTCurrentUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTCurrentUASThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTCurrentUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTCurrentUASThreshold.setDescription("The trap threshold value for the interface's current 15-minute\n        interval UAS-V and UAS-VFE counters.  A value of zero indicates\n        that the default threshold value is to be used.")
sonetVTDayCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTDayCVThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDayCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayCVThreshold.setDescription("The trap threshold value for the interface's current 1-day CV-V\n        and CV-VFE counters.  A value of zero indicates that the default\n        threshold value is to be used.")
sonetVTDayESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTDayESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDayESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayESThreshold.setDescription("The trap threshold value for the interface's current 1-day ES-V\n        and ES-VFE counters.  A value of zero indicates that the default\n        threshold value is to be used.")
sonetVTDaySESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTDaySESThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDaySESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTDaySESThreshold.setDescription("The trap threshold value for the interface's current 1-day\n        SES-V and SES-VFE counters.  A value of zero indicates that the\n        default threshold value is to be used.")
sonetVTDayUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTDayUASThreshold.setReference('ANSI T1.231-1997 clause 9.1.5.2.')
if mibBuilder.loadTexts: sonetVTDayUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayUASThreshold.setDescription("The trap threshold value for the interface's current 1-day\n        UAS-V and UAS-VFE counters.  A value of zero indicates that the\n        default threshold value is to be used.")
sonetVTDayTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 17), )
if mibBuilder.loadTexts: sonetVTDayTable.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayTable.setDescription('The SONET Path Day table.  Contains performance statistics\n        collected by each SONET Path over multiple 1-day\n        intervals of operation.')
sonetVTDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SL-SONET-SUP-PM-MIB", "sonetVTDayNumber"))
if mibBuilder.loadTexts: sonetVTDayEntry.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayEntry.setDescription('An entry in the SONET Path Day table.')
sonetVTDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTDayNumber.setReference('ANSI T1.231-1997 clause 9.1.2.1.')
if mibBuilder.loadTexts: sonetVTDayNumber.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayNumber.setDescription('A number which identifies the 1-day interval for which the set\n        of near-end path related statistics is available.  The number is\n        between 1 and n, where n is the number of 1-day intervals\n        supported by the agent.  The interval identified by 1 is the\n        current 1-day interval, 2 is the previous (most recently\n        completed) 1-day interval and n is the least recently completed\n        1-day interval.')
sonetVTDayStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 17, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTDayStartTime.setReference('ANSI T1.231-1997 clause 9.1.2.1.')
if mibBuilder.loadTexts: sonetVTDayStartTime.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayStartTime.setDescription('This variable indicates the date and time at which the 1-day\n        interval of measurements began on this interface.')
sonetVTDayValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 17, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTDayValidData.setReference('ANSI T1.231-1997 clause 9.1.2.2.')
if mibBuilder.loadTexts: sonetVTDayValidData.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayValidData.setDescription('This variable assumes the value true(1) if the data stored for\n        this interval is both valid and complete.  It is set to false(2)\n        if the data stored for this interval is incomplete or otherwise\n        invalid because (a) the data stored for this interval is for a\n        period greater or less than 24 hours, or (b) some data is\n        missing.')
sonetVTDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 17, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTDayFCs.setReference('ANSI T1.231-1997 clause 8.3.8.1.')
if mibBuilder.loadTexts: sonetVTDayFCs.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayFCs.setDescription('The near-end path failure count (FC-V) is the number of\n        occurences of near-end path failure events encountered by the\n        SONET path layer interface in a previous 1-day interval.  A\n        near-end path failure event begins when the first of any of\n        LOP-V, AIS-V or UNEQ-V failures is declared; a near-end\n        path failure event ends when all LOP-V, AIS-V and UNEQ-V\n        failures have cleared.')
sonetVTDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 17, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTDayCVs.setReference('ANSI T1.231-1997 clause 8.4.5.1.1.')
if mibBuilder.loadTexts: sonetVTDayCVs.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayCVs.setDescription('The path code violation (CV-V) count is the number of BIP-2\n        errors which were detected at the VT-path layer interface in a\n        previous 1-day interval.  CVs for the path layer are collected\n        using the BIP-2 in the V5 byte located in the VT-path\n        overhead.')
sonetVTDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 17, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTDayESs.setReference('ANSI T1.231-1997 clause 8.4.5.2.')
if mibBuilder.loadTexts: sonetVTDayESs.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayESs.setDescription('The path errored second (ES-V) count is the number of 1-second\n        intervals containing one or more EDC error (V5 byte), or one or\n        more AIS-V, LOP-V or UNEQ-V defects which were\n        encountered by the SONET path layer interface in a previous\n        1-day interval.')
sonetVTDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 17, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTDaySESs.setReference('ANSI T1.231-1997 clause 8.4.5.5.')
if mibBuilder.loadTexts: sonetVTDaySESs.setStatus('current')
if mibBuilder.loadTexts: sonetVTDaySESs.setDescription('The path severely errored second (SES-V) is a count of 1-second\n        intervals containing sonetSevereErrorThreshold or more EDC error\n        (V5 byte), or one or more AIS-V, LOP-V or UNEQ-V defects\n        which were encountered by the SONET path layer interface in a\n        previous 1-day interval.')
sonetVTDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 17, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTDayUASs.setReference('ANSI T1.231-1997 clause 8.4.5.6.')
if mibBuilder.loadTexts: sonetVTDayUASs.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayUASs.setDescription('The path unavailable second (UAS-V) is a count of 1-second\n        intervals for which the SONET VT-path was unavailable during a\n        previous 1-day interval.  The SONET VT-path becomes unavailable\n        at the onset of 10 contiguous SES-Vs.  The 10 SES-Vs are\n        included in unavailable time.  Once unavailable, the SONET\n        VT-path becomes available at the onset of 10 contiguous seconds\n        with no SES-Vs.  The 10 seconds with no SES-Vs are excluded from\n        unavailable time.')
sonetVTDayEBs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 17, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTDayEBs.setReference('ITU-G.826')
if mibBuilder.loadTexts: sonetVTDayEBs.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayEBs.setDescription('The number VT path blocks in which one or more bits are in error counted during a day.')
sonetVTDayTcaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 17, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTDayTcaFlag.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayTcaFlag.setDescription('TRUE if one of the counters crossed the\n       threshold during the day.')
sonetVTDayReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 1, 17, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTDayReset.setStatus('current')
if mibBuilder.loadTexts: sonetVTDayReset.setDescription('Writing this object reset the PM counters of this interval.')
sonetFarEndVTDayTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 2, 3), )
if mibBuilder.loadTexts: sonetFarEndVTDayTable.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTDayTable.setDescription('The SONET Far End Path Day table.  Contains various\n        statistics collected by each SONET Far End Path over\n        multiple 1-day intervals of operation.')
sonetFarEndVTDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SL-SONET-SUP-PM-MIB", "sonetFarEndVTDayNumber"))
if mibBuilder.loadTexts: sonetFarEndVTDayEntry.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTDayEntry.setDescription('An entry in the SONET Far End Path Day table.')
sonetFarEndVTDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTDayNumber.setReference('ANSI T1.231-1997 clause 9.1.2.1.')
if mibBuilder.loadTexts: sonetFarEndVTDayNumber.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTDayNumber.setDescription('A number which identifies the 1-day interval for which the set\n        of far-end VT-path related statistics is available.  The number is\n        between 1 and n, where n is the number of 1-day intervals\n        supported by the agent.  The interval identified by 1 is the\n        current 1-day interval, 2 is the previous (most recently\n        completed) 1-day interval and n is the least recently completed\n        1-day interval.')
sonetFarEndVTDayStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 2, 3, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTDayStartTime.setReference('ANSI T1.231-1997 clause 9.1.2.1.')
if mibBuilder.loadTexts: sonetFarEndVTDayStartTime.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTDayStartTime.setDescription('This variable indicates the date and time at which the current\n        interval of measurements began.')
sonetFarEndVTDayValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 2, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTDayValidData.setReference('ANSI T1.231-1997 clause 9.1.2.2.')
if mibBuilder.loadTexts: sonetFarEndVTDayValidData.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTDayValidData.setDescription('This variable assumes the value true(1) if the data stored for\n        this interval is both valid and complete.  It is set to false(2)\n        if the data stored for this interval is incomplete or otherwise\n        invalid because (a) the data stored for this interval is for a\n        period greater or less than 24 hours, or (b) some data is\n        missing (e.g., when a near-end defect prevents some far-end data\n        from being collected).')
sonetFarEndVTDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 2, 3, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTDayFCs.setReference('ANSI T1.231-1997 clause 8.3.8.2.')
if mibBuilder.loadTexts: sonetFarEndVTDayFCs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTDayFCs.setDescription('The far-end path failure count (FC-VFE) is the number of\n        occurences of far-end path failure events detected by the SONET\n        VT-path layer interface in a previous 1-day interval.  A\n        far-end path failure event begins when the first of any remote\n        failure indication (RFI-V, RFI-V server, or RFI-V connectivity)\n        failure is declared; a far-end path failure event ends when all\n        RFI-V, RFI-V server, or RFI-V connectivity failures are\n        cleared.')
sonetFarEndVTDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 2, 3, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTDayCVs.setReference('ANSI T1.231-1997 clause 8.4.6.')
if mibBuilder.loadTexts: sonetFarEndVTDayCVs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTDayCVs.setDescription('The far-end path code violation (CV-VFE) count is the number\n        of REI-Vs (bit 1-4 in G1 byte) which were detected at the\n        SONET VT-path layer interface in a previous 1-day interval.')
sonetFarEndVTDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 2, 3, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTDayESs.setReference('ANSI T1.231-1997 clause 8.4.6.')
if mibBuilder.loadTexts: sonetFarEndVTDayESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTDayESs.setDescription('The far-end path errored second (ES-VFE) count is the number of\n        1-second intervals containing one or more REDC-V, or one or more\n        RDI-V, ERDI-V server or ERDI-V connectivity defects which were\n        encountered by the SONET VT-path layer interface in a previous\n        1-day interval.')
sonetFarEndVTDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 2, 3, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTDaySESs.setReference('ANSI T1.231-1997 clause 8.4.5.')
if mibBuilder.loadTexts: sonetFarEndVTDaySESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTDaySESs.setDescription('The far-end path severely errored second (SES-VFE) is a count\n        of 1-second intervals containing sonetSevereErrorThreshold or\n        more REDC-Vs or one or more RDI-V, ERDI-V server or ERDI-V\n        connectivity defects which were detected by the SONET VT-path\n        layer interface in a previous 1-day interval.')
sonetFarEndVTDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 2, 3, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTDayUASs.setReference('ANSI T1.231-1997 clause 8.4.5.1.')
if mibBuilder.loadTexts: sonetFarEndVTDayUASs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTDayUASs.setDescription('The far-end path unavailable second (UAS-VFE) is a count of\n        1-second intervals for which the SONET VT-path was unavailable\n        during a previous 1-day interval.  The SONET VT-path becomes\n        unavailable at the onset of 10 contiguous SES-VFEs.  The 10\n        SES-VFEs are included in unavailable time.  Once unavailable,\n        the SONET VT-path becomes available at the onset of 10\n        contiguous seconds with no SES-VFEs.  The 10 seconds with no\n        SES-VFEs are excluded from unavailable time.')
sonetFarEndVTDayEBs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 2, 3, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTDayEBs.setReference('ITU-G.826')
if mibBuilder.loadTexts: sonetFarEndVTDayEBs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTDayEBs.setDescription('The number VT path blocks in which one or more bits are in error counted during a day\n        detected by the Far End.')
sonetFarEndVTDayTcaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 2, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTDayTcaFlag.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTDayTcaFlag.setDescription('TRUE if one of the counters crossed the\n       threshold during the day.')
sonetFarEndVTDayReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 3, 2, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetFarEndVTDayReset.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTDayReset.setDescription('Writing this object reset the PM counters of this interval.')
sonetTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 6))
sonetCounterId = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 6, 1), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sonetCounterId.setReference('ANSI T1.231-1997 clause 9.1.3.')
if mibBuilder.loadTexts: sonetCounterId.setStatus('current')
if mibBuilder.loadTexts: sonetCounterId.setDescription('The OBJECT IDENTIFIER of the instance of the SONET counter\n        that has crossed its threshold.')
sonetCounterValue = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 6, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sonetCounterValue.setReference('ANSI T1.231-1997 clause 9.1.3.')
if mibBuilder.loadTexts: sonetCounterValue.setStatus('current')
if mibBuilder.loadTexts: sonetCounterValue.setDescription('The current value of the SONET counter that has crossed its\n        threshold.')
sonetThresholdCrossing = NotificationType((1, 3, 6, 1, 4, 1, 4515, 1, 6, 3, 1, 6, 3)).setObjects(("SL-SONET-SUP-PM-MIB", "sonetCounterId"), ("SL-SONET-SUP-PM-MIB", "sonetCounterValue"))
if mibBuilder.loadTexts: sonetThresholdCrossing.setStatus('current')
if mibBuilder.loadTexts: sonetThresholdCrossing.setDescription("This notification signifies that a counter has crossed its\n        designated threshold.  The term 'threshold crossing' means\n        that a threshold has been reached or exceeded.  A threshold\n        crossing alert message (trap) signifies a performance\n        degredation at or above the preset threshold value.")
if mibBuilder.loadTexts: sonetThresholdCrossing.setReference('ANSI T1.231-1997 clause 9.1.3.')
mibBuilder.exportSymbols("SL-SONET-SUP-PM-MIB", sonetPathDayUASThreshold=sonetPathDayUASThreshold, sonetVTDefaultESThreshold=sonetVTDefaultESThreshold, sonetFarEndVTDayFCs=sonetFarEndVTDayFCs, sonetSupSection=sonetSupSection, sonetSectionCurrentSESThreshold=sonetSectionCurrentSESThreshold, sonetFarEndPathDaySESs=sonetFarEndPathDaySESs, sonetPathCurrentESThreshold=sonetPathCurrentESThreshold, sonetSectionDefaultDaySEFSThreshold=sonetSectionDefaultDaySEFSThreshold, sonetSupObjectsVT=sonetSupObjectsVT, sonetLineDayPSC=sonetLineDayPSC, sonetLineThresholdTable=sonetLineThresholdTable, sonetFarEndLineDayTable=sonetFarEndLineDayTable, sonetFarEndPathDayCVs=sonetFarEndPathDayCVs, sonetLineThresholdDirection=sonetLineThresholdDirection, sonetVTDaySESThreshold=sonetVTDaySESThreshold, sonetSupPmMIB=sonetSupPmMIB, sonetPathDefaultThresholdRate=sonetPathDefaultThresholdRate, sonetVTDayCVThreshold=sonetVTDayCVThreshold, sonetLineDefaultDaySESThreshold=sonetLineDefaultDaySESThreshold, sonetSectionThresholdTable=sonetSectionThresholdTable, sonetLineDayNumber=sonetLineDayNumber, sonetPathDayReset=sonetPathDayReset, sonetVTCurrentUASThreshold=sonetVTCurrentUASThreshold, sonetVTDefaultThresholdEntry=sonetVTDefaultThresholdEntry, sonetSectionDefaultSESThreshold=sonetSectionDefaultSESThreshold, sonetSectionCurrentSEFSThreshold=sonetSectionCurrentSEFSThreshold, sonetPathDefaultDayESThreshold=sonetPathDefaultDayESThreshold, sonetFarEndLineDayNumber=sonetFarEndLineDayNumber, sonetPathCurrentSESThreshold=sonetPathCurrentSESThreshold, sonetPathDayValidData=sonetPathDayValidData, sonetLineDayCVThreshold=sonetLineDayCVThreshold, sonetPathDefaultThresholdDirection=sonetPathDefaultThresholdDirection, sonetLineDayStartTime=sonetLineDayStartTime, sonetSupObjectsPath=sonetSupObjectsPath, sonetSectionDefaultThresholdRate=sonetSectionDefaultThresholdRate, PYSNMP_MODULE_ID=sonetSupPmMIB, sonetPathDefaultUASThreshold=sonetPathDefaultUASThreshold, sonetPathDefaultESThreshold=sonetPathDefaultESThreshold, sonetPathDefaultSESThreshold=sonetPathDefaultSESThreshold, sonetSectionDaySESs=sonetSectionDaySESs, sonetLineDayTable=sonetLineDayTable, sonetFarEndLineDayUASs=sonetFarEndLineDayUASs, sonetSectionCurrentESThreshold=sonetSectionCurrentESThreshold, sonetSectionDefaultSEFSThreshold=sonetSectionDefaultSEFSThreshold, sonetVTDayValidData=sonetVTDayValidData, sonetFarEndLineDaySESs=sonetFarEndLineDaySESs, sonetPathDefaultCVThreshold=sonetPathDefaultCVThreshold, sonetFarEndPathDayStartTime=sonetFarEndPathDayStartTime, sonetFarEndLineDayESs=sonetFarEndLineDayESs, sonetFarEndPathDayReset=sonetFarEndPathDayReset, sonetLineDefaultDayUASThreshold=sonetLineDefaultDayUASThreshold, sonetLineDayESs=sonetLineDayESs, sonetLineDefaultDayCVThreshold=sonetLineDefaultDayCVThreshold, sonetPathDefaultDayCVThreshold=sonetPathDefaultDayCVThreshold, sonetVTDayTcaFlag=sonetVTDayTcaFlag, sonetFarEndPathDayFCs=sonetFarEndPathDayFCs, sonetSupFarEndPath=sonetSupFarEndPath, sonetPathDefaultDayUASThreshold=sonetPathDefaultDayUASThreshold, sonetPathDayNumber=sonetPathDayNumber, sonetFarEndPathDayTable=sonetFarEndPathDayTable, sonetVTDaySESs=sonetVTDaySESs, sonetTrap=sonetTrap, sonetLineDayCVs=sonetLineDayCVs, sonetPathDefaultThresholdTable=sonetPathDefaultThresholdTable, sonetPathDayESs=sonetPathDayESs, sonetFarEndVTDayStartTime=sonetFarEndVTDayStartTime, sonetVTDayNumber=sonetVTDayNumber, sonetLineDayReset=sonetLineDayReset, sonetSectionDayEntry=sonetSectionDayEntry, sonetVTDayReset=sonetVTDayReset, sonetVTDefaultUASThreshold=sonetVTDefaultUASThreshold, sonetSectionDefaultCVThreshold=sonetSectionDefaultCVThreshold, sonetSectionDefaultDaySESThreshold=sonetSectionDefaultDaySESThreshold, sonetLineDefaultThresholdEntry=sonetLineDefaultThresholdEntry, sonetSectionDaySEFSs=sonetSectionDaySEFSs, sonetFarEndLineDayReset=sonetFarEndLineDayReset, sonetVTDefaultDayCVThreshold=sonetVTDefaultDayCVThreshold, sonetFarEndVTDaySESs=sonetFarEndVTDaySESs, sonetSectionDefaultDayESThreshold=sonetSectionDefaultDayESThreshold, sonetVTCurrentESThreshold=sonetVTCurrentESThreshold, sonetLineCurrentCVThreshold=sonetLineCurrentCVThreshold, sonetFarEndLineDayEntry=sonetFarEndLineDayEntry, sonetVTDayESThreshold=sonetVTDayESThreshold, sonetVTDayUASs=sonetVTDayUASs, sonetSupVT=sonetSupVT, sonetVTDayEntry=sonetVTDayEntry, sonetPathDayTcaFlag=sonetPathDayTcaFlag, sonetFarEndVTDayTcaFlag=sonetFarEndVTDayTcaFlag, sonetLineDayEntry=sonetLineDayEntry, sonetSectionDayESThreshold=sonetSectionDayESThreshold, sonetLineCurrentUASThreshold=sonetLineCurrentUASThreshold, sonetSupMedium=sonetSupMedium, sonetFarEndLineDayTcaFlag=sonetFarEndLineDayTcaFlag, sonetFarEndLineDayFCs=sonetFarEndLineDayFCs, sonetSupLine=sonetSupLine, sonetPathDaySESThreshold=sonetPathDaySESThreshold, sonetSectionDaySESThreshold=sonetSectionDaySESThreshold, sonetLineDefaultSESThreshold=sonetLineDefaultSESThreshold, sonetSectionThresholdEntry=sonetSectionThresholdEntry, sonetLineDefaultUASThreshold=sonetLineDefaultUASThreshold, sonetPathDayTable=sonetPathDayTable, sonetPathDayEntry=sonetPathDayEntry, sonetFarEndPathDayValidData=sonetFarEndPathDayValidData, sonetVTDefaultThresholdTable=sonetVTDefaultThresholdTable, sonetFarEndVTDayNumber=sonetFarEndVTDayNumber, sonetPathThresholdEntry=sonetPathThresholdEntry, sonetVTThresholdEntry=sonetVTThresholdEntry, sonetLineDaySESs=sonetLineDaySESs, sonetSectionDefaultThresholdEntry=sonetSectionDefaultThresholdEntry, sonetVTDayStartTime=sonetVTDayStartTime, sonetFarEndVTDayESs=sonetFarEndVTDayESs, sonetSupConfig=sonetSupConfig, sonetLineDefaultESThreshold=sonetLineDefaultESThreshold, sonetPathDayESThreshold=sonetPathDayESThreshold, sonetVTDefaultCVThreshold=sonetVTDefaultCVThreshold, sonetLineDayUASs=sonetLineDayUASs, sonetVTDefaultThresholdRate=sonetVTDefaultThresholdRate, sonetSectionDayTable=sonetSectionDayTable, sonetVTDefaultThresholdDirection=sonetVTDefaultThresholdDirection, sonetSectionDayESs=sonetSectionDayESs, sonetSectionDayStartTime=sonetSectionDayStartTime, sonetFarEndPathDayTcaFlag=sonetFarEndPathDayTcaFlag, sonetFarEndLineDayStartTime=sonetFarEndLineDayStartTime, sonetPathThresholdTable=sonetPathThresholdTable, sonetSectionDefaultESThreshold=sonetSectionDefaultESThreshold, sonetFarEndVTDayTable=sonetFarEndVTDayTable, sonetSectionCurrentCVThreshold=sonetSectionCurrentCVThreshold, sonetLineCurrentESThreshold=sonetLineCurrentESThreshold, sonetPathDayCVs=sonetPathDayCVs, sonetPathDaySESs=sonetPathDaySESs, sonetVTDefaultDayUASThreshold=sonetVTDefaultDayUASThreshold, sonetSectionDefaultThresholdTable=sonetSectionDefaultThresholdTable, sonetPathCurrentCVThreshold=sonetPathCurrentCVThreshold, sonetSupFarEndVT=sonetSupFarEndVT, sonetSectionDayValidData=sonetSectionDayValidData, sonetLineDefaultThresholdRate=sonetLineDefaultThresholdRate, sonetFarEndVTDayUASs=sonetFarEndVTDayUASs, sonetFarEndPathDayUASs=sonetFarEndPathDayUASs, sonetLineThresholdEntry=sonetLineThresholdEntry, sonetPathDefaultDaySESThreshold=sonetPathDefaultDaySESThreshold, sonetLineDefaultThresholdTable=sonetLineDefaultThresholdTable, sonetPathDayEBs=sonetPathDayEBs, sonetFarEndVTDayValidData=sonetFarEndVTDayValidData, sonetFarEndPathDayEBs=sonetFarEndPathDayEBs, sonetFarEndVTDayEBs=sonetFarEndVTDayEBs, sonetFarEndPathDayNumber=sonetFarEndPathDayNumber, sonetSectionDayTcaFlag=sonetSectionDayTcaFlag, sonetSectionDayCVs=sonetSectionDayCVs, sonetFarEndPathDayESs=sonetFarEndPathDayESs, sonetPathDefaultThresholdEntry=sonetPathDefaultThresholdEntry, sonetVTDayTable=sonetVTDayTable, sonetFarEndVTDayCVs=sonetFarEndVTDayCVs, sonetSectionDayCVThreshold=sonetSectionDayCVThreshold, sonetSectionDefaultDayCVThreshold=sonetSectionDefaultDayCVThreshold, sonetVTDefaultDayESThreshold=sonetVTDefaultDayESThreshold, sonetVTDayFCs=sonetVTDayFCs, sonetFarEndLineDayValidData=sonetFarEndLineDayValidData, sonetPathCurrentUASThreshold=sonetPathCurrentUASThreshold, sonetVTDayUASThreshold=sonetVTDayUASThreshold, sonetLineDayFCs=sonetLineDayFCs, sonetLineDayPSD=sonetLineDayPSD, sonetCounterValue=sonetCounterValue, sonetPathDayCVThreshold=sonetPathDayCVThreshold, sonetVTDayEBs=sonetVTDayEBs, sonetSectionDayNumber=sonetSectionDayNumber, sonetLineDefaultDayESThreshold=sonetLineDefaultDayESThreshold, sonetFarEndPathDayEntry=sonetFarEndPathDayEntry, sonetFarEndVTDayReset=sonetFarEndVTDayReset, sonetVTCurrentCVThreshold=sonetVTCurrentCVThreshold, sonetFarEndVTDayEntry=sonetFarEndVTDayEntry, sonetLineDefaultThresholdDirection=sonetLineDefaultThresholdDirection, sonetLineDayESThreshold=sonetLineDayESThreshold, sonetCounterId=sonetCounterId, sonetLineDayTcaFlag=sonetLineDayTcaFlag, sonetPathDayUASs=sonetPathDayUASs, sonetVTThresholdTable=sonetVTThresholdTable, sonetSupFarEndLine=sonetSupFarEndLine, sonetSupPath=sonetSupPath, sonetThresholdCrossing=sonetThresholdCrossing, sonetVTCurrentSESThreshold=sonetVTCurrentSESThreshold, sonetSectionDaySEFSThreshold=sonetSectionDaySEFSThreshold, sonetLineCurrentSESThreshold=sonetLineCurrentSESThreshold, sonetLineDaySESThreshold=sonetLineDaySESThreshold, sonetVTDayESs=sonetVTDayESs, sonetSupObjects=sonetSupObjects, sonetPathThresholdDirection=sonetPathThresholdDirection, sonetPathDayStartTime=sonetPathDayStartTime, sonetVTDefaultSESThreshold=sonetVTDefaultSESThreshold, sonetVTDayCVs=sonetVTDayCVs, sonetPathDayFCs=sonetPathDayFCs, sonetLineDayUASThreshold=sonetLineDayUASThreshold, sonetLineDayValidData=sonetLineDayValidData, sonetFarEndLineDayCVs=sonetFarEndLineDayCVs, sonetLineDefaultCVThreshold=sonetLineDefaultCVThreshold, sonetVTDefaultDaySESThreshold=sonetVTDefaultDaySESThreshold, sonetSectionDayReset=sonetSectionDayReset)
