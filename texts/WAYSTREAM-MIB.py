#
# PySNMP MIB module WAYSTREAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/waystream/WAYSTREAM-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:19:43 2024
# On host fv-az915-96 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter64, ModuleIdentity, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, TimeTicks, NotificationType, iso, Integer32, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "TimeTicks", "NotificationType", "iso", "Integer32", "Unsigned32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wsExperiment, wsMgmt = mibBuilder.importSymbols("WAYSTREAM-SMI", "wsExperiment", "wsMgmt")
ibos = ModuleIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 1))
ibos.setRevisions(('2017-10-23 11:00', '2017-09-18 11:00', '2017-02-10 11:00', '2012-07-05 19:30', '2011-12-20 09:08', '2011-12-06 09:34', '2011-01-11 17:55', '2009-04-17 15:29', '2009-03-23 11:02', '2008-04-30 14:26', '2007-10-03 18:35', '2007-06-13 14:37', '2006-10-18 13:41', '2006-08-23 11:00', '2006-01-25 13:30', '2005-05-10 11:24', '2005-02-01 09:11', '2005-01-14 15:00', '2004-10-20 14:34', '2004-05-14 11:55',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ibos.setRevisionsDescriptions(('Added SFP all unit values, SFP part and serial numbers.', 'Added SFP RX/TX power dBm values.', 'Company name change:\n\t In October 2015 PacketFront Network Products was renamed Waystream.\n\t In this update all PacketFront were changed to Waystream and all\n\t pf* to ws*.', 'Added sBasePX (BASE-PX) and sBaseBX10 (BASE-BX10) bits\n\tto pfSFPTransceiver (see SFF-8472 standard).', 'Add 100M and 10G SFP information from SFF-8472 specification.\n\tThe column pfSFPTransceiver has new bits s100BaseFX and s100BaseLX, \n\ta new column pfSFPTransceiverExt which is a combination of the \n\t10G Ethernet Compliance Codes SFP+ Cable Technology information.', 'Added new table pfXFPTable that mirrors the pfSFPTable but with minor\n         differencies in parameter set and interpretation.', 'Updated company name', 'Moved pfCopy to PACKETFRONT-COPY-MIB and added environment notifications\n         to the MIB at pfIbosEnvironmentNotifications.', 'Updated telephone information in contact-info. Reordered revision\n         information. Fixed enumerated types not starting from zero', 'Moved pfRpm to PACKETFRONT-RPM-MIB\n         Moved pfIgmp to PACKETFRONT-IGMP-CACHE-MIB\n         Moved pfProduct to PACKETFRONT-PRODUCTS-MIB\n         Moved boilerplate to PACKETFRONT-SMI and PACKETFRONT-TC', 'Added pfRpm', 'Added pfIgmp', 'Corrected pfAccounting member types', 'Added pfVersionString OID', 'Changed name of pfNeighbourPlatform to pfNeighbourModel.  Added OID for ASR10K.', 'Added missing connector type SC.', 'Corrected pfPolicyTable entry types. Added description for pfPolicyUseCnt.', 'Added pfAccounting extensions to the MIB.', 'Added the ipdConfig object', 'Updated to reflect PacketFronts new corporate address',))
if mibBuilder.loadTexts: ibos.setLastUpdated('201702101100Z')
if mibBuilder.loadTexts: ibos.setOrganization('Waystream AB')
if mibBuilder.loadTexts: ibos.setContactInfo('Waystream AB\n         Customer Service\n\n         Mail : Farogatan 33\n                SE-164 51 Kista\n                Sweden\n\n         Tel  : +46 8 5626 9450\n\n         E-mail: info@waystream.com\n         Web   : http://www.waystream.com')
if mibBuilder.loadTexts: ibos.setDescription('The Waystream MIB describing iBOS functionality of ASRs')
wsSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 1, 1))
if mibBuilder.loadTexts: wsSystem.setStatus('current')
if mibBuilder.loadTexts: wsSystem.setDescription('System management objects')
wsWritedummy = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsWritedummy.setStatus('current')
if mibBuilder.loadTexts: wsWritedummy.setDescription('This object is a read-write object that accept an\n                         integer. The value written has no effect on the\n                         system, but a successful write indicate that \n                         SNMP write operations are possible on the target\n                         router. The last written value can be read back')
wsReload = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsReload.setStatus('current')
if mibBuilder.loadTexts: wsReload.setDescription('This object is used to restart the target router\n                         by setting the number of seconds until system\n                         reload. A value of 0 cancels any pending reload.\n                         The value returned when reading the object is the\n                         number of seconds remaining until reload')
wsVersion = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsVersion.setStatus('current')
if mibBuilder.loadTexts: wsVersion.setDescription('The iBOS version indicator')
wsAsrRevision = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAsrRevision.setStatus('current')
if mibBuilder.loadTexts: wsAsrRevision.setDescription('The ASR hardware revision')
wsVersionString = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsVersionString.setStatus('current')
if mibBuilder.loadTexts: wsVersionString.setDescription('A textual representation of the iBOS version.\n\t\t     For iBOS versions after 3.2, this field should be\n\t\t     used to identify the iBOS version instead of the\n\t\t     old wsVersion OID')
wsEnvironment = ObjectIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2))
if mibBuilder.loadTexts: wsEnvironment.setStatus('current')
if mibBuilder.loadTexts: wsEnvironment.setDescription('Environtment data')
wsTempTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 1), )
if mibBuilder.loadTexts: wsTempTable.setStatus('current')
if mibBuilder.loadTexts: wsTempTable.setDescription('Table of values from temperature sensors.')
wsTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 1, 1), ).setIndexNames((0, "WAYSTREAM-MIB", "wsTempSensor"))
if mibBuilder.loadTexts: wsTempEntry.setStatus('current')
if mibBuilder.loadTexts: wsTempEntry.setDescription('An entry for a temperature sensor.')
wsTempSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTempSensor.setStatus('current')
if mibBuilder.loadTexts: wsTempSensor.setDescription('Sensor number.')
wsTempMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTempMeasured.setStatus('current')
if mibBuilder.loadTexts: wsTempMeasured.setDescription('Measured temperature in 100ths of degrees centigrade.')
wsTempTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTempTOS.setStatus('current')
if mibBuilder.loadTexts: wsTempTOS.setDescription('TOS in 100ths of degrees centigrade.')
wsTempTHYST = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTempTHYST.setStatus('current')
if mibBuilder.loadTexts: wsTempTHYST.setDescription('THYST in 100ths of degrees centigrade.')
wsTempThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTempThresholdLow.setStatus('current')
if mibBuilder.loadTexts: wsTempThresholdLow.setDescription('Threshold (low) in 100ths of degrees centigrade.')
wsTempThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTempThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: wsTempThresholdHigh.setDescription('Threshold (high) in 100ths of degrees centigrade.')
wsTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 4))).clone(namedValues=NamedValues(("failed", -1), ("ok", 0), ("high", 1), ("low", 2), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTempStatus.setStatus('current')
if mibBuilder.loadTexts: wsTempStatus.setDescription('Status (measurement compared to threshold).')
wsVoltTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 2), )
if mibBuilder.loadTexts: wsVoltTable.setStatus('current')
if mibBuilder.loadTexts: wsVoltTable.setDescription('Table of measured board voltages.')
wsVoltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 2, 1), ).setIndexNames((0, "WAYSTREAM-MIB", "wsVoltChannel"))
if mibBuilder.loadTexts: wsVoltEntry.setStatus('current')
if mibBuilder.loadTexts: wsVoltEntry.setDescription('An entry for a board voltage.')
wsVoltChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsVoltChannel.setStatus('current')
if mibBuilder.loadTexts: wsVoltChannel.setDescription('Voltage channel number.')
wsVoltNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsVoltNominal.setStatus('current')
if mibBuilder.loadTexts: wsVoltNominal.setDescription('Nominal voltage in mV for channel.')
wsVoltMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsVoltMeasured.setStatus('current')
if mibBuilder.loadTexts: wsVoltMeasured.setDescription('Measured voltage in mV for channel.')
wsVoltThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsVoltThresholdLow.setStatus('current')
if mibBuilder.loadTexts: wsVoltThresholdLow.setDescription('Threshold (low) voltage in mV for channel.')
wsVoltThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsVoltThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: wsVoltThresholdHigh.setDescription('Threshold (high) voltage in mV for channel.')
wsVoltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-3, -1, 0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("na", -3), ("failed", -1), ("ok", 0), ("high", 1), ("low", 2), ("notPresent", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsVoltStatus.setStatus('current')
if mibBuilder.loadTexts: wsVoltStatus.setDescription('Status (measurement compared to threshold).')
wsFanTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 3), )
if mibBuilder.loadTexts: wsFanTable.setStatus('current')
if mibBuilder.loadTexts: wsFanTable.setDescription('Table of measured rotation speeds for external fans.')
wsFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 3, 1), ).setIndexNames((0, "WAYSTREAM-MIB", "wsFanNumber"))
if mibBuilder.loadTexts: wsFanEntry.setStatus('current')
if mibBuilder.loadTexts: wsFanEntry.setDescription('An entry for a fan.')
wsFanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsFanNumber.setStatus('current')
if mibBuilder.loadTexts: wsFanNumber.setDescription('Fan number.')
wsFanRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsFanRPM.setStatus('current')
if mibBuilder.loadTexts: wsFanRPM.setDescription('Fan speed in revolutions per minute.')
wsFanVoltage = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsFanVoltage.setStatus('current')
if mibBuilder.loadTexts: wsFanVoltage.setDescription('Fan driving voltage (in mV).')
wsIbosEnvironmentTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsIbosEnvironmentTrapEnable.setStatus('current')
if mibBuilder.loadTexts: wsIbosEnvironmentTrapEnable.setDescription('Provides control over iBOS environment related traps.')
wsPFDP = ObjectIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3))
if mibBuilder.loadTexts: wsPFDP.setStatus('current')
if mibBuilder.loadTexts: wsPFDP.setDescription('PFDP data')
wsNeighboursTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1), )
if mibBuilder.loadTexts: wsNeighboursTable.setStatus('current')
if mibBuilder.loadTexts: wsNeighboursTable.setDescription('Table of discovered PFDB Neighbours.')
wsNeighboursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1), ).setIndexNames((0, "WAYSTREAM-MIB", "wsNeighbourIfIndex"), (0, "WAYSTREAM-MIB", "wsNeighbourNIndex"))
if mibBuilder.loadTexts: wsNeighboursEntry.setStatus('current')
if mibBuilder.loadTexts: wsNeighboursEntry.setDescription('An entry for a neighbour.')
wsNeighbourIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourIfIndex.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourIfIndex.setDescription('Neighbour interface index.')
wsNeighbourNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourNIndex.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourNIndex.setDescription('Neighbour index.')
wsNeighbourHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourHostname.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourHostname.setDescription('Neighbour hostname.')
wsNeighbourLocalIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourLocalIf.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourLocalIf.setDescription('Local interface that neighbour is on.')
wsNeighbourRemoteIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourRemoteIf.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourRemoteIf.setDescription('Remote interface of neighbour.')
wsNeighbourModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourModel.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourModel.setDescription('Neighbour model.')
wsNeighbourLastAct = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourLastAct.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourLastAct.setDescription('Time in seconds since last neighbour advertisment.')
wsNeighbourOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourOSVersion.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourOSVersion.setDescription('Neighbour OS version.')
wsNeighbourSNPA = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourSNPA.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourSNPA.setDescription('SNPA of neighbour interface.')
wsNeighbourUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourUptime.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourUptime.setDescription('Uptime in seconds for neighbour.')
wsNeighbourState = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bidirectional", 1), ("unidirectional", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourState.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourState.setDescription('State of neighbour.')
wsNeighbourDBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourDBCount.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourDBCount.setDescription('Database entries for neighbour.')
wsNeighbourCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourCreated.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourCreated.setDescription('The value of sysUpTime at the time the neighbour\n\t\t\t first appeared on the interface.')
wsNeighbourPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPacketsIn.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPacketsIn.setDescription('Number of PFDP packets received from neighbour.')
wsNeighbourPacketErrorsrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPacketErrorsrIn.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPacketErrorsrIn.setDescription('Number of erroneous PFDP packets received from \n\t\t\t neighbour.')
wsNeighbourPortsTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2), )
if mibBuilder.loadTexts: wsNeighbourPortsTable.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortsTable.setDescription('Table of ports of discovered PFDB Neighbours.')
wsNeighbourPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1), ).setIndexNames((0, "WAYSTREAM-MIB", "wsNeighbourPortIfIndex"), (0, "WAYSTREAM-MIB", "wsNeighbourPortNIndex"), (0, "WAYSTREAM-MIB", "wsNeighbourPortPIndex"))
if mibBuilder.loadTexts: wsNeighbourPortsEntry.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortsEntry.setDescription('An entry for a port of a neighbour.')
wsNeighbourPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortIfIndex.setDescription('Neighbour interface index.')
wsNeighbourPortNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortNIndex.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortNIndex.setDescription('Neighbour index.')
wsNeighbourPortPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortPIndex.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortPIndex.setDescription('Neighbour port index.')
wsNeighbourPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortName.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortName.setDescription('Name of neighbour port.')
wsNeighbourPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 5), Bits().clone(namedValues=NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved2", 2), ("reserved3", 3), ("vlaninfo", 4), ("s100mbit", 5), ("fullduplex", 6), ("up", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortState.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortState.setDescription('State of neighbour port.')
wsNeighbourPortTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortTxOctets.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortTxOctets.setDescription('The total number of good bytes of data transmitted by \n\t\t\t a port (excluding preamble but including FCS).')
wsNeighbourPortTxDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortTxDropPkts.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortTxDropPkts.setDescription('This counter is incremented every time a transmit \n\t\t\t packet is dropped due to lack of resources (e.g., \n\t\t\t transmit FIFO underflow), or an internal MAC sublayer \n\t\t\t transmit error not counted by.in either the \n\t\t\t TxLateCollision or the TxExcessiveCollision counters.')
wsNeighbourPortTxBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortTxBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortTxBroadcastPkts.setDescription('The number of good packets transmitted by a port that\n\t\t\t are directed to a broadcast address. This counter does\n\t\t\t not include errored broadcast packets or valid \n\t\t\t multicast packets.')
wsNeighbourPortTxMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortTxMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortTxMulticastPkts.setDescription('The number of good packets transmitted by a port that \n\t\t\t are directed to a multicast address. This counter does\n\t\t\t not include errored multicast packets or valid \n\t\t\t broadcast packets.')
wsNeighbourPortTxUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortTxUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortTxUnicastPkts.setDescription('The number of good packets transmitted by a port that \n\t\t\t are addressed to a unicast address.')
wsNeighbourPortTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortTxCollisions.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortTxCollisions.setDescription('The number of collisions experienced by a port during\n\t\t\t packet transmissions.')
wsNeighbourPortTxDeferredTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortTxDeferredTransmit.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortTxDeferredTransmit.setDescription('The number of packets transmitted by a port for which \n\t\t\t the first transmission attempt is delayed because the \n\t\t\t medium is busy.')
wsNeighbourPortTxFrameInDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortTxFrameInDisc.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortTxFrameInDisc.setDescription('The number of valid packets received which are \n\t\t\t discarded by the forwarding process due to lack of \n\t\t\t space on an output queue.')
wsNeighbourPortRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortRxOctets.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortRxOctets.setDescription('The number of bytes of data received by a port \n\t\t\t (excluding preamble but including FCS), including \n\t\t\t bad packets.')
wsNeighbourPortRxUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortRxUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortRxUndersizePkts.setDescription('The number of good packets received by a port that are\n\t\t\t less than 64 bytes long (excluding framing bits but \n\t\t\t including the FCS).')
wsNeighbourPortPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortPkts64Octets.setDescription('The number of packets (including error packets) that \n\t\t\t are 64 bytes long.')
wsNeighbourPortPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortPkts65to127Octets.setDescription('The number of packets (including error packets) that \n\t\t\t are between 65 and 127 bytes long.')
wsNeighbourPortPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortPkts128to255Octets.setDescription('The number of packets (including error packets) that \n\t\t\t are between 128 and 255 bytes long.')
wsNeighbourPortPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortPkts256to511Octets.setDescription('The number of packets (including error packets) that \n\t\t\t are between 256 and 511 bytes long.')
wsNeighbourPortPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortPkts512to1023Octets.setDescription('The number of packets (including error packets) that \n\t\t\t are between 512 and 1023 bytes long.')
wsNeighbourPortPkts1024to1522Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortPkts1024to1522Octets.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortPkts1024to1522Octets.setDescription('The number of packets (including error packets) that \n\t\t\t are between 1024 and 1522 bytes long.')
wsNeighbourPortRxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortRxOversizePkts.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortRxOversizePkts.setDescription('The number of good packets received by a port that are\n\t\t\t greater than 1522 bytes inclusive (excluding framing \n\t\t\t bits but including the FCS). Note that this counter \n\t\t\t alone will be incremented for packets in the range\n\t\t\t 1523-1536 bytes inclusive, whereas both this counter\n\t\t\t and the RxExcessSizeDisc counter will be incremented\n\t\t\t for packets of 1537 bytes and higher.')
wsNeighbourPortRxJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortRxJabbers.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortRxJabbers.setDescription('The number of packets received by a port that are \n\t\t\tlonger than 1522 bytes and have either an FCS error or \n\t\t\tan alignment error.')
wsNeighbourPortRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortRxAlignmentErrors.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortRxAlignmentErrors.setDescription('The number of packets received by a port that have a \n\t\t\t length (excluding framing bits but including FCS) \n\t\t\t between 64 and 1522 bytes, inclusive, and have a bad \n\t\t\t FCS with a nonintegral number of bytes.')
wsNeighbourPortRxFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortRxFCSErrors.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortRxFCSErrors.setDescription('The number of packets received by a port that have a \n\t\t\t length (excluding framing bits but including FCS) \n\t\t\t between 64 and 1522 bytes inclusive, and have a bad \n\t\t\t FCS with an integral number of bytes.')
wsNeighbourPortRxGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortRxGoodOctets.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortRxGoodOctets.setDescription('The total number of bytes in all good packets received\n\t\t\t by a port (excluding framing bits but including FCS).')
wsNeighbourPortRxDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortRxDropPkts.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortRxDropPkts.setDescription('The number of good packets received by a port that were\n\t\t\t dropped due to lack of resources (e.g., lack of input\n\t\t\t buffers) or were dropped due to lack of resources \n\t\t\t before a determination of the validity of the packet\n\t\t\t was able to be made (e.g., receive FIFO overflow). The\n\t\t\t counter is only incremented if the receive error was \n\t\t\t not counted by.either the RxExcessSizeDisc, the \n\t\t\t RxAlignmentErrors or the RxFCSErrors counters.')
wsNeighbourPortRxUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortRxUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortRxUnicastPkts.setDescription('The number of good packets received by a port that are\n\t\t\t addressed to a unicast address.')
wsNeighbourPortRxMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortRxMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortRxMulticastPkts.setDescription('The number of good packets received by a port that are\n\t\t\t directed to a multicast address. This counter does not\n\t\t\t include errored multicast packets or valid broadcast\n\t\t\t packets.')
wsNeighbourPortRxBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortRxBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortRxBroadcastPkts.setDescription('The number of good packets received by a port that are\n\t\t\t directed to the broadcast address. This counter does \n\t\t\t not include errored broadcast packets or valid \n\t\t\t multicast packets.')
wsNeighbourPortRxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortRxFragments.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortRxFragments.setDescription('The number of packets received by a port that are less\n\t\t\t than 64 bytes (excluding framing bits) and have either\n\t\t\t an FCS error or an alignment error.')
wsNeighbourPortRxExcessSizeDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortRxExcessSizeDisc.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortRxExcessSizeDisc.setDescription('The number of good packets received by a port that are\n\t\t\t greater than 1536 bytes (excluding framing bits but\n\t\t\t including the FCS) and were discarded due to excessive\n\t\t\t length. Note that the RxOversizePkts counter alone is\n\t\t\t incremented for packets in the range 1523-1536 bytes\n\t\t\t inclusive, whereas both this counter and the \n\t\t\t RxOversizePkts counter are incremented for packets of\n\t\t\t 1537 bytes and higher.')
wsNeighbourPortRxSymbolError = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 2, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortRxSymbolError.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortRxSymbolError.setDescription('The total number of times a valid length packet was\n\t\t\t received at a port and at least one invalid data \n\t\t\t symbol was detected. Counter only increment once per\n\t\t\t carrier event and does not increment on detection of\n\t\t\t collision during the carrier event.')
wsNeighbourPortSNPATable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 3), )
if mibBuilder.loadTexts: wsNeighbourPortSNPATable.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortSNPATable.setDescription('Table of known SNPA on ports of discovered PFDB Neighbours.')
wsNeighbourPortSNPAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 3, 1), ).setIndexNames((0, "WAYSTREAM-MIB", "wsNeighbourPortSNPAIfIndex"), (0, "WAYSTREAM-MIB", "wsNeighbourPortSNPANIndex"), (0, "WAYSTREAM-MIB", "wsNeighbourPortSNPAPIndex"), (0, "WAYSTREAM-MIB", "wsNeighbourPortSNPASIndex"))
if mibBuilder.loadTexts: wsNeighbourPortSNPAEntry.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortSNPAEntry.setDescription('An entry for a known SNPA on a port of a neighbour.')
wsNeighbourPortSNPAIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortSNPAIfIndex.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortSNPAIfIndex.setDescription('Neighbour interface index.')
wsNeighbourPortSNPANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortSNPANIndex.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortSNPANIndex.setDescription('Neighbour index.')
wsNeighbourPortSNPAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortSNPAPIndex.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortSNPAPIndex.setDescription('Neighbour port index.')
wsNeighbourPortSNPASIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortSNPASIndex.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortSNPASIndex.setDescription('Neighbour port SNPA index.')
wsNeighbourPortSNPASMCast = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortSNPASMCast.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortSNPASMCast.setDescription('Set to 1 if SNPA is a multicast address, 0 otherwise.')
wsNeighbourPortSNPA = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 3, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNeighbourPortSNPA.setStatus('current')
if mibBuilder.loadTexts: wsNeighbourPortSNPA.setDescription('Known SNPA on neighbour port.')
wsSFPTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4), )
if mibBuilder.loadTexts: wsSFPTable.setStatus('current')
if mibBuilder.loadTexts: wsSFPTable.setDescription('Table with information on SFPs.')
wsSFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1), ).setIndexNames((0, "WAYSTREAM-MIB", "wsSFPIndex"))
if mibBuilder.loadTexts: wsSFPEntry.setStatus('current')
if mibBuilder.loadTexts: wsSFPEntry.setDescription('An entry for an SFP.')
wsSFPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPIndex.setStatus('current')
if mibBuilder.loadTexts: wsSFPIndex.setDescription('SFP number.')
wsSFPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("missing", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPStatus.setStatus('current')
if mibBuilder.loadTexts: wsSFPStatus.setDescription('SFP status.')
wsSFPConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("sc", 1), ("fiberJack", 6), ("lc", 7), ("mtrj", 8), ("mu", 9), ("sg", 10), ("opticalPigtail", 11), ("hssdcii", 32), ("copperPigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPConnector.setStatus('current')
if mibBuilder.loadTexts: wsSFPConnector.setDescription('Connector type.')
wsSFPTransceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 4), Bits().clone(namedValues=NamedValues(("sBasePX", 0), ("sBaseBX10", 1), ("s100BaseFX", 2), ("s100BaseLX", 3), ("s1000BaseT", 4), ("s1000BaseCX", 5), ("s1000BaseLX", 6), ("s1000BaseSX", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTransceiver.setStatus('current')
if mibBuilder.loadTexts: wsSFPTransceiver.setDescription('Transceiver capablities.')
wsSFPEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("e8B10B", 1), ("e4B5B", 2), ("eNRZ", 3), ("eManchester", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPEncoding.setStatus('current')
if mibBuilder.loadTexts: wsSFPEncoding.setDescription('Encoding type.')
wsSFPBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPBitrate.setStatus('current')
if mibBuilder.loadTexts: wsSFPBitrate.setDescription('SFP Bitrate (Mbps).')
wsSFPSingleModeLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPSingleModeLen.setStatus('current')
if mibBuilder.loadTexts: wsSFPSingleModeLen.setDescription('Supported single mode fiber link length (m).\n\t\t\tA value of 255000 means > 254000 m.')
wsSFPMultiMode50Len = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPMultiMode50Len.setStatus('current')
if mibBuilder.loadTexts: wsSFPMultiMode50Len.setDescription('Supported 50um multi-mode fiber link length (m).\n\t\t\tA value of 2550 means > 2540 m.')
wsSFPMultiMode625Len = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPMultiMode625Len.setStatus('current')
if mibBuilder.loadTexts: wsSFPMultiMode625Len.setDescription('Supported 62.5um multi-mode fiber link length (m).\n\t\t\tA value of 2550 means > 2540 m.')
wsSFPCopperLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPCopperLen.setStatus('current')
if mibBuilder.loadTexts: wsSFPCopperLen.setDescription('Supported copper link length (m).\n\t\t\tA value of 255 means > 254 m.')
wsSFPTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("alarmLow", 1), ("warnLow", 2), ("ok", 3), ("warnHigh", 4), ("alarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTempStatus.setStatus('current')
if mibBuilder.loadTexts: wsSFPTempStatus.setDescription('Temperature status.')
wsSFPTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTemp.setStatus('current')
if mibBuilder.loadTexts: wsSFPTemp.setDescription('Measured temperature in degrees centigrade.')
wsSFPVoltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("alarmLow", 1), ("warnLow", 2), ("ok", 3), ("warnHigh", 4), ("alarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPVoltStatus.setStatus('current')
if mibBuilder.loadTexts: wsSFPVoltStatus.setDescription('Voltage status.')
wsSFPVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPVolt.setStatus('current')
if mibBuilder.loadTexts: wsSFPVolt.setDescription('Measured voltage (mV).')
wsSFPTXCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("alarmLow", 1), ("warnLow", 2), ("ok", 3), ("warnHigh", 4), ("alarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXCurrentStatus.setDescription('TX Current status.')
wsSFPTXCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXCurrent.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXCurrent.setDescription('Measured TX current (mA).')
wsSFPTXPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("alarmLow", 1), ("warnLow", 2), ("ok", 3), ("warnHigh", 4), ("alarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXPowerStatus.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXPowerStatus.setDescription('TX power status.')
wsSFPTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXPower.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXPower.setDescription('Measured TX power (uW).')
wsSFPRXPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("alarmLow", 1), ("warnLow", 2), ("ok", 3), ("warnHigh", 4), ("alarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPRXPowerStatus.setStatus('current')
if mibBuilder.loadTexts: wsSFPRXPowerStatus.setDescription('RX power status.')
wsSFPRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPRXPower.setStatus('current')
if mibBuilder.loadTexts: wsSFPRXPower.setDescription('Measured RX power (uW).')
wsSFPTransceiverExt = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 21), Bits().clone(namedValues=NamedValues(("s10000BaseER", 0), ("s10000BaseLRM", 1), ("s10000BaseLR", 2), ("s10000BaseSR", 3), ("sActiveCable", 4), ("sPassiveCable", 5), ("reserved6", 6), ("reserved7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTransceiverExt.setStatus('current')
if mibBuilder.loadTexts: wsSFPTransceiverExt.setDescription('10G Ethernet Compliance Codes.')
wsSFPTXdBmPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXdBmPower.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXdBmPower.setDescription('Measured TX power (dBm x 1000).')
wsSFPRXdBmPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPRXdBmPower.setStatus('current')
if mibBuilder.loadTexts: wsSFPRXdBmPower.setDescription('Measured RX power (dBm x 1000).')
wsSFPTempNormalLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTempNormalLow.setStatus('current')
if mibBuilder.loadTexts: wsSFPTempNormalLow.setDescription('Operating temparature normal range low (C).')
wsSFPTempNormalHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTempNormalHigh.setStatus('current')
if mibBuilder.loadTexts: wsSFPTempNormalHigh.setDescription('Operating temparature normal range high (C).')
wsSFPTempWarningLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTempWarningLow.setStatus('current')
if mibBuilder.loadTexts: wsSFPTempWarningLow.setDescription('Operating temparature warning range low (C).')
wsSFPTempWarningHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTempWarningHigh.setStatus('current')
if mibBuilder.loadTexts: wsSFPTempWarningHigh.setDescription('Operating temparature warning range high (C).')
wsSFPVoltNormalLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPVoltNormalLow.setStatus('current')
if mibBuilder.loadTexts: wsSFPVoltNormalLow.setDescription('Supply voltage normal range low (mV).')
wsSFPVoltNormalHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPVoltNormalHigh.setStatus('current')
if mibBuilder.loadTexts: wsSFPVoltNormalHigh.setDescription('Supply voltage normal range high (mV).')
wsSFPVoltWarningLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPVoltWarningLow.setStatus('current')
if mibBuilder.loadTexts: wsSFPVoltWarningLow.setDescription('Supply voltage warning range low (mV).')
wsSFPVoltWarningHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPVoltWarningHigh.setStatus('current')
if mibBuilder.loadTexts: wsSFPVoltWarningHigh.setDescription('Supply voltage warning range high (mV).')
wsSFPTXCurrentNormalLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXCurrentNormalLow.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXCurrentNormalLow.setDescription('TX Current normal range low (mA).')
wsSFPTXCurrentNormalHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXCurrentNormalHigh.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXCurrentNormalHigh.setDescription('TX Current normal range high (mA).')
wsSFPTXCurrentWarningLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXCurrentWarningLow.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXCurrentWarningLow.setDescription('TX Current warning range low (mA).')
wsSFPTXCurrentWarningHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXCurrentWarningHigh.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXCurrentWarningHigh.setDescription('TX Current warning range high (mA).')
wsSFPTXOutputPowNormalLowuW = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXOutputPowNormalLowuW.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXOutputPowNormalLowuW.setDescription('TX output power normal range low (uW).')
wsSFPTXOutputPowNormalHighuW = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXOutputPowNormalHighuW.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXOutputPowNormalHighuW.setDescription('TX output power normal range high (uW).')
wsSFPTXOutputPowWarningLowuW = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXOutputPowWarningLowuW.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXOutputPowWarningLowuW.setDescription('TX output power warning range low (uW).')
wsSFPTXOutputPowWarningHighuW = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXOutputPowWarningHighuW.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXOutputPowWarningHighuW.setDescription('TX output power warning range high (uW).')
wsSFPTXOutputPowNormalLowdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXOutputPowNormalLowdBm.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXOutputPowNormalLowdBm.setDescription('TX output power normal range low (dBm x 1000).')
wsSFPTXOutputPowNormalHighdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXOutputPowNormalHighdBm.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXOutputPowNormalHighdBm.setDescription('TX output power normal range high (dBm x 1000).')
wsSFPTXOutputPowWarningLowdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXOutputPowWarningLowdBm.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXOutputPowWarningLowdBm.setDescription('TX output power warning range low (dBm x 1000).')
wsSFPTXOutputPowWarningHighdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPTXOutputPowWarningHighdBm.setStatus('current')
if mibBuilder.loadTexts: wsSFPTXOutputPowWarningHighdBm.setDescription('TX output power warning range high (dBm x 1000).')
wsSFPRXInputPowNormalLowuW = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPRXInputPowNormalLowuW.setStatus('current')
if mibBuilder.loadTexts: wsSFPRXInputPowNormalLowuW.setDescription('RX input power normal range low (uW).')
wsSFPRXInputPowNormalHighuW = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPRXInputPowNormalHighuW.setStatus('current')
if mibBuilder.loadTexts: wsSFPRXInputPowNormalHighuW.setDescription('RX input power normal range high (uW).')
wsSFPRXInputPowWarningLowuW = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPRXInputPowWarningLowuW.setStatus('current')
if mibBuilder.loadTexts: wsSFPRXInputPowWarningLowuW.setDescription('RX input power warning range low (uW).')
wsSFPRXInputPowWarningHighuW = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPRXInputPowWarningHighuW.setStatus('current')
if mibBuilder.loadTexts: wsSFPRXInputPowWarningHighuW.setDescription('RX input power warning range high (uW).')
wsSFPRXInputPowNormalLowdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPRXInputPowNormalLowdBm.setStatus('current')
if mibBuilder.loadTexts: wsSFPRXInputPowNormalLowdBm.setDescription('RX input power normal range low (dBm x 1000).')
wsSFPRXInputPowNormalHighdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPRXInputPowNormalHighdBm.setStatus('current')
if mibBuilder.loadTexts: wsSFPRXInputPowNormalHighdBm.setDescription('RX input power normal range high (dBm x 1000).')
wsSFPRXInputPowWarningLowdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPRXInputPowWarningLowdBm.setStatus('current')
if mibBuilder.loadTexts: wsSFPRXInputPowWarningLowdBm.setDescription('RX input power warning range low (dBm x 1000).')
wsSFPRXInputPowWarningHighdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPRXInputPowWarningHighdBm.setStatus('current')
if mibBuilder.loadTexts: wsSFPRXInputPowWarningHighdBm.setDescription('RX input power warning range high (dBm x 1000).')
wsSFPPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPPartNumber.setStatus('current')
if mibBuilder.loadTexts: wsSFPPartNumber.setDescription('SFP part number.')
wsSFPSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 4, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSFPSerialNumber.setStatus('current')
if mibBuilder.loadTexts: wsSFPSerialNumber.setDescription('SFP serial number.')
wsAccounting = ObjectIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 1, 5))
if mibBuilder.loadTexts: wsAccounting.setStatus('current')
if mibBuilder.loadTexts: wsAccounting.setDescription('Accounting objects')
wsPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 1, 5, 1), )
if mibBuilder.loadTexts: wsPolicyTable.setStatus('current')
if mibBuilder.loadTexts: wsPolicyTable.setDescription('Table of policy accounting information.')
wsPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 1, 5, 1, 1), ).setIndexNames((0, "WAYSTREAM-MIB", "wsPolicyIfIndex"), (0, "WAYSTREAM-MIB", "wsPolicyName"))
if mibBuilder.loadTexts: wsPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: wsPolicyEntry.setDescription('An entry for a policy.')
wsPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: wsPolicyIfIndex.setDescription('Interface index of policy accounting entry.')
wsPolicyIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPolicyIfName.setStatus('current')
if mibBuilder.loadTexts: wsPolicyIfName.setDescription('Interface name of policy accountin entry')
wsPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPolicyName.setStatus('current')
if mibBuilder.loadTexts: wsPolicyName.setDescription('Name of policy.')
wsPolicyCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPolicyCookie.setStatus('current')
if mibBuilder.loadTexts: wsPolicyCookie.setDescription('Name of policy cookie.')
wsPolicyInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 5, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPolicyInPkts.setStatus('current')
if mibBuilder.loadTexts: wsPolicyInPkts.setDescription('Input packets counter.')
wsPolicyInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 5, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPolicyInBytes.setStatus('current')
if mibBuilder.loadTexts: wsPolicyInBytes.setDescription('Input bytes counter.')
wsPolicyInDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 5, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPolicyInDrops.setStatus('current')
if mibBuilder.loadTexts: wsPolicyInDrops.setDescription('Number input packets dropped.')
wsPolicyOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 5, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPolicyOutPkts.setStatus('current')
if mibBuilder.loadTexts: wsPolicyOutPkts.setDescription('Output packets counter.')
wsPolicyOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 5, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPolicyOutBytes.setStatus('current')
if mibBuilder.loadTexts: wsPolicyOutBytes.setDescription('Output bytes counter.')
wsPolicyOutDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 5, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPolicyOutDrops.setStatus('current')
if mibBuilder.loadTexts: wsPolicyOutDrops.setDescription('Number input packets dropped.')
wsPolicyUsedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 5, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPolicyUsedCnt.setStatus('current')
if mibBuilder.loadTexts: wsPolicyUsedCnt.setDescription('Number policy maps set to use this policy.')
wsXFPTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6), )
if mibBuilder.loadTexts: wsXFPTable.setStatus('current')
if mibBuilder.loadTexts: wsXFPTable.setDescription('Table with information on XFPs.')
wsXFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1), ).setIndexNames((0, "WAYSTREAM-MIB", "wsXFPIndex"))
if mibBuilder.loadTexts: wsXFPEntry.setStatus('current')
if mibBuilder.loadTexts: wsXFPEntry.setDescription('An entry for an XFP.')
wsXFPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPIndex.setStatus('current')
if mibBuilder.loadTexts: wsXFPIndex.setDescription('XFP number.')
wsXFPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("missing", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPStatus.setStatus('current')
if mibBuilder.loadTexts: wsXFPStatus.setDescription('XFP status.')
wsXFPConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("sc", 1), ("fiberJack", 6), ("lc", 7), ("mtrj", 8), ("mu", 9), ("sg", 10), ("opticalPigtail", 11), ("hssdcii", 32), ("copperPigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPConnector.setStatus('current')
if mibBuilder.loadTexts: wsXFPConnector.setDescription('Connector type.')
wsXFPTransceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 4), Bits().clone(namedValues=NamedValues(("reserved0", 0), ("s10GBaseEW", 1), ("s10GBaseLW", 2), ("s10GBaseSW", 3), ("s10GBaseLRM", 4), ("s10GBaseER", 5), ("s10GBaseLR", 6), ("s10GBaseSR", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPTransceiver.setStatus('current')
if mibBuilder.loadTexts: wsXFPTransceiver.setDescription('Transceiver capablities.')
wsXFPEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 5), Bits().clone(namedValues=NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved2", 2), ("eRZ", 3), ("eNRZ", 4), ("eSonetScrambl", 5), ("e8B10B", 6), ("e64B66B", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPEncoding.setStatus('current')
if mibBuilder.loadTexts: wsXFPEncoding.setDescription('Encoding type.')
wsXFPBitrateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPBitrateMin.setStatus('current')
if mibBuilder.loadTexts: wsXFPBitrateMin.setDescription('XFP Min Bitrate (Mbps).')
wsXFPBitrateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPBitrateMax.setStatus('current')
if mibBuilder.loadTexts: wsXFPBitrateMax.setDescription('XFP Max Bitrate (Mbps).')
wsXFPSingleModeLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPSingleModeLen.setStatus('current')
if mibBuilder.loadTexts: wsXFPSingleModeLen.setDescription('Supported single mode fiber link length (m).\n\t\t\tA value of 255000 means > 254000 m.')
wsXFPMultiMode50Len = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPMultiMode50Len.setStatus('current')
if mibBuilder.loadTexts: wsXFPMultiMode50Len.setDescription('Supported 50um multi-mode fiber link length (m).\n\t\t\tA value of 510 means > 508 m.')
wsXFPMultiMode625Len = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPMultiMode625Len.setStatus('current')
if mibBuilder.loadTexts: wsXFPMultiMode625Len.setDescription('Supported 62.5um multi-mode fiber link length (m).\n\t\t\tA value of 255 means > 254 m.')
wsXFPCopperLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPCopperLen.setStatus('current')
if mibBuilder.loadTexts: wsXFPCopperLen.setDescription('Supported copper link length (m).\n\t\t\tA value of 255 means > 254 m.')
wsXFPTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("alarmLow", 1), ("warnLow", 2), ("ok", 3), ("warnHigh", 4), ("alarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPTempStatus.setStatus('current')
if mibBuilder.loadTexts: wsXFPTempStatus.setDescription('Temperature status.')
wsXFPTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPTemp.setStatus('current')
if mibBuilder.loadTexts: wsXFPTemp.setDescription('Measured temperature in degrees centigrade.')
wsXFPTXCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("alarmLow", 1), ("warnLow", 2), ("ok", 3), ("warnHigh", 4), ("alarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPTXCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: wsXFPTXCurrentStatus.setDescription('TX Current status.')
wsXFPTXCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPTXCurrent.setStatus('current')
if mibBuilder.loadTexts: wsXFPTXCurrent.setDescription('Measured TX current (mA).')
wsXFPTXPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("alarmLow", 1), ("warnLow", 2), ("ok", 3), ("warnHigh", 4), ("alarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPTXPowerStatus.setStatus('current')
if mibBuilder.loadTexts: wsXFPTXPowerStatus.setDescription('TX power status.')
wsXFPTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPTXPower.setStatus('current')
if mibBuilder.loadTexts: wsXFPTXPower.setDescription('Measured TX power (uW).')
wsXFPRXPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("alarmLow", 1), ("warnLow", 2), ("ok", 3), ("warnHigh", 4), ("alarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPRXPowerStatus.setStatus('current')
if mibBuilder.loadTexts: wsXFPRXPowerStatus.setDescription('RX power status.')
wsXFPRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 1, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsXFPRXPower.setStatus('current')
if mibBuilder.loadTexts: wsXFPRXPower.setDescription('Measured RX power (uW).')
wsIbosEnvironmentNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 0))
wsIbosTempLow = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 0, 1)).setObjects(("WAYSTREAM-MIB", "wsTempSensor"), ("WAYSTREAM-MIB", "wsTempMeasured"), ("WAYSTREAM-MIB", "wsTempThresholdLow"), ("WAYSTREAM-MIB", "wsTempStatus"))
if mibBuilder.loadTexts: wsIbosTempLow.setStatus('current')
if mibBuilder.loadTexts: wsIbosTempLow.setDescription('A wsIbosTempLow trap signifies that the SNMP entity,\n\t\t\t acting in an agent role, has detected that one of its\n                        temperature sensors is outside of the predefined low\n                        threshold.')
wsIbosTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 0, 2)).setObjects(("WAYSTREAM-MIB", "wsTempSensor"), ("WAYSTREAM-MIB", "wsTempMeasured"), ("WAYSTREAM-MIB", "wsTempThresholdHigh"), ("WAYSTREAM-MIB", "wsTempStatus"))
if mibBuilder.loadTexts: wsIbosTempHigh.setStatus('current')
if mibBuilder.loadTexts: wsIbosTempHigh.setDescription('A wsIbosTempHigh trap signifies that the SNMP entity,\n                        acting in an agent role, has detected that one of its\n                        temperature sensors is outside of the predefined high\n                        threshold.')
wsIbosVoltLow = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 0, 3)).setObjects(("WAYSTREAM-MIB", "wsVoltChannel"), ("WAYSTREAM-MIB", "wsVoltMeasured"), ("WAYSTREAM-MIB", "wsVoltThresholdLow"), ("WAYSTREAM-MIB", "wsVoltStatus"))
if mibBuilder.loadTexts: wsIbosVoltLow.setStatus('current')
if mibBuilder.loadTexts: wsIbosVoltLow.setDescription('A wsIbosVoltLow trap signifies that the SNMP entity,\n\t\t\tacting in an agent role, has detected that one of its\n\t\t\tvoltage channels is outside of the predefined low\n\t\t\tthreshold.')
wsIbosVoltHigh = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 0, 4)).setObjects(("WAYSTREAM-MIB", "wsVoltChannel"), ("WAYSTREAM-MIB", "wsVoltMeasured"), ("WAYSTREAM-MIB", "wsVoltThresholdHigh"), ("WAYSTREAM-MIB", "wsVoltStatus"))
if mibBuilder.loadTexts: wsIbosVoltHigh.setStatus('current')
if mibBuilder.loadTexts: wsIbosVoltHigh.setDescription('A wsIbosVoltHigh trap signifies that the SNMP entity,\n                        acting in an agent role, has detected that one of its\n                        voltage channels is outside of the predefined high\n                        threshold.')
wsIbosFanRPMLow = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 0, 5)).setObjects(("WAYSTREAM-MIB", "wsFanNumber"), ("WAYSTREAM-MIB", "wsFanRPM"))
if mibBuilder.loadTexts: wsIbosFanRPMLow.setStatus('current')
if mibBuilder.loadTexts: wsIbosFanRPMLow.setDescription("A wsIbosFanRPMLow trap signifies that the SNMP entity,\n                        acting in an agent role, has detected that one of its\n                        fans's RPM is lower than the system defined threshold.")
wsIbosFanOutVoltLow = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 1, 2, 0, 6)).setObjects(("WAYSTREAM-MIB", "wsFanVoltage"))
if mibBuilder.loadTexts: wsIbosFanOutVoltLow.setStatus('current')
if mibBuilder.loadTexts: wsIbosFanOutVoltLow.setDescription('A wsIbosFanOutVoltLow trap signifies that the SNMP\n\t\t\tentity, acting in an agent role, has detected that its\n\t\t\tfan output voltage is lower than the system defined\n\t\t\tthreshold.')
mibBuilder.exportSymbols("WAYSTREAM-MIB", wsSFPVoltWarningLow=wsSFPVoltWarningLow, wsNeighbourPortTxMulticastPkts=wsNeighbourPortTxMulticastPkts, wsNeighbourLocalIf=wsNeighbourLocalIf, wsXFPTXPower=wsXFPTXPower, wsNeighbourPortRxUndersizePkts=wsNeighbourPortRxUndersizePkts, wsEnvironment=wsEnvironment, wsNeighbourPortRxDropPkts=wsNeighbourPortRxDropPkts, wsPolicyEntry=wsPolicyEntry, wsVoltEntry=wsVoltEntry, wsTempStatus=wsTempStatus, wsSFPTempNormalHigh=wsSFPTempNormalHigh, wsSFPIndex=wsSFPIndex, wsXFPMultiMode50Len=wsXFPMultiMode50Len, wsSFPVoltNormalLow=wsSFPVoltNormalLow, wsVersionString=wsVersionString, wsVoltChannel=wsVoltChannel, wsSFPTemp=wsSFPTemp, wsSFPRXInputPowNormalLowuW=wsSFPRXInputPowNormalLowuW, wsXFPEncoding=wsXFPEncoding, wsNeighbourPortRxJabbers=wsNeighbourPortRxJabbers, wsVersion=wsVersion, wsFanEntry=wsFanEntry, wsSFPTransceiverExt=wsSFPTransceiverExt, wsTempMeasured=wsTempMeasured, wsNeighbourHostname=wsNeighbourHostname, wsNeighbourPortRxFCSErrors=wsNeighbourPortRxFCSErrors, wsPolicyInDrops=wsPolicyInDrops, wsSFPTempNormalLow=wsSFPTempNormalLow, wsSFPVoltNormalHigh=wsSFPVoltNormalHigh, wsTempSensor=wsTempSensor, wsNeighbourPortTxCollisions=wsNeighbourPortTxCollisions, wsSFPEntry=wsSFPEntry, wsSFPTXCurrentStatus=wsSFPTXCurrentStatus, wsNeighbourPortRxUnicastPkts=wsNeighbourPortRxUnicastPkts, wsFanNumber=wsFanNumber, wsNeighbourPortPkts128to255Octets=wsNeighbourPortPkts128to255Octets, wsNeighbourDBCount=wsNeighbourDBCount, wsSFPMultiMode625Len=wsSFPMultiMode625Len, wsTempTable=wsTempTable, wsPolicyIfName=wsPolicyIfName, wsXFPTXCurrentStatus=wsXFPTXCurrentStatus, wsSFPRXPowerStatus=wsSFPRXPowerStatus, PYSNMP_MODULE_ID=ibos, wsXFPMultiMode625Len=wsXFPMultiMode625Len, wsTempThresholdLow=wsTempThresholdLow, wsXFPTransceiver=wsXFPTransceiver, wsSFPTXCurrentNormalHigh=wsSFPTXCurrentNormalHigh, wsXFPTXPowerStatus=wsXFPTXPowerStatus, wsTempEntry=wsTempEntry, wsSFPVoltStatus=wsSFPVoltStatus, wsSFPBitrate=wsSFPBitrate, wsSFPTXdBmPower=wsSFPTXdBmPower, wsNeighboursTable=wsNeighboursTable, wsNeighbourOSVersion=wsNeighbourOSVersion, wsNeighbourPortTxDropPkts=wsNeighbourPortTxDropPkts, wsSFPTXCurrent=wsSFPTXCurrent, wsNeighbourPortRxFragments=wsNeighbourPortRxFragments, wsNeighbourPortSNPANIndex=wsNeighbourPortSNPANIndex, wsNeighbourModel=wsNeighbourModel, wsNeighbourPortRxAlignmentErrors=wsNeighbourPortRxAlignmentErrors, wsPolicyCookie=wsPolicyCookie, wsNeighbourPortSNPASIndex=wsNeighbourPortSNPASIndex, wsXFPIndex=wsXFPIndex, wsXFPSingleModeLen=wsXFPSingleModeLen, wsNeighbourRemoteIf=wsNeighbourRemoteIf, wsSFPConnector=wsSFPConnector, wsSFPRXInputPowNormalHighuW=wsSFPRXInputPowNormalHighuW, wsSFPTXOutputPowNormalHighdBm=wsSFPTXOutputPowNormalHighdBm, wsSFPTXCurrentWarningHigh=wsSFPTXCurrentWarningHigh, wsNeighbourPortPkts65to127Octets=wsNeighbourPortPkts65to127Octets, wsSFPTXOutputPowWarningLowuW=wsSFPTXOutputPowWarningLowuW, wsNeighbourPortName=wsNeighbourPortName, wsNeighbourPortRxExcessSizeDisc=wsNeighbourPortRxExcessSizeDisc, wsAccounting=wsAccounting, wsIbosVoltHigh=wsIbosVoltHigh, wsSFPTXCurrentNormalLow=wsSFPTXCurrentNormalLow, wsSFPSerialNumber=wsSFPSerialNumber, wsNeighbourPortPIndex=wsNeighbourPortPIndex, wsIbosVoltLow=wsIbosVoltLow, wsXFPRXPower=wsXFPRXPower, wsSFPTransceiver=wsSFPTransceiver, ibos=ibos, wsSFPTempStatus=wsSFPTempStatus, wsNeighbourPortPkts512to1023Octets=wsNeighbourPortPkts512to1023Octets, wsNeighbourPortPkts256to511Octets=wsNeighbourPortPkts256to511Octets, wsPolicyIfIndex=wsPolicyIfIndex, wsSFPTXOutputPowWarningHighuW=wsSFPTXOutputPowWarningHighuW, wsNeighbourPortsEntry=wsNeighbourPortsEntry, wsSFPTXCurrentWarningLow=wsSFPTXCurrentWarningLow, wsSFPVolt=wsSFPVolt, wsXFPStatus=wsXFPStatus, wsPolicyTable=wsPolicyTable, wsSFPTXPower=wsSFPTXPower, wsIbosFanOutVoltLow=wsIbosFanOutVoltLow, wsXFPTXCurrent=wsXFPTXCurrent, wsSFPSingleModeLen=wsSFPSingleModeLen, wsSFPRXInputPowWarningHighuW=wsSFPRXInputPowWarningHighuW, wsNeighbourPortTxFrameInDisc=wsNeighbourPortTxFrameInDisc, wsSFPTable=wsSFPTable, wsSFPCopperLen=wsSFPCopperLen, wsSFPTXOutputPowNormalLowdBm=wsSFPTXOutputPowNormalLowdBm, wsNeighbourLastAct=wsNeighbourLastAct, wsNeighbourPortSNPATable=wsNeighbourPortSNPATable, wsSFPRXInputPowWarningLowuW=wsSFPRXInputPowWarningLowuW, wsSFPRXInputPowWarningLowdBm=wsSFPRXInputPowWarningLowdBm, wsXFPTemp=wsXFPTemp, wsSFPRXInputPowWarningHighdBm=wsSFPRXInputPowWarningHighdBm, wsPolicyOutBytes=wsPolicyOutBytes, wsAsrRevision=wsAsrRevision, wsFanVoltage=wsFanVoltage, wsNeighbourUptime=wsNeighbourUptime, wsSFPTempWarningLow=wsSFPTempWarningLow, wsNeighbourNIndex=wsNeighbourNIndex, wsNeighbourPortIfIndex=wsNeighbourPortIfIndex, wsNeighbourPortNIndex=wsNeighbourPortNIndex, wsSFPStatus=wsSFPStatus, wsSFPRXInputPowNormalLowdBm=wsSFPRXInputPowNormalLowdBm, wsNeighbourPortTxUnicastPkts=wsNeighbourPortTxUnicastPkts, wsSFPRXInputPowNormalHighdBm=wsSFPRXInputPowNormalHighdBm, wsVoltMeasured=wsVoltMeasured, wsSFPRXPower=wsSFPRXPower, wsSFPPartNumber=wsSFPPartNumber, wsTempThresholdHigh=wsTempThresholdHigh, wsPolicyUsedCnt=wsPolicyUsedCnt, wsPolicyOutPkts=wsPolicyOutPkts, wsXFPBitrateMax=wsXFPBitrateMax, wsSFPTXPowerStatus=wsSFPTXPowerStatus, wsSFPMultiMode50Len=wsSFPMultiMode50Len, wsTempTHYST=wsTempTHYST, wsNeighboursEntry=wsNeighboursEntry, wsIbosEnvironmentTrapEnable=wsIbosEnvironmentTrapEnable, wsSFPRXdBmPower=wsSFPRXdBmPower, wsPolicyInBytes=wsPolicyInBytes, wsFanTable=wsFanTable, wsNeighbourPortRxOversizePkts=wsNeighbourPortRxOversizePkts, wsNeighbourPortRxGoodOctets=wsNeighbourPortRxGoodOctets, wsNeighbourPortsTable=wsNeighbourPortsTable, wsNeighbourIfIndex=wsNeighbourIfIndex, wsSFPTXOutputPowNormalLowuW=wsSFPTXOutputPowNormalLowuW, wsNeighbourPortRxSymbolError=wsNeighbourPortRxSymbolError, wsWritedummy=wsWritedummy, wsPolicyOutDrops=wsPolicyOutDrops, wsIbosEnvironmentNotifications=wsIbosEnvironmentNotifications, wsXFPEntry=wsXFPEntry, wsNeighbourPortPkts64Octets=wsNeighbourPortPkts64Octets, wsNeighbourPortTxBroadcastPkts=wsNeighbourPortTxBroadcastPkts, wsNeighbourPortSNPAIfIndex=wsNeighbourPortSNPAIfIndex, wsSFPTempWarningHigh=wsSFPTempWarningHigh, wsXFPBitrateMin=wsXFPBitrateMin, wsSFPTXOutputPowWarningLowdBm=wsSFPTXOutputPowWarningLowdBm, wsNeighbourCreated=wsNeighbourCreated, wsSystem=wsSystem, wsIbosTempHigh=wsIbosTempHigh, wsXFPRXPowerStatus=wsXFPRXPowerStatus, wsFanRPM=wsFanRPM, wsPFDP=wsPFDP, wsNeighbourPortSNPA=wsNeighbourPortSNPA, wsXFPCopperLen=wsXFPCopperLen, wsPolicyName=wsPolicyName, wsIbosTempLow=wsIbosTempLow, wsNeighbourPortRxBroadcastPkts=wsNeighbourPortRxBroadcastPkts, wsReload=wsReload, wsNeighbourPortTxOctets=wsNeighbourPortTxOctets, wsNeighbourPortSNPAPIndex=wsNeighbourPortSNPAPIndex, wsVoltThresholdLow=wsVoltThresholdLow, wsVoltNominal=wsVoltNominal, wsIbosFanRPMLow=wsIbosFanRPMLow, wsVoltThresholdHigh=wsVoltThresholdHigh, wsPolicyInPkts=wsPolicyInPkts, wsTempTOS=wsTempTOS, wsNeighbourPortTxDeferredTransmit=wsNeighbourPortTxDeferredTransmit, wsVoltStatus=wsVoltStatus, wsSFPEncoding=wsSFPEncoding, wsNeighbourSNPA=wsNeighbourSNPA, wsSFPTXOutputPowWarningHighdBm=wsSFPTXOutputPowWarningHighdBm, wsVoltTable=wsVoltTable, wsNeighbourPacketErrorsrIn=wsNeighbourPacketErrorsrIn, wsXFPConnector=wsXFPConnector, wsNeighbourPortSNPAEntry=wsNeighbourPortSNPAEntry, wsSFPTXOutputPowNormalHighuW=wsSFPTXOutputPowNormalHighuW, wsNeighbourPortSNPASMCast=wsNeighbourPortSNPASMCast, wsSFPVoltWarningHigh=wsSFPVoltWarningHigh, wsXFPTable=wsXFPTable, wsNeighbourPacketsIn=wsNeighbourPacketsIn, wsNeighbourPortRxOctets=wsNeighbourPortRxOctets, wsNeighbourState=wsNeighbourState, wsNeighbourPortState=wsNeighbourPortState, wsXFPTempStatus=wsXFPTempStatus, wsNeighbourPortPkts1024to1522Octets=wsNeighbourPortPkts1024to1522Octets, wsNeighbourPortRxMulticastPkts=wsNeighbourPortRxMulticastPkts)
