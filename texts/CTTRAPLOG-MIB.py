#
# PySNMP MIB module CTTRAPLOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTTRAPLOG-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 09:11:10 2024
# On host fv-az2021-432 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
ctTrapLog, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctTrapLog")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, NotificationType, Gauge32, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, TimeTicks, ModuleIdentity, Bits, Counter32, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "Gauge32", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Bits", "Counter32", "Integer32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
totalNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalNumberOfEntries.setStatus('mandatory')
if mibBuilder.loadTexts: totalNumberOfEntries.setDescription('Total number of logged entries for this chassis.')
configTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 2), )
if mibBuilder.loadTexts: configTable.setStatus('mandatory')
configTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 2, 1), ).setIndexNames((0, "CTTRAPLOG-MIB", "slotInChassis"))
if mibBuilder.loadTexts: configTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: configTableEntry.setDescription('Each entry allows a user to configure the alarm table\n                    for a specific slot. Objects such as Current Entry,\n                    MaxEntries Allowed, and an Enable/Disable switch are\n                    available.')
slotInChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInChassis.setStatus('mandatory')
if mibBuilder.loadTexts: slotInChassis.setDescription('Each Slot can be separately configured. This is the\n                    slot number for the configuration entry. ')
numEntriesLoggeds = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numEntriesLoggeds.setStatus('mandatory')
if mibBuilder.loadTexts: numEntriesLoggeds.setDescription('This is the total number of entries looged for this\n                    slot.')
numEntriesRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numEntriesRequested.setStatus('mandatory')
if mibBuilder.loadTexts: numEntriesRequested.setDescription('Maximum number of entries to store before wrapping\n                    the log on this slot.')
numEntriesAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numEntriesAllocated.setStatus('mandatory')
if mibBuilder.loadTexts: numEntriesAllocated.setDescription('This is the number of entries allocated to log alarms\n                    on this slot. It will always be less than or equal\n                    to the requested number of entries.')
lastLoggedEntryLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastLoggedEntryLogId.setStatus('mandatory')
if mibBuilder.loadTexts: lastLoggedEntryLogId.setDescription('This is the log id of the last entry logged for this\n                    slot.')
logCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearLog", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logCommand.setStatus('mandatory')
if mibBuilder.loadTexts: logCommand.setDescription('Allows the user to send the log the commands\n                    specified in the enumeration.')
wrap = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wrap.setStatus('mandatory')
if mibBuilder.loadTexts: wrap.setDescription('This is whether or not this configuration has\n                    wrapped or not.')
trapLogTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 3), )
if mibBuilder.loadTexts: trapLogTable.setStatus('mandatory')
trapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 3, 1), ).setIndexNames((0, "CTTRAPLOG-MIB", "slotChassis"), (0, "CTTRAPLOG-MIB", "logId"))
if mibBuilder.loadTexts: trapLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trapLogEntry.setDescription('Each alarm entry is generated from one of the\n                    following sources; (1) a module in one of the main\n                    chassis slots, (2) the EM, (3) or a power supply. ')
logId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logId.setStatus('mandatory')
if mibBuilder.loadTexts: logId.setDescription('Each slot has a maximium number of log entries that it\n                    can support. Each entry is assigned a monotonically\n                    increasing sequence number. When the maximum number\n                    of entries for a slot is reached, the log wraps. Each\n                    new entry will replace the oldest entry for that slot.')
nvmpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmpId.setStatus('mandatory')
if mibBuilder.loadTexts: nvmpId.setDescription('This contains the nvmp id of the trap that occurred.')
trapLogAcknowledged = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogAcknowledged.setStatus('mandatory')
if mibBuilder.loadTexts: trapLogAcknowledged.setDescription('This field is set to 2 if a trap as been acknowledged\n                    from the EM.')
trapLogVarBind = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogVarBind.setStatus('mandatory')
if mibBuilder.loadTexts: trapLogVarBind.setDescription('This is an ASN.1 encoded string representing the pairs\n                    of OID/value items supplied in the original SNMP or\n                    NVMP trap. ')
trapLogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogDescription.setStatus('mandatory')
if mibBuilder.loadTexts: trapLogDescription.setDescription('This is an internally defined string used to describe\n                    an alarm. Its primary use is for display on the EMs\n                    LCD. A default value will be used for the old trap\n                    calls.')
timeLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeLogged.setStatus('mandatory')
if mibBuilder.loadTexts: timeLogged.setDescription('The time the entry was logged. This will be date and\n                    time if possible.')
filterId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("severe", 3), ("fatal", 4), ("existing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterId.setStatus('mandatory')
if mibBuilder.loadTexts: filterId.setDescription('This will be used to filter certain alarms. The\n                    criteria is TBD. An example of classification:\n                    informational - requires no intervention. warning -\n                    Does not require immediate intervention. e.g. static\n                    risk severe - Requires immediate intervention. e.g.\n                    power overload. fatal - Requires attention and\n                    module may take corrective action such as reboot. e.g.\n                    Unrecoverable software or hardware error. ')
slotChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotChassis.setStatus('mandatory')
if mibBuilder.loadTexts: slotChassis.setDescription('Slot of this trap log.')
trapOID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 3, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapOID.setStatus('mandatory')
if mibBuilder.loadTexts: trapOID.setDescription('This OID combines the General Trap code, Specific\n                    Trap code, and the sys object id into one OID.')
z80Time = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 3, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: z80Time.setStatus('mandatory')
if mibBuilder.loadTexts: z80Time.setDescription('This is the time that the Z80 has been up for the \n                    board that sent this trap.')
filterTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 4), )
if mibBuilder.loadTexts: filterTable.setStatus('mandatory')
filterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 4, 1), ).setIndexNames((0, "CTTRAPLOG-MIB", "filterSlotInChassis"), (0, "CTTRAPLOG-MIB", "filterFilterId"), (0, "CTTRAPLOG-MIB", "filterLogId"))
if mibBuilder.loadTexts: filterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: filterEntry.setDescription('Each filter entry is generated from one of the\n                    following sources; (1) a module in one of the main\n                    chassis slots, (2) the EM, (3) or a power supply. ')
filterLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterLogId.setStatus('mandatory')
if mibBuilder.loadTexts: filterLogId.setDescription('Each slot has a maximum number of log entries that it\n                    can support. Each entry is assigned a monotonically\n                    increasing sequence number. When the maximum number of\n                    entries for a slot is reached, the log wraps. Each new\n                    entry willreplace the oldest entry for that slot.')
filterNvmpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterNvmpId.setStatus('mandatory')
if mibBuilder.loadTexts: filterNvmpId.setDescription('This contains the nvmp id of the trap that was \n                    generated.')
filterTrapLogAcknowledged = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterTrapLogAcknowledged.setStatus('mandatory')
if mibBuilder.loadTexts: filterTrapLogAcknowledged.setDescription('This field is non-zero if a trap has been acknowleged\n                    from the EM.')
filterTrapLogVarBind = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterTrapLogVarBind.setStatus('mandatory')
if mibBuilder.loadTexts: filterTrapLogVarBind.setDescription('This is an ASN.1 encoded string representing the pairs\n                    of OID/value items supplied in the original SNMP or\n                    NVMP trap.')
filterTrapLogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterTrapLogDescription.setStatus('mandatory')
if mibBuilder.loadTexts: filterTrapLogDescription.setDescription("This is an internally defined string used to\n                    describe an alarm. It's primary use is for display\n                    on the EMs LCD. A default value will be used for \n                    the old trap calls.")
filterTimeLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 4, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterTimeLogged.setStatus('mandatory')
if mibBuilder.loadTexts: filterTimeLogged.setDescription('The time the entry was logged. This will be date\n                    and time if possible.')
filterFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("severe", 3), ("fatal", 4), ("existing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterFilterId.setStatus('mandatory')
if mibBuilder.loadTexts: filterFilterId.setDescription('This will be used tofilter certain alarms. The\n                    criteria is TBD. An example of classification:\n                    informational-requires no intervention. warning - \n                    Does not require immediate intervention. e.g. \n                    statis risk severe - Requires immediate \n                    intervention. e.g. power overload. fatal - \n                    Requires attention and module may take\n                    corrective action such as reboot. e.g. Unrecoverale\n                    software or hardware error.')
filterSlotInChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterSlotInChassis.setStatus('mandatory')
if mibBuilder.loadTexts: filterSlotInChassis.setDescription('Slot of this filter entry.')
filterTrapOID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 4, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterTrapOID.setStatus('mandatory')
if mibBuilder.loadTexts: filterTrapOID.setDescription('This OID combines the General Trap code, Specific\n                    Trap code, and the sys object id into one OID.')
filterZ80Time = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 4, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterZ80Time.setStatus('mandatory')
if mibBuilder.loadTexts: filterZ80Time.setDescription('The number of time ticks that have passed since\n                    this boards Z80 processor has been up.')
trapLoggerAgent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 44, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("standby", 3), ("elected", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLoggerAgent.setStatus('mandatory')
if mibBuilder.loadTexts: trapLoggerAgent.setDescription('Reflects the operational status of the traplogger agent')
mibBuilder.exportSymbols("CTTRAPLOG-MIB", numEntriesAllocated=numEntriesAllocated, filterTimeLogged=filterTimeLogged, trapLogDescription=trapLogDescription, timeLogged=timeLogged, totalNumberOfEntries=totalNumberOfEntries, filterTrapOID=filterTrapOID, lastLoggedEntryLogId=lastLoggedEntryLogId, filterSlotInChassis=filterSlotInChassis, trapLogTable=trapLogTable, trapLogAcknowledged=trapLogAcknowledged, filterTrapLogAcknowledged=filterTrapLogAcknowledged, filterLogId=filterLogId, logCommand=logCommand, filterTable=filterTable, z80Time=z80Time, trapLogEntry=trapLogEntry, filterFilterId=filterFilterId, slotInChassis=slotInChassis, filterId=filterId, filterNvmpId=filterNvmpId, trapLoggerAgent=trapLoggerAgent, configTable=configTable, numEntriesLoggeds=numEntriesLoggeds, configTableEntry=configTableEntry, logId=logId, filterZ80Time=filterZ80Time, trapLogVarBind=trapLogVarBind, filterEntry=filterEntry, filterTrapLogVarBind=filterTrapLogVarBind, trapOID=trapOID, wrap=wrap, slotChassis=slotChassis, nvmpId=nvmpId, filterTrapLogDescription=filterTrapLogDescription, numEntriesRequested=numEntriesRequested)
