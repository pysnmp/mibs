#
# PySNMP MIB module IRT-DAB-ACTIVERESERVE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/irt/IRT-DAB-ACTIVERESERVE-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 16:02:21 2024
# On host fv-az1245-338 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
eventPriority, eventCounter, mibRelease, eventTimeStamp = mibBuilder.importSymbols("IRT-COMMONVARBINDS-MIB", "eventPriority", "eventCounter", "mibRelease", "eventTimeStamp")
LocalRemote, WarningOK, MuteOk, Input1Input2, OkNotOk, FaultOK, PresentNotPresent, SelectOnOff, dab, SelectManualAuto, SFNMFN, ReadyNotReady, ExecutedNotExecuted = mibBuilder.importSymbols("IRT-TRANSMITTER-SMI-MIB", "LocalRemote", "WarningOK", "MuteOk", "Input1Input2", "OkNotOk", "FaultOK", "PresentNotPresent", "SelectOnOff", "dab", "SelectManualAuto", "SFNMFN", "ReadyNotReady", "ExecutedNotExecuted")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
sysDescr, sysName, sysLocation = mibBuilder.importSymbols("SNMPv2-MIB", "sysDescr", "sysName", "sysLocation")
TimeTicks, IpAddress, ObjectIdentity, MibIdentifier, Gauge32, NotificationType, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, Unsigned32, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "ObjectIdentity", "MibIdentifier", "Gauge32", "NotificationType", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "Unsigned32", "Counter64", "ModuleIdentity")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
dabActiveReserve = ModuleIdentity((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2))
dabActiveReserve.setRevisions(('2007-05-04 14:00', '2006-12-20 14:00', '2006-09-21 14:00', '2006-09-19 14:00', '2006-09-07 14:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dabActiveReserve.setRevisionsDescriptions(('change SFNMode, LocalMode (description only) and Module-COMPLIANCE\n\t\t\t\tchange numbering: OIDs 1.3.6.1.4.1.19831.1.1.2.2.7.1.13-19 and 1.3.6.1.4.1.19831.1.1.2.2.6.1.13-19!\n\t\t\t\t', 'corrections', 'Adding Compliance Statement', 'Correcting Imports', 'Relocation of the TC-MIB from the standard OID area at IEC into the private OID area of the IRT',))
if mibBuilder.loadTexts: dabActiveReserve.setLastUpdated('200705041400Z')
if mibBuilder.loadTexts: dabActiveReserve.setOrganization('IRT for WORKING-GROUP-TC-MIB')
if mibBuilder.loadTexts: dabActiveReserve.setContactInfo('Contact-info.\n\t\t\t\t\n\t\t\t\tAndreas Metz\n\t\t\t\t\n\t\t\t\tInstitut fuer Rundfunktechnik GmbH\n\t\t\t\tBroadcast Networks and Servers (SN)\n\t\t\t\t\n\t\t\t\tFloriansmuehlstr.60\n\t\t\t\t80939 Munich\n\t\t\t\tGermany\n\t\t\t\t\n\t\t\t\tPhone: +49 89 32399 325\n\t\t\t\tFax: +49 89 32399 354\n\t\t\t\t')
if mibBuilder.loadTexts: dabActiveReserve.setDescription('Description.\n\t\t\t\t\n\t\t\t\tbranch definition\n\t\t\t\t\n\t\t\t\t1st level\n\t\t\t\t\n\t\t\t\tevents               OBJECT IDENTIFIER ::= { dabActiveReserve 0 }\n\t\t\t\tdabARGeneral         OBJECT IDENTIFIER ::= { dabActiveReserve 1 }\n\t\t\t\tdabARAmplifierA      OBJECT IDENTIFIER ::= { dabActiveReserve 2 }\n\t\t\t\tdabARAmplifierB      OBJECT IDENTIFIER ::= { dabActiveReserve 3 }\n\t\t\t\tdabARExciterA        OBJECT IDENTIFIER ::= { dabActiveReserve 4 }\n\t\t\t\tdabARExciterB        OBJECT IDENTIFIER ::= { dabActiveReserve 5 }\n\t\t\t\tdabAREventEnable     OBJECT IDENTIFIER ::= { dabActiveReserve 6 }\n\t\t\t\tdabAREventPriority   OBJECT IDENTIFIER ::= { dabActiveReserve 7 }\n\t\t\t\tgroups               OBJECT IDENTIFIER ::= { dabActiveReserve 8 }\n\t\t\t\t\n\t\t\t\t2nd level\n\t\t\t\t\n\t\t\t\tdabAREventEnableGeneral     OBJECT IDENTIFIER ::= { dabAREventEnable 1 }\n\t\t\t\tdabAREventEnableAmplifierA  OBJECT IDENTIFIER ::= { dabAREventEnable 2 }\n\t\t\t\tdabAREventEnableAmplifierB  OBJECT IDENTIFIER ::= { dabAREventEnable 3 }\n\t\t\t\tdabAREventEnableExciterA    OBJECT IDENTIFIER ::= { dabAREventEnable 4 }\n\t\t\t\tdabAREventEnableExciterB    OBJECT IDENTIFIER ::= { dabAREventEnable 5 }\n\t\t\t\t\n\t\t\t\tdabAREventPriorityGeneral     OBJECT IDENTIFIER ::= { dabAREventPriority 1 }\n\t\t\t\tdabAREventPriorityAmplifierA  OBJECT IDENTIFIER ::= { dabAREventPriority 2 }\n\t\t\t\tdabAREventPriorityAmplifierB  OBJECT IDENTIFIER ::= { dabAREventPriority 3 }\n\t\t\t\tdabAREventPriorityExciterA    OBJECT IDENTIFIER ::= { dabAREventPriority 4 }\n\t\t\t\tdabAREventPriorityExciterB    OBJECT IDENTIFIER ::= { dabAREventPriority 5 }\n\t\t\t\t\n\t\t\t\tend branch')
dabEventsAR = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0))
dabARInputPreselectionEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 1)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARInputPreselection"))
if mibBuilder.loadTexts: dabARInputPreselectionEvent.setStatus('current')
if mibBuilder.loadTexts: dabARInputPreselectionEvent.setDescription('Description. dabARInputPreselection notification')
dabARInputAutomaticEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 2)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARInputAutomatic"))
if mibBuilder.loadTexts: dabARInputAutomaticEvent.setStatus('current')
if mibBuilder.loadTexts: dabARInputAutomaticEvent.setDescription('Description. dabARInputAutomatic notification')
dabARPreselectionExciterEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 3)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARPreselectionExciter"))
if mibBuilder.loadTexts: dabARPreselectionExciterEvent.setStatus('current')
if mibBuilder.loadTexts: dabARPreselectionExciterEvent.setDescription('Description. dabARPreselectionExciter notification')
dabARPreselectionAmplifierEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 4)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARPreselectionAmplifier"))
if mibBuilder.loadTexts: dabARPreselectionAmplifierEvent.setStatus('current')
if mibBuilder.loadTexts: dabARPreselectionAmplifierEvent.setDescription('Description. dabARPreselectionAmplifier notification')
dabARTransmitterOpModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 5)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARTransmitterOpMode"))
if mibBuilder.loadTexts: dabARTransmitterOpModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabARTransmitterOpModeEvent.setDescription('Description. dabARTransmitterOpMode notification')
dabARReserveControlEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 6)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARReserveControl"))
if mibBuilder.loadTexts: dabARReserveControlEvent.setStatus('current')
if mibBuilder.loadTexts: dabARReserveControlEvent.setDescription('Description. dabARReserveControl notification')
dabARResetFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 7)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARResetFault"))
if mibBuilder.loadTexts: dabARResetFaultEvent.setStatus('obsolete')
if mibBuilder.loadTexts: dabARResetFaultEvent.setDescription('Notification is inactive!\n\t\t\t\t\n\t\t\t\tDescription. dabARResetFaultEvent notification')
dabARActiveAmplifierEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 8)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARActiveAmplifier"))
if mibBuilder.loadTexts: dabARActiveAmplifierEvent.setStatus('current')
if mibBuilder.loadTexts: dabARActiveAmplifierEvent.setDescription('Description. dabARActiveAmplifier notification')
dabARActiveExciterEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 9)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARActiveExciter"))
if mibBuilder.loadTexts: dabARActiveExciterEvent.setStatus('current')
if mibBuilder.loadTexts: dabARActiveExciterEvent.setDescription('Description. dabARActiveExciter notification')
dabARLocalModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 10)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARLocalMode"))
if mibBuilder.loadTexts: dabARLocalModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabARLocalModeEvent.setDescription('Description. dabARLocalMode notification')
dabARControlUnitFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 11)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARControlUnitFault"))
if mibBuilder.loadTexts: dabARControlUnitFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabARControlUnitFaultEvent.setDescription('Description. dabARControlUnitFault notification')
dabARExciterSwitchOverModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 12)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverMode"))
if mibBuilder.loadTexts: dabARExciterSwitchOverModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverModeEvent.setDescription('Description. dabARExciterSwitchOverMode notification')
dabARExciterSwitchOverReadyEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 13)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverReady"))
if mibBuilder.loadTexts: dabARExciterSwitchOverReadyEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverReadyEvent.setDescription('Description. dabARExciterSwitchOverReady notification')
dabARExciterSwitchOverExecutedEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 14)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverExecuted"))
if mibBuilder.loadTexts: dabARExciterSwitchOverExecutedEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverExecutedEvent.setDescription('Description. dabARExciterSwitchOverExecuted notification')
dabARExciterSwitchOverFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 15)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverFault"))
if mibBuilder.loadTexts: dabARExciterSwitchOverFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverFaultEvent.setDescription('Description. dabARExciterSwitchOverFault notification')
dabARAmplifierSwitchOverModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 16)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverMode"))
if mibBuilder.loadTexts: dabARAmplifierSwitchOverModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverModeEvent.setDescription('Description. dabARAmplifierSwitchOverMode notification')
dabARAmplifierSwitchOverReadyEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 17)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverReady"))
if mibBuilder.loadTexts: dabARAmplifierSwitchOverReadyEvent.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverReadyEvent.setDescription('Description. dabARAmplifierSwitchOverReady notification')
dabARAmplifierSwitchOverExecutedEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 18)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverExecuted"))
if mibBuilder.loadTexts: dabARAmplifierSwitchOverExecutedEvent.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverExecutedEvent.setDescription('Description. dabARAmplifierSwitchOverExecuted notification')
dabARAmplifierSwitchOverFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 19)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverFault"))
if mibBuilder.loadTexts: dabARAmplifierSwitchOverFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverFaultEvent.setDescription('Description. dabARAmplifierSwitchOverFault notification')
dabARAmplifierARFPresentEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 20)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierARFPresent"))
if mibBuilder.loadTexts: dabARAmplifierARFPresentEvent.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierARFPresentEvent.setDescription('Description. dabARAmplifierARFPresent notification')
dabARAmplifierAFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 21)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierAFault"))
if mibBuilder.loadTexts: dabARAmplifierAFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierAFaultEvent.setDescription('Description. dabARAmplifierAFault notification')
dabARAmplifierAWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 22)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierAWarning"))
if mibBuilder.loadTexts: dabARAmplifierAWarningEvent.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierAWarningEvent.setDescription('Description. dabARAmplifierAWarning notification')
dabARAmplifierBRFPresentEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 23)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBRFPresent"))
if mibBuilder.loadTexts: dabARAmplifierBRFPresentEvent.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierBRFPresentEvent.setDescription('Description. dabARAmplifierBRFPresent notification')
dabARAmplifierBFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 24)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBFault"))
if mibBuilder.loadTexts: dabARAmplifierBFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierBFaultEvent.setDescription('Description. dabARAmplifierBFault notification')
dabARAmplifierBWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 25)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBWarning"))
if mibBuilder.loadTexts: dabARAmplifierBWarningEvent.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierBWarningEvent.setDescription('Description. dabARAmplifierBWarning notification')
dabARExciterAInput1OKEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 26)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAInput1OK"))
if mibBuilder.loadTexts: dabARExciterAInput1OKEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAInput1OKEvent.setDescription('Description. dabARExciterAInput1OK notification')
dabARExciterAInput2OKEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 27)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAInput2OK"))
if mibBuilder.loadTexts: dabARExciterAInput2OKEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAInput2OKEvent.setDescription('Description. dabARExciterAInput2OK notification')
dabARExciterALocalModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 28)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterALocalMode"))
if mibBuilder.loadTexts: dabARExciterALocalModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterALocalModeEvent.setDescription('Description. dabARExciterALocalMode notification')
dabARExciterAFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 29)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAFault"))
if mibBuilder.loadTexts: dabARExciterAFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAFaultEvent.setDescription('Description. dabARExciterAFault notification')
dabARExciterAWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 30)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAWarning"))
if mibBuilder.loadTexts: dabARExciterAWarningEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAWarningEvent.setDescription('Description. dabARExciterAWarning notification')
dabARExciterAActiveInputEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 31)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAActiveInput"))
if mibBuilder.loadTexts: dabARExciterAActiveInputEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAActiveInputEvent.setDescription('Description. dabARExciterAActiveInput notification')
dabARExciterASFNModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 32)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterASFNMode"))
if mibBuilder.loadTexts: dabARExciterASFNModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterASFNModeEvent.setDescription('Description. dabARExciterASFNMode notification')
dabARExciterARefFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 33)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterARefFault"))
if mibBuilder.loadTexts: dabARExciterARefFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterARefFaultEvent.setDescription('Description. dabARExciterARefFault notification')
dabARExciterAMuteEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 34)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAMute"))
if mibBuilder.loadTexts: dabARExciterAMuteEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAMuteEvent.setDescription('Description. dabARExciterAMute notification')
dabARExciterAWarningTimeStampEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 35)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAWarningTimeStamp"))
if mibBuilder.loadTexts: dabARExciterAWarningTimeStampEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAWarningTimeStampEvent.setDescription('Description. dabARExciterAWarningTomeStamp notification')
dabARExciterBInput1OKEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 36)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBInput1OK"))
if mibBuilder.loadTexts: dabARExciterBInput1OKEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBInput1OKEvent.setDescription('Description. dabARExciterBInput1OK notification')
dabARExciterBInput2OKEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 37)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBInput2OK"))
if mibBuilder.loadTexts: dabARExciterBInput2OKEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBInput2OKEvent.setDescription('Description. dabARExciterBInput2OK notification')
dabARExciterBLocalModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 38)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBLocalMode"))
if mibBuilder.loadTexts: dabARExciterBLocalModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBLocalModeEvent.setDescription('Description. dabARExciterBLocalMode  notification')
dabARExciterBFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 39)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBFault"))
if mibBuilder.loadTexts: dabARExciterBFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBFaultEvent.setDescription('Description. dabARExciterBFault notification')
dabARExciterBWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 40)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBWarning"))
if mibBuilder.loadTexts: dabARExciterBWarningEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBWarningEvent.setDescription('Description. dabARExciterBWarning notification')
dabARExciterBActiveInputEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 41)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBActiveInput"))
if mibBuilder.loadTexts: dabARExciterBActiveInputEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBActiveInputEvent.setDescription('Description. dabARExciterBActiveInput notification')
dabARExciterBSFNModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 42)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBSFNMode"))
if mibBuilder.loadTexts: dabARExciterBSFNModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBSFNModeEvent.setDescription('Description. dabARExciterBSFNMode notification')
dabARExciterBRefFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 43)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBRefFault"))
if mibBuilder.loadTexts: dabARExciterBRefFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBRefFaultEvent.setDescription('Description. dabARExciterBRefFault notification')
dabARExciterBMuteEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 44)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBMute"))
if mibBuilder.loadTexts: dabARExciterBMuteEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBMuteEvent.setDescription('Description. dabARExciterBMute notification')
dabARExciterBWarningTimeStampEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 0, 45)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBWarningTimeStamp"))
if mibBuilder.loadTexts: dabARExciterBWarningTimeStampEvent.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBWarningTimeStampEvent.setDescription('Description. dabARExciterBWarningTimeStamp notification')
dabARGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1))
dabARInputPreselection = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 1), Input1Input2()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARInputPreselection.setStatus('current')
if mibBuilder.loadTexts: dabARInputPreselection.setDescription('Preselection input of aktive reserve \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) Input 1\n\t\t\t\t(2) Input 2')
dabARInputAutomatic = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 2), SelectManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARInputAutomatic.setStatus('current')
if mibBuilder.loadTexts: dabARInputAutomatic.setDescription('Input selection mode of aktive reserve: manual or automatic\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) manual \n\t\t\t\t(2) automatic')
dabARPreselectionExciter = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("exciterA", 1), ("exciterB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARPreselectionExciter.setStatus('current')
if mibBuilder.loadTexts: dabARPreselectionExciter.setDescription('Aktive reserve. Preselection of the exciter \n\t\t\t\t\n\t\t\t\t')
dabARPreselectionAmplifier = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("amplifierA", 1), ("amplifierB", 2), ("amplifierAB", 3), ("amplifierABtoDummiload", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARPreselectionAmplifier.setStatus('current')
if mibBuilder.loadTexts: dabARPreselectionAmplifier.setDescription('Aktive reserve. Preselection amplifier \n\t\t\t\t\n\t\t\t\t')
dabARTransmitterOpMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 5), SelectOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARTransmitterOpMode.setStatus('current')
if mibBuilder.loadTexts: dabARTransmitterOpMode.setDescription('General transmitter control of aktive reserve\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) ON\n\t\t\t\t(2) OFF')
dabARReserveControl = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 6), SelectOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARReserveControl.setStatus('current')
if mibBuilder.loadTexts: dabARReserveControl.setDescription('Reserve control of aktive reserve\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) ON \n\t\t\t\t(2) OFF ')
dabARResetFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARResetFault.setStatus('obsolete')
if mibBuilder.loadTexts: dabARResetFault.setDescription('Massage is inactive!\n\t\t\t\t\n\t\t\t\tActive Reserve. Reset fault: trigger for reset the sum fault\n\t\t\t\t\n\t\t\t\t<1>\n\t\t\t\t\n\t\t\t\t(1) reset sum fault\n\t\t\t\t')
dabARActiveAmplifier = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("amplifierA", 1), ("amplifierB", 2), ("amplifierAB", 3), ("amplifierABtoDummiload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARActiveAmplifier.setStatus('current')
if mibBuilder.loadTexts: dabARActiveAmplifier.setDescription('Active amplifier  of aktive reserve\n\t\t\t\t\n\t\t\t\t')
dabARActiveExciter = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("exciterA", 1), ("exciterB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARActiveExciter.setStatus('current')
if mibBuilder.loadTexts: dabARActiveExciter.setDescription('Active exciter of aktive reserve\n\t\t\t\t\n\t\t\t\t')
dabARLocalMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 10), LocalRemote()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARLocalMode.setStatus('current')
if mibBuilder.loadTexts: dabARLocalMode.setDescription('Active reserve. Local mode\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) local\n\t\t\t\t(2) remote')
dabARControlUnitFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 11), FaultOK()).setUnits(' ').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARControlUnitFault.setStatus('current')
if mibBuilder.loadTexts: dabARControlUnitFault.setDescription('Aktive reserve. State of the control unit\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabARExciterSwitchOverMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 12), SelectManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterSwitchOverMode.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverMode.setDescription('Aktive reserve. Exciter switch over mode: manual or automatic\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) manual \n\t\t\t\t(2) automatic')
dabARExciterSwitchOverReady = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 13), ReadyNotReady()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterSwitchOverReady.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverReady.setDescription('Aktive reserve. State of the exciter switch over unit\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) ready\n\t\t\t\t(2) not ready')
dabARExciterSwitchOverExecuted = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 14), ExecutedNotExecuted()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterSwitchOverExecuted.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverExecuted.setDescription('Aktive reserve. Shows if the exciter switch over unit it has executed\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) executed\n\t\t\t\t(2) not executed')
dabARExciterSwitchOverFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 15), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterSwitchOverFault.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverFault.setDescription('Aktive reserve. Fault state of the exciter switch over unit\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) faulty\n\t\t\t\t(2) ok')
dabARAmplifierSwitchOverMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 16), SelectManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierSwitchOverMode.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverMode.setDescription('Active reserve. Amplifier switch over mode: manual or automatic\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) manual\n\t\t\t\t(2) automatic')
dabARAmplifierSwitchOverReady = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 17), ReadyNotReady()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARAmplifierSwitchOverReady.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverReady.setDescription('Active reserve. State of the amplifier switch over unit\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) ready\n\t\t\t\t(2) not ready')
dabARAmplifierSwitchOverExecuted = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 18), ExecutedNotExecuted()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARAmplifierSwitchOverExecuted.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverExecuted.setDescription('Active reserve. Shows if the amplifier switch over unit it has executed\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) executed\n\t\t\t\t(2) not executed')
dabARAmplifierSwitchOverFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 1, 19), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARAmplifierSwitchOverFault.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverFault.setDescription('Active reserve. Fault state of the amplifier switch over unit\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) faulty\n\t\t\t\t(2) ok')
dabARAmplifierA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 2))
dabARAmplifierARFPresent = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 2, 1), PresentNotPresent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARAmplifierARFPresent.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierARFPresent.setDescription('Active reserve. Describes if the output power of the amplifier A is present\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) present\n\t\t\t\t(2) not present')
dabARAmplifierAFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 2, 2), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARAmplifierAFault.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierAFault.setDescription('Active reserve. Fault state of amplifier A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabARAmplifierAWarning = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 2, 3), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARAmplifierAWarning.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierAWarning.setDescription('Active reserve. Warning state of amplifier A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
dabARAmplifierB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 3))
dabARAmplifierBRFPresent = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 3, 1), PresentNotPresent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARAmplifierBRFPresent.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierBRFPresent.setDescription('Active reserve. Describes if the output power of the amplifier B is present\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) present\n\t\t\t\t(2) not present')
dabARAmplifierBFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 3, 2), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARAmplifierBFault.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierBFault.setDescription('Active reserve. Fault state of amplifier B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabARAmplifierBWarning = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 3, 3), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARAmplifierBWarning.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierBWarning.setDescription('Active reserve. Warning state of amplifier B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
dabARExciterA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 4))
dabARExciterAInput1OK = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 4, 1), OkNotOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterAInput1OK.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAInput1OK.setDescription('Active reserve. Describes if the input signal at the input 1 of exiter A is ok\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) signal ok\n\t\t\t\t(2) signal is not ok ')
dabARExciterAInput2OK = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 4, 2), OkNotOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterAInput2OK.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAInput2OK.setDescription('Active reserve. Describes if the input signal at the input 2 of exiter A is ok\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) signal ok\n\t\t\t\t(2) signal is not ok ')
dabARExciterALocalMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 4, 3), LocalRemote()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterALocalMode.setStatus('current')
if mibBuilder.loadTexts: dabARExciterALocalMode.setDescription('Active reserve. State of the local mode of exciter A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) local\n\t\t\t\t(2) remote')
dabARExciterAFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 4, 4), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterAFault.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAFault.setDescription('Active reserve. State of the exciter A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabARExciterAWarning = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 4, 5), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterAWarning.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAWarning.setDescription('Active reserve. Warning state of the exciter A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
dabARExciterAActiveInput = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("input1", 1), ("input2", 2), ("seamless", 3), ("hmHierarchicalModulation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterAActiveInput.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAActiveInput.setDescription('Active reserve. Active input of the exciter A \n\t\t\t\t\n\t\t\t\t')
dabARExciterASFNMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 4, 7), SFNMFN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterASFNMode.setStatus('current')
if mibBuilder.loadTexts: dabARExciterASFNMode.setDescription('Active reserve. SFN mode of exciter A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) SFN\n\t\t\t\t(2) MFN')
dabARExciterARefFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 4, 8), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterARefFault.setStatus('current')
if mibBuilder.loadTexts: dabARExciterARefFault.setDescription('Active reserve. Fault state of the GPS input or the reference frequency of exciter A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabARExciterAMute = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 4, 9), MuteOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterAMute.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAMute.setDescription('Active reserve. Mute state of exciter A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) mute\n\t\t\t\t(2) ok')
dabARExciterAWarningTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 4, 10), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterAWarningTimeStamp.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAWarningTimeStamp.setDescription('Active reserve. Time stamp warning of exciter A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
dabARExciterB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 5))
dabARExciterBInput1OK = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 5, 1), OkNotOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterBInput1OK.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBInput1OK.setDescription('Active reserve. Describes if the input signal at the input 1 of exciter B is ok\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) signal ok\n\t\t\t\t(2) signal is not ok ')
dabARExciterBInput2OK = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 5, 2), OkNotOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterBInput2OK.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBInput2OK.setDescription('Active reserve. Describes if the input signal at the input 2 of exciter B is ok\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) signal ok\n\t\t\t\t(2) signal is not ok ')
dabARExciterBLocalMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 5, 3), LocalRemote()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterBLocalMode.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBLocalMode.setDescription('Active reserve. State of the local mode of exciter B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) local\n\t\t\t\t(2) remote')
dabARExciterBFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 5, 4), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterBFault.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBFault.setDescription('Active reserve. Fault state of the exciter B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabARExciterBWarning = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 5, 5), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterBWarning.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBWarning.setDescription('Active reserve. Warning state of the exciter B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
dabARExciterBActiveInput = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("input1", 1), ("input2", 2), ("seamless", 3), ("hmHierarchicalModulation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterBActiveInput.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBActiveInput.setDescription('Active reserve. Active input of the exciter B \n\t\t\t\t\n\t\t\t\t')
dabARExciterBSFNMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 5, 7), SFNMFN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterBSFNMode.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBSFNMode.setDescription('Active reserve. SFN mode of exciter B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) SFN\n\t\t\t\t(2) MFN')
dabARExciterBMute = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 5, 8), MuteOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterBMute.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBMute.setDescription('Active reserve. Mute state of exciter B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) mute\n\t\t\t\t(2) ok')
dabARExciterBRefFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 5, 9), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterBRefFault.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBRefFault.setDescription('Active reserve. Fault state of the GPS input or the reference frequency of exciter B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabARExciterBWarningTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 5, 10), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabARExciterBWarningTimeStamp.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBWarningTimeStamp.setDescription('Active reserve. Time stamp warning of exciter B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
dabAREventEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6))
dabAREventEnableGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1))
dabARInputPreselectionEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARInputPreselectionEnable.setStatus('current')
if mibBuilder.loadTexts: dabARInputPreselectionEnable.setDescription('Description.Enable/Disable switch for dabARInputPreselection event')
dabARInputAutomaticEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARInputAutomaticEnable.setStatus('current')
if mibBuilder.loadTexts: dabARInputAutomaticEnable.setDescription('Description.Enable/Disable switch for dabARInputAutomatic event')
dabARPreselectionExciterEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARPreselectionExciterEnable.setStatus('current')
if mibBuilder.loadTexts: dabARPreselectionExciterEnable.setDescription('Description.Enable/Disable switch for dabARPreselectionExciter event')
dabARPreselectionAmplifierEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARPreselectionAmplifierEnable.setStatus('current')
if mibBuilder.loadTexts: dabARPreselectionAmplifierEnable.setDescription('Description.Enable/Disable switch for dabARPreselectionAmplifier event')
dabARTransmitterOpModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARTransmitterOpModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabARTransmitterOpModeEnable.setDescription('Description.Enable/Disable switch for dabARTransmitterOpMode event')
dabARReserveControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARReserveControlEnable.setStatus('current')
if mibBuilder.loadTexts: dabARReserveControlEnable.setDescription('Description.Enable/Disable switch for dabARReserveControl event')
dabARResetFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARResetFaultEnable.setStatus('obsolete')
if mibBuilder.loadTexts: dabARResetFaultEnable.setDescription('Massage is inactive!\n\t\t\t\t\n\t\t\t\tDescription.Enable/Disable switch for dabARResetFault event')
dabARActiveAmplifierEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARActiveAmplifierEnable.setStatus('current')
if mibBuilder.loadTexts: dabARActiveAmplifierEnable.setDescription('Description.Enable/Disable switch for dabARActiveAmplifier event')
dabARActiveExciterEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARActiveExciterEnable.setStatus('current')
if mibBuilder.loadTexts: dabARActiveExciterEnable.setDescription('Description.Enable/Disable switch for dabARActiveExciter event')
dabARLocalModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARLocalModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabARLocalModeEnable.setDescription('Description.Enable/Disable switch for dabARLocalMode event')
dabARControlUnitFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARControlUnitFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabARControlUnitFaultEnable.setDescription('Description.Enable/Disable switch for dabARControlUnitFault event')
dabARExciterSwitchOverModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterSwitchOverModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverModeEnable.setDescription('Description.Enable/Disable switch for dabARExciterSwitchOverMode event')
dabARExciterSwitchOverReadyEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterSwitchOverReadyEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverReadyEnable.setDescription('Description.Enable/Disable switch for dabARExciterSwitchOverReady event')
dabARExciterSwitchOverExecutedEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterSwitchOverExecutedEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverExecutedEnable.setDescription('Description.Enable/Disable switch for dabARExciterSwitchOverExecuted event')
dabARExciterSwitchOverFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterSwitchOverFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverFaultEnable.setDescription('Description.Enable/Disable switch for dabARExciterSwitchOverFault event')
dabARAmplifierSwitchOverModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierSwitchOverModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverModeEnable.setDescription('Description.Enable/Disable switch for dabARAmplifierSwitchOverMode event')
dabARAmplifierSwitchOverReadyEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierSwitchOverReadyEnable.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverReadyEnable.setDescription('Description.Enable/Disable switch for dabARAmplifierSwitchOverReady event')
dabARAmplifierSwitchOverExecutedEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierSwitchOverExecutedEnable.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverExecutedEnable.setDescription('Description.Enable/Disable switch for  dabARAmplifierSwitchOverExecuted event')
dabARAmplifierSwitchOverFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierSwitchOverFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverFaultEnable.setDescription('Description.Enable/Disable switch for dabARAmplifierSwitchOverFault event')
dabAREventEnableAmplifierA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 2))
dabARAmplifierARFPresentEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierARFPresentEnable.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierARFPresentEnable.setDescription('Description.Enable/Disable switch for dabARAmplifierARFPresent event')
dabARAmplifierAFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 2, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierAFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierAFaultEnable.setDescription('Description.Enable/Disable switch for dabARAmplifierAFault event')
dabARAmplifierAWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 2, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierAWarningEnable.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierAWarningEnable.setDescription('Description.Enable/Disable switch for dabARAmplifierAWarning event')
dabAREventEnableAmplifierB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 3))
dabARAmplifierBRFPresentEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierBRFPresentEnable.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierBRFPresentEnable.setDescription('Description.Enable/Disable switch for dabARAmplifierBRFPresent event')
dabARAmplifierBFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierBFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierBFaultEnable.setDescription('Description.Enable/Disable switch for dabARAmplifierBFault event')
dabARAmplifierBWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierBWarningEnable.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierBWarningEnable.setDescription('Description.Enable/Disable switch for dabARAmplifierBWarning event')
dabAREventEnableExciterA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 4))
dabARExciterAInput1OKEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterAInput1OKEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAInput1OKEnable.setDescription('Description.Enable/Disable switch for dabARExciterAInput1OK event')
dabARExciterAInput2OKEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterAInput2OKEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAInput2OKEnable.setDescription('Description.Enable/Disable switch for dabARExciterAInput2OK event')
dabARExciterALocalModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 4, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterALocalModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterALocalModeEnable.setDescription('Description.Enable/Disable switch for dabARExciterALocalMode event')
dabARExciterAFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 4, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterAFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAFaultEnable.setDescription('Description.Enable/Disable switch for dabARExciterAFault event')
dabARExciterAWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 4, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterAWarningEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAWarningEnable.setDescription('Description.Enable/Disable switch for dabARExciterAWarning event')
dabARExciterAActiveInputEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 4, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterAActiveInputEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAActiveInputEnable.setDescription('Description.Enable/Disable switch for dabARExciterAActiveInput event')
dabARExciterASFNModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 4, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterASFNModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterASFNModeEnable.setDescription('Description.Enable/Disable switch for dabARExciterASFNMode event')
dabARExciterARefFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 4, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterARefFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterARefFaultEnable.setDescription('Description.Enable/Disable switch for dabARExciterARefFault event')
dabARExciterAMuteEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 4, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterAMuteEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAMuteEnable.setDescription('Description.Enable/Disable switch for dabARExciterAMute event')
dabARExciterAWarningTimeStampEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 4, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterAWarningTimeStampEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAWarningTimeStampEnable.setDescription('Description.Enable/Disable switch for dabARExciterAWarningTimeStamp event')
dabAREventEnableExciterB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 5))
dabARExciterBInput1OKEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBInput1OKEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBInput1OKEnable.setDescription('Description.Enable/Disable switch for dabARExciterBInput1OK event')
dabARExciterBInput2OKEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 5, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBInput2OKEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBInput2OKEnable.setDescription('Description.Enable/Disable switch for dabARExciterBInput2OK event')
dabARExciterBLocalModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 5, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBLocalModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBLocalModeEnable.setDescription('Description.Enable/Disable switch for dabARExciterBLocalMode event')
dabARExciterBFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 5, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBFaultEnable.setDescription('Description.Enable/Disable switch for dabARExciterBFault event')
dabARExciterBWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 5, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBWarningEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBWarningEnable.setDescription('Description.Enable/Disable switch for dabARExciterBWarning event')
dabARExciterBActiveInputEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 5, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBActiveInputEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBActiveInputEnable.setDescription('Description.Enable/Disable switch for dabARExciterBActiveInput event')
dabARExciterBSFNModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 5, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBSFNModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBSFNModeEnable.setDescription('Description.Enable/Disable switch for dabARExciterBSFNMode event')
dabARExciterBMuteEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 5, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBMuteEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBMuteEnable.setDescription('Description.Enable/Disable switch for dabARExciterBMute event')
dabARExciterBRefFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 5, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBRefFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBRefFaultEnable.setDescription('Description.Enable/Disable switch for dabARExciterBRefFault event')
dabARExciterBWarningTimeStampEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 6, 5, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBWarningTimeStampEnable.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBWarningTimeStampEnable.setDescription('Description.Enable/Disable switch for dabARExciterBWarningTimeStamp event')
dabAREventPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7))
dabAREventPriorityGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1))
dabARInputPreselectionPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARInputPreselectionPriority.setStatus('current')
if mibBuilder.loadTexts: dabARInputPreselectionPriority.setDescription('Description.Priority for dabARInputPreselection event')
dabARInputAutomaticPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARInputAutomaticPriority.setStatus('current')
if mibBuilder.loadTexts: dabARInputAutomaticPriority.setDescription('Description.Priority for dabARInputAutomatic event')
dabARPreselectionExciterPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARPreselectionExciterPriority.setStatus('current')
if mibBuilder.loadTexts: dabARPreselectionExciterPriority.setDescription('Description.Priority for dabARPreselectionExciter event')
dabARPreselectionAmplifierPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARPreselectionAmplifierPriority.setStatus('current')
if mibBuilder.loadTexts: dabARPreselectionAmplifierPriority.setDescription('Description.Priority for dabARPreselectionAmplifier event')
dabARTransmitterOpModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARTransmitterOpModePriority.setStatus('current')
if mibBuilder.loadTexts: dabARTransmitterOpModePriority.setDescription('Description.Priority for dabARTransmitterOpMode event')
dabARReserveControlPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARReserveControlPriority.setStatus('current')
if mibBuilder.loadTexts: dabARReserveControlPriority.setDescription('Description.Priority for dabARReserveControl event')
dabARResetFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARResetFaultPriority.setStatus('obsolete')
if mibBuilder.loadTexts: dabARResetFaultPriority.setDescription('Massage is inactive!\n\t\t\t\t\n\t\t\t\tDescription.Priority for dabARResetFault event')
dabARActiveAmplifierPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARActiveAmplifierPriority.setStatus('current')
if mibBuilder.loadTexts: dabARActiveAmplifierPriority.setDescription('Description.Priority for dabARActiveAmplifier event')
dabARActiveExciterPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARActiveExciterPriority.setStatus('current')
if mibBuilder.loadTexts: dabARActiveExciterPriority.setDescription('Description.Priority for dabARActiveExciter event')
dabARLocalModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARLocalModePriority.setStatus('current')
if mibBuilder.loadTexts: dabARLocalModePriority.setDescription('Description.Priority for dabARLocalMode event')
dabARControlUnitFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARControlUnitFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabARControlUnitFaultPriority.setDescription('Description.Priority for dabARControlUnitFault event')
dabARExciterSwitchOverModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterSwitchOverModePriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverModePriority.setDescription('Description.Priority for dabARExciterSwitchOverMode event')
dabARExciterSwitchOverReadyPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterSwitchOverReadyPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverReadyPriority.setDescription('Description.Priority for dabARExciterSwitchOverReady event')
dabARExciterSwitchOverExecutedPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterSwitchOverExecutedPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverExecutedPriority.setDescription('Description.Priority for dabARExciterSwitchOverExecuted event')
dabARExciterSwitchOverFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterSwitchOverFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterSwitchOverFaultPriority.setDescription('Description.Priority for dabARExciterSwitchOverFault event')
dabARAmplifierSwitchOverModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierSwitchOverModePriority.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverModePriority.setDescription('Description.Priority for dabARAmplifierSwitchOverMode event')
dabARAmplifierSwitchOverReadyPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierSwitchOverReadyPriority.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverReadyPriority.setDescription('Description.Priority for dabARAmplifierSwitchOverReady event')
dabARAmplifierSwitchOverExecutedPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierSwitchOverExecutedPriority.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverExecutedPriority.setDescription('Description.Priority for dabARAmplifierSwitchOverExecuted event')
dabARAmplifierSwitchOverFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierSwitchOverFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierSwitchOverFaultPriority.setDescription('Description.Priority for dabARAmplifierSwitchOverFault event')
dabAREventPriorityAmplifierA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 2))
dabARAmplifierARFPresentPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 2, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierARFPresentPriority.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierARFPresentPriority.setDescription('Description.Priority for dabARAmplifierARFPresent event')
dabARAmplifierAFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 2, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierAFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierAFaultPriority.setDescription('Description.Priority for dabARAmplifierAFault event')
dabARAmplifierAWarningPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 2, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierAWarningPriority.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierAWarningPriority.setDescription('Description.Priority for dabARAmplifierAWarning event')
dabAREventPriorityAmplifierB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 3))
dabARAmplifierBRFPresentPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 3, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierBRFPresentPriority.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierBRFPresentPriority.setDescription('Description.Priority for dabARAmplifierBRFPresent event')
dabARAmplifierBFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 3, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierBFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierBFaultPriority.setDescription('Description.Priority for dabARAmplifierBFault event')
dabARAmplifierBWarningPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 3, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARAmplifierBWarningPriority.setStatus('current')
if mibBuilder.loadTexts: dabARAmplifierBWarningPriority.setDescription('Description.Priority for dabARAmplifierBWarning event')
dabAREventPriorityExciterA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 4))
dabARExciterAInput1OKPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 4, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterAInput1OKPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAInput1OKPriority.setDescription('Description.Priority for dabARExciterAInput1OK event')
dabARExciterAInput2OKPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 4, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterAInput2OKPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAInput2OKPriority.setDescription('Description.Priority for dabARExciterAInput2OK event')
dabARExciterALocalModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 4, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterALocalModePriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterALocalModePriority.setDescription('Description.Priority for dabARExciterALocalMode event')
dabARExciterAFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 4, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterAFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAFaultPriority.setDescription('Description.Priority for dabARExciterAFault event')
dabARExciterAWarningPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 4, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterAWarningPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAWarningPriority.setDescription('Description.Priority for dabARExciterAWarning event')
dabARExciterAActiveInputPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 4, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterAActiveInputPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAActiveInputPriority.setDescription('Description.Priority for dabARExciterAActiveInput event')
dabARExciterASFNModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 4, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterASFNModePriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterASFNModePriority.setDescription('Description.Priority for dabARExciterASFNMode event')
dabARExciterARefFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 4, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterARefFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterARefFaultPriority.setDescription('Description.Priority for Event dabARExciterARefFault event')
dabARExciterAMutePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 4, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterAMutePriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAMutePriority.setDescription('Description.Priority for dabARExciterAMute event')
dabARExciterAWarningTimeStampPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 4, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterAWarningTimeStampPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterAWarningTimeStampPriority.setDescription('Description.Priority for dabARExciterAWarningTimeStamp event')
dabAREventPriorityExciterB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 5))
dabARExciterBInput1OKPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 5, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBInput1OKPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBInput1OKPriority.setDescription('Description.Priority for dabARExciterBInput1OK event')
dabARExciterBInput2OKPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 5, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBInput2OKPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBInput2OKPriority.setDescription('Description.Priority for dabARExciterBInput2OK event')
dabARExciterBLocalModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 5, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBLocalModePriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBLocalModePriority.setDescription('Description.Priority for dabARExciterBLocalMode event')
dabARExciterBFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 5, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBFaultPriority.setDescription('Description.Priority for dabARExciterBFault event')
dabARExciterBWarningPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 5, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBWarningPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBWarningPriority.setDescription('Description.Priority for dabARExciterBWarning event')
dabARExciterBActiveInputPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 5, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBActiveInputPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBActiveInputPriority.setDescription('Description.Priority for dabARExciterBActiveInput event')
dabARExciterBSFNModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 5, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBSFNModePriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBSFNModePriority.setDescription('Description.Priority for dabARExciterBSFNMode event')
dabARExciterBMutePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 5, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBMutePriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBMutePriority.setDescription('Description.Priority for dabARExciterBMute event')
dabARExciterBRefFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 5, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBRefFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBRefFaultPriority.setDescription('Description.Priority for dabARExciterBRefFault event')
dabARExciterBWarningTimeStampPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 7, 5, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabARExciterBWarningTimeStampPriority.setStatus('current')
if mibBuilder.loadTexts: dabARExciterBWarningTimeStampPriority.setDescription('Description.Priority for dabARExciterBWarningTimeStamp event')
groupsAR = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 8))
objectGroupAR = ObjectGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 8, 1)).setObjects(("IRT-DAB-ACTIVERESERVE-MIB", "dabARInputPreselection"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARInputAutomatic"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARPreselectionExciter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARPreselectionAmplifier"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARTransmitterOpMode"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARReserveControl"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARActiveAmplifier"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARActiveExciter"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARLocalMode"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARControlUnitFault"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverMode"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverReady"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverExecuted"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverFault"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverMode"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverReady"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverExecuted"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverFault"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierARFPresent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierAFault"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierAWarning"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBRFPresent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBFault"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBWarning"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAInput1OK"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAInput2OK"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterALocalMode"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAFault"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAWarning"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAActiveInput"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterASFNMode"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterARefFault"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAMute"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAWarningTimeStamp"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBInput1OK"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBInput2OK"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBLocalMode"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBFault"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBWarning"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBActiveInput"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBSFNMode"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBMute"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBRefFault"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBWarningTimeStamp"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARInputPreselectionEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARInputAutomaticEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARPreselectionExciterEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARPreselectionAmplifierEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARTransmitterOpModeEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARReserveControlEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARActiveAmplifierEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARActiveExciterEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARLocalModeEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARControlUnitFaultEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverModeEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverExecutedEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverFaultEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverModeEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverReadyEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverExecutedEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverFaultEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverReadyEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierARFPresentEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierAFaultEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierAWarningEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBRFPresentEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBFaultEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBWarningEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAInput1OKEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAInput2OKEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterALocalModeEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAFaultEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAWarningEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAActiveInputEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterASFNModeEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterARefFaultEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAMuteEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAWarningTimeStampEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBInput1OKEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBInput2OKEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBLocalModeEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBFaultEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBWarningEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBActiveInputEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBSFNModeEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBMuteEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBRefFaultEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBWarningTimeStampEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARInputPreselectionPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARInputAutomaticPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARPreselectionExciterPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARPreselectionAmplifierPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARTransmitterOpModePriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARReserveControlPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARActiveAmplifierPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARActiveExciterPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARLocalModePriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARControlUnitFaultPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverModePriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverExecutedPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverFaultPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverModePriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverReadyPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverExecutedPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverFaultPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverReadyPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierARFPresentPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierAFaultPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierAWarningPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBRFPresentPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBFaultPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBWarningPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAInput1OKPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAInput2OKPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterALocalModePriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAFaultPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAWarningPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAActiveInputPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterASFNModePriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterARefFaultPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAMutePriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAWarningTimeStampPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBInput1OKPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBInput2OKPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBFaultPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBWarningPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBActiveInputPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBSFNModePriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBMutePriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBRefFaultPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBWarningTimeStampPriority"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBLocalModePriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    objectGroupAR = objectGroupAR.setStatus('current')
if mibBuilder.loadTexts: objectGroupAR.setDescription('Description. active reserve: object group')
eventGroupAR = NotificationGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 8, 2)).setObjects(("IRT-DAB-ACTIVERESERVE-MIB", "dabARInputPreselectionEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARInputAutomaticEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARPreselectionExciterEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARPreselectionAmplifierEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARTransmitterOpModeEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARReserveControlEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARActiveAmplifierEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARActiveExciterEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARLocalModeEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARControlUnitFaultEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverModeEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverReadyEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverExecutedEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterSwitchOverFaultEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverModeEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverReadyEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverExecutedEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierSwitchOverFaultEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierARFPresentEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierAFaultEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierAWarningEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBRFPresentEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBFaultEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARAmplifierBWarningEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAInput1OKEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAInput2OKEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterALocalModeEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAFaultEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAWarningEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAActiveInputEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterASFNModeEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterARefFaultEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAMuteEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterAWarningTimeStampEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBInput1OKEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBInput2OKEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBLocalModeEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBFaultEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBWarningEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBActiveInputEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBSFNModeEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBRefFaultEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBMuteEvent"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARExciterBWarningTimeStampEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventGroupAR = eventGroupAR.setStatus('current')
if mibBuilder.loadTexts: eventGroupAR.setDescription('Description. events')
objectGroupARobsolete = ObjectGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 8, 3)).setObjects(("IRT-DAB-ACTIVERESERVE-MIB", "dabARResetFault"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARResetFaultEnable"), ("IRT-DAB-ACTIVERESERVE-MIB", "dabARResetFaultPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    objectGroupARobsolete = objectGroupARobsolete.setStatus('obsolete')
if mibBuilder.loadTexts: objectGroupARobsolete.setDescription('Description. Inactive objects')
eventGroupARobsolete = NotificationGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 8, 4)).setObjects(("IRT-DAB-ACTIVERESERVE-MIB", "dabARResetFaultEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventGroupARobsolete = eventGroupARobsolete.setStatus('obsolete')
if mibBuilder.loadTexts: eventGroupARobsolete.setDescription(' Description.Inactive events')
complianceAR = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 10))
dabActiveReserveCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 2, 10, 1)).setObjects(("IRT-DAB-ACTIVERESERVE-MIB", "objectGroupAR"), ("IRT-DAB-ACTIVERESERVE-MIB", "eventGroupAR"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dabActiveReserveCompliance = dabActiveReserveCompliance.setStatus('current')
if mibBuilder.loadTexts: dabActiveReserveCompliance.setDescription('Compliance Statement')
mibBuilder.exportSymbols("IRT-DAB-ACTIVERESERVE-MIB", dabARAmplifierSwitchOverExecutedEvent=dabARAmplifierSwitchOverExecutedEvent, dabARExciterAInput1OKPriority=dabARExciterAInput1OKPriority, dabARExciterBRefFaultEvent=dabARExciterBRefFaultEvent, dabARExciterAWarningTimeStampEvent=dabARExciterAWarningTimeStampEvent, dabARResetFaultEvent=dabARResetFaultEvent, dabARAmplifierB=dabARAmplifierB, dabAREventEnableAmplifierA=dabAREventEnableAmplifierA, dabARExciterAFaultPriority=dabARExciterAFaultPriority, dabARInputAutomatic=dabARInputAutomatic, dabARReserveControl=dabARReserveControl, dabARAmplifierSwitchOverExecutedPriority=dabARAmplifierSwitchOverExecutedPriority, dabARExciterBInput1OKPriority=dabARExciterBInput1OKPriority, dabARExciterSwitchOverExecutedPriority=dabARExciterSwitchOverExecutedPriority, dabARExciterAActiveInputEvent=dabARExciterAActiveInputEvent, dabARExciterBWarningTimeStamp=dabARExciterBWarningTimeStamp, dabARAmplifierA=dabARAmplifierA, dabARExciterARefFaultEnable=dabARExciterARefFaultEnable, dabAREventPriorityAmplifierB=dabAREventPriorityAmplifierB, dabARAmplifierBWarning=dabARAmplifierBWarning, dabARAmplifierBWarningEvent=dabARAmplifierBWarningEvent, dabARControlUnitFaultEvent=dabARControlUnitFaultEvent, dabARAmplifierAWarning=dabARAmplifierAWarning, dabARExciterAFaultEvent=dabARExciterAFaultEvent, dabARExciterAWarningPriority=dabARExciterAWarningPriority, dabARExciterAInput1OK=dabARExciterAInput1OK, objectGroupARobsolete=objectGroupARobsolete, dabARInputAutomaticEvent=dabARInputAutomaticEvent, dabARExciterBWarningTimeStampEvent=dabARExciterBWarningTimeStampEvent, dabARPreselectionExciterEnable=dabARPreselectionExciterEnable, dabARExciterALocalModeEvent=dabARExciterALocalModeEvent, dabARAmplifierSwitchOverReadyPriority=dabARAmplifierSwitchOverReadyPriority, dabARExciterSwitchOverExecuted=dabARExciterSwitchOverExecuted, objectGroupAR=objectGroupAR, dabActiveReserve=dabActiveReserve, dabARAmplifierSwitchOverExecuted=dabARAmplifierSwitchOverExecuted, dabAREventEnable=dabAREventEnable, dabEventsAR=dabEventsAR, dabARExciterAActiveInputEnable=dabARExciterAActiveInputEnable, dabARExciterBMute=dabARExciterBMute, dabARExciterBActiveInputEvent=dabARExciterBActiveInputEvent, dabARExciterAFaultEnable=dabARExciterAFaultEnable, dabARExciterBLocalMode=dabARExciterBLocalMode, dabARLocalModeEvent=dabARLocalModeEvent, dabARExciterBSFNModeEvent=dabARExciterBSFNModeEvent, dabARExciterBInput1OK=dabARExciterBInput1OK, dabARInputAutomaticEnable=dabARInputAutomaticEnable, dabARExciterAActiveInput=dabARExciterAActiveInput, dabARInputPreselectionEvent=dabARInputPreselectionEvent, dabARPreselectionAmplifierEnable=dabARPreselectionAmplifierEnable, dabARExciterBSFNModePriority=dabARExciterBSFNModePriority, dabARExciterAWarning=dabARExciterAWarning, dabARExciterSwitchOverMode=dabARExciterSwitchOverMode, dabARExciterAInput2OKPriority=dabARExciterAInput2OKPriority, dabAREventEnableExciterA=dabAREventEnableExciterA, dabARAmplifierBWarningPriority=dabARAmplifierBWarningPriority, dabARAmplifierARFPresent=dabARAmplifierARFPresent, dabARLocalModePriority=dabARLocalModePriority, dabARExciterAInput2OK=dabARExciterAInput2OK, dabARExciterBWarningEnable=dabARExciterBWarningEnable, dabARExciterBFaultEvent=dabARExciterBFaultEvent, dabARAmplifierAFaultEnable=dabARAmplifierAFaultEnable, dabARExciterSwitchOverReadyEnable=dabARExciterSwitchOverReadyEnable, dabARExciterSwitchOverFaultPriority=dabARExciterSwitchOverFaultPriority, dabActiveReserveCompliance=dabActiveReserveCompliance, dabARExciterBLocalModePriority=dabARExciterBLocalModePriority, dabARAmplifierAWarningEnable=dabARAmplifierAWarningEnable, dabARExciterAMuteEvent=dabARExciterAMuteEvent, dabARReserveControlEvent=dabARReserveControlEvent, dabARResetFault=dabARResetFault, dabARInputPreselectionPriority=dabARInputPreselectionPriority, PYSNMP_MODULE_ID=dabActiveReserve, dabAREventPriorityExciterB=dabAREventPriorityExciterB, dabARTransmitterOpModePriority=dabARTransmitterOpModePriority, dabAREventPriorityGeneral=dabAREventPriorityGeneral, dabARAmplifierBFaultPriority=dabARAmplifierBFaultPriority, dabARAmplifierBRFPresent=dabARAmplifierBRFPresent, dabARExciterSwitchOverFaultEnable=dabARExciterSwitchOverFaultEnable, dabARPreselectionExciter=dabARPreselectionExciter, dabARResetFaultPriority=dabARResetFaultPriority, dabAREventEnableGeneral=dabAREventEnableGeneral, dabARAmplifierBRFPresentEnable=dabARAmplifierBRFPresentEnable, dabARLocalMode=dabARLocalMode, dabARExciterSwitchOverModePriority=dabARExciterSwitchOverModePriority, dabARExciterAWarningTimeStamp=dabARExciterAWarningTimeStamp, dabARAmplifierSwitchOverModeEvent=dabARAmplifierSwitchOverModeEvent, dabARInputPreselectionEnable=dabARInputPreselectionEnable, dabARExciterASFNMode=dabARExciterASFNMode, dabARGeneral=dabARGeneral, dabARExciterAInput1OKEnable=dabARExciterAInput1OKEnable, dabARExciterBActiveInputPriority=dabARExciterBActiveInputPriority, dabARExciterBFaultEnable=dabARExciterBFaultEnable, dabARActiveExciter=dabARActiveExciter, dabARExciterALocalMode=dabARExciterALocalMode, eventGroupARobsolete=eventGroupARobsolete, dabARAmplifierBRFPresentEvent=dabARAmplifierBRFPresentEvent, dabARExciterBInput2OK=dabARExciterBInput2OK, dabARExciterA=dabARExciterA, dabARExciterARefFault=dabARExciterARefFault, dabARActiveExciterPriority=dabARActiveExciterPriority, dabARExciterBWarningEvent=dabARExciterBWarningEvent, dabARAmplifierSwitchOverExecutedEnable=dabARAmplifierSwitchOverExecutedEnable, dabAREventPriority=dabAREventPriority, dabARExciterSwitchOverFault=dabARExciterSwitchOverFault, dabARAmplifierBRFPresentPriority=dabARAmplifierBRFPresentPriority, dabARPreselectionAmplifierEvent=dabARPreselectionAmplifierEvent, dabARTransmitterOpModeEnable=dabARTransmitterOpModeEnable, dabARAmplifierSwitchOverReadyEnable=dabARAmplifierSwitchOverReadyEnable, dabARExciterBWarningTimeStampEnable=dabARExciterBWarningTimeStampEnable, dabAREventEnableAmplifierB=dabAREventEnableAmplifierB, dabARReserveControlEnable=dabARReserveControlEnable, dabARExciterB=dabARExciterB, dabARExciterBWarningTimeStampPriority=dabARExciterBWarningTimeStampPriority, dabARAmplifierBFault=dabARAmplifierBFault, dabARExciterBInput1OKEnable=dabARExciterBInput1OKEnable, dabARExciterALocalModeEnable=dabARExciterALocalModeEnable, dabARExciterSwitchOverExecutedEnable=dabARExciterSwitchOverExecutedEnable, dabARExciterBSFNModeEnable=dabARExciterBSFNModeEnable, dabARReserveControlPriority=dabARReserveControlPriority, dabARActiveAmplifierEvent=dabARActiveAmplifierEvent, dabARAmplifierSwitchOverReadyEvent=dabARAmplifierSwitchOverReadyEvent, dabARAmplifierSwitchOverModeEnable=dabARAmplifierSwitchOverModeEnable, dabARControlUnitFaultPriority=dabARControlUnitFaultPriority, dabARExciterBSFNMode=dabARExciterBSFNMode, dabARActiveExciterEvent=dabARActiveExciterEvent, dabARExciterBWarning=dabARExciterBWarning, dabARLocalModeEnable=dabARLocalModeEnable, dabARActiveAmplifierEnable=dabARActiveAmplifierEnable, dabARExciterBActiveInput=dabARExciterBActiveInput, dabARActiveExciterEnable=dabARActiveExciterEnable, dabARActiveAmplifierPriority=dabARActiveAmplifierPriority, dabARExciterASFNModeEvent=dabARExciterASFNModeEvent, dabARExciterBWarningPriority=dabARExciterBWarningPriority, dabARExciterAMuteEnable=dabARExciterAMuteEnable, complianceAR=complianceAR, dabARExciterSwitchOverReady=dabARExciterSwitchOverReady, dabARExciterBLocalModeEnable=dabARExciterBLocalModeEnable, groupsAR=groupsAR, dabARAmplifierBWarningEnable=dabARAmplifierBWarningEnable, dabARExciterAInput2OKEnable=dabARExciterAInput2OKEnable, dabARAmplifierBFaultEnable=dabARAmplifierBFaultEnable, dabAREventPriorityExciterA=dabAREventPriorityExciterA, dabARControlUnitFault=dabARControlUnitFault, dabARAmplifierAFault=dabARAmplifierAFault, dabARExciterBRefFault=dabARExciterBRefFault, dabARExciterBFault=dabARExciterBFault, dabARPreselectionExciterPriority=dabARPreselectionExciterPriority, dabARControlUnitFaultEnable=dabARControlUnitFaultEnable, dabARAmplifierSwitchOverFaultEnable=dabARAmplifierSwitchOverFaultEnable, dabARExciterBRefFaultPriority=dabARExciterBRefFaultPriority, dabARExciterARefFaultEvent=dabARExciterARefFaultEvent, dabARResetFaultEnable=dabARResetFaultEnable, dabARExciterSwitchOverReadyPriority=dabARExciterSwitchOverReadyPriority, dabARAmplifierSwitchOverFaultEvent=dabARAmplifierSwitchOverFaultEvent, dabARActiveAmplifier=dabARActiveAmplifier, dabARExciterAMutePriority=dabARExciterAMutePriority, dabARAmplifierSwitchOverFault=dabARAmplifierSwitchOverFault, dabARAmplifierSwitchOverReady=dabARAmplifierSwitchOverReady, dabARExciterBInput2OKPriority=dabARExciterBInput2OKPriority, dabARExciterAWarningEnable=dabARExciterAWarningEnable, dabARExciterBInput2OKEnable=dabARExciterBInput2OKEnable, dabAREventEnableExciterB=dabAREventEnableExciterB, dabARExciterBMuteEnable=dabARExciterBMuteEnable, dabARExciterAActiveInputPriority=dabARExciterAActiveInputPriority, dabARPreselectionAmplifierPriority=dabARPreselectionAmplifierPriority, dabARAmplifierARFPresentEnable=dabARAmplifierARFPresentEnable, dabARExciterARefFaultPriority=dabARExciterARefFaultPriority, dabARExciterBFaultPriority=dabARExciterBFaultPriority, dabARExciterASFNModeEnable=dabARExciterASFNModeEnable, dabARInputAutomaticPriority=dabARInputAutomaticPriority, dabARExciterBInput2OKEvent=dabARExciterBInput2OKEvent, dabAREventPriorityAmplifierA=dabAREventPriorityAmplifierA, dabARTransmitterOpModeEvent=dabARTransmitterOpModeEvent, dabARExciterSwitchOverModeEnable=dabARExciterSwitchOverModeEnable, dabARAmplifierSwitchOverMode=dabARAmplifierSwitchOverMode, dabARExciterAMute=dabARExciterAMute, dabARExciterASFNModePriority=dabARExciterASFNModePriority, dabARTransmitterOpMode=dabARTransmitterOpMode, dabARExciterSwitchOverModeEvent=dabARExciterSwitchOverModeEvent, dabARAmplifierAFaultEvent=dabARAmplifierAFaultEvent, dabARExciterAFault=dabARExciterAFault, dabARPreselectionExciterEvent=dabARPreselectionExciterEvent, dabARExciterAInput1OKEvent=dabARExciterAInput1OKEvent, dabARExciterAInput2OKEvent=dabARExciterAInput2OKEvent, dabARExciterAWarningEvent=dabARExciterAWarningEvent, dabARExciterAWarningTimeStampEnable=dabARExciterAWarningTimeStampEnable, dabARExciterBMutePriority=dabARExciterBMutePriority, dabARExciterBRefFaultEnable=dabARExciterBRefFaultEnable, dabARExciterBLocalModeEvent=dabARExciterBLocalModeEvent, eventGroupAR=eventGroupAR, dabARExciterSwitchOverFaultEvent=dabARExciterSwitchOverFaultEvent, dabARAmplifierARFPresentEvent=dabARAmplifierARFPresentEvent, dabARPreselectionAmplifier=dabARPreselectionAmplifier, dabARExciterSwitchOverReadyEvent=dabARExciterSwitchOverReadyEvent, dabARExciterBInput1OKEvent=dabARExciterBInput1OKEvent, dabARExciterBActiveInputEnable=dabARExciterBActiveInputEnable, dabARAmplifierAFaultPriority=dabARAmplifierAFaultPriority, dabARInputPreselection=dabARInputPreselection, dabARExciterALocalModePriority=dabARExciterALocalModePriority, dabARAmplifierARFPresentPriority=dabARAmplifierARFPresentPriority, dabARAmplifierSwitchOverFaultPriority=dabARAmplifierSwitchOverFaultPriority, dabARExciterSwitchOverExecutedEvent=dabARExciterSwitchOverExecutedEvent, dabARAmplifierSwitchOverModePriority=dabARAmplifierSwitchOverModePriority, dabARAmplifierAWarningPriority=dabARAmplifierAWarningPriority, dabARExciterAWarningTimeStampPriority=dabARExciterAWarningTimeStampPriority, dabARAmplifierAWarningEvent=dabARAmplifierAWarningEvent, dabARAmplifierBFaultEvent=dabARAmplifierBFaultEvent, dabARExciterBMuteEvent=dabARExciterBMuteEvent)
