#
# PySNMP MIB module BKTEL-HFC862-NECE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/bktel/BKTEL-HFC862-NECE-MIB
# Produced by pysmi-1.1.12 at Tue May 28 12:03:47 2024
# On host fv-az1490-484 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ModuleWidthValue, NESlotValue, TruthValue, modules, PerceivedSeverityValue, DisplayString = mibBuilder.importSymbols("BKTEL-HFC862-BASE-MIB", "ModuleWidthValue", "NESlotValue", "TruthValue", "modules", "PerceivedSeverityValue", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ObjectIdentity, NotificationType, Unsigned32, TimeTicks, NotificationType, ModuleIdentity, experimental, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, MibIdentifier, Counter64, iso, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "NotificationType", "Unsigned32", "TimeTicks", "NotificationType", "ModuleIdentity", "experimental", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "MibIdentifier", "Counter64", "iso", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nece = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100))
neceCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 1))
neceStates = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2))
neceConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3))
neceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 4))
neceMeasuringValues = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 5))
neceDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 6))
class GpioType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("gpioTypeNotSupported", 1), ("gpioTypeInputOnly", 2), ("gpioTypeInputOrOutput", 3), ("gpioTypeOutputOnly", 4))

class GpioMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("gpioModeInput", 1), ("gpioModeInputIsNotify", 2), ("gpioModeInputIsWarning", 3), ("gpioModeInputIsAlarm", 4), ("gpioModeOutputOnAnyAlarm", 5), ("gpioModeOutputOnAnyWarning", 6))

class GpioLogicLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("gpioLevelActiveHigh", 1), ("gpioLevelActiveLow", 2))

class HmsTrapsComplianceValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("fullCompliant", 1), ("minorCompliant", 2))

class HfcInventoryFormatValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("format_DKS_T12_9", 1), ("format_T_Nova_E531i", 2))

class TrapVerifyTimeoutValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(30, 600)

class TrapAccumulationTimeValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 60)

class NESlotWriteValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 99)

neceCommonNumberOfModules = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceCommonNumberOfModules.setStatus('mandatory')
if mibBuilder.loadTexts: neceCommonNumberOfModules.setDescription('Number of modules in table.')
neceCommonTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 1, 2), )
if mibBuilder.loadTexts: neceCommonTable.setStatus('mandatory')
if mibBuilder.loadTexts: neceCommonTable.setDescription('The table contains all modules of the nece-type in the NE')
neceCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 1, 2, 1), ).setIndexNames((0, "BKTEL-HFC862-NECE-MIB", "neceNESlot"))
if mibBuilder.loadTexts: neceCommonEntry.setStatus('mandatory')
if mibBuilder.loadTexts: neceCommonEntry.setDescription('Common-Values for a module.')
neceNESlot = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 1, 2, 1, 1), NESlotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceNESlot.setStatus('mandatory')
if mibBuilder.loadTexts: neceNESlot.setDescription('The virtual slotID')
neceCommonType = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceCommonType.setStatus('mandatory')
if mibBuilder.loadTexts: neceCommonType.setDescription('Module model name')
neceCommonDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceCommonDescr.setStatus('mandatory')
if mibBuilder.loadTexts: neceCommonDescr.setDescription('Module alias name')
neceCommonFirmwareId = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceCommonFirmwareId.setStatus('mandatory')
if mibBuilder.loadTexts: neceCommonFirmwareId.setDescription('Module firmware version')
neceCommonModuleWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 1, 2, 1, 5), ModuleWidthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceCommonModuleWidth.setStatus('optional')
if mibBuilder.loadTexts: neceCommonModuleWidth.setDescription('The width of the module.')
neceStatesTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1), )
if mibBuilder.loadTexts: neceStatesTable.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesTable.setDescription('')
neceStatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-NECE-MIB", "neceNESlot"))
if mibBuilder.loadTexts: neceStatesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesEntry.setDescription('Alarms for a module.')
neceStatesGpInput1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 1), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesGpInput1.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesGpInput1.setDescription('State of general purpose input no. 1.')
neceStatesGpInput2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 2), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesGpInput2.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesGpInput2.setDescription('State of general purpose input no. 2.')
neceStatesGpInput3 = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 3), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesGpInput3.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesGpInput3.setDescription('State of general purpose input no. 3.')
neceStatesGpInput4 = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 4), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesGpInput4.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesGpInput4.setDescription('State of general purpose input no. 4.')
neceStatesGpInput5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 5), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesGpInput5.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesGpInput5.setDescription('State of general purpose input no. 5.')
neceStatesGpInput6 = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 6), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesGpInput6.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesGpInput6.setDescription('State of general purpose input no. 6.')
neceStatesGpInput7 = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 7), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesGpInput7.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesGpInput7.setDescription('State of general purpose input no. 7.')
neceStatesGpInput8 = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 8), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesGpInput8.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesGpInput8.setDescription('State of general purpose input no. 8.')
neceStatesGpInput9 = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 9), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesGpInput9.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesGpInput9.setDescription('State of general purpose input no. 9.')
neceStatesGpInput10 = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 10), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesGpInput10.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesGpInput10.setDescription('State of general purpose input no. 10.')
neceStatesGpInput11 = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 11), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesGpInput11.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesGpInput11.setDescription('State of general purpose input no. 11.')
neceStatesGpInput12 = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 12), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesGpInput12.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesGpInput12.setDescription('State of general purpose input no. 12.')
neceStatesPowerSupplyLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 13), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesPowerSupplyLeft.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesPowerSupplyLeft.setDescription('The left (looking from front side) power supply unit fails.\n        Only valid for 2G6 Systems !! Non 2G6 Systems always report clear(5)')
neceStatesPowerSupplyRight = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 14), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesPowerSupplyRight.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesPowerSupplyRight.setDescription('The right (looking from front side) power supply unit fails.\n        Only valid for 2G6 Systems !! Non 2G6 Systems always report clear(5)')
neceStatesFanLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 15), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesFanLeft.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesFanLeft.setDescription('The left (looking from front side) fan unit fails.\n        Only valid for 2G6 Systems !! Non 2G6 Systems always report clear(5)')
neceStatesFanRight = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 2, 1, 1, 16), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceStatesFanRight.setStatus('mandatory')
if mibBuilder.loadTexts: neceStatesFanRight.setDescription('The right (looking from front side) fan unit fails.\n        Only valid for 2G6 Systems !! Non 2G6 Systems always report clear(5)')
neceConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1), )
if mibBuilder.loadTexts: neceConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigurationTable.setDescription('')
neceConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-NECE-MIB", "neceNESlot"))
if mibBuilder.loadTexts: neceConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigurationEntry.setDescription('')
neceConfigGpio1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 1), GpioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceConfigGpio1Type.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio1Type.setDescription('The type of the general purpose port no. 1')
neceConfigGpio1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 2), GpioMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio1Mode.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio1Mode.setDescription('The mode of the general purpose port no. 1')
neceConfigGpio1LogicLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 3), GpioLogicLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio1LogicLevel.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio1LogicLevel.setDescription('The logic level of the general purpose port no. 1')
neceConfigGpio1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio1Description.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio1Description.setDescription('A description for the general purpose port no. 1')
neceConfigGpio2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 5), GpioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceConfigGpio2Type.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio2Type.setDescription('The type of the general purpose port no. 2')
neceConfigGpio2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 6), GpioMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio2Mode.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio2Mode.setDescription('The mode of the general purpose port no. 2')
neceConfigGpio2LogicLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 7), GpioLogicLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio2LogicLevel.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio2LogicLevel.setDescription('The logic level of the general purpose port no. 2')
neceConfigGpio2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio2Description.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio2Description.setDescription('A description for the general purpose port no. 2')
neceConfigGpio3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 9), GpioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceConfigGpio3Type.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio3Type.setDescription('The type of the general purpose port no. 3')
neceConfigGpio3Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 10), GpioMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio3Mode.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio3Mode.setDescription('The mode of the general purpose port no. 3')
neceConfigGpio3LogicLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 11), GpioLogicLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio3LogicLevel.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio3LogicLevel.setDescription('The logic level of the general purpose port no. 3')
neceConfigGpio3Description = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio3Description.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio3Description.setDescription('A description for the general purpose port no. 3')
neceConfigGpio4Type = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 13), GpioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceConfigGpio4Type.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio4Type.setDescription('The type of the general purpose port no. 4')
neceConfigGpio4Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 14), GpioMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio4Mode.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio4Mode.setDescription('The mode of the general purpose port no. 4')
neceConfigGpio4LogicLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 15), GpioLogicLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio4LogicLevel.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio4LogicLevel.setDescription('The logic level of the general purpose port no. 4')
neceConfigGpio4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio4Description.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio4Description.setDescription('A description for the general purpose port no. 4')
neceConfigGpio5Type = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 17), GpioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceConfigGpio5Type.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio5Type.setDescription('The type of the general purpose port no. 5')
neceConfigGpio5Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 18), GpioMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio5Mode.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio5Mode.setDescription('The mode of the general purpose port no. 5')
neceConfigGpio5LogicLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 19), GpioLogicLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio5LogicLevel.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio5LogicLevel.setDescription('The logic level of the general purpose port no. 5')
neceConfigGpio5Description = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio5Description.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio5Description.setDescription('A description for the general purpose port no. 5')
neceConfigGpio6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 21), GpioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceConfigGpio6Type.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio6Type.setDescription('The type of the general purpose port no. 6')
neceConfigGpio6Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 22), GpioMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio6Mode.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio6Mode.setDescription('The mode of the general purpose port no. 6')
neceConfigGpio6LogicLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 23), GpioLogicLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio6LogicLevel.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio6LogicLevel.setDescription('The logic level of the general purpose port no. 6')
neceConfigGpio6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio6Description.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio6Description.setDescription('A description for the general purpose port no. 6')
neceConfigGpio7Type = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 25), GpioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceConfigGpio7Type.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio7Type.setDescription('The type of the general purpose port no. 7')
neceConfigGpio7Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 26), GpioMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio7Mode.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio7Mode.setDescription('The mode of the general purpose port no. 7')
neceConfigGpio7LogicLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 27), GpioLogicLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio7LogicLevel.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio7LogicLevel.setDescription('The logic level of the general purpose port no. 7')
neceConfigGpio7Description = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio7Description.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio7Description.setDescription('A description for the general purpose port no. 7')
neceConfigGpio8Type = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 29), GpioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceConfigGpio8Type.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio8Type.setDescription('The type of the general purpose port no. 8')
neceConfigGpio8Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 30), GpioMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio8Mode.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio8Mode.setDescription('The mode of the general purpose port no. 8')
neceConfigGpio8LogicLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 31), GpioLogicLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio8LogicLevel.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio8LogicLevel.setDescription('The logic level of the general purpose port no. 8')
neceConfigGpio8Description = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio8Description.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio8Description.setDescription('A description for the general purpose port no. 8')
neceConfigGpio9Type = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 33), GpioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceConfigGpio9Type.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio9Type.setDescription('The type of the general purpose port no. 9')
neceConfigGpio9Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 34), GpioMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio9Mode.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio9Mode.setDescription('The mode of the general purpose port no. 9')
neceConfigGpio9LogicLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 35), GpioLogicLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio9LogicLevel.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio9LogicLevel.setDescription('The logic level of the general purpose port no. 9')
neceConfigGpio9Description = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio9Description.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio9Description.setDescription('A description for the general purpose port no. 9')
neceConfigGpio10Type = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 37), GpioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceConfigGpio10Type.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio10Type.setDescription('The type of the general purpose port no. 10')
neceConfigGpio10Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 38), GpioMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio10Mode.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio10Mode.setDescription('The mode of the general purpose port no. 10')
neceConfigGpio10LogicLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 39), GpioLogicLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio10LogicLevel.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio10LogicLevel.setDescription('The logic level of the general purpose port no. 10')
neceConfigGpio10Description = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio10Description.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio10Description.setDescription('A description for the general purpose port no. 10')
neceConfigGpio11Type = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 41), GpioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceConfigGpio11Type.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio11Type.setDescription('The type of the general purpose port no. 11')
neceConfigGpio11Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 42), GpioMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio11Mode.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio11Mode.setDescription('The mode of the general purpose port no. 11')
neceConfigGpio11LogicLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 43), GpioLogicLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio11LogicLevel.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio11LogicLevel.setDescription('The logic level of the general purpose port no. 11')
neceConfigGpio11Description = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio11Description.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio11Description.setDescription('A description for the general purpose port no. 11')
neceConfigGpio12Type = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 45), GpioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceConfigGpio12Type.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio12Type.setDescription('The type of the general purpose port no. 12')
neceConfigGpio12Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 46), GpioMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio12Mode.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio12Mode.setDescription('The mode of the general purpose port no. 12')
neceConfigGpio12LogicLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 47), GpioLogicLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio12LogicLevel.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio12LogicLevel.setDescription('The logic level of the general purpose port no. 12')
neceConfigGpio12Description = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGpio12Description.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGpio12Description.setDescription('A description for the general purpose port no. 12')
neceConfigNESlotWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 49), NESlotWriteValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigNESlotWrite.setStatus('optional')
if mibBuilder.loadTexts: neceConfigNESlotWrite.setDescription("By writing this variable a slot can be assigned\n            for devices that dont support hardware slot detection.\n            Reading '-1' means that the slot position is NOT writable.")
neceConfigIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 50), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigIpAddress.setDescription('The ip address of the NEC.\n                     NOTE: The NECE executes a reset if this parameter gets changed')
neceConfigNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 51), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigNetmask.setDescription('The netmask of the NEC.\n                     NOTE: The NECE executes a reset if this parameter gets changed')
neceConfigDefaultrouter = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 52), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigDefaultrouter.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigDefaultrouter.setDescription('The default router of the NEC.\n                     NOTE: The NECE executes a reset if this parameter gets changed')
neceConfigTrapReceiver1HostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 53), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigTrapReceiver1HostIp.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigTrapReceiver1HostIp.setDescription('The ip address of the host no.1 that should receive traps\n            Address  0.0.0.0 disables the trap. Broad- or multicast addresses\n            are not allowed')
neceConfigTrapReceiver1Community = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigTrapReceiver1Community.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigTrapReceiver1Community.setDescription('The community name used for traps to host no.1')
neceConfigTrapReceiver2HostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 55), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigTrapReceiver2HostIp.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigTrapReceiver2HostIp.setDescription('The ip address of the host no.2 that should receive traps\n            Address  0.0.0.0 disables the trap. Broad- or multicast addresses\n            are not allowed')
neceConfigTrapReceiver2to4Community = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigTrapReceiver2to4Community.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigTrapReceiver2to4Community.setDescription('The community name used for traps to hosts no.2 to no.4')
neceConfigTrapReceiver3HostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 57), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigTrapReceiver3HostIp.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigTrapReceiver3HostIp.setDescription("The ip address of the host no.3 that should receive traps\n            Address  0.0.0.0 disables the trap. Broad- or multicast addresses\n            are not allowed\n            NOTE: The community name 'neceConfigTrapReceiver2to4Community' is\n            used for this trap receiver no. 3")
neceConfigTrapReceiver4HostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 58), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigTrapReceiver4HostIp.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigTrapReceiver4HostIp.setDescription("The ip address of the host no.4 that should receive traps\n            Address  0.0.0.0 disables the trap. Broad- or multicast addresses\n            are not allowed\n            NOTE: The community name 'neceConfigTrapReceiver2to4Community' is\n            used for this trap receiver no. 4")
neceConfigGetCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigGetCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigGetCommunity.setDescription("The community name that is allowed for GET requests\n                     NOTES:\n                     - By writing 'neceConfigGetCommunity' AND 'neceConfigSetCommunity'\n                       to an empty string of size 0, the default community settings\n                       are used.")
neceConfigSetCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigSetCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigSetCommunity.setDescription("The community name that is allowed for SET and GET requests\n                     NOTES:\n                     - By writing 'neceConfigGetCommunity' AND 'neceConfigSetCommunity'\n                       to an empty string of size 0, the default community settings\n                       are used.")
neceConfigTrapReceiverVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 61), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigTrapReceiverVerify.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigTrapReceiverVerify.setDescription("If TRUE, the NECE verifies if the 'sysDescr' variable is readable on host\n                    with ip-address 'neceConfigTrapVerifyReceiverIp' before sending new traps.\n                    NOTE: The NECE executes a reset if this parameter gets changed")
neceConfigTrapVerifyReceiverIp = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 62), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigTrapVerifyReceiverIp.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigTrapVerifyReceiverIp.setDescription("The ip address of the host that should receive the 'sysDescr' verify request.\n                    Broad- or multicast addresses are not allowed.\n                    !!! Only valid if neceConfigTrapReceiverVerify == true(1) !!!")
neceConfigTrapVerifyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 63), TrapVerifyTimeoutValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigTrapVerifyTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigTrapVerifyTimeout.setDescription("Timeout in seconds after which the NECE stops trying to verify 'sysDescr'.\n                    All pending traps are sent, although no verify response, after that timeout.\n                    !!! Only valid if neceConfigTrapReceiverVerify == true(1) !!!")
neceConfigTrapAccumulationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 64), TrapAccumulationTimeValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigTrapAccumulationTime.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigTrapAccumulationTime.setDescription("Time in seconds that the NECE waits before sending all pending traps.\n                    NOTE: There are two condition where the NECE sends its pending traps earlier\n                    ignoring this accumulation time (of course verifying first):\n                    1) The NECE's internal trap buffer is 3/4 full\n                    2) The NECE's SNMP agent is polled by a request from manager\n                    !!! Only valid if neceConfigTrapReceiverVerify == true(1) !!!")
neceConfigCableWatchUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 65), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigCableWatchUsed.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigCableWatchUsed.setDescription('This parameter is obsolete and no more needed, always returns false(2)')
neceConfigHmsTrapsCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 66), HmsTrapsComplianceValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigHmsTrapsCompliance.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigHmsTrapsCompliance.setDescription('Set the compliance mode of the SCTE HMS traps\n                     In earlier versions of NECE (<= Sw.Rel. 1.10) the trap compliance\n                     to the SCTE HMS MIBs was not fully given. See manual for details.')
neceConfigHmsNotificationsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 67), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigHmsNotificationsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigHmsNotificationsEnable.setDescription('With this control the user can disable all traps of type NOTIFY\n                     and there entries in the SCTE HMS tree.\n                     NOTE: The NECE executes a reset if this parameter gets changed')
neceConfigHfcInventoryFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 68), HfcInventoryFormatValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceConfigHfcInventoryFormat.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigHfcInventoryFormat.setDescription('Selects the supported format of the hfcInventoryFabricData (T-NOVA-HFC-INVENTORY-MIB)')
neceConfigTimezone = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-24, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigTimezone.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigTimezone.setDescription("The timezone in units of half hours from GMT (Greenwich Mean Time).\n                     For example:\n                       Berlin  =>  +2 half hours means GMT+1 hour\n                       Tokio   => +18 half hours means GMT+9 hours\n                       NewYork => -10 half hours means GMT-5 hours\n                     NOTE: Not all NECE's support an NTP server.")
neceConfigNtpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 70), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigNtpServerIp.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigNtpServerIp.setDescription("The ip address of an NTP time server.\n                     Setting the ip to 0.0.0.0 disables the time server lookup.\n                     NOTE: Not all NECE's support an NTP server.")
neceConfigFactoryCommandLine = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 71), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigFactoryCommandLine.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigFactoryCommandLine.setDescription('A factory internal command interface')
neceConfigDaylightSavingFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 72), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigDaylightSavingFrom.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigDaylightSavingFrom.setDescription('Daylight saving start time in a special textformat (see manual for detail)')
neceConfigDaylightSavingTo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 3, 1, 1, 73), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceConfigDaylightSavingTo.setStatus('mandatory')
if mibBuilder.loadTexts: neceConfigDaylightSavingTo.setDescription('Daylight saving end time in a special textformat (see manual for detail)')
neceControlTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 4, 1), )
if mibBuilder.loadTexts: neceControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: neceControlTable.setDescription('')
neceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 4, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-NECE-MIB", "neceNESlot"))
if mibBuilder.loadTexts: neceControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: neceControlEntry.setDescription('Alarms for a module.')
neceControlReset = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 4, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neceControlReset.setStatus('mandatory')
if mibBuilder.loadTexts: neceControlReset.setDescription('Reset the module.')
neceMeasuringValuesTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 5, 1), )
if mibBuilder.loadTexts: neceMeasuringValuesTable.setStatus('mandatory')
if mibBuilder.loadTexts: neceMeasuringValuesTable.setDescription('')
neceMeasuringValuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 5, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-NECE-MIB", "neceNESlot"))
if mibBuilder.loadTexts: neceMeasuringValuesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: neceMeasuringValuesEntry.setDescription('Common-Values for a module.')
neceTemperatureLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceTemperatureLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: neceTemperatureLoLo.setDescription('Temperature low alarm threshold in steps of 0,1C.')
neceTemperatureLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceTemperatureLo.setStatus('mandatory')
if mibBuilder.loadTexts: neceTemperatureLo.setDescription('Temperature low warning threshold in steps of 0,1C.')
neceTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceTemperatureValue.setStatus('mandatory')
if mibBuilder.loadTexts: neceTemperatureValue.setDescription('Temperature in steps of 0,1C.')
neceTemperatureHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceTemperatureHi.setStatus('mandatory')
if mibBuilder.loadTexts: neceTemperatureHi.setDescription('Temperature high warning threshold in steps of 0,1C.')
neceTemperatureHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceTemperatureHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: neceTemperatureHiHi.setDescription('Temperature high alarm threshold in steps of 0,1C.')
neceDisplayTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 6, 1), )
if mibBuilder.loadTexts: neceDisplayTable.setStatus('mandatory')
if mibBuilder.loadTexts: neceDisplayTable.setDescription('')
neceDisplayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 6, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-NECE-MIB", "neceNESlot"))
if mibBuilder.loadTexts: neceDisplayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: neceDisplayEntry.setDescription('')
neceDisplayTrapsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceDisplayTrapsSent.setStatus('mandatory')
if mibBuilder.loadTexts: neceDisplayTrapsSent.setDescription('Number of traps that the NECE has sent.')
neceDisplayTrapsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 100, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neceDisplayTrapsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: neceDisplayTrapsDiscarded.setDescription('Number of traps that the NECE has discarded.\n                     Discarded traps occur because of trap buffer overflow or timeouts.')
mibBuilder.exportSymbols("BKTEL-HFC862-NECE-MIB", neceConfigGpio7Type=neceConfigGpio7Type, neceConfigGpio10Mode=neceConfigGpio10Mode, neceConfigTimezone=neceConfigTimezone, neceConfigGpio3LogicLevel=neceConfigGpio3LogicLevel, neceCommonModuleWidth=neceCommonModuleWidth, neceStatesGpInput11=neceStatesGpInput11, neceCommonEntry=neceCommonEntry, neceStatesGpInput4=neceStatesGpInput4, neceTemperatureHiHi=neceTemperatureHiHi, neceConfigGpio6Description=neceConfigGpio6Description, neceConfigGpio9Description=neceConfigGpio9Description, neceStatesPowerSupplyLeft=neceStatesPowerSupplyLeft, neceConfigGpio1Description=neceConfigGpio1Description, neceConfigGpio11LogicLevel=neceConfigGpio11LogicLevel, neceStatesGpInput3=neceStatesGpInput3, neceDisplayTrapsDiscarded=neceDisplayTrapsDiscarded, neceConfigGpio11Description=neceConfigGpio11Description, neceConfigGpio8Mode=neceConfigGpio8Mode, nece=nece, TrapVerifyTimeoutValue=TrapVerifyTimeoutValue, neceConfigGpio4Mode=neceConfigGpio4Mode, neceConfigGpio9Type=neceConfigGpio9Type, neceConfigTrapReceiver1Community=neceConfigTrapReceiver1Community, neceConfigTrapVerifyReceiverIp=neceConfigTrapVerifyReceiverIp, neceStatesGpInput12=neceStatesGpInput12, neceConfigNtpServerIp=neceConfigNtpServerIp, neceTemperatureLoLo=neceTemperatureLoLo, neceConfigGetCommunity=neceConfigGetCommunity, neceStatesGpInput6=neceStatesGpInput6, neceConfigGpio3Description=neceConfigGpio3Description, neceConfigurationTable=neceConfigurationTable, neceConfigTrapReceiver2to4Community=neceConfigTrapReceiver2to4Community, neceConfigGpio6LogicLevel=neceConfigGpio6LogicLevel, TrapAccumulationTimeValue=TrapAccumulationTimeValue, neceTemperatureHi=neceTemperatureHi, neceConfigGpio5Description=neceConfigGpio5Description, neceConfigDefaultrouter=neceConfigDefaultrouter, neceConfigDaylightSavingFrom=neceConfigDaylightSavingFrom, neceConfigTrapReceiverVerify=neceConfigTrapReceiverVerify, neceStatesGpInput9=neceStatesGpInput9, neceConfigFactoryCommandLine=neceConfigFactoryCommandLine, HmsTrapsComplianceValue=HmsTrapsComplianceValue, neceDisplayTrapsSent=neceDisplayTrapsSent, GpioMode=GpioMode, neceStatesGpInput10=neceStatesGpInput10, neceConfigGpio3Mode=neceConfigGpio3Mode, neceStatesGpInput1=neceStatesGpInput1, neceNESlot=neceNESlot, neceConfigSetCommunity=neceConfigSetCommunity, neceConfigCableWatchUsed=neceConfigCableWatchUsed, neceConfigGpio4LogicLevel=neceConfigGpio4LogicLevel, neceConfigGpio6Mode=neceConfigGpio6Mode, neceConfigGpio7Description=neceConfigGpio7Description, neceCommon=neceCommon, neceConfigTrapReceiver4HostIp=neceConfigTrapReceiver4HostIp, neceConfigGpio10LogicLevel=neceConfigGpio10LogicLevel, neceStates=neceStates, neceConfigGpio8Description=neceConfigGpio8Description, neceConfigTrapAccumulationTime=neceConfigTrapAccumulationTime, neceTemperatureValue=neceTemperatureValue, neceStatesGpInput8=neceStatesGpInput8, neceConfigGpio12Description=neceConfigGpio12Description, neceCommonDescr=neceCommonDescr, neceStatesGpInput5=neceStatesGpInput5, neceStatesGpInput7=neceStatesGpInput7, neceConfigGpio9LogicLevel=neceConfigGpio9LogicLevel, neceConfigGpio3Type=neceConfigGpio3Type, neceConfiguration=neceConfiguration, neceConfigDaylightSavingTo=neceConfigDaylightSavingTo, neceConfigGpio5LogicLevel=neceConfigGpio5LogicLevel, neceConfigHfcInventoryFormat=neceConfigHfcInventoryFormat, neceStatesTable=neceStatesTable, neceConfigGpio8LogicLevel=neceConfigGpio8LogicLevel, neceConfigNetmask=neceConfigNetmask, neceControlReset=neceControlReset, neceConfigHmsTrapsCompliance=neceConfigHmsTrapsCompliance, neceConfigGpio6Type=neceConfigGpio6Type, GpioLogicLevel=GpioLogicLevel, neceTemperatureLo=neceTemperatureLo, neceCommonNumberOfModules=neceCommonNumberOfModules, neceConfigGpio11Type=neceConfigGpio11Type, neceDisplayTable=neceDisplayTable, neceConfigTrapReceiver2HostIp=neceConfigTrapReceiver2HostIp, neceDisplayEntry=neceDisplayEntry, neceConfigGpio1LogicLevel=neceConfigGpio1LogicLevel, neceConfigGpio9Mode=neceConfigGpio9Mode, neceConfigGpio1Type=neceConfigGpio1Type, NESlotWriteValue=NESlotWriteValue, neceConfigGpio8Type=neceConfigGpio8Type, neceConfigurationEntry=neceConfigurationEntry, neceConfigGpio12Type=neceConfigGpio12Type, neceConfigGpio2Description=neceConfigGpio2Description, neceConfigTrapVerifyTimeout=neceConfigTrapVerifyTimeout, neceConfigGpio5Mode=neceConfigGpio5Mode, neceStatesPowerSupplyRight=neceStatesPowerSupplyRight, neceMeasuringValues=neceMeasuringValues, neceStatesEntry=neceStatesEntry, neceConfigGpio7Mode=neceConfigGpio7Mode, neceMeasuringValuesTable=neceMeasuringValuesTable, neceStatesFanLeft=neceStatesFanLeft, neceConfigGpio12Mode=neceConfigGpio12Mode, neceConfigGpio4Description=neceConfigGpio4Description, GpioType=GpioType, neceStatesGpInput2=neceStatesGpInput2, neceConfigTrapReceiver3HostIp=neceConfigTrapReceiver3HostIp, neceConfigGpio2Mode=neceConfigGpio2Mode, neceConfigTrapReceiver1HostIp=neceConfigTrapReceiver1HostIp, neceConfigHmsNotificationsEnable=neceConfigHmsNotificationsEnable, neceConfigGpio2Type=neceConfigGpio2Type, HfcInventoryFormatValue=HfcInventoryFormatValue, neceConfigGpio10Description=neceConfigGpio10Description, neceMeasuringValuesEntry=neceMeasuringValuesEntry, neceStatesFanRight=neceStatesFanRight, neceControlTable=neceControlTable, neceConfigGpio10Type=neceConfigGpio10Type, neceConfigGpio4Type=neceConfigGpio4Type, neceControlEntry=neceControlEntry, neceConfigGpio5Type=neceConfigGpio5Type, neceCommonTable=neceCommonTable, neceConfigGpio11Mode=neceConfigGpio11Mode, neceConfigIpAddress=neceConfigIpAddress, neceConfigNESlotWrite=neceConfigNESlotWrite, neceCommonFirmwareId=neceCommonFirmwareId, neceDisplay=neceDisplay, neceConfigGpio12LogicLevel=neceConfigGpio12LogicLevel, neceCommonType=neceCommonType, neceControl=neceControl, neceConfigGpio1Mode=neceConfigGpio1Mode, neceConfigGpio7LogicLevel=neceConfigGpio7LogicLevel, neceConfigGpio2LogicLevel=neceConfigGpio2LogicLevel)
